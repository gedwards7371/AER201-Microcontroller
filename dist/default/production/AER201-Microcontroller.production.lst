

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 22 17:35:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.40
   112                           ; Generated 01/12/2016 GMT
   113                           ; 
   114                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4620 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  004814                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for UI@F3225
   151  004814  4D                 	db	77
   152  004815  4D                 	db	77
   153  004816  4D                 	db	77
   154  004817  00                 	db	0
   155                           
   156                           ;initializer for printRTC@F3216
   157  004818  4D                 	db	77
   158  004819  4D                 	db	77
   159  00481A  4D                 	db	77
   160  00481B  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FB24                     __pmediumconst:
   164                           	opt stack 0
   165  00FB24  00                 	db	0
   166  00FB25                     _keys:
   167                           	opt stack 0
   168  00FB25  31                 	db	49
   169  00FB26  32                 	db	50
   170  00FB27  33                 	db	51
   171  00FB28  41                 	db	65
   172  00FB29  34                 	db	52
   173  00FB2A  35                 	db	53
   174  00FB2B  36                 	db	54
   175  00FB2C  42                 	db	66
   176  00FB2D  37                 	db	55
   177  00FB2E  38                 	db	56
   178  00FB2F  39                 	db	57
   179  00FB30  43                 	db	67
   180  00FB31  2A                 	db	42
   181  00FB32  30                 	db	48
   182  00FB33  23                 	db	35
   183  00FB34  44                 	db	68
   184  00FB35  00                 	db	0
   185  00FB36                     __end_of_keys:
   186                           	opt stack 0
   187  00FB36                     _dpowers:
   188                           	opt stack 0
   189  00FB36  0001               	dw	1
   190  00FB38  000A               	dw	10
   191  00FB3A  0064               	dw	100
   192  00FB3C  03E8               	dw	1000
   193  00FB3E  2710               	dw	10000
   194  00FB40                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _EEADR	set	4009
   205  0000                     _EEADRH	set	4010
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATA	set	3977
   211  0000                     _LATAbits	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATCbits	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADIE	set	31982
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB40                     STR_21:
   268  00FB40  25                 	db	37
   269  00FB41  30                 	db	48	;'0'
   270  00FB42  32                 	db	50	;'2'
   271  00FB43  64                 	db	100	;'d'
   272  00FB44  25                 	db	37
   273  00FB45  73                 	db	115	;'s'
   274  00FB46  20                 	db	32
   275  00FB47  7C                 	db	124
   276  00FB48  20                 	db	32
   277  00FB49  25                 	db	37
   278  00FB4A  30                 	db	48	;'0'
   279  00FB4B  32                 	db	50	;'2'
   280  00FB4C  64                 	db	100	;'d'
   281  00FB4D  3A                 	db	58	;':'
   282  00FB4E  25                 	db	37
   283  00FB4F  30                 	db	48	;'0'
   284  00FB50  32                 	db	50	;'2'
   285  00FB51  64                 	db	100	;'d'
   286  00FB52  3A                 	db	58	;':'
   287  00FB53  25                 	db	37
   288  00FB54  30                 	db	48	;'0'
   289  00FB55  32                 	db	50	;'2'
   290  00FB56  64                 	db	100	;'d'
   291  00FB57  00                 	db	0
   292  00FB58                     STR_66:
   293  00FB58  28                 	db	40
   294  00FB59  64                 	db	100	;'d'
   295  00FB5A  61                 	db	97	;'a'
   296  00FB5B  74                 	db	116	;'t'
   297  00FB5C  61                 	db	97	;'a'
   298  00FB5D  3A                 	db	58	;':'
   299  00FB5E  20                 	db	32
   300  00FB5F  25                 	db	37
   301  00FB60  75                 	db	117	;'u'
   302  00FB61  2C                 	db	44
   303  00FB62  20                 	db	32
   304  00FB63  61                 	db	97	;'a'
   305  00FB64  64                 	db	100	;'d'
   306  00FB65  64                 	db	100	;'d'
   307  00FB66  72                 	db	114	;'r'
   308  00FB67  3A                 	db	58	;':'
   309  00FB68  20                 	db	32
   310  00FB69  25                 	db	37
   311  00FB6A  75                 	db	117	;'u'
   312  00FB6B  29                 	db	41
   313  00FB6C  00                 	db	0
   314  00FB6D                     STR_111:
   315  00FB6D  44                 	db	68	;'D'
   316  00FB6E  20                 	db	32
   317  00FB6F  57                 	db	87	;'W'
   318  00FB70  49                 	db	73	;'I'
   319  00FB71  4C                 	db	76	;'L'
   320  00FB72  4C                 	db	76	;'L'
   321  00FB73  20                 	db	32
   322  00FB74  52                 	db	82	;'R'
   323  00FB75  45                 	db	69	;'E'
   324  00FB76  54                 	db	84	;'T'
   325  00FB77  55                 	db	85	;'U'
   326  00FB78  52                 	db	82	;'R'
   327  00FB79  4E                 	db	78	;'N'
   328  00FB7A  20                 	db	32
   329  00FB7B  20                 	db	32
   330  00FB7C  20                 	db	32
   331  00FB7D  20                 	db	32
   332  00FB7E  00                 	db	0
   333  00FB7F                     STR_112:
   334  00FB7F  4F                 	db	79	;'O'
   335  00FB80  54                 	db	84	;'T'
   336  00FB81  48                 	db	72	;'H'
   337  00FB82  45                 	db	69	;'E'
   338  00FB83  52                 	db	82	;'R'
   339  00FB84  20                 	db	32
   340  00FB85  53                 	db	83	;'S'
   341  00FB86  45                 	db	69	;'E'
   342  00FB87  54                 	db	84	;'T'
   343  00FB88  53                 	db	83	;'S'
   344  00FB89  20                 	db	32
   345  00FB8A  52                 	db	82	;'R'
   346  00FB8B  41                 	db	65	;'A'
   347  00FB8C  35                 	db	53	;'5'
   348  00FB8D  20                 	db	32
   349  00FB8E  20                 	db	32
   350  00FB8F  20                 	db	32
   351  00FB90  00                 	db	0
   352  00FB91                     STR_3:
   353  00FB91  2D                 	db	45
   354  00FB92  2D                 	db	45
   355  00FB93  20                 	db	32
   356  00FB94  4C                 	db	76	;'L'
   357  00FB95  4F                 	db	79	;'O'
   358  00FB96  47                 	db	71	;'G'
   359  00FB97  20                 	db	32
   360  00FB98  25                 	db	37
   361  00FB99  32                 	db	50	;'2'
   362  00FB9A  64                 	db	100	;'d'
   363  00FB9B  20                 	db	32
   364  00FB9C  48                 	db	72	;'H'
   365  00FB9D  45                 	db	69	;'E'
   366  00FB9E  52                 	db	82	;'R'
   367  00FB9F  45                 	db	69	;'E'
   368  00FBA0  2D                 	db	45
   369  00FBA1  2D                 	db	45
   370  00FBA2  00                 	db	0
   371  00FBA3                     STR_1:
   372  00FBA3  52                 	db	82	;'R'
   373  00FBA4  45                 	db	69	;'E'
   374  00FBA5  53                 	db	83	;'S'
   375  00FBA6  55                 	db	85	;'U'
   376  00FBA7  4C                 	db	76	;'L'
   377  00FBA8  54                 	db	84	;'T'
   378  00FBA9  53                 	db	83	;'S'
   379  00FBAA  20                 	db	32
   380  00FBAB  49                 	db	73	;'I'
   381  00FBAC  4E                 	db	78	;'N'
   382  00FBAD  20                 	db	32
   383  00FBAE  4C                 	db	76	;'L'
   384  00FBAF  4F                 	db	79	;'O'
   385  00FBB0  47                 	db	71	;'G'
   386  00FBB1  20                 	db	32
   387  00FBB2  25                 	db	37
   388  00FBB3  64                 	db	100	;'d'
   389  00FBB4  00                 	db	0
   390  00FBB5                     STR_102:
   391  00FBB5  4D                 	db	77	;'M'
   392  00FBB6  49                 	db	73	;'I'
   393  00FBB7  44                 	db	68	;'D'
   394  00FBB8  20                 	db	32
   395  00FBB9  2D                 	db	45
   396  00FBBA  2D                 	db	45
   397  00FBBB  20                 	db	32
   398  00FBBC  32                 	db	50	;'2'
   399  00FBBD  73                 	db	115	;'s'
   400  00FBBE  20                 	db	32
   401  00FBBF  20                 	db	32
   402  00FBC0  20                 	db	32
   403  00FBC1  20                 	db	32
   404  00FBC2  20                 	db	32
   405  00FBC3  20                 	db	32
   406  00FBC4  20                 	db	32
   407  00FBC5  00                 	db	0
   408  00FBC6                     STR_105:
   409  00FBC6  44                 	db	68	;'D'
   410  00FBC7  52                 	db	82	;'R'
   411  00FBC8  4F                 	db	79	;'O'
   412  00FBC9  50                 	db	80	;'P'
   413  00FBCA  20                 	db	32
   414  00FBCB  2D                 	db	45
   415  00FBCC  2D                 	db	45
   416  00FBCD  20                 	db	32
   417  00FBCE  32                 	db	50	;'2'
   418  00FBCF  73                 	db	115	;'s'
   419  00FBD0  20                 	db	32
   420  00FBD1  20                 	db	32
   421  00FBD2  20                 	db	32
   422  00FBD3  20                 	db	32
   423  00FBD4  20                 	db	32
   424  00FBD5  20                 	db	32
   425  00FBD6  00                 	db	0
   426  00FBD7                     STR_99:
   427  00FBD7  4C                 	db	76	;'L'
   428  00FBD8  45                 	db	69	;'E'
   429  00FBD9  46                 	db	70	;'F'
   430  00FBDA  54                 	db	84	;'T'
   431  00FBDB  20                 	db	32
   432  00FBDC  2D                 	db	45
   433  00FBDD  2D                 	db	45
   434  00FBDE  20                 	db	32
   435  00FBDF  32                 	db	50	;'2'
   436  00FBE0  73                 	db	115	;'s'
   437  00FBE1  20                 	db	32
   438  00FBE2  20                 	db	32
   439  00FBE3  20                 	db	32
   440  00FBE4  20                 	db	32
   441  00FBE5  20                 	db	32
   442  00FBE6  20                 	db	32
   443  00FBE7  00                 	db	0
   444  00FBE8                     STR_104:
   445  00FBE8  4C                 	db	76	;'L'
   446  00FBE9  45                 	db	69	;'E'
   447  00FBEA  56                 	db	86	;'V'
   448  00FBEB  45                 	db	69	;'E'
   449  00FBEC  4C                 	db	76	;'L'
   450  00FBED  20                 	db	32
   451  00FBEE  2D                 	db	45
   452  00FBEF  2D                 	db	45
   453  00FBF0  20                 	db	32
   454  00FBF1  32                 	db	50	;'2'
   455  00FBF2  73                 	db	115	;'s'
   456  00FBF3  20                 	db	32
   457  00FBF4  20                 	db	32
   458  00FBF5  20                 	db	32
   459  00FBF6  20                 	db	32
   460  00FBF7  20                 	db	32
   461  00FBF8  00                 	db	0
   462  00FBF9                     STR_98:
   463  00FBF9  52                 	db	82	;'R'
   464  00FBFA  49                 	db	73	;'I'
   465  00FBFB  47                 	db	71	;'G'
   466  00FBFC  48                 	db	72	;'H'
   467  00FBFD  54                 	db	84	;'T'
   468  00FBFE  20                 	db	32
   469  00FBFF  2D                 	db	45
   470  00FC00  2D                 	db	45
   471  00FC01  20                 	db	32
   472  00FC02  32                 	db	50	;'2'
   473  00FC03  73                 	db	115	;'s'
   474  00FC04  20                 	db	32
   475  00FC05  20                 	db	32
   476  00FC06  20                 	db	32
   477  00FC07  20                 	db	32
   478  00FC08  20                 	db	32
   479  00FC09  00                 	db	0
   480  00FC0A                     STR_97:
   481  00FC0A  4D                 	db	77	;'M'
   482  00FC0B  49                 	db	73	;'I'
   483  00FC0C  44                 	db	68	;'D'
   484  00FC0D  44                 	db	68	;'D'
   485  00FC0E  4C                 	db	76	;'L'
   486  00FC0F  45                 	db	69	;'E'
   487  00FC10  20                 	db	32
   488  00FC11  2D                 	db	45
   489  00FC12  2D                 	db	45
   490  00FC13  20                 	db	32
   491  00FC14  32                 	db	50	;'2'
   492  00FC15  73                 	db	115	;'s'
   493  00FC16  20                 	db	32
   494  00FC17  20                 	db	32
   495  00FC18  20                 	db	32
   496  00FC19  20                 	db	32
   497  00FC1A  00                 	db	0
   498  00FC1B                     STR_114:
   499  00FC1B  44                 	db	68	;'D'
   500  00FC1C  20                 	db	32
   501  00FC1D  57                 	db	87	;'W'
   502  00FC1E  49                 	db	73	;'I'
   503  00FC1F  4C                 	db	76	;'L'
   504  00FC20  4C                 	db	76	;'L'
   505  00FC21  20                 	db	32
   506  00FC22  52                 	db	82	;'R'
   507  00FC23  45                 	db	69	;'E'
   508  00FC24  54                 	db	84	;'T'
   509  00FC25  55                 	db	85	;'U'
   510  00FC26  52                 	db	82	;'R'
   511  00FC27  4E                 	db	78	;'N'
   512  00FC28  20                 	db	32
   513  00FC29  20                 	db	32
   514  00FC2A  20                 	db	32
   515  00FC2B  00                 	db	0
   516  00FC2C                     STR_100:
   517  00FC2C  4D                 	db	77	;'M'
   518  00FC2D  49                 	db	73	;'I'
   519  00FC2E  44                 	db	68	;'D'
   520  00FC2F  2D                 	db	45
   521  00FC30  4C                 	db	76	;'L'
   522  00FC31  45                 	db	69	;'E'
   523  00FC32  46                 	db	70	;'F'
   524  00FC33  54                 	db	84	;'T'
   525  00FC34  20                 	db	32
   526  00FC35  2D                 	db	45
   527  00FC36  2D                 	db	45
   528  00FC37  20                 	db	32
   529  00FC38  32                 	db	50	;'2'
   530  00FC39  73                 	db	115	;'s'
   531  00FC3A  20                 	db	32
   532  00FC3B  20                 	db	32
   533  00FC3C  00                 	db	0
   534  00FC3D                     STR_101:
   535  00FC3D  4D                 	db	77	;'M'
   536  00FC3E  49                 	db	73	;'I'
   537  00FC3F  44                 	db	68	;'D'
   538  00FC40  2D                 	db	45
   539  00FC41  52                 	db	82	;'R'
   540  00FC42  49                 	db	73	;'I'
   541  00FC43  47                 	db	71	;'G'
   542  00FC44  48                 	db	72	;'H'
   543  00FC45  54                 	db	84	;'T'
   544  00FC46  20                 	db	32
   545  00FC47  2D                 	db	45
   546  00FC48  2D                 	db	45
   547  00FC49  20                 	db	32
   548  00FC4A  32                 	db	50	;'2'
   549  00FC4B  73                 	db	115	;'s'
   550  00FC4C  20                 	db	32
   551  00FC4D  00                 	db	0
   552  00FC4E                     STR_115:
   553  00FC4E  45                 	db	69	;'E'
   554  00FC4F  4C                 	db	76	;'L'
   555  00FC50  53                 	db	83	;'S'
   556  00FC51  45                 	db	69	;'E'
   557  00FC52  20                 	db	32
   558  00FC53  54                 	db	84	;'T'
   559  00FC54  4F                 	db	79	;'O'
   560  00FC55  47                 	db	71	;'G'
   561  00FC56  47                 	db	71	;'G'
   562  00FC57  4C                 	db	76	;'L'
   563  00FC58  45                 	db	69	;'E'
   564  00FC59  53                 	db	83	;'S'
   565  00FC5A  20                 	db	32
   566  00FC5B  52                 	db	82	;'R'
   567  00FC5C  41                 	db	65	;'A'
   568  00FC5D  35                 	db	53	;'5'
   569  00FC5E  00                 	db	0
   570  00FC5F                     STR_72:
   571  00FC5F  41                 	db	65	;'A'
   572  00FC60  4C                 	db	76	;'L'
   573  00FC61  47                 	db	71	;'G'
   574  00FC62  31                 	db	49	;'1'
   575  00FC63  3A                 	db	58	;':'
   576  00FC64  20                 	db	32
   577  00FC65  39                 	db	57	;'9'
   578  00FC66  20                 	db	32
   579  00FC67  50                 	db	80	;'P'
   580  00FC68  4F                 	db	79	;'O'
   581  00FC69  50                 	db	80	;'P'
   582  00FC6A  4E                 	db	78	;'N'
   583  00FC6B  4F                 	db	79	;'O'
   584  00FC6C  54                 	db	84	;'T'
   585  00FC6D  41                 	db	65	;'A'
   586  00FC6E  42                 	db	66	;'B'
   587  00FC6F  00                 	db	0
   588  00FC70                     STR_68:
   589  00FC70  31                 	db	49	;'1'
   590  00FC71  2E                 	db	46
   591  00FC72  41                 	db	65	;'A'
   592  00FC73  4C                 	db	76	;'L'
   593  00FC74  47                 	db	71	;'G'
   594  00FC75  7C                 	db	124
   595  00FC76  32                 	db	50	;'2'
   596  00FC77  2E                 	db	46
   597  00FC78  53                 	db	83	;'S'
   598  00FC79  4E                 	db	78	;'N'
   599  00FC7A  52                 	db	82	;'R'
   600  00FC7B  7C                 	db	124
   601  00FC7C  33                 	db	51	;'3'
   602  00FC7D  2E                 	db	46
   603  00FC7E  41                 	db	65	;'A'
   604  00FC7F  43                 	db	67	;'C'
   605  00FC80  00                 	db	0
   606  00FC81                     STR_92:
   607  00FC81  54                 	db	84	;'T'
   608  00FC82  53                 	db	83	;'S'
   609  00FC83  54                 	db	84	;'T'
   610  00FC84  3A                 	db	58	;':'
   611  00FC85  20                 	db	32
   612  00FC86  43                 	db	67	;'C'
   613  00FC87  4F                 	db	79	;'O'
   614  00FC88  4E                 	db	78	;'N'
   615  00FC89  44                 	db	68	;'D'
   616  00FC8A  20                 	db	32
   617  00FC8B  53                 	db	83	;'S'
   618  00FC8C  4F                 	db	79	;'O'
   619  00FC8D  4C                 	db	76	;'L'
   620  00FC8E  4E                 	db	78	;'N'
   621  00FC8F  27                 	db	39
   622  00FC90  44                 	db	68	;'D'
   623  00FC91  00                 	db	0
   624  00FC92                     STR_94:
   625  00FC92  54                 	db	84	;'T'
   626  00FC93  53                 	db	83	;'S'
   627  00FC94  54                 	db	84	;'T'
   628  00FC95  3A                 	db	58	;':'
   629  00FC96  20                 	db	32
   630  00FC97  50                 	db	80	;'P'
   631  00FC98  55                 	db	85	;'U'
   632  00FC99  53                 	db	83	;'S'
   633  00FC9A  48                 	db	72	;'H'
   634  00FC9B  20                 	db	32
   635  00FC9C  53                 	db	83	;'S'
   636  00FC9D  4F                 	db	79	;'O'
   637  00FC9E  4C                 	db	76	;'L'
   638  00FC9F  4E                 	db	78	;'N'
   639  00FCA0  27                 	db	39
   640  00FCA1  44                 	db	68	;'D'
   641  00FCA2  00                 	db	0
   642  00FCA3                     STR_69:
   643  00FCA3  34                 	db	52	;'4'
   644  00FCA4  2E                 	db	46
   645  00FCA5  48                 	db	72	;'H'
   646  00FCA6  49                 	db	73	;'I'
   647  00FCA7  7C                 	db	124
   648  00FCA8  35                 	db	53	;'5'
   649  00FCA9  2E                 	db	46
   650  00FCAA  54                 	db	84	;'T'
   651  00FCAB  4F                 	db	79	;'O'
   652  00FCAC  47                 	db	71	;'G'
   653  00FCAD  7C                 	db	124
   654  00FCAE  36                 	db	54	;'6'
   655  00FCAF  2E                 	db	46
   656  00FCB0  45                 	db	69	;'E'
   657  00FCB1  45                 	db	69	;'E'
   658  00FCB2  50                 	db	80	;'P'
   659  00FCB3  00                 	db	0
   660  00FCB4                     STR_110:
   661  00FCB4  54                 	db	84	;'T'
   662  00FCB5  53                 	db	83	;'S'
   663  00FCB6  54                 	db	84	;'T'
   664  00FCB7  3A                 	db	58	;':'
   665  00FCB8  20                 	db	32
   666  00FCB9  42                 	db	66	;'B'
   667  00FCBA  4F                 	db	79	;'O'
   668  00FCBB  54                 	db	84	;'T'
   669  00FCBC  48                 	db	72	;'H'
   670  00FCBD  20                 	db	32
   671  00FCBE  53                 	db	83	;'S'
   672  00FCBF  45                 	db	69	;'E'
   673  00FCC0  52                 	db	82	;'R'
   674  00FCC1  56                 	db	86	;'V'
   675  00FCC2  4F                 	db	79	;'O'
   676  00FCC3  53                 	db	83	;'S'
   677  00FCC4  00                 	db	0
   678  00FCC5                     STR_41:
   679  00FCC5  4C                 	db	76	;'L'
   680  00FCC6  4F                 	db	79	;'O'
   681  00FCC7  47                 	db	71	;'G'
   682  00FCC8  20                 	db	32
   683  00FCC9  31                 	db	49	;'1'
   684  00FCCA  20                 	db	32
   685  00FCCB  20                 	db	32
   686  00FCCC  20                 	db	32
   687  00FCCD  20                 	db	32
   688  00FCCE  20                 	db	32
   689  00FCCF  20                 	db	32
   690  00FCD0  20                 	db	32
   691  00FCD1  20                 	db	32
   692  00FCD2  20                 	db	32
   693  00FCD3  20                 	db	32
   694  00FCD4  20                 	db	32
   695  00FCD5  00                 	db	0
   696  00FCD6                     STR_40:
   697  00FCD6  4C                 	db	76	;'L'
   698  00FCD7  4F                 	db	79	;'O'
   699  00FCD8  47                 	db	71	;'G'
   700  00FCD9  20                 	db	32
   701  00FCDA  32                 	db	50	;'2'
   702  00FCDB  20                 	db	32
   703  00FCDC  20                 	db	32
   704  00FCDD  20                 	db	32
   705  00FCDE  20                 	db	32
   706  00FCDF  20                 	db	32
   707  00FCE0  20                 	db	32
   708  00FCE1  20                 	db	32
   709  00FCE2  20                 	db	32
   710  00FCE3  20                 	db	32
   711  00FCE4  20                 	db	32
   712  00FCE5  20                 	db	32
   713  00FCE6  00                 	db	0
   714  00FCE7                     STR_44:
   715  00FCE7  4C                 	db	76	;'L'
   716  00FCE8  4F                 	db	79	;'O'
   717  00FCE9  47                 	db	71	;'G'
   718  00FCEA  20                 	db	32
   719  00FCEB  33                 	db	51	;'3'
   720  00FCEC  20                 	db	32
   721  00FCED  20                 	db	32
   722  00FCEE  20                 	db	32
   723  00FCEF  20                 	db	32
   724  00FCF0  20                 	db	32
   725  00FCF1  20                 	db	32
   726  00FCF2  20                 	db	32
   727  00FCF3  20                 	db	32
   728  00FCF4  20                 	db	32
   729  00FCF5  20                 	db	32
   730  00FCF6  20                 	db	32
   731  00FCF7  00                 	db	0
   732  00FCF8                     STR_48:
   733  00FCF8  4C                 	db	76	;'L'
   734  00FCF9  4F                 	db	79	;'O'
   735  00FCFA  47                 	db	71	;'G'
   736  00FCFB  20                 	db	32
   737  00FCFC  34                 	db	52	;'4'
   738  00FCFD  20                 	db	32
   739  00FCFE  20                 	db	32
   740  00FCFF  20                 	db	32
   741  00FD00  20                 	db	32
   742  00FD01  20                 	db	32
   743  00FD02  20                 	db	32
   744  00FD03  20                 	db	32
   745  00FD04  20                 	db	32
   746  00FD05  20                 	db	32
   747  00FD06  20                 	db	32
   748  00FD07  20                 	db	32
   749  00FD08  00                 	db	0
   750  00FD09                     STR_36:
   751  00FD09  33                 	db	51	;'3'
   752  00FD0A  2E                 	db	46
   753  00FD0B  20                 	db	32
   754  00FD0C  4C                 	db	76	;'L'
   755  00FD0D  4F                 	db	79	;'O'
   756  00FD0E  47                 	db	71	;'G'
   757  00FD0F  53                 	db	83	;'S'
   758  00FD10  20                 	db	32
   759  00FD11  20                 	db	32
   760  00FD12  20                 	db	32
   761  00FD13  20                 	db	32
   762  00FD14  20                 	db	32
   763  00FD15  20                 	db	32
   764  00FD16  20                 	db	32
   765  00FD17  20                 	db	32
   766  00FD18  20                 	db	32
   767  00FD19  00                 	db	0
   768  00FD1A                     STR_32:
   769  00FD1A  32                 	db	50	;'2'
   770  00FD1B  2E                 	db	46
   771  00FD1C  20                 	db	32
   772  00FD1D  53                 	db	83	;'S'
   773  00FD1E  4F                 	db	79	;'O'
   774  00FD1F  52                 	db	82	;'R'
   775  00FD20  54                 	db	84	;'T'
   776  00FD21  20                 	db	32
   777  00FD22  20                 	db	32
   778  00FD23  20                 	db	32
   779  00FD24  20                 	db	32
   780  00FD25  20                 	db	32
   781  00FD26  20                 	db	32
   782  00FD27  20                 	db	32
   783  00FD28  20                 	db	32
   784  00FD29  20                 	db	32
   785  00FD2A  00                 	db	0
   786  00FD2B                     STR_33:
   787  00FD2B  31                 	db	49	;'1'
   788  00FD2C  2E                 	db	46
   789  00FD2D  20                 	db	32
   790  00FD2E  44                 	db	68	;'D'
   791  00FD2F  41                 	db	65	;'A'
   792  00FD30  54                 	db	84	;'T'
   793  00FD31  45                 	db	69	;'E'
   794  00FD32  2F                 	db	47
   795  00FD33  54                 	db	84	;'T'
   796  00FD34  49                 	db	73	;'I'
   797  00FD35  4D                 	db	77	;'M'
   798  00FD36  45                 	db	69	;'E'
   799  00FD37  20                 	db	32
   800  00FD38  20                 	db	32
   801  00FD39  20                 	db	32
   802  00FD3A  20                 	db	32
   803  00FD3B  00                 	db	0
   804  00FD3C                     STR_24:
   805  00FD3C  20                 	db	32
   806  00FD3D  2D                 	db	45
   807  00FD3E  2D                 	db	45
   808  00FD3F  20                 	db	32
   809  00FD40  50                 	db	80	;'P'
   810  00FD41  4F                 	db	79	;'O'
   811  00FD42  50                 	db	80	;'P'
   812  00FD43  20                 	db	32
   813  00FD44  20                 	db	32
   814  00FD45  43                 	db	67	;'C'
   815  00FD46  41                 	db	65	;'A'
   816  00FD47  4E                 	db	78	;'N'
   817  00FD48  20                 	db	32
   818  00FD49  2D                 	db	45
   819  00FD4A  2D                 	db	45
   820  00FD4B  20                 	db	32
   821  00FD4C  00                 	db	0
   822  00FD4D                     STR_26:
   823  00FD4D  20                 	db	32
   824  00FD4E  2D                 	db	45
   825  00FD4F  2D                 	db	45
   826  00FD50  20                 	db	32
   827  00FD51  53                 	db	83	;'S'
   828  00FD52  4F                 	db	79	;'O'
   829  00FD53  55                 	db	85	;'U'
   830  00FD54  50                 	db	80	;'P'
   831  00FD55  20                 	db	32
   832  00FD56  43                 	db	67	;'C'
   833  00FD57  41                 	db	65	;'A'
   834  00FD58  4E                 	db	78	;'N'
   835  00FD59  20                 	db	32
   836  00FD5A  2D                 	db	45
   837  00FD5B  2D                 	db	45
   838  00FD5C  20                 	db	32
   839  00FD5D  00                 	db	0
   840  00FD5E                     STR_28:
   841  00FD5E  2D                 	db	45
   842  00FD5F  2D                 	db	45
   843  00FD60  20                 	db	32
   844  00FD61  54                 	db	84	;'T'
   845  00FD62  4F                 	db	79	;'O'
   846  00FD63  54                 	db	84	;'T'
   847  00FD64  41                 	db	65	;'A'
   848  00FD65  4C                 	db	76	;'L'
   849  00FD66  20                 	db	32
   850  00FD67  43                 	db	67	;'C'
   851  00FD68  41                 	db	65	;'A'
   852  00FD69  4E                 	db	78	;'N'
   853  00FD6A  53                 	db	83	;'S'
   854  00FD6B  20                 	db	32
   855  00FD6C  2D                 	db	45
   856  00FD6D  2D                 	db	45
   857  00FD6E  00                 	db	0
   858  00FD6F                     STR_39:
   859  00FD6F  4C                 	db	76	;'L'
   860  00FD70  4F                 	db	79	;'O'
   861  00FD71  47                 	db	71	;'G'
   862  00FD72  20                 	db	32
   863  00FD73  31                 	db	49	;'1'
   864  00FD74  20                 	db	32
   865  00FD75  20                 	db	32
   866  00FD76  20                 	db	32
   867  00FD77  20                 	db	32
   868  00FD78  20                 	db	32
   869  00FD79  20                 	db	32
   870  00FD7A  20                 	db	32
   871  00FD7B  20                 	db	32
   872  00FD7C  20                 	db	32
   873  00FD7D  20                 	db	32
   874  00FD7E  3C                 	db	60	;'<'
   875  00FD7F  00                 	db	0
   876  00FD80                     STR_42:
   877  00FD80  4C                 	db	76	;'L'
   878  00FD81  4F                 	db	79	;'O'
   879  00FD82  47                 	db	71	;'G'
   880  00FD83  20                 	db	32
   881  00FD84  32                 	db	50	;'2'
   882  00FD85  20                 	db	32
   883  00FD86  20                 	db	32
   884  00FD87  20                 	db	32
   885  00FD88  20                 	db	32
   886  00FD89  20                 	db	32
   887  00FD8A  20                 	db	32
   888  00FD8B  20                 	db	32
   889  00FD8C  20                 	db	32
   890  00FD8D  20                 	db	32
   891  00FD8E  20                 	db	32
   892  00FD8F  3C                 	db	60	;'<'
   893  00FD90  00                 	db	0
   894  00FD91                     STR_46:
   895  00FD91  4C                 	db	76	;'L'
   896  00FD92  4F                 	db	79	;'O'
   897  00FD93  47                 	db	71	;'G'
   898  00FD94  20                 	db	32
   899  00FD95  33                 	db	51	;'3'
   900  00FD96  20                 	db	32
   901  00FD97  20                 	db	32
   902  00FD98  20                 	db	32
   903  00FD99  20                 	db	32
   904  00FD9A  20                 	db	32
   905  00FD9B  20                 	db	32
   906  00FD9C  20                 	db	32
   907  00FD9D  20                 	db	32
   908  00FD9E  20                 	db	32
   909  00FD9F  20                 	db	32
   910  00FDA0  3C                 	db	60	;'<'
   911  00FDA1  00                 	db	0
   912  00FDA2                     STR_50:
   913  00FDA2  4C                 	db	76	;'L'
   914  00FDA3  4F                 	db	79	;'O'
   915  00FDA4  47                 	db	71	;'G'
   916  00FDA5  20                 	db	32
   917  00FDA6  34                 	db	52	;'4'
   918  00FDA7  20                 	db	32
   919  00FDA8  20                 	db	32
   920  00FDA9  20                 	db	32
   921  00FDAA  20                 	db	32
   922  00FDAB  20                 	db	32
   923  00FDAC  20                 	db	32
   924  00FDAD  20                 	db	32
   925  00FDAE  20                 	db	32
   926  00FDAF  20                 	db	32
   927  00FDB0  20                 	db	32
   928  00FDB1  3C                 	db	60	;'<'
   929  00FDB2  00                 	db	0
   930  00FDB3                     STR_38:
   931  00FDB3  33                 	db	51	;'3'
   932  00FDB4  2E                 	db	46
   933  00FDB5  20                 	db	32
   934  00FDB6  4C                 	db	76	;'L'
   935  00FDB7  4F                 	db	79	;'O'
   936  00FDB8  47                 	db	71	;'G'
   937  00FDB9  53                 	db	83	;'S'
   938  00FDBA  20                 	db	32
   939  00FDBB  20                 	db	32
   940  00FDBC  20                 	db	32
   941  00FDBD  20                 	db	32
   942  00FDBE  20                 	db	32
   943  00FDBF  20                 	db	32
   944  00FDC0  20                 	db	32
   945  00FDC1  20                 	db	32
   946  00FDC2  3C                 	db	60	;'<'
   947  00FDC3  00                 	db	0
   948  00FDC4                     STR_34:
   949  00FDC4  32                 	db	50	;'2'
   950  00FDC5  2E                 	db	46
   951  00FDC6  20                 	db	32
   952  00FDC7  53                 	db	83	;'S'
   953  00FDC8  4F                 	db	79	;'O'
   954  00FDC9  52                 	db	82	;'R'
   955  00FDCA  54                 	db	84	;'T'
   956  00FDCB  20                 	db	32
   957  00FDCC  20                 	db	32
   958  00FDCD  20                 	db	32
   959  00FDCE  20                 	db	32
   960  00FDCF  20                 	db	32
   961  00FDD0  20                 	db	32
   962  00FDD1  20                 	db	32
   963  00FDD2  20                 	db	32
   964  00FDD3  3C                 	db	60	;'<'
   965  00FDD4  00                 	db	0
   966  00FDD5                     STR_31:
   967  00FDD5  31                 	db	49	;'1'
   968  00FDD6  2E                 	db	46
   969  00FDD7  20                 	db	32
   970  00FDD8  44                 	db	68	;'D'
   971  00FDD9  41                 	db	65	;'A'
   972  00FDDA  54                 	db	84	;'T'
   973  00FDDB  45                 	db	69	;'E'
   974  00FDDC  2F                 	db	47
   975  00FDDD  54                 	db	84	;'T'
   976  00FDDE  49                 	db	73	;'I'
   977  00FDDF  4D                 	db	77	;'M'
   978  00FDE0  45                 	db	69	;'E'
   979  00FDE1  20                 	db	32
   980  00FDE2  20                 	db	32
   981  00FDE3  20                 	db	32
   982  00FDE4  3C                 	db	60	;'<'
   983  00FDE5  00                 	db	0
   984  00FDE6                     STR_6:
   985  00FDE6  50                 	db	80	;'P'
   986  00FDE7  41                 	db	65	;'A'
   987  00FDE8  55                 	db	85	;'U'
   988  00FDE9  53                 	db	83	;'S'
   989  00FDEA  45                 	db	69	;'E'
   990  00FDEB  20                 	db	32
   991  00FDEC  3C                 	db	60	;'<'
   992  00FDED  20                 	db	32
   993  00FDEE  7C                 	db	124
   994  00FDEF  20                 	db	32
   995  00FDF0  42                 	db	66	;'B'
   996  00FDF1  41                 	db	65	;'A'
   997  00FDF2  43                 	db	67	;'C'
   998  00FDF3  4B                 	db	75	;'K'
   999  00FDF4  20                 	db	32
  1000  00FDF5  3E                 	db	62	;'>'
  1001  00FDF6  00                 	db	0
  1002  00FDF7                     STR_30:
  1003  00FDF7  50                 	db	80	;'P'
  1004  00FDF8  55                 	db	85	;'U'
  1005  00FDF9  53                 	db	83	;'S'
  1006  00FDFA  48                 	db	72	;'H'
  1007  00FDFB  20                 	db	32
  1008  00FDFC  54                 	db	84	;'T'
  1009  00FDFD  4F                 	db	79	;'O'
  1010  00FDFE  20                 	db	32
  1011  00FDFF  43                 	db	67	;'C'
  1012  00FE00  4F                 	db	79	;'O'
  1013  00FE01  4E                 	db	78	;'N'
  1014  00FE02  54                 	db	84	;'T'
  1015  00FE03  49                 	db	73	;'I'
  1016  00FE04  4E                 	db	78	;'N'
  1017  00FE05  55                 	db	85	;'U'
  1018  00FE06  45                 	db	69	;'E'
  1019  00FE07  00                 	db	0
  1020  00FE08                     STR_27:
  1021  00FE08  4E                 	db	78	;'N'
  1022  00FE09  4C                 	db	76	;'L'
  1023  00FE0A  41                 	db	65	;'A'
  1024  00FE0B  42                 	db	66	;'B'
  1025  00FE0C  3A                 	db	58	;':'
  1026  00FE0D  20                 	db	32
  1027  00FE0E  25                 	db	37
  1028  00FE0F  64                 	db	100	;'d'
  1029  00FE10  7C                 	db	124
  1030  00FE11  4C                 	db	76	;'L'
  1031  00FE12  41                 	db	65	;'A'
  1032  00FE13  42                 	db	66	;'B'
  1033  00FE14  3A                 	db	58	;':'
  1034  00FE15  20                 	db	32
  1035  00FE16  25                 	db	37
  1036  00FE17  64                 	db	100	;'d'
  1037  00FE18  00                 	db	0
  1038  00FE19                     STR_25:
  1039  00FE19  4E                 	db	78	;'N'
  1040  00FE1A  54                 	db	84	;'T'
  1041  00FE1B  41                 	db	65	;'A'
  1042  00FE1C  42                 	db	66	;'B'
  1043  00FE1D  3A                 	db	58	;':'
  1044  00FE1E  20                 	db	32
  1045  00FE1F  25                 	db	37
  1046  00FE20  64                 	db	100	;'d'
  1047  00FE21  7C                 	db	124
  1048  00FE22  54                 	db	84	;'T'
  1049  00FE23  41                 	db	65	;'A'
  1050  00FE24  42                 	db	66	;'B'
  1051  00FE25  3A                 	db	58	;':'
  1052  00FE26  20                 	db	32
  1053  00FE27  25                 	db	37
  1054  00FE28  64                 	db	100	;'d'
  1055  00FE29  00                 	db	0
  1056  00FE2A                     STR_83:
  1057  00FE2A  4D                 	db	77	;'M'
  1058  00FE2B  41                 	db	65	;'A'
  1059  00FE2C  47                 	db	71	;'G'
  1060  00FE2D  5F                 	db	95	;'_'
  1061  00FE2E  73                 	db	115	;'s'
  1062  00FE2F  69                 	db	105	;'i'
  1063  00FE30  67                 	db	103	;'g'
  1064  00FE31  6E                 	db	110	;'n'
  1065  00FE32  61                 	db	97	;'a'
  1066  00FE33  6C                 	db	108	;'l'
  1067  00FE34  3A                 	db	58	;':'
  1068  00FE35  20                 	db	32
  1069  00FE36  25                 	db	37
  1070  00FE37  64                 	db	100	;'d'
  1071  00FE38  20                 	db	32
  1072  00FE39  00                 	db	0
  1073  00FE3A                     STR_103:
  1074  00FE3A  54                 	db	84	;'T'
  1075  00FE3B  53                 	db	83	;'S'
  1076  00FE3C  54                 	db	84	;'T'
  1077  00FE3D  3A                 	db	58	;':'
  1078  00FE3E  20                 	db	32
  1079  00FE3F  54                 	db	84	;'T'
  1080  00FE40  49                 	db	73	;'I'
  1081  00FE41  4C                 	db	76	;'L'
  1082  00FE42  54                 	db	84	;'T'
  1083  00FE43  20                 	db	32
  1084  00FE44  53                 	db	83	;'S'
  1085  00FE45  45                 	db	69	;'E'
  1086  00FE46  52                 	db	82	;'R'
  1087  00FE47  56                 	db	86	;'V'
  1088  00FE48  4F                 	db	79	;'O'
  1089  00FE49  00                 	db	0
  1090  00FE4A                     STR_4:
  1091  00FE4A  44                 	db	68	;'D'
  1092  00FE4B  49                 	db	73	;'I'
  1093  00FE4C  44                 	db	68	;'D'
  1094  00FE4D  4E                 	db	78	;'N'
  1095  00FE4E  27                 	db	39
  1096  00FE4F  54                 	db	84	;'T'
  1097  00FE50  20                 	db	32
  1098  00FE51  43                 	db	67	;'C'
  1099  00FE52  4F                 	db	79	;'O'
  1100  00FE53  4D                 	db	77	;'M'
  1101  00FE54  50                 	db	80	;'P'
  1102  00FE55  4C                 	db	76	;'L'
  1103  00FE56  45                 	db	69	;'E'
  1104  00FE57  54                 	db	84	;'T'
  1105  00FE58  45                 	db	69	;'E'
  1106  00FE59  00                 	db	0
  1107  00FE5A                     STR_80:
  1108  00FE5A  49                 	db	73	;'I'
  1109  00FE5B  52                 	db	82	;'R'
  1110  00FE5C  5F                 	db	95	;'_'
  1111  00FE5D  73                 	db	115	;'s'
  1112  00FE5E  69                 	db	105	;'i'
  1113  00FE5F  67                 	db	103	;'g'
  1114  00FE60  6E                 	db	110	;'n'
  1115  00FE61  61                 	db	97	;'a'
  1116  00FE62  6C                 	db	108	;'l'
  1117  00FE63  3A                 	db	58	;':'
  1118  00FE64  20                 	db	32
  1119  00FE65  25                 	db	37
  1120  00FE66  64                 	db	100	;'d'
  1121  00FE67  20                 	db	32
  1122  00FE68  00                 	db	0
  1123  00FE69                     STR_109:
  1124  00FE69  43                 	db	67	;'C'
  1125  00FE6A  41                 	db	65	;'A'
  1126  00FE6B  4D                 	db	77	;'M'
  1127  00FE6C  20                 	db	32
  1128  00FE6D  44                 	db	68	;'D'
  1129  00FE6E  57                 	db	87	;'W'
  1130  00FE6F  4E                 	db	78	;'N'
  1131  00FE70  20                 	db	32
  1132  00FE71  7C                 	db	124
  1133  00FE72  52                 	db	82	;'R'
  1134  00FE73  43                 	db	67	;'C'
  1135  00FE74  30                 	db	48	;'0'
  1136  00FE75  3D                 	db	61	;'='
  1137  00FE76  30                 	db	48	;'0'
  1138  00FE77  00                 	db	0
  1139  00FE78                     STR_108:
  1140  00FE78  43                 	db	67	;'C'
  1141  00FE79  41                 	db	65	;'A'
  1142  00FE7A  4D                 	db	77	;'M'
  1143  00FE7B  20                 	db	32
  1144  00FE7C  55                 	db	85	;'U'
  1145  00FE7D  50                 	db	80	;'P'
  1146  00FE7E  20                 	db	32
  1147  00FE7F  20                 	db	32
  1148  00FE80  7C                 	db	124
  1149  00FE81  52                 	db	82	;'R'
  1150  00FE82  43                 	db	67	;'C'
  1151  00FE83  30                 	db	48	;'0'
  1152  00FE84  3D                 	db	61	;'='
  1153  00FE85  31                 	db	49	;'1'
  1154  00FE86  00                 	db	0
  1155  00FE87                     STR_82:
  1156  00FE87  54                 	db	84	;'T'
  1157  00FE88  53                 	db	83	;'S'
  1158  00FE89  54                 	db	84	;'T'
  1159  00FE8A  3A                 	db	58	;':'
  1160  00FE8B  20                 	db	32
  1161  00FE8C  4D                 	db	77	;'M'
  1162  00FE8D  41                 	db	65	;'A'
  1163  00FE8E  47                 	db	71	;'G'
  1164  00FE8F  4E                 	db	78	;'N'
  1165  00FE90  45                 	db	69	;'E'
  1166  00FE91  54                 	db	84	;'T'
  1167  00FE92  49                 	db	73	;'I'
  1168  00FE93  53                 	db	83	;'S'
  1169  00FE94  4D                 	db	77	;'M'
  1170  00FE95  00                 	db	0
  1171  00FE96                     STR_107:
  1172  00FE96  54                 	db	84	;'T'
  1173  00FE97  53                 	db	83	;'S'
  1174  00FE98  54                 	db	84	;'T'
  1175  00FE99  3A                 	db	58	;':'
  1176  00FE9A  20                 	db	32
  1177  00FE9B  43                 	db	67	;'C'
  1178  00FE9C  41                 	db	65	;'A'
  1179  00FE9D  4D                 	db	77	;'M'
  1180  00FE9E  20                 	db	32
  1181  00FE9F  53                 	db	83	;'S'
  1182  00FEA0  45                 	db	69	;'E'
  1183  00FEA1  52                 	db	82	;'R'
  1184  00FEA2  56                 	db	86	;'V'
  1185  00FEA3  4F                 	db	79	;'O'
  1186  00FEA4  00                 	db	0
  1187  00FEA5                     STR_96:
  1188  00FEA5  54                 	db	84	;'T'
  1189  00FEA6  53                 	db	83	;'S'
  1190  00FEA7  54                 	db	84	;'T'
  1191  00FEA8  3A                 	db	58	;':'
  1192  00FEA9  20                 	db	32
  1193  00FEAA  50                 	db	80	;'P'
  1194  00FEAB  41                 	db	65	;'A'
  1195  00FEAC  4E                 	db	78	;'N'
  1196  00FEAD  20                 	db	32
  1197  00FEAE  53                 	db	83	;'S'
  1198  00FEAF  45                 	db	69	;'E'
  1199  00FEB0  52                 	db	82	;'R'
  1200  00FEB1  56                 	db	86	;'V'
  1201  00FEB2  4F                 	db	79	;'O'
  1202  00FEB3  00                 	db	0
  1203  00FEB4                     STR_75:
  1204  00FEB4  41                 	db	65	;'A'
  1205  00FEB5  4C                 	db	76	;'L'
  1206  00FEB6  47                 	db	71	;'G'
  1207  00FEB7  34                 	db	52	;'4'
  1208  00FEB8  3A                 	db	58	;':'
  1209  00FEB9  20                 	db	32
  1210  00FEBA  41                 	db	65	;'A'
  1211  00FEBB  4C                 	db	76	;'L'
  1212  00FEBC  4C                 	db	76	;'L'
  1213  00FEBD  20                 	db	32
  1214  00FEBE  43                 	db	67	;'C'
  1215  00FEBF  41                 	db	65	;'A'
  1216  00FEC0  4E                 	db	78	;'N'
  1217  00FEC1  53                 	db	83	;'S'
  1218  00FEC2  00                 	db	0
  1219  00FEC3                     STR_90:
  1220  00FEC3  54                 	db	84	;'T'
  1221  00FEC4  53                 	db	83	;'S'
  1222  00FEC5  54                 	db	84	;'T'
  1223  00FEC6  3A                 	db	58	;':'
  1224  00FEC7  20                 	db	32
  1225  00FEC8  44                 	db	68	;'D'
  1226  00FEC9  43                 	db	67	;'C'
  1227  00FECA  20                 	db	32
  1228  00FECB  4D                 	db	77	;'M'
  1229  00FECC  4F                 	db	79	;'O'
  1230  00FECD  54                 	db	84	;'T'
  1231  00FECE  4F                 	db	79	;'O'
  1232  00FECF  52                 	db	82	;'R'
  1233  00FED0  53                 	db	83	;'S'
  1234  00FED1  00                 	db	0
  1235  00FED2                     STR_70:
  1236  00FED2  41                 	db	65	;'A'
  1237  00FED3  4C                 	db	76	;'L'
  1238  00FED4  47                 	db	71	;'G'
  1239  00FED5  4F                 	db	79	;'O'
  1240  00FED6  52                 	db	82	;'R'
  1241  00FED7  49                 	db	73	;'I'
  1242  00FED8  54                 	db	84	;'T'
  1243  00FED9  48                 	db	72	;'H'
  1244  00FEDA  4D                 	db	77	;'M'
  1245  00FEDB  20                 	db	32
  1246  00FEDC  54                 	db	84	;'T'
  1247  00FEDD  45                 	db	69	;'E'
  1248  00FEDE  53                 	db	83	;'S'
  1249  00FEDF  54                 	db	84	;'T'
  1250  00FEE0  00                 	db	0
  1251  00FEE1                     STR_91:
  1252  00FEE1  50                 	db	80	;'P'
  1253  00FEE2  49                 	db	73	;'I'
  1254  00FEE3  4E                 	db	78	;'N'
  1255  00FEE4  20                 	db	32
  1256  00FEE5  52                 	db	82	;'R'
  1257  00FEE6  41                 	db	65	;'A'
  1258  00FEE7  35                 	db	53	;'5'
  1259  00FEE8  20                 	db	32
  1260  00FEE9  48                 	db	72	;'H'
  1261  00FEEA  49                 	db	73	;'I'
  1262  00FEEB  47                 	db	71	;'G'
  1263  00FEEC  48                 	db	72	;'H'
  1264  00FEED  2E                 	db	46
  1265  00FEEE  00                 	db	0
  1266  00FEEF                     STR_73:
  1267  00FEEF  41                 	db	65	;'A'
  1268  00FEF0  4C                 	db	76	;'L'
  1269  00FEF1  47                 	db	71	;'G'
  1270  00FEF2  32                 	db	50	;'2'
  1271  00FEF3  3A                 	db	58	;':'
  1272  00FEF4  20                 	db	32
  1273  00FEF5  31                 	db	49	;'1'
  1274  00FEF6  32                 	db	50	;'2'
  1275  00FEF7  20                 	db	32
  1276  00FEF8  43                 	db	67	;'C'
  1277  00FEF9  41                 	db	65	;'A'
  1278  00FEFA  4E                 	db	78	;'N'
  1279  00FEFB  53                 	db	83	;'S'
  1280  00FEFC  00                 	db	0
  1281  00FEFD                     STR_76:
  1282  00FEFD  41                 	db	65	;'A'
  1283  00FEFE  4C                 	db	76	;'L'
  1284  00FEFF  47                 	db	71	;'G'
  1285  00FF00  35                 	db	53	;'5'
  1286  00FF01  3A                 	db	58	;':'
  1287  00FF02  20                 	db	32
  1288  00FF03  4E                 	db	78	;'N'
  1289  00FF04  4F                 	db	79	;'O'
  1290  00FF05  20                 	db	32
  1291  00FF06  43                 	db	67	;'C'
  1292  00FF07  41                 	db	65	;'A'
  1293  00FF08  4E                 	db	78	;'N'
  1294  00FF09  53                 	db	83	;'S'
  1295  00FF0A  00                 	db	0
  1296  00FF0B                     STR_71:
  1297  00FF0B  50                 	db	80	;'P'
  1298  00FF0C  55                 	db	85	;'U'
  1299  00FF0D  53                 	db	83	;'S'
  1300  00FF0E  48                 	db	72	;'H'
  1301  00FF0F  20                 	db	32
  1302  00FF10  54                 	db	84	;'T'
  1303  00FF11  4F                 	db	79	;'O'
  1304  00FF12  20                 	db	32
  1305  00FF13  53                 	db	83	;'S'
  1306  00FF14  54                 	db	84	;'T'
  1307  00FF15  41                 	db	65	;'A'
  1308  00FF16  52                 	db	82	;'R'
  1309  00FF17  54                 	db	84	;'T'
  1310  00FF18  00                 	db	0
  1311  00FF19                     STR_23:
  1312  00FF19  25                 	db	37
  1313  00FF1A  64                 	db	100	;'d'
  1314  00FF1B  20                 	db	32
  1315  00FF1C  4D                 	db	77	;'M'
  1316  00FF1D  49                 	db	73	;'I'
  1317  00FF1E  4E                 	db	78	;'N'
  1318  00FF1F  20                 	db	32
  1319  00FF20  25                 	db	37
  1320  00FF21  64                 	db	100	;'d'
  1321  00FF22  20                 	db	32
  1322  00FF23  53                 	db	83	;'S'
  1323  00FF24  45                 	db	69	;'E'
  1324  00FF25  43                 	db	67	;'C'
  1325  00FF26  00                 	db	0
  1326  00FF27                     STR_2:
  1327  00FF27  54                 	db	84	;'T'
  1328  00FF28  49                 	db	73	;'I'
  1329  00FF29  4D                 	db	77	;'M'
  1330  00FF2A  45                 	db	69	;'E'
  1331  00FF2B  3A                 	db	58	;':'
  1332  00FF2C  20                 	db	32
  1333  00FF2D  25                 	db	37
  1334  00FF2E  64                 	db	100	;'d'
  1335  00FF2F  3A                 	db	58	;':'
  1336  00FF30  25                 	db	37
  1337  00FF31  30                 	db	48	;'0'
  1338  00FF32  32                 	db	50	;'2'
  1339  00FF33  64                 	db	100	;'d'
  1340  00FF34  00                 	db	0
  1341  00FF35                     STR_79:
  1342  00FF35  54                 	db	84	;'T'
  1343  00FF36  53                 	db	83	;'S'
  1344  00FF37  54                 	db	84	;'T'
  1345  00FF38  3A                 	db	58	;':'
  1346  00FF39  20                 	db	32
  1347  00FF3A  49                 	db	73	;'I'
  1348  00FF3B  52                 	db	82	;'R'
  1349  00FF3C  20                 	db	32
  1350  00FF3D  53                 	db	83	;'S'
  1351  00FF3E  4E                 	db	78	;'N'
  1352  00FF3F  53                 	db	83	;'S'
  1353  00FF40  52                 	db	82	;'R'
  1354  00FF41  00                 	db	0
  1355  00FF42                     STR_65:
  1356  00FF42  54                 	db	84	;'T'
  1357  00FF43  49                 	db	73	;'I'
  1358  00FF44  4D                 	db	77	;'M'
  1359  00FF45  45                 	db	69	;'E'
  1360  00FF46  20                 	db	32
  1361  00FF47  25                 	db	37
  1362  00FF48  64                 	db	100	;'d'
  1363  00FF49  3A                 	db	58	;':'
  1364  00FF4A  25                 	db	37
  1365  00FF4B  30                 	db	48	;'0'
  1366  00FF4C  32                 	db	50	;'2'
  1367  00FF4D  64                 	db	100	;'d'
  1368  00FF4E  00                 	db	0
  1369  00FF4F                     STR_74:
  1370  00FF4F  41                 	db	65	;'A'
  1371  00FF50  4C                 	db	76	;'L'
  1372  00FF51  47                 	db	71	;'G'
  1373  00FF52  33                 	db	51	;'3'
  1374  00FF53  3A                 	db	58	;':'
  1375  00FF54  20                 	db	32
  1376  00FF55  31                 	db	49	;'1'
  1377  00FF56  20                 	db	32
  1378  00FF57  43                 	db	67	;'C'
  1379  00FF58  41                 	db	65	;'A'
  1380  00FF59  4E                 	db	78	;'N'
  1381  00FF5A  00                 	db	0
  1382  00FF5B                     STR_93:
  1383  00FF5B  50                 	db	80	;'P'
  1384  00FF5C  49                 	db	73	;'I'
  1385  00FF5D  4E                 	db	78	;'N'
  1386  00FF5E  20                 	db	32
  1387  00FF5F  52                 	db	82	;'R'
  1388  00FF60  41                 	db	65	;'A'
  1389  00FF61  33                 	db	51	;'3'
  1390  00FF62  2E                 	db	46
  1391  00FF63  2E                 	db	46
  1392  00FF64  2E                 	db	46
  1393  00FF65  00                 	db	0
  1394  00FF66                     STR_95:
  1395  00FF66  50                 	db	80	;'P'
  1396  00FF67  49                 	db	73	;'I'
  1397  00FF68  4E                 	db	78	;'N'
  1398  00FF69  20                 	db	32
  1399  00FF6A  52                 	db	82	;'R'
  1400  00FF6B  41                 	db	65	;'A'
  1401  00FF6C  34                 	db	52	;'4'
  1402  00FF6D  2E                 	db	46
  1403  00FF6E  2E                 	db	46
  1404  00FF6F  2E                 	db	46
  1405  00FF70  00                 	db	0
  1406  00FF71                     STR_113:
  1407  00FF71  50                 	db	80	;'P'
  1408  00FF72  55                 	db	85	;'U'
  1409  00FF73  53                 	db	83	;'S'
  1410  00FF74  48                 	db	72	;'H'
  1411  00FF75  45                 	db	69	;'E'
  1412  00FF76  52                 	db	82	;'R'
  1413  00FF77  20                 	db	32
  1414  00FF78  54                 	db	84	;'T'
  1415  00FF79  53                 	db	83	;'S'
  1416  00FF7A  54                 	db	84	;'T'
  1417  00FF7B  00                 	db	0
  1418  00FF7C                     STR_64:
  1419  00FF7C  53                 	db	83	;'S'
  1420  00FF7D  4F                 	db	79	;'O'
  1421  00FF7E  52                 	db	82	;'R'
  1422  00FF7F  54                 	db	84	;'T'
  1423  00FF80  49                 	db	73	;'I'
  1424  00FF81  4E                 	db	78	;'N'
  1425  00FF82  47                 	db	71	;'G'
  1426  00FF83  2E                 	db	46
  1427  00FF84  2E                 	db	46
  1428  00FF85  2E                 	db	46
  1429  00FF86  00                 	db	0
  1430  00FF87                     STR_84:
  1431  00FF87  54                 	db	84	;'T'
  1432  00FF88  53                 	db	83	;'S'
  1433  00FF89  54                 	db	84	;'T'
  1434  00FF8A  3A                 	db	58	;':'
  1435  00FF8B  20                 	db	32
  1436  00FF8C  43                 	db	67	;'C'
  1437  00FF8D  4F                 	db	79	;'O'
  1438  00FF8E  4E                 	db	78	;'N'
  1439  00FF8F  44                 	db	68	;'D'
  1440  00FF90  00                 	db	0
  1441  00FF91                     STR_88:
  1442  00FF91  41                 	db	65	;'A'
  1443  00FF92  43                 	db	67	;'C'
  1444  00FF93  54                 	db	84	;'T'
  1445  00FF94  55                 	db	85	;'U'
  1446  00FF95  41                 	db	65	;'A'
  1447  00FF96  54                 	db	84	;'T'
  1448  00FF97  4F                 	db	79	;'O'
  1449  00FF98  52                 	db	82	;'R'
  1450  00FF99  53                 	db	83	;'S'
  1451  00FF9A  00                 	db	0
  1452  00FF9B                     STR_22:
  1453  00FF9B  44                 	db	68	;'D'
  1454  00FF9C  55                 	db	85	;'U'
  1455  00FF9D  52                 	db	82	;'R'
  1456  00FF9E  41                 	db	65	;'A'
  1457  00FF9F  54                 	db	84	;'T'
  1458  00FFA0  49                 	db	73	;'I'
  1459  00FFA1  4F                 	db	79	;'O'
  1460  00FFA2  4E                 	db	78	;'N'
  1461  00FFA3  3A                 	db	58	;':'
  1462  00FFA4  00                 	db	0
  1463  00FFA5                     STR_86:
  1464  00FFA5  43                 	db	67	;'C'
  1465  00FFA6  4F                 	db	79	;'O'
  1466  00FFA7  4E                 	db	78	;'N'
  1467  00FFA8  44                 	db	68	;'D'
  1468  00FFA9  3A                 	db	58	;':'
  1469  00FFAA  20                 	db	32
  1470  00FFAB  25                 	db	37
  1471  00FFAC  64                 	db	100	;'d'
  1472  00FFAD  00                 	db	0
  1473  00FFAE                     STR_77:
  1474  00FFAE  53                 	db	83	;'S'
  1475  00FFAF  45                 	db	69	;'E'
  1476  00FFB0  4E                 	db	78	;'N'
  1477  00FFB1  53                 	db	83	;'S'
  1478  00FFB2  4F                 	db	79	;'O'
  1479  00FFB3  52                 	db	82	;'R'
  1480  00FFB4  53                 	db	83	;'S'
  1481  00FFB5  00                 	db	0
  1482  00FFB6                     STR_116:
  1483  00FFB6  28                 	db	40
  1484  00FFB7  6E                 	db	110	;'n'
  1485  00FFB8  75                 	db	117	;'u'
  1486  00FFB9  6C                 	db	108	;'l'
  1487  00FFBA  6C                 	db	108	;'l'
  1488  00FFBB  29                 	db	41
  1489  00FFBC  00                 	db	0
  1490  00FFBD                     STR_67:
  1491  00FFBD  46                 	db	70	;'F'
  1492  00FFBE  41                 	db	65	;'A'
  1493  00FFBF  49                 	db	73	;'I'
  1494  00FFC0  4C                 	db	76	;'L'
  1495  00FFC1  45                 	db	69	;'E'
  1496  00FFC2  44                 	db	68	;'D'
  1497  00FFC3  00                 	db	0
  1498  00FFC4                     STR_7:
  1499  00FFC4  53                 	db	83	;'S'
  1500  00FFC5  54                 	db	84	;'T'
  1501  00FFC6  41                 	db	65	;'A'
  1502  00FFC7  52                 	db	82	;'R'
  1503  00FFC8  54                 	db	84	;'T'
  1504  00FFC9  3A                 	db	58	;':'
  1505  00FFCA  00                 	db	0
  1506  00FFCB                     STR_9:
  1507  00FFCB  46                 	db	70	;'F'
  1508  00FFCC  45                 	db	69	;'E'
  1509  00FFCD  42                 	db	66	;'B'
  1510  00FFCE  00                 	db	0
  1511  00FFCF                     STR_19:
  1512  00FFCF  44                 	db	68	;'D'
  1513  00FFD0  45                 	db	69	;'E'
  1514  00FFD1  43                 	db	67	;'C'
  1515  00FFD2  00                 	db	0
  1516  00FFD3                     STR_15:
  1517  00FFD3  41                 	db	65	;'A'
  1518  00FFD4  55                 	db	85	;'U'
  1519  00FFD5  47                 	db	71	;'G'
  1520  00FFD6  00                 	db	0
  1521  00FFD7                     STR_14:
  1522  00FFD7  4A                 	db	74	;'J'
  1523  00FFD8  55                 	db	85	;'U'
  1524  00FFD9  4C                 	db	76	;'L'
  1525  00FFDA  00                 	db	0
  1526  00FFDB                     STR_8:
  1527  00FFDB  4A                 	db	74	;'J'
  1528  00FFDC  41                 	db	65	;'A'
  1529  00FFDD  4E                 	db	78	;'N'
  1530  00FFDE  00                 	db	0
  1531  00FFDF                     STR_13:
  1532  00FFDF  4A                 	db	74	;'J'
  1533  00FFE0  55                 	db	85	;'U'
  1534  00FFE1  4E                 	db	78	;'N'
  1535  00FFE2  00                 	db	0
  1536  00FFE3                     STR_16:
  1537  00FFE3  53                 	db	83	;'S'
  1538  00FFE4  45                 	db	69	;'E'
  1539  00FFE5  50                 	db	80	;'P'
  1540  00FFE6  00                 	db	0
  1541  00FFE7                     STR_10:
  1542  00FFE7  4D                 	db	77	;'M'
  1543  00FFE8  41                 	db	65	;'A'
  1544  00FFE9  52                 	db	82	;'R'
  1545  00FFEA  00                 	db	0
  1546  00FFEB                     STR_11:
  1547  00FFEB  41                 	db	65	;'A'
  1548  00FFEC  50                 	db	80	;'P'
  1549  00FFED  52                 	db	82	;'R'
  1550  00FFEE  00                 	db	0
  1551  00FFEF                     STR_20:
  1552  00FFEF  45                 	db	69	;'E'
  1553  00FFF0  52                 	db	82	;'R'
  1554  00FFF1  52                 	db	82	;'R'
  1555  00FFF2  00                 	db	0
  1556  00FFF3                     STR_17:
  1557  00FFF3  4F                 	db	79	;'O'
  1558  00FFF4  43                 	db	67	;'C'
  1559  00FFF5  54                 	db	84	;'T'
  1560  00FFF6  00                 	db	0
  1561  00FFF7                     STR_18:
  1562  00FFF7  4E                 	db	78	;'N'
  1563  00FFF8  4F                 	db	79	;'O'
  1564  00FFF9  56                 	db	86	;'V'
  1565  00FFFA  00                 	db	0
  1566  00FFFB                     STR_12:
  1567  00FFFB  4D                 	db	77	;'M'
  1568  00FFFC  41                 	db	65	;'A'
  1569  00FFFD  59                 	db	89	;'Y'
  1570  00FFFE  00                 	db	0
  1571  0000                     
  1572                           ; #config settings
  1573  00FFFF  00                 	db	0	; dummy byte at the end
  1574  0000                     
  1575                           	psect	cinit
  1576  0040D2                     __pcinit:
  1577                           	opt stack 0
  1578  0040D2                     start_initialization:
  1579                           	opt stack 0
  1580  0040D2                     __initialization:
  1581                           	opt stack 0
  1582                           
  1583                           ; Initialize objects allocated to BANK1 (8 bytes)
  1584                           ; load TBLPTR registers with __pidataBANK1
  1585  0040D2  0E14               	movlw	low __pidataBANK1
  1586  0040D4  6EF6               	movwf	tblptrl,c
  1587  0040D6  0E48               	movlw	high __pidataBANK1
  1588  0040D8  6EF7               	movwf	tblptrh,c
  1589  0040DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1590  0040DC  6EF8               	movwf	tblptru,c
  1591  0040DE  EE01  F02F         	lfsr	0,__pdataBANK1
  1592  0040E2  EE10 F008          	lfsr	1,8
  1593  0040E6                     copy_data0:
  1594  0040E6  0009               	tblrd		*+
  1595  0040E8  CFF5 FFEE          	movff	tablat,postinc0
  1596  0040EC  50E5               	movf	postdec1,w,c
  1597  0040EE  50E1               	movf	fsr1l,w,c
  1598  0040F0  E1FA               	bnz	copy_data0
  1599                           
  1600                           ; Clear objects allocated to BANK1 (47 bytes)
  1601  0040F2  EE01  F000         	lfsr	0,__pbssBANK1
  1602  0040F6  0E2F               	movlw	47
  1603  0040F8                     clear_0:
  1604  0040F8  6AEE               	clrf	postinc0,c
  1605  0040FA  06E8               	decf	wreg,f,c
  1606  0040FC  E1FD               	bnz	clear_0
  1607                           
  1608                           ; Clear objects allocated to BANK0 (38 bytes)
  1609  0040FE  EE00  F0DA         	lfsr	0,__pbssBANK0
  1610  004102  0E26               	movlw	38
  1611  004104                     clear_1:
  1612  004104  6AEE               	clrf	postinc0,c
  1613  004106  06E8               	decf	wreg,f,c
  1614  004108  E1FD               	bnz	clear_1
  1615                           
  1616                           ; Clear objects allocated to COMRAM (35 bytes)
  1617  00410A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1618  00410E  0E23               	movlw	35
  1619  004110                     clear_2:
  1620  004110  6AEE               	clrf	postinc0,c
  1621  004112  06E8               	decf	wreg,f,c
  1622  004114  E1FD               	bnz	clear_2
  1623  004116                     end_of_initialization:
  1624                           	opt stack 0
  1625  004116                     __end_of__initialization:
  1626                           	opt stack 0
  1627  004116  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1628  004118  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1629  00411A  0100               	movlb	0
  1630  00411C  EFD6  F01A         	goto	_main	;jump to C main() function
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	bssCOMRAM
  1641  00005B                     __pbssCOMRAM:
  1642                           	opt stack 0
  1643  00005B                     _back:
  1644                           	opt stack 0
  1645  00005B                     	ds	2
  1646  00005D                     _count_can_no_lab:
  1647                           	opt stack 0
  1648  00005D                     	ds	2
  1649  00005F                     _count_can_w_lab:
  1650                           	opt stack 0
  1651  00005F                     	ds	2
  1652  000061                     _count_pop_no_tab:
  1653                           	opt stack 0
  1654  000061                     	ds	2
  1655  000063                     _count_pop_w_tab:
  1656                           	opt stack 0
  1657  000063                     	ds	2
  1658  000065                     _cur_can:
  1659                           	opt stack 0
  1660  000065                     	ds	2
  1661  000067                     _debug:
  1662                           	opt stack 0
  1663  000067                     	ds	2
  1664  000069                     _down:
  1665                           	opt stack 0
  1666  000069                     	ds	2
  1667  00006B                     _enter:
  1668                           	opt stack 0
  1669  00006B                     	ds	2
  1670  00006D                     _f_ID_receive:
  1671                           	opt stack 0
  1672  00006D                     	ds	2
  1673  00006F                     _f_can_coming_to_ID:
  1674                           	opt stack 0
  1675  00006F                     	ds	2
  1676  000071                     _f_can_coming_to_distribution:
  1677                           	opt stack 0
  1678  000071                     	ds	2
  1679  000073                     _f_lastCan:
  1680                           	opt stack 0
  1681  000073                     	ds	2
  1682  000075                     _firstboot:
  1683                           	opt stack 0
  1684  000075                     	ds	2
  1685  000077                     _up:
  1686                           	opt stack 0
  1687  000077                     	ds	2
  1688  000079                     _was_low_1:
  1689                           	opt stack 0
  1690  000079                     	ds	2
  1691  00007B                     _was_low_3:
  1692                           	opt stack 0
  1693  00007B                     	ds	2
  1694  00007D                     _input:
  1695                           	opt stack 0
  1696  00007D                     	ds	1
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           
  1706                           	psect	bssBANK0
  1707  0000DA                     __pbssBANK0:
  1708                           	opt stack 0
  1709  0000DA                     _IR_signal:
  1710                           	opt stack 0
  1711  0000DA                     	ds	2
  1712  0000DC                     _MAG_signal:
  1713                           	opt stack 0
  1714  0000DC                     	ds	2
  1715  0000DE                     _RTCflag:
  1716                           	opt stack 0
  1717  0000DE                     	ds	2
  1718  0000E0                     _cur_state:
  1719                           	opt stack 0
  1720  0000E0                     	ds	2
  1721  0000E2                     _f_loadingNewCan:
  1722                           	opt stack 0
  1723  0000E2                     	ds	2
  1724  0000E4                     _first:
  1725                           	opt stack 0
  1726  0000E4                     	ds	2
  1727  0000E6                     _log:
  1728                           	opt stack 0
  1729  0000E6                     	ds	2
  1730  0000E8                     _log_completion:
  1731                           	opt stack 0
  1732  0000E8                     	ds	2
  1733  0000EA                     _log_count_can_no_lab:
  1734                           	opt stack 0
  1735  0000EA                     	ds	2
  1736  0000EC                     _log_count_can_w_lab:
  1737                           	opt stack 0
  1738  0000EC                     	ds	2
  1739  0000EE                     _log_count_pop_no_tab:
  1740                           	opt stack 0
  1741  0000EE                     	ds	2
  1742  0000F0                     _log_count_pop_w_tab:
  1743                           	opt stack 0
  1744  0000F0                     	ds	2
  1745  0000F2                     _log_count_total:
  1746                           	opt stack 0
  1747  0000F2                     	ds	2
  1748  0000F4                     _log_total_time:
  1749                           	opt stack 0
  1750  0000F4                     	ds	2
  1751  0000F6                     _logstate:
  1752                           	opt stack 0
  1753  0000F6                     	ds	2
  1754  0000F8                     _total_time:
  1755                           	opt stack 0
  1756  0000F8                     	ds	2
  1757  0000FA                     _var:
  1758                           	opt stack 0
  1759  0000FA                     	ds	2
  1760  0000FC                     _machine_state:
  1761                           	opt stack 0
  1762  0000FC                     	ds	1
  1763  0000FD                     _sel:
  1764                           	opt stack 0
  1765  0000FD                     	ds	1
  1766  0000FE                     _count_total:
  1767                           	opt stack 0
  1768  0000FE                     	ds	2
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssBANK1
  1779  000100                     __pbssBANK1:
  1780                           	opt stack 0
  1781  000100                     _log_startTime:
  1782                           	opt stack 0
  1783  000100                     	ds	14
  1784  00010E                     _startTime:
  1785                           	opt stack 0
  1786  00010E                     	ds	14
  1787  00011C                     _servoTimes:
  1788                           	opt stack 0
  1789  00011C                     	ds	8
  1790  000124                     _time:
  1791                           	opt stack 0
  1792  000124                     	ds	7
  1793  00012B                     _f_can_distributed:
  1794                           	opt stack 0
  1795  00012B                     	ds	2
  1796  00012D                     _i:
  1797                           	opt stack 0
  1798  00012D                     	ds	2
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           
  1808                           	psect	dataBANK1
  1809  00012F                     __pdataBANK1:
  1810                           	opt stack 0
  1811  00012F                     UI@F3225:
  1812                           	opt stack 0
  1813  00012F                     	ds	4
  1814  000133                     printRTC@F3216:
  1815                           	opt stack 0
  1816  000133                     	ds	4
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           
  1826                           	psect	cstackBANK0
  1827  000080                     __pcstackBANK0:
  1828                           	opt stack 0
  1829  000080                     ??_delay_ms:
  1830  000080                     ??_PortTests:
  1831  000080                     ??_isdigit:
  1832  000080                     ??_readADC:
  1833  000080                     ??_I2C_Master_Wait:
  1834  000080                     ?___wmul:
  1835                           	opt stack 0
  1836  000080                     ?___awmod:
  1837                           	opt stack 0
  1838  000080                     ?___lwdiv:
  1839                           	opt stack 0
  1840  000080                     ?___lldiv:
  1841                           	opt stack 0
  1842  000080                     lcdNibble@temp:
  1843                           	opt stack 0
  1844  000080                     initTime@m:
  1845                           	opt stack 0
  1846  000080                     updateServoPosition@time_us:
  1847                           	opt stack 0
  1848  000080                     EEPROM_read@address:
  1849                           	opt stack 0
  1850  000080                     ___wmul@multiplier:
  1851                           	opt stack 0
  1852  000080                     ___awmod@dividend:
  1853                           	opt stack 0
  1854  000080                     ___lwdiv@dividend:
  1855                           	opt stack 0
  1856  000080                     strcpy@to:
  1857                           	opt stack 0
  1858  000080                     ___lldiv@dividend:
  1859                           	opt stack 0
  1860                           
  1861                           ; 4 bytes @ 0x0
  1862  000080                     	ds	1
  1863  000081                     readADC@channel:
  1864                           	opt stack 0
  1865  000081                     I2C_Master_Read@a:
  1866                           	opt stack 0
  1867  000081                     lcdNibble@data:
  1868                           	opt stack 0
  1869  000081                     initTime@h:
  1870                           	opt stack 0
  1871  000081                     delay_ms@milliseconds:
  1872                           	opt stack 0
  1873  000081                     _isdigit$1944:
  1874                           	opt stack 0
  1875  000081                     I2C_Master_Write@d:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x1
  1879  000081                     	ds	1
  1880  000082                     ??_readIR:
  1881  000082                     ??_readMAG:
  1882  000082                     I2C_Master_Read@temp:
  1883                           	opt stack 0
  1884  000082                     lcdInst@data:
  1885                           	opt stack 0
  1886  000082                     putch@data:
  1887                           	opt stack 0
  1888  000082                     initTime@w:
  1889                           	opt stack 0
  1890  000082                     isdigit@c:
  1891                           	opt stack 0
  1892  000082                     updateServoPosition@timer:
  1893                           	opt stack 0
  1894  000082                     ___wmul@multiplicand:
  1895                           	opt stack 0
  1896  000082                     ___awmod@divisor:
  1897                           	opt stack 0
  1898  000082                     ___lwdiv@divisor:
  1899                           	opt stack 0
  1900  000082                     strcpy@from:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2
  1904  000082                     	ds	1
  1905  000083                     ??_initLCD:
  1906  000083                     initTime@DD:
  1907                           	opt stack 0
  1908  000083                     getRTC@i:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x3
  1912  000083                     	ds	1
  1913  000084                     ??_updateServoPosition:
  1914  000084                     initTime@MM:
  1915                           	opt stack 0
  1916  000084                     ___awmod@counter:
  1917                           	opt stack 0
  1918  000084                     readIR@res:
  1919                           	opt stack 0
  1920  000084                     readMAG@res:
  1921                           	opt stack 0
  1922  000084                     ___wmul@product:
  1923                           	opt stack 0
  1924  000084                     ___lwdiv@quotient:
  1925                           	opt stack 0
  1926  000084                     strcpy@cp:
  1927                           	opt stack 0
  1928  000084                     ___lldiv@divisor:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x4
  1932  000084                     	ds	1
  1933  000085                     ??_initSortTimer:
  1934  000085                     initTime@YY:
  1935                           	opt stack 0
  1936  000085                     ___awmod@sign:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x5
  1940  000085                     	ds	1
  1941  000086                     ??_getIR:
  1942  000086                     ??_getMAG:
  1943  000086                     ?___awdiv:
  1944                           	opt stack 0
  1945  000086                     initTime@s:
  1946                           	opt stack 0
  1947  000086                     ___lwdiv@counter:
  1948                           	opt stack 0
  1949  000086                     updateServoPosition@my_time:
  1950                           	opt stack 0
  1951  000086                     ___awdiv@dividend:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x6
  1955  000086                     	ds	1
  1956  000087                     ?___lwmod:
  1957                           	opt stack 0
  1958  000087                     ___lwmod@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x7
  1962  000087                     	ds	1
  1963  000088                     ??_ID:
  1964  000088                     ??_Distribution:
  1965  000088                     ??_initServos:
  1966  000088                     initSortTimer@i:
  1967                           	opt stack 0
  1968  000088                     ___awdiv@divisor:
  1969                           	opt stack 0
  1970  000088                     ___lldiv@quotient:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x8
  1974  000088                     	ds	1
  1975  000089                     ___lwmod@divisor:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x9
  1979  000089                     	ds	1
  1980  00008A                     ___awdiv@counter:
  1981                           	opt stack 0
  1982  00008A                     ID@i:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0xA
  1986  00008A                     	ds	1
  1987  00008B                     ___awdiv@sign:
  1988                           	opt stack 0
  1989  00008B                     ___lwmod@counter:
  1990                           	opt stack 0
  1991                           
  1992                           ; 1 bytes @ 0xB
  1993  00008B                     	ds	1
  1994  00008C                     ___lldiv@counter:
  1995                           	opt stack 0
  1996  00008C                     ___awdiv@quotient:
  1997                           	opt stack 0
  1998  00008C                     ID@sensor_outputs:
  1999                           	opt stack 0
  2000                           
  2001                           ; 6 bytes @ 0xC
  2002  00008C                     	ds	1
  2003  00008D                     I2C_Master_Init@c:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0xD
  2007  00008D                     	ds	1
  2008  00008E                     ?_printf:
  2009                           	opt stack 0
  2010  00008E                     printf@f:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0xE
  2014  00008E                     	ds	3
  2015  000091                     ??_I2C_Master_Init:
  2016                           
  2017                           ; 1 bytes @ 0x11
  2018  000091                     	ds	4
  2019  000095                     ??_loadRTC:
  2020                           
  2021                           ; 1 bytes @ 0x15
  2022  000095                     	ds	1
  2023  000096                     loadRTC@i:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x16
  2027  000096                     	ds	4
  2028  00009A                     ??_printf:
  2029                           
  2030                           ; 1 bytes @ 0x1A
  2031  00009A                     	ds	4
  2032  00009E                     printf@prec:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x1E
  2036  00009E                     	ds	1
  2037  00009F                     printf@cp:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x1F
  2041  00009F                     	ds	2
  2042  0000A1                     printf@ap:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x21
  2046  0000A1                     	ds	2
  2047  0000A3                     printf@len:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x23
  2051  0000A3                     	ds	2
  2052  0000A5                     printf@val:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x25
  2056  0000A5                     	ds	2
  2057  0000A7                     printf@flag:
  2058                           	opt stack 0
  2059                           
  2060                           ; 1 bytes @ 0x27
  2061  0000A7                     	ds	1
  2062  0000A8                     printf@c:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0x28
  2066  0000A8                     	ds	1
  2067  0000A9                     printf@width:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x29
  2071  0000A9                     	ds	2
  2072  0000AB                     ??_printRTC:
  2073  0000AB                     ??_algorithmTest:
  2074  0000AB                     ??_sensorTest:
  2075  0000AB                     ??_actuatorTest:
  2076  0000AB                     ??_PortTestA5:
  2077  0000AB                     ??_ToggleTestA5:
  2078  0000AB                     ??_PusherTest:
  2079  0000AB                     ??_BothServos:
  2080  0000AB                     EEPROM_write@address:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x2B
  2084  0000AB                     	ds	1
  2085  0000AC                     PusherTest@i:
  2086                           	opt stack 0
  2087  0000AC                     ToggleTestA5@on:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x2C
  2091  0000AC                     	ds	1
  2092  0000AD                     EEPROM_write@data:
  2093                           	opt stack 0
  2094  0000AD                     actuatorTest@i_1638:
  2095                           	opt stack 0
  2096  0000AD                     sensorTest@res:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x2D
  2100  0000AD                     	ds	1
  2101  0000AE                     ??_EEPROM_write:
  2102  0000AE                     actuatorTest@i_1645:
  2103                           	opt stack 0
  2104  0000AE                     printRTC@INT_time:
  2105                           	opt stack 0
  2106                           
  2107                           ; 14 bytes @ 0x2E
  2108  0000AE                     	ds	1
  2109  0000AF                     EEPROM_write@i:
  2110                           	opt stack 0
  2111  0000AF                     actuatorTest@i_1646:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x2F
  2115  0000AF                     	ds	1
  2116  0000B0                     EEPROM_write@i_1329:
  2117                           	opt stack 0
  2118  0000B0                     actuatorTest@i_1648:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x30
  2122  0000B0                     	ds	1
  2123  0000B1                     ??_Loading:
  2124  0000B1                     logRun@num:
  2125                           	opt stack 0
  2126  0000B1                     actuatorTest@i_1649:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x31
  2130  0000B1                     	ds	1
  2131  0000B2                     logRun@byte1:
  2132                           	opt stack 0
  2133  0000B2                     actuatorTest@i_1651:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x32
  2137  0000B2                     	ds	1
  2138  0000B3                     logRun@byte2:
  2139                           	opt stack 0
  2140  0000B3                     actuatorTest@i_1652:
  2141                           	opt stack 0
  2142  0000B3                     Loading@addr:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x33
  2146  0000B3                     	ds	1
  2147  0000B4                     logRun@byte3:
  2148                           	opt stack 0
  2149  0000B4                     actuatorTest@i_1654:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x34
  2153  0000B4                     	ds	1
  2154  0000B5                     Loading@byte1:
  2155                           	opt stack 0
  2156  0000B5                     logRun@byte_i:
  2157                           	opt stack 0
  2158  0000B5                     actuatorTest@i_1655:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x35
  2162  0000B5                     	ds	1
  2163  0000B6                     logRun@byte11:
  2164                           	opt stack 0
  2165  0000B6                     actuatorTest@i_1657:
  2166                           	opt stack 0
  2167  0000B6                     Loading@i_1098:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x36
  2171  0000B6                     	ds	1
  2172  0000B7                     actuatorTest@i_1658:
  2173                           	opt stack 0
  2174  0000B7                     logRun@i:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x37
  2178  0000B7                     	ds	1
  2179  0000B8                     actuatorTest@i_1660:
  2180                           	opt stack 0
  2181  0000B8                     Loading@i:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x38
  2185  0000B8                     	ds	1
  2186  0000B9                     actuatorTest@i_1661:
  2187                           	opt stack 0
  2188  0000B9                     logRun@addr:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x39
  2192  0000B9                     	ds	1
  2193  0000BA                     actuatorTest@i_1664:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x3A
  2197  0000BA                     	ds	1
  2198  0000BB                     actuatorTest@i_1665:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x3B
  2202  0000BB                     	ds	1
  2203  0000BC                     actuatorTest@i_1667:
  2204                           	opt stack 0
  2205  0000BC                     printRTC@RTC_month:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x3C
  2209  0000BC                     	ds	1
  2210  0000BD                     actuatorTest@i_1668:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x3D
  2214  0000BD                     	ds	1
  2215  0000BE                     actuatorTest@i_1670:
  2216                           	opt stack 0
  2217  0000BE                     printRTC@month:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x3E
  2221  0000BE                     	ds	1
  2222  0000BF                     actuatorTest@i_1671:
  2223                           	opt stack 0
  2224                           
  2225                           ; 1 bytes @ 0x3F
  2226  0000BF                     	ds	1
  2227  0000C0                     actuatorTest@i_1674:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x40
  2231  0000C0                     	ds	1
  2232  0000C1                     actuatorTest@i_1675:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x41
  2236  0000C1                     	ds	1
  2237  0000C2                     actuatorTest@i_1677:
  2238                           	opt stack 0
  2239  0000C2                     printRTC@i:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x42
  2243  0000C2                     	ds	1
  2244  0000C3                     actuatorTest@i_1678:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x43
  2248  0000C3                     	ds	1
  2249  0000C4                     ??_UI:
  2250  0000C4                     actuatorTest@i:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x44
  2254  0000C4                     	ds	2
  2255  0000C6                     ??_Test:
  2256  0000C6                     _UI$2297:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x46
  2260  0000C6                     	ds	2
  2261  0000C8                     UI@i:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x48
  2265  0000C8                     	ds	1
  2266  0000C9                     UI@i_409:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x49
  2270  0000C9                     	ds	1
  2271  0000CA                     UI@i_412:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x4A
  2275  0000CA                     	ds	1
  2276  0000CB                     UI@i_413:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x4B
  2280  0000CB                     	ds	1
  2281  0000CC                     UI@i_431:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x4C
  2285  0000CC                     	ds	1
  2286  0000CD                     UI@i_432:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x4D
  2290  0000CD                     	ds	1
  2291  0000CE                     UI@i_435:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x4E
  2295  0000CE                     	ds	1
  2296  0000CF                     UI@i_436:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x4F
  2300  0000CF                     	ds	1
  2301  0000D0                     UI@i_439:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x50
  2305  0000D0                     	ds	1
  2306  0000D1                     UI@i_440:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x51
  2310  0000D1                     	ds	1
  2311  0000D2                     UI@i_443:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x52
  2315  0000D2                     	ds	1
  2316  0000D3                     UI@i_444:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x53
  2320  0000D3                     	ds	1
  2321  0000D4                     UI@i_447:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x54
  2325  0000D4                     	ds	1
  2326  0000D5                     UI@i_448:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x55
  2330  0000D5                     	ds	1
  2331  0000D6                     UI@month:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0x56
  2335  0000D6                     	ds	4
  2336  0000DA                     tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postdec1	equ	0xFE5
  2343                           fsr1l	equ	0xFE1
  2344                           
  2345                           ; 1 bytes @ 0x5A
  2346                           
  2347                           	psect	cstackCOMRAM
  2348  000001                     __pcstackCOMRAM:
  2349                           	opt stack 0
  2350  000001                     ??i2_I2C_Master_Wait:
  2351  000001                     ??i2_isdigit:
  2352  000001                     ?i2___wmul:
  2353                           	opt stack 0
  2354  000001                     ?i2___lwmod:
  2355                           	opt stack 0
  2356  000001                     i2lcdNibble@temp:
  2357                           	opt stack 0
  2358  000001                     i2EEPROM_read@address:
  2359                           	opt stack 0
  2360  000001                     i2___wmul@multiplier:
  2361                           	opt stack 0
  2362  000001                     i2___lwmod@dividend:
  2363                           	opt stack 0
  2364  000001                     i2strcpy@to:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x0
  2368  000001                     	ds	1
  2369  000002                     i2I2C_Master_Read@a:
  2370                           	opt stack 0
  2371  000002                     i2lcdNibble@data:
  2372                           	opt stack 0
  2373  000002                     i2_isdigit$1944:
  2374                           	opt stack 0
  2375  000002                     i2I2C_Master_Write@d:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x1
  2379  000002                     	ds	1
  2380  000003                     i2I2C_Master_Read@temp:
  2381                           	opt stack 0
  2382  000003                     i2lcdInst@data:
  2383                           	opt stack 0
  2384  000003                     i2putch@data:
  2385                           	opt stack 0
  2386  000003                     i2isdigit@c:
  2387                           	opt stack 0
  2388  000003                     i2___wmul@multiplicand:
  2389                           	opt stack 0
  2390  000003                     i2___lwmod@divisor:
  2391                           	opt stack 0
  2392  000003                     i2strcpy@from:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x2
  2396  000003                     	ds	1
  2397  000004                     i2getRTC@i:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x3
  2401  000004                     	ds	1
  2402  000005                     i2___lwmod@counter:
  2403                           	opt stack 0
  2404  000005                     i2___wmul@product:
  2405                           	opt stack 0
  2406  000005                     i2strcpy@cp:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x4
  2410  000005                     	ds	1
  2411  000006                     ?i2___lwdiv:
  2412                           	opt stack 0
  2413  000006                     i2___lwdiv@dividend:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x5
  2417  000006                     	ds	1
  2418  000007                     retrieveLog@logNum:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x6
  2422  000007                     	ds	1
  2423  000008                     i2___lwdiv@divisor:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x7
  2427  000008                     	ds	1
  2428  000009                     ??_retrieveLog:
  2429                           
  2430                           ; 1 bytes @ 0x8
  2431  000009                     	ds	1
  2432  00000A                     i2___lwdiv@quotient:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x9
  2436  00000A                     	ds	1
  2437  00000B                     retrieveLog@byte1:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0xA
  2441  00000B                     	ds	1
  2442  00000C                     retrieveLog@byte2:
  2443                           	opt stack 0
  2444  00000C                     i2___lwdiv@counter:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0xB
  2448  00000C                     	ds	1
  2449  00000D                     ?i2_printf:
  2450                           	opt stack 0
  2451  00000D                     retrieveLog@byte3:
  2452                           	opt stack 0
  2453  00000D                     i2printf@f:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0xC
  2457  00000D                     	ds	1
  2458  00000E                     retrieveLog@i:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0xD
  2462  00000E                     	ds	2
  2463  000010                     retrieveLog@addr:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0xF
  2467  000010                     	ds	2
  2468  000012                     dispLogs@myLog:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0x11
  2472  000012                     	ds	2
  2473  000014                     
  2474                           ; 1 bytes @ 0x13
  2475  000014                     	ds	5
  2476  000019                     ??i2_printf:
  2477                           
  2478                           ; 1 bytes @ 0x18
  2479  000019                     	ds	4
  2480  00001D                     i2printf@prec:
  2481                           	opt stack 0
  2482                           
  2483                           ; 1 bytes @ 0x1C
  2484  00001D                     	ds	1
  2485  00001E                     i2printf@cp:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x1D
  2489  00001E                     	ds	2
  2490  000020                     i2printf@ap:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x1F
  2494  000020                     	ds	2
  2495  000022                     i2printf@len:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x21
  2499  000022                     	ds	2
  2500  000024                     i2printf@val:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x23
  2504  000024                     	ds	2
  2505  000026                     i2printf@flag:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x25
  2509  000026                     	ds	1
  2510  000027                     i2printf@c:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x26
  2514  000027                     	ds	1
  2515  000028                     i2printf@width:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x27
  2519  000028                     	ds	2
  2520  00002A                     ??_printSortTimer:
  2521  00002A                     ??i2_printRTC:
  2522  00002A                     ?_inputHandler:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x29
  2526  00002A                     	ds	2
  2527  00002C                     ??_inputHandler:
  2528                           
  2529                           ; 1 bytes @ 0x2B
  2530  00002C                     	ds	1
  2531  00002D                     printSortTimer@hour:
  2532                           	opt stack 0
  2533  00002D                     i2printRTC@INT_time:
  2534                           	opt stack 0
  2535                           
  2536                           ; 14 bytes @ 0x2C
  2537  00002D                     	ds	2
  2538  00002F                     printSortTimer@curTime:
  2539                           	opt stack 0
  2540                           
  2541                           ; 14 bytes @ 0x2E
  2542  00002F                     	ds	12
  2543  00003B                     i2printRTC@RTC_month:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x3A
  2547  00003B                     	ds	2
  2548  00003D                     printSortTimer@start_sec:
  2549                           	opt stack 0
  2550  00003D                     i2printRTC@month:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x3C
  2554  00003D                     	ds	2
  2555  00003F                     printSortTimer@cur_sec:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x3E
  2559  00003F                     	ds	2
  2560  000041                     printSortTimer@min:
  2561                           	opt stack 0
  2562  000041                     i2printRTC@i:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x40
  2566  000041                     	ds	2
  2567  000043                     ??_updateMenu:
  2568  000043                     printSortTimer@sec:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x42
  2572  000043                     	ds	2
  2573  000045                     _printSortTimer$2417:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x44
  2577  000045                     	ds	2
  2578  000047                     printSortTimer@timeDiff:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x46
  2582  000047                     	ds	2
  2583  000049                     printSortTimer@i:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x48
  2587  000049                     	ds	2
  2588  00004B                     ??_handler:
  2589                           
  2590                           ; 1 bytes @ 0x4A
  2591  00004B                     	ds	16
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           
  2601 ;;
  2602 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2603 ;;
  2604 ;; *************** function _main *****************
  2605 ;; Defined at:
  2606 ;;		line 19 in file "main.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels required when called:   13
  2626 ;; This function calls:
  2627 ;;		_I2C_Master_Init
  2628 ;;		_Test
  2629 ;;		_UI
  2630 ;;		_initLCD
  2631 ;;		_initTime
  2632 ;;		_initUI
  2633 ;;		_logRun
  2634 ;;		_machineConfig
  2635 ;;		_sort
  2636 ;;		_stopSignals
  2637 ;; This function is called by:
  2638 ;;		Startup code after reset
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text0
  2643  0035AC                     __ptext0:
  2644                           	opt stack 0
  2645  0035AC                     _main:
  2646                           	opt stack 18
  2647                           
  2648                           ;main.c: 20: machineConfig();
  2649                           
  2650                           ;incstack = 0
  2651  0035AC  EC62  F01F         	call	_machineConfig	;wreg free
  2652                           
  2653                           ;main.c: 21: initLCD();
  2654  0035B0  ECDC  F020         	call	_initLCD	;wreg free
  2655                           
  2656                           ;main.c: 24: RTCflag = 0;
  2657  0035B4  0E00               	movlw	0
  2658  0035B6  0100               	movlb	0	; () banked
  2659  0035B8  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2660  0035BA  0E00               	movlw	0
  2661  0035BC  6FDE               	movwf	_RTCflag& (0+255),b
  2662                           
  2663                           ;main.c: 25: if(RTCflag){
  2664  0035BE  0100               	movlb	0	; () banked
  2665  0035C0  51DE               	movf	_RTCflag& (0+255),w,b
  2666  0035C2  0100               	movlb	0	; () banked
  2667  0035C4  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2668  0035C6  B4D8               	btfsc	status,2,c
  2669  0035C8  D016               	goto	l8102
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2673  0035CA  0E20               	movlw	32
  2674  0035CC  0100               	movlb	0	; () banked
  2675  0035CE  6F80               	movwf	initTime@m& (0+255),b
  2676  0035D0  0E15               	movlw	21
  2677  0035D2  0100               	movlb	0	; () banked
  2678  0035D4  6F81               	movwf	initTime@h& (0+255),b
  2679  0035D6  0E04               	movlw	4
  2680  0035D8  0100               	movlb	0	; () banked
  2681  0035DA  6F82               	movwf	initTime@w& (0+255),b
  2682  0035DC  0E15               	movlw	21
  2683  0035DE  0100               	movlb	0	; () banked
  2684  0035E0  6F83               	movwf	initTime@DD& (0+255),b
  2685  0035E2  0E03               	movlw	3
  2686  0035E4  0100               	movlb	0	; () banked
  2687  0035E6  6F84               	movwf	initTime@MM& (0+255),b
  2688  0035E8  0E17               	movlw	23
  2689  0035EA  0100               	movlb	0	; () banked
  2690  0035EC  6F85               	movwf	initTime@YY& (0+255),b
  2691  0035EE  0E42               	movlw	66
  2692  0035F0  EC8F  F023         	call	_initTime
  2693                           
  2694                           ;main.c: 27: }
  2695  0035F4  D00B               	goto	l8104
  2696  0035F6                     l8102:
  2697                           
  2698                           ;main.c: 28: else{
  2699                           ;main.c: 29: I2C_Master_Init(10000);
  2700  0035F6  0E10               	movlw	16
  2701  0035F8  0100               	movlb	0	; () banked
  2702  0035FA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2703  0035FC  0E27               	movlw	39
  2704  0035FE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2705  003600  0E00               	movlw	0
  2706  003602  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2707  003604  0E00               	movlw	0
  2708  003606  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2709  003608  EC32  F01F         	call	_I2C_Master_Init	;wreg free
  2710  00360C                     l8104:
  2711                           
  2712                           ;main.c: 30: }
  2713                           ;main.c: 32: initUI();
  2714  00360C  EC98  F022         	call	_initUI	;wreg free
  2715                           
  2716                           ;main.c: 33: first = 1;
  2717  003610  0E00               	movlw	0
  2718  003612  0100               	movlb	0	; () banked
  2719  003614  6FE5               	movwf	(_first+1)& (0+255),b
  2720  003616  0E01               	movlw	1
  2721  003618  6FE4               	movwf	_first& (0+255),b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 44: switch(machine_state){
  2725                           
  2726                           ;main.c: 43: while(1){
  2727  00361A  D018               	goto	l8126
  2728  00361C                     l8108:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 46: UI();
  2732  00361C  EC65  F004         	call	_UI	;wreg free
  2733                           
  2734                           ;main.c: 47: break;
  2735  003620  D015               	goto	l8126
  2736  003622                     l8110:
  2737                           
  2738                           ;main.c: 49: sort();
  2739  003622  EC7E  F023         	call	_sort	;wreg free
  2740                           
  2741                           ;main.c: 50: break;
  2742  003626  D012               	goto	l8126
  2743  003628                     l8112:
  2744                           
  2745                           ;main.c: 52: stopSignals();
  2746  003628  ECBB  F023         	call	_stopSignals	;wreg free
  2747                           
  2748                           ;main.c: 53: logRun();
  2749  00362C  EC44  F018         	call	_logRun	;wreg free
  2750                           
  2751                           ;main.c: 54: first = 1;
  2752  003630  0E00               	movlw	0
  2753  003632  0100               	movlb	0	; () banked
  2754  003634  6FE5               	movwf	(_first+1)& (0+255),b
  2755  003636  0E01               	movlw	1
  2756  003638  6FE4               	movwf	_first& (0+255),b
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 55: UI();
  2760  00363A  EC65  F004         	call	_UI	;wreg free
  2761                           
  2762                           ;main.c: 56: break;
  2763  00363E  D006               	goto	l8126
  2764  003640                     l8120:
  2765                           
  2766                           ;main.c: 58: Test();
  2767  003640  EC75  F019         	call	_Test	;wreg free
  2768                           
  2769                           ;main.c: 59: break;
  2770  003644  D003               	goto	l8126
  2771  003646                     l8122:
  2772                           
  2773                           ;main.c: 61: stopSignals();
  2774  003646  ECBB  F023         	call	_stopSignals	;wreg free
  2775  00364A                     l487:
  2776  00364A  D7FF               	goto	l487
  2777  00364C                     l8126:
  2778  00364C  0100               	movlb	0	; () banked
  2779  00364E  51FC               	movf	_machine_state& (0+255),w,b
  2780                           
  2781                           ; Switch size 1, requested type "space"
  2782                           ; Number of cases is 5, Range of values is 0 to 4
  2783                           ; switch strategies available:
  2784                           ; Name         Instructions Cycles
  2785                           ; simple_byte           16     9 (average)
  2786                           ;	Chosen strategy is simple_byte
  2787  003650  0A00               	xorlw	0	; case 0
  2788  003652  B4D8               	btfsc	status,2,c
  2789  003654  D7E3               	goto	l8108
  2790  003656  0A01               	xorlw	1	; case 1
  2791  003658  B4D8               	btfsc	status,2,c
  2792  00365A  D7E3               	goto	l8110
  2793  00365C  0A03               	xorlw	3	; case 2
  2794  00365E  B4D8               	btfsc	status,2,c
  2795  003660  D7E3               	goto	l8112
  2796  003662  0A01               	xorlw	1	; case 3
  2797  003664  B4D8               	btfsc	status,2,c
  2798  003666  D7EC               	goto	l8120
  2799  003668  0A07               	xorlw	7	; case 4
  2800  00366A  B4D8               	btfsc	status,2,c
  2801  00366C  D7EC               	goto	l8122
  2802                           
  2803                           ; BSR set to: 0
  2804                           
  2805                           ; BSR set to: 0
  2806  00366E  D7EE               	goto	l8126
  2807  003670                     __end_of_main:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           postinc0	equ	0xFEE
  2814                           wreg	equ	0xFE8
  2815                           postdec1	equ	0xFE5
  2816                           fsr1l	equ	0xFE1
  2817                           status	equ	0xFD8
  2818                           
  2819 ;; *************** function _stopSignals *****************
  2820 ;; Defined at:
  2821 ;;		line 70 in file "main.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;		None
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;		None
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;Total ram usage:        0 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    7
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_main
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text1
  2850  004776                     __ptext1:
  2851                           	opt stack 0
  2852  004776                     _stopSignals:
  2853                           	opt stack 23
  2854                           
  2855                           ;main.c: 71: LATA = 0x00;
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;incstack = 0
  2859  004776  0E00               	movlw	0
  2860  004778  6E89               	movwf	3977,c	;volatile
  2861                           
  2862                           ;main.c: 72: LATB = 0x00;
  2863  00477A  0E00               	movlw	0
  2864  00477C  6E8A               	movwf	3978,c	;volatile
  2865                           
  2866                           ;main.c: 73: LATC = 0x00;
  2867  00477E  0E00               	movlw	0
  2868  004780  6E8B               	movwf	3979,c	;volatile
  2869                           
  2870                           ;main.c: 74: LATD = 0x00;
  2871  004782  0E00               	movlw	0
  2872  004784  6E8C               	movwf	3980,c	;volatile
  2873                           
  2874                           ;main.c: 75: LATE = 0x00;
  2875  004786  0E00               	movlw	0
  2876  004788  6E8D               	movwf	3981,c	;volatile
  2877  00478A  0012               	return		;funcret
  2878  00478C                     __end_of_stopSignals:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           fsr1l	equ	0xFE1
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _sort *****************
  2891 ;; Defined at:
  2892 ;;		line 55 in file "sort.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:   12
  2913 ;; This function calls:
  2914 ;;		_Distribution
  2915 ;;		_ID
  2916 ;;		_Loading
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text2
  2923  0046FC                     __ptext2:
  2924                           	opt stack 0
  2925  0046FC                     _sort:
  2926                           	opt stack 18
  2927                           
  2928                           ;sort.c: 56: if(machine_state == Sorting_state){
  2929                           
  2930                           ;incstack = 0
  2931  0046FC  0100               	movlb	0	; () banked
  2932  0046FE  05FC               	decf	_machine_state& (0+255),w,b
  2933  004700  B4D8               	btfsc	status,2,c
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;sort.c: 57: Loading();
  2937  004702  EC60  F015         	call	_Loading	;wreg free
  2938                           
  2939                           ;sort.c: 58: }
  2940                           ;sort.c: 59: if(machine_state == Sorting_state){
  2941  004706  0100               	movlb	0	; () banked
  2942  004708  05FC               	decf	_machine_state& (0+255),w,b
  2943  00470A  B4D8               	btfsc	status,2,c
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;sort.c: 60: ID();
  2947  00470C  EC96  F017         	call	_ID	;wreg free
  2948                           
  2949                           ;sort.c: 61: }
  2950                           ;sort.c: 62: if(machine_state == Sorting_state){
  2951  004710  0100               	movlb	0	; () banked
  2952  004712  05FC               	decf	_machine_state& (0+255),w,b
  2953  004714  A4D8               	btfss	status,2,c
  2954  004716  0012               	return	
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;sort.c: 63: Distribution();
  2958  004718  ECE7  F016         	call	_Distribution	;wreg free
  2959  00471C  0012               	return	
  2960  00471E                     __end_of_sort:
  2961                           	opt stack 0
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postdec1	equ	0xFE5
  2969                           fsr1l	equ	0xFE1
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _Loading *****************
  2973 ;; Defined at:
  2974 ;;		line 67 in file "sort.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  i               2   54[BANK0 ] int 
  2979 ;;  i               2   56[BANK0 ] int 
  2980 ;;  addr            2   51[BANK0 ] unsigned short 
  2981 ;;  byte1           1   53[BANK0 ] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;Total ram usage:        9 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:   11
  2998 ;; This function calls:
  2999 ;;		_EEPROM_read
  3000 ;;		_EEPROM_write
  3001 ;;		_delay_ms
  3002 ;;		_getIR
  3003 ;;		_initGlobalVars
  3004 ;;		_initServos
  3005 ;;		_initSortTimer
  3006 ;;		_lcdInst
  3007 ;; This function is called by:
  3008 ;;		_sort
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text3
  3013  002AC0                     __ptext3:
  3014                           	opt stack 0
  3015  002AC0                     _Loading:
  3016                           	opt stack 18
  3017                           
  3018                           ;sort.c: 68: if(first){
  3019                           
  3020                           ;incstack = 0
  3021  002AC0  0100               	movlb	0	; () banked
  3022  002AC2  51E4               	movf	_first& (0+255),w,b
  3023  002AC4  0100               	movlb	0	; () banked
  3024  002AC6  11E5               	iorwf	(_first+1)& (0+255),w,b
  3025  002AC8  B4D8               	btfsc	status,2,c
  3026  002ACA  D074               	goto	l6412
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;sort.c: 69: initGlobalVars();
  3030  002ACC  EC98  F01E         	call	_initGlobalVars	;wreg free
  3031                           
  3032                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3033  002AD0  0E01               	movlw	1
  3034  002AD2  ECEC  F023         	call	_lcdInst
  3035  002AD6  0E68               	movlw	104
  3036  002AD8  0100               	movlb	0	; () banked
  3037  002ADA  6FB1               	movwf	??_Loading& (0+255),b
  3038  002ADC  0EE4               	movlw	228
  3039  002ADE                     u7097:
  3040  002ADE  2EE8               	decfsz	wreg,f,c
  3041  002AE0  D7FE               	bra	u7097
  3042  002AE2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3043  002AE4  D7FC               	bra	u7097
  3044  002AE6  F000               	nop	
  3045                           
  3046                           ;sort.c: 71: initSortTimer();
  3047  002AE8  ECF5  F01B         	call	_initSortTimer	;wreg free
  3048                           
  3049                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3050  002AEC  8A8B               	bsf	3979,5,c	;volatile
  3051                           
  3052                           ;sort.c: 77: sel = EEPROM_read(0);
  3053  002AEE  0E00               	movlw	0
  3054  002AF0  0100               	movlb	0	; () banked
  3055  002AF2  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3056  002AF4  0E00               	movlw	0
  3057  002AF6  6F80               	movwf	EEPROM_read@address& (0+255),b
  3058  002AF8  ECAF  F023         	call	_EEPROM_read	;wreg free
  3059  002AFC  0100               	movlb	0	; () banked
  3060  002AFE  6FFD               	movwf	_sel& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3064  002B00  0100               	movlb	0	; () banked
  3065  002B02  51FD               	movf	_sel& (0+255),w,b
  3066  002B04  0D0B               	mullw	11
  3067  002B06  0E01               	movlw	1
  3068  002B08  24F3               	addwf	prodl,w,c
  3069  002B0A  0100               	movlb	0	; () banked
  3070  002B0C  6FB3               	movwf	Loading@addr& (0+255),b
  3071  002B0E  0E00               	movlw	0
  3072  002B10  20F4               	addwfc	prodh,w,c
  3073  002B12  0100               	movlb	0	; () banked
  3074  002B14  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3078  002B16  0E7F               	movlw	127
  3079  002B18  0100               	movlb	0	; () banked
  3080  002B1A  6FB5               	movwf	Loading@byte1& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3084  002B1C  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3085  002B20  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3086  002B24  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3087  002B28  ECF9  F019         	call	_EEPROM_write	;wreg free
  3088                           
  3089                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3090  002B2C  9A89               	bcf	3977,5,c	;volatile
  3091                           
  3092                           ;sort.c: 85: for(int i=0; i<46; i++){
  3093  002B2E  0E00               	movlw	0
  3094  002B30  0100               	movlb	0	; () banked
  3095  002B32  6FB9               	movwf	(Loading@i+1)& (0+255),b
  3096  002B34  0E00               	movlw	0
  3097  002B36  6FB8               	movwf	Loading@i& (0+255),b
  3098                           
  3099                           ; BSR set to: 0
  3100  002B38  0100               	movlb	0	; () banked
  3101  002B3A  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3102  002B3C  D008               	goto	l6400
  3103  002B3E  0100               	movlb	0	; () banked
  3104  002B40  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3105  002B42  E126               	bnz	l730
  3106  002B44  0E2E               	movlw	46
  3107  002B46  0100               	movlb	0	; () banked
  3108  002B48  5DB8               	subwf	Loading@i& (0+255),w,b
  3109  002B4A  B0D8               	btfsc	status,0,c
  3110  002B4C  D021               	goto	l730
  3111  002B4E                     l6400:
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3115  002B4E  BA89               	btfsc	3977,5,c	;volatile
  3116  002B50  D004               	goto	u4840
  3117  002B52  0100               	movlb	0	; () banked
  3118  002B54  6BB1               	clrf	??_Loading& (0+255),b
  3119  002B56  2BB1               	incf	??_Loading& (0+255),f,b
  3120  002B58  D002               	goto	u4858
  3121  002B5A                     u4840:
  3122  002B5A  0100               	movlb	0	; () banked
  3123  002B5C  6BB1               	clrf	??_Loading& (0+255),b
  3124  002B5E                     u4858:
  3125  002B5E  0100               	movlb	0	; () banked
  3126  002B60  3BB1               	swapf	??_Loading& (0+255),f,b
  3127  002B62  47B1               	rlncf	??_Loading& (0+255),f,b
  3128  002B64  5089               	movf	3977,w,c	;volatile
  3129  002B66  0100               	movlb	0	; () banked
  3130  002B68  19B1               	xorwf	??_Loading& (0+255),w,b
  3131  002B6A  0BDF               	andlw	-33
  3132  002B6C  19B1               	xorwf	??_Loading& (0+255),w,b
  3133  002B6E  6E89               	movwf	3977,c	;volatile
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;sort.c: 87: delay_ms(45-i);
  3137  002B70  0100               	movlb	0	; () banked
  3138  002B72  51B8               	movf	Loading@i& (0+255),w,b
  3139  002B74  0800               	sublw	0
  3140  002B76  0F2D               	addlw	45
  3141  002B78  EC1E  F023         	call	_delay_ms
  3142  002B7C  0100               	movlb	0	; () banked
  3143  002B7E  4BB8               	infsnz	Loading@i& (0+255),f,b
  3144  002B80  2BB9               	incf	(Loading@i+1)& (0+255),f,b
  3145                           
  3146                           ; BSR set to: 0
  3147  002B82  0100               	movlb	0	; () banked
  3148  002B84  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3149  002B86  D7E3               	goto	l6400
  3150  002B88  0100               	movlb	0	; () banked
  3151  002B8A  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3152  002B8C  E101               	bnz	u4860
  3153  002B8E  D7DA               	goto	L1
  3154  002B90                     u4860:
  3155  002B90                     l730:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;sort.c: 88: }
  3159                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3160  002B90  8A89               	bsf	3977,5,c	;volatile
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;sort.c: 92: initServos();
  3164  002B92  ECBE  F01F         	call	_initServos	;wreg free
  3165                           
  3166                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3167  002B96  0ECB               	movlw	203
  3168  002B98  0100               	movlb	0	; () banked
  3169  002B9A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3170  002B9C  0EEC               	movlw	236
  3171  002B9E  0100               	movlb	0	; () banked
  3172  002BA0  6FB1               	movwf	??_Loading& (0+255),b
  3173  002BA2  0E84               	movlw	132
  3174  002BA4                     u7107:
  3175  002BA4  2EE8               	decfsz	wreg,f,c
  3176  002BA6  D7FE               	bra	u7107
  3177  002BA8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3178  002BAA  D7FC               	bra	u7107
  3179  002BAC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3180  002BAE  D7FA               	bra	u7107
  3181  002BB0  F000               	nop	
  3182                           
  3183                           ;sort.c: 94: }
  3184  002BB2  0012               	return	
  3185  002BB4                     l6412:
  3186                           
  3187                           ;sort.c: 95: else{
  3188                           ;sort.c: 98: if(!f_loadingNewCan){
  3189  002BB4  0100               	movlb	0	; () banked
  3190  002BB6  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3191  002BB8  0100               	movlb	0	; () banked
  3192  002BBA  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3193  002BBC  A4D8               	btfss	status,2,c
  3194  002BBE  D017               	goto	l6428
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 100: getIR();
  3198  002BC0  EC16  F020         	call	_getIR	;wreg free
  3199                           
  3200                           ;sort.c: 102: if(!f_loadingNewCan){
  3201  002BC4  0100               	movlb	0	; () banked
  3202  002BC6  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3203  002BC8  0100               	movlb	0	; () banked
  3204  002BCA  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3205  002BCC  B4D8               	btfsc	status,2,c
  3206  002BCE  0012               	return	
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 106: else{
  3210                           ;sort.c: 107: count_total++;
  3211                           
  3212                           ; BSR set to: 0
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 104: }
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;sort.c: 103: return;
  3219  002BD0  0100               	movlb	0	; () banked
  3220  002BD2  4BFE               	infsnz	_count_total& (0+255),f,b
  3221  002BD4  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;sort.c: 108: if(count_total == 12){
  3225  002BD6  0E0C               	movlw	12
  3226  002BD8  0100               	movlb	0	; () banked
  3227  002BDA  19FE               	xorwf	_count_total& (0+255),w,b
  3228  002BDC  0100               	movlb	0	; () banked
  3229  002BDE  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3230  002BE0  A4D8               	btfss	status,2,c
  3231  002BE2  0012               	return	
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;sort.c: 109: f_lastCan = 1;
  3235  002BE4  0E00               	movlw	0
  3236  002BE6  6E74               	movwf	_f_lastCan+1,c
  3237  002BE8  0E01               	movlw	1
  3238  002BEA  6E73               	movwf	_f_lastCan,c
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 110: }
  3242                           ;sort.c: 111: }
  3243                           ;sort.c: 112: }
  3244                           
  3245                           ; BSR set to: 0
  3246  002BEC  0012               	return	
  3247  002BEE                     l6428:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;sort.c: 115: else if(f_ID_receive){
  3251  002BEE  506D               	movf	_f_ID_receive,w,c
  3252  002BF0  106E               	iorwf	_f_ID_receive+1,w,c
  3253  002BF2  B4D8               	btfsc	status,2,c
  3254  002BF4  0012               	return	
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sort.c: 116: f_loadingNewCan = 0;
  3258  002BF6  0E00               	movlw	0
  3259  002BF8  0100               	movlb	0	; () banked
  3260  002BFA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3261  002BFC  0E00               	movlw	0
  3262  002BFE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3266  002C00  0E3D               	movlw	61
  3267  002C02  0100               	movlb	0	; () banked
  3268  002C04  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3269  002C06  0EE1               	movlw	225
  3270  002C08  0100               	movlb	0	; () banked
  3271  002C0A  6FB1               	movwf	??_Loading& (0+255),b
  3272  002C0C  0E3F               	movlw	63
  3273  002C0E                     u7117:
  3274  002C0E  2EE8               	decfsz	wreg,f,c
  3275  002C10  D7FE               	bra	u7117
  3276  002C12  2FB1               	decfsz	??_Loading& (0+255),f,b
  3277  002C14  D7FC               	bra	u7117
  3278  002C16  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3279  002C18  D7FA               	bra	u7117
  3280  002C1A  D000               	nop2	
  3281                           
  3282                           ;sort.c: 119: for(int i = 0; i<3000; i++){
  3283  002C1C  0E00               	movlw	0
  3284  002C1E  0100               	movlb	0	; () banked
  3285  002C20  6FB7               	movwf	(Loading@i_1098+1)& (0+255),b
  3286  002C22  0E00               	movlw	0
  3287  002C24  6FB6               	movwf	Loading@i_1098& (0+255),b
  3288  002C26                     l6436:
  3289                           
  3290                           ; BSR set to: 0
  3291  002C26  0100               	movlb	0	; () banked
  3292  002C28  BFB7               	btfsc	(Loading@i_1098+1)& (0+255),7,b
  3293  002C2A  D008               	goto	l739
  3294  002C2C  0EB8               	movlw	184
  3295  002C2E  0100               	movlb	0	; () banked
  3296  002C30  5DB6               	subwf	Loading@i_1098& (0+255),w,b
  3297  002C32  0E0B               	movlw	11
  3298  002C34  0100               	movlb	0	; () banked
  3299  002C36  59B7               	subwfb	(Loading@i_1098+1)& (0+255),w,b
  3300  002C38  B0D8               	btfsc	status,0,c
  3301  002C3A  D00D               	goto	l6446
  3302  002C3C                     l739:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;sort.c: 120: LATAbits.LATA4 = 1;
  3306  002C3C  8889               	bsf	3977,4,c	;volatile
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;sort.c: 121: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3310  002C3E  0EBA               	movlw	186
  3311  002C40                     u7127:
  3312  002C40  2EE8               	decfsz	wreg,f,c
  3313  002C42  D7FE               	bra	u7127
  3314  002C44  D000               	nop2	
  3315                           
  3316                           ;sort.c: 122: LATAbits.LATA4 = 0;
  3317  002C46  9889               	bcf	3977,4,c	;volatile
  3318                           
  3319                           ;sort.c: 123: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3320  002C48  0E50               	movlw	80
  3321  002C4A                     u7137:
  3322  002C4A  2EE8               	decfsz	wreg,f,c
  3323  002C4C  D7FE               	bra	u7137
  3324  002C4E  0100               	movlb	0	; () banked
  3325  002C50  4BB6               	infsnz	Loading@i_1098& (0+255),f,b
  3326  002C52  2BB7               	incf	(Loading@i_1098+1)& (0+255),f,b
  3327  002C54  D7E8               	goto	l6436
  3328  002C56                     l6446:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;sort.c: 124: }
  3332                           ;sort.c: 126: f_can_coming_to_ID = 1;
  3333  002C56  0E00               	movlw	0
  3334  002C58  6E70               	movwf	_f_can_coming_to_ID+1,c
  3335  002C5A  0E01               	movlw	1
  3336  002C5C  6E6F               	movwf	_f_can_coming_to_ID,c
  3337                           
  3338                           ; BSR set to: 0
  3339                           
  3340                           ; BSR set to: 0
  3341  002C5E  0012               	return	
  3342  002C60                     __end_of_Loading:
  3343                           	opt stack 0
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           prodh	equ	0xFF4
  3349                           prodl	equ	0xFF3
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           postdec1	equ	0xFE5
  3353                           fsr1l	equ	0xFE1
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _initSortTimer *****************
  3357 ;; Defined at:
  3358 ;;		line 258 in file "sort.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  i               2    8[BANK0 ] int 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;Total ram usage:        5 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:   10
  3379 ;; This function calls:
  3380 ;;		_getRTC
  3381 ;; This function is called by:
  3382 ;;		_Loading
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text4
  3387  0037EA                     __ptext4:
  3388                           	opt stack 0
  3389  0037EA                     _initSortTimer:
  3390                           	opt stack 18
  3391                           
  3392                           ;sort.c: 260: getRTC();
  3393                           
  3394                           ;incstack = 0
  3395  0037EA  EC25  F01D         	call	_getRTC	;wreg free
  3396                           
  3397                           ;sort.c: 261: for(int i = 0; i < 7; i++){
  3398  0037EE  0E00               	movlw	0
  3399  0037F0  0100               	movlb	0	; () banked
  3400  0037F2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3401  0037F4  0E00               	movlw	0
  3402  0037F6  6F88               	movwf	initSortTimer@i& (0+255),b
  3403  0037F8                     l5996:
  3404                           
  3405                           ; BSR set to: 0
  3406  0037F8  0100               	movlb	0	; () banked
  3407  0037FA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3408  0037FC  D008               	goto	l6000
  3409  0037FE  0100               	movlb	0	; () banked
  3410  003800  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3411  003802  E140               	bnz	l6006
  3412  003804  0E07               	movlw	7
  3413  003806  0100               	movlb	0	; () banked
  3414  003808  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3415  00380A  B0D8               	btfsc	status,0,c
  3416  00380C  D03B               	goto	l6006
  3417  00380E                     l6000:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;sort.c: 262: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3421  00380E  0E24               	movlw	low _time
  3422  003810  0100               	movlb	0	; () banked
  3423  003812  2588               	addwf	initSortTimer@i& (0+255),w,b
  3424  003814  6ED9               	movwf	fsr2l,c
  3425  003816  0E01               	movlw	high _time
  3426  003818  0100               	movlb	0	; () banked
  3427  00381A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3428  00381C  6EDA               	movwf	fsr2h,c
  3429  00381E  50DF               	movf	indf2,w,c
  3430  003820  0100               	movlb	0	; () banked
  3431  003822  6F85               	movwf	??_initSortTimer& (0+255),b
  3432  003824  0100               	movlb	0	; () banked
  3433  003826  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3434  003828  0E0F               	movlw	15
  3435  00382A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3436  00382C  0E0F               	movlw	15
  3437  00382E  0100               	movlb	0	; () banked
  3438  003830  1785               	andwf	??_initSortTimer& (0+255),f,b
  3439  003832  0100               	movlb	0	; () banked
  3440  003834  5185               	movf	??_initSortTimer& (0+255),w,b
  3441  003836  0D0A               	mullw	10
  3442  003838  0E24               	movlw	low _time
  3443  00383A  0100               	movlb	0	; () banked
  3444  00383C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3445  00383E  6ED9               	movwf	fsr2l,c
  3446  003840  0E01               	movlw	high _time
  3447  003842  0100               	movlb	0	; () banked
  3448  003844  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3449  003846  6EDA               	movwf	fsr2h,c
  3450  003848  50DF               	movf	indf2,w,c
  3451  00384A  0B0F               	andlw	15
  3452  00384C  0100               	movlb	0	; () banked
  3453  00384E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3454  003850  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3455  003852  50F3               	movf	prodl,w,c
  3456  003854  0100               	movlb	0	; () banked
  3457  003856  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3458  003858  50F4               	movf	prodh,w,c
  3459  00385A  0100               	movlb	0	; () banked
  3460  00385C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3461  00385E  90D8               	bcf	status,0,c
  3462  003860  0100               	movlb	0	; () banked
  3463  003862  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3464  003864  6ED9               	movwf	fsr2l,c
  3465  003866  0100               	movlb	0	; () banked
  3466  003868  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3467  00386A  6EDA               	movwf	fsr2h,c
  3468  00386C  0E0E               	movlw	low _startTime
  3469  00386E  26D9               	addwf	fsr2l,f,c
  3470  003870  0E01               	movlw	high _startTime
  3471  003872  22DA               	addwfc	fsr2h,f,c
  3472  003874  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3473  003878  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3474                           
  3475                           ; BSR set to: 0
  3476  00387C  0100               	movlb	0	; () banked
  3477  00387E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3478  003880  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3479  003882  D7BA               	goto	l5996
  3480  003884                     l6006:
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;sort.c: 263: }
  3484                           ;sort.c: 265: T0CON = 0b00010111;
  3485  003884  0E17               	movlw	23
  3486  003886  6ED5               	movwf	4053,c	;volatile
  3487                           
  3488                           ;sort.c: 274: TMR0H = 0b10000101;
  3489  003888  0E85               	movlw	133
  3490  00388A  6ED7               	movwf	4055,c	;volatile
  3491                           
  3492                           ;sort.c: 275: TMR0L = 0b11101110;
  3493  00388C  0EEE               	movlw	238
  3494  00388E  6ED6               	movwf	4054,c	;volatile
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;sort.c: 276: TMR0ON = 1;
  3498  003890  8ED5               	bsf	4053,7,c	;volatile
  3499                           
  3500                           ; BSR set to: 0
  3501  003892  0012               	return		;funcret
  3502  003894                     __end_of_initSortTimer:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _initGlobalVars *****************
  3522 ;; Defined at:
  3523 ;;		line 239 in file "sort.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    7
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_Loading
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text5
  3552  003D30                     __ptext5:
  3553                           	opt stack 0
  3554  003D30                     _initGlobalVars:
  3555                           	opt stack 21
  3556                           
  3557                           ;sort.c: 241: first = 0;
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;incstack = 0
  3561  003D30  0E00               	movlw	0
  3562  003D32  0100               	movlb	0	; () banked
  3563  003D34  6FE5               	movwf	(_first+1)& (0+255),b
  3564  003D36  0E00               	movlw	0
  3565  003D38  6FE4               	movwf	_first& (0+255),b
  3566                           
  3567                           ;sort.c: 244: f_loadingNewCan = 0;
  3568  003D3A  0E00               	movlw	0
  3569  003D3C  0100               	movlb	0	; () banked
  3570  003D3E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3571  003D40  0E00               	movlw	0
  3572  003D42  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3573                           
  3574                           ;sort.c: 245: f_lastCan = 0;
  3575  003D44  0E00               	movlw	0
  3576  003D46  6E74               	movwf	_f_lastCan+1,c
  3577  003D48  0E00               	movlw	0
  3578  003D4A  6E73               	movwf	_f_lastCan,c
  3579                           
  3580                           ;sort.c: 246: f_ID_receive = 1;
  3581  003D4C  0E00               	movlw	0
  3582  003D4E  6E6E               	movwf	_f_ID_receive+1,c
  3583  003D50  0E01               	movlw	1
  3584  003D52  6E6D               	movwf	_f_ID_receive,c
  3585                           
  3586                           ;sort.c: 247: f_can_coming_to_ID = 0;
  3587  003D54  0E00               	movlw	0
  3588  003D56  6E70               	movwf	_f_can_coming_to_ID+1,c
  3589  003D58  0E00               	movlw	0
  3590  003D5A  6E6F               	movwf	_f_can_coming_to_ID,c
  3591                           
  3592                           ;sort.c: 248: f_can_coming_to_distribution = 0;
  3593  003D5C  0E00               	movlw	0
  3594  003D5E  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3595  003D60  0E00               	movlw	0
  3596  003D62  6E71               	movwf	_f_can_coming_to_distribution,c
  3597                           
  3598                           ;sort.c: 249: f_can_distributed = 0;
  3599  003D64  0E00               	movlw	0
  3600  003D66  0101               	movlb	1	; () banked
  3601  003D68  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3602  003D6A  0E00               	movlw	0
  3603  003D6C  6F2B               	movwf	_f_can_distributed& (0+255),b
  3604                           
  3605                           ;sort.c: 252: count_total = 0;
  3606  003D6E  0E00               	movlw	0
  3607  003D70  0100               	movlb	0	; () banked
  3608  003D72  6FFF               	movwf	(_count_total+1)& (0+255),b
  3609  003D74  0E00               	movlw	0
  3610  003D76  6FFE               	movwf	_count_total& (0+255),b
  3611                           
  3612                           ;sort.c: 253: count_pop_no_tab = 0;
  3613  003D78  0E00               	movlw	0
  3614  003D7A  6E62               	movwf	_count_pop_no_tab+1,c
  3615  003D7C  0E00               	movlw	0
  3616  003D7E  6E61               	movwf	_count_pop_no_tab,c
  3617                           
  3618                           ;sort.c: 254: count_pop_w_tab = 0;
  3619  003D80  0E00               	movlw	0
  3620  003D82  6E64               	movwf	_count_pop_w_tab+1,c
  3621  003D84  0E00               	movlw	0
  3622  003D86  6E63               	movwf	_count_pop_w_tab,c
  3623                           
  3624                           ;sort.c: 255: count_can_w_lab = 0;
  3625  003D88  0E00               	movlw	0
  3626  003D8A  6E60               	movwf	_count_can_w_lab+1,c
  3627  003D8C  0E00               	movlw	0
  3628  003D8E  6E5F               	movwf	_count_can_w_lab,c
  3629                           
  3630                           ;sort.c: 256: count_can_no_lab = 0;
  3631  003D90  0E00               	movlw	0
  3632  003D92  6E5E               	movwf	_count_can_no_lab+1,c
  3633  003D94  0E00               	movlw	0
  3634  003D96  6E5D               	movwf	_count_can_no_lab,c
  3635                           
  3636                           ; BSR set to: 0
  3637  003D98  0012               	return		;funcret
  3638  003D9A                     __end_of_initGlobalVars:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           fsr2h	equ	0xFDA
  3654                           fsr2l	equ	0xFD9
  3655                           status	equ	0xFD8
  3656                           
  3657 ;; *************** function _getIR *****************
  3658 ;; Defined at:
  3659 ;;		line 316 in file "sort.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;Total ram usage:        2 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    9
  3680 ;; This function calls:
  3681 ;;		_readIR
  3682 ;; This function is called by:
  3683 ;;		_Loading
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text6
  3688  00402C                     __ptext6:
  3689                           	opt stack 0
  3690  00402C                     _getIR:
  3691                           	opt stack 19
  3692                           
  3693                           ;sort.c: 317: readIR();
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;incstack = 0
  3697  00402C  EC90  F020         	call	_readIR	;wreg free
  3698                           
  3699                           ;sort.c: 319: if(IR_signal==1){
  3700  004030  0100               	movlb	0	; () banked
  3701  004032  05DA               	decf	_IR_signal& (0+255),w,b
  3702  004034  0100               	movlb	0	; () banked
  3703  004036  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3704  004038  A4D8               	btfss	status,2,c
  3705  00403A  0012               	return	
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;sort.c: 320: _delay((unsigned long)((500)*(32000000/4000.0)));
  3709  00403C  0E15               	movlw	21
  3710  00403E  0100               	movlb	0	; () banked
  3711  004040  6F87               	movwf	(??_getIR+1)& (0+255),b
  3712  004042  0E4B               	movlw	75
  3713  004044  0100               	movlb	0	; () banked
  3714  004046  6F86               	movwf	??_getIR& (0+255),b
  3715  004048  0EBE               	movlw	190
  3716  00404A                     u7147:
  3717  00404A  2EE8               	decfsz	wreg,f,c
  3718  00404C  D7FE               	bra	u7147
  3719  00404E  2F86               	decfsz	??_getIR& (0+255),f,b
  3720  004050  D7FC               	bra	u7147
  3721  004052  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3722  004054  D7FA               	bra	u7147
  3723  004056  F000               	nop	
  3724                           
  3725                           ;sort.c: 321: readIR();
  3726  004058  EC90  F020         	call	_readIR	;wreg free
  3727                           
  3728                           ;sort.c: 322: if(IR_signal==1){
  3729  00405C  0100               	movlb	0	; () banked
  3730  00405E  05DA               	decf	_IR_signal& (0+255),w,b
  3731  004060  0100               	movlb	0	; () banked
  3732  004062  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3733  004064  A4D8               	btfss	status,2,c
  3734  004066  D006               	goto	l6096
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;sort.c: 323: f_loadingNewCan = 1;
  3738  004068  0E00               	movlw	0
  3739  00406A  0100               	movlb	0	; () banked
  3740  00406C  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3741  00406E  0E01               	movlw	1
  3742  004070  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3743                           
  3744                           ;sort.c: 324: }
  3745  004072  0012               	return	
  3746  004074                     l6096:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;sort.c: 325: else{
  3750                           ;sort.c: 326: f_loadingNewCan = 0;
  3751  004074  0E00               	movlw	0
  3752  004076  0100               	movlb	0	; () banked
  3753  004078  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3754  00407A  0E00               	movlw	0
  3755  00407C  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758  00407E  0012               	return	
  3759  004080                     __end_of_getIR:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           postdec1	equ	0xFE5
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _readIR *****************
  3779 ;; Defined at:
  3780 ;;		line 23 in file "ADCFunctionality.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  res             2    4[BANK0 ] int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:        4 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    8
  3801 ;; This function calls:
  3802 ;;		_readADC
  3803 ;; This function is called by:
  3804 ;;		_getIR
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text7
  3809  004120                     __ptext7:
  3810                           	opt stack 0
  3811  004120                     _readIR:
  3812                           	opt stack 19
  3813                           
  3814                           ;ADCFunctionality.c: 24: readADC(0);
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;incstack = 0
  3818  004120  0E00               	movlw	0
  3819  004122  ECF3  F022         	call	_readADC
  3820                           
  3821                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3822  004126  50C3               	movf	4035,w,c	;volatile
  3823  004128  CFC4 F082          	movff	4036,??_readIR	;volatile
  3824  00412C  0100               	movlb	0	; () banked
  3825  00412E  6B83               	clrf	(??_readIR+1)& (0+255),b
  3826  004130  C082  F083         	movff	??_readIR,??_readIR+1
  3827  004134  0100               	movlb	0	; () banked
  3828  004136  6B82               	clrf	??_readIR& (0+255),b
  3829  004138  0100               	movlb	0	; () banked
  3830  00413A  1182               	iorwf	??_readIR& (0+255),w,b
  3831  00413C  0100               	movlb	0	; () banked
  3832  00413E  6F84               	movwf	readIR@res& (0+255),b
  3833  004140  0100               	movlb	0	; () banked
  3834  004142  5183               	movf	(??_readIR+1)& (0+255),w,b
  3835  004144  0100               	movlb	0	; () banked
  3836  004146  6F85               	movwf	(readIR@res+1)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3840  004148  0100               	movlb	0	; () banked
  3841  00414A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3842  00414C  D00A               	goto	u3800
  3843  00414E  0EE9               	movlw	233
  3844  004150  0100               	movlb	0	; () banked
  3845  004152  5D84               	subwf	readIR@res& (0+255),w,b
  3846  004154  0E03               	movlw	3
  3847  004156  0100               	movlb	0	; () banked
  3848  004158  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3849  00415A  A0D8               	btfss	status,0,c
  3850  00415C  D002               	goto	u3800
  3851  00415E  0E01               	movlw	1
  3852  004160  D001               	goto	u3810
  3853  004162                     u3800:
  3854  004162  0E00               	movlw	0
  3855  004164                     u3810:
  3856  004164  0100               	movlb	0	; () banked
  3857  004166  6FDA               	movwf	_IR_signal& (0+255),b
  3858  004168  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3859                           
  3860                           ; BSR set to: 0
  3861  00416A  0012               	return		;funcret
  3862  00416C                     __end_of_readIR:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1l	equ	0xFE1
  3874                           indf2	equ	0xFDF
  3875                           postinc2	equ	0xFDE
  3876                           postdec2	equ	0xFDD
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _delay_ms *****************
  3882 ;; Defined at:
  3883 ;;		line 351 in file "sort.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  milliseconds    1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;Total ram usage:        2 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    7
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_Loading
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text8
  3912  00463C                     __ptext8:
  3913                           	opt stack 0
  3914  00463C                     _delay_ms:
  3915                           	opt stack 21
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;incstack = 0
  3919                           ;delay_ms@milliseconds stored from wreg
  3920  00463C  0100               	movlb	0	; () banked
  3921  00463E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3922                           
  3923                           ;sort.c: 352: while(milliseconds > 0)
  3924  004640  D00B               	goto	l6068
  3925  004642                     l6064:
  3926                           
  3927                           ;sort.c: 353: {
  3928                           ;sort.c: 354: milliseconds--;
  3929  004642  0100               	movlb	0	; () banked
  3930  004644  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 355: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3934  004646  0E0B               	movlw	11
  3935  004648  0100               	movlb	0	; () banked
  3936  00464A  6F80               	movwf	??_delay_ms& (0+255),b
  3937  00464C  0E47               	movlw	71
  3938  00464E                     u7157:
  3939  00464E  2EE8               	decfsz	wreg,f,c
  3940  004650  D7FE               	bra	u7157
  3941  004652  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3942  004654  D7FC               	bra	u7157
  3943  004656  D000               	nop2	
  3944  004658                     l6068:
  3945  004658  0100               	movlb	0	; () banked
  3946  00465A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3947  00465C  0100               	movlb	0	; () banked
  3948  00465E  B4D8               	btfsc	status,2,c
  3949  004660  0012               	return	
  3950  004662  D7EF               	goto	l6064
  3951  004664                     __end_of_delay_ms:
  3952                           	opt stack 0
  3953                           tblptru	equ	0xFF8
  3954                           tblptrh	equ	0xFF7
  3955                           tblptrl	equ	0xFF6
  3956                           tablat	equ	0xFF5
  3957                           prodh	equ	0xFF4
  3958                           prodl	equ	0xFF3
  3959                           postinc0	equ	0xFEE
  3960                           wreg	equ	0xFE8
  3961                           postdec1	equ	0xFE5
  3962                           fsr1l	equ	0xFE1
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _ID *****************
  3971 ;; Defined at:
  3972 ;;		line 130 in file "sort.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  i               2   10[BANK0 ] int 
  3977 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;Total ram usage:       10 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:   10
  3994 ;; This function calls:
  3995 ;;		_getMAG
  3996 ;; This function is called by:
  3997 ;;		_sort
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text9
  4002  002F2C                     __ptext9:
  4003                           	opt stack 0
  4004  002F2C                     _ID:
  4005                           	opt stack 19
  4006                           
  4007                           ;sort.c: 131: if(f_can_coming_to_ID){
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;incstack = 0
  4011  002F2C  506F               	movf	_f_can_coming_to_ID,w,c
  4012  002F2E  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  4013  002F30  B4D8               	btfsc	status,2,c
  4014  002F32  0012               	return	
  4015                           
  4016                           ;sort.c: 133: _delay((unsigned long)((750)*(32000000/4000.0)));
  4017  002F34  0E1F               	movlw	31
  4018  002F36  0100               	movlb	0	; () banked
  4019  002F38  6F89               	movwf	(??_ID+1)& (0+255),b
  4020  002F3A  0E71               	movlw	113
  4021  002F3C  0100               	movlb	0	; () banked
  4022  002F3E  6F88               	movwf	??_ID& (0+255),b
  4023  002F40  0E1E               	movlw	30
  4024  002F42                     u7167:
  4025  002F42  2EE8               	decfsz	wreg,f,c
  4026  002F44  D7FE               	bra	u7167
  4027  002F46  2F88               	decfsz	??_ID& (0+255),f,b
  4028  002F48  D7FC               	bra	u7167
  4029  002F4A  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4030  002F4C  D7FA               	bra	u7167
  4031  002F4E  F000               	nop	
  4032                           
  4033                           ;sort.c: 138: int sensor_outputs[3];
  4034                           ;sort.c: 142: sensor_outputs[0] = PORTAbits.RA2;
  4035  002F50  A480               	btfss	3968,2,c	;volatile
  4036  002F52  D004               	goto	u4940
  4037  002F54  0100               	movlb	0	; () banked
  4038  002F56  6B88               	clrf	??_ID& (0+255),b
  4039  002F58  2B88               	incf	??_ID& (0+255),f,b
  4040  002F5A  D002               	goto	u4948
  4041  002F5C                     u4940:
  4042  002F5C  0100               	movlb	0	; () banked
  4043  002F5E  6B88               	clrf	??_ID& (0+255),b
  4044  002F60                     u4948:
  4045  002F60  0100               	movlb	0	; () banked
  4046  002F62  5188               	movf	??_ID& (0+255),w,b
  4047  002F64  0100               	movlb	0	; () banked
  4048  002F66  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4049  002F68  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;sort.c: 144: if(!sensor_outputs[0]){
  4053  002F6A  0100               	movlb	0	; () banked
  4054  002F6C  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4055  002F6E  0100               	movlb	0	; () banked
  4056  002F70  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4057  002F72  A4D8               	btfss	status,2,c
  4058  002F74  D029               	goto	l6470
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;sort.c: 145: getMAG();
  4062  002F76  EC8E  F021         	call	_getMAG	;wreg free
  4063                           
  4064                           ;sort.c: 146: sensor_outputs[1] = MAG_signal;
  4065  002F7A  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4066  002F7E  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4067                           
  4068                           ;sort.c: 147: if(!sensor_outputs[1]){
  4069  002F82  0100               	movlb	0	; () banked
  4070  002F84  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4071  002F86  0100               	movlb	0	; () banked
  4072  002F88  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4073  002F8A  A4D8               	btfss	status,2,c
  4074  002F8C  D01D               	goto	l6470
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;sort.c: 148: LATAbits.LATA3 = 1;
  4078  002F8E  8689               	bsf	3977,3,c	;volatile
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;sort.c: 150: _delay((unsigned long)((600)*(32000000/4000.0)));
  4082  002F90  0E19               	movlw	25
  4083  002F92  0100               	movlb	0	; () banked
  4084  002F94  6F89               	movwf	(??_ID+1)& (0+255),b
  4085  002F96  0E5A               	movlw	90
  4086  002F98  0100               	movlb	0	; () banked
  4087  002F9A  6F88               	movwf	??_ID& (0+255),b
  4088  002F9C  0EB1               	movlw	177
  4089  002F9E                     u7177:
  4090  002F9E  2EE8               	decfsz	wreg,f,c
  4091  002FA0  D7FE               	bra	u7177
  4092  002FA2  2F88               	decfsz	??_ID& (0+255),f,b
  4093  002FA4  D7FC               	bra	u7177
  4094  002FA6  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4095  002FA8  D7FA               	bra	u7177
  4096  002FAA  D000               	nop2	
  4097                           
  4098                           ;sort.c: 151: sensor_outputs[2] = PORTAbits.RA2;
  4099  002FAC  A480               	btfss	3968,2,c	;volatile
  4100  002FAE  D004               	goto	u4970
  4101  002FB0  0100               	movlb	0	; () banked
  4102  002FB2  6B88               	clrf	??_ID& (0+255),b
  4103  002FB4  2B88               	incf	??_ID& (0+255),f,b
  4104  002FB6  D002               	goto	u4978
  4105  002FB8                     u4970:
  4106  002FB8  0100               	movlb	0	; () banked
  4107  002FBA  6B88               	clrf	??_ID& (0+255),b
  4108  002FBC                     u4978:
  4109  002FBC  0100               	movlb	0	; () banked
  4110  002FBE  5188               	movf	??_ID& (0+255),w,b
  4111  002FC0  0100               	movlb	0	; () banked
  4112  002FC2  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4113  002FC4  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;sort.c: 152: LATAbits.LATA3 = 0;
  4117  002FC6  9689               	bcf	3977,3,c	;volatile
  4118  002FC8                     l6470:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;sort.c: 153: }
  4122                           ;sort.c: 154: }
  4123                           ;sort.c: 162: if(!sensor_outputs[0]){
  4124  002FC8  0100               	movlb	0	; () banked
  4125  002FCA  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4126  002FCC  0100               	movlb	0	; () banked
  4127  002FCE  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4128  002FD0  A4D8               	btfss	status,2,c
  4129  002FD2  D01E               	goto	l6488
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;sort.c: 163: if(!sensor_outputs[1]){
  4133  002FD4  0100               	movlb	0	; () banked
  4134  002FD6  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4135  002FD8  0100               	movlb	0	; () banked
  4136  002FDA  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4137  002FDC  A4D8               	btfss	status,2,c
  4138  002FDE  D012               	goto	l6484
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;sort.c: 164: if(!sensor_outputs[2]){
  4142  002FE0  0100               	movlb	0	; () banked
  4143  002FE2  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4144  002FE4  0100               	movlb	0	; () banked
  4145  002FE6  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4146  002FE8  A4D8               	btfss	status,2,c
  4147  002FEA  D006               	goto	l6480
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 165: count_pop_no_tab++;
  4151  002FEC  4A61               	infsnz	_count_pop_no_tab,f,c
  4152  002FEE  2A62               	incf	_count_pop_no_tab+1,f,c
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;sort.c: 166: cur_can = 0;
  4156  002FF0  0E00               	movlw	0
  4157  002FF2  6E66               	movwf	_cur_can+1,c
  4158  002FF4  0E00               	movlw	0
  4159  002FF6  D011               	goto	L4
  4160  002FF8                     l6480:
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;sort.c: 168: else{
  4164                           ;sort.c: 169: count_pop_w_tab++;
  4165  002FF8  4A63               	infsnz	_count_pop_w_tab,f,c
  4166  002FFA  2A64               	incf	_count_pop_w_tab+1,f,c
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;sort.c: 170: cur_can = 1;
  4170  002FFC  0E00               	movlw	0
  4171  002FFE  6E66               	movwf	_cur_can+1,c
  4172  003000  0E01               	movlw	1
  4173  003002  D00B               	goto	L4
  4174  003004                     l6484:
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;sort.c: 173: else{
  4178                           ;sort.c: 174: count_can_w_lab++;
  4179  003004  4A5F               	infsnz	_count_can_w_lab,f,c
  4180  003006  2A60               	incf	_count_can_w_lab+1,f,c
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;sort.c: 175: cur_can = 2;
  4184  003008  0E00               	movlw	0
  4185  00300A  6E66               	movwf	_cur_can+1,c
  4186  00300C  0E02               	movlw	2
  4187  00300E  D005               	goto	L4
  4188  003010                     l6488:
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;sort.c: 178: else{
  4192                           ;sort.c: 179: count_can_no_lab++;
  4193  003010  4A5D               	infsnz	_count_can_no_lab,f,c
  4194  003012  2A5E               	incf	_count_can_no_lab+1,f,c
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;sort.c: 180: cur_can = 3;
  4198  003014  0E00               	movlw	0
  4199  003016  6E66               	movwf	_cur_can+1,c
  4200  003018  0E03               	movlw	3
  4201  00301A                     L4:
  4202  00301A  6E65               	movwf	_cur_can,c
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 181: }
  4206                           ;sort.c: 185: for(int i=0;i<10000;i++)
  4207                           
  4208                           ; BSR set to: 0
  4209  00301C  0E00               	movlw	0
  4210  00301E  0100               	movlb	0	; () banked
  4211  003020  6F8B               	movwf	(ID@i+1)& (0+255),b
  4212  003022  0E00               	movlw	0
  4213  003024  6F8A               	movwf	ID@i& (0+255),b
  4214  003026                     l6494:
  4215                           
  4216                           ; BSR set to: 0
  4217  003026  0100               	movlb	0	; () banked
  4218  003028  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4219  00302A  D008               	goto	l752
  4220  00302C  0E10               	movlw	16
  4221  00302E  0100               	movlb	0	; () banked
  4222  003030  5D8A               	subwf	ID@i& (0+255),w,b
  4223  003032  0E27               	movlw	39
  4224  003034  0100               	movlb	0	; () banked
  4225  003036  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4226  003038  B0D8               	btfsc	status,0,c
  4227  00303A  D00D               	goto	l753
  4228  00303C                     l752:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;sort.c: 186: {
  4232                           ;sort.c: 187: LATCbits.LATC0 = 1;
  4233  00303C  808B               	bsf	3979,0,c	;volatile
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;sort.c: 188: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4237  00303E  0E1A               	movlw	26
  4238  003040                     u7187:
  4239  003040  2EE8               	decfsz	wreg,f,c
  4240  003042  D7FE               	bra	u7187
  4241  003044  D000               	nop2	
  4242                           
  4243                           ;sort.c: 189: LATCbits.LATC0 = 0;
  4244  003046  908B               	bcf	3979,0,c	;volatile
  4245                           
  4246                           ;sort.c: 190: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4247  003048  0EF0               	movlw	240
  4248  00304A                     u7197:
  4249  00304A  2EE8               	decfsz	wreg,f,c
  4250  00304C  D7FE               	bra	u7197
  4251  00304E  0100               	movlb	0	; () banked
  4252  003050  4B8A               	infsnz	ID@i& (0+255),f,b
  4253  003052  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4254  003054  D7E8               	goto	l6494
  4255  003056                     l753:
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;sort.c: 191: }
  4259                           ;sort.c: 192: LATCbits.LATC0 = 0;
  4260  003056  908B               	bcf	3979,0,c	;volatile
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;sort.c: 194: f_can_coming_to_distribution = 1;
  4264  003058  0E00               	movlw	0
  4265  00305A  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4266  00305C  0E01               	movlw	1
  4267  00305E  6E71               	movwf	_f_can_coming_to_distribution,c
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;sort.c: 195: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4271  003060  0E3D               	movlw	61
  4272  003062  0100               	movlb	0	; () banked
  4273  003064  6F89               	movwf	(??_ID+1)& (0+255),b
  4274  003066  0EE1               	movlw	225
  4275  003068  0100               	movlb	0	; () banked
  4276  00306A  6F88               	movwf	??_ID& (0+255),b
  4277  00306C  0E3F               	movlw	63
  4278  00306E                     u7207:
  4279  00306E  2EE8               	decfsz	wreg,f,c
  4280  003070  D7FE               	bra	u7207
  4281  003072  2F88               	decfsz	??_ID& (0+255),f,b
  4282  003074  D7FC               	bra	u7207
  4283  003076  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4284  003078  D7FA               	bra	u7207
  4285  00307A  D000               	nop2	
  4286                           
  4287                           ;sort.c: 196: LATCbits.LATC0 = 1;
  4288  00307C  808B               	bsf	3979,0,c	;volatile
  4289                           
  4290                           ;sort.c: 198: f_can_coming_to_ID = 0;
  4291  00307E  0E00               	movlw	0
  4292  003080  6E70               	movwf	_f_can_coming_to_ID+1,c
  4293  003082  0E00               	movlw	0
  4294  003084  6E6F               	movwf	_f_can_coming_to_ID,c
  4295  003086  0012               	return	
  4296  003088                     __end_of_ID:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           postinc0	equ	0xFEE
  4305                           wreg	equ	0xFE8
  4306                           postdec1	equ	0xFE5
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _getMAG *****************
  4316 ;; Defined at:
  4317 ;;		line 330 in file "sort.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:        2 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    9
  4338 ;; This function calls:
  4339 ;;		_readMAG
  4340 ;; This function is called by:
  4341 ;;		_ID
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text10
  4346  00431C                     __ptext10:
  4347                           	opt stack 0
  4348  00431C                     _getMAG:
  4349                           	opt stack 19
  4350                           
  4351                           ;sort.c: 331: readMAG();
  4352                           
  4353                           ;incstack = 0
  4354  00431C  ECB6  F020         	call	_readMAG	;wreg free
  4355                           
  4356                           ;sort.c: 333: if(MAG_signal==1){
  4357  004320  0100               	movlb	0	; () banked
  4358  004322  05DC               	decf	_MAG_signal& (0+255),w,b
  4359  004324  0100               	movlb	0	; () banked
  4360  004326  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4361  004328  A4D8               	btfss	status,2,c
  4362  00432A  0012               	return	
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 334: _delay((unsigned long)((500)*(32000000/4000.0)));
  4366  00432C  0E15               	movlw	21
  4367  00432E  0100               	movlb	0	; () banked
  4368  004330  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4369  004332  0E4B               	movlw	75
  4370  004334  0100               	movlb	0	; () banked
  4371  004336  6F86               	movwf	??_getMAG& (0+255),b
  4372  004338  0EBE               	movlw	190
  4373  00433A                     u7217:
  4374  00433A  2EE8               	decfsz	wreg,f,c
  4375  00433C  D7FE               	bra	u7217
  4376  00433E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4377  004340  D7FC               	bra	u7217
  4378  004342  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4379  004344  D7FA               	bra	u7217
  4380  004346  F000               	nop	
  4381                           
  4382                           ;sort.c: 335: readMAG();
  4383  004348  ECB6  F020         	call	_readMAG	;wreg free
  4384  00434C  0012               	return	
  4385  00434E                     __end_of_getMAG:
  4386                           	opt stack 0
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           postdec1	equ	0xFE5
  4396                           fsr1l	equ	0xFE1
  4397                           indf2	equ	0xFDF
  4398                           postinc2	equ	0xFDE
  4399                           postdec2	equ	0xFDD
  4400                           fsr2h	equ	0xFDA
  4401                           fsr2l	equ	0xFD9
  4402                           status	equ	0xFD8
  4403                           
  4404 ;; *************** function _Distribution *****************
  4405 ;; Defined at:
  4406 ;;		line 201 in file "sort.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;Total ram usage:        2 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    8
  4427 ;; This function calls:
  4428 ;;		_updateServoPosition
  4429 ;; This function is called by:
  4430 ;;		_sort
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text11
  4435  002DCE                     __ptext11:
  4436                           	opt stack 0
  4437  002DCE                     _Distribution:
  4438                           	opt stack 21
  4439                           
  4440                           ;sort.c: 202: if(f_can_coming_to_distribution){
  4441                           
  4442                           ;incstack = 0
  4443  002DCE  5071               	movf	_f_can_coming_to_distribution,w,c
  4444  002DD0  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4445  002DD2  B4D8               	btfsc	status,2,c
  4446  002DD4  0012               	return	
  4447  002DD6  D034               	goto	l6526
  4448  002DD8                     l6516:
  4449                           
  4450                           ;sort.c: 207: updateServoPosition(500, 1);
  4451  002DD8  0E01               	movlw	1
  4452  002DDA  0100               	movlb	0	; () banked
  4453  002DDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4454  002DDE  0EF4               	movlw	244
  4455  002DE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4456  002DE2  0E00               	movlw	0
  4457  002DE4  0100               	movlb	0	; () banked
  4458  002DE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4459  002DE8  0E01               	movlw	1
  4460  002DEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4461  002DEC  EC24  F01E         	call	_updateServoPosition	;wreg free
  4462                           
  4463                           ;sort.c: 208: break;
  4464  002DF0  D03E               	goto	l6528
  4465  002DF2                     l6518:
  4466                           
  4467                           ;sort.c: 210: updateServoPosition(750, 1);
  4468  002DF2  0E02               	movlw	2
  4469  002DF4  0100               	movlb	0	; () banked
  4470  002DF6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4471  002DF8  0EEE               	movlw	238
  4472  002DFA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4473  002DFC  0E00               	movlw	0
  4474  002DFE  0100               	movlb	0	; () banked
  4475  002E00  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4476  002E02  0E01               	movlw	1
  4477  002E04  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4478  002E06  EC24  F01E         	call	_updateServoPosition	;wreg free
  4479                           
  4480                           ;sort.c: 211: break;
  4481  002E0A  D031               	goto	l6528
  4482  002E0C                     l6520:
  4483                           
  4484                           ;sort.c: 213: updateServoPosition(1700, 1);
  4485  002E0C  0E06               	movlw	6
  4486  002E0E  0100               	movlb	0	; () banked
  4487  002E10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4488  002E12  0EA4               	movlw	164
  4489  002E14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4490  002E16  0E00               	movlw	0
  4491  002E18  0100               	movlb	0	; () banked
  4492  002E1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4493  002E1C  0E01               	movlw	1
  4494  002E1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4495  002E20  EC24  F01E         	call	_updateServoPosition	;wreg free
  4496                           
  4497                           ;sort.c: 214: break;
  4498  002E24  D024               	goto	l6528
  4499  002E26                     l6522:
  4500                           
  4501                           ;sort.c: 216: updateServoPosition(2100, 1);
  4502  002E26  0E08               	movlw	8
  4503  002E28  0100               	movlb	0	; () banked
  4504  002E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4505  002E2C  0E34               	movlw	52
  4506  002E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4507  002E30  0E00               	movlw	0
  4508  002E32  0100               	movlb	0	; () banked
  4509  002E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4510  002E36  0E01               	movlw	1
  4511  002E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4512  002E3A  EC24  F01E         	call	_updateServoPosition	;wreg free
  4513                           
  4514                           ;sort.c: 220: }
  4515                           
  4516                           ;sort.c: 219: break;
  4517                           
  4518                           ;sort.c: 218: default:
  4519                           
  4520                           ;sort.c: 217: break;
  4521  002E3E  D017               	goto	l6528
  4522  002E40                     l6526:
  4523  002E40  C065  F088         	movff	_cur_can,??_Distribution
  4524  002E44  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4525                           
  4526                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4527                           ; Switch size 1, requested type "space"
  4528                           ; Number of cases is 1, Range of values is 0 to 0
  4529                           ; switch strategies available:
  4530                           ; Name         Instructions Cycles
  4531                           ; simple_byte            4     3 (average)
  4532                           ;	Chosen strategy is simple_byte
  4533  002E48  0100               	movlb	0	; () banked
  4534  002E4A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4535  002E4C  0A00               	xorlw	0	; case 0
  4536  002E4E  A4D8               	btfss	status,2,c
  4537  002E50  D00E               	goto	l6528
  4538                           
  4539                           ; BSR set to: 0
  4540                           ; Switch size 1, requested type "space"
  4541                           ; Number of cases is 4, Range of values is 0 to 3
  4542                           ; switch strategies available:
  4543                           ; Name         Instructions Cycles
  4544                           ; simple_byte           13     7 (average)
  4545                           ;	Chosen strategy is simple_byte
  4546  002E52  0100               	movlb	0	; () banked
  4547  002E54  5188               	movf	??_Distribution& (0+255),w,b
  4548  002E56  0A00               	xorlw	0	; case 0
  4549  002E58  B4D8               	btfsc	status,2,c
  4550  002E5A  D7BE               	goto	l6516
  4551  002E5C  0A01               	xorlw	1	; case 1
  4552  002E5E  B4D8               	btfsc	status,2,c
  4553  002E60  D7C8               	goto	l6518
  4554  002E62  0A03               	xorlw	3	; case 2
  4555  002E64  B4D8               	btfsc	status,2,c
  4556  002E66  D7D2               	goto	l6520
  4557  002E68  0A01               	xorlw	1	; case 3
  4558  002E6A  B4D8               	btfsc	status,2,c
  4559  002E6C  D7DC               	goto	l6522
  4560  002E6E                     l6528:
  4561                           
  4562                           ;sort.c: 221: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4563  002E6E  0E3D               	movlw	61
  4564  002E70  0100               	movlb	0	; () banked
  4565  002E72  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4566  002E74  0EE1               	movlw	225
  4567  002E76  0100               	movlb	0	; () banked
  4568  002E78  6F88               	movwf	??_Distribution& (0+255),b
  4569  002E7A  0E3F               	movlw	63
  4570  002E7C                     u7227:
  4571  002E7C  2EE8               	decfsz	wreg,f,c
  4572  002E7E  D7FE               	bra	u7227
  4573  002E80  2F88               	decfsz	??_Distribution& (0+255),f,b
  4574  002E82  D7FC               	bra	u7227
  4575  002E84  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4576  002E86  D7FA               	bra	u7227
  4577  002E88  D000               	nop2	
  4578                           
  4579                           ;sort.c: 224: updateServoPosition(1350, 3);
  4580  002E8A  0E05               	movlw	5
  4581  002E8C  0100               	movlb	0	; () banked
  4582  002E8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4583  002E90  0E46               	movlw	70
  4584  002E92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4585  002E94  0E00               	movlw	0
  4586  002E96  0100               	movlb	0	; () banked
  4587  002E98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4588  002E9A  0E03               	movlw	3
  4589  002E9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4590  002E9E  EC24  F01E         	call	_updateServoPosition	;wreg free
  4591                           
  4592                           ;sort.c: 225: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4593  002EA2  0E52               	movlw	82
  4594  002EA4  0100               	movlb	0	; () banked
  4595  002EA6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4596  002EA8  0E2B               	movlw	43
  4597  002EAA  0100               	movlb	0	; () banked
  4598  002EAC  6F88               	movwf	??_Distribution& (0+255),b
  4599  002EAE  0E00               	movlw	0
  4600  002EB0                     u7237:
  4601  002EB0  2EE8               	decfsz	wreg,f,c
  4602  002EB2  D7FE               	bra	u7237
  4603  002EB4  2F88               	decfsz	??_Distribution& (0+255),f,b
  4604  002EB6  D7FC               	bra	u7237
  4605  002EB8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4606  002EBA  D7FA               	bra	u7237
  4607  002EBC  F000               	nop	
  4608                           
  4609                           ;sort.c: 228: updateServoPosition(1150, 3);
  4610  002EBE  0E04               	movlw	4
  4611  002EC0  0100               	movlb	0	; () banked
  4612  002EC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4613  002EC4  0E7E               	movlw	126
  4614  002EC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4615  002EC8  0E00               	movlw	0
  4616  002ECA  0100               	movlb	0	; () banked
  4617  002ECC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4618  002ECE  0E03               	movlw	3
  4619  002ED0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4620  002ED2  EC24  F01E         	call	_updateServoPosition	;wreg free
  4621                           
  4622                           ;sort.c: 229: _delay((unsigned long)((750)*(32000000/4000.0)));
  4623  002ED6  0E1F               	movlw	31
  4624  002ED8  0100               	movlb	0	; () banked
  4625  002EDA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4626  002EDC  0E71               	movlw	113
  4627  002EDE  0100               	movlb	0	; () banked
  4628  002EE0  6F88               	movwf	??_Distribution& (0+255),b
  4629  002EE2  0E1E               	movlw	30
  4630  002EE4                     u7247:
  4631  002EE4  2EE8               	decfsz	wreg,f,c
  4632  002EE6  D7FE               	bra	u7247
  4633  002EE8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4634  002EEA  D7FC               	bra	u7247
  4635  002EEC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4636  002EEE  D7FA               	bra	u7247
  4637  002EF0  F000               	nop	
  4638                           
  4639                           ;sort.c: 230: updateServoPosition(1200, 1);
  4640  002EF2  0E04               	movlw	4
  4641  002EF4  0100               	movlb	0	; () banked
  4642  002EF6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4643  002EF8  0EB0               	movlw	176
  4644  002EFA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4645  002EFC  0E00               	movlw	0
  4646  002EFE  0100               	movlb	0	; () banked
  4647  002F00  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4648  002F02  0E01               	movlw	1
  4649  002F04  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4650  002F06  EC24  F01E         	call	_updateServoPosition	;wreg free
  4651                           
  4652                           ;sort.c: 231: f_can_coming_to_distribution = 0;
  4653  002F0A  0E00               	movlw	0
  4654  002F0C  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4655  002F0E  0E00               	movlw	0
  4656  002F10  6E71               	movwf	_f_can_coming_to_distribution,c
  4657                           
  4658                           ;sort.c: 232: f_can_distributed = 1;
  4659  002F12  0E00               	movlw	0
  4660  002F14  0101               	movlb	1	; () banked
  4661  002F16  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4662  002F18  0E01               	movlw	1
  4663  002F1A  6F2B               	movwf	_f_can_distributed& (0+255),b
  4664                           
  4665                           ; BSR set to: 1
  4666                           ;sort.c: 233: if(f_lastCan == 1){
  4667  002F1C  0473               	decf	_f_lastCan,w,c
  4668  002F1E  1074               	iorwf	_f_lastCan+1,w,c
  4669  002F20  A4D8               	btfss	status,2,c
  4670  002F22  0012               	return	
  4671                           
  4672                           ; BSR set to: 1
  4673                           ;sort.c: 234: machine_state = DoneSorting_state;
  4674  002F24  0E02               	movlw	2
  4675  002F26  0100               	movlb	0	; () banked
  4676  002F28  6FFC               	movwf	_machine_state& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679  002F2A  0012               	return	
  4680  002F2C                     __end_of_Distribution:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postdec1	equ	0xFE5
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _machineConfig *****************
  4700 ;; Defined at:
  4701 ;;		line 15 in file "MachineConfig.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    7
  4722 ;; This function calls:
  4723 ;;		Nothing
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text12
  4730  003EC4                     __ptext12:
  4731                           	opt stack 0
  4732  003EC4                     _machineConfig:
  4733                           	opt stack 23
  4734                           
  4735                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4736                           
  4737                           ;incstack = 0
  4738  003EC4  0EF0               	movlw	240
  4739  003EC6  6ED3               	movwf	4051,c	;volatile
  4740                           
  4741                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4742  003EC8  8C9B               	bsf	3995,6,c	;volatile
  4743                           
  4744                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4745  003ECA  0E07               	movlw	7
  4746  003ECC  6E92               	movwf	3986,c	;volatile
  4747                           
  4748                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4749  003ECE  0EF2               	movlw	242
  4750  003ED0  6E93               	movwf	3987,c	;volatile
  4751                           
  4752                           ;MachineConfig.c: 27: TRISC = 0x00;
  4753  003ED2  0E00               	movlw	0
  4754  003ED4  6E94               	movwf	3988,c	;volatile
  4755                           
  4756                           ;MachineConfig.c: 31: TRISD = 0x00;
  4757  003ED6  0E00               	movlw	0
  4758  003ED8  6E95               	movwf	3989,c	;volatile
  4759                           
  4760                           ;MachineConfig.c: 34: TRISE = 0x00;
  4761  003EDA  0E00               	movlw	0
  4762  003EDC  6E96               	movwf	3990,c	;volatile
  4763                           
  4764                           ;MachineConfig.c: 37: LATA = 0x00;
  4765  003EDE  0E00               	movlw	0
  4766  003EE0  6E89               	movwf	3977,c	;volatile
  4767                           
  4768                           ;MachineConfig.c: 38: LATB = 0x00;
  4769  003EE2  0E00               	movlw	0
  4770  003EE4  6E8A               	movwf	3978,c	;volatile
  4771                           
  4772                           ;MachineConfig.c: 39: LATC = 0x00;
  4773  003EE6  0E00               	movlw	0
  4774  003EE8  6E8B               	movwf	3979,c	;volatile
  4775                           
  4776                           ;MachineConfig.c: 40: LATD = 0x00;
  4777  003EEA  0E00               	movlw	0
  4778  003EEC  6E8C               	movwf	3980,c	;volatile
  4779                           
  4780                           ;MachineConfig.c: 41: LATE = 0x00;
  4781  003EEE  0E00               	movlw	0
  4782  003EF0  6E8D               	movwf	3981,c	;volatile
  4783                           
  4784                           ;MachineConfig.c: 43: nRBPU = 0;
  4785  003EF2  9EF1               	bcf	intcon2,7,c	;volatile
  4786                           
  4787                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4788  003EF4  0E00               	movlw	0
  4789  003EF6  6EC2               	movwf	4034,c	;volatile
  4790                           
  4791                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4792  003EF8  0E0D               	movlw	13
  4793  003EFA  6EC1               	movwf	4033,c	;volatile
  4794                           
  4795                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4796  003EFC  0E00               	movlw	0
  4797  003EFE  6EB5               	movwf	4021,c	;volatile
  4798                           
  4799                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4800  003F00  96B4               	bcf	4020,3,c	;volatile
  4801                           
  4802                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4803  003F02  0EB1               	movlw	177
  4804  003F04  6EC0               	movwf	4032,c	;volatile
  4805                           
  4806                           ;MachineConfig.c: 55: INT1IE = 1;
  4807  003F06  86F0               	bsf	intcon3,3,c	;volatile
  4808                           
  4809                           ;MachineConfig.c: 57: TMR0IE = 1;
  4810  003F08  8AF2               	bsf	intcon,5,c	;volatile
  4811                           
  4812                           ;MachineConfig.c: 58: TMR1IE = 1;
  4813  003F0A  809D               	bsf	3997,0,c	;volatile
  4814                           
  4815                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4816  003F0C  0EB0               	movlw	176
  4817  003F0E  6ECD               	movwf	4045,c	;volatile
  4818                           
  4819                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4820  003F10  0EB0               	movlw	176
  4821  003F12  6EB1               	movwf	4017,c	;volatile
  4822                           
  4823                           ;MachineConfig.c: 61: TMR2IE = 1;
  4824  003F14  829D               	bsf	3997,1,c	;volatile
  4825                           
  4826                           ;MachineConfig.c: 62: TMR3IE = 1;
  4827  003F16  82A0               	bsf	4000,1,c	;volatile
  4828                           
  4829                           ;MachineConfig.c: 63: PEIE = 1;
  4830  003F18  8CF2               	bsf	intcon,6,c	;volatile
  4831                           
  4832                           ;MachineConfig.c: 64: ADIE = 0;
  4833  003F1A  9C9D               	bcf	3997,6,c	;volatile
  4834                           
  4835                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4836  003F1C  9EF2               	bcf	intcon,7,c	;volatile
  4837  003F1E  0012               	return		;funcret
  4838  003F20                     __end_of_machineConfig:
  4839                           	opt stack 0
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           intcon2	equ	0xFF1
  4848                           intcon3	equ	0xFF0
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postdec1	equ	0xFE5
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _logRun *****************
  4861 ;; Defined at:
  4862 ;;		line 84 in file "EEPROM.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4867 ;;  i               2   55[BANK0 ] int 
  4868 ;;  num             1   49[BANK0 ] unsigned char 
  4869 ;;  addr            2   57[BANK0 ] unsigned short 
  4870 ;;  byte11          1   54[BANK0 ] unsigned char 
  4871 ;;  byte3           1   52[BANK0 ] unsigned char 
  4872 ;;  byte2           1   51[BANK0 ] unsigned char 
  4873 ;;  byte1           1   50[BANK0 ] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;Total ram usage:       10 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:   11
  4890 ;; This function calls:
  4891 ;;		_EEPROM_read
  4892 ;;		_EEPROM_write
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text13
  4899  003088                     __ptext13:
  4900                           	opt stack 0
  4901  003088                     _logRun:
  4902                           	opt stack 19
  4903                           
  4904                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4905                           
  4906                           ;incstack = 0
  4907  003088  0E00               	movlw	0
  4908  00308A  0100               	movlb	0	; () banked
  4909  00308C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4910  00308E  0E00               	movlw	0
  4911  003090  6F80               	movwf	EEPROM_read@address& (0+255),b
  4912  003092  ECAF  F023         	call	_EEPROM_read	;wreg free
  4913  003096  0100               	movlb	0	; () banked
  4914  003098  6FFD               	movwf	_sel& (0+255),b
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4918  00309A  0100               	movlb	0	; () banked
  4919  00309C  51FD               	movf	_sel& (0+255),w,b
  4920  00309E  0D0B               	mullw	11
  4921  0030A0  0E01               	movlw	1
  4922  0030A2  24F3               	addwf	prodl,w,c
  4923  0030A4  0100               	movlb	0	; () banked
  4924  0030A6  6FB9               	movwf	logRun@addr& (0+255),b
  4925  0030A8  0E00               	movlw	0
  4926  0030AA  20F4               	addwfc	prodh,w,c
  4927  0030AC  0100               	movlb	0	; () banked
  4928  0030AE  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;EEPROM.c: 101: if (sel < 3){
  4932  0030B0  0E03               	movlw	3
  4933  0030B2  0100               	movlb	0	; () banked
  4934  0030B4  61FD               	cpfslt	_sel& (0+255),b
  4935  0030B6  D00E               	goto	l7968
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4939  0030B8  0100               	movlb	0	; () banked
  4940  0030BA  29FD               	incf	_sel& (0+255),w,b
  4941  0030BC  0100               	movlb	0	; () banked
  4942  0030BE  6FB1               	movwf	logRun@num& (0+255),b
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4946  0030C0  0E00               	movlw	0
  4947  0030C2  0100               	movlb	0	; () banked
  4948  0030C4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4949  0030C6  0E00               	movlw	0
  4950  0030C8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4951  0030CA  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4952  0030CE  ECF9  F019         	call	_EEPROM_write	;wreg free
  4953                           
  4954                           ;EEPROM.c: 104: }
  4955  0030D2  D00A               	goto	l7970
  4956  0030D4                     l7968:
  4957                           
  4958                           ;EEPROM.c: 105: else{
  4959                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4960  0030D4  0E00               	movlw	0
  4961  0030D6  0100               	movlb	0	; () banked
  4962  0030D8  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4963  0030DA  0E00               	movlw	0
  4964  0030DC  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4965  0030DE  0E00               	movlw	0
  4966  0030E0  0100               	movlb	0	; () banked
  4967  0030E2  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4968  0030E4  ECF9  F019         	call	_EEPROM_write	;wreg free
  4969  0030E8                     l7970:
  4970                           
  4971                           ;EEPROM.c: 107: }
  4972                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4973  0030E8  0100               	movlb	0	; () banked
  4974  0030EA  51FE               	movf	_count_total& (0+255),w,b
  4975  0030EC  0980               	iorlw	128
  4976  0030EE  0100               	movlb	0	; () banked
  4977  0030F0  6FB2               	movwf	logRun@byte1& (0+255),b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4981  0030F2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4982  0030F6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4983  0030FA  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4984  0030FE  ECF9  F019         	call	_EEPROM_write	;wreg free
  4985                           
  4986                           ;EEPROM.c: 112: addr++;
  4987  003102  0100               	movlb	0	; () banked
  4988  003104  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4989  003106  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4993  003108  3861               	swapf	_count_pop_no_tab,w,c
  4994  00310A  0BF0               	andlw	240
  4995  00310C  1063               	iorwf	_count_pop_w_tab,w,c
  4996  00310E  0100               	movlb	0	; () banked
  4997  003110  6FB3               	movwf	logRun@byte2& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5001  003112  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5002  003116  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5003  00311A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5004  00311E  ECF9  F019         	call	_EEPROM_write	;wreg free
  5005                           
  5006                           ;EEPROM.c: 117: addr++;
  5007  003122  0100               	movlb	0	; () banked
  5008  003124  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5009  003126  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5013  003128  385F               	swapf	_count_can_w_lab,w,c
  5014  00312A  0BF0               	andlw	240
  5015  00312C  105D               	iorwf	_count_can_no_lab,w,c
  5016  00312E  0100               	movlb	0	; () banked
  5017  003130  6FB4               	movwf	logRun@byte3& (0+255),b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5021  003132  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5022  003136  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5023  00313A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5024  00313E  ECF9  F019         	call	_EEPROM_write	;wreg free
  5025                           
  5026                           ;EEPROM.c: 120: addr++;
  5027  003142  0100               	movlb	0	; () banked
  5028  003144  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5029  003146  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5033  003148  0E00               	movlw	0
  5034  00314A  0100               	movlb	0	; () banked
  5035  00314C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5036  00314E  0E00               	movlw	0
  5037  003150  6FB7               	movwf	logRun@i& (0+255),b
  5038                           
  5039                           ; BSR set to: 0
  5040  003152  0100               	movlb	0	; () banked
  5041  003154  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5042  003156  D008               	goto	l7994
  5043  003158  0100               	movlb	0	; () banked
  5044  00315A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5045  00315C  E128               	bnz	l954
  5046  00315E  0E07               	movlw	7
  5047  003160  0100               	movlb	0	; () banked
  5048  003162  5DB7               	subwf	logRun@i& (0+255),w,b
  5049  003164  B0D8               	btfsc	status,0,c
  5050  003166  D023               	goto	l954
  5051  003168                     l7994:
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5055  003168  90D8               	bcf	status,0,c
  5056  00316A  0100               	movlb	0	; () banked
  5057  00316C  35B7               	rlcf	logRun@i& (0+255),w,b
  5058  00316E  6ED9               	movwf	fsr2l,c
  5059  003170  0100               	movlb	0	; () banked
  5060  003172  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5061  003174  6EDA               	movwf	fsr2h,c
  5062  003176  0E0E               	movlw	low _startTime
  5063  003178  26D9               	addwf	fsr2l,f,c
  5064  00317A  0E01               	movlw	high _startTime
  5065  00317C  22DA               	addwfc	fsr2h,f,c
  5066  00317E  50DF               	movf	indf2,w,c
  5067  003180  0100               	movlb	0	; () banked
  5068  003182  6FB5               	movwf	logRun@byte_i& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5072  003184  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5073  003188  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5074  00318C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5075  003190  ECF9  F019         	call	_EEPROM_write	;wreg free
  5076                           
  5077                           ;EEPROM.c: 126: addr++;
  5078  003194  0100               	movlb	0	; () banked
  5079  003196  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5080  003198  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5081                           
  5082                           ; BSR set to: 0
  5083  00319A  0100               	movlb	0	; () banked
  5084  00319C  4BB7               	infsnz	logRun@i& (0+255),f,b
  5085  00319E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5086                           
  5087                           ; BSR set to: 0
  5088  0031A0  0100               	movlb	0	; () banked
  5089  0031A2  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5090  0031A4  D7E1               	goto	l7994
  5091  0031A6  0100               	movlb	0	; () banked
  5092  0031A8  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5093  0031AA  E101               	bnz	u6910
  5094  0031AC  D7D8               	goto	L5
  5095  0031AE                     u6910:
  5096  0031AE                     l954:
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;EEPROM.c: 127: }
  5100                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5101  0031AE  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5105  0031B2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5106  0031B6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5107  0031BA  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5108  0031BE  ECF9  F019         	call	_EEPROM_write	;wreg free
  5109  0031C2  0012               	return		;funcret
  5110  0031C4                     __end_of_logRun:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _EEPROM_write *****************
  5133 ;; Defined at:
  5134 ;;		line 32 in file "EEPROM.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  address         2   43[BANK0 ] unsigned short 
  5137 ;;  data            1   45[BANK0 ] unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  i               1   48[BANK0 ] unsigned char 
  5140 ;;  i               1   47[BANK0 ] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        6 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:   10
  5157 ;; This function calls:
  5158 ;;		_EEPROM_read
  5159 ;;		_lcdInst
  5160 ;;		_printf
  5161 ;; This function is called by:
  5162 ;;		_Loading
  5163 ;;		_logRun
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text14
  5168  0033F2                     __ptext14:
  5169                           	opt stack 0
  5170  0033F2                     _EEPROM_write:
  5171                           	opt stack 18
  5172                           
  5173                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5174                           
  5175                           ;incstack = 0
  5176  0033F2  84A6               	bsf	4006,2,c	;volatile
  5177                           
  5178                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5179  0033F4  0100               	movlb	0	; () banked
  5180  0033F6  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5181  0033F8  6EAA               	movwf	4010,c	;volatile
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5185  0033FA  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;EEPROM.c: 39: EEDATA = data;
  5189  0033FE  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5193  003402  9EA6               	bcf	4006,7,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5197  003404  9CA6               	bcf	4006,6,c	;volatile
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5201  003406  9EF2               	bcf	intcon,7,c	;volatile
  5202                           
  5203                           ;EEPROM.c: 45: EECON2 = 0x55;
  5204  003408  0E55               	movlw	85
  5205  00340A  6EA7               	movwf	4007,c	;volatile
  5206                           
  5207                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5208  00340C  0EAA               	movlw	170
  5209  00340E  6EA7               	movwf	4007,c	;volatile
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5213  003410  82A6               	bsf	4006,1,c	;volatile
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5217  003412  8EF2               	bsf	intcon,7,c	;volatile
  5218  003414                     l932:
  5219  003414  A8A1               	btfss	4001,4,c	;volatile
  5220  003416  D7FE               	goto	l932
  5221                           
  5222                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5223  003418  98A1               	bcf	4001,4,c	;volatile
  5224                           
  5225                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5226  00341A  94A6               	bcf	4006,2,c	;volatile
  5227                           
  5228                           ;EEPROM.c: 57: if(debug){
  5229  00341C  5067               	movf	_debug,w,c
  5230  00341E  1068               	iorwf	_debug+1,w,c
  5231  003420  B4D8               	btfsc	status,2,c
  5232  003422  0012               	return	
  5233                           
  5234                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5235  003424  0E01               	movlw	1
  5236  003426  ECEC  F023         	call	_lcdInst
  5237  00342A  0E68               	movlw	104
  5238  00342C  0100               	movlb	0	; () banked
  5239  00342E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5240  003430  0EE4               	movlw	228
  5241  003432                     u7257:
  5242  003432  2EE8               	decfsz	wreg,f,c
  5243  003434  D7FE               	bra	u7257
  5244  003436  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5245  003438  D7FC               	bra	u7257
  5246  00343A  F000               	nop	
  5247                           
  5248                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5249  00343C  0E80               	movlw	128
  5250  00343E  ECEC  F023         	call	_lcdInst
  5251                           
  5252                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5253  003442  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5254  003446  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5255  00344A  ECAF  F023         	call	_EEPROM_read	;wreg free
  5256  00344E  0100               	movlb	0	; () banked
  5257  003450  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5258  003452  A4D8               	btfss	status,2,c
  5259  003454  D024               	goto	l6050
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5263  003456  0E58               	movlw	low STR_66
  5264  003458  0100               	movlb	0	; () banked
  5265  00345A  6F8E               	movwf	printf@f& (0+255),b
  5266  00345C  0EFB               	movlw	high STR_66
  5267  00345E  0100               	movlb	0	; () banked
  5268  003460  6F8F               	movwf	(printf@f+1)& (0+255),b
  5269  003462  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5270  003466  0100               	movlb	0	; () banked
  5271  003468  6B91               	clrf	(?_printf+3)& (0+255),b
  5272  00346A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5273  00346E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5274  003472  ECB8  F008         	call	_printf	;wreg free
  5275                           
  5276                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5277  003476  0E00               	movlw	0
  5278  003478  0100               	movlb	0	; () banked
  5279  00347A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5280  00347C                     l6042:
  5281                           
  5282                           ; BSR set to: 0
  5283  00347C  0E63               	movlw	99
  5284  00347E  0100               	movlb	0	; () banked
  5285  003480  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5286  003482  D001               	goto	l6046
  5287  003484  0012               	return	
  5288  003486                     l6046:
  5289                           
  5290                           ; BSR set to: 0
  5291  003486  0E68               	movlw	104
  5292  003488  0100               	movlb	0	; () banked
  5293  00348A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5294  00348C  0EE4               	movlw	228
  5295  00348E                     u7267:
  5296  00348E  2EE8               	decfsz	wreg,f,c
  5297  003490  D7FE               	bra	u7267
  5298  003492  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5299  003494  D7FC               	bra	u7267
  5300  003496  F000               	nop	
  5301  003498  0100               	movlb	0	; () banked
  5302  00349A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5303  00349C  D7EF               	goto	l6042
  5304  00349E                     l6050:
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5308  00349E  0EBD               	movlw	low STR_67
  5309  0034A0  0100               	movlb	0	; () banked
  5310  0034A2  6F8E               	movwf	printf@f& (0+255),b
  5311  0034A4  0EFF               	movlw	high STR_67
  5312  0034A6  0100               	movlb	0	; () banked
  5313  0034A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5314  0034AA  ECB8  F008         	call	_printf	;wreg free
  5315  0034AE  0E00               	movlw	0
  5316  0034B0  0100               	movlb	0	; () banked
  5317  0034B2  6FB0               	movwf	EEPROM_write@i_1329& (0+255),b
  5318  0034B4                     l6054:
  5319                           
  5320                           ; BSR set to: 0
  5321  0034B4  0E63               	movlw	99
  5322  0034B6  0100               	movlb	0	; () banked
  5323  0034B8  65B0               	cpfsgt	EEPROM_write@i_1329& (0+255),b
  5324  0034BA  D001               	goto	l6058
  5325  0034BC  0012               	return	
  5326  0034BE                     l6058:
  5327                           
  5328                           ; BSR set to: 0
  5329  0034BE  0E68               	movlw	104
  5330  0034C0  0100               	movlb	0	; () banked
  5331  0034C2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5332  0034C4  0EE4               	movlw	228
  5333  0034C6                     u7277:
  5334  0034C6  2EE8               	decfsz	wreg,f,c
  5335  0034C8  D7FE               	bra	u7277
  5336  0034CA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5337  0034CC  D7FC               	bra	u7277
  5338  0034CE  F000               	nop	
  5339  0034D0  0100               	movlb	0	; () banked
  5340  0034D2  2BB0               	incf	EEPROM_write@i_1329& (0+255),f,b
  5341  0034D4  D7EF               	goto	l6054
  5342  0034D6                     __end_of_EEPROM_write:
  5343                           	opt stack 0
  5344                           tblptru	equ	0xFF8
  5345                           tblptrh	equ	0xFF7
  5346                           tblptrl	equ	0xFF6
  5347                           tablat	equ	0xFF5
  5348                           prodh	equ	0xFF4
  5349                           prodl	equ	0xFF3
  5350                           intcon	equ	0xFF2
  5351                           intcon2	equ	0xFF1
  5352                           intcon3	equ	0xFF0
  5353                           postinc0	equ	0xFEE
  5354                           wreg	equ	0xFE8
  5355                           postdec1	equ	0xFE5
  5356                           fsr1l	equ	0xFE1
  5357                           indf2	equ	0xFDF
  5358                           postinc2	equ	0xFDE
  5359                           postdec2	equ	0xFDD
  5360                           fsr2h	equ	0xFDA
  5361                           fsr2l	equ	0xFD9
  5362                           status	equ	0xFD8
  5363                           
  5364 ;; *************** function _EEPROM_read *****************
  5365 ;; Defined at:
  5366 ;;		line 68 in file "EEPROM.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  address         2    0[BANK0 ] unsigned short 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      unsigned char 
  5373 ;; Registers used:
  5374 ;;		wreg, status,2
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;Total ram usage:        2 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    7
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_Loading
  5391 ;;		_EEPROM_write
  5392 ;;		_logRun
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text15
  5397  00475E                     __ptext15:
  5398                           	opt stack 0
  5399  00475E                     _EEPROM_read:
  5400                           	opt stack 20
  5401                           
  5402                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5403                           
  5404                           ;incstack = 0
  5405  00475E  0100               	movlb	0	; () banked
  5406  004760  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5407  004762  6EAA               	movwf	4010,c	;volatile
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5411  004764  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5415  004768  9EA6               	bcf	4006,7,c	;volatile
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5419  00476A  9CA6               	bcf	4006,6,c	;volatile
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5423  00476C  80A6               	bsf	4006,0,c	;volatile
  5424  00476E                     l945:
  5425  00476E  B0A6               	btfsc	4006,0,c	;volatile
  5426  004770  D7FE               	goto	l945
  5427                           
  5428                           ;EEPROM.c: 81: return EEDATA;
  5429  004772  50A8               	movf	4008,w,c	;volatile
  5430  004774  0012               	return	
  5431  004776                     __end_of_EEPROM_read:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon2	equ	0xFF1
  5441                           intcon3	equ	0xFF0
  5442                           postinc0	equ	0xFEE
  5443                           wreg	equ	0xFE8
  5444                           postdec1	equ	0xFE5
  5445                           fsr1l	equ	0xFE1
  5446                           indf2	equ	0xFDF
  5447                           postinc2	equ	0xFDE
  5448                           postdec2	equ	0xFDD
  5449                           fsr2h	equ	0xFDA
  5450                           fsr2l	equ	0xFD9
  5451                           status	equ	0xFD8
  5452                           
  5453 ;; *************** function _initUI *****************
  5454 ;; Defined at:
  5455 ;;		line 62 in file "UI.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;		None
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      void 
  5462 ;; Registers used:
  5463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;Total ram usage:        0 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:   12
  5476 ;; This function calls:
  5477 ;;		_change_state_to_menu_start
  5478 ;;		_loadRTC
  5479 ;; This function is called by:
  5480 ;;		_main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text16
  5485  004530                     __ptext16:
  5486                           	opt stack 0
  5487  004530                     _initUI:
  5488                           	opt stack 18
  5489                           
  5490                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5491                           
  5492                           ;incstack = 0
  5493  004530  8EF2               	bsf	intcon,7,c	;volatile
  5494                           
  5495                           ;UI.c: 64: machine_state = UI_state;
  5496  004532  0E00               	movlw	0
  5497  004534  0100               	movlb	0	; () banked
  5498  004536  6FFC               	movwf	_machine_state& (0+255),b
  5499                           
  5500                           ;UI.c: 65: logstate = 0;
  5501  004538  0E00               	movlw	0
  5502  00453A  0100               	movlb	0	; () banked
  5503  00453C  6FF7               	movwf	(_logstate+1)& (0+255),b
  5504  00453E  0E00               	movlw	0
  5505  004540  6FF6               	movwf	_logstate& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;UI.c: 67: if(RTCflag){
  5509  004542  0100               	movlb	0	; () banked
  5510  004544  51DE               	movf	_RTCflag& (0+255),w,b
  5511  004546  0100               	movlb	0	; () banked
  5512  004548  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5513  00454A  A4D8               	btfss	status,2,c
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;UI.c: 68: loadRTC();
  5517  00454C  EC9B  F01C         	call	_loadRTC	;wreg free
  5518                           
  5519                           ;UI.c: 69: }
  5520                           ;UI.c: 71: change_state_to_menu_start();
  5521  004550  ECDD  F022         	call	_change_state_to_menu_start	;wreg free
  5522                           
  5523                           ;UI.c: 72: firstboot = 1;
  5524  004554  0E00               	movlw	0
  5525  004556  6E76               	movwf	_firstboot+1,c
  5526  004558  0E01               	movlw	1
  5527  00455A  6E75               	movwf	_firstboot,c
  5528  00455C  0012               	return		;funcret
  5529  00455E                     __end_of_initUI:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           intcon	equ	0xFF2
  5538                           intcon2	equ	0xFF1
  5539                           intcon3	equ	0xFF0
  5540                           postinc0	equ	0xFEE
  5541                           wreg	equ	0xFE8
  5542                           postdec1	equ	0xFE5
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function _loadRTC *****************
  5552 ;; Defined at:
  5553 ;;		line 28 in file "RTC.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  i               2   22[BANK0 ] int 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;Total ram usage:        3 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    9
  5574 ;; This function calls:
  5575 ;;		_I2C_Master_Init
  5576 ;;		_I2C_Master_Start
  5577 ;;		_I2C_Master_Stop
  5578 ;;		_I2C_Master_Write
  5579 ;; This function is called by:
  5580 ;;		_initUI
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           	psect	text17
  5585  003936                     __ptext17:
  5586                           	opt stack 0
  5587  003936                     _loadRTC:
  5588                           	opt stack 20
  5589                           
  5590                           ;RTC.c: 30: I2C_Master_Init(10000);
  5591                           
  5592                           ;incstack = 0
  5593  003936  0E10               	movlw	16
  5594  003938  0100               	movlb	0	; () banked
  5595  00393A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5596  00393C  0E27               	movlw	39
  5597  00393E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5598  003940  0E00               	movlw	0
  5599  003942  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5600  003944  0E00               	movlw	0
  5601  003946  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5602  003948  EC32  F01F         	call	_I2C_Master_Init	;wreg free
  5603                           
  5604                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5605  00394C  9EF2               	bcf	intcon,7,c	;volatile
  5606                           
  5607                           ;RTC.c: 34: I2C_Master_Start();
  5608  00394E  EC12  F024         	call	_I2C_Master_Start	;wreg free
  5609                           
  5610                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5611  003952  0E00               	movlw	0
  5612  003954  0100               	movlb	0	; () banked
  5613  003956  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5614  003958  0ED0               	movlw	208
  5615  00395A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5616  00395C  EC00  F024         	call	_I2C_Master_Write	;wreg free
  5617                           
  5618                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5619  003960  0E00               	movlw	0
  5620  003962  0100               	movlb	0	; () banked
  5621  003964  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5622  003966  0E00               	movlw	0
  5623  003968  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5624  00396A  EC00  F024         	call	_I2C_Master_Write	;wreg free
  5625                           
  5626                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5627  00396E  0E00               	movlw	0
  5628  003970  0100               	movlb	0	; () banked
  5629  003972  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5630  003974  0E00               	movlw	0
  5631  003976  6F96               	movwf	loadRTC@i& (0+255),b
  5632  003978                     l6184:
  5633                           
  5634                           ; BSR set to: 0
  5635  003978  0100               	movlb	0	; () banked
  5636  00397A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5637  00397C  D008               	goto	l6188
  5638  00397E  0100               	movlb	0	; () banked
  5639  003980  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5640  003982  E11B               	bnz	l6194
  5641  003984  0E07               	movlw	7
  5642  003986  0100               	movlb	0	; () banked
  5643  003988  5D96               	subwf	loadRTC@i& (0+255),w,b
  5644  00398A  B0D8               	btfsc	status,0,c
  5645  00398C  D016               	goto	l6194
  5646  00398E                     l6188:
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5650  00398E  0E24               	movlw	low _time
  5651  003990  0100               	movlb	0	; () banked
  5652  003992  2596               	addwf	loadRTC@i& (0+255),w,b
  5653  003994  6ED9               	movwf	fsr2l,c
  5654  003996  0E01               	movlw	high _time
  5655  003998  0100               	movlb	0	; () banked
  5656  00399A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5657  00399C  6EDA               	movwf	fsr2h,c
  5658  00399E  50DF               	movf	indf2,w,c
  5659  0039A0  0100               	movlb	0	; () banked
  5660  0039A2  6F95               	movwf	??_loadRTC& (0+255),b
  5661  0039A4  0100               	movlb	0	; () banked
  5662  0039A6  5195               	movf	??_loadRTC& (0+255),w,b
  5663  0039A8  0100               	movlb	0	; () banked
  5664  0039AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5665  0039AC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5666  0039AE  EC00  F024         	call	_I2C_Master_Write	;wreg free
  5667  0039B2  0100               	movlb	0	; () banked
  5668  0039B4  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5669  0039B6  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5670  0039B8  D7DF               	goto	l6184
  5671  0039BA                     l6194:
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;RTC.c: 39: }
  5675                           ;RTC.c: 40: I2C_Master_Stop();
  5676  0039BA  EC0E  F024         	call	_I2C_Master_Stop	;wreg free
  5677                           
  5678                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5679  0039BE  8EF2               	bsf	intcon,7,c	;volatile
  5680  0039C0  0012               	return		;funcret
  5681  0039C2                     __end_of_loadRTC:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1l	equ	0xFE1
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           fsr2h	equ	0xFDA
  5700                           fsr2l	equ	0xFD9
  5701                           status	equ	0xFD8
  5702                           
  5703 ;; *************** function _I2C_Master_Init *****************
  5704 ;; Defined at:
  5705 ;;		line 15 in file "I2C.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  c               4   13[BANK0 ] const unsigned long 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5719 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;Total ram usage:        8 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    8
  5726 ;; This function calls:
  5727 ;;		___lldiv
  5728 ;; This function is called by:
  5729 ;;		_main
  5730 ;;		_loadRTC
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text18
  5735  003E64                     __ptext18:
  5736                           	opt stack 0
  5737  003E64                     _I2C_Master_Init:
  5738                           	opt stack 20
  5739                           
  5740                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5741                           
  5742                           ;incstack = 0
  5743  003E64  0E00               	movlw	0
  5744  003E66  6EC7               	movwf	4039,c	;volatile
  5745                           
  5746                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5747  003E68  0E28               	movlw	40
  5748  003E6A  6EC6               	movwf	4038,c	;volatile
  5749                           
  5750                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5751  003E6C  0E00               	movlw	0
  5752  003E6E  6EC5               	movwf	4037,c	;volatile
  5753                           
  5754                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5755  003E70  0E00               	movlw	0
  5756  003E72  0100               	movlb	0	; () banked
  5757  003E74  6F80               	movwf	___lldiv@dividend& (0+255),b
  5758  003E76  0E48               	movlw	72
  5759  003E78  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5760  003E7A  0EE8               	movlw	232
  5761  003E7C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5762  003E7E  0E01               	movlw	1
  5763  003E80  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5764  003E82  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5765  003E86  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5766  003E8A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5767  003E8E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5768  003E92  0E02               	movlw	2
  5769  003E94                     u4495:
  5770  003E94  90D8               	bcf	status,0,c
  5771  003E96  0100               	movlb	0	; () banked
  5772  003E98  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5773  003E9A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5774  003E9C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5775  003E9E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5776  003EA0  2EE8               	decfsz	wreg,f,c
  5777  003EA2  D7F8               	goto	u4495
  5778  003EA4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5779  003EA8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5780  003EAC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5781  003EB0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5782  003EB4  EC97  F01B         	call	___lldiv	;wreg free
  5783  003EB8  0100               	movlb	0	; () banked
  5784  003EBA  0580               	decf	?___lldiv& (0+255),w,b
  5785  003EBC  6EC8               	movwf	4040,c	;volatile
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;I2C.c: 22: TRISC3 = 1;
  5789  003EBE  8694               	bsf	3988,3,c	;volatile
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;I2C.c: 23: TRISC4 = 1;
  5793  003EC0  8894               	bsf	3988,4,c	;volatile
  5794                           
  5795                           ; BSR set to: 0
  5796  003EC2  0012               	return		;funcret
  5797  003EC4                     __end_of_I2C_Master_Init:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon2	equ	0xFF1
  5807                           intcon3	equ	0xFF0
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           postdec1	equ	0xFE5
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function ___lldiv *****************
  5820 ;; Defined at:
  5821 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  dividend        4    0[BANK0 ] unsigned long 
  5824 ;;  divisor         4    4[BANK0 ] unsigned long 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  quotient        4    8[BANK0 ] unsigned long 
  5827 ;;  counter         1   12[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  4    0[BANK0 ] unsigned long 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:       13 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    7
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_I2C_Master_Init
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text19
  5852  00372E                     __ptext19:
  5853                           	opt stack 0
  5854  00372E                     ___lldiv:
  5855                           	opt stack 20
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;incstack = 0
  5859  00372E  0E00               	movlw	0
  5860  003730  0100               	movlb	0	; () banked
  5861  003732  6F88               	movwf	___lldiv@quotient& (0+255),b
  5862  003734  0E00               	movlw	0
  5863  003736  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5864  003738  0E00               	movlw	0
  5865  00373A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5866  00373C  0E00               	movlw	0
  5867  00373E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5868                           
  5869                           ; BSR set to: 0
  5870  003740  0100               	movlb	0	; () banked
  5871  003742  5184               	movf	___lldiv@divisor& (0+255),w,b
  5872  003744  0100               	movlb	0	; () banked
  5873  003746  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5874  003748  0100               	movlb	0	; () banked
  5875  00374A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5876  00374C  0100               	movlb	0	; () banked
  5877  00374E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5878  003750  B4D8               	btfsc	status,2,c
  5879  003752  D042               	goto	l1656
  5880                           
  5881                           ; BSR set to: 0
  5882  003754  0E01               	movlw	1
  5883  003756  0100               	movlb	0	; () banked
  5884  003758  6F8C               	movwf	___lldiv@counter& (0+255),b
  5885  00375A  D008               	goto	l5620
  5886  00375C                     l5618:
  5887                           
  5888                           ; BSR set to: 0
  5889  00375C  0100               	movlb	0	; () banked
  5890  00375E  90D8               	bcf	status,0,c
  5891  003760  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5892  003762  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5893  003764  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5894  003766  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5895  003768  0100               	movlb	0	; () banked
  5896  00376A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5897  00376C                     l5620:
  5898                           
  5899                           ; BSR set to: 0
  5900  00376C  0100               	movlb	0	; () banked
  5901  00376E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5902  003770  D7F5               	goto	l5618
  5903  003772                     l5622:
  5904                           
  5905                           ; BSR set to: 0
  5906  003772  0100               	movlb	0	; () banked
  5907  003774  90D8               	bcf	status,0,c
  5908  003776  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5909  003778  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5910  00377A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5911  00377C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5912                           
  5913                           ; BSR set to: 0
  5914  00377E  0100               	movlb	0	; () banked
  5915  003780  5184               	movf	___lldiv@divisor& (0+255),w,b
  5916  003782  0100               	movlb	0	; () banked
  5917  003784  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5918  003786  0100               	movlb	0	; () banked
  5919  003788  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5920  00378A  0100               	movlb	0	; () banked
  5921  00378C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5922  00378E  0100               	movlb	0	; () banked
  5923  003790  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5924  003792  0100               	movlb	0	; () banked
  5925  003794  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5926  003796  0100               	movlb	0	; () banked
  5927  003798  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5928  00379A  0100               	movlb	0	; () banked
  5929  00379C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5930  00379E  A0D8               	btfss	status,0,c
  5931  0037A0  D012               	goto	l5630
  5932                           
  5933                           ; BSR set to: 0
  5934  0037A2  0100               	movlb	0	; () banked
  5935  0037A4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5936  0037A6  0100               	movlb	0	; () banked
  5937  0037A8  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5938  0037AA  0100               	movlb	0	; () banked
  5939  0037AC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5940  0037AE  0100               	movlb	0	; () banked
  5941  0037B0  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5942  0037B2  0100               	movlb	0	; () banked
  5943  0037B4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5944  0037B6  0100               	movlb	0	; () banked
  5945  0037B8  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5946  0037BA  0100               	movlb	0	; () banked
  5947  0037BC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5948  0037BE  0100               	movlb	0	; () banked
  5949  0037C0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5950                           
  5951                           ; BSR set to: 0
  5952  0037C2  0100               	movlb	0	; () banked
  5953  0037C4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5954  0037C6                     l5630:
  5955                           
  5956                           ; BSR set to: 0
  5957  0037C6  0100               	movlb	0	; () banked
  5958  0037C8  90D8               	bcf	status,0,c
  5959  0037CA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5960  0037CC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5961  0037CE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5962  0037D0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5963                           
  5964                           ; BSR set to: 0
  5965  0037D2  0100               	movlb	0	; () banked
  5966  0037D4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5967  0037D6  D7CD               	goto	l5622
  5968  0037D8                     l1656:
  5969                           
  5970                           ; BSR set to: 0
  5971  0037D8  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5972  0037DC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5973  0037E0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5974  0037E4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5975                           
  5976                           ; BSR set to: 0
  5977  0037E8  0012               	return		;funcret
  5978  0037EA                     __end_of___lldiv:
  5979                           	opt stack 0
  5980                           tblptru	equ	0xFF8
  5981                           tblptrh	equ	0xFF7
  5982                           tblptrl	equ	0xFF6
  5983                           tablat	equ	0xFF5
  5984                           prodh	equ	0xFF4
  5985                           prodl	equ	0xFF3
  5986                           intcon	equ	0xFF2
  5987                           intcon2	equ	0xFF1
  5988                           intcon3	equ	0xFF0
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           postdec1	equ	0xFE5
  5992                           fsr1l	equ	0xFE1
  5993                           indf2	equ	0xFDF
  5994                           postinc2	equ	0xFDE
  5995                           postdec2	equ	0xFDD
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _change_state_to_menu_start *****************
  6001 ;; Defined at:
  6002 ;;		line 474 in file "UI.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;Total ram usage:        0 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:   11
  6023 ;; This function calls:
  6024 ;;		_lcdInst
  6025 ;;		_printRTC
  6026 ;;		_printf
  6027 ;; This function is called by:
  6028 ;;		_initUI
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text20
  6033  0045BA                     __ptext20:
  6034                           	opt stack 0
  6035  0045BA                     _change_state_to_menu_start:
  6036                           	opt stack 18
  6037                           
  6038                           ;UI.c: 475: cur_state = 0;
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;incstack = 0
  6042  0045BA  0E00               	movlw	0
  6043  0045BC  0100               	movlb	0	; () banked
  6044  0045BE  6FE1               	movwf	(_cur_state+1)& (0+255),b
  6045  0045C0  0E00               	movlw	0
  6046  0045C2  6FE0               	movwf	_cur_state& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;UI.c: 477: lcdInst(0b10000000);;
  6050  0045C4  0E80               	movlw	128
  6051  0045C6  ECEC  F023         	call	_lcdInst
  6052                           
  6053                           ;UI.c: 478: printRTC();
  6054  0045CA  EC94  F00F         	call	_printRTC	;wreg free
  6055                           
  6056                           ;UI.c: 479: lcdInst(0b11000000);;
  6057  0045CE  0EC0               	movlw	192
  6058  0045D0  ECEC  F023         	call	_lcdInst
  6059                           
  6060                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6061  0045D4  0EF7               	movlw	low STR_30
  6062  0045D6  0100               	movlb	0	; () banked
  6063  0045D8  6F8E               	movwf	printf@f& (0+255),b
  6064  0045DA  0EFD               	movlw	high STR_30
  6065  0045DC  0100               	movlb	0	; () banked
  6066  0045DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6067  0045E0  ECB8  F008         	call	_printf	;wreg free
  6068  0045E4  0012               	return		;funcret
  6069  0045E6                     __end_of_change_state_to_menu_start:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           intcon3	equ	0xFF0
  6080                           postinc0	equ	0xFEE
  6081                           wreg	equ	0xFE8
  6082                           postdec1	equ	0xFE5
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _initTime *****************
  6092 ;; Defined at:
  6093 ;;		line 17 in file "RTC.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  s               1    wreg     unsigned char 
  6096 ;;  m               1    0[BANK0 ] unsigned char 
  6097 ;;  h               1    1[BANK0 ] unsigned char 
  6098 ;;  w               1    2[BANK0 ] unsigned char 
  6099 ;;  DD              1    3[BANK0 ] unsigned char 
  6100 ;;  MM              1    4[BANK0 ] unsigned char 
  6101 ;;  YY              1    5[BANK0 ] unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  s               1    6[BANK0 ] unsigned char 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1    wreg      void 
  6106 ;; Registers used:
  6107 ;;		wreg
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6113 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;Total ram usage:        7 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    7
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_main
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text21
  6128  00471E                     __ptext21:
  6129                           	opt stack 0
  6130  00471E                     _initTime:
  6131                           	opt stack 23
  6132                           
  6133                           ;incstack = 0
  6134                           ;initTime@s stored from wreg
  6135  00471E  0100               	movlb	0	; () banked
  6136  004720  6F86               	movwf	initTime@s& (0+255),b
  6137                           
  6138                           ;RTC.c: 19: time[0] = s;
  6139  004722  C086  F124         	movff	initTime@s,_time
  6140                           
  6141                           ;RTC.c: 20: time[1] = m;
  6142  004726  C080  F125         	movff	initTime@m,_time+1
  6143                           
  6144                           ;RTC.c: 21: time[2] = h;
  6145  00472A  C081  F126         	movff	initTime@h,_time+2
  6146                           
  6147                           ;RTC.c: 22: time[3] = w;
  6148  00472E  C082  F127         	movff	initTime@w,_time+3
  6149                           
  6150                           ;RTC.c: 23: time[4] = DD;
  6151  004732  C083  F128         	movff	initTime@DD,_time+4
  6152                           
  6153                           ;RTC.c: 24: time[5] = MM;
  6154  004736  C084  F129         	movff	initTime@MM,_time+5
  6155                           
  6156                           ;RTC.c: 25: time[6] = YY;
  6157  00473A  C085  F12A         	movff	initTime@YY,_time+6
  6158  00473E  0012               	return		;funcret
  6159  004740                     __end_of_initTime:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           intcon3	equ	0xFF0
  6170                           postinc0	equ	0xFEE
  6171                           wreg	equ	0xFE8
  6172                           postdec1	equ	0xFE5
  6173                           fsr1l	equ	0xFE1
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function _initLCD *****************
  6182 ;; Defined at:
  6183 ;;		line 48 in file "lcd.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;Total ram usage:        1 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    9
  6204 ;; This function calls:
  6205 ;;		_lcdInst
  6206 ;; This function is called by:
  6207 ;;		_main
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text22
  6212  0041B8                     __ptext22:
  6213                           	opt stack 0
  6214  0041B8                     _initLCD:
  6215                           	opt stack 21
  6216                           
  6217                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6218                           
  6219                           ;incstack = 0
  6220  0041B8  0E9C               	movlw	156
  6221  0041BA  0100               	movlb	0	; () banked
  6222  0041BC  6F83               	movwf	??_initLCD& (0+255),b
  6223  0041BE  0ED7               	movlw	215
  6224  0041C0                     u7287:
  6225  0041C0  2EE8               	decfsz	wreg,f,c
  6226  0041C2  D7FE               	bra	u7287
  6227  0041C4  2F83               	decfsz	??_initLCD& (0+255),f,b
  6228  0041C6  D7FC               	bra	u7287
  6229                           
  6230                           ;lcd.c: 50: lcdInst(0b00110011);
  6231  0041C8  0E33               	movlw	51
  6232  0041CA  ECEC  F023         	call	_lcdInst
  6233                           
  6234                           ;lcd.c: 51: lcdInst(0b00110010);
  6235  0041CE  0E32               	movlw	50
  6236  0041D0  ECEC  F023         	call	_lcdInst
  6237                           
  6238                           ;lcd.c: 53: lcdInst(0b00101000);
  6239  0041D4  0E28               	movlw	40
  6240  0041D6  ECEC  F023         	call	_lcdInst
  6241                           
  6242                           ;lcd.c: 54: lcdInst(0b00001100);
  6243  0041DA  0E0C               	movlw	12
  6244  0041DC  ECEC  F023         	call	_lcdInst
  6245                           
  6246                           ;lcd.c: 55: lcdInst(0b00000110);
  6247  0041E0  0E06               	movlw	6
  6248  0041E2  ECEC  F023         	call	_lcdInst
  6249                           
  6250                           ;lcd.c: 56: lcdInst(0b00000001);
  6251  0041E6  0E01               	movlw	1
  6252  0041E8  ECEC  F023         	call	_lcdInst
  6253                           
  6254                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6255  0041EC  0E9C               	movlw	156
  6256  0041EE  0100               	movlb	0	; () banked
  6257  0041F0  6F83               	movwf	??_initLCD& (0+255),b
  6258  0041F2  0ED7               	movlw	215
  6259  0041F4                     u7297:
  6260  0041F4  2EE8               	decfsz	wreg,f,c
  6261  0041F6  D7FE               	bra	u7297
  6262  0041F8  2F83               	decfsz	??_initLCD& (0+255),f,b
  6263  0041FA  D7FC               	bra	u7297
  6264  0041FC  0012               	return		;funcret
  6265  0041FE                     __end_of_initLCD:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           intcon	equ	0xFF2
  6274                           intcon2	equ	0xFF1
  6275                           intcon3	equ	0xFF0
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _UI *****************
  6288 ;; Defined at:
  6289 ;;		line 76 in file "UI.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  i               1   73[BANK0 ] unsigned char 
  6294 ;;  i               1   85[BANK0 ] unsigned char 
  6295 ;;  i               1   84[BANK0 ] unsigned char 
  6296 ;;  i               1   83[BANK0 ] unsigned char 
  6297 ;;  i               1   82[BANK0 ] unsigned char 
  6298 ;;  i               1   81[BANK0 ] unsigned char 
  6299 ;;  i               1   80[BANK0 ] unsigned char 
  6300 ;;  i               1   79[BANK0 ] unsigned char 
  6301 ;;  i               1   78[BANK0 ] unsigned char 
  6302 ;;  i               1   77[BANK0 ] unsigned char 
  6303 ;;  i               1   76[BANK0 ] unsigned char 
  6304 ;;  i               1   75[BANK0 ] unsigned char 
  6305 ;;  i               1   74[BANK0 ] unsigned char 
  6306 ;;  month           4   86[BANK0 ] unsigned char [4]
  6307 ;;  i               1   72[BANK0 ] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;Total ram usage:       22 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:   11
  6324 ;; This function calls:
  6325 ;;		___awdiv
  6326 ;;		___awmod
  6327 ;;		_change_state_to_menu_12
  6328 ;;		_change_state_to_menu_22
  6329 ;;		_lcdInst
  6330 ;;		_printRTC
  6331 ;;		_printf
  6332 ;;		_strcpy
  6333 ;; This function is called by:
  6334 ;;		_main
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text23
  6339  0008CA                     __ptext23:
  6340                           	opt stack 0
  6341  0008CA                     _UI:
  6342                           	opt stack 19
  6343                           
  6344                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6345                           
  6346                           ;incstack = 0
  6347  0008CA  0E02               	movlw	2
  6348  0008CC  0100               	movlb	0	; () banked
  6349  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6350  0008D0  A4D8               	btfss	status,2,c
  6351  0008D2  D075               	goto	l7396
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6355  0008D4  0E01               	movlw	1
  6356  0008D6  ECEC  F023         	call	_lcdInst
  6357  0008DA  0E68               	movlw	104
  6358  0008DC  0100               	movlb	0	; () banked
  6359  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6360  0008E0  0EE4               	movlw	228
  6361  0008E2                     u7307:
  6362  0008E2  2EE8               	decfsz	wreg,f,c
  6363  0008E4  D7FE               	bra	u7307
  6364  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6365  0008E8  D7FC               	bra	u7307
  6366  0008EA  F000               	nop	
  6367                           
  6368                           ;UI.c: 79: lcdInst(0b10000000);;
  6369  0008EC  0E80               	movlw	128
  6370  0008EE  ECEC  F023         	call	_lcdInst
  6371                           
  6372                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6373  0008F2  0EA3               	movlw	low STR_1
  6374  0008F4  0100               	movlb	0	; () banked
  6375  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6376  0008F8  0EFB               	movlw	high STR_1
  6377  0008FA  0100               	movlb	0	; () banked
  6378  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6379  0008FE  0E01               	movlw	1
  6380  000900  0100               	movlb	0	; () banked
  6381  000902  25FD               	addwf	_sel& (0+255),w,b
  6382  000904  0100               	movlb	0	; () banked
  6383  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6384  000908  0100               	movlb	0	; () banked
  6385  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6386  00090C  0E00               	movlw	0
  6387  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6388  000910  ECB8  F008         	call	_printf	;wreg free
  6389                           
  6390                           ;UI.c: 81: lcdInst(0b11000000);;
  6391  000914  0EC0               	movlw	192
  6392  000916  ECEC  F023         	call	_lcdInst
  6393                           
  6394                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6395  00091A  0E0E               	movlw	14
  6396  00091C  0100               	movlb	0	; () banked
  6397  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6398  000920  0E10               	movlw	16
  6399  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6400  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6401  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6402  00092C  EC4A  F01C         	call	___awmod	;wreg free
  6403  000930  C080  F0C6         	movff	?___awmod,_UI$2297
  6404  000934  C081  F0C7         	movff	?___awmod+1,_UI$2297+1
  6405                           
  6406                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6407  000938  0E27               	movlw	low STR_2
  6408  00093A  0100               	movlb	0	; () banked
  6409  00093C  6F8E               	movwf	printf@f& (0+255),b
  6410  00093E  0EFF               	movlw	high STR_2
  6411  000940  0100               	movlb	0	; () banked
  6412  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6413  000944  0E0E               	movlw	14
  6414  000946  0100               	movlb	0	; () banked
  6415  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6416  00094A  0E10               	movlw	16
  6417  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6418  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6419  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6420  000956  EC4A  F01C         	call	___awmod	;wreg free
  6421  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6422  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6423  000962  0E00               	movlw	0
  6424  000964  0100               	movlb	0	; () banked
  6425  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6426  000968  0E3C               	movlw	60
  6427  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6428  00096C  EC38  F01B         	call	___awdiv	;wreg free
  6429  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6430  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6431  000978  C0C6  F080         	movff	_UI$2297,___awmod@dividend
  6432  00097C  C0C7  F081         	movff	_UI$2297+1,___awmod@dividend+1
  6433  000980  0E00               	movlw	0
  6434  000982  0100               	movlb	0	; () banked
  6435  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6436  000986  0E3C               	movlw	60
  6437  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6438  00098A  EC4A  F01C         	call	___awmod	;wreg free
  6439  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6440  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6441  000996  ECB8  F008         	call	_printf	;wreg free
  6442                           
  6443                           ;UI.c: 83: machine_state = UI_state;
  6444  00099A  0E00               	movlw	0
  6445  00099C  0100               	movlb	0	; () banked
  6446  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6447  0009A0                     l180:
  6448  0009A0  A281               	btfss	3969,1,c	;volatile
  6449  0009A2  D7FE               	goto	l180
  6450                           
  6451                           ;UI.c: 86: }
  6452                           ;UI.c: 87: if(cur_state==12){
  6453  0009A4  0E0C               	movlw	12
  6454  0009A6  0100               	movlb	0	; () banked
  6455  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6456  0009AA  0100               	movlb	0	; () banked
  6457  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6458  0009AE  A4D8               	btfss	status,2,c
  6459  0009B0  D003               	goto	l7394
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;UI.c: 88: change_state_to_menu_12();
  6463  0009B2  EC3C  F021         	call	_change_state_to_menu_12	;wreg free
  6464                           
  6465                           ;UI.c: 89: }
  6466  0009B6  D3D5               	goto	l7716
  6467  0009B8                     l7394:
  6468                           
  6469                           ;UI.c: 90: else{
  6470                           ;UI.c: 91: change_state_to_menu_22();
  6471  0009B8  EC20  F021         	call	_change_state_to_menu_22	;wreg free
  6472                           
  6473                           ;UI.c: 92: }
  6474                           ;UI.c: 93: }
  6475  0009BC  D3D2               	goto	l7716
  6476  0009BE                     l7396:
  6477                           
  6478                           ;UI.c: 94: else if(cur_state == 0){
  6479  0009BE  0100               	movlb	0	; () banked
  6480  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6481  0009C2  0100               	movlb	0	; () banked
  6482  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6483  0009C6  A4D8               	btfss	status,2,c
  6484  0009C8  D3CC               	goto	l7716
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6488  0009CA  0E00               	movlw	0
  6489  0009CC  0100               	movlb	0	; () banked
  6490  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6491  0009D0                     l7400:
  6492                           
  6493                           ; BSR set to: 0
  6494  0009D0  0E63               	movlw	99
  6495  0009D2  0100               	movlb	0	; () banked
  6496  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6497  0009D6  D001               	goto	l7404
  6498  0009D8  D00C               	goto	l7408
  6499  0009DA                     l7404:
  6500                           
  6501                           ; BSR set to: 0
  6502  0009DA  0E68               	movlw	104
  6503  0009DC  0100               	movlb	0	; () banked
  6504  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6505  0009E0  0EE4               	movlw	228
  6506  0009E2                     u7317:
  6507  0009E2  2EE8               	decfsz	wreg,f,c
  6508  0009E4  D7FE               	bra	u7317
  6509  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6510  0009E8  D7FC               	bra	u7317
  6511  0009EA  F000               	nop	
  6512  0009EC  0100               	movlb	0	; () banked
  6513  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6514  0009F0  D7EF               	goto	l7400
  6515  0009F2                     l7408:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;UI.c: 96: if(cur_state == 0){
  6519  0009F2  0100               	movlb	0	; () banked
  6520  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6521  0009F6  0100               	movlb	0	; () banked
  6522  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6523  0009FA  A4D8               	btfss	status,2,c
  6524  0009FC  D3B2               	goto	l7716
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;UI.c: 97: printRTC();
  6528  0009FE  EC94  F00F         	call	_printRTC	;wreg free
  6529                           
  6530                           ;UI.c: 98: }
  6531                           ;UI.c: 99: }
  6532                           ;UI.c: 100: while(logstate){
  6533  000A02  D3AF               	goto	l7716
  6534  000A04                     l7412:
  6535                           
  6536                           ;UI.c: 102: if(!log_completion){
  6537  000A04  0100               	movlb	0	; () banked
  6538  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6539  000A08  0100               	movlb	0	; () banked
  6540  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6541  000A0C  A4D8               	btfss	status,2,c
  6542  000A0E  D041               	goto	l7442
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6546  000A10  0E01               	movlw	1
  6547  000A12  ECEC  F023         	call	_lcdInst
  6548  000A16  0E68               	movlw	104
  6549  000A18  0100               	movlb	0	; () banked
  6550  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6551  000A1C  0EE4               	movlw	228
  6552  000A1E                     u7327:
  6553  000A1E  2EE8               	decfsz	wreg,f,c
  6554  000A20  D7FE               	bra	u7327
  6555  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6556  000A24  D7FC               	bra	u7327
  6557  000A26  F000               	nop	
  6558                           
  6559                           ;UI.c: 104: lcdInst(0b10000000);;
  6560  000A28  0E80               	movlw	128
  6561  000A2A  ECEC  F023         	call	_lcdInst
  6562                           
  6563                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6564  000A2E  0E91               	movlw	low STR_3
  6565  000A30  0100               	movlb	0	; () banked
  6566  000A32  6F8E               	movwf	printf@f& (0+255),b
  6567  000A34  0EFB               	movlw	high STR_3
  6568  000A36  0100               	movlb	0	; () banked
  6569  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6570  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6571  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6572  000A42  ECB8  F008         	call	_printf	;wreg free
  6573                           
  6574                           ;UI.c: 106: lcdInst(0b11000000);;
  6575  000A46  0EC0               	movlw	192
  6576  000A48  ECEC  F023         	call	_lcdInst
  6577                           
  6578                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6579  000A4C  0E4A               	movlw	low STR_4
  6580  000A4E  0100               	movlb	0	; () banked
  6581  000A50  6F8E               	movwf	printf@f& (0+255),b
  6582  000A52  0EFE               	movlw	high STR_4
  6583  000A54  0100               	movlb	0	; () banked
  6584  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6585  000A58  ECB8  F008         	call	_printf	;wreg free
  6586  000A5C                     l7426:
  6587  000A5C  0E00               	movlw	0
  6588  000A5E  0100               	movlb	0	; () banked
  6589  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6590  000A62                     l7428:
  6591                           
  6592                           ; BSR set to: 0
  6593  000A62  0E63               	movlw	99
  6594  000A64  0100               	movlb	0	; () banked
  6595  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6596  000A68  D001               	goto	l7432
  6597  000A6A  D00C               	goto	l7436
  6598  000A6C                     l7432:
  6599                           
  6600                           ; BSR set to: 0
  6601  000A6C  0E68               	movlw	104
  6602  000A6E  0100               	movlb	0	; () banked
  6603  000A70  6FC4               	movwf	??_UI& (0+255),b
  6604  000A72  0EE4               	movlw	228
  6605  000A74                     u7337:
  6606  000A74  2EE8               	decfsz	wreg,f,c
  6607  000A76  D7FE               	bra	u7337
  6608  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6609  000A7A  D7FC               	bra	u7337
  6610  000A7C  F000               	nop	
  6611  000A7E  0100               	movlb	0	; () banked
  6612  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6613  000A82  D7EF               	goto	l7428
  6614  000A84                     l7436:
  6615                           
  6616                           ; BSR set to: 0
  6617  000A84  0100               	movlb	0	; () banked
  6618  000A86  51F6               	movf	_logstate& (0+255),w,b
  6619  000A88  0100               	movlb	0	; () banked
  6620  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6621  000A8C  B4D8               	btfsc	status,2,c
  6622  000A8E  0012               	return	
  6623  000A90  D7E5               	goto	l7426
  6624  000A92                     l7442:
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;UI.c: 111: else{
  6628                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6629  000A92  0E01               	movlw	1
  6630  000A94  ECEC  F023         	call	_lcdInst
  6631  000A98  0E68               	movlw	104
  6632  000A9A  0100               	movlb	0	; () banked
  6633  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6634  000A9E  0EE4               	movlw	228
  6635  000AA0                     u7347:
  6636  000AA0  2EE8               	decfsz	wreg,f,c
  6637  000AA2  D7FE               	bra	u7347
  6638  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6639  000AA6  D7FC               	bra	u7347
  6640  000AA8  F000               	nop	
  6641                           
  6642                           ;UI.c: 113: lcdInst(0b10000000);;
  6643  000AAA  0E80               	movlw	128
  6644  000AAC  ECEC  F023         	call	_lcdInst
  6645                           
  6646                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6647  000AB0  0E91               	movlw	low STR_3
  6648  000AB2  0100               	movlb	0	; () banked
  6649  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6650  000AB6  0EFB               	movlw	high STR_3
  6651  000AB8  0100               	movlb	0	; () banked
  6652  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6653  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6654  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6655  000AC4  ECB8  F008         	call	_printf	;wreg free
  6656                           
  6657                           ;UI.c: 115: lcdInst(0b11000000);;
  6658  000AC8  0EC0               	movlw	192
  6659  000ACA  ECEC  F023         	call	_lcdInst
  6660                           
  6661                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6662  000ACE  0EE6               	movlw	low STR_6
  6663  000AD0  0100               	movlb	0	; () banked
  6664  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6665  000AD4  0EFD               	movlw	high STR_6
  6666  000AD6  0100               	movlb	0	; () banked
  6667  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6668  000ADA  ECB8  F008         	call	_printf	;wreg free
  6669                           
  6670                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6671  000ADE  0E00               	movlw	0
  6672  000AE0  0100               	movlb	0	; () banked
  6673  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6674  000AE4                     l7456:
  6675                           
  6676                           ; BSR set to: 0
  6677  000AE4  0E63               	movlw	99
  6678  000AE6  0100               	movlb	0	; () banked
  6679  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6680  000AEA  D001               	goto	l7460
  6681  000AEC  D00C               	goto	l7464
  6682  000AEE                     l7460:
  6683                           
  6684                           ; BSR set to: 0
  6685  000AEE  0E68               	movlw	104
  6686  000AF0  0100               	movlb	0	; () banked
  6687  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6688  000AF4  0EE4               	movlw	228
  6689  000AF6                     u7357:
  6690  000AF6  2EE8               	decfsz	wreg,f,c
  6691  000AF8  D7FE               	bra	u7357
  6692  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6693  000AFC  D7FC               	bra	u7357
  6694  000AFE  F000               	nop	
  6695  000B00  0100               	movlb	0	; () banked
  6696  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6697  000B04  D7EF               	goto	l7456
  6698  000B06                     l7464:
  6699                           
  6700                           ; BSR set to: 0
  6701  000B06  0100               	movlb	0	; () banked
  6702  000B08  51F6               	movf	_logstate& (0+255),w,b
  6703  000B0A  0100               	movlb	0	; () banked
  6704  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6705  000B0E  B4D8               	btfsc	status,2,c
  6706  000B10  0012               	return	
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6710                           
  6711                           ; BSR set to: 0
  6712                           
  6713                           ; BSR set to: 0
  6714  000B12  0E00               	movlw	0
  6715  000B14  0100               	movlb	0	; () banked
  6716  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6717  000B18                     l7470:
  6718                           
  6719                           ; BSR set to: 0
  6720  000B18  0E63               	movlw	99
  6721  000B1A  0100               	movlb	0	; () banked
  6722  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6723  000B1E  D001               	goto	l7474
  6724  000B20  D00C               	goto	l7478
  6725  000B22                     l7474:
  6726                           
  6727                           ; BSR set to: 0
  6728  000B22  0E68               	movlw	104
  6729  000B24  0100               	movlb	0	; () banked
  6730  000B26  6FC4               	movwf	??_UI& (0+255),b
  6731  000B28  0EE4               	movlw	228
  6732  000B2A                     u7367:
  6733  000B2A  2EE8               	decfsz	wreg,f,c
  6734  000B2C  D7FE               	bra	u7367
  6735  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6736  000B30  D7FC               	bra	u7367
  6737  000B32  F000               	nop	
  6738  000B34  0100               	movlb	0	; () banked
  6739  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6740  000B38  D7EF               	goto	l7470
  6741  000B3A                     l7478:
  6742                           
  6743                           ; BSR set to: 0
  6744  000B3A  0100               	movlb	0	; () banked
  6745  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6746  000B3E  0100               	movlb	0	; () banked
  6747  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6748  000B42  B4D8               	btfsc	status,2,c
  6749  000B44  0012               	return	
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6753                           
  6754                           ; BSR set to: 0
  6755                           
  6756                           ; BSR set to: 0
  6757  000B46  0E01               	movlw	1
  6758  000B48  ECEC  F023         	call	_lcdInst
  6759  000B4C  0E68               	movlw	104
  6760  000B4E  0100               	movlb	0	; () banked
  6761  000B50  6FC4               	movwf	??_UI& (0+255),b
  6762  000B52  0EE4               	movlw	228
  6763  000B54                     u7377:
  6764  000B54  2EE8               	decfsz	wreg,f,c
  6765  000B56  D7FE               	bra	u7377
  6766  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6767  000B5A  D7FC               	bra	u7377
  6768  000B5C  F000               	nop	
  6769                           
  6770                           ;UI.c: 122: lcdInst(0b10000000);;
  6771  000B5E  0E80               	movlw	128
  6772  000B60  ECEC  F023         	call	_lcdInst
  6773                           
  6774                           ;UI.c: 123: printf("START:");
  6775  000B64  0EC4               	movlw	low STR_7
  6776  000B66  0100               	movlb	0	; () banked
  6777  000B68  6F8E               	movwf	printf@f& (0+255),b
  6778  000B6A  0EFF               	movlw	high STR_7
  6779  000B6C  0100               	movlb	0	; () banked
  6780  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6781  000B70  ECB8  F008         	call	_printf	;wreg free
  6782                           
  6783                           ;UI.c: 124: lcdInst(0b11000000);;
  6784  000B74  0EC0               	movlw	192
  6785  000B76  ECEC  F023         	call	_lcdInst
  6786                           
  6787                           ;UI.c: 125: char month[] = "MMM";
  6788  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6789  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6790  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6791  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6792                           
  6793                           ;UI.c: 126: switch(log_startTime[5]){
  6794  000B8A  D0C3               	goto	l7522
  6795  000B8C                     l7494:
  6796                           
  6797                           ;UI.c: 128: strcpy(month, "JAN");
  6798  000B8C  0ED6               	movlw	low UI@month
  6799  000B8E  0100               	movlb	0	; () banked
  6800  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6801  000B92  0E00               	movlw	high UI@month
  6802  000B94  0100               	movlb	0	; () banked
  6803  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6804  000B98  0EDB               	movlw	low STR_8
  6805  000B9A  0100               	movlb	0	; () banked
  6806  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6807  000B9E  0EFF               	movlw	high STR_8
  6808  000BA0  0100               	movlb	0	; () banked
  6809  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6810  000BA4  EC58  F021         	call	_strcpy	;wreg free
  6811                           
  6812                           ;UI.c: 129: break;
  6813  000BA8  D0E6               	goto	l7524
  6814  000BAA                     l7496:
  6815                           
  6816                           ;UI.c: 131: strcpy(month, "FEB");
  6817  000BAA  0ED6               	movlw	low UI@month
  6818  000BAC  0100               	movlb	0	; () banked
  6819  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6820  000BB0  0E00               	movlw	high UI@month
  6821  000BB2  0100               	movlb	0	; () banked
  6822  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6823  000BB6  0ECB               	movlw	low STR_9
  6824  000BB8  0100               	movlb	0	; () banked
  6825  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6826  000BBC  0EFF               	movlw	high STR_9
  6827  000BBE  0100               	movlb	0	; () banked
  6828  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6829  000BC2  EC58  F021         	call	_strcpy	;wreg free
  6830                           
  6831                           ;UI.c: 132: break;
  6832  000BC6  D0D7               	goto	l7524
  6833  000BC8                     l7498:
  6834                           
  6835                           ;UI.c: 134: strcpy(month, "MAR");
  6836  000BC8  0ED6               	movlw	low UI@month
  6837  000BCA  0100               	movlb	0	; () banked
  6838  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6839  000BCE  0E00               	movlw	high UI@month
  6840  000BD0  0100               	movlb	0	; () banked
  6841  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6842  000BD4  0EE7               	movlw	low STR_10
  6843  000BD6  0100               	movlb	0	; () banked
  6844  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6845  000BDA  0EFF               	movlw	high STR_10
  6846  000BDC  0100               	movlb	0	; () banked
  6847  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6848  000BE0  EC58  F021         	call	_strcpy	;wreg free
  6849                           
  6850                           ;UI.c: 135: break;
  6851  000BE4  D0C8               	goto	l7524
  6852  000BE6                     l7500:
  6853                           
  6854                           ;UI.c: 137: strcpy(month, "APR");
  6855  000BE6  0ED6               	movlw	low UI@month
  6856  000BE8  0100               	movlb	0	; () banked
  6857  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6858  000BEC  0E00               	movlw	high UI@month
  6859  000BEE  0100               	movlb	0	; () banked
  6860  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6861  000BF2  0EEB               	movlw	low STR_11
  6862  000BF4  0100               	movlb	0	; () banked
  6863  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6864  000BF8  0EFF               	movlw	high STR_11
  6865  000BFA  0100               	movlb	0	; () banked
  6866  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6867  000BFE  EC58  F021         	call	_strcpy	;wreg free
  6868                           
  6869                           ;UI.c: 138: break;
  6870  000C02  D0B9               	goto	l7524
  6871  000C04                     l7502:
  6872                           
  6873                           ;UI.c: 140: strcpy(month, "MAY");
  6874  000C04  0ED6               	movlw	low UI@month
  6875  000C06  0100               	movlb	0	; () banked
  6876  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6877  000C0A  0E00               	movlw	high UI@month
  6878  000C0C  0100               	movlb	0	; () banked
  6879  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6880  000C10  0EFB               	movlw	low STR_12
  6881  000C12  0100               	movlb	0	; () banked
  6882  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6883  000C16  0EFF               	movlw	high STR_12
  6884  000C18  0100               	movlb	0	; () banked
  6885  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6886  000C1C  EC58  F021         	call	_strcpy	;wreg free
  6887                           
  6888                           ;UI.c: 141: break;
  6889  000C20  D0AA               	goto	l7524
  6890  000C22                     l7504:
  6891                           
  6892                           ;UI.c: 143: strcpy(month, "JUN");
  6893  000C22  0ED6               	movlw	low UI@month
  6894  000C24  0100               	movlb	0	; () banked
  6895  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6896  000C28  0E00               	movlw	high UI@month
  6897  000C2A  0100               	movlb	0	; () banked
  6898  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6899  000C2E  0EDF               	movlw	low STR_13
  6900  000C30  0100               	movlb	0	; () banked
  6901  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6902  000C34  0EFF               	movlw	high STR_13
  6903  000C36  0100               	movlb	0	; () banked
  6904  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6905  000C3A  EC58  F021         	call	_strcpy	;wreg free
  6906                           
  6907                           ;UI.c: 144: break;
  6908  000C3E  D09B               	goto	l7524
  6909  000C40                     l7506:
  6910                           
  6911                           ;UI.c: 146: strcpy(month, "JUL");
  6912  000C40  0ED6               	movlw	low UI@month
  6913  000C42  0100               	movlb	0	; () banked
  6914  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6915  000C46  0E00               	movlw	high UI@month
  6916  000C48  0100               	movlb	0	; () banked
  6917  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6918  000C4C  0ED7               	movlw	low STR_14
  6919  000C4E  0100               	movlb	0	; () banked
  6920  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6921  000C52  0EFF               	movlw	high STR_14
  6922  000C54  0100               	movlb	0	; () banked
  6923  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6924  000C58  EC58  F021         	call	_strcpy	;wreg free
  6925                           
  6926                           ;UI.c: 147: break;
  6927  000C5C  D08C               	goto	l7524
  6928  000C5E                     l7508:
  6929                           
  6930                           ;UI.c: 149: strcpy(month, "AUG");
  6931  000C5E  0ED6               	movlw	low UI@month
  6932  000C60  0100               	movlb	0	; () banked
  6933  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6934  000C64  0E00               	movlw	high UI@month
  6935  000C66  0100               	movlb	0	; () banked
  6936  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6937  000C6A  0ED3               	movlw	low STR_15
  6938  000C6C  0100               	movlb	0	; () banked
  6939  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6940  000C70  0EFF               	movlw	high STR_15
  6941  000C72  0100               	movlb	0	; () banked
  6942  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6943  000C76  EC58  F021         	call	_strcpy	;wreg free
  6944                           
  6945                           ;UI.c: 150: break;
  6946  000C7A  D07D               	goto	l7524
  6947  000C7C                     l7510:
  6948                           
  6949                           ;UI.c: 152: strcpy(month, "SEP");
  6950  000C7C  0ED6               	movlw	low UI@month
  6951  000C7E  0100               	movlb	0	; () banked
  6952  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6953  000C82  0E00               	movlw	high UI@month
  6954  000C84  0100               	movlb	0	; () banked
  6955  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6956  000C88  0EE3               	movlw	low STR_16
  6957  000C8A  0100               	movlb	0	; () banked
  6958  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6959  000C8E  0EFF               	movlw	high STR_16
  6960  000C90  0100               	movlb	0	; () banked
  6961  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6962  000C94  EC58  F021         	call	_strcpy	;wreg free
  6963                           
  6964                           ;UI.c: 153: break;
  6965  000C98  D06E               	goto	l7524
  6966  000C9A                     l7512:
  6967                           
  6968                           ;UI.c: 155: strcpy(month, "OCT");
  6969  000C9A  0ED6               	movlw	low UI@month
  6970  000C9C  0100               	movlb	0	; () banked
  6971  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6972  000CA0  0E00               	movlw	high UI@month
  6973  000CA2  0100               	movlb	0	; () banked
  6974  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6975  000CA6  0EF3               	movlw	low STR_17
  6976  000CA8  0100               	movlb	0	; () banked
  6977  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6978  000CAC  0EFF               	movlw	high STR_17
  6979  000CAE  0100               	movlb	0	; () banked
  6980  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6981  000CB2  EC58  F021         	call	_strcpy	;wreg free
  6982                           
  6983                           ;UI.c: 156: break;
  6984  000CB6  D05F               	goto	l7524
  6985  000CB8                     l7514:
  6986                           
  6987                           ;UI.c: 158: strcpy(month, "NOV");
  6988  000CB8  0ED6               	movlw	low UI@month
  6989  000CBA  0100               	movlb	0	; () banked
  6990  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6991  000CBE  0E00               	movlw	high UI@month
  6992  000CC0  0100               	movlb	0	; () banked
  6993  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6994  000CC4  0EF7               	movlw	low STR_18
  6995  000CC6  0100               	movlb	0	; () banked
  6996  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6997  000CCA  0EFF               	movlw	high STR_18
  6998  000CCC  0100               	movlb	0	; () banked
  6999  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7000  000CD0  EC58  F021         	call	_strcpy	;wreg free
  7001                           
  7002                           ;UI.c: 159: break;
  7003  000CD4  D050               	goto	l7524
  7004  000CD6                     l7516:
  7005                           
  7006                           ;UI.c: 161: strcpy(month, "DEC");
  7007  000CD6  0ED6               	movlw	low UI@month
  7008  000CD8  0100               	movlb	0	; () banked
  7009  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7010  000CDC  0E00               	movlw	high UI@month
  7011  000CDE  0100               	movlb	0	; () banked
  7012  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7013  000CE2  0ECF               	movlw	low STR_19
  7014  000CE4  0100               	movlb	0	; () banked
  7015  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7016  000CE8  0EFF               	movlw	high STR_19
  7017  000CEA  0100               	movlb	0	; () banked
  7018  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7019  000CEE  EC58  F021         	call	_strcpy	;wreg free
  7020                           
  7021                           ;UI.c: 162: break;
  7022  000CF2  D041               	goto	l7524
  7023  000CF4                     l7518:
  7024                           
  7025                           ;UI.c: 164: strcpy(month, "ERR");
  7026  000CF4  0ED6               	movlw	low UI@month
  7027  000CF6  0100               	movlb	0	; () banked
  7028  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7029  000CFA  0E00               	movlw	high UI@month
  7030  000CFC  0100               	movlb	0	; () banked
  7031  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7032  000D00  0EEF               	movlw	low STR_20
  7033  000D02  0100               	movlb	0	; () banked
  7034  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7035  000D06  0EFF               	movlw	high STR_20
  7036  000D08  0100               	movlb	0	; () banked
  7037  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7038  000D0C  EC58  F021         	call	_strcpy	;wreg free
  7039                           
  7040                           ;UI.c: 166: }
  7041                           
  7042                           ;UI.c: 165: break;
  7043  000D10  D032               	goto	l7524
  7044  000D12                     l7522:
  7045  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7046  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7047  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7048                           
  7049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7050                           ; Switch size 1, requested type "space"
  7051                           ; Number of cases is 1, Range of values is 0 to 0
  7052                           ; switch strategies available:
  7053                           ; Name         Instructions Cycles
  7054                           ; simple_byte            4     3 (average)
  7055                           ;	Chosen strategy is simple_byte
  7056  000D1E  0100               	movlb	0	; () banked
  7057  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7058  000D22  0A00               	xorlw	0	; case 0
  7059  000D24  A4D8               	btfss	status,2,c
  7060  000D26  D7E6               	goto	l7518
  7061                           
  7062                           ; BSR set to: 0
  7063                           ; Switch size 1, requested type "space"
  7064                           ; Number of cases is 12, Range of values is 1 to 12
  7065                           ; switch strategies available:
  7066                           ; Name         Instructions Cycles
  7067                           ; simple_byte           37    19 (average)
  7068                           ;	Chosen strategy is simple_byte
  7069  000D28  0100               	movlb	0	; () banked
  7070  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7071  000D2C  0A01               	xorlw	1	; case 1
  7072  000D2E  B4D8               	btfsc	status,2,c
  7073  000D30  D72D               	goto	l7494
  7074  000D32  0A03               	xorlw	3	; case 2
  7075  000D34  B4D8               	btfsc	status,2,c
  7076  000D36  D739               	goto	l7496
  7077  000D38  0A01               	xorlw	1	; case 3
  7078  000D3A  B4D8               	btfsc	status,2,c
  7079  000D3C  D745               	goto	l7498
  7080  000D3E  0A07               	xorlw	7	; case 4
  7081  000D40  B4D8               	btfsc	status,2,c
  7082  000D42  D751               	goto	l7500
  7083  000D44  0A01               	xorlw	1	; case 5
  7084  000D46  B4D8               	btfsc	status,2,c
  7085  000D48  D75D               	goto	l7502
  7086  000D4A  0A03               	xorlw	3	; case 6
  7087  000D4C  B4D8               	btfsc	status,2,c
  7088  000D4E  D769               	goto	l7504
  7089  000D50  0A01               	xorlw	1	; case 7
  7090  000D52  B4D8               	btfsc	status,2,c
  7091  000D54  D775               	goto	l7506
  7092  000D56  0A0F               	xorlw	15	; case 8
  7093  000D58  B4D8               	btfsc	status,2,c
  7094  000D5A  D781               	goto	l7508
  7095  000D5C  0A01               	xorlw	1	; case 9
  7096  000D5E  B4D8               	btfsc	status,2,c
  7097  000D60  D78D               	goto	l7510
  7098  000D62  0A03               	xorlw	3	; case 10
  7099  000D64  B4D8               	btfsc	status,2,c
  7100  000D66  D799               	goto	l7512
  7101  000D68  0A01               	xorlw	1	; case 11
  7102  000D6A  B4D8               	btfsc	status,2,c
  7103  000D6C  D7A5               	goto	l7514
  7104  000D6E  0A07               	xorlw	7	; case 12
  7105  000D70  B4D8               	btfsc	status,2,c
  7106  000D72  D7B1               	goto	l7516
  7107  000D74  D7BF               	goto	l7518
  7108  000D76                     l7524:
  7109                           
  7110                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7111  000D76  0E40               	movlw	low STR_21
  7112  000D78  0100               	movlb	0	; () banked
  7113  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7114  000D7C  0EFB               	movlw	high STR_21
  7115  000D7E  0100               	movlb	0	; () banked
  7116  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7117  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7118  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7119  000D8A  0ED6               	movlw	low UI@month
  7120  000D8C  0100               	movlb	0	; () banked
  7121  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7122  000D90  0E00               	movlw	high UI@month
  7123  000D92  0100               	movlb	0	; () banked
  7124  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7125  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7126  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7127  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7128  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7129  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7130  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7131  000DAE  ECB8  F008         	call	_printf	;wreg free
  7132                           
  7133                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7134  000DB2  0E00               	movlw	0
  7135  000DB4  0100               	movlb	0	; () banked
  7136  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7137  000DB8                     l7528:
  7138                           
  7139                           ; BSR set to: 0
  7140  000DB8  0E63               	movlw	99
  7141  000DBA  0100               	movlb	0	; () banked
  7142  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7143  000DBE  D001               	goto	l7532
  7144  000DC0  D00C               	goto	l7536
  7145  000DC2                     l7532:
  7146                           
  7147                           ; BSR set to: 0
  7148  000DC2  0E68               	movlw	104
  7149  000DC4  0100               	movlb	0	; () banked
  7150  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7151  000DC8  0EE4               	movlw	228
  7152  000DCA                     u7387:
  7153  000DCA  2EE8               	decfsz	wreg,f,c
  7154  000DCC  D7FE               	bra	u7387
  7155  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7156  000DD0  D7FC               	bra	u7387
  7157  000DD2  F000               	nop	
  7158  000DD4  0100               	movlb	0	; () banked
  7159  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7160  000DD8  D7EF               	goto	l7528
  7161  000DDA                     l7536:
  7162                           
  7163                           ; BSR set to: 0
  7164  000DDA  0100               	movlb	0	; () banked
  7165  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7166  000DDE  0100               	movlb	0	; () banked
  7167  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7168  000DE2  B4D8               	btfsc	status,2,c
  7169  000DE4  0012               	return	
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7173                           
  7174                           ; BSR set to: 0
  7175                           
  7176                           ; BSR set to: 0
  7177  000DE6  0E00               	movlw	0
  7178  000DE8  0100               	movlb	0	; () banked
  7179  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7180  000DEC                     l7542:
  7181                           
  7182                           ; BSR set to: 0
  7183  000DEC  0E63               	movlw	99
  7184  000DEE  0100               	movlb	0	; () banked
  7185  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7186  000DF2  D001               	goto	l7546
  7187  000DF4  D00C               	goto	l7550
  7188  000DF6                     l7546:
  7189                           
  7190                           ; BSR set to: 0
  7191  000DF6  0E68               	movlw	104
  7192  000DF8  0100               	movlb	0	; () banked
  7193  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7194  000DFC  0EE4               	movlw	228
  7195  000DFE                     u7397:
  7196  000DFE  2EE8               	decfsz	wreg,f,c
  7197  000E00  D7FE               	bra	u7397
  7198  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7199  000E04  D7FC               	bra	u7397
  7200  000E06  F000               	nop	
  7201  000E08  0100               	movlb	0	; () banked
  7202  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7203  000E0C  D7EF               	goto	l7542
  7204  000E0E                     l7550:
  7205                           
  7206                           ; BSR set to: 0
  7207  000E0E  0100               	movlb	0	; () banked
  7208  000E10  51F6               	movf	_logstate& (0+255),w,b
  7209  000E12  0100               	movlb	0	; () banked
  7210  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7211  000E16  B4D8               	btfsc	status,2,c
  7212  000E18  0012               	return	
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7216                           
  7217                           ; BSR set to: 0
  7218                           
  7219                           ; BSR set to: 0
  7220  000E1A  0E01               	movlw	1
  7221  000E1C  ECEC  F023         	call	_lcdInst
  7222  000E20  0E68               	movlw	104
  7223  000E22  0100               	movlb	0	; () banked
  7224  000E24  6FC4               	movwf	??_UI& (0+255),b
  7225  000E26  0EE4               	movlw	228
  7226  000E28                     u7407:
  7227  000E28  2EE8               	decfsz	wreg,f,c
  7228  000E2A  D7FE               	bra	u7407
  7229  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7230  000E2E  D7FC               	bra	u7407
  7231  000E30  F000               	nop	
  7232                           
  7233                           ;UI.c: 173: lcdInst(0b10000000);;
  7234  000E32  0E80               	movlw	128
  7235  000E34  ECEC  F023         	call	_lcdInst
  7236                           
  7237                           ;UI.c: 174: printf("DURATION:");
  7238  000E38  0E9B               	movlw	low STR_22
  7239  000E3A  0100               	movlb	0	; () banked
  7240  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7241  000E3E  0EFF               	movlw	high STR_22
  7242  000E40  0100               	movlb	0	; () banked
  7243  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7244  000E44  ECB8  F008         	call	_printf	;wreg free
  7245                           
  7246                           ;UI.c: 175: lcdInst(0b11000000);;
  7247  000E48  0EC0               	movlw	192
  7248  000E4A  ECEC  F023         	call	_lcdInst
  7249                           
  7250                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7251  000E4E  0E0E               	movlw	14
  7252  000E50  0100               	movlb	0	; () banked
  7253  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7254  000E54  0E10               	movlw	16
  7255  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7256  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7257  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7258  000E60  EC4A  F01C         	call	___awmod	;wreg free
  7259  000E64  C080  F0C6         	movff	?___awmod,_UI$2297
  7260  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2297+1
  7261                           
  7262                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7263  000E6C  0E19               	movlw	low STR_23
  7264  000E6E  0100               	movlb	0	; () banked
  7265  000E70  6F8E               	movwf	printf@f& (0+255),b
  7266  000E72  0EFF               	movlw	high STR_23
  7267  000E74  0100               	movlb	0	; () banked
  7268  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7269  000E78  0E0E               	movlw	14
  7270  000E7A  0100               	movlb	0	; () banked
  7271  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7272  000E7E  0E10               	movlw	16
  7273  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7274  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7275  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7276  000E8A  EC4A  F01C         	call	___awmod	;wreg free
  7277  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7278  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7279  000E96  0E00               	movlw	0
  7280  000E98  0100               	movlb	0	; () banked
  7281  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7282  000E9C  0E3C               	movlw	60
  7283  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7284  000EA0  EC38  F01B         	call	___awdiv	;wreg free
  7285  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7286  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7287  000EAC  C0C6  F080         	movff	_UI$2297,___awmod@dividend
  7288  000EB0  C0C7  F081         	movff	_UI$2297+1,___awmod@dividend+1
  7289  000EB4  0E00               	movlw	0
  7290  000EB6  0100               	movlb	0	; () banked
  7291  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7292  000EBA  0E3C               	movlw	60
  7293  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7294  000EBE  EC4A  F01C         	call	___awmod	;wreg free
  7295  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7296  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7297  000ECA  ECB8  F008         	call	_printf	;wreg free
  7298                           
  7299                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7300  000ECE  0E00               	movlw	0
  7301  000ED0  0100               	movlb	0	; () banked
  7302  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7303  000ED4                     l7570:
  7304                           
  7305                           ; BSR set to: 0
  7306  000ED4  0E63               	movlw	99
  7307  000ED6  0100               	movlb	0	; () banked
  7308  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7309  000EDA  D001               	goto	l7574
  7310  000EDC  D00C               	goto	l7578
  7311  000EDE                     l7574:
  7312                           
  7313                           ; BSR set to: 0
  7314  000EDE  0E68               	movlw	104
  7315  000EE0  0100               	movlb	0	; () banked
  7316  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7317  000EE4  0EE4               	movlw	228
  7318  000EE6                     u7417:
  7319  000EE6  2EE8               	decfsz	wreg,f,c
  7320  000EE8  D7FE               	bra	u7417
  7321  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7322  000EEC  D7FC               	bra	u7417
  7323  000EEE  F000               	nop	
  7324  000EF0  0100               	movlb	0	; () banked
  7325  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7326  000EF4  D7EF               	goto	l7570
  7327  000EF6                     l7578:
  7328                           
  7329                           ; BSR set to: 0
  7330  000EF6  0100               	movlb	0	; () banked
  7331  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7332  000EFA  0100               	movlb	0	; () banked
  7333  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7334  000EFE  B4D8               	btfsc	status,2,c
  7335  000F00  0012               	return	
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7339                           
  7340                           ; BSR set to: 0
  7341                           
  7342                           ; BSR set to: 0
  7343  000F02  0E00               	movlw	0
  7344  000F04  0100               	movlb	0	; () banked
  7345  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7346  000F08                     l7584:
  7347                           
  7348                           ; BSR set to: 0
  7349  000F08  0E63               	movlw	99
  7350  000F0A  0100               	movlb	0	; () banked
  7351  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7352  000F0E  D001               	goto	l7588
  7353  000F10  D00C               	goto	l7592
  7354  000F12                     l7588:
  7355                           
  7356                           ; BSR set to: 0
  7357  000F12  0E68               	movlw	104
  7358  000F14  0100               	movlb	0	; () banked
  7359  000F16  6FC4               	movwf	??_UI& (0+255),b
  7360  000F18  0EE4               	movlw	228
  7361  000F1A                     u7427:
  7362  000F1A  2EE8               	decfsz	wreg,f,c
  7363  000F1C  D7FE               	bra	u7427
  7364  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7365  000F20  D7FC               	bra	u7427
  7366  000F22  F000               	nop	
  7367  000F24  0100               	movlb	0	; () banked
  7368  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7369  000F28  D7EF               	goto	l7584
  7370  000F2A                     l7592:
  7371                           
  7372                           ; BSR set to: 0
  7373  000F2A  0100               	movlb	0	; () banked
  7374  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7375  000F2E  0100               	movlb	0	; () banked
  7376  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7377  000F32  B4D8               	btfsc	status,2,c
  7378  000F34  0012               	return	
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7382                           
  7383                           ; BSR set to: 0
  7384                           
  7385                           ; BSR set to: 0
  7386  000F36  0E01               	movlw	1
  7387  000F38  ECEC  F023         	call	_lcdInst
  7388  000F3C  0E68               	movlw	104
  7389  000F3E  0100               	movlb	0	; () banked
  7390  000F40  6FC4               	movwf	??_UI& (0+255),b
  7391  000F42  0EE4               	movlw	228
  7392  000F44                     u7437:
  7393  000F44  2EE8               	decfsz	wreg,f,c
  7394  000F46  D7FE               	bra	u7437
  7395  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7396  000F4A  D7FC               	bra	u7437
  7397  000F4C  F000               	nop	
  7398                           
  7399                           ;UI.c: 182: lcdInst(0b10000000);;
  7400  000F4E  0E80               	movlw	128
  7401  000F50  ECEC  F023         	call	_lcdInst
  7402                           
  7403                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7404  000F54  0E3C               	movlw	low STR_24
  7405  000F56  0100               	movlb	0	; () banked
  7406  000F58  6F8E               	movwf	printf@f& (0+255),b
  7407  000F5A  0EFD               	movlw	high STR_24
  7408  000F5C  0100               	movlb	0	; () banked
  7409  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7410  000F60  ECB8  F008         	call	_printf	;wreg free
  7411                           
  7412                           ;UI.c: 184: lcdInst(0b11000000);;
  7413  000F64  0EC0               	movlw	192
  7414  000F66  ECEC  F023         	call	_lcdInst
  7415                           
  7416                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7417  000F6A  0E19               	movlw	low STR_25
  7418  000F6C  0100               	movlb	0	; () banked
  7419  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7420  000F70  0EFE               	movlw	high STR_25
  7421  000F72  0100               	movlb	0	; () banked
  7422  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7423  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7424  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7425  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7426  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7427  000F86  ECB8  F008         	call	_printf	;wreg free
  7428                           
  7429                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7430  000F8A  0E00               	movlw	0
  7431  000F8C  0100               	movlb	0	; () banked
  7432  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7433  000F90                     l7610:
  7434                           
  7435                           ; BSR set to: 0
  7436  000F90  0E63               	movlw	99
  7437  000F92  0100               	movlb	0	; () banked
  7438  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7439  000F96  D001               	goto	l7614
  7440  000F98  D00C               	goto	l7618
  7441  000F9A                     l7614:
  7442                           
  7443                           ; BSR set to: 0
  7444  000F9A  0E68               	movlw	104
  7445  000F9C  0100               	movlb	0	; () banked
  7446  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7447  000FA0  0EE4               	movlw	228
  7448  000FA2                     u7447:
  7449  000FA2  2EE8               	decfsz	wreg,f,c
  7450  000FA4  D7FE               	bra	u7447
  7451  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7452  000FA8  D7FC               	bra	u7447
  7453  000FAA  F000               	nop	
  7454  000FAC  0100               	movlb	0	; () banked
  7455  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7456  000FB0  D7EF               	goto	l7610
  7457  000FB2                     l7618:
  7458                           
  7459                           ; BSR set to: 0
  7460  000FB2  0100               	movlb	0	; () banked
  7461  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7462  000FB6  0100               	movlb	0	; () banked
  7463  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7464  000FBA  B4D8               	btfsc	status,2,c
  7465  000FBC  0012               	return	
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7469                           
  7470                           ; BSR set to: 0
  7471                           
  7472                           ; BSR set to: 0
  7473  000FBE  0E00               	movlw	0
  7474  000FC0  0100               	movlb	0	; () banked
  7475  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7476  000FC4                     l7624:
  7477                           
  7478                           ; BSR set to: 0
  7479  000FC4  0E63               	movlw	99
  7480  000FC6  0100               	movlb	0	; () banked
  7481  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7482  000FCA  D001               	goto	l7628
  7483  000FCC  D00C               	goto	l7632
  7484  000FCE                     l7628:
  7485                           
  7486                           ; BSR set to: 0
  7487  000FCE  0E68               	movlw	104
  7488  000FD0  0100               	movlb	0	; () banked
  7489  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7490  000FD4  0EE4               	movlw	228
  7491  000FD6                     u7457:
  7492  000FD6  2EE8               	decfsz	wreg,f,c
  7493  000FD8  D7FE               	bra	u7457
  7494  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7495  000FDC  D7FC               	bra	u7457
  7496  000FDE  F000               	nop	
  7497  000FE0  0100               	movlb	0	; () banked
  7498  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7499  000FE4  D7EF               	goto	l7624
  7500  000FE6                     l7632:
  7501                           
  7502                           ; BSR set to: 0
  7503  000FE6  0100               	movlb	0	; () banked
  7504  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7505  000FEA  0100               	movlb	0	; () banked
  7506  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7507  000FEE  B4D8               	btfsc	status,2,c
  7508  000FF0  0012               	return	
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7512                           
  7513                           ; BSR set to: 0
  7514                           
  7515                           ; BSR set to: 0
  7516  000FF2  0E01               	movlw	1
  7517  000FF4  ECEC  F023         	call	_lcdInst
  7518  000FF8  0E68               	movlw	104
  7519  000FFA  0100               	movlb	0	; () banked
  7520  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7521  000FFE  0EE4               	movlw	228
  7522  001000                     u7467:
  7523  001000  2EE8               	decfsz	wreg,f,c
  7524  001002  D7FE               	bra	u7467
  7525  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7526  001006  D7FC               	bra	u7467
  7527  001008  F000               	nop	
  7528                           
  7529                           ;UI.c: 191: lcdInst(0b10000000);;
  7530  00100A  0E80               	movlw	128
  7531  00100C  ECEC  F023         	call	_lcdInst
  7532                           
  7533                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7534  001010  0E4D               	movlw	low STR_26
  7535  001012  0100               	movlb	0	; () banked
  7536  001014  6F8E               	movwf	printf@f& (0+255),b
  7537  001016  0EFD               	movlw	high STR_26
  7538  001018  0100               	movlb	0	; () banked
  7539  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7540  00101C  ECB8  F008         	call	_printf	;wreg free
  7541                           
  7542                           ;UI.c: 193: lcdInst(0b11000000);;
  7543  001020  0EC0               	movlw	192
  7544  001022  ECEC  F023         	call	_lcdInst
  7545                           
  7546                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7547  001026  0E08               	movlw	low STR_27
  7548  001028  0100               	movlb	0	; () banked
  7549  00102A  6F8E               	movwf	printf@f& (0+255),b
  7550  00102C  0EFE               	movlw	high STR_27
  7551  00102E  0100               	movlb	0	; () banked
  7552  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7553  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7554  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7555  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7556  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7557  001042  ECB8  F008         	call	_printf	;wreg free
  7558                           
  7559                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7560  001046  0E00               	movlw	0
  7561  001048  0100               	movlb	0	; () banked
  7562  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7563  00104C                     l7650:
  7564                           
  7565                           ; BSR set to: 0
  7566  00104C  0E63               	movlw	99
  7567  00104E  0100               	movlb	0	; () banked
  7568  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7569  001052  D001               	goto	l7654
  7570  001054  D00C               	goto	l7658
  7571  001056                     l7654:
  7572                           
  7573                           ; BSR set to: 0
  7574  001056  0E68               	movlw	104
  7575  001058  0100               	movlb	0	; () banked
  7576  00105A  6FC4               	movwf	??_UI& (0+255),b
  7577  00105C  0EE4               	movlw	228
  7578  00105E                     u7477:
  7579  00105E  2EE8               	decfsz	wreg,f,c
  7580  001060  D7FE               	bra	u7477
  7581  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7582  001064  D7FC               	bra	u7477
  7583  001066  F000               	nop	
  7584  001068  0100               	movlb	0	; () banked
  7585  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7586  00106C  D7EF               	goto	l7650
  7587  00106E                     l7658:
  7588                           
  7589                           ; BSR set to: 0
  7590  00106E  0100               	movlb	0	; () banked
  7591  001070  51F6               	movf	_logstate& (0+255),w,b
  7592  001072  0100               	movlb	0	; () banked
  7593  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7594  001076  B4D8               	btfsc	status,2,c
  7595  001078  0012               	return	
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7599                           
  7600                           ; BSR set to: 0
  7601                           
  7602                           ; BSR set to: 0
  7603  00107A  0E00               	movlw	0
  7604  00107C  0100               	movlb	0	; () banked
  7605  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7606  001080                     l7664:
  7607                           
  7608                           ; BSR set to: 0
  7609  001080  0E63               	movlw	99
  7610  001082  0100               	movlb	0	; () banked
  7611  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7612  001086  D001               	goto	l7668
  7613  001088  D00C               	goto	l7672
  7614  00108A                     l7668:
  7615                           
  7616                           ; BSR set to: 0
  7617  00108A  0E68               	movlw	104
  7618  00108C  0100               	movlb	0	; () banked
  7619  00108E  6FC4               	movwf	??_UI& (0+255),b
  7620  001090  0EE4               	movlw	228
  7621  001092                     u7487:
  7622  001092  2EE8               	decfsz	wreg,f,c
  7623  001094  D7FE               	bra	u7487
  7624  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7625  001098  D7FC               	bra	u7487
  7626  00109A  F000               	nop	
  7627  00109C  0100               	movlb	0	; () banked
  7628  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7629  0010A0  D7EF               	goto	l7664
  7630  0010A2                     l7672:
  7631                           
  7632                           ; BSR set to: 0
  7633  0010A2  0100               	movlb	0	; () banked
  7634  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7635  0010A6  0100               	movlb	0	; () banked
  7636  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7637  0010AA  B4D8               	btfsc	status,2,c
  7638  0010AC  0012               	return	
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7642                           
  7643                           ; BSR set to: 0
  7644                           
  7645                           ; BSR set to: 0
  7646  0010AE  0E01               	movlw	1
  7647  0010B0  ECEC  F023         	call	_lcdInst
  7648  0010B4  0E68               	movlw	104
  7649  0010B6  0100               	movlb	0	; () banked
  7650  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7651  0010BA  0EE4               	movlw	228
  7652  0010BC                     u7497:
  7653  0010BC  2EE8               	decfsz	wreg,f,c
  7654  0010BE  D7FE               	bra	u7497
  7655  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7656  0010C2  D7FC               	bra	u7497
  7657  0010C4  F000               	nop	
  7658                           
  7659                           ;UI.c: 200: lcdInst(0b10000000);;
  7660  0010C6  0E80               	movlw	128
  7661  0010C8  ECEC  F023         	call	_lcdInst
  7662                           
  7663                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7664  0010CC  0E5E               	movlw	low STR_28
  7665  0010CE  0100               	movlb	0	; () banked
  7666  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7667  0010D2  0EFD               	movlw	high STR_28
  7668  0010D4  0100               	movlb	0	; () banked
  7669  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7670  0010D8  ECB8  F008         	call	_printf	;wreg free
  7671                           
  7672                           ;UI.c: 202: lcdInst(0b11000000);;
  7673  0010DC  0EC0               	movlw	192
  7674  0010DE  ECEC  F023         	call	_lcdInst
  7675                           
  7676                           ;UI.c: 203: printf("%d", log_count_total);
  7677  0010E2  0E16               	movlw	low (STR_27+14)
  7678  0010E4  0100               	movlb	0	; () banked
  7679  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7680  0010E8  0EFE               	movlw	high (STR_27+14)
  7681  0010EA  0100               	movlb	0	; () banked
  7682  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7683  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7684  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7685  0010F6  ECB8  F008         	call	_printf	;wreg free
  7686                           
  7687                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7688  0010FA  0E00               	movlw	0
  7689  0010FC  0100               	movlb	0	; () banked
  7690  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7691  001100                     l7690:
  7692                           
  7693                           ; BSR set to: 0
  7694  001100  0E63               	movlw	99
  7695  001102  0100               	movlb	0	; () banked
  7696  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7697  001106  D001               	goto	l7694
  7698  001108  D00C               	goto	l7698
  7699  00110A                     l7694:
  7700                           
  7701                           ; BSR set to: 0
  7702  00110A  0E68               	movlw	104
  7703  00110C  0100               	movlb	0	; () banked
  7704  00110E  6FC4               	movwf	??_UI& (0+255),b
  7705  001110  0EE4               	movlw	228
  7706  001112                     u7507:
  7707  001112  2EE8               	decfsz	wreg,f,c
  7708  001114  D7FE               	bra	u7507
  7709  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7710  001118  D7FC               	bra	u7507
  7711  00111A  F000               	nop	
  7712  00111C  0100               	movlb	0	; () banked
  7713  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7714  001120  D7EF               	goto	l7690
  7715  001122                     l7698:
  7716                           
  7717                           ; BSR set to: 0
  7718  001122  0100               	movlb	0	; () banked
  7719  001124  51F6               	movf	_logstate& (0+255),w,b
  7720  001126  0100               	movlb	0	; () banked
  7721  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7722  00112A  B4D8               	btfsc	status,2,c
  7723  00112C  0012               	return	
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7727                           
  7728                           ; BSR set to: 0
  7729                           
  7730                           ; BSR set to: 0
  7731  00112E  0E00               	movlw	0
  7732  001130  0100               	movlb	0	; () banked
  7733  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7734  001134                     l7704:
  7735                           
  7736                           ; BSR set to: 0
  7737  001134  0E63               	movlw	99
  7738  001136  0100               	movlb	0	; () banked
  7739  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7740  00113A  D001               	goto	l7708
  7741  00113C  D00C               	goto	l7712
  7742  00113E                     l7708:
  7743                           
  7744                           ; BSR set to: 0
  7745  00113E  0E68               	movlw	104
  7746  001140  0100               	movlb	0	; () banked
  7747  001142  6FC4               	movwf	??_UI& (0+255),b
  7748  001144  0EE4               	movlw	228
  7749  001146                     u7517:
  7750  001146  2EE8               	decfsz	wreg,f,c
  7751  001148  D7FE               	bra	u7517
  7752  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7753  00114C  D7FC               	bra	u7517
  7754  00114E  F000               	nop	
  7755  001150  0100               	movlb	0	; () banked
  7756  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7757  001154  D7EF               	goto	l7704
  7758  001156                     l7712:
  7759                           
  7760                           ; BSR set to: 0
  7761  001156  0100               	movlb	0	; () banked
  7762  001158  51F6               	movf	_logstate& (0+255),w,b
  7763  00115A  0100               	movlb	0	; () banked
  7764  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7765  00115E  B4D8               	btfsc	status,2,c
  7766  001160  0012               	return	
  7767  001162                     l7716:
  7768  001162  0100               	movlb	0	; () banked
  7769  001164  51F6               	movf	_logstate& (0+255),w,b
  7770  001166  0100               	movlb	0	; () banked
  7771  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7772  00116A  B4D8               	btfsc	status,2,c
  7773  00116C  0012               	return	
  7774  00116E  D44A               	goto	l7412
  7775  001170                     __end_of_UI:
  7776                           	opt stack 0
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           intcon2	equ	0xFF1
  7785                           intcon3	equ	0xFF0
  7786                           postinc0	equ	0xFEE
  7787                           wreg	equ	0xFE8
  7788                           postdec1	equ	0xFE5
  7789                           fsr1l	equ	0xFE1
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           postdec2	equ	0xFDD
  7793                           fsr2h	equ	0xFDA
  7794                           fsr2l	equ	0xFD9
  7795                           status	equ	0xFD8
  7796                           
  7797 ;; *************** function _printRTC *****************
  7798 ;; Defined at:
  7799 ;;		line 63 in file "RTC.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;		None
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;  i               2   66[BANK0 ] int 
  7804 ;;  INT_time       14   46[BANK0 ] int [7]
  7805 ;;  month           4   62[BANK0 ] unsigned char [4]
  7806 ;;  RTC_month       2   60[BANK0 ] int 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;Total ram usage:       25 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:   10
  7823 ;; This function calls:
  7824 ;;		_getRTC
  7825 ;;		_lcdInst
  7826 ;;		_printf
  7827 ;;		_strcpy
  7828 ;; This function is called by:
  7829 ;;		_UI
  7830 ;;		_change_state_to_menu_start
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text24
  7835  001F28                     __ptext24:
  7836                           	opt stack 0
  7837  001F28                     _printRTC:
  7838                           	opt stack 18
  7839                           
  7840                           ;RTC.c: 64: getRTC();
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;incstack = 0
  7844  001F28  EC25  F01D         	call	_getRTC	;wreg free
  7845                           
  7846                           ;RTC.c: 65: char month[] = "MMM";
  7847  001F2C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7848  001F30  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7849  001F34  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7850  001F38  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7851                           
  7852                           ;RTC.c: 66: int INT_time[7];
  7853                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7854  001F3C  0E00               	movlw	0
  7855  001F3E  0100               	movlb	0	; () banked
  7856  001F40  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7857  001F42  0E00               	movlw	0
  7858  001F44  6FC2               	movwf	printRTC@i& (0+255),b
  7859                           
  7860                           ; BSR set to: 0
  7861  001F46  0100               	movlb	0	; () banked
  7862  001F48  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7863  001F4A  D008               	goto	l5826
  7864  001F4C  0100               	movlb	0	; () banked
  7865  001F4E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7866  001F50  E146               	bnz	l602
  7867  001F52  0E07               	movlw	7
  7868  001F54  0100               	movlb	0	; () banked
  7869  001F56  5DC2               	subwf	printRTC@i& (0+255),w,b
  7870  001F58  B0D8               	btfsc	status,0,c
  7871  001F5A  D041               	goto	l602
  7872  001F5C                     l5826:
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7876  001F5C  0E24               	movlw	low _time
  7877  001F5E  0100               	movlb	0	; () banked
  7878  001F60  25C2               	addwf	printRTC@i& (0+255),w,b
  7879  001F62  6ED9               	movwf	fsr2l,c
  7880  001F64  0E01               	movlw	high _time
  7881  001F66  0100               	movlb	0	; () banked
  7882  001F68  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7883  001F6A  6EDA               	movwf	fsr2h,c
  7884  001F6C  50DF               	movf	indf2,w,c
  7885  001F6E  0100               	movlb	0	; () banked
  7886  001F70  6FAB               	movwf	??_printRTC& (0+255),b
  7887  001F72  0100               	movlb	0	; () banked
  7888  001F74  3BAB               	swapf	??_printRTC& (0+255),f,b
  7889  001F76  0E0F               	movlw	15
  7890  001F78  17AB               	andwf	??_printRTC& (0+255),f,b
  7891  001F7A  0E0F               	movlw	15
  7892  001F7C  0100               	movlb	0	; () banked
  7893  001F7E  17AB               	andwf	??_printRTC& (0+255),f,b
  7894  001F80  0100               	movlb	0	; () banked
  7895  001F82  51AB               	movf	??_printRTC& (0+255),w,b
  7896  001F84  0D0A               	mullw	10
  7897  001F86  0E24               	movlw	low _time
  7898  001F88  0100               	movlb	0	; () banked
  7899  001F8A  25C2               	addwf	printRTC@i& (0+255),w,b
  7900  001F8C  6ED9               	movwf	fsr2l,c
  7901  001F8E  0E01               	movlw	high _time
  7902  001F90  0100               	movlb	0	; () banked
  7903  001F92  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7904  001F94  6EDA               	movwf	fsr2h,c
  7905  001F96  50DF               	movf	indf2,w,c
  7906  001F98  0B0F               	andlw	15
  7907  001F9A  0100               	movlb	0	; () banked
  7908  001F9C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7909  001F9E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7910  001FA0  50F3               	movf	prodl,w,c
  7911  001FA2  0100               	movlb	0	; () banked
  7912  001FA4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7913  001FA6  50F4               	movf	prodh,w,c
  7914  001FA8  0100               	movlb	0	; () banked
  7915  001FAA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7916  001FAC  90D8               	bcf	status,0,c
  7917  001FAE  0100               	movlb	0	; () banked
  7918  001FB0  35C2               	rlcf	printRTC@i& (0+255),w,b
  7919  001FB2  6ED9               	movwf	fsr2l,c
  7920  001FB4  0100               	movlb	0	; () banked
  7921  001FB6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7922  001FB8  6EDA               	movwf	fsr2h,c
  7923  001FBA  0EAE               	movlw	low printRTC@INT_time
  7924  001FBC  26D9               	addwf	fsr2l,f,c
  7925  001FBE  0E00               	movlw	high printRTC@INT_time
  7926  001FC0  22DA               	addwfc	fsr2h,f,c
  7927  001FC2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7928  001FC6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7929                           
  7930                           ; BSR set to: 0
  7931  001FCA  0100               	movlb	0	; () banked
  7932  001FCC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7933  001FCE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7934                           
  7935                           ; BSR set to: 0
  7936  001FD0  0100               	movlb	0	; () banked
  7937  001FD2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7938  001FD4  D7C3               	goto	l5826
  7939  001FD6  0100               	movlb	0	; () banked
  7940  001FD8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7941  001FDA  E101               	bnz	u4510
  7942  001FDC  D7BA               	goto	L6
  7943  001FDE                     u4510:
  7944  001FDE                     l602:
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;RTC.c: 69: }
  7948                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7949  001FDE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7950  001FE2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7951                           
  7952                           ;RTC.c: 71: switch(RTC_month){
  7953  001FE6  D0B4               	goto	l5858
  7954  001FE8                     l5832:
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;RTC.c: 73: strcpy(month, "JAN");
  7958  001FE8  0EBE               	movlw	low printRTC@month
  7959  001FEA  0100               	movlb	0	; () banked
  7960  001FEC  6F80               	movwf	strcpy@to& (0+255),b
  7961  001FEE  0E00               	movlw	high printRTC@month
  7962  001FF0  0100               	movlb	0	; () banked
  7963  001FF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7964  001FF4  0EDB               	movlw	low STR_8
  7965  001FF6  0100               	movlb	0	; () banked
  7966  001FF8  6F82               	movwf	strcpy@from& (0+255),b
  7967  001FFA  0EFF               	movlw	high STR_8
  7968  001FFC  0100               	movlb	0	; () banked
  7969  001FFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7970  002000  EC58  F021         	call	_strcpy	;wreg free
  7971                           
  7972                           ;RTC.c: 74: break;
  7973  002004  D0D4               	goto	l5860
  7974  002006                     l5834:
  7975                           
  7976                           ;RTC.c: 76: strcpy(month, "FEB");
  7977  002006  0EBE               	movlw	low printRTC@month
  7978  002008  0100               	movlb	0	; () banked
  7979  00200A  6F80               	movwf	strcpy@to& (0+255),b
  7980  00200C  0E00               	movlw	high printRTC@month
  7981  00200E  0100               	movlb	0	; () banked
  7982  002010  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7983  002012  0ECB               	movlw	low STR_9
  7984  002014  0100               	movlb	0	; () banked
  7985  002016  6F82               	movwf	strcpy@from& (0+255),b
  7986  002018  0EFF               	movlw	high STR_9
  7987  00201A  0100               	movlb	0	; () banked
  7988  00201C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7989  00201E  EC58  F021         	call	_strcpy	;wreg free
  7990                           
  7991                           ;RTC.c: 77: break;
  7992  002022  D0C5               	goto	l5860
  7993  002024                     l5836:
  7994                           
  7995                           ;RTC.c: 79: strcpy(month, "MAR");
  7996  002024  0EBE               	movlw	low printRTC@month
  7997  002026  0100               	movlb	0	; () banked
  7998  002028  6F80               	movwf	strcpy@to& (0+255),b
  7999  00202A  0E00               	movlw	high printRTC@month
  8000  00202C  0100               	movlb	0	; () banked
  8001  00202E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8002  002030  0EE7               	movlw	low STR_10
  8003  002032  0100               	movlb	0	; () banked
  8004  002034  6F82               	movwf	strcpy@from& (0+255),b
  8005  002036  0EFF               	movlw	high STR_10
  8006  002038  0100               	movlb	0	; () banked
  8007  00203A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8008  00203C  EC58  F021         	call	_strcpy	;wreg free
  8009                           
  8010                           ;RTC.c: 80: break;
  8011  002040  D0B6               	goto	l5860
  8012  002042                     l5838:
  8013                           
  8014                           ;RTC.c: 82: strcpy(month, "APR");
  8015  002042  0EBE               	movlw	low printRTC@month
  8016  002044  0100               	movlb	0	; () banked
  8017  002046  6F80               	movwf	strcpy@to& (0+255),b
  8018  002048  0E00               	movlw	high printRTC@month
  8019  00204A  0100               	movlb	0	; () banked
  8020  00204C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8021  00204E  0EEB               	movlw	low STR_11
  8022  002050  0100               	movlb	0	; () banked
  8023  002052  6F82               	movwf	strcpy@from& (0+255),b
  8024  002054  0EFF               	movlw	high STR_11
  8025  002056  0100               	movlb	0	; () banked
  8026  002058  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8027  00205A  EC58  F021         	call	_strcpy	;wreg free
  8028                           
  8029                           ;RTC.c: 83: break;
  8030  00205E  D0A7               	goto	l5860
  8031  002060                     l5840:
  8032                           
  8033                           ;RTC.c: 85: strcpy(month, "MAY");
  8034  002060  0EBE               	movlw	low printRTC@month
  8035  002062  0100               	movlb	0	; () banked
  8036  002064  6F80               	movwf	strcpy@to& (0+255),b
  8037  002066  0E00               	movlw	high printRTC@month
  8038  002068  0100               	movlb	0	; () banked
  8039  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8040  00206C  0EFB               	movlw	low STR_12
  8041  00206E  0100               	movlb	0	; () banked
  8042  002070  6F82               	movwf	strcpy@from& (0+255),b
  8043  002072  0EFF               	movlw	high STR_12
  8044  002074  0100               	movlb	0	; () banked
  8045  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8046  002078  EC58  F021         	call	_strcpy	;wreg free
  8047                           
  8048                           ;RTC.c: 86: break;
  8049  00207C  D098               	goto	l5860
  8050  00207E                     l5842:
  8051                           
  8052                           ;RTC.c: 88: strcpy(month, "JUN");
  8053  00207E  0EBE               	movlw	low printRTC@month
  8054  002080  0100               	movlb	0	; () banked
  8055  002082  6F80               	movwf	strcpy@to& (0+255),b
  8056  002084  0E00               	movlw	high printRTC@month
  8057  002086  0100               	movlb	0	; () banked
  8058  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8059  00208A  0EDF               	movlw	low STR_13
  8060  00208C  0100               	movlb	0	; () banked
  8061  00208E  6F82               	movwf	strcpy@from& (0+255),b
  8062  002090  0EFF               	movlw	high STR_13
  8063  002092  0100               	movlb	0	; () banked
  8064  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8065  002096  EC58  F021         	call	_strcpy	;wreg free
  8066                           
  8067                           ;RTC.c: 89: break;
  8068  00209A  D089               	goto	l5860
  8069  00209C                     l5844:
  8070                           
  8071                           ;RTC.c: 91: strcpy(month, "JUL");
  8072  00209C  0EBE               	movlw	low printRTC@month
  8073  00209E  0100               	movlb	0	; () banked
  8074  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  8075  0020A2  0E00               	movlw	high printRTC@month
  8076  0020A4  0100               	movlb	0	; () banked
  8077  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8078  0020A8  0ED7               	movlw	low STR_14
  8079  0020AA  0100               	movlb	0	; () banked
  8080  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  8081  0020AE  0EFF               	movlw	high STR_14
  8082  0020B0  0100               	movlb	0	; () banked
  8083  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8084  0020B4  EC58  F021         	call	_strcpy	;wreg free
  8085                           
  8086                           ;RTC.c: 92: break;
  8087  0020B8  D07A               	goto	l5860
  8088  0020BA                     l5846:
  8089                           
  8090                           ;RTC.c: 94: strcpy(month, "AUG");
  8091  0020BA  0EBE               	movlw	low printRTC@month
  8092  0020BC  0100               	movlb	0	; () banked
  8093  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  8094  0020C0  0E00               	movlw	high printRTC@month
  8095  0020C2  0100               	movlb	0	; () banked
  8096  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8097  0020C6  0ED3               	movlw	low STR_15
  8098  0020C8  0100               	movlb	0	; () banked
  8099  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  8100  0020CC  0EFF               	movlw	high STR_15
  8101  0020CE  0100               	movlb	0	; () banked
  8102  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8103  0020D2  EC58  F021         	call	_strcpy	;wreg free
  8104                           
  8105                           ;RTC.c: 95: break;
  8106  0020D6  D06B               	goto	l5860
  8107  0020D8                     l5848:
  8108                           
  8109                           ;RTC.c: 97: strcpy(month, "SEP");
  8110  0020D8  0EBE               	movlw	low printRTC@month
  8111  0020DA  0100               	movlb	0	; () banked
  8112  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  8113  0020DE  0E00               	movlw	high printRTC@month
  8114  0020E0  0100               	movlb	0	; () banked
  8115  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8116  0020E4  0EE3               	movlw	low STR_16
  8117  0020E6  0100               	movlb	0	; () banked
  8118  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  8119  0020EA  0EFF               	movlw	high STR_16
  8120  0020EC  0100               	movlb	0	; () banked
  8121  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8122  0020F0  EC58  F021         	call	_strcpy	;wreg free
  8123                           
  8124                           ;RTC.c: 98: break;
  8125  0020F4  D05C               	goto	l5860
  8126  0020F6                     l5850:
  8127                           
  8128                           ;RTC.c: 100: strcpy(month, "OCT");
  8129  0020F6  0EBE               	movlw	low printRTC@month
  8130  0020F8  0100               	movlb	0	; () banked
  8131  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  8132  0020FC  0E00               	movlw	high printRTC@month
  8133  0020FE  0100               	movlb	0	; () banked
  8134  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8135  002102  0EF3               	movlw	low STR_17
  8136  002104  0100               	movlb	0	; () banked
  8137  002106  6F82               	movwf	strcpy@from& (0+255),b
  8138  002108  0EFF               	movlw	high STR_17
  8139  00210A  0100               	movlb	0	; () banked
  8140  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8141  00210E  EC58  F021         	call	_strcpy	;wreg free
  8142                           
  8143                           ;RTC.c: 101: break;
  8144  002112  D04D               	goto	l5860
  8145  002114                     l5852:
  8146                           
  8147                           ;RTC.c: 103: strcpy(month, "NOV");
  8148  002114  0EBE               	movlw	low printRTC@month
  8149  002116  0100               	movlb	0	; () banked
  8150  002118  6F80               	movwf	strcpy@to& (0+255),b
  8151  00211A  0E00               	movlw	high printRTC@month
  8152  00211C  0100               	movlb	0	; () banked
  8153  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8154  002120  0EF7               	movlw	low STR_18
  8155  002122  0100               	movlb	0	; () banked
  8156  002124  6F82               	movwf	strcpy@from& (0+255),b
  8157  002126  0EFF               	movlw	high STR_18
  8158  002128  0100               	movlb	0	; () banked
  8159  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8160  00212C  EC58  F021         	call	_strcpy	;wreg free
  8161                           
  8162                           ;RTC.c: 104: break;
  8163  002130  D03E               	goto	l5860
  8164  002132                     l5854:
  8165                           
  8166                           ;RTC.c: 106: strcpy(month, "DEC");
  8167  002132  0EBE               	movlw	low printRTC@month
  8168  002134  0100               	movlb	0	; () banked
  8169  002136  6F80               	movwf	strcpy@to& (0+255),b
  8170  002138  0E00               	movlw	high printRTC@month
  8171  00213A  0100               	movlb	0	; () banked
  8172  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8173  00213E  0ECF               	movlw	low STR_19
  8174  002140  0100               	movlb	0	; () banked
  8175  002142  6F82               	movwf	strcpy@from& (0+255),b
  8176  002144  0EFF               	movlw	high STR_19
  8177  002146  0100               	movlb	0	; () banked
  8178  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8179  00214A  EC58  F021         	call	_strcpy	;wreg free
  8180                           
  8181                           ;RTC.c: 108: }
  8182                           
  8183                           ;RTC.c: 107: break;
  8184  00214E  D02F               	goto	l5860
  8185  002150                     l5858:
  8186  002150  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8187  002154  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8188                           
  8189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8190                           ; Switch size 1, requested type "space"
  8191                           ; Number of cases is 1, Range of values is 0 to 0
  8192                           ; switch strategies available:
  8193                           ; Name         Instructions Cycles
  8194                           ; simple_byte            4     3 (average)
  8195                           ;	Chosen strategy is simple_byte
  8196  002158  0100               	movlb	0	; () banked
  8197  00215A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8198  00215C  0A00               	xorlw	0	; case 0
  8199  00215E  A4D8               	btfss	status,2,c
  8200  002160  D026               	goto	l5860
  8201                           
  8202                           ; BSR set to: 0
  8203                           ; Switch size 1, requested type "space"
  8204                           ; Number of cases is 12, Range of values is 1 to 12
  8205                           ; switch strategies available:
  8206                           ; Name         Instructions Cycles
  8207                           ; simple_byte           37    19 (average)
  8208                           ;	Chosen strategy is simple_byte
  8209  002162  0100               	movlb	0	; () banked
  8210  002164  51AB               	movf	??_printRTC& (0+255),w,b
  8211  002166  0A01               	xorlw	1	; case 1
  8212  002168  B4D8               	btfsc	status,2,c
  8213  00216A  D73E               	goto	l5832
  8214  00216C  0A03               	xorlw	3	; case 2
  8215  00216E  B4D8               	btfsc	status,2,c
  8216  002170  D74A               	goto	l5834
  8217  002172  0A01               	xorlw	1	; case 3
  8218  002174  B4D8               	btfsc	status,2,c
  8219  002176  D756               	goto	l5836
  8220  002178  0A07               	xorlw	7	; case 4
  8221  00217A  B4D8               	btfsc	status,2,c
  8222  00217C  D762               	goto	l5838
  8223  00217E  0A01               	xorlw	1	; case 5
  8224  002180  B4D8               	btfsc	status,2,c
  8225  002182  D76E               	goto	l5840
  8226  002184  0A03               	xorlw	3	; case 6
  8227  002186  B4D8               	btfsc	status,2,c
  8228  002188  D77A               	goto	l5842
  8229  00218A  0A01               	xorlw	1	; case 7
  8230  00218C  B4D8               	btfsc	status,2,c
  8231  00218E  D786               	goto	l5844
  8232  002190  0A0F               	xorlw	15	; case 8
  8233  002192  B4D8               	btfsc	status,2,c
  8234  002194  D792               	goto	l5846
  8235  002196  0A01               	xorlw	1	; case 9
  8236  002198  B4D8               	btfsc	status,2,c
  8237  00219A  D79E               	goto	l5848
  8238  00219C  0A03               	xorlw	3	; case 10
  8239  00219E  B4D8               	btfsc	status,2,c
  8240  0021A0  D7AA               	goto	l5850
  8241  0021A2  0A01               	xorlw	1	; case 11
  8242  0021A4  B4D8               	btfsc	status,2,c
  8243  0021A6  D7B6               	goto	l5852
  8244  0021A8  0A07               	xorlw	7	; case 12
  8245  0021AA  B4D8               	btfsc	status,2,c
  8246  0021AC  D7C2               	goto	l5854
  8247  0021AE                     l5860:
  8248                           
  8249                           ;RTC.c: 109: lcdInst(0b10000000);;
  8250  0021AE  0E80               	movlw	128
  8251  0021B0  ECEC  F023         	call	_lcdInst
  8252                           
  8253                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8254  0021B4  0E40               	movlw	low STR_21
  8255  0021B6  0100               	movlb	0	; () banked
  8256  0021B8  6F8E               	movwf	printf@f& (0+255),b
  8257  0021BA  0EFB               	movlw	high STR_21
  8258  0021BC  0100               	movlb	0	; () banked
  8259  0021BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8260  0021C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8261  0021C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8262  0021C8  0EBE               	movlw	low printRTC@month
  8263  0021CA  0100               	movlb	0	; () banked
  8264  0021CC  6F92               	movwf	(?_printf+4)& (0+255),b
  8265  0021CE  0E00               	movlw	high printRTC@month
  8266  0021D0  0100               	movlb	0	; () banked
  8267  0021D2  6F93               	movwf	(?_printf+5)& (0+255),b
  8268  0021D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8269  0021D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8270  0021DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8271  0021E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8272  0021E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8273  0021E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8274  0021EC  ECB8  F008         	call	_printf	;wreg free
  8275  0021F0  0012               	return		;funcret
  8276  0021F2                     __end_of_printRTC:
  8277                           	opt stack 0
  8278                           tblptru	equ	0xFF8
  8279                           tblptrh	equ	0xFF7
  8280                           tblptrl	equ	0xFF6
  8281                           tablat	equ	0xFF5
  8282                           prodh	equ	0xFF4
  8283                           prodl	equ	0xFF3
  8284                           intcon	equ	0xFF2
  8285                           intcon2	equ	0xFF1
  8286                           intcon3	equ	0xFF0
  8287                           postinc0	equ	0xFEE
  8288                           wreg	equ	0xFE8
  8289                           postdec1	equ	0xFE5
  8290                           fsr1l	equ	0xFE1
  8291                           indf2	equ	0xFDF
  8292                           postinc2	equ	0xFDE
  8293                           postdec2	equ	0xFDD
  8294                           fsr2h	equ	0xFDA
  8295                           fsr2l	equ	0xFD9
  8296                           status	equ	0xFD8
  8297                           
  8298 ;; *************** function _strcpy *****************
  8299 ;; Defined at:
  8300 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8301 ;; Parameters:    Size  Location     Type
  8302 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8303 ;;		 -> printRTC@month(4), UI@month(4), 
  8304 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8305 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8306 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8307 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8308 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8309 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8310 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8311 ;;		 -> STR_8(4), 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8314 ;;		 -> printRTC@month(4), UI@month(4), 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  2    0[BANK0 ] PTR unsigned char 
  8317 ;; Registers used:
  8318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;Total ram usage:        6 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    7
  8331 ;; This function calls:
  8332 ;;		Nothing
  8333 ;; This function is called by:
  8334 ;;		_UI
  8335 ;;		_printRTC
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text25
  8340  0042B0                     __ptext25:
  8341                           	opt stack 0
  8342  0042B0                     _strcpy:
  8343                           	opt stack 20
  8344                           
  8345                           ;incstack = 0
  8346  0042B0  C080  F084         	movff	strcpy@to,strcpy@cp
  8347  0042B4  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8348  0042B8  D006               	goto	l5570
  8349  0042BA                     l5568:
  8350  0042BA  0100               	movlb	0	; () banked
  8351  0042BC  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8352  0042BE  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8353  0042C0  0100               	movlb	0	; () banked
  8354  0042C2  4B82               	infsnz	strcpy@from& (0+255),f,b
  8355  0042C4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8356  0042C6                     l5570:
  8357  0042C6  C082  FFF6         	movff	strcpy@from,tblptrl
  8358  0042CA  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8359  0042CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8360  0042CE  6AF8               	clrf	tblptru,c
  8361  0042D0                     	endif
  8362  0042D0                     	if	0	;tblptru may be non-zero
  8363  0042D0                     	endif
  8364  0042D0  C084  FFD9         	movff	strcpy@cp,fsr2l
  8365  0042D4  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8366  0042D8  0008               	tblrd		*
  8367  0042DA  CFF5 FFDF          	movff	tablat,indf2
  8368  0042DE  50DF               	movf	indf2,w,c
  8369  0042E0  B4D8               	btfsc	status,2,c
  8370  0042E2  0012               	return	
  8371  0042E4  D7EA               	goto	l5568
  8372  0042E6                     __end_of_strcpy:
  8373                           	opt stack 0
  8374                           tblptru	equ	0xFF8
  8375                           tblptrh	equ	0xFF7
  8376                           tblptrl	equ	0xFF6
  8377                           tablat	equ	0xFF5
  8378                           prodh	equ	0xFF4
  8379                           prodl	equ	0xFF3
  8380                           intcon	equ	0xFF2
  8381                           intcon2	equ	0xFF1
  8382                           intcon3	equ	0xFF0
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _getRTC *****************
  8395 ;; Defined at:
  8396 ;;		line 44 in file "RTC.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  i               2    3[BANK0 ] int 
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;Total ram usage:        2 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    9
  8417 ;; This function calls:
  8418 ;;		_I2C_Master_Read
  8419 ;;		_I2C_Master_Start
  8420 ;;		_I2C_Master_Stop
  8421 ;;		_I2C_Master_Write
  8422 ;; This function is called by:
  8423 ;;		_printRTC
  8424 ;;		_initSortTimer
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text26
  8429  003A4A                     __ptext26:
  8430                           	opt stack 0
  8431  003A4A                     _getRTC:
  8432                           	opt stack 18
  8433                           
  8434                           ;RTC.c: 48: I2C_Master_Start();
  8435                           
  8436                           ;incstack = 0
  8437  003A4A  EC12  F024         	call	_I2C_Master_Start	;wreg free
  8438                           
  8439                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8440  003A4E  0E00               	movlw	0
  8441  003A50  0100               	movlb	0	; () banked
  8442  003A52  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8443  003A54  0ED0               	movlw	208
  8444  003A56  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8445  003A58  EC00  F024         	call	_I2C_Master_Write	;wreg free
  8446                           
  8447                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8448  003A5C  0E00               	movlw	0
  8449  003A5E  0100               	movlb	0	; () banked
  8450  003A60  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8451  003A62  0E00               	movlw	0
  8452  003A64  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8453  003A66  EC00  F024         	call	_I2C_Master_Write	;wreg free
  8454                           
  8455                           ;RTC.c: 51: I2C_Master_Stop();
  8456  003A6A  EC0E  F024         	call	_I2C_Master_Stop	;wreg free
  8457                           
  8458                           ;RTC.c: 54: I2C_Master_Start();
  8459  003A6E  EC12  F024         	call	_I2C_Master_Start	;wreg free
  8460                           
  8461                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8462  003A72  0E00               	movlw	0
  8463  003A74  0100               	movlb	0	; () banked
  8464  003A76  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8465  003A78  0ED1               	movlw	209
  8466  003A7A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8467  003A7C  EC00  F024         	call	_I2C_Master_Write	;wreg free
  8468                           
  8469                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8470  003A80  0E00               	movlw	0
  8471  003A82  0100               	movlb	0	; () banked
  8472  003A84  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8473  003A86  0E00               	movlw	0
  8474  003A88  6F83               	movwf	getRTC@i& (0+255),b
  8475  003A8A                     l5576:
  8476                           
  8477                           ; BSR set to: 0
  8478  003A8A  0100               	movlb	0	; () banked
  8479  003A8C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8480  003A8E  D008               	goto	l5580
  8481  003A90  0100               	movlb	0	; () banked
  8482  003A92  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8483  003A94  E115               	bnz	l5586
  8484  003A96  0E06               	movlw	6
  8485  003A98  0100               	movlb	0	; () banked
  8486  003A9A  5D83               	subwf	getRTC@i& (0+255),w,b
  8487  003A9C  B0D8               	btfsc	status,0,c
  8488  003A9E  D010               	goto	l5586
  8489  003AA0                     l5580:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8493  003AA0  0E24               	movlw	low _time
  8494  003AA2  0100               	movlb	0	; () banked
  8495  003AA4  2583               	addwf	getRTC@i& (0+255),w,b
  8496  003AA6  6ED9               	movwf	fsr2l,c
  8497  003AA8  0E01               	movlw	high _time
  8498  003AAA  0100               	movlb	0	; () banked
  8499  003AAC  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8500  003AAE  6EDA               	movwf	fsr2h,c
  8501  003AB0  0E01               	movlw	1
  8502  003AB2  ECAF  F022         	call	_I2C_Master_Read
  8503  003AB6  6EDF               	movwf	indf2,c
  8504  003AB8  0100               	movlb	0	; () banked
  8505  003ABA  4B83               	infsnz	getRTC@i& (0+255),f,b
  8506  003ABC  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8507  003ABE  D7E5               	goto	l5576
  8508  003AC0                     l5586:
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;RTC.c: 58: }
  8512                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8513  003AC0  0E00               	movlw	0
  8514  003AC2  ECAF  F022         	call	_I2C_Master_Read
  8515  003AC6  0101               	movlb	1	; () banked
  8516  003AC8  6F2A               	movwf	(_time+6)& (0+255),b
  8517                           
  8518                           ;RTC.c: 60: I2C_Master_Stop();
  8519  003ACA  EC0E  F024         	call	_I2C_Master_Stop	;wreg free
  8520  003ACE  0012               	return		;funcret
  8521  003AD0                     __end_of_getRTC:
  8522                           	opt stack 0
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon2	equ	0xFF1
  8531                           intcon3	equ	0xFF0
  8532                           postinc0	equ	0xFEE
  8533                           wreg	equ	0xFE8
  8534                           postdec1	equ	0xFE5
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function _I2C_Master_Write *****************
  8544 ;; Defined at:
  8545 ;;		line 49 in file "I2C.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  d               2    1[BANK0 ] unsigned int 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;		None
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  1    wreg      void 
  8552 ;; Registers used:
  8553 ;;		wreg, status,2, status,0, cstack
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8559 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;Total ram usage:        2 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    8
  8566 ;; This function calls:
  8567 ;;		_I2C_Master_Wait
  8568 ;; This function is called by:
  8569 ;;		_loadRTC
  8570 ;;		_getRTC
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text27
  8575  004800                     __ptext27:
  8576                           	opt stack 0
  8577  004800                     _I2C_Master_Write:
  8578                           	opt stack 18
  8579                           
  8580                           ;I2C.c: 51: I2C_Master_Wait();
  8581                           
  8582                           ;incstack = 0
  8583  004800  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8584                           
  8585                           ;I2C.c: 52: SSPBUF = d;
  8586  004804  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8587  004808  0012               	return		;funcret
  8588  00480A                     __end_of_I2C_Master_Write:
  8589                           	opt stack 0
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           intcon2	equ	0xFF1
  8598                           intcon3	equ	0xFF0
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           postdec1	equ	0xFE5
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function _I2C_Master_Stop *****************
  8611 ;; Defined at:
  8612 ;;		line 43 in file "I2C.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;		None
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;		None
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg, status,2, status,0, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;Total ram usage:        0 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    8
  8633 ;; This function calls:
  8634 ;;		_I2C_Master_Wait
  8635 ;; This function is called by:
  8636 ;;		_loadRTC
  8637 ;;		_getRTC
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text28
  8642  00481C                     __ptext28:
  8643                           	opt stack 0
  8644  00481C                     _I2C_Master_Stop:
  8645                           	opt stack 18
  8646                           
  8647                           ;I2C.c: 45: I2C_Master_Wait();
  8648                           
  8649                           ;incstack = 0
  8650  00481C  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8651                           
  8652                           ;I2C.c: 46: PEN = 1;
  8653  004820  84C5               	bsf	4037,2,c	;volatile
  8654  004822  0012               	return		;funcret
  8655  004824                     __end_of_I2C_Master_Stop:
  8656                           	opt stack 0
  8657                           tblptru	equ	0xFF8
  8658                           tblptrh	equ	0xFF7
  8659                           tblptrl	equ	0xFF6
  8660                           tablat	equ	0xFF5
  8661                           prodh	equ	0xFF4
  8662                           prodl	equ	0xFF3
  8663                           intcon	equ	0xFF2
  8664                           intcon2	equ	0xFF1
  8665                           intcon3	equ	0xFF0
  8666                           postinc0	equ	0xFEE
  8667                           wreg	equ	0xFE8
  8668                           postdec1	equ	0xFE5
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _I2C_Master_Start *****************
  8678 ;; Defined at:
  8679 ;;		line 31 in file "I2C.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;		None
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:        0 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    8
  8700 ;; This function calls:
  8701 ;;		_I2C_Master_Wait
  8702 ;; This function is called by:
  8703 ;;		_loadRTC
  8704 ;;		_getRTC
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text29
  8709  004824                     __ptext29:
  8710                           	opt stack 0
  8711  004824                     _I2C_Master_Start:
  8712                           	opt stack 18
  8713                           
  8714                           ;I2C.c: 33: I2C_Master_Wait();
  8715                           
  8716                           ;incstack = 0
  8717  004824  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8718                           
  8719                           ;I2C.c: 34: SEN = 1;
  8720  004828  80C5               	bsf	4037,0,c	;volatile
  8721  00482A  0012               	return		;funcret
  8722  00482C                     __end_of_I2C_Master_Start:
  8723                           	opt stack 0
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           intcon2	equ	0xFF1
  8732                           intcon3	equ	0xFF0
  8733                           postinc0	equ	0xFEE
  8734                           wreg	equ	0xFE8
  8735                           postdec1	equ	0xFE5
  8736                           fsr1l	equ	0xFE1
  8737                           indf2	equ	0xFDF
  8738                           postinc2	equ	0xFDE
  8739                           postdec2	equ	0xFDD
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8
  8743                           
  8744 ;; *************** function _I2C_Master_Read *****************
  8745 ;; Defined at:
  8746 ;;		line 55 in file "I2C.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  a               1    wreg     unsigned char 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  a               1    1[BANK0 ] unsigned char 
  8751 ;;  temp            1    2[BANK0 ] unsigned char 
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      unsigned char 
  8754 ;; Registers used:
  8755 ;;		wreg, status,2, status,0, cstack
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;Total ram usage:        2 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    8
  8768 ;; This function calls:
  8769 ;;		_I2C_Master_Wait
  8770 ;; This function is called by:
  8771 ;;		_getRTC
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text30
  8776  00455E                     __ptext30:
  8777                           	opt stack 0
  8778  00455E                     _I2C_Master_Read:
  8779                           	opt stack 18
  8780                           
  8781                           ;incstack = 0
  8782                           ;I2C_Master_Read@a stored from wreg
  8783  00455E  0100               	movlb	0	; () banked
  8784  004560  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8785                           
  8786                           ;I2C.c: 57: unsigned char temp;
  8787                           ;I2C.c: 58: I2C_Master_Wait();
  8788  004562  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8789                           
  8790                           ;I2C.c: 59: RCEN = 1;
  8791  004566  86C5               	bsf	4037,3,c	;volatile
  8792                           
  8793                           ;I2C.c: 60: I2C_Master_Wait();
  8794  004568  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8795                           
  8796                           ;I2C.c: 61: temp = SSPBUF;
  8797  00456C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8798                           
  8799                           ;I2C.c: 62: I2C_Master_Wait();
  8800  004570  ECD1  F023         	call	_I2C_Master_Wait	;wreg free
  8801                           
  8802                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8803  004574  0100               	movlb	0	; () banked
  8804  004576  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8805  004578  0100               	movlb	0	; () banked
  8806  00457A  A4D8               	btfss	status,2,c
  8807  00457C  D002               	goto	u3600
  8808  00457E  8AC5               	bsf	4037,5,c	;volatile
  8809  004580  D001               	goto	l5264
  8810  004582                     u3600:
  8811  004582  9AC5               	bcf	4037,5,c	;volatile
  8812  004584                     l5264:
  8813                           
  8814                           ;I2C.c: 64: ACKEN = 1;
  8815  004584  88C5               	bsf	4037,4,c	;volatile
  8816                           
  8817                           ;I2C.c: 65: return temp;
  8818  004586  0100               	movlb	0	; () banked
  8819  004588  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8820  00458A  0012               	return	
  8821  00458C                     __end_of_I2C_Master_Read:
  8822                           	opt stack 0
  8823                           tblptru	equ	0xFF8
  8824                           tblptrh	equ	0xFF7
  8825                           tblptrl	equ	0xFF6
  8826                           tablat	equ	0xFF5
  8827                           prodh	equ	0xFF4
  8828                           prodl	equ	0xFF3
  8829                           intcon	equ	0xFF2
  8830                           intcon2	equ	0xFF1
  8831                           intcon3	equ	0xFF0
  8832                           postinc0	equ	0xFEE
  8833                           wreg	equ	0xFE8
  8834                           postdec1	equ	0xFE5
  8835                           fsr1l	equ	0xFE1
  8836                           indf2	equ	0xFDF
  8837                           postinc2	equ	0xFDE
  8838                           postdec2	equ	0xFDD
  8839                           fsr2h	equ	0xFDA
  8840                           fsr2l	equ	0xFD9
  8841                           status	equ	0xFD8
  8842                           
  8843 ;; *************** function _I2C_Master_Wait *****************
  8844 ;; Defined at:
  8845 ;;		line 26 in file "I2C.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      void 
  8852 ;; Registers used:
  8853 ;;		wreg, status,2, status,0
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;Total ram usage:        1 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    7
  8866 ;; This function calls:
  8867 ;;		Nothing
  8868 ;; This function is called by:
  8869 ;;		_I2C_Master_Start
  8870 ;;		_I2C_Master_Stop
  8871 ;;		_I2C_Master_Write
  8872 ;;		_I2C_Master_Read
  8873 ;;		_I2C_Master_RepeatedStart
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text31
  8878  0047A2                     __ptext31:
  8879                           	opt stack 0
  8880  0047A2                     _I2C_Master_Wait:
  8881                           	opt stack 18
  8882  0047A2                     l66:
  8883  0047A2  B4C7               	btfsc	4039,2,c	;volatile
  8884  0047A4  D7FE               	goto	l66
  8885  0047A6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8886  0047AA  0E1F               	movlw	31
  8887  0047AC  0100               	movlb	0	; () banked
  8888  0047AE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8889  0047B0  B4D8               	btfsc	status,2,c
  8890  0047B2  0012               	return	
  8891  0047B4  D7F6               	goto	l66
  8892  0047B6                     __end_of_I2C_Master_Wait:
  8893                           	opt stack 0
  8894                           tblptru	equ	0xFF8
  8895                           tblptrh	equ	0xFF7
  8896                           tblptrl	equ	0xFF6
  8897                           tablat	equ	0xFF5
  8898                           prodh	equ	0xFF4
  8899                           prodl	equ	0xFF3
  8900                           intcon	equ	0xFF2
  8901                           intcon2	equ	0xFF1
  8902                           intcon3	equ	0xFF0
  8903                           postinc0	equ	0xFEE
  8904                           wreg	equ	0xFE8
  8905                           postdec1	equ	0xFE5
  8906                           fsr1l	equ	0xFE1
  8907                           indf2	equ	0xFDF
  8908                           postinc2	equ	0xFDE
  8909                           postdec2	equ	0xFDD
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function _change_state_to_menu_22 *****************
  8915 ;; Defined at:
  8916 ;;		line 498 in file "UI.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;		None
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;		None
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        0 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:   10
  8937 ;; This function calls:
  8938 ;;		_lcdInst
  8939 ;;		_printf
  8940 ;; This function is called by:
  8941 ;;		_UI
  8942 ;; This function uses a non-reentrant model
  8943 ;;
  8944                           
  8945                           	psect	text32
  8946  004240                     __ptext32:
  8947                           	opt stack 0
  8948  004240                     _change_state_to_menu_22:
  8949                           	opt stack 19
  8950                           
  8951                           ;UI.c: 499: cur_state = 22;
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;incstack = 0
  8955  004240  0E00               	movlw	0
  8956  004242  0100               	movlb	0	; () banked
  8957  004244  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8958  004246  0E16               	movlw	22
  8959  004248  6FE0               	movwf	_cur_state& (0+255),b
  8960                           
  8961                           ; BSR set to: 0
  8962                           ;UI.c: 501: lcdInst(0b10000000);;
  8963  00424A  0E80               	movlw	128
  8964  00424C  ECEC  F023         	call	_lcdInst
  8965                           
  8966                           ;UI.c: 502: printf("2. SORT        <");
  8967  004250  0EC4               	movlw	low STR_34
  8968  004252  0100               	movlb	0	; () banked
  8969  004254  6F8E               	movwf	printf@f& (0+255),b
  8970  004256  0EFD               	movlw	high STR_34
  8971  004258  0100               	movlb	0	; () banked
  8972  00425A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8973  00425C  ECB8  F008         	call	_printf	;wreg free
  8974                           
  8975                           ;UI.c: 503: lcdInst(0b11000000);;
  8976  004260  0EC0               	movlw	192
  8977  004262  ECEC  F023         	call	_lcdInst
  8978                           
  8979                           ;UI.c: 504: printf("3. LOGS         ");
  8980  004266  0E09               	movlw	low STR_36
  8981  004268  0100               	movlb	0	; () banked
  8982  00426A  6F8E               	movwf	printf@f& (0+255),b
  8983  00426C  0EFD               	movlw	high STR_36
  8984  00426E  0100               	movlb	0	; () banked
  8985  004270  6F8F               	movwf	(printf@f+1)& (0+255),b
  8986  004272  ECB8  F008         	call	_printf	;wreg free
  8987  004276  0012               	return		;funcret
  8988  004278                     __end_of_change_state_to_menu_22:
  8989                           	opt stack 0
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           intcon	equ	0xFF2
  8997                           intcon2	equ	0xFF1
  8998                           intcon3	equ	0xFF0
  8999                           postinc0	equ	0xFEE
  9000                           wreg	equ	0xFE8
  9001                           postdec1	equ	0xFE5
  9002                           fsr1l	equ	0xFE1
  9003                           indf2	equ	0xFDF
  9004                           postinc2	equ	0xFDE
  9005                           postdec2	equ	0xFDD
  9006                           fsr2h	equ	0xFDA
  9007                           fsr2l	equ	0xFD9
  9008                           status	equ	0xFD8
  9009                           
  9010 ;; *************** function _change_state_to_menu_12 *****************
  9011 ;; Defined at:
  9012 ;;		line 490 in file "UI.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;Total ram usage:        0 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:   10
  9033 ;; This function calls:
  9034 ;;		_lcdInst
  9035 ;;		_printf
  9036 ;; This function is called by:
  9037 ;;		_UI
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text33
  9042  004278                     __ptext33:
  9043                           	opt stack 0
  9044  004278                     _change_state_to_menu_12:
  9045                           	opt stack 19
  9046                           
  9047                           ;UI.c: 491: cur_state = 12;
  9048                           
  9049                           ;incstack = 0
  9050  004278  0E00               	movlw	0
  9051  00427A  0100               	movlb	0	; () banked
  9052  00427C  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9053  00427E  0E0C               	movlw	12
  9054  004280  6FE0               	movwf	_cur_state& (0+255),b
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;UI.c: 493: lcdInst(0b10000000);;
  9058  004282  0E80               	movlw	128
  9059  004284  ECEC  F023         	call	_lcdInst
  9060                           
  9061                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9062  004288  0E2B               	movlw	low STR_33
  9063  00428A  0100               	movlb	0	; () banked
  9064  00428C  6F8E               	movwf	printf@f& (0+255),b
  9065  00428E  0EFD               	movlw	high STR_33
  9066  004290  0100               	movlb	0	; () banked
  9067  004292  6F8F               	movwf	(printf@f+1)& (0+255),b
  9068  004294  ECB8  F008         	call	_printf	;wreg free
  9069                           
  9070                           ;UI.c: 495: lcdInst(0b11000000);;
  9071  004298  0EC0               	movlw	192
  9072  00429A  ECEC  F023         	call	_lcdInst
  9073                           
  9074                           ;UI.c: 496: printf("2. SORT        <");
  9075  00429E  0EC4               	movlw	low STR_34
  9076  0042A0  0100               	movlb	0	; () banked
  9077  0042A2  6F8E               	movwf	printf@f& (0+255),b
  9078  0042A4  0EFD               	movlw	high STR_34
  9079  0042A6  0100               	movlb	0	; () banked
  9080  0042A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9081  0042AA  ECB8  F008         	call	_printf	;wreg free
  9082  0042AE  0012               	return		;funcret
  9083  0042B0                     __end_of_change_state_to_menu_12:
  9084                           	opt stack 0
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           intcon2	equ	0xFF1
  9093                           intcon3	equ	0xFF0
  9094                           postinc0	equ	0xFEE
  9095                           wreg	equ	0xFE8
  9096                           postdec1	equ	0xFE5
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           postdec2	equ	0xFDD
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function ___awmod *****************
  9106 ;; Defined at:
  9107 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;  dividend        2    0[BANK0 ] int 
  9110 ;;  divisor         2    2[BANK0 ] int 
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  sign            1    5[BANK0 ] unsigned char 
  9113 ;;  counter         1    4[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  2    0[BANK0 ] int 
  9116 ;; Registers used:
  9117 ;;		wreg, status,2, status,0
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9123 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;Total ram usage:        6 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    7
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		_UI
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text34
  9138  003894                     __ptext34:
  9139                           	opt stack 0
  9140  003894                     ___awmod:
  9141                           	opt stack 22
  9142                           
  9143                           ;incstack = 0
  9144  003894  0E00               	movlw	0
  9145  003896  0100               	movlb	0	; () banked
  9146  003898  6F85               	movwf	___awmod@sign& (0+255),b
  9147                           
  9148                           ; BSR set to: 0
  9149  00389A  0100               	movlb	0	; () banked
  9150  00389C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9151  00389E  D008               	goto	l7322
  9152                           
  9153                           ; BSR set to: 0
  9154  0038A0  0100               	movlb	0	; () banked
  9155  0038A2  6D80               	negf	___awmod@dividend& (0+255),b
  9156  0038A4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9157  0038A6  B0D8               	btfsc	status,0,c
  9158  0038A8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9159                           
  9160                           ; BSR set to: 0
  9161  0038AA  0E01               	movlw	1
  9162  0038AC  0100               	movlb	0	; () banked
  9163  0038AE  6F85               	movwf	___awmod@sign& (0+255),b
  9164  0038B0                     l7322:
  9165                           
  9166                           ; BSR set to: 0
  9167  0038B0  0100               	movlb	0	; () banked
  9168  0038B2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9169  0038B4  D005               	goto	l7326
  9170                           
  9171                           ; BSR set to: 0
  9172  0038B6  0100               	movlb	0	; () banked
  9173  0038B8  6D82               	negf	___awmod@divisor& (0+255),b
  9174  0038BA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9175  0038BC  B0D8               	btfsc	status,0,c
  9176  0038BE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9177  0038C0                     l7326:
  9178                           
  9179                           ; BSR set to: 0
  9180  0038C0  0100               	movlb	0	; () banked
  9181  0038C2  5182               	movf	___awmod@divisor& (0+255),w,b
  9182  0038C4  0100               	movlb	0	; () banked
  9183  0038C6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9184  0038C8  B4D8               	btfsc	status,2,c
  9185  0038CA  D026               	goto	l7342
  9186                           
  9187                           ; BSR set to: 0
  9188  0038CC  0E01               	movlw	1
  9189  0038CE  0100               	movlb	0	; () banked
  9190  0038D0  6F84               	movwf	___awmod@counter& (0+255),b
  9191  0038D2  D006               	goto	l7332
  9192  0038D4                     l7330:
  9193                           
  9194                           ; BSR set to: 0
  9195  0038D4  0100               	movlb	0	; () banked
  9196  0038D6  90D8               	bcf	status,0,c
  9197  0038D8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9198  0038DA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9199  0038DC  0100               	movlb	0	; () banked
  9200  0038DE  2B84               	incf	___awmod@counter& (0+255),f,b
  9201  0038E0                     l7332:
  9202                           
  9203                           ; BSR set to: 0
  9204  0038E0  0100               	movlb	0	; () banked
  9205  0038E2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9206  0038E4  D7F7               	goto	l7330
  9207  0038E6                     l7334:
  9208                           
  9209                           ; BSR set to: 0
  9210  0038E6  0100               	movlb	0	; () banked
  9211  0038E8  5182               	movf	___awmod@divisor& (0+255),w,b
  9212  0038EA  0100               	movlb	0	; () banked
  9213  0038EC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9214  0038EE  0100               	movlb	0	; () banked
  9215  0038F0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9216  0038F2  0100               	movlb	0	; () banked
  9217  0038F4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9218  0038F6  A0D8               	btfss	status,0,c
  9219  0038F8  D008               	goto	l7338
  9220                           
  9221                           ; BSR set to: 0
  9222  0038FA  0100               	movlb	0	; () banked
  9223  0038FC  5182               	movf	___awmod@divisor& (0+255),w,b
  9224  0038FE  0100               	movlb	0	; () banked
  9225  003900  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9226  003902  0100               	movlb	0	; () banked
  9227  003904  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9228  003906  0100               	movlb	0	; () banked
  9229  003908  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9230  00390A                     l7338:
  9231                           
  9232                           ; BSR set to: 0
  9233  00390A  0100               	movlb	0	; () banked
  9234  00390C  90D8               	bcf	status,0,c
  9235  00390E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9236  003910  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9237                           
  9238                           ; BSR set to: 0
  9239  003912  0100               	movlb	0	; () banked
  9240  003914  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9241  003916  D7E7               	goto	l7334
  9242  003918                     l7342:
  9243                           
  9244                           ; BSR set to: 0
  9245  003918  0100               	movlb	0	; () banked
  9246  00391A  5185               	movf	___awmod@sign& (0+255),w,b
  9247  00391C  0100               	movlb	0	; () banked
  9248  00391E  B4D8               	btfsc	status,2,c
  9249  003920  D005               	goto	l7346
  9250                           
  9251                           ; BSR set to: 0
  9252  003922  0100               	movlb	0	; () banked
  9253  003924  6D80               	negf	___awmod@dividend& (0+255),b
  9254  003926  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9255  003928  B0D8               	btfsc	status,0,c
  9256  00392A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9257  00392C                     l7346:
  9258                           
  9259                           ; BSR set to: 0
  9260  00392C  C080  F080         	movff	___awmod@dividend,?___awmod
  9261  003930  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9262  003934  0012               	return	
  9263  003936                     __end_of___awmod:
  9264                           	opt stack 0
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           intcon2	equ	0xFF1
  9273                           intcon3	equ	0xFF0
  9274                           postinc0	equ	0xFEE
  9275                           wreg	equ	0xFE8
  9276                           postdec1	equ	0xFE5
  9277                           fsr1l	equ	0xFE1
  9278                           indf2	equ	0xFDF
  9279                           postinc2	equ	0xFDE
  9280                           postdec2	equ	0xFDD
  9281                           fsr2h	equ	0xFDA
  9282                           fsr2l	equ	0xFD9
  9283                           status	equ	0xFD8
  9284                           
  9285 ;; *************** function ___awdiv *****************
  9286 ;; Defined at:
  9287 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  dividend        2    6[BANK0 ] int 
  9290 ;;  divisor         2    8[BANK0 ] int 
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  quotient        2   12[BANK0 ] int 
  9293 ;;  sign            1   11[BANK0 ] unsigned char 
  9294 ;;  counter         1   10[BANK0 ] unsigned char 
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  2    6[BANK0 ] int 
  9297 ;; Registers used:
  9298 ;;		wreg, status,2, status,0
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;Total ram usage:        8 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    7
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		_UI
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           	psect	text35
  9319  003670                     __ptext35:
  9320                           	opt stack 0
  9321  003670                     ___awdiv:
  9322                           	opt stack 22
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;incstack = 0
  9326  003670  0E00               	movlw	0
  9327  003672  0100               	movlb	0	; () banked
  9328  003674  6F8B               	movwf	___awdiv@sign& (0+255),b
  9329                           
  9330                           ; BSR set to: 0
  9331  003676  0100               	movlb	0	; () banked
  9332  003678  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9333  00367A  D008               	goto	l7278
  9334                           
  9335                           ; BSR set to: 0
  9336  00367C  0100               	movlb	0	; () banked
  9337  00367E  6D88               	negf	___awdiv@divisor& (0+255),b
  9338  003680  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9339  003682  B0D8               	btfsc	status,0,c
  9340  003684  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9341                           
  9342                           ; BSR set to: 0
  9343  003686  0E01               	movlw	1
  9344  003688  0100               	movlb	0	; () banked
  9345  00368A  6F8B               	movwf	___awdiv@sign& (0+255),b
  9346  00368C                     l7278:
  9347                           
  9348                           ; BSR set to: 0
  9349  00368C  0100               	movlb	0	; () banked
  9350  00368E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9351  003690  D008               	goto	l7284
  9352                           
  9353                           ; BSR set to: 0
  9354  003692  0100               	movlb	0	; () banked
  9355  003694  6D86               	negf	___awdiv@dividend& (0+255),b
  9356  003696  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9357  003698  B0D8               	btfsc	status,0,c
  9358  00369A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9359                           
  9360                           ; BSR set to: 0
  9361  00369C  0E01               	movlw	1
  9362  00369E  0100               	movlb	0	; () banked
  9363  0036A0  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9364  0036A2                     l7284:
  9365                           
  9366                           ; BSR set to: 0
  9367  0036A2  0E00               	movlw	0
  9368  0036A4  0100               	movlb	0	; () banked
  9369  0036A6  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9370  0036A8  0E00               	movlw	0
  9371  0036AA  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9372                           
  9373                           ; BSR set to: 0
  9374  0036AC  0100               	movlb	0	; () banked
  9375  0036AE  5188               	movf	___awdiv@divisor& (0+255),w,b
  9376  0036B0  0100               	movlb	0	; () banked
  9377  0036B2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9378  0036B4  B4D8               	btfsc	status,2,c
  9379  0036B6  D02C               	goto	l7306
  9380                           
  9381                           ; BSR set to: 0
  9382  0036B8  0E01               	movlw	1
  9383  0036BA  0100               	movlb	0	; () banked
  9384  0036BC  6F8A               	movwf	___awdiv@counter& (0+255),b
  9385  0036BE  D006               	goto	l7292
  9386  0036C0                     l7290:
  9387                           
  9388                           ; BSR set to: 0
  9389  0036C0  0100               	movlb	0	; () banked
  9390  0036C2  90D8               	bcf	status,0,c
  9391  0036C4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9392  0036C6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9393  0036C8  0100               	movlb	0	; () banked
  9394  0036CA  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9395  0036CC                     l7292:
  9396                           
  9397                           ; BSR set to: 0
  9398  0036CC  0100               	movlb	0	; () banked
  9399  0036CE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9400  0036D0  D7F7               	goto	l7290
  9401  0036D2                     l7294:
  9402                           
  9403                           ; BSR set to: 0
  9404  0036D2  0100               	movlb	0	; () banked
  9405  0036D4  90D8               	bcf	status,0,c
  9406  0036D6  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9407  0036D8  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9408                           
  9409                           ; BSR set to: 0
  9410  0036DA  0100               	movlb	0	; () banked
  9411  0036DC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9412  0036DE  0100               	movlb	0	; () banked
  9413  0036E0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9414  0036E2  0100               	movlb	0	; () banked
  9415  0036E4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9416  0036E6  0100               	movlb	0	; () banked
  9417  0036E8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9418  0036EA  A0D8               	btfss	status,0,c
  9419  0036EC  D00A               	goto	l7302
  9420                           
  9421                           ; BSR set to: 0
  9422  0036EE  0100               	movlb	0	; () banked
  9423  0036F0  5188               	movf	___awdiv@divisor& (0+255),w,b
  9424  0036F2  0100               	movlb	0	; () banked
  9425  0036F4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9426  0036F6  0100               	movlb	0	; () banked
  9427  0036F8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9428  0036FA  0100               	movlb	0	; () banked
  9429  0036FC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9430                           
  9431                           ; BSR set to: 0
  9432  0036FE  0100               	movlb	0	; () banked
  9433  003700  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9434  003702                     l7302:
  9435                           
  9436                           ; BSR set to: 0
  9437  003702  0100               	movlb	0	; () banked
  9438  003704  90D8               	bcf	status,0,c
  9439  003706  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9440  003708  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9441                           
  9442                           ; BSR set to: 0
  9443  00370A  0100               	movlb	0	; () banked
  9444  00370C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9445  00370E  D7E1               	goto	l7294
  9446  003710                     l7306:
  9447                           
  9448                           ; BSR set to: 0
  9449  003710  0100               	movlb	0	; () banked
  9450  003712  518B               	movf	___awdiv@sign& (0+255),w,b
  9451  003714  0100               	movlb	0	; () banked
  9452  003716  B4D8               	btfsc	status,2,c
  9453  003718  D005               	goto	l7310
  9454                           
  9455                           ; BSR set to: 0
  9456  00371A  0100               	movlb	0	; () banked
  9457  00371C  6D8C               	negf	___awdiv@quotient& (0+255),b
  9458  00371E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9459  003720  B0D8               	btfsc	status,0,c
  9460  003722  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9461  003724                     l7310:
  9462                           
  9463                           ; BSR set to: 0
  9464  003724  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9465  003728  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9466  00372C  0012               	return	
  9467  00372E                     __end_of___awdiv:
  9468                           	opt stack 0
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           intcon3	equ	0xFF0
  9478                           postinc0	equ	0xFEE
  9479                           wreg	equ	0xFE8
  9480                           postdec1	equ	0xFE5
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           fsr2h	equ	0xFDA
  9486                           fsr2l	equ	0xFD9
  9487                           status	equ	0xFD8
  9488                           
  9489 ;; *************** function _Test *****************
  9490 ;; Defined at:
  9491 ;;		line 28 in file "Test.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;		None
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;		None
  9496 ;; Return value:  Size  Location     Type
  9497 ;;                  1    wreg      void 
  9498 ;; Registers used:
  9499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;Total ram usage:        2 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; Hardware stack levels required when called:   11
  9512 ;; This function calls:
  9513 ;;		_BothServos
  9514 ;;		_EEPROMTest
  9515 ;;		_PortTestA5
  9516 ;;		_PortTests
  9517 ;;		_PusherTest
  9518 ;;		_ToggleTestA5
  9519 ;;		_actuatorTest
  9520 ;;		_algorithmTest
  9521 ;;		_lcdInst
  9522 ;;		_printf
  9523 ;;		_sensorTest
  9524 ;; This function is called by:
  9525 ;;		_main
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           	psect	text36
  9530  0032EA                     __ptext36:
  9531                           	opt stack 0
  9532  0032EA                     _Test:
  9533                           	opt stack 19
  9534  0032EA                     
  9535                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9536  0032EA  0E01               	movlw	1
  9537  0032EC  ECEC  F023         	call	_lcdInst
  9538  0032F0  0E68               	movlw	104
  9539  0032F2  0100               	movlb	0	; () banked
  9540  0032F4  6FC6               	movwf	??_Test& (0+255),b
  9541  0032F6  0EE4               	movlw	228
  9542  0032F8                     u7527:
  9543  0032F8  2EE8               	decfsz	wreg,f,c
  9544  0032FA  D7FE               	bra	u7527
  9545  0032FC  2FC6               	decfsz	??_Test& (0+255),f,b
  9546  0032FE  D7FC               	bra	u7527
  9547  003300  F000               	nop	
  9548  003302  0E80               	movlw	128
  9549  003304  ECEC  F023         	call	_lcdInst
  9550                           
  9551                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9552  003308  0E70               	movlw	low STR_68
  9553  00330A  0100               	movlb	0	; () banked
  9554  00330C  6F8E               	movwf	printf@f& (0+255),b
  9555  00330E  0EFC               	movlw	high STR_68
  9556  003310  0100               	movlb	0	; () banked
  9557  003312  6F8F               	movwf	(printf@f+1)& (0+255),b
  9558  003314  ECB8  F008         	call	_printf	;wreg free
  9559                           
  9560                           ;Test.c: 33: lcdInst(0b11000000);;
  9561  003318  0EC0               	movlw	192
  9562  00331A  ECEC  F023         	call	_lcdInst
  9563                           
  9564                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9565  00331E  0EA3               	movlw	low STR_69
  9566  003320  0100               	movlb	0	; () banked
  9567  003322  6F8E               	movwf	printf@f& (0+255),b
  9568  003324  0EFC               	movlw	high STR_69
  9569  003326  0100               	movlb	0	; () banked
  9570  003328  6F8F               	movwf	(printf@f+1)& (0+255),b
  9571  00332A  ECB8  F008         	call	_printf	;wreg free
  9572                           
  9573                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9574  00332E  0E05               	movlw	5
  9575  003330  0100               	movlb	0	; () banked
  9576  003332  6FC7               	movwf	(??_Test+1)& (0+255),b
  9577  003334  0E0F               	movlw	15
  9578  003336  0100               	movlb	0	; () banked
  9579  003338  6FC6               	movwf	??_Test& (0+255),b
  9580  00333A  0EF1               	movlw	241
  9581  00333C                     u7537:
  9582  00333C  2EE8               	decfsz	wreg,f,c
  9583  00333E  D7FE               	bra	u7537
  9584  003340  2FC6               	decfsz	??_Test& (0+255),f,b
  9585  003342  D7FC               	bra	u7537
  9586  003344  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9587  003346  D7FA               	bra	u7537
  9588  003348                     l1042:
  9589  003348  A281               	btfss	3969,1,c	;volatile
  9590  00334A  D7FE               	goto	l1042
  9591                           
  9592                           ;Test.c: 37: var = PORTB >> 4;
  9593  00334C  CF81 F0C6          	movff	3969,??_Test	;volatile
  9594  003350  0100               	movlb	0	; () banked
  9595  003352  3BC6               	swapf	??_Test& (0+255),f,b
  9596  003354  0E0F               	movlw	15
  9597  003356  17C6               	andwf	??_Test& (0+255),f,b
  9598  003358  0100               	movlb	0	; () banked
  9599  00335A  51C6               	movf	??_Test& (0+255),w,b
  9600  00335C  0100               	movlb	0	; () banked
  9601  00335E  6FFA               	movwf	_var& (0+255),b
  9602  003360  6BFB               	clrf	(_var+1)& (0+255),b
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;Test.c: 38: var++;
  9606  003362  0100               	movlb	0	; () banked
  9607  003364  4BFA               	infsnz	_var& (0+255),f,b
  9608  003366  2BFB               	incf	(_var+1)& (0+255),f,b
  9609  003368                     l1045:
  9610  003368  A281               	btfss	3969,1,c	;volatile
  9611  00336A  D01C               	goto	l8044
  9612  00336C  D7FD               	goto	l1045
  9613  00336E                     l8024:
  9614                           
  9615                           ;Test.c: 42: algorithmTest();
  9616  00336E  EC6B  F01A         	call	_algorithmTest	;wreg free
  9617                           
  9618                           ;Test.c: 43: break;
  9619  003372  D7BB               	goto	l8006
  9620  003374                     l8026:
  9621                           
  9622                           ;Test.c: 45: sensorTest();
  9623  003374  EC15  F00E         	call	_sensorTest	;wreg free
  9624                           
  9625                           ;Test.c: 46: break;
  9626  003378  D7B8               	goto	l8006
  9627  00337A                     l8028:
  9628                           
  9629                           ;Test.c: 48: actuatorTest();
  9630  00337A  EC09  F000         	call	_actuatorTest	;wreg free
  9631                           
  9632                           ;Test.c: 49: break;
  9633  00337E  D7B5               	goto	l8006
  9634  003380                     l8030:
  9635                           
  9636                           ;Test.c: 51: PortTestA5();
  9637  003380  EC90  F01F         	call	_PortTestA5	;wreg free
  9638                           
  9639                           ;Test.c: 52: break;
  9640  003384  D7B2               	goto	l8006
  9641  003386                     l8032:
  9642                           
  9643                           ;Test.c: 54: ToggleTestA5();
  9644  003386  ECE1  F01C         	call	_ToggleTestA5	;wreg free
  9645                           
  9646                           ;Test.c: 55: break;
  9647  00338A  D7AF               	goto	l8006
  9648  00338C                     l8034:
  9649                           
  9650                           ;Test.c: 57: EEPROMTest();
  9651  00338C  EC1E  F024         	call	_EEPROMTest	;wreg free
  9652                           
  9653                           ;Test.c: 58: break;
  9654  003390  D7AC               	goto	l8006
  9655  003392                     l8036:
  9656                           
  9657                           ;Test.c: 60: PusherTest();
  9658  003392  ECAA  F01D         	call	_PusherTest	;wreg free
  9659                           
  9660                           ;Test.c: 61: break;
  9661  003396  D7A9               	goto	l8006
  9662  003398                     l8038:
  9663                           
  9664                           ;Test.c: 63: PortTests();
  9665  003398  EC68  F01D         	call	_PortTests	;wreg free
  9666                           
  9667                           ;Test.c: 64: break;
  9668  00339C  D7A6               	goto	l8006
  9669  00339E                     l8040:
  9670                           
  9671                           ;Test.c: 66: BothServos();
  9672  00339E  EC8B  F00C         	call	_BothServos	;wreg free
  9673                           
  9674                           ;Test.c: 70: }
  9675                           
  9676                           ;Test.c: 69: break;
  9677                           
  9678                           ;Test.c: 68: default:
  9679                           
  9680                           ;Test.c: 67: break;
  9681  0033A2  D7A3               	goto	l8006
  9682  0033A4                     l8044:
  9683  0033A4  C0FA  F0C6         	movff	_var,??_Test
  9684  0033A8  C0FB  F0C7         	movff	_var+1,??_Test+1
  9685                           
  9686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9687                           ; Switch size 1, requested type "space"
  9688                           ; Number of cases is 1, Range of values is 0 to 0
  9689                           ; switch strategies available:
  9690                           ; Name         Instructions Cycles
  9691                           ; simple_byte            4     3 (average)
  9692                           ;	Chosen strategy is simple_byte
  9693  0033AC  0100               	movlb	0	; () banked
  9694  0033AE  51C7               	movf	(??_Test+1)& (0+255),w,b
  9695  0033B0  0A00               	xorlw	0	; case 0
  9696  0033B2  A4D8               	btfss	status,2,c
  9697  0033B4  D79A               	goto	l8006
  9698                           
  9699                           ; BSR set to: 0
  9700                           ; Switch size 1, requested type "space"
  9701                           ; Number of cases is 9, Range of values is 1 to 10
  9702                           ; switch strategies available:
  9703                           ; Name         Instructions Cycles
  9704                           ; simple_byte           28    15 (average)
  9705                           ;	Chosen strategy is simple_byte
  9706  0033B6  0100               	movlb	0	; () banked
  9707  0033B8  51C6               	movf	??_Test& (0+255),w,b
  9708  0033BA  0A01               	xorlw	1	; case 1
  9709  0033BC  B4D8               	btfsc	status,2,c
  9710  0033BE  D7D7               	goto	l8024
  9711  0033C0  0A03               	xorlw	3	; case 2
  9712  0033C2  B4D8               	btfsc	status,2,c
  9713  0033C4  D7D7               	goto	l8026
  9714  0033C6  0A01               	xorlw	1	; case 3
  9715  0033C8  B4D8               	btfsc	status,2,c
  9716  0033CA  D7D7               	goto	l8028
  9717  0033CC  0A06               	xorlw	6	; case 5
  9718  0033CE  B4D8               	btfsc	status,2,c
  9719  0033D0  D7D7               	goto	l8030
  9720  0033D2  0A03               	xorlw	3	; case 6
  9721  0033D4  B4D8               	btfsc	status,2,c
  9722  0033D6  D7D7               	goto	l8032
  9723  0033D8  0A01               	xorlw	1	; case 7
  9724  0033DA  B4D8               	btfsc	status,2,c
  9725  0033DC  D7D7               	goto	l8034
  9726  0033DE  0A0F               	xorlw	15	; case 8
  9727  0033E0  B4D8               	btfsc	status,2,c
  9728  0033E2  D7D7               	goto	l8036
  9729  0033E4  0A01               	xorlw	1	; case 9
  9730  0033E6  B4D8               	btfsc	status,2,c
  9731  0033E8  D7D7               	goto	l8038
  9732  0033EA  0A03               	xorlw	3	; case 10
  9733  0033EC  B4D8               	btfsc	status,2,c
  9734  0033EE  D7D7               	goto	l8040
  9735                           
  9736                           ; BSR set to: 0
  9737                           
  9738                           ; BSR set to: 0
  9739  0033F0  D77C               	goto	l8006
  9740  0033F2                     __end_of_Test:
  9741                           	opt stack 0
  9742                           tblptru	equ	0xFF8
  9743                           tblptrh	equ	0xFF7
  9744                           tblptrl	equ	0xFF6
  9745                           tablat	equ	0xFF5
  9746                           prodh	equ	0xFF4
  9747                           prodl	equ	0xFF3
  9748                           intcon	equ	0xFF2
  9749                           intcon2	equ	0xFF1
  9750                           intcon3	equ	0xFF0
  9751                           postinc0	equ	0xFEE
  9752                           wreg	equ	0xFE8
  9753                           postdec1	equ	0xFE5
  9754                           fsr1l	equ	0xFE1
  9755                           indf2	equ	0xFDF
  9756                           postinc2	equ	0xFDE
  9757                           postdec2	equ	0xFDD
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function _sensorTest *****************
  9763 ;; Defined at:
  9764 ;;		line 118 in file "Test.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;		None
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  res             2   45[BANK0 ] int 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  1    wreg      void 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;Total ram usage:        4 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:   10
  9785 ;; This function calls:
  9786 ;;		_lcdInst
  9787 ;;		_printf
  9788 ;;		_readADC
  9789 ;;		_readMAG
  9790 ;; This function is called by:
  9791 ;;		_Test
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text37
  9796  001C2A                     __ptext37:
  9797                           	opt stack 0
  9798  001C2A                     _sensorTest:
  9799                           	opt stack 19
  9800                           
  9801                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;incstack = 0
  9805  001C2A  0E01               	movlw	1
  9806  001C2C  ECEC  F023         	call	_lcdInst
  9807  001C30  0E68               	movlw	104
  9808  001C32  0100               	movlb	0	; () banked
  9809  001C34  6FAB               	movwf	??_sensorTest& (0+255),b
  9810  001C36  0EE4               	movlw	228
  9811  001C38                     u7547:
  9812  001C38  2EE8               	decfsz	wreg,f,c
  9813  001C3A  D7FE               	bra	u7547
  9814  001C3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9815  001C3E  D7FC               	bra	u7547
  9816  001C40  F000               	nop	
  9817  001C42  0E80               	movlw	128
  9818  001C44  ECEC  F023         	call	_lcdInst
  9819                           
  9820                           ;Test.c: 121: printf("SENSORS");
  9821  001C48  0EAE               	movlw	low STR_77
  9822  001C4A  0100               	movlb	0	; () banked
  9823  001C4C  6F8E               	movwf	printf@f& (0+255),b
  9824  001C4E  0EFF               	movlw	high STR_77
  9825  001C50  0100               	movlb	0	; () banked
  9826  001C52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9827  001C54  ECB8  F008         	call	_printf	;wreg free
  9828                           
  9829                           ;Test.c: 122: lcdInst(0b11000000);;
  9830  001C58  0EC0               	movlw	192
  9831  001C5A  ECEC  F023         	call	_lcdInst
  9832                           
  9833                           ;Test.c: 123: printf("PUSH TO START");
  9834  001C5E  0E0B               	movlw	low STR_71
  9835  001C60  0100               	movlb	0	; () banked
  9836  001C62  6F8E               	movwf	printf@f& (0+255),b
  9837  001C64  0EFF               	movlw	high STR_71
  9838  001C66  0100               	movlb	0	; () banked
  9839  001C68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9840  001C6A  ECB8  F008         	call	_printf	;wreg free
  9841                           
  9842                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9843  001C6E  0E05               	movlw	5
  9844  001C70  0100               	movlb	0	; () banked
  9845  001C72  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9846  001C74  0E0F               	movlw	15
  9847  001C76  0100               	movlb	0	; () banked
  9848  001C78  6FAB               	movwf	??_sensorTest& (0+255),b
  9849  001C7A  0EF1               	movlw	241
  9850  001C7C                     u7557:
  9851  001C7C  2EE8               	decfsz	wreg,f,c
  9852  001C7E  D7FE               	bra	u7557
  9853  001C80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9854  001C82  D7FC               	bra	u7557
  9855  001C84  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9856  001C86  D7FA               	bra	u7557
  9857  001C88                     l1074:
  9858  001C88  A281               	btfss	3969,1,c	;volatile
  9859  001C8A  D7FE               	goto	l1074
  9860  001C8C                     l1077:
  9861  001C8C  B281               	btfsc	3969,1,c	;volatile
  9862  001C8E  D7FE               	goto	l1077
  9863                           
  9864                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9865  001C90  0E01               	movlw	1
  9866  001C92  ECEC  F023         	call	_lcdInst
  9867  001C96  0E68               	movlw	104
  9868  001C98  0100               	movlb	0	; () banked
  9869  001C9A  6FAB               	movwf	??_sensorTest& (0+255),b
  9870  001C9C  0EE4               	movlw	228
  9871  001C9E                     u7567:
  9872  001C9E  2EE8               	decfsz	wreg,f,c
  9873  001CA0  D7FE               	bra	u7567
  9874  001CA2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9875  001CA4  D7FC               	bra	u7567
  9876  001CA6  F000               	nop	
  9877  001CA8  0E80               	movlw	128
  9878  001CAA  ECEC  F023         	call	_lcdInst
  9879                           
  9880                           ;Test.c: 132: printf("TST: IR SNSR");
  9881  001CAE  0E35               	movlw	low STR_79
  9882  001CB0  0100               	movlb	0	; () banked
  9883  001CB2  6F8E               	movwf	printf@f& (0+255),b
  9884  001CB4  0EFF               	movlw	high STR_79
  9885  001CB6  0100               	movlb	0	; () banked
  9886  001CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9887  001CBA  ECB8  F008         	call	_printf	;wreg free
  9888                           
  9889                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9890  001CBE  0E05               	movlw	5
  9891  001CC0  0100               	movlb	0	; () banked
  9892  001CC2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9893  001CC4  0E0F               	movlw	15
  9894  001CC6  0100               	movlb	0	; () banked
  9895  001CC8  6FAB               	movwf	??_sensorTest& (0+255),b
  9896  001CCA  0EF1               	movlw	241
  9897  001CCC                     u7577:
  9898  001CCC  2EE8               	decfsz	wreg,f,c
  9899  001CCE  D7FE               	bra	u7577
  9900  001CD0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9901  001CD2  D7FC               	bra	u7577
  9902  001CD4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9903  001CD6  D7FA               	bra	u7577
  9904                           
  9905                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9906  001CD8  8A8B               	bsf	3979,5,c	;volatile
  9907                           
  9908                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9909  001CDA  D05C               	goto	l6624
  9910  001CDC                     l6606:
  9911                           
  9912                           ;Test.c: 136: readADC(0);
  9913  001CDC  0E00               	movlw	0
  9914  001CDE  ECF3  F022         	call	_readADC
  9915                           
  9916                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9917  001CE2  50C3               	movf	4035,w,c	;volatile
  9918  001CE4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9919  001CE8  0100               	movlb	0	; () banked
  9920  001CEA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9921  001CEC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9922  001CF0  0100               	movlb	0	; () banked
  9923  001CF2  6BAB               	clrf	??_sensorTest& (0+255),b
  9924  001CF4  0100               	movlb	0	; () banked
  9925  001CF6  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9926  001CF8  0100               	movlb	0	; () banked
  9927  001CFA  6FAD               	movwf	sensorTest@res& (0+255),b
  9928  001CFC  0100               	movlb	0	; () banked
  9929  001CFE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9930  001D00  0100               	movlb	0	; () banked
  9931  001D02  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;Test.c: 138: IR_signal = (res > 1000) ? 1 : 0;
  9935  001D04  0100               	movlb	0	; () banked
  9936  001D06  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9937  001D08  D00A               	goto	u5090
  9938  001D0A  0EE9               	movlw	233
  9939  001D0C  0100               	movlb	0	; () banked
  9940  001D0E  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9941  001D10  0E03               	movlw	3
  9942  001D12  0100               	movlb	0	; () banked
  9943  001D14  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9944  001D16  A0D8               	btfss	status,0,c
  9945  001D18  D002               	goto	u5090
  9946  001D1A  0E01               	movlw	1
  9947  001D1C  D001               	goto	u5100
  9948  001D1E                     u5090:
  9949  001D1E  0E00               	movlw	0
  9950  001D20                     u5100:
  9951  001D20  0100               	movlb	0	; () banked
  9952  001D22  6FDA               	movwf	_IR_signal& (0+255),b
  9953  001D24  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9954                           
  9955                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9956  001D26  0E01               	movlw	1
  9957  001D28  ECEC  F023         	call	_lcdInst
  9958  001D2C  0E68               	movlw	104
  9959  001D2E  0100               	movlb	0	; () banked
  9960  001D30  6FAB               	movwf	??_sensorTest& (0+255),b
  9961  001D32  0EE4               	movlw	228
  9962  001D34                     u7587:
  9963  001D34  2EE8               	decfsz	wreg,f,c
  9964  001D36  D7FE               	bra	u7587
  9965  001D38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9966  001D3A  D7FC               	bra	u7587
  9967  001D3C  F000               	nop	
  9968  001D3E  0E80               	movlw	128
  9969  001D40  ECEC  F023         	call	_lcdInst
  9970                           
  9971                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9972  001D44  0E5A               	movlw	low STR_80
  9973  001D46  0100               	movlb	0	; () banked
  9974  001D48  6F8E               	movwf	printf@f& (0+255),b
  9975  001D4A  0EFE               	movlw	high STR_80
  9976  001D4C  0100               	movlb	0	; () banked
  9977  001D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9978  001D50  C0DA  F090         	movff	_IR_signal,?_printf+2
  9979  001D54  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9980  001D58  ECB8  F008         	call	_printf	;wreg free
  9981                           
  9982                           ;Test.c: 142: lcdInst(0b11000000);;
  9983  001D5C  0EC0               	movlw	192
  9984  001D5E  ECEC  F023         	call	_lcdInst
  9985                           
  9986                           ;Test.c: 143: printf("%d", res);
  9987  001D62  0E16               	movlw	low (STR_27+14)
  9988  001D64  0100               	movlb	0	; () banked
  9989  001D66  6F8E               	movwf	printf@f& (0+255),b
  9990  001D68  0EFE               	movlw	high (STR_27+14)
  9991  001D6A  0100               	movlb	0	; () banked
  9992  001D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9993  001D6E  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9994  001D72  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9995  001D76  ECB8  F008         	call	_printf	;wreg free
  9996                           
  9997                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9998  001D7A  0E05               	movlw	5
  9999  001D7C  0100               	movlb	0	; () banked
 10000  001D7E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10001  001D80  0E0F               	movlw	15
 10002  001D82  0100               	movlb	0	; () banked
 10003  001D84  6FAB               	movwf	??_sensorTest& (0+255),b
 10004  001D86  0EF1               	movlw	241
 10005  001D88                     u7597:
 10006  001D88  2EE8               	decfsz	wreg,f,c
 10007  001D8A  D7FE               	bra	u7597
 10008  001D8C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10009  001D8E  D7FC               	bra	u7597
 10010  001D90  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10011  001D92  D7FA               	bra	u7597
 10012  001D94                     l6624:
 10013  001D94  A281               	btfss	3969,1,c	;volatile
 10014  001D96  D7A2               	goto	l6606
 10015                           
 10016                           ;Test.c: 145: }
 10017                           ;Test.c: 146: LATCbits.LATC5 = 0;
 10018  001D98  9A8B               	bcf	3979,5,c	;volatile
 10019                           
 10020                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10021  001D9A  0E01               	movlw	1
 10022  001D9C  ECEC  F023         	call	_lcdInst
 10023  001DA0  0E68               	movlw	104
 10024  001DA2  0100               	movlb	0	; () banked
 10025  001DA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10026  001DA6  0EE4               	movlw	228
 10027  001DA8                     u7607:
 10028  001DA8  2EE8               	decfsz	wreg,f,c
 10029  001DAA  D7FE               	bra	u7607
 10030  001DAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10031  001DAE  D7FC               	bra	u7607
 10032  001DB0  F000               	nop	
 10033  001DB2  0E80               	movlw	128
 10034  001DB4  ECEC  F023         	call	_lcdInst
 10035                           
 10036                           ;Test.c: 154: printf("TST: MAGNETISM");
 10037  001DB8  0E87               	movlw	low STR_82
 10038  001DBA  0100               	movlb	0	; () banked
 10039  001DBC  6F8E               	movwf	printf@f& (0+255),b
 10040  001DBE  0EFE               	movlw	high STR_82
 10041  001DC0  0100               	movlb	0	; () banked
 10042  001DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10043  001DC4  ECB8  F008         	call	_printf	;wreg free
 10044                           
 10045                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
 10046  001DC8  0E05               	movlw	5
 10047  001DCA  0100               	movlb	0	; () banked
 10048  001DCC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10049  001DCE  0E0F               	movlw	15
 10050  001DD0  0100               	movlb	0	; () banked
 10051  001DD2  6FAB               	movwf	??_sensorTest& (0+255),b
 10052  001DD4  0EF1               	movlw	241
 10053  001DD6                     u7617:
 10054  001DD6  2EE8               	decfsz	wreg,f,c
 10055  001DD8  D7FE               	bra	u7617
 10056  001DDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10057  001DDC  D7FC               	bra	u7617
 10058  001DDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10059  001DE0  D7FA               	bra	u7617
 10060                           
 10061                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
 10062  001DE2  D021               	goto	l6642
 10063  001DE4                     l6636:
 10064                           
 10065                           ;Test.c: 157: readMAG();
 10066  001DE4  ECB6  F020         	call	_readMAG	;wreg free
 10067                           
 10068                           ;Test.c: 158: lcdInst(0b10000000);;
 10069  001DE8  0E80               	movlw	128
 10070  001DEA  ECEC  F023         	call	_lcdInst
 10071                           
 10072                           ;Test.c: 159: lcdInst(0b11000000);;
 10073  001DEE  0EC0               	movlw	192
 10074  001DF0  ECEC  F023         	call	_lcdInst
 10075                           
 10076                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
 10077  001DF4  0E2A               	movlw	low STR_83
 10078  001DF6  0100               	movlb	0	; () banked
 10079  001DF8  6F8E               	movwf	printf@f& (0+255),b
 10080  001DFA  0EFE               	movlw	high STR_83
 10081  001DFC  0100               	movlb	0	; () banked
 10082  001DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10083  001E00  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10084  001E04  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10085  001E08  ECB8  F008         	call	_printf	;wreg free
 10086                           
 10087                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10088  001E0C  0E05               	movlw	5
 10089  001E0E  0100               	movlb	0	; () banked
 10090  001E10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10091  001E12  0E0F               	movlw	15
 10092  001E14  0100               	movlb	0	; () banked
 10093  001E16  6FAB               	movwf	??_sensorTest& (0+255),b
 10094  001E18  0EF1               	movlw	241
 10095  001E1A                     u7627:
 10096  001E1A  2EE8               	decfsz	wreg,f,c
 10097  001E1C  D7FE               	bra	u7627
 10098  001E1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10099  001E20  D7FC               	bra	u7627
 10100  001E22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10101  001E24  D7FA               	bra	u7627
 10102  001E26                     l6642:
 10103  001E26  A281               	btfss	3969,1,c	;volatile
 10104  001E28  D7DD               	goto	l6636
 10105                           
 10106                           ;Test.c: 162: }
 10107                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10108  001E2A  0E01               	movlw	1
 10109  001E2C  ECEC  F023         	call	_lcdInst
 10110  001E30  0E68               	movlw	104
 10111  001E32  0100               	movlb	0	; () banked
 10112  001E34  6FAB               	movwf	??_sensorTest& (0+255),b
 10113  001E36  0EE4               	movlw	228
 10114  001E38                     u7637:
 10115  001E38  2EE8               	decfsz	wreg,f,c
 10116  001E3A  D7FE               	bra	u7637
 10117  001E3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10118  001E3E  D7FC               	bra	u7637
 10119  001E40  F000               	nop	
 10120  001E42  0E80               	movlw	128
 10121  001E44  ECEC  F023         	call	_lcdInst
 10122                           
 10123                           ;Test.c: 168: printf("TST: COND");
 10124  001E48  0E87               	movlw	low STR_84
 10125  001E4A  0100               	movlb	0	; () banked
 10126  001E4C  6F8E               	movwf	printf@f& (0+255),b
 10127  001E4E  0EFF               	movlw	high STR_84
 10128  001E50  0100               	movlb	0	; () banked
 10129  001E52  6F8F               	movwf	(printf@f+1)& (0+255),b
 10130  001E54  ECB8  F008         	call	_printf	;wreg free
 10131                           
 10132                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10133  001E58  0E05               	movlw	5
 10134  001E5A  0100               	movlb	0	; () banked
 10135  001E5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10136  001E5E  0E0F               	movlw	15
 10137  001E60  0100               	movlb	0	; () banked
 10138  001E62  6FAB               	movwf	??_sensorTest& (0+255),b
 10139  001E64  0EF1               	movlw	241
 10140  001E66                     u7647:
 10141  001E66  2EE8               	decfsz	wreg,f,c
 10142  001E68  D7FE               	bra	u7647
 10143  001E6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10144  001E6C  D7FC               	bra	u7647
 10145  001E6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10146  001E70  D7FA               	bra	u7647
 10147  001E72                     l6654:
 10148                           
 10149                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10150  001E72  0E01               	movlw	1
 10151  001E74  ECEC  F023         	call	_lcdInst
 10152  001E78  0E68               	movlw	104
 10153  001E7A  0100               	movlb	0	; () banked
 10154  001E7C  6FAB               	movwf	??_sensorTest& (0+255),b
 10155  001E7E  0EE4               	movlw	228
 10156  001E80                     u7657:
 10157  001E80  2EE8               	decfsz	wreg,f,c
 10158  001E82  D7FE               	bra	u7657
 10159  001E84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10160  001E86  D7FC               	bra	u7657
 10161  001E88  F000               	nop	
 10162  001E8A  0E80               	movlw	128
 10163  001E8C  ECEC  F023         	call	_lcdInst
 10164                           
 10165                           ;Test.c: 172: printf("TST: COND");
 10166  001E90  0E87               	movlw	low STR_84
 10167  001E92  0100               	movlb	0	; () banked
 10168  001E94  6F8E               	movwf	printf@f& (0+255),b
 10169  001E96  0EFF               	movlw	high STR_84
 10170  001E98  0100               	movlb	0	; () banked
 10171  001E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10172  001E9C  ECB8  F008         	call	_printf	;wreg free
 10173                           
 10174                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
 10175  001EA0  D01B               	goto	l6666
 10176  001EA2                     l6662:
 10177                           
 10178                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10179  001EA2  0E80               	movlw	128
 10180  001EA4  ECEC  F023         	call	_lcdInst
 10181  001EA8  0EC0               	movlw	192
 10182  001EAA  ECEC  F023         	call	_lcdInst
 10183                           
 10184                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
 10185  001EAE  0EA5               	movlw	low STR_86
 10186  001EB0  0100               	movlb	0	; () banked
 10187  001EB2  6F8E               	movwf	printf@f& (0+255),b
 10188  001EB4  0EFF               	movlw	high STR_86
 10189  001EB6  0100               	movlb	0	; () banked
 10190  001EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10191  001EBA  A480               	btfss	3968,2,c	;volatile
 10192  001EBC  D004               	goto	u5130
 10193  001EBE  0100               	movlb	0	; () banked
 10194  001EC0  6BAB               	clrf	??_sensorTest& (0+255),b
 10195  001EC2  2BAB               	incf	??_sensorTest& (0+255),f,b
 10196  001EC4  D002               	goto	u5138
 10197  001EC6                     u5130:
 10198  001EC6  0100               	movlb	0	; () banked
 10199  001EC8  6BAB               	clrf	??_sensorTest& (0+255),b
 10200  001ECA                     u5138:
 10201  001ECA  0100               	movlb	0	; () banked
 10202  001ECC  51AB               	movf	??_sensorTest& (0+255),w,b
 10203  001ECE  0100               	movlb	0	; () banked
 10204  001ED0  6F90               	movwf	(?_printf+2)& (0+255),b
 10205  001ED2  6B91               	clrf	(?_printf+3)& (0+255),b
 10206  001ED4  ECB8  F008         	call	_printf	;wreg free
 10207  001ED8                     l6666:
 10208  001ED8  A281               	btfss	3969,1,c	;volatile
 10209  001EDA  D7E3               	goto	l6662
 10210                           
 10211                           ;Test.c: 179: }
 10212                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10213  001EDC  3881               	swapf	3969,w,c	;volatile
 10214  001EDE  0B0F               	andlw	15
 10215  001EE0  0A0F               	xorlw	15
 10216  001EE2  B4D8               	btfsc	status,2,c
 10217  001EE4  0012               	return	
 10218                           
 10219                           ;Test.c: 183: else{
 10220                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10221                           
 10222                           ;Test.c: 182: }
 10223                           
 10224                           ;Test.c: 181: break;
 10225  001EE6  8689               	bsf	3977,3,c	;volatile
 10226                           
 10227                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10228  001EE8  D01B               	goto	l6678
 10229  001EEA                     l6674:
 10230                           
 10231                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10232  001EEA  0E80               	movlw	128
 10233  001EEC  ECEC  F023         	call	_lcdInst
 10234  001EF0  0EC0               	movlw	192
 10235  001EF2  ECEC  F023         	call	_lcdInst
 10236                           
 10237                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10238  001EF6  0EA5               	movlw	low STR_86
 10239  001EF8  0100               	movlb	0	; () banked
 10240  001EFA  6F8E               	movwf	printf@f& (0+255),b
 10241  001EFC  0EFF               	movlw	high STR_86
 10242  001EFE  0100               	movlb	0	; () banked
 10243  001F00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10244  001F02  A480               	btfss	3968,2,c	;volatile
 10245  001F04  D004               	goto	u5160
 10246  001F06  0100               	movlb	0	; () banked
 10247  001F08  6BAB               	clrf	??_sensorTest& (0+255),b
 10248  001F0A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10249  001F0C  D002               	goto	u5168
 10250  001F0E                     u5160:
 10251  001F0E  0100               	movlb	0	; () banked
 10252  001F10  6BAB               	clrf	??_sensorTest& (0+255),b
 10253  001F12                     u5168:
 10254  001F12  0100               	movlb	0	; () banked
 10255  001F14  51AB               	movf	??_sensorTest& (0+255),w,b
 10256  001F16  0100               	movlb	0	; () banked
 10257  001F18  6F90               	movwf	(?_printf+2)& (0+255),b
 10258  001F1A  6B91               	clrf	(?_printf+3)& (0+255),b
 10259  001F1C  ECB8  F008         	call	_printf	;wreg free
 10260  001F20                     l6678:
 10261  001F20  B281               	btfsc	3969,1,c	;volatile
 10262  001F22  D7E3               	goto	l6674
 10263                           
 10264                           ;Test.c: 189: }
 10265                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10266  001F24  9689               	bcf	3977,3,c	;volatile
 10267  001F26  D7A5               	goto	l6654
 10268  001F28                     __end_of_sensorTest:
 10269                           	opt stack 0
 10270                           tblptru	equ	0xFF8
 10271                           tblptrh	equ	0xFF7
 10272                           tblptrl	equ	0xFF6
 10273                           tablat	equ	0xFF5
 10274                           prodh	equ	0xFF4
 10275                           prodl	equ	0xFF3
 10276                           intcon	equ	0xFF2
 10277                           intcon2	equ	0xFF1
 10278                           intcon3	equ	0xFF0
 10279                           postinc0	equ	0xFEE
 10280                           wreg	equ	0xFE8
 10281                           postdec1	equ	0xFE5
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function _readMAG *****************
 10291 ;; Defined at:
 10292 ;;		line 29 in file "ADCFunctionality.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;		None
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  res             2    4[BANK0 ] int 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      void 
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;Total ram usage:        4 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    8
 10313 ;; This function calls:
 10314 ;;		_readADC
 10315 ;; This function is called by:
 10316 ;;		_getMAG
 10317 ;;		_sensorTest
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           	psect	text38
 10322  00416C                     __ptext38:
 10323                           	opt stack 0
 10324  00416C                     _readMAG:
 10325                           	opt stack 19
 10326                           
 10327                           ;ADCFunctionality.c: 30: readADC(1);
 10328                           
 10329                           ;incstack = 0
 10330  00416C  0E01               	movlw	1
 10331  00416E  ECF3  F022         	call	_readADC
 10332                           
 10333                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10334  004172  50C3               	movf	4035,w,c	;volatile
 10335  004174  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10336  004178  0100               	movlb	0	; () banked
 10337  00417A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10338  00417C  C082  F083         	movff	??_readMAG,??_readMAG+1
 10339  004180  0100               	movlb	0	; () banked
 10340  004182  6B82               	clrf	??_readMAG& (0+255),b
 10341  004184  0100               	movlb	0	; () banked
 10342  004186  1182               	iorwf	??_readMAG& (0+255),w,b
 10343  004188  0100               	movlb	0	; () banked
 10344  00418A  6F84               	movwf	readMAG@res& (0+255),b
 10345  00418C  0100               	movlb	0	; () banked
 10346  00418E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10347  004190  0100               	movlb	0	; () banked
 10348  004192  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10352  004194  0100               	movlb	0	; () banked
 10353  004196  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10354  004198  D008               	goto	u3821
 10355  00419A  0100               	movlb	0	; () banked
 10356  00419C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10357  00419E  E107               	bnz	u3820
 10358  0041A0  0E96               	movlw	150
 10359  0041A2  0100               	movlb	0	; () banked
 10360  0041A4  5D84               	subwf	readMAG@res& (0+255),w,b
 10361  0041A6  B0D8               	btfsc	status,0,c
 10362  0041A8  D002               	goto	u3820
 10363  0041AA                     u3821:
 10364  0041AA  0E01               	movlw	1
 10365  0041AC  D001               	goto	u3830
 10366  0041AE                     u3820:
 10367  0041AE  0E00               	movlw	0
 10368  0041B0                     u3830:
 10369  0041B0  0100               	movlb	0	; () banked
 10370  0041B2  6FDC               	movwf	_MAG_signal& (0+255),b
 10371  0041B4  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10372                           
 10373                           ; BSR set to: 0
 10374  0041B6  0012               	return		;funcret
 10375  0041B8                     __end_of_readMAG:
 10376                           	opt stack 0
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           intcon2	equ	0xFF1
 10385                           intcon3	equ	0xFF0
 10386                           postinc0	equ	0xFEE
 10387                           wreg	equ	0xFE8
 10388                           postdec1	equ	0xFE5
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8
 10396                           
 10397 ;; *************** function _readADC *****************
 10398 ;; Defined at:
 10399 ;;		line 15 in file "ADCFunctionality.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;  channel         1    wreg     unsigned char 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  channel         1    1[BANK0 ] unsigned char 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, status,2, status,0, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;Total ram usage:        2 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    7
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_readIR
 10424 ;;		_readMAG
 10425 ;;		_sensorTest
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           	psect	text39
 10430  0045E6                     __ptext39:
 10431                           	opt stack 0
 10432  0045E6                     _readADC:
 10433                           	opt stack 19
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;incstack = 0
 10437                           ;readADC@channel stored from wreg
 10438  0045E6  0100               	movlb	0	; () banked
 10439  0045E8  6F81               	movwf	readADC@channel& (0+255),b
 10440                           
 10441                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10442  0045EA  0100               	movlb	0	; () banked
 10443  0045EC  4581               	rlncf	readADC@channel& (0+255),w,b
 10444  0045EE  46E8               	rlncf	wreg,f,c
 10445  0045F0  0BFC               	andlw	252
 10446  0045F2  6EC2               	movwf	4034,c	;volatile
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10450  0045F4  80C2               	bsf	4034,0,c	;volatile
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10454  0045F6  82C2               	bsf	4034,1,c	;volatile
 10455                           
 10456                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10457  0045F8  D009               	goto	l5242
 10458  0045FA                     l5240:
 10459  0045FA  0E34               	movlw	52
 10460  0045FC  0100               	movlb	0	; () banked
 10461  0045FE  6F80               	movwf	??_readADC& (0+255),b
 10462  004600  0EF1               	movlw	241
 10463  004602                     u7667:
 10464  004602  2EE8               	decfsz	wreg,f,c
 10465  004604  D7FE               	bra	u7667
 10466  004606  2F80               	decfsz	??_readADC& (0+255),f,b
 10467  004608  D7FC               	bra	u7667
 10468  00460A  D000               	nop2	
 10469  00460C                     l5242:
 10470  00460C  A2C2               	btfss	4034,1,c	;volatile
 10471  00460E  0012               	return	
 10472  004610  D7F4               	goto	l5240
 10473  004612                     __end_of_readADC:
 10474                           	opt stack 0
 10475                           tblptru	equ	0xFF8
 10476                           tblptrh	equ	0xFF7
 10477                           tblptrl	equ	0xFF6
 10478                           tablat	equ	0xFF5
 10479                           prodh	equ	0xFF4
 10480                           prodl	equ	0xFF3
 10481                           intcon	equ	0xFF2
 10482                           intcon2	equ	0xFF1
 10483                           intcon3	equ	0xFF0
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           postdec1	equ	0xFE5
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           fsr2h	equ	0xFDA
 10492                           fsr2l	equ	0xFD9
 10493                           status	equ	0xFD8
 10494                           
 10495 ;; *************** function _algorithmTest *****************
 10496 ;; Defined at:
 10497 ;;		line 74 in file "Test.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:        2 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:   10
 10518 ;; This function calls:
 10519 ;;		_lcdInst
 10520 ;;		_printf
 10521 ;; This function is called by:
 10522 ;;		_Test
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text40
 10527  0034D6                     __ptext40:
 10528                           	opt stack 0
 10529  0034D6                     _algorithmTest:
 10530                           	opt stack 19
 10531                           
 10532                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10533                           
 10534                           ;incstack = 0
 10535  0034D6  0E01               	movlw	1
 10536  0034D8  ECEC  F023         	call	_lcdInst
 10537  0034DC  0E68               	movlw	104
 10538  0034DE  0100               	movlb	0	; () banked
 10539  0034E0  6FAB               	movwf	??_algorithmTest& (0+255),b
 10540  0034E2  0EE4               	movlw	228
 10541  0034E4                     u7677:
 10542  0034E4  2EE8               	decfsz	wreg,f,c
 10543  0034E6  D7FE               	bra	u7677
 10544  0034E8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10545  0034EA  D7FC               	bra	u7677
 10546  0034EC  F000               	nop	
 10547  0034EE  0E80               	movlw	128
 10548  0034F0  ECEC  F023         	call	_lcdInst
 10549                           
 10550                           ;Test.c: 77: printf("ALGORITHM TEST");
 10551  0034F4  0ED2               	movlw	low STR_70
 10552  0034F6  0100               	movlb	0	; () banked
 10553  0034F8  6F8E               	movwf	printf@f& (0+255),b
 10554  0034FA  0EFE               	movlw	high STR_70
 10555  0034FC  0100               	movlb	0	; () banked
 10556  0034FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10557  003500  ECB8  F008         	call	_printf	;wreg free
 10558                           
 10559                           ;Test.c: 78: lcdInst(0b11000000);;
 10560  003504  0EC0               	movlw	192
 10561  003506  ECEC  F023         	call	_lcdInst
 10562                           
 10563                           ;Test.c: 79: printf("PUSH TO START");
 10564  00350A  0E0B               	movlw	low STR_71
 10565  00350C  0100               	movlb	0	; () banked
 10566  00350E  6F8E               	movwf	printf@f& (0+255),b
 10567  003510  0EFF               	movlw	high STR_71
 10568  003512  0100               	movlb	0	; () banked
 10569  003514  6F8F               	movwf	(printf@f+1)& (0+255),b
 10570  003516  ECB8  F008         	call	_printf	;wreg free
 10571                           
 10572                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10573  00351A  0E05               	movlw	5
 10574  00351C  0100               	movlb	0	; () banked
 10575  00351E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10576  003520  0E0F               	movlw	15
 10577  003522  0100               	movlb	0	; () banked
 10578  003524  6FAB               	movwf	??_algorithmTest& (0+255),b
 10579  003526  0EF1               	movlw	241
 10580  003528                     u7687:
 10581  003528  2EE8               	decfsz	wreg,f,c
 10582  00352A  D7FE               	bra	u7687
 10583  00352C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10584  00352E  D7FC               	bra	u7687
 10585  003530  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10586  003532  D7FA               	bra	u7687
 10587  003534                     l1065:
 10588  003534  A281               	btfss	3969,1,c	;volatile
 10589  003536  D7FE               	goto	l1065
 10590  003538                     l1068:
 10591  003538  B281               	btfsc	3969,1,c	;volatile
 10592  00353A  D7FE               	goto	l1068
 10593                           
 10594                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10595  00353C  0E01               	movlw	1
 10596  00353E  ECEC  F023         	call	_lcdInst
 10597  003542  0E68               	movlw	104
 10598  003544  0100               	movlb	0	; () banked
 10599  003546  6FAB               	movwf	??_algorithmTest& (0+255),b
 10600  003548  0EE4               	movlw	228
 10601  00354A                     u7697:
 10602  00354A  2EE8               	decfsz	wreg,f,c
 10603  00354C  D7FE               	bra	u7697
 10604  00354E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10605  003550  D7FC               	bra	u7697
 10606  003552  F000               	nop	
 10607  003554  0E80               	movlw	128
 10608  003556  ECEC  F023         	call	_lcdInst
 10609                           
 10610                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10611  00355A  0E5F               	movlw	low STR_72
 10612  00355C  0100               	movlb	0	; () banked
 10613  00355E  6F8E               	movwf	printf@f& (0+255),b
 10614  003560  0EFC               	movlw	high STR_72
 10615  003562  0100               	movlb	0	; () banked
 10616  003564  6F8F               	movwf	(printf@f+1)& (0+255),b
 10617  003566  ECB8  F008         	call	_printf	;wreg free
 10618                           
 10619                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10620  00356A  0EEF               	movlw	low STR_73
 10621  00356C  0100               	movlb	0	; () banked
 10622  00356E  6F8E               	movwf	printf@f& (0+255),b
 10623  003570  0EFE               	movlw	high STR_73
 10624  003572  0100               	movlb	0	; () banked
 10625  003574  6F8F               	movwf	(printf@f+1)& (0+255),b
 10626  003576  ECB8  F008         	call	_printf	;wreg free
 10627                           
 10628                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10629  00357A  0E4F               	movlw	low STR_74
 10630  00357C  0100               	movlb	0	; () banked
 10631  00357E  6F8E               	movwf	printf@f& (0+255),b
 10632  003580  0EFF               	movlw	high STR_74
 10633  003582  0100               	movlb	0	; () banked
 10634  003584  6F8F               	movwf	(printf@f+1)& (0+255),b
 10635  003586  ECB8  F008         	call	_printf	;wreg free
 10636                           
 10637                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10638  00358A  0EB4               	movlw	low STR_75
 10639  00358C  0100               	movlb	0	; () banked
 10640  00358E  6F8E               	movwf	printf@f& (0+255),b
 10641  003590  0EFE               	movlw	high STR_75
 10642  003592  0100               	movlb	0	; () banked
 10643  003594  6F8F               	movwf	(printf@f+1)& (0+255),b
 10644  003596  ECB8  F008         	call	_printf	;wreg free
 10645                           
 10646                           ;Test.c: 115: printf("ALG5: NO CANS");
 10647  00359A  0EFD               	movlw	low STR_76
 10648  00359C  0100               	movlb	0	; () banked
 10649  00359E  6F8E               	movwf	printf@f& (0+255),b
 10650  0035A0  0EFE               	movlw	high STR_76
 10651  0035A2  0100               	movlb	0	; () banked
 10652  0035A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10653  0035A6  ECB8  F008         	call	_printf	;wreg free
 10654  0035AA  0012               	return		;funcret
 10655  0035AC                     __end_of_algorithmTest:
 10656                           	opt stack 0
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           intcon2	equ	0xFF1
 10665                           intcon3	equ	0xFF0
 10666                           postinc0	equ	0xFEE
 10667                           wreg	equ	0xFE8
 10668                           postdec1	equ	0xFE5
 10669                           fsr1l	equ	0xFE1
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _actuatorTest *****************
 10678 ;; Defined at:
 10679 ;;		line 195 in file "Test.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;		None
 10682 ;; Auto vars:     Size  Location     Type
 10683 ;;  i               1   45[BANK0 ] unsigned char 
 10684 ;;  i               1   67[BANK0 ] unsigned char 
 10685 ;;  i               1   66[BANK0 ] unsigned char 
 10686 ;;  i               1   65[BANK0 ] unsigned char 
 10687 ;;  i               1   64[BANK0 ] unsigned char 
 10688 ;;  i               1   63[BANK0 ] unsigned char 
 10689 ;;  i               1   62[BANK0 ] unsigned char 
 10690 ;;  i               1   61[BANK0 ] unsigned char 
 10691 ;;  i               1   60[BANK0 ] unsigned char 
 10692 ;;  i               1   59[BANK0 ] unsigned char 
 10693 ;;  i               1   58[BANK0 ] unsigned char 
 10694 ;;  i               1   57[BANK0 ] unsigned char 
 10695 ;;  i               1   56[BANK0 ] unsigned char 
 10696 ;;  i               1   55[BANK0 ] unsigned char 
 10697 ;;  i               1   54[BANK0 ] unsigned char 
 10698 ;;  i               1   53[BANK0 ] unsigned char 
 10699 ;;  i               1   52[BANK0 ] unsigned char 
 10700 ;;  i               1   51[BANK0 ] unsigned char 
 10701 ;;  i               1   50[BANK0 ] unsigned char 
 10702 ;;  i               1   49[BANK0 ] unsigned char 
 10703 ;;  i               1   48[BANK0 ] unsigned char 
 10704 ;;  i               1   47[BANK0 ] unsigned char 
 10705 ;;  i               1   46[BANK0 ] unsigned char 
 10706 ;;  i               2   68[BANK0 ] int 
 10707 ;; Return value:  Size  Location     Type
 10708 ;;                  1    wreg      void 
 10709 ;; Registers used:
 10710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;Total ram usage:       27 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:   10
 10723 ;; This function calls:
 10724 ;;		_lcdInst
 10725 ;;		_printf
 10726 ;;		_updateServoPosition
 10727 ;; This function is called by:
 10728 ;;		_Test
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text41
 10733  000012                     __ptext41:
 10734                           	opt stack 0
 10735  000012                     _actuatorTest:
 10736                           	opt stack 19
 10737                           
 10738                           ;Test.c: 197: int i = 0;
 10739                           
 10740                           ;incstack = 0
 10741  000012  0E00               	movlw	0
 10742  000014  0100               	movlb	0	; () banked
 10743  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10744  000018  0E00               	movlw	0
 10745  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10749  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10753  00001E  0E01               	movlw	1
 10754  000020  ECEC  F023         	call	_lcdInst
 10755  000024  0E68               	movlw	104
 10756  000026  0100               	movlb	0	; () banked
 10757  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10758  00002A  0EE4               	movlw	228
 10759  00002C                     u7707:
 10760  00002C  2EE8               	decfsz	wreg,f,c
 10761  00002E  D7FE               	bra	u7707
 10762  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10763  000032  D7FC               	bra	u7707
 10764  000034  F000               	nop	
 10765  000036  0E80               	movlw	128
 10766  000038  ECEC  F023         	call	_lcdInst
 10767                           
 10768                           ;Test.c: 201: printf("ACTUATORS");
 10769  00003C  0E91               	movlw	low STR_88
 10770  00003E  0100               	movlb	0	; () banked
 10771  000040  6F8E               	movwf	printf@f& (0+255),b
 10772  000042  0EFF               	movlw	high STR_88
 10773  000044  0100               	movlb	0	; () banked
 10774  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10775  000048  ECB8  F008         	call	_printf	;wreg free
 10776                           
 10777                           ;Test.c: 202: lcdInst(0b11000000);;
 10778  00004C  0EC0               	movlw	192
 10779  00004E  ECEC  F023         	call	_lcdInst
 10780                           
 10781                           ;Test.c: 203: printf("PUSH TO START");
 10782  000052  0E0B               	movlw	low STR_71
 10783  000054  0100               	movlb	0	; () banked
 10784  000056  6F8E               	movwf	printf@f& (0+255),b
 10785  000058  0EFF               	movlw	high STR_71
 10786  00005A  0100               	movlb	0	; () banked
 10787  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10788  00005E  ECB8  F008         	call	_printf	;wreg free
 10789                           
 10790                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10791  000062  0E05               	movlw	5
 10792  000064  0100               	movlb	0	; () banked
 10793  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10794  000068  0E0F               	movlw	15
 10795  00006A  0100               	movlb	0	; () banked
 10796  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10797  00006E  0EF1               	movlw	241
 10798  000070                     u7717:
 10799  000070  2EE8               	decfsz	wreg,f,c
 10800  000072  D7FE               	bra	u7717
 10801  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10802  000076  D7FC               	bra	u7717
 10803  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10804  00007A  D7FA               	bra	u7717
 10805  00007C                     l1100:
 10806  00007C  A281               	btfss	3969,1,c	;volatile
 10807  00007E  D7FE               	goto	l1100
 10808  000080                     l1103:
 10809  000080  B281               	btfsc	3969,1,c	;volatile
 10810  000082  D7FE               	goto	l1103
 10811                           
 10812                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10813  000084  0E01               	movlw	1
 10814  000086  ECEC  F023         	call	_lcdInst
 10815  00008A  0E68               	movlw	104
 10816  00008C  0100               	movlb	0	; () banked
 10817  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10818  000090  0EE4               	movlw	228
 10819  000092                     u7727:
 10820  000092  2EE8               	decfsz	wreg,f,c
 10821  000094  D7FE               	bra	u7727
 10822  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10823  000098  D7FC               	bra	u7727
 10824  00009A  F000               	nop	
 10825  00009C  0E80               	movlw	128
 10826  00009E  ECEC  F023         	call	_lcdInst
 10827                           
 10828                           ;Test.c: 212: printf("TST: DC MOTORS");
 10829  0000A2  0EC3               	movlw	low STR_90
 10830  0000A4  0100               	movlb	0	; () banked
 10831  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10832  0000A8  0EFE               	movlw	high STR_90
 10833  0000AA  0100               	movlb	0	; () banked
 10834  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10835  0000AE  ECB8  F008         	call	_printf	;wreg free
 10836                           
 10837                           ;Test.c: 213: lcdInst(0b11000000);;
 10838  0000B2  0EC0               	movlw	192
 10839  0000B4  ECEC  F023         	call	_lcdInst
 10840                           
 10841                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10842  0000B8  0EE1               	movlw	low STR_91
 10843  0000BA  0100               	movlb	0	; () banked
 10844  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10845  0000BE  0EFE               	movlw	high STR_91
 10846  0000C0  0100               	movlb	0	; () banked
 10847  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10848  0000C4  ECB8  F008         	call	_printf	;wreg free
 10849                           
 10850                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10851  0000C8  8A89               	bsf	3977,5,c	;volatile
 10852                           
 10853                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10854  0000CA  0E00               	movlw	0
 10855  0000CC  0100               	movlb	0	; () banked
 10856  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10857  0000D0  0E00               	movlw	0
 10858  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10859                           
 10860                           ; BSR set to: 0
 10861  0000D4  0100               	movlb	0	; () banked
 10862  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10863  0000D8  D008               	goto	l6718
 10864  0000DA  0100               	movlb	0	; () banked
 10865  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10866  0000DE  E123               	bnz	l1107
 10867  0000E0  0E05               	movlw	5
 10868  0000E2  0100               	movlb	0	; () banked
 10869  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10870  0000E6  B0D8               	btfsc	status,0,c
 10871  0000E8  D01E               	goto	l1107
 10872  0000EA                     l6718:
 10873                           
 10874                           ; BSR set to: 0
 10875  0000EA  0E00               	movlw	0
 10876  0000EC  0100               	movlb	0	; () banked
 10877  0000EE  6FAD               	movwf	actuatorTest@i_1638& (0+255),b
 10878  0000F0                     l6720:
 10879                           
 10880                           ; BSR set to: 0
 10881  0000F0  0E63               	movlw	99
 10882  0000F2  0100               	movlb	0	; () banked
 10883  0000F4  65AD               	cpfsgt	actuatorTest@i_1638& (0+255),b
 10884  0000F6  D001               	goto	l6724
 10885  0000F8  D00C               	goto	l6728
 10886  0000FA                     l6724:
 10887                           
 10888                           ; BSR set to: 0
 10889  0000FA  0E68               	movlw	104
 10890  0000FC  0100               	movlb	0	; () banked
 10891  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10892  000100  0EE4               	movlw	228
 10893  000102                     u7737:
 10894  000102  2EE8               	decfsz	wreg,f,c
 10895  000104  D7FE               	bra	u7737
 10896  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10897  000108  D7FC               	bra	u7737
 10898  00010A  F000               	nop	
 10899  00010C  0100               	movlb	0	; () banked
 10900  00010E  2BAD               	incf	actuatorTest@i_1638& (0+255),f,b
 10901  000110  D7EF               	goto	l6720
 10902  000112                     l6728:
 10903                           
 10904                           ; BSR set to: 0
 10905  000112  0100               	movlb	0	; () banked
 10906  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10907  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10908                           
 10909                           ; BSR set to: 0
 10910  000118  0100               	movlb	0	; () banked
 10911  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10912  00011C  D7E6               	goto	l6718
 10913  00011E  0100               	movlb	0	; () banked
 10914  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10915  000122  E101               	bnz	u5230
 10916  000124  D7DD               	goto	L7
 10917  000126                     u5230:
 10918  000126                     l1107:
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10922  000126  9A89               	bcf	3977,5,c	;volatile
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10926  000128  0E01               	movlw	1
 10927  00012A  ECEC  F023         	call	_lcdInst
 10928  00012E  0E68               	movlw	104
 10929  000130  0100               	movlb	0	; () banked
 10930  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10931  000134  0EE4               	movlw	228
 10932  000136                     u7747:
 10933  000136  2EE8               	decfsz	wreg,f,c
 10934  000138  D7FE               	bra	u7747
 10935  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10936  00013C  D7FC               	bra	u7747
 10937  00013E  F000               	nop	
 10938  000140  0E80               	movlw	128
 10939  000142  ECEC  F023         	call	_lcdInst
 10940                           
 10941                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10942  000146  0E81               	movlw	low STR_92
 10943  000148  0100               	movlb	0	; () banked
 10944  00014A  6F8E               	movwf	printf@f& (0+255),b
 10945  00014C  0EFC               	movlw	high STR_92
 10946  00014E  0100               	movlb	0	; () banked
 10947  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10948  000152  ECB8  F008         	call	_printf	;wreg free
 10949                           
 10950                           ;Test.c: 225: lcdInst(0b11000000);;
 10951  000156  0EC0               	movlw	192
 10952  000158  ECEC  F023         	call	_lcdInst
 10953                           
 10954                           ;Test.c: 226: printf("PIN RA3...");
 10955  00015C  0E5B               	movlw	low STR_93
 10956  00015E  0100               	movlb	0	; () banked
 10957  000160  6F8E               	movwf	printf@f& (0+255),b
 10958  000162  0EFF               	movlw	high STR_93
 10959  000164  0100               	movlb	0	; () banked
 10960  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10961  000168  ECB8  F008         	call	_printf	;wreg free
 10962                           
 10963                           ;Test.c: 227: for(i=0;i<5;i++){
 10964  00016C  0E00               	movlw	0
 10965  00016E  0100               	movlb	0	; () banked
 10966  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10967  000172  0E00               	movlw	0
 10968  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10969                           
 10970                           ; BSR set to: 0
 10971  000176  0100               	movlb	0	; () banked
 10972  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10973  00017A  D008               	goto	l1110
 10974  00017C  0100               	movlb	0	; () banked
 10975  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10976  000180  E12C               	bnz	l1111
 10977  000182  0E05               	movlw	5
 10978  000184  0100               	movlb	0	; () banked
 10979  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10980  000188  B0D8               	btfsc	status,0,c
 10981  00018A  D027               	goto	l1111
 10982  00018C                     l1110:
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10986  00018C  8689               	bsf	3977,3,c	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10990  00018E  0E0D               	movlw	13
 10991  000190  0100               	movlb	0	; () banked
 10992  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10993  000194  0E2D               	movlw	45
 10994  000196  0100               	movlb	0	; () banked
 10995  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10996  00019A  0ED7               	movlw	215
 10997  00019C                     u7757:
 10998  00019C  2EE8               	decfsz	wreg,f,c
 10999  00019E  D7FE               	bra	u7757
 11000  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11001  0001A2  D7FC               	bra	u7757
 11002  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11003  0001A6  D7FA               	bra	u7757
 11004  0001A8  D000               	nop2	
 11005                           
 11006                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 11007  0001AA  9689               	bcf	3977,3,c	;volatile
 11008                           
 11009                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11010  0001AC  0E1D               	movlw	29
 11011  0001AE  0100               	movlb	0	; () banked
 11012  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11013  0001B2  0E69               	movlw	105
 11014  0001B4  0100               	movlb	0	; () banked
 11015  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11016  0001B8  0EA5               	movlw	165
 11017  0001BA                     u7767:
 11018  0001BA  2EE8               	decfsz	wreg,f,c
 11019  0001BC  D7FE               	bra	u7767
 11020  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11021  0001C0  D7FC               	bra	u7767
 11022  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11023  0001C4  D7FA               	bra	u7767
 11024  0001C6  0100               	movlb	0	; () banked
 11025  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11026  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11027  0001CC  0100               	movlb	0	; () banked
 11028  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11029  0001D0  D7DD               	goto	l1110
 11030  0001D2  0100               	movlb	0	; () banked
 11031  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11032  0001D6  E101               	bnz	u5250
 11033  0001D8  D7D4               	goto	L8
 11034  0001DA                     u5250:
 11035  0001DA                     l1111:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;Test.c: 232: }
 11039                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 11040  0001DA  9689               	bcf	3977,3,c	;volatile
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11044  0001DC  0E01               	movlw	1
 11045  0001DE  ECEC  F023         	call	_lcdInst
 11046  0001E2  0E68               	movlw	104
 11047  0001E4  0100               	movlb	0	; () banked
 11048  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11049  0001E8  0EE4               	movlw	228
 11050  0001EA                     u7777:
 11051  0001EA  2EE8               	decfsz	wreg,f,c
 11052  0001EC  D7FE               	bra	u7777
 11053  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11054  0001F0  D7FC               	bra	u7777
 11055  0001F2  F000               	nop	
 11056  0001F4  0E80               	movlw	128
 11057  0001F6  ECEC  F023         	call	_lcdInst
 11058                           
 11059                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 11060  0001FA  0E92               	movlw	low STR_94
 11061  0001FC  0100               	movlb	0	; () banked
 11062  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11063  000200  0EFC               	movlw	high STR_94
 11064  000202  0100               	movlb	0	; () banked
 11065  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11066  000206  ECB8  F008         	call	_printf	;wreg free
 11067                           
 11068                           ;Test.c: 241: lcdInst(0b11000000);;
 11069  00020A  0EC0               	movlw	192
 11070  00020C  ECEC  F023         	call	_lcdInst
 11071                           
 11072                           ;Test.c: 242: printf("PIN RA4...");
 11073  000210  0E66               	movlw	low STR_95
 11074  000212  0100               	movlb	0	; () banked
 11075  000214  6F8E               	movwf	printf@f& (0+255),b
 11076  000216  0EFF               	movlw	high STR_95
 11077  000218  0100               	movlb	0	; () banked
 11078  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11079  00021C  ECB8  F008         	call	_printf	;wreg free
 11080                           
 11081                           ;Test.c: 243: for(i=0;i<5;i++){
 11082  000220  0E00               	movlw	0
 11083  000222  0100               	movlb	0	; () banked
 11084  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11085  000226  0E00               	movlw	0
 11086  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11087                           
 11088                           ; BSR set to: 0
 11089  00022A  0100               	movlb	0	; () banked
 11090  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11091  00022E  D008               	goto	l1112
 11092  000230  0100               	movlb	0	; () banked
 11093  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11094  000234  E12C               	bnz	l1113
 11095  000236  0E05               	movlw	5
 11096  000238  0100               	movlb	0	; () banked
 11097  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11098  00023C  B0D8               	btfsc	status,0,c
 11099  00023E  D027               	goto	l1113
 11100  000240                     l1112:
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;Test.c: 244: LATAbits.LATA4 = 1;
 11104  000240  8889               	bsf	3977,4,c	;volatile
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 11108  000242  0E0D               	movlw	13
 11109  000244  0100               	movlb	0	; () banked
 11110  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11111  000248  0E2D               	movlw	45
 11112  00024A  0100               	movlb	0	; () banked
 11113  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11114  00024E  0ED7               	movlw	215
 11115  000250                     u7787:
 11116  000250  2EE8               	decfsz	wreg,f,c
 11117  000252  D7FE               	bra	u7787
 11118  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11119  000256  D7FC               	bra	u7787
 11120  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11121  00025A  D7FA               	bra	u7787
 11122  00025C  D000               	nop2	
 11123                           
 11124                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 11125  00025E  9889               	bcf	3977,4,c	;volatile
 11126                           
 11127                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11128  000260  0E1D               	movlw	29
 11129  000262  0100               	movlb	0	; () banked
 11130  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11131  000266  0E69               	movlw	105
 11132  000268  0100               	movlb	0	; () banked
 11133  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11134  00026C  0EA5               	movlw	165
 11135  00026E                     u7797:
 11136  00026E  2EE8               	decfsz	wreg,f,c
 11137  000270  D7FE               	bra	u7797
 11138  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11139  000274  D7FC               	bra	u7797
 11140  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11141  000278  D7FA               	bra	u7797
 11142  00027A  0100               	movlb	0	; () banked
 11143  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11144  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11145  000280  0100               	movlb	0	; () banked
 11146  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11147  000284  D7DD               	goto	l1112
 11148  000286  0100               	movlb	0	; () banked
 11149  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11150  00028A  E101               	bnz	u5270
 11151  00028C  D7D4               	goto	L9
 11152  00028E                     u5270:
 11153  00028E                     l1113:
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;Test.c: 248: }
 11157                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 11158  00028E  9889               	bcf	3977,4,c	;volatile
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11162  000290  0E01               	movlw	1
 11163  000292  ECEC  F023         	call	_lcdInst
 11164  000296  0E68               	movlw	104
 11165  000298  0100               	movlb	0	; () banked
 11166  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11167  00029C  0EE4               	movlw	228
 11168  00029E                     u7807:
 11169  00029E  2EE8               	decfsz	wreg,f,c
 11170  0002A0  D7FE               	bra	u7807
 11171  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11172  0002A4  D7FC               	bra	u7807
 11173  0002A6  F000               	nop	
 11174  0002A8  0E80               	movlw	128
 11175  0002AA  ECEC  F023         	call	_lcdInst
 11176                           
 11177                           ;Test.c: 253: machine_state = Sorting_state;
 11178  0002AE  0E01               	movlw	1
 11179  0002B0  0100               	movlb	0	; () banked
 11180  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;Test.c: 254: was_low_1 = 0;
 11184  0002B4  0E00               	movlw	0
 11185  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11186  0002B8  0E00               	movlw	0
 11187  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;Test.c: 255: was_low_1 = 0;
 11191  0002BC  0E00               	movlw	0
 11192  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11193  0002C0  0E00               	movlw	0
 11194  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;Test.c: 262: printf("TST: PAN SERVO");
 11198  0002C4  0EA5               	movlw	low STR_96
 11199  0002C6  0100               	movlb	0	; () banked
 11200  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11201  0002CA  0EFE               	movlw	high STR_96
 11202  0002CC  0100               	movlb	0	; () banked
 11203  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11204  0002D0  ECB8  F008         	call	_printf	;wreg free
 11205                           
 11206                           ;Test.c: 263: lcdInst(0b11000000);;
 11207  0002D4  0EC0               	movlw	192
 11208  0002D6  ECEC  F023         	call	_lcdInst
 11209                           
 11210                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11211  0002DA  0E0A               	movlw	low STR_97
 11212  0002DC  0100               	movlb	0	; () banked
 11213  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11214  0002E0  0EFC               	movlw	high STR_97
 11215  0002E2  0100               	movlb	0	; () banked
 11216  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11217  0002E6  ECB8  F008         	call	_printf	;wreg free
 11218                           
 11219                           ;Test.c: 265: updateServoPosition(1200, 1);
 11220  0002EA  0E04               	movlw	4
 11221  0002EC  0100               	movlb	0	; () banked
 11222  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11223  0002F0  0EB0               	movlw	176
 11224  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11225  0002F4  0E00               	movlw	0
 11226  0002F6  0100               	movlb	0	; () banked
 11227  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11228  0002FA  0E01               	movlw	1
 11229  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11230  0002FE  EC24  F01E         	call	_updateServoPosition	;wreg free
 11231                           
 11232                           ;Test.c: 266: TMR1ON = 1;
 11233  000302  80CD               	bsf	4045,0,c	;volatile
 11234                           
 11235                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11236  000304  0E00               	movlw	0
 11237  000306  0100               	movlb	0	; () banked
 11238  000308  6FAE               	movwf	actuatorTest@i_1645& (0+255),b
 11239  00030A                     l6804:
 11240                           
 11241                           ; BSR set to: 0
 11242  00030A  0E63               	movlw	99
 11243  00030C  0100               	movlb	0	; () banked
 11244  00030E  65AE               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11245  000310  D001               	goto	l6808
 11246  000312  D00C               	goto	l6812
 11247  000314                     l6808:
 11248                           
 11249                           ; BSR set to: 0
 11250  000314  0E68               	movlw	104
 11251  000316  0100               	movlb	0	; () banked
 11252  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11253  00031A  0EE4               	movlw	228
 11254  00031C                     u7817:
 11255  00031C  2EE8               	decfsz	wreg,f,c
 11256  00031E  D7FE               	bra	u7817
 11257  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11258  000322  D7FC               	bra	u7817
 11259  000324  F000               	nop	
 11260  000326  0100               	movlb	0	; () banked
 11261  000328  2BAE               	incf	actuatorTest@i_1645& (0+255),f,b
 11262  00032A  D7EF               	goto	l6804
 11263  00032C                     l6812:
 11264                           
 11265                           ; BSR set to: 0
 11266  00032C  0E00               	movlw	0
 11267  00032E  0100               	movlb	0	; () banked
 11268  000330  6FAF               	movwf	actuatorTest@i_1646& (0+255),b
 11269  000332                     l6814:
 11270                           
 11271                           ; BSR set to: 0
 11272  000332  0E63               	movlw	99
 11273  000334  0100               	movlb	0	; () banked
 11274  000336  65AF               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11275  000338  D001               	goto	l6818
 11276  00033A  D00C               	goto	l6822
 11277  00033C                     l6818:
 11278                           
 11279                           ; BSR set to: 0
 11280  00033C  0E68               	movlw	104
 11281  00033E  0100               	movlb	0	; () banked
 11282  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11283  000342  0EE4               	movlw	228
 11284  000344                     u7827:
 11285  000344  2EE8               	decfsz	wreg,f,c
 11286  000346  D7FE               	bra	u7827
 11287  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11288  00034A  D7FC               	bra	u7827
 11289  00034C  F000               	nop	
 11290  00034E  0100               	movlb	0	; () banked
 11291  000350  2BAF               	incf	actuatorTest@i_1646& (0+255),f,b
 11292  000352  D7EF               	goto	l6814
 11293  000354                     l6822:
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11297  000354  0E80               	movlw	128
 11298  000356  ECEC  F023         	call	_lcdInst
 11299  00035A  0EC0               	movlw	192
 11300  00035C  ECEC  F023         	call	_lcdInst
 11301                           
 11302                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11303  000360  0EF9               	movlw	low STR_98
 11304  000362  0100               	movlb	0	; () banked
 11305  000364  6F8E               	movwf	printf@f& (0+255),b
 11306  000366  0EFB               	movlw	high STR_98
 11307  000368  0100               	movlb	0	; () banked
 11308  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11309  00036C  ECB8  F008         	call	_printf	;wreg free
 11310                           
 11311                           ;Test.c: 271: updateServoPosition(500, 1);
 11312  000370  0E01               	movlw	1
 11313  000372  0100               	movlb	0	; () banked
 11314  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11315  000376  0EF4               	movlw	244
 11316  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11317  00037A  0E00               	movlw	0
 11318  00037C  0100               	movlb	0	; () banked
 11319  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11320  000380  0E01               	movlw	1
 11321  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11322  000384  EC24  F01E         	call	_updateServoPosition	;wreg free
 11323                           
 11324                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11325  000388  0E00               	movlw	0
 11326  00038A  0100               	movlb	0	; () banked
 11327  00038C  6FB0               	movwf	actuatorTest@i_1648& (0+255),b
 11328  00038E                     l6830:
 11329                           
 11330                           ; BSR set to: 0
 11331  00038E  0E63               	movlw	99
 11332  000390  0100               	movlb	0	; () banked
 11333  000392  65B0               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11334  000394  D001               	goto	l6834
 11335  000396  D00C               	goto	l6838
 11336  000398                     l6834:
 11337                           
 11338                           ; BSR set to: 0
 11339  000398  0E68               	movlw	104
 11340  00039A  0100               	movlb	0	; () banked
 11341  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11342  00039E  0EE4               	movlw	228
 11343  0003A0                     u7837:
 11344  0003A0  2EE8               	decfsz	wreg,f,c
 11345  0003A2  D7FE               	bra	u7837
 11346  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11347  0003A6  D7FC               	bra	u7837
 11348  0003A8  F000               	nop	
 11349  0003AA  0100               	movlb	0	; () banked
 11350  0003AC  2BB0               	incf	actuatorTest@i_1648& (0+255),f,b
 11351  0003AE  D7EF               	goto	l6830
 11352  0003B0                     l6838:
 11353                           
 11354                           ; BSR set to: 0
 11355  0003B0  0E00               	movlw	0
 11356  0003B2  0100               	movlb	0	; () banked
 11357  0003B4  6FB1               	movwf	actuatorTest@i_1649& (0+255),b
 11358  0003B6                     l6840:
 11359                           
 11360                           ; BSR set to: 0
 11361  0003B6  0E63               	movlw	99
 11362  0003B8  0100               	movlb	0	; () banked
 11363  0003BA  65B1               	cpfsgt	actuatorTest@i_1649& (0+255),b
 11364  0003BC  D001               	goto	l6844
 11365  0003BE  D00C               	goto	l6848
 11366  0003C0                     l6844:
 11367                           
 11368                           ; BSR set to: 0
 11369  0003C0  0E68               	movlw	104
 11370  0003C2  0100               	movlb	0	; () banked
 11371  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11372  0003C6  0EE4               	movlw	228
 11373  0003C8                     u7847:
 11374  0003C8  2EE8               	decfsz	wreg,f,c
 11375  0003CA  D7FE               	bra	u7847
 11376  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11377  0003CE  D7FC               	bra	u7847
 11378  0003D0  F000               	nop	
 11379  0003D2  0100               	movlb	0	; () banked
 11380  0003D4  2BB1               	incf	actuatorTest@i_1649& (0+255),f,b
 11381  0003D6  D7EF               	goto	l6840
 11382  0003D8                     l6848:
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11386  0003D8  0E80               	movlw	128
 11387  0003DA  ECEC  F023         	call	_lcdInst
 11388  0003DE  0EC0               	movlw	192
 11389  0003E0  ECEC  F023         	call	_lcdInst
 11390                           
 11391                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11392  0003E4  0ED7               	movlw	low STR_99
 11393  0003E6  0100               	movlb	0	; () banked
 11394  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11395  0003EA  0EFB               	movlw	high STR_99
 11396  0003EC  0100               	movlb	0	; () banked
 11397  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11398  0003F0  ECB8  F008         	call	_printf	;wreg free
 11399                           
 11400                           ;Test.c: 276: updateServoPosition(2100, 1);
 11401  0003F4  0E08               	movlw	8
 11402  0003F6  0100               	movlb	0	; () banked
 11403  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11404  0003FA  0E34               	movlw	52
 11405  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11406  0003FE  0E00               	movlw	0
 11407  000400  0100               	movlb	0	; () banked
 11408  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11409  000404  0E01               	movlw	1
 11410  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11411  000408  EC24  F01E         	call	_updateServoPosition	;wreg free
 11412                           
 11413                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11414  00040C  0E00               	movlw	0
 11415  00040E  0100               	movlb	0	; () banked
 11416  000410  6FB2               	movwf	actuatorTest@i_1651& (0+255),b
 11417  000412                     l6856:
 11418                           
 11419                           ; BSR set to: 0
 11420  000412  0E63               	movlw	99
 11421  000414  0100               	movlb	0	; () banked
 11422  000416  65B2               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11423  000418  D001               	goto	l6860
 11424  00041A  D00C               	goto	l6864
 11425  00041C                     l6860:
 11426                           
 11427                           ; BSR set to: 0
 11428  00041C  0E68               	movlw	104
 11429  00041E  0100               	movlb	0	; () banked
 11430  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11431  000422  0EE4               	movlw	228
 11432  000424                     u7857:
 11433  000424  2EE8               	decfsz	wreg,f,c
 11434  000426  D7FE               	bra	u7857
 11435  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11436  00042A  D7FC               	bra	u7857
 11437  00042C  F000               	nop	
 11438  00042E  0100               	movlb	0	; () banked
 11439  000430  2BB2               	incf	actuatorTest@i_1651& (0+255),f,b
 11440  000432  D7EF               	goto	l6856
 11441  000434                     l6864:
 11442                           
 11443                           ; BSR set to: 0
 11444  000434  0E00               	movlw	0
 11445  000436  0100               	movlb	0	; () banked
 11446  000438  6FB3               	movwf	actuatorTest@i_1652& (0+255),b
 11447  00043A                     l6866:
 11448                           
 11449                           ; BSR set to: 0
 11450  00043A  0E63               	movlw	99
 11451  00043C  0100               	movlb	0	; () banked
 11452  00043E  65B3               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11453  000440  D001               	goto	l6870
 11454  000442  D00C               	goto	l6874
 11455  000444                     l6870:
 11456                           
 11457                           ; BSR set to: 0
 11458  000444  0E68               	movlw	104
 11459  000446  0100               	movlb	0	; () banked
 11460  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11461  00044A  0EE4               	movlw	228
 11462  00044C                     u7867:
 11463  00044C  2EE8               	decfsz	wreg,f,c
 11464  00044E  D7FE               	bra	u7867
 11465  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11466  000452  D7FC               	bra	u7867
 11467  000454  F000               	nop	
 11468  000456  0100               	movlb	0	; () banked
 11469  000458  2BB3               	incf	actuatorTest@i_1652& (0+255),f,b
 11470  00045A  D7EF               	goto	l6866
 11471  00045C                     l6874:
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11475  00045C  0E80               	movlw	128
 11476  00045E  ECEC  F023         	call	_lcdInst
 11477  000462  0EC0               	movlw	192
 11478  000464  ECEC  F023         	call	_lcdInst
 11479                           
 11480                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11481  000468  0E2C               	movlw	low STR_100
 11482  00046A  0100               	movlb	0	; () banked
 11483  00046C  6F8E               	movwf	printf@f& (0+255),b
 11484  00046E  0EFC               	movlw	high STR_100
 11485  000470  0100               	movlb	0	; () banked
 11486  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11487  000474  ECB8  F008         	call	_printf	;wreg free
 11488                           
 11489                           ;Test.c: 281: updateServoPosition(1700, 1);
 11490  000478  0E06               	movlw	6
 11491  00047A  0100               	movlb	0	; () banked
 11492  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11493  00047E  0EA4               	movlw	164
 11494  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11495  000482  0E00               	movlw	0
 11496  000484  0100               	movlb	0	; () banked
 11497  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11498  000488  0E01               	movlw	1
 11499  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11500  00048C  EC24  F01E         	call	_updateServoPosition	;wreg free
 11501                           
 11502                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11503  000490  0E00               	movlw	0
 11504  000492  0100               	movlb	0	; () banked
 11505  000494  6FB4               	movwf	actuatorTest@i_1654& (0+255),b
 11506  000496                     l6882:
 11507                           
 11508                           ; BSR set to: 0
 11509  000496  0E63               	movlw	99
 11510  000498  0100               	movlb	0	; () banked
 11511  00049A  65B4               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11512  00049C  D001               	goto	l6886
 11513  00049E  D00C               	goto	l6890
 11514  0004A0                     l6886:
 11515                           
 11516                           ; BSR set to: 0
 11517  0004A0  0E68               	movlw	104
 11518  0004A2  0100               	movlb	0	; () banked
 11519  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11520  0004A6  0EE4               	movlw	228
 11521  0004A8                     u7877:
 11522  0004A8  2EE8               	decfsz	wreg,f,c
 11523  0004AA  D7FE               	bra	u7877
 11524  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11525  0004AE  D7FC               	bra	u7877
 11526  0004B0  F000               	nop	
 11527  0004B2  0100               	movlb	0	; () banked
 11528  0004B4  2BB4               	incf	actuatorTest@i_1654& (0+255),f,b
 11529  0004B6  D7EF               	goto	l6882
 11530  0004B8                     l6890:
 11531                           
 11532                           ; BSR set to: 0
 11533  0004B8  0E00               	movlw	0
 11534  0004BA  0100               	movlb	0	; () banked
 11535  0004BC  6FB5               	movwf	actuatorTest@i_1655& (0+255),b
 11536  0004BE                     l6892:
 11537                           
 11538                           ; BSR set to: 0
 11539  0004BE  0E63               	movlw	99
 11540  0004C0  0100               	movlb	0	; () banked
 11541  0004C2  65B5               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11542  0004C4  D001               	goto	l6896
 11543  0004C6  D00C               	goto	l6900
 11544  0004C8                     l6896:
 11545                           
 11546                           ; BSR set to: 0
 11547  0004C8  0E68               	movlw	104
 11548  0004CA  0100               	movlb	0	; () banked
 11549  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11550  0004CE  0EE4               	movlw	228
 11551  0004D0                     u7887:
 11552  0004D0  2EE8               	decfsz	wreg,f,c
 11553  0004D2  D7FE               	bra	u7887
 11554  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11555  0004D6  D7FC               	bra	u7887
 11556  0004D8  F000               	nop	
 11557  0004DA  0100               	movlb	0	; () banked
 11558  0004DC  2BB5               	incf	actuatorTest@i_1655& (0+255),f,b
 11559  0004DE  D7EF               	goto	l6892
 11560  0004E0                     l6900:
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11564  0004E0  0E80               	movlw	128
 11565  0004E2  ECEC  F023         	call	_lcdInst
 11566  0004E6  0EC0               	movlw	192
 11567  0004E8  ECEC  F023         	call	_lcdInst
 11568                           
 11569                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11570  0004EC  0E3D               	movlw	low STR_101
 11571  0004EE  0100               	movlb	0	; () banked
 11572  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11573  0004F2  0EFC               	movlw	high STR_101
 11574  0004F4  0100               	movlb	0	; () banked
 11575  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11576  0004F8  ECB8  F008         	call	_printf	;wreg free
 11577                           
 11578                           ;Test.c: 286: updateServoPosition(750, 1);
 11579  0004FC  0E02               	movlw	2
 11580  0004FE  0100               	movlb	0	; () banked
 11581  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11582  000502  0EEE               	movlw	238
 11583  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11584  000506  0E00               	movlw	0
 11585  000508  0100               	movlb	0	; () banked
 11586  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11587  00050C  0E01               	movlw	1
 11588  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11589  000510  EC24  F01E         	call	_updateServoPosition	;wreg free
 11590                           
 11591                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11592  000514  0E00               	movlw	0
 11593  000516  0100               	movlb	0	; () banked
 11594  000518  6FB6               	movwf	actuatorTest@i_1657& (0+255),b
 11595  00051A                     l6908:
 11596                           
 11597                           ; BSR set to: 0
 11598  00051A  0E63               	movlw	99
 11599  00051C  0100               	movlb	0	; () banked
 11600  00051E  65B6               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11601  000520  D001               	goto	l6912
 11602  000522  D00C               	goto	l6916
 11603  000524                     l6912:
 11604                           
 11605                           ; BSR set to: 0
 11606  000524  0E68               	movlw	104
 11607  000526  0100               	movlb	0	; () banked
 11608  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11609  00052A  0EE4               	movlw	228
 11610  00052C                     u7897:
 11611  00052C  2EE8               	decfsz	wreg,f,c
 11612  00052E  D7FE               	bra	u7897
 11613  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11614  000532  D7FC               	bra	u7897
 11615  000534  F000               	nop	
 11616  000536  0100               	movlb	0	; () banked
 11617  000538  2BB6               	incf	actuatorTest@i_1657& (0+255),f,b
 11618  00053A  D7EF               	goto	l6908
 11619  00053C                     l6916:
 11620                           
 11621                           ; BSR set to: 0
 11622  00053C  0E00               	movlw	0
 11623  00053E  0100               	movlb	0	; () banked
 11624  000540  6FB7               	movwf	actuatorTest@i_1658& (0+255),b
 11625  000542                     l6918:
 11626                           
 11627                           ; BSR set to: 0
 11628  000542  0E63               	movlw	99
 11629  000544  0100               	movlb	0	; () banked
 11630  000546  65B7               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11631  000548  D001               	goto	l6922
 11632  00054A  D00C               	goto	l6926
 11633  00054C                     l6922:
 11634                           
 11635                           ; BSR set to: 0
 11636  00054C  0E68               	movlw	104
 11637  00054E  0100               	movlb	0	; () banked
 11638  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11639  000552  0EE4               	movlw	228
 11640  000554                     u7907:
 11641  000554  2EE8               	decfsz	wreg,f,c
 11642  000556  D7FE               	bra	u7907
 11643  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11644  00055A  D7FC               	bra	u7907
 11645  00055C  F000               	nop	
 11646  00055E  0100               	movlb	0	; () banked
 11647  000560  2BB7               	incf	actuatorTest@i_1658& (0+255),f,b
 11648  000562  D7EF               	goto	l6918
 11649  000564                     l6926:
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11653  000564  0E80               	movlw	128
 11654  000566  ECEC  F023         	call	_lcdInst
 11655  00056A  0EC0               	movlw	192
 11656  00056C  ECEC  F023         	call	_lcdInst
 11657                           
 11658                           ;Test.c: 290: printf("MID -- 2s       ");
 11659  000570  0EB5               	movlw	low STR_102
 11660  000572  0100               	movlb	0	; () banked
 11661  000574  6F8E               	movwf	printf@f& (0+255),b
 11662  000576  0EFB               	movlw	high STR_102
 11663  000578  0100               	movlb	0	; () banked
 11664  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11665  00057C  ECB8  F008         	call	_printf	;wreg free
 11666                           
 11667                           ;Test.c: 291: updateServoPosition(1200, 1);
 11668  000580  0E04               	movlw	4
 11669  000582  0100               	movlb	0	; () banked
 11670  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11671  000586  0EB0               	movlw	176
 11672  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11673  00058A  0E00               	movlw	0
 11674  00058C  0100               	movlb	0	; () banked
 11675  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11676  000590  0E01               	movlw	1
 11677  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11678  000594  EC24  F01E         	call	_updateServoPosition	;wreg free
 11679                           
 11680                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11681  000598  0E00               	movlw	0
 11682  00059A  0100               	movlb	0	; () banked
 11683  00059C  6FB8               	movwf	actuatorTest@i_1660& (0+255),b
 11684  00059E                     l6934:
 11685                           
 11686                           ; BSR set to: 0
 11687  00059E  0E63               	movlw	99
 11688  0005A0  0100               	movlb	0	; () banked
 11689  0005A2  65B8               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11690  0005A4  D001               	goto	l6938
 11691  0005A6  D00C               	goto	l6942
 11692  0005A8                     l6938:
 11693                           
 11694                           ; BSR set to: 0
 11695  0005A8  0E68               	movlw	104
 11696  0005AA  0100               	movlb	0	; () banked
 11697  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11698  0005AE  0EE4               	movlw	228
 11699  0005B0                     u7917:
 11700  0005B0  2EE8               	decfsz	wreg,f,c
 11701  0005B2  D7FE               	bra	u7917
 11702  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11703  0005B6  D7FC               	bra	u7917
 11704  0005B8  F000               	nop	
 11705  0005BA  0100               	movlb	0	; () banked
 11706  0005BC  2BB8               	incf	actuatorTest@i_1660& (0+255),f,b
 11707  0005BE  D7EF               	goto	l6934
 11708  0005C0                     l6942:
 11709                           
 11710                           ; BSR set to: 0
 11711  0005C0  0E00               	movlw	0
 11712  0005C2  0100               	movlb	0	; () banked
 11713  0005C4  6FB9               	movwf	actuatorTest@i_1661& (0+255),b
 11714  0005C6                     l6944:
 11715                           
 11716                           ; BSR set to: 0
 11717  0005C6  0E63               	movlw	99
 11718  0005C8  0100               	movlb	0	; () banked
 11719  0005CA  65B9               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11720  0005CC  D001               	goto	l6948
 11721  0005CE  D00C               	goto	l1137
 11722  0005D0                     l6948:
 11723                           
 11724                           ; BSR set to: 0
 11725  0005D0  0E68               	movlw	104
 11726  0005D2  0100               	movlb	0	; () banked
 11727  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11728  0005D6  0EE4               	movlw	228
 11729  0005D8                     u7927:
 11730  0005D8  2EE8               	decfsz	wreg,f,c
 11731  0005DA  D7FE               	bra	u7927
 11732  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11733  0005DE  D7FC               	bra	u7927
 11734  0005E0  F000               	nop	
 11735  0005E2  0100               	movlb	0	; () banked
 11736  0005E4  2BB9               	incf	actuatorTest@i_1661& (0+255),f,b
 11737  0005E6  D7EF               	goto	l6944
 11738  0005E8                     l1137:
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;Test.c: 293: TMR1ON = 0;
 11742  0005E8  90CD               	bcf	4045,0,c	;volatile
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;Test.c: 300: printf("TST: TILT SERVO");
 11746  0005EA  0E3A               	movlw	low STR_103
 11747  0005EC  0100               	movlb	0	; () banked
 11748  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11749  0005F0  0EFE               	movlw	high STR_103
 11750  0005F2  0100               	movlb	0	; () banked
 11751  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11752  0005F6  ECB8  F008         	call	_printf	;wreg free
 11753                           
 11754                           ;Test.c: 301: lcdInst(0b11000000);;
 11755  0005FA  0EC0               	movlw	192
 11756  0005FC  ECEC  F023         	call	_lcdInst
 11757                           
 11758                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11759  000600  0EE8               	movlw	low STR_104
 11760  000602  0100               	movlb	0	; () banked
 11761  000604  6F8E               	movwf	printf@f& (0+255),b
 11762  000606  0EFB               	movlw	high STR_104
 11763  000608  0100               	movlb	0	; () banked
 11764  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11765  00060C  ECB8  F008         	call	_printf	;wreg free
 11766                           
 11767                           ;Test.c: 303: updateServoPosition(1150, 3);
 11768  000610  0E04               	movlw	4
 11769  000612  0100               	movlb	0	; () banked
 11770  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11771  000616  0E7E               	movlw	126
 11772  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11773  00061A  0E00               	movlw	0
 11774  00061C  0100               	movlb	0	; () banked
 11775  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11776  000620  0E03               	movlw	3
 11777  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11778  000624  EC24  F01E         	call	_updateServoPosition	;wreg free
 11779                           
 11780                           ;Test.c: 304: TMR3ON = 1;
 11781  000628  80B1               	bsf	4017,0,c	;volatile
 11782                           
 11783                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11784  00062A  0E00               	movlw	0
 11785  00062C  0100               	movlb	0	; () banked
 11786  00062E  6FBA               	movwf	actuatorTest@i_1664& (0+255),b
 11787  000630                     l6962:
 11788                           
 11789                           ; BSR set to: 0
 11790  000630  0E63               	movlw	99
 11791  000632  0100               	movlb	0	; () banked
 11792  000634  65BA               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11793  000636  D001               	goto	l6966
 11794  000638  D00C               	goto	l6970
 11795  00063A                     l6966:
 11796                           
 11797                           ; BSR set to: 0
 11798  00063A  0E68               	movlw	104
 11799  00063C  0100               	movlb	0	; () banked
 11800  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11801  000640  0EE4               	movlw	228
 11802  000642                     u7937:
 11803  000642  2EE8               	decfsz	wreg,f,c
 11804  000644  D7FE               	bra	u7937
 11805  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11806  000648  D7FC               	bra	u7937
 11807  00064A  F000               	nop	
 11808  00064C  0100               	movlb	0	; () banked
 11809  00064E  2BBA               	incf	actuatorTest@i_1664& (0+255),f,b
 11810  000650  D7EF               	goto	l6962
 11811  000652                     l6970:
 11812                           
 11813                           ; BSR set to: 0
 11814  000652  0E00               	movlw	0
 11815  000654  0100               	movlb	0	; () banked
 11816  000656  6FBB               	movwf	actuatorTest@i_1665& (0+255),b
 11817  000658                     l6972:
 11818                           
 11819                           ; BSR set to: 0
 11820  000658  0E63               	movlw	99
 11821  00065A  0100               	movlb	0	; () banked
 11822  00065C  65BB               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11823  00065E  D001               	goto	l6976
 11824  000660  D00C               	goto	l6980
 11825  000662                     l6976:
 11826                           
 11827                           ; BSR set to: 0
 11828  000662  0E68               	movlw	104
 11829  000664  0100               	movlb	0	; () banked
 11830  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11831  000668  0EE4               	movlw	228
 11832  00066A                     u7947:
 11833  00066A  2EE8               	decfsz	wreg,f,c
 11834  00066C  D7FE               	bra	u7947
 11835  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11836  000670  D7FC               	bra	u7947
 11837  000672  F000               	nop	
 11838  000674  0100               	movlb	0	; () banked
 11839  000676  2BBB               	incf	actuatorTest@i_1665& (0+255),f,b
 11840  000678  D7EF               	goto	l6972
 11841  00067A                     l6980:
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11845  00067A  0E80               	movlw	128
 11846  00067C  ECEC  F023         	call	_lcdInst
 11847  000680  0EC0               	movlw	192
 11848  000682  ECEC  F023         	call	_lcdInst
 11849                           
 11850                           ;Test.c: 308: printf("DROP -- 2s      ");
 11851  000686  0EC6               	movlw	low STR_105
 11852  000688  0100               	movlb	0	; () banked
 11853  00068A  6F8E               	movwf	printf@f& (0+255),b
 11854  00068C  0EFB               	movlw	high STR_105
 11855  00068E  0100               	movlb	0	; () banked
 11856  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11857  000692  ECB8  F008         	call	_printf	;wreg free
 11858                           
 11859                           ;Test.c: 309: updateServoPosition(1350, 3);
 11860  000696  0E05               	movlw	5
 11861  000698  0100               	movlb	0	; () banked
 11862  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11863  00069C  0E46               	movlw	70
 11864  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11865  0006A0  0E00               	movlw	0
 11866  0006A2  0100               	movlb	0	; () banked
 11867  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11868  0006A6  0E03               	movlw	3
 11869  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11870  0006AA  EC24  F01E         	call	_updateServoPosition	;wreg free
 11871                           
 11872                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11873  0006AE  0E00               	movlw	0
 11874  0006B0  0100               	movlb	0	; () banked
 11875  0006B2  6FBC               	movwf	actuatorTest@i_1667& (0+255),b
 11876  0006B4                     l6988:
 11877                           
 11878                           ; BSR set to: 0
 11879  0006B4  0E63               	movlw	99
 11880  0006B6  0100               	movlb	0	; () banked
 11881  0006B8  65BC               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11882  0006BA  D001               	goto	l6992
 11883  0006BC  D00C               	goto	l6996
 11884  0006BE                     l6992:
 11885                           
 11886                           ; BSR set to: 0
 11887  0006BE  0E68               	movlw	104
 11888  0006C0  0100               	movlb	0	; () banked
 11889  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11890  0006C4  0EE4               	movlw	228
 11891  0006C6                     u7957:
 11892  0006C6  2EE8               	decfsz	wreg,f,c
 11893  0006C8  D7FE               	bra	u7957
 11894  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11895  0006CC  D7FC               	bra	u7957
 11896  0006CE  F000               	nop	
 11897  0006D0  0100               	movlb	0	; () banked
 11898  0006D2  2BBC               	incf	actuatorTest@i_1667& (0+255),f,b
 11899  0006D4  D7EF               	goto	l6988
 11900  0006D6                     l6996:
 11901                           
 11902                           ; BSR set to: 0
 11903  0006D6  0E00               	movlw	0
 11904  0006D8  0100               	movlb	0	; () banked
 11905  0006DA  6FBD               	movwf	actuatorTest@i_1668& (0+255),b
 11906  0006DC                     l6998:
 11907                           
 11908                           ; BSR set to: 0
 11909  0006DC  0E63               	movlw	99
 11910  0006DE  0100               	movlb	0	; () banked
 11911  0006E0  65BD               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11912  0006E2  D001               	goto	l7002
 11913  0006E4  D00C               	goto	l7006
 11914  0006E6                     l7002:
 11915                           
 11916                           ; BSR set to: 0
 11917  0006E6  0E68               	movlw	104
 11918  0006E8  0100               	movlb	0	; () banked
 11919  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11920  0006EC  0EE4               	movlw	228
 11921  0006EE                     u7967:
 11922  0006EE  2EE8               	decfsz	wreg,f,c
 11923  0006F0  D7FE               	bra	u7967
 11924  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11925  0006F4  D7FC               	bra	u7967
 11926  0006F6  F000               	nop	
 11927  0006F8  0100               	movlb	0	; () banked
 11928  0006FA  2BBD               	incf	actuatorTest@i_1668& (0+255),f,b
 11929  0006FC  D7EF               	goto	l6998
 11930  0006FE                     l7006:
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11934  0006FE  0E80               	movlw	128
 11935  000700  ECEC  F023         	call	_lcdInst
 11936  000704  0EC0               	movlw	192
 11937  000706  ECEC  F023         	call	_lcdInst
 11938                           
 11939                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11940  00070A  0EE8               	movlw	low STR_104
 11941  00070C  0100               	movlb	0	; () banked
 11942  00070E  6F8E               	movwf	printf@f& (0+255),b
 11943  000710  0EFB               	movlw	high STR_104
 11944  000712  0100               	movlb	0	; () banked
 11945  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11946  000716  ECB8  F008         	call	_printf	;wreg free
 11947                           
 11948                           ;Test.c: 314: updateServoPosition(1150, 3);
 11949  00071A  0E04               	movlw	4
 11950  00071C  0100               	movlb	0	; () banked
 11951  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11952  000720  0E7E               	movlw	126
 11953  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11954  000724  0E00               	movlw	0
 11955  000726  0100               	movlb	0	; () banked
 11956  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11957  00072A  0E03               	movlw	3
 11958  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11959  00072E  EC24  F01E         	call	_updateServoPosition	;wreg free
 11960                           
 11961                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11962  000732  0E00               	movlw	0
 11963  000734  0100               	movlb	0	; () banked
 11964  000736  6FBE               	movwf	actuatorTest@i_1670& (0+255),b
 11965  000738                     l7014:
 11966                           
 11967                           ; BSR set to: 0
 11968  000738  0E63               	movlw	99
 11969  00073A  0100               	movlb	0	; () banked
 11970  00073C  65BE               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11971  00073E  D001               	goto	l7018
 11972  000740  D00C               	goto	l7022
 11973  000742                     l7018:
 11974                           
 11975                           ; BSR set to: 0
 11976  000742  0E68               	movlw	104
 11977  000744  0100               	movlb	0	; () banked
 11978  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11979  000748  0EE4               	movlw	228
 11980  00074A                     u7977:
 11981  00074A  2EE8               	decfsz	wreg,f,c
 11982  00074C  D7FE               	bra	u7977
 11983  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11984  000750  D7FC               	bra	u7977
 11985  000752  F000               	nop	
 11986  000754  0100               	movlb	0	; () banked
 11987  000756  2BBE               	incf	actuatorTest@i_1670& (0+255),f,b
 11988  000758  D7EF               	goto	l7014
 11989  00075A                     l7022:
 11990                           
 11991                           ; BSR set to: 0
 11992  00075A  0E00               	movlw	0
 11993  00075C  0100               	movlb	0	; () banked
 11994  00075E  6FBF               	movwf	actuatorTest@i_1671& (0+255),b
 11995  000760                     l7024:
 11996                           
 11997                           ; BSR set to: 0
 11998  000760  0E63               	movlw	99
 11999  000762  0100               	movlb	0	; () banked
 12000  000764  65BF               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12001  000766  D001               	goto	l7028
 12002  000768  D00C               	goto	l1149
 12003  00076A                     l7028:
 12004                           
 12005                           ; BSR set to: 0
 12006  00076A  0E68               	movlw	104
 12007  00076C  0100               	movlb	0	; () banked
 12008  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12009  000770  0EE4               	movlw	228
 12010  000772                     u7987:
 12011  000772  2EE8               	decfsz	wreg,f,c
 12012  000774  D7FE               	bra	u7987
 12013  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12014  000778  D7FC               	bra	u7987
 12015  00077A  F000               	nop	
 12016  00077C  0100               	movlb	0	; () banked
 12017  00077E  2BBF               	incf	actuatorTest@i_1671& (0+255),f,b
 12018  000780  D7EF               	goto	l7024
 12019  000782                     l1149:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;Test.c: 316: TMR3ON = 0;
 12023  000782  90B1               	bcf	4017,0,c	;volatile
 12024                           
 12025                           ;Test.c: 317: (INTCONbits.GIE = 0);
 12026  000784  9EF2               	bcf	intcon,7,c	;volatile
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12030  000786  0E01               	movlw	1
 12031  000788  ECEC  F023         	call	_lcdInst
 12032  00078C  0E68               	movlw	104
 12033  00078E  0100               	movlb	0	; () banked
 12034  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12035  000792  0EE4               	movlw	228
 12036  000794                     u7997:
 12037  000794  2EE8               	decfsz	wreg,f,c
 12038  000796  D7FE               	bra	u7997
 12039  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12040  00079A  D7FC               	bra	u7997
 12041  00079C  F000               	nop	
 12042  00079E  0E80               	movlw	128
 12043  0007A0  ECEC  F023         	call	_lcdInst
 12044                           
 12045                           ;Test.c: 323: printf("TST: CAM SERVO");
 12046  0007A4  0E96               	movlw	low STR_107
 12047  0007A6  0100               	movlb	0	; () banked
 12048  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12049  0007AA  0EFE               	movlw	high STR_107
 12050  0007AC  0100               	movlb	0	; () banked
 12051  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12052  0007B0  ECB8  F008         	call	_printf	;wreg free
 12053                           
 12054                           ;Test.c: 324: lcdInst(0b11000000);;
 12055  0007B4  0EC0               	movlw	192
 12056  0007B6  ECEC  F023         	call	_lcdInst
 12057                           
 12058                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 12059  0007BA  0E78               	movlw	low STR_108
 12060  0007BC  0100               	movlb	0	; () banked
 12061  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12062  0007C0  0EFE               	movlw	high STR_108
 12063  0007C2  0100               	movlb	0	; () banked
 12064  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12065  0007C6  ECB8  F008         	call	_printf	;wreg free
 12066                           
 12067                           ;Test.c: 326: LATCbits.LATC0 = 1;
 12068  0007CA  808B               	bsf	3979,0,c	;volatile
 12069                           
 12070                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12071  0007CC  0E00               	movlw	0
 12072  0007CE  0100               	movlb	0	; () banked
 12073  0007D0  6FC0               	movwf	actuatorTest@i_1674& (0+255),b
 12074  0007D2                     l7048:
 12075                           
 12076                           ; BSR set to: 0
 12077  0007D2  0E63               	movlw	99
 12078  0007D4  0100               	movlb	0	; () banked
 12079  0007D6  65C0               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12080  0007D8  D001               	goto	l7052
 12081  0007DA  D00C               	goto	l7056
 12082  0007DC                     l7052:
 12083                           
 12084                           ; BSR set to: 0
 12085  0007DC  0E68               	movlw	104
 12086  0007DE  0100               	movlb	0	; () banked
 12087  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12088  0007E2  0EE4               	movlw	228
 12089  0007E4                     u8007:
 12090  0007E4  2EE8               	decfsz	wreg,f,c
 12091  0007E6  D7FE               	bra	u8007
 12092  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12093  0007EA  D7FC               	bra	u8007
 12094  0007EC  F000               	nop	
 12095  0007EE  0100               	movlb	0	; () banked
 12096  0007F0  2BC0               	incf	actuatorTest@i_1674& (0+255),f,b
 12097  0007F2  D7EF               	goto	l7048
 12098  0007F4                     l7056:
 12099                           
 12100                           ; BSR set to: 0
 12101  0007F4  0E00               	movlw	0
 12102  0007F6  0100               	movlb	0	; () banked
 12103  0007F8  6FC1               	movwf	actuatorTest@i_1675& (0+255),b
 12104  0007FA                     l7058:
 12105                           
 12106                           ; BSR set to: 0
 12107  0007FA  0E63               	movlw	99
 12108  0007FC  0100               	movlb	0	; () banked
 12109  0007FE  65C1               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12110  000800  D001               	goto	l7062
 12111  000802  D00C               	goto	l7066
 12112  000804                     l7062:
 12113                           
 12114                           ; BSR set to: 0
 12115  000804  0E68               	movlw	104
 12116  000806  0100               	movlb	0	; () banked
 12117  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12118  00080A  0EE4               	movlw	228
 12119  00080C                     u8017:
 12120  00080C  2EE8               	decfsz	wreg,f,c
 12121  00080E  D7FE               	bra	u8017
 12122  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12123  000812  D7FC               	bra	u8017
 12124  000814  F000               	nop	
 12125  000816  0100               	movlb	0	; () banked
 12126  000818  2BC1               	incf	actuatorTest@i_1675& (0+255),f,b
 12127  00081A  D7EF               	goto	l7058
 12128  00081C                     l7066:
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12132  00081C  0E80               	movlw	128
 12133  00081E  ECEC  F023         	call	_lcdInst
 12134  000822  0EC0               	movlw	192
 12135  000824  ECEC  F023         	call	_lcdInst
 12136                           
 12137                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 12138  000828  0E69               	movlw	low STR_109
 12139  00082A  0100               	movlb	0	; () banked
 12140  00082C  6F8E               	movwf	printf@f& (0+255),b
 12141  00082E  0EFE               	movlw	high STR_109
 12142  000830  0100               	movlb	0	; () banked
 12143  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12144  000834  ECB8  F008         	call	_printf	;wreg free
 12145                           
 12146                           ;Test.c: 332: for(i=0;i<10000;i++)
 12147  000838  0E00               	movlw	0
 12148  00083A  0100               	movlb	0	; () banked
 12149  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12150  00083E  0E00               	movlw	0
 12151  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12152  000842                     l7072:
 12153                           
 12154                           ; BSR set to: 0
 12155  000842  0100               	movlb	0	; () banked
 12156  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12157  000846  D008               	goto	l1154
 12158  000848  0E10               	movlw	16
 12159  00084A  0100               	movlb	0	; () banked
 12160  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12161  00084E  0E27               	movlw	39
 12162  000850  0100               	movlb	0	; () banked
 12163  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12164  000854  B0D8               	btfsc	status,0,c
 12165  000856  D00D               	goto	l7082
 12166  000858                     l1154:
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;Test.c: 333: {
 12170                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12171  000858  808B               	bsf	3979,0,c	;volatile
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12175  00085A  0E1A               	movlw	26
 12176  00085C                     u8027:
 12177  00085C  2EE8               	decfsz	wreg,f,c
 12178  00085E  D7FE               	bra	u8027
 12179  000860  D000               	nop2	
 12180                           
 12181                           ;Test.c: 336: LATCbits.LATC0 = 0;
 12182  000862  908B               	bcf	3979,0,c	;volatile
 12183                           
 12184                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12185  000864  0EF0               	movlw	240
 12186  000866                     u8037:
 12187  000866  2EE8               	decfsz	wreg,f,c
 12188  000868  D7FE               	bra	u8037
 12189  00086A  0100               	movlb	0	; () banked
 12190  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12191  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12192  000870  D7E8               	goto	l7072
 12193  000872                     l7082:
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;Test.c: 338: }
 12197                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12198  000872  0E00               	movlw	0
 12199  000874  0100               	movlb	0	; () banked
 12200  000876  6FC2               	movwf	actuatorTest@i_1677& (0+255),b
 12201  000878                     l7084:
 12202                           
 12203                           ; BSR set to: 0
 12204  000878  0E63               	movlw	99
 12205  00087A  0100               	movlb	0	; () banked
 12206  00087C  65C2               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12207  00087E  D001               	goto	l7088
 12208  000880  D00C               	goto	l7092
 12209  000882                     l7088:
 12210                           
 12211                           ; BSR set to: 0
 12212  000882  0E68               	movlw	104
 12213  000884  0100               	movlb	0	; () banked
 12214  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12215  000888  0EE4               	movlw	228
 12216  00088A                     u8047:
 12217  00088A  2EE8               	decfsz	wreg,f,c
 12218  00088C  D7FE               	bra	u8047
 12219  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12220  000890  D7FC               	bra	u8047
 12221  000892  F000               	nop	
 12222  000894  0100               	movlb	0	; () banked
 12223  000896  2BC2               	incf	actuatorTest@i_1677& (0+255),f,b
 12224  000898  D7EF               	goto	l7084
 12225  00089A                     l7092:
 12226                           
 12227                           ; BSR set to: 0
 12228  00089A  0E00               	movlw	0
 12229  00089C  0100               	movlb	0	; () banked
 12230  00089E  6FC3               	movwf	actuatorTest@i_1678& (0+255),b
 12231  0008A0                     l7094:
 12232                           
 12233                           ; BSR set to: 0
 12234  0008A0  0E63               	movlw	99
 12235  0008A2  0100               	movlb	0	; () banked
 12236  0008A4  65C3               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12237  0008A6  D001               	goto	l7098
 12238  0008A8  D00C               	goto	l7102
 12239  0008AA                     l7098:
 12240                           
 12241                           ; BSR set to: 0
 12242  0008AA  0E68               	movlw	104
 12243  0008AC  0100               	movlb	0	; () banked
 12244  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12245  0008B0  0EE4               	movlw	228
 12246  0008B2                     u8057:
 12247  0008B2  2EE8               	decfsz	wreg,f,c
 12248  0008B4  D7FE               	bra	u8057
 12249  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12250  0008B8  D7FC               	bra	u8057
 12251  0008BA  F000               	nop	
 12252  0008BC  0100               	movlb	0	; () banked
 12253  0008BE  2BC3               	incf	actuatorTest@i_1678& (0+255),f,b
 12254  0008C0  D7EF               	goto	l7094
 12255  0008C2                     l7102:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;Test.c: 341: machine_state = Testing_state;
 12259  0008C2  0E03               	movlw	3
 12260  0008C4  0100               	movlb	0	; () banked
 12261  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12262                           
 12263                           ; BSR set to: 0
 12264  0008C8  0012               	return		;funcret
 12265  0008CA                     __end_of_actuatorTest:
 12266                           	opt stack 0
 12267                           tblptru	equ	0xFF8
 12268                           tblptrh	equ	0xFF7
 12269                           tblptrl	equ	0xFF6
 12270                           tablat	equ	0xFF5
 12271                           prodh	equ	0xFF4
 12272                           prodl	equ	0xFF3
 12273                           intcon	equ	0xFF2
 12274                           intcon2	equ	0xFF1
 12275                           intcon3	equ	0xFF0
 12276                           postinc0	equ	0xFEE
 12277                           wreg	equ	0xFE8
 12278                           postdec1	equ	0xFE5
 12279                           fsr1l	equ	0xFE1
 12280                           indf2	equ	0xFDF
 12281                           postinc2	equ	0xFDE
 12282                           postdec2	equ	0xFDD
 12283                           fsr2h	equ	0xFDA
 12284                           fsr2l	equ	0xFD9
 12285                           status	equ	0xFD8
 12286                           
 12287 ;; *************** function _ToggleTestA5 *****************
 12288 ;; Defined at:
 12289 ;;		line 484 in file "Test.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;		None
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;  on              2   44[BANK0 ] int 
 12294 ;; Return value:  Size  Location     Type
 12295 ;;                  1    wreg      void 
 12296 ;; Registers used:
 12297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12298 ;; Tracked objects:
 12299 ;;		On entry : 0/0
 12300 ;;		On exit  : 0/0
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12306 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;Total ram usage:        3 bytes
 12308 ;; Hardware stack levels used:    1
 12309 ;; Hardware stack levels required when called:   10
 12310 ;; This function calls:
 12311 ;;		_lcdInst
 12312 ;;		_printf
 12313 ;; This function is called by:
 12314 ;;		_Test
 12315 ;; This function uses a non-reentrant model
 12316 ;;
 12317                           
 12318                           	psect	text42
 12319  0039C2                     __ptext42:
 12320                           	opt stack 0
 12321  0039C2                     _ToggleTestA5:
 12322                           	opt stack 19
 12323                           
 12324                           ;Test.c: 485: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;incstack = 0
 12328  0039C2  0E01               	movlw	1
 12329  0039C4  ECEC  F023         	call	_lcdInst
 12330  0039C8  0E68               	movlw	104
 12331  0039CA  0100               	movlb	0	; () banked
 12332  0039CC  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12333  0039CE  0EE4               	movlw	228
 12334  0039D0                     u8067:
 12335  0039D0  2EE8               	decfsz	wreg,f,c
 12336  0039D2  D7FE               	bra	u8067
 12337  0039D4  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12338  0039D6  D7FC               	bra	u8067
 12339  0039D8  F000               	nop	
 12340  0039DA  0E80               	movlw	128
 12341  0039DC  ECEC  F023         	call	_lcdInst
 12342                           
 12343                           ;Test.c: 486: printf("D WILL RETURN   ");
 12344  0039E0  0E1B               	movlw	low STR_114
 12345  0039E2  0100               	movlb	0	; () banked
 12346  0039E4  6F8E               	movwf	printf@f& (0+255),b
 12347  0039E6  0EFC               	movlw	high STR_114
 12348  0039E8  0100               	movlb	0	; () banked
 12349  0039EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12350  0039EC  ECB8  F008         	call	_printf	;wreg free
 12351                           
 12352                           ;Test.c: 487: lcdInst(0b11000000);;
 12353  0039F0  0EC0               	movlw	192
 12354  0039F2  ECEC  F023         	call	_lcdInst
 12355                           
 12356                           ;Test.c: 488: printf("ELSE TOGGLES RA5");
 12357  0039F6  0E4E               	movlw	low STR_115
 12358  0039F8  0100               	movlb	0	; () banked
 12359  0039FA  6F8E               	movwf	printf@f& (0+255),b
 12360  0039FC  0EFC               	movlw	high STR_115
 12361  0039FE  0100               	movlb	0	; () banked
 12362  003A00  6F8F               	movwf	(printf@f+1)& (0+255),b
 12363  003A02  ECB8  F008         	call	_printf	;wreg free
 12364                           
 12365                           ;Test.c: 489: int on = 0;
 12366  003A06  0E00               	movlw	0
 12367  003A08  0100               	movlb	0	; () banked
 12368  003A0A  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12369  003A0C  0E00               	movlw	0
 12370  003A0E  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12371  003A10                     l1217:
 12372  003A10  A281               	btfss	3969,1,c	;volatile
 12373  003A12  D7FE               	goto	l1217
 12374                           
 12375                           ;Test.c: 494: }
 12376                           ;Test.c: 495: if(PORTB >> 4 == 0b1111){
 12377  003A14  3881               	swapf	3969,w,c	;volatile
 12378  003A16  0B0F               	andlw	15
 12379  003A18  0A0F               	xorlw	15
 12380  003A1A  B4D8               	btfsc	status,2,c
 12381  003A1C  0012               	return	
 12382                           
 12383                           ;Test.c: 498: else{
 12384                           ;Test.c: 499: if(on == 0){
 12385                           
 12386                           ;Test.c: 497: }
 12387                           
 12388                           ;Test.c: 496: break;
 12389  003A1E  0100               	movlb	0	; () banked
 12390  003A20  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12391  003A22  0100               	movlb	0	; () banked
 12392  003A24  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12393  003A26  A4D8               	btfss	status,2,c
 12394  003A28  D007               	goto	l7148
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;Test.c: 500: on = 1;
 12398  003A2A  0E00               	movlw	0
 12399  003A2C  0100               	movlb	0	; () banked
 12400  003A2E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12401  003A30  0E01               	movlw	1
 12402  003A32  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;Test.c: 501: LATAbits.LATA5 = 1;
 12406  003A34  8A89               	bsf	3977,5,c	;volatile
 12407                           
 12408                           ;Test.c: 502: }
 12409  003A36  D006               	goto	l1225
 12410  003A38                     l7148:
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;Test.c: 503: else{
 12414                           ;Test.c: 504: on = 0;
 12415  003A38  0E00               	movlw	0
 12416  003A3A  0100               	movlb	0	; () banked
 12417  003A3C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12418  003A3E  0E00               	movlw	0
 12419  003A40  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;Test.c: 505: LATAbits.LATA5 = 0;
 12423  003A42  9A89               	bcf	3977,5,c	;volatile
 12424  003A44                     l1225:
 12425  003A44  A281               	btfss	3969,1,c	;volatile
 12426  003A46  D7E4               	goto	l1217
 12427  003A48  D7FD               	goto	l1225
 12428  003A4A                     __end_of_ToggleTestA5:
 12429                           	opt stack 0
 12430                           tblptru	equ	0xFF8
 12431                           tblptrh	equ	0xFF7
 12432                           tblptrl	equ	0xFF6
 12433                           tablat	equ	0xFF5
 12434                           prodh	equ	0xFF4
 12435                           prodl	equ	0xFF3
 12436                           intcon	equ	0xFF2
 12437                           intcon2	equ	0xFF1
 12438                           intcon3	equ	0xFF0
 12439                           postinc0	equ	0xFEE
 12440                           wreg	equ	0xFE8
 12441                           postdec1	equ	0xFE5
 12442                           fsr1l	equ	0xFE1
 12443                           indf2	equ	0xFDF
 12444                           postinc2	equ	0xFDE
 12445                           postdec2	equ	0xFDD
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _PusherTest *****************
 12451 ;; Defined at:
 12452 ;;		line 453 in file "Test.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;  i               2   44[BANK0 ] int 
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  1    wreg      void 
 12459 ;; Registers used:
 12460 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12469 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;Total ram usage:        3 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; Hardware stack levels required when called:   10
 12473 ;; This function calls:
 12474 ;;		_lcdInst
 12475 ;;		_printf
 12476 ;; This function is called by:
 12477 ;;		_Test
 12478 ;; This function uses a non-reentrant model
 12479 ;;
 12480                           
 12481                           	psect	text43
 12482  003B54                     __ptext43:
 12483                           	opt stack 0
 12484  003B54                     _PusherTest:
 12485                           	opt stack 19
 12486                           
 12487                           ;Test.c: 454: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12488                           
 12489                           ;incstack = 0
 12490  003B54  0E01               	movlw	1
 12491  003B56  ECEC  F023         	call	_lcdInst
 12492  003B5A  0E68               	movlw	104
 12493  003B5C  0100               	movlb	0	; () banked
 12494  003B5E  6FAB               	movwf	??_PusherTest& (0+255),b
 12495  003B60  0EE4               	movlw	228
 12496  003B62                     u8077:
 12497  003B62  2EE8               	decfsz	wreg,f,c
 12498  003B64  D7FE               	bra	u8077
 12499  003B66  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12500  003B68  D7FC               	bra	u8077
 12501  003B6A  F000               	nop	
 12502  003B6C  0E80               	movlw	128
 12503  003B6E  ECEC  F023         	call	_lcdInst
 12504                           
 12505                           ;Test.c: 455: printf("PUSHER TST");
 12506  003B72  0E71               	movlw	low STR_113
 12507  003B74  0100               	movlb	0	; () banked
 12508  003B76  6F8E               	movwf	printf@f& (0+255),b
 12509  003B78  0EFF               	movlw	high STR_113
 12510  003B7A  0100               	movlb	0	; () banked
 12511  003B7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12512  003B7E  ECB8  F008         	call	_printf	;wreg free
 12513  003B82                     l1202:
 12514  003B82  A281               	btfss	3969,1,c	;volatile
 12515  003B84  D7FE               	goto	l1202
 12516                           
 12517                           ;Test.c: 461: }
 12518                           ;Test.c: 462: if(PORTB >> 4 == 0b1111){
 12519  003B86  3881               	swapf	3969,w,c	;volatile
 12520  003B88  0B0F               	andlw	15
 12521  003B8A  0A0F               	xorlw	15
 12522  003B8C  B4D8               	btfsc	status,2,c
 12523  003B8E  0012               	return	
 12524                           
 12525                           ;Test.c: 464: }
 12526                           ;Test.c: 468: for(int i = 0; i<3000; i++){
 12527                           
 12528                           ;Test.c: 463: break;
 12529  003B90  0E00               	movlw	0
 12530  003B92  0100               	movlb	0	; () banked
 12531  003B94  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12532  003B96  0E00               	movlw	0
 12533  003B98  6FAC               	movwf	PusherTest@i& (0+255),b
 12534  003B9A                     l7166:
 12535                           
 12536                           ; BSR set to: 0
 12537  003B9A  0100               	movlb	0	; () banked
 12538  003B9C  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12539  003B9E  D008               	goto	l1207
 12540  003BA0  0EB8               	movlw	184
 12541  003BA2  0100               	movlb	0	; () banked
 12542  003BA4  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12543  003BA6  0E0B               	movlw	11
 12544  003BA8  0100               	movlb	0	; () banked
 12545  003BAA  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12546  003BAC  B0D8               	btfsc	status,0,c
 12547  003BAE  D00D               	goto	l1209
 12548  003BB0                     l1207:
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;Test.c: 469: LATAbits.LATA4 = 1;
 12552  003BB0  8889               	bsf	3977,4,c	;volatile
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;Test.c: 470: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12556  003BB2  0EC8               	movlw	200
 12557  003BB4                     u8087:
 12558  003BB4  2EE8               	decfsz	wreg,f,c
 12559  003BB6  D7FE               	bra	u8087
 12560                           
 12561                           ;Test.c: 471: LATAbits.LATA4 = 0;
 12562  003BB8  9889               	bcf	3977,4,c	;volatile
 12563                           
 12564                           ;Test.c: 472: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12565  003BBA  0E42               	movlw	66
 12566  003BBC                     u8097:
 12567  003BBC  2EE8               	decfsz	wreg,f,c
 12568  003BBE  D7FE               	bra	u8097
 12569  003BC0  D000               	nop2	
 12570  003BC2  0100               	movlb	0	; () banked
 12571  003BC4  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12572  003BC6  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12573  003BC8  D7E8               	goto	l7166
 12574  003BCA                     l1209:
 12575  003BCA  A281               	btfss	3969,1,c	;volatile
 12576  003BCC  D7DA               	goto	l1202
 12577  003BCE  D7FD               	goto	l1209
 12578  003BD0                     __end_of_PusherTest:
 12579                           	opt stack 0
 12580                           tblptru	equ	0xFF8
 12581                           tblptrh	equ	0xFF7
 12582                           tblptrl	equ	0xFF6
 12583                           tablat	equ	0xFF5
 12584                           prodh	equ	0xFF4
 12585                           prodl	equ	0xFF3
 12586                           intcon	equ	0xFF2
 12587                           intcon2	equ	0xFF1
 12588                           intcon3	equ	0xFF0
 12589                           postinc0	equ	0xFEE
 12590                           wreg	equ	0xFE8
 12591                           postdec1	equ	0xFE5
 12592                           fsr1l	equ	0xFE1
 12593                           indf2	equ	0xFDF
 12594                           postinc2	equ	0xFDE
 12595                           postdec2	equ	0xFDD
 12596                           fsr2h	equ	0xFDA
 12597                           fsr2l	equ	0xFD9
 12598                           status	equ	0xFD8
 12599                           
 12600 ;; *************** function _PortTests *****************
 12601 ;; Defined at:
 12602 ;;		line 395 in file "Test.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;		None
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;		None
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  1    wreg      void 
 12609 ;; Registers used:
 12610 ;;		wreg, status,2, status,0
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;Total ram usage:        2 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; Hardware stack levels required when called:    7
 12623 ;; This function calls:
 12624 ;;		Nothing
 12625 ;; This function is called by:
 12626 ;;		_Test
 12627 ;; This function uses a non-reentrant model
 12628 ;;
 12629                           
 12630                           	psect	text44
 12631  003AD0                     __ptext44:
 12632                           	opt stack 0
 12633  003AD0                     _PortTests:
 12634                           	opt stack 22
 12635  003AD0                     l1167:
 12636  003AD0  A281               	btfss	3969,1,c	;volatile
 12637  003AD2  D7FE               	goto	l1167
 12638                           
 12639                           ;Test.c: 399: var = PORTB >> 4;
 12640  003AD4  CF81 F080          	movff	3969,??_PortTests	;volatile
 12641  003AD8  0100               	movlb	0	; () banked
 12642  003ADA  3B80               	swapf	??_PortTests& (0+255),f,b
 12643  003ADC  0E0F               	movlw	15
 12644  003ADE  1780               	andwf	??_PortTests& (0+255),f,b
 12645  003AE0  0100               	movlb	0	; () banked
 12646  003AE2  5180               	movf	??_PortTests& (0+255),w,b
 12647  003AE4  0100               	movlb	0	; () banked
 12648  003AE6  6FFA               	movwf	_var& (0+255),b
 12649  003AE8  6BFB               	clrf	(_var+1)& (0+255),b
 12650                           
 12651                           ;Test.c: 400: switch(var){
 12652  003AEA  D00C               	goto	l7180
 12653  003AEC                     l1171:
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;Test.c: 402: LATEbits.LATE0 = 1;
 12657  003AEC  808D               	bsf	3981,0,c	;volatile
 12658                           
 12659                           ;Test.c: 403: break;
 12660  003AEE  D027               	goto	l1179
 12661  003AF0                     l1173:
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;Test.c: 405: LATEbits.LATE1 = 1;
 12665  003AF0  828D               	bsf	3981,1,c	;volatile
 12666                           
 12667                           ;Test.c: 406: break;
 12668  003AF2  D025               	goto	l1179
 12669  003AF4                     l1174:
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;Test.c: 408: LATDbits.LATD0 = 1;
 12673  003AF4  808C               	bsf	3980,0,c	;volatile
 12674                           
 12675                           ;Test.c: 409: break;
 12676  003AF6  D023               	goto	l1179
 12677  003AF8                     l1175:
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;Test.c: 411: LATAbits.LATA3 = 1;
 12681  003AF8  8689               	bsf	3977,3,c	;volatile
 12682                           
 12683                           ;Test.c: 412: break;
 12684  003AFA  D021               	goto	l1179
 12685  003AFC                     l1176:
 12686                           
 12687                           ; BSR set to: 0
 12688                           ;Test.c: 414: LATAbits.LATA4 = 1;
 12689  003AFC  8889               	bsf	3977,4,c	;volatile
 12690                           
 12691                           ;Test.c: 415: break;
 12692  003AFE  D01F               	goto	l1179
 12693  003B00                     l1177:
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;Test.c: 417: LATAbits.LATA5 = 1;
 12697  003B00  8A89               	bsf	3977,5,c	;volatile
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;Test.c: 421: }
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;Test.c: 420: break;
 12704                           
 12705                           ;Test.c: 419: default:
 12706                           
 12707                           ;Test.c: 418: break;
 12708  003B02  D01D               	goto	l1179
 12709  003B04                     l7180:
 12710                           
 12711                           ; BSR set to: 0
 12712  003B04  C0FA  F080         	movff	_var,??_PortTests
 12713  003B08  C0FB  F081         	movff	_var+1,??_PortTests+1
 12714                           
 12715                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12716                           ; Switch size 1, requested type "space"
 12717                           ; Number of cases is 1, Range of values is 0 to 0
 12718                           ; switch strategies available:
 12719                           ; Name         Instructions Cycles
 12720                           ; simple_byte            4     3 (average)
 12721                           ;	Chosen strategy is simple_byte
 12722  003B0C  0100               	movlb	0	; () banked
 12723  003B0E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12724  003B10  0A00               	xorlw	0	; case 0
 12725  003B12  A4D8               	btfss	status,2,c
 12726  003B14  D014               	goto	l1179
 12727                           
 12728                           ; BSR set to: 0
 12729                           ; Switch size 1, requested type "space"
 12730                           ; Number of cases is 6, Range of values is 0 to 5
 12731                           ; switch strategies available:
 12732                           ; Name         Instructions Cycles
 12733                           ; simple_byte           19    10 (average)
 12734                           ;	Chosen strategy is simple_byte
 12735  003B16  0100               	movlb	0	; () banked
 12736  003B18  5180               	movf	??_PortTests& (0+255),w,b
 12737  003B1A  0A00               	xorlw	0	; case 0
 12738  003B1C  B4D8               	btfsc	status,2,c
 12739  003B1E  D7E6               	goto	l1171
 12740  003B20  0A01               	xorlw	1	; case 1
 12741  003B22  B4D8               	btfsc	status,2,c
 12742  003B24  D7E5               	goto	l1173
 12743  003B26  0A03               	xorlw	3	; case 2
 12744  003B28  B4D8               	btfsc	status,2,c
 12745  003B2A  D7E4               	goto	l1174
 12746  003B2C  0A01               	xorlw	1	; case 3
 12747  003B2E  B4D8               	btfsc	status,2,c
 12748  003B30  D7E3               	goto	l1175
 12749  003B32  0A07               	xorlw	7	; case 4
 12750  003B34  B4D8               	btfsc	status,2,c
 12751  003B36  D7E2               	goto	l1176
 12752  003B38  0A01               	xorlw	1	; case 5
 12753  003B3A  B4D8               	btfsc	status,2,c
 12754  003B3C  D7E1               	goto	l1177
 12755  003B3E                     l1179:
 12756  003B3E  B281               	btfsc	3969,1,c	;volatile
 12757  003B40  D7FE               	goto	l1179
 12758                           
 12759                           ;Test.c: 423: __nop();
 12760  003B42  F000               	nop	
 12761                           
 12762                           ;Test.c: 424: __nop();
 12763  003B44  F000               	nop	
 12764                           
 12765                           ;Test.c: 425: LATA = 0x00;
 12766  003B46  0E00               	movlw	0
 12767  003B48  6E89               	movwf	3977,c	;volatile
 12768                           
 12769                           ;Test.c: 426: LATE = 0x00;
 12770  003B4A  0E00               	movlw	0
 12771  003B4C  6E8D               	movwf	3981,c	;volatile
 12772                           
 12773                           ;Test.c: 427: LATD = 0x00; }
 12774  003B4E  0E00               	movlw	0
 12775  003B50  6E8C               	movwf	3980,c	;volatile
 12776  003B52  D7BE               	goto	l1167
 12777  003B54                     __end_of_PortTests:
 12778                           	opt stack 0
 12779                           tblptru	equ	0xFF8
 12780                           tblptrh	equ	0xFF7
 12781                           tblptrl	equ	0xFF6
 12782                           tablat	equ	0xFF5
 12783                           prodh	equ	0xFF4
 12784                           prodl	equ	0xFF3
 12785                           intcon	equ	0xFF2
 12786                           intcon2	equ	0xFF1
 12787                           intcon3	equ	0xFF0
 12788                           postinc0	equ	0xFEE
 12789                           wreg	equ	0xFE8
 12790                           postdec1	equ	0xFE5
 12791                           fsr1l	equ	0xFE1
 12792                           indf2	equ	0xFDF
 12793                           postinc2	equ	0xFDE
 12794                           postdec2	equ	0xFDD
 12795                           fsr2h	equ	0xFDA
 12796                           fsr2l	equ	0xFD9
 12797                           status	equ	0xFD8
 12798                           
 12799 ;; *************** function _PortTestA5 *****************
 12800 ;; Defined at:
 12801 ;;		line 430 in file "Test.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;		None
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;		None
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  1    wreg      void 
 12808 ;; Registers used:
 12809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;Total ram usage:        1 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:   10
 12822 ;; This function calls:
 12823 ;;		_lcdInst
 12824 ;;		_printf
 12825 ;; This function is called by:
 12826 ;;		_Test
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           	psect	text45
 12831  003F20                     __ptext45:
 12832                           	opt stack 0
 12833  003F20                     _PortTestA5:
 12834                           	opt stack 19
 12835                           
 12836                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12837                           
 12838                           ;incstack = 0
 12839  003F20  0E01               	movlw	1
 12840  003F22  ECEC  F023         	call	_lcdInst
 12841  003F26  0E68               	movlw	104
 12842  003F28  0100               	movlb	0	; () banked
 12843  003F2A  6FAB               	movwf	??_PortTestA5& (0+255),b
 12844  003F2C  0EE4               	movlw	228
 12845  003F2E                     u8107:
 12846  003F2E  2EE8               	decfsz	wreg,f,c
 12847  003F30  D7FE               	bra	u8107
 12848  003F32  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12849  003F34  D7FC               	bra	u8107
 12850  003F36  F000               	nop	
 12851  003F38  0E80               	movlw	128
 12852  003F3A  ECEC  F023         	call	_lcdInst
 12853                           
 12854                           ;Test.c: 432: printf("D WILL RETURN    ");
 12855  003F3E  0E6D               	movlw	low STR_111
 12856  003F40  0100               	movlb	0	; () banked
 12857  003F42  6F8E               	movwf	printf@f& (0+255),b
 12858  003F44  0EFB               	movlw	high STR_111
 12859  003F46  0100               	movlb	0	; () banked
 12860  003F48  6F8F               	movwf	(printf@f+1)& (0+255),b
 12861  003F4A  ECB8  F008         	call	_printf	;wreg free
 12862                           
 12863                           ;Test.c: 433: lcdInst(0b11000000);;
 12864  003F4E  0EC0               	movlw	192
 12865  003F50  ECEC  F023         	call	_lcdInst
 12866                           
 12867                           ;Test.c: 434: printf("OTHER SETS RA5   ");
 12868  003F54  0E7F               	movlw	low STR_112
 12869  003F56  0100               	movlb	0	; () banked
 12870  003F58  6F8E               	movwf	printf@f& (0+255),b
 12871  003F5A  0EFB               	movlw	high STR_112
 12872  003F5C  0100               	movlb	0	; () banked
 12873  003F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12874  003F60  ECB8  F008         	call	_printf	;wreg free
 12875  003F64                     l1188:
 12876  003F64  A281               	btfss	3969,1,c	;volatile
 12877  003F66  D7FE               	goto	l1188
 12878                           
 12879                           ;Test.c: 439: }
 12880                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 12881  003F68  3881               	swapf	3969,w,c	;volatile
 12882  003F6A  0B0F               	andlw	15
 12883  003F6C  0A0F               	xorlw	15
 12884  003F6E  B4D8               	btfsc	status,2,c
 12885  003F70  0012               	return	
 12886                           
 12887                           ;Test.c: 443: else{
 12888                           ;Test.c: 444: LATAbits.LATA5 = 1;
 12889                           
 12890                           ;Test.c: 442: }
 12891                           
 12892                           ;Test.c: 441: break;
 12893  003F72  8A89               	bsf	3977,5,c	;volatile
 12894  003F74                     l1194:
 12895  003F74  B281               	btfsc	3969,1,c	;volatile
 12896  003F76  D7FE               	goto	l1194
 12897                           
 12898                           ;Test.c: 447: }
 12899                           ;Test.c: 448: LATAbits.LATA5 = 0;
 12900  003F78  9A89               	bcf	3977,5,c	;volatile
 12901  003F7A  D7F4               	goto	l1188
 12902  003F7C                     __end_of_PortTestA5:
 12903                           	opt stack 0
 12904                           tblptru	equ	0xFF8
 12905                           tblptrh	equ	0xFF7
 12906                           tblptrl	equ	0xFF6
 12907                           tablat	equ	0xFF5
 12908                           prodh	equ	0xFF4
 12909                           prodl	equ	0xFF3
 12910                           intcon	equ	0xFF2
 12911                           intcon2	equ	0xFF1
 12912                           intcon3	equ	0xFF0
 12913                           postinc0	equ	0xFEE
 12914                           wreg	equ	0xFE8
 12915                           postdec1	equ	0xFE5
 12916                           fsr1l	equ	0xFE1
 12917                           indf2	equ	0xFDF
 12918                           postinc2	equ	0xFDE
 12919                           postdec2	equ	0xFDD
 12920                           fsr2h	equ	0xFDA
 12921                           fsr2l	equ	0xFD9
 12922                           status	equ	0xFD8
 12923                           
 12924 ;; *************** function _EEPROMTest *****************
 12925 ;; Defined at:
 12926 ;;		line 512 in file "Test.c"
 12927 ;; Parameters:    Size  Location     Type
 12928 ;;		None
 12929 ;; Auto vars:     Size  Location     Type
 12930 ;;		None
 12931 ;; Return value:  Size  Location     Type
 12932 ;;                  1    wreg      void 
 12933 ;; Registers used:
 12934 ;;		None
 12935 ;; Tracked objects:
 12936 ;;		On entry : 0/0
 12937 ;;		On exit  : 0/0
 12938 ;;		Unchanged: 0/0
 12939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;Total ram usage:        0 bytes
 12945 ;; Hardware stack levels used:    1
 12946 ;; Hardware stack levels required when called:    7
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_Test
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           	psect	text46
 12955  00483C                     __ptext46:
 12956                           	opt stack 0
 12957  00483C                     _EEPROMTest:
 12958                           	opt stack 22
 12959                           
 12960                           ;incstack = 0
 12961  00483C  0012               	return		;funcret
 12962  00483E                     __end_of_EEPROMTest:
 12963                           	opt stack 0
 12964                           tblptru	equ	0xFF8
 12965                           tblptrh	equ	0xFF7
 12966                           tblptrl	equ	0xFF6
 12967                           tablat	equ	0xFF5
 12968                           prodh	equ	0xFF4
 12969                           prodl	equ	0xFF3
 12970                           intcon	equ	0xFF2
 12971                           intcon2	equ	0xFF1
 12972                           intcon3	equ	0xFF0
 12973                           postinc0	equ	0xFEE
 12974                           wreg	equ	0xFE8
 12975                           postdec1	equ	0xFE5
 12976                           fsr1l	equ	0xFE1
 12977                           indf2	equ	0xFDF
 12978                           postinc2	equ	0xFDE
 12979                           postdec2	equ	0xFDD
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function _BothServos *****************
 12985 ;; Defined at:
 12986 ;;		line 344 in file "Test.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;		None
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;Total ram usage:        2 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:   10
 13007 ;; This function calls:
 13008 ;;		_initServos
 13009 ;;		_lcdInst
 13010 ;;		_printf
 13011 ;;		_updateServoPosition
 13012 ;; This function is called by:
 13013 ;;		_Test
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017                           	psect	text47
 13018  001916                     __ptext47:
 13019                           	opt stack 0
 13020  001916                     _BothServos:
 13021                           	opt stack 19
 13022                           
 13023                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13024                           
 13025                           ;incstack = 0
 13026  001916  0E01               	movlw	1
 13027  001918  ECEC  F023         	call	_lcdInst
 13028  00191C  0E68               	movlw	104
 13029  00191E  0100               	movlb	0	; () banked
 13030  001920  6FAB               	movwf	??_BothServos& (0+255),b
 13031  001922  0EE4               	movlw	228
 13032  001924                     u8117:
 13033  001924  2EE8               	decfsz	wreg,f,c
 13034  001926  D7FE               	bra	u8117
 13035  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13036  00192A  D7FC               	bra	u8117
 13037  00192C  F000               	nop	
 13038  00192E  0E80               	movlw	128
 13039  001930  ECEC  F023         	call	_lcdInst
 13040                           
 13041                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 13042  001934  0EB4               	movlw	low STR_110
 13043  001936  0100               	movlb	0	; () banked
 13044  001938  6F8E               	movwf	printf@f& (0+255),b
 13045  00193A  0EFC               	movlw	high STR_110
 13046  00193C  0100               	movlb	0	; () banked
 13047  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13048  001940  ECB8  F008         	call	_printf	;wreg free
 13049                           
 13050                           ;Test.c: 347: TMR1ON = 1;
 13051  001944  80CD               	bsf	4045,0,c	;volatile
 13052                           
 13053                           ;Test.c: 348: TMR3ON = 1;
 13054  001946  80B1               	bsf	4017,0,c	;volatile
 13055                           
 13056                           ;Test.c: 349: machine_state = Sorting_state;
 13057  001948  0E01               	movlw	1
 13058  00194A  0100               	movlb	0	; () banked
 13059  00194C  6FFC               	movwf	_machine_state& (0+255),b
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;Test.c: 350: was_low_1 = 0;
 13063  00194E  0E00               	movlw	0
 13064  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 13065  001952  0E00               	movlw	0
 13066  001954  6E79               	movwf	_was_low_1,c	;volatile
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;Test.c: 351: was_low_1 = 0;
 13070  001956  0E00               	movlw	0
 13071  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 13072  00195A  0E00               	movlw	0
 13073  00195C  6E79               	movwf	_was_low_1,c	;volatile
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;Test.c: 357: initServos();
 13077  00195E  ECBE  F01F         	call	_initServos	;wreg free
 13078                           
 13079                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13080  001962  0E3D               	movlw	61
 13081  001964  0100               	movlb	0	; () banked
 13082  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13083  001968  0EE1               	movlw	225
 13084  00196A  0100               	movlb	0	; () banked
 13085  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 13086  00196E  0E3F               	movlw	63
 13087  001970                     u8127:
 13088  001970  2EE8               	decfsz	wreg,f,c
 13089  001972  D7FE               	bra	u8127
 13090  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13091  001976  D7FC               	bra	u8127
 13092  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13093  00197A  D7FA               	bra	u8127
 13094  00197C  D000               	nop2	
 13095                           
 13096                           ;Test.c: 359: updateServoPosition(500, 1);
 13097  00197E  0E01               	movlw	1
 13098  001980  0100               	movlb	0	; () banked
 13099  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13100  001984  0EF4               	movlw	244
 13101  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13102  001988  0E00               	movlw	0
 13103  00198A  0100               	movlb	0	; () banked
 13104  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13105  00198E  0E01               	movlw	1
 13106  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13107  001992  EC24  F01E         	call	_updateServoPosition	;wreg free
 13108                           
 13109                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 13110  001996  0E1F               	movlw	31
 13111  001998  0100               	movlb	0	; () banked
 13112  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13113  00199C  0E71               	movlw	113
 13114  00199E  0100               	movlb	0	; () banked
 13115  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 13116  0019A2  0E1E               	movlw	30
 13117  0019A4                     u8137:
 13118  0019A4  2EE8               	decfsz	wreg,f,c
 13119  0019A6  D7FE               	bra	u8137
 13120  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13121  0019AA  D7FC               	bra	u8137
 13122  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13123  0019AE  D7FA               	bra	u8137
 13124  0019B0  F000               	nop	
 13125                           
 13126                           ;Test.c: 361: updateServoPosition(1350, 3);
 13127  0019B2  0E05               	movlw	5
 13128  0019B4  0100               	movlb	0	; () banked
 13129  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13130  0019B8  0E46               	movlw	70
 13131  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13132  0019BC  0E00               	movlw	0
 13133  0019BE  0100               	movlb	0	; () banked
 13134  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13135  0019C2  0E03               	movlw	3
 13136  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13137  0019C6  EC24  F01E         	call	_updateServoPosition	;wreg free
 13138                           
 13139                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13140  0019CA  0E52               	movlw	82
 13141  0019CC  0100               	movlb	0	; () banked
 13142  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13143  0019D0  0E2B               	movlw	43
 13144  0019D2  0100               	movlb	0	; () banked
 13145  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 13146  0019D6  0E00               	movlw	0
 13147  0019D8                     u8147:
 13148  0019D8  2EE8               	decfsz	wreg,f,c
 13149  0019DA  D7FE               	bra	u8147
 13150  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13151  0019DE  D7FC               	bra	u8147
 13152  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13153  0019E2  D7FA               	bra	u8147
 13154  0019E4  F000               	nop	
 13155                           
 13156                           ;Test.c: 363: updateServoPosition(1150, 3);
 13157  0019E6  0E04               	movlw	4
 13158  0019E8  0100               	movlb	0	; () banked
 13159  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13160  0019EC  0E7E               	movlw	126
 13161  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13162  0019F0  0E00               	movlw	0
 13163  0019F2  0100               	movlb	0	; () banked
 13164  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13165  0019F6  0E03               	movlw	3
 13166  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13167  0019FA  EC24  F01E         	call	_updateServoPosition	;wreg free
 13168                           
 13169                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 13170  0019FE  0E1F               	movlw	31
 13171  001A00  0100               	movlb	0	; () banked
 13172  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13173  001A04  0E71               	movlw	113
 13174  001A06  0100               	movlb	0	; () banked
 13175  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 13176  001A0A  0E1E               	movlw	30
 13177  001A0C                     u8157:
 13178  001A0C  2EE8               	decfsz	wreg,f,c
 13179  001A0E  D7FE               	bra	u8157
 13180  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13181  001A12  D7FC               	bra	u8157
 13182  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13183  001A16  D7FA               	bra	u8157
 13184  001A18  F000               	nop	
 13185                           
 13186                           ;Test.c: 366: updateServoPosition(750, 1);
 13187  001A1A  0E02               	movlw	2
 13188  001A1C  0100               	movlb	0	; () banked
 13189  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13190  001A20  0EEE               	movlw	238
 13191  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13192  001A24  0E00               	movlw	0
 13193  001A26  0100               	movlb	0	; () banked
 13194  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13195  001A2A  0E01               	movlw	1
 13196  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13197  001A2E  EC24  F01E         	call	_updateServoPosition	;wreg free
 13198                           
 13199                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13200  001A32  0E1F               	movlw	31
 13201  001A34  0100               	movlb	0	; () banked
 13202  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13203  001A38  0E71               	movlw	113
 13204  001A3A  0100               	movlb	0	; () banked
 13205  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13206  001A3E  0E1E               	movlw	30
 13207  001A40                     u8167:
 13208  001A40  2EE8               	decfsz	wreg,f,c
 13209  001A42  D7FE               	bra	u8167
 13210  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13211  001A46  D7FC               	bra	u8167
 13212  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13213  001A4A  D7FA               	bra	u8167
 13214  001A4C  F000               	nop	
 13215                           
 13216                           ;Test.c: 368: updateServoPosition(1350, 3);
 13217  001A4E  0E05               	movlw	5
 13218  001A50  0100               	movlb	0	; () banked
 13219  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13220  001A54  0E46               	movlw	70
 13221  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13222  001A58  0E00               	movlw	0
 13223  001A5A  0100               	movlb	0	; () banked
 13224  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13225  001A5E  0E03               	movlw	3
 13226  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13227  001A62  EC24  F01E         	call	_updateServoPosition	;wreg free
 13228                           
 13229                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13230  001A66  0E52               	movlw	82
 13231  001A68  0100               	movlb	0	; () banked
 13232  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13233  001A6C  0E2B               	movlw	43
 13234  001A6E  0100               	movlb	0	; () banked
 13235  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13236  001A72  0E00               	movlw	0
 13237  001A74                     u8177:
 13238  001A74  2EE8               	decfsz	wreg,f,c
 13239  001A76  D7FE               	bra	u8177
 13240  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13241  001A7A  D7FC               	bra	u8177
 13242  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13243  001A7E  D7FA               	bra	u8177
 13244  001A80  F000               	nop	
 13245                           
 13246                           ;Test.c: 370: updateServoPosition(1150, 3);
 13247  001A82  0E04               	movlw	4
 13248  001A84  0100               	movlb	0	; () banked
 13249  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13250  001A88  0E7E               	movlw	126
 13251  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13252  001A8C  0E00               	movlw	0
 13253  001A8E  0100               	movlb	0	; () banked
 13254  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13255  001A92  0E03               	movlw	3
 13256  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13257  001A96  EC24  F01E         	call	_updateServoPosition	;wreg free
 13258                           
 13259                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13260  001A9A  0E1F               	movlw	31
 13261  001A9C  0100               	movlb	0	; () banked
 13262  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13263  001AA0  0E71               	movlw	113
 13264  001AA2  0100               	movlb	0	; () banked
 13265  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13266  001AA6  0E1E               	movlw	30
 13267  001AA8                     u8187:
 13268  001AA8  2EE8               	decfsz	wreg,f,c
 13269  001AAA  D7FE               	bra	u8187
 13270  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13271  001AAE  D7FC               	bra	u8187
 13272  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13273  001AB2  D7FA               	bra	u8187
 13274  001AB4  F000               	nop	
 13275                           
 13276                           ;Test.c: 373: updateServoPosition(1200, 1);
 13277  001AB6  0E04               	movlw	4
 13278  001AB8  0100               	movlb	0	; () banked
 13279  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13280  001ABC  0EB0               	movlw	176
 13281  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13282  001AC0  0E00               	movlw	0
 13283  001AC2  0100               	movlb	0	; () banked
 13284  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13285  001AC6  0E01               	movlw	1
 13286  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13287  001ACA  EC24  F01E         	call	_updateServoPosition	;wreg free
 13288                           
 13289                           ;Test.c: 374: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13290  001ACE  0E3D               	movlw	61
 13291  001AD0  0100               	movlb	0	; () banked
 13292  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13293  001AD4  0EE1               	movlw	225
 13294  001AD6  0100               	movlb	0	; () banked
 13295  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 13296  001ADA  0E3F               	movlw	63
 13297  001ADC                     u8197:
 13298  001ADC  2EE8               	decfsz	wreg,f,c
 13299  001ADE  D7FE               	bra	u8197
 13300  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13301  001AE2  D7FC               	bra	u8197
 13302  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13303  001AE6  D7FA               	bra	u8197
 13304  001AE8  D000               	nop2	
 13305                           
 13306                           ;Test.c: 376: updateServoPosition(1700, 1);
 13307  001AEA  0E06               	movlw	6
 13308  001AEC  0100               	movlb	0	; () banked
 13309  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13310  001AF0  0EA4               	movlw	164
 13311  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13312  001AF4  0E00               	movlw	0
 13313  001AF6  0100               	movlb	0	; () banked
 13314  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13315  001AFA  0E01               	movlw	1
 13316  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13317  001AFE  EC24  F01E         	call	_updateServoPosition	;wreg free
 13318                           
 13319                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 13320  001B02  0E1F               	movlw	31
 13321  001B04  0100               	movlb	0	; () banked
 13322  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13323  001B08  0E71               	movlw	113
 13324  001B0A  0100               	movlb	0	; () banked
 13325  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13326  001B0E  0E1E               	movlw	30
 13327  001B10                     u8207:
 13328  001B10  2EE8               	decfsz	wreg,f,c
 13329  001B12  D7FE               	bra	u8207
 13330  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13331  001B16  D7FC               	bra	u8207
 13332  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13333  001B1A  D7FA               	bra	u8207
 13334  001B1C  F000               	nop	
 13335                           
 13336                           ;Test.c: 378: updateServoPosition(1350, 3);
 13337  001B1E  0E05               	movlw	5
 13338  001B20  0100               	movlb	0	; () banked
 13339  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13340  001B24  0E46               	movlw	70
 13341  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13342  001B28  0E00               	movlw	0
 13343  001B2A  0100               	movlb	0	; () banked
 13344  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13345  001B2E  0E03               	movlw	3
 13346  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13347  001B32  EC24  F01E         	call	_updateServoPosition	;wreg free
 13348                           
 13349                           ;Test.c: 379: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13350  001B36  0E52               	movlw	82
 13351  001B38  0100               	movlb	0	; () banked
 13352  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13353  001B3C  0E2B               	movlw	43
 13354  001B3E  0100               	movlb	0	; () banked
 13355  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13356  001B42  0E00               	movlw	0
 13357  001B44                     u8217:
 13358  001B44  2EE8               	decfsz	wreg,f,c
 13359  001B46  D7FE               	bra	u8217
 13360  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13361  001B4A  D7FC               	bra	u8217
 13362  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13363  001B4E  D7FA               	bra	u8217
 13364  001B50  F000               	nop	
 13365                           
 13366                           ;Test.c: 380: updateServoPosition(1150, 3);
 13367  001B52  0E04               	movlw	4
 13368  001B54  0100               	movlb	0	; () banked
 13369  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13370  001B58  0E7E               	movlw	126
 13371  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13372  001B5C  0E00               	movlw	0
 13373  001B5E  0100               	movlb	0	; () banked
 13374  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13375  001B62  0E03               	movlw	3
 13376  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13377  001B66  EC24  F01E         	call	_updateServoPosition	;wreg free
 13378                           
 13379                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13380  001B6A  0E1F               	movlw	31
 13381  001B6C  0100               	movlb	0	; () banked
 13382  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13383  001B70  0E71               	movlw	113
 13384  001B72  0100               	movlb	0	; () banked
 13385  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13386  001B76  0E1E               	movlw	30
 13387  001B78                     u8227:
 13388  001B78  2EE8               	decfsz	wreg,f,c
 13389  001B7A  D7FE               	bra	u8227
 13390  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13391  001B7E  D7FC               	bra	u8227
 13392  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13393  001B82  D7FA               	bra	u8227
 13394  001B84  F000               	nop	
 13395                           
 13396                           ;Test.c: 383: updateServoPosition(2100, 1);
 13397  001B86  0E08               	movlw	8
 13398  001B88  0100               	movlb	0	; () banked
 13399  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13400  001B8C  0E34               	movlw	52
 13401  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13402  001B90  0E00               	movlw	0
 13403  001B92  0100               	movlb	0	; () banked
 13404  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13405  001B96  0E01               	movlw	1
 13406  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13407  001B9A  EC24  F01E         	call	_updateServoPosition	;wreg free
 13408                           
 13409                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13410  001B9E  0E1F               	movlw	31
 13411  001BA0  0100               	movlb	0	; () banked
 13412  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13413  001BA4  0E71               	movlw	113
 13414  001BA6  0100               	movlb	0	; () banked
 13415  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13416  001BAA  0E1E               	movlw	30
 13417  001BAC                     u8237:
 13418  001BAC  2EE8               	decfsz	wreg,f,c
 13419  001BAE  D7FE               	bra	u8237
 13420  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13421  001BB2  D7FC               	bra	u8237
 13422  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13423  001BB6  D7FA               	bra	u8237
 13424  001BB8  F000               	nop	
 13425                           
 13426                           ;Test.c: 385: updateServoPosition(1350, 3);
 13427  001BBA  0E05               	movlw	5
 13428  001BBC  0100               	movlb	0	; () banked
 13429  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13430  001BC0  0E46               	movlw	70
 13431  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13432  001BC4  0E00               	movlw	0
 13433  001BC6  0100               	movlb	0	; () banked
 13434  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13435  001BCA  0E03               	movlw	3
 13436  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13437  001BCE  EC24  F01E         	call	_updateServoPosition	;wreg free
 13438                           
 13439                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13440  001BD2  0E52               	movlw	82
 13441  001BD4  0100               	movlb	0	; () banked
 13442  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13443  001BD8  0E2B               	movlw	43
 13444  001BDA  0100               	movlb	0	; () banked
 13445  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13446  001BDE  0E00               	movlw	0
 13447  001BE0                     u8247:
 13448  001BE0  2EE8               	decfsz	wreg,f,c
 13449  001BE2  D7FE               	bra	u8247
 13450  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13451  001BE6  D7FC               	bra	u8247
 13452  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13453  001BEA  D7FA               	bra	u8247
 13454  001BEC  F000               	nop	
 13455                           
 13456                           ;Test.c: 387: updateServoPosition(1150, 3);
 13457  001BEE  0E04               	movlw	4
 13458  001BF0  0100               	movlb	0	; () banked
 13459  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13460  001BF4  0E7E               	movlw	126
 13461  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13462  001BF8  0E00               	movlw	0
 13463  001BFA  0100               	movlb	0	; () banked
 13464  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13465  001BFE  0E03               	movlw	3
 13466  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13467  001C02  EC24  F01E         	call	_updateServoPosition	;wreg free
 13468                           
 13469                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13470  001C06  0E1F               	movlw	31
 13471  001C08  0100               	movlb	0	; () banked
 13472  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13473  001C0C  0E71               	movlw	113
 13474  001C0E  0100               	movlb	0	; () banked
 13475  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13476  001C12  0E1E               	movlw	30
 13477  001C14                     u8257:
 13478  001C14  2EE8               	decfsz	wreg,f,c
 13479  001C16  D7FE               	bra	u8257
 13480  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13481  001C1A  D7FC               	bra	u8257
 13482  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13483  001C1E  D7FA               	bra	u8257
 13484  001C20  F000               	nop	
 13485                           
 13486                           ;Test.c: 390: TMR1ON = 0;
 13487  001C22  90CD               	bcf	4045,0,c	;volatile
 13488                           
 13489                           ;Test.c: 391: TMR3ON = 0;
 13490  001C24  90B1               	bcf	4017,0,c	;volatile
 13491                           
 13492                           ;Test.c: 392: (INTCONbits.GIE = 0);
 13493  001C26  9EF2               	bcf	intcon,7,c	;volatile
 13494  001C28  0012               	return		;funcret
 13495  001C2A                     __end_of_BothServos:
 13496                           	opt stack 0
 13497                           tblptru	equ	0xFF8
 13498                           tblptrh	equ	0xFF7
 13499                           tblptrl	equ	0xFF6
 13500                           tablat	equ	0xFF5
 13501                           prodh	equ	0xFF4
 13502                           prodl	equ	0xFF3
 13503                           intcon	equ	0xFF2
 13504                           intcon2	equ	0xFF1
 13505                           intcon3	equ	0xFF0
 13506                           postinc0	equ	0xFEE
 13507                           wreg	equ	0xFE8
 13508                           postdec1	equ	0xFE5
 13509                           fsr1l	equ	0xFE1
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           fsr2h	equ	0xFDA
 13514                           fsr2l	equ	0xFD9
 13515                           status	equ	0xFD8
 13516                           
 13517 ;; *************** function _printf *****************
 13518 ;; Defined at:
 13519 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13522 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 13523 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 13524 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 13525 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 13526 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 13527 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 13528 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 13529 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 13530 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 13531 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13532 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13533 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13534 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13535 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13536 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13537 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13538 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13539 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13540 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13541 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 13542 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13543 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13544 ;;		 -> STR_2(14), STR_1(18), 
 13545 ;; Auto vars:     Size  Location     Type
 13546 ;;  tmpval          4    0        struct .
 13547 ;;  width           2   41[BANK0 ] int 
 13548 ;;  val             2   37[BANK0 ] unsigned int 
 13549 ;;  len             2   35[BANK0 ] unsigned int 
 13550 ;;  ap              2   33[BANK0 ] PTR void [1]
 13551 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13552 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13553 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 13554 ;;  c               1   40[BANK0 ] char 
 13555 ;;  flag            1   39[BANK0 ] unsigned char 
 13556 ;;  prec            1   30[BANK0 ] char 
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  2   14[BANK0 ] int 
 13559 ;; Registers used:
 13560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13566 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13570 ;;Total ram usage:       29 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; Hardware stack levels required when called:    9
 13573 ;; This function calls:
 13574 ;;		___lwdiv
 13575 ;;		___lwmod
 13576 ;;		___wmul
 13577 ;;		_isdigit
 13578 ;;		_putch
 13579 ;; This function is called by:
 13580 ;;		_UI
 13581 ;;		_change_state_to_menu_start
 13582 ;;		_change_state_to_menu_12
 13583 ;;		_change_state_to_menu_22
 13584 ;;		_printRTC
 13585 ;;		_EEPROM_write
 13586 ;;		_Test
 13587 ;;		_algorithmTest
 13588 ;;		_sensorTest
 13589 ;;		_actuatorTest
 13590 ;;		_BothServos
 13591 ;;		_PortTestA5
 13592 ;;		_PusherTest
 13593 ;;		_ToggleTestA5
 13594 ;; This function uses a non-reentrant model
 13595 ;;
 13596                           
 13597                           	psect	text48
 13598  001170                     __ptext48:
 13599                           	opt stack 0
 13600  001170                     _printf:
 13601                           	opt stack 18
 13602                           
 13603                           ;doprnt.c: 466: va_list ap;
 13604                           ;doprnt.c: 499: signed char c;
 13605                           ;doprnt.c: 501: int width;
 13606                           ;doprnt.c: 506: signed char prec;
 13607                           ;doprnt.c: 508: unsigned char flag;
 13608                           ;doprnt.c: 523: union {
 13609                           ;doprnt.c: 524: unsigned long vd;
 13610                           ;doprnt.c: 525: double integ;
 13611                           ;doprnt.c: 526: } tmpval;
 13612                           ;doprnt.c: 528: unsigned int val;
 13613                           ;doprnt.c: 529: unsigned len;
 13614                           ;doprnt.c: 530: const char * cp;
 13615                           ;doprnt.c: 533: *ap = __va_start();
 13616                           
 13617                           ;incstack = 0
 13618  001170  0E90               	movlw	low (?_printf+2)
 13619  001172  0100               	movlb	0	; () banked
 13620  001174  6FA1               	movwf	printf@ap& (0+255),b
 13621  001176  0E00               	movlw	high (?_printf+2)
 13622  001178  0100               	movlb	0	; () banked
 13623  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13624                           
 13625                           ;doprnt.c: 536: while(c = *f++) {
 13626  00117C  D205               	goto	l5564
 13627  00117E                     l5434:
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;doprnt.c: 538: if(c != '%')
 13631  00117E  0E25               	movlw	37
 13632  001180  0100               	movlb	0	; () banked
 13633  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13634  001184  B4D8               	btfsc	status,2,c
 13635  001186  D005               	goto	l5438
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;doprnt.c: 540: {
 13639                           ;doprnt.c: 541: (putch(c) );
 13640  001188  0100               	movlb	0	; () banked
 13641  00118A  51A8               	movf	printf@c& (0+255),w,b
 13642  00118C  ECE4  F023         	call	_putch
 13643                           
 13644                           ;doprnt.c: 542: continue;
 13645  001190  D1FB               	goto	l5564
 13646  001192                     l5438:
 13647                           
 13648                           ;doprnt.c: 543: }
 13649                           ;doprnt.c: 546: width = 0;
 13650  001192  0E00               	movlw	0
 13651  001194  0100               	movlb	0	; () banked
 13652  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13653  001198  0E00               	movlw	0
 13654  00119A  6FA9               	movwf	printf@width& (0+255),b
 13655                           
 13656                           ;doprnt.c: 548: flag = 0;
 13657  00119C  0E00               	movlw	0
 13658  00119E  0100               	movlb	0	; () banked
 13659  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;doprnt.c: 551: switch(*f) {
 13663                           
 13664                           ;doprnt.c: 550: for(;;) {
 13665  0011A2  D005               	goto	l5444
 13666  0011A4                     l5440:
 13667                           
 13668                           ;doprnt.c: 580: flag |= 0x04;
 13669  0011A4  0100               	movlb	0	; () banked
 13670  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13671                           
 13672                           ;doprnt.c: 581: f++;
 13673  0011A8  0100               	movlb	0	; () banked
 13674  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13675  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13676  0011AE                     l5444:
 13677  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13678  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13679  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13680  0011B6  6AF8               	clrf	tblptru,c
 13681  0011B8                     	endif
 13682  0011B8                     	if	0	;tblptru may be non-zero
 13683  0011B8                     	endif
 13684  0011B8  0008               	tblrd		*
 13685  0011BA  50F5               	movf	tablat,w,c
 13686                           
 13687                           ; Switch size 1, requested type "space"
 13688                           ; Number of cases is 1, Range of values is 48 to 48
 13689                           ; switch strategies available:
 13690                           ; Name         Instructions Cycles
 13691                           ; simple_byte            4     3 (average)
 13692                           ;	Chosen strategy is simple_byte
 13693  0011BC  0A30               	xorlw	48	; case 48
 13694  0011BE  B4D8               	btfsc	status,2,c
 13695  0011C0  D7F1               	goto	l5440
 13696                           
 13697                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13698                           
 13699                           ;doprnt.c: 586: }
 13700                           
 13701                           ;doprnt.c: 585: break;
 13702  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13703  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13704  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13705  0011CA  6AF8               	clrf	tblptru,c
 13706  0011CC                     	endif
 13707  0011CC                     	if	0	;tblptru may be non-zero
 13708  0011CC                     	endif
 13709  0011CC  0008               	tblrd		*
 13710  0011CE  50F5               	movf	tablat,w,c
 13711  0011D0  EC09  F023         	call	_isdigit
 13712  0011D4  A0D8               	btfss	status,0,c
 13713  0011D6  D0D2               	goto	l5492
 13714                           
 13715                           ;doprnt.c: 598: width = 0;
 13716  0011D8  0E00               	movlw	0
 13717  0011DA  0100               	movlb	0	; () banked
 13718  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13719  0011DE  0E00               	movlw	0
 13720  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13721  0011E2                     l5450:
 13722                           
 13723                           ;doprnt.c: 600: width *= 10;
 13724  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13725  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13726  0011EA  0E00               	movlw	0
 13727  0011EC  0100               	movlb	0	; () banked
 13728  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13729  0011F0  0E0A               	movlw	10
 13730  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13731  0011F4  EC73  F021         	call	___wmul	;wreg free
 13732  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13733  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13734                           
 13735                           ;doprnt.c: 601: width += *f++ - '0';
 13736  001200  0ED0               	movlw	208
 13737  001202  0100               	movlb	0	; () banked
 13738  001204  6F9A               	movwf	??_printf& (0+255),b
 13739  001206  0EFF               	movlw	255
 13740  001208  0100               	movlb	0	; () banked
 13741  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13742  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13743  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13744  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13745  001214  6AF8               	clrf	tblptru,c
 13746  001216                     	endif
 13747  001216                     	if	0	;tblptru may be non-zero
 13748  001216                     	endif
 13749  001216  0008               	tblrd		*
 13750  001218  50F5               	movf	tablat,w,c
 13751  00121A  0100               	movlb	0	; () banked
 13752  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13753  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13754  001220  0100               	movlb	0	; () banked
 13755  001222  519A               	movf	??_printf& (0+255),w,b
 13756  001224  0100               	movlb	0	; () banked
 13757  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13758  001228  0100               	movlb	0	; () banked
 13759  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13760  00122C  0100               	movlb	0	; () banked
 13761  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13762  001230  0100               	movlb	0	; () banked
 13763  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13764  001234  0100               	movlb	0	; () banked
 13765  001236  27A9               	addwf	printf@width& (0+255),f,b
 13766  001238  0100               	movlb	0	; () banked
 13767  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13768  00123C  0100               	movlb	0	; () banked
 13769  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13770                           
 13771                           ; BSR set to: 0
 13772  001240  0100               	movlb	0	; () banked
 13773  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13774  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13778  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13779  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13780  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13781  00124E  6AF8               	clrf	tblptru,c
 13782  001250                     	endif
 13783  001250                     	if	0	;tblptru may be non-zero
 13784  001250                     	endif
 13785  001250  0008               	tblrd		*
 13786  001252  50F5               	movf	tablat,w,c
 13787  001254  EC09  F023         	call	_isdigit
 13788  001258  A0D8               	btfss	status,0,c
 13789  00125A  D090               	goto	l5492
 13790  00125C  D7C2               	goto	l5450
 13791  00125E                     l5458:
 13792                           
 13793                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13794  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13795  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13796  001266  CFDE F09F          	movff	postinc2,printf@cp
 13797  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13798  00126E  0E02               	movlw	2
 13799  001270  0100               	movlb	0	; () banked
 13800  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13801  001274  0E00               	movlw	0
 13802  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13803                           
 13804                           ; BSR set to: 0
 13805                           ;doprnt.c: 740: if(!cp)
 13806  001278  0100               	movlb	0	; () banked
 13807  00127A  519F               	movf	printf@cp& (0+255),w,b
 13808  00127C  0100               	movlb	0	; () banked
 13809  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13810  001280  A4D8               	btfss	status,2,c
 13811  001282  D006               	goto	l5466
 13812                           
 13813                           ; BSR set to: 0
 13814                           ;doprnt.c: 741: cp = "(null)";
 13815  001284  0EB6               	movlw	low STR_116
 13816  001286  0100               	movlb	0	; () banked
 13817  001288  6F9F               	movwf	printf@cp& (0+255),b
 13818  00128A  0EFF               	movlw	high STR_116
 13819  00128C  0100               	movlb	0	; () banked
 13820  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13821  001290                     l5466:
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;doprnt.c: 745: len = 0;
 13825  001290  0E00               	movlw	0
 13826  001292  0100               	movlb	0	; () banked
 13827  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13828  001296  0E00               	movlw	0
 13829  001298  6FA3               	movwf	printf@len& (0+255),b
 13830                           
 13831                           ;doprnt.c: 746: while(cp[len])
 13832  00129A  D003               	goto	l5470
 13833  00129C                     l5468:
 13834                           
 13835                           ;doprnt.c: 747: len++;
 13836  00129C  0100               	movlb	0	; () banked
 13837  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13838  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13839  0012A2                     l5470:
 13840                           
 13841                           ; BSR set to: 0
 13842  0012A2  0100               	movlb	0	; () banked
 13843  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13844  0012A6  0100               	movlb	0	; () banked
 13845  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13846  0012AA  0100               	movlb	0	; () banked
 13847  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13848  0012AE  0100               	movlb	0	; () banked
 13849  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13850  0012B2  0100               	movlb	0	; () banked
 13851  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13852  0012B6  0100               	movlb	0	; () banked
 13853  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13854  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13855  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13856  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13857  0012C4  6EF8               	movwf	tblptru,c
 13858  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13859  0012C8  64F7               	cpfsgt	tblptrh,c
 13860  0012CA  D003               	bra	u3887
 13861  0012CC  0008               	tblrd		*
 13862  0012CE  50F5               	movf	tablat,w,c
 13863  0012D0  D005               	bra	u3880
 13864  0012D2                     u3887:
 13865  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13866  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13867  0012DA  50EF               	movf	indf0,w,c
 13868  0012DC                     u3880:
 13869  0012DC  0900               	iorlw	0
 13870  0012DE  A4D8               	btfss	status,2,c
 13871  0012E0  D7DD               	goto	l5468
 13872                           
 13873                           ;doprnt.c: 757: if(width > len)
 13874  0012E2  0100               	movlb	0	; () banked
 13875  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13876  0012E6  0100               	movlb	0	; () banked
 13877  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13878  0012EA  0100               	movlb	0	; () banked
 13879  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13880  0012EE  0100               	movlb	0	; () banked
 13881  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13882  0012F2  B0D8               	btfsc	status,0,c
 13883  0012F4  D009               	goto	l5476
 13884                           
 13885                           ; BSR set to: 0
 13886                           ;doprnt.c: 758: width -= len;
 13887  0012F6  0100               	movlb	0	; () banked
 13888  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13889  0012FA  0100               	movlb	0	; () banked
 13890  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13891  0012FE  0100               	movlb	0	; () banked
 13892  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13893  001302  0100               	movlb	0	; () banked
 13894  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13895  001306  D009               	goto	l5480
 13896  001308                     l5476:
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;doprnt.c: 759: else
 13900                           ;doprnt.c: 760: width = 0;
 13901  001308  0E00               	movlw	0
 13902  00130A  0100               	movlb	0	; () banked
 13903  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13904  00130E  0E00               	movlw	0
 13905  001310  6FA9               	movwf	printf@width& (0+255),b
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;doprnt.c: 764: while(width--)
 13909  001312  D003               	goto	l5480
 13910  001314                     l5478:
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;doprnt.c: 765: (putch(' ') );
 13914  001314  0E20               	movlw	32
 13915  001316  ECE4  F023         	call	_putch
 13916  00131A                     l5480:
 13917  00131A  0100               	movlb	0	; () banked
 13918  00131C  07A9               	decf	printf@width& (0+255),f,b
 13919  00131E  A0D8               	btfss	status,0,c
 13920  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13921  001322  0100               	movlb	0	; () banked
 13922  001324  29A9               	incf	printf@width& (0+255),w,b
 13923  001326  E1F6               	bnz	l5478
 13924  001328  0100               	movlb	0	; () banked
 13925  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13926  00132C  B4D8               	btfsc	status,2,c
 13927  00132E  D017               	goto	l5486
 13928  001330  D7F1               	goto	l5478
 13929  001332                     l5482:
 13930                           
 13931                           ; BSR set to: 0
 13932                           ;doprnt.c: 768: (putch(*cp++) );
 13933  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13934  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13935  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13936  00133C  6EF8               	movwf	tblptru,c
 13937  00133E  0E0F               	movlw	(high __ramtop+-1)
 13938  001340  64F7               	cpfsgt	tblptrh,c
 13939  001342  D003               	bra	u3927
 13940  001344  0008               	tblrd		*
 13941  001346  50F5               	movf	tablat,w,c
 13942  001348  D005               	bra	u3920
 13943  00134A                     u3927:
 13944  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13945  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13946  001352  50EF               	movf	indf0,w,c
 13947  001354                     u3920:
 13948  001354  ECE4  F023         	call	_putch
 13949  001358  0100               	movlb	0	; () banked
 13950  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13951  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13952  00135E                     l5486:
 13953                           
 13954                           ; BSR set to: 0
 13955  00135E  0100               	movlb	0	; () banked
 13956  001360  07A3               	decf	printf@len& (0+255),f,b
 13957  001362  A0D8               	btfss	status,0,c
 13958  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13959  001366  0100               	movlb	0	; () banked
 13960  001368  29A3               	incf	printf@len& (0+255),w,b
 13961  00136A  E1E3               	bnz	l5482
 13962  00136C  0100               	movlb	0	; () banked
 13963  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13964  001370  B4D8               	btfsc	status,2,c
 13965  001372  D10A               	goto	l5564
 13966  001374  D7DE               	goto	l5482
 13967  001376                     l5488:
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;doprnt.c: 818: flag |= 0x40;
 13971  001376  0100               	movlb	0	; () banked
 13972  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;doprnt.c: 822: }
 13976                           
 13977                           ;doprnt.c: 819: break;
 13978  00137A  D01D               	goto	l1262
 13979  00137C                     l5492:
 13980  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13981  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13982  001384  0100               	movlb	0	; () banked
 13983  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13984  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13985  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13986  00138A  6AF8               	clrf	tblptru,c
 13987  00138C                     	endif
 13988  00138C                     	if	0	;tblptru may be non-zero
 13989  00138C                     	endif
 13990  00138C  0008               	tblrd		*
 13991  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13992  001392  0100               	movlb	0	; () banked
 13993  001394  51A8               	movf	printf@c& (0+255),w,b
 13994                           
 13995                           ; Switch size 1, requested type "space"
 13996                           ; Number of cases is 5, Range of values is 0 to 117
 13997                           ; switch strategies available:
 13998                           ; Name         Instructions Cycles
 13999                           ; simple_byte           16     9 (average)
 14000                           ;	Chosen strategy is simple_byte
 14001  001396  0A00               	xorlw	0	; case 0
 14002  001398  B4D8               	btfsc	status,2,c
 14003  00139A  0012               	return	
 14004  00139C  0A64               	xorlw	100	; case 100
 14005  00139E  B4D8               	btfsc	status,2,c
 14006  0013A0  D00A               	goto	l1262
 14007  0013A2  0A0D               	xorlw	13	; case 105
 14008  0013A4  B4D8               	btfsc	status,2,c
 14009  0013A6  D007               	goto	l1262
 14010  0013A8  0A1A               	xorlw	26	; case 115
 14011  0013AA  B4D8               	btfsc	status,2,c
 14012  0013AC  D758               	goto	l5458
 14013  0013AE  0A06               	xorlw	6	; case 117
 14014  0013B0  B4D8               	btfsc	status,2,c
 14015  0013B2  D7E1               	goto	l5488
 14016  0013B4  D0E9               	goto	l5564
 14017  0013B6                     l1262:
 14018                           
 14019                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14020  0013B6  0100               	movlb	0	; () banked
 14021  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14022  0013BA  D019               	goto	l5504
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;doprnt.c: 1253: {
 14026                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14027  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14028  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14029  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14030  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14031                           
 14032                           ; BSR set to: 0
 14033  0013CC  0E02               	movlw	2
 14034  0013CE  0100               	movlb	0	; () banked
 14035  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14036  0013D2  0E00               	movlw	0
 14037  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;doprnt.c: 1261: if((int)val < 0) {
 14041  0013D6  0100               	movlb	0	; () banked
 14042  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14043  0013DA  D016               	goto	l5508
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;doprnt.c: 1262: flag |= 0x03;
 14047  0013DC  0E03               	movlw	3
 14048  0013DE  0100               	movlb	0	; () banked
 14049  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;doprnt.c: 1263: val = -val;
 14053  0013E2  0100               	movlb	0	; () banked
 14054  0013E4  6DA5               	negf	printf@val& (0+255),b
 14055  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14056  0013E8  B0D8               	btfsc	status,0,c
 14057  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;doprnt.c: 1264: }
 14061                           ;doprnt.c: 1266: }
 14062  0013EC  D00D               	goto	l5508
 14063  0013EE                     l5504:
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;doprnt.c: 1268: else
 14067                           ;doprnt.c: 1273: {
 14068                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14069  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14070  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14071  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14072  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14073                           
 14074                           ; BSR set to: 0
 14075  0013FE  0E02               	movlw	2
 14076  001400  0100               	movlb	0	; () banked
 14077  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14078  001404  0E00               	movlw	0
 14079  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14080  001408                     l5508:
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;doprnt.c: 1287: }
 14084                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14085  001408  0E01               	movlw	1
 14086  00140A  0100               	movlb	0	; () banked
 14087  00140C  6FA8               	movwf	printf@c& (0+255),b
 14088  00140E                     l5510:
 14089                           
 14090                           ; BSR set to: 0
 14091  00140E  0E05               	movlw	5
 14092  001410  0100               	movlb	0	; () banked
 14093  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14094  001414  B4D8               	btfsc	status,2,c
 14095  001416  D019               	goto	l5522
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;doprnt.c: 1306: if(val < dpowers[c])
 14099                           
 14100                           ; BSR set to: 0
 14101                           
 14102                           ; BSR set to: 0
 14103  001418  0100               	movlb	0	; () banked
 14104  00141A  51A8               	movf	printf@c& (0+255),w,b
 14105  00141C  0D02               	mullw	2
 14106  00141E  0E36               	movlw	low _dpowers
 14107  001420  24F3               	addwf	prodl,w,c
 14108  001422  6EF6               	movwf	tblptrl,c
 14109  001424  0EFB               	movlw	high _dpowers
 14110  001426  20F4               	addwfc	prodh,w,c
 14111  001428  6EF7               	movwf	tblptrh,c
 14112  00142A                     	if	1	;There are 3 active tblptr bytes
 14113  00142A  6AF8               	clrf	tblptru,c
 14114  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14115  00142E  22F8               	addwfc	tblptru,f,c
 14116  001430                     	endif
 14117  001430  0009               	tblrd		*+
 14118  001432  50F5               	movf	tablat,w,c
 14119  001434  0100               	movlb	0	; () banked
 14120  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14121  001438  0009               	tblrd		*+
 14122  00143A  50F5               	movf	tablat,w,c
 14123  00143C  0100               	movlb	0	; () banked
 14124  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14125  001440  A0D8               	btfss	status,0,c
 14126  001442  D003               	goto	l5522
 14127                           
 14128                           ; BSR set to: 0
 14129                           
 14130                           ; BSR set to: 0
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;doprnt.c: 1307: break;
 14134  001444  0100               	movlb	0	; () banked
 14135  001446  2BA8               	incf	printf@c& (0+255),f,b
 14136  001448  D7E2               	goto	l5510
 14137  00144A                     l5522:
 14138                           
 14139                           ; BSR set to: 0
 14140                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14141  00144A  0100               	movlb	0	; () banked
 14142  00144C  51A9               	movf	printf@width& (0+255),w,b
 14143  00144E  0100               	movlb	0	; () banked
 14144  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14145  001452  B4D8               	btfsc	status,2,c
 14146  001454  D00B               	goto	l5528
 14147                           
 14148                           ; BSR set to: 0
 14149  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14150  00145A  0E03               	movlw	3
 14151  00145C  0100               	movlb	0	; () banked
 14152  00145E  179A               	andwf	??_printf& (0+255),f,b
 14153  001460  B4D8               	btfsc	status,2,c
 14154  001462  D004               	goto	l5528
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;doprnt.c: 1346: width--;
 14158  001464  0100               	movlb	0	; () banked
 14159  001466  07A9               	decf	printf@width& (0+255),f,b
 14160  001468  A0D8               	btfss	status,0,c
 14161  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14162  00146C                     l5528:
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;doprnt.c: 1381: if(width > c)
 14166  00146C  0E80               	movlw	128
 14167  00146E  0100               	movlb	0	; () banked
 14168  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14169  001472  0E7F               	movlw	127
 14170  001474  0100               	movlb	0	; () banked
 14171  001476  6F9A               	movwf	??_printf& (0+255),b
 14172  001478  0100               	movlb	0	; () banked
 14173  00147A  51A9               	movf	printf@width& (0+255),w,b
 14174  00147C  0100               	movlb	0	; () banked
 14175  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14176  001480  0100               	movlb	0	; () banked
 14177  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14178  001484  0A80               	xorlw	128
 14179  001486  0100               	movlb	0	; () banked
 14180  001488  599A               	subwfb	??_printf& (0+255),w,b
 14181  00148A  B0D8               	btfsc	status,0,c
 14182  00148C  D00B               	goto	l5532
 14183                           
 14184                           ; BSR set to: 0
 14185                           ;doprnt.c: 1382: width -= c;
 14186  00148E  0100               	movlb	0	; () banked
 14187  001490  51A8               	movf	printf@c& (0+255),w,b
 14188  001492  0100               	movlb	0	; () banked
 14189  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14190  001496  0E00               	movlw	0
 14191  001498  0100               	movlb	0	; () banked
 14192  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14193  00149C  0EFF               	movlw	255
 14194  00149E  0100               	movlb	0	; () banked
 14195  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14196  0014A2  D005               	goto	l5534
 14197  0014A4                     l5532:
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;doprnt.c: 1383: else
 14201                           ;doprnt.c: 1384: width = 0;
 14202  0014A4  0E00               	movlw	0
 14203  0014A6  0100               	movlb	0	; () banked
 14204  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14205  0014AA  0E00               	movlw	0
 14206  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14207  0014AE                     l5534:
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;doprnt.c: 1387: if(flag & 0x04) {
 14211  0014AE  0100               	movlb	0	; () banked
 14212  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14213  0014B2  D018               	goto	l5546
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;doprnt.c: 1392: if(flag & 0x03)
 14217  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14218  0014B8  0E03               	movlw	3
 14219  0014BA  0100               	movlb	0	; () banked
 14220  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14221  0014BE  B4D8               	btfsc	status,2,c
 14222  0014C0  D003               	goto	l5540
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;doprnt.c: 1393: (putch('-') );
 14226  0014C2  0E2D               	movlw	45
 14227  0014C4  ECE4  F023         	call	_putch
 14228  0014C8                     l5540:
 14229                           
 14230                           ;doprnt.c: 1415: if(width)
 14231  0014C8  0100               	movlb	0	; () banked
 14232  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14233  0014CC  0100               	movlb	0	; () banked
 14234  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14235  0014D0  B4D8               	btfsc	status,2,c
 14236  0014D2  D025               	goto	l5556
 14237                           
 14238                           ; BSR set to: 0
 14239                           ;doprnt.c: 1417: (putch('0') );
 14240                           
 14241                           ; BSR set to: 0
 14242                           
 14243                           ;doprnt.c: 1416: do
 14244  0014D4  0E30               	movlw	48
 14245  0014D6  ECE4  F023         	call	_putch
 14246                           
 14247                           ;doprnt.c: 1418: while(--width);
 14248  0014DA  0100               	movlb	0	; () banked
 14249  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14250  0014DE  A0D8               	btfss	status,0,c
 14251  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14252  0014E2  D7F2               	goto	l5540
 14253  0014E4                     l5546:
 14254                           
 14255                           ; BSR set to: 0
 14256                           ;doprnt.c: 1422: {
 14257                           ;doprnt.c: 1424: if(width
 14258                           ;doprnt.c: 1428: )
 14259  0014E4  0100               	movlb	0	; () banked
 14260  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14261  0014E8  0100               	movlb	0	; () banked
 14262  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14263  0014EC  B4D8               	btfsc	status,2,c
 14264  0014EE  D00D               	goto	l5552
 14265  0014F0                     l5548:
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;doprnt.c: 1430: (putch(' ') );
 14269  0014F0  0E20               	movlw	32
 14270  0014F2  ECE4  F023         	call	_putch
 14271                           
 14272                           ;doprnt.c: 1431: while(--width);
 14273  0014F6  0100               	movlb	0	; () banked
 14274  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14275  0014FA  A0D8               	btfss	status,0,c
 14276  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14277  0014FE  0100               	movlb	0	; () banked
 14278  001500  51A9               	movf	printf@width& (0+255),w,b
 14279  001502  0100               	movlb	0	; () banked
 14280  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14281  001506  A4D8               	btfss	status,2,c
 14282  001508  D7F3               	goto	l5548
 14283  00150A                     l5552:
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;doprnt.c: 1438: if(flag & 0x03)
 14287  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14288  00150E  0E03               	movlw	3
 14289  001510  0100               	movlb	0	; () banked
 14290  001512  179A               	andwf	??_printf& (0+255),f,b
 14291  001514  B4D8               	btfsc	status,2,c
 14292  001516  D003               	goto	l5556
 14293                           
 14294                           ; BSR set to: 0
 14295                           ;doprnt.c: 1439: (putch('-') );
 14296  001518  0E2D               	movlw	45
 14297  00151A  ECE4  F023         	call	_putch
 14298  00151E                     l5556:
 14299                           
 14300                           ;doprnt.c: 1469: }
 14301                           ;doprnt.c: 1472: prec = c;
 14302  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14303                           
 14304                           ;doprnt.c: 1474: while(prec--) {
 14305  001522  D02C               	goto	l5562
 14306  001524                     l5558:
 14307                           
 14308                           ;doprnt.c: 1478: {
 14309                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14310  001524  0100               	movlb	0	; () banked
 14311  001526  519E               	movf	printf@prec& (0+255),w,b
 14312  001528  0D02               	mullw	2
 14313  00152A  0E36               	movlw	low _dpowers
 14314  00152C  24F3               	addwf	prodl,w,c
 14315  00152E  6EF6               	movwf	tblptrl,c
 14316  001530  0EFB               	movlw	high _dpowers
 14317  001532  20F4               	addwfc	prodh,w,c
 14318  001534  6EF7               	movwf	tblptrh,c
 14319  001536                     	if	1	;There are 3 active tblptr bytes
 14320  001536  6AF8               	clrf	tblptru,c
 14321  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14322  00153A  22F8               	addwfc	tblptru,f,c
 14323  00153C                     	endif
 14324  00153C  0009               	tblrd		*+
 14325  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14326  001542  000A               	tblrd		*-
 14327  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14328  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14329  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14330  001550  ECE8  F01D         	call	___lwdiv	;wreg free
 14331  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14332  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14333  00155C  0E00               	movlw	0
 14334  00155E  0100               	movlb	0	; () banked
 14335  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14336  001562  0E0A               	movlw	10
 14337  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14338  001566  EC01  F01F         	call	___lwmod	;wreg free
 14339  00156A  0100               	movlb	0	; () banked
 14340  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14341  00156E  0F30               	addlw	48
 14342  001570  0100               	movlb	0	; () banked
 14343  001572  6FA8               	movwf	printf@c& (0+255),b
 14344                           
 14345                           ; BSR set to: 0
 14346                           ;doprnt.c: 1523: }
 14347                           ;doprnt.c: 1524: (putch(c) );
 14348  001574  0100               	movlb	0	; () banked
 14349  001576  51A8               	movf	printf@c& (0+255),w,b
 14350  001578  ECE4  F023         	call	_putch
 14351  00157C                     l5562:
 14352  00157C  0100               	movlb	0	; () banked
 14353  00157E  079E               	decf	printf@prec& (0+255),f,b
 14354  001580  0100               	movlb	0	; () banked
 14355  001582  299E               	incf	printf@prec& (0+255),w,b
 14356  001584  A4D8               	btfss	status,2,c
 14357  001586  D7CE               	goto	l5558
 14358  001588                     l5564:
 14359  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14360  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14361  001590  0100               	movlb	0	; () banked
 14362  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14363  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14364  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14365  001596  6AF8               	clrf	tblptru,c
 14366  001598                     	endif
 14367  001598                     	if	0	;tblptru may be non-zero
 14368  001598                     	endif
 14369  001598  0008               	tblrd		*
 14370  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14371  00159E  0100               	movlb	0	; () banked
 14372  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14373  0015A2  B4D8               	btfsc	status,2,c
 14374  0015A4  0012               	return	
 14375  0015A6  D5EB               	goto	l5434
 14376  0015A8                     __end_of_printf:
 14377                           	opt stack 0
 14378                           tblptru	equ	0xFF8
 14379                           tblptrh	equ	0xFF7
 14380                           tblptrl	equ	0xFF6
 14381                           tablat	equ	0xFF5
 14382                           prodh	equ	0xFF4
 14383                           prodl	equ	0xFF3
 14384                           intcon	equ	0xFF2
 14385                           intcon2	equ	0xFF1
 14386                           intcon3	equ	0xFF0
 14387                           indf0	equ	0xFEF
 14388                           postinc0	equ	0xFEE
 14389                           fsr0h	equ	0xFEA
 14390                           fsr0l	equ	0xFE9
 14391                           wreg	equ	0xFE8
 14392                           postdec1	equ	0xFE5
 14393                           fsr1l	equ	0xFE1
 14394                           indf2	equ	0xFDF
 14395                           postinc2	equ	0xFDE
 14396                           postdec2	equ	0xFDD
 14397                           fsr2h	equ	0xFDA
 14398                           fsr2l	equ	0xFD9
 14399                           status	equ	0xFD8
 14400                           
 14401 ;; *************** function _putch *****************
 14402 ;; Defined at:
 14403 ;;		line 20 in file "lcd.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  data            1    wreg     unsigned char 
 14406 ;; Auto vars:     Size  Location     Type
 14407 ;;  data            1    2[BANK0 ] unsigned char 
 14408 ;; Return value:  Size  Location     Type
 14409 ;;                  1    wreg      void 
 14410 ;; Registers used:
 14411 ;;		wreg, status,2, status,0, cstack
 14412 ;; Tracked objects:
 14413 ;;		On entry : 0/0
 14414 ;;		On exit  : 0/0
 14415 ;;		Unchanged: 0/0
 14416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;Total ram usage:        1 bytes
 14422 ;; Hardware stack levels used:    1
 14423 ;; Hardware stack levels required when called:    8
 14424 ;; This function calls:
 14425 ;;		_lcdNibble
 14426 ;; This function is called by:
 14427 ;;		_printf
 14428 ;; This function uses a non-reentrant model
 14429 ;;
 14430                           
 14431                           	psect	text49
 14432  0047C8                     __ptext49:
 14433                           	opt stack 0
 14434  0047C8                     _putch:
 14435                           	opt stack 18
 14436                           
 14437                           ;incstack = 0
 14438                           ;putch@data stored from wreg
 14439  0047C8  0100               	movlb	0	; () banked
 14440  0047CA  6F82               	movwf	putch@data& (0+255),b
 14441                           
 14442                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14443  0047CC  848C               	bsf	3980,2,c	;volatile
 14444                           
 14445                           ;lcd.c: 22: lcdNibble(data);
 14446  0047CE  0100               	movlb	0	; () banked
 14447  0047D0  5182               	movf	putch@data& (0+255),w,b
 14448  0047D2  ECCD  F01E         	call	_lcdNibble
 14449  0047D6  0012               	return		;funcret
 14450  0047D8                     __end_of_putch:
 14451                           	opt stack 0
 14452                           tblptru	equ	0xFF8
 14453                           tblptrh	equ	0xFF7
 14454                           tblptrl	equ	0xFF6
 14455                           tablat	equ	0xFF5
 14456                           prodh	equ	0xFF4
 14457                           prodl	equ	0xFF3
 14458                           intcon	equ	0xFF2
 14459                           intcon2	equ	0xFF1
 14460                           intcon3	equ	0xFF0
 14461                           indf0	equ	0xFEF
 14462                           postinc0	equ	0xFEE
 14463                           fsr0h	equ	0xFEA
 14464                           fsr0l	equ	0xFE9
 14465                           wreg	equ	0xFE8
 14466                           postdec1	equ	0xFE5
 14467                           fsr1l	equ	0xFE1
 14468                           indf2	equ	0xFDF
 14469                           postinc2	equ	0xFDE
 14470                           postdec2	equ	0xFDD
 14471                           fsr2h	equ	0xFDA
 14472                           fsr2l	equ	0xFD9
 14473                           status	equ	0xFD8
 14474                           
 14475 ;; *************** function _isdigit *****************
 14476 ;; Defined at:
 14477 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14478 ;; Parameters:    Size  Location     Type
 14479 ;;  c               1    wreg     unsigned char 
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;  c               1    2[BANK0 ] unsigned char 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;		None               void
 14484 ;; Registers used:
 14485 ;;		wreg, status,2, status,0
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14495 ;;Total ram usage:        3 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    7
 14498 ;; This function calls:
 14499 ;;		Nothing
 14500 ;; This function is called by:
 14501 ;;		_printf
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           	psect	text50
 14506  004612                     __ptext50:
 14507                           	opt stack 0
 14508  004612                     _isdigit:
 14509                           	opt stack 19
 14510                           
 14511                           ;incstack = 0
 14512                           ;isdigit@c stored from wreg
 14513  004612  0100               	movlb	0	; () banked
 14514  004614  6F82               	movwf	isdigit@c& (0+255),b
 14515  004616  0E00               	movlw	0
 14516  004618  0100               	movlb	0	; () banked
 14517  00461A  6F81               	movwf	_isdigit$1944& (0+255),b
 14518                           
 14519                           ; BSR set to: 0
 14520  00461C  0E3A               	movlw	58
 14521  00461E  0100               	movlb	0	; () banked
 14522  004620  6182               	cpfslt	isdigit@c& (0+255),b
 14523  004622  D007               	goto	l5282
 14524                           
 14525                           ; BSR set to: 0
 14526  004624  0E2F               	movlw	47
 14527  004626  0100               	movlb	0	; () banked
 14528  004628  6582               	cpfsgt	isdigit@c& (0+255),b
 14529  00462A  D003               	goto	l5282
 14530                           
 14531                           ; BSR set to: 0
 14532  00462C  0E01               	movlw	1
 14533  00462E  0100               	movlb	0	; () banked
 14534  004630  6F81               	movwf	_isdigit$1944& (0+255),b
 14535  004632                     l5282:
 14536                           
 14537                           ; BSR set to: 0
 14538  004632  C081  F080         	movff	_isdigit$1944,??_isdigit
 14539  004636  0100               	movlb	0	; () banked
 14540  004638  3180               	rrcf	??_isdigit& (0+255),w,b
 14541  00463A  0012               	return	
 14542  00463C                     __end_of_isdigit:
 14543                           	opt stack 0
 14544                           tblptru	equ	0xFF8
 14545                           tblptrh	equ	0xFF7
 14546                           tblptrl	equ	0xFF6
 14547                           tablat	equ	0xFF5
 14548                           prodh	equ	0xFF4
 14549                           prodl	equ	0xFF3
 14550                           intcon	equ	0xFF2
 14551                           intcon2	equ	0xFF1
 14552                           intcon3	equ	0xFF0
 14553                           indf0	equ	0xFEF
 14554                           postinc0	equ	0xFEE
 14555                           fsr0h	equ	0xFEA
 14556                           fsr0l	equ	0xFE9
 14557                           wreg	equ	0xFE8
 14558                           postdec1	equ	0xFE5
 14559                           fsr1l	equ	0xFE1
 14560                           indf2	equ	0xFDF
 14561                           postinc2	equ	0xFDE
 14562                           postdec2	equ	0xFDD
 14563                           fsr2h	equ	0xFDA
 14564                           fsr2l	equ	0xFD9
 14565                           status	equ	0xFD8
 14566                           
 14567 ;; *************** function ___wmul *****************
 14568 ;; Defined at:
 14569 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14570 ;; Parameters:    Size  Location     Type
 14571 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14572 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14573 ;; Auto vars:     Size  Location     Type
 14574 ;;  product         2    4[BANK0 ] unsigned int 
 14575 ;; Return value:  Size  Location     Type
 14576 ;;                  2    0[BANK0 ] unsigned int 
 14577 ;; Registers used:
 14578 ;;		wreg, status,2, status,0, prodl, prodh
 14579 ;; Tracked objects:
 14580 ;;		On entry : 0/0
 14581 ;;		On exit  : 0/0
 14582 ;;		Unchanged: 0/0
 14583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14588 ;;Total ram usage:        6 bytes
 14589 ;; Hardware stack levels used:    1
 14590 ;; Hardware stack levels required when called:    7
 14591 ;; This function calls:
 14592 ;;		Nothing
 14593 ;; This function is called by:
 14594 ;;		_printf
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           	psect	text51
 14599  0042E6                     __ptext51:
 14600                           	opt stack 0
 14601  0042E6                     ___wmul:
 14602                           	opt stack 19
 14603                           
 14604                           ; BSR set to: 0
 14605                           ;incstack = 0
 14606  0042E6  0100               	movlb	0	; () banked
 14607  0042E8  5180               	movf	___wmul@multiplier& (0+255),w,b
 14608  0042EA  0100               	movlb	0	; () banked
 14609  0042EC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14610  0042EE  CFF3 F084          	movff	prodl,___wmul@product
 14611  0042F2  CFF4 F085          	movff	prodh,___wmul@product+1
 14612  0042F6  0100               	movlb	0	; () banked
 14613  0042F8  5180               	movf	___wmul@multiplier& (0+255),w,b
 14614  0042FA  0100               	movlb	0	; () banked
 14615  0042FC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14616  0042FE  50F3               	movf	prodl,w,c
 14617  004300  0100               	movlb	0	; () banked
 14618  004302  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14619  004304  0100               	movlb	0	; () banked
 14620  004306  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14621  004308  0100               	movlb	0	; () banked
 14622  00430A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14623  00430C  50F3               	movf	prodl,w,c
 14624  00430E  0100               	movlb	0	; () banked
 14625  004310  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14626                           
 14627                           ; BSR set to: 0
 14628  004312  C084  F080         	movff	___wmul@product,?___wmul
 14629  004316  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14630  00431A  0012               	return	
 14631  00431C                     __end_of___wmul:
 14632                           	opt stack 0
 14633                           tblptru	equ	0xFF8
 14634                           tblptrh	equ	0xFF7
 14635                           tblptrl	equ	0xFF6
 14636                           tablat	equ	0xFF5
 14637                           prodh	equ	0xFF4
 14638                           prodl	equ	0xFF3
 14639                           intcon	equ	0xFF2
 14640                           intcon2	equ	0xFF1
 14641                           intcon3	equ	0xFF0
 14642                           indf0	equ	0xFEF
 14643                           postinc0	equ	0xFEE
 14644                           fsr0h	equ	0xFEA
 14645                           fsr0l	equ	0xFE9
 14646                           wreg	equ	0xFE8
 14647                           postdec1	equ	0xFE5
 14648                           fsr1l	equ	0xFE1
 14649                           indf2	equ	0xFDF
 14650                           postinc2	equ	0xFDE
 14651                           postdec2	equ	0xFDD
 14652                           fsr2h	equ	0xFDA
 14653                           fsr2l	equ	0xFD9
 14654                           status	equ	0xFD8
 14655                           
 14656 ;; *************** function ___lwmod *****************
 14657 ;; Defined at:
 14658 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  dividend        2    7[BANK0 ] unsigned int 
 14661 ;;  divisor         2    9[BANK0 ] unsigned int 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  counter         1   11[BANK0 ] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;                  2    7[BANK0 ] unsigned int 
 14666 ;; Registers used:
 14667 ;;		wreg, status,2, status,0
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14673 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14676 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14677 ;;Total ram usage:        5 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:    7
 14680 ;; This function calls:
 14681 ;;		Nothing
 14682 ;; This function is called by:
 14683 ;;		_printf
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687                           	psect	text52
 14688  003E02                     __ptext52:
 14689                           	opt stack 0
 14690  003E02                     ___lwmod:
 14691                           	opt stack 19
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;incstack = 0
 14695  003E02  0100               	movlb	0	; () banked
 14696  003E04  5189               	movf	___lwmod@divisor& (0+255),w,b
 14697  003E06  0100               	movlb	0	; () banked
 14698  003E08  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14699  003E0A  B4D8               	btfsc	status,2,c
 14700  003E0C  D026               	goto	l1719
 14701                           
 14702                           ; BSR set to: 0
 14703  003E0E  0E01               	movlw	1
 14704  003E10  0100               	movlb	0	; () banked
 14705  003E12  6F8B               	movwf	___lwmod@counter& (0+255),b
 14706  003E14  D006               	goto	l5320
 14707  003E16                     l5318:
 14708                           
 14709                           ; BSR set to: 0
 14710  003E16  0100               	movlb	0	; () banked
 14711  003E18  90D8               	bcf	status,0,c
 14712  003E1A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14713  003E1C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14714  003E1E  0100               	movlb	0	; () banked
 14715  003E20  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14716  003E22                     l5320:
 14717                           
 14718                           ; BSR set to: 0
 14719  003E22  0100               	movlb	0	; () banked
 14720  003E24  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14721  003E26  D7F7               	goto	l5318
 14722  003E28                     l5322:
 14723                           
 14724                           ; BSR set to: 0
 14725  003E28  0100               	movlb	0	; () banked
 14726  003E2A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14727  003E2C  0100               	movlb	0	; () banked
 14728  003E2E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14729  003E30  0100               	movlb	0	; () banked
 14730  003E32  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14731  003E34  0100               	movlb	0	; () banked
 14732  003E36  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14733  003E38  A0D8               	btfss	status,0,c
 14734  003E3A  D008               	goto	l5326
 14735                           
 14736                           ; BSR set to: 0
 14737  003E3C  0100               	movlb	0	; () banked
 14738  003E3E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14739  003E40  0100               	movlb	0	; () banked
 14740  003E42  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14741  003E44  0100               	movlb	0	; () banked
 14742  003E46  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14743  003E48  0100               	movlb	0	; () banked
 14744  003E4A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14745  003E4C                     l5326:
 14746                           
 14747                           ; BSR set to: 0
 14748  003E4C  0100               	movlb	0	; () banked
 14749  003E4E  90D8               	bcf	status,0,c
 14750  003E50  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14751  003E52  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14752                           
 14753                           ; BSR set to: 0
 14754  003E54  0100               	movlb	0	; () banked
 14755  003E56  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14756  003E58  D7E7               	goto	l5322
 14757  003E5A                     l1719:
 14758                           
 14759                           ; BSR set to: 0
 14760  003E5A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14761  003E5E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14762                           
 14763                           ; BSR set to: 0
 14764  003E62  0012               	return		;funcret
 14765  003E64                     __end_of___lwmod:
 14766                           	opt stack 0
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           intcon	equ	0xFF2
 14774                           intcon2	equ	0xFF1
 14775                           intcon3	equ	0xFF0
 14776                           indf0	equ	0xFEF
 14777                           postinc0	equ	0xFEE
 14778                           fsr0h	equ	0xFEA
 14779                           fsr0l	equ	0xFE9
 14780                           wreg	equ	0xFE8
 14781                           postdec1	equ	0xFE5
 14782                           fsr1l	equ	0xFE1
 14783                           indf2	equ	0xFDF
 14784                           postinc2	equ	0xFDE
 14785                           postdec2	equ	0xFDD
 14786                           fsr2h	equ	0xFDA
 14787                           fsr2l	equ	0xFD9
 14788                           status	equ	0xFD8
 14789                           
 14790 ;; *************** function ___lwdiv *****************
 14791 ;; Defined at:
 14792 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  dividend        2    0[BANK0 ] unsigned int 
 14795 ;;  divisor         2    2[BANK0 ] unsigned int 
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;  quotient        2    4[BANK0 ] unsigned int 
 14798 ;;  counter         1    6[BANK0 ] unsigned char 
 14799 ;; Return value:  Size  Location     Type
 14800 ;;                  2    0[BANK0 ] unsigned int 
 14801 ;; Registers used:
 14802 ;;		wreg, status,2, status,0
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14808 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;Total ram usage:        7 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:    7
 14815 ;; This function calls:
 14816 ;;		Nothing
 14817 ;; This function is called by:
 14818 ;;		_printf
 14819 ;; This function uses a non-reentrant model
 14820 ;;
 14821                           
 14822                           	psect	text53
 14823  003BD0                     __ptext53:
 14824                           	opt stack 0
 14825  003BD0                     ___lwdiv:
 14826                           	opt stack 19
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;incstack = 0
 14830  003BD0  0E00               	movlw	0
 14831  003BD2  0100               	movlb	0	; () banked
 14832  003BD4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14833  003BD6  0E00               	movlw	0
 14834  003BD8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14835                           
 14836                           ; BSR set to: 0
 14837  003BDA  0100               	movlb	0	; () banked
 14838  003BDC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14839  003BDE  0100               	movlb	0	; () banked
 14840  003BE0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14841  003BE2  B4D8               	btfsc	status,2,c
 14842  003BE4  D02C               	goto	l1709
 14843                           
 14844                           ; BSR set to: 0
 14845  003BE6  0E01               	movlw	1
 14846  003BE8  0100               	movlb	0	; () banked
 14847  003BEA  6F86               	movwf	___lwdiv@counter& (0+255),b
 14848  003BEC  D006               	goto	l5300
 14849  003BEE                     l5298:
 14850                           
 14851                           ; BSR set to: 0
 14852  003BEE  0100               	movlb	0	; () banked
 14853  003BF0  90D8               	bcf	status,0,c
 14854  003BF2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14855  003BF4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14856  003BF6  0100               	movlb	0	; () banked
 14857  003BF8  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14858  003BFA                     l5300:
 14859                           
 14860                           ; BSR set to: 0
 14861  003BFA  0100               	movlb	0	; () banked
 14862  003BFC  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14863  003BFE  D7F7               	goto	l5298
 14864  003C00                     l5302:
 14865                           
 14866                           ; BSR set to: 0
 14867  003C00  0100               	movlb	0	; () banked
 14868  003C02  90D8               	bcf	status,0,c
 14869  003C04  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14870  003C06  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14871                           
 14872                           ; BSR set to: 0
 14873  003C08  0100               	movlb	0	; () banked
 14874  003C0A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14875  003C0C  0100               	movlb	0	; () banked
 14876  003C0E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14877  003C10  0100               	movlb	0	; () banked
 14878  003C12  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14879  003C14  0100               	movlb	0	; () banked
 14880  003C16  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14881  003C18  A0D8               	btfss	status,0,c
 14882  003C1A  D00A               	goto	l5310
 14883                           
 14884                           ; BSR set to: 0
 14885  003C1C  0100               	movlb	0	; () banked
 14886  003C1E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14887  003C20  0100               	movlb	0	; () banked
 14888  003C22  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14889  003C24  0100               	movlb	0	; () banked
 14890  003C26  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14891  003C28  0100               	movlb	0	; () banked
 14892  003C2A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14893                           
 14894                           ; BSR set to: 0
 14895  003C2C  0100               	movlb	0	; () banked
 14896  003C2E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14897  003C30                     l5310:
 14898                           
 14899                           ; BSR set to: 0
 14900  003C30  0100               	movlb	0	; () banked
 14901  003C32  90D8               	bcf	status,0,c
 14902  003C34  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14903  003C36  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14904                           
 14905                           ; BSR set to: 0
 14906  003C38  0100               	movlb	0	; () banked
 14907  003C3A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14908  003C3C  D7E1               	goto	l5302
 14909  003C3E                     l1709:
 14910                           
 14911                           ; BSR set to: 0
 14912  003C3E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14913  003C42  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14914                           
 14915                           ; BSR set to: 0
 14916  003C46  0012               	return		;funcret
 14917  003C48                     __end_of___lwdiv:
 14918                           	opt stack 0
 14919                           tblptru	equ	0xFF8
 14920                           tblptrh	equ	0xFF7
 14921                           tblptrl	equ	0xFF6
 14922                           tablat	equ	0xFF5
 14923                           prodh	equ	0xFF4
 14924                           prodl	equ	0xFF3
 14925                           intcon	equ	0xFF2
 14926                           intcon2	equ	0xFF1
 14927                           intcon3	equ	0xFF0
 14928                           indf0	equ	0xFEF
 14929                           postinc0	equ	0xFEE
 14930                           fsr0h	equ	0xFEA
 14931                           fsr0l	equ	0xFE9
 14932                           wreg	equ	0xFE8
 14933                           postdec1	equ	0xFE5
 14934                           fsr1l	equ	0xFE1
 14935                           indf2	equ	0xFDF
 14936                           postinc2	equ	0xFDE
 14937                           postdec2	equ	0xFDD
 14938                           fsr2h	equ	0xFDA
 14939                           fsr2l	equ	0xFD9
 14940                           status	equ	0xFD8
 14941                           
 14942 ;; *************** function _lcdInst *****************
 14943 ;; Defined at:
 14944 ;;		line 15 in file "lcd.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;  data            1    wreg     unsigned char 
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;  data            1    2[BANK0 ] unsigned char 
 14949 ;; Return value:  Size  Location     Type
 14950 ;;                  1    wreg      void 
 14951 ;; Registers used:
 14952 ;;		wreg, status,2, status,0, cstack
 14953 ;; Tracked objects:
 14954 ;;		On entry : 0/0
 14955 ;;		On exit  : 0/0
 14956 ;;		Unchanged: 0/0
 14957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14961 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14962 ;;Total ram usage:        1 bytes
 14963 ;; Hardware stack levels used:    1
 14964 ;; Hardware stack levels required when called:    8
 14965 ;; This function calls:
 14966 ;;		_lcdNibble
 14967 ;; This function is called by:
 14968 ;;		_UI
 14969 ;;		_change_state_to_menu_start
 14970 ;;		_change_state_to_menu_12
 14971 ;;		_change_state_to_menu_22
 14972 ;;		_initLCD
 14973 ;;		_printRTC
 14974 ;;		_Loading
 14975 ;;		_EEPROM_write
 14976 ;;		_Test
 14977 ;;		_algorithmTest
 14978 ;;		_sensorTest
 14979 ;;		_actuatorTest
 14980 ;;		_BothServos
 14981 ;;		_PortTestA5
 14982 ;;		_PusherTest
 14983 ;;		_ToggleTestA5
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           	psect	text54
 14988  0047D8                     __ptext54:
 14989                           	opt stack 0
 14990  0047D8                     _lcdInst:
 14991                           	opt stack 20
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;incstack = 0
 14995                           ;lcdInst@data stored from wreg
 14996  0047D8  0100               	movlb	0	; () banked
 14997  0047DA  6F82               	movwf	lcdInst@data& (0+255),b
 14998                           
 14999                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15000  0047DC  948C               	bcf	3980,2,c	;volatile
 15001                           
 15002                           ;lcd.c: 17: lcdNibble(data);
 15003  0047DE  0100               	movlb	0	; () banked
 15004  0047E0  5182               	movf	lcdInst@data& (0+255),w,b
 15005  0047E2  ECCD  F01E         	call	_lcdNibble
 15006  0047E6  0012               	return		;funcret
 15007  0047E8                     __end_of_lcdInst:
 15008                           	opt stack 0
 15009                           tblptru	equ	0xFF8
 15010                           tblptrh	equ	0xFF7
 15011                           tblptrl	equ	0xFF6
 15012                           tablat	equ	0xFF5
 15013                           prodh	equ	0xFF4
 15014                           prodl	equ	0xFF3
 15015                           intcon	equ	0xFF2
 15016                           intcon2	equ	0xFF1
 15017                           intcon3	equ	0xFF0
 15018                           indf0	equ	0xFEF
 15019                           postinc0	equ	0xFEE
 15020                           fsr0h	equ	0xFEA
 15021                           fsr0l	equ	0xFE9
 15022                           wreg	equ	0xFE8
 15023                           postdec1	equ	0xFE5
 15024                           fsr1l	equ	0xFE1
 15025                           indf2	equ	0xFDF
 15026                           postinc2	equ	0xFDE
 15027                           postdec2	equ	0xFDD
 15028                           fsr2h	equ	0xFDA
 15029                           fsr2l	equ	0xFD9
 15030                           status	equ	0xFD8
 15031                           
 15032 ;; *************** function _lcdNibble *****************
 15033 ;; Defined at:
 15034 ;;		line 25 in file "lcd.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;  data            1    wreg     unsigned char 
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;  data            1    1[BANK0 ] unsigned char 
 15039 ;;  temp            1    0[BANK0 ] unsigned char 
 15040 ;; Return value:  Size  Location     Type
 15041 ;;                  1    wreg      void 
 15042 ;; Registers used:
 15043 ;;		wreg, status,2, status,0
 15044 ;; Tracked objects:
 15045 ;;		On entry : 0/0
 15046 ;;		On exit  : 0/0
 15047 ;;		Unchanged: 0/0
 15048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;Total ram usage:        2 bytes
 15054 ;; Hardware stack levels used:    1
 15055 ;; Hardware stack levels required when called:    7
 15056 ;; This function calls:
 15057 ;;		Nothing
 15058 ;; This function is called by:
 15059 ;;		_lcdInst
 15060 ;;		_putch
 15061 ;; This function uses a non-reentrant model
 15062 ;;
 15063                           
 15064                           	psect	text55
 15065  003D9A                     __ptext55:
 15066                           	opt stack 0
 15067  003D9A                     _lcdNibble:
 15068                           	opt stack 20
 15069                           
 15070                           ;incstack = 0
 15071                           ;lcdNibble@data stored from wreg
 15072  003D9A  0100               	movlb	0	; () banked
 15073  003D9C  6F81               	movwf	lcdNibble@data& (0+255),b
 15074                           
 15075                           ;lcd.c: 27: char temp = data & 0xF0;
 15076  003D9E  0100               	movlb	0	; () banked
 15077  003DA0  5181               	movf	lcdNibble@data& (0+255),w,b
 15078  003DA2  0BF0               	andlw	240
 15079  003DA4  0100               	movlb	0	; () banked
 15080  003DA6  6F80               	movwf	lcdNibble@temp& (0+255),b
 15081                           
 15082                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15083  003DA8  508C               	movf	3980,w,c	;volatile
 15084  003DAA  0B0F               	andlw	15
 15085  003DAC  6E8C               	movwf	3980,c	;volatile
 15086                           
 15087                           ;lcd.c: 29: LATD = temp | LATD;
 15088  003DAE  0100               	movlb	0	; () banked
 15089  003DB0  5180               	movf	lcdNibble@temp& (0+255),w,b
 15090  003DB2  108C               	iorwf	3980,w,c	;volatile
 15091  003DB4  6E8C               	movwf	3980,c	;volatile
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15095  003DB6  868C               	bsf	3980,3,c	;volatile
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15099  003DB8  0E42               	movlw	66
 15100  003DBA                     u8267:
 15101  003DBA  2EE8               	decfsz	wreg,f,c
 15102  003DBC  D7FE               	bra	u8267
 15103  003DBE  D000               	nop2	
 15104                           
 15105                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15106  003DC0  968C               	bcf	3980,3,c	;volatile
 15107                           
 15108                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15109  003DC2  0E42               	movlw	66
 15110  003DC4                     u8277:
 15111  003DC4  2EE8               	decfsz	wreg,f,c
 15112  003DC6  D7FE               	bra	u8277
 15113  003DC8  D000               	nop2	
 15114                           
 15115                           ;lcd.c: 36: data = data << 4;
 15116  003DCA  0100               	movlb	0	; () banked
 15117  003DCC  3981               	swapf	lcdNibble@data& (0+255),w,b
 15118  003DCE  0BF0               	andlw	240
 15119  003DD0  0100               	movlb	0	; () banked
 15120  003DD2  6F81               	movwf	lcdNibble@data& (0+255),b
 15121                           
 15122                           ;lcd.c: 38: temp = data & 0xF0;
 15123  003DD4  0100               	movlb	0	; () banked
 15124  003DD6  5181               	movf	lcdNibble@data& (0+255),w,b
 15125  003DD8  0BF0               	andlw	240
 15126  003DDA  0100               	movlb	0	; () banked
 15127  003DDC  6F80               	movwf	lcdNibble@temp& (0+255),b
 15128                           
 15129                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15130  003DDE  508C               	movf	3980,w,c	;volatile
 15131  003DE0  0B0F               	andlw	15
 15132  003DE2  6E8C               	movwf	3980,c	;volatile
 15133                           
 15134                           ;lcd.c: 40: LATD = temp | LATD;
 15135  003DE4  0100               	movlb	0	; () banked
 15136  003DE6  5180               	movf	lcdNibble@temp& (0+255),w,b
 15137  003DE8  108C               	iorwf	3980,w,c	;volatile
 15138  003DEA  6E8C               	movwf	3980,c	;volatile
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15142  003DEC  868C               	bsf	3980,3,c	;volatile
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15146  003DEE  0E42               	movlw	66
 15147  003DF0                     u8287:
 15148  003DF0  2EE8               	decfsz	wreg,f,c
 15149  003DF2  D7FE               	bra	u8287
 15150  003DF4  D000               	nop2	
 15151                           
 15152                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15153  003DF6  968C               	bcf	3980,3,c	;volatile
 15154                           
 15155                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15156  003DF8  0E42               	movlw	66
 15157  003DFA                     u8297:
 15158  003DFA  2EE8               	decfsz	wreg,f,c
 15159  003DFC  D7FE               	bra	u8297
 15160  003DFE  D000               	nop2	
 15161  003E00  0012               	return		;funcret
 15162  003E02                     __end_of_lcdNibble:
 15163                           	opt stack 0
 15164                           tblptru	equ	0xFF8
 15165                           tblptrh	equ	0xFF7
 15166                           tblptrl	equ	0xFF6
 15167                           tablat	equ	0xFF5
 15168                           prodh	equ	0xFF4
 15169                           prodl	equ	0xFF3
 15170                           intcon	equ	0xFF2
 15171                           intcon2	equ	0xFF1
 15172                           intcon3	equ	0xFF0
 15173                           indf0	equ	0xFEF
 15174                           postinc0	equ	0xFEE
 15175                           fsr0h	equ	0xFEA
 15176                           fsr0l	equ	0xFE9
 15177                           wreg	equ	0xFE8
 15178                           postdec1	equ	0xFE5
 15179                           fsr1l	equ	0xFE1
 15180                           indf2	equ	0xFDF
 15181                           postinc2	equ	0xFDE
 15182                           postdec2	equ	0xFDD
 15183                           fsr2h	equ	0xFDA
 15184                           fsr2l	equ	0xFD9
 15185                           status	equ	0xFD8
 15186                           
 15187 ;; *************** function _initServos *****************
 15188 ;; Defined at:
 15189 ;;		line 278 in file "sort.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;		None
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;		None
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      void 
 15196 ;; Registers used:
 15197 ;;		wreg, status,2, status,0, cstack
 15198 ;; Tracked objects:
 15199 ;;		On entry : 0/0
 15200 ;;		On exit  : 0/0
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15207 ;;Total ram usage:        1 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; Hardware stack levels required when called:    8
 15210 ;; This function calls:
 15211 ;;		_updateServoPosition
 15212 ;; This function is called by:
 15213 ;;		_Loading
 15214 ;;		_BothServos
 15215 ;; This function uses a non-reentrant model
 15216 ;;
 15217                           
 15218                           	psect	text56
 15219  003F7C                     __ptext56:
 15220                           	opt stack 0
 15221  003F7C                     _initServos:
 15222                           	opt stack 20
 15223                           
 15224                           ;sort.c: 279: updateServoPosition(1200, 1);
 15225                           
 15226                           ;incstack = 0
 15227  003F7C  0E04               	movlw	4
 15228  003F7E  0100               	movlb	0	; () banked
 15229  003F80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15230  003F82  0EB0               	movlw	176
 15231  003F84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15232  003F86  0E00               	movlw	0
 15233  003F88  0100               	movlb	0	; () banked
 15234  003F8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15235  003F8C  0E01               	movlw	1
 15236  003F8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15237  003F90  EC24  F01E         	call	_updateServoPosition	;wreg free
 15238                           
 15239                           ;sort.c: 280: updateServoPosition(1150, 3);
 15240  003F94  0E04               	movlw	4
 15241  003F96  0100               	movlb	0	; () banked
 15242  003F98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15243  003F9A  0E7E               	movlw	126
 15244  003F9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15245  003F9E  0E00               	movlw	0
 15246  003FA0  0100               	movlb	0	; () banked
 15247  003FA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15248  003FA4  0E03               	movlw	3
 15249  003FA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15250  003FA8  EC24  F01E         	call	_updateServoPosition	;wreg free
 15251                           
 15252                           ;sort.c: 281: TMR1ON = 1;
 15253  003FAC  80CD               	bsf	4045,0,c	;volatile
 15254                           
 15255                           ;sort.c: 282: was_low_1 = 0;
 15256  003FAE  0E00               	movlw	0
 15257  003FB0  6E7A               	movwf	_was_low_1+1,c	;volatile
 15258  003FB2  0E00               	movlw	0
 15259  003FB4  6E79               	movwf	_was_low_1,c	;volatile
 15260                           
 15261                           ;sort.c: 283: _delay((unsigned long)((5)*(32000000/4000.0)));
 15262  003FB6  0E34               	movlw	52
 15263  003FB8  0100               	movlb	0	; () banked
 15264  003FBA  6F88               	movwf	??_initServos& (0+255),b
 15265  003FBC  0EF1               	movlw	241
 15266  003FBE                     u8307:
 15267  003FBE  2EE8               	decfsz	wreg,f,c
 15268  003FC0  D7FE               	bra	u8307
 15269  003FC2  2F88               	decfsz	??_initServos& (0+255),f,b
 15270  003FC4  D7FC               	bra	u8307
 15271  003FC6  D000               	nop2	
 15272                           
 15273                           ;sort.c: 284: TMR3ON = 1;
 15274  003FC8  80B1               	bsf	4017,0,c	;volatile
 15275                           
 15276                           ;sort.c: 285: was_low_3 = 0;
 15277  003FCA  0E00               	movlw	0
 15278  003FCC  6E7C               	movwf	_was_low_3+1,c	;volatile
 15279  003FCE  0E00               	movlw	0
 15280  003FD0  6E7B               	movwf	_was_low_3,c	;volatile
 15281                           
 15282                           ;sort.c: 287: LATCbits.LATC0 = 1;
 15283  003FD2  808B               	bsf	3979,0,c	;volatile
 15284  003FD4  0012               	return		;funcret
 15285  003FD6                     __end_of_initServos:
 15286                           	opt stack 0
 15287                           tblptru	equ	0xFF8
 15288                           tblptrh	equ	0xFF7
 15289                           tblptrl	equ	0xFF6
 15290                           tablat	equ	0xFF5
 15291                           prodh	equ	0xFF4
 15292                           prodl	equ	0xFF3
 15293                           intcon	equ	0xFF2
 15294                           intcon2	equ	0xFF1
 15295                           intcon3	equ	0xFF0
 15296                           indf0	equ	0xFEF
 15297                           postinc0	equ	0xFEE
 15298                           fsr0h	equ	0xFEA
 15299                           fsr0l	equ	0xFE9
 15300                           wreg	equ	0xFE8
 15301                           postdec1	equ	0xFE5
 15302                           fsr1l	equ	0xFE1
 15303                           indf2	equ	0xFDF
 15304                           postinc2	equ	0xFDE
 15305                           postdec2	equ	0xFDD
 15306                           fsr2h	equ	0xFDA
 15307                           fsr2l	equ	0xFD9
 15308                           status	equ	0xFD8
 15309                           
 15310 ;; *************** function _updateServoPosition *****************
 15311 ;; Defined at:
 15312 ;;		line 339 in file "sort.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;  time_us         2    0[BANK0 ] int 
 15315 ;;  timer           2    2[BANK0 ] int 
 15316 ;; Auto vars:     Size  Location     Type
 15317 ;;  my_time         2    6[BANK0 ] unsigned int 
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      void 
 15320 ;; Registers used:
 15321 ;;		wreg, status,2, status,0
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15330 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;Total ram usage:        8 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    7
 15334 ;; This function calls:
 15335 ;;		Nothing
 15336 ;; This function is called by:
 15337 ;;		_Distribution
 15338 ;;		_initServos
 15339 ;;		_actuatorTest
 15340 ;;		_BothServos
 15341 ;; This function uses a non-reentrant model
 15342 ;;
 15343                           
 15344                           	psect	text57
 15345  003C48                     __ptext57:
 15346                           	opt stack 0
 15347  003C48                     _updateServoPosition:
 15348                           	opt stack 20
 15349                           
 15350                           ;sort.c: 340: unsigned int my_time = 65535 - time_us;
 15351                           
 15352                           ;incstack = 0
 15353  003C48  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15354  003C4C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15355  003C50  0100               	movlb	0	; () banked
 15356  003C52  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15357  003C54  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15358  003C56  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15359  003C58  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15360  003C5A  0EFF               	movlw	255
 15361  003C5C  0100               	movlb	0	; () banked
 15362  003C5E  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15363  003C60  0100               	movlb	0	; () banked
 15364  003C62  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15365  003C64  0EFF               	movlw	255
 15366  003C66  0100               	movlb	0	; () banked
 15367  003C68  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15368  003C6A  0100               	movlb	0	; () banked
 15369  003C6C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15370                           
 15371                           ;sort.c: 341: switch(timer){
 15372  003C6E  D015               	goto	l5606
 15373  003C70                     l5604:
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;sort.c: 343: servoTimes[0] = my_time >> 8;
 15377  003C70  0100               	movlb	0	; () banked
 15378  003C72  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15379  003C74  0101               	movlb	1	; () banked
 15380  003C76  6F1C               	movwf	_servoTimes& (0+255),b
 15381  003C78  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15382                           
 15383                           ;sort.c: 344: servoTimes[1] = my_time & 0xFF;
 15384  003C7A  0100               	movlb	0	; () banked
 15385  003C7C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15386  003C7E  0101               	movlb	1	; () banked
 15387  003C80  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15388  003C82  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15389  003C84                     l798:
 15390                           
 15391                           ;sort.c: 346: servoTimes[2] = my_time >> 8;
 15392  003C84  0100               	movlb	0	; () banked
 15393  003C86  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15394  003C88  0101               	movlb	1	; () banked
 15395  003C8A  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15396  003C8C  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15397                           
 15398                           ;sort.c: 347: servoTimes[3] = my_time & 0xFF;
 15399  003C8E  0100               	movlb	0	; () banked
 15400  003C90  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15401  003C92  0101               	movlb	1	; () banked
 15402  003C94  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15403  003C96  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15404                           
 15405                           ;sort.c: 348: }
 15406  003C98  0012               	return	
 15407  003C9A                     l5606:
 15408  003C9A  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15409  003C9E  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15410                           
 15411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15412                           ; Switch size 1, requested type "space"
 15413                           ; Number of cases is 1, Range of values is 0 to 0
 15414                           ; switch strategies available:
 15415                           ; Name         Instructions Cycles
 15416                           ; simple_byte            4     3 (average)
 15417                           ;	Chosen strategy is simple_byte
 15418  003CA2  0100               	movlb	0	; () banked
 15419  003CA4  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15420  003CA6  0A00               	xorlw	0	; case 0
 15421  003CA8  A4D8               	btfss	status,2,c
 15422  003CAA  0012               	return	
 15423                           
 15424                           ; BSR set to: 0
 15425                           ; Switch size 1, requested type "space"
 15426                           ; Number of cases is 2, Range of values is 1 to 3
 15427                           ; switch strategies available:
 15428                           ; Name         Instructions Cycles
 15429                           ; simple_byte            7     4 (average)
 15430                           ;	Chosen strategy is simple_byte
 15431  003CAC  0100               	movlb	0	; () banked
 15432  003CAE  5184               	movf	??_updateServoPosition& (0+255),w,b
 15433  003CB0  0A01               	xorlw	1	; case 1
 15434  003CB2  B4D8               	btfsc	status,2,c
 15435  003CB4  D7DD               	goto	l5604
 15436  003CB6  0A02               	xorlw	2	; case 3
 15437  003CB8  A4D8               	btfss	status,2,c
 15438  003CBA  0012               	return	
 15439  003CBC  D7E3               	goto	l798
 15440  003CBE                     __end_of_updateServoPosition:
 15441                           	opt stack 0
 15442                           tblptru	equ	0xFF8
 15443                           tblptrh	equ	0xFF7
 15444                           tblptrl	equ	0xFF6
 15445                           tablat	equ	0xFF5
 15446                           prodh	equ	0xFF4
 15447                           prodl	equ	0xFF3
 15448                           intcon	equ	0xFF2
 15449                           intcon2	equ	0xFF1
 15450                           intcon3	equ	0xFF0
 15451                           indf0	equ	0xFEF
 15452                           postinc0	equ	0xFEE
 15453                           fsr0h	equ	0xFEA
 15454                           fsr0l	equ	0xFE9
 15455                           wreg	equ	0xFE8
 15456                           postdec1	equ	0xFE5
 15457                           fsr1l	equ	0xFE1
 15458                           indf2	equ	0xFDF
 15459                           postinc2	equ	0xFDE
 15460                           postdec2	equ	0xFDD
 15461                           fsr2h	equ	0xFDA
 15462                           fsr2l	equ	0xFD9
 15463                           status	equ	0xFD8
 15464                           
 15465 ;; *************** function _handler *****************
 15466 ;; Defined at:
 15467 ;;		line 16 in file "interruptHandler.c"
 15468 ;; Parameters:    Size  Location     Type
 15469 ;;		None
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;		None
 15472 ;; Return value:  Size  Location     Type
 15473 ;;                  1    wreg      void 
 15474 ;; Registers used:
 15475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15476 ;; Tracked objects:
 15477 ;;		On entry : 0/0
 15478 ;;		On exit  : 0/0
 15479 ;;		Unchanged: 0/0
 15480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15483 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;Total ram usage:       16 bytes
 15486 ;; Hardware stack levels used:    1
 15487 ;; Hardware stack levels required when called:    6
 15488 ;; This function calls:
 15489 ;;		_printSortTimer
 15490 ;;		_updateMenu
 15491 ;; This function is called by:
 15492 ;;		Interrupt level 2
 15493 ;; This function uses a non-reentrant model
 15494 ;;
 15495                           
 15496                           	psect	intcode
 15497  000008                     __pintcode:
 15498                           	opt stack 0
 15499  000008                     _handler:
 15500                           	opt stack 18
 15501                           
 15502                           ;incstack = 0
 15503  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15504  00000A  ED30  F016         	call	int_func,f	;refresh shadow registers
 15505                           tblptru	equ	0xFF8
 15506                           tblptrh	equ	0xFF7
 15507                           tblptrl	equ	0xFF6
 15508                           tablat	equ	0xFF5
 15509                           prodh	equ	0xFF4
 15510                           prodl	equ	0xFF3
 15511                           intcon	equ	0xFF2
 15512                           intcon2	equ	0xFF1
 15513                           intcon3	equ	0xFF0
 15514                           indf0	equ	0xFEF
 15515                           postinc0	equ	0xFEE
 15516                           fsr0h	equ	0xFEA
 15517                           fsr0l	equ	0xFE9
 15518                           wreg	equ	0xFE8
 15519                           postdec1	equ	0xFE5
 15520                           fsr1l	equ	0xFE1
 15521                           indf2	equ	0xFDF
 15522                           postinc2	equ	0xFDE
 15523                           postdec2	equ	0xFDD
 15524                           fsr2h	equ	0xFDA
 15525                           fsr2l	equ	0xFD9
 15526                           status	equ	0xFD8
 15527                           
 15528                           	psect	intcode_body
 15529  002C60                     __pintcode_body:
 15530                           	opt stack 18
 15531  002C60                     int_func:
 15532                           	opt stack 18
 15533  002C60  0006               	pop		; remove dummy address from shadow register refresh
 15534  002C62  CFFA F04D          	movff	pclath,??_handler+2
 15535  002C66  CFFB F04E          	movff	pclatu,??_handler+3
 15536  002C6A  CFE9 F04F          	movff	fsr0l,??_handler+4
 15537  002C6E  CFEA F050          	movff	fsr0h,??_handler+5
 15538  002C72  CFE1 F051          	movff	fsr1l,??_handler+6
 15539  002C76  CFE2 F052          	movff	fsr1h,??_handler+7
 15540  002C7A  CFD9 F053          	movff	fsr2l,??_handler+8
 15541  002C7E  CFDA F054          	movff	fsr2h,??_handler+9
 15542  002C82  CFF3 F055          	movff	prodl,??_handler+10
 15543  002C86  CFF4 F056          	movff	prodh,??_handler+11
 15544  002C8A  CFF6 F057          	movff	tblptrl,??_handler+12
 15545  002C8E  CFF7 F058          	movff	tblptrh,??_handler+13
 15546  002C92  CFF8 F059          	movff	tblptru,??_handler+14
 15547  002C96  CFF5 F05A          	movff	tablat,??_handler+15
 15548                           
 15549                           ;interruptHandler.c: 18: if(INT1IF){
 15550  002C9A  A0F0               	btfss	intcon3,0,c	;volatile
 15551  002C9C  D020               	goto	i2l8142
 15552                           
 15553                           ;interruptHandler.c: 19: INT1IF = 0;
 15554  002C9E  90F0               	bcf	intcon3,0,c	;volatile
 15555                           
 15556                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15557  002CA0  0100               	movlb	0	; () banked
 15558  002CA2  51FC               	movf	_machine_state& (0+255),w,b
 15559  002CA4  A4D8               	btfss	status,2,c
 15560  002CA6  D01B               	goto	i2l8142
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15564  002CA8  3881               	swapf	3969,w,c	;volatile
 15565  002CAA  0B0F               	andlw	15
 15566  002CAC  0B0F               	andlw	15
 15567  002CAE  6E4B               	movwf	??_handler& (0+255),c
 15568  002CB0  6A4C               	clrf	(??_handler+1)& (0+255),c
 15569  002CB2  0E25               	movlw	low _keys
 15570  002CB4  244B               	addwf	??_handler,w,c
 15571  002CB6  6EF6               	movwf	tblptrl,c
 15572  002CB8  0EFB               	movlw	high _keys
 15573  002CBA  204C               	addwfc	??_handler+1,w,c
 15574  002CBC  6EF7               	movwf	tblptrh,c
 15575  002CBE                     	if	1	;There are 3 active tblptr bytes
 15576  002CBE  6AF8               	clrf	tblptru,c
 15577  002CC0  0E00               	movlw	low (__mediumconst shr (0+16))
 15578  002CC2  22F8               	addwfc	tblptru,f,c
 15579  002CC4                     	endif
 15580  002CC4  0008               	tblrd		*
 15581  002CC6  CFF5 F07D          	movff	tablat,_input	;volatile
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;interruptHandler.c: 23: if(input == '*'){
 15585  002CCA  0E2A               	movlw	42
 15586  002CCC  187D               	xorwf	_input,w,c	;volatile
 15587  002CCE  A4D8               	btfss	status,2,c
 15588  002CD0  D004               	goto	i2l8140
 15589                           
 15590                           ; BSR set to: 0
 15591                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15592  002CD2  0E03               	movlw	3
 15593  002CD4  0100               	movlb	0	; () banked
 15594  002CD6  6FFC               	movwf	_machine_state& (0+255),b
 15595                           
 15596                           ;interruptHandler.c: 25: }
 15597  002CD8  D002               	goto	i2l8142
 15598  002CDA                     i2l8140:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;interruptHandler.c: 26: else{
 15602                           ;interruptHandler.c: 27: updateMenu();
 15603  002CDA  ECF9  F010         	call	_updateMenu	;wreg free
 15604  002CDE                     i2l8142:
 15605                           
 15606                           ;interruptHandler.c: 28: }
 15607                           ;interruptHandler.c: 29: }
 15608                           ;interruptHandler.c: 30: }
 15609                           ;interruptHandler.c: 33: if(TMR0IF){
 15610  002CDE  A4F2               	btfss	intcon,2,c	;volatile
 15611  002CE0  D00C               	goto	i2l8156
 15612                           
 15613                           ;interruptHandler.c: 34: TMR0IF = 0;
 15614  002CE2  94F2               	bcf	intcon,2,c	;volatile
 15615                           
 15616                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15617  002CE4  0100               	movlb	0	; () banked
 15618  002CE6  05FC               	decf	_machine_state& (0+255),w,b
 15619  002CE8  A4D8               	btfss	status,2,c
 15620  002CEA  D007               	goto	i2l8156
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;interruptHandler.c: 36: printSortTimer();
 15624  002CEC  EC74  F013         	call	_printSortTimer	;wreg free
 15625                           
 15626                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15627  002CF0  0E85               	movlw	133
 15628  002CF2  6ED7               	movwf	4055,c	;volatile
 15629                           
 15630                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15631  002CF4  0EEE               	movlw	238
 15632  002CF6  6ED6               	movwf	4054,c	;volatile
 15633                           
 15634                           ;interruptHandler.c: 40: TMR0ON = 1;
 15635  002CF8  8ED5               	bsf	4053,7,c	;volatile
 15636  002CFA                     i2l8156:
 15637                           
 15638                           ;interruptHandler.c: 41: }
 15639                           ;interruptHandler.c: 42: }
 15640                           ;interruptHandler.c: 45: if(TMR1IF){
 15641  002CFA  A09E               	btfss	3998,0,c	;volatile
 15642  002CFC  D024               	goto	i2l8180
 15643                           
 15644                           ;interruptHandler.c: 46: TMR1IF = 0;
 15645  002CFE  909E               	bcf	3998,0,c	;volatile
 15646                           
 15647                           ;interruptHandler.c: 47: TMR1ON = 0;
 15648  002D00  90CD               	bcf	4045,0,c	;volatile
 15649                           
 15650                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15651  002D02  0100               	movlb	0	; () banked
 15652  002D04  05FC               	decf	_machine_state& (0+255),w,b
 15653  002D06  A4D8               	btfss	status,2,c
 15654  002D08  D01E               	goto	i2l8180
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;interruptHandler.c: 49: if(was_low_1){
 15658  002D0A  5079               	movf	_was_low_1,w,c	;volatile
 15659  002D0C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15660  002D0E  B4D8               	btfsc	status,2,c
 15661  002D10  D00A               	goto	i2l863
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15665  002D12  828B               	bsf	3979,1,c	;volatile
 15666                           
 15667                           ; BSR set to: 0
 15668                           ;interruptHandler.c: 51: was_low_1 = 0;
 15669  002D14  0E00               	movlw	0
 15670  002D16  6E7A               	movwf	_was_low_1+1,c	;volatile
 15671  002D18  0E00               	movlw	0
 15672  002D1A  6E79               	movwf	_was_low_1,c	;volatile
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15676  002D1C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15680  002D20  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15681                           
 15682                           ;interruptHandler.c: 54: }
 15683  002D24  D00F               	goto	i2l8178
 15684  002D26                     i2l863:
 15685                           
 15686                           ; BSR set to: 0
 15687                           ;interruptHandler.c: 55: else{
 15688                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15689  002D26  928B               	bcf	3979,1,c	;volatile
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;interruptHandler.c: 57: was_low_1 = 1;
 15693  002D28  0E00               	movlw	0
 15694  002D2A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15695  002D2C  0E01               	movlw	1
 15696  002D2E  6E79               	movwf	_was_low_1,c	;volatile
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15700  002D30  0101               	movlb	1	; () banked
 15701  002D32  511C               	movf	_servoTimes& (0+255),w,b
 15702  002D34  0800               	sublw	0
 15703  002D36  0F20               	addlw	32
 15704  002D38  6ECF               	movwf	4047,c	;volatile
 15705                           
 15706                           ; BSR set to: 1
 15707                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15708  002D3A  0101               	movlb	1	; () banked
 15709  002D3C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15710  002D3E  0800               	sublw	0
 15711  002D40  0F20               	addlw	32
 15712  002D42  6ECE               	movwf	4046,c	;volatile
 15713  002D44                     i2l8178:
 15714                           
 15715                           ;interruptHandler.c: 60: }
 15716                           ;interruptHandler.c: 61: TMR1ON = 1;
 15717  002D44  80CD               	bsf	4045,0,c	;volatile
 15718  002D46                     i2l8180:
 15719                           
 15720                           ;interruptHandler.c: 62: }
 15721                           ;interruptHandler.c: 63: }
 15722                           ;interruptHandler.c: 65: if(TMR3IF){
 15723  002D46  A2A1               	btfss	4001,1,c	;volatile
 15724  002D48  D024               	goto	i2l869
 15725                           
 15726                           ;interruptHandler.c: 66: TMR3IF = 0;
 15727  002D4A  92A1               	bcf	4001,1,c	;volatile
 15728                           
 15729                           ;interruptHandler.c: 67: TMR3ON = 0;
 15730  002D4C  90B1               	bcf	4017,0,c	;volatile
 15731                           
 15732                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15733  002D4E  0100               	movlb	0	; () banked
 15734  002D50  05FC               	decf	_machine_state& (0+255),w,b
 15735  002D52  A4D8               	btfss	status,2,c
 15736  002D54  D01E               	goto	i2l869
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;interruptHandler.c: 69: if(was_low_3){
 15740  002D56  507B               	movf	_was_low_3,w,c	;volatile
 15741  002D58  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15742  002D5A  B4D8               	btfsc	status,2,c
 15743  002D5C  D00A               	goto	i2l867
 15744                           
 15745                           ; BSR set to: 0
 15746                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15747  002D5E  848B               	bsf	3979,2,c	;volatile
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;interruptHandler.c: 71: was_low_3 = 0;
 15751  002D60  0E00               	movlw	0
 15752  002D62  6E7C               	movwf	_was_low_3+1,c	;volatile
 15753  002D64  0E00               	movlw	0
 15754  002D66  6E7B               	movwf	_was_low_3,c	;volatile
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15758  002D68  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15759                           
 15760                           ; BSR set to: 0
 15761                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15762  002D6C  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15763                           
 15764                           ;interruptHandler.c: 74: }
 15765  002D70  D00F               	goto	i2l8202
 15766  002D72                     i2l867:
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;interruptHandler.c: 75: else{
 15770                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15771  002D72  948B               	bcf	3979,2,c	;volatile
 15772                           
 15773                           ; BSR set to: 0
 15774                           ;interruptHandler.c: 77: was_low_3 = 1;
 15775  002D74  0E00               	movlw	0
 15776  002D76  6E7C               	movwf	_was_low_3+1,c	;volatile
 15777  002D78  0E01               	movlw	1
 15778  002D7A  6E7B               	movwf	_was_low_3,c	;volatile
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15782  002D7C  0101               	movlb	1	; () banked
 15783  002D7E  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15784  002D80  0800               	sublw	0
 15785  002D82  0F20               	addlw	32
 15786  002D84  6EB3               	movwf	4019,c	;volatile
 15787                           
 15788                           ; BSR set to: 1
 15789                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15790  002D86  0101               	movlb	1	; () banked
 15791  002D88  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15792  002D8A  0800               	sublw	0
 15793  002D8C  0F20               	addlw	32
 15794  002D8E  6EB2               	movwf	4018,c	;volatile
 15795  002D90                     i2l8202:
 15796                           
 15797                           ;interruptHandler.c: 80: }
 15798                           ;interruptHandler.c: 81: TMR3ON = 1;
 15799  002D90  80B1               	bsf	4017,0,c	;volatile
 15800  002D92                     i2l869:
 15801  002D92  C05A  FFF5         	movff	??_handler+15,tablat
 15802  002D96  C059  FFF8         	movff	??_handler+14,tblptru
 15803  002D9A  C058  FFF7         	movff	??_handler+13,tblptrh
 15804  002D9E  C057  FFF6         	movff	??_handler+12,tblptrl
 15805  002DA2  C056  FFF4         	movff	??_handler+11,prodh
 15806  002DA6  C055  FFF3         	movff	??_handler+10,prodl
 15807  002DAA  C054  FFDA         	movff	??_handler+9,fsr2h
 15808  002DAE  C053  FFD9         	movff	??_handler+8,fsr2l
 15809  002DB2  C052  FFE2         	movff	??_handler+7,fsr1h
 15810  002DB6  C051  FFE1         	movff	??_handler+6,fsr1l
 15811  002DBA  C050  FFEA         	movff	??_handler+5,fsr0h
 15812  002DBE  C04F  FFE9         	movff	??_handler+4,fsr0l
 15813  002DC2  C04E  FFFB         	movff	??_handler+3,pclatu
 15814  002DC6  C04D  FFFA         	movff	??_handler+2,pclath
 15815  002DCA  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15816  002DCC  0011               	retfie		f
 15817  002DCE                     __end_of_handler:
 15818                           	opt stack 0
 15819                           pclatu	equ	0xFFB
 15820                           pclath	equ	0xFFA
 15821                           tblptru	equ	0xFF8
 15822                           tblptrh	equ	0xFF7
 15823                           tblptrl	equ	0xFF6
 15824                           tablat	equ	0xFF5
 15825                           prodh	equ	0xFF4
 15826                           prodl	equ	0xFF3
 15827                           intcon	equ	0xFF2
 15828                           intcon2	equ	0xFF1
 15829                           intcon3	equ	0xFF0
 15830                           indf0	equ	0xFEF
 15831                           postinc0	equ	0xFEE
 15832                           fsr0h	equ	0xFEA
 15833                           fsr0l	equ	0xFE9
 15834                           wreg	equ	0xFE8
 15835                           postdec1	equ	0xFE5
 15836                           fsr1h	equ	0xFE2
 15837                           fsr1l	equ	0xFE1
 15838                           indf2	equ	0xFDF
 15839                           postinc2	equ	0xFDE
 15840                           postdec2	equ	0xFDD
 15841                           fsr2h	equ	0xFDA
 15842                           fsr2l	equ	0xFD9
 15843                           status	equ	0xFD8
 15844                           
 15845 ;; *************** function _updateMenu *****************
 15846 ;; Defined at:
 15847 ;;		line 213 in file "UI.c"
 15848 ;; Parameters:    Size  Location     Type
 15849 ;;		None
 15850 ;; Auto vars:     Size  Location     Type
 15851 ;;		None
 15852 ;; Return value:  Size  Location     Type
 15853 ;;                  1    wreg      void 
 15854 ;; Registers used:
 15855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;Total ram usage:        2 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; Hardware stack levels required when called:    5
 15868 ;; This function calls:
 15869 ;;		_change_state_to_logs_11
 15870 ;;		_change_state_to_logs_12
 15871 ;;		_change_state_to_logs_22
 15872 ;;		_change_state_to_logs_23
 15873 ;;		_change_state_to_logs_33
 15874 ;;		_change_state_to_logs_34
 15875 ;;		_change_state_to_menu_11
 15876 ;;		_change_state_to_menu_23
 15877 ;;		_dispLogs
 15878 ;;		_inputHandler
 15879 ;;		i2_change_state_to_menu_12
 15880 ;;		i2_change_state_to_menu_22
 15881 ;;		i2_change_state_to_menu_start
 15882 ;; This function is called by:
 15883 ;;		_handler
 15884 ;; This function uses a non-reentrant model
 15885 ;;
 15886                           
 15887                           	psect	text59
 15888  0021F2                     __ptext59:
 15889                           	opt stack 0
 15890  0021F2                     _updateMenu:
 15891                           	opt stack 18
 15892                           
 15893                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15894                           
 15895                           ;incstack = 0
 15896  0021F2  0E00               	movlw	0
 15897  0021F4  6E78               	movwf	_up+1,c
 15898  0021F6  0E00               	movlw	0
 15899  0021F8  6E77               	movwf	_up,c
 15900  0021FA  0E00               	movlw	0
 15901  0021FC  6E6A               	movwf	_down+1,c
 15902  0021FE  0E00               	movlw	0
 15903  002200  6E69               	movwf	_down,c
 15904  002202  0E00               	movlw	0
 15905  002204  6E6C               	movwf	_enter+1,c
 15906  002206  0E00               	movlw	0
 15907  002208  6E6B               	movwf	_enter,c
 15908  00220A  0E00               	movlw	0
 15909  00220C  6E5C               	movwf	_back+1,c
 15910  00220E  0E00               	movlw	0
 15911  002210  6E5B               	movwf	_back,c
 15912                           
 15913                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15914  002212  9EF2               	bcf	intcon,7,c	;volatile
 15915                           
 15916                           ;UI.c: 217: if (inputHandler()
 15917                           ;UI.c: 220: ){
 15918  002214  EC6D  F014         	call	_inputHandler	;wreg free
 15919  002218  502A               	movf	?_inputHandler,w,c
 15920  00221A  102B               	iorwf	?_inputHandler+1,w,c
 15921  00221C  A4D8               	btfss	status,2,c
 15922  00221E  D112               	goto	i2l7878
 15923  002220  D146               	goto	i2l257
 15924  002222                     i2l7730:
 15925                           
 15926                           ;UI.c: 224: change_state_to_menu_11();
 15927  002222  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 15928                           
 15929                           ;UI.c: 225: break;
 15930  002226  D143               	goto	i2l257
 15931  002228                     i2l7732:
 15932                           
 15933                           ;UI.c: 228: if(up){
 15934  002228  5077               	movf	_up,w,c
 15935  00222A  1078               	iorwf	_up+1,w,c
 15936  00222C  B4D8               	btfsc	status,2,c
 15937  00222E  D003               	goto	i2l7736
 15938                           
 15939                           ;UI.c: 229: change_state_to_menu_23();
 15940  002230  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 15941                           
 15942                           ;UI.c: 230: }
 15943  002234  D13C               	goto	i2l257
 15944  002236                     i2l7736:
 15945                           
 15946                           ;UI.c: 231: else if(down){
 15947  002236  5069               	movf	_down,w,c
 15948  002238  106A               	iorwf	_down+1,w,c
 15949  00223A  B4D8               	btfsc	status,2,c
 15950  00223C  D003               	goto	i2l7740
 15951                           
 15952                           ;UI.c: 232: change_state_to_menu_12();
 15953  00223E  ECD8  F021         	call	i2_change_state_to_menu_12	;wreg free
 15954                           
 15955                           ;UI.c: 233: }
 15956  002242  D135               	goto	i2l257
 15957  002244                     i2l7740:
 15958                           
 15959                           ;UI.c: 234: else if(enter){
 15960  002244  506B               	movf	_enter,w,c
 15961  002246  106C               	iorwf	_enter+1,w,c
 15962  002248  B4D8               	btfsc	status,2,c
 15963  00224A  D131               	goto	i2l257
 15964                           
 15965                           ;UI.c: 235: change_state_to_menu_start();
 15966  00224C  EC32  F023         	call	i2_change_state_to_menu_start	;wreg free
 15967                           
 15968                           ;UI.c: 236: }
 15969                           ;UI.c: 237: break;
 15970  002250  D12E               	goto	i2l257
 15971  002252                     i2l7744:
 15972                           
 15973                           ;UI.c: 240: if(up){
 15974  002252  5077               	movf	_up,w,c
 15975  002254  1078               	iorwf	_up+1,w,c
 15976  002256  B4D8               	btfsc	status,2,c
 15977  002258  D003               	goto	i2l7748
 15978                           
 15979                           ;UI.c: 241: change_state_to_menu_11();
 15980  00225A  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 15981                           
 15982                           ;UI.c: 242: }
 15983  00225E  D127               	goto	i2l257
 15984  002260                     i2l7748:
 15985                           
 15986                           ;UI.c: 243: else if(down){
 15987  002260  5069               	movf	_down,w,c
 15988  002262  106A               	iorwf	_down+1,w,c
 15989  002264  B4D8               	btfsc	status,2,c
 15990  002266  D011               	goto	i2l7764
 15991                           
 15992                           ;UI.c: 244: change_state_to_menu_23();
 15993  002268  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 15994                           
 15995                           ;UI.c: 245: }
 15996  00226C  D120               	goto	i2l257
 15997  00226E                     i2l7756:
 15998                           
 15999                           ;UI.c: 252: if(up){
 16000  00226E  5077               	movf	_up,w,c
 16001  002270  1078               	iorwf	_up+1,w,c
 16002  002272  B4D8               	btfsc	status,2,c
 16003  002274  D003               	goto	i2l7760
 16004                           
 16005                           ;UI.c: 253: change_state_to_menu_11();
 16006  002276  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 16007                           
 16008                           ;UI.c: 254: }
 16009  00227A  D119               	goto	i2l257
 16010  00227C                     i2l7760:
 16011                           
 16012                           ;UI.c: 255: else if(down){
 16013  00227C  5069               	movf	_down,w,c
 16014  00227E  106A               	iorwf	_down+1,w,c
 16015  002280  B4D8               	btfsc	status,2,c
 16016  002282  D003               	goto	i2l7764
 16017                           
 16018                           ;UI.c: 256: change_state_to_menu_23();
 16019  002284  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16020                           
 16021                           ;UI.c: 257: }
 16022  002288  D112               	goto	i2l257
 16023  00228A                     i2l7764:
 16024                           
 16025                           ;UI.c: 258: else if(enter){
 16026  00228A  506B               	movf	_enter,w,c
 16027  00228C  106C               	iorwf	_enter+1,w,c
 16028  00228E  B4D8               	btfsc	status,2,c
 16029  002290  D10E               	goto	i2l257
 16030                           
 16031                           ;UI.c: 259: machine_state = Sorting_state;
 16032  002292  0E01               	movlw	1
 16033  002294  0100               	movlb	0	; () banked
 16034  002296  6FFC               	movwf	_machine_state& (0+255),b
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;UI.c: 260: }
 16038                           ;UI.c: 261: break;
 16039                           
 16040                           ; BSR set to: 0
 16041                           
 16042                           ; BSR set to: 0
 16043  002298  D10A               	goto	i2l257
 16044  00229A                     i2l7768:
 16045                           
 16046                           ;UI.c: 264: if(up){
 16047  00229A  5077               	movf	_up,w,c
 16048  00229C  1078               	iorwf	_up+1,w,c
 16049  00229E  B4D8               	btfsc	status,2,c
 16050  0022A0  D003               	goto	i2l7772
 16051                           
 16052                           ;UI.c: 265: change_state_to_menu_22();
 16053  0022A2  ECC0  F021         	call	i2_change_state_to_menu_22	;wreg free
 16054                           
 16055                           ;UI.c: 266: }
 16056  0022A6  D103               	goto	i2l257
 16057  0022A8                     i2l7772:
 16058                           
 16059                           ;UI.c: 267: else if(down){
 16060  0022A8  5069               	movf	_down,w,c
 16061  0022AA  106A               	iorwf	_down+1,w,c
 16062  0022AC  B4D8               	btfsc	status,2,c
 16063  0022AE  D003               	goto	i2l7776
 16064                           
 16065                           ;UI.c: 268: change_state_to_menu_11();
 16066  0022B0  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 16067                           
 16068                           ;UI.c: 269: }
 16069  0022B4  D0FC               	goto	i2l257
 16070  0022B6                     i2l7776:
 16071                           
 16072                           ;UI.c: 270: else if(enter){
 16073  0022B6  506B               	movf	_enter,w,c
 16074  0022B8  106C               	iorwf	_enter+1,w,c
 16075  0022BA  B4D8               	btfsc	status,2,c
 16076  0022BC  D0F8               	goto	i2l257
 16077                           
 16078                           ;UI.c: 271: change_state_to_logs_11();
 16079  0022BE  EC80  F022         	call	_change_state_to_logs_11	;wreg free
 16080                           
 16081                           ;UI.c: 272: }
 16082                           ;UI.c: 273: break;
 16083  0022C2  D0F5               	goto	i2l257
 16084  0022C4                     i2l7780:
 16085                           
 16086                           ;UI.c: 276: if(up){
 16087  0022C4  5077               	movf	_up,w,c
 16088  0022C6  1078               	iorwf	_up+1,w,c
 16089  0022C8  B4D8               	btfsc	status,2,c
 16090  0022CA  D003               	goto	i2l7784
 16091                           
 16092                           ;UI.c: 277: change_state_to_logs_34();
 16093  0022CC  EC20  F022         	call	_change_state_to_logs_34	;wreg free
 16094                           
 16095                           ;UI.c: 278: }
 16096  0022D0  D0EE               	goto	i2l257
 16097  0022D2                     i2l7784:
 16098                           
 16099                           ;UI.c: 279: else if(down){
 16100  0022D2  5069               	movf	_down,w,c
 16101  0022D4  106A               	iorwf	_down+1,w,c
 16102  0022D6  B4D8               	btfsc	status,2,c
 16103  0022D8  D003               	goto	i2l7788
 16104                           
 16105                           ;UI.c: 280: change_state_to_logs_12();
 16106  0022DA  EC68  F022         	call	_change_state_to_logs_12	;wreg free
 16107                           
 16108                           ;UI.c: 281: }
 16109  0022DE  D0E7               	goto	i2l257
 16110  0022E0                     i2l7788:
 16111                           
 16112                           ;UI.c: 282: else if(enter){
 16113  0022E0  506B               	movf	_enter,w,c
 16114  0022E2  106C               	iorwf	_enter+1,w,c
 16115  0022E4  B4D8               	btfsc	status,2,c
 16116  0022E6  D007               	goto	i2l7792
 16117                           
 16118                           ;UI.c: 283: dispLogs(1);
 16119  0022E8  0E00               	movlw	0
 16120  0022EA  6E13               	movwf	dispLogs@myLog+1,c
 16121  0022EC  0E01               	movlw	1
 16122  0022EE  6E12               	movwf	dispLogs@myLog,c
 16123  0022F0  EC6C  F023         	call	_dispLogs	;wreg free
 16124                           
 16125                           ;UI.c: 284: }
 16126  0022F4  D0DC               	goto	i2l257
 16127  0022F6                     i2l7792:
 16128                           
 16129                           ;UI.c: 285: else if(back){
 16130  0022F6  505B               	movf	_back,w,c
 16131  0022F8  105C               	iorwf	_back+1,w,c
 16132  0022FA  B4D8               	btfsc	status,2,c
 16133  0022FC  D0D8               	goto	i2l257
 16134                           
 16135                           ;UI.c: 286: change_state_to_menu_23();
 16136  0022FE  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16137                           
 16138                           ;UI.c: 287: }
 16139                           ;UI.c: 288: break;
 16140  002302  D0D5               	goto	i2l257
 16141  002304                     i2l7796:
 16142                           
 16143                           ;UI.c: 291: if(up){
 16144  002304  5077               	movf	_up,w,c
 16145  002306  1078               	iorwf	_up+1,w,c
 16146  002308  B4D8               	btfsc	status,2,c
 16147  00230A  D003               	goto	i2l7800
 16148                           
 16149                           ;UI.c: 292: change_state_to_logs_11();
 16150  00230C  EC80  F022         	call	_change_state_to_logs_11	;wreg free
 16151                           
 16152                           ;UI.c: 293: }
 16153  002310  D0CE               	goto	i2l257
 16154  002312                     i2l7800:
 16155                           
 16156                           ;UI.c: 294: else if(down){
 16157  002312  5069               	movf	_down,w,c
 16158  002314  106A               	iorwf	_down+1,w,c
 16159  002316  B4D8               	btfsc	status,2,c
 16160  002318  D003               	goto	i2l7804
 16161                           
 16162                           ;UI.c: 295: change_state_to_logs_23();
 16163  00231A  ECC6  F022         	call	_change_state_to_logs_23	;wreg free
 16164                           
 16165                           ;UI.c: 296: }
 16166  00231E  D0C7               	goto	i2l257
 16167  002320                     i2l7804:
 16168                           
 16169                           ;UI.c: 297: else if(enter){
 16170  002320  506B               	movf	_enter,w,c
 16171  002322  106C               	iorwf	_enter+1,w,c
 16172  002324  B4D8               	btfsc	status,2,c
 16173  002326  D007               	goto	i2l7808
 16174                           
 16175                           ;UI.c: 298: dispLogs(2);
 16176  002328  0E00               	movlw	0
 16177  00232A  6E13               	movwf	dispLogs@myLog+1,c
 16178  00232C  0E02               	movlw	2
 16179  00232E  6E12               	movwf	dispLogs@myLog,c
 16180  002330  EC6C  F023         	call	_dispLogs	;wreg free
 16181                           
 16182                           ;UI.c: 299: }
 16183  002334  D0BC               	goto	i2l257
 16184  002336                     i2l7808:
 16185                           
 16186                           ;UI.c: 300: else if(back){
 16187  002336  505B               	movf	_back,w,c
 16188  002338  105C               	iorwf	_back+1,w,c
 16189  00233A  B4D8               	btfsc	status,2,c
 16190  00233C  D0B8               	goto	i2l257
 16191                           
 16192                           ;UI.c: 301: change_state_to_menu_23();
 16193  00233E  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16194                           
 16195                           ;UI.c: 302: }
 16196                           ;UI.c: 303: break;
 16197  002342  D0B5               	goto	i2l257
 16198  002344                     i2l7812:
 16199                           
 16200                           ;UI.c: 306: if(up){
 16201  002344  5077               	movf	_up,w,c
 16202  002346  1078               	iorwf	_up+1,w,c
 16203  002348  B4D8               	btfsc	status,2,c
 16204  00234A  D003               	goto	i2l7816
 16205                           
 16206                           ;UI.c: 307: change_state_to_logs_11();
 16207  00234C  EC80  F022         	call	_change_state_to_logs_11	;wreg free
 16208                           
 16209                           ;UI.c: 308: }
 16210  002350  D0AE               	goto	i2l257
 16211  002352                     i2l7816:
 16212                           
 16213                           ;UI.c: 309: else if(down){
 16214  002352  5069               	movf	_down,w,c
 16215  002354  106A               	iorwf	_down+1,w,c
 16216  002356  B4D8               	btfsc	status,2,c
 16217  002358  D003               	goto	i2l7820
 16218                           
 16219                           ;UI.c: 310: change_state_to_logs_23();
 16220  00235A  ECC6  F022         	call	_change_state_to_logs_23	;wreg free
 16221                           
 16222                           ;UI.c: 311: }
 16223  00235E  D0A7               	goto	i2l257
 16224  002360                     i2l7820:
 16225                           
 16226                           ;UI.c: 312: else if(enter){
 16227  002360  506B               	movf	_enter,w,c
 16228  002362  106C               	iorwf	_enter+1,w,c
 16229  002364  B4D8               	btfsc	status,2,c
 16230  002366  D007               	goto	i2l7824
 16231                           
 16232                           ;UI.c: 313: dispLogs(2);
 16233  002368  0E00               	movlw	0
 16234  00236A  6E13               	movwf	dispLogs@myLog+1,c
 16235  00236C  0E02               	movlw	2
 16236  00236E  6E12               	movwf	dispLogs@myLog,c
 16237  002370  EC6C  F023         	call	_dispLogs	;wreg free
 16238                           
 16239                           ;UI.c: 314: }
 16240  002374  D09C               	goto	i2l257
 16241  002376                     i2l7824:
 16242                           
 16243                           ;UI.c: 315: else if(back){
 16244  002376  505B               	movf	_back,w,c
 16245  002378  105C               	iorwf	_back+1,w,c
 16246  00237A  B4D8               	btfsc	status,2,c
 16247  00237C  D098               	goto	i2l257
 16248                           
 16249                           ;UI.c: 316: change_state_to_menu_23();
 16250  00237E  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16251                           
 16252                           ;UI.c: 317: }
 16253                           ;UI.c: 318: break;
 16254  002382  D095               	goto	i2l257
 16255  002384                     i2l7828:
 16256                           
 16257                           ;UI.c: 321: if(up){
 16258  002384  5077               	movf	_up,w,c
 16259  002386  1078               	iorwf	_up+1,w,c
 16260  002388  B4D8               	btfsc	status,2,c
 16261  00238A  D003               	goto	i2l7832
 16262                           
 16263                           ;UI.c: 322: change_state_to_logs_22();
 16264  00238C  EC50  F022         	call	_change_state_to_logs_22	;wreg free
 16265                           
 16266                           ;UI.c: 323: }
 16267  002390  D08E               	goto	i2l257
 16268  002392                     i2l7832:
 16269                           
 16270                           ;UI.c: 324: else if(down){
 16271  002392  5069               	movf	_down,w,c
 16272  002394  106A               	iorwf	_down+1,w,c
 16273  002396  B4D8               	btfsc	status,2,c
 16274  002398  D003               	goto	i2l7836
 16275                           
 16276                           ;UI.c: 325: change_state_to_logs_34();
 16277  00239A  EC20  F022         	call	_change_state_to_logs_34	;wreg free
 16278                           
 16279                           ;UI.c: 326: }
 16280  00239E  D087               	goto	i2l257
 16281  0023A0                     i2l7836:
 16282                           
 16283                           ;UI.c: 327: else if(enter){
 16284  0023A0  506B               	movf	_enter,w,c
 16285  0023A2  106C               	iorwf	_enter+1,w,c
 16286  0023A4  B4D8               	btfsc	status,2,c
 16287  0023A6  D007               	goto	i2l7840
 16288                           
 16289                           ;UI.c: 328: dispLogs(3);
 16290  0023A8  0E00               	movlw	0
 16291  0023AA  6E13               	movwf	dispLogs@myLog+1,c
 16292  0023AC  0E03               	movlw	3
 16293  0023AE  6E12               	movwf	dispLogs@myLog,c
 16294  0023B0  EC6C  F023         	call	_dispLogs	;wreg free
 16295                           
 16296                           ;UI.c: 329: }
 16297  0023B4  D07C               	goto	i2l257
 16298  0023B6                     i2l7840:
 16299                           
 16300                           ;UI.c: 330: else if(back){
 16301  0023B6  505B               	movf	_back,w,c
 16302  0023B8  105C               	iorwf	_back+1,w,c
 16303  0023BA  B4D8               	btfsc	status,2,c
 16304  0023BC  D078               	goto	i2l257
 16305                           
 16306                           ;UI.c: 331: change_state_to_menu_23();
 16307  0023BE  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16308                           
 16309                           ;UI.c: 332: }
 16310                           ;UI.c: 333: break;
 16311  0023C2  D075               	goto	i2l257
 16312  0023C4                     i2l7844:
 16313                           
 16314                           ;UI.c: 336: if(up){
 16315  0023C4  5077               	movf	_up,w,c
 16316  0023C6  1078               	iorwf	_up+1,w,c
 16317  0023C8  B4D8               	btfsc	status,2,c
 16318  0023CA  D003               	goto	i2l7848
 16319                           
 16320                           ;UI.c: 337: change_state_to_logs_22();
 16321  0023CC  EC50  F022         	call	_change_state_to_logs_22	;wreg free
 16322                           
 16323                           ;UI.c: 338: }
 16324  0023D0  D06E               	goto	i2l257
 16325  0023D2                     i2l7848:
 16326                           
 16327                           ;UI.c: 339: else if(down){
 16328  0023D2  5069               	movf	_down,w,c
 16329  0023D4  106A               	iorwf	_down+1,w,c
 16330  0023D6  B4D8               	btfsc	status,2,c
 16331  0023D8  D003               	goto	i2l7852
 16332                           
 16333                           ;UI.c: 340: change_state_to_logs_34();
 16334  0023DA  EC20  F022         	call	_change_state_to_logs_34	;wreg free
 16335                           
 16336                           ;UI.c: 341: }
 16337  0023DE  D067               	goto	i2l257
 16338  0023E0                     i2l7852:
 16339                           
 16340                           ;UI.c: 342: else if(enter){
 16341  0023E0  506B               	movf	_enter,w,c
 16342  0023E2  106C               	iorwf	_enter+1,w,c
 16343  0023E4  B4D8               	btfsc	status,2,c
 16344  0023E6  D007               	goto	i2l7856
 16345                           
 16346                           ;UI.c: 343: dispLogs(3);
 16347  0023E8  0E00               	movlw	0
 16348  0023EA  6E13               	movwf	dispLogs@myLog+1,c
 16349  0023EC  0E03               	movlw	3
 16350  0023EE  6E12               	movwf	dispLogs@myLog,c
 16351  0023F0  EC6C  F023         	call	_dispLogs	;wreg free
 16352                           
 16353                           ;UI.c: 344: }
 16354  0023F4  D05C               	goto	i2l257
 16355  0023F6                     i2l7856:
 16356                           
 16357                           ;UI.c: 345: else if(back){
 16358  0023F6  505B               	movf	_back,w,c
 16359  0023F8  105C               	iorwf	_back+1,w,c
 16360  0023FA  B4D8               	btfsc	status,2,c
 16361  0023FC  D058               	goto	i2l257
 16362                           
 16363                           ;UI.c: 346: change_state_to_menu_23();
 16364  0023FE  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16365                           
 16366                           ;UI.c: 347: }
 16367                           ;UI.c: 348: break;
 16368  002402  D055               	goto	i2l257
 16369  002404                     i2l7860:
 16370                           
 16371                           ;UI.c: 351: if(up){
 16372  002404  5077               	movf	_up,w,c
 16373  002406  1078               	iorwf	_up+1,w,c
 16374  002408  B4D8               	btfsc	status,2,c
 16375  00240A  D003               	goto	i2l7864
 16376                           
 16377                           ;UI.c: 352: change_state_to_logs_33();
 16378  00240C  EC38  F022         	call	_change_state_to_logs_33	;wreg free
 16379                           
 16380                           ;UI.c: 353: }
 16381  002410  D04E               	goto	i2l257
 16382  002412                     i2l7864:
 16383                           
 16384                           ;UI.c: 354: else if(down){
 16385  002412  5069               	movf	_down,w,c
 16386  002414  106A               	iorwf	_down+1,w,c
 16387  002416  B4D8               	btfsc	status,2,c
 16388  002418  D003               	goto	i2l7868
 16389                           
 16390                           ;UI.c: 355: change_state_to_logs_11();
 16391  00241A  EC80  F022         	call	_change_state_to_logs_11	;wreg free
 16392                           
 16393                           ;UI.c: 356: }
 16394  00241E  D047               	goto	i2l257
 16395  002420                     i2l7868:
 16396                           
 16397                           ;UI.c: 357: else if(enter){
 16398  002420  506B               	movf	_enter,w,c
 16399  002422  106C               	iorwf	_enter+1,w,c
 16400  002424  B4D8               	btfsc	status,2,c
 16401  002426  D007               	goto	i2l7872
 16402                           
 16403                           ;UI.c: 358: dispLogs(4);
 16404  002428  0E00               	movlw	0
 16405  00242A  6E13               	movwf	dispLogs@myLog+1,c
 16406  00242C  0E04               	movlw	4
 16407  00242E  6E12               	movwf	dispLogs@myLog,c
 16408  002430  EC6C  F023         	call	_dispLogs	;wreg free
 16409                           
 16410                           ;UI.c: 359: }
 16411  002434  D03C               	goto	i2l257
 16412  002436                     i2l7872:
 16413                           
 16414                           ;UI.c: 360: else if(back){
 16415  002436  505B               	movf	_back,w,c
 16416  002438  105C               	iorwf	_back+1,w,c
 16417  00243A  B4D8               	btfsc	status,2,c
 16418  00243C  D038               	goto	i2l257
 16419                           
 16420                           ;UI.c: 361: change_state_to_menu_23();
 16421  00243E  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 16422                           
 16423                           ;UI.c: 367: }
 16424                           
 16425                           ;UI.c: 366: break;
 16426                           
 16427                           ;UI.c: 365: default:
 16428                           
 16429                           ;UI.c: 362: }
 16430                           ;UI.c: 363: break;
 16431  002442  D035               	goto	i2l257
 16432  002444                     i2l7878:
 16433  002444  C0E0  F043         	movff	_cur_state,??_updateMenu
 16434  002448  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16435                           
 16436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16437                           ; Switch size 1, requested type "space"
 16438                           ; Number of cases is 3, Range of values is 0 to 4
 16439                           ; switch strategies available:
 16440                           ; Name         Instructions Cycles
 16441                           ; simple_byte           10     6 (average)
 16442                           ;	Chosen strategy is simple_byte
 16443  00244C  5044               	movf	??_updateMenu+1,w,c
 16444  00244E  0A00               	xorlw	0	; case 0
 16445  002450  B4D8               	btfsc	status,2,c
 16446  002452  D007               	goto	i2l8466
 16447  002454  0A03               	xorlw	3	; case 3
 16448  002456  B4D8               	btfsc	status,2,c
 16449  002458  D015               	goto	i2l8468
 16450  00245A  0A07               	xorlw	7	; case 4
 16451  00245C  B4D8               	btfsc	status,2,c
 16452  00245E  D020               	goto	i2l8470
 16453  002460  D026               	goto	i2l257
 16454  002462                     i2l8466:
 16455                           
 16456                           ; Switch size 1, requested type "space"
 16457                           ; Number of cases is 5, Range of values is 0 to 23
 16458                           ; switch strategies available:
 16459                           ; Name         Instructions Cycles
 16460                           ; simple_byte           16     9 (average)
 16461                           ;	Chosen strategy is simple_byte
 16462  002462  5043               	movf	??_updateMenu,w,c
 16463  002464  0A00               	xorlw	0	; case 0
 16464  002466  B4D8               	btfsc	status,2,c
 16465  002468  D6DC               	goto	i2l7730
 16466  00246A  0A0B               	xorlw	11	; case 11
 16467  00246C  B4D8               	btfsc	status,2,c
 16468  00246E  D6DC               	goto	i2l7732
 16469  002470  0A07               	xorlw	7	; case 12
 16470  002472  B4D8               	btfsc	status,2,c
 16471  002474  D6EE               	goto	i2l7744
 16472  002476  0A1A               	xorlw	26	; case 22
 16473  002478  B4D8               	btfsc	status,2,c
 16474  00247A  D6F9               	goto	i2l7756
 16475  00247C  0A01               	xorlw	1	; case 23
 16476  00247E  B4D8               	btfsc	status,2,c
 16477  002480  D70C               	goto	i2l7768
 16478  002482  D015               	goto	i2l257
 16479  002484                     i2l8468:
 16480                           
 16481                           ; Switch size 1, requested type "space"
 16482                           ; Number of cases is 4, Range of values is 243 to 255
 16483                           ; switch strategies available:
 16484                           ; Name         Instructions Cycles
 16485                           ; simple_byte           13     7 (average)
 16486                           ;	Chosen strategy is simple_byte
 16487  002484  5043               	movf	??_updateMenu,w,c
 16488  002486  0AF3               	xorlw	243	; case 243
 16489  002488  B4D8               	btfsc	status,2,c
 16490  00248A  D71C               	goto	i2l7780
 16491  00248C  0A07               	xorlw	7	; case 244
 16492  00248E  B4D8               	btfsc	status,2,c
 16493  002490  D739               	goto	i2l7796
 16494  002492  0A0A               	xorlw	10	; case 254
 16495  002494  B4D8               	btfsc	status,2,c
 16496  002496  D756               	goto	i2l7812
 16497  002498  0A01               	xorlw	1	; case 255
 16498  00249A  B4D8               	btfsc	status,2,c
 16499  00249C  D773               	goto	i2l7828
 16500  00249E  D007               	goto	i2l257
 16501  0024A0                     i2l8470:
 16502                           
 16503                           ; Switch size 1, requested type "space"
 16504                           ; Number of cases is 2, Range of values is 9 to 10
 16505                           ; switch strategies available:
 16506                           ; Name         Instructions Cycles
 16507                           ; simple_byte            7     4 (average)
 16508                           ;	Chosen strategy is simple_byte
 16509  0024A0  5043               	movf	??_updateMenu,w,c
 16510  0024A2  0A09               	xorlw	9	; case 9
 16511  0024A4  B4D8               	btfsc	status,2,c
 16512  0024A6  D78E               	goto	i2l7844
 16513  0024A8  0A03               	xorlw	3	; case 10
 16514  0024AA  B4D8               	btfsc	status,2,c
 16515  0024AC  D7AB               	goto	i2l7860
 16516  0024AE                     i2l257:
 16517                           
 16518                           ;UI.c: 368: }
 16519                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16520  0024AE  8EF2               	bsf	intcon,7,c	;volatile
 16521  0024B0  0012               	return		;funcret
 16522  0024B2                     __end_of_updateMenu:
 16523                           	opt stack 0
 16524                           pclatu	equ	0xFFB
 16525                           pclath	equ	0xFFA
 16526                           tblptru	equ	0xFF8
 16527                           tblptrh	equ	0xFF7
 16528                           tblptrl	equ	0xFF6
 16529                           tablat	equ	0xFF5
 16530                           prodh	equ	0xFF4
 16531                           prodl	equ	0xFF3
 16532                           intcon	equ	0xFF2
 16533                           intcon2	equ	0xFF1
 16534                           intcon3	equ	0xFF0
 16535                           indf0	equ	0xFEF
 16536                           postinc0	equ	0xFEE
 16537                           fsr0h	equ	0xFEA
 16538                           fsr0l	equ	0xFE9
 16539                           wreg	equ	0xFE8
 16540                           postdec1	equ	0xFE5
 16541                           fsr1h	equ	0xFE2
 16542                           fsr1l	equ	0xFE1
 16543                           indf2	equ	0xFDF
 16544                           postinc2	equ	0xFDE
 16545                           postdec2	equ	0xFDD
 16546                           fsr2h	equ	0xFDA
 16547                           fsr2l	equ	0xFD9
 16548                           status	equ	0xFD8
 16549                           
 16550 ;; *************** function i2_change_state_to_menu_start *****************
 16551 ;; Defined at:
 16552 ;;		line 474 in file "UI.c"
 16553 ;; Parameters:    Size  Location     Type
 16554 ;;		None
 16555 ;; Auto vars:     Size  Location     Type
 16556 ;;		None
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      void 
 16559 ;; Registers used:
 16560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16561 ;; Tracked objects:
 16562 ;;		On entry : 0/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;Total ram usage:        0 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    4
 16573 ;; This function calls:
 16574 ;;		i2_lcdInst
 16575 ;;		i2_printRTC
 16576 ;;		i2_printf
 16577 ;; This function is called by:
 16578 ;;		_updateMenu
 16579 ;; This function uses a non-reentrant model
 16580 ;;
 16581                           
 16582                           	psect	text60
 16583  004664                     __ptext60:
 16584                           	opt stack 0
 16585  004664                     i2_change_state_to_menu_start:
 16586                           	opt stack 18
 16587                           
 16588                           ;UI.c: 475: cur_state = 0;
 16589                           
 16590                           ;incstack = 0
 16591  004664  0E00               	movlw	0
 16592  004666  0100               	movlb	0	; () banked
 16593  004668  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16594  00466A  0E00               	movlw	0
 16595  00466C  6FE0               	movwf	_cur_state& (0+255),b
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;UI.c: 477: lcdInst(0b10000000);;
 16599  00466E  0E80               	movlw	128
 16600  004670  ECFA  F023         	call	i2_lcdInst
 16601                           
 16602                           ;UI.c: 478: printRTC();
 16603  004674  EC59  F012         	call	i2_printRTC	;wreg free
 16604                           
 16605                           ;UI.c: 479: lcdInst(0b11000000);;
 16606  004678  0EC0               	movlw	192
 16607  00467A  ECFA  F023         	call	i2_lcdInst
 16608                           
 16609                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16610  00467E  0EF7               	movlw	low STR_30
 16611  004680  6E0D               	movwf	i2printf@f,c
 16612  004682  0EFD               	movlw	high STR_30
 16613  004684  6E0E               	movwf	i2printf@f+1,c
 16614  004686  ECD4  F00A         	call	i2_printf	;wreg free
 16615  00468A  0012               	return		;funcret
 16616  00468C                     __end_ofi2_change_state_to_menu_start:
 16617                           	opt stack 0
 16618                           pclatu	equ	0xFFB
 16619                           pclath	equ	0xFFA
 16620                           tblptru	equ	0xFF8
 16621                           tblptrh	equ	0xFF7
 16622                           tblptrl	equ	0xFF6
 16623                           tablat	equ	0xFF5
 16624                           prodh	equ	0xFF4
 16625                           prodl	equ	0xFF3
 16626                           intcon	equ	0xFF2
 16627                           intcon2	equ	0xFF1
 16628                           intcon3	equ	0xFF0
 16629                           indf0	equ	0xFEF
 16630                           postinc0	equ	0xFEE
 16631                           fsr0h	equ	0xFEA
 16632                           fsr0l	equ	0xFE9
 16633                           wreg	equ	0xFE8
 16634                           postdec1	equ	0xFE5
 16635                           fsr1h	equ	0xFE2
 16636                           fsr1l	equ	0xFE1
 16637                           indf2	equ	0xFDF
 16638                           postinc2	equ	0xFDE
 16639                           postdec2	equ	0xFDD
 16640                           fsr2h	equ	0xFDA
 16641                           fsr2l	equ	0xFD9
 16642                           status	equ	0xFD8
 16643                           
 16644 ;; *************** function i2_printRTC *****************
 16645 ;; Defined at:
 16646 ;;		line 63 in file "RTC.c"
 16647 ;; Parameters:    Size  Location     Type
 16648 ;;		None
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;  printRTC       14   44[COMRAM] int [7]
 16651 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16652 ;;  printRTC        2   64[COMRAM] int 
 16653 ;;  printRTC        2   58[COMRAM] int 
 16654 ;; Return value:  Size  Location     Type
 16655 ;;                  1    wreg      void 
 16656 ;; Registers used:
 16657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16658 ;; Tracked objects:
 16659 ;;		On entry : 0/0
 16660 ;;		On exit  : 0/0
 16661 ;;		Unchanged: 0/0
 16662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16664 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16666 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16667 ;;Total ram usage:       25 bytes
 16668 ;; Hardware stack levels used:    1
 16669 ;; Hardware stack levels required when called:    3
 16670 ;; This function calls:
 16671 ;;		i2_getRTC
 16672 ;;		i2_lcdInst
 16673 ;;		i2_printf
 16674 ;;		i2_strcpy
 16675 ;; This function is called by:
 16676 ;;		i2_change_state_to_menu_start
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           	psect	text61
 16681  0024B2                     __ptext61:
 16682                           	opt stack 0
 16683  0024B2                     i2_printRTC:
 16684                           	opt stack 18
 16685                           
 16686                           ;RTC.c: 64: getRTC();
 16687                           
 16688                           ;incstack = 0
 16689  0024B2  EC5F  F01E         	call	i2_getRTC	;wreg free
 16690                           
 16691                           ;RTC.c: 65: char month[] = "MMM";
 16692  0024B6  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16693  0024BA  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16694  0024BE  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16695  0024C2  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16696                           
 16697                           ;RTC.c: 66: int INT_time[7];
 16698                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16699  0024C6  0E00               	movlw	0
 16700  0024C8  6E42               	movwf	i2printRTC@i+1,c
 16701  0024CA  0E00               	movlw	0
 16702  0024CC  6E41               	movwf	i2printRTC@i,c
 16703  0024CE  BE42               	btfsc	i2printRTC@i+1,7,c
 16704  0024D0  D006               	goto	i2l6136
 16705  0024D2  5042               	movf	i2printRTC@i+1,w,c
 16706  0024D4  E135               	bnz	i2l602
 16707  0024D6  0E07               	movlw	7
 16708  0024D8  5C41               	subwf	i2printRTC@i,w,c
 16709  0024DA  B0D8               	btfsc	status,0,c
 16710  0024DC  D031               	goto	i2l602
 16711  0024DE                     i2l6136:
 16712                           
 16713                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16714  0024DE  0E24               	movlw	low _time
 16715  0024E0  2441               	addwf	i2printRTC@i,w,c
 16716  0024E2  6ED9               	movwf	fsr2l,c
 16717  0024E4  0E01               	movlw	high _time
 16718  0024E6  2042               	addwfc	i2printRTC@i+1,w,c
 16719  0024E8  6EDA               	movwf	fsr2h,c
 16720  0024EA  50DF               	movf	indf2,w,c
 16721  0024EC  6E2A               	movwf	??i2_printRTC& (0+255),c
 16722  0024EE  3A2A               	swapf	??i2_printRTC,f,c
 16723  0024F0  0E0F               	movlw	15
 16724  0024F2  162A               	andwf	??i2_printRTC,f,c
 16725  0024F4  0E0F               	movlw	15
 16726  0024F6  162A               	andwf	??i2_printRTC,f,c
 16727  0024F8  502A               	movf	??i2_printRTC,w,c
 16728  0024FA  0D0A               	mullw	10
 16729  0024FC  0E24               	movlw	low _time
 16730  0024FE  2441               	addwf	i2printRTC@i,w,c
 16731  002500  6ED9               	movwf	fsr2l,c
 16732  002502  0E01               	movlw	high _time
 16733  002504  2042               	addwfc	i2printRTC@i+1,w,c
 16734  002506  6EDA               	movwf	fsr2h,c
 16735  002508  50DF               	movf	indf2,w,c
 16736  00250A  0B0F               	andlw	15
 16737  00250C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16738  00250E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16739  002510  50F3               	movf	prodl,w,c
 16740  002512  262B               	addwf	??i2_printRTC+1,f,c
 16741  002514  50F4               	movf	prodh,w,c
 16742  002516  222C               	addwfc	??i2_printRTC+2,f,c
 16743  002518  90D8               	bcf	status,0,c
 16744  00251A  3441               	rlcf	i2printRTC@i,w,c
 16745  00251C  6ED9               	movwf	fsr2l,c
 16746  00251E  3442               	rlcf	i2printRTC@i+1,w,c
 16747  002520  6EDA               	movwf	fsr2h,c
 16748  002522  0E2D               	movlw	low i2printRTC@INT_time
 16749  002524  26D9               	addwf	fsr2l,f,c
 16750  002526  0E00               	movlw	high i2printRTC@INT_time
 16751  002528  22DA               	addwfc	fsr2h,f,c
 16752  00252A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16753  00252E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16754  002532  4A41               	infsnz	i2printRTC@i,f,c
 16755  002534  2A42               	incf	i2printRTC@i+1,f,c
 16756  002536  BE42               	btfsc	i2printRTC@i+1,7,c
 16757  002538  D7D2               	goto	i2l6136
 16758  00253A  5042               	movf	i2printRTC@i+1,w,c
 16759  00253C  E101               	bnz	i2u468_40
 16760  00253E  D7CB               	goto	L10
 16761  002540                     i2u468_40:
 16762  002540                     i2l602:
 16763                           
 16764                           ;RTC.c: 69: }
 16765                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16766  002540  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16767  002544  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16768                           
 16769                           ;RTC.c: 71: switch(RTC_month){
 16770  002548  D084               	goto	i2l6168
 16771  00254A                     i2l6142:
 16772                           
 16773                           ;RTC.c: 73: strcpy(month, "JAN");
 16774  00254A  0E3D               	movlw	low i2printRTC@month
 16775  00254C  6E01               	movwf	i2strcpy@to,c
 16776  00254E  0E00               	movlw	high i2printRTC@month
 16777  002550  6E02               	movwf	i2strcpy@to+1,c
 16778  002552  0EDB               	movlw	low STR_8
 16779  002554  6E03               	movwf	i2strcpy@from,c
 16780  002556  0EFF               	movlw	high STR_8
 16781  002558  6E04               	movwf	i2strcpy@from+1,c
 16782  00255A  ECA7  F021         	call	i2_strcpy	;wreg free
 16783                           
 16784                           ;RTC.c: 74: break;
 16785  00255E  D0A6               	goto	i2l6170
 16786  002560                     i2l6144:
 16787                           
 16788                           ;RTC.c: 76: strcpy(month, "FEB");
 16789  002560  0E3D               	movlw	low i2printRTC@month
 16790  002562  6E01               	movwf	i2strcpy@to,c
 16791  002564  0E00               	movlw	high i2printRTC@month
 16792  002566  6E02               	movwf	i2strcpy@to+1,c
 16793  002568  0ECB               	movlw	low STR_9
 16794  00256A  6E03               	movwf	i2strcpy@from,c
 16795  00256C  0EFF               	movlw	high STR_9
 16796  00256E  6E04               	movwf	i2strcpy@from+1,c
 16797  002570  ECA7  F021         	call	i2_strcpy	;wreg free
 16798                           
 16799                           ;RTC.c: 77: break;
 16800  002574  D09B               	goto	i2l6170
 16801  002576                     i2l6146:
 16802                           
 16803                           ;RTC.c: 79: strcpy(month, "MAR");
 16804  002576  0E3D               	movlw	low i2printRTC@month
 16805  002578  6E01               	movwf	i2strcpy@to,c
 16806  00257A  0E00               	movlw	high i2printRTC@month
 16807  00257C  6E02               	movwf	i2strcpy@to+1,c
 16808  00257E  0EE7               	movlw	low STR_10
 16809  002580  6E03               	movwf	i2strcpy@from,c
 16810  002582  0EFF               	movlw	high STR_10
 16811  002584  6E04               	movwf	i2strcpy@from+1,c
 16812  002586  ECA7  F021         	call	i2_strcpy	;wreg free
 16813                           
 16814                           ;RTC.c: 80: break;
 16815  00258A  D090               	goto	i2l6170
 16816  00258C                     i2l6148:
 16817                           
 16818                           ;RTC.c: 82: strcpy(month, "APR");
 16819  00258C  0E3D               	movlw	low i2printRTC@month
 16820  00258E  6E01               	movwf	i2strcpy@to,c
 16821  002590  0E00               	movlw	high i2printRTC@month
 16822  002592  6E02               	movwf	i2strcpy@to+1,c
 16823  002594  0EEB               	movlw	low STR_11
 16824  002596  6E03               	movwf	i2strcpy@from,c
 16825  002598  0EFF               	movlw	high STR_11
 16826  00259A  6E04               	movwf	i2strcpy@from+1,c
 16827  00259C  ECA7  F021         	call	i2_strcpy	;wreg free
 16828                           
 16829                           ;RTC.c: 83: break;
 16830  0025A0  D085               	goto	i2l6170
 16831  0025A2                     i2l6150:
 16832                           
 16833                           ;RTC.c: 85: strcpy(month, "MAY");
 16834  0025A2  0E3D               	movlw	low i2printRTC@month
 16835  0025A4  6E01               	movwf	i2strcpy@to,c
 16836  0025A6  0E00               	movlw	high i2printRTC@month
 16837  0025A8  6E02               	movwf	i2strcpy@to+1,c
 16838  0025AA  0EFB               	movlw	low STR_12
 16839  0025AC  6E03               	movwf	i2strcpy@from,c
 16840  0025AE  0EFF               	movlw	high STR_12
 16841  0025B0  6E04               	movwf	i2strcpy@from+1,c
 16842  0025B2  ECA7  F021         	call	i2_strcpy	;wreg free
 16843                           
 16844                           ;RTC.c: 86: break;
 16845  0025B6  D07A               	goto	i2l6170
 16846  0025B8                     i2l6152:
 16847                           
 16848                           ;RTC.c: 88: strcpy(month, "JUN");
 16849  0025B8  0E3D               	movlw	low i2printRTC@month
 16850  0025BA  6E01               	movwf	i2strcpy@to,c
 16851  0025BC  0E00               	movlw	high i2printRTC@month
 16852  0025BE  6E02               	movwf	i2strcpy@to+1,c
 16853  0025C0  0EDF               	movlw	low STR_13
 16854  0025C2  6E03               	movwf	i2strcpy@from,c
 16855  0025C4  0EFF               	movlw	high STR_13
 16856  0025C6  6E04               	movwf	i2strcpy@from+1,c
 16857  0025C8  ECA7  F021         	call	i2_strcpy	;wreg free
 16858                           
 16859                           ;RTC.c: 89: break;
 16860  0025CC  D06F               	goto	i2l6170
 16861  0025CE                     i2l6154:
 16862                           
 16863                           ;RTC.c: 91: strcpy(month, "JUL");
 16864  0025CE  0E3D               	movlw	low i2printRTC@month
 16865  0025D0  6E01               	movwf	i2strcpy@to,c
 16866  0025D2  0E00               	movlw	high i2printRTC@month
 16867  0025D4  6E02               	movwf	i2strcpy@to+1,c
 16868  0025D6  0ED7               	movlw	low STR_14
 16869  0025D8  6E03               	movwf	i2strcpy@from,c
 16870  0025DA  0EFF               	movlw	high STR_14
 16871  0025DC  6E04               	movwf	i2strcpy@from+1,c
 16872  0025DE  ECA7  F021         	call	i2_strcpy	;wreg free
 16873                           
 16874                           ;RTC.c: 92: break;
 16875  0025E2  D064               	goto	i2l6170
 16876  0025E4                     i2l6156:
 16877                           
 16878                           ;RTC.c: 94: strcpy(month, "AUG");
 16879  0025E4  0E3D               	movlw	low i2printRTC@month
 16880  0025E6  6E01               	movwf	i2strcpy@to,c
 16881  0025E8  0E00               	movlw	high i2printRTC@month
 16882  0025EA  6E02               	movwf	i2strcpy@to+1,c
 16883  0025EC  0ED3               	movlw	low STR_15
 16884  0025EE  6E03               	movwf	i2strcpy@from,c
 16885  0025F0  0EFF               	movlw	high STR_15
 16886  0025F2  6E04               	movwf	i2strcpy@from+1,c
 16887  0025F4  ECA7  F021         	call	i2_strcpy	;wreg free
 16888                           
 16889                           ;RTC.c: 95: break;
 16890  0025F8  D059               	goto	i2l6170
 16891  0025FA                     i2l6158:
 16892                           
 16893                           ;RTC.c: 97: strcpy(month, "SEP");
 16894  0025FA  0E3D               	movlw	low i2printRTC@month
 16895  0025FC  6E01               	movwf	i2strcpy@to,c
 16896  0025FE  0E00               	movlw	high i2printRTC@month
 16897  002600  6E02               	movwf	i2strcpy@to+1,c
 16898  002602  0EE3               	movlw	low STR_16
 16899  002604  6E03               	movwf	i2strcpy@from,c
 16900  002606  0EFF               	movlw	high STR_16
 16901  002608  6E04               	movwf	i2strcpy@from+1,c
 16902  00260A  ECA7  F021         	call	i2_strcpy	;wreg free
 16903                           
 16904                           ;RTC.c: 98: break;
 16905  00260E  D04E               	goto	i2l6170
 16906  002610                     i2l6160:
 16907                           
 16908                           ;RTC.c: 100: strcpy(month, "OCT");
 16909  002610  0E3D               	movlw	low i2printRTC@month
 16910  002612  6E01               	movwf	i2strcpy@to,c
 16911  002614  0E00               	movlw	high i2printRTC@month
 16912  002616  6E02               	movwf	i2strcpy@to+1,c
 16913  002618  0EF3               	movlw	low STR_17
 16914  00261A  6E03               	movwf	i2strcpy@from,c
 16915  00261C  0EFF               	movlw	high STR_17
 16916  00261E  6E04               	movwf	i2strcpy@from+1,c
 16917  002620  ECA7  F021         	call	i2_strcpy	;wreg free
 16918                           
 16919                           ;RTC.c: 101: break;
 16920  002624  D043               	goto	i2l6170
 16921  002626                     i2l6162:
 16922                           
 16923                           ;RTC.c: 103: strcpy(month, "NOV");
 16924  002626  0E3D               	movlw	low i2printRTC@month
 16925  002628  6E01               	movwf	i2strcpy@to,c
 16926  00262A  0E00               	movlw	high i2printRTC@month
 16927  00262C  6E02               	movwf	i2strcpy@to+1,c
 16928  00262E  0EF7               	movlw	low STR_18
 16929  002630  6E03               	movwf	i2strcpy@from,c
 16930  002632  0EFF               	movlw	high STR_18
 16931  002634  6E04               	movwf	i2strcpy@from+1,c
 16932  002636  ECA7  F021         	call	i2_strcpy	;wreg free
 16933                           
 16934                           ;RTC.c: 104: break;
 16935  00263A  D038               	goto	i2l6170
 16936  00263C                     i2l6164:
 16937                           
 16938                           ;RTC.c: 106: strcpy(month, "DEC");
 16939  00263C  0E3D               	movlw	low i2printRTC@month
 16940  00263E  6E01               	movwf	i2strcpy@to,c
 16941  002640  0E00               	movlw	high i2printRTC@month
 16942  002642  6E02               	movwf	i2strcpy@to+1,c
 16943  002644  0ECF               	movlw	low STR_19
 16944  002646  6E03               	movwf	i2strcpy@from,c
 16945  002648  0EFF               	movlw	high STR_19
 16946  00264A  6E04               	movwf	i2strcpy@from+1,c
 16947  00264C  ECA7  F021         	call	i2_strcpy	;wreg free
 16948                           
 16949                           ;RTC.c: 108: }
 16950                           
 16951                           ;RTC.c: 107: break;
 16952  002650  D02D               	goto	i2l6170
 16953  002652                     i2l6168:
 16954  002652  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16955  002656  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16956                           
 16957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16958                           ; Switch size 1, requested type "space"
 16959                           ; Number of cases is 1, Range of values is 0 to 0
 16960                           ; switch strategies available:
 16961                           ; Name         Instructions Cycles
 16962                           ; simple_byte            4     3 (average)
 16963                           ;	Chosen strategy is simple_byte
 16964  00265A  502B               	movf	??i2_printRTC+1,w,c
 16965  00265C  0A00               	xorlw	0	; case 0
 16966  00265E  A4D8               	btfss	status,2,c
 16967  002660  D025               	goto	i2l6170
 16968                           
 16969                           ; Switch size 1, requested type "space"
 16970                           ; Number of cases is 12, Range of values is 1 to 12
 16971                           ; switch strategies available:
 16972                           ; Name         Instructions Cycles
 16973                           ; simple_byte           37    19 (average)
 16974                           ;	Chosen strategy is simple_byte
 16975  002662  502A               	movf	??i2_printRTC,w,c
 16976  002664  0A01               	xorlw	1	; case 1
 16977  002666  B4D8               	btfsc	status,2,c
 16978  002668  D770               	goto	i2l6142
 16979  00266A  0A03               	xorlw	3	; case 2
 16980  00266C  B4D8               	btfsc	status,2,c
 16981  00266E  D778               	goto	i2l6144
 16982  002670  0A01               	xorlw	1	; case 3
 16983  002672  B4D8               	btfsc	status,2,c
 16984  002674  D780               	goto	i2l6146
 16985  002676  0A07               	xorlw	7	; case 4
 16986  002678  B4D8               	btfsc	status,2,c
 16987  00267A  D788               	goto	i2l6148
 16988  00267C  0A01               	xorlw	1	; case 5
 16989  00267E  B4D8               	btfsc	status,2,c
 16990  002680  D790               	goto	i2l6150
 16991  002682  0A03               	xorlw	3	; case 6
 16992  002684  B4D8               	btfsc	status,2,c
 16993  002686  D798               	goto	i2l6152
 16994  002688  0A01               	xorlw	1	; case 7
 16995  00268A  B4D8               	btfsc	status,2,c
 16996  00268C  D7A0               	goto	i2l6154
 16997  00268E  0A0F               	xorlw	15	; case 8
 16998  002690  B4D8               	btfsc	status,2,c
 16999  002692  D7A8               	goto	i2l6156
 17000  002694  0A01               	xorlw	1	; case 9
 17001  002696  B4D8               	btfsc	status,2,c
 17002  002698  D7B0               	goto	i2l6158
 17003  00269A  0A03               	xorlw	3	; case 10
 17004  00269C  B4D8               	btfsc	status,2,c
 17005  00269E  D7B8               	goto	i2l6160
 17006  0026A0  0A01               	xorlw	1	; case 11
 17007  0026A2  B4D8               	btfsc	status,2,c
 17008  0026A4  D7C0               	goto	i2l6162
 17009  0026A6  0A07               	xorlw	7	; case 12
 17010  0026A8  B4D8               	btfsc	status,2,c
 17011  0026AA  D7C8               	goto	i2l6164
 17012  0026AC                     i2l6170:
 17013                           
 17014                           ;RTC.c: 109: lcdInst(0b10000000);;
 17015  0026AC  0E80               	movlw	128
 17016  0026AE  ECFA  F023         	call	i2_lcdInst
 17017                           
 17018                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17019  0026B2  0E40               	movlw	low STR_21
 17020  0026B4  6E0D               	movwf	i2printf@f,c
 17021  0026B6  0EFB               	movlw	high STR_21
 17022  0026B8  6E0E               	movwf	i2printf@f+1,c
 17023  0026BA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17024  0026BE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17025  0026C2  0E3D               	movlw	low i2printRTC@month
 17026  0026C4  6E11               	movwf	?i2_printf+4,c
 17027  0026C6  0E00               	movlw	high i2printRTC@month
 17028  0026C8  6E12               	movwf	?i2_printf+5,c
 17029  0026CA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17030  0026CE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17031  0026D2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17032  0026D6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17033  0026DA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17034  0026DE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17035  0026E2  ECD4  F00A         	call	i2_printf	;wreg free
 17036  0026E6  0012               	return		;funcret
 17037  0026E8                     __end_ofi2_printRTC:
 17038                           	opt stack 0
 17039                           pclatu	equ	0xFFB
 17040                           pclath	equ	0xFFA
 17041                           tblptru	equ	0xFF8
 17042                           tblptrh	equ	0xFF7
 17043                           tblptrl	equ	0xFF6
 17044                           tablat	equ	0xFF5
 17045                           prodh	equ	0xFF4
 17046                           prodl	equ	0xFF3
 17047                           intcon	equ	0xFF2
 17048                           intcon2	equ	0xFF1
 17049                           intcon3	equ	0xFF0
 17050                           indf0	equ	0xFEF
 17051                           postinc0	equ	0xFEE
 17052                           fsr0h	equ	0xFEA
 17053                           fsr0l	equ	0xFE9
 17054                           wreg	equ	0xFE8
 17055                           postdec1	equ	0xFE5
 17056                           fsr1h	equ	0xFE2
 17057                           fsr1l	equ	0xFE1
 17058                           indf2	equ	0xFDF
 17059                           postinc2	equ	0xFDE
 17060                           postdec2	equ	0xFDD
 17061                           fsr2h	equ	0xFDA
 17062                           fsr2l	equ	0xFD9
 17063                           status	equ	0xFD8
 17064                           
 17065 ;; *************** function i2_strcpy *****************
 17066 ;; Defined at:
 17067 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17068 ;; Parameters:    Size  Location     Type
 17069 ;;  to              2    0[COMRAM] PTR unsigned char 
 17070 ;;		 -> printRTC@month(4), UI@month(4), 
 17071 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17072 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17073 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17074 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17075 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17076 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17077 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17078 ;;		 -> STR_8(4), 
 17079 ;; Auto vars:     Size  Location     Type
 17080 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17081 ;;		 -> printRTC@month(4), UI@month(4), 
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  2    0[COMRAM] PTR unsigned char 
 17084 ;; Registers used:
 17085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17094 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17095 ;;Total ram usage:        6 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; This function calls:
 17098 ;;		Nothing
 17099 ;; This function is called by:
 17100 ;;		i2_printRTC
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           	psect	text62
 17105  00434E                     __ptext62:
 17106                           	opt stack 0
 17107  00434E                     i2_strcpy:
 17108                           	opt stack 20
 17109                           
 17110                           ;incstack = 0
 17111  00434E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17112  004352  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17113  004356  D004               	goto	i2l5806
 17114  004358                     i2l5804:
 17115  004358  4A05               	infsnz	i2strcpy@cp,f,c
 17116  00435A  2A06               	incf	i2strcpy@cp+1,f,c
 17117  00435C  4A03               	infsnz	i2strcpy@from,f,c
 17118  00435E  2A04               	incf	i2strcpy@from+1,f,c
 17119  004360                     i2l5806:
 17120  004360  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17121  004364  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17122  004368                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17123  004368  6AF8               	clrf	tblptru,c
 17124  00436A                     	endif
 17125  00436A                     	if	0	;tblptru may be non-zero
 17126  00436A                     	endif
 17127  00436A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17128  00436E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17129  004372  0008               	tblrd		*
 17130  004374  CFF5 FFDF          	movff	tablat,indf2
 17131  004378  50DF               	movf	indf2,w,c
 17132  00437A  B4D8               	btfsc	status,2,c
 17133  00437C  0012               	return	
 17134  00437E  D7EC               	goto	i2l5804
 17135  004380                     __end_ofi2_strcpy:
 17136                           	opt stack 0
 17137                           pclatu	equ	0xFFB
 17138                           pclath	equ	0xFFA
 17139                           tblptru	equ	0xFF8
 17140                           tblptrh	equ	0xFF7
 17141                           tblptrl	equ	0xFF6
 17142                           tablat	equ	0xFF5
 17143                           prodh	equ	0xFF4
 17144                           prodl	equ	0xFF3
 17145                           intcon	equ	0xFF2
 17146                           intcon2	equ	0xFF1
 17147                           intcon3	equ	0xFF0
 17148                           indf0	equ	0xFEF
 17149                           postinc0	equ	0xFEE
 17150                           fsr0h	equ	0xFEA
 17151                           fsr0l	equ	0xFE9
 17152                           wreg	equ	0xFE8
 17153                           postdec1	equ	0xFE5
 17154                           fsr1h	equ	0xFE2
 17155                           fsr1l	equ	0xFE1
 17156                           indf2	equ	0xFDF
 17157                           postinc2	equ	0xFDE
 17158                           postdec2	equ	0xFDD
 17159                           fsr2h	equ	0xFDA
 17160                           fsr2l	equ	0xFD9
 17161                           status	equ	0xFD8
 17162                           
 17163 ;; *************** function _inputHandler *****************
 17164 ;; Defined at:
 17165 ;;		line 372 in file "UI.c"
 17166 ;; Parameters:    Size  Location     Type
 17167 ;;		None
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;		None
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  2   41[COMRAM] int 
 17172 ;; Registers used:
 17173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17183 ;;Total ram usage:        4 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    4
 17186 ;; This function calls:
 17187 ;;		_change_state_to_logs_11
 17188 ;;		_change_state_to_logs_12
 17189 ;;		_change_state_to_logs_22
 17190 ;;		_change_state_to_logs_23
 17191 ;;		_change_state_to_logs_33
 17192 ;;		_change_state_to_logs_34
 17193 ;;		_change_state_to_menu_11
 17194 ;;		_change_state_to_menu_23
 17195 ;;		i2_change_state_to_menu_12
 17196 ;;		i2_change_state_to_menu_22
 17197 ;; This function is called by:
 17198 ;;		_updateMenu
 17199 ;; This function uses a non-reentrant model
 17200 ;;
 17201                           
 17202                           	psect	text63
 17203  0028DA                     __ptext63:
 17204                           	opt stack 0
 17205  0028DA                     _inputHandler:
 17206                           	opt stack 18
 17207                           
 17208                           ;UI.c: 377: if(firstboot){
 17209                           
 17210                           ;incstack = 0
 17211  0028DA  5075               	movf	_firstboot,w,c
 17212  0028DC  1076               	iorwf	_firstboot+1,w,c
 17213  0028DE  B4D8               	btfsc	status,2,c
 17214  0028E0  D00B               	goto	i2l6238
 17215                           
 17216                           ;UI.c: 378: change_state_to_menu_11();
 17217  0028E2  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 17218                           
 17219                           ;UI.c: 379: firstboot = 0;
 17220  0028E6  0E00               	movlw	0
 17221  0028E8  6E76               	movwf	_firstboot+1,c
 17222  0028EA  0E00               	movlw	0
 17223  0028EC  6E75               	movwf	_firstboot,c
 17224                           
 17225                           ;UI.c: 380: return 0;
 17226  0028EE  0E00               	movlw	0
 17227  0028F0  6E2B               	movwf	?_inputHandler+1,c
 17228  0028F2  0E00               	movlw	0
 17229  0028F4  6E2A               	movwf	?_inputHandler,c
 17230  0028F6  0012               	return	
 17231  0028F8                     i2l6238:
 17232                           
 17233                           ;UI.c: 381: }
 17234                           ;UI.c: 382: if (logstate){
 17235  0028F8  0100               	movlb	0	; () banked
 17236  0028FA  51F6               	movf	_logstate& (0+255),w,b
 17237  0028FC  0100               	movlb	0	; () banked
 17238  0028FE  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17239  002900  B4D8               	btfsc	status,2,c
 17240  002902  D0C7               	goto	i2l6356
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17244  002904  0E43               	movlw	67
 17245  002906  187D               	xorwf	_input,w,c	;volatile
 17246  002908  A4D8               	btfss	status,2,c
 17247  00290A  D012               	goto	i2l6256
 17248                           
 17249                           ; BSR set to: 0
 17250  00290C  B281               	btfsc	3969,1,c	;volatile
 17251  00290E  D009               	goto	i2l6248
 17252  002910  D00F               	goto	i2l6256
 17253  002912                     i2l6246:
 17254                           
 17255                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17256  002912  0E68               	movlw	104
 17257  002914  6E2C               	movwf	??_inputHandler& (0+255),c
 17258  002916  0EE4               	movlw	228
 17259  002918                     i2u831_47:
 17260  002918  2EE8               	decfsz	wreg,f,c
 17261  00291A  D7FE               	bra	i2u831_47
 17262  00291C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17263  00291E  D7FC               	bra	i2u831_47
 17264  002920  D000               	nop2	
 17265  002922                     i2l6248:
 17266  002922  B281               	btfsc	3969,1,c	;volatile
 17267  002924  D7F6               	goto	i2l6246
 17268  002926                     i2l6250:
 17269                           
 17270                           ;UI.c: 387: }
 17271                           ;UI.c: 388: return 0;
 17272  002926  0E00               	movlw	0
 17273  002928  6E2B               	movwf	?_inputHandler+1,c
 17274  00292A  0E00               	movlw	0
 17275  00292C  6E2A               	movwf	?_inputHandler,c
 17276  00292E  0012               	return	
 17277  002930                     i2l6256:
 17278                           
 17279                           ;UI.c: 390: else if (input == 'D'){
 17280  002930  0E44               	movlw	68
 17281  002932  187D               	xorwf	_input,w,c	;volatile
 17282  002934  A4D8               	btfss	status,2,c
 17283  002936  D7F7               	goto	i2l6250
 17284                           
 17285                           ;UI.c: 392: logstate = 0;
 17286  002938  0E00               	movlw	0
 17287  00293A  0100               	movlb	0	; () banked
 17288  00293C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17289  00293E  0E00               	movlw	0
 17290  002940  6FF6               	movwf	_logstate& (0+255),b
 17291                           
 17292                           ;UI.c: 393: switch(cur_state){
 17293  002942  D012               	goto	i2l6274
 17294  002944                     i2l6260:
 17295                           
 17296                           ;UI.c: 395: change_state_to_logs_11();
 17297  002944  EC80  F022         	call	_change_state_to_logs_11	;wreg free
 17298                           
 17299                           ;UI.c: 396: break;
 17300  002948  D7EE               	goto	i2l6250
 17301  00294A                     i2l6262:
 17302                           
 17303                           ;UI.c: 398: change_state_to_logs_12();
 17304  00294A  EC68  F022         	call	_change_state_to_logs_12	;wreg free
 17305                           
 17306                           ;UI.c: 399: break;
 17307  00294E  D7EB               	goto	i2l6250
 17308  002950                     i2l6264:
 17309                           
 17310                           ;UI.c: 401: change_state_to_logs_22();
 17311  002950  EC50  F022         	call	_change_state_to_logs_22	;wreg free
 17312                           
 17313                           ;UI.c: 402: break;
 17314  002954  D7E8               	goto	i2l6250
 17315  002956                     i2l6266:
 17316                           
 17317                           ;UI.c: 404: change_state_to_logs_23();
 17318  002956  ECC6  F022         	call	_change_state_to_logs_23	;wreg free
 17319                           
 17320                           ;UI.c: 405: break;
 17321  00295A  D7E5               	goto	i2l6250
 17322  00295C                     i2l6268:
 17323                           
 17324                           ;UI.c: 407: change_state_to_logs_33();
 17325  00295C  EC38  F022         	call	_change_state_to_logs_33	;wreg free
 17326                           
 17327                           ;UI.c: 408: break;
 17328  002960  D7E2               	goto	i2l6250
 17329  002962                     i2l6270:
 17330                           
 17331                           ;UI.c: 410: change_state_to_logs_34();
 17332  002962  EC20  F022         	call	_change_state_to_logs_34	;wreg free
 17333                           
 17334                           ;UI.c: 412: }
 17335                           
 17336                           ;UI.c: 411: break;
 17337  002966  D7DF               	goto	i2l6250
 17338  002968                     i2l6274:
 17339  002968  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17340  00296C  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17341                           
 17342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17343                           ; Switch size 1, requested type "space"
 17344                           ; Number of cases is 2, Range of values is 3 to 4
 17345                           ; switch strategies available:
 17346                           ; Name         Instructions Cycles
 17347                           ; simple_byte            7     4 (average)
 17348                           ;	Chosen strategy is simple_byte
 17349  002970  502D               	movf	??_inputHandler+1,w,c
 17350  002972  0A03               	xorlw	3	; case 3
 17351  002974  B4D8               	btfsc	status,2,c
 17352  002976  D004               	goto	i2l8474
 17353  002978  0A07               	xorlw	7	; case 4
 17354  00297A  B4D8               	btfsc	status,2,c
 17355  00297C  D00F               	goto	i2l8476
 17356  00297E  D7D3               	goto	i2l6250
 17357  002980                     i2l8474:
 17358                           
 17359                           ; Switch size 1, requested type "space"
 17360                           ; Number of cases is 4, Range of values is 243 to 255
 17361                           ; switch strategies available:
 17362                           ; Name         Instructions Cycles
 17363                           ; simple_byte           13     7 (average)
 17364                           ;	Chosen strategy is simple_byte
 17365  002980  502C               	movf	??_inputHandler,w,c
 17366  002982  0AF3               	xorlw	243	; case 243
 17367  002984  B4D8               	btfsc	status,2,c
 17368  002986  D7DE               	goto	i2l6260
 17369  002988  0A07               	xorlw	7	; case 244
 17370  00298A  B4D8               	btfsc	status,2,c
 17371  00298C  D7DE               	goto	i2l6262
 17372  00298E  0A0A               	xorlw	10	; case 254
 17373  002990  B4D8               	btfsc	status,2,c
 17374  002992  D7DE               	goto	i2l6264
 17375  002994  0A01               	xorlw	1	; case 255
 17376  002996  B4D8               	btfsc	status,2,c
 17377  002998  D7DE               	goto	i2l6266
 17378  00299A  D7C5               	goto	i2l6250
 17379  00299C                     i2l8476:
 17380                           
 17381                           ; Switch size 1, requested type "space"
 17382                           ; Number of cases is 2, Range of values is 9 to 10
 17383                           ; switch strategies available:
 17384                           ; Name         Instructions Cycles
 17385                           ; simple_byte            7     4 (average)
 17386                           ;	Chosen strategy is simple_byte
 17387  00299C  502C               	movf	??_inputHandler,w,c
 17388  00299E  0A09               	xorlw	9	; case 9
 17389  0029A0  B4D8               	btfsc	status,2,c
 17390  0029A2  D7DC               	goto	i2l6268
 17391  0029A4  0A03               	xorlw	3	; case 10
 17392  0029A6  B4D8               	btfsc	status,2,c
 17393  0029A8  D7DC               	goto	i2l6270
 17394  0029AA  D7BD               	goto	i2l6250
 17395  0029AC                     i2l6286:
 17396                           
 17397                           ;UI.c: 422: if(cur_state == 11){
 17398  0029AC  0E0B               	movlw	11
 17399  0029AE  0100               	movlb	0	; () banked
 17400  0029B0  19E0               	xorwf	_cur_state& (0+255),w,b
 17401  0029B2  0100               	movlb	0	; () banked
 17402  0029B4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17403  0029B6  A4D8               	btfss	status,2,c
 17404  0029B8  D005               	goto	i2l6294
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;UI.c: 423: return 0;
 17408  0029BA  0E00               	movlw	0
 17409  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17410  0029BE  0E00               	movlw	0
 17411  0029C0  6E2A               	movwf	?_inputHandler,c
 17412                           
 17413                           ; BSR set to: 0
 17414  0029C2  0012               	return	
 17415  0029C4                     i2l6294:
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;UI.c: 425: else{
 17419                           ;UI.c: 426: change_state_to_menu_11();
 17420  0029C4  EC08  F022         	call	_change_state_to_menu_11	;wreg free
 17421                           
 17422                           ;UI.c: 427: }
 17423                           ;UI.c: 428: return 0;
 17424  0029C8  0E00               	movlw	0
 17425  0029CA  6E2B               	movwf	?_inputHandler+1,c
 17426  0029CC  0E00               	movlw	0
 17427  0029CE  6E2A               	movwf	?_inputHandler,c
 17428  0029D0  0012               	return	
 17429  0029D2                     i2l6300:
 17430                           
 17431                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17432  0029D2  0E16               	movlw	22
 17433  0029D4  0100               	movlb	0	; () banked
 17434  0029D6  19E0               	xorwf	_cur_state& (0+255),w,b
 17435  0029D8  0100               	movlb	0	; () banked
 17436  0029DA  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17437  0029DC  B4D8               	btfsc	status,2,c
 17438  0029DE  D007               	goto	i2l6304
 17439                           
 17440                           ; BSR set to: 0
 17441  0029E0  0E0C               	movlw	12
 17442  0029E2  0100               	movlb	0	; () banked
 17443  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17444  0029E6  0100               	movlb	0	; () banked
 17445  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17446  0029EA  A4D8               	btfss	status,2,c
 17447  0029EC  D005               	goto	i2l6310
 17448  0029EE                     i2l6304:
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;UI.c: 431: return 0;
 17452  0029EE  0E00               	movlw	0
 17453  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17454  0029F2  0E00               	movlw	0
 17455  0029F4  6E2A               	movwf	?_inputHandler,c
 17456                           
 17457                           ; BSR set to: 0
 17458  0029F6  0012               	return	
 17459  0029F8                     i2l6310:
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;UI.c: 433: else if(cur_state == 23){
 17463  0029F8  0E17               	movlw	23
 17464  0029FA  0100               	movlb	0	; () banked
 17465  0029FC  19E0               	xorwf	_cur_state& (0+255),w,b
 17466  0029FE  0100               	movlb	0	; () banked
 17467  002A00  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17468  002A02  A4D8               	btfss	status,2,c
 17469  002A04  D003               	goto	i2l6314
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;UI.c: 434: change_state_to_menu_22();
 17473  002A06  ECC0  F021         	call	i2_change_state_to_menu_22	;wreg free
 17474                           
 17475                           ;UI.c: 435: }
 17476  002A0A  D002               	goto	i2l6316
 17477  002A0C                     i2l6314:
 17478                           
 17479                           ;UI.c: 436: else{
 17480                           ;UI.c: 437: change_state_to_menu_12();
 17481  002A0C  ECD8  F021         	call	i2_change_state_to_menu_12	;wreg free
 17482  002A10                     i2l6316:
 17483                           
 17484                           ;UI.c: 438: }
 17485                           ;UI.c: 439: return 0;
 17486  002A10  0E00               	movlw	0
 17487  002A12  6E2B               	movwf	?_inputHandler+1,c
 17488  002A14  0E00               	movlw	0
 17489  002A16  6E2A               	movwf	?_inputHandler,c
 17490  002A18  0012               	return	
 17491  002A1A                     i2l6320:
 17492                           
 17493                           ;UI.c: 441: if(cur_state == 23){
 17494  002A1A  0E17               	movlw	23
 17495  002A1C  0100               	movlb	0	; () banked
 17496  002A1E  19E0               	xorwf	_cur_state& (0+255),w,b
 17497  002A20  0100               	movlb	0	; () banked
 17498  002A22  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17499  002A24  A4D8               	btfss	status,2,c
 17500  002A26  D005               	goto	i2l6328
 17501                           
 17502                           ; BSR set to: 0
 17503                           ;UI.c: 442: return 0;
 17504  002A28  0E00               	movlw	0
 17505  002A2A  6E2B               	movwf	?_inputHandler+1,c
 17506  002A2C  0E00               	movlw	0
 17507  002A2E  6E2A               	movwf	?_inputHandler,c
 17508                           
 17509                           ; BSR set to: 0
 17510  002A30  0012               	return	
 17511  002A32                     i2l6328:
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;UI.c: 444: else{
 17515                           ;UI.c: 445: change_state_to_menu_23();
 17516  002A32  ECF0  F021         	call	_change_state_to_menu_23	;wreg free
 17517                           
 17518                           ;UI.c: 446: }
 17519                           ;UI.c: 447: return 0;
 17520  002A36  0E00               	movlw	0
 17521  002A38  6E2B               	movwf	?_inputHandler+1,c
 17522  002A3A  0E00               	movlw	0
 17523  002A3C  6E2A               	movwf	?_inputHandler,c
 17524  002A3E  0012               	return	
 17525  002A40                     i2l6334:
 17526                           
 17527                           ;UI.c: 450: up = 1;
 17528  002A40  0E00               	movlw	0
 17529  002A42  6E78               	movwf	_up+1,c
 17530  002A44  0E01               	movlw	1
 17531  002A46  6E77               	movwf	_up,c
 17532                           
 17533                           ;UI.c: 451: return 1;
 17534  002A48  0E00               	movlw	0
 17535  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17536  002A4C  0E01               	movlw	1
 17537  002A4E  6E2A               	movwf	?_inputHandler,c
 17538  002A50  0012               	return	
 17539  002A52                     i2l6338:
 17540                           
 17541                           ;UI.c: 453: down = 1;
 17542  002A52  0E00               	movlw	0
 17543  002A54  6E6A               	movwf	_down+1,c
 17544  002A56  0E01               	movlw	1
 17545  002A58  6E69               	movwf	_down,c
 17546                           
 17547                           ;UI.c: 454: return 1;
 17548  002A5A  0E00               	movlw	0
 17549  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17550  002A5E  0E01               	movlw	1
 17551  002A60  6E2A               	movwf	?_inputHandler,c
 17552  002A62  0012               	return	
 17553  002A64                     i2l6342:
 17554                           
 17555                           ;UI.c: 456: enter = 1;
 17556  002A64  0E00               	movlw	0
 17557  002A66  6E6C               	movwf	_enter+1,c
 17558  002A68  0E01               	movlw	1
 17559  002A6A  6E6B               	movwf	_enter,c
 17560                           
 17561                           ;UI.c: 457: return 1;
 17562  002A6C  0E00               	movlw	0
 17563  002A6E  6E2B               	movwf	?_inputHandler+1,c
 17564  002A70  0E01               	movlw	1
 17565  002A72  6E2A               	movwf	?_inputHandler,c
 17566  002A74  0012               	return	
 17567  002A76                     i2l6346:
 17568                           
 17569                           ;UI.c: 459: back = 1;
 17570  002A76  0E00               	movlw	0
 17571  002A78  6E5C               	movwf	_back+1,c
 17572  002A7A  0E01               	movlw	1
 17573  002A7C  6E5B               	movwf	_back,c
 17574                           
 17575                           ;UI.c: 460: return 1;
 17576  002A7E  0E00               	movlw	0
 17577  002A80  6E2B               	movwf	?_inputHandler+1,c
 17578  002A82  0E01               	movlw	1
 17579  002A84  6E2A               	movwf	?_inputHandler,c
 17580  002A86  0012               	return	
 17581  002A88                     i2l6350:
 17582                           
 17583                           ;UI.c: 463: return 1;
 17584  002A88  0E00               	movlw	0
 17585  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17586  002A8C  0E01               	movlw	1
 17587  002A8E  6E2A               	movwf	?_inputHandler,c
 17588                           
 17589                           ;UI.c: 464: }
 17590  002A90  0012               	return	
 17591  002A92                     i2l6356:
 17592  002A92  507D               	movf	_input,w,c	;volatile
 17593                           
 17594                           ; Switch size 1, requested type "space"
 17595                           ; Number of cases is 7, Range of values is 49 to 68
 17596                           ; switch strategies available:
 17597                           ; Name         Instructions Cycles
 17598                           ; simple_byte           22    12 (average)
 17599                           ;	Chosen strategy is simple_byte
 17600  002A94  0A31               	xorlw	49	; case 49
 17601  002A96  B4D8               	btfsc	status,2,c
 17602  002A98  D789               	goto	i2l6286
 17603  002A9A  0A03               	xorlw	3	; case 50
 17604  002A9C  B4D8               	btfsc	status,2,c
 17605  002A9E  D799               	goto	i2l6300
 17606  002AA0  0A01               	xorlw	1	; case 51
 17607  002AA2  B4D8               	btfsc	status,2,c
 17608  002AA4  D7BA               	goto	i2l6320
 17609  002AA6  0A72               	xorlw	114	; case 65
 17610  002AA8  B4D8               	btfsc	status,2,c
 17611  002AAA  D7CA               	goto	i2l6334
 17612  002AAC  0A03               	xorlw	3	; case 66
 17613  002AAE  B4D8               	btfsc	status,2,c
 17614  002AB0  D7D0               	goto	i2l6338
 17615  002AB2  0A01               	xorlw	1	; case 67
 17616  002AB4  B4D8               	btfsc	status,2,c
 17617  002AB6  D7D6               	goto	i2l6342
 17618  002AB8  0A07               	xorlw	7	; case 68
 17619  002ABA  B4D8               	btfsc	status,2,c
 17620  002ABC  D7DC               	goto	i2l6346
 17621  002ABE  D7E4               	goto	i2l6350
 17622  002AC0                     __end_of_inputHandler:
 17623                           	opt stack 0
 17624                           pclatu	equ	0xFFB
 17625                           pclath	equ	0xFFA
 17626                           tblptru	equ	0xFF8
 17627                           tblptrh	equ	0xFF7
 17628                           tblptrl	equ	0xFF6
 17629                           tablat	equ	0xFF5
 17630                           prodh	equ	0xFF4
 17631                           prodl	equ	0xFF3
 17632                           intcon	equ	0xFF2
 17633                           intcon2	equ	0xFF1
 17634                           intcon3	equ	0xFF0
 17635                           indf0	equ	0xFEF
 17636                           postinc0	equ	0xFEE
 17637                           fsr0h	equ	0xFEA
 17638                           fsr0l	equ	0xFE9
 17639                           wreg	equ	0xFE8
 17640                           postdec1	equ	0xFE5
 17641                           fsr1h	equ	0xFE2
 17642                           fsr1l	equ	0xFE1
 17643                           indf2	equ	0xFDF
 17644                           postinc2	equ	0xFDE
 17645                           postdec2	equ	0xFDD
 17646                           fsr2h	equ	0xFDA
 17647                           fsr2l	equ	0xFD9
 17648                           status	equ	0xFD8
 17649                           
 17650 ;; *************** function i2_change_state_to_menu_22 *****************
 17651 ;; Defined at:
 17652 ;;		line 498 in file "UI.c"
 17653 ;; Parameters:    Size  Location     Type
 17654 ;;		None
 17655 ;; Auto vars:     Size  Location     Type
 17656 ;;		None
 17657 ;; Return value:  Size  Location     Type
 17658 ;;                  1    wreg      void 
 17659 ;; Registers used:
 17660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17661 ;; Tracked objects:
 17662 ;;		On entry : 0/0
 17663 ;;		On exit  : 0/0
 17664 ;;		Unchanged: 0/0
 17665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17670 ;;Total ram usage:        0 bytes
 17671 ;; Hardware stack levels used:    1
 17672 ;; Hardware stack levels required when called:    3
 17673 ;; This function calls:
 17674 ;;		i2_lcdInst
 17675 ;;		i2_printf
 17676 ;; This function is called by:
 17677 ;;		_updateMenu
 17678 ;;		_inputHandler
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           	psect	text64
 17683  004380                     __ptext64:
 17684                           	opt stack 0
 17685  004380                     i2_change_state_to_menu_22:
 17686                           	opt stack 19
 17687                           
 17688                           ;UI.c: 499: cur_state = 22;
 17689                           
 17690                           ;incstack = 0
 17691  004380  0E00               	movlw	0
 17692  004382  0100               	movlb	0	; () banked
 17693  004384  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17694  004386  0E16               	movlw	22
 17695  004388  6FE0               	movwf	_cur_state& (0+255),b
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;UI.c: 501: lcdInst(0b10000000);;
 17699  00438A  0E80               	movlw	128
 17700  00438C  ECFA  F023         	call	i2_lcdInst
 17701                           
 17702                           ;UI.c: 502: printf("2. SORT        <");
 17703  004390  0EC4               	movlw	low STR_34
 17704  004392  6E0D               	movwf	i2printf@f,c
 17705  004394  0EFD               	movlw	high STR_34
 17706  004396  6E0E               	movwf	i2printf@f+1,c
 17707  004398  ECD4  F00A         	call	i2_printf	;wreg free
 17708                           
 17709                           ;UI.c: 503: lcdInst(0b11000000);;
 17710  00439C  0EC0               	movlw	192
 17711  00439E  ECFA  F023         	call	i2_lcdInst
 17712                           
 17713                           ;UI.c: 504: printf("3. LOGS         ");
 17714  0043A2  0E09               	movlw	low STR_36
 17715  0043A4  6E0D               	movwf	i2printf@f,c
 17716  0043A6  0EFD               	movlw	high STR_36
 17717  0043A8  6E0E               	movwf	i2printf@f+1,c
 17718  0043AA  ECD4  F00A         	call	i2_printf	;wreg free
 17719  0043AE  0012               	return		;funcret
 17720  0043B0                     __end_ofi2_change_state_to_menu_22:
 17721                           	opt stack 0
 17722                           pclatu	equ	0xFFB
 17723                           pclath	equ	0xFFA
 17724                           tblptru	equ	0xFF8
 17725                           tblptrh	equ	0xFF7
 17726                           tblptrl	equ	0xFF6
 17727                           tablat	equ	0xFF5
 17728                           prodh	equ	0xFF4
 17729                           prodl	equ	0xFF3
 17730                           intcon	equ	0xFF2
 17731                           intcon2	equ	0xFF1
 17732                           intcon3	equ	0xFF0
 17733                           indf0	equ	0xFEF
 17734                           postinc0	equ	0xFEE
 17735                           fsr0h	equ	0xFEA
 17736                           fsr0l	equ	0xFE9
 17737                           wreg	equ	0xFE8
 17738                           postdec1	equ	0xFE5
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           indf2	equ	0xFDF
 17742                           postinc2	equ	0xFDE
 17743                           postdec2	equ	0xFDD
 17744                           fsr2h	equ	0xFDA
 17745                           fsr2l	equ	0xFD9
 17746                           status	equ	0xFD8
 17747                           
 17748 ;; *************** function i2_change_state_to_menu_12 *****************
 17749 ;; Defined at:
 17750 ;;		line 490 in file "UI.c"
 17751 ;; Parameters:    Size  Location     Type
 17752 ;;		None
 17753 ;; Auto vars:     Size  Location     Type
 17754 ;;		None
 17755 ;; Return value:  Size  Location     Type
 17756 ;;                  1    wreg      void 
 17757 ;; Registers used:
 17758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17759 ;; Tracked objects:
 17760 ;;		On entry : 0/0
 17761 ;;		On exit  : 0/0
 17762 ;;		Unchanged: 0/0
 17763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;Total ram usage:        0 bytes
 17769 ;; Hardware stack levels used:    1
 17770 ;; Hardware stack levels required when called:    3
 17771 ;; This function calls:
 17772 ;;		i2_lcdInst
 17773 ;;		i2_printf
 17774 ;; This function is called by:
 17775 ;;		_updateMenu
 17776 ;;		_inputHandler
 17777 ;; This function uses a non-reentrant model
 17778 ;;
 17779                           
 17780                           	psect	text65
 17781  0043B0                     __ptext65:
 17782                           	opt stack 0
 17783  0043B0                     i2_change_state_to_menu_12:
 17784                           	opt stack 19
 17785                           
 17786                           ;UI.c: 491: cur_state = 12;
 17787                           
 17788                           ;incstack = 0
 17789  0043B0  0E00               	movlw	0
 17790  0043B2  0100               	movlb	0	; () banked
 17791  0043B4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17792  0043B6  0E0C               	movlw	12
 17793  0043B8  6FE0               	movwf	_cur_state& (0+255),b
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;UI.c: 493: lcdInst(0b10000000);;
 17797  0043BA  0E80               	movlw	128
 17798  0043BC  ECFA  F023         	call	i2_lcdInst
 17799                           
 17800                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17801  0043C0  0E2B               	movlw	low STR_33
 17802  0043C2  6E0D               	movwf	i2printf@f,c
 17803  0043C4  0EFD               	movlw	high STR_33
 17804  0043C6  6E0E               	movwf	i2printf@f+1,c
 17805  0043C8  ECD4  F00A         	call	i2_printf	;wreg free
 17806                           
 17807                           ;UI.c: 495: lcdInst(0b11000000);;
 17808  0043CC  0EC0               	movlw	192
 17809  0043CE  ECFA  F023         	call	i2_lcdInst
 17810                           
 17811                           ;UI.c: 496: printf("2. SORT        <");
 17812  0043D2  0EC4               	movlw	low STR_34
 17813  0043D4  6E0D               	movwf	i2printf@f,c
 17814  0043D6  0EFD               	movlw	high STR_34
 17815  0043D8  6E0E               	movwf	i2printf@f+1,c
 17816  0043DA  ECD4  F00A         	call	i2_printf	;wreg free
 17817  0043DE  0012               	return		;funcret
 17818  0043E0                     __end_ofi2_change_state_to_menu_12:
 17819                           	opt stack 0
 17820                           pclatu	equ	0xFFB
 17821                           pclath	equ	0xFFA
 17822                           tblptru	equ	0xFF8
 17823                           tblptrh	equ	0xFF7
 17824                           tblptrl	equ	0xFF6
 17825                           tablat	equ	0xFF5
 17826                           prodh	equ	0xFF4
 17827                           prodl	equ	0xFF3
 17828                           intcon	equ	0xFF2
 17829                           intcon2	equ	0xFF1
 17830                           intcon3	equ	0xFF0
 17831                           indf0	equ	0xFEF
 17832                           postinc0	equ	0xFEE
 17833                           fsr0h	equ	0xFEA
 17834                           fsr0l	equ	0xFE9
 17835                           wreg	equ	0xFE8
 17836                           postdec1	equ	0xFE5
 17837                           fsr1h	equ	0xFE2
 17838                           fsr1l	equ	0xFE1
 17839                           indf2	equ	0xFDF
 17840                           postinc2	equ	0xFDE
 17841                           postdec2	equ	0xFDD
 17842                           fsr2h	equ	0xFDA
 17843                           fsr2l	equ	0xFD9
 17844                           status	equ	0xFD8
 17845                           
 17846 ;; *************** function _change_state_to_menu_23 *****************
 17847 ;; Defined at:
 17848 ;;		line 506 in file "UI.c"
 17849 ;; Parameters:    Size  Location     Type
 17850 ;;		None
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;		None
 17853 ;; Return value:  Size  Location     Type
 17854 ;;                  1    wreg      void 
 17855 ;; Registers used:
 17856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17857 ;; Tracked objects:
 17858 ;;		On entry : 0/0
 17859 ;;		On exit  : 0/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;Total ram usage:        0 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    3
 17869 ;; This function calls:
 17870 ;;		i2_lcdInst
 17871 ;;		i2_printf
 17872 ;; This function is called by:
 17873 ;;		_updateMenu
 17874 ;;		_inputHandler
 17875 ;; This function uses a non-reentrant model
 17876 ;;
 17877                           
 17878                           	psect	text66
 17879  0043E0                     __ptext66:
 17880                           	opt stack 0
 17881  0043E0                     _change_state_to_menu_23:
 17882                           	opt stack 18
 17883                           
 17884                           ;UI.c: 507: cur_state = 23;
 17885                           
 17886                           ;incstack = 0
 17887  0043E0  0E00               	movlw	0
 17888  0043E2  0100               	movlb	0	; () banked
 17889  0043E4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17890  0043E6  0E17               	movlw	23
 17891  0043E8  6FE0               	movwf	_cur_state& (0+255),b
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;UI.c: 509: lcdInst(0b10000000);;
 17895  0043EA  0E80               	movlw	128
 17896  0043EC  ECFA  F023         	call	i2_lcdInst
 17897                           
 17898                           ;UI.c: 510: printf("2. SORT         ");
 17899  0043F0  0E1A               	movlw	low STR_32
 17900  0043F2  6E0D               	movwf	i2printf@f,c
 17901  0043F4  0EFD               	movlw	high STR_32
 17902  0043F6  6E0E               	movwf	i2printf@f+1,c
 17903  0043F8  ECD4  F00A         	call	i2_printf	;wreg free
 17904                           
 17905                           ;UI.c: 511: lcdInst(0b11000000);;
 17906  0043FC  0EC0               	movlw	192
 17907  0043FE  ECFA  F023         	call	i2_lcdInst
 17908                           
 17909                           ;UI.c: 512: printf("3. LOGS        <");
 17910  004402  0EB3               	movlw	low STR_38
 17911  004404  6E0D               	movwf	i2printf@f,c
 17912  004406  0EFD               	movlw	high STR_38
 17913  004408  6E0E               	movwf	i2printf@f+1,c
 17914  00440A  ECD4  F00A         	call	i2_printf	;wreg free
 17915  00440E  0012               	return		;funcret
 17916  004410                     __end_of_change_state_to_menu_23:
 17917                           	opt stack 0
 17918                           pclatu	equ	0xFFB
 17919                           pclath	equ	0xFFA
 17920                           tblptru	equ	0xFF8
 17921                           tblptrh	equ	0xFF7
 17922                           tblptrl	equ	0xFF6
 17923                           tablat	equ	0xFF5
 17924                           prodh	equ	0xFF4
 17925                           prodl	equ	0xFF3
 17926                           intcon	equ	0xFF2
 17927                           intcon2	equ	0xFF1
 17928                           intcon3	equ	0xFF0
 17929                           indf0	equ	0xFEF
 17930                           postinc0	equ	0xFEE
 17931                           fsr0h	equ	0xFEA
 17932                           fsr0l	equ	0xFE9
 17933                           wreg	equ	0xFE8
 17934                           postdec1	equ	0xFE5
 17935                           fsr1h	equ	0xFE2
 17936                           fsr1l	equ	0xFE1
 17937                           indf2	equ	0xFDF
 17938                           postinc2	equ	0xFDE
 17939                           postdec2	equ	0xFDD
 17940                           fsr2h	equ	0xFDA
 17941                           fsr2l	equ	0xFD9
 17942                           status	equ	0xFD8
 17943                           
 17944 ;; *************** function _change_state_to_menu_11 *****************
 17945 ;; Defined at:
 17946 ;;		line 482 in file "UI.c"
 17947 ;; Parameters:    Size  Location     Type
 17948 ;;		None
 17949 ;; Auto vars:     Size  Location     Type
 17950 ;;		None
 17951 ;; Return value:  Size  Location     Type
 17952 ;;                  1    wreg      void 
 17953 ;; Registers used:
 17954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17955 ;; Tracked objects:
 17956 ;;		On entry : 0/0
 17957 ;;		On exit  : 0/0
 17958 ;;		Unchanged: 0/0
 17959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17964 ;;Total ram usage:        0 bytes
 17965 ;; Hardware stack levels used:    1
 17966 ;; Hardware stack levels required when called:    3
 17967 ;; This function calls:
 17968 ;;		i2_lcdInst
 17969 ;;		i2_printf
 17970 ;; This function is called by:
 17971 ;;		_updateMenu
 17972 ;;		_inputHandler
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           	psect	text67
 17977  004410                     __ptext67:
 17978                           	opt stack 0
 17979  004410                     _change_state_to_menu_11:
 17980                           	opt stack 18
 17981                           
 17982                           ;UI.c: 483: cur_state = 11;
 17983                           
 17984                           ;incstack = 0
 17985  004410  0E00               	movlw	0
 17986  004412  0100               	movlb	0	; () banked
 17987  004414  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17988  004416  0E0B               	movlw	11
 17989  004418  6FE0               	movwf	_cur_state& (0+255),b
 17990                           
 17991                           ; BSR set to: 0
 17992                           ;UI.c: 485: lcdInst(0b10000000);;
 17993  00441A  0E80               	movlw	128
 17994  00441C  ECFA  F023         	call	i2_lcdInst
 17995                           
 17996                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17997  004420  0ED5               	movlw	low STR_31
 17998  004422  6E0D               	movwf	i2printf@f,c
 17999  004424  0EFD               	movlw	high STR_31
 18000  004426  6E0E               	movwf	i2printf@f+1,c
 18001  004428  ECD4  F00A         	call	i2_printf	;wreg free
 18002                           
 18003                           ;UI.c: 487: lcdInst(0b11000000);;
 18004  00442C  0EC0               	movlw	192
 18005  00442E  ECFA  F023         	call	i2_lcdInst
 18006                           
 18007                           ;UI.c: 488: printf("2. SORT         ");
 18008  004432  0E1A               	movlw	low STR_32
 18009  004434  6E0D               	movwf	i2printf@f,c
 18010  004436  0EFD               	movlw	high STR_32
 18011  004438  6E0E               	movwf	i2printf@f+1,c
 18012  00443A  ECD4  F00A         	call	i2_printf	;wreg free
 18013  00443E  0012               	return		;funcret
 18014  004440                     __end_of_change_state_to_menu_11:
 18015                           	opt stack 0
 18016                           pclatu	equ	0xFFB
 18017                           pclath	equ	0xFFA
 18018                           tblptru	equ	0xFF8
 18019                           tblptrh	equ	0xFF7
 18020                           tblptrl	equ	0xFF6
 18021                           tablat	equ	0xFF5
 18022                           prodh	equ	0xFF4
 18023                           prodl	equ	0xFF3
 18024                           intcon	equ	0xFF2
 18025                           intcon2	equ	0xFF1
 18026                           intcon3	equ	0xFF0
 18027                           indf0	equ	0xFEF
 18028                           postinc0	equ	0xFEE
 18029                           fsr0h	equ	0xFEA
 18030                           fsr0l	equ	0xFE9
 18031                           wreg	equ	0xFE8
 18032                           postdec1	equ	0xFE5
 18033                           fsr1h	equ	0xFE2
 18034                           fsr1l	equ	0xFE1
 18035                           indf2	equ	0xFDF
 18036                           postinc2	equ	0xFDE
 18037                           postdec2	equ	0xFDD
 18038                           fsr2h	equ	0xFDA
 18039                           fsr2l	equ	0xFD9
 18040                           status	equ	0xFD8
 18041                           
 18042 ;; *************** function _change_state_to_logs_34 *****************
 18043 ;; Defined at:
 18044 ;;		line 549 in file "UI.c"
 18045 ;; Parameters:    Size  Location     Type
 18046 ;;		None
 18047 ;; Auto vars:     Size  Location     Type
 18048 ;;		None
 18049 ;; Return value:  Size  Location     Type
 18050 ;;                  1    wreg      void 
 18051 ;; Registers used:
 18052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18053 ;; Tracked objects:
 18054 ;;		On entry : 0/0
 18055 ;;		On exit  : 0/0
 18056 ;;		Unchanged: 0/0
 18057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18062 ;;Total ram usage:        0 bytes
 18063 ;; Hardware stack levels used:    1
 18064 ;; Hardware stack levels required when called:    3
 18065 ;; This function calls:
 18066 ;;		i2_lcdInst
 18067 ;;		i2_printf
 18068 ;; This function is called by:
 18069 ;;		_updateMenu
 18070 ;;		_inputHandler
 18071 ;; This function uses a non-reentrant model
 18072 ;;
 18073                           
 18074                           	psect	text68
 18075  004440                     __ptext68:
 18076                           	opt stack 0
 18077  004440                     _change_state_to_logs_34:
 18078                           	opt stack 18
 18079                           
 18080                           ;UI.c: 550: cur_state = 1034;
 18081                           
 18082                           ;incstack = 0
 18083  004440  0E04               	movlw	4
 18084  004442  0100               	movlb	0	; () banked
 18085  004444  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18086  004446  0E0A               	movlw	10
 18087  004448  6FE0               	movwf	_cur_state& (0+255),b
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;UI.c: 551: lcdInst(0b10000000);;
 18091  00444A  0E80               	movlw	128
 18092  00444C  ECFA  F023         	call	i2_lcdInst
 18093                           
 18094                           ;UI.c: 552: printf("LOG 3           ");
 18095  004450  0EE7               	movlw	low STR_44
 18096  004452  6E0D               	movwf	i2printf@f,c
 18097  004454  0EFC               	movlw	high STR_44
 18098  004456  6E0E               	movwf	i2printf@f+1,c
 18099  004458  ECD4  F00A         	call	i2_printf	;wreg free
 18100                           
 18101                           ;UI.c: 553: lcdInst(0b11000000);;
 18102  00445C  0EC0               	movlw	192
 18103  00445E  ECFA  F023         	call	i2_lcdInst
 18104                           
 18105                           ;UI.c: 554: printf("LOG 4          <");
 18106  004462  0EA2               	movlw	low STR_50
 18107  004464  6E0D               	movwf	i2printf@f,c
 18108  004466  0EFD               	movlw	high STR_50
 18109  004468  6E0E               	movwf	i2printf@f+1,c
 18110  00446A  ECD4  F00A         	call	i2_printf	;wreg free
 18111  00446E  0012               	return		;funcret
 18112  004470                     __end_of_change_state_to_logs_34:
 18113                           	opt stack 0
 18114                           pclatu	equ	0xFFB
 18115                           pclath	equ	0xFFA
 18116                           tblptru	equ	0xFF8
 18117                           tblptrh	equ	0xFF7
 18118                           tblptrl	equ	0xFF6
 18119                           tablat	equ	0xFF5
 18120                           prodh	equ	0xFF4
 18121                           prodl	equ	0xFF3
 18122                           intcon	equ	0xFF2
 18123                           intcon2	equ	0xFF1
 18124                           intcon3	equ	0xFF0
 18125                           indf0	equ	0xFEF
 18126                           postinc0	equ	0xFEE
 18127                           fsr0h	equ	0xFEA
 18128                           fsr0l	equ	0xFE9
 18129                           wreg	equ	0xFE8
 18130                           postdec1	equ	0xFE5
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           fsr2h	equ	0xFDA
 18137                           fsr2l	equ	0xFD9
 18138                           status	equ	0xFD8
 18139                           
 18140 ;; *************** function _change_state_to_logs_33 *****************
 18141 ;; Defined at:
 18142 ;;		line 542 in file "UI.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;		None
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;		None
 18147 ;; Return value:  Size  Location     Type
 18148 ;;                  1    wreg      void 
 18149 ;; Registers used:
 18150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;Total ram usage:        0 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    3
 18163 ;; This function calls:
 18164 ;;		i2_lcdInst
 18165 ;;		i2_printf
 18166 ;; This function is called by:
 18167 ;;		_updateMenu
 18168 ;;		_inputHandler
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           	psect	text69
 18173  004470                     __ptext69:
 18174                           	opt stack 0
 18175  004470                     _change_state_to_logs_33:
 18176                           	opt stack 18
 18177                           
 18178                           ;UI.c: 543: cur_state = 1033;
 18179                           
 18180                           ;incstack = 0
 18181  004470  0E04               	movlw	4
 18182  004472  0100               	movlb	0	; () banked
 18183  004474  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18184  004476  0E09               	movlw	9
 18185  004478  6FE0               	movwf	_cur_state& (0+255),b
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;UI.c: 544: lcdInst(0b10000000);;
 18189  00447A  0E80               	movlw	128
 18190  00447C  ECFA  F023         	call	i2_lcdInst
 18191                           
 18192                           ;UI.c: 545: printf("LOG 3          <");
 18193  004480  0E91               	movlw	low STR_46
 18194  004482  6E0D               	movwf	i2printf@f,c
 18195  004484  0EFD               	movlw	high STR_46
 18196  004486  6E0E               	movwf	i2printf@f+1,c
 18197  004488  ECD4  F00A         	call	i2_printf	;wreg free
 18198                           
 18199                           ;UI.c: 546: lcdInst(0b11000000);;
 18200  00448C  0EC0               	movlw	192
 18201  00448E  ECFA  F023         	call	i2_lcdInst
 18202                           
 18203                           ;UI.c: 547: printf("LOG 4           ");
 18204  004492  0EF8               	movlw	low STR_48
 18205  004494  6E0D               	movwf	i2printf@f,c
 18206  004496  0EFC               	movlw	high STR_48
 18207  004498  6E0E               	movwf	i2printf@f+1,c
 18208  00449A  ECD4  F00A         	call	i2_printf	;wreg free
 18209  00449E  0012               	return		;funcret
 18210  0044A0                     __end_of_change_state_to_logs_33:
 18211                           	opt stack 0
 18212                           pclatu	equ	0xFFB
 18213                           pclath	equ	0xFFA
 18214                           tblptru	equ	0xFF8
 18215                           tblptrh	equ	0xFF7
 18216                           tblptrl	equ	0xFF6
 18217                           tablat	equ	0xFF5
 18218                           prodh	equ	0xFF4
 18219                           prodl	equ	0xFF3
 18220                           intcon	equ	0xFF2
 18221                           intcon2	equ	0xFF1
 18222                           intcon3	equ	0xFF0
 18223                           indf0	equ	0xFEF
 18224                           postinc0	equ	0xFEE
 18225                           fsr0h	equ	0xFEA
 18226                           fsr0l	equ	0xFE9
 18227                           wreg	equ	0xFE8
 18228                           postdec1	equ	0xFE5
 18229                           fsr1h	equ	0xFE2
 18230                           fsr1l	equ	0xFE1
 18231                           indf2	equ	0xFDF
 18232                           postinc2	equ	0xFDE
 18233                           postdec2	equ	0xFDD
 18234                           fsr2h	equ	0xFDA
 18235                           fsr2l	equ	0xFD9
 18236                           status	equ	0xFD8
 18237                           
 18238 ;; *************** function _change_state_to_logs_23 *****************
 18239 ;; Defined at:
 18240 ;;		line 535 in file "UI.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;		None
 18243 ;; Auto vars:     Size  Location     Type
 18244 ;;		None
 18245 ;; Return value:  Size  Location     Type
 18246 ;;                  1    wreg      void 
 18247 ;; Registers used:
 18248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18249 ;; Tracked objects:
 18250 ;;		On entry : 0/0
 18251 ;;		On exit  : 0/0
 18252 ;;		Unchanged: 0/0
 18253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;Total ram usage:        0 bytes
 18259 ;; Hardware stack levels used:    1
 18260 ;; Hardware stack levels required when called:    3
 18261 ;; This function calls:
 18262 ;;		i2_lcdInst
 18263 ;;		i2_printf
 18264 ;; This function is called by:
 18265 ;;		_updateMenu
 18266 ;;		_inputHandler
 18267 ;; This function uses a non-reentrant model
 18268 ;;
 18269                           
 18270                           	psect	text70
 18271  00458C                     __ptext70:
 18272                           	opt stack 0
 18273  00458C                     _change_state_to_logs_23:
 18274                           	opt stack 18
 18275                           
 18276                           ;UI.c: 536: cur_state = 1023;
 18277                           
 18278                           ;incstack = 0
 18279  00458C  0E03               	movlw	3
 18280  00458E  0100               	movlb	0	; () banked
 18281  004590  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18282  004592  69E0               	setf	_cur_state& (0+255),b
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;UI.c: 537: lcdInst(0b10000000);;
 18286  004594  0E80               	movlw	128
 18287  004596  ECFA  F023         	call	i2_lcdInst
 18288                           
 18289                           ;UI.c: 538: printf("LOG 2           ");
 18290  00459A  0ED6               	movlw	low STR_40
 18291  00459C  6E0D               	movwf	i2printf@f,c
 18292  00459E  0EFC               	movlw	high STR_40
 18293  0045A0  6E0E               	movwf	i2printf@f+1,c
 18294  0045A2  ECD4  F00A         	call	i2_printf	;wreg free
 18295                           
 18296                           ;UI.c: 539: lcdInst(0b11000000);;
 18297  0045A6  0EC0               	movlw	192
 18298  0045A8  ECFA  F023         	call	i2_lcdInst
 18299                           
 18300                           ;UI.c: 540: printf("LOG 3          <");
 18301  0045AC  0E91               	movlw	low STR_46
 18302  0045AE  6E0D               	movwf	i2printf@f,c
 18303  0045B0  0EFD               	movlw	high STR_46
 18304  0045B2  6E0E               	movwf	i2printf@f+1,c
 18305  0045B4  ECD4  F00A         	call	i2_printf	;wreg free
 18306  0045B8  0012               	return		;funcret
 18307  0045BA                     __end_of_change_state_to_logs_23:
 18308                           	opt stack 0
 18309                           pclatu	equ	0xFFB
 18310                           pclath	equ	0xFFA
 18311                           tblptru	equ	0xFF8
 18312                           tblptrh	equ	0xFF7
 18313                           tblptrl	equ	0xFF6
 18314                           tablat	equ	0xFF5
 18315                           prodh	equ	0xFF4
 18316                           prodl	equ	0xFF3
 18317                           intcon	equ	0xFF2
 18318                           intcon2	equ	0xFF1
 18319                           intcon3	equ	0xFF0
 18320                           indf0	equ	0xFEF
 18321                           postinc0	equ	0xFEE
 18322                           fsr0h	equ	0xFEA
 18323                           fsr0l	equ	0xFE9
 18324                           wreg	equ	0xFE8
 18325                           postdec1	equ	0xFE5
 18326                           fsr1h	equ	0xFE2
 18327                           fsr1l	equ	0xFE1
 18328                           indf2	equ	0xFDF
 18329                           postinc2	equ	0xFDE
 18330                           postdec2	equ	0xFDD
 18331                           fsr2h	equ	0xFDA
 18332                           fsr2l	equ	0xFD9
 18333                           status	equ	0xFD8
 18334                           
 18335 ;; *************** function _change_state_to_logs_22 *****************
 18336 ;; Defined at:
 18337 ;;		line 528 in file "UI.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;		None
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;		None
 18342 ;; Return value:  Size  Location     Type
 18343 ;;                  1    wreg      void 
 18344 ;; Registers used:
 18345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;Total ram usage:        0 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    3
 18358 ;; This function calls:
 18359 ;;		i2_lcdInst
 18360 ;;		i2_printf
 18361 ;; This function is called by:
 18362 ;;		_updateMenu
 18363 ;;		_inputHandler
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           	psect	text71
 18368  0044A0                     __ptext71:
 18369                           	opt stack 0
 18370  0044A0                     _change_state_to_logs_22:
 18371                           	opt stack 18
 18372                           
 18373                           ;UI.c: 529: cur_state = 1022;
 18374                           
 18375                           ;incstack = 0
 18376  0044A0  0E03               	movlw	3
 18377  0044A2  0100               	movlb	0	; () banked
 18378  0044A4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18379  0044A6  0EFE               	movlw	254
 18380  0044A8  6FE0               	movwf	_cur_state& (0+255),b
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;UI.c: 530: lcdInst(0b10000000);;
 18384  0044AA  0E80               	movlw	128
 18385  0044AC  ECFA  F023         	call	i2_lcdInst
 18386                           
 18387                           ;UI.c: 531: printf("LOG 2          <");
 18388  0044B0  0E80               	movlw	low STR_42
 18389  0044B2  6E0D               	movwf	i2printf@f,c
 18390  0044B4  0EFD               	movlw	high STR_42
 18391  0044B6  6E0E               	movwf	i2printf@f+1,c
 18392  0044B8  ECD4  F00A         	call	i2_printf	;wreg free
 18393                           
 18394                           ;UI.c: 532: lcdInst(0b11000000);;
 18395  0044BC  0EC0               	movlw	192
 18396  0044BE  ECFA  F023         	call	i2_lcdInst
 18397                           
 18398                           ;UI.c: 533: printf("LOG 3           ");
 18399  0044C2  0EE7               	movlw	low STR_44
 18400  0044C4  6E0D               	movwf	i2printf@f,c
 18401  0044C6  0EFC               	movlw	high STR_44
 18402  0044C8  6E0E               	movwf	i2printf@f+1,c
 18403  0044CA  ECD4  F00A         	call	i2_printf	;wreg free
 18404  0044CE  0012               	return		;funcret
 18405  0044D0                     __end_of_change_state_to_logs_22:
 18406                           	opt stack 0
 18407                           pclatu	equ	0xFFB
 18408                           pclath	equ	0xFFA
 18409                           tblptru	equ	0xFF8
 18410                           tblptrh	equ	0xFF7
 18411                           tblptrl	equ	0xFF6
 18412                           tablat	equ	0xFF5
 18413                           prodh	equ	0xFF4
 18414                           prodl	equ	0xFF3
 18415                           intcon	equ	0xFF2
 18416                           intcon2	equ	0xFF1
 18417                           intcon3	equ	0xFF0
 18418                           indf0	equ	0xFEF
 18419                           postinc0	equ	0xFEE
 18420                           fsr0h	equ	0xFEA
 18421                           fsr0l	equ	0xFE9
 18422                           wreg	equ	0xFE8
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           fsr2h	equ	0xFDA
 18430                           fsr2l	equ	0xFD9
 18431                           status	equ	0xFD8
 18432                           
 18433 ;; *************** function _change_state_to_logs_12 *****************
 18434 ;; Defined at:
 18435 ;;		line 521 in file "UI.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;		None
 18438 ;; Auto vars:     Size  Location     Type
 18439 ;;		None
 18440 ;; Return value:  Size  Location     Type
 18441 ;;                  1    wreg      void 
 18442 ;; Registers used:
 18443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18444 ;; Tracked objects:
 18445 ;;		On entry : 0/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;Total ram usage:        0 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; Hardware stack levels required when called:    3
 18456 ;; This function calls:
 18457 ;;		i2_lcdInst
 18458 ;;		i2_printf
 18459 ;; This function is called by:
 18460 ;;		_updateMenu
 18461 ;;		_inputHandler
 18462 ;; This function uses a non-reentrant model
 18463 ;;
 18464                           
 18465                           	psect	text72
 18466  0044D0                     __ptext72:
 18467                           	opt stack 0
 18468  0044D0                     _change_state_to_logs_12:
 18469                           	opt stack 18
 18470                           
 18471                           ;UI.c: 522: cur_state = 1012;
 18472                           
 18473                           ;incstack = 0
 18474  0044D0  0E03               	movlw	3
 18475  0044D2  0100               	movlb	0	; () banked
 18476  0044D4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18477  0044D6  0EF4               	movlw	244
 18478  0044D8  6FE0               	movwf	_cur_state& (0+255),b
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;UI.c: 523: lcdInst(0b10000000);;
 18482  0044DA  0E80               	movlw	128
 18483  0044DC  ECFA  F023         	call	i2_lcdInst
 18484                           
 18485                           ;UI.c: 524: printf("LOG 1           ");
 18486  0044E0  0EC5               	movlw	low STR_41
 18487  0044E2  6E0D               	movwf	i2printf@f,c
 18488  0044E4  0EFC               	movlw	high STR_41
 18489  0044E6  6E0E               	movwf	i2printf@f+1,c
 18490  0044E8  ECD4  F00A         	call	i2_printf	;wreg free
 18491                           
 18492                           ;UI.c: 525: lcdInst(0b11000000);;
 18493  0044EC  0EC0               	movlw	192
 18494  0044EE  ECFA  F023         	call	i2_lcdInst
 18495                           
 18496                           ;UI.c: 526: printf("LOG 2          <");
 18497  0044F2  0E80               	movlw	low STR_42
 18498  0044F4  6E0D               	movwf	i2printf@f,c
 18499  0044F6  0EFD               	movlw	high STR_42
 18500  0044F8  6E0E               	movwf	i2printf@f+1,c
 18501  0044FA  ECD4  F00A         	call	i2_printf	;wreg free
 18502  0044FE  0012               	return		;funcret
 18503  004500                     __end_of_change_state_to_logs_12:
 18504                           	opt stack 0
 18505                           pclatu	equ	0xFFB
 18506                           pclath	equ	0xFFA
 18507                           tblptru	equ	0xFF8
 18508                           tblptrh	equ	0xFF7
 18509                           tblptrl	equ	0xFF6
 18510                           tablat	equ	0xFF5
 18511                           prodh	equ	0xFF4
 18512                           prodl	equ	0xFF3
 18513                           intcon	equ	0xFF2
 18514                           intcon2	equ	0xFF1
 18515                           intcon3	equ	0xFF0
 18516                           indf0	equ	0xFEF
 18517                           postinc0	equ	0xFEE
 18518                           fsr0h	equ	0xFEA
 18519                           fsr0l	equ	0xFE9
 18520                           wreg	equ	0xFE8
 18521                           postdec1	equ	0xFE5
 18522                           fsr1h	equ	0xFE2
 18523                           fsr1l	equ	0xFE1
 18524                           indf2	equ	0xFDF
 18525                           postinc2	equ	0xFDE
 18526                           postdec2	equ	0xFDD
 18527                           fsr2h	equ	0xFDA
 18528                           fsr2l	equ	0xFD9
 18529                           status	equ	0xFD8
 18530                           
 18531 ;; *************** function _change_state_to_logs_11 *****************
 18532 ;; Defined at:
 18533 ;;		line 514 in file "UI.c"
 18534 ;; Parameters:    Size  Location     Type
 18535 ;;		None
 18536 ;; Auto vars:     Size  Location     Type
 18537 ;;		None
 18538 ;; Return value:  Size  Location     Type
 18539 ;;                  1    wreg      void 
 18540 ;; Registers used:
 18541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;Total ram usage:        0 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; Hardware stack levels required when called:    3
 18554 ;; This function calls:
 18555 ;;		i2_lcdInst
 18556 ;;		i2_printf
 18557 ;; This function is called by:
 18558 ;;		_updateMenu
 18559 ;;		_inputHandler
 18560 ;; This function uses a non-reentrant model
 18561 ;;
 18562                           
 18563                           	psect	text73
 18564  004500                     __ptext73:
 18565                           	opt stack 0
 18566  004500                     _change_state_to_logs_11:
 18567                           	opt stack 18
 18568                           
 18569                           ;UI.c: 515: cur_state = 1011;
 18570                           
 18571                           ;incstack = 0
 18572  004500  0E03               	movlw	3
 18573  004502  0100               	movlb	0	; () banked
 18574  004504  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18575  004506  0EF3               	movlw	243
 18576  004508  6FE0               	movwf	_cur_state& (0+255),b
 18577                           
 18578                           ; BSR set to: 0
 18579                           ;UI.c: 516: lcdInst(0b10000000);;
 18580  00450A  0E80               	movlw	128
 18581  00450C  ECFA  F023         	call	i2_lcdInst
 18582                           
 18583                           ;UI.c: 517: printf("LOG 1          <");
 18584  004510  0E6F               	movlw	low STR_39
 18585  004512  6E0D               	movwf	i2printf@f,c
 18586  004514  0EFD               	movlw	high STR_39
 18587  004516  6E0E               	movwf	i2printf@f+1,c
 18588  004518  ECD4  F00A         	call	i2_printf	;wreg free
 18589                           
 18590                           ;UI.c: 518: lcdInst(0b11000000);;
 18591  00451C  0EC0               	movlw	192
 18592  00451E  ECFA  F023         	call	i2_lcdInst
 18593                           
 18594                           ;UI.c: 519: printf("LOG 2           ");
 18595  004522  0ED6               	movlw	low STR_40
 18596  004524  6E0D               	movwf	i2printf@f,c
 18597  004526  0EFC               	movlw	high STR_40
 18598  004528  6E0E               	movwf	i2printf@f+1,c
 18599  00452A  ECD4  F00A         	call	i2_printf	;wreg free
 18600  00452E  0012               	return		;funcret
 18601  004530                     __end_of_change_state_to_logs_11:
 18602                           	opt stack 0
 18603                           pclatu	equ	0xFFB
 18604                           pclath	equ	0xFFA
 18605                           tblptru	equ	0xFF8
 18606                           tblptrh	equ	0xFF7
 18607                           tblptrl	equ	0xFF6
 18608                           tablat	equ	0xFF5
 18609                           prodh	equ	0xFF4
 18610                           prodl	equ	0xFF3
 18611                           intcon	equ	0xFF2
 18612                           intcon2	equ	0xFF1
 18613                           intcon3	equ	0xFF0
 18614                           indf0	equ	0xFEF
 18615                           postinc0	equ	0xFEE
 18616                           fsr0h	equ	0xFEA
 18617                           fsr0l	equ	0xFE9
 18618                           wreg	equ	0xFE8
 18619                           postdec1	equ	0xFE5
 18620                           fsr1h	equ	0xFE2
 18621                           fsr1l	equ	0xFE1
 18622                           indf2	equ	0xFDF
 18623                           postinc2	equ	0xFDE
 18624                           postdec2	equ	0xFDD
 18625                           fsr2h	equ	0xFDA
 18626                           fsr2l	equ	0xFD9
 18627                           status	equ	0xFD8
 18628                           
 18629 ;; *************** function _dispLogs *****************
 18630 ;; Defined at:
 18631 ;;		line 467 in file "UI.c"
 18632 ;; Parameters:    Size  Location     Type
 18633 ;;  myLog           2   17[COMRAM] int 
 18634 ;; Auto vars:     Size  Location     Type
 18635 ;;		None
 18636 ;; Return value:  Size  Location     Type
 18637 ;;                  1    wreg      void 
 18638 ;; Registers used:
 18639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18640 ;; Tracked objects:
 18641 ;;		On entry : 0/0
 18642 ;;		On exit  : 0/0
 18643 ;;		Unchanged: 0/0
 18644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18649 ;;Total ram usage:        2 bytes
 18650 ;; Hardware stack levels used:    1
 18651 ;; Hardware stack levels required when called:    2
 18652 ;; This function calls:
 18653 ;;		_retrieveLog
 18654 ;; This function is called by:
 18655 ;;		_updateMenu
 18656 ;; This function uses a non-reentrant model
 18657 ;;
 18658                           
 18659                           	psect	text74
 18660  0046D8                     __ptext74:
 18661                           	opt stack 0
 18662  0046D8                     _dispLogs:
 18663                           	opt stack 20
 18664                           
 18665                           ;UI.c: 468: logstate = 1;
 18666                           
 18667                           ;incstack = 0
 18668  0046D8  0E00               	movlw	0
 18669  0046DA  0100               	movlb	0	; () banked
 18670  0046DC  6FF7               	movwf	(_logstate+1)& (0+255),b
 18671  0046DE  0E01               	movlw	1
 18672  0046E0  6FF6               	movwf	_logstate& (0+255),b
 18673                           
 18674                           ; BSR set to: 0
 18675                           ;UI.c: 469: log = myLog;
 18676  0046E2  C012  F0E6         	movff	dispLogs@myLog,_log
 18677  0046E6  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18678                           
 18679                           ; BSR set to: 0
 18680                           ;UI.c: 470: retrieveLog(myLog - 1);
 18681  0046EA  0EFF               	movlw	255
 18682  0046EC  2412               	addwf	dispLogs@myLog,w,c
 18683  0046EE  6E07               	movwf	retrieveLog@logNum,c
 18684  0046F0  0EFF               	movlw	255
 18685  0046F2  2013               	addwfc	dispLogs@myLog+1,w,c
 18686  0046F4  6E08               	movwf	retrieveLog@logNum+1,c
 18687  0046F6  ECE2  F018         	call	_retrieveLog	;wreg free
 18688  0046FA  0012               	return		;funcret
 18689  0046FC                     __end_of_dispLogs:
 18690                           	opt stack 0
 18691                           pclatu	equ	0xFFB
 18692                           pclath	equ	0xFFA
 18693                           tblptru	equ	0xFF8
 18694                           tblptrh	equ	0xFF7
 18695                           tblptrl	equ	0xFF6
 18696                           tablat	equ	0xFF5
 18697                           prodh	equ	0xFF4
 18698                           prodl	equ	0xFF3
 18699                           intcon	equ	0xFF2
 18700                           intcon2	equ	0xFF1
 18701                           intcon3	equ	0xFF0
 18702                           indf0	equ	0xFEF
 18703                           postinc0	equ	0xFEE
 18704                           fsr0h	equ	0xFEA
 18705                           fsr0l	equ	0xFE9
 18706                           wreg	equ	0xFE8
 18707                           postdec1	equ	0xFE5
 18708                           fsr1h	equ	0xFE2
 18709                           fsr1l	equ	0xFE1
 18710                           indf2	equ	0xFDF
 18711                           postinc2	equ	0xFDE
 18712                           postdec2	equ	0xFDD
 18713                           fsr2h	equ	0xFDA
 18714                           fsr2l	equ	0xFD9
 18715                           status	equ	0xFD8
 18716                           
 18717 ;; *************** function _retrieveLog *****************
 18718 ;; Defined at:
 18719 ;;		line 134 in file "EEPROM.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  logNum          2    6[COMRAM] int 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;  i               2   13[COMRAM] int 
 18724 ;;  addr            2   15[COMRAM] unsigned short 
 18725 ;;  byte3           1   12[COMRAM] unsigned char 
 18726 ;;  byte2           1   11[COMRAM] unsigned char 
 18727 ;;  byte1           1   10[COMRAM] unsigned char 
 18728 ;; Return value:  Size  Location     Type
 18729 ;;                  1    wreg      void 
 18730 ;; Registers used:
 18731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18732 ;; Tracked objects:
 18733 ;;		On entry : 0/0
 18734 ;;		On exit  : 0/0
 18735 ;;		Unchanged: 0/0
 18736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18738 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18740 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18741 ;;Total ram usage:       11 bytes
 18742 ;; Hardware stack levels used:    1
 18743 ;; Hardware stack levels required when called:    1
 18744 ;; This function calls:
 18745 ;;		i2_EEPROM_read
 18746 ;;		i2___wmul
 18747 ;; This function is called by:
 18748 ;;		_dispLogs
 18749 ;; This function uses a non-reentrant model
 18750 ;;
 18751                           
 18752                           	psect	text75
 18753  0031C4                     __ptext75:
 18754                           	opt stack 0
 18755  0031C4                     _retrieveLog:
 18756                           	opt stack 20
 18757                           
 18758                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18759                           
 18760                           ;incstack = 0
 18761  0031C4  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18762  0031C8  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18763  0031CC  0E00               	movlw	0
 18764  0031CE  6E04               	movwf	i2___wmul@multiplicand+1,c
 18765  0031D0  0E0B               	movlw	11
 18766  0031D2  6E03               	movwf	i2___wmul@multiplicand,c
 18767  0031D4  EC46  F023         	call	i2___wmul	;wreg free
 18768  0031D8  0E01               	movlw	1
 18769  0031DA  2401               	addwf	?i2___wmul,w,c
 18770  0031DC  6E10               	movwf	retrieveLog@addr,c
 18771  0031DE  0E00               	movlw	0
 18772  0031E0  2002               	addwfc	?i2___wmul+1,w,c
 18773  0031E2  6E11               	movwf	retrieveLog@addr+1,c
 18774                           
 18775                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18776  0031E4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18777  0031E8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18778  0031EC  ECC6  F023         	call	i2_EEPROM_read	;wreg free
 18779  0031F0  6E0B               	movwf	retrieveLog@byte1,c
 18780                           
 18781                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18782  0031F2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18783  0031F6  0E80               	movlw	128
 18784  0031F8  1609               	andwf	??_retrieveLog,f,c
 18785  0031FA  5009               	movf	??_retrieveLog,w,c
 18786  0031FC  0100               	movlb	0	; () banked
 18787  0031FE  6FE8               	movwf	_log_completion& (0+255),b
 18788  003200  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18792  003202  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18793  003206  0E0F               	movlw	15
 18794  003208  1609               	andwf	??_retrieveLog,f,c
 18795  00320A  5009               	movf	??_retrieveLog,w,c
 18796  00320C  0100               	movlb	0	; () banked
 18797  00320E  6FF2               	movwf	_log_count_total& (0+255),b
 18798  003210  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18799                           
 18800                           ; BSR set to: 0
 18801                           ;EEPROM.c: 146: addr++;
 18802  003212  4A10               	infsnz	retrieveLog@addr,f,c
 18803  003214  2A11               	incf	retrieveLog@addr+1,f,c
 18804                           
 18805                           ; BSR set to: 0
 18806                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18807  003216  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18808  00321A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18809  00321E  ECC6  F023         	call	i2_EEPROM_read	;wreg free
 18810  003222  6E0C               	movwf	retrieveLog@byte2,c
 18811                           
 18812                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 18813  003224  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18814  003228  3A09               	swapf	??_retrieveLog,f,c
 18815  00322A  0E0F               	movlw	15
 18816  00322C  1609               	andwf	??_retrieveLog,f,c
 18817  00322E  0E0F               	movlw	15
 18818  003230  1609               	andwf	??_retrieveLog,f,c
 18819  003232  5009               	movf	??_retrieveLog,w,c
 18820  003234  0100               	movlb	0	; () banked
 18821  003236  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18822  003238  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18826  00323A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18827  00323E  0E0F               	movlw	15
 18828  003240  1609               	andwf	??_retrieveLog,f,c
 18829  003242  5009               	movf	??_retrieveLog,w,c
 18830  003244  0100               	movlb	0	; () banked
 18831  003246  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18832  003248  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18833                           
 18834                           ; BSR set to: 0
 18835                           ;EEPROM.c: 152: addr++;
 18836  00324A  4A10               	infsnz	retrieveLog@addr,f,c
 18837  00324C  2A11               	incf	retrieveLog@addr+1,f,c
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18841  00324E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18842  003252  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18843  003256  ECC6  F023         	call	i2_EEPROM_read	;wreg free
 18844  00325A  6E0D               	movwf	retrieveLog@byte3,c
 18845                           
 18846                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 18847  00325C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18848  003260  3A09               	swapf	??_retrieveLog,f,c
 18849  003262  0E0F               	movlw	15
 18850  003264  1609               	andwf	??_retrieveLog,f,c
 18851  003266  0E0F               	movlw	15
 18852  003268  1609               	andwf	??_retrieveLog,f,c
 18853  00326A  5009               	movf	??_retrieveLog,w,c
 18854  00326C  0100               	movlb	0	; () banked
 18855  00326E  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18856  003270  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18857                           
 18858                           ; BSR set to: 0
 18859                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18860  003272  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18861  003276  0E0F               	movlw	15
 18862  003278  1609               	andwf	??_retrieveLog,f,c
 18863  00327A  5009               	movf	??_retrieveLog,w,c
 18864  00327C  0100               	movlb	0	; () banked
 18865  00327E  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18866  003280  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18867                           
 18868                           ; BSR set to: 0
 18869                           ;EEPROM.c: 156: addr++;
 18870  003282  4A10               	infsnz	retrieveLog@addr,f,c
 18871  003284  2A11               	incf	retrieveLog@addr+1,f,c
 18872                           
 18873                           ; BSR set to: 0
 18874                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18875  003286  0E00               	movlw	0
 18876  003288  6E0F               	movwf	retrieveLog@i+1,c
 18877  00328A  0E00               	movlw	0
 18878  00328C  6E0E               	movwf	retrieveLog@i,c
 18879  00328E                     i2l5976:
 18880                           
 18881                           ; BSR set to: 0
 18882  00328E  BE0F               	btfsc	retrieveLog@i+1,7,c
 18883  003290  D006               	goto	i2l5980
 18884  003292  500F               	movf	retrieveLog@i+1,w,c
 18885  003294  E11E               	bnz	i2l5988
 18886  003296  0E07               	movlw	7
 18887  003298  5C0E               	subwf	retrieveLog@i,w,c
 18888  00329A  B0D8               	btfsc	status,0,c
 18889  00329C  D01A               	goto	i2l5988
 18890  00329E                     i2l5980:
 18891                           
 18892                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18893  00329E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18894  0032A2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18895  0032A6  ECC6  F023         	call	i2_EEPROM_read	;wreg free
 18896  0032AA  6E09               	movwf	??_retrieveLog& (0+255),c
 18897  0032AC  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18898  0032AE  90D8               	bcf	status,0,c
 18899  0032B0  340E               	rlcf	retrieveLog@i,w,c
 18900  0032B2  6ED9               	movwf	fsr2l,c
 18901  0032B4  340F               	rlcf	retrieveLog@i+1,w,c
 18902  0032B6  6EDA               	movwf	fsr2h,c
 18903  0032B8  0E00               	movlw	low _log_startTime
 18904  0032BA  26D9               	addwf	fsr2l,f,c
 18905  0032BC  0E01               	movlw	high _log_startTime
 18906  0032BE  22DA               	addwfc	fsr2h,f,c
 18907  0032C0  C009  FFDE         	movff	??_retrieveLog,postinc2
 18908  0032C4  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18909                           
 18910                           ;EEPROM.c: 161: addr++;
 18911  0032C8  4A10               	infsnz	retrieveLog@addr,f,c
 18912  0032CA  2A11               	incf	retrieveLog@addr+1,f,c
 18913  0032CC  4A0E               	infsnz	retrieveLog@i,f,c
 18914  0032CE  2A0F               	incf	retrieveLog@i+1,f,c
 18915  0032D0  D7DE               	goto	i2l5976
 18916  0032D2                     i2l5988:
 18917                           
 18918                           ;EEPROM.c: 162: }
 18919                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18920  0032D2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18921  0032D6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18922  0032DA  ECC6  F023         	call	i2_EEPROM_read	;wreg free
 18923  0032DE  6E09               	movwf	??_retrieveLog& (0+255),c
 18924  0032E0  5009               	movf	??_retrieveLog,w,c
 18925  0032E2  0100               	movlb	0	; () banked
 18926  0032E4  6FF4               	movwf	_log_total_time& (0+255),b
 18927  0032E6  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18928                           
 18929                           ; BSR set to: 0
 18930  0032E8  0012               	return		;funcret
 18931  0032EA                     __end_of_retrieveLog:
 18932                           	opt stack 0
 18933                           pclatu	equ	0xFFB
 18934                           pclath	equ	0xFFA
 18935                           tblptru	equ	0xFF8
 18936                           tblptrh	equ	0xFF7
 18937                           tblptrl	equ	0xFF6
 18938                           tablat	equ	0xFF5
 18939                           prodh	equ	0xFF4
 18940                           prodl	equ	0xFF3
 18941                           intcon	equ	0xFF2
 18942                           intcon2	equ	0xFF1
 18943                           intcon3	equ	0xFF0
 18944                           indf0	equ	0xFEF
 18945                           postinc0	equ	0xFEE
 18946                           fsr0h	equ	0xFEA
 18947                           fsr0l	equ	0xFE9
 18948                           wreg	equ	0xFE8
 18949                           postdec1	equ	0xFE5
 18950                           fsr1h	equ	0xFE2
 18951                           fsr1l	equ	0xFE1
 18952                           indf2	equ	0xFDF
 18953                           postinc2	equ	0xFDE
 18954                           postdec2	equ	0xFDD
 18955                           fsr2h	equ	0xFDA
 18956                           fsr2l	equ	0xFD9
 18957                           status	equ	0xFD8
 18958                           
 18959 ;; *************** function i2_EEPROM_read *****************
 18960 ;; Defined at:
 18961 ;;		line 68 in file "EEPROM.c"
 18962 ;; Parameters:    Size  Location     Type
 18963 ;;  address         2    0[COMRAM] unsigned short 
 18964 ;; Auto vars:     Size  Location     Type
 18965 ;;		None
 18966 ;; Return value:  Size  Location     Type
 18967 ;;                  1    wreg      unsigned char 
 18968 ;; Registers used:
 18969 ;;		wreg, status,2
 18970 ;; Tracked objects:
 18971 ;;		On entry : 0/0
 18972 ;;		On exit  : 0/0
 18973 ;;		Unchanged: 0/0
 18974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18979 ;;Total ram usage:        2 bytes
 18980 ;; Hardware stack levels used:    1
 18981 ;; This function calls:
 18982 ;;		Nothing
 18983 ;; This function is called by:
 18984 ;;		_retrieveLog
 18985 ;; This function uses a non-reentrant model
 18986 ;;
 18987                           
 18988                           	psect	text76
 18989  00478C                     __ptext76:
 18990                           	opt stack 0
 18991  00478C                     i2_EEPROM_read:
 18992                           	opt stack 20
 18993                           
 18994                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;incstack = 0
 18998  00478C  5002               	movf	i2EEPROM_read@address+1,w,c
 18999  00478E  6EAA               	movwf	4010,c	;volatile
 19000                           
 19001                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19002  004790  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19003                           
 19004                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19005  004794  9EA6               	bcf	4006,7,c	;volatile
 19006                           
 19007                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19008  004796  9CA6               	bcf	4006,6,c	;volatile
 19009                           
 19010                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19011  004798  80A6               	bsf	4006,0,c	;volatile
 19012  00479A                     i2l945:
 19013  00479A  B0A6               	btfsc	4006,0,c	;volatile
 19014  00479C  D7FE               	goto	i2l945
 19015                           
 19016                           ;EEPROM.c: 81: return EEDATA;
 19017  00479E  50A8               	movf	4008,w,c	;volatile
 19018  0047A0  0012               	return	
 19019  0047A2                     __end_ofi2_EEPROM_read:
 19020                           	opt stack 0
 19021                           pclatu	equ	0xFFB
 19022                           pclath	equ	0xFFA
 19023                           tblptru	equ	0xFF8
 19024                           tblptrh	equ	0xFF7
 19025                           tblptrl	equ	0xFF6
 19026                           tablat	equ	0xFF5
 19027                           prodh	equ	0xFF4
 19028                           prodl	equ	0xFF3
 19029                           intcon	equ	0xFF2
 19030                           intcon2	equ	0xFF1
 19031                           intcon3	equ	0xFF0
 19032                           indf0	equ	0xFEF
 19033                           postinc0	equ	0xFEE
 19034                           fsr0h	equ	0xFEA
 19035                           fsr0l	equ	0xFE9
 19036                           wreg	equ	0xFE8
 19037                           postdec1	equ	0xFE5
 19038                           fsr1h	equ	0xFE2
 19039                           fsr1l	equ	0xFE1
 19040                           indf2	equ	0xFDF
 19041                           postinc2	equ	0xFDE
 19042                           postdec2	equ	0xFDD
 19043                           fsr2h	equ	0xFDA
 19044                           fsr2l	equ	0xFD9
 19045                           status	equ	0xFD8
 19046                           
 19047 ;; *************** function _printSortTimer *****************
 19048 ;; Defined at:
 19049 ;;		line 289 in file "sort.c"
 19050 ;; Parameters:    Size  Location     Type
 19051 ;;		None
 19052 ;; Auto vars:     Size  Location     Type
 19053 ;;  i               2   72[COMRAM] int 
 19054 ;;  curTime        14   46[COMRAM] int [7]
 19055 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19056 ;;  sec             2   66[COMRAM] int 
 19057 ;;  min             2   64[COMRAM] int 
 19058 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19059 ;;  start_sec       2   60[COMRAM] unsigned int 
 19060 ;;  hour            2   44[COMRAM] int 
 19061 ;; Return value:  Size  Location     Type
 19062 ;;                  1    wreg      void 
 19063 ;; Registers used:
 19064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19065 ;; Tracked objects:
 19066 ;;		On entry : 0/0
 19067 ;;		On exit  : 0/0
 19068 ;;		Unchanged: 0/0
 19069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19071 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19072 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19073 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19074 ;;Total ram usage:       33 bytes
 19075 ;; Hardware stack levels used:    1
 19076 ;; Hardware stack levels required when called:    3
 19077 ;; This function calls:
 19078 ;;		i2___lwdiv
 19079 ;;		i2___lwmod
 19080 ;;		i2___wmul
 19081 ;;		i2_getRTC
 19082 ;;		i2_lcdInst
 19083 ;;		i2_printf
 19084 ;; This function is called by:
 19085 ;;		_handler
 19086 ;; This function uses a non-reentrant model
 19087 ;;
 19088                           
 19089                           	psect	text77
 19090  0026E8                     __ptext77:
 19091                           	opt stack 0
 19092  0026E8                     _printSortTimer:
 19093                           	opt stack 20
 19094                           
 19095                           ;sort.c: 290: getRTC();
 19096                           
 19097                           ;incstack = 0
 19098  0026E8  EC5F  F01E         	call	i2_getRTC	;wreg free
 19099                           
 19100                           ;sort.c: 291: int curTime[7];
 19101                           ;sort.c: 292: for(int i = 0; i < 7; i++){
 19102  0026EC  0E00               	movlw	0
 19103  0026EE  6E4A               	movwf	printSortTimer@i+1,c
 19104  0026F0  0E00               	movlw	0
 19105  0026F2  6E49               	movwf	printSortTimer@i,c
 19106  0026F4                     i2l8054:
 19107  0026F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 19108  0026F6  D006               	goto	i2l8058
 19109  0026F8  504A               	movf	printSortTimer@i+1,w,c
 19110  0026FA  E131               	bnz	i2l8064
 19111  0026FC  0E07               	movlw	7
 19112  0026FE  5C49               	subwf	printSortTimer@i,w,c
 19113  002700  B0D8               	btfsc	status,0,c
 19114  002702  D02D               	goto	i2l8064
 19115  002704                     i2l8058:
 19116                           
 19117                           ;sort.c: 293: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19118  002704  0E24               	movlw	low _time
 19119  002706  2449               	addwf	printSortTimer@i,w,c
 19120  002708  6ED9               	movwf	fsr2l,c
 19121  00270A  0E01               	movlw	high _time
 19122  00270C  204A               	addwfc	printSortTimer@i+1,w,c
 19123  00270E  6EDA               	movwf	fsr2h,c
 19124  002710  50DF               	movf	indf2,w,c
 19125  002712  6E2A               	movwf	??_printSortTimer& (0+255),c
 19126  002714  3A2A               	swapf	??_printSortTimer,f,c
 19127  002716  0E0F               	movlw	15
 19128  002718  162A               	andwf	??_printSortTimer,f,c
 19129  00271A  0E0F               	movlw	15
 19130  00271C  162A               	andwf	??_printSortTimer,f,c
 19131  00271E  502A               	movf	??_printSortTimer,w,c
 19132  002720  0D0A               	mullw	10
 19133  002722  0E24               	movlw	low _time
 19134  002724  2449               	addwf	printSortTimer@i,w,c
 19135  002726  6ED9               	movwf	fsr2l,c
 19136  002728  0E01               	movlw	high _time
 19137  00272A  204A               	addwfc	printSortTimer@i+1,w,c
 19138  00272C  6EDA               	movwf	fsr2h,c
 19139  00272E  50DF               	movf	indf2,w,c
 19140  002730  0B0F               	andlw	15
 19141  002732  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19142  002734  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19143  002736  50F3               	movf	prodl,w,c
 19144  002738  262B               	addwf	??_printSortTimer+1,f,c
 19145  00273A  50F4               	movf	prodh,w,c
 19146  00273C  222C               	addwfc	??_printSortTimer+2,f,c
 19147  00273E  90D8               	bcf	status,0,c
 19148  002740  3449               	rlcf	printSortTimer@i,w,c
 19149  002742  6ED9               	movwf	fsr2l,c
 19150  002744  344A               	rlcf	printSortTimer@i+1,w,c
 19151  002746  6EDA               	movwf	fsr2h,c
 19152  002748  0E2F               	movlw	low printSortTimer@curTime
 19153  00274A  26D9               	addwf	fsr2l,f,c
 19154  00274C  0E00               	movlw	high printSortTimer@curTime
 19155  00274E  22DA               	addwfc	fsr2h,f,c
 19156  002750  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19157  002754  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19158  002758  4A49               	infsnz	printSortTimer@i,f,c
 19159  00275A  2A4A               	incf	printSortTimer@i+1,f,c
 19160  00275C  D7CB               	goto	i2l8054
 19161  00275E                     i2l8064:
 19162                           
 19163                           ;sort.c: 294: }
 19164                           ;sort.c: 295: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19165  00275E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19166  002762  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19167  002766  0E00               	movlw	0
 19168  002768  6E04               	movwf	i2___wmul@multiplicand+1,c
 19169  00276A  0E3C               	movlw	60
 19170  00276C  6E03               	movwf	i2___wmul@multiplicand,c
 19171  00276E  EC46  F023         	call	i2___wmul	;wreg free
 19172  002772  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19173  002776  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19174  00277A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19175  00277E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19176  002782  0E0E               	movlw	14
 19177  002784  6E04               	movwf	i2___wmul@multiplicand+1,c
 19178  002786  0E10               	movlw	16
 19179  002788  6E03               	movwf	i2___wmul@multiplicand,c
 19180  00278A  EC46  F023         	call	i2___wmul	;wreg free
 19181  00278E  5001               	movf	?i2___wmul,w,c
 19182  002790  262A               	addwf	??_printSortTimer,f,c
 19183  002792  5002               	movf	?i2___wmul+1,w,c
 19184  002794  222B               	addwfc	??_printSortTimer+1,f,c
 19185  002796  0101               	movlb	1	; () banked
 19186  002798  510E               	movf	_startTime& (0+255),w,b
 19187  00279A  242A               	addwf	??_printSortTimer,w,c
 19188  00279C  6E3D               	movwf	printSortTimer@start_sec,c
 19189  00279E  0101               	movlb	1	; () banked
 19190  0027A0  510F               	movf	(_startTime+1)& (0+255),w,b
 19191  0027A2  202B               	addwfc	??_printSortTimer+1,w,c
 19192  0027A4  6E3E               	movwf	printSortTimer@start_sec+1,c
 19193                           
 19194                           ;sort.c: 296: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19195  0027A6  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19196  0027AA  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19197  0027AE  0E00               	movlw	0
 19198  0027B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19199  0027B2  0E3C               	movlw	60
 19200  0027B4  6E03               	movwf	i2___wmul@multiplicand,c
 19201  0027B6  EC46  F023         	call	i2___wmul	;wreg free
 19202  0027BA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19203  0027BE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19204  0027C2  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19205  0027C6  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19206  0027CA  0E0E               	movlw	14
 19207  0027CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19208  0027CE  0E10               	movlw	16
 19209  0027D0  6E03               	movwf	i2___wmul@multiplicand,c
 19210  0027D2  EC46  F023         	call	i2___wmul	;wreg free
 19211  0027D6  5001               	movf	?i2___wmul,w,c
 19212  0027D8  262A               	addwf	??_printSortTimer,f,c
 19213  0027DA  5002               	movf	?i2___wmul+1,w,c
 19214  0027DC  222B               	addwfc	??_printSortTimer+1,f,c
 19215  0027DE  502F               	movf	printSortTimer@curTime,w,c
 19216  0027E0  242A               	addwf	??_printSortTimer,w,c
 19217  0027E2  6E3F               	movwf	printSortTimer@cur_sec,c
 19218  0027E4  5030               	movf	printSortTimer@curTime+1,w,c
 19219  0027E6  202B               	addwfc	??_printSortTimer+1,w,c
 19220  0027E8  6E40               	movwf	printSortTimer@cur_sec+1,c
 19221                           
 19222                           ;sort.c: 297: unsigned int timeDiff = cur_sec - start_sec;
 19223  0027EA  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19224  0027EE  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19225  0027F2  1E2A               	comf	??_printSortTimer,f,c
 19226  0027F4  1E2B               	comf	??_printSortTimer+1,f,c
 19227  0027F6  4A2A               	infsnz	??_printSortTimer,f,c
 19228  0027F8  2A2B               	incf	??_printSortTimer+1,f,c
 19229  0027FA  503F               	movf	printSortTimer@cur_sec,w,c
 19230  0027FC  242A               	addwf	??_printSortTimer,w,c
 19231  0027FE  6E47               	movwf	printSortTimer@timeDiff,c
 19232  002800  5040               	movf	printSortTimer@cur_sec+1,w,c
 19233  002802  202B               	addwfc	??_printSortTimer+1,w,c
 19234  002804  6E48               	movwf	printSortTimer@timeDiff+1,c
 19235                           
 19236                           ;sort.c: 299: total_time = timeDiff;
 19237  002806  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19238  00280A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19239                           
 19240                           ;sort.c: 301: if(timeDiff >= 179){
 19241  00280E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19242  002810  E104               	bnz	i2u696_40
 19243  002812  0EB3               	movlw	179
 19244  002814  5C47               	subwf	printSortTimer@timeDiff,w,c
 19245  002816  A0D8               	btfss	status,0,c
 19246  002818  D003               	goto	i2l8074
 19247  00281A                     i2u696_40:
 19248                           
 19249                           ;sort.c: 302: machine_state = DoneSorting_state;
 19250  00281A  0E02               	movlw	2
 19251  00281C  0100               	movlb	0	; () banked
 19252  00281E  6FFC               	movwf	_machine_state& (0+255),b
 19253  002820                     i2l8074:
 19254                           
 19255                           ;sort.c: 304: }
 19256                           ;sort.c: 306: int hour = timeDiff / 3600;
 19257  002820  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19258  002824  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19259  002828  0E0E               	movlw	14
 19260  00282A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19261  00282C  0E10               	movlw	16
 19262  00282E  6E08               	movwf	i2___lwdiv@divisor,c
 19263  002830  EC40  F020         	call	i2___lwdiv	;wreg free
 19264  002834  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19265  002838  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19266                           
 19267                           ;sort.c: 307: int min = (timeDiff % 3600) / 60;
 19268  00283C  0E0E               	movlw	14
 19269  00283E  6E04               	movwf	i2___lwmod@divisor+1,c
 19270  002840  0E10               	movlw	16
 19271  002842  6E03               	movwf	i2___lwmod@divisor,c
 19272  002844  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19273  002848  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19274  00284C  ECFF  F020         	call	i2___lwmod	;wreg free
 19275  002850  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19276  002854  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19277  002858  0E00               	movlw	0
 19278  00285A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19279  00285C  0E3C               	movlw	60
 19280  00285E  6E08               	movwf	i2___lwdiv@divisor,c
 19281  002860  EC40  F020         	call	i2___lwdiv	;wreg free
 19282  002864  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19283  002868  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19284                           
 19285                           ;sort.c: 308: int sec = (timeDiff % 3600) % 60;
 19286  00286C  0E0E               	movlw	14
 19287  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19288  002870  0E10               	movlw	16
 19289  002872  6E03               	movwf	i2___lwmod@divisor,c
 19290  002874  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19291  002878  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19292  00287C  ECFF  F020         	call	i2___lwmod	;wreg free
 19293  002880  C001  F045         	movff	?i2___lwmod,_printSortTimer$2417
 19294  002884  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2417+1
 19295                           
 19296                           ;sort.c: 308: int sec = (timeDiff % 3600) % 60;
 19297  002888  C045  F001         	movff	_printSortTimer$2417,i2___lwmod@dividend
 19298  00288C  C046  F002         	movff	_printSortTimer$2417+1,i2___lwmod@dividend+1
 19299  002890  0E00               	movlw	0
 19300  002892  6E04               	movwf	i2___lwmod@divisor+1,c
 19301  002894  0E3C               	movlw	60
 19302  002896  6E03               	movwf	i2___lwmod@divisor,c
 19303  002898  ECFF  F020         	call	i2___lwmod	;wreg free
 19304  00289C  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19305  0028A0  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19306                           
 19307                           ;sort.c: 310: lcdInst(0b10000000);;
 19308  0028A4  0E80               	movlw	128
 19309  0028A6  ECFA  F023         	call	i2_lcdInst
 19310                           
 19311                           ;sort.c: 311: printf("SORTING...");
 19312  0028AA  0E7C               	movlw	low STR_64
 19313  0028AC  6E0D               	movwf	i2printf@f,c
 19314  0028AE  0EFF               	movlw	high STR_64
 19315  0028B0  6E0E               	movwf	i2printf@f+1,c
 19316  0028B2  ECD4  F00A         	call	i2_printf	;wreg free
 19317                           
 19318                           ;sort.c: 312: lcdInst(0b11000000);;
 19319  0028B6  0EC0               	movlw	192
 19320  0028B8  ECFA  F023         	call	i2_lcdInst
 19321                           
 19322                           ;sort.c: 313: printf("TIME %d:%02d", min, sec);
 19323  0028BC  0E42               	movlw	low STR_65
 19324  0028BE  6E0D               	movwf	i2printf@f,c
 19325  0028C0  0EFF               	movlw	high STR_65
 19326  0028C2  6E0E               	movwf	i2printf@f+1,c
 19327  0028C4  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19328  0028C8  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19329  0028CC  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19330  0028D0  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19331  0028D4  ECD4  F00A         	call	i2_printf	;wreg free
 19332  0028D8  0012               	return		;funcret
 19333  0028DA                     __end_of_printSortTimer:
 19334                           	opt stack 0
 19335                           pclatu	equ	0xFFB
 19336                           pclath	equ	0xFFA
 19337                           tblptru	equ	0xFF8
 19338                           tblptrh	equ	0xFF7
 19339                           tblptrl	equ	0xFF6
 19340                           tablat	equ	0xFF5
 19341                           prodh	equ	0xFF4
 19342                           prodl	equ	0xFF3
 19343                           intcon	equ	0xFF2
 19344                           intcon2	equ	0xFF1
 19345                           intcon3	equ	0xFF0
 19346                           indf0	equ	0xFEF
 19347                           postinc0	equ	0xFEE
 19348                           fsr0h	equ	0xFEA
 19349                           fsr0l	equ	0xFE9
 19350                           wreg	equ	0xFE8
 19351                           postdec1	equ	0xFE5
 19352                           fsr1h	equ	0xFE2
 19353                           fsr1l	equ	0xFE1
 19354                           indf2	equ	0xFDF
 19355                           postinc2	equ	0xFDE
 19356                           postdec2	equ	0xFDD
 19357                           fsr2h	equ	0xFDA
 19358                           fsr2l	equ	0xFD9
 19359                           status	equ	0xFD8
 19360                           
 19361 ;; *************** function i2_printf *****************
 19362 ;; Defined at:
 19363 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19364 ;; Parameters:    Size  Location     Type
 19365 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19366 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19367 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19368 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19369 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19370 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19371 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19372 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19373 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19374 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19375 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19376 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19377 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19378 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19379 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19380 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19381 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19382 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19383 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19384 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19385 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19386 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19387 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19388 ;;		 -> STR_2(14), STR_1(18), 
 19389 ;; Auto vars:     Size  Location     Type
 19390 ;;  printf          4    0        struct .
 19391 ;;  printf          2   39[COMRAM] int 
 19392 ;;  printf          2   35[COMRAM] unsigned int 
 19393 ;;  printf          2   33[COMRAM] unsigned int 
 19394 ;;  printf          2   31[COMRAM] PTR void [1]
 19395 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19396 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19397 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 19398 ;;  printf          1   38[COMRAM] char 
 19399 ;;  printf          1   37[COMRAM] unsigned char 
 19400 ;;  printf          1   28[COMRAM] char 
 19401 ;; Return value:  Size  Location     Type
 19402 ;;                  2   12[COMRAM] int 
 19403 ;; Registers used:
 19404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19405 ;; Tracked objects:
 19406 ;;		On entry : 0/0
 19407 ;;		On exit  : 0/0
 19408 ;;		Unchanged: 0/0
 19409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19410 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;Total ram usage:       29 bytes
 19415 ;; Hardware stack levels used:    1
 19416 ;; Hardware stack levels required when called:    2
 19417 ;; This function calls:
 19418 ;;		i2___lwdiv
 19419 ;;		i2___lwmod
 19420 ;;		i2___wmul
 19421 ;;		i2_isdigit
 19422 ;;		i2_putch
 19423 ;; This function is called by:
 19424 ;;		_change_state_to_menu_11
 19425 ;;		_change_state_to_menu_23
 19426 ;;		_change_state_to_logs_11
 19427 ;;		_change_state_to_logs_12
 19428 ;;		_change_state_to_logs_22
 19429 ;;		_change_state_to_logs_23
 19430 ;;		_change_state_to_logs_33
 19431 ;;		_change_state_to_logs_34
 19432 ;;		_printSortTimer
 19433 ;;		i2_change_state_to_menu_start
 19434 ;;		i2_change_state_to_menu_12
 19435 ;;		i2_change_state_to_menu_22
 19436 ;;		i2_printRTC
 19437 ;; This function uses a non-reentrant model
 19438 ;;
 19439                           
 19440                           	psect	text78
 19441  0015A8                     __ptext78:
 19442                           	opt stack 0
 19443  0015A8                     i2_printf:
 19444                           	opt stack 19
 19445                           
 19446                           ;doprnt.c: 466: va_list ap;
 19447                           ;doprnt.c: 499: signed char c;
 19448                           ;doprnt.c: 501: int width;
 19449                           ;doprnt.c: 506: signed char prec;
 19450                           ;doprnt.c: 508: unsigned char flag;
 19451                           ;doprnt.c: 523: union {
 19452                           ;doprnt.c: 524: unsigned long vd;
 19453                           ;doprnt.c: 525: double integ;
 19454                           ;doprnt.c: 526: } tmpval;
 19455                           ;doprnt.c: 528: unsigned int val;
 19456                           ;doprnt.c: 529: unsigned len;
 19457                           ;doprnt.c: 530: const char * cp;
 19458                           ;doprnt.c: 533: *ap = __va_start();
 19459                           
 19460                           ;incstack = 0
 19461  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19462  0015AA  6E20               	movwf	i2printf@ap,c
 19463  0015AC  0E00               	movlw	high (?i2_printf+2)
 19464  0015AE  6E21               	movwf	i2printf@ap+1,c
 19465                           
 19466                           ;doprnt.c: 536: while(c = *f++) {
 19467  0015B0  D1A4               	goto	i2l5800
 19468  0015B2                     i2l5670:
 19469                           
 19470                           ;doprnt.c: 538: if(c != '%')
 19471  0015B2  0E25               	movlw	37
 19472  0015B4  1827               	xorwf	i2printf@c,w,c
 19473  0015B6  B4D8               	btfsc	status,2,c
 19474  0015B8  D004               	goto	i2l5674
 19475                           
 19476                           ;doprnt.c: 540: {
 19477                           ;doprnt.c: 541: (putch(c) );
 19478  0015BA  5027               	movf	i2printf@c,w,c
 19479  0015BC  ECF4  F023         	call	i2_putch
 19480                           
 19481                           ;doprnt.c: 542: continue;
 19482  0015C0  D19C               	goto	i2l5800
 19483  0015C2                     i2l5674:
 19484                           
 19485                           ;doprnt.c: 543: }
 19486                           ;doprnt.c: 546: width = 0;
 19487  0015C2  0E00               	movlw	0
 19488  0015C4  6E29               	movwf	i2printf@width+1,c
 19489  0015C6  0E00               	movlw	0
 19490  0015C8  6E28               	movwf	i2printf@width,c
 19491                           
 19492                           ;doprnt.c: 548: flag = 0;
 19493  0015CA  0E00               	movlw	0
 19494  0015CC  6E26               	movwf	i2printf@flag,c
 19495                           
 19496                           ;doprnt.c: 551: switch(*f) {
 19497                           
 19498                           ;doprnt.c: 550: for(;;) {
 19499  0015CE  D003               	goto	i2l5680
 19500  0015D0                     i2l5676:
 19501                           
 19502                           ;doprnt.c: 580: flag |= 0x04;
 19503  0015D0  8426               	bsf	i2printf@flag,2,c
 19504                           
 19505                           ;doprnt.c: 581: f++;
 19506  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19507  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19508  0015D6                     i2l5680:
 19509  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19510  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19511  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19512  0015DE  6AF8               	clrf	tblptru,c
 19513  0015E0                     	endif
 19514  0015E0                     	if	0	;tblptru may be non-zero
 19515  0015E0                     	endif
 19516  0015E0  0008               	tblrd		*
 19517  0015E2  50F5               	movf	tablat,w,c
 19518                           
 19519                           ; Switch size 1, requested type "space"
 19520                           ; Number of cases is 1, Range of values is 48 to 48
 19521                           ; switch strategies available:
 19522                           ; Name         Instructions Cycles
 19523                           ; simple_byte            4     3 (average)
 19524                           ;	Chosen strategy is simple_byte
 19525  0015E4  0A30               	xorlw	48	; case 48
 19526  0015E6  B4D8               	btfsc	status,2,c
 19527  0015E8  D7F3               	goto	i2l5676
 19528                           
 19529                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19530                           
 19531                           ;doprnt.c: 586: }
 19532                           
 19533                           ;doprnt.c: 585: break;
 19534  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19535  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19536  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19537  0015F2  6AF8               	clrf	tblptru,c
 19538  0015F4                     	endif
 19539  0015F4                     	if	0	;tblptru may be non-zero
 19540  0015F4                     	endif
 19541  0015F4  0008               	tblrd		*
 19542  0015F6  50F5               	movf	tablat,w,c
 19543  0015F8  ECA0  F023         	call	i2_isdigit
 19544  0015FC  A0D8               	btfss	status,0,c
 19545  0015FE  D0A6               	goto	i2l5728
 19546                           
 19547                           ;doprnt.c: 598: width = 0;
 19548  001600  0E00               	movlw	0
 19549  001602  6E29               	movwf	i2printf@width+1,c
 19550  001604  0E00               	movlw	0
 19551  001606  6E28               	movwf	i2printf@width,c
 19552  001608                     i2l5686:
 19553                           
 19554                           ;doprnt.c: 600: width *= 10;
 19555  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19556  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19557  001610  0E00               	movlw	0
 19558  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19559  001614  0E0A               	movlw	10
 19560  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19561  001618  EC46  F023         	call	i2___wmul	;wreg free
 19562  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19563  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19564                           
 19565                           ;doprnt.c: 601: width += *f++ - '0';
 19566  001624  0ED0               	movlw	208
 19567  001626  6E19               	movwf	??i2_printf& (0+255),c
 19568  001628  0EFF               	movlw	255
 19569  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19570  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19571  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19572  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19573  001634  6AF8               	clrf	tblptru,c
 19574  001636                     	endif
 19575  001636                     	if	0	;tblptru may be non-zero
 19576  001636                     	endif
 19577  001636  0008               	tblrd		*
 19578  001638  50F5               	movf	tablat,w,c
 19579  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19580  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19581  00163E  5019               	movf	??i2_printf,w,c
 19582  001640  261B               	addwf	??i2_printf+2,f,c
 19583  001642  501A               	movf	??i2_printf+1,w,c
 19584  001644  221C               	addwfc	??i2_printf+3,f,c
 19585  001646  501B               	movf	??i2_printf+2,w,c
 19586  001648  2628               	addwf	i2printf@width,f,c
 19587  00164A  501C               	movf	??i2_printf+3,w,c
 19588  00164C  2229               	addwfc	i2printf@width+1,f,c
 19589  00164E  4A0D               	infsnz	i2printf@f,f,c
 19590  001650  2A0E               	incf	i2printf@f+1,f,c
 19591                           
 19592                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19593  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19594  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19595  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19596  00165A  6AF8               	clrf	tblptru,c
 19597  00165C                     	endif
 19598  00165C                     	if	0	;tblptru may be non-zero
 19599  00165C                     	endif
 19600  00165C  0008               	tblrd		*
 19601  00165E  50F5               	movf	tablat,w,c
 19602  001660  ECA0  F023         	call	i2_isdigit
 19603  001664  A0D8               	btfss	status,0,c
 19604  001666  D072               	goto	i2l5728
 19605  001668  D7CF               	goto	i2l5686
 19606  00166A                     i2l5694:
 19607                           
 19608                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19609  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19610  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19611  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19612  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19613  00167A  0E02               	movlw	2
 19614  00167C  2620               	addwf	i2printf@ap,f,c
 19615  00167E  0E00               	movlw	0
 19616  001680  2221               	addwfc	i2printf@ap+1,f,c
 19617                           
 19618                           ;doprnt.c: 740: if(!cp)
 19619  001682  501E               	movf	i2printf@cp,w,c
 19620  001684  101F               	iorwf	i2printf@cp+1,w,c
 19621  001686  A4D8               	btfss	status,2,c
 19622  001688  D004               	goto	i2l5702
 19623                           
 19624                           ;doprnt.c: 741: cp = "(null)";
 19625  00168A  0EB6               	movlw	low STR_116
 19626  00168C  6E1E               	movwf	i2printf@cp,c
 19627  00168E  0EFF               	movlw	high STR_116
 19628  001690  6E1F               	movwf	i2printf@cp+1,c
 19629  001692                     i2l5702:
 19630                           
 19631                           ;doprnt.c: 745: len = 0;
 19632  001692  0E00               	movlw	0
 19633  001694  6E23               	movwf	i2printf@len+1,c
 19634  001696  0E00               	movlw	0
 19635  001698  6E22               	movwf	i2printf@len,c
 19636                           
 19637                           ;doprnt.c: 746: while(cp[len])
 19638  00169A  D002               	goto	i2l5706
 19639  00169C                     i2l5704:
 19640                           
 19641                           ;doprnt.c: 747: len++;
 19642  00169C  4A22               	infsnz	i2printf@len,f,c
 19643  00169E  2A23               	incf	i2printf@len+1,f,c
 19644  0016A0                     i2l5706:
 19645  0016A0  5022               	movf	i2printf@len,w,c
 19646  0016A2  241E               	addwf	i2printf@cp,w,c
 19647  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19648  0016A6  5023               	movf	i2printf@len+1,w,c
 19649  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19650  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19651  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19652  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19653  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19654  0016B6  6EF8               	movwf	tblptru,c
 19655  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19656  0016BA  64F7               	cpfsgt	tblptrh,c
 19657  0016BC  D003               	bra	i2u425_47
 19658  0016BE  0008               	tblrd		*
 19659  0016C0  50F5               	movf	tablat,w,c
 19660  0016C2  D005               	bra	i2u425_40
 19661  0016C4                     i2u425_47:
 19662  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19663  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19664  0016CC  50EF               	movf	indf0,w,c
 19665  0016CE                     i2u425_40:
 19666  0016CE  0900               	iorlw	0
 19667  0016D0  A4D8               	btfss	status,2,c
 19668  0016D2  D7E4               	goto	i2l5704
 19669                           
 19670                           ;doprnt.c: 757: if(width > len)
 19671  0016D4  5028               	movf	i2printf@width,w,c
 19672  0016D6  5C22               	subwf	i2printf@len,w,c
 19673  0016D8  5029               	movf	i2printf@width+1,w,c
 19674  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19675  0016DC  B0D8               	btfsc	status,0,c
 19676  0016DE  D005               	goto	i2l5712
 19677                           
 19678                           ;doprnt.c: 758: width -= len;
 19679  0016E0  5022               	movf	i2printf@len,w,c
 19680  0016E2  5E28               	subwf	i2printf@width,f,c
 19681  0016E4  5023               	movf	i2printf@len+1,w,c
 19682  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19683  0016E8  D008               	goto	i2l5716
 19684  0016EA                     i2l5712:
 19685                           
 19686                           ;doprnt.c: 759: else
 19687                           ;doprnt.c: 760: width = 0;
 19688  0016EA  0E00               	movlw	0
 19689  0016EC  6E29               	movwf	i2printf@width+1,c
 19690  0016EE  0E00               	movlw	0
 19691  0016F0  6E28               	movwf	i2printf@width,c
 19692                           
 19693                           ;doprnt.c: 764: while(width--)
 19694  0016F2  D003               	goto	i2l5716
 19695  0016F4                     i2l5714:
 19696                           
 19697                           ;doprnt.c: 765: (putch(' ') );
 19698  0016F4  0E20               	movlw	32
 19699  0016F6  ECF4  F023         	call	i2_putch
 19700  0016FA                     i2l5716:
 19701  0016FA  0628               	decf	i2printf@width,f,c
 19702  0016FC  A0D8               	btfss	status,0,c
 19703  0016FE  0629               	decf	i2printf@width+1,f,c
 19704  001700  2828               	incf	i2printf@width,w,c
 19705  001702  E1F8               	bnz	i2l5714
 19706  001704  2829               	incf	i2printf@width+1,w,c
 19707  001706  B4D8               	btfsc	status,2,c
 19708  001708  D016               	goto	i2l5722
 19709  00170A  D7F4               	goto	i2l5714
 19710  00170C                     i2l5718:
 19711                           
 19712                           ;doprnt.c: 768: (putch(*cp++) );
 19713  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19714  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19715  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19716  001716  6EF8               	movwf	tblptru,c
 19717  001718  0E0F               	movlw	(high __ramtop+-1)
 19718  00171A  64F7               	cpfsgt	tblptrh,c
 19719  00171C  D003               	bra	i2u429_47
 19720  00171E  0008               	tblrd		*
 19721  001720  50F5               	movf	tablat,w,c
 19722  001722  D005               	bra	i2u429_40
 19723  001724                     i2u429_47:
 19724  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19725  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19726  00172C  50EF               	movf	indf0,w,c
 19727  00172E                     i2u429_40:
 19728  00172E  ECF4  F023         	call	i2_putch
 19729  001732  4A1E               	infsnz	i2printf@cp,f,c
 19730  001734  2A1F               	incf	i2printf@cp+1,f,c
 19731  001736                     i2l5722:
 19732  001736  0622               	decf	i2printf@len,f,c
 19733  001738  A0D8               	btfss	status,0,c
 19734  00173A  0623               	decf	i2printf@len+1,f,c
 19735  00173C  2822               	incf	i2printf@len,w,c
 19736  00173E  E1E6               	bnz	i2l5718
 19737  001740  2823               	incf	i2printf@len+1,w,c
 19738  001742  B4D8               	btfsc	status,2,c
 19739  001744  D0DA               	goto	i2l5800
 19740  001746  D7E2               	goto	i2l5718
 19741  001748                     i2l5724:
 19742                           
 19743                           ;doprnt.c: 818: flag |= 0x40;
 19744  001748  8C26               	bsf	i2printf@flag,6,c
 19745                           
 19746                           ;doprnt.c: 822: }
 19747                           
 19748                           ;doprnt.c: 819: break;
 19749  00174A  D01B               	goto	i2l1262
 19750  00174C                     i2l5728:
 19751  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19752  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19753  001754  4A0D               	infsnz	i2printf@f,f,c
 19754  001756  2A0E               	incf	i2printf@f+1,f,c
 19755  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19756  001758  6AF8               	clrf	tblptru,c
 19757  00175A                     	endif
 19758  00175A                     	if	0	;tblptru may be non-zero
 19759  00175A                     	endif
 19760  00175A  0008               	tblrd		*
 19761  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19762  001760  5027               	movf	i2printf@c,w,c
 19763                           
 19764                           ; Switch size 1, requested type "space"
 19765                           ; Number of cases is 5, Range of values is 0 to 117
 19766                           ; switch strategies available:
 19767                           ; Name         Instructions Cycles
 19768                           ; simple_byte           16     9 (average)
 19769                           ;	Chosen strategy is simple_byte
 19770  001762  0A00               	xorlw	0	; case 0
 19771  001764  B4D8               	btfsc	status,2,c
 19772  001766  0012               	return	
 19773  001768  0A64               	xorlw	100	; case 100
 19774  00176A  B4D8               	btfsc	status,2,c
 19775  00176C  D00A               	goto	i2l1262
 19776  00176E  0A0D               	xorlw	13	; case 105
 19777  001770  B4D8               	btfsc	status,2,c
 19778  001772  D007               	goto	i2l1262
 19779  001774  0A1A               	xorlw	26	; case 115
 19780  001776  B4D8               	btfsc	status,2,c
 19781  001778  D778               	goto	i2l5694
 19782  00177A  0A06               	xorlw	6	; case 117
 19783  00177C  B4D8               	btfsc	status,2,c
 19784  00177E  D7E4               	goto	i2l5724
 19785  001780  D0BC               	goto	i2l5800
 19786  001782                     i2l1262:
 19787                           
 19788                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19789  001782  BC26               	btfsc	i2printf@flag,6,c
 19790  001784  D015               	goto	i2l5740
 19791                           
 19792                           ;doprnt.c: 1253: {
 19793                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19794  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19795  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19796  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19797  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19798  001796  0E02               	movlw	2
 19799  001798  2620               	addwf	i2printf@ap,f,c
 19800  00179A  0E00               	movlw	0
 19801  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19802                           
 19803                           ;doprnt.c: 1261: if((int)val < 0) {
 19804  00179E  AE25               	btfss	i2printf@val+1,7,c
 19805  0017A0  D013               	goto	i2l5744
 19806                           
 19807                           ;doprnt.c: 1262: flag |= 0x03;
 19808  0017A2  0E03               	movlw	3
 19809  0017A4  1226               	iorwf	i2printf@flag,f,c
 19810                           
 19811                           ;doprnt.c: 1263: val = -val;
 19812  0017A6  6C24               	negf	i2printf@val,c
 19813  0017A8  1E25               	comf	i2printf@val+1,f,c
 19814  0017AA  B0D8               	btfsc	status,0,c
 19815  0017AC  2A25               	incf	i2printf@val+1,f,c
 19816                           
 19817                           ;doprnt.c: 1264: }
 19818                           ;doprnt.c: 1266: }
 19819  0017AE  D00C               	goto	i2l5744
 19820  0017B0                     i2l5740:
 19821                           
 19822                           ;doprnt.c: 1268: else
 19823                           ;doprnt.c: 1273: {
 19824                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19825  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19826  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19827  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19828  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19829  0017C0  0E02               	movlw	2
 19830  0017C2  2620               	addwf	i2printf@ap,f,c
 19831  0017C4  0E00               	movlw	0
 19832  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19833  0017C8                     i2l5744:
 19834                           
 19835                           ;doprnt.c: 1287: }
 19836                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19837  0017C8  0E01               	movlw	1
 19838  0017CA  6E27               	movwf	i2printf@c,c
 19839  0017CC                     i2l5746:
 19840  0017CC  0E05               	movlw	5
 19841  0017CE  1827               	xorwf	i2printf@c,w,c
 19842  0017D0  B4D8               	btfsc	status,2,c
 19843  0017D2  D015               	goto	i2l5758
 19844                           
 19845                           ;doprnt.c: 1306: if(val < dpowers[c])
 19846  0017D4  5027               	movf	i2printf@c,w,c
 19847  0017D6  0D02               	mullw	2
 19848  0017D8  0E36               	movlw	low _dpowers
 19849  0017DA  24F3               	addwf	prodl,w,c
 19850  0017DC  6EF6               	movwf	tblptrl,c
 19851  0017DE  0EFB               	movlw	high _dpowers
 19852  0017E0  20F4               	addwfc	prodh,w,c
 19853  0017E2  6EF7               	movwf	tblptrh,c
 19854  0017E4                     	if	1	;There are 3 active tblptr bytes
 19855  0017E4  6AF8               	clrf	tblptru,c
 19856  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19857  0017E8  22F8               	addwfc	tblptru,f,c
 19858  0017EA                     	endif
 19859  0017EA  0009               	tblrd		*+
 19860  0017EC  50F5               	movf	tablat,w,c
 19861  0017EE  5C24               	subwf	i2printf@val,w,c
 19862  0017F0  0009               	tblrd		*+
 19863  0017F2  50F5               	movf	tablat,w,c
 19864  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19865  0017F6  A0D8               	btfss	status,0,c
 19866  0017F8  D002               	goto	i2l5758
 19867                           
 19868                           ;doprnt.c: 1307: break;
 19869  0017FA  2A27               	incf	i2printf@c,f,c
 19870  0017FC  D7E7               	goto	i2l5746
 19871  0017FE                     i2l5758:
 19872                           
 19873                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19874  0017FE  5028               	movf	i2printf@width,w,c
 19875  001800  1029               	iorwf	i2printf@width+1,w,c
 19876  001802  B4D8               	btfsc	status,2,c
 19877  001804  D009               	goto	i2l5764
 19878  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19879  00180A  0E03               	movlw	3
 19880  00180C  1619               	andwf	??i2_printf,f,c
 19881  00180E  B4D8               	btfsc	status,2,c
 19882  001810  D003               	goto	i2l5764
 19883                           
 19884                           ;doprnt.c: 1346: width--;
 19885  001812  0628               	decf	i2printf@width,f,c
 19886  001814  A0D8               	btfss	status,0,c
 19887  001816  0629               	decf	i2printf@width+1,f,c
 19888  001818                     i2l5764:
 19889                           
 19890                           ;doprnt.c: 1381: if(width > c)
 19891  001818  0E80               	movlw	128
 19892  00181A  BE27               	btfsc	i2printf@c,7,c
 19893  00181C  0E7F               	movlw	127
 19894  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19895  001820  5028               	movf	i2printf@width,w,c
 19896  001822  5C27               	subwf	i2printf@c,w,c
 19897  001824  5029               	movf	i2printf@width+1,w,c
 19898  001826  0A80               	xorlw	128
 19899  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19900  00182A  B0D8               	btfsc	status,0,c
 19901  00182C  D007               	goto	i2l5768
 19902                           
 19903                           ;doprnt.c: 1382: width -= c;
 19904  00182E  5027               	movf	i2printf@c,w,c
 19905  001830  5E28               	subwf	i2printf@width,f,c
 19906  001832  0E00               	movlw	0
 19907  001834  BE27               	btfsc	i2printf@c,7,c
 19908  001836  0EFF               	movlw	255
 19909  001838  5A29               	subwfb	i2printf@width+1,f,c
 19910  00183A  D004               	goto	i2l5770
 19911  00183C                     i2l5768:
 19912                           
 19913                           ;doprnt.c: 1383: else
 19914                           ;doprnt.c: 1384: width = 0;
 19915  00183C  0E00               	movlw	0
 19916  00183E  6E29               	movwf	i2printf@width+1,c
 19917  001840  0E00               	movlw	0
 19918  001842  6E28               	movwf	i2printf@width,c
 19919  001844                     i2l5770:
 19920                           
 19921                           ;doprnt.c: 1387: if(flag & 0x04) {
 19922  001844  A426               	btfss	i2printf@flag,2,c
 19923  001846  D014               	goto	i2l5782
 19924                           
 19925                           ;doprnt.c: 1392: if(flag & 0x03)
 19926  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19927  00184C  0E03               	movlw	3
 19928  00184E  1619               	andwf	??i2_printf,f,c
 19929  001850  B4D8               	btfsc	status,2,c
 19930  001852  D003               	goto	i2l5776
 19931                           
 19932                           ;doprnt.c: 1393: (putch('-') );
 19933  001854  0E2D               	movlw	45
 19934  001856  ECF4  F023         	call	i2_putch
 19935  00185A                     i2l5776:
 19936                           
 19937                           ;doprnt.c: 1415: if(width)
 19938  00185A  5028               	movf	i2printf@width,w,c
 19939  00185C  1029               	iorwf	i2printf@width+1,w,c
 19940  00185E  B4D8               	btfsc	status,2,c
 19941  001860  D01E               	goto	i2l5792
 19942                           
 19943                           ;doprnt.c: 1417: (putch('0') );
 19944                           
 19945                           ;doprnt.c: 1416: do
 19946  001862  0E30               	movlw	48
 19947  001864  ECF4  F023         	call	i2_putch
 19948                           
 19949                           ;doprnt.c: 1418: while(--width);
 19950  001868  0628               	decf	i2printf@width,f,c
 19951  00186A  A0D8               	btfss	status,0,c
 19952  00186C  0629               	decf	i2printf@width+1,f,c
 19953  00186E  D7F5               	goto	i2l5776
 19954  001870                     i2l5782:
 19955                           
 19956                           ;doprnt.c: 1422: {
 19957                           ;doprnt.c: 1424: if(width
 19958                           ;doprnt.c: 1428: )
 19959  001870  5028               	movf	i2printf@width,w,c
 19960  001872  1029               	iorwf	i2printf@width+1,w,c
 19961  001874  B4D8               	btfsc	status,2,c
 19962  001876  D00A               	goto	i2l5788
 19963  001878                     i2l5784:
 19964                           
 19965                           ;doprnt.c: 1430: (putch(' ') );
 19966  001878  0E20               	movlw	32
 19967  00187A  ECF4  F023         	call	i2_putch
 19968                           
 19969                           ;doprnt.c: 1431: while(--width);
 19970  00187E  0628               	decf	i2printf@width,f,c
 19971  001880  A0D8               	btfss	status,0,c
 19972  001882  0629               	decf	i2printf@width+1,f,c
 19973  001884  5028               	movf	i2printf@width,w,c
 19974  001886  1029               	iorwf	i2printf@width+1,w,c
 19975  001888  A4D8               	btfss	status,2,c
 19976  00188A  D7F6               	goto	i2l5784
 19977  00188C                     i2l5788:
 19978                           
 19979                           ;doprnt.c: 1438: if(flag & 0x03)
 19980  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19981  001890  0E03               	movlw	3
 19982  001892  1619               	andwf	??i2_printf,f,c
 19983  001894  B4D8               	btfsc	status,2,c
 19984  001896  D003               	goto	i2l5792
 19985                           
 19986                           ;doprnt.c: 1439: (putch('-') );
 19987  001898  0E2D               	movlw	45
 19988  00189A  ECF4  F023         	call	i2_putch
 19989  00189E                     i2l5792:
 19990                           
 19991                           ;doprnt.c: 1469: }
 19992                           ;doprnt.c: 1472: prec = c;
 19993  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19994                           
 19995                           ;doprnt.c: 1474: while(prec--) {
 19996  0018A2  D027               	goto	i2l5798
 19997  0018A4                     i2l5794:
 19998                           
 19999                           ;doprnt.c: 1478: {
 20000                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20001  0018A4  501D               	movf	i2printf@prec,w,c
 20002  0018A6  0D02               	mullw	2
 20003  0018A8  0E36               	movlw	low _dpowers
 20004  0018AA  24F3               	addwf	prodl,w,c
 20005  0018AC  6EF6               	movwf	tblptrl,c
 20006  0018AE  0EFB               	movlw	high _dpowers
 20007  0018B0  20F4               	addwfc	prodh,w,c
 20008  0018B2  6EF7               	movwf	tblptrh,c
 20009  0018B4                     	if	1	;There are 3 active tblptr bytes
 20010  0018B4  6AF8               	clrf	tblptru,c
 20011  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 20012  0018B8  22F8               	addwfc	tblptru,f,c
 20013  0018BA                     	endif
 20014  0018BA  0009               	tblrd		*+
 20015  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20016  0018C0  000A               	tblrd		*-
 20017  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20018  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20019  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20020  0018CE  EC40  F020         	call	i2___lwdiv	;wreg free
 20021  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20022  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20023  0018DA  0E00               	movlw	0
 20024  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 20025  0018DE  0E0A               	movlw	10
 20026  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 20027  0018E2  ECFF  F020         	call	i2___lwmod	;wreg free
 20028  0018E6  5001               	movf	?i2___lwmod,w,c
 20029  0018E8  0F30               	addlw	48
 20030  0018EA  6E27               	movwf	i2printf@c,c
 20031                           
 20032                           ;doprnt.c: 1523: }
 20033                           ;doprnt.c: 1524: (putch(c) );
 20034  0018EC  5027               	movf	i2printf@c,w,c
 20035  0018EE  ECF4  F023         	call	i2_putch
 20036  0018F2                     i2l5798:
 20037  0018F2  061D               	decf	i2printf@prec,f,c
 20038  0018F4  281D               	incf	i2printf@prec,w,c
 20039  0018F6  A4D8               	btfss	status,2,c
 20040  0018F8  D7D5               	goto	i2l5794
 20041  0018FA                     i2l5800:
 20042  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 20043  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20044  001902  4A0D               	infsnz	i2printf@f,f,c
 20045  001904  2A0E               	incf	i2printf@f+1,f,c
 20046  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20047  001906  6AF8               	clrf	tblptru,c
 20048  001908                     	endif
 20049  001908                     	if	0	;tblptru may be non-zero
 20050  001908                     	endif
 20051  001908  0008               	tblrd		*
 20052  00190A  CFF5 F027          	movff	tablat,i2printf@c
 20053  00190E  5027               	movf	i2printf@c,w,c
 20054  001910  B4D8               	btfsc	status,2,c
 20055  001912  0012               	return	
 20056  001914  D64E               	goto	i2l5670
 20057  001916                     __end_ofi2_printf:
 20058                           	opt stack 0
 20059                           pclatu	equ	0xFFB
 20060                           pclath	equ	0xFFA
 20061                           tblptru	equ	0xFF8
 20062                           tblptrh	equ	0xFF7
 20063                           tblptrl	equ	0xFF6
 20064                           tablat	equ	0xFF5
 20065                           prodh	equ	0xFF4
 20066                           prodl	equ	0xFF3
 20067                           intcon	equ	0xFF2
 20068                           intcon2	equ	0xFF1
 20069                           intcon3	equ	0xFF0
 20070                           indf0	equ	0xFEF
 20071                           postinc0	equ	0xFEE
 20072                           fsr0h	equ	0xFEA
 20073                           fsr0l	equ	0xFE9
 20074                           wreg	equ	0xFE8
 20075                           postdec1	equ	0xFE5
 20076                           fsr1h	equ	0xFE2
 20077                           fsr1l	equ	0xFE1
 20078                           indf2	equ	0xFDF
 20079                           postinc2	equ	0xFDE
 20080                           postdec2	equ	0xFDD
 20081                           fsr2h	equ	0xFDA
 20082                           fsr2l	equ	0xFD9
 20083                           status	equ	0xFD8
 20084                           
 20085 ;; *************** function i2_putch *****************
 20086 ;; Defined at:
 20087 ;;		line 20 in file "lcd.c"
 20088 ;; Parameters:    Size  Location     Type
 20089 ;;  data            1    wreg     unsigned char 
 20090 ;; Auto vars:     Size  Location     Type
 20091 ;;  data            1    2[COMRAM] unsigned char 
 20092 ;; Return value:  Size  Location     Type
 20093 ;;                  1    wreg      void 
 20094 ;; Registers used:
 20095 ;;		wreg, status,2, status,0, cstack
 20096 ;; Tracked objects:
 20097 ;;		On entry : 0/0
 20098 ;;		On exit  : 0/0
 20099 ;;		Unchanged: 0/0
 20100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20105 ;;Total ram usage:        1 bytes
 20106 ;; Hardware stack levels used:    1
 20107 ;; Hardware stack levels required when called:    1
 20108 ;; This function calls:
 20109 ;;		i2_lcdNibble
 20110 ;; This function is called by:
 20111 ;;		i2_printf
 20112 ;; This function uses a non-reentrant model
 20113 ;;
 20114                           
 20115                           	psect	text79
 20116  0047E8                     __ptext79:
 20117                           	opt stack 0
 20118  0047E8                     i2_putch:
 20119                           	opt stack 19
 20120                           
 20121                           ;incstack = 0
 20122                           ;i2putch@data stored from wreg
 20123  0047E8  6E03               	movwf	i2putch@data,c
 20124                           
 20125                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20126  0047EA  848C               	bsf	3980,2,c	;volatile
 20127                           
 20128                           ;lcd.c: 22: lcdNibble(data);
 20129  0047EC  5003               	movf	i2putch@data,w,c
 20130  0047EE  ECEB  F01F         	call	i2_lcdNibble
 20131  0047F2  0012               	return		;funcret
 20132  0047F4                     __end_ofi2_putch:
 20133                           	opt stack 0
 20134                           pclatu	equ	0xFFB
 20135                           pclath	equ	0xFFA
 20136                           tblptru	equ	0xFF8
 20137                           tblptrh	equ	0xFF7
 20138                           tblptrl	equ	0xFF6
 20139                           tablat	equ	0xFF5
 20140                           prodh	equ	0xFF4
 20141                           prodl	equ	0xFF3
 20142                           intcon	equ	0xFF2
 20143                           intcon2	equ	0xFF1
 20144                           intcon3	equ	0xFF0
 20145                           indf0	equ	0xFEF
 20146                           postinc0	equ	0xFEE
 20147                           fsr0h	equ	0xFEA
 20148                           fsr0l	equ	0xFE9
 20149                           wreg	equ	0xFE8
 20150                           postdec1	equ	0xFE5
 20151                           fsr1h	equ	0xFE2
 20152                           fsr1l	equ	0xFE1
 20153                           indf2	equ	0xFDF
 20154                           postinc2	equ	0xFDE
 20155                           postdec2	equ	0xFDD
 20156                           fsr2h	equ	0xFDA
 20157                           fsr2l	equ	0xFD9
 20158                           status	equ	0xFD8
 20159                           
 20160 ;; *************** function i2_isdigit *****************
 20161 ;; Defined at:
 20162 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;  c               1    wreg     unsigned char 
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;  c               1    2[COMRAM] unsigned char 
 20167 ;; Return value:  Size  Location     Type
 20168 ;;		None               void
 20169 ;; Registers used:
 20170 ;;		wreg, status,2, status,0
 20171 ;; Tracked objects:
 20172 ;;		On entry : 0/0
 20173 ;;		On exit  : 0/0
 20174 ;;		Unchanged: 0/0
 20175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20179 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20180 ;;Total ram usage:        3 bytes
 20181 ;; Hardware stack levels used:    1
 20182 ;; This function calls:
 20183 ;;		Nothing
 20184 ;; This function is called by:
 20185 ;;		i2_printf
 20186 ;; This function uses a non-reentrant model
 20187 ;;
 20188                           
 20189                           	psect	text80
 20190  004740                     __ptext80:
 20191                           	opt stack 0
 20192  004740                     i2_isdigit:
 20193                           	opt stack 20
 20194                           
 20195                           ;incstack = 0
 20196                           ;i2isdigit@c stored from wreg
 20197  004740  6E03               	movwf	i2isdigit@c,c
 20198  004742  0E00               	movlw	0
 20199  004744  6E02               	movwf	i2_isdigit$1944,c
 20200  004746  0E3A               	movlw	58
 20201  004748  6003               	cpfslt	i2isdigit@c,c
 20202  00474A  D005               	goto	i2l5374
 20203  00474C  0E2F               	movlw	47
 20204  00474E  6403               	cpfsgt	i2isdigit@c,c
 20205  004750  D002               	goto	i2l5374
 20206  004752  0E01               	movlw	1
 20207  004754  6E02               	movwf	i2_isdigit$1944,c
 20208  004756                     i2l5374:
 20209  004756  C002  F001         	movff	i2_isdigit$1944,??i2_isdigit
 20210  00475A  3001               	rrcf	??i2_isdigit,w,c
 20211  00475C  0012               	return	
 20212  00475E                     __end_ofi2_isdigit:
 20213                           	opt stack 0
 20214                           pclatu	equ	0xFFB
 20215                           pclath	equ	0xFFA
 20216                           tblptru	equ	0xFF8
 20217                           tblptrh	equ	0xFF7
 20218                           tblptrl	equ	0xFF6
 20219                           tablat	equ	0xFF5
 20220                           prodh	equ	0xFF4
 20221                           prodl	equ	0xFF3
 20222                           intcon	equ	0xFF2
 20223                           intcon2	equ	0xFF1
 20224                           intcon3	equ	0xFF0
 20225                           indf0	equ	0xFEF
 20226                           postinc0	equ	0xFEE
 20227                           fsr0h	equ	0xFEA
 20228                           fsr0l	equ	0xFE9
 20229                           wreg	equ	0xFE8
 20230                           postdec1	equ	0xFE5
 20231                           fsr1h	equ	0xFE2
 20232                           fsr1l	equ	0xFE1
 20233                           indf2	equ	0xFDF
 20234                           postinc2	equ	0xFDE
 20235                           postdec2	equ	0xFDD
 20236                           fsr2h	equ	0xFDA
 20237                           fsr2l	equ	0xFD9
 20238                           status	equ	0xFD8
 20239                           
 20240 ;; *************** function i2___wmul *****************
 20241 ;; Defined at:
 20242 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20243 ;; Parameters:    Size  Location     Type
 20244 ;;  multiplier      2    0[COMRAM] unsigned int 
 20245 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20246 ;; Auto vars:     Size  Location     Type
 20247 ;;  __wmul          2    4[COMRAM] unsigned int 
 20248 ;; Return value:  Size  Location     Type
 20249 ;;                  2    0[COMRAM] unsigned int 
 20250 ;; Registers used:
 20251 ;;		wreg, status,2, status,0, prodl, prodh
 20252 ;; Tracked objects:
 20253 ;;		On entry : 0/0
 20254 ;;		On exit  : 0/0
 20255 ;;		Unchanged: 0/0
 20256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20260 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20261 ;;Total ram usage:        6 bytes
 20262 ;; Hardware stack levels used:    1
 20263 ;; This function calls:
 20264 ;;		Nothing
 20265 ;; This function is called by:
 20266 ;;		_printSortTimer
 20267 ;;		_retrieveLog
 20268 ;;		i2_printf
 20269 ;; This function uses a non-reentrant model
 20270 ;;
 20271                           
 20272                           	psect	text81
 20273  00468C                     __ptext81:
 20274                           	opt stack 0
 20275  00468C                     i2___wmul:
 20276                           	opt stack 20
 20277                           
 20278                           ;incstack = 0
 20279  00468C  5001               	movf	i2___wmul@multiplier,w,c
 20280  00468E  0203               	mulwf	i2___wmul@multiplicand,c
 20281  004690  CFF3 F005          	movff	prodl,i2___wmul@product
 20282  004694  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20283  004698  5001               	movf	i2___wmul@multiplier,w,c
 20284  00469A  0204               	mulwf	i2___wmul@multiplicand+1,c
 20285  00469C  50F3               	movf	prodl,w,c
 20286  00469E  2606               	addwf	i2___wmul@product+1,f,c
 20287  0046A0  5002               	movf	i2___wmul@multiplier+1,w,c
 20288  0046A2  0203               	mulwf	i2___wmul@multiplicand,c
 20289  0046A4  50F3               	movf	prodl,w,c
 20290  0046A6  2606               	addwf	i2___wmul@product+1,f,c
 20291  0046A8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20292  0046AC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20293  0046B0  0012               	return	
 20294  0046B2                     __end_ofi2___wmul:
 20295                           	opt stack 0
 20296                           pclatu	equ	0xFFB
 20297                           pclath	equ	0xFFA
 20298                           tblptru	equ	0xFF8
 20299                           tblptrh	equ	0xFF7
 20300                           tblptrl	equ	0xFF6
 20301                           tablat	equ	0xFF5
 20302                           prodh	equ	0xFF4
 20303                           prodl	equ	0xFF3
 20304                           intcon	equ	0xFF2
 20305                           intcon2	equ	0xFF1
 20306                           intcon3	equ	0xFF0
 20307                           indf0	equ	0xFEF
 20308                           postinc0	equ	0xFEE
 20309                           fsr0h	equ	0xFEA
 20310                           fsr0l	equ	0xFE9
 20311                           wreg	equ	0xFE8
 20312                           postdec1	equ	0xFE5
 20313                           fsr1h	equ	0xFE2
 20314                           fsr1l	equ	0xFE1
 20315                           indf2	equ	0xFDF
 20316                           postinc2	equ	0xFDE
 20317                           postdec2	equ	0xFDD
 20318                           fsr2h	equ	0xFDA
 20319                           fsr2l	equ	0xFD9
 20320                           status	equ	0xFD8
 20321                           
 20322 ;; *************** function i2___lwmod *****************
 20323 ;; Defined at:
 20324 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20325 ;; Parameters:    Size  Location     Type
 20326 ;;  dividend        2    0[COMRAM] unsigned int 
 20327 ;;  divisor         2    2[COMRAM] unsigned int 
 20328 ;; Auto vars:     Size  Location     Type
 20329 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20330 ;; Return value:  Size  Location     Type
 20331 ;;                  2    0[COMRAM] unsigned int 
 20332 ;; Registers used:
 20333 ;;		wreg, status,2, status,0
 20334 ;; Tracked objects:
 20335 ;;		On entry : 0/0
 20336 ;;		On exit  : 0/0
 20337 ;;		Unchanged: 0/0
 20338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20342 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20343 ;;Total ram usage:        5 bytes
 20344 ;; Hardware stack levels used:    1
 20345 ;; This function calls:
 20346 ;;		Nothing
 20347 ;; This function is called by:
 20348 ;;		_printSortTimer
 20349 ;;		i2_printf
 20350 ;; This function uses a non-reentrant model
 20351 ;;
 20352                           
 20353                           	psect	text82
 20354  0041FE                     __ptext82:
 20355                           	opt stack 0
 20356  0041FE                     i2___lwmod:
 20357                           	opt stack 20
 20358                           
 20359                           ;incstack = 0
 20360  0041FE  5003               	movf	i2___lwmod@divisor,w,c
 20361  004200  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20362  004202  B4D8               	btfsc	status,2,c
 20363  004204  D018               	goto	i2l1719
 20364  004206  0E01               	movlw	1
 20365  004208  6E05               	movwf	i2___lwmod@counter,c
 20366  00420A  D004               	goto	i2l5406
 20367  00420C                     i2l5404:
 20368  00420C  90D8               	bcf	status,0,c
 20369  00420E  3603               	rlcf	i2___lwmod@divisor,f,c
 20370  004210  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20371  004212  2A05               	incf	i2___lwmod@counter,f,c
 20372  004214                     i2l5406:
 20373  004214  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20374  004216  D7FA               	goto	i2l5404
 20375  004218                     i2l5408:
 20376  004218  5003               	movf	i2___lwmod@divisor,w,c
 20377  00421A  5C01               	subwf	i2___lwmod@dividend,w,c
 20378  00421C  5004               	movf	i2___lwmod@divisor+1,w,c
 20379  00421E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20380  004220  A0D8               	btfss	status,0,c
 20381  004222  D004               	goto	i2l5412
 20382  004224  5003               	movf	i2___lwmod@divisor,w,c
 20383  004226  5E01               	subwf	i2___lwmod@dividend,f,c
 20384  004228  5004               	movf	i2___lwmod@divisor+1,w,c
 20385  00422A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20386  00422C                     i2l5412:
 20387  00422C  90D8               	bcf	status,0,c
 20388  00422E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20389  004230  3203               	rrcf	i2___lwmod@divisor,f,c
 20390  004232  2E05               	decfsz	i2___lwmod@counter,f,c
 20391  004234  D7F1               	goto	i2l5408
 20392  004236                     i2l1719:
 20393  004236  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20394  00423A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20395  00423E  0012               	return		;funcret
 20396  004240                     __end_ofi2___lwmod:
 20397                           	opt stack 0
 20398                           pclatu	equ	0xFFB
 20399                           pclath	equ	0xFFA
 20400                           tblptru	equ	0xFF8
 20401                           tblptrh	equ	0xFF7
 20402                           tblptrl	equ	0xFF6
 20403                           tablat	equ	0xFF5
 20404                           prodh	equ	0xFF4
 20405                           prodl	equ	0xFF3
 20406                           intcon	equ	0xFF2
 20407                           intcon2	equ	0xFF1
 20408                           intcon3	equ	0xFF0
 20409                           indf0	equ	0xFEF
 20410                           postinc0	equ	0xFEE
 20411                           fsr0h	equ	0xFEA
 20412                           fsr0l	equ	0xFE9
 20413                           wreg	equ	0xFE8
 20414                           postdec1	equ	0xFE5
 20415                           fsr1h	equ	0xFE2
 20416                           fsr1l	equ	0xFE1
 20417                           indf2	equ	0xFDF
 20418                           postinc2	equ	0xFDE
 20419                           postdec2	equ	0xFDD
 20420                           fsr2h	equ	0xFDA
 20421                           fsr2l	equ	0xFD9
 20422                           status	equ	0xFD8
 20423                           
 20424 ;; *************** function i2___lwdiv *****************
 20425 ;; Defined at:
 20426 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20427 ;; Parameters:    Size  Location     Type
 20428 ;;  dividend        2    5[COMRAM] unsigned int 
 20429 ;;  divisor         2    7[COMRAM] unsigned int 
 20430 ;; Auto vars:     Size  Location     Type
 20431 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20432 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20433 ;; Return value:  Size  Location     Type
 20434 ;;                  2    5[COMRAM] unsigned int 
 20435 ;; Registers used:
 20436 ;;		wreg, status,2, status,0
 20437 ;; Tracked objects:
 20438 ;;		On entry : 0/0
 20439 ;;		On exit  : 0/0
 20440 ;;		Unchanged: 0/0
 20441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;Total ram usage:        7 bytes
 20447 ;; Hardware stack levels used:    1
 20448 ;; This function calls:
 20449 ;;		Nothing
 20450 ;; This function is called by:
 20451 ;;		_printSortTimer
 20452 ;;		i2_printf
 20453 ;; This function uses a non-reentrant model
 20454 ;;
 20455                           
 20456                           	psect	text83
 20457  004080                     __ptext83:
 20458                           	opt stack 0
 20459  004080                     i2___lwdiv:
 20460                           	opt stack 20
 20461                           
 20462                           ;incstack = 0
 20463  004080  0E00               	movlw	0
 20464  004082  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20465  004084  0E00               	movlw	0
 20466  004086  6E0A               	movwf	i2___lwdiv@quotient,c
 20467  004088  5008               	movf	i2___lwdiv@divisor,w,c
 20468  00408A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20469  00408C  B4D8               	btfsc	status,2,c
 20470  00408E  D01C               	goto	i2l1709
 20471  004090  0E01               	movlw	1
 20472  004092  6E0C               	movwf	i2___lwdiv@counter,c
 20473  004094  D004               	goto	i2l5386
 20474  004096                     i2l5384:
 20475  004096  90D8               	bcf	status,0,c
 20476  004098  3608               	rlcf	i2___lwdiv@divisor,f,c
 20477  00409A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20478  00409C  2A0C               	incf	i2___lwdiv@counter,f,c
 20479  00409E                     i2l5386:
 20480  00409E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20481  0040A0  D7FA               	goto	i2l5384
 20482  0040A2                     i2l5388:
 20483  0040A2  90D8               	bcf	status,0,c
 20484  0040A4  360A               	rlcf	i2___lwdiv@quotient,f,c
 20485  0040A6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20486  0040A8  5008               	movf	i2___lwdiv@divisor,w,c
 20487  0040AA  5C06               	subwf	i2___lwdiv@dividend,w,c
 20488  0040AC  5009               	movf	i2___lwdiv@divisor+1,w,c
 20489  0040AE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20490  0040B0  A0D8               	btfss	status,0,c
 20491  0040B2  D005               	goto	i2l5396
 20492  0040B4  5008               	movf	i2___lwdiv@divisor,w,c
 20493  0040B6  5E06               	subwf	i2___lwdiv@dividend,f,c
 20494  0040B8  5009               	movf	i2___lwdiv@divisor+1,w,c
 20495  0040BA  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20496  0040BC  800A               	bsf	i2___lwdiv@quotient,0,c
 20497  0040BE                     i2l5396:
 20498  0040BE  90D8               	bcf	status,0,c
 20499  0040C0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20500  0040C2  3208               	rrcf	i2___lwdiv@divisor,f,c
 20501  0040C4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20502  0040C6  D7ED               	goto	i2l5388
 20503  0040C8                     i2l1709:
 20504  0040C8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20505  0040CC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20506  0040D0  0012               	return		;funcret
 20507  0040D2                     __end_ofi2___lwdiv:
 20508                           	opt stack 0
 20509                           pclatu	equ	0xFFB
 20510                           pclath	equ	0xFFA
 20511                           tblptru	equ	0xFF8
 20512                           tblptrh	equ	0xFF7
 20513                           tblptrl	equ	0xFF6
 20514                           tablat	equ	0xFF5
 20515                           prodh	equ	0xFF4
 20516                           prodl	equ	0xFF3
 20517                           intcon	equ	0xFF2
 20518                           intcon2	equ	0xFF1
 20519                           intcon3	equ	0xFF0
 20520                           indf0	equ	0xFEF
 20521                           postinc0	equ	0xFEE
 20522                           fsr0h	equ	0xFEA
 20523                           fsr0l	equ	0xFE9
 20524                           wreg	equ	0xFE8
 20525                           postdec1	equ	0xFE5
 20526                           fsr1h	equ	0xFE2
 20527                           fsr1l	equ	0xFE1
 20528                           indf2	equ	0xFDF
 20529                           postinc2	equ	0xFDE
 20530                           postdec2	equ	0xFDD
 20531                           fsr2h	equ	0xFDA
 20532                           fsr2l	equ	0xFD9
 20533                           status	equ	0xFD8
 20534                           
 20535 ;; *************** function i2_lcdInst *****************
 20536 ;; Defined at:
 20537 ;;		line 15 in file "lcd.c"
 20538 ;; Parameters:    Size  Location     Type
 20539 ;;  data            1    wreg     unsigned char 
 20540 ;; Auto vars:     Size  Location     Type
 20541 ;;  data            1    2[COMRAM] unsigned char 
 20542 ;; Return value:  Size  Location     Type
 20543 ;;                  1    wreg      void 
 20544 ;; Registers used:
 20545 ;;		wreg, status,2, status,0, cstack
 20546 ;; Tracked objects:
 20547 ;;		On entry : 0/0
 20548 ;;		On exit  : 0/0
 20549 ;;		Unchanged: 0/0
 20550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20554 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20555 ;;Total ram usage:        1 bytes
 20556 ;; Hardware stack levels used:    1
 20557 ;; Hardware stack levels required when called:    1
 20558 ;; This function calls:
 20559 ;;		i2_lcdNibble
 20560 ;; This function is called by:
 20561 ;;		_change_state_to_menu_11
 20562 ;;		_change_state_to_menu_23
 20563 ;;		_change_state_to_logs_11
 20564 ;;		_change_state_to_logs_12
 20565 ;;		_change_state_to_logs_22
 20566 ;;		_change_state_to_logs_23
 20567 ;;		_change_state_to_logs_33
 20568 ;;		_change_state_to_logs_34
 20569 ;;		_printSortTimer
 20570 ;;		i2_change_state_to_menu_start
 20571 ;;		i2_change_state_to_menu_12
 20572 ;;		i2_change_state_to_menu_22
 20573 ;;		i2_printRTC
 20574 ;; This function uses a non-reentrant model
 20575 ;;
 20576                           
 20577                           	psect	text84
 20578  0047F4                     __ptext84:
 20579                           	opt stack 0
 20580  0047F4                     i2_lcdInst:
 20581                           	opt stack 19
 20582                           
 20583                           ;incstack = 0
 20584                           ;i2lcdInst@data stored from wreg
 20585  0047F4  6E03               	movwf	i2lcdInst@data,c
 20586                           
 20587                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20588  0047F6  948C               	bcf	3980,2,c	;volatile
 20589                           
 20590                           ;lcd.c: 17: lcdNibble(data);
 20591  0047F8  5003               	movf	i2lcdInst@data,w,c
 20592  0047FA  ECEB  F01F         	call	i2_lcdNibble
 20593  0047FE  0012               	return		;funcret
 20594  004800                     __end_ofi2_lcdInst:
 20595                           	opt stack 0
 20596                           pclatu	equ	0xFFB
 20597                           pclath	equ	0xFFA
 20598                           tblptru	equ	0xFF8
 20599                           tblptrh	equ	0xFF7
 20600                           tblptrl	equ	0xFF6
 20601                           tablat	equ	0xFF5
 20602                           prodh	equ	0xFF4
 20603                           prodl	equ	0xFF3
 20604                           intcon	equ	0xFF2
 20605                           intcon2	equ	0xFF1
 20606                           intcon3	equ	0xFF0
 20607                           indf0	equ	0xFEF
 20608                           postinc0	equ	0xFEE
 20609                           fsr0h	equ	0xFEA
 20610                           fsr0l	equ	0xFE9
 20611                           wreg	equ	0xFE8
 20612                           postdec1	equ	0xFE5
 20613                           fsr1h	equ	0xFE2
 20614                           fsr1l	equ	0xFE1
 20615                           indf2	equ	0xFDF
 20616                           postinc2	equ	0xFDE
 20617                           postdec2	equ	0xFDD
 20618                           fsr2h	equ	0xFDA
 20619                           fsr2l	equ	0xFD9
 20620                           status	equ	0xFD8
 20621                           
 20622 ;; *************** function i2_lcdNibble *****************
 20623 ;; Defined at:
 20624 ;;		line 25 in file "lcd.c"
 20625 ;; Parameters:    Size  Location     Type
 20626 ;;  data            1    wreg     unsigned char 
 20627 ;; Auto vars:     Size  Location     Type
 20628 ;;  data            1    1[COMRAM] unsigned char 
 20629 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20630 ;; Return value:  Size  Location     Type
 20631 ;;                  1    wreg      void 
 20632 ;; Registers used:
 20633 ;;		wreg, status,2, status,0
 20634 ;; Tracked objects:
 20635 ;;		On entry : 0/0
 20636 ;;		On exit  : 0/0
 20637 ;;		Unchanged: 0/0
 20638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20643 ;;Total ram usage:        2 bytes
 20644 ;; Hardware stack levels used:    1
 20645 ;; This function calls:
 20646 ;;		Nothing
 20647 ;; This function is called by:
 20648 ;;		i2_lcdInst
 20649 ;;		i2_putch
 20650 ;; This function uses a non-reentrant model
 20651 ;;
 20652                           
 20653                           	psect	text85
 20654  003FD6                     __ptext85:
 20655                           	opt stack 0
 20656  003FD6                     i2_lcdNibble:
 20657                           	opt stack 19
 20658                           
 20659                           ;incstack = 0
 20660                           ;i2lcdNibble@data stored from wreg
 20661  003FD6  6E02               	movwf	i2lcdNibble@data,c
 20662                           
 20663                           ;lcd.c: 27: char temp = data & 0xF0;
 20664  003FD8  5002               	movf	i2lcdNibble@data,w,c
 20665  003FDA  0BF0               	andlw	240
 20666  003FDC  6E01               	movwf	i2lcdNibble@temp,c
 20667                           
 20668                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20669  003FDE  508C               	movf	3980,w,c	;volatile
 20670  003FE0  0B0F               	andlw	15
 20671  003FE2  6E8C               	movwf	3980,c	;volatile
 20672                           
 20673                           ;lcd.c: 29: LATD = temp | LATD;
 20674  003FE4  5001               	movf	i2lcdNibble@temp,w,c
 20675  003FE6  108C               	iorwf	3980,w,c	;volatile
 20676  003FE8  6E8C               	movwf	3980,c	;volatile
 20677                           
 20678                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20679  003FEA  868C               	bsf	3980,3,c	;volatile
 20680                           
 20681                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20682  003FEC  0E42               	movlw	66
 20683  003FEE                     i2u832_47:
 20684  003FEE  2EE8               	decfsz	wreg,f,c
 20685  003FF0  D7FE               	bra	i2u832_47
 20686  003FF2  D000               	nop2	
 20687                           
 20688                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20689  003FF4  968C               	bcf	3980,3,c	;volatile
 20690                           
 20691                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20692  003FF6  0E42               	movlw	66
 20693  003FF8                     i2u833_47:
 20694  003FF8  2EE8               	decfsz	wreg,f,c
 20695  003FFA  D7FE               	bra	i2u833_47
 20696  003FFC  D000               	nop2	
 20697                           
 20698                           ;lcd.c: 36: data = data << 4;
 20699  003FFE  3802               	swapf	i2lcdNibble@data,w,c
 20700  004000  0BF0               	andlw	240
 20701  004002  6E02               	movwf	i2lcdNibble@data,c
 20702                           
 20703                           ;lcd.c: 38: temp = data & 0xF0;
 20704  004004  5002               	movf	i2lcdNibble@data,w,c
 20705  004006  0BF0               	andlw	240
 20706  004008  6E01               	movwf	i2lcdNibble@temp,c
 20707                           
 20708                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20709  00400A  508C               	movf	3980,w,c	;volatile
 20710  00400C  0B0F               	andlw	15
 20711  00400E  6E8C               	movwf	3980,c	;volatile
 20712                           
 20713                           ;lcd.c: 40: LATD = temp | LATD;
 20714  004010  5001               	movf	i2lcdNibble@temp,w,c
 20715  004012  108C               	iorwf	3980,w,c	;volatile
 20716  004014  6E8C               	movwf	3980,c	;volatile
 20717                           
 20718                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20719  004016  868C               	bsf	3980,3,c	;volatile
 20720                           
 20721                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20722  004018  0E42               	movlw	66
 20723  00401A                     i2u834_47:
 20724  00401A  2EE8               	decfsz	wreg,f,c
 20725  00401C  D7FE               	bra	i2u834_47
 20726  00401E  D000               	nop2	
 20727                           
 20728                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20729  004020  968C               	bcf	3980,3,c	;volatile
 20730                           
 20731                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20732  004022  0E42               	movlw	66
 20733  004024                     i2u835_47:
 20734  004024  2EE8               	decfsz	wreg,f,c
 20735  004026  D7FE               	bra	i2u835_47
 20736  004028  D000               	nop2	
 20737  00402A  0012               	return		;funcret
 20738  00402C                     __end_ofi2_lcdNibble:
 20739                           	opt stack 0
 20740                           pclatu	equ	0xFFB
 20741                           pclath	equ	0xFFA
 20742                           tblptru	equ	0xFF8
 20743                           tblptrh	equ	0xFF7
 20744                           tblptrl	equ	0xFF6
 20745                           tablat	equ	0xFF5
 20746                           prodh	equ	0xFF4
 20747                           prodl	equ	0xFF3
 20748                           intcon	equ	0xFF2
 20749                           intcon2	equ	0xFF1
 20750                           intcon3	equ	0xFF0
 20751                           indf0	equ	0xFEF
 20752                           postinc0	equ	0xFEE
 20753                           fsr0h	equ	0xFEA
 20754                           fsr0l	equ	0xFE9
 20755                           wreg	equ	0xFE8
 20756                           postdec1	equ	0xFE5
 20757                           fsr1h	equ	0xFE2
 20758                           fsr1l	equ	0xFE1
 20759                           indf2	equ	0xFDF
 20760                           postinc2	equ	0xFDE
 20761                           postdec2	equ	0xFDD
 20762                           fsr2h	equ	0xFDA
 20763                           fsr2l	equ	0xFD9
 20764                           status	equ	0xFD8
 20765                           
 20766 ;; *************** function i2_getRTC *****************
 20767 ;; Defined at:
 20768 ;;		line 44 in file "RTC.c"
 20769 ;; Parameters:    Size  Location     Type
 20770 ;;		None
 20771 ;; Auto vars:     Size  Location     Type
 20772 ;;  getRTC          2    3[COMRAM] int 
 20773 ;; Return value:  Size  Location     Type
 20774 ;;                  1    wreg      void 
 20775 ;; Registers used:
 20776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20777 ;; Tracked objects:
 20778 ;;		On entry : 0/0
 20779 ;;		On exit  : 0/0
 20780 ;;		Unchanged: 0/0
 20781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;Total ram usage:        2 bytes
 20787 ;; Hardware stack levels used:    1
 20788 ;; Hardware stack levels required when called:    2
 20789 ;; This function calls:
 20790 ;;		i2_I2C_Master_Read
 20791 ;;		i2_I2C_Master_Start
 20792 ;;		i2_I2C_Master_Stop
 20793 ;;		i2_I2C_Master_Write
 20794 ;; This function is called by:
 20795 ;;		_printSortTimer
 20796 ;;		i2_printRTC
 20797 ;; This function uses a non-reentrant model
 20798 ;;
 20799                           
 20800                           	psect	text86
 20801  003CBE                     __ptext86:
 20802                           	opt stack 0
 20803  003CBE                     i2_getRTC:
 20804                           	opt stack 18
 20805                           
 20806                           ;RTC.c: 48: I2C_Master_Start();
 20807                           
 20808                           ;incstack = 0
 20809  003CBE  EC1A  F024         	call	i2_I2C_Master_Start	;wreg free
 20810                           
 20811                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20812  003CC2  0E00               	movlw	0
 20813  003CC4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20814  003CC6  0ED0               	movlw	208
 20815  003CC8  6E02               	movwf	i2I2C_Master_Write@d,c
 20816  003CCA  EC05  F024         	call	i2_I2C_Master_Write	;wreg free
 20817                           
 20818                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20819  003CCE  0E00               	movlw	0
 20820  003CD0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20821  003CD2  0E00               	movlw	0
 20822  003CD4  6E02               	movwf	i2I2C_Master_Write@d,c
 20823  003CD6  EC05  F024         	call	i2_I2C_Master_Write	;wreg free
 20824                           
 20825                           ;RTC.c: 51: I2C_Master_Stop();
 20826  003CDA  EC16  F024         	call	i2_I2C_Master_Stop	;wreg free
 20827                           
 20828                           ;RTC.c: 54: I2C_Master_Start();
 20829  003CDE  EC1A  F024         	call	i2_I2C_Master_Start	;wreg free
 20830                           
 20831                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20832  003CE2  0E00               	movlw	0
 20833  003CE4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20834  003CE6  0ED1               	movlw	209
 20835  003CE8  6E02               	movwf	i2I2C_Master_Write@d,c
 20836  003CEA  EC05  F024         	call	i2_I2C_Master_Write	;wreg free
 20837                           
 20838                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20839  003CEE  0E00               	movlw	0
 20840  003CF0  6E05               	movwf	i2getRTC@i+1,c
 20841  003CF2  0E00               	movlw	0
 20842  003CF4  6E04               	movwf	i2getRTC@i,c
 20843  003CF6                     i2l5642:
 20844  003CF6  BE05               	btfsc	i2getRTC@i+1,7,c
 20845  003CF8  D006               	goto	i2l5646
 20846  003CFA  5005               	movf	i2getRTC@i+1,w,c
 20847  003CFC  E111               	bnz	i2l5652
 20848  003CFE  0E06               	movlw	6
 20849  003D00  5C04               	subwf	i2getRTC@i,w,c
 20850  003D02  B0D8               	btfsc	status,0,c
 20851  003D04  D00D               	goto	i2l5652
 20852  003D06                     i2l5646:
 20853                           
 20854                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20855  003D06  0E24               	movlw	low _time
 20856  003D08  2404               	addwf	i2getRTC@i,w,c
 20857  003D0A  6ED9               	movwf	fsr2l,c
 20858  003D0C  0E01               	movlw	high _time
 20859  003D0E  2005               	addwfc	i2getRTC@i+1,w,c
 20860  003D10  6EDA               	movwf	fsr2h,c
 20861  003D12  0E01               	movlw	1
 20862  003D14  EC59  F023         	call	i2_I2C_Master_Read
 20863  003D18  6EDF               	movwf	indf2,c
 20864  003D1A  4A04               	infsnz	i2getRTC@i,f,c
 20865  003D1C  2A05               	incf	i2getRTC@i+1,f,c
 20866  003D1E  D7EB               	goto	i2l5642
 20867  003D20                     i2l5652:
 20868                           
 20869                           ;RTC.c: 58: }
 20870                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20871  003D20  0E00               	movlw	0
 20872  003D22  EC59  F023         	call	i2_I2C_Master_Read
 20873  003D26  0101               	movlb	1	; () banked
 20874  003D28  6F2A               	movwf	(_time+6)& (0+255),b
 20875                           
 20876                           ;RTC.c: 60: I2C_Master_Stop();
 20877  003D2A  EC16  F024         	call	i2_I2C_Master_Stop	;wreg free
 20878  003D2E  0012               	return		;funcret
 20879  003D30                     __end_ofi2_getRTC:
 20880                           	opt stack 0
 20881                           pclatu	equ	0xFFB
 20882                           pclath	equ	0xFFA
 20883                           tblptru	equ	0xFF8
 20884                           tblptrh	equ	0xFF7
 20885                           tblptrl	equ	0xFF6
 20886                           tablat	equ	0xFF5
 20887                           prodh	equ	0xFF4
 20888                           prodl	equ	0xFF3
 20889                           intcon	equ	0xFF2
 20890                           intcon2	equ	0xFF1
 20891                           intcon3	equ	0xFF0
 20892                           indf0	equ	0xFEF
 20893                           postinc0	equ	0xFEE
 20894                           fsr0h	equ	0xFEA
 20895                           fsr0l	equ	0xFE9
 20896                           wreg	equ	0xFE8
 20897                           postdec1	equ	0xFE5
 20898                           fsr1h	equ	0xFE2
 20899                           fsr1l	equ	0xFE1
 20900                           indf2	equ	0xFDF
 20901                           postinc2	equ	0xFDE
 20902                           postdec2	equ	0xFDD
 20903                           fsr2h	equ	0xFDA
 20904                           fsr2l	equ	0xFD9
 20905                           status	equ	0xFD8
 20906                           
 20907 ;; *************** function i2_I2C_Master_Write *****************
 20908 ;; Defined at:
 20909 ;;		line 49 in file "I2C.c"
 20910 ;; Parameters:    Size  Location     Type
 20911 ;;  d               2    1[COMRAM] unsigned int 
 20912 ;; Auto vars:     Size  Location     Type
 20913 ;;		None
 20914 ;; Return value:  Size  Location     Type
 20915 ;;                  1    wreg      void 
 20916 ;; Registers used:
 20917 ;;		wreg, status,2, status,0, cstack
 20918 ;; Tracked objects:
 20919 ;;		On entry : 0/0
 20920 ;;		On exit  : 0/0
 20921 ;;		Unchanged: 0/0
 20922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20923 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20927 ;;Total ram usage:        2 bytes
 20928 ;; Hardware stack levels used:    1
 20929 ;; Hardware stack levels required when called:    1
 20930 ;; This function calls:
 20931 ;;		i2_I2C_Master_Wait
 20932 ;; This function is called by:
 20933 ;;		i2_getRTC
 20934 ;; This function uses a non-reentrant model
 20935 ;;
 20936                           
 20937                           	psect	text87
 20938  00480A                     __ptext87:
 20939                           	opt stack 0
 20940  00480A                     i2_I2C_Master_Write:
 20941                           	opt stack 18
 20942                           
 20943                           ;I2C.c: 51: I2C_Master_Wait();
 20944                           
 20945                           ;incstack = 0
 20946  00480A  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 20947                           
 20948                           ;I2C.c: 52: SSPBUF = d;
 20949  00480E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20950  004812  0012               	return		;funcret
 20951  004814                     __end_ofi2_I2C_Master_Write:
 20952                           	opt stack 0
 20953                           pclatu	equ	0xFFB
 20954                           pclath	equ	0xFFA
 20955                           tblptru	equ	0xFF8
 20956                           tblptrh	equ	0xFF7
 20957                           tblptrl	equ	0xFF6
 20958                           tablat	equ	0xFF5
 20959                           prodh	equ	0xFF4
 20960                           prodl	equ	0xFF3
 20961                           intcon	equ	0xFF2
 20962                           intcon2	equ	0xFF1
 20963                           intcon3	equ	0xFF0
 20964                           indf0	equ	0xFEF
 20965                           postinc0	equ	0xFEE
 20966                           fsr0h	equ	0xFEA
 20967                           fsr0l	equ	0xFE9
 20968                           wreg	equ	0xFE8
 20969                           postdec1	equ	0xFE5
 20970                           fsr1h	equ	0xFE2
 20971                           fsr1l	equ	0xFE1
 20972                           indf2	equ	0xFDF
 20973                           postinc2	equ	0xFDE
 20974                           postdec2	equ	0xFDD
 20975                           fsr2h	equ	0xFDA
 20976                           fsr2l	equ	0xFD9
 20977                           status	equ	0xFD8
 20978                           
 20979 ;; *************** function i2_I2C_Master_Stop *****************
 20980 ;; Defined at:
 20981 ;;		line 43 in file "I2C.c"
 20982 ;; Parameters:    Size  Location     Type
 20983 ;;		None
 20984 ;; Auto vars:     Size  Location     Type
 20985 ;;		None
 20986 ;; Return value:  Size  Location     Type
 20987 ;;                  1    wreg      void 
 20988 ;; Registers used:
 20989 ;;		wreg, status,2, status,0, cstack
 20990 ;; Tracked objects:
 20991 ;;		On entry : 0/0
 20992 ;;		On exit  : 0/0
 20993 ;;		Unchanged: 0/0
 20994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20999 ;;Total ram usage:        0 bytes
 21000 ;; Hardware stack levels used:    1
 21001 ;; Hardware stack levels required when called:    1
 21002 ;; This function calls:
 21003 ;;		i2_I2C_Master_Wait
 21004 ;; This function is called by:
 21005 ;;		i2_getRTC
 21006 ;; This function uses a non-reentrant model
 21007 ;;
 21008                           
 21009                           	psect	text88
 21010  00482C                     __ptext88:
 21011                           	opt stack 0
 21012  00482C                     i2_I2C_Master_Stop:
 21013                           	opt stack 18
 21014                           
 21015                           ;I2C.c: 45: I2C_Master_Wait();
 21016                           
 21017                           ;incstack = 0
 21018  00482C  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21019                           
 21020                           ;I2C.c: 46: PEN = 1;
 21021  004830  84C5               	bsf	4037,2,c	;volatile
 21022  004832  0012               	return		;funcret
 21023  004834                     __end_ofi2_I2C_Master_Stop:
 21024                           	opt stack 0
 21025                           pclatu	equ	0xFFB
 21026                           pclath	equ	0xFFA
 21027                           tblptru	equ	0xFF8
 21028                           tblptrh	equ	0xFF7
 21029                           tblptrl	equ	0xFF6
 21030                           tablat	equ	0xFF5
 21031                           prodh	equ	0xFF4
 21032                           prodl	equ	0xFF3
 21033                           intcon	equ	0xFF2
 21034                           intcon2	equ	0xFF1
 21035                           intcon3	equ	0xFF0
 21036                           indf0	equ	0xFEF
 21037                           postinc0	equ	0xFEE
 21038                           fsr0h	equ	0xFEA
 21039                           fsr0l	equ	0xFE9
 21040                           wreg	equ	0xFE8
 21041                           postdec1	equ	0xFE5
 21042                           fsr1h	equ	0xFE2
 21043                           fsr1l	equ	0xFE1
 21044                           indf2	equ	0xFDF
 21045                           postinc2	equ	0xFDE
 21046                           postdec2	equ	0xFDD
 21047                           fsr2h	equ	0xFDA
 21048                           fsr2l	equ	0xFD9
 21049                           status	equ	0xFD8
 21050                           
 21051 ;; *************** function i2_I2C_Master_Start *****************
 21052 ;; Defined at:
 21053 ;;		line 31 in file "I2C.c"
 21054 ;; Parameters:    Size  Location     Type
 21055 ;;		None
 21056 ;; Auto vars:     Size  Location     Type
 21057 ;;		None
 21058 ;; Return value:  Size  Location     Type
 21059 ;;                  1    wreg      void 
 21060 ;; Registers used:
 21061 ;;		wreg, status,2, status,0, cstack
 21062 ;; Tracked objects:
 21063 ;;		On entry : 0/0
 21064 ;;		On exit  : 0/0
 21065 ;;		Unchanged: 0/0
 21066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;Total ram usage:        0 bytes
 21072 ;; Hardware stack levels used:    1
 21073 ;; Hardware stack levels required when called:    1
 21074 ;; This function calls:
 21075 ;;		i2_I2C_Master_Wait
 21076 ;; This function is called by:
 21077 ;;		i2_getRTC
 21078 ;; This function uses a non-reentrant model
 21079 ;;
 21080                           
 21081                           	psect	text89
 21082  004834                     __ptext89:
 21083                           	opt stack 0
 21084  004834                     i2_I2C_Master_Start:
 21085                           	opt stack 18
 21086                           
 21087                           ;I2C.c: 33: I2C_Master_Wait();
 21088                           
 21089                           ;incstack = 0
 21090  004834  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21091                           
 21092                           ;I2C.c: 34: SEN = 1;
 21093  004838  80C5               	bsf	4037,0,c	;volatile
 21094  00483A  0012               	return		;funcret
 21095  00483C                     __end_ofi2_I2C_Master_Start:
 21096                           	opt stack 0
 21097                           pclatu	equ	0xFFB
 21098                           pclath	equ	0xFFA
 21099                           tblptru	equ	0xFF8
 21100                           tblptrh	equ	0xFF7
 21101                           tblptrl	equ	0xFF6
 21102                           tablat	equ	0xFF5
 21103                           prodh	equ	0xFF4
 21104                           prodl	equ	0xFF3
 21105                           intcon	equ	0xFF2
 21106                           intcon2	equ	0xFF1
 21107                           intcon3	equ	0xFF0
 21108                           indf0	equ	0xFEF
 21109                           postinc0	equ	0xFEE
 21110                           fsr0h	equ	0xFEA
 21111                           fsr0l	equ	0xFE9
 21112                           wreg	equ	0xFE8
 21113                           postdec1	equ	0xFE5
 21114                           fsr1h	equ	0xFE2
 21115                           fsr1l	equ	0xFE1
 21116                           indf2	equ	0xFDF
 21117                           postinc2	equ	0xFDE
 21118                           postdec2	equ	0xFDD
 21119                           fsr2h	equ	0xFDA
 21120                           fsr2l	equ	0xFD9
 21121                           status	equ	0xFD8
 21122                           
 21123 ;; *************** function i2_I2C_Master_Read *****************
 21124 ;; Defined at:
 21125 ;;		line 55 in file "I2C.c"
 21126 ;; Parameters:    Size  Location     Type
 21127 ;;  a               1    wreg     unsigned char 
 21128 ;; Auto vars:     Size  Location     Type
 21129 ;;  a               1    1[COMRAM] unsigned char 
 21130 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21131 ;; Return value:  Size  Location     Type
 21132 ;;                  1    wreg      unsigned char 
 21133 ;; Registers used:
 21134 ;;		wreg, status,2, status,0, cstack
 21135 ;; Tracked objects:
 21136 ;;		On entry : 0/0
 21137 ;;		On exit  : 0/0
 21138 ;;		Unchanged: 0/0
 21139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21144 ;;Total ram usage:        2 bytes
 21145 ;; Hardware stack levels used:    1
 21146 ;; Hardware stack levels required when called:    1
 21147 ;; This function calls:
 21148 ;;		i2_I2C_Master_Wait
 21149 ;; This function is called by:
 21150 ;;		i2_getRTC
 21151 ;; This function uses a non-reentrant model
 21152 ;;
 21153                           
 21154                           	psect	text90
 21155  0046B2                     __ptext90:
 21156                           	opt stack 0
 21157  0046B2                     i2_I2C_Master_Read:
 21158                           	opt stack 18
 21159                           
 21160                           ;incstack = 0
 21161                           ;i2I2C_Master_Read@a stored from wreg
 21162  0046B2  6E02               	movwf	i2I2C_Master_Read@a,c
 21163                           
 21164                           ;I2C.c: 57: unsigned char temp;
 21165                           ;I2C.c: 58: I2C_Master_Wait();
 21166  0046B4  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21167                           
 21168                           ;I2C.c: 59: RCEN = 1;
 21169  0046B8  86C5               	bsf	4037,3,c	;volatile
 21170                           
 21171                           ;I2C.c: 60: I2C_Master_Wait();
 21172  0046BA  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21173                           
 21174                           ;I2C.c: 61: temp = SSPBUF;
 21175  0046BE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21176                           
 21177                           ;I2C.c: 62: I2C_Master_Wait();
 21178  0046C2  ECDB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21179                           
 21180                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21181  0046C6  5002               	movf	i2I2C_Master_Read@a,w,c
 21182  0046C8  A4D8               	btfss	status,2,c
 21183  0046CA  D002               	goto	i2u370_40
 21184  0046CC  8AC5               	bsf	4037,5,c	;volatile
 21185  0046CE  D001               	goto	i2l5350
 21186  0046D0                     i2u370_40:
 21187  0046D0  9AC5               	bcf	4037,5,c	;volatile
 21188  0046D2                     i2l5350:
 21189                           
 21190                           ;I2C.c: 64: ACKEN = 1;
 21191  0046D2  88C5               	bsf	4037,4,c	;volatile
 21192                           
 21193                           ;I2C.c: 65: return temp;
 21194  0046D4  5003               	movf	i2I2C_Master_Read@temp,w,c
 21195  0046D6  0012               	return	
 21196  0046D8                     __end_ofi2_I2C_Master_Read:
 21197                           	opt stack 0
 21198                           pclatu	equ	0xFFB
 21199                           pclath	equ	0xFFA
 21200                           tblptru	equ	0xFF8
 21201                           tblptrh	equ	0xFF7
 21202                           tblptrl	equ	0xFF6
 21203                           tablat	equ	0xFF5
 21204                           prodh	equ	0xFF4
 21205                           prodl	equ	0xFF3
 21206                           intcon	equ	0xFF2
 21207                           intcon2	equ	0xFF1
 21208                           intcon3	equ	0xFF0
 21209                           indf0	equ	0xFEF
 21210                           postinc0	equ	0xFEE
 21211                           fsr0h	equ	0xFEA
 21212                           fsr0l	equ	0xFE9
 21213                           wreg	equ	0xFE8
 21214                           postdec1	equ	0xFE5
 21215                           fsr1h	equ	0xFE2
 21216                           fsr1l	equ	0xFE1
 21217                           indf2	equ	0xFDF
 21218                           postinc2	equ	0xFDE
 21219                           postdec2	equ	0xFDD
 21220                           fsr2h	equ	0xFDA
 21221                           fsr2l	equ	0xFD9
 21222                           status	equ	0xFD8
 21223                           
 21224 ;; *************** function i2_I2C_Master_Wait *****************
 21225 ;; Defined at:
 21226 ;;		line 26 in file "I2C.c"
 21227 ;; Parameters:    Size  Location     Type
 21228 ;;		None
 21229 ;; Auto vars:     Size  Location     Type
 21230 ;;		None
 21231 ;; Return value:  Size  Location     Type
 21232 ;;                  1    wreg      void 
 21233 ;; Registers used:
 21234 ;;		wreg, status,2, status,0
 21235 ;; Tracked objects:
 21236 ;;		On entry : 0/0
 21237 ;;		On exit  : 0/0
 21238 ;;		Unchanged: 0/0
 21239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21244 ;;Total ram usage:        1 bytes
 21245 ;; Hardware stack levels used:    1
 21246 ;; This function calls:
 21247 ;;		Nothing
 21248 ;; This function is called by:
 21249 ;;		i2_I2C_Master_Start
 21250 ;;		i2_I2C_Master_Stop
 21251 ;;		i2_I2C_Master_Write
 21252 ;;		i2_I2C_Master_Read
 21253 ;; This function uses a non-reentrant model
 21254 ;;
 21255                           
 21256                           	psect	text91
 21257  0047B6                     __ptext91:
 21258                           	opt stack 0
 21259  0047B6                     i2_I2C_Master_Wait:
 21260                           	opt stack 18
 21261  0047B6                     i2l66:
 21262  0047B6  B4C7               	btfsc	4039,2,c	;volatile
 21263  0047B8  D7FE               	goto	i2l66
 21264  0047BA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21265  0047BE  0E1F               	movlw	31
 21266  0047C0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21267  0047C2  B4D8               	btfsc	status,2,c
 21268  0047C4  0012               	return	
 21269  0047C6  D7F7               	goto	i2l66
 21270  0047C8                     __end_ofi2_I2C_Master_Wait:
 21271                           	opt stack 0
 21272                           pclatu	equ	0xFFB
 21273                           pclath	equ	0xFFA
 21274                           tblptru	equ	0xFF8
 21275                           tblptrh	equ	0xFF7
 21276                           tblptrl	equ	0xFF6
 21277                           tablat	equ	0xFF5
 21278                           prodh	equ	0xFF4
 21279                           prodl	equ	0xFF3
 21280                           intcon	equ	0xFF2
 21281                           intcon2	equ	0xFF1
 21282                           intcon3	equ	0xFF0
 21283                           indf0	equ	0xFEF
 21284                           postinc0	equ	0xFEE
 21285                           fsr0h	equ	0xFEA
 21286                           fsr0l	equ	0xFE9
 21287                           wreg	equ	0xFE8
 21288                           postdec1	equ	0xFE5
 21289                           fsr1h	equ	0xFE2
 21290                           fsr1l	equ	0xFE1
 21291                           indf2	equ	0xFDF
 21292                           postinc2	equ	0xFDE
 21293                           postdec2	equ	0xFDD
 21294                           fsr2h	equ	0xFDA
 21295                           fsr2l	equ	0xFD9
 21296                           status	equ	0xFD8
 21297                           pclatu	equ	0xFFB
 21298                           pclath	equ	0xFFA
 21299                           tblptru	equ	0xFF8
 21300                           tblptrh	equ	0xFF7
 21301                           tblptrl	equ	0xFF6
 21302                           tablat	equ	0xFF5
 21303                           prodh	equ	0xFF4
 21304                           prodl	equ	0xFF3
 21305                           intcon	equ	0xFF2
 21306                           intcon2	equ	0xFF1
 21307                           intcon3	equ	0xFF0
 21308                           indf0	equ	0xFEF
 21309                           postinc0	equ	0xFEE
 21310                           fsr0h	equ	0xFEA
 21311                           fsr0l	equ	0xFE9
 21312                           wreg	equ	0xFE8
 21313                           postdec1	equ	0xFE5
 21314                           fsr1h	equ	0xFE2
 21315                           fsr1l	equ	0xFE1
 21316                           indf2	equ	0xFDF
 21317                           postinc2	equ	0xFDE
 21318                           postdec2	equ	0xFDD
 21319                           fsr2h	equ	0xFDA
 21320                           fsr2l	equ	0xFD9
 21321                           status	equ	0xFD8
 21322                           
 21323                           	psect	rparam
 21324  0000                     pclatu	equ	0xFFB
 21325                           pclath	equ	0xFFA
 21326                           tblptru	equ	0xFF8
 21327                           tblptrh	equ	0xFF7
 21328                           tblptrl	equ	0xFF6
 21329                           tablat	equ	0xFF5
 21330                           prodh	equ	0xFF4
 21331                           prodl	equ	0xFF3
 21332                           intcon	equ	0xFF2
 21333                           intcon2	equ	0xFF1
 21334                           intcon3	equ	0xFF0
 21335                           indf0	equ	0xFEF
 21336                           postinc0	equ	0xFEE
 21337                           fsr0h	equ	0xFEA
 21338                           fsr0l	equ	0xFE9
 21339                           wreg	equ	0xFE8
 21340                           postdec1	equ	0xFE5
 21341                           fsr1h	equ	0xFE2
 21342                           fsr1l	equ	0xFE1
 21343                           indf2	equ	0xFDF
 21344                           postinc2	equ	0xFDE
 21345                           postdec2	equ	0xFDD
 21346                           fsr2h	equ	0xFDA
 21347                           fsr2l	equ	0xFD9
 21348                           status	equ	0xFD8
 21349                           
 21350                           	psect	temp
 21351  00007E                     btemp:
 21352                           	opt stack 0
 21353  00007E                     	ds	1
 21354  0000                     int$flags	set	btemp
 21355                           pclatu	equ	0xFFB
 21356                           pclath	equ	0xFFA
 21357                           tblptru	equ	0xFF8
 21358                           tblptrh	equ	0xFF7
 21359                           tblptrl	equ	0xFF6
 21360                           tablat	equ	0xFF5
 21361                           prodh	equ	0xFF4
 21362                           prodl	equ	0xFF3
 21363                           intcon	equ	0xFF2
 21364                           intcon2	equ	0xFF1
 21365                           intcon3	equ	0xFF0
 21366                           indf0	equ	0xFEF
 21367                           postinc0	equ	0xFEE
 21368                           fsr0h	equ	0xFEA
 21369                           fsr0l	equ	0xFE9
 21370                           wreg	equ	0xFE8
 21371                           postdec1	equ	0xFE5
 21372                           fsr1h	equ	0xFE2
 21373                           fsr1l	equ	0xFE1
 21374                           indf2	equ	0xFDF
 21375                           postinc2	equ	0xFDE
 21376                           postdec2	equ	0xFDD
 21377                           fsr2h	equ	0xFDA
 21378                           fsr2l	equ	0xFD9
 21379                           status	equ	0xFD8


Data Sizes:
    Strings     1215
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_116(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176918
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   19850
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0   15496
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4101
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10722
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9975
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21840
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20926
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43432
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12647
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79961
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8391
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13623
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8304
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           3     3      0    8325
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8279
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16481
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8144
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4101
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4101
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 22 17:35:30 2017

                                    _i 012D                     i2_I2C_Master_Start 4834  
                   i2_I2C_Master_Write 480A                                     l66 47A2  
                                   _ID 2F2C                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FDE                                    l730 2B90  
                                  l487 364A                                    l752 303C  
                                  l753 3056                                    l739 2C3C  
                                  l932 3414                                    l945 476E  
                                  l954 31AE                                    l798 3C84  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 4440  
      __end_of_change_state_to_menu_12 42B0        __end_of_change_state_to_menu_22 4278  
      __end_of_change_state_to_menu_23 4410           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4530  
      __end_of_change_state_to_logs_12 4500        __end_of_change_state_to_logs_22 44D0  
      __end_of_change_state_to_logs_23 45BA        __end_of_change_state_to_logs_33 44A0  
      __end_of_change_state_to_logs_34 4470                                   ??_ID 0088  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1100 007C  
                                 l1110 018C                                   l1111 01DA  
                                 l1103 0080                                   l1112 0240  
                                 l1113 028E                                   l1202 3B82  
                                 l1042 3348                                   l1107 0126  
                                 l1045 3368                                   l1207 3BB0  
                                 l1209 3BCA                                   l1225 3A44  
                                 l1217 3A10                                   l1137 05E8  
                                 l1065 3534                                   l1154 0858  
                                 l1074 1C88                                   l1171 3AEC  
                                 l1068 3538                                   l1173 3AF0  
                                 l1149 0782                                   l1077 1C8C  
                                 l1262 13B6                                   l1174 3AF4  
                                 l1175 3AF8                                   l1167 3AD0  
                                 l1176 3AFC                                   l1177 3B00  
                                 l1194 3F74                                   l1179 3B3E  
                                 l1188 3F64                                   l1709 3C3E  
                                 l1719 3E5A                                   l1656 37D8  
                                 l6000 380E                                   l5300 3BFA  
                                 l5310 3C30                                   l5302 3C00  
                                 l6006 3884                                   l5320 3E22  
                                 l5240 45FA                                   l5322 3E28  
                                 l7002 06E6                                   l5242 460C  
                                 l6042 347C                                   l6050 349E  
                                 l5326 3E4C                                   l5318 3E16  
                                 l5510 140E                                   l7102 08C2  
                                 l7022 075A                                   l7014 0738  
                                 l7006 06FE                                   l6054 34B4  
                                 l6046 3486                                   l5504 13EE  
                                 l5440 11A4                                   l7024 0760  
                                 l5264 4584                                   l6064 4642  
                                 l6400 2B4E                                   l5282 4632  
                                 l5522 144A                                   l5450 11E2  
                                 l5434 117E                                   l7018 0742  
                                 l6058 34BE                                   l5604 3C70  
                                 l5540 14C8                                   l5532 14A4  
                                 l5508 1408                                   l5444 11AE  
                                 l7052 07DC                                   l7028 076A  
                                 l5620 376C                                   l6068 4658  
                                 l6412 2BB4                                   l5606 3C9A  
                                 l5534 14AE                                   l5470 12A2  
                                 l5438 1192                                   l7062 0804  
                                 l8030 3380                                   l8006 32EA  
                                 l7310 3724                                   l7302 3702  
                                 l5630 37C6                                   l5622 3772  
                                 l8110 3622                                   l8102 35F6  
                                 l5552 150A                                   l5528 146C  
                                 l5480 131A                                   l7072 0842  
                                 l7056 07F4                                   l7048 07D2  
                                 l8040 339E                                   l8032 3386  
                                 l8024 336E                                   l7400 09D0  
                                 l6184 3978                                   l6520 2E0C  
                                 l6096 4074                                   l8120 3640  
                                 l8112 3628                                   l8104 360C  
                                 l5298 3BEE                                   l5562 157C  
                                 l5546 14E4                                   l5482 1332  
                                 l5466 1290                                   l5458 125E  
                                 l7082 0872                                   l7066 081C  
                                 l7058 07FA                                   l8034 338C  
                                 l8026 3374                                   l7306 3710  
                                 l7330 38D4                                   l7322 38B0  
                                 l5570 42C6                                   l5618 375C  
                                 l6194 39BA                                   l6522 2E26  
                                 l8122 3646                                   l5548 14F0  
                                 l5556 151E                                   l5476 1308  
                                 l5468 129C                                   l5492 137C  
                                 l5564 1588                                   l7180 3B04  
                                 l7148 3A38                                   l7092 089A  
                                 l7084 0878                                   l8036 3392  
                                 l8028 337A                                   l8044 33A4  
                                 l7332 38E0                                   l5580 3AA0  
                                 l7500 0BE6                                   l7412 0A04  
                                 l7404 09DA                                   l6188 398E  
                                 l6516 2DD8                                   l6436 2C26  
                                 l6428 2BEE                                   l8108 361C  
                                 l5558 1524                                   l5486 135E  
                                 l5478 1314                                   l7166 3B9A  
                                 l7094 08A0                                   l6606 1CDC  
                                 l8038 3398                                   l7334 38E6  
                                 l7342 3918                                   l7326 38C0  
                                 l7510 0C7C                                   l7502 0C04  
                                 l6518 2DF2                                   l6526 2E40  
                                 l6470 2FC8                                   l6446 2C56  
                                 l8126 364C                                   _ADIE 007CEE  
                                 l5488 1376                                   l7088 0882  
                                 l6720 00F0                                   l6624 1D94  
                                 l5576 3A8A                                   l5568 42BA  
                                 l5840 2060                                   l5832 1FE8  
                                 l7512 0C9A                                   l7504 0C22  
                                 l7432 0A6C                                   l7408 09F2  
                                 l6528 2E6E                                   l6480 2FF8  
                                 l7098 08AA                                   l6642 1E26  
                                 l7290 36C0                                   l7346 392C  
                                 l7338 390A                                   l5586 3AC0  
                                 l5850 20F6                                   l5842 207E  
                                 l5834 2006                                   l5826 1F5C  
                                 l7610 0F90                                   l7514 0CB8  
                                 l7506 0C40                                   l7522 0D12  
                                 l7426 0A5C                                   l7442 0A92  
                                 l6900 04E0                                   l6812 032C  
                                 l6804 030A                                   l6724 00FA  
                                 l6636 1DE4                                   l7292 36CC  
                                 l7284 36A2                                   l5852 2114  
                                 l5844 209C                                   l5836 2024  
                                 l5860 21AE                                   l7532 0DC2  
                                 l7516 0CD6                                   l7508 0C5E  
                                 l7524 0D76                                   l7460 0AEE  
                                 l7436 0A84                                   l7428 0A62  
                                 l6484 3004                                   l6830 038E  
                                 l6822 0354                                   l6814 0332  
                                 l6718 00EA                                   l6662 1EA2  
                                 l6654 1E72                                   l7294 36D2  
                                 l7278 368C                                   l5854 2132  
                                 l5846 20BA                                   l5838 2042  
                                 l7614 0F9A                                   l7550 0E0E  
                                 l7542 0DEC                                   l7518 0CF4  
                                 l7470 0B18                                   l6494 3026  
                                 l6912 0524                                   l6840 03B6  
                                 l6808 0314                                   l6728 0112  
                                 l5848 20D8                                   l7712 1156  
                                 l7704 1134                                   l7632 0FE6  
                                 l7624 0FC4                                   l7536 0DDA  
                                 l7528 0DB8                                   l7464 0B06  
                                 l7456 0AE4                                   l6488 3010  
                                 l6922 054C                                   l6834 0398  
                                 l6818 033C                                   l6674 1EEA  
                                 l6666 1ED8                                   l5858 2150  
                                 l7650 104C                                   l7618 0FB2  
                                 l7570 0ED4                                   l7546 0DF6  
                                 l7474 0B22                                   l7394 09B8  
                                 l6916 053C                                   l6908 051A  
                                 l6860 041C                                   l6844 03C0  
                                 l7708 113E                                   l7628 0FCE  
                                 l7716 1162                                   l7396 09BE  
                                 l6942 05C0                                   l6934 059E  
                                 l6926 0564                                   l6918 0542  
                                 l6870 0444                                   l6838 03B0  
                                 l6678 1F20                                   l7654 1056  
                                 l7574 0EDE                                   l7494 0B8C  
                                 l7478 0B3A                                   l6944 05C6  
                                 l6864 0434                                   l6856 0412  
                                 l6848 03D8                                   l7672 10A2  
                                 l7664 1080                                   l7592 0F2A  
                                 l7584 0F08                                   l7496 0BAA  
                                 l6970 0652                                   l6962 0630  
                                 l6938 05A8                                   l6890 04B8  
                                 l6882 0496                                   l6874 045C  
                                 l6866 043A                                   l7690 1100  
                                 l7658 106E                                   l7578 0EF6  
                                 l7498 0BC8                                   l6980 067A  
                                 l6972 0658                                   l6948 05D0  
                                 l6892 04BE                                   l7668 108A  
                                 l7588 0F12                                   l5996 37F8  
                                 l6966 063A                                   l6886 04A0  
                                 l7694 110A                                   l6992 06BE  
                                 l6976 0662                                   l6896 04C8  
                                 l7698 1122                                   l7970 30E8  
                                 l6996 06D6                                   l6988 06B4  
                                 l6998 06DC                                   l7968 30D4  
                                 l7994 3168                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5100 1D20  
                                 u3600 4582                                   u5130 1EC6  
                                 u5230 0126                                   u4510 1FDE  
                                 u5160 1F0E                                   u3800 4162  
                                 u5250 01DA                                   u5138 1ECA  
                                 u5090 1D1E                                   u3810 4164  
                                 _PEIE 007F96                                   u3820 41AE  
                                 u3821 41AA                                   u5270 028E  
                                 u3830 41B0                                   u3920 1354  
                                 u5168 1F12                                   u7107 2BA4  
                                 _RCEN 007E2B                                   u7117 2C0E  
                                 u3927 134A                                   u8007 07E4  
                                 u4495 3E94                                   u7207 306E  
                                 u7127 2C40                                   u3880 12DC  
                                 u4840 2B5A                                   u8017 080C  
                                 u7217 433A                                   u7137 2C4A  
                                 u8107 3F2E                                   u8027 085C  
                                 u7307 08E2                                   u7227 2E7C  
                                 u7147 404A                                   u4940 2F5C  
                                 u4860 2B90                                   u8117 1924  
                                 u8037 0866                                   u7317 09E2  
                                 u7237 2EB0                                   u7157 464E  
                                 u3887 12D2                                   u8207 1B10  
                                 u8127 1970                                   u8047 088A  
                                 u7407 0E28                                   u7327 0A1E  
                                 u7247 2EE4                                   u7167 2F42  
                                 u8217 1B44                                   u8137 19A4  
                                 u8057 08B2                                   u7417 0EE6  
                                 u7337 0A74                                   u7257 3432  
                                 u7177 2F9E                                   u7097 2ADE  
                                 i2l66 47B6                                   u4970 2FB8  
                                 u4858 2B5E                                   u8307 3FBE  
                                 u8227 1B78                                   u8147 19D8  
                                 u8067 39D0                                   u7507 1112  
                                 u7427 0F1A                                   u7347 0AA0  
                                 u7267 348E                                   u7187 3040  
                                 u4948 2F60                                   u8237 1BAC  
                                 u8157 1A0C                                   u8077 3B62  
                                 u7517 1146                                   u7437 0F44  
                                 u7357 0AF6                                   u7277 34C6  
                                 u7197 304A                                   u6910 31AE  
                                 u8247 1BE0                                   u8167 1A40  
                                 u8087 3BB4                                   u7607 1DA8  
                                 u7527 32F8                                   u7447 0FA2  
                                 u7367 0B2A                                   u7287 41C0  
                                 u8257 1C14                                   u8177 1A74  
                                 u8097 3BBC                                   u7617 1DD6  
                                 u7537 333C                                   u7457 0FD6  
                                 u7377 0B54                                   u7297 41F4  
                                 u4978 2FBC                                   u8267 3DBA  
                                 u8187 1AA8                                   u7707 002C  
                                 u7627 1E1A                                   u7547 1C38  
                                 u7467 1000                                   u7387 0DCA  
                                 u8277 3DC4                                   u8197 1ADC  
                                 u7717 0070                                   u7637 1E38  
                                 u7557 1C7C                                   u7477 105E  
                                 u7397 0DFE                                   u8287 3DF0  
                                 u7807 029E                                   u7727 0092  
                                 u7647 1E66                                   u7567 1C9E  
                                 u7487 1092                                   u8297 3DFA  
                                 u7817 031C                                   u7737 0102  
                                 u7657 1E80                                   u7577 1CCC  
                                 u7497 10BC                                   u7907 0554  
                                 u7827 0344                                   u7747 0136  
                                 u7667 4602                                   u7587 1D34  
                                 u7917 05B0                                   u7837 03A0  
                                 u7757 019C                                   u7677 34E4  
                                 u7597 1D88                                   u7927 05D8  
                                 u7847 03C8                                   u7767 01BA  
                                 u7687 3528                                   u7937 0642  
                                 u7857 0424                                   u7777 01EA  
                                 u7697 354A                                   u7947 066A  
                                 u7867 044C                                   u7787 0250  
                                 u7957 06C6                                   u7877 04A8  
                                 u7797 026E                                   u7967 06EE  
                                 u7887 04D0                                   u7977 074A  
                                 u7897 052C                                   u7987 0772  
                                 u7997 0794                                   _RSEN 007E29  
                          _stopSignals 4776                                   _Test 32EA  
                                 _back 005B                                   _main 35AC  
                                 _down 0069                                   _keys FB25  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 46FC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 47F4  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 24B2  
                          i2_lcdNibble 3FD6                        __end_of_Loading 2C60  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 34D6                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 372E                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB40  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 3936  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB40                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB58  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 37EA                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3C48  
                      __end_of___lwmod 3E64                                  i2l257 24AE  
                                i2l602 2540                                  i2l863 2D26  
                                i2l945 479A                                  i2l867 2D72  
                      ___awdiv@counter 008A                                  i2l869 2D92  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 47E8                        __end_of_handler 2DCE  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4612  
                      __end_of_initLCD 41FE                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 402C                        __end_of_loadRTC 39C2  
                      __end_of_readMAG 41B8                        __end_of_dpowers FB40  
                                _first 00E4                                  _enter 006B  
                      __end_of_isdigit 463C                                  _input 007D  
                                _putch 47C8                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 46B2  
                     __end_ofi2_getRTC 3D30                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4380                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 40D2                           __end_of_Test 33F2  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3670  
                         __end_of_keys FB36                           __end_of_sort 471E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00BA  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB6D                                 STR_104 FBE8  
                               STR_112 FB7F                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_116 FFB6                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_109 FE69  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 43B0              i2_change_state_to_menu_22 4380  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1262 1782  
                               i2l1709 40C8                                 i2l1719 4236  
                               i2l5412 422C                                 i2l5404 420C  
                               i2l6300 29D2                                 i2l5350 46D2  
                               i2l5406 4214                                 i2l6310 29F8  
                               i2l6150 25A2                                 i2l6142 254A  
                               i2l5408 4218                                 i2l6320 2A1A  
                               i2l6304 29EE                                 i2l6160 2610  
                               i2l6152 25B8                                 i2l6144 2560  
                               i2l6136 24DE                                 i2l6314 2A0C  
                               i2l6250 2926                                 i2l6162 2626  
                               i2l6154 25CE                                 i2l6146 2576  
                               i2l6170 26AC                                 i2l6316 2A10  
                               i2l6260 2944                                 i2l6164 263C  
                               i2l6156 25E4                                 i2l6148 258C  
                               i2l5374 4756                                 i2l5702 1692  
                               i2l6350 2A88                                 i2l6342 2A64  
                               i2l6334 2A40                                 i2l6270 2962  
                               i2l6262 294A                                 i2l6246 2912  
                               i2l6238 28F8                                 i2l6158 25FA  
                               i2l5384 4096                                 i2l5712 16EA  
                               i2l5704 169C                                 i2l5800 18FA  
                               i2l6328 2A32                                 i2l6264 2950  
                               i2l6248 2922                                 i2l6256 2930  
                               i2l6168 2652                                 i2l5642 3CF6  
                               i2l5386 409E                                 i2l5722 1736  
                               i2l5714 16F4                                 i2l5706 16A0  
                               i2l6346 2A76                                 i2l6338 2A52  
                               i2l6266 2956                                 i2l6274 2968  
                               i2l8202 2D90                                 i2l5652 3D20  
                               i2l5396 40BE                                 i2l5388 40A2  
                               i2l5740 17B0                                 i2l5724 1748  
                               i2l5716 16FA                                 i2l6268 295C  
                               i2l6356 2A92                                 i2l5804 4358  
                               i2l8140 2CDA                                 i2l5646 3D06  
                               i2l5718 170C                                 i2l5670 15B2  
                               i2l8054 26F4                                 i2l6294 29C4  
                               i2l6286 29AC                                 i2l5806 4360  
                               i2l8142 2CDE                                 i2l5744 17C8  
                               i2l5728 174C                                 i2l5680 15D6  
                               i2l8064 275E                                 i2l5770 1844  
                               i2l5746 17CC                                 i2l5674 15C2  
                               i2l8074 2820                                 i2l8058 2704  
                               i2l5764 1818                                 i2l5676 15D0  
                               i2l8180 2D46                                 i2l8156 2CFA  
                               i2l5782 1870                                 i2l5758 17FE  
                               i2l5694 166A                                 i2l5686 1608  
                               i2l5784 1878                                 i2l5792 189E  
                               i2l5776 185A                                 i2l5768 183C  
                               i2l7800 2312                                 i2l5794 18A4  
                               i2l7730 2222                                 i2l8178 2D44  
                               i2l5788 188C                                 i2l5980 329E  
                               i2l7820 2360                                 i2l7812 2344  
                               i2l7804 2320                                 i2l7740 2244  
                               i2l7732 2228                                 i2l5798 18F2  
                               i2l8470 24A0                                 i2l5976 328E  
                               i2l7840 23B6                                 i2l7832 2392  
                               i2l7824 2376                                 i2l7816 2352  
                               i2l7808 2336                                 i2l7760 227C  
                               i2l7744 2252                                 i2l7736 2236  
                               i2l8474 2980                                 i2l8466 2462  
                               i2l5988 32D2                                 i2l8476 299C  
                               i2l8468 2484                                 i2l7860 2404  
                               i2l7852 23E0                                 i2l7844 23C4  
                               i2l7836 23A0                                 i2l7828 2384  
                               i2l7780 22C4                                 i2l7772 22A8  
                               i2l7764 228A                                 i2l7756 226E  
                               i2l7748 2260                                 i2l7872 2436  
                               i2l7864 2412                                 i2l7856 23F6  
                               i2l7848 23D2                                 i2l7792 22F6  
                               i2l7784 22D2                                 i2l7776 22B6  
                               i2l7768 229A                                 i2l7868 2420  
                               i2l7796 2304                                 i2l7788 22E0  
                               i2l7878 2444                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4664                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 46FC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2F2C  
                               ___wmul 42E6                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 431C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3A4A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4740  
                               _initUI 4530                                 _readIR 4120  
                               _logRun 3088                                 clear_0 40F8  
                               clear_1 4104                                 clear_2 4110  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3F20                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 42B0  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 468C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4664                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 40D2  
                     __end_of_printRTC 21F2                           __mediumconst FB24  
                    __end_ofi2___lwmod 4240                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 35AC  
                    __end_ofi2_lcdInst 4800                             _PusherTest 3B54  
                    __end_ofi2_isdigit 475E                             __accesstop 0080  
              __end_of__initialization 4116                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 478C  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 483E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 4814  
                        __end_of_getIR 4080                            i2printRTC@i 0041  
                        _initSortTimer 37EA            __end_of_updateServoPosition 3CBE  
                        __end_of_putch 47D8                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 3088  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 45E6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 45BA  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 33F2               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3225 012F  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0314  
                    __end_of_PortTests 3B54                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2297 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 47E8                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 015E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3E02                                _Loading 2AC0  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3670  
                              ___awmod 3894                             _initServos 3F7C  
                              ___lldiv 372E                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3BD0  
                              ___lwmod 3E02                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 40D2                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3D30  
                              _lcdInst 47D8                                _handler 0008  
                              __ptext0 35AC                                __ptext1 4776  
                              __ptext2 46FC                                __ptext3 2AC0  
                              __ptext4 37EA                                __ptext5 3D30  
                              __ptext6 402C                                __ptext7 4120  
                              __ptext8 463C                                __ptext9 2F2C  
                      __size_of_printf 0438                                _readADC 45E6  
                      __size_of_strcpy 0036                                _initLCD 41B8  
                              _cur_can 0065                                _loadRTC 3936  
                              _readMAG 416C                                _dpowers FB36  
                   actuatorTest@i_1651 00B2                     actuatorTest@i_1660 00B8  
                   actuatorTest@i_1652 00B3                     actuatorTest@i_1661 00B9  
                   actuatorTest@i_1645 00AE                     actuatorTest@i_1670 00BE  
                   actuatorTest@i_1654 00B4                     actuatorTest@i_1646 00AF  
                   actuatorTest@i_1638 00AD                     actuatorTest@i_1671 00BF  
                   actuatorTest@i_1655 00B5                     actuatorTest@i_1664 00BA  
                   actuatorTest@i_1648 00B0                     actuatorTest@i_1665 00BB  
                   actuatorTest@i_1657 00B6                     actuatorTest@i_1649 00B1  
                   actuatorTest@i_1674 00C0                     actuatorTest@i_1658 00B7  
                   actuatorTest@i_1675 00C1                     actuatorTest@i_1667 00BC  
                   actuatorTest@i_1668 00BD                     actuatorTest@i_1677 00C2  
                   actuatorTest@i_1678 00C3                                _isdigit 4612  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2DCE  
                       __pintcode_body 2C60                   end_of_initialization 4116  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2C60  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D9A                             _sensorTest 1C2A  
                  __size_of_PusherTest 007C                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2AC0                           ??_BothServos 00AB  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3F20  
                           _updateMenu 21F2                      i2_I2C_Master_Read 46B2  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 47B6  
                    i2_I2C_Master_Stop 482C                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 4080  
                            i2___lwmod 41FE                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 26E8                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 47F4                          Loading@i_1098 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4740                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1C2A                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 4776                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 431C  
                       __end_of_getMAG 434E                         __end_of_getRTC 3AD0  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 455E  
                       __end_of_readIR 416C                         __end_of_logRun 31C4  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 42E6  
            __end_ofi2_I2C_Master_Read 46D8              __end_ofi2_I2C_Master_Wait 47C8  
                         i2printf@prec 001D                    start_initialization 40D2  
            __end_ofi2_I2C_Master_Stop 4834                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1329 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3AD0                            ?_sensorTest 0001  
                          __pdataBANK1 012F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2417 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1944 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 475E  
                   __end_of_PortTestA5 3F7C                       _I2C_Master_Start 4824  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4800  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3A4A  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB24  
                            _lcdNibble 3D9A                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 3BD0  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0054  
                        _algorithmTest 34D6                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 015C                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 483C             __end_ofi2_I2C_Master_Write 4814  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 28DA                            ??i2_isdigit 0001  
                             i2u425_40 16CE                               i2u425_47 16C4  
                             i2u370_40 46D0                               _PIR2bits 000FA1  
                             i2u429_40 172E                               i2u429_47 1724  
                             i2u468_40 2540                               i2u831_47 2918  
                             i2u832_47 3FEE                               i2u833_47 3FF8  
                             i2u834_47 401A                               i2u835_47 4024  
                             i2u696_40 281A                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 468C  
                        lcdNibble@data 0081                               i2_getRTC 3CBE  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B8  
                             i2_printf 15A8                               i2_strcpy 434E  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 40E6                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 47A2                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 01A0                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 3894                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4410  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4278  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4240  
              _change_state_to_menu_23 43E0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4500                _change_state_to_logs_12 44D0  
              _change_state_to_logs_22 44A0                _change_state_to_logs_23 458C  
              _change_state_to_logs_33 4470                _change_state_to_logs_34 4440  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2DC6                             _EEPROMTest 483C  
                      _I2C_Master_Init 3E64                       __size_of_readADC 002C  
                      _I2C_Master_Read 455E                       __size_of_initLCD 0046  
                         _f_ID_receive 006D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 47A2  
                      _I2C_Master_Stop 481C                       __size_of_isdigit 002A  
                             _delay_ms 463C                         _printSortTimer 26E8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 32EA                               __ptext10 431C  
                             __ptext11 2DCE                               __ptext20 45BA  
                             __ptext12 3EC4                               __ptext21 471E  
                             __ptext13 3088                               __ptext30 455E  
                             __ptext22 41B8                               __ptext14 33F2  
                             __ptext31 47A2                               __ptext23 08CA  
                             __ptext15 475E                               __ptext40 34D6  
                             __ptext32 4240                               __ptext24 1F28  
                             __ptext16 4530                               __ptext41 0012  
                             __ptext33 4278                               __ptext25 42B0  
                             __ptext17 3936                               __ptext50 4612  
                             __ptext42 39C2                               __ptext34 3894  
                             __ptext26 3A4A                               __ptext18 3E64  
                             __ptext51 42E6                               __ptext43 3B54  
                             __ptext35 3670                               __ptext27 4800  
                             __ptext19 372E                               __ptext60 4664  
                             __ptext52 3E02                               __ptext44 3AD0  
                             __ptext36 32EA                               __ptext28 481C  
                             __ptext61 24B2                               __ptext53 3BD0  
                             __ptext45 3F20                               __ptext37 1C2A  
                             __ptext29 4824                               __ptext70 458C  
                             __ptext62 434E                               __ptext54 47D8  
                             __ptext46 483C                               __ptext38 416C  
                             __ptext71 44A0                               __ptext63 28DA  
                             __ptext55 3D9A                               __ptext47 1916  
                             __ptext39 45E6                               __ptext80 4740  
                             __ptext72 44D0                               __ptext64 4380  
                             __ptext56 3F7C                               __ptext48 1170  
                             __ptext81 468C                               __ptext73 4500  
                             __ptext65 43B0                               __ptext57 3C48  
                             __ptext49 47C8                               __ptext90 46B2  
                             __ptext82 41FE                               __ptext74 46D8  
                             __ptext66 43E0                               __ptext91 47B6  
                             __ptext83 4080                               __ptext75 31C4  
                             __ptext67 4410                               __ptext59 21F2  
                             __ptext84 47F4                               __ptext76 478C  
                             __ptext68 4440                               __ptext85 3FD6  
                             __ptext77 26E8                               __ptext69 4470  
                             __ptext86 3CBE                               __ptext78 15A8  
                             __ptext87 480A                               __ptext79 47E8  
                             __ptext88 482C                               __ptext89 4834  
                             _dispLogs 46D8                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1944 0002  
                   __end_of_initServos 3FD6                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 471E  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3C48                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F28  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 43E0      __end_ofi2_change_state_to_menu_22 43B0  
                             loadRTC@i 0096                 __end_of_printSortTimer 28DA  
                            putch@data 0082               __end_of_I2C_Master_Start 482C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 480A  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 39C2                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F28  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 478C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 24B2                __end_of_I2C_Master_Init 3EC4  
              __end_of_I2C_Master_Read 458C                __end_of_I2C_Master_Wait 47B6  
              __end_of_I2C_Master_Stop 4824                            lcdInst@data 0082  
                        printRTC@F3216 0133                           retrieveLog@i 000E  
                          _retrieveLog 31C4                    __end_ofi2_lcdNibble 402C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3EC4  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
