

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 02:08:08 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           ; Version 1.40
    97                           ; Generated 01/12/2016 GMT
    98                           ; 
    99                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F4620 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     
   131                           	psect	idataBANK1
   132  002D6C                     __pidataBANK1:
   133                           	opt stack 0
   134                           
   135                           ;initializer for printRTC@F3211
   136  002D6C  4D                 	db	77
   137  002D6D  4D                 	db	77
   138  002D6E  4D                 	db	77
   139  002D6F  00                 	db	0
   140                           
   141                           	psect	mediumconst
   142  00FDB4                     __pmediumconst:
   143                           	opt stack 0
   144  00FDB4  00                 	db	0
   145  00FDB5                     _keys:
   146                           	opt stack 0
   147  00FDB5  31                 	db	49
   148  00FDB6  32                 	db	50
   149  00FDB7  33                 	db	51
   150  00FDB8  41                 	db	65
   151  00FDB9  34                 	db	52
   152  00FDBA  35                 	db	53
   153  00FDBB  36                 	db	54
   154  00FDBC  42                 	db	66
   155  00FDBD  37                 	db	55
   156  00FDBE  38                 	db	56
   157  00FDBF  39                 	db	57
   158  00FDC0  43                 	db	67
   159  00FDC1  2A                 	db	42
   160  00FDC2  30                 	db	48
   161  00FDC3  23                 	db	35
   162  00FDC4  44                 	db	68
   163  00FDC5  00                 	db	0
   164  00FDC6                     __end_of_keys:
   165                           	opt stack 0
   166  00FDC6                     _dpowers:
   167                           	opt stack 0
   168  00FDC6  0001               	dw	1
   169  00FDC8  000A               	dw	10
   170  00FDCA  0064               	dw	100
   171  00FDCC  03E8               	dw	1000
   172  00FDCE  2710               	dw	10000
   173  00FDD0                     __end_of_dpowers:
   174                           	opt stack 0
   175  0000                     _ADCON0	set	4034
   176  0000                     _ADCON0bits	set	4034
   177  0000                     _ADCON1	set	4033
   178  0000                     _ADRESH	set	4036
   179  0000                     _ADRESL	set	4035
   180  0000                     _CMCONbits	set	4020
   181  0000                     _CVRCON	set	4021
   182  0000                     _EEADR	set	4009
   183  0000                     _EEADRH	set	4010
   184  0000                     _EECON1bits	set	4006
   185  0000                     _EECON2	set	4007
   186  0000                     _EEDATA	set	4008
   187  0000                     _INTCONbits	set	4082
   188  0000                     _LATA	set	3977
   189  0000                     _LATAbits	set	3977
   190  0000                     _LATB	set	3978
   191  0000                     _LATC	set	3979
   192  0000                     _LATCbits	set	3979
   193  0000                     _LATD	set	3980
   194  0000                     _LATDbits	set	3980
   195  0000                     _LATE	set	3981
   196  0000                     _OSCCON	set	4051
   197  0000                     _OSCTUNEbits	set	3995
   198  0000                     _PIR2bits	set	4001
   199  0000                     _PORTAbits	set	3968
   200  0000                     _PORTB	set	3969
   201  0000                     _PORTBbits	set	3969
   202  0000                     _SSPADD	set	4040
   203  0000                     _SSPBUF	set	4041
   204  0000                     _SSPCON1	set	4038
   205  0000                     _SSPCON2	set	4037
   206  0000                     _SSPSTAT	set	4039
   207  0000                     _T0CON	set	4053
   208  0000                     _T1CON	set	4045
   209  0000                     _TMR0H	set	4055
   210  0000                     _TMR0L	set	4054
   211  0000                     _TMR1H	set	4047
   212  0000                     _TMR1L	set	4046
   213  0000                     _TMR3H	set	4019
   214  0000                     _TMR3L	set	4018
   215  0000                     _TRISA	set	3986
   216  0000                     _TRISB	set	3987
   217  0000                     _TRISC	set	3988
   218  0000                     _TRISD	set	3989
   219  0000                     _TRISE	set	3990
   220  0000                     _ACKDT	set	32301
   221  0000                     _ACKEN	set	32300
   222  0000                     _ADFM	set	32263
   223  0000                     _ADIE	set	31982
   224  0000                     _ADON	set	32272
   225  0000                     _INT1IE	set	32643
   226  0000                     _INT1IF	set	32640
   227  0000                     _PEIE	set	32662
   228  0000                     _PEN	set	32298
   229  0000                     _RCEN	set	32299
   230  0000                     _RSEN	set	32297
   231  0000                     _SEN	set	32296
   232  0000                     _TMR0IE	set	32661
   233  0000                     _TMR0IF	set	32658
   234  0000                     _TMR0ON	set	32431
   235  0000                     _TMR1IE	set	31976
   236  0000                     _TMR1IF	set	31984
   237  0000                     _TMR1ON	set	32360
   238  0000                     _TMR2IE	set	31977
   239  0000                     _TMR3IE	set	32001
   240  0000                     _TMR3IF	set	32009
   241  0000                     _TMR3ON	set	32136
   242  0000                     _TRISC3	set	31907
   243  0000                     _TRISC4	set	31908
   244  0000                     _VCFG0	set	32268
   245  0000                     _VCFG1	set	32269
   246  0000                     _nRBPU	set	32655
   247  00FDD0                     STR_48:
   248  00FDD0  25                 	db	37
   249  00FDD1  30                 	db	48	;'0'
   250  00FDD2  32                 	db	50	;'2'
   251  00FDD3  64                 	db	100	;'d'
   252  00FDD4  25                 	db	37
   253  00FDD5  73                 	db	115	;'s'
   254  00FDD6  20                 	db	32
   255  00FDD7  7C                 	db	124
   256  00FDD8  20                 	db	32
   257  00FDD9  25                 	db	37
   258  00FDDA  30                 	db	48	;'0'
   259  00FDDB  32                 	db	50	;'2'
   260  00FDDC  64                 	db	100	;'d'
   261  00FDDD  3A                 	db	58	;':'
   262  00FDDE  25                 	db	37
   263  00FDDF  30                 	db	48	;'0'
   264  00FDE0  32                 	db	50	;'2'
   265  00FDE1  64                 	db	100	;'d'
   266  00FDE2  3A                 	db	58	;':'
   267  00FDE3  25                 	db	37
   268  00FDE4  30                 	db	48	;'0'
   269  00FDE5  32                 	db	50	;'2'
   270  00FDE6  64                 	db	100	;'d'
   271  00FDE7  00                 	db	0
   272  00FDE8                     STR_2:
   273  00FDE8  54                 	db	84	;'T'
   274  00FDE9  69                 	db	105	;'i'
   275  00FDEA  6D                 	db	109	;'m'
   276  00FDEB  65                 	db	101	;'e'
   277  00FDEC  3A                 	db	58	;':'
   278  00FDED  20                 	db	32
   279  00FDEE  25                 	db	37
   280  00FDEF  30                 	db	48	;'0'
   281  00FDF0  32                 	db	50	;'2'
   282  00FDF1  64                 	db	100	;'d'
   283  00FDF2  3A                 	db	58	;':'
   284  00FDF3  25                 	db	37
   285  00FDF4  30                 	db	48	;'0'
   286  00FDF5  32                 	db	50	;'2'
   287  00FDF6  64                 	db	100	;'d'
   288  00FDF7  3A                 	db	58	;':'
   289  00FDF8  25                 	db	37
   290  00FDF9  30                 	db	48	;'0'
   291  00FDFA  32                 	db	50	;'2'
   292  00FDFB  64                 	db	100	;'d'
   293  00FDFC  00                 	db	0
   294  00FDFD                     STR_3:
   295  00FDFD  2D                 	db	45
   296  00FDFE  2D                 	db	45
   297  00FDFF  20                 	db	32
   298  00FE00  4C                 	db	76	;'L'
   299  00FE01  6F                 	db	111	;'o'
   300  00FE02  67                 	db	103	;'g'
   301  00FE03  20                 	db	32
   302  00FE04  25                 	db	37
   303  00FE05  32                 	db	50	;'2'
   304  00FE06  64                 	db	100	;'d'
   305  00FE07  20                 	db	32
   306  00FE08  68                 	db	104	;'h'
   307  00FE09  65                 	db	101	;'e'
   308  00FE0A  72                 	db	114	;'r'
   309  00FE0B  65                 	db	101	;'e'
   310  00FE0C  2D                 	db	45
   311  00FE0D  2D                 	db	45
   312  00FE0E  00                 	db	0
   313  00FE0F                     STR_8:
   314  00FE0F  25                 	db	37
   315  00FE10  64                 	db	100	;'d'
   316  00FE11  20                 	db	32
   317  00FE12  6D                 	db	109	;'m'
   318  00FE13  69                 	db	105	;'i'
   319  00FE14  6E                 	db	110	;'n'
   320  00FE15  28                 	db	40
   321  00FE16  73                 	db	115	;'s'
   322  00FE17  29                 	db	41
   323  00FE18  20                 	db	32
   324  00FE19  25                 	db	37
   325  00FE1A  64                 	db	100	;'d'
   326  00FE1B  20                 	db	32
   327  00FE1C  73                 	db	115	;'s'
   328  00FE1D  65                 	db	101	;'e'
   329  00FE1E  63                 	db	99	;'c'
   330  00FE1F  73                 	db	115	;'s'
   331  00FE20  00                 	db	0
   332  00FE21                     STR_26:
   333  00FE21  4C                 	db	76	;'L'
   334  00FE22  4F                 	db	79	;'O'
   335  00FE23  47                 	db	71	;'G'
   336  00FE24  20                 	db	32
   337  00FE25  31                 	db	49	;'1'
   338  00FE26  20                 	db	32
   339  00FE27  20                 	db	32
   340  00FE28  20                 	db	32
   341  00FE29  20                 	db	32
   342  00FE2A  20                 	db	32
   343  00FE2B  20                 	db	32
   344  00FE2C  20                 	db	32
   345  00FE2D  20                 	db	32
   346  00FE2E  20                 	db	32
   347  00FE2F  20                 	db	32
   348  00FE30  20                 	db	32
   349  00FE31  00                 	db	0
   350  00FE32                     STR_25:
   351  00FE32  4C                 	db	76	;'L'
   352  00FE33  4F                 	db	79	;'O'
   353  00FE34  47                 	db	71	;'G'
   354  00FE35  20                 	db	32
   355  00FE36  32                 	db	50	;'2'
   356  00FE37  20                 	db	32
   357  00FE38  20                 	db	32
   358  00FE39  20                 	db	32
   359  00FE3A  20                 	db	32
   360  00FE3B  20                 	db	32
   361  00FE3C  20                 	db	32
   362  00FE3D  20                 	db	32
   363  00FE3E  20                 	db	32
   364  00FE3F  20                 	db	32
   365  00FE40  20                 	db	32
   366  00FE41  20                 	db	32
   367  00FE42  00                 	db	0
   368  00FE43                     STR_29:
   369  00FE43  4C                 	db	76	;'L'
   370  00FE44  4F                 	db	79	;'O'
   371  00FE45  47                 	db	71	;'G'
   372  00FE46  20                 	db	32
   373  00FE47  33                 	db	51	;'3'
   374  00FE48  20                 	db	32
   375  00FE49  20                 	db	32
   376  00FE4A  20                 	db	32
   377  00FE4B  20                 	db	32
   378  00FE4C  20                 	db	32
   379  00FE4D  20                 	db	32
   380  00FE4E  20                 	db	32
   381  00FE4F  20                 	db	32
   382  00FE50  20                 	db	32
   383  00FE51  20                 	db	32
   384  00FE52  20                 	db	32
   385  00FE53  00                 	db	0
   386  00FE54                     STR_33:
   387  00FE54  4C                 	db	76	;'L'
   388  00FE55  4F                 	db	79	;'O'
   389  00FE56  47                 	db	71	;'G'
   390  00FE57  20                 	db	32
   391  00FE58  34                 	db	52	;'4'
   392  00FE59  20                 	db	32
   393  00FE5A  20                 	db	32
   394  00FE5B  20                 	db	32
   395  00FE5C  20                 	db	32
   396  00FE5D  20                 	db	32
   397  00FE5E  20                 	db	32
   398  00FE5F  20                 	db	32
   399  00FE60  20                 	db	32
   400  00FE61  20                 	db	32
   401  00FE62  20                 	db	32
   402  00FE63  20                 	db	32
   403  00FE64  00                 	db	0
   404  00FE65                     STR_21:
   405  00FE65  33                 	db	51	;'3'
   406  00FE66  2E                 	db	46
   407  00FE67  20                 	db	32
   408  00FE68  4C                 	db	76	;'L'
   409  00FE69  4F                 	db	79	;'O'
   410  00FE6A  47                 	db	71	;'G'
   411  00FE6B  53                 	db	83	;'S'
   412  00FE6C  20                 	db	32
   413  00FE6D  20                 	db	32
   414  00FE6E  20                 	db	32
   415  00FE6F  20                 	db	32
   416  00FE70  20                 	db	32
   417  00FE71  20                 	db	32
   418  00FE72  20                 	db	32
   419  00FE73  20                 	db	32
   420  00FE74  20                 	db	32
   421  00FE75  00                 	db	0
   422  00FE76                     STR_17:
   423  00FE76  32                 	db	50	;'2'
   424  00FE77  2E                 	db	46
   425  00FE78  20                 	db	32
   426  00FE79  53                 	db	83	;'S'
   427  00FE7A  4F                 	db	79	;'O'
   428  00FE7B  52                 	db	82	;'R'
   429  00FE7C  54                 	db	84	;'T'
   430  00FE7D  20                 	db	32
   431  00FE7E  20                 	db	32
   432  00FE7F  20                 	db	32
   433  00FE80  20                 	db	32
   434  00FE81  20                 	db	32
   435  00FE82  20                 	db	32
   436  00FE83  20                 	db	32
   437  00FE84  20                 	db	32
   438  00FE85  20                 	db	32
   439  00FE86  00                 	db	0
   440  00FE87                     STR_18:
   441  00FE87  31                 	db	49	;'1'
   442  00FE88  2E                 	db	46
   443  00FE89  20                 	db	32
   444  00FE8A  44                 	db	68	;'D'
   445  00FE8B  41                 	db	65	;'A'
   446  00FE8C  54                 	db	84	;'T'
   447  00FE8D  45                 	db	69	;'E'
   448  00FE8E  2F                 	db	47
   449  00FE8F  54                 	db	84	;'T'
   450  00FE90  49                 	db	73	;'I'
   451  00FE91  4D                 	db	77	;'M'
   452  00FE92  45                 	db	69	;'E'
   453  00FE93  20                 	db	32
   454  00FE94  20                 	db	32
   455  00FE95  20                 	db	32
   456  00FE96  20                 	db	32
   457  00FE97  00                 	db	0
   458  00FE98                     STR_9:
   459  00FE98  20                 	db	32
   460  00FE99  2D                 	db	45
   461  00FE9A  2D                 	db	45
   462  00FE9B  20                 	db	32
   463  00FE9C  50                 	db	80	;'P'
   464  00FE9D  6F                 	db	111	;'o'
   465  00FE9E  70                 	db	112	;'p'
   466  00FE9F  20                 	db	32
   467  00FEA0  20                 	db	32
   468  00FEA1  63                 	db	99	;'c'
   469  00FEA2  61                 	db	97	;'a'
   470  00FEA3  6E                 	db	110	;'n'
   471  00FEA4  20                 	db	32
   472  00FEA5  2D                 	db	45
   473  00FEA6  2D                 	db	45
   474  00FEA7  20                 	db	32
   475  00FEA8  00                 	db	0
   476  00FEA9                     STR_11:
   477  00FEA9  20                 	db	32
   478  00FEAA  2D                 	db	45
   479  00FEAB  2D                 	db	45
   480  00FEAC  20                 	db	32
   481  00FEAD  53                 	db	83	;'S'
   482  00FEAE  6F                 	db	111	;'o'
   483  00FEAF  75                 	db	117	;'u'
   484  00FEB0  70                 	db	112	;'p'
   485  00FEB1  20                 	db	32
   486  00FEB2  63                 	db	99	;'c'
   487  00FEB3  61                 	db	97	;'a'
   488  00FEB4  6E                 	db	110	;'n'
   489  00FEB5  20                 	db	32
   490  00FEB6  2D                 	db	45
   491  00FEB7  2D                 	db	45
   492  00FEB8  20                 	db	32
   493  00FEB9  00                 	db	0
   494  00FEBA                     STR_1:
   495  00FEBA  21                 	db	33
   496  00FEBB  53                 	db	83	;'S'
   497  00FEBC  4F                 	db	79	;'O'
   498  00FEBD  52                 	db	82	;'R'
   499  00FEBE  54                 	db	84	;'T'
   500  00FEBF  20                 	db	32
   501  00FEC0  43                 	db	67	;'C'
   502  00FEC1  4F                 	db	79	;'O'
   503  00FEC2  4E                 	db	78	;'N'
   504  00FEC3  43                 	db	67	;'C'
   505  00FEC4  4C                 	db	76	;'L'
   506  00FEC5  55                 	db	85	;'U'
   507  00FEC6  44                 	db	68	;'D'
   508  00FEC7  45                 	db	69	;'E'
   509  00FEC8  44                 	db	68	;'D'
   510  00FEC9  21                 	db	33
   511  00FECA  00                 	db	0
   512  00FECB                     STR_13:
   513  00FECB  2D                 	db	45
   514  00FECC  2D                 	db	45
   515  00FECD  20                 	db	32
   516  00FECE  54                 	db	84	;'T'
   517  00FECF  6F                 	db	111	;'o'
   518  00FED0  74                 	db	116	;'t'
   519  00FED1  61                 	db	97	;'a'
   520  00FED2  6C                 	db	108	;'l'
   521  00FED3  20                 	db	32
   522  00FED4  63                 	db	99	;'c'
   523  00FED5  61                 	db	97	;'a'
   524  00FED6  6E                 	db	110	;'n'
   525  00FED7  73                 	db	115	;'s'
   526  00FED8  20                 	db	32
   527  00FED9  2D                 	db	45
   528  00FEDA  2D                 	db	45
   529  00FEDB  00                 	db	0
   530  00FEDC                     STR_10:
   531  00FEDC  4E                 	db	78	;'N'
   532  00FEDD  6F                 	db	111	;'o'
   533  00FEDE  20                 	db	32
   534  00FEDF  74                 	db	116	;'t'
   535  00FEE0  61                 	db	97	;'a'
   536  00FEE1  62                 	db	98	;'b'
   537  00FEE2  3A                 	db	58	;':'
   538  00FEE3  20                 	db	32
   539  00FEE4  39                 	db	57	;'9'
   540  00FEE5  7C                 	db	124
   541  00FEE6  54                 	db	84	;'T'
   542  00FEE7  61                 	db	97	;'a'
   543  00FEE8  62                 	db	98	;'b'
   544  00FEE9  3A                 	db	58	;':'
   545  00FEEA  20                 	db	32
   546  00FEEB  31                 	db	49	;'1'
   547  00FEEC  00                 	db	0
   548  00FEED                     STR_12:
   549  00FEED  4E                 	db	78	;'N'
   550  00FEEE  6F                 	db	111	;'o'
   551  00FEEF  20                 	db	32
   552  00FEF0  6C                 	db	108	;'l'
   553  00FEF1  62                 	db	98	;'b'
   554  00FEF2  6C                 	db	108	;'l'
   555  00FEF3  3A                 	db	58	;':'
   556  00FEF4  20                 	db	32
   557  00FEF5  31                 	db	49	;'1'
   558  00FEF6  7C                 	db	124
   559  00FEF7  6C                 	db	108	;'l'
   560  00FEF8  62                 	db	98	;'b'
   561  00FEF9  6C                 	db	108	;'l'
   562  00FEFA  3A                 	db	58	;':'
   563  00FEFB  20                 	db	32
   564  00FEFC  31                 	db	49	;'1'
   565  00FEFD  00                 	db	0
   566  00FEFE                     STR_6:
   567  00FEFE  30                 	db	48	;'0'
   568  00FEFF  36                 	db	54	;'6'
   569  00FF00  46                 	db	70	;'F'
   570  00FF01  65                 	db	101	;'e'
   571  00FF02  62                 	db	98	;'b'
   572  00FF03  20                 	db	32
   573  00FF04  7C                 	db	124
   574  00FF05  20                 	db	32
   575  00FF06  30                 	db	48	;'0'
   576  00FF07  31                 	db	49	;'1'
   577  00FF08  3A                 	db	58	;':'
   578  00FF09  30                 	db	48	;'0'
   579  00FF0A  38                 	db	56	;'8'
   580  00FF0B  3A                 	db	58	;':'
   581  00FF0C  35                 	db	53	;'5'
   582  00FF0D  36                 	db	54	;'6'
   583  00FF0E  00                 	db	0
   584  00FF0F                     STR_24:
   585  00FF0F  4C                 	db	76	;'L'
   586  00FF10  4F                 	db	79	;'O'
   587  00FF11  47                 	db	71	;'G'
   588  00FF12  20                 	db	32
   589  00FF13  31                 	db	49	;'1'
   590  00FF14  20                 	db	32
   591  00FF15  20                 	db	32
   592  00FF16  20                 	db	32
   593  00FF17  20                 	db	32
   594  00FF18  20                 	db	32
   595  00FF19  20                 	db	32
   596  00FF1A  20                 	db	32
   597  00FF1B  20                 	db	32
   598  00FF1C  20                 	db	32
   599  00FF1D  20                 	db	32
   600  00FF1E  3C                 	db	60	;'<'
   601  00FF1F  00                 	db	0
   602  00FF20                     STR_27:
   603  00FF20  4C                 	db	76	;'L'
   604  00FF21  4F                 	db	79	;'O'
   605  00FF22  47                 	db	71	;'G'
   606  00FF23  20                 	db	32
   607  00FF24  32                 	db	50	;'2'
   608  00FF25  20                 	db	32
   609  00FF26  20                 	db	32
   610  00FF27  20                 	db	32
   611  00FF28  20                 	db	32
   612  00FF29  20                 	db	32
   613  00FF2A  20                 	db	32
   614  00FF2B  20                 	db	32
   615  00FF2C  20                 	db	32
   616  00FF2D  20                 	db	32
   617  00FF2E  20                 	db	32
   618  00FF2F  3C                 	db	60	;'<'
   619  00FF30  00                 	db	0
   620  00FF31                     STR_31:
   621  00FF31  4C                 	db	76	;'L'
   622  00FF32  4F                 	db	79	;'O'
   623  00FF33  47                 	db	71	;'G'
   624  00FF34  20                 	db	32
   625  00FF35  33                 	db	51	;'3'
   626  00FF36  20                 	db	32
   627  00FF37  20                 	db	32
   628  00FF38  20                 	db	32
   629  00FF39  20                 	db	32
   630  00FF3A  20                 	db	32
   631  00FF3B  20                 	db	32
   632  00FF3C  20                 	db	32
   633  00FF3D  20                 	db	32
   634  00FF3E  20                 	db	32
   635  00FF3F  20                 	db	32
   636  00FF40  3C                 	db	60	;'<'
   637  00FF41  00                 	db	0
   638  00FF42                     STR_35:
   639  00FF42  4C                 	db	76	;'L'
   640  00FF43  4F                 	db	79	;'O'
   641  00FF44  47                 	db	71	;'G'
   642  00FF45  20                 	db	32
   643  00FF46  34                 	db	52	;'4'
   644  00FF47  20                 	db	32
   645  00FF48  20                 	db	32
   646  00FF49  20                 	db	32
   647  00FF4A  20                 	db	32
   648  00FF4B  20                 	db	32
   649  00FF4C  20                 	db	32
   650  00FF4D  20                 	db	32
   651  00FF4E  20                 	db	32
   652  00FF4F  20                 	db	32
   653  00FF50  20                 	db	32
   654  00FF51  3C                 	db	60	;'<'
   655  00FF52  00                 	db	0
   656  00FF53                     STR_23:
   657  00FF53  33                 	db	51	;'3'
   658  00FF54  2E                 	db	46
   659  00FF55  20                 	db	32
   660  00FF56  4C                 	db	76	;'L'
   661  00FF57  4F                 	db	79	;'O'
   662  00FF58  47                 	db	71	;'G'
   663  00FF59  53                 	db	83	;'S'
   664  00FF5A  20                 	db	32
   665  00FF5B  20                 	db	32
   666  00FF5C  20                 	db	32
   667  00FF5D  20                 	db	32
   668  00FF5E  20                 	db	32
   669  00FF5F  20                 	db	32
   670  00FF60  20                 	db	32
   671  00FF61  20                 	db	32
   672  00FF62  3C                 	db	60	;'<'
   673  00FF63  00                 	db	0
   674  00FF64                     STR_19:
   675  00FF64  32                 	db	50	;'2'
   676  00FF65  2E                 	db	46
   677  00FF66  20                 	db	32
   678  00FF67  53                 	db	83	;'S'
   679  00FF68  4F                 	db	79	;'O'
   680  00FF69  52                 	db	82	;'R'
   681  00FF6A  54                 	db	84	;'T'
   682  00FF6B  20                 	db	32
   683  00FF6C  20                 	db	32
   684  00FF6D  20                 	db	32
   685  00FF6E  20                 	db	32
   686  00FF6F  20                 	db	32
   687  00FF70  20                 	db	32
   688  00FF71  20                 	db	32
   689  00FF72  20                 	db	32
   690  00FF73  3C                 	db	60	;'<'
   691  00FF74  00                 	db	0
   692  00FF75                     STR_16:
   693  00FF75  31                 	db	49	;'1'
   694  00FF76  2E                 	db	46
   695  00FF77  20                 	db	32
   696  00FF78  44                 	db	68	;'D'
   697  00FF79  41                 	db	65	;'A'
   698  00FF7A  54                 	db	84	;'T'
   699  00FF7B  45                 	db	69	;'E'
   700  00FF7C  2F                 	db	47
   701  00FF7D  54                 	db	84	;'T'
   702  00FF7E  49                 	db	73	;'I'
   703  00FF7F  4D                 	db	77	;'M'
   704  00FF80  45                 	db	69	;'E'
   705  00FF81  20                 	db	32
   706  00FF82  20                 	db	32
   707  00FF83  20                 	db	32
   708  00FF84  3C                 	db	60	;'<'
   709  00FF85  00                 	db	0
   710  00FF86                     STR_4:
   711  00FF86  50                 	db	80	;'P'
   712  00FF87  61                 	db	97	;'a'
   713  00FF88  75                 	db	117	;'u'
   714  00FF89  73                 	db	115	;'s'
   715  00FF8A  65                 	db	101	;'e'
   716  00FF8B  3A                 	db	58	;':'
   717  00FF8C  3C                 	db	60	;'<'
   718  00FF8D  20                 	db	32
   719  00FF8E  7C                 	db	124
   720  00FF8F  20                 	db	32
   721  00FF90  42                 	db	66	;'B'
   722  00FF91  61                 	db	97	;'a'
   723  00FF92  63                 	db	99	;'c'
   724  00FF93  6B                 	db	107	;'k'
   725  00FF94  3A                 	db	58	;':'
   726  00FF95  3E                 	db	62	;'>'
   727  00FF96  00                 	db	0
   728  00FF97                     STR_15:
   729  00FF97  50                 	db	80	;'P'
   730  00FF98  55                 	db	85	;'U'
   731  00FF99  53                 	db	83	;'S'
   732  00FF9A  48                 	db	72	;'H'
   733  00FF9B  20                 	db	32
   734  00FF9C  54                 	db	84	;'T'
   735  00FF9D  4F                 	db	79	;'O'
   736  00FF9E  20                 	db	32
   737  00FF9F  43                 	db	67	;'C'
   738  00FFA0  4F                 	db	79	;'O'
   739  00FFA1  4E                 	db	78	;'N'
   740  00FFA2  54                 	db	84	;'T'
   741  00FFA3  49                 	db	73	;'I'
   742  00FFA4  4E                 	db	78	;'N'
   743  00FFA5  55                 	db	85	;'U'
   744  00FFA6  45                 	db	69	;'E'
   745  00FFA7  00                 	db	0
   746  00FFA8                     STR_49:
   747  00FFA8  53                 	db	83	;'S'
   748  00FFA9  6F                 	db	111	;'o'
   749  00FFAA  72                 	db	114	;'r'
   750  00FFAB  74                 	db	116	;'t'
   751  00FFAC  69                 	db	105	;'i'
   752  00FFAD  6E                 	db	110	;'n'
   753  00FFAE  67                 	db	103	;'g'
   754  00FFAF  2E                 	db	46
   755  00FFB0  2E                 	db	46
   756  00FFB1  2E                 	db	46
   757  00FFB2  00                 	db	0
   758  00FFB3                     STR_7:
   759  00FFB3  44                 	db	68	;'D'
   760  00FFB4  75                 	db	117	;'u'
   761  00FFB5  72                 	db	114	;'r'
   762  00FFB6  61                 	db	97	;'a'
   763  00FFB7  74                 	db	116	;'t'
   764  00FFB8  69                 	db	105	;'i'
   765  00FFB9  6F                 	db	111	;'o'
   766  00FFBA  6E                 	db	110	;'n'
   767  00FFBB  3A                 	db	58	;':'
   768  00FFBC  00                 	db	0
   769  00FFBD                     STR_51:
   770  00FFBD  28                 	db	40
   771  00FFBE  6E                 	db	110	;'n'
   772  00FFBF  75                 	db	117	;'u'
   773  00FFC0  6C                 	db	108	;'l'
   774  00FFC1  6C                 	db	108	;'l'
   775  00FFC2  29                 	db	41
   776  00FFC3  00                 	db	0
   777  00FFC4                     STR_5:
   778  00FFC4  53                 	db	83	;'S'
   779  00FFC5  74                 	db	116	;'t'
   780  00FFC6  61                 	db	97	;'a'
   781  00FFC7  72                 	db	114	;'r'
   782  00FFC8  74                 	db	116	;'t'
   783  00FFC9  3A                 	db	58	;':'
   784  00FFCA  00                 	db	0
   785  00FFCB                     STR_37:
   786  00FFCB  46                 	db	70	;'F'
   787  00FFCC  65                 	db	101	;'e'
   788  00FFCD  62                 	db	98	;'b'
   789  00FFCE  00                 	db	0
   790  00FFCF                     STR_47:
   791  00FFCF  44                 	db	68	;'D'
   792  00FFD0  65                 	db	101	;'e'
   793  00FFD1  63                 	db	99	;'c'
   794  00FFD2  00                 	db	0
   795  00FFD3                     STR_43:
   796  00FFD3  41                 	db	65	;'A'
   797  00FFD4  75                 	db	117	;'u'
   798  00FFD5  67                 	db	103	;'g'
   799  00FFD6  00                 	db	0
   800  00FFD7                     STR_42:
   801  00FFD7  4A                 	db	74	;'J'
   802  00FFD8  75                 	db	117	;'u'
   803  00FFD9  6C                 	db	108	;'l'
   804  00FFDA  00                 	db	0
   805  00FFDB                     STR_36:
   806  00FFDB  4A                 	db	74	;'J'
   807  00FFDC  61                 	db	97	;'a'
   808  00FFDD  6E                 	db	110	;'n'
   809  00FFDE  00                 	db	0
   810  00FFDF                     STR_41:
   811  00FFDF  4A                 	db	74	;'J'
   812  00FFE0  75                 	db	117	;'u'
   813  00FFE1  6E                 	db	110	;'n'
   814  00FFE2  00                 	db	0
   815  00FFE3                     STR_44:
   816  00FFE3  53                 	db	83	;'S'
   817  00FFE4  65                 	db	101	;'e'
   818  00FFE5  70                 	db	112	;'p'
   819  00FFE6  00                 	db	0
   820  00FFE7                     STR_38:
   821  00FFE7  4D                 	db	77	;'M'
   822  00FFE8  61                 	db	97	;'a'
   823  00FFE9  72                 	db	114	;'r'
   824  00FFEA  00                 	db	0
   825  00FFEB                     STR_39:
   826  00FFEB  41                 	db	65	;'A'
   827  00FFEC  70                 	db	112	;'p'
   828  00FFED  72                 	db	114	;'r'
   829  00FFEE  00                 	db	0
   830  00FFEF                     STR_45:
   831  00FFEF  4F                 	db	79	;'O'
   832  00FFF0  63                 	db	99	;'c'
   833  00FFF1  74                 	db	116	;'t'
   834  00FFF2  00                 	db	0
   835  00FFF3                     STR_46:
   836  00FFF3  4E                 	db	78	;'N'
   837  00FFF4  6F                 	db	111	;'o'
   838  00FFF5  76                 	db	118	;'v'
   839  00FFF6  00                 	db	0
   840  00FFF7                     STR_40:
   841  00FFF7  4D                 	db	77	;'M'
   842  00FFF8  61                 	db	97	;'a'
   843  00FFF9  79                 	db	121	;'y'
   844  00FFFA  00                 	db	0
   845  00FFFB                     STR_14:
   846  00FFFB  31                 	db	49	;'1'
   847  00FFFC  32                 	db	50	;'2'
   848  00FFFD  00                 	db	0
   849  0000                     
   850                           ; #config settings
   851  00FFFE  00                 	db	0	; dummy byte at the end
   852  0000                     
   853                           	psect	cinit
   854  002682                     __pcinit:
   855                           	opt stack 0
   856  002682                     start_initialization:
   857                           	opt stack 0
   858  002682                     __initialization:
   859                           	opt stack 0
   860                           
   861                           ; Initialize objects allocated to BANK1 (4 bytes)
   862                           ; load TBLPTR registers with __pidataBANK1
   863  002682  0E6C               	movlw	low __pidataBANK1
   864  002684  6EF6               	movwf	tblptrl,c
   865  002686  0E2D               	movlw	high __pidataBANK1
   866  002688  6EF7               	movwf	tblptrh,c
   867  00268A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   868  00268C  6EF8               	movwf	tblptru,c
   869  00268E  EE01  F022         	lfsr	0,__pdataBANK1
   870  002692  EE10 F004          	lfsr	1,4
   871  002696                     copy_data0:
   872  002696  0009               	tblrd		*+
   873  002698  CFF5 FFEE          	movff	tablat,postinc0
   874  00269C  50E5               	movf	postdec1,w,c
   875  00269E  50E1               	movf	fsr1l,w,c
   876  0026A0  E1FA               	bnz	copy_data0
   877                           
   878                           ; Clear objects allocated to BANK1 (34 bytes)
   879  0026A2  EE01  F000         	lfsr	0,__pbssBANK1
   880  0026A6  0E22               	movlw	34
   881  0026A8                     clear_0:
   882  0026A8  6AEE               	clrf	postinc0,c
   883  0026AA  06E8               	decf	wreg,f,c
   884  0026AC  E1FD               	bnz	clear_0
   885                           
   886                           ; Clear objects allocated to BANK0 (43 bytes)
   887  0026AE  EE00  F0D4         	lfsr	0,__pbssBANK0
   888  0026B2  0E2B               	movlw	43
   889  0026B4                     clear_1:
   890  0026B4  6AEE               	clrf	postinc0,c
   891  0026B6  06E8               	decf	wreg,f,c
   892  0026B8  E1FD               	bnz	clear_1
   893                           
   894                           ; Clear objects allocated to COMRAM (35 bytes)
   895  0026BA  EE00  F05B         	lfsr	0,__pbssCOMRAM
   896  0026BE  0E23               	movlw	35
   897  0026C0                     clear_2:
   898  0026C0  6AEE               	clrf	postinc0,c
   899  0026C2  06E8               	decf	wreg,f,c
   900  0026C4  E1FD               	bnz	clear_2
   901  0026C6                     end_of_initialization:
   902                           	opt stack 0
   903  0026C6                     __end_of__initialization:
   904                           	opt stack 0
   905  0026C6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   906  0026C8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   907  0026CA  0100               	movlb	0
   908  0026CC  EF6F  F010         	goto	_main	;jump to C main() function
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1l	equ	0xFE1
   917                           
   918                           	psect	bssCOMRAM
   919  00005B                     __pbssCOMRAM:
   920                           	opt stack 0
   921  00005B                     _servoTimes:
   922                           	opt stack 0
   923  00005B                     	ds	8
   924  000063                     _IR_signal:
   925                           	opt stack 0
   926  000063                     	ds	2
   927  000065                     _back:
   928                           	opt stack 0
   929  000065                     	ds	2
   930  000067                     _down:
   931                           	opt stack 0
   932  000067                     	ds	2
   933  000069                     _enter:
   934                           	opt stack 0
   935  000069                     	ds	2
   936  00006B                     _f_can_distributed:
   937                           	opt stack 0
   938  00006B                     	ds	2
   939  00006D                     _firstboot:
   940                           	opt stack 0
   941  00006D                     	ds	2
   942  00006F                     _log_completion:
   943                           	opt stack 0
   944  00006F                     	ds	2
   945  000071                     _log_count_pop_no_tab:
   946                           	opt stack 0
   947  000071                     	ds	2
   948  000073                     _log_count_pop_w_tab:
   949                           	opt stack 0
   950  000073                     	ds	2
   951  000075                     _log_count_total:
   952                           	opt stack 0
   953  000075                     	ds	2
   954  000077                     _up:
   955                           	opt stack 0
   956  000077                     	ds	2
   957  000079                     _was_low_1:
   958                           	opt stack 0
   959  000079                     	ds	2
   960  00007B                     _was_low_3:
   961                           	opt stack 0
   962  00007B                     	ds	2
   963  00007D                     _input:
   964                           	opt stack 0
   965  00007D                     	ds	1
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           postdec1	equ	0xFE5
   973                           fsr1l	equ	0xFE1
   974                           
   975                           	psect	bssBANK0
   976  0000D4                     __pbssBANK0:
   977                           	opt stack 0
   978  0000D4                     _time:
   979                           	opt stack 0
   980  0000D4                     	ds	7
   981  0000DB                     _MAG_signal:
   982                           	opt stack 0
   983  0000DB                     	ds	2
   984  0000DD                     _count_can_no_lab:
   985                           	opt stack 0
   986  0000DD                     	ds	2
   987  0000DF                     _count_can_w_lab:
   988                           	opt stack 0
   989  0000DF                     	ds	2
   990  0000E1                     _count_pop_no_tab:
   991                           	opt stack 0
   992  0000E1                     	ds	2
   993  0000E3                     _count_pop_w_tab:
   994                           	opt stack 0
   995  0000E3                     	ds	2
   996  0000E5                     _cur_can:
   997                           	opt stack 0
   998  0000E5                     	ds	2
   999  0000E7                     _cur_state:
  1000                           	opt stack 0
  1001  0000E7                     	ds	2
  1002  0000E9                     _f_ID_receive:
  1003                           	opt stack 0
  1004  0000E9                     	ds	2
  1005  0000EB                     _f_can_coming_to_ID:
  1006                           	opt stack 0
  1007  0000EB                     	ds	2
  1008  0000ED                     _f_can_coming_to_distribution:
  1009                           	opt stack 0
  1010  0000ED                     	ds	2
  1011  0000EF                     _f_lastCan:
  1012                           	opt stack 0
  1013  0000EF                     	ds	2
  1014  0000F1                     _f_loadingNewCan:
  1015                           	opt stack 0
  1016  0000F1                     	ds	2
  1017  0000F3                     _first:
  1018                           	opt stack 0
  1019  0000F3                     	ds	2
  1020  0000F5                     _log:
  1021                           	opt stack 0
  1022  0000F5                     	ds	2
  1023  0000F7                     _logstate:
  1024                           	opt stack 0
  1025  0000F7                     	ds	2
  1026  0000F9                     _total_time:
  1027                           	opt stack 0
  1028  0000F9                     	ds	2
  1029  0000FB                     _machine_state:
  1030                           	opt stack 0
  1031  0000FB                     	ds	1
  1032  0000FC                     _sel:
  1033                           	opt stack 0
  1034  0000FC                     	ds	1
  1035  0000FD                     _count_total:
  1036                           	opt stack 0
  1037  0000FD                     	ds	2
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           postdec1	equ	0xFE5
  1045                           fsr1l	equ	0xFE1
  1046                           
  1047                           	psect	bssBANK1
  1048  000100                     __pbssBANK1:
  1049                           	opt stack 0
  1050  000100                     _log_startTime:
  1051                           	opt stack 0
  1052  000100                     	ds	14
  1053  00010E                     _startTime:
  1054                           	opt stack 0
  1055  00010E                     	ds	14
  1056  00011C                     _log_count_can_no_lab:
  1057                           	opt stack 0
  1058  00011C                     	ds	2
  1059  00011E                     _log_count_can_w_lab:
  1060                           	opt stack 0
  1061  00011E                     	ds	2
  1062  000120                     _log_total_time:
  1063                           	opt stack 0
  1064  000120                     	ds	2
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           
  1074                           	psect	dataBANK1
  1075  000122                     __pdataBANK1:
  1076                           	opt stack 0
  1077  000122                     printRTC@F3211:
  1078                           	opt stack 0
  1079  000122                     	ds	4
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	cstackBANK0
  1090  000080                     __pcstackBANK0:
  1091                           	opt stack 0
  1092  000080                     ??_isdigit:
  1093  000080                     ??_readADC:
  1094  000080                     ??_I2C_Master_Wait:
  1095  000080                     ?___wmul:
  1096                           	opt stack 0
  1097  000080                     ?___awmod:
  1098                           	opt stack 0
  1099  000080                     ?___lwdiv:
  1100                           	opt stack 0
  1101  000080                     ?___lldiv:
  1102                           	opt stack 0
  1103  000080                     lcdNibble@temp:
  1104                           	opt stack 0
  1105  000080                     initTime@m:
  1106                           	opt stack 0
  1107  000080                     updateServoPosition@time_us:
  1108                           	opt stack 0
  1109  000080                     EEPROM_write@address:
  1110                           	opt stack 0
  1111  000080                     EEPROM_read@address:
  1112                           	opt stack 0
  1113  000080                     ___wmul@multiplier:
  1114                           	opt stack 0
  1115  000080                     ___awmod@dividend:
  1116                           	opt stack 0
  1117  000080                     ___lwdiv@dividend:
  1118                           	opt stack 0
  1119  000080                     strcpy@to:
  1120                           	opt stack 0
  1121  000080                     ___lldiv@dividend:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x0
  1125  000080                     	ds	1
  1126  000081                     readADC@channel:
  1127                           	opt stack 0
  1128  000081                     I2C_Master_Read@a:
  1129                           	opt stack 0
  1130  000081                     lcdNibble@data:
  1131                           	opt stack 0
  1132  000081                     initTime@h:
  1133                           	opt stack 0
  1134  000081                     _isdigit$1584:
  1135                           	opt stack 0
  1136  000081                     I2C_Master_Write@d:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x1
  1140  000081                     	ds	1
  1141  000082                     ??_readMAG:
  1142  000082                     I2C_Master_Read@temp:
  1143                           	opt stack 0
  1144  000082                     lcdInst@data:
  1145                           	opt stack 0
  1146  000082                     putch@data:
  1147                           	opt stack 0
  1148  000082                     initTime@w:
  1149                           	opt stack 0
  1150  000082                     EEPROM_write@data:
  1151                           	opt stack 0
  1152  000082                     isdigit@c:
  1153                           	opt stack 0
  1154  000082                     updateServoPosition@timer:
  1155                           	opt stack 0
  1156  000082                     ___wmul@multiplicand:
  1157                           	opt stack 0
  1158  000082                     ___awmod@divisor:
  1159                           	opt stack 0
  1160  000082                     ___lwdiv@divisor:
  1161                           	opt stack 0
  1162  000082                     strcpy@from:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x2
  1166  000082                     	ds	1
  1167  000083                     ??_initLCD:
  1168  000083                     initTime@DD:
  1169                           	opt stack 0
  1170  000083                     logRun@byte1:
  1171                           	opt stack 0
  1172  000083                     getRTC@i:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x3
  1176  000083                     	ds	1
  1177  000084                     ??_updateServoPosition:
  1178  000084                     initTime@MM:
  1179                           	opt stack 0
  1180  000084                     logRun@byte2:
  1181                           	opt stack 0
  1182  000084                     ___awmod@counter:
  1183                           	opt stack 0
  1184  000084                     readMAG@res:
  1185                           	opt stack 0
  1186  000084                     ___wmul@product:
  1187                           	opt stack 0
  1188  000084                     ___lwdiv@quotient:
  1189                           	opt stack 0
  1190  000084                     strcpy@cp:
  1191                           	opt stack 0
  1192  000084                     ___lldiv@divisor:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x4
  1196  000084                     	ds	1
  1197  000085                     ??_initSortTimer:
  1198  000085                     initTime@YY:
  1199                           	opt stack 0
  1200  000085                     logRun@byte3:
  1201                           	opt stack 0
  1202  000085                     ___awmod@sign:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x5
  1206  000085                     	ds	1
  1207  000086                     ??_ID:
  1208  000086                     ?___awdiv:
  1209                           	opt stack 0
  1210  000086                     initTime@s:
  1211                           	opt stack 0
  1212  000086                     logRun@byte_i:
  1213                           	opt stack 0
  1214  000086                     ___lwdiv@counter:
  1215                           	opt stack 0
  1216  000086                     updateServoPosition@my_time:
  1217                           	opt stack 0
  1218  000086                     ___awdiv@dividend:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x6
  1222  000086                     	ds	1
  1223  000087                     ?___lwmod:
  1224                           	opt stack 0
  1225  000087                     logRun@byte11:
  1226                           	opt stack 0
  1227  000087                     ___lwmod@dividend:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x7
  1231  000087                     	ds	1
  1232  000088                     ??_Distribution:
  1233  000088                     initSortTimer@i:
  1234                           	opt stack 0
  1235  000088                     logRun@i:
  1236                           	opt stack 0
  1237  000088                     ___awdiv@divisor:
  1238                           	opt stack 0
  1239  000088                     ___lldiv@quotient:
  1240                           	opt stack 0
  1241  000088                     ID@sensor_outputs:
  1242                           	opt stack 0
  1243                           
  1244                           ; 6 bytes @ 0x8
  1245  000088                     	ds	1
  1246  000089                     ___lwmod@divisor:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x9
  1250  000089                     	ds	1
  1251  00008A                     ??_Loading:
  1252  00008A                     ___awdiv@counter:
  1253                           	opt stack 0
  1254  00008A                     logRun@addr:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0xA
  1258  00008A                     	ds	1
  1259  00008B                     ___awdiv@sign:
  1260                           	opt stack 0
  1261  00008B                     ___lwmod@counter:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0xB
  1265  00008B                     	ds	1
  1266  00008C                     ___lldiv@counter:
  1267                           	opt stack 0
  1268  00008C                     ___awdiv@quotient:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0xC
  1272  00008C                     	ds	1
  1273  00008D                     I2C_Master_Init@c:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0xD
  1277  00008D                     	ds	1
  1278  00008E                     ?_printf:
  1279                           	opt stack 0
  1280  00008E                     printf@f:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0xE
  1284  00008E                     	ds	3
  1285  000091                     ??_I2C_Master_Init:
  1286                           
  1287                           ; 1 bytes @ 0x11
  1288  000091                     	ds	4
  1289  000095                     ??_loadRTC:
  1290                           
  1291                           ; 1 bytes @ 0x15
  1292  000095                     	ds	1
  1293  000096                     loadRTC@i:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x16
  1297  000096                     	ds	4
  1298  00009A                     ??_printf:
  1299                           
  1300                           ; 1 bytes @ 0x1A
  1301  00009A                     	ds	4
  1302  00009E                     printf@prec:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x1E
  1306  00009E                     	ds	1
  1307  00009F                     printf@ap:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x1F
  1311  00009F                     	ds	2
  1312  0000A1                     printf@cp:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x21
  1316  0000A1                     	ds	2
  1317  0000A3                     printf@val:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x23
  1321  0000A3                     	ds	2
  1322  0000A5                     printf@len:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x25
  1326  0000A5                     	ds	2
  1327  0000A7                     printf@flag:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x27
  1331  0000A7                     	ds	1
  1332  0000A8                     printf@c:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x28
  1336  0000A8                     	ds	1
  1337  0000A9                     printf@width:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x29
  1341  0000A9                     	ds	2
  1342  0000AB                     ??_printRTC:
  1343                           
  1344                           ; 1 bytes @ 0x2B
  1345  0000AB                     	ds	3
  1346  0000AE                     printRTC@INT_time:
  1347                           	opt stack 0
  1348                           
  1349                           ; 14 bytes @ 0x2E
  1350  0000AE                     	ds	14
  1351  0000BC                     printRTC@RTC_month:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x3C
  1355  0000BC                     	ds	2
  1356  0000BE                     printRTC@month:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x3E
  1360  0000BE                     	ds	4
  1361  0000C2                     printRTC@i:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x42
  1365  0000C2                     	ds	2
  1366  0000C4                     ??_UI:
  1367                           
  1368                           ; 1 bytes @ 0x44
  1369  0000C4                     	ds	1
  1370  0000C5                     _UI$1949:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x45
  1374  0000C5                     	ds	2
  1375  0000C7                     UI@i:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x47
  1379  0000C7                     	ds	1
  1380  0000C8                     UI@i_483:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x48
  1384  0000C8                     	ds	1
  1385  0000C9                     UI@i_484:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x49
  1389  0000C9                     	ds	1
  1390  0000CA                     UI@i_487:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x4A
  1394  0000CA                     	ds	1
  1395  0000CB                     UI@i_488:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x4B
  1399  0000CB                     	ds	1
  1400  0000CC                     UI@i_491:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x4C
  1404  0000CC                     	ds	1
  1405  0000CD                     UI@i_492:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x4D
  1409  0000CD                     	ds	1
  1410  0000CE                     UI@i_495:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x4E
  1414  0000CE                     	ds	1
  1415  0000CF                     UI@i_496:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x4F
  1419  0000CF                     	ds	1
  1420  0000D0                     UI@i_499:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x50
  1424  0000D0                     	ds	1
  1425  0000D1                     UI@i_500:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x51
  1429  0000D1                     	ds	1
  1430  0000D2                     UI@i_503:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x52
  1434  0000D2                     	ds	1
  1435  0000D3                     UI@i_504:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x53
  1439  0000D3                     	ds	1
  1440  0000D4                     tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           ; 1 bytes @ 0x54
  1450                           
  1451                           	psect	cstackCOMRAM
  1452  000001                     __pcstackCOMRAM:
  1453                           	opt stack 0
  1454  000001                     ??i2_I2C_Master_Wait:
  1455  000001                     ??i2_isdigit:
  1456  000001                     ?i2___wmul:
  1457                           	opt stack 0
  1458  000001                     ?i2___lwmod:
  1459                           	opt stack 0
  1460  000001                     i2lcdNibble@temp:
  1461                           	opt stack 0
  1462  000001                     dispLogs@myLog:
  1463                           	opt stack 0
  1464  000001                     i2___wmul@multiplier:
  1465                           	opt stack 0
  1466  000001                     i2___lwmod@dividend:
  1467                           	opt stack 0
  1468  000001                     i2strcpy@to:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x0
  1472  000001                     	ds	1
  1473  000002                     i2I2C_Master_Read@a:
  1474                           	opt stack 0
  1475  000002                     i2lcdNibble@data:
  1476                           	opt stack 0
  1477  000002                     i2_isdigit$1584:
  1478                           	opt stack 0
  1479  000002                     i2I2C_Master_Write@d:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x1
  1483  000002                     	ds	1
  1484  000003                     i2I2C_Master_Read@temp:
  1485                           	opt stack 0
  1486  000003                     i2lcdInst@data:
  1487                           	opt stack 0
  1488  000003                     i2putch@data:
  1489                           	opt stack 0
  1490  000003                     i2isdigit@c:
  1491                           	opt stack 0
  1492  000003                     i2___wmul@multiplicand:
  1493                           	opt stack 0
  1494  000003                     i2___lwmod@divisor:
  1495                           	opt stack 0
  1496  000003                     i2strcpy@from:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x2
  1500  000003                     	ds	1
  1501  000004                     i2getRTC@i:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x3
  1505  000004                     	ds	1
  1506  000005                     i2___lwmod@counter:
  1507                           	opt stack 0
  1508  000005                     i2___wmul@product:
  1509                           	opt stack 0
  1510  000005                     i2strcpy@cp:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x4
  1514  000005                     	ds	1
  1515  000006                     ?i2___lwdiv:
  1516                           	opt stack 0
  1517  000006                     i2___lwdiv@dividend:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x5
  1521  000006                     	ds	2
  1522  000008                     i2___lwdiv@divisor:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x7
  1526  000008                     	ds	2
  1527  00000A                     i2___lwdiv@quotient:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x9
  1531  00000A                     	ds	2
  1532  00000C                     i2___lwdiv@counter:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0xB
  1536  00000C                     	ds	1
  1537  00000D                     ?i2_printf:
  1538                           	opt stack 0
  1539  00000D                     i2printf@f:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0xC
  1543  00000D                     	ds	12
  1544  000019                     ??i2_printf:
  1545                           
  1546                           ; 1 bytes @ 0x18
  1547  000019                     	ds	4
  1548  00001D                     i2printf@prec:
  1549                           	opt stack 0
  1550                           
  1551                           ; 1 bytes @ 0x1C
  1552  00001D                     	ds	1
  1553  00001E                     i2printf@ap:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x1D
  1557  00001E                     	ds	2
  1558  000020                     i2printf@cp:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x1F
  1562  000020                     	ds	2
  1563  000022                     i2printf@val:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x21
  1567  000022                     	ds	2
  1568  000024                     i2printf@len:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x23
  1572  000024                     	ds	2
  1573  000026                     i2printf@flag:
  1574                           	opt stack 0
  1575                           
  1576                           ; 1 bytes @ 0x25
  1577  000026                     	ds	1
  1578  000027                     i2printf@c:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x26
  1582  000027                     	ds	1
  1583  000028                     i2printf@width:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x27
  1587  000028                     	ds	2
  1588  00002A                     ??_printSortTimer:
  1589  00002A                     ??i2_printRTC:
  1590  00002A                     ?_inputHandler:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x29
  1594  00002A                     	ds	2
  1595  00002C                     ??_inputHandler:
  1596                           
  1597                           ; 1 bytes @ 0x2B
  1598  00002C                     	ds	1
  1599  00002D                     printSortTimer@curTime:
  1600                           	opt stack 0
  1601  00002D                     i2printRTC@INT_time:
  1602                           	opt stack 0
  1603                           
  1604                           ; 14 bytes @ 0x2C
  1605  00002D                     	ds	14
  1606  00003B                     printSortTimer@start_sec:
  1607                           	opt stack 0
  1608  00003B                     i2printRTC@RTC_month:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x3A
  1612  00003B                     	ds	2
  1613  00003D                     printSortTimer@cur_sec:
  1614                           	opt stack 0
  1615  00003D                     i2printRTC@month:
  1616                           	opt stack 0
  1617                           
  1618                           ; 4 bytes @ 0x3C
  1619  00003D                     	ds	2
  1620  00003F                     printSortTimer@hour:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x3E
  1624  00003F                     	ds	2
  1625  000041                     printSortTimer@min:
  1626                           	opt stack 0
  1627  000041                     i2printRTC@i:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x40
  1631  000041                     	ds	2
  1632  000043                     ??_updateMenu:
  1633  000043                     printSortTimer@sec:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x42
  1637  000043                     	ds	2
  1638  000045                     _printSortTimer$2064:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x44
  1642  000045                     	ds	2
  1643  000047                     printSortTimer@timeDiff:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x46
  1647  000047                     	ds	2
  1648  000049                     printSortTimer@i:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x48
  1652  000049                     	ds	2
  1653  00004B                     ??_handler:
  1654                           
  1655                           ; 1 bytes @ 0x4A
  1656  00004B                     	ds	16
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1l	equ	0xFE1
  1665                           
  1666 ;;
  1667 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1668 ;;
  1669 ;; *************** function _main *****************
  1670 ;; Defined at:
  1671 ;;		line 15 in file "main.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;Total ram usage:        0 bytes
  1690 ;; Hardware stack levels required when called:   13
  1691 ;; This function calls:
  1692 ;;		_PortTestA5
  1693 ;;		_UI
  1694 ;;		_initLCD
  1695 ;;		_initTime
  1696 ;;		_initUI
  1697 ;;		_logRun
  1698 ;;		_machineConfig
  1699 ;;		_sort
  1700 ;;		_stopSignals
  1701 ;; This function is called by:
  1702 ;;		Startup code after reset
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text0
  1707  0020DE                     __ptext0:
  1708                           	opt stack 0
  1709  0020DE                     _main:
  1710                           	opt stack 18
  1711                           
  1712                           ;main.c: 16: machineConfig();
  1713                           
  1714                           ;incstack = 0
  1715  0020DE  ECC0  F012         	call	_machineConfig	;wreg free
  1716                           
  1717                           ;main.c: 17: initLCD();
  1718  0020E2  EC8D  F013         	call	_initLCD	;wreg free
  1719                           
  1720                           ;main.c: 18: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1721  0020E6  0E44               	movlw	68
  1722  0020E8  0100               	movlb	0	; () banked
  1723  0020EA  6F80               	movwf	initTime@m& (0+255),b
  1724  0020EC  0E19               	movlw	25
  1725  0020EE  0100               	movlb	0	; () banked
  1726  0020F0  6F81               	movwf	initTime@h& (0+255),b
  1727  0020F2  0E06               	movlw	6
  1728  0020F4  0100               	movlb	0	; () banked
  1729  0020F6  6F82               	movwf	initTime@w& (0+255),b
  1730  0020F8  0E24               	movlw	36
  1731  0020FA  0100               	movlb	0	; () banked
  1732  0020FC  6F83               	movwf	initTime@DD& (0+255),b
  1733  0020FE  0E02               	movlw	2
  1734  002100  0100               	movlb	0	; () banked
  1735  002102  6F84               	movwf	initTime@MM& (0+255),b
  1736  002104  0E17               	movlw	23
  1737  002106  0100               	movlb	0	; () banked
  1738  002108  6F85               	movwf	initTime@YY& (0+255),b
  1739  00210A  0E42               	movlw	66
  1740  00210C  EC12  F016         	call	_initTime
  1741                           
  1742                           ;main.c: 19: initUI();
  1743  002110  ECEF  F015         	call	_initUI	;wreg free
  1744                           
  1745                           ;main.c: 20: first = 1;
  1746  002114  0E00               	movlw	0
  1747  002116  0100               	movlb	0	; () banked
  1748  002118  6FF4               	movwf	(_first+1)& (0+255),b
  1749  00211A  0E01               	movlw	1
  1750  00211C  6FF3               	movwf	_first& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 24: switch(machine_state){
  1754                           
  1755                           ;main.c: 23: while(1){
  1756  00211E  D018               	goto	l5690
  1757  002120                     l5672:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 26: UI();
  1761  002120  EC09  F000         	call	_UI	;wreg free
  1762                           
  1763                           ;main.c: 27: break;
  1764  002124  D015               	goto	l5690
  1765  002126                     l5674:
  1766                           
  1767                           ;main.c: 29: sort();
  1768  002126  EC01  F016         	call	_sort	;wreg free
  1769                           
  1770                           ;main.c: 30: break;
  1771  00212A  D012               	goto	l5690
  1772  00212C                     l5676:
  1773                           
  1774                           ;main.c: 32: stopSignals();
  1775  00212C  EC4F  F016         	call	_stopSignals	;wreg free
  1776                           
  1777                           ;main.c: 33: logRun();
  1778  002130  ECDE  F00C         	call	_logRun	;wreg free
  1779                           
  1780                           ;main.c: 34: first = 1;
  1781  002134  0E00               	movlw	0
  1782  002136  0100               	movlb	0	; () banked
  1783  002138  6FF4               	movwf	(_first+1)& (0+255),b
  1784  00213A  0E01               	movlw	1
  1785  00213C  6FF3               	movwf	_first& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 35: UI();
  1789  00213E  EC09  F000         	call	_UI	;wreg free
  1790                           
  1791                           ;main.c: 36: break;
  1792  002142  D006               	goto	l5690
  1793  002144                     l5684:
  1794                           
  1795                           ;main.c: 38: PortTestA5();
  1796  002144  EC6E  F016         	call	_PortTestA5	;wreg free
  1797                           
  1798                           ;main.c: 39: break;
  1799  002148  D003               	goto	l5690
  1800  00214A                     l5686:
  1801                           
  1802                           ;main.c: 41: stopSignals();
  1803  00214A  EC4F  F016         	call	_stopSignals	;wreg free
  1804  00214E                     l450:
  1805  00214E  D7FF               	goto	l450
  1806  002150                     l5690:
  1807  002150  0100               	movlb	0	; () banked
  1808  002152  51FB               	movf	_machine_state& (0+255),w,b
  1809                           
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 5, Range of values is 0 to 4
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte           16     9 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816  002154  0A00               	xorlw	0	; case 0
  1817  002156  B4D8               	btfsc	status,2,c
  1818  002158  D7E3               	goto	l5672
  1819  00215A  0A01               	xorlw	1	; case 1
  1820  00215C  B4D8               	btfsc	status,2,c
  1821  00215E  D7E3               	goto	l5674
  1822  002160  0A03               	xorlw	3	; case 2
  1823  002162  B4D8               	btfsc	status,2,c
  1824  002164  D7E3               	goto	l5676
  1825  002166  0A01               	xorlw	1	; case 3
  1826  002168  B4D8               	btfsc	status,2,c
  1827  00216A  D7EC               	goto	l5684
  1828  00216C  0A07               	xorlw	7	; case 4
  1829  00216E  B4D8               	btfsc	status,2,c
  1830  002170  D7EC               	goto	l5686
  1831                           
  1832                           ; BSR set to: 0
  1833                           
  1834                           ; BSR set to: 0
  1835  002172  D7EE               	goto	l5690
  1836  002174                     __end_of_main:
  1837                           	opt stack 0
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _stopSignals *****************
  1849 ;; Defined at:
  1850 ;;		line 50 in file "main.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    7
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text1
  1879  002C9E                     __ptext1:
  1880                           	opt stack 0
  1881  002C9E                     _stopSignals:
  1882                           	opt stack 23
  1883                           
  1884                           ;main.c: 51: LATA = 0x00;
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;incstack = 0
  1888  002C9E  0E00               	movlw	0
  1889  002CA0  6E89               	movwf	3977,c	;volatile
  1890                           
  1891                           ;main.c: 52: LATB = 0x00;
  1892  002CA2  0E00               	movlw	0
  1893  002CA4  6E8A               	movwf	3978,c	;volatile
  1894                           
  1895                           ;main.c: 53: LATC = 0x00;
  1896  002CA6  0E00               	movlw	0
  1897  002CA8  6E8B               	movwf	3979,c	;volatile
  1898                           
  1899                           ;main.c: 54: LATD = 0x00;
  1900  002CAA  0E00               	movlw	0
  1901  002CAC  6E8C               	movwf	3980,c	;volatile
  1902                           
  1903                           ;main.c: 55: LATE = 0x00;
  1904  002CAE  0E00               	movlw	0
  1905  002CB0  6E8D               	movwf	3981,c	;volatile
  1906  002CB2  0012               	return		;funcret
  1907  002CB4                     __end_of_stopSignals:
  1908                           	opt stack 0
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _sort *****************
  1920 ;; Defined at:
  1921 ;;		line 55 in file "sort.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;Total ram usage:        0 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:   12
  1942 ;; This function calls:
  1943 ;;		_Distribution
  1944 ;;		_ID
  1945 ;;		_Loading
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text2
  1952  002C02                     __ptext2:
  1953                           	opt stack 0
  1954  002C02                     _sort:
  1955                           	opt stack 18
  1956                           
  1957                           ;sort.c: 56: if(machine_state == Sorting_state){
  1958                           
  1959                           ;incstack = 0
  1960  002C02  0100               	movlb	0	; () banked
  1961  002C04  05FB               	decf	_machine_state& (0+255),w,b
  1962  002C06  B4D8               	btfsc	status,2,c
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;sort.c: 57: Loading();
  1966  002C08  EC73  F00F         	call	_Loading	;wreg free
  1967                           
  1968                           ;sort.c: 58: }
  1969                           ;sort.c: 59: if(machine_state == Sorting_state){
  1970  002C0C  0100               	movlb	0	; () banked
  1971  002C0E  05FB               	decf	_machine_state& (0+255),w,b
  1972  002C10  B4D8               	btfsc	status,2,c
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;sort.c: 60: ID();
  1976  002C12  EC7E  F00D         	call	_ID	;wreg free
  1977                           
  1978                           ;sort.c: 61: }
  1979                           ;sort.c: 62: if(machine_state == Sorting_state){
  1980  002C16  0100               	movlb	0	; () banked
  1981  002C18  05FB               	decf	_machine_state& (0+255),w,b
  1982  002C1A  A4D8               	btfss	status,2,c
  1983  002C1C  0012               	return	
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;sort.c: 63: Distribution();
  1987  002C1E  EC1A  F00E         	call	_Distribution	;wreg free
  1988  002C22  0012               	return	
  1989  002C24                     __end_of_sort:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1l	equ	0xFE1
  1999                           status	equ	0xFD8
  2000                           
  2001 ;; *************** function _Loading *****************
  2002 ;; Defined at:
  2003 ;;		line 67 in file "sort.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;		None
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;		None
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  1    wreg      void 
  2010 ;; Registers used:
  2011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;Total ram usage:        2 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:   11
  2024 ;; This function calls:
  2025 ;;		_initGlobalVars
  2026 ;;		_initServos
  2027 ;;		_initSortTimer
  2028 ;;		_lcdInst
  2029 ;; This function is called by:
  2030 ;;		_sort
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text3
  2035  001EE6                     __ptext3:
  2036                           	opt stack 0
  2037  001EE6                     _Loading:
  2038                           	opt stack 18
  2039                           
  2040                           ;sort.c: 68: if(first){
  2041                           
  2042                           ;incstack = 0
  2043  001EE6  0100               	movlb	0	; () banked
  2044  001EE8  51F3               	movf	_first& (0+255),w,b
  2045  001EEA  0100               	movlb	0	; () banked
  2046  001EEC  11F4               	iorwf	(_first+1)& (0+255),w,b
  2047  001EEE  B4D8               	btfsc	status,2,c
  2048  001EF0  D014               	goto	l4798
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;sort.c: 69: initGlobalVars();
  2052  001EF2  EC43  F011         	call	_initGlobalVars	;wreg free
  2053                           
  2054                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2055  001EF6  0E01               	movlw	1
  2056  001EF8  EC88  F016         	call	_lcdInst
  2057  001EFC  0E68               	movlw	104
  2058  001EFE  0100               	movlb	0	; () banked
  2059  001F00  6F8A               	movwf	??_Loading& (0+255),b
  2060  001F02  0EE4               	movlw	228
  2061  001F04                     u4897:
  2062  001F04  2EE8               	decfsz	wreg,f,c
  2063  001F06  D7FE               	bra	u4897
  2064  001F08  2F8A               	decfsz	??_Loading& (0+255),f,b
  2065  001F0A  D7FC               	bra	u4897
  2066  001F0C  F000               	nop	
  2067                           
  2068                           ;sort.c: 71: initSortTimer();
  2069  001F0E  ECC9  F00F         	call	_initSortTimer	;wreg free
  2070                           
  2071                           ;sort.c: 74: LATAbits.LATA5 = 1;
  2072  001F12  8A89               	bsf	3977,5,c	;volatile
  2073                           
  2074                           ;sort.c: 77: initServos();
  2075  001F14  EC23  F016         	call	_initServos	;wreg free
  2076                           
  2077                           ;sort.c: 78: }
  2078  001F18  0012               	return	
  2079  001F1A                     l4798:
  2080                           
  2081                           ;sort.c: 79: else{
  2082                           ;sort.c: 82: if(!f_loadingNewCan){
  2083  001F1A  0100               	movlb	0	; () banked
  2084  001F1C  51F1               	movf	_f_loadingNewCan& (0+255),w,b
  2085  001F1E  0100               	movlb	0	; () banked
  2086  001F20  11F2               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2087  001F22  A4D8               	btfss	status,2,c
  2088  001F24  D016               	goto	l4812
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;sort.c: 86: if(!f_loadingNewCan){
  2092  001F26  0100               	movlb	0	; () banked
  2093  001F28  51F1               	movf	_f_loadingNewCan& (0+255),w,b
  2094  001F2A  0100               	movlb	0	; () banked
  2095  001F2C  11F2               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2096  001F2E  B4D8               	btfsc	status,2,c
  2097  001F30  0012               	return	
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;sort.c: 90: else{
  2101                           ;sort.c: 91: count_total++;
  2102                           
  2103                           ; BSR set to: 0
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;sort.c: 88: }
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;sort.c: 87: return;
  2110  001F32  0100               	movlb	0	; () banked
  2111  001F34  4BFD               	infsnz	_count_total& (0+255),f,b
  2112  001F36  2BFE               	incf	(_count_total+1)& (0+255),f,b
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;sort.c: 92: if(count_total == 12){
  2116  001F38  0E0C               	movlw	12
  2117  001F3A  0100               	movlb	0	; () banked
  2118  001F3C  19FD               	xorwf	_count_total& (0+255),w,b
  2119  001F3E  0100               	movlb	0	; () banked
  2120  001F40  11FE               	iorwf	(_count_total+1)& (0+255),w,b
  2121  001F42  A4D8               	btfss	status,2,c
  2122  001F44  0012               	return	
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;sort.c: 93: f_lastCan = 1;
  2126  001F46  0E00               	movlw	0
  2127  001F48  0100               	movlb	0	; () banked
  2128  001F4A  6FF0               	movwf	(_f_lastCan+1)& (0+255),b
  2129  001F4C  0E01               	movlw	1
  2130  001F4E  6FEF               	movwf	_f_lastCan& (0+255),b
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;sort.c: 94: }
  2134                           ;sort.c: 95: }
  2135                           ;sort.c: 96: }
  2136                           
  2137                           ; BSR set to: 0
  2138  001F50  0012               	return	
  2139  001F52                     l4812:
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;sort.c: 99: else if(f_ID_receive){
  2143  001F52  0100               	movlb	0	; () banked
  2144  001F54  51E9               	movf	_f_ID_receive& (0+255),w,b
  2145  001F56  0100               	movlb	0	; () banked
  2146  001F58  11EA               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2147  001F5A  B4D8               	btfsc	status,2,c
  2148  001F5C  0012               	return	
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;sort.c: 100: f_loadingNewCan = 0;
  2152  001F5E  0E00               	movlw	0
  2153  001F60  0100               	movlb	0	; () banked
  2154  001F62  6FF2               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2155  001F64  0E00               	movlw	0
  2156  001F66  6FF1               	movwf	_f_loadingNewCan& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;sort.c: 101: LATAbits.LATA4 = 1;
  2160  001F68  8889               	bsf	3977,4,c	;volatile
  2161                           
  2162                           ;sort.c: 102: f_can_coming_to_ID = 1;
  2163  001F6A  0E00               	movlw	0
  2164  001F6C  0100               	movlb	0	; () banked
  2165  001F6E  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2166  001F70  0E01               	movlw	1
  2167  001F72  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;sort.c: 103: _delay((unsigned long)((100)*(32000000/4000.0)));
  2171  001F74  0E05               	movlw	5
  2172  001F76  0100               	movlb	0	; () banked
  2173  001F78  6F8B               	movwf	(??_Loading+1)& (0+255),b
  2174  001F7A  0E0F               	movlw	15
  2175  001F7C  0100               	movlb	0	; () banked
  2176  001F7E  6F8A               	movwf	??_Loading& (0+255),b
  2177  001F80  0EF1               	movlw	241
  2178  001F82                     u4907:
  2179  001F82  2EE8               	decfsz	wreg,f,c
  2180  001F84  D7FE               	bra	u4907
  2181  001F86  2F8A               	decfsz	??_Loading& (0+255),f,b
  2182  001F88  D7FC               	bra	u4907
  2183  001F8A  2F8B               	decfsz	(??_Loading+1)& (0+255),f,b
  2184  001F8C  D7FA               	bra	u4907
  2185                           
  2186                           ;sort.c: 104: LATAbits.LATA4 = 0;
  2187  001F8E  9889               	bcf	3977,4,c	;volatile
  2188  001F90  0012               	return	
  2189  001F92                     __end_of_Loading:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           postdec1	equ	0xFE5
  2198                           fsr1l	equ	0xFE1
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _initSortTimer *****************
  2202 ;; Defined at:
  2203 ;;		line 217 in file "sort.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  i               2    8[BANK0 ] int 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;Total ram usage:        5 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:   10
  2224 ;; This function calls:
  2225 ;;		_getRTC
  2226 ;; This function is called by:
  2227 ;;		_Loading
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text4
  2232  001F92                     __ptext4:
  2233                           	opt stack 0
  2234  001F92                     _initSortTimer:
  2235                           	opt stack 18
  2236                           
  2237                           ;sort.c: 219: getRTC();
  2238                           
  2239                           ;incstack = 0
  2240  001F92  EC00  F011         	call	_getRTC	;wreg free
  2241                           
  2242                           ;sort.c: 220: for(int i = 0; i < 7; i++){
  2243  001F96  0E00               	movlw	0
  2244  001F98  0100               	movlb	0	; () banked
  2245  001F9A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2246  001F9C  0E00               	movlw	0
  2247  001F9E  6F88               	movwf	initSortTimer@i& (0+255),b
  2248  001FA0                     l4500:
  2249                           
  2250                           ; BSR set to: 0
  2251  001FA0  0100               	movlb	0	; () banked
  2252  001FA2  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2253  001FA4  D008               	goto	l4504
  2254  001FA6  0100               	movlb	0	; () banked
  2255  001FA8  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2256  001FAA  E140               	bnz	l4510
  2257  001FAC  0E07               	movlw	7
  2258  001FAE  0100               	movlb	0	; () banked
  2259  001FB0  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2260  001FB2  B0D8               	btfsc	status,0,c
  2261  001FB4  D03B               	goto	l4510
  2262  001FB6                     l4504:
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;sort.c: 221: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2266  001FB6  0ED4               	movlw	low _time
  2267  001FB8  0100               	movlb	0	; () banked
  2268  001FBA  2588               	addwf	initSortTimer@i& (0+255),w,b
  2269  001FBC  6ED9               	movwf	fsr2l,c
  2270  001FBE  0E00               	movlw	high _time
  2271  001FC0  0100               	movlb	0	; () banked
  2272  001FC2  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2273  001FC4  6EDA               	movwf	fsr2h,c
  2274  001FC6  50DF               	movf	indf2,w,c
  2275  001FC8  0100               	movlb	0	; () banked
  2276  001FCA  6F85               	movwf	??_initSortTimer& (0+255),b
  2277  001FCC  0100               	movlb	0	; () banked
  2278  001FCE  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2279  001FD0  0E0F               	movlw	15
  2280  001FD2  1785               	andwf	??_initSortTimer& (0+255),f,b
  2281  001FD4  0E0F               	movlw	15
  2282  001FD6  0100               	movlb	0	; () banked
  2283  001FD8  1785               	andwf	??_initSortTimer& (0+255),f,b
  2284  001FDA  0100               	movlb	0	; () banked
  2285  001FDC  5185               	movf	??_initSortTimer& (0+255),w,b
  2286  001FDE  0D0A               	mullw	10
  2287  001FE0  0ED4               	movlw	low _time
  2288  001FE2  0100               	movlb	0	; () banked
  2289  001FE4  2588               	addwf	initSortTimer@i& (0+255),w,b
  2290  001FE6  6ED9               	movwf	fsr2l,c
  2291  001FE8  0E00               	movlw	high _time
  2292  001FEA  0100               	movlb	0	; () banked
  2293  001FEC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2294  001FEE  6EDA               	movwf	fsr2h,c
  2295  001FF0  50DF               	movf	indf2,w,c
  2296  001FF2  0B0F               	andlw	15
  2297  001FF4  0100               	movlb	0	; () banked
  2298  001FF6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2299  001FF8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2300  001FFA  50F3               	movf	prodl,w,c
  2301  001FFC  0100               	movlb	0	; () banked
  2302  001FFE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2303  002000  50F4               	movf	prodh,w,c
  2304  002002  0100               	movlb	0	; () banked
  2305  002004  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2306  002006  90D8               	bcf	status,0,c
  2307  002008  0100               	movlb	0	; () banked
  2308  00200A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2309  00200C  6ED9               	movwf	fsr2l,c
  2310  00200E  0100               	movlb	0	; () banked
  2311  002010  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2312  002012  6EDA               	movwf	fsr2h,c
  2313  002014  0E0E               	movlw	low _startTime
  2314  002016  26D9               	addwf	fsr2l,f,c
  2315  002018  0E01               	movlw	high _startTime
  2316  00201A  22DA               	addwfc	fsr2h,f,c
  2317  00201C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2318  002020  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2319                           
  2320                           ; BSR set to: 0
  2321  002024  0100               	movlb	0	; () banked
  2322  002026  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2323  002028  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2324  00202A  D7BA               	goto	l4500
  2325  00202C                     l4510:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;sort.c: 222: }
  2329                           ;sort.c: 224: T0CON = 0b00010111;
  2330  00202C  0E17               	movlw	23
  2331  00202E  6ED5               	movwf	4053,c	;volatile
  2332                           
  2333                           ;sort.c: 233: TMR0H = 0b10000101;
  2334  002030  0E85               	movlw	133
  2335  002032  6ED7               	movwf	4055,c	;volatile
  2336                           
  2337                           ;sort.c: 234: TMR0L = 0b11101110;
  2338  002034  0EEE               	movlw	238
  2339  002036  6ED6               	movwf	4054,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;sort.c: 235: TMR0ON = 1;
  2343  002038  8ED5               	bsf	4053,7,c	;volatile
  2344                           
  2345                           ; BSR set to: 0
  2346  00203A  0012               	return		;funcret
  2347  00203C                     __end_of_initSortTimer:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           indf2	equ	0xFDF
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _initServos *****************
  2367 ;; Defined at:
  2368 ;;		line 237 in file "sort.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    8
  2389 ;; This function calls:
  2390 ;;		_updateServoPosition
  2391 ;; This function is called by:
  2392 ;;		_Loading
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text5
  2397  002C46                     __ptext5:
  2398                           	opt stack 0
  2399  002C46                     _initServos:
  2400                           	opt stack 20
  2401                           
  2402                           ;sort.c: 238: updateServoPosition(2000, 1);
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;incstack = 0
  2406  002C46  0E07               	movlw	7
  2407  002C48  0100               	movlb	0	; () banked
  2408  002C4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2409  002C4C  0ED0               	movlw	208
  2410  002C4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2411  002C50  0E00               	movlw	0
  2412  002C52  0100               	movlb	0	; () banked
  2413  002C54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2414  002C56  0E01               	movlw	1
  2415  002C58  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2416  002C5A  ECF4  F011         	call	_updateServoPosition	;wreg free
  2417                           
  2418                           ;sort.c: 240: TMR1ON = 1;
  2419  002C5E  80CD               	bsf	4045,0,c	;volatile
  2420                           
  2421                           ;sort.c: 242: LATCbits.LATC0 = 0;
  2422  002C60  908B               	bcf	3979,0,c	;volatile
  2423  002C62  0012               	return		;funcret
  2424  002C64                     __end_of_initServos:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           postinc0	equ	0xFEE
  2433                           wreg	equ	0xFE8
  2434                           postdec1	equ	0xFE5
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           postdec2	equ	0xFDD
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _initGlobalVars *****************
  2444 ;; Defined at:
  2445 ;;		line 198 in file "sort.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;Total ram usage:        0 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    7
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_Loading
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text6
  2474  002286                     __ptext6:
  2475                           	opt stack 0
  2476  002286                     _initGlobalVars:
  2477                           	opt stack 21
  2478                           
  2479                           ;sort.c: 200: first = 0;
  2480                           
  2481                           ;incstack = 0
  2482  002286  0E00               	movlw	0
  2483  002288  0100               	movlb	0	; () banked
  2484  00228A  6FF4               	movwf	(_first+1)& (0+255),b
  2485  00228C  0E00               	movlw	0
  2486  00228E  6FF3               	movwf	_first& (0+255),b
  2487                           
  2488                           ;sort.c: 203: f_loadingNewCan = 0;
  2489  002290  0E00               	movlw	0
  2490  002292  0100               	movlb	0	; () banked
  2491  002294  6FF2               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2492  002296  0E00               	movlw	0
  2493  002298  6FF1               	movwf	_f_loadingNewCan& (0+255),b
  2494                           
  2495                           ;sort.c: 204: f_lastCan = 0;
  2496  00229A  0E00               	movlw	0
  2497  00229C  0100               	movlb	0	; () banked
  2498  00229E  6FF0               	movwf	(_f_lastCan+1)& (0+255),b
  2499  0022A0  0E00               	movlw	0
  2500  0022A2  6FEF               	movwf	_f_lastCan& (0+255),b
  2501                           
  2502                           ;sort.c: 205: f_ID_receive = 1;
  2503  0022A4  0E00               	movlw	0
  2504  0022A6  0100               	movlb	0	; () banked
  2505  0022A8  6FEA               	movwf	(_f_ID_receive+1)& (0+255),b
  2506  0022AA  0E01               	movlw	1
  2507  0022AC  6FE9               	movwf	_f_ID_receive& (0+255),b
  2508                           
  2509                           ;sort.c: 206: f_can_coming_to_ID = 0;
  2510  0022AE  0E00               	movlw	0
  2511  0022B0  0100               	movlb	0	; () banked
  2512  0022B2  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2513  0022B4  0E00               	movlw	0
  2514  0022B6  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2515                           
  2516                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  2517  0022B8  0E00               	movlw	0
  2518  0022BA  0100               	movlb	0	; () banked
  2519  0022BC  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2520  0022BE  0E00               	movlw	0
  2521  0022C0  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  2522                           
  2523                           ;sort.c: 208: f_can_distributed = 0;
  2524  0022C2  0E00               	movlw	0
  2525  0022C4  6E6C               	movwf	_f_can_distributed+1,c
  2526  0022C6  0E00               	movlw	0
  2527  0022C8  6E6B               	movwf	_f_can_distributed,c
  2528                           
  2529                           ;sort.c: 211: count_total = 0;
  2530  0022CA  0E00               	movlw	0
  2531  0022CC  0100               	movlb	0	; () banked
  2532  0022CE  6FFE               	movwf	(_count_total+1)& (0+255),b
  2533  0022D0  0E00               	movlw	0
  2534  0022D2  6FFD               	movwf	_count_total& (0+255),b
  2535                           
  2536                           ;sort.c: 212: count_pop_no_tab = 0;
  2537  0022D4  0E00               	movlw	0
  2538  0022D6  0100               	movlb	0	; () banked
  2539  0022D8  6FE2               	movwf	(_count_pop_no_tab+1)& (0+255),b
  2540  0022DA  0E00               	movlw	0
  2541  0022DC  6FE1               	movwf	_count_pop_no_tab& (0+255),b
  2542                           
  2543                           ;sort.c: 213: count_pop_w_tab = 0;
  2544  0022DE  0E00               	movlw	0
  2545  0022E0  0100               	movlb	0	; () banked
  2546  0022E2  6FE4               	movwf	(_count_pop_w_tab+1)& (0+255),b
  2547  0022E4  0E00               	movlw	0
  2548  0022E6  6FE3               	movwf	_count_pop_w_tab& (0+255),b
  2549                           
  2550                           ;sort.c: 214: count_can_w_lab = 0;
  2551  0022E8  0E00               	movlw	0
  2552  0022EA  0100               	movlb	0	; () banked
  2553  0022EC  6FE0               	movwf	(_count_can_w_lab+1)& (0+255),b
  2554  0022EE  0E00               	movlw	0
  2555  0022F0  6FDF               	movwf	_count_can_w_lab& (0+255),b
  2556                           
  2557                           ;sort.c: 215: count_can_no_lab = 0;
  2558  0022F2  0E00               	movlw	0
  2559  0022F4  0100               	movlb	0	; () banked
  2560  0022F6  6FDE               	movwf	(_count_can_no_lab+1)& (0+255),b
  2561  0022F8  0E00               	movlw	0
  2562  0022FA  6FDD               	movwf	_count_can_no_lab& (0+255),b
  2563                           
  2564                           ; BSR set to: 0
  2565  0022FC  0012               	return		;funcret
  2566  0022FE                     __end_of_initGlobalVars:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           postinc0	equ	0xFEE
  2575                           wreg	equ	0xFE8
  2576                           postdec1	equ	0xFE5
  2577                           fsr1l	equ	0xFE1
  2578                           indf2	equ	0xFDF
  2579                           postinc2	equ	0xFDE
  2580                           postdec2	equ	0xFDD
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _ID *****************
  2586 ;; Defined at:
  2587 ;;		line 108 in file "sort.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:        8 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    9
  2608 ;; This function calls:
  2609 ;;		_readMAG
  2610 ;; This function is called by:
  2611 ;;		_sort
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text7
  2616  001AFC                     __ptext7:
  2617                           	opt stack 0
  2618  001AFC                     _ID:
  2619                           	opt stack 20
  2620                           
  2621                           ;sort.c: 109: if(f_can_coming_to_ID){
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;incstack = 0
  2625  001AFC  0100               	movlb	0	; () banked
  2626  001AFE  51EB               	movf	_f_can_coming_to_ID& (0+255),w,b
  2627  001B00  0100               	movlb	0	; () banked
  2628  001B02  11EC               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2629  001B04  B4D8               	btfsc	status,2,c
  2630  001B06  0012               	return	
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;sort.c: 111: _delay((unsigned long)((500)*(32000000/4000.0)));
  2634  001B08  0E15               	movlw	21
  2635  001B0A  0100               	movlb	0	; () banked
  2636  001B0C  6F87               	movwf	(??_ID+1)& (0+255),b
  2637  001B0E  0E4B               	movlw	75
  2638  001B10  0100               	movlb	0	; () banked
  2639  001B12  6F86               	movwf	??_ID& (0+255),b
  2640  001B14  0EBE               	movlw	190
  2641  001B16                     u4917:
  2642  001B16  2EE8               	decfsz	wreg,f,c
  2643  001B18  D7FE               	bra	u4917
  2644  001B1A  2F86               	decfsz	??_ID& (0+255),f,b
  2645  001B1C  D7FC               	bra	u4917
  2646  001B1E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2647  001B20  D7FA               	bra	u4917
  2648  001B22  F000               	nop	
  2649                           
  2650                           ;sort.c: 116: int sensor_outputs[3];
  2651                           ;sort.c: 120: sensor_outputs[0] = PORTAbits.RA2;
  2652  001B24  A480               	btfss	3968,2,c	;volatile
  2653  001B26  D004               	goto	u3590
  2654  001B28  0100               	movlb	0	; () banked
  2655  001B2A  6B86               	clrf	??_ID& (0+255),b
  2656  001B2C  2B86               	incf	??_ID& (0+255),f,b
  2657  001B2E  D002               	goto	u3598
  2658  001B30                     u3590:
  2659  001B30  0100               	movlb	0	; () banked
  2660  001B32  6B86               	clrf	??_ID& (0+255),b
  2661  001B34                     u3598:
  2662  001B34  0100               	movlb	0	; () banked
  2663  001B36  5186               	movf	??_ID& (0+255),w,b
  2664  001B38  0100               	movlb	0	; () banked
  2665  001B3A  6F88               	movwf	ID@sensor_outputs& (0+255),b
  2666  001B3C  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;sort.c: 122: if(!sensor_outputs[0]){
  2670  001B3E  0100               	movlb	0	; () banked
  2671  001B40  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2672  001B42  0100               	movlb	0	; () banked
  2673  001B44  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2674  001B46  A4D8               	btfss	status,2,c
  2675  001B48  D028               	goto	l4844
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;sort.c: 123: readMAG();
  2679  001B4A  EC68  F013         	call	_readMAG	;wreg free
  2680                           
  2681                           ;sort.c: 124: sensor_outputs[1] = MAG_signal;
  2682  001B4E  C0DB  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  2683  001B52  C0DC  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  2684                           
  2685                           ;sort.c: 125: if(!sensor_outputs[1]){
  2686  001B56  0100               	movlb	0	; () banked
  2687  001B58  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2688  001B5A  0100               	movlb	0	; () banked
  2689  001B5C  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2690  001B5E  A4D8               	btfss	status,2,c
  2691  001B60  D01C               	goto	l4844
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;sort.c: 126: LATAbits.LATA3 = 1;
  2695  001B62  8689               	bsf	3977,3,c	;volatile
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;sort.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
  2699  001B64  0E05               	movlw	5
  2700  001B66  0100               	movlb	0	; () banked
  2701  001B68  6F87               	movwf	(??_ID+1)& (0+255),b
  2702  001B6A  0E0F               	movlw	15
  2703  001B6C  0100               	movlb	0	; () banked
  2704  001B6E  6F86               	movwf	??_ID& (0+255),b
  2705  001B70  0EF1               	movlw	241
  2706  001B72                     u4927:
  2707  001B72  2EE8               	decfsz	wreg,f,c
  2708  001B74  D7FE               	bra	u4927
  2709  001B76  2F86               	decfsz	??_ID& (0+255),f,b
  2710  001B78  D7FC               	bra	u4927
  2711  001B7A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2712  001B7C  D7FA               	bra	u4927
  2713                           
  2714                           ;sort.c: 129: sensor_outputs[2] = PORTAbits.RA2;
  2715  001B7E  A480               	btfss	3968,2,c	;volatile
  2716  001B80  D004               	goto	u3620
  2717  001B82  0100               	movlb	0	; () banked
  2718  001B84  6B86               	clrf	??_ID& (0+255),b
  2719  001B86  2B86               	incf	??_ID& (0+255),f,b
  2720  001B88  D002               	goto	u3628
  2721  001B8A                     u3620:
  2722  001B8A  0100               	movlb	0	; () banked
  2723  001B8C  6B86               	clrf	??_ID& (0+255),b
  2724  001B8E                     u3628:
  2725  001B8E  0100               	movlb	0	; () banked
  2726  001B90  5186               	movf	??_ID& (0+255),w,b
  2727  001B92  0100               	movlb	0	; () banked
  2728  001B94  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  2729  001B96  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;sort.c: 130: LATAbits.LATA3 = 0;
  2733  001B98  9689               	bcf	3977,3,c	;volatile
  2734  001B9A                     l4844:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;sort.c: 131: }
  2738                           ;sort.c: 132: }
  2739                           ;sort.c: 135: if(!sensor_outputs[0]){
  2740  001B9A  0100               	movlb	0	; () banked
  2741  001B9C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2742  001B9E  0100               	movlb	0	; () banked
  2743  001BA0  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2744  001BA2  A4D8               	btfss	status,2,c
  2745  001BA4  D024               	goto	l4862
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;sort.c: 136: if(!sensor_outputs[1]){
  2749  001BA6  0100               	movlb	0	; () banked
  2750  001BA8  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2751  001BAA  0100               	movlb	0	; () banked
  2752  001BAC  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2753  001BAE  A4D8               	btfss	status,2,c
  2754  001BB0  D016               	goto	l4858
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;sort.c: 137: if(!sensor_outputs[2]){
  2758  001BB2  0100               	movlb	0	; () banked
  2759  001BB4  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  2760  001BB6  0100               	movlb	0	; () banked
  2761  001BB8  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  2762  001BBA  A4D8               	btfss	status,2,c
  2763  001BBC  D008               	goto	l4854
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;sort.c: 138: count_pop_no_tab++;
  2767  001BBE  0100               	movlb	0	; () banked
  2768  001BC0  4BE1               	infsnz	_count_pop_no_tab& (0+255),f,b
  2769  001BC2  2BE2               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;sort.c: 139: cur_can = 0;
  2773  001BC4  0E00               	movlw	0
  2774  001BC6  0100               	movlb	0	; () banked
  2775  001BC8  6FE6               	movwf	(_cur_can+1)& (0+255),b
  2776  001BCA  0E00               	movlw	0
  2777  001BCC  D017               	goto	L3
  2778  001BCE                     l4854:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;sort.c: 141: else{
  2782                           ;sort.c: 142: count_pop_w_tab++;
  2783  001BCE  0100               	movlb	0	; () banked
  2784  001BD0  4BE3               	infsnz	_count_pop_w_tab& (0+255),f,b
  2785  001BD2  2BE4               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;sort.c: 143: cur_can = 1;
  2789  001BD4  0E00               	movlw	0
  2790  001BD6  0100               	movlb	0	; () banked
  2791  001BD8  6FE6               	movwf	(_cur_can+1)& (0+255),b
  2792  001BDA  0E01               	movlw	1
  2793  001BDC  D00F               	goto	L3
  2794  001BDE                     l4858:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;sort.c: 146: else{
  2798                           ;sort.c: 147: count_can_w_lab++;
  2799  001BDE  0100               	movlb	0	; () banked
  2800  001BE0  4BDF               	infsnz	_count_can_w_lab& (0+255),f,b
  2801  001BE2  2BE0               	incf	(_count_can_w_lab+1)& (0+255),f,b
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;sort.c: 148: cur_can = 2;
  2805  001BE4  0E00               	movlw	0
  2806  001BE6  0100               	movlb	0	; () banked
  2807  001BE8  6FE6               	movwf	(_cur_can+1)& (0+255),b
  2808  001BEA  0E02               	movlw	2
  2809  001BEC  D007               	goto	L3
  2810  001BEE                     l4862:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;sort.c: 151: else{
  2814                           ;sort.c: 152: count_can_no_lab++;
  2815  001BEE  0100               	movlb	0	; () banked
  2816  001BF0  4BDD               	infsnz	_count_can_no_lab& (0+255),f,b
  2817  001BF2  2BDE               	incf	(_count_can_no_lab+1)& (0+255),f,b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;sort.c: 153: cur_can = 3;
  2821  001BF4  0E00               	movlw	0
  2822  001BF6  0100               	movlb	0	; () banked
  2823  001BF8  6FE6               	movwf	(_cur_can+1)& (0+255),b
  2824  001BFA  0E03               	movlw	3
  2825  001BFC                     L3:
  2826  001BFC  6FE5               	movwf	_cur_can& (0+255),b
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;sort.c: 154: }
  2830                           ;sort.c: 156: LATCbits.LATC0 = 1;
  2831                           
  2832                           ; BSR set to: 0
  2833  001BFE  808B               	bsf	3979,0,c	;volatile
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;sort.c: 157: f_can_coming_to_distribution = 1;
  2837  001C00  0E00               	movlw	0
  2838  001C02  0100               	movlb	0	; () banked
  2839  001C04  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2840  001C06  0E01               	movlw	1
  2841  001C08  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;sort.c: 158: _delay((unsigned long)((500)*(32000000/4000.0)));
  2845  001C0A  0E15               	movlw	21
  2846  001C0C  0100               	movlb	0	; () banked
  2847  001C0E  6F87               	movwf	(??_ID+1)& (0+255),b
  2848  001C10  0E4B               	movlw	75
  2849  001C12  0100               	movlb	0	; () banked
  2850  001C14  6F86               	movwf	??_ID& (0+255),b
  2851  001C16  0EBE               	movlw	190
  2852  001C18                     u4937:
  2853  001C18  2EE8               	decfsz	wreg,f,c
  2854  001C1A  D7FE               	bra	u4937
  2855  001C1C  2F86               	decfsz	??_ID& (0+255),f,b
  2856  001C1E  D7FC               	bra	u4937
  2857  001C20  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2858  001C22  D7FA               	bra	u4937
  2859  001C24  F000               	nop	
  2860                           
  2861                           ;sort.c: 159: LATCbits.LATC0 = 0;
  2862  001C26  908B               	bcf	3979,0,c	;volatile
  2863                           
  2864                           ;sort.c: 161: f_can_coming_to_ID = 0;
  2865  001C28  0E00               	movlw	0
  2866  001C2A  0100               	movlb	0	; () banked
  2867  001C2C  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2868  001C2E  0E00               	movlw	0
  2869  001C30  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2870  001C32  0012               	return	
  2871  001C34                     __end_of_ID:
  2872                           	opt stack 0
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           prodh	equ	0xFF4
  2878                           prodl	equ	0xFF3
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1l	equ	0xFE1
  2883                           indf2	equ	0xFDF
  2884                           postinc2	equ	0xFDE
  2885                           postdec2	equ	0xFDD
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _readMAG *****************
  2891 ;; Defined at:
  2892 ;;		line 29 in file "ADCFunctionality.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  res             2    4[BANK0 ] int 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        4 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    8
  2913 ;; This function calls:
  2914 ;;		_readADC
  2915 ;; This function is called by:
  2916 ;;		_ID
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text8
  2921  0026D0                     __ptext8:
  2922                           	opt stack 0
  2923  0026D0                     _readMAG:
  2924                           	opt stack 20
  2925                           
  2926                           ;ADCFunctionality.c: 30: readADC(1);
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;incstack = 0
  2930  0026D0  0E01               	movlw	1
  2931  0026D2  EC5E  F015         	call	_readADC
  2932                           
  2933                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  2934  0026D6  50C3               	movf	4035,w,c	;volatile
  2935  0026D8  CFC4 F082          	movff	4036,??_readMAG	;volatile
  2936  0026DC  0100               	movlb	0	; () banked
  2937  0026DE  6B83               	clrf	(??_readMAG+1)& (0+255),b
  2938  0026E0  C082  F083         	movff	??_readMAG,??_readMAG+1
  2939  0026E4  0100               	movlb	0	; () banked
  2940  0026E6  6B82               	clrf	??_readMAG& (0+255),b
  2941  0026E8  0100               	movlb	0	; () banked
  2942  0026EA  1182               	iorwf	??_readMAG& (0+255),w,b
  2943  0026EC  0100               	movlb	0	; () banked
  2944  0026EE  6F84               	movwf	readMAG@res& (0+255),b
  2945  0026F0  0100               	movlb	0	; () banked
  2946  0026F2  5183               	movf	(??_readMAG+1)& (0+255),w,b
  2947  0026F4  0100               	movlb	0	; () banked
  2948  0026F6  6F85               	movwf	(readMAG@res+1)& (0+255),b
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;ADCFunctionality.c: 32: MAG_signal = (res < 255) ? 1 : 0;
  2952  0026F8  0100               	movlb	0	; () banked
  2953  0026FA  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  2954  0026FC  D007               	goto	u3311
  2955  0026FE  0100               	movlb	0	; () banked
  2956  002700  5185               	movf	(readMAG@res+1)& (0+255),w,b
  2957  002702  E106               	bnz	u3310
  2958  002704  0100               	movlb	0	; () banked
  2959  002706  2984               	incf	readMAG@res& (0+255),w,b
  2960  002708  B0D8               	btfsc	status,0,c
  2961  00270A  D002               	goto	u3310
  2962  00270C                     u3311:
  2963  00270C  0E01               	movlw	1
  2964  00270E  D001               	goto	u3320
  2965  002710                     u3310:
  2966  002710  0E00               	movlw	0
  2967  002712                     u3320:
  2968  002712  0100               	movlb	0	; () banked
  2969  002714  6FDB               	movwf	_MAG_signal& (0+255),b
  2970  002716  6BDC               	clrf	(_MAG_signal+1)& (0+255),b
  2971                           
  2972                           ; BSR set to: 0
  2973  002718  0012               	return		;funcret
  2974  00271A                     __end_of_readMAG:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _readADC *****************
  2994 ;; Defined at:
  2995 ;;		line 15 in file "ADCFunctionality.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  channel         1    wreg     unsigned char 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  channel         1    1[BANK0 ] unsigned char 
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        2 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    7
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_readMAG
  3020 ;;		_readIR
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text9
  3025  002ABC                     __ptext9:
  3026                           	opt stack 0
  3027  002ABC                     _readADC:
  3028                           	opt stack 20
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;incstack = 0
  3032                           ;readADC@channel stored from wreg
  3033  002ABC  0100               	movlb	0	; () banked
  3034  002ABE  6F81               	movwf	readADC@channel& (0+255),b
  3035                           
  3036                           ;ADCFunctionality.c: 17: ADCON0 = ((channel <<2));
  3037  002AC0  0100               	movlb	0	; () banked
  3038  002AC2  4581               	rlncf	readADC@channel& (0+255),w,b
  3039  002AC4  46E8               	rlncf	wreg,f,c
  3040  002AC6  0BFC               	andlw	252
  3041  002AC8  6EC2               	movwf	4034,c	;volatile
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;ADCFunctionality.c: 18: ADON = 1;
  3045  002ACA  80C2               	bsf	4034,0,c	;volatile
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  3049  002ACC  82C2               	bsf	4034,1,c	;volatile
  3050                           
  3051                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3052  002ACE  D009               	goto	l4006
  3053  002AD0                     l4004:
  3054  002AD0  0E34               	movlw	52
  3055  002AD2  0100               	movlb	0	; () banked
  3056  002AD4  6F80               	movwf	??_readADC& (0+255),b
  3057  002AD6  0EF1               	movlw	241
  3058  002AD8                     u4947:
  3059  002AD8  2EE8               	decfsz	wreg,f,c
  3060  002ADA  D7FE               	bra	u4947
  3061  002ADC  2F80               	decfsz	??_readADC& (0+255),f,b
  3062  002ADE  D7FC               	bra	u4947
  3063  002AE0  D000               	nop2	
  3064  002AE2                     l4006:
  3065  002AE2  A2C2               	btfss	4034,1,c	;volatile
  3066  002AE4  0012               	return	
  3067  002AE6  D7F4               	goto	l4004
  3068  002AE8                     __end_of_readADC:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           tblptrh	equ	0xFF7
  3072                           tblptrl	equ	0xFF6
  3073                           tablat	equ	0xFF5
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _Distribution *****************
  3088 ;; Defined at:
  3089 ;;		line 164 in file "sort.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;Total ram usage:        2 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    8
  3110 ;; This function calls:
  3111 ;;		_updateServoPosition
  3112 ;; This function is called by:
  3113 ;;		_sort
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text10
  3118  001C34                     __ptext10:
  3119                           	opt stack 0
  3120  001C34                     _Distribution:
  3121                           	opt stack 21
  3122                           
  3123                           ;sort.c: 165: if(f_can_coming_to_distribution){
  3124                           
  3125                           ;incstack = 0
  3126  001C34  0100               	movlb	0	; () banked
  3127  001C36  51ED               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3128  001C38  0100               	movlb	0	; () banked
  3129  001C3A  11EE               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3130  001C3C  B4D8               	btfsc	status,2,c
  3131  001C3E  0012               	return	
  3132  001C40  D034               	goto	l4890
  3133  001C42                     l4880:
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;sort.c: 170: updateServoPosition(1000, 1);
  3137  001C42  0E03               	movlw	3
  3138  001C44  0100               	movlb	0	; () banked
  3139  001C46  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3140  001C48  0EE8               	movlw	232
  3141  001C4A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3142  001C4C  0E00               	movlw	0
  3143  001C4E  0100               	movlb	0	; () banked
  3144  001C50  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3145  001C52  0E01               	movlw	1
  3146  001C54  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3147  001C56  ECF4  F011         	call	_updateServoPosition	;wreg free
  3148                           
  3149                           ;sort.c: 171: break;
  3150  001C5A  D03E               	goto	l4892
  3151  001C5C                     l4882:
  3152                           
  3153                           ;sort.c: 173: updateServoPosition(1333, 1);
  3154  001C5C  0E05               	movlw	5
  3155  001C5E  0100               	movlb	0	; () banked
  3156  001C60  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3157  001C62  0E35               	movlw	53
  3158  001C64  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3159  001C66  0E00               	movlw	0
  3160  001C68  0100               	movlb	0	; () banked
  3161  001C6A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3162  001C6C  0E01               	movlw	1
  3163  001C6E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3164  001C70  ECF4  F011         	call	_updateServoPosition	;wreg free
  3165                           
  3166                           ;sort.c: 174: break;
  3167  001C74  D031               	goto	l4892
  3168  001C76                     l4884:
  3169                           
  3170                           ;sort.c: 176: updateServoPosition(1666, 1);
  3171  001C76  0E06               	movlw	6
  3172  001C78  0100               	movlb	0	; () banked
  3173  001C7A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3174  001C7C  0E82               	movlw	130
  3175  001C7E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3176  001C80  0E00               	movlw	0
  3177  001C82  0100               	movlb	0	; () banked
  3178  001C84  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3179  001C86  0E01               	movlw	1
  3180  001C88  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3181  001C8A  ECF4  F011         	call	_updateServoPosition	;wreg free
  3182                           
  3183                           ;sort.c: 177: break;
  3184  001C8E  D024               	goto	l4892
  3185  001C90                     l4886:
  3186                           
  3187                           ;sort.c: 179: updateServoPosition(2000, 1);
  3188  001C90  0E07               	movlw	7
  3189  001C92  0100               	movlb	0	; () banked
  3190  001C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3191  001C96  0ED0               	movlw	208
  3192  001C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3193  001C9A  0E00               	movlw	0
  3194  001C9C  0100               	movlb	0	; () banked
  3195  001C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3196  001CA0  0E01               	movlw	1
  3197  001CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3198  001CA4  ECF4  F011         	call	_updateServoPosition	;wreg free
  3199                           
  3200                           ;sort.c: 183: }
  3201                           
  3202                           ;sort.c: 182: break;
  3203                           
  3204                           ;sort.c: 181: default:
  3205                           
  3206                           ;sort.c: 180: break;
  3207  001CA8  D017               	goto	l4892
  3208  001CAA                     l4890:
  3209  001CAA  C0E5  F088         	movff	_cur_can,??_Distribution
  3210  001CAE  C0E6  F089         	movff	_cur_can+1,??_Distribution+1
  3211                           
  3212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3213                           ; Switch size 1, requested type "space"
  3214                           ; Number of cases is 1, Range of values is 0 to 0
  3215                           ; switch strategies available:
  3216                           ; Name         Instructions Cycles
  3217                           ; simple_byte            4     3 (average)
  3218                           ;	Chosen strategy is simple_byte
  3219  001CB2  0100               	movlb	0	; () banked
  3220  001CB4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3221  001CB6  0A00               	xorlw	0	; case 0
  3222  001CB8  A4D8               	btfss	status,2,c
  3223  001CBA  D00E               	goto	l4892
  3224                           
  3225                           ; BSR set to: 0
  3226                           ; Switch size 1, requested type "space"
  3227                           ; Number of cases is 4, Range of values is 0 to 3
  3228                           ; switch strategies available:
  3229                           ; Name         Instructions Cycles
  3230                           ; simple_byte           13     7 (average)
  3231                           ;	Chosen strategy is simple_byte
  3232  001CBC  0100               	movlb	0	; () banked
  3233  001CBE  5188               	movf	??_Distribution& (0+255),w,b
  3234  001CC0  0A00               	xorlw	0	; case 0
  3235  001CC2  B4D8               	btfsc	status,2,c
  3236  001CC4  D7BE               	goto	l4880
  3237  001CC6  0A01               	xorlw	1	; case 1
  3238  001CC8  B4D8               	btfsc	status,2,c
  3239  001CCA  D7C8               	goto	l4882
  3240  001CCC  0A03               	xorlw	3	; case 2
  3241  001CCE  B4D8               	btfsc	status,2,c
  3242  001CD0  D7D2               	goto	l4884
  3243  001CD2  0A01               	xorlw	1	; case 3
  3244  001CD4  B4D8               	btfsc	status,2,c
  3245  001CD6  D7DC               	goto	l4886
  3246  001CD8                     l4892:
  3247                           
  3248                           ;sort.c: 184: _delay((unsigned long)((500)*(32000000/4000.0)));
  3249  001CD8  0E15               	movlw	21
  3250  001CDA  0100               	movlb	0	; () banked
  3251  001CDC  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3252  001CDE  0E4B               	movlw	75
  3253  001CE0  0100               	movlb	0	; () banked
  3254  001CE2  6F88               	movwf	??_Distribution& (0+255),b
  3255  001CE4  0EBE               	movlw	190
  3256  001CE6                     u4957:
  3257  001CE6  2EE8               	decfsz	wreg,f,c
  3258  001CE8  D7FE               	bra	u4957
  3259  001CEA  2F88               	decfsz	??_Distribution& (0+255),f,b
  3260  001CEC  D7FC               	bra	u4957
  3261  001CEE  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3262  001CF0  D7FA               	bra	u4957
  3263  001CF2  F000               	nop	
  3264                           
  3265                           ;sort.c: 187: updateServoPosition(1500, 3);
  3266  001CF4  0E05               	movlw	5
  3267  001CF6  0100               	movlb	0	; () banked
  3268  001CF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3269  001CFA  0EDC               	movlw	220
  3270  001CFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3271  001CFE  0E00               	movlw	0
  3272  001D00  0100               	movlb	0	; () banked
  3273  001D02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3274  001D04  0E03               	movlw	3
  3275  001D06  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3276  001D08  ECF4  F011         	call	_updateServoPosition	;wreg free
  3277                           
  3278                           ;sort.c: 188: _delay((unsigned long)((500)*(32000000/4000.0)));
  3279  001D0C  0E15               	movlw	21
  3280  001D0E  0100               	movlb	0	; () banked
  3281  001D10  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3282  001D12  0E4B               	movlw	75
  3283  001D14  0100               	movlb	0	; () banked
  3284  001D16  6F88               	movwf	??_Distribution& (0+255),b
  3285  001D18  0EBE               	movlw	190
  3286  001D1A                     u4967:
  3287  001D1A  2EE8               	decfsz	wreg,f,c
  3288  001D1C  D7FE               	bra	u4967
  3289  001D1E  2F88               	decfsz	??_Distribution& (0+255),f,b
  3290  001D20  D7FC               	bra	u4967
  3291  001D22  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3292  001D24  D7FA               	bra	u4967
  3293  001D26  F000               	nop	
  3294                           
  3295                           ;sort.c: 191: updateServoPosition(1500, 1);
  3296  001D28  0E05               	movlw	5
  3297  001D2A  0100               	movlb	0	; () banked
  3298  001D2C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3299  001D2E  0EDC               	movlw	220
  3300  001D30  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3301  001D32  0E00               	movlw	0
  3302  001D34  0100               	movlb	0	; () banked
  3303  001D36  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3304  001D38  0E01               	movlw	1
  3305  001D3A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3306  001D3C  ECF4  F011         	call	_updateServoPosition	;wreg free
  3307                           
  3308                           ;sort.c: 192: updateServoPosition(1000, 3);
  3309  001D40  0E03               	movlw	3
  3310  001D42  0100               	movlb	0	; () banked
  3311  001D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3312  001D46  0EE8               	movlw	232
  3313  001D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3314  001D4A  0E00               	movlw	0
  3315  001D4C  0100               	movlb	0	; () banked
  3316  001D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3317  001D50  0E03               	movlw	3
  3318  001D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3319  001D54  ECF4  F011         	call	_updateServoPosition	;wreg free
  3320                           
  3321                           ;sort.c: 193: f_can_coming_to_distribution = 0;
  3322  001D58  0E00               	movlw	0
  3323  001D5A  0100               	movlb	0	; () banked
  3324  001D5C  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3325  001D5E  0E00               	movlw	0
  3326  001D60  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;sort.c: 194: f_can_distributed = 1;
  3330  001D62  0E00               	movlw	0
  3331  001D64  6E6C               	movwf	_f_can_distributed+1,c
  3332  001D66  0E01               	movlw	1
  3333  001D68  6E6B               	movwf	_f_can_distributed,c
  3334  001D6A  0012               	return	
  3335  001D6C                     __end_of_Distribution:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           fsr1l	equ	0xFE1
  3347                           indf2	equ	0xFDF
  3348                           postinc2	equ	0xFDE
  3349                           postdec2	equ	0xFDD
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _updateServoPosition *****************
  3355 ;; Defined at:
  3356 ;;		line 284 in file "sort.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  time_us         2    0[BANK0 ] int 
  3359 ;;  timer           2    2[BANK0 ] int 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  my_time         2    6[BANK0 ] unsigned int 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3371 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;Total ram usage:        8 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    7
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_Distribution
  3382 ;;		_initServos
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text11
  3387  0023E8                     __ptext11:
  3388                           	opt stack 0
  3389  0023E8                     _updateServoPosition:
  3390                           	opt stack 20
  3391                           
  3392                           ;sort.c: 285: unsigned int my_time = 65535 - time_us;
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;incstack = 0
  3396  0023E8  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  3397  0023EC  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  3398  0023F0  0100               	movlb	0	; () banked
  3399  0023F2  1F84               	comf	??_updateServoPosition& (0+255),f,b
  3400  0023F4  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  3401  0023F6  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  3402  0023F8  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  3403  0023FA  0EFF               	movlw	255
  3404  0023FC  0100               	movlb	0	; () banked
  3405  0023FE  2584               	addwf	??_updateServoPosition& (0+255),w,b
  3406  002400  0100               	movlb	0	; () banked
  3407  002402  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  3408  002404  0EFF               	movlw	255
  3409  002406  0100               	movlb	0	; () banked
  3410  002408  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  3411  00240A  0100               	movlb	0	; () banked
  3412  00240C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  3413                           
  3414                           ;sort.c: 286: switch(timer){
  3415  00240E  D011               	goto	l4166
  3416  002410                     l4164:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 288: servoTimes[0] = my_time >> 8;
  3420  002410  0100               	movlb	0	; () banked
  3421  002412  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3422  002414  6E5B               	movwf	_servoTimes,c
  3423  002416  6A5C               	clrf	_servoTimes+1,c
  3424                           
  3425                           ;sort.c: 289: servoTimes[1] = my_time & 0xFF;
  3426  002418  0100               	movlb	0	; () banked
  3427  00241A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3428  00241C  6E5D               	movwf	_servoTimes+2,c
  3429  00241E  6A5E               	clrf	_servoTimes+3,c
  3430  002420                     l738:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 291: servoTimes[2] = my_time >> 8;
  3434  002420  0100               	movlb	0	; () banked
  3435  002422  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3436  002424  6E5F               	movwf	_servoTimes+4,c
  3437  002426  6A60               	clrf	_servoTimes+5,c
  3438                           
  3439                           ;sort.c: 292: servoTimes[3] = my_time & 0xFF;
  3440  002428  0100               	movlb	0	; () banked
  3441  00242A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3442  00242C  6E61               	movwf	_servoTimes+6,c
  3443  00242E  6A62               	clrf	_servoTimes+7,c
  3444                           
  3445                           ;sort.c: 293: }
  3446  002430  0012               	return	
  3447  002432                     l4166:
  3448                           
  3449                           ; BSR set to: 0
  3450  002432  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  3451  002436  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  3452                           
  3453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3454                           ; Switch size 1, requested type "space"
  3455                           ; Number of cases is 1, Range of values is 0 to 0
  3456                           ; switch strategies available:
  3457                           ; Name         Instructions Cycles
  3458                           ; simple_byte            4     3 (average)
  3459                           ;	Chosen strategy is simple_byte
  3460  00243A  0100               	movlb	0	; () banked
  3461  00243C  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  3462  00243E  0A00               	xorlw	0	; case 0
  3463  002440  A4D8               	btfss	status,2,c
  3464  002442  0012               	return	
  3465                           
  3466                           ; BSR set to: 0
  3467                           ; Switch size 1, requested type "space"
  3468                           ; Number of cases is 2, Range of values is 1 to 3
  3469                           ; switch strategies available:
  3470                           ; Name         Instructions Cycles
  3471                           ; simple_byte            7     4 (average)
  3472                           ;	Chosen strategy is simple_byte
  3473  002444  0100               	movlb	0	; () banked
  3474  002446  5184               	movf	??_updateServoPosition& (0+255),w,b
  3475  002448  0A01               	xorlw	1	; case 1
  3476  00244A  B4D8               	btfsc	status,2,c
  3477  00244C  D7E1               	goto	l4164
  3478  00244E  0A02               	xorlw	2	; case 3
  3479  002450  A4D8               	btfss	status,2,c
  3480  002452  0012               	return	
  3481  002454  D7E5               	goto	l738
  3482  002456                     __end_of_updateServoPosition:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501 ;; *************** function _machineConfig *****************
  3502 ;; Defined at:
  3503 ;;		line 15 in file "MachineConfig.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    7
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_main
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text12
  3532  002580                     __ptext12:
  3533                           	opt stack 0
  3534  002580                     _machineConfig:
  3535                           	opt stack 23
  3536                           
  3537                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;incstack = 0
  3541  002580  0EF0               	movlw	240
  3542  002582  6ED3               	movwf	4051,c	;volatile
  3543                           
  3544                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  3545  002584  8C9B               	bsf	3995,6,c	;volatile
  3546                           
  3547                           ;MachineConfig.c: 21: ADCON0 = 0x00;
  3548  002586  0E00               	movlw	0
  3549  002588  6EC2               	movwf	4034,c	;volatile
  3550                           
  3551                           ;MachineConfig.c: 22: ADCON1 = 0x0D;
  3552  00258A  0E0D               	movlw	13
  3553  00258C  6EC1               	movwf	4033,c	;volatile
  3554                           
  3555                           ;MachineConfig.c: 25: VCFG1 = 0;
  3556  00258E  9AC1               	bcf	4033,5,c	;volatile
  3557                           
  3558                           ;MachineConfig.c: 26: VCFG0 = 0;
  3559  002590  98C1               	bcf	4033,4,c	;volatile
  3560                           
  3561                           ;MachineConfig.c: 27: CVRCON = 0x00;
  3562  002592  0E00               	movlw	0
  3563  002594  6EB5               	movwf	4021,c	;volatile
  3564                           
  3565                           ;MachineConfig.c: 28: CMCONbits.CIS = 0;
  3566  002596  96B4               	bcf	4020,3,c	;volatile
  3567                           
  3568                           ;MachineConfig.c: 29: ADFM = 1;
  3569  002598  8EC0               	bsf	4032,7,c	;volatile
  3570                           
  3571                           ;MachineConfig.c: 30: nRBPU = 0;
  3572  00259A  9EF1               	bcf	intcon2,7,c	;volatile
  3573                           
  3574                           ;MachineConfig.c: 34: TRISA = 0b01000111;
  3575  00259C  0E47               	movlw	71
  3576  00259E  6E92               	movwf	3986,c	;volatile
  3577                           
  3578                           ;MachineConfig.c: 36: TRISB = 0b11110010;
  3579  0025A0  0EF2               	movlw	242
  3580  0025A2  6E93               	movwf	3987,c	;volatile
  3581                           
  3582                           ;MachineConfig.c: 39: TRISC = 0x00;
  3583  0025A4  0E00               	movlw	0
  3584  0025A6  6E94               	movwf	3988,c	;volatile
  3585                           
  3586                           ;MachineConfig.c: 43: TRISD = 0x00;
  3587  0025A8  0E00               	movlw	0
  3588  0025AA  6E95               	movwf	3989,c	;volatile
  3589                           
  3590                           ;MachineConfig.c: 46: TRISE = 0x00;
  3591  0025AC  0E00               	movlw	0
  3592  0025AE  6E96               	movwf	3990,c	;volatile
  3593                           
  3594                           ;MachineConfig.c: 49: LATA = 0x00;
  3595  0025B0  0E00               	movlw	0
  3596  0025B2  6E89               	movwf	3977,c	;volatile
  3597                           
  3598                           ;MachineConfig.c: 50: LATB = 0x00;
  3599  0025B4  0E00               	movlw	0
  3600  0025B6  6E8A               	movwf	3978,c	;volatile
  3601                           
  3602                           ;MachineConfig.c: 51: LATC = 0x00;
  3603  0025B8  0E00               	movlw	0
  3604  0025BA  6E8B               	movwf	3979,c	;volatile
  3605                           
  3606                           ;MachineConfig.c: 52: LATD = 0x00;
  3607  0025BC  0E00               	movlw	0
  3608  0025BE  6E8C               	movwf	3980,c	;volatile
  3609                           
  3610                           ;MachineConfig.c: 53: LATE = 0x00;
  3611  0025C0  0E00               	movlw	0
  3612  0025C2  6E8D               	movwf	3981,c	;volatile
  3613                           
  3614                           ;MachineConfig.c: 56: INT1IE = 1;
  3615  0025C4  86F0               	bsf	intcon3,3,c	;volatile
  3616                           
  3617                           ;MachineConfig.c: 58: TMR0IE = 1;
  3618  0025C6  8AF2               	bsf	intcon,5,c	;volatile
  3619                           
  3620                           ;MachineConfig.c: 59: TMR1IE = 1;
  3621  0025C8  809D               	bsf	3997,0,c	;volatile
  3622                           
  3623                           ;MachineConfig.c: 60: T1CON = 0b10110000;
  3624  0025CA  0EB0               	movlw	176
  3625  0025CC  6ECD               	movwf	4045,c	;volatile
  3626                           
  3627                           ;MachineConfig.c: 61: TMR2IE = 1;
  3628  0025CE  829D               	bsf	3997,1,c	;volatile
  3629                           
  3630                           ;MachineConfig.c: 62: TMR3IE = 1;
  3631  0025D0  82A0               	bsf	4000,1,c	;volatile
  3632                           
  3633                           ;MachineConfig.c: 63: PEIE = 1;
  3634  0025D2  8CF2               	bsf	intcon,6,c	;volatile
  3635                           
  3636                           ;MachineConfig.c: 65: ADIE = 1;
  3637  0025D4  8C9D               	bsf	3997,6,c	;volatile
  3638                           
  3639                           ;MachineConfig.c: 66: (INTCONbits.GIE = 0);
  3640  0025D6  9EF2               	bcf	intcon,7,c	;volatile
  3641  0025D8  0012               	return		;funcret
  3642  0025DA                     __end_of_machineConfig:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           intcon	equ	0xFF2
  3651                           intcon2	equ	0xFF1
  3652                           intcon3	equ	0xFF0
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           postdec1	equ	0xFE5
  3656                           fsr1l	equ	0xFE1
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _logRun *****************
  3665 ;; Defined at:
  3666 ;;		line 77 in file "EEPROM.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  byte_i          1    6[BANK0 ] unsigned char 
  3671 ;;  i               2    8[BANK0 ] int 
  3672 ;;  addr            2   10[BANK0 ] unsigned short 
  3673 ;;  byte11          1    7[BANK0 ] unsigned char 
  3674 ;;  byte3           1    5[BANK0 ] unsigned char 
  3675 ;;  byte2           1    4[BANK0 ] unsigned char 
  3676 ;;  byte1           1    3[BANK0 ] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:        9 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    8
  3693 ;; This function calls:
  3694 ;;		_EEPROM_read
  3695 ;;		_EEPROM_write
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text13
  3702  0019BC                     __ptext13:
  3703                           	opt stack 0
  3704  0019BC                     _logRun:
  3705                           	opt stack 22
  3706                           
  3707                           ;EEPROM.c: 90: sel = EEPROM_read(0);
  3708                           
  3709                           ;incstack = 0
  3710  0019BC  0E00               	movlw	0
  3711  0019BE  0100               	movlb	0	; () banked
  3712  0019C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3713  0019C2  0E00               	movlw	0
  3714  0019C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3715  0019C6  EC41  F016         	call	_EEPROM_read	;wreg free
  3716  0019CA  0100               	movlb	0	; () banked
  3717  0019CC  6FFC               	movwf	_sel& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;EEPROM.c: 91: unsigned short addr = 1 + 11 * sel;
  3721  0019CE  0100               	movlb	0	; () banked
  3722  0019D0  51FC               	movf	_sel& (0+255),w,b
  3723  0019D2  0D0B               	mullw	11
  3724  0019D4  0E01               	movlw	1
  3725  0019D6  24F3               	addwf	prodl,w,c
  3726  0019D8  0100               	movlb	0	; () banked
  3727  0019DA  6F8A               	movwf	logRun@addr& (0+255),b
  3728  0019DC  0E00               	movlw	0
  3729  0019DE  20F4               	addwfc	prodh,w,c
  3730  0019E0  0100               	movlb	0	; () banked
  3731  0019E2  6F8B               	movwf	(logRun@addr+1)& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;EEPROM.c: 94: if (sel < 3){
  3735  0019E4  0E03               	movlw	3
  3736  0019E6  0100               	movlb	0	; () banked
  3737  0019E8  61FC               	cpfslt	_sel& (0+255),b
  3738  0019EA  D00C               	goto	l5580
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;EEPROM.c: 95: sel++;
  3742  0019EC  0100               	movlb	0	; () banked
  3743  0019EE  2BFC               	incf	_sel& (0+255),f,b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;EEPROM.c: 96: EEPROM_write(0, sel);
  3747  0019F0  0E00               	movlw	0
  3748  0019F2  0100               	movlb	0	; () banked
  3749  0019F4  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
  3750  0019F6  0E00               	movlw	0
  3751  0019F8  6F80               	movwf	EEPROM_write@address& (0+255),b
  3752  0019FA  C0FC  F082         	movff	_sel,EEPROM_write@data
  3753  0019FE  EC74  F015         	call	_EEPROM_write	;wreg free
  3754                           
  3755                           ;EEPROM.c: 97: }
  3756  001A02  D00A               	goto	l5582
  3757  001A04                     l5580:
  3758                           
  3759                           ;EEPROM.c: 98: else{
  3760                           ;EEPROM.c: 99: EEPROM_write(0, 0);
  3761  001A04  0E00               	movlw	0
  3762  001A06  0100               	movlb	0	; () banked
  3763  001A08  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
  3764  001A0A  0E00               	movlw	0
  3765  001A0C  6F80               	movwf	EEPROM_write@address& (0+255),b
  3766  001A0E  0E00               	movlw	0
  3767  001A10  0100               	movlb	0	; () banked
  3768  001A12  6F82               	movwf	EEPROM_write@data& (0+255),b
  3769  001A14  EC74  F015         	call	_EEPROM_write	;wreg free
  3770  001A18                     l5582:
  3771                           
  3772                           ;EEPROM.c: 100: }
  3773                           ;EEPROM.c: 103: unsigned char byte1 = 0b10000000 | count_total;
  3774  001A18  0100               	movlb	0	; () banked
  3775  001A1A  51FD               	movf	_count_total& (0+255),w,b
  3776  001A1C  0980               	iorlw	128
  3777  001A1E  0100               	movlb	0	; () banked
  3778  001A20  6F83               	movwf	logRun@byte1& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;EEPROM.c: 104: EEPROM_write(addr, byte1);
  3782  001A22  C08A  F080         	movff	logRun@addr,EEPROM_write@address
  3783  001A26  C08B  F081         	movff	logRun@addr+1,EEPROM_write@address+1
  3784  001A2A  C083  F082         	movff	logRun@byte1,EEPROM_write@data
  3785  001A2E  EC74  F015         	call	_EEPROM_write	;wreg free
  3786                           
  3787                           ;EEPROM.c: 105: addr++;
  3788  001A32  0100               	movlb	0	; () banked
  3789  001A34  4B8A               	infsnz	logRun@addr& (0+255),f,b
  3790  001A36  2B8B               	incf	(logRun@addr+1)& (0+255),f,b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;EEPROM.c: 108: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  3794  001A38  0100               	movlb	0	; () banked
  3795  001A3A  39E1               	swapf	_count_pop_no_tab& (0+255),w,b
  3796  001A3C  0BF0               	andlw	240
  3797  001A3E  0100               	movlb	0	; () banked
  3798  001A40  11E3               	iorwf	_count_pop_w_tab& (0+255),w,b
  3799  001A42  0100               	movlb	0	; () banked
  3800  001A44  6F84               	movwf	logRun@byte2& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;EEPROM.c: 109: EEPROM_write(addr, byte2);
  3804  001A46  C08A  F080         	movff	logRun@addr,EEPROM_write@address
  3805  001A4A  C08B  F081         	movff	logRun@addr+1,EEPROM_write@address+1
  3806  001A4E  C084  F082         	movff	logRun@byte2,EEPROM_write@data
  3807  001A52  EC74  F015         	call	_EEPROM_write	;wreg free
  3808                           
  3809                           ;EEPROM.c: 110: addr++;
  3810  001A56  0100               	movlb	0	; () banked
  3811  001A58  4B8A               	infsnz	logRun@addr& (0+255),f,b
  3812  001A5A  2B8B               	incf	(logRun@addr+1)& (0+255),f,b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;EEPROM.c: 111: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  3816  001A5C  0100               	movlb	0	; () banked
  3817  001A5E  39DF               	swapf	_count_can_w_lab& (0+255),w,b
  3818  001A60  0BF0               	andlw	240
  3819  001A62  0100               	movlb	0	; () banked
  3820  001A64  11DD               	iorwf	_count_can_no_lab& (0+255),w,b
  3821  001A66  0100               	movlb	0	; () banked
  3822  001A68  6F85               	movwf	logRun@byte3& (0+255),b
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;EEPROM.c: 112: EEPROM_write(addr, byte3);
  3826  001A6A  C08A  F080         	movff	logRun@addr,EEPROM_write@address
  3827  001A6E  C08B  F081         	movff	logRun@addr+1,EEPROM_write@address+1
  3828  001A72  C085  F082         	movff	logRun@byte3,EEPROM_write@data
  3829  001A76  EC74  F015         	call	_EEPROM_write	;wreg free
  3830                           
  3831                           ;EEPROM.c: 113: addr++;
  3832  001A7A  0100               	movlb	0	; () banked
  3833  001A7C  4B8A               	infsnz	logRun@addr& (0+255),f,b
  3834  001A7E  2B8B               	incf	(logRun@addr+1)& (0+255),f,b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;EEPROM.c: 116: for(int i = 0; i < 7; i++){
  3838  001A80  0E00               	movlw	0
  3839  001A82  0100               	movlb	0	; () banked
  3840  001A84  6F89               	movwf	(logRun@i+1)& (0+255),b
  3841  001A86  0E00               	movlw	0
  3842  001A88  6F88               	movwf	logRun@i& (0+255),b
  3843                           
  3844                           ; BSR set to: 0
  3845  001A8A  0100               	movlb	0	; () banked
  3846  001A8C  BF89               	btfsc	(logRun@i+1)& (0+255),7,b
  3847  001A8E  D008               	goto	l5606
  3848  001A90  0100               	movlb	0	; () banked
  3849  001A92  5189               	movf	(logRun@i+1)& (0+255),w,b
  3850  001A94  E128               	bnz	l869
  3851  001A96  0E07               	movlw	7
  3852  001A98  0100               	movlb	0	; () banked
  3853  001A9A  5D88               	subwf	logRun@i& (0+255),w,b
  3854  001A9C  B0D8               	btfsc	status,0,c
  3855  001A9E  D023               	goto	l869
  3856  001AA0                     l5606:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;EEPROM.c: 117: unsigned char byte_i = startTime[i];
  3860  001AA0  90D8               	bcf	status,0,c
  3861  001AA2  0100               	movlb	0	; () banked
  3862  001AA4  3588               	rlcf	logRun@i& (0+255),w,b
  3863  001AA6  6ED9               	movwf	fsr2l,c
  3864  001AA8  0100               	movlb	0	; () banked
  3865  001AAA  3589               	rlcf	(logRun@i+1)& (0+255),w,b
  3866  001AAC  6EDA               	movwf	fsr2h,c
  3867  001AAE  0E0E               	movlw	low _startTime
  3868  001AB0  26D9               	addwf	fsr2l,f,c
  3869  001AB2  0E01               	movlw	high _startTime
  3870  001AB4  22DA               	addwfc	fsr2h,f,c
  3871  001AB6  50DF               	movf	indf2,w,c
  3872  001AB8  0100               	movlb	0	; () banked
  3873  001ABA  6F86               	movwf	logRun@byte_i& (0+255),b
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;EEPROM.c: 118: EEPROM_write(addr, byte_i);
  3877  001ABC  C08A  F080         	movff	logRun@addr,EEPROM_write@address
  3878  001AC0  C08B  F081         	movff	logRun@addr+1,EEPROM_write@address+1
  3879  001AC4  C086  F082         	movff	logRun@byte_i,EEPROM_write@data
  3880  001AC8  EC74  F015         	call	_EEPROM_write	;wreg free
  3881                           
  3882                           ;EEPROM.c: 119: addr++;
  3883  001ACC  0100               	movlb	0	; () banked
  3884  001ACE  4B8A               	infsnz	logRun@addr& (0+255),f,b
  3885  001AD0  2B8B               	incf	(logRun@addr+1)& (0+255),f,b
  3886                           
  3887                           ; BSR set to: 0
  3888  001AD2  0100               	movlb	0	; () banked
  3889  001AD4  4B88               	infsnz	logRun@i& (0+255),f,b
  3890  001AD6  2B89               	incf	(logRun@i+1)& (0+255),f,b
  3891                           
  3892                           ; BSR set to: 0
  3893  001AD8  0100               	movlb	0	; () banked
  3894  001ADA  BF89               	btfsc	(logRun@i+1)& (0+255),7,b
  3895  001ADC  D7E1               	goto	l5606
  3896  001ADE  0100               	movlb	0	; () banked
  3897  001AE0  5189               	movf	(logRun@i+1)& (0+255),w,b
  3898  001AE2  E101               	bnz	u4710
  3899  001AE4  D7D8               	goto	L4
  3900  001AE6                     u4710:
  3901  001AE6                     l869:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;EEPROM.c: 120: }
  3905                           ;EEPROM.c: 123: unsigned char byte11 = total_time;
  3906  001AE6  C0F9  F087         	movff	_total_time,logRun@byte11
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;EEPROM.c: 124: EEPROM_write(addr, byte11);
  3910  001AEA  C08A  F080         	movff	logRun@addr,EEPROM_write@address
  3911  001AEE  C08B  F081         	movff	logRun@addr+1,EEPROM_write@address+1
  3912  001AF2  C087  F082         	movff	logRun@byte11,EEPROM_write@data
  3913  001AF6  EC74  F015         	call	_EEPROM_write	;wreg free
  3914  001AFA  0012               	return		;funcret
  3915  001AFC                     __end_of_logRun:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           intcon2	equ	0xFF1
  3925                           intcon3	equ	0xFF0
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _EEPROM_write *****************
  3938 ;; Defined at:
  3939 ;;		line 32 in file "EEPROM.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  address         2    0[BANK0 ] unsigned short 
  3942 ;;  data            1    2[BANK0 ] unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, status,2
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3954 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;Total ram usage:        3 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    7
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_logRun
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text14
  3969  002AE8                     __ptext14:
  3970                           	opt stack 0
  3971  002AE8                     _EEPROM_write:
  3972                           	opt stack 22
  3973                           
  3974                           ;EEPROM.c: 33: (INTCONbits.GIE = 0);
  3975                           
  3976                           ;incstack = 0
  3977  002AE8  9EF2               	bcf	intcon,7,c	;volatile
  3978                           
  3979                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  3980  002AEA  0100               	movlb	0	; () banked
  3981  002AEC  5181               	movf	(EEPROM_write@address+1)& (0+255),w,b
  3982  002AEE  6EAA               	movwf	4010,c	;volatile
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  3986  002AF0  C080  FFA9         	movff	EEPROM_write@address,4009	;volatile
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;EEPROM.c: 39: EEDATA = data;
  3990  002AF4  C082  FFA8         	movff	EEPROM_write@data,4008	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  3994  002AF8  9EA6               	bcf	4006,7,c	;volatile
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  3998  002AFA  9CA6               	bcf	4006,6,c	;volatile
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;EEPROM.c: 42: EECON1bits.WREN = 1;
  4002  002AFC  84A6               	bsf	4006,2,c	;volatile
  4003                           
  4004                           ;EEPROM.c: 45: EECON2 = 0x55;
  4005  002AFE  0E55               	movlw	85
  4006  002B00  6EA7               	movwf	4007,c	;volatile
  4007                           
  4008                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4009  002B02  0EAA               	movlw	170
  4010  002B04  6EA7               	movwf	4007,c	;volatile
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4014  002B06  82A6               	bsf	4006,1,c	;volatile
  4015  002B08                     l854:
  4016  002B08  A8A1               	btfss	4001,4,c	;volatile
  4017  002B0A  D7FE               	goto	l854
  4018                           
  4019                           ;EEPROM.c: 52: PIR2bits.EEIF = 0;
  4020  002B0C  98A1               	bcf	4001,4,c	;volatile
  4021                           
  4022                           ;EEPROM.c: 53: EECON1bits.WREN = 0;
  4023  002B0E  94A6               	bcf	4006,2,c	;volatile
  4024                           
  4025                           ;EEPROM.c: 55: (INTCONbits.GIE = 1);
  4026  002B10  8EF2               	bsf	intcon,7,c	;volatile
  4027  002B12  0012               	return		;funcret
  4028  002B14                     __end_of_EEPROM_write:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           intcon3	equ	0xFF0
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           postdec1	equ	0xFE5
  4042                           fsr1l	equ	0xFE1
  4043                           indf2	equ	0xFDF
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _EEPROM_read *****************
  4051 ;; Defined at:
  4052 ;;		line 58 in file "EEPROM.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  address         2    0[BANK0 ] unsigned short 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      unsigned char 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:        2 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    7
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_logRun
  4077 ;;		_retrieveLog
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text15
  4082  002C82                     __ptext15:
  4083                           	opt stack 0
  4084  002C82                     _EEPROM_read:
  4085                           	opt stack 22
  4086                           
  4087                           ;EEPROM.c: 59: (INTCONbits.GIE = 0);
  4088                           
  4089                           ;incstack = 0
  4090  002C82  9EF2               	bcf	intcon,7,c	;volatile
  4091                           
  4092                           ;EEPROM.c: 62: EEADRH = (unsigned char)(address >> 8);
  4093  002C84  0100               	movlb	0	; () banked
  4094  002C86  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4095  002C88  6EAA               	movwf	4010,c	;volatile
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;EEPROM.c: 63: EEADR = (unsigned char)address;
  4099  002C8A  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;EEPROM.c: 65: EECON1bits.EEPGD = 0;
  4103  002C8E  9EA6               	bcf	4006,7,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;EEPROM.c: 66: EECON1bits.CFGS = 0;
  4107  002C90  9CA6               	bcf	4006,6,c	;volatile
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;EEPROM.c: 67: EECON1bits.RD = 1;
  4111  002C92  80A6               	bsf	4006,0,c	;volatile
  4112  002C94                     l860:
  4113  002C94  B0A6               	btfsc	4006,0,c	;volatile
  4114  002C96  D7FE               	goto	l860
  4115                           
  4116                           ;EEPROM.c: 73: (INTCONbits.GIE = 1);
  4117  002C98  8EF2               	bsf	intcon,7,c	;volatile
  4118                           
  4119                           ;EEPROM.c: 74: return EEDATA;
  4120  002C9A  50A8               	movf	4008,w,c	;volatile
  4121  002C9C  0012               	return	
  4122  002C9E                     __end_of_EEPROM_read:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           intcon2	equ	0xFF1
  4132                           intcon3	equ	0xFF0
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           postdec1	equ	0xFE5
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _initUI *****************
  4145 ;; Defined at:
  4146 ;;		line 62 in file "UI.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;Total ram usage:        0 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:   12
  4167 ;; This function calls:
  4168 ;;		_change_state_to_menu_start
  4169 ;;		_loadRTC
  4170 ;; This function is called by:
  4171 ;;		_main
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text16
  4176  002BDE                     __ptext16:
  4177                           	opt stack 0
  4178  002BDE                     _initUI:
  4179                           	opt stack 18
  4180                           
  4181                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4182                           
  4183                           ;incstack = 0
  4184  002BDE  8EF2               	bsf	intcon,7,c	;volatile
  4185                           
  4186                           ;UI.c: 64: machine_state = UI_state;
  4187  002BE0  0E00               	movlw	0
  4188  002BE2  0100               	movlb	0	; () banked
  4189  002BE4  6FFB               	movwf	_machine_state& (0+255),b
  4190                           
  4191                           ;UI.c: 65: logstate = 0;
  4192  002BE6  0E00               	movlw	0
  4193  002BE8  0100               	movlb	0	; () banked
  4194  002BEA  6FF8               	movwf	(_logstate+1)& (0+255),b
  4195  002BEC  0E00               	movlw	0
  4196  002BEE  6FF7               	movwf	_logstate& (0+255),b
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;UI.c: 67: loadRTC();
  4200  002BF0  ECBA  F010         	call	_loadRTC	;wreg free
  4201                           
  4202                           ;UI.c: 69: change_state_to_menu_start();
  4203  002BF4  EC8A  F015         	call	_change_state_to_menu_start	;wreg free
  4204                           
  4205                           ;UI.c: 70: firstboot = 1;
  4206  002BF8  0E00               	movlw	0
  4207  002BFA  6E6E               	movwf	_firstboot+1,c
  4208  002BFC  0E01               	movlw	1
  4209  002BFE  6E6D               	movwf	_firstboot,c
  4210  002C00  0012               	return		;funcret
  4211  002C02                     __end_of_initUI:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           intcon	equ	0xFF2
  4220                           intcon2	equ	0xFF1
  4221                           intcon3	equ	0xFF0
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _loadRTC *****************
  4234 ;; Defined at:
  4235 ;;		line 28 in file "RTC.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  i               2   22[BANK0 ] int 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;Total ram usage:        3 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    9
  4256 ;; This function calls:
  4257 ;;		_I2C_Master_Init
  4258 ;;		_I2C_Master_Start
  4259 ;;		_I2C_Master_Stop
  4260 ;;		_I2C_Master_Write
  4261 ;; This function is called by:
  4262 ;;		_initUI
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text17
  4267  002174                     __ptext17:
  4268                           	opt stack 0
  4269  002174                     _loadRTC:
  4270                           	opt stack 20
  4271                           
  4272                           ;RTC.c: 30: I2C_Master_Init(10000);
  4273                           
  4274                           ;incstack = 0
  4275  002174  0E10               	movlw	16
  4276  002176  0100               	movlb	0	; () banked
  4277  002178  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4278  00217A  0E27               	movlw	39
  4279  00217C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4280  00217E  0E00               	movlw	0
  4281  002180  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4282  002182  0E00               	movlw	0
  4283  002184  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4284  002186  EC90  F012         	call	_I2C_Master_Init	;wreg free
  4285                           
  4286                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4287  00218A  9EF2               	bcf	intcon,7,c	;volatile
  4288                           
  4289                           ;RTC.c: 34: I2C_Master_Start();
  4290  00218C  ECAA  F016         	call	_I2C_Master_Start	;wreg free
  4291                           
  4292                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  4293  002190  0E00               	movlw	0
  4294  002192  0100               	movlb	0	; () banked
  4295  002194  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4296  002196  0ED0               	movlw	208
  4297  002198  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4298  00219A  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  4299                           
  4300                           ;RTC.c: 36: I2C_Master_Write(0x00);
  4301  00219E  0E00               	movlw	0
  4302  0021A0  0100               	movlb	0	; () banked
  4303  0021A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4304  0021A4  0E00               	movlw	0
  4305  0021A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4306  0021A8  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  4307                           
  4308                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  4309  0021AC  0E00               	movlw	0
  4310  0021AE  0100               	movlb	0	; () banked
  4311  0021B0  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  4312  0021B2  0E00               	movlw	0
  4313  0021B4  6F96               	movwf	loadRTC@i& (0+255),b
  4314  0021B6                     l4598:
  4315                           
  4316                           ; BSR set to: 0
  4317  0021B6  0100               	movlb	0	; () banked
  4318  0021B8  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  4319  0021BA  D008               	goto	l4602
  4320  0021BC  0100               	movlb	0	; () banked
  4321  0021BE  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  4322  0021C0  E11B               	bnz	l4608
  4323  0021C2  0E07               	movlw	7
  4324  0021C4  0100               	movlb	0	; () banked
  4325  0021C6  5D96               	subwf	loadRTC@i& (0+255),w,b
  4326  0021C8  B0D8               	btfsc	status,0,c
  4327  0021CA  D016               	goto	l4608
  4328  0021CC                     l4602:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  4332  0021CC  0ED4               	movlw	low _time
  4333  0021CE  0100               	movlb	0	; () banked
  4334  0021D0  2596               	addwf	loadRTC@i& (0+255),w,b
  4335  0021D2  6ED9               	movwf	fsr2l,c
  4336  0021D4  0E00               	movlw	high _time
  4337  0021D6  0100               	movlb	0	; () banked
  4338  0021D8  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  4339  0021DA  6EDA               	movwf	fsr2h,c
  4340  0021DC  50DF               	movf	indf2,w,c
  4341  0021DE  0100               	movlb	0	; () banked
  4342  0021E0  6F95               	movwf	??_loadRTC& (0+255),b
  4343  0021E2  0100               	movlb	0	; () banked
  4344  0021E4  5195               	movf	??_loadRTC& (0+255),w,b
  4345  0021E6  0100               	movlb	0	; () banked
  4346  0021E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4347  0021EA  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4348  0021EC  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  4349  0021F0  0100               	movlb	0	; () banked
  4350  0021F2  4B96               	infsnz	loadRTC@i& (0+255),f,b
  4351  0021F4  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  4352  0021F6  D7DF               	goto	l4598
  4353  0021F8                     l4608:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;RTC.c: 39: }
  4357                           ;RTC.c: 40: I2C_Master_Stop();
  4358  0021F8  ECA6  F016         	call	_I2C_Master_Stop	;wreg free
  4359                           
  4360                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  4361  0021FC  8EF2               	bsf	intcon,7,c	;volatile
  4362  0021FE  0012               	return		;funcret
  4363  002200                     __end_of_loadRTC:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           intcon2	equ	0xFF1
  4373                           intcon3	equ	0xFF0
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           postdec1	equ	0xFE5
  4377                           fsr1l	equ	0xFE1
  4378                           indf2	equ	0xFDF
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _I2C_Master_Init *****************
  4386 ;; Defined at:
  4387 ;;		line 15 in file "I2C.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  c               4   13[BANK0 ] const unsigned long 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;Total ram usage:        8 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    8
  4408 ;; This function calls:
  4409 ;;		___lldiv
  4410 ;; This function is called by:
  4411 ;;		_loadRTC
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text18
  4416  002520                     __ptext18:
  4417                           	opt stack 0
  4418  002520                     _I2C_Master_Init:
  4419                           	opt stack 20
  4420                           
  4421                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  4422                           
  4423                           ;incstack = 0
  4424  002520  0E00               	movlw	0
  4425  002522  6EC7               	movwf	4039,c	;volatile
  4426                           
  4427                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  4428  002524  0E28               	movlw	40
  4429  002526  6EC6               	movwf	4038,c	;volatile
  4430                           
  4431                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  4432  002528  0E00               	movlw	0
  4433  00252A  6EC5               	movwf	4037,c	;volatile
  4434                           
  4435                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  4436  00252C  0E00               	movlw	0
  4437  00252E  0100               	movlb	0	; () banked
  4438  002530  6F80               	movwf	___lldiv@dividend& (0+255),b
  4439  002532  0E48               	movlw	72
  4440  002534  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4441  002536  0EE8               	movlw	232
  4442  002538  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4443  00253A  0E01               	movlw	1
  4444  00253C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4445  00253E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4446  002542  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4447  002546  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4448  00254A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4449  00254E  0E02               	movlw	2
  4450  002550                     u3335:
  4451  002550  90D8               	bcf	status,0,c
  4452  002552  0100               	movlb	0	; () banked
  4453  002554  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4454  002556  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4455  002558  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4456  00255A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4457  00255C  2EE8               	decfsz	wreg,f,c
  4458  00255E  D7F8               	goto	u3335
  4459  002560  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4460  002564  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4461  002568  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4462  00256C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4463  002570  EC15  F00F         	call	___lldiv	;wreg free
  4464  002574  0100               	movlb	0	; () banked
  4465  002576  0580               	decf	?___lldiv& (0+255),w,b
  4466  002578  6EC8               	movwf	4040,c	;volatile
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;I2C.c: 22: TRISC3 = 1;
  4470  00257A  8694               	bsf	3988,3,c	;volatile
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;I2C.c: 23: TRISC4 = 1;
  4474  00257C  8894               	bsf	3988,4,c	;volatile
  4475                           
  4476                           ; BSR set to: 0
  4477  00257E  0012               	return		;funcret
  4478  002580                     __end_of_I2C_Master_Init:
  4479                           	opt stack 0
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           intcon2	equ	0xFF1
  4488                           intcon3	equ	0xFF0
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function ___lldiv *****************
  4501 ;; Defined at:
  4502 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  dividend        4    0[BANK0 ] unsigned long 
  4505 ;;  divisor         4    4[BANK0 ] unsigned long 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  quotient        4    8[BANK0 ] unsigned long 
  4508 ;;  counter         1   12[BANK0 ] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  4    0[BANK0 ] unsigned long 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4518 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;Total ram usage:       13 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    7
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_I2C_Master_Init
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text19
  4533  001E2A                     __ptext19:
  4534                           	opt stack 0
  4535  001E2A                     ___lldiv:
  4536                           	opt stack 20
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;incstack = 0
  4540  001E2A  0E00               	movlw	0
  4541  001E2C  0100               	movlb	0	; () banked
  4542  001E2E  6F88               	movwf	___lldiv@quotient& (0+255),b
  4543  001E30  0E00               	movlw	0
  4544  001E32  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4545  001E34  0E00               	movlw	0
  4546  001E36  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4547  001E38  0E00               	movlw	0
  4548  001E3A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551  001E3C  0100               	movlb	0	; () banked
  4552  001E3E  5184               	movf	___lldiv@divisor& (0+255),w,b
  4553  001E40  0100               	movlb	0	; () banked
  4554  001E42  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4555  001E44  0100               	movlb	0	; () banked
  4556  001E46  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4557  001E48  0100               	movlb	0	; () banked
  4558  001E4A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4559  001E4C  B4D8               	btfsc	status,2,c
  4560  001E4E  D042               	goto	l1296
  4561                           
  4562                           ; BSR set to: 0
  4563  001E50  0E01               	movlw	1
  4564  001E52  0100               	movlb	0	; () banked
  4565  001E54  6F8C               	movwf	___lldiv@counter& (0+255),b
  4566  001E56  D008               	goto	l4180
  4567  001E58                     l4178:
  4568                           
  4569                           ; BSR set to: 0
  4570  001E58  0100               	movlb	0	; () banked
  4571  001E5A  90D8               	bcf	status,0,c
  4572  001E5C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4573  001E5E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4574  001E60  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4575  001E62  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4576  001E64  0100               	movlb	0	; () banked
  4577  001E66  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4578  001E68                     l4180:
  4579                           
  4580                           ; BSR set to: 0
  4581  001E68  0100               	movlb	0	; () banked
  4582  001E6A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4583  001E6C  D7F5               	goto	l4178
  4584  001E6E                     l4182:
  4585                           
  4586                           ; BSR set to: 0
  4587  001E6E  0100               	movlb	0	; () banked
  4588  001E70  90D8               	bcf	status,0,c
  4589  001E72  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4590  001E74  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4591  001E76  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4592  001E78  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4593                           
  4594                           ; BSR set to: 0
  4595  001E7A  0100               	movlb	0	; () banked
  4596  001E7C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4597  001E7E  0100               	movlb	0	; () banked
  4598  001E80  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4599  001E82  0100               	movlb	0	; () banked
  4600  001E84  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4601  001E86  0100               	movlb	0	; () banked
  4602  001E88  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4603  001E8A  0100               	movlb	0	; () banked
  4604  001E8C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4605  001E8E  0100               	movlb	0	; () banked
  4606  001E90  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4607  001E92  0100               	movlb	0	; () banked
  4608  001E94  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4609  001E96  0100               	movlb	0	; () banked
  4610  001E98  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4611  001E9A  A0D8               	btfss	status,0,c
  4612  001E9C  D012               	goto	l4190
  4613                           
  4614                           ; BSR set to: 0
  4615  001E9E  0100               	movlb	0	; () banked
  4616  001EA0  5184               	movf	___lldiv@divisor& (0+255),w,b
  4617  001EA2  0100               	movlb	0	; () banked
  4618  001EA4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4619  001EA6  0100               	movlb	0	; () banked
  4620  001EA8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4621  001EAA  0100               	movlb	0	; () banked
  4622  001EAC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4623  001EAE  0100               	movlb	0	; () banked
  4624  001EB0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4625  001EB2  0100               	movlb	0	; () banked
  4626  001EB4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4627  001EB6  0100               	movlb	0	; () banked
  4628  001EB8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4629  001EBA  0100               	movlb	0	; () banked
  4630  001EBC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4631                           
  4632                           ; BSR set to: 0
  4633  001EBE  0100               	movlb	0	; () banked
  4634  001EC0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4635  001EC2                     l4190:
  4636                           
  4637                           ; BSR set to: 0
  4638  001EC2  0100               	movlb	0	; () banked
  4639  001EC4  90D8               	bcf	status,0,c
  4640  001EC6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4641  001EC8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4642  001ECA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4643  001ECC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4644                           
  4645                           ; BSR set to: 0
  4646  001ECE  0100               	movlb	0	; () banked
  4647  001ED0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4648  001ED2  D7CD               	goto	l4182
  4649  001ED4                     l1296:
  4650                           
  4651                           ; BSR set to: 0
  4652  001ED4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4653  001ED8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4654  001EDC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4655  001EE0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4656                           
  4657                           ; BSR set to: 0
  4658  001EE4  0012               	return		;funcret
  4659  001EE6                     __end_of___lldiv:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           intcon2	equ	0xFF1
  4669                           intcon3	equ	0xFF0
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           postdec1	equ	0xFE5
  4673                           fsr1l	equ	0xFE1
  4674                           indf2	equ	0xFDF
  4675                           postinc2	equ	0xFDE
  4676                           postdec2	equ	0xFDD
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _change_state_to_menu_start *****************
  4682 ;; Defined at:
  4683 ;;		line 418 in file "UI.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:   11
  4704 ;; This function calls:
  4705 ;;		_lcdInst
  4706 ;;		_printRTC
  4707 ;;		_printf
  4708 ;; This function is called by:
  4709 ;;		_initUI
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text20
  4714  002B14                     __ptext20:
  4715                           	opt stack 0
  4716  002B14                     _change_state_to_menu_start:
  4717                           	opt stack 18
  4718                           
  4719                           ;UI.c: 419: cur_state = 0;
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;incstack = 0
  4723  002B14  0E00               	movlw	0
  4724  002B16  0100               	movlb	0	; () banked
  4725  002B18  6FE8               	movwf	(_cur_state+1)& (0+255),b
  4726  002B1A  0E00               	movlw	0
  4727  002B1C  6FE7               	movwf	_cur_state& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;UI.c: 421: lcdInst(0b10000000);;
  4731  002B1E  0E80               	movlw	128
  4732  002B20  EC88  F016         	call	_lcdInst
  4733                           
  4734                           ;UI.c: 422: printRTC();
  4735  002B24  EC63  F006         	call	_printRTC	;wreg free
  4736                           
  4737                           ;UI.c: 423: lcdInst(0b11000000);;
  4738  002B28  0EC0               	movlw	192
  4739  002B2A  EC88  F016         	call	_lcdInst
  4740                           
  4741                           ;UI.c: 424: printf("PUSH TO CONTINUE");
  4742  002B2E  0E97               	movlw	low STR_15
  4743  002B30  0100               	movlb	0	; () banked
  4744  002B32  6F8E               	movwf	printf@f& (0+255),b
  4745  002B34  0EFF               	movlw	high STR_15
  4746  002B36  0100               	movlb	0	; () banked
  4747  002B38  6F8F               	movwf	(printf@f+1)& (0+255),b
  4748  002B3A  ECBB  F002         	call	_printf	;wreg free
  4749  002B3E  0012               	return		;funcret
  4750  002B40                     __end_of_change_state_to_menu_start:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           intcon2	equ	0xFF1
  4760                           intcon3	equ	0xFF0
  4761                           postinc0	equ	0xFEE
  4762                           wreg	equ	0xFE8
  4763                           postdec1	equ	0xFE5
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _initTime *****************
  4773 ;; Defined at:
  4774 ;;		line 17 in file "RTC.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  s               1    wreg     unsigned char 
  4777 ;;  m               1    0[BANK0 ] unsigned char 
  4778 ;;  h               1    1[BANK0 ] unsigned char 
  4779 ;;  w               1    2[BANK0 ] unsigned char 
  4780 ;;  DD              1    3[BANK0 ] unsigned char 
  4781 ;;  MM              1    4[BANK0 ] unsigned char 
  4782 ;;  YY              1    5[BANK0 ] unsigned char 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  s               1    6[BANK0 ] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4794 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;Total ram usage:        7 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    7
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_main
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text21
  4809  002C24                     __ptext21:
  4810                           	opt stack 0
  4811  002C24                     _initTime:
  4812                           	opt stack 23
  4813                           
  4814                           ;incstack = 0
  4815                           ;initTime@s stored from wreg
  4816  002C24  0100               	movlb	0	; () banked
  4817  002C26  6F86               	movwf	initTime@s& (0+255),b
  4818                           
  4819                           ;RTC.c: 19: time[0] = s;
  4820  002C28  C086  F0D4         	movff	initTime@s,_time
  4821                           
  4822                           ;RTC.c: 20: time[1] = m;
  4823  002C2C  C080  F0D5         	movff	initTime@m,_time+1
  4824                           
  4825                           ;RTC.c: 21: time[2] = h;
  4826  002C30  C081  F0D6         	movff	initTime@h,_time+2
  4827                           
  4828                           ;RTC.c: 22: time[3] = w;
  4829  002C34  C082  F0D7         	movff	initTime@w,_time+3
  4830                           
  4831                           ;RTC.c: 23: time[4] = DD;
  4832  002C38  C083  F0D8         	movff	initTime@DD,_time+4
  4833                           
  4834                           ;RTC.c: 24: time[5] = MM;
  4835  002C3C  C084  F0D9         	movff	initTime@MM,_time+5
  4836                           
  4837                           ;RTC.c: 25: time[6] = YY;
  4838  002C40  C085  F0DA         	movff	initTime@YY,_time+6
  4839  002C44  0012               	return		;funcret
  4840  002C46                     __end_of_initTime:
  4841                           	opt stack 0
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           intcon2	equ	0xFF1
  4850                           intcon3	equ	0xFF0
  4851                           postinc0	equ	0xFEE
  4852                           wreg	equ	0xFE8
  4853                           postdec1	equ	0xFE5
  4854                           fsr1l	equ	0xFE1
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _initLCD *****************
  4863 ;; Defined at:
  4864 ;;		line 48 in file "lcd.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        1 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    9
  4885 ;; This function calls:
  4886 ;;		_lcdInst
  4887 ;; This function is called by:
  4888 ;;		_main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text22
  4893  00271A                     __ptext22:
  4894                           	opt stack 0
  4895  00271A                     _initLCD:
  4896                           	opt stack 21
  4897                           
  4898                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  4899                           
  4900                           ;incstack = 0
  4901  00271A  0E9C               	movlw	156
  4902  00271C  0100               	movlb	0	; () banked
  4903  00271E  6F83               	movwf	??_initLCD& (0+255),b
  4904  002720  0ED7               	movlw	215
  4905  002722                     u4977:
  4906  002722  2EE8               	decfsz	wreg,f,c
  4907  002724  D7FE               	bra	u4977
  4908  002726  2F83               	decfsz	??_initLCD& (0+255),f,b
  4909  002728  D7FC               	bra	u4977
  4910                           
  4911                           ;lcd.c: 50: lcdInst(0b00110011);
  4912  00272A  0E33               	movlw	51
  4913  00272C  EC88  F016         	call	_lcdInst
  4914                           
  4915                           ;lcd.c: 51: lcdInst(0b00110010);
  4916  002730  0E32               	movlw	50
  4917  002732  EC88  F016         	call	_lcdInst
  4918                           
  4919                           ;lcd.c: 53: lcdInst(0b00101000);
  4920  002736  0E28               	movlw	40
  4921  002738  EC88  F016         	call	_lcdInst
  4922                           
  4923                           ;lcd.c: 54: lcdInst(0b00001100);
  4924  00273C  0E0C               	movlw	12
  4925  00273E  EC88  F016         	call	_lcdInst
  4926                           
  4927                           ;lcd.c: 55: lcdInst(0b00000110);
  4928  002742  0E06               	movlw	6
  4929  002744  EC88  F016         	call	_lcdInst
  4930                           
  4931                           ;lcd.c: 56: lcdInst(0b00000001);
  4932  002748  0E01               	movlw	1
  4933  00274A  EC88  F016         	call	_lcdInst
  4934                           
  4935                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  4936  00274E  0E9C               	movlw	156
  4937  002750  0100               	movlb	0	; () banked
  4938  002752  6F83               	movwf	??_initLCD& (0+255),b
  4939  002754  0ED7               	movlw	215
  4940  002756                     u4987:
  4941  002756  2EE8               	decfsz	wreg,f,c
  4942  002758  D7FE               	bra	u4987
  4943  00275A  2F83               	decfsz	??_initLCD& (0+255),f,b
  4944  00275C  D7FC               	bra	u4987
  4945  00275E  0012               	return		;funcret
  4946  002760                     __end_of_initLCD:
  4947                           	opt stack 0
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           intcon3	equ	0xFF0
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postdec1	equ	0xFE5
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _UI *****************
  4969 ;; Defined at:
  4970 ;;		line 74 in file "UI.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  i               1   83[BANK0 ] unsigned char 
  4975 ;;  i               1   82[BANK0 ] unsigned char 
  4976 ;;  i               1   81[BANK0 ] unsigned char 
  4977 ;;  i               1   80[BANK0 ] unsigned char 
  4978 ;;  i               1   79[BANK0 ] unsigned char 
  4979 ;;  i               1   78[BANK0 ] unsigned char 
  4980 ;;  i               1   77[BANK0 ] unsigned char 
  4981 ;;  i               1   76[BANK0 ] unsigned char 
  4982 ;;  i               1   75[BANK0 ] unsigned char 
  4983 ;;  i               1   74[BANK0 ] unsigned char 
  4984 ;;  i               1   73[BANK0 ] unsigned char 
  4985 ;;  i               1   72[BANK0 ] unsigned char 
  4986 ;;  i               1   71[BANK0 ] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;Total ram usage:       16 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:   11
  5003 ;; This function calls:
  5004 ;;		___awdiv
  5005 ;;		___awmod
  5006 ;;		_change_state_to_menu_12
  5007 ;;		_change_state_to_menu_22
  5008 ;;		_lcdInst
  5009 ;;		_printRTC
  5010 ;;		_printf
  5011 ;; This function is called by:
  5012 ;;		_main
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text23
  5017  000012                     __ptext23:
  5018                           	opt stack 0
  5019  000012                     _UI:
  5020                           	opt stack 19
  5021                           
  5022                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5023                           
  5024                           ;incstack = 0
  5025  000012  0E02               	movlw	2
  5026  000014  0100               	movlb	0	; () banked
  5027  000016  19FB               	xorwf	_machine_state& (0+255),w,b
  5028  000018  A4D8               	btfss	status,2,c
  5029  00001A  D071               	goto	l5070
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5033  00001C  0E01               	movlw	1
  5034  00001E  EC88  F016         	call	_lcdInst
  5035  000022  0E68               	movlw	104
  5036  000024  0100               	movlb	0	; () banked
  5037  000026  6FC4               	movwf	??_UI& (0+255),b
  5038  000028  0EE4               	movlw	228
  5039  00002A                     u4997:
  5040  00002A  2EE8               	decfsz	wreg,f,c
  5041  00002C  D7FE               	bra	u4997
  5042  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5043  000030  D7FC               	bra	u4997
  5044  000032  F000               	nop	
  5045                           
  5046                           ;UI.c: 77: lcdInst(0b10000000);;
  5047  000034  0E80               	movlw	128
  5048  000036  EC88  F016         	call	_lcdInst
  5049                           
  5050                           ;UI.c: 78: printf("!SORT CONCLUDED!");
  5051  00003A  0EBA               	movlw	low STR_1
  5052  00003C  0100               	movlb	0	; () banked
  5053  00003E  6F8E               	movwf	printf@f& (0+255),b
  5054  000040  0EFE               	movlw	high STR_1
  5055  000042  0100               	movlb	0	; () banked
  5056  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5057  000046  ECBB  F002         	call	_printf	;wreg free
  5058                           
  5059                           ;UI.c: 79: lcdInst(0b11000000);;
  5060  00004A  0EC0               	movlw	192
  5061  00004C  EC88  F016         	call	_lcdInst
  5062                           
  5063                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  5064  000050  0E0E               	movlw	14
  5065  000052  0100               	movlb	0	; () banked
  5066  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5067  000056  0E10               	movlw	16
  5068  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  5069  00005A  C0F9  F080         	movff	_total_time,___awmod@dividend
  5070  00005E  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5071  000062  EC1E  F010         	call	___awmod	;wreg free
  5072  000066  C080  F0C5         	movff	?___awmod,_UI$1949
  5073  00006A  C081  F0C6         	movff	?___awmod+1,_UI$1949+1
  5074                           
  5075                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  5076  00006E  0EE8               	movlw	low STR_2
  5077  000070  0100               	movlb	0	; () banked
  5078  000072  6F8E               	movwf	printf@f& (0+255),b
  5079  000074  0EFD               	movlw	high STR_2
  5080  000076  0100               	movlb	0	; () banked
  5081  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  5082  00007A  0E00               	movlw	0
  5083  00007C  0100               	movlb	0	; () banked
  5084  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  5085  000080  0E00               	movlw	0
  5086  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  5087  000084  0E0E               	movlw	14
  5088  000086  0100               	movlb	0	; () banked
  5089  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5090  00008A  0E10               	movlw	16
  5091  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  5092  00008E  C0F9  F080         	movff	_total_time,___awmod@dividend
  5093  000092  C0FA  F081         	movff	_total_time+1,___awmod@dividend+1
  5094  000096  EC1E  F010         	call	___awmod	;wreg free
  5095  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  5096  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5097  0000A2  0E00               	movlw	0
  5098  0000A4  0100               	movlb	0	; () banked
  5099  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5100  0000A8  0E3C               	movlw	60
  5101  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5102  0000AC  ECB6  F00E         	call	___awdiv	;wreg free
  5103  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  5104  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  5105  0000B8  C0C5  F080         	movff	_UI$1949,___awmod@dividend
  5106  0000BC  C0C6  F081         	movff	_UI$1949+1,___awmod@dividend+1
  5107  0000C0  0E00               	movlw	0
  5108  0000C2  0100               	movlb	0	; () banked
  5109  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5110  0000C6  0E3C               	movlw	60
  5111  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  5112  0000CA  EC1E  F010         	call	___awmod	;wreg free
  5113  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  5114  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  5115  0000D6  ECBB  F002         	call	_printf	;wreg free
  5116                           
  5117                           ;UI.c: 81: machine_state = UI_state;
  5118  0000DA  0E00               	movlw	0
  5119  0000DC  0100               	movlb	0	; () banked
  5120  0000DE  6FFB               	movwf	_machine_state& (0+255),b
  5121  0000E0                     l176:
  5122  0000E0  A281               	btfss	3969,1,c	;volatile
  5123  0000E2  D7FE               	goto	l176
  5124                           
  5125                           ;UI.c: 84: }
  5126                           ;UI.c: 85: if(cur_state==12){
  5127  0000E4  0E0C               	movlw	12
  5128  0000E6  0100               	movlb	0	; () banked
  5129  0000E8  19E7               	xorwf	_cur_state& (0+255),w,b
  5130  0000EA  0100               	movlb	0	; () banked
  5131  0000EC  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  5132  0000EE  A4D8               	btfss	status,2,c
  5133  0000F0  D003               	goto	l5068
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;UI.c: 86: change_state_to_menu_12();
  5137  0000F2  ECED  F013         	call	_change_state_to_menu_12	;wreg free
  5138                           
  5139                           ;UI.c: 87: }
  5140  0000F6  D238               	goto	l5326
  5141  0000F8                     l5068:
  5142                           
  5143                           ;UI.c: 88: else{
  5144                           ;UI.c: 89: change_state_to_menu_22();
  5145  0000F8  ECD1  F013         	call	_change_state_to_menu_22	;wreg free
  5146                           
  5147                           ;UI.c: 90: }
  5148                           ;UI.c: 91: }
  5149  0000FC  D235               	goto	l5326
  5150  0000FE                     l5070:
  5151                           
  5152                           ;UI.c: 92: else if(cur_state == 0){
  5153  0000FE  0100               	movlb	0	; () banked
  5154  000100  51E7               	movf	_cur_state& (0+255),w,b
  5155  000102  0100               	movlb	0	; () banked
  5156  000104  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  5157  000106  A4D8               	btfss	status,2,c
  5158  000108  D22F               	goto	l5326
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5162  00010A  0E00               	movlw	0
  5163  00010C  0100               	movlb	0	; () banked
  5164  00010E  6FC7               	movwf	UI@i& (0+255),b
  5165  000110                     l5074:
  5166                           
  5167                           ; BSR set to: 0
  5168  000110  0E63               	movlw	99
  5169  000112  0100               	movlb	0	; () banked
  5170  000114  65C7               	cpfsgt	UI@i& (0+255),b
  5171  000116  D001               	goto	l5078
  5172  000118  D00C               	goto	l5082
  5173  00011A                     l5078:
  5174                           
  5175                           ; BSR set to: 0
  5176  00011A  0E68               	movlw	104
  5177  00011C  0100               	movlb	0	; () banked
  5178  00011E  6FC4               	movwf	??_UI& (0+255),b
  5179  000120  0EE4               	movlw	228
  5180  000122                     u5007:
  5181  000122  2EE8               	decfsz	wreg,f,c
  5182  000124  D7FE               	bra	u5007
  5183  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  5184  000128  D7FC               	bra	u5007
  5185  00012A  F000               	nop	
  5186  00012C  0100               	movlb	0	; () banked
  5187  00012E  2BC7               	incf	UI@i& (0+255),f,b
  5188  000130  D7EF               	goto	l5074
  5189  000132                     l5082:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;UI.c: 94: if(cur_state == 0){
  5193  000132  0100               	movlb	0	; () banked
  5194  000134  51E7               	movf	_cur_state& (0+255),w,b
  5195  000136  0100               	movlb	0	; () banked
  5196  000138  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  5197  00013A  A4D8               	btfss	status,2,c
  5198  00013C  D215               	goto	l5326
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;UI.c: 95: printRTC();
  5202  00013E  EC63  F006         	call	_printRTC	;wreg free
  5203                           
  5204                           ;UI.c: 96: }
  5205                           ;UI.c: 97: }
  5206                           ;UI.c: 98: while(logstate){
  5207  000142  D212               	goto	l5326
  5208  000144                     l5086:
  5209                           
  5210                           ;UI.c: 100: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5211  000144  0E01               	movlw	1
  5212  000146  EC88  F016         	call	_lcdInst
  5213  00014A  0E68               	movlw	104
  5214  00014C  0100               	movlb	0	; () banked
  5215  00014E  6FC4               	movwf	??_UI& (0+255),b
  5216  000150  0EE4               	movlw	228
  5217  000152                     u5017:
  5218  000152  2EE8               	decfsz	wreg,f,c
  5219  000154  D7FE               	bra	u5017
  5220  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  5221  000158  D7FC               	bra	u5017
  5222  00015A  F000               	nop	
  5223                           
  5224                           ;UI.c: 101: lcdInst(0b10000000);;
  5225  00015C  0E80               	movlw	128
  5226  00015E  EC88  F016         	call	_lcdInst
  5227                           
  5228                           ;UI.c: 102: printf("-- Log %2d here--", log);
  5229  000162  0EFD               	movlw	low STR_3
  5230  000164  0100               	movlb	0	; () banked
  5231  000166  6F8E               	movwf	printf@f& (0+255),b
  5232  000168  0EFD               	movlw	high STR_3
  5233  00016A  0100               	movlb	0	; () banked
  5234  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5235  00016E  C0F5  F090         	movff	_log,?_printf+2
  5236  000172  C0F6  F091         	movff	_log+1,?_printf+3
  5237  000176  ECBB  F002         	call	_printf	;wreg free
  5238                           
  5239                           ;UI.c: 103: lcdInst(0b11000000);;
  5240  00017A  0EC0               	movlw	192
  5241  00017C  EC88  F016         	call	_lcdInst
  5242                           
  5243                           ;UI.c: 104: printf("Pause:< | Back:>");
  5244  000180  0E86               	movlw	low STR_4
  5245  000182  0100               	movlb	0	; () banked
  5246  000184  6F8E               	movwf	printf@f& (0+255),b
  5247  000186  0EFF               	movlw	high STR_4
  5248  000188  0100               	movlb	0	; () banked
  5249  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5250  00018C  ECBB  F002         	call	_printf	;wreg free
  5251                           
  5252                           ;UI.c: 106: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5253  000190  0E00               	movlw	0
  5254  000192  0100               	movlb	0	; () banked
  5255  000194  6FC8               	movwf	UI@i_483& (0+255),b
  5256  000196                     l5100:
  5257                           
  5258                           ; BSR set to: 0
  5259  000196  0E63               	movlw	99
  5260  000198  0100               	movlb	0	; () banked
  5261  00019A  65C8               	cpfsgt	UI@i_483& (0+255),b
  5262  00019C  D001               	goto	l5104
  5263  00019E  D00C               	goto	l5108
  5264  0001A0                     l5104:
  5265                           
  5266                           ; BSR set to: 0
  5267  0001A0  0E68               	movlw	104
  5268  0001A2  0100               	movlb	0	; () banked
  5269  0001A4  6FC4               	movwf	??_UI& (0+255),b
  5270  0001A6  0EE4               	movlw	228
  5271  0001A8                     u5027:
  5272  0001A8  2EE8               	decfsz	wreg,f,c
  5273  0001AA  D7FE               	bra	u5027
  5274  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  5275  0001AE  D7FC               	bra	u5027
  5276  0001B0  F000               	nop	
  5277  0001B2  0100               	movlb	0	; () banked
  5278  0001B4  2BC8               	incf	UI@i_483& (0+255),f,b
  5279  0001B6  D7EF               	goto	l5100
  5280  0001B8                     l5108:
  5281                           
  5282                           ; BSR set to: 0
  5283  0001B8  0100               	movlb	0	; () banked
  5284  0001BA  51F7               	movf	_logstate& (0+255),w,b
  5285  0001BC  0100               	movlb	0	; () banked
  5286  0001BE  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5287  0001C0  B4D8               	btfsc	status,2,c
  5288  0001C2  0012               	return	
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;UI.c: 107: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5292                           
  5293                           ; BSR set to: 0
  5294                           
  5295                           ; BSR set to: 0
  5296  0001C4  0E00               	movlw	0
  5297  0001C6  0100               	movlb	0	; () banked
  5298  0001C8  6FC9               	movwf	UI@i_484& (0+255),b
  5299  0001CA                     l5114:
  5300                           
  5301                           ; BSR set to: 0
  5302  0001CA  0E63               	movlw	99
  5303  0001CC  0100               	movlb	0	; () banked
  5304  0001CE  65C9               	cpfsgt	UI@i_484& (0+255),b
  5305  0001D0  D001               	goto	l5118
  5306  0001D2  D00C               	goto	l5122
  5307  0001D4                     l5118:
  5308                           
  5309                           ; BSR set to: 0
  5310  0001D4  0E68               	movlw	104
  5311  0001D6  0100               	movlb	0	; () banked
  5312  0001D8  6FC4               	movwf	??_UI& (0+255),b
  5313  0001DA  0EE4               	movlw	228
  5314  0001DC                     u5037:
  5315  0001DC  2EE8               	decfsz	wreg,f,c
  5316  0001DE  D7FE               	bra	u5037
  5317  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  5318  0001E2  D7FC               	bra	u5037
  5319  0001E4  F000               	nop	
  5320  0001E6  0100               	movlb	0	; () banked
  5321  0001E8  2BC9               	incf	UI@i_484& (0+255),f,b
  5322  0001EA  D7EF               	goto	l5114
  5323  0001EC                     l5122:
  5324                           
  5325                           ; BSR set to: 0
  5326  0001EC  0100               	movlb	0	; () banked
  5327  0001EE  51F7               	movf	_logstate& (0+255),w,b
  5328  0001F0  0100               	movlb	0	; () banked
  5329  0001F2  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5330  0001F4  B4D8               	btfsc	status,2,c
  5331  0001F6  0012               	return	
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;UI.c: 109: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5335                           
  5336                           ; BSR set to: 0
  5337                           
  5338                           ; BSR set to: 0
  5339  0001F8  0E01               	movlw	1
  5340  0001FA  EC88  F016         	call	_lcdInst
  5341  0001FE  0E68               	movlw	104
  5342  000200  0100               	movlb	0	; () banked
  5343  000202  6FC4               	movwf	??_UI& (0+255),b
  5344  000204  0EE4               	movlw	228
  5345  000206                     u5047:
  5346  000206  2EE8               	decfsz	wreg,f,c
  5347  000208  D7FE               	bra	u5047
  5348  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  5349  00020C  D7FC               	bra	u5047
  5350  00020E  F000               	nop	
  5351                           
  5352                           ;UI.c: 110: lcdInst(0b10000000);;
  5353  000210  0E80               	movlw	128
  5354  000212  EC88  F016         	call	_lcdInst
  5355                           
  5356                           ;UI.c: 111: printf("Start:");
  5357  000216  0EC4               	movlw	low STR_5
  5358  000218  0100               	movlb	0	; () banked
  5359  00021A  6F8E               	movwf	printf@f& (0+255),b
  5360  00021C  0EFF               	movlw	high STR_5
  5361  00021E  0100               	movlb	0	; () banked
  5362  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  5363  000222  ECBB  F002         	call	_printf	;wreg free
  5364                           
  5365                           ;UI.c: 112: lcdInst(0b11000000);;
  5366  000226  0EC0               	movlw	192
  5367  000228  EC88  F016         	call	_lcdInst
  5368                           
  5369                           ;UI.c: 113: printf("06Feb | 01:08:56");
  5370  00022C  0EFE               	movlw	low STR_6
  5371  00022E  0100               	movlb	0	; () banked
  5372  000230  6F8E               	movwf	printf@f& (0+255),b
  5373  000232  0EFE               	movlw	high STR_6
  5374  000234  0100               	movlb	0	; () banked
  5375  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  5376  000238  ECBB  F002         	call	_printf	;wreg free
  5377                           
  5378                           ;UI.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5379  00023C  0E00               	movlw	0
  5380  00023E  0100               	movlb	0	; () banked
  5381  000240  6FCA               	movwf	UI@i_487& (0+255),b
  5382  000242                     l5140:
  5383                           
  5384                           ; BSR set to: 0
  5385  000242  0E63               	movlw	99
  5386  000244  0100               	movlb	0	; () banked
  5387  000246  65CA               	cpfsgt	UI@i_487& (0+255),b
  5388  000248  D001               	goto	l5144
  5389  00024A  D00C               	goto	l5148
  5390  00024C                     l5144:
  5391                           
  5392                           ; BSR set to: 0
  5393  00024C  0E68               	movlw	104
  5394  00024E  0100               	movlb	0	; () banked
  5395  000250  6FC4               	movwf	??_UI& (0+255),b
  5396  000252  0EE4               	movlw	228
  5397  000254                     u5057:
  5398  000254  2EE8               	decfsz	wreg,f,c
  5399  000256  D7FE               	bra	u5057
  5400  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  5401  00025A  D7FC               	bra	u5057
  5402  00025C  F000               	nop	
  5403  00025E  0100               	movlb	0	; () banked
  5404  000260  2BCA               	incf	UI@i_487& (0+255),f,b
  5405  000262  D7EF               	goto	l5140
  5406  000264                     l5148:
  5407                           
  5408                           ; BSR set to: 0
  5409  000264  0100               	movlb	0	; () banked
  5410  000266  51F7               	movf	_logstate& (0+255),w,b
  5411  000268  0100               	movlb	0	; () banked
  5412  00026A  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5413  00026C  B4D8               	btfsc	status,2,c
  5414  00026E  0012               	return	
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5418                           
  5419                           ; BSR set to: 0
  5420                           
  5421                           ; BSR set to: 0
  5422  000270  0E00               	movlw	0
  5423  000272  0100               	movlb	0	; () banked
  5424  000274  6FCB               	movwf	UI@i_488& (0+255),b
  5425  000276                     l5154:
  5426                           
  5427                           ; BSR set to: 0
  5428  000276  0E63               	movlw	99
  5429  000278  0100               	movlb	0	; () banked
  5430  00027A  65CB               	cpfsgt	UI@i_488& (0+255),b
  5431  00027C  D001               	goto	l5158
  5432  00027E  D00C               	goto	l5162
  5433  000280                     l5158:
  5434                           
  5435                           ; BSR set to: 0
  5436  000280  0E68               	movlw	104
  5437  000282  0100               	movlb	0	; () banked
  5438  000284  6FC4               	movwf	??_UI& (0+255),b
  5439  000286  0EE4               	movlw	228
  5440  000288                     u5067:
  5441  000288  2EE8               	decfsz	wreg,f,c
  5442  00028A  D7FE               	bra	u5067
  5443  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  5444  00028E  D7FC               	bra	u5067
  5445  000290  F000               	nop	
  5446  000292  0100               	movlb	0	; () banked
  5447  000294  2BCB               	incf	UI@i_488& (0+255),f,b
  5448  000296  D7EF               	goto	l5154
  5449  000298                     l5162:
  5450                           
  5451                           ; BSR set to: 0
  5452  000298  0100               	movlb	0	; () banked
  5453  00029A  51F7               	movf	_logstate& (0+255),w,b
  5454  00029C  0100               	movlb	0	; () banked
  5455  00029E  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5456  0002A0  B4D8               	btfsc	status,2,c
  5457  0002A2  0012               	return	
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;UI.c: 118: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5461                           
  5462                           ; BSR set to: 0
  5463                           
  5464                           ; BSR set to: 0
  5465  0002A4  0E01               	movlw	1
  5466  0002A6  EC88  F016         	call	_lcdInst
  5467  0002AA  0E68               	movlw	104
  5468  0002AC  0100               	movlb	0	; () banked
  5469  0002AE  6FC4               	movwf	??_UI& (0+255),b
  5470  0002B0  0EE4               	movlw	228
  5471  0002B2                     u5077:
  5472  0002B2  2EE8               	decfsz	wreg,f,c
  5473  0002B4  D7FE               	bra	u5077
  5474  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  5475  0002B8  D7FC               	bra	u5077
  5476  0002BA  F000               	nop	
  5477                           
  5478                           ;UI.c: 119: lcdInst(0b10000000);;
  5479  0002BC  0E80               	movlw	128
  5480  0002BE  EC88  F016         	call	_lcdInst
  5481                           
  5482                           ;UI.c: 120: printf("Duration:");
  5483  0002C2  0EB3               	movlw	low STR_7
  5484  0002C4  0100               	movlb	0	; () banked
  5485  0002C6  6F8E               	movwf	printf@f& (0+255),b
  5486  0002C8  0EFF               	movlw	high STR_7
  5487  0002CA  0100               	movlb	0	; () banked
  5488  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5489  0002CE  ECBB  F002         	call	_printf	;wreg free
  5490                           
  5491                           ;UI.c: 121: lcdInst(0b11000000);;
  5492  0002D2  0EC0               	movlw	192
  5493  0002D4  EC88  F016         	call	_lcdInst
  5494                           
  5495                           ;UI.c: 122: printf("%d min(s) %d secs", 2, 42);
  5496  0002D8  0E0F               	movlw	low STR_8
  5497  0002DA  0100               	movlb	0	; () banked
  5498  0002DC  6F8E               	movwf	printf@f& (0+255),b
  5499  0002DE  0EFE               	movlw	high STR_8
  5500  0002E0  0100               	movlb	0	; () banked
  5501  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5502  0002E4  0E00               	movlw	0
  5503  0002E6  0100               	movlb	0	; () banked
  5504  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  5505  0002EA  0E02               	movlw	2
  5506  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  5507  0002EE  0E00               	movlw	0
  5508  0002F0  0100               	movlb	0	; () banked
  5509  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  5510  0002F4  0E2A               	movlw	42
  5511  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  5512  0002F8  ECBB  F002         	call	_printf	;wreg free
  5513                           
  5514                           ;UI.c: 124: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5515  0002FC  0E00               	movlw	0
  5516  0002FE  0100               	movlb	0	; () banked
  5517  000300  6FCC               	movwf	UI@i_491& (0+255),b
  5518  000302                     l5180:
  5519                           
  5520                           ; BSR set to: 0
  5521  000302  0E63               	movlw	99
  5522  000304  0100               	movlb	0	; () banked
  5523  000306  65CC               	cpfsgt	UI@i_491& (0+255),b
  5524  000308  D001               	goto	l5184
  5525  00030A  D00C               	goto	l5188
  5526  00030C                     l5184:
  5527                           
  5528                           ; BSR set to: 0
  5529  00030C  0E68               	movlw	104
  5530  00030E  0100               	movlb	0	; () banked
  5531  000310  6FC4               	movwf	??_UI& (0+255),b
  5532  000312  0EE4               	movlw	228
  5533  000314                     u5087:
  5534  000314  2EE8               	decfsz	wreg,f,c
  5535  000316  D7FE               	bra	u5087
  5536  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  5537  00031A  D7FC               	bra	u5087
  5538  00031C  F000               	nop	
  5539  00031E  0100               	movlb	0	; () banked
  5540  000320  2BCC               	incf	UI@i_491& (0+255),f,b
  5541  000322  D7EF               	goto	l5180
  5542  000324                     l5188:
  5543                           
  5544                           ; BSR set to: 0
  5545  000324  0100               	movlb	0	; () banked
  5546  000326  51F7               	movf	_logstate& (0+255),w,b
  5547  000328  0100               	movlb	0	; () banked
  5548  00032A  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5549  00032C  B4D8               	btfsc	status,2,c
  5550  00032E  0012               	return	
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;UI.c: 125: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5554                           
  5555                           ; BSR set to: 0
  5556                           
  5557                           ; BSR set to: 0
  5558  000330  0E00               	movlw	0
  5559  000332  0100               	movlb	0	; () banked
  5560  000334  6FCD               	movwf	UI@i_492& (0+255),b
  5561  000336                     l5194:
  5562                           
  5563                           ; BSR set to: 0
  5564  000336  0E63               	movlw	99
  5565  000338  0100               	movlb	0	; () banked
  5566  00033A  65CD               	cpfsgt	UI@i_492& (0+255),b
  5567  00033C  D001               	goto	l5198
  5568  00033E  D00C               	goto	l5202
  5569  000340                     l5198:
  5570                           
  5571                           ; BSR set to: 0
  5572  000340  0E68               	movlw	104
  5573  000342  0100               	movlb	0	; () banked
  5574  000344  6FC4               	movwf	??_UI& (0+255),b
  5575  000346  0EE4               	movlw	228
  5576  000348                     u5097:
  5577  000348  2EE8               	decfsz	wreg,f,c
  5578  00034A  D7FE               	bra	u5097
  5579  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5580  00034E  D7FC               	bra	u5097
  5581  000350  F000               	nop	
  5582  000352  0100               	movlb	0	; () banked
  5583  000354  2BCD               	incf	UI@i_492& (0+255),f,b
  5584  000356  D7EF               	goto	l5194
  5585  000358                     l5202:
  5586                           
  5587                           ; BSR set to: 0
  5588  000358  0100               	movlb	0	; () banked
  5589  00035A  51F7               	movf	_logstate& (0+255),w,b
  5590  00035C  0100               	movlb	0	; () banked
  5591  00035E  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5592  000360  B4D8               	btfsc	status,2,c
  5593  000362  0012               	return	
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;UI.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5597                           
  5598                           ; BSR set to: 0
  5599                           
  5600                           ; BSR set to: 0
  5601  000364  0E01               	movlw	1
  5602  000366  EC88  F016         	call	_lcdInst
  5603  00036A  0E68               	movlw	104
  5604  00036C  0100               	movlb	0	; () banked
  5605  00036E  6FC4               	movwf	??_UI& (0+255),b
  5606  000370  0EE4               	movlw	228
  5607  000372                     u5107:
  5608  000372  2EE8               	decfsz	wreg,f,c
  5609  000374  D7FE               	bra	u5107
  5610  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5611  000378  D7FC               	bra	u5107
  5612  00037A  F000               	nop	
  5613                           
  5614                           ;UI.c: 128: lcdInst(0b10000000);;
  5615  00037C  0E80               	movlw	128
  5616  00037E  EC88  F016         	call	_lcdInst
  5617                           
  5618                           ;UI.c: 129: printf(" -- Pop  can -- ");
  5619  000382  0E98               	movlw	low STR_9
  5620  000384  0100               	movlb	0	; () banked
  5621  000386  6F8E               	movwf	printf@f& (0+255),b
  5622  000388  0EFE               	movlw	high STR_9
  5623  00038A  0100               	movlb	0	; () banked
  5624  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5625  00038E  ECBB  F002         	call	_printf	;wreg free
  5626                           
  5627                           ;UI.c: 130: lcdInst(0b11000000);;
  5628  000392  0EC0               	movlw	192
  5629  000394  EC88  F016         	call	_lcdInst
  5630                           
  5631                           ;UI.c: 131: printf("No tab: 9|Tab: 1");
  5632  000398  0EDC               	movlw	low STR_10
  5633  00039A  0100               	movlb	0	; () banked
  5634  00039C  6F8E               	movwf	printf@f& (0+255),b
  5635  00039E  0EFE               	movlw	high STR_10
  5636  0003A0  0100               	movlb	0	; () banked
  5637  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5638  0003A4  ECBB  F002         	call	_printf	;wreg free
  5639                           
  5640                           ;UI.c: 133: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5641  0003A8  0E00               	movlw	0
  5642  0003AA  0100               	movlb	0	; () banked
  5643  0003AC  6FCE               	movwf	UI@i_495& (0+255),b
  5644  0003AE                     l5220:
  5645                           
  5646                           ; BSR set to: 0
  5647  0003AE  0E63               	movlw	99
  5648  0003B0  0100               	movlb	0	; () banked
  5649  0003B2  65CE               	cpfsgt	UI@i_495& (0+255),b
  5650  0003B4  D001               	goto	l5224
  5651  0003B6  D00C               	goto	l5228
  5652  0003B8                     l5224:
  5653                           
  5654                           ; BSR set to: 0
  5655  0003B8  0E68               	movlw	104
  5656  0003BA  0100               	movlb	0	; () banked
  5657  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5658  0003BE  0EE4               	movlw	228
  5659  0003C0                     u5117:
  5660  0003C0  2EE8               	decfsz	wreg,f,c
  5661  0003C2  D7FE               	bra	u5117
  5662  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5663  0003C6  D7FC               	bra	u5117
  5664  0003C8  F000               	nop	
  5665  0003CA  0100               	movlb	0	; () banked
  5666  0003CC  2BCE               	incf	UI@i_495& (0+255),f,b
  5667  0003CE  D7EF               	goto	l5220
  5668  0003D0                     l5228:
  5669                           
  5670                           ; BSR set to: 0
  5671  0003D0  0100               	movlb	0	; () banked
  5672  0003D2  51F7               	movf	_logstate& (0+255),w,b
  5673  0003D4  0100               	movlb	0	; () banked
  5674  0003D6  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5675  0003D8  B4D8               	btfsc	status,2,c
  5676  0003DA  0012               	return	
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;UI.c: 134: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5680                           
  5681                           ; BSR set to: 0
  5682                           
  5683                           ; BSR set to: 0
  5684  0003DC  0E00               	movlw	0
  5685  0003DE  0100               	movlb	0	; () banked
  5686  0003E0  6FCF               	movwf	UI@i_496& (0+255),b
  5687  0003E2                     l5234:
  5688                           
  5689                           ; BSR set to: 0
  5690  0003E2  0E63               	movlw	99
  5691  0003E4  0100               	movlb	0	; () banked
  5692  0003E6  65CF               	cpfsgt	UI@i_496& (0+255),b
  5693  0003E8  D001               	goto	l5238
  5694  0003EA  D00C               	goto	l5242
  5695  0003EC                     l5238:
  5696                           
  5697                           ; BSR set to: 0
  5698  0003EC  0E68               	movlw	104
  5699  0003EE  0100               	movlb	0	; () banked
  5700  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5701  0003F2  0EE4               	movlw	228
  5702  0003F4                     u5127:
  5703  0003F4  2EE8               	decfsz	wreg,f,c
  5704  0003F6  D7FE               	bra	u5127
  5705  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5706  0003FA  D7FC               	bra	u5127
  5707  0003FC  F000               	nop	
  5708  0003FE  0100               	movlb	0	; () banked
  5709  000400  2BCF               	incf	UI@i_496& (0+255),f,b
  5710  000402  D7EF               	goto	l5234
  5711  000404                     l5242:
  5712                           
  5713                           ; BSR set to: 0
  5714  000404  0100               	movlb	0	; () banked
  5715  000406  51F7               	movf	_logstate& (0+255),w,b
  5716  000408  0100               	movlb	0	; () banked
  5717  00040A  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5718  00040C  B4D8               	btfsc	status,2,c
  5719  00040E  0012               	return	
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;UI.c: 136: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5723                           
  5724                           ; BSR set to: 0
  5725                           
  5726                           ; BSR set to: 0
  5727  000410  0E01               	movlw	1
  5728  000412  EC88  F016         	call	_lcdInst
  5729  000416  0E68               	movlw	104
  5730  000418  0100               	movlb	0	; () banked
  5731  00041A  6FC4               	movwf	??_UI& (0+255),b
  5732  00041C  0EE4               	movlw	228
  5733  00041E                     u5137:
  5734  00041E  2EE8               	decfsz	wreg,f,c
  5735  000420  D7FE               	bra	u5137
  5736  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5737  000424  D7FC               	bra	u5137
  5738  000426  F000               	nop	
  5739                           
  5740                           ;UI.c: 137: lcdInst(0b10000000);;
  5741  000428  0E80               	movlw	128
  5742  00042A  EC88  F016         	call	_lcdInst
  5743                           
  5744                           ;UI.c: 138: printf(" -- Soup can -- ");
  5745  00042E  0EA9               	movlw	low STR_11
  5746  000430  0100               	movlb	0	; () banked
  5747  000432  6F8E               	movwf	printf@f& (0+255),b
  5748  000434  0EFE               	movlw	high STR_11
  5749  000436  0100               	movlb	0	; () banked
  5750  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5751  00043A  ECBB  F002         	call	_printf	;wreg free
  5752                           
  5753                           ;UI.c: 139: lcdInst(0b11000000);;
  5754  00043E  0EC0               	movlw	192
  5755  000440  EC88  F016         	call	_lcdInst
  5756                           
  5757                           ;UI.c: 140: printf("No lbl: 1|lbl: 1");
  5758  000444  0EED               	movlw	low STR_12
  5759  000446  0100               	movlb	0	; () banked
  5760  000448  6F8E               	movwf	printf@f& (0+255),b
  5761  00044A  0EFE               	movlw	high STR_12
  5762  00044C  0100               	movlb	0	; () banked
  5763  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5764  000450  ECBB  F002         	call	_printf	;wreg free
  5765                           
  5766                           ;UI.c: 142: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5767  000454  0E00               	movlw	0
  5768  000456  0100               	movlb	0	; () banked
  5769  000458  6FD0               	movwf	UI@i_499& (0+255),b
  5770  00045A                     l5260:
  5771                           
  5772                           ; BSR set to: 0
  5773  00045A  0E63               	movlw	99
  5774  00045C  0100               	movlb	0	; () banked
  5775  00045E  65D0               	cpfsgt	UI@i_499& (0+255),b
  5776  000460  D001               	goto	l5264
  5777  000462  D00C               	goto	l5268
  5778  000464                     l5264:
  5779                           
  5780                           ; BSR set to: 0
  5781  000464  0E68               	movlw	104
  5782  000466  0100               	movlb	0	; () banked
  5783  000468  6FC4               	movwf	??_UI& (0+255),b
  5784  00046A  0EE4               	movlw	228
  5785  00046C                     u5147:
  5786  00046C  2EE8               	decfsz	wreg,f,c
  5787  00046E  D7FE               	bra	u5147
  5788  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5789  000472  D7FC               	bra	u5147
  5790  000474  F000               	nop	
  5791  000476  0100               	movlb	0	; () banked
  5792  000478  2BD0               	incf	UI@i_499& (0+255),f,b
  5793  00047A  D7EF               	goto	l5260
  5794  00047C                     l5268:
  5795                           
  5796                           ; BSR set to: 0
  5797  00047C  0100               	movlb	0	; () banked
  5798  00047E  51F7               	movf	_logstate& (0+255),w,b
  5799  000480  0100               	movlb	0	; () banked
  5800  000482  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5801  000484  B4D8               	btfsc	status,2,c
  5802  000486  0012               	return	
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;UI.c: 143: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5806                           
  5807                           ; BSR set to: 0
  5808                           
  5809                           ; BSR set to: 0
  5810  000488  0E00               	movlw	0
  5811  00048A  0100               	movlb	0	; () banked
  5812  00048C  6FD1               	movwf	UI@i_500& (0+255),b
  5813  00048E                     l5274:
  5814                           
  5815                           ; BSR set to: 0
  5816  00048E  0E63               	movlw	99
  5817  000490  0100               	movlb	0	; () banked
  5818  000492  65D1               	cpfsgt	UI@i_500& (0+255),b
  5819  000494  D001               	goto	l5278
  5820  000496  D00C               	goto	l5282
  5821  000498                     l5278:
  5822                           
  5823                           ; BSR set to: 0
  5824  000498  0E68               	movlw	104
  5825  00049A  0100               	movlb	0	; () banked
  5826  00049C  6FC4               	movwf	??_UI& (0+255),b
  5827  00049E  0EE4               	movlw	228
  5828  0004A0                     u5157:
  5829  0004A0  2EE8               	decfsz	wreg,f,c
  5830  0004A2  D7FE               	bra	u5157
  5831  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5832  0004A6  D7FC               	bra	u5157
  5833  0004A8  F000               	nop	
  5834  0004AA  0100               	movlb	0	; () banked
  5835  0004AC  2BD1               	incf	UI@i_500& (0+255),f,b
  5836  0004AE  D7EF               	goto	l5274
  5837  0004B0                     l5282:
  5838                           
  5839                           ; BSR set to: 0
  5840  0004B0  0100               	movlb	0	; () banked
  5841  0004B2  51F7               	movf	_logstate& (0+255),w,b
  5842  0004B4  0100               	movlb	0	; () banked
  5843  0004B6  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5844  0004B8  B4D8               	btfsc	status,2,c
  5845  0004BA  0012               	return	
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;UI.c: 145: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5849                           
  5850                           ; BSR set to: 0
  5851                           
  5852                           ; BSR set to: 0
  5853  0004BC  0E01               	movlw	1
  5854  0004BE  EC88  F016         	call	_lcdInst
  5855  0004C2  0E68               	movlw	104
  5856  0004C4  0100               	movlb	0	; () banked
  5857  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5858  0004C8  0EE4               	movlw	228
  5859  0004CA                     u5167:
  5860  0004CA  2EE8               	decfsz	wreg,f,c
  5861  0004CC  D7FE               	bra	u5167
  5862  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5863  0004D0  D7FC               	bra	u5167
  5864  0004D2  F000               	nop	
  5865                           
  5866                           ;UI.c: 146: lcdInst(0b10000000);;
  5867  0004D4  0E80               	movlw	128
  5868  0004D6  EC88  F016         	call	_lcdInst
  5869                           
  5870                           ;UI.c: 147: printf("-- Total cans --");
  5871  0004DA  0ECB               	movlw	low STR_13
  5872  0004DC  0100               	movlb	0	; () banked
  5873  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5874  0004E0  0EFE               	movlw	high STR_13
  5875  0004E2  0100               	movlb	0	; () banked
  5876  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5877  0004E6  ECBB  F002         	call	_printf	;wreg free
  5878                           
  5879                           ;UI.c: 148: lcdInst(0b11000000);;
  5880  0004EA  0EC0               	movlw	192
  5881  0004EC  EC88  F016         	call	_lcdInst
  5882                           
  5883                           ;UI.c: 149: printf("12");
  5884  0004F0  0EFB               	movlw	low STR_14
  5885  0004F2  0100               	movlb	0	; () banked
  5886  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5887  0004F6  0EFF               	movlw	high STR_14
  5888  0004F8  0100               	movlb	0	; () banked
  5889  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5890  0004FC  ECBB  F002         	call	_printf	;wreg free
  5891                           
  5892                           ;UI.c: 151: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5893  000500  0E00               	movlw	0
  5894  000502  0100               	movlb	0	; () banked
  5895  000504  6FD2               	movwf	UI@i_503& (0+255),b
  5896  000506                     l5300:
  5897                           
  5898                           ; BSR set to: 0
  5899  000506  0E63               	movlw	99
  5900  000508  0100               	movlb	0	; () banked
  5901  00050A  65D2               	cpfsgt	UI@i_503& (0+255),b
  5902  00050C  D001               	goto	l5304
  5903  00050E  D00C               	goto	l5308
  5904  000510                     l5304:
  5905                           
  5906                           ; BSR set to: 0
  5907  000510  0E68               	movlw	104
  5908  000512  0100               	movlb	0	; () banked
  5909  000514  6FC4               	movwf	??_UI& (0+255),b
  5910  000516  0EE4               	movlw	228
  5911  000518                     u5177:
  5912  000518  2EE8               	decfsz	wreg,f,c
  5913  00051A  D7FE               	bra	u5177
  5914  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5915  00051E  D7FC               	bra	u5177
  5916  000520  F000               	nop	
  5917  000522  0100               	movlb	0	; () banked
  5918  000524  2BD2               	incf	UI@i_503& (0+255),f,b
  5919  000526  D7EF               	goto	l5300
  5920  000528                     l5308:
  5921                           
  5922                           ; BSR set to: 0
  5923  000528  0100               	movlb	0	; () banked
  5924  00052A  51F7               	movf	_logstate& (0+255),w,b
  5925  00052C  0100               	movlb	0	; () banked
  5926  00052E  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5927  000530  B4D8               	btfsc	status,2,c
  5928  000532  0012               	return	
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;UI.c: 152: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5932                           
  5933                           ; BSR set to: 0
  5934                           
  5935                           ; BSR set to: 0
  5936  000534  0E00               	movlw	0
  5937  000536  0100               	movlb	0	; () banked
  5938  000538  6FD3               	movwf	UI@i_504& (0+255),b
  5939  00053A                     l5314:
  5940                           
  5941                           ; BSR set to: 0
  5942  00053A  0E63               	movlw	99
  5943  00053C  0100               	movlb	0	; () banked
  5944  00053E  65D3               	cpfsgt	UI@i_504& (0+255),b
  5945  000540  D001               	goto	l5318
  5946  000542  D00C               	goto	l5322
  5947  000544                     l5318:
  5948                           
  5949                           ; BSR set to: 0
  5950  000544  0E68               	movlw	104
  5951  000546  0100               	movlb	0	; () banked
  5952  000548  6FC4               	movwf	??_UI& (0+255),b
  5953  00054A  0EE4               	movlw	228
  5954  00054C                     u5187:
  5955  00054C  2EE8               	decfsz	wreg,f,c
  5956  00054E  D7FE               	bra	u5187
  5957  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5958  000552  D7FC               	bra	u5187
  5959  000554  F000               	nop	
  5960  000556  0100               	movlb	0	; () banked
  5961  000558  2BD3               	incf	UI@i_504& (0+255),f,b
  5962  00055A  D7EF               	goto	l5314
  5963  00055C                     l5322:
  5964                           
  5965                           ; BSR set to: 0
  5966  00055C  0100               	movlb	0	; () banked
  5967  00055E  51F7               	movf	_logstate& (0+255),w,b
  5968  000560  0100               	movlb	0	; () banked
  5969  000562  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5970  000564  B4D8               	btfsc	status,2,c
  5971  000566  0012               	return	
  5972  000568                     l5326:
  5973  000568  0100               	movlb	0	; () banked
  5974  00056A  51F7               	movf	_logstate& (0+255),w,b
  5975  00056C  0100               	movlb	0	; () banked
  5976  00056E  11F8               	iorwf	(_logstate+1)& (0+255),w,b
  5977  000570  B4D8               	btfsc	status,2,c
  5978  000572  0012               	return	
  5979  000574  D5E7               	goto	l5086
  5980  000576                     __end_of_UI:
  5981                           	opt stack 0
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon2	equ	0xFF1
  5990                           intcon3	equ	0xFF0
  5991                           postinc0	equ	0xFEE
  5992                           wreg	equ	0xFE8
  5993                           postdec1	equ	0xFE5
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _printRTC *****************
  6003 ;; Defined at:
  6004 ;;		line 63 in file "RTC.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  i               2   66[BANK0 ] int 
  6009 ;;  INT_time       14   46[BANK0 ] int [7]
  6010 ;;  month           4   62[BANK0 ] unsigned char [4]
  6011 ;;  RTC_month       2   60[BANK0 ] int 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;Total ram usage:       25 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:   10
  6028 ;; This function calls:
  6029 ;;		_getRTC
  6030 ;;		_lcdInst
  6031 ;;		_printf
  6032 ;;		_strcpy
  6033 ;; This function is called by:
  6034 ;;		_UI
  6035 ;;		_change_state_to_menu_start
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text24
  6040  000CC6                     __ptext24:
  6041                           	opt stack 0
  6042  000CC6                     _printRTC:
  6043                           	opt stack 18
  6044                           
  6045                           ;RTC.c: 64: getRTC();
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;incstack = 0
  6049  000CC6  EC00  F011         	call	_getRTC	;wreg free
  6050                           
  6051                           ;RTC.c: 65: char month[] = "MMM";
  6052  000CCA  C122  F0BE         	movff	printRTC@F3211,printRTC@month
  6053  000CCE  C123  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  6054  000CD2  C124  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  6055  000CD6  C125  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  6056                           
  6057                           ;RTC.c: 66: int INT_time[7];
  6058                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  6059  000CDA  0E00               	movlw	0
  6060  000CDC  0100               	movlb	0	; () banked
  6061  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  6062  000CE0  0E00               	movlw	0
  6063  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066  000CE4  0100               	movlb	0	; () banked
  6067  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6068  000CE8  D008               	goto	l4372
  6069  000CEA  0100               	movlb	0	; () banked
  6070  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6071  000CEE  E146               	bnz	l567
  6072  000CF0  0E07               	movlw	7
  6073  000CF2  0100               	movlb	0	; () banked
  6074  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  6075  000CF6  B0D8               	btfsc	status,0,c
  6076  000CF8  D041               	goto	l567
  6077  000CFA                     l4372:
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6081  000CFA  0ED4               	movlw	low _time
  6082  000CFC  0100               	movlb	0	; () banked
  6083  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  6084  000D00  6ED9               	movwf	fsr2l,c
  6085  000D02  0E00               	movlw	high _time
  6086  000D04  0100               	movlb	0	; () banked
  6087  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6088  000D08  6EDA               	movwf	fsr2h,c
  6089  000D0A  50DF               	movf	indf2,w,c
  6090  000D0C  0100               	movlb	0	; () banked
  6091  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  6092  000D10  0100               	movlb	0	; () banked
  6093  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  6094  000D14  0E0F               	movlw	15
  6095  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  6096  000D18  0E0F               	movlw	15
  6097  000D1A  0100               	movlb	0	; () banked
  6098  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  6099  000D1E  0100               	movlb	0	; () banked
  6100  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  6101  000D22  0D0A               	mullw	10
  6102  000D24  0ED4               	movlw	low _time
  6103  000D26  0100               	movlb	0	; () banked
  6104  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  6105  000D2A  6ED9               	movwf	fsr2l,c
  6106  000D2C  0E00               	movlw	high _time
  6107  000D2E  0100               	movlb	0	; () banked
  6108  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6109  000D32  6EDA               	movwf	fsr2h,c
  6110  000D34  50DF               	movf	indf2,w,c
  6111  000D36  0B0F               	andlw	15
  6112  000D38  0100               	movlb	0	; () banked
  6113  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  6114  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  6115  000D3E  50F3               	movf	prodl,w,c
  6116  000D40  0100               	movlb	0	; () banked
  6117  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  6118  000D44  50F4               	movf	prodh,w,c
  6119  000D46  0100               	movlb	0	; () banked
  6120  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  6121  000D4A  90D8               	bcf	status,0,c
  6122  000D4C  0100               	movlb	0	; () banked
  6123  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  6124  000D50  6ED9               	movwf	fsr2l,c
  6125  000D52  0100               	movlb	0	; () banked
  6126  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  6127  000D56  6EDA               	movwf	fsr2h,c
  6128  000D58  0EAE               	movlw	low printRTC@INT_time
  6129  000D5A  26D9               	addwf	fsr2l,f,c
  6130  000D5C  0E00               	movlw	high printRTC@INT_time
  6131  000D5E  22DA               	addwfc	fsr2h,f,c
  6132  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  6133  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  6134                           
  6135                           ; BSR set to: 0
  6136  000D68  0100               	movlb	0	; () banked
  6137  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  6138  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  6139                           
  6140                           ; BSR set to: 0
  6141  000D6E  0100               	movlb	0	; () banked
  6142  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6143  000D72  D7C3               	goto	l4372
  6144  000D74  0100               	movlb	0	; () banked
  6145  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6146  000D78  E101               	bnz	u3350
  6147  000D7A  D7BA               	goto	L5
  6148  000D7C                     u3350:
  6149  000D7C                     l567:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;RTC.c: 69: }
  6153                           ;RTC.c: 70: int RTC_month = INT_time[5];
  6154  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  6155  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  6156                           
  6157                           ;RTC.c: 71: switch(RTC_month){
  6158  000D84  D0B4               	goto	l4404
  6159  000D86                     l4378:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;RTC.c: 73: strcpy(month, "Jan");
  6163  000D86  0EBE               	movlw	low printRTC@month
  6164  000D88  0100               	movlb	0	; () banked
  6165  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  6166  000D8C  0E00               	movlw	high printRTC@month
  6167  000D8E  0100               	movlb	0	; () banked
  6168  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6169  000D92  0EDB               	movlw	low STR_36
  6170  000D94  0100               	movlb	0	; () banked
  6171  000D96  6F82               	movwf	strcpy@from& (0+255),b
  6172  000D98  0EFF               	movlw	high STR_36
  6173  000D9A  0100               	movlb	0	; () banked
  6174  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6175  000D9E  EC09  F014         	call	_strcpy	;wreg free
  6176                           
  6177                           ;RTC.c: 74: break;
  6178  000DA2  D0D4               	goto	l4406
  6179  000DA4                     l4380:
  6180                           
  6181                           ;RTC.c: 76: strcpy(month, "Feb");
  6182  000DA4  0EBE               	movlw	low printRTC@month
  6183  000DA6  0100               	movlb	0	; () banked
  6184  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  6185  000DAA  0E00               	movlw	high printRTC@month
  6186  000DAC  0100               	movlb	0	; () banked
  6187  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6188  000DB0  0ECB               	movlw	low STR_37
  6189  000DB2  0100               	movlb	0	; () banked
  6190  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  6191  000DB6  0EFF               	movlw	high STR_37
  6192  000DB8  0100               	movlb	0	; () banked
  6193  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6194  000DBC  EC09  F014         	call	_strcpy	;wreg free
  6195                           
  6196                           ;RTC.c: 77: break;
  6197  000DC0  D0C5               	goto	l4406
  6198  000DC2                     l4382:
  6199                           
  6200                           ;RTC.c: 79: strcpy(month, "Mar");
  6201  000DC2  0EBE               	movlw	low printRTC@month
  6202  000DC4  0100               	movlb	0	; () banked
  6203  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  6204  000DC8  0E00               	movlw	high printRTC@month
  6205  000DCA  0100               	movlb	0	; () banked
  6206  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6207  000DCE  0EE7               	movlw	low STR_38
  6208  000DD0  0100               	movlb	0	; () banked
  6209  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  6210  000DD4  0EFF               	movlw	high STR_38
  6211  000DD6  0100               	movlb	0	; () banked
  6212  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6213  000DDA  EC09  F014         	call	_strcpy	;wreg free
  6214                           
  6215                           ;RTC.c: 80: break;
  6216  000DDE  D0B6               	goto	l4406
  6217  000DE0                     l4384:
  6218                           
  6219                           ;RTC.c: 82: strcpy(month, "Apr");
  6220  000DE0  0EBE               	movlw	low printRTC@month
  6221  000DE2  0100               	movlb	0	; () banked
  6222  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  6223  000DE6  0E00               	movlw	high printRTC@month
  6224  000DE8  0100               	movlb	0	; () banked
  6225  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6226  000DEC  0EEB               	movlw	low STR_39
  6227  000DEE  0100               	movlb	0	; () banked
  6228  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  6229  000DF2  0EFF               	movlw	high STR_39
  6230  000DF4  0100               	movlb	0	; () banked
  6231  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6232  000DF8  EC09  F014         	call	_strcpy	;wreg free
  6233                           
  6234                           ;RTC.c: 83: break;
  6235  000DFC  D0A7               	goto	l4406
  6236  000DFE                     l4386:
  6237                           
  6238                           ;RTC.c: 85: strcpy(month, "May");
  6239  000DFE  0EBE               	movlw	low printRTC@month
  6240  000E00  0100               	movlb	0	; () banked
  6241  000E02  6F80               	movwf	strcpy@to& (0+255),b
  6242  000E04  0E00               	movlw	high printRTC@month
  6243  000E06  0100               	movlb	0	; () banked
  6244  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6245  000E0A  0EF7               	movlw	low STR_40
  6246  000E0C  0100               	movlb	0	; () banked
  6247  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  6248  000E10  0EFF               	movlw	high STR_40
  6249  000E12  0100               	movlb	0	; () banked
  6250  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6251  000E16  EC09  F014         	call	_strcpy	;wreg free
  6252                           
  6253                           ;RTC.c: 86: break;
  6254  000E1A  D098               	goto	l4406
  6255  000E1C                     l4388:
  6256                           
  6257                           ;RTC.c: 88: strcpy(month, "Jun");
  6258  000E1C  0EBE               	movlw	low printRTC@month
  6259  000E1E  0100               	movlb	0	; () banked
  6260  000E20  6F80               	movwf	strcpy@to& (0+255),b
  6261  000E22  0E00               	movlw	high printRTC@month
  6262  000E24  0100               	movlb	0	; () banked
  6263  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6264  000E28  0EDF               	movlw	low STR_41
  6265  000E2A  0100               	movlb	0	; () banked
  6266  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  6267  000E2E  0EFF               	movlw	high STR_41
  6268  000E30  0100               	movlb	0	; () banked
  6269  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6270  000E34  EC09  F014         	call	_strcpy	;wreg free
  6271                           
  6272                           ;RTC.c: 89: break;
  6273  000E38  D089               	goto	l4406
  6274  000E3A                     l4390:
  6275                           
  6276                           ;RTC.c: 91: strcpy(month, "Jul");
  6277  000E3A  0EBE               	movlw	low printRTC@month
  6278  000E3C  0100               	movlb	0	; () banked
  6279  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  6280  000E40  0E00               	movlw	high printRTC@month
  6281  000E42  0100               	movlb	0	; () banked
  6282  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6283  000E46  0ED7               	movlw	low STR_42
  6284  000E48  0100               	movlb	0	; () banked
  6285  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  6286  000E4C  0EFF               	movlw	high STR_42
  6287  000E4E  0100               	movlb	0	; () banked
  6288  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6289  000E52  EC09  F014         	call	_strcpy	;wreg free
  6290                           
  6291                           ;RTC.c: 92: break;
  6292  000E56  D07A               	goto	l4406
  6293  000E58                     l4392:
  6294                           
  6295                           ;RTC.c: 94: strcpy(month, "Aug");
  6296  000E58  0EBE               	movlw	low printRTC@month
  6297  000E5A  0100               	movlb	0	; () banked
  6298  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  6299  000E5E  0E00               	movlw	high printRTC@month
  6300  000E60  0100               	movlb	0	; () banked
  6301  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6302  000E64  0ED3               	movlw	low STR_43
  6303  000E66  0100               	movlb	0	; () banked
  6304  000E68  6F82               	movwf	strcpy@from& (0+255),b
  6305  000E6A  0EFF               	movlw	high STR_43
  6306  000E6C  0100               	movlb	0	; () banked
  6307  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6308  000E70  EC09  F014         	call	_strcpy	;wreg free
  6309                           
  6310                           ;RTC.c: 95: break;
  6311  000E74  D06B               	goto	l4406
  6312  000E76                     l4394:
  6313                           
  6314                           ;RTC.c: 97: strcpy(month, "Sep");
  6315  000E76  0EBE               	movlw	low printRTC@month
  6316  000E78  0100               	movlb	0	; () banked
  6317  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  6318  000E7C  0E00               	movlw	high printRTC@month
  6319  000E7E  0100               	movlb	0	; () banked
  6320  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6321  000E82  0EE3               	movlw	low STR_44
  6322  000E84  0100               	movlb	0	; () banked
  6323  000E86  6F82               	movwf	strcpy@from& (0+255),b
  6324  000E88  0EFF               	movlw	high STR_44
  6325  000E8A  0100               	movlb	0	; () banked
  6326  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6327  000E8E  EC09  F014         	call	_strcpy	;wreg free
  6328                           
  6329                           ;RTC.c: 98: break;
  6330  000E92  D05C               	goto	l4406
  6331  000E94                     l4396:
  6332                           
  6333                           ;RTC.c: 100: strcpy(month, "Oct");
  6334  000E94  0EBE               	movlw	low printRTC@month
  6335  000E96  0100               	movlb	0	; () banked
  6336  000E98  6F80               	movwf	strcpy@to& (0+255),b
  6337  000E9A  0E00               	movlw	high printRTC@month
  6338  000E9C  0100               	movlb	0	; () banked
  6339  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6340  000EA0  0EEF               	movlw	low STR_45
  6341  000EA2  0100               	movlb	0	; () banked
  6342  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  6343  000EA6  0EFF               	movlw	high STR_45
  6344  000EA8  0100               	movlb	0	; () banked
  6345  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6346  000EAC  EC09  F014         	call	_strcpy	;wreg free
  6347                           
  6348                           ;RTC.c: 101: break;
  6349  000EB0  D04D               	goto	l4406
  6350  000EB2                     l4398:
  6351                           
  6352                           ;RTC.c: 103: strcpy(month, "Nov");
  6353  000EB2  0EBE               	movlw	low printRTC@month
  6354  000EB4  0100               	movlb	0	; () banked
  6355  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  6356  000EB8  0E00               	movlw	high printRTC@month
  6357  000EBA  0100               	movlb	0	; () banked
  6358  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6359  000EBE  0EF3               	movlw	low STR_46
  6360  000EC0  0100               	movlb	0	; () banked
  6361  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  6362  000EC4  0EFF               	movlw	high STR_46
  6363  000EC6  0100               	movlb	0	; () banked
  6364  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6365  000ECA  EC09  F014         	call	_strcpy	;wreg free
  6366                           
  6367                           ;RTC.c: 104: break;
  6368  000ECE  D03E               	goto	l4406
  6369  000ED0                     l4400:
  6370                           
  6371                           ;RTC.c: 106: strcpy(month, "Dec");
  6372  000ED0  0EBE               	movlw	low printRTC@month
  6373  000ED2  0100               	movlb	0	; () banked
  6374  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  6375  000ED6  0E00               	movlw	high printRTC@month
  6376  000ED8  0100               	movlb	0	; () banked
  6377  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6378  000EDC  0ECF               	movlw	low STR_47
  6379  000EDE  0100               	movlb	0	; () banked
  6380  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  6381  000EE2  0EFF               	movlw	high STR_47
  6382  000EE4  0100               	movlb	0	; () banked
  6383  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6384  000EE8  EC09  F014         	call	_strcpy	;wreg free
  6385                           
  6386                           ;RTC.c: 108: }
  6387                           
  6388                           ;RTC.c: 107: break;
  6389  000EEC  D02F               	goto	l4406
  6390  000EEE                     l4404:
  6391  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  6392  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  6393                           
  6394                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6395                           ; Switch size 1, requested type "space"
  6396                           ; Number of cases is 1, Range of values is 0 to 0
  6397                           ; switch strategies available:
  6398                           ; Name         Instructions Cycles
  6399                           ; simple_byte            4     3 (average)
  6400                           ;	Chosen strategy is simple_byte
  6401  000EF6  0100               	movlb	0	; () banked
  6402  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  6403  000EFA  0A00               	xorlw	0	; case 0
  6404  000EFC  A4D8               	btfss	status,2,c
  6405  000EFE  D026               	goto	l4406
  6406                           
  6407                           ; BSR set to: 0
  6408                           ; Switch size 1, requested type "space"
  6409                           ; Number of cases is 12, Range of values is 1 to 12
  6410                           ; switch strategies available:
  6411                           ; Name         Instructions Cycles
  6412                           ; simple_byte           37    19 (average)
  6413                           ;	Chosen strategy is simple_byte
  6414  000F00  0100               	movlb	0	; () banked
  6415  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  6416  000F04  0A01               	xorlw	1	; case 1
  6417  000F06  B4D8               	btfsc	status,2,c
  6418  000F08  D73E               	goto	l4378
  6419  000F0A  0A03               	xorlw	3	; case 2
  6420  000F0C  B4D8               	btfsc	status,2,c
  6421  000F0E  D74A               	goto	l4380
  6422  000F10  0A01               	xorlw	1	; case 3
  6423  000F12  B4D8               	btfsc	status,2,c
  6424  000F14  D756               	goto	l4382
  6425  000F16  0A07               	xorlw	7	; case 4
  6426  000F18  B4D8               	btfsc	status,2,c
  6427  000F1A  D762               	goto	l4384
  6428  000F1C  0A01               	xorlw	1	; case 5
  6429  000F1E  B4D8               	btfsc	status,2,c
  6430  000F20  D76E               	goto	l4386
  6431  000F22  0A03               	xorlw	3	; case 6
  6432  000F24  B4D8               	btfsc	status,2,c
  6433  000F26  D77A               	goto	l4388
  6434  000F28  0A01               	xorlw	1	; case 7
  6435  000F2A  B4D8               	btfsc	status,2,c
  6436  000F2C  D786               	goto	l4390
  6437  000F2E  0A0F               	xorlw	15	; case 8
  6438  000F30  B4D8               	btfsc	status,2,c
  6439  000F32  D792               	goto	l4392
  6440  000F34  0A01               	xorlw	1	; case 9
  6441  000F36  B4D8               	btfsc	status,2,c
  6442  000F38  D79E               	goto	l4394
  6443  000F3A  0A03               	xorlw	3	; case 10
  6444  000F3C  B4D8               	btfsc	status,2,c
  6445  000F3E  D7AA               	goto	l4396
  6446  000F40  0A01               	xorlw	1	; case 11
  6447  000F42  B4D8               	btfsc	status,2,c
  6448  000F44  D7B6               	goto	l4398
  6449  000F46  0A07               	xorlw	7	; case 12
  6450  000F48  B4D8               	btfsc	status,2,c
  6451  000F4A  D7C2               	goto	l4400
  6452  000F4C                     l4406:
  6453                           
  6454                           ;RTC.c: 109: lcdInst(0b10000000);;
  6455  000F4C  0E80               	movlw	128
  6456  000F4E  EC88  F016         	call	_lcdInst
  6457                           
  6458                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  6459  000F52  0ED0               	movlw	low STR_48
  6460  000F54  0100               	movlb	0	; () banked
  6461  000F56  6F8E               	movwf	printf@f& (0+255),b
  6462  000F58  0EFD               	movlw	high STR_48
  6463  000F5A  0100               	movlb	0	; () banked
  6464  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6465  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  6466  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  6467  000F66  0EBE               	movlw	low printRTC@month
  6468  000F68  0100               	movlb	0	; () banked
  6469  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  6470  000F6C  0E00               	movlw	high printRTC@month
  6471  000F6E  0100               	movlb	0	; () banked
  6472  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  6473  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  6474  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  6475  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  6476  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  6477  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  6478  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  6479  000F8A  ECBB  F002         	call	_printf	;wreg free
  6480  000F8E  0012               	return		;funcret
  6481  000F90                     __end_of_printRTC:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           intcon2	equ	0xFF1
  6491                           intcon3	equ	0xFF0
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           postdec1	equ	0xFE5
  6495                           fsr1l	equ	0xFE1
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _strcpy *****************
  6504 ;; Defined at:
  6505 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  to              2    0[BANK0 ] PTR unsigned char 
  6508 ;;		 -> printRTC@month(4), 
  6509 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  6510 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  6511 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  6512 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  6515 ;;		 -> printRTC@month(4), 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  2    0[BANK0 ] PTR unsigned char 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6525 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;Total ram usage:        6 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    7
  6532 ;; This function calls:
  6533 ;;		Nothing
  6534 ;; This function is called by:
  6535 ;;		_printRTC
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text25
  6540  002812                     __ptext25:
  6541                           	opt stack 0
  6542  002812                     _strcpy:
  6543                           	opt stack 20
  6544                           
  6545                           ;incstack = 0
  6546  002812  C080  F084         	movff	strcpy@to,strcpy@cp
  6547  002816  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  6548  00281A  D006               	goto	l4160
  6549  00281C                     l4158:
  6550  00281C  0100               	movlb	0	; () banked
  6551  00281E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  6552  002820  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  6553  002822  0100               	movlb	0	; () banked
  6554  002824  4B82               	infsnz	strcpy@from& (0+255),f,b
  6555  002826  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6556  002828                     l4160:
  6557  002828  C082  FFF6         	movff	strcpy@from,tblptrl
  6558  00282C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6559  002830                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6560  002830  6AF8               	clrf	tblptru,c
  6561  002832                     	endif
  6562  002832                     	if	0	;tblptru may be non-zero
  6563  002832                     	endif
  6564  002832  C084  FFD9         	movff	strcpy@cp,fsr2l
  6565  002836  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6566  00283A  0008               	tblrd		*
  6567  00283C  CFF5 FFDF          	movff	tablat,indf2
  6568  002840  50DF               	movf	indf2,w,c
  6569  002842  B4D8               	btfsc	status,2,c
  6570  002844  0012               	return	
  6571  002846  D7EA               	goto	l4158
  6572  002848                     __end_of_strcpy:
  6573                           	opt stack 0
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           intcon2	equ	0xFF1
  6582                           intcon3	equ	0xFF0
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           postdec1	equ	0xFE5
  6586                           fsr1l	equ	0xFE1
  6587                           indf2	equ	0xFDF
  6588                           postinc2	equ	0xFDE
  6589                           postdec2	equ	0xFDD
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function _getRTC *****************
  6595 ;; Defined at:
  6596 ;;		line 44 in file "RTC.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  i               2    3[BANK0 ] int 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;Total ram usage:        2 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    9
  6617 ;; This function calls:
  6618 ;;		_I2C_Master_Read
  6619 ;;		_I2C_Master_Start
  6620 ;;		_I2C_Master_Stop
  6621 ;;		_I2C_Master_Write
  6622 ;; This function is called by:
  6623 ;;		_printRTC
  6624 ;;		_initSortTimer
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text26
  6629  002200                     __ptext26:
  6630                           	opt stack 0
  6631  002200                     _getRTC:
  6632                           	opt stack 18
  6633                           
  6634                           ;RTC.c: 48: I2C_Master_Start();
  6635                           
  6636                           ;incstack = 0
  6637  002200  ECAA  F016         	call	_I2C_Master_Start	;wreg free
  6638                           
  6639                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  6640  002204  0E00               	movlw	0
  6641  002206  0100               	movlb	0	; () banked
  6642  002208  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6643  00220A  0ED0               	movlw	208
  6644  00220C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6645  00220E  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  6646                           
  6647                           ;RTC.c: 50: I2C_Master_Write(0x00);
  6648  002212  0E00               	movlw	0
  6649  002214  0100               	movlb	0	; () banked
  6650  002216  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6651  002218  0E00               	movlw	0
  6652  00221A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6653  00221C  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  6654                           
  6655                           ;RTC.c: 51: I2C_Master_Stop();
  6656  002220  ECA6  F016         	call	_I2C_Master_Stop	;wreg free
  6657                           
  6658                           ;RTC.c: 54: I2C_Master_Start();
  6659  002224  ECAA  F016         	call	_I2C_Master_Start	;wreg free
  6660                           
  6661                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  6662  002228  0E00               	movlw	0
  6663  00222A  0100               	movlb	0	; () banked
  6664  00222C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6665  00222E  0ED1               	movlw	209
  6666  002230  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6667  002232  EC9C  F016         	call	_I2C_Master_Write	;wreg free
  6668                           
  6669                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  6670  002236  0E00               	movlw	0
  6671  002238  0100               	movlb	0	; () banked
  6672  00223A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6673  00223C  0E00               	movlw	0
  6674  00223E  6F83               	movwf	getRTC@i& (0+255),b
  6675  002240                     l4144:
  6676                           
  6677                           ; BSR set to: 0
  6678  002240  0100               	movlb	0	; () banked
  6679  002242  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6680  002244  D008               	goto	l4148
  6681  002246  0100               	movlb	0	; () banked
  6682  002248  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6683  00224A  E115               	bnz	l4154
  6684  00224C  0E06               	movlw	6
  6685  00224E  0100               	movlb	0	; () banked
  6686  002250  5D83               	subwf	getRTC@i& (0+255),w,b
  6687  002252  B0D8               	btfsc	status,0,c
  6688  002254  D010               	goto	l4154
  6689  002256                     l4148:
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  6693  002256  0ED4               	movlw	low _time
  6694  002258  0100               	movlb	0	; () banked
  6695  00225A  2583               	addwf	getRTC@i& (0+255),w,b
  6696  00225C  6ED9               	movwf	fsr2l,c
  6697  00225E  0E00               	movlw	high _time
  6698  002260  0100               	movlb	0	; () banked
  6699  002262  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6700  002264  6EDA               	movwf	fsr2h,c
  6701  002266  0E01               	movlw	1
  6702  002268  EC30  F015         	call	_I2C_Master_Read
  6703  00226C  6EDF               	movwf	indf2,c
  6704  00226E  0100               	movlb	0	; () banked
  6705  002270  4B83               	infsnz	getRTC@i& (0+255),f,b
  6706  002272  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6707  002274  D7E5               	goto	l4144
  6708  002276                     l4154:
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;RTC.c: 58: }
  6712                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  6713  002276  0E00               	movlw	0
  6714  002278  EC30  F015         	call	_I2C_Master_Read
  6715  00227C  0100               	movlb	0	; () banked
  6716  00227E  6FDA               	movwf	(_time+6)& (0+255),b
  6717                           
  6718                           ;RTC.c: 60: I2C_Master_Stop();
  6719  002280  ECA6  F016         	call	_I2C_Master_Stop	;wreg free
  6720  002284  0012               	return		;funcret
  6721  002286                     __end_of_getRTC:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           intcon	equ	0xFF2
  6730                           intcon2	equ	0xFF1
  6731                           intcon3	equ	0xFF0
  6732                           postinc0	equ	0xFEE
  6733                           wreg	equ	0xFE8
  6734                           postdec1	equ	0xFE5
  6735                           fsr1l	equ	0xFE1
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _I2C_Master_Write *****************
  6744 ;; Defined at:
  6745 ;;		line 49 in file "I2C.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  d               2    1[BANK0 ] unsigned int 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, status,2, status,0, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6759 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;Total ram usage:        2 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    8
  6766 ;; This function calls:
  6767 ;;		_I2C_Master_Wait
  6768 ;; This function is called by:
  6769 ;;		_loadRTC
  6770 ;;		_getRTC
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text27
  6775  002D38                     __ptext27:
  6776                           	opt stack 0
  6777  002D38                     _I2C_Master_Write:
  6778                           	opt stack 18
  6779                           
  6780                           ;I2C.c: 51: I2C_Master_Wait();
  6781                           
  6782                           ;incstack = 0
  6783  002D38  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  6784                           
  6785                           ;I2C.c: 52: SSPBUF = d;
  6786  002D3C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6787  002D40  0012               	return		;funcret
  6788  002D42                     __end_of_I2C_Master_Write:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           intcon3	equ	0xFF0
  6799                           postinc0	equ	0xFEE
  6800                           wreg	equ	0xFE8
  6801                           postdec1	equ	0xFE5
  6802                           fsr1l	equ	0xFE1
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _I2C_Master_Stop *****************
  6811 ;; Defined at:
  6812 ;;		line 43 in file "I2C.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, status,2, status,0, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    8
  6833 ;; This function calls:
  6834 ;;		_I2C_Master_Wait
  6835 ;; This function is called by:
  6836 ;;		_loadRTC
  6837 ;;		_getRTC
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text28
  6842  002D4C                     __ptext28:
  6843                           	opt stack 0
  6844  002D4C                     _I2C_Master_Stop:
  6845                           	opt stack 18
  6846                           
  6847                           ;I2C.c: 45: I2C_Master_Wait();
  6848                           
  6849                           ;incstack = 0
  6850  002D4C  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  6851                           
  6852                           ;I2C.c: 46: PEN = 1;
  6853  002D50  84C5               	bsf	4037,2,c	;volatile
  6854  002D52  0012               	return		;funcret
  6855  002D54                     __end_of_I2C_Master_Stop:
  6856                           	opt stack 0
  6857                           tblptru	equ	0xFF8
  6858                           tblptrh	equ	0xFF7
  6859                           tblptrl	equ	0xFF6
  6860                           tablat	equ	0xFF5
  6861                           prodh	equ	0xFF4
  6862                           prodl	equ	0xFF3
  6863                           intcon	equ	0xFF2
  6864                           intcon2	equ	0xFF1
  6865                           intcon3	equ	0xFF0
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           postdec1	equ	0xFE5
  6869                           fsr1l	equ	0xFE1
  6870                           indf2	equ	0xFDF
  6871                           postinc2	equ	0xFDE
  6872                           postdec2	equ	0xFDD
  6873                           fsr2h	equ	0xFDA
  6874                           fsr2l	equ	0xFD9
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _I2C_Master_Start *****************
  6878 ;; Defined at:
  6879 ;;		line 31 in file "I2C.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;		None
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  1    wreg      void 
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;Total ram usage:        0 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    8
  6900 ;; This function calls:
  6901 ;;		_I2C_Master_Wait
  6902 ;; This function is called by:
  6903 ;;		_loadRTC
  6904 ;;		_getRTC
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text29
  6909  002D54                     __ptext29:
  6910                           	opt stack 0
  6911  002D54                     _I2C_Master_Start:
  6912                           	opt stack 18
  6913                           
  6914                           ;I2C.c: 33: I2C_Master_Wait();
  6915                           
  6916                           ;incstack = 0
  6917  002D54  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  6918                           
  6919                           ;I2C.c: 34: SEN = 1;
  6920  002D58  80C5               	bsf	4037,0,c	;volatile
  6921  002D5A  0012               	return		;funcret
  6922  002D5C                     __end_of_I2C_Master_Start:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           intcon2	equ	0xFF1
  6932                           intcon3	equ	0xFF0
  6933                           postinc0	equ	0xFEE
  6934                           wreg	equ	0xFE8
  6935                           postdec1	equ	0xFE5
  6936                           fsr1l	equ	0xFE1
  6937                           indf2	equ	0xFDF
  6938                           postinc2	equ	0xFDE
  6939                           postdec2	equ	0xFDD
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _I2C_Master_Read *****************
  6945 ;; Defined at:
  6946 ;;		line 55 in file "I2C.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  a               1    wreg     unsigned char 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  a               1    1[BANK0 ] unsigned char 
  6951 ;;  temp            1    2[BANK0 ] unsigned char 
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      unsigned char 
  6954 ;; Registers used:
  6955 ;;		wreg, status,2, status,0, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;Total ram usage:        2 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    8
  6968 ;; This function calls:
  6969 ;;		_I2C_Master_Wait
  6970 ;; This function is called by:
  6971 ;;		_getRTC
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text30
  6976  002A60                     __ptext30:
  6977                           	opt stack 0
  6978  002A60                     _I2C_Master_Read:
  6979                           	opt stack 18
  6980                           
  6981                           ;incstack = 0
  6982                           ;I2C_Master_Read@a stored from wreg
  6983  002A60  0100               	movlb	0	; () banked
  6984  002A62  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6985                           
  6986                           ;I2C.c: 57: unsigned char temp;
  6987                           ;I2C.c: 58: I2C_Master_Wait();
  6988  002A64  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  6989                           
  6990                           ;I2C.c: 59: RCEN = 1;
  6991  002A68  86C5               	bsf	4037,3,c	;volatile
  6992                           
  6993                           ;I2C.c: 60: I2C_Master_Wait();
  6994  002A6A  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  6995                           
  6996                           ;I2C.c: 61: temp = SSPBUF;
  6997  002A6E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6998                           
  6999                           ;I2C.c: 62: I2C_Master_Wait();
  7000  002A72  EC5A  F016         	call	_I2C_Master_Wait	;wreg free
  7001                           
  7002                           ;I2C.c: 63: ACKDT = (a)?0:1;
  7003  002A76  0100               	movlb	0	; () banked
  7004  002A78  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7005  002A7A  0100               	movlb	0	; () banked
  7006  002A7C  A4D8               	btfss	status,2,c
  7007  002A7E  D002               	goto	u2490
  7008  002A80  8AC5               	bsf	4037,5,c	;volatile
  7009  002A82  D001               	goto	l3846
  7010  002A84                     u2490:
  7011  002A84  9AC5               	bcf	4037,5,c	;volatile
  7012  002A86                     l3846:
  7013                           
  7014                           ;I2C.c: 64: ACKEN = 1;
  7015  002A86  88C5               	bsf	4037,4,c	;volatile
  7016                           
  7017                           ;I2C.c: 65: return temp;
  7018  002A88  0100               	movlb	0	; () banked
  7019  002A8A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7020  002A8C  0012               	return	
  7021  002A8E                     __end_of_I2C_Master_Read:
  7022                           	opt stack 0
  7023                           tblptru	equ	0xFF8
  7024                           tblptrh	equ	0xFF7
  7025                           tblptrl	equ	0xFF6
  7026                           tablat	equ	0xFF5
  7027                           prodh	equ	0xFF4
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           intcon2	equ	0xFF1
  7031                           intcon3	equ	0xFF0
  7032                           postinc0	equ	0xFEE
  7033                           wreg	equ	0xFE8
  7034                           postdec1	equ	0xFE5
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _I2C_Master_Wait *****************
  7044 ;; Defined at:
  7045 ;;		line 26 in file "I2C.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;Total ram usage:        1 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    7
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_I2C_Master_Start
  7070 ;;		_I2C_Master_Stop
  7071 ;;		_I2C_Master_Write
  7072 ;;		_I2C_Master_Read
  7073 ;;		_I2C_Master_RepeatedStart
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           	psect	text31
  7078  002CB4                     __ptext31:
  7079                           	opt stack 0
  7080  002CB4                     _I2C_Master_Wait:
  7081                           	opt stack 18
  7082  002CB4                     l68:
  7083  002CB4  B4C7               	btfsc	4039,2,c	;volatile
  7084  002CB6  D7FE               	goto	l68
  7085  002CB8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7086  002CBC  0E1F               	movlw	31
  7087  002CBE  0100               	movlb	0	; () banked
  7088  002CC0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7089  002CC2  B4D8               	btfsc	status,2,c
  7090  002CC4  0012               	return	
  7091  002CC6  D7F6               	goto	l68
  7092  002CC8                     __end_of_I2C_Master_Wait:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           intcon2	equ	0xFF1
  7102                           intcon3	equ	0xFF0
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _change_state_to_menu_22 *****************
  7115 ;; Defined at:
  7116 ;;		line 442 in file "UI.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;		None
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;Total ram usage:        0 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:   10
  7137 ;; This function calls:
  7138 ;;		_lcdInst
  7139 ;;		_printf
  7140 ;; This function is called by:
  7141 ;;		_UI
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text32
  7146  0027A2                     __ptext32:
  7147                           	opt stack 0
  7148  0027A2                     _change_state_to_menu_22:
  7149                           	opt stack 19
  7150                           
  7151                           ;UI.c: 443: cur_state = 22;
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;incstack = 0
  7155  0027A2  0E00               	movlw	0
  7156  0027A4  0100               	movlb	0	; () banked
  7157  0027A6  6FE8               	movwf	(_cur_state+1)& (0+255),b
  7158  0027A8  0E16               	movlw	22
  7159  0027AA  6FE7               	movwf	_cur_state& (0+255),b
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;UI.c: 445: lcdInst(0b10000000);;
  7163  0027AC  0E80               	movlw	128
  7164  0027AE  EC88  F016         	call	_lcdInst
  7165                           
  7166                           ;UI.c: 446: printf("2. SORT        <");
  7167  0027B2  0E64               	movlw	low STR_19
  7168  0027B4  0100               	movlb	0	; () banked
  7169  0027B6  6F8E               	movwf	printf@f& (0+255),b
  7170  0027B8  0EFF               	movlw	high STR_19
  7171  0027BA  0100               	movlb	0	; () banked
  7172  0027BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7173  0027BE  ECBB  F002         	call	_printf	;wreg free
  7174                           
  7175                           ;UI.c: 447: lcdInst(0b11000000);;
  7176  0027C2  0EC0               	movlw	192
  7177  0027C4  EC88  F016         	call	_lcdInst
  7178                           
  7179                           ;UI.c: 448: printf("3. LOGS         ");
  7180  0027C8  0E65               	movlw	low STR_21
  7181  0027CA  0100               	movlb	0	; () banked
  7182  0027CC  6F8E               	movwf	printf@f& (0+255),b
  7183  0027CE  0EFE               	movlw	high STR_21
  7184  0027D0  0100               	movlb	0	; () banked
  7185  0027D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7186  0027D4  ECBB  F002         	call	_printf	;wreg free
  7187  0027D8  0012               	return		;funcret
  7188  0027DA                     __end_of_change_state_to_menu_22:
  7189                           	opt stack 0
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           prodh	equ	0xFF4
  7195                           prodl	equ	0xFF3
  7196                           intcon	equ	0xFF2
  7197                           intcon2	equ	0xFF1
  7198                           intcon3	equ	0xFF0
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           postdec1	equ	0xFE5
  7202                           fsr1l	equ	0xFE1
  7203                           indf2	equ	0xFDF
  7204                           postinc2	equ	0xFDE
  7205                           postdec2	equ	0xFDD
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _change_state_to_menu_12 *****************
  7211 ;; Defined at:
  7212 ;;		line 434 in file "UI.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:   10
  7233 ;; This function calls:
  7234 ;;		_lcdInst
  7235 ;;		_printf
  7236 ;; This function is called by:
  7237 ;;		_UI
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text33
  7242  0027DA                     __ptext33:
  7243                           	opt stack 0
  7244  0027DA                     _change_state_to_menu_12:
  7245                           	opt stack 19
  7246                           
  7247                           ;UI.c: 435: cur_state = 12;
  7248                           
  7249                           ;incstack = 0
  7250  0027DA  0E00               	movlw	0
  7251  0027DC  0100               	movlb	0	; () banked
  7252  0027DE  6FE8               	movwf	(_cur_state+1)& (0+255),b
  7253  0027E0  0E0C               	movlw	12
  7254  0027E2  6FE7               	movwf	_cur_state& (0+255),b
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;UI.c: 437: lcdInst(0b10000000);;
  7258  0027E4  0E80               	movlw	128
  7259  0027E6  EC88  F016         	call	_lcdInst
  7260                           
  7261                           ;UI.c: 438: printf("1. DATE/TIME    ");
  7262  0027EA  0E87               	movlw	low STR_18
  7263  0027EC  0100               	movlb	0	; () banked
  7264  0027EE  6F8E               	movwf	printf@f& (0+255),b
  7265  0027F0  0EFE               	movlw	high STR_18
  7266  0027F2  0100               	movlb	0	; () banked
  7267  0027F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7268  0027F6  ECBB  F002         	call	_printf	;wreg free
  7269                           
  7270                           ;UI.c: 439: lcdInst(0b11000000);;
  7271  0027FA  0EC0               	movlw	192
  7272  0027FC  EC88  F016         	call	_lcdInst
  7273                           
  7274                           ;UI.c: 440: printf("2. SORT        <");
  7275  002800  0E64               	movlw	low STR_19
  7276  002802  0100               	movlb	0	; () banked
  7277  002804  6F8E               	movwf	printf@f& (0+255),b
  7278  002806  0EFF               	movlw	high STR_19
  7279  002808  0100               	movlb	0	; () banked
  7280  00280A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7281  00280C  ECBB  F002         	call	_printf	;wreg free
  7282  002810  0012               	return		;funcret
  7283  002812                     __end_of_change_state_to_menu_12:
  7284                           	opt stack 0
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           intcon2	equ	0xFF1
  7293                           intcon3	equ	0xFF0
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           postdec1	equ	0xFE5
  7297                           fsr1l	equ	0xFE1
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305 ;; *************** function _printf *****************
  7306 ;; Defined at:
  7307 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  7310 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  7311 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  7312 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  7313 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  7314 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  7315 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  7316 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  7317 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  7318 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  7319 ;;		 -> STR_2(21), STR_1(17), 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  tmpval          4    0        struct .
  7322 ;;  width           2   41[BANK0 ] int 
  7323 ;;  len             2   37[BANK0 ] unsigned int 
  7324 ;;  val             2   35[BANK0 ] unsigned int 
  7325 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  7326 ;;		 -> STR_51(7), printRTC@month(4), 
  7327 ;;  ap              2   31[BANK0 ] PTR void [1]
  7328 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7329 ;;  c               1   40[BANK0 ] char 
  7330 ;;  flag            1   39[BANK0 ] unsigned char 
  7331 ;;  prec            1   30[BANK0 ] char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  2   14[BANK0 ] int 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:       29 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    9
  7348 ;; This function calls:
  7349 ;;		___lwdiv
  7350 ;;		___lwmod
  7351 ;;		___wmul
  7352 ;;		_isdigit
  7353 ;;		_putch
  7354 ;; This function is called by:
  7355 ;;		_UI
  7356 ;;		_change_state_to_menu_start
  7357 ;;		_change_state_to_menu_12
  7358 ;;		_change_state_to_menu_22
  7359 ;;		_printRTC
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text34
  7364  000576                     __ptext34:
  7365                           	opt stack 0
  7366  000576                     _printf:
  7367                           	opt stack 19
  7368                           
  7369                           ;doprnt.c: 466: va_list ap;
  7370                           ;doprnt.c: 499: signed char c;
  7371                           ;doprnt.c: 501: int width;
  7372                           ;doprnt.c: 506: signed char prec;
  7373                           ;doprnt.c: 508: unsigned char flag;
  7374                           ;doprnt.c: 523: union {
  7375                           ;doprnt.c: 524: unsigned long vd;
  7376                           ;doprnt.c: 525: double integ;
  7377                           ;doprnt.c: 526: } tmpval;
  7378                           ;doprnt.c: 528: unsigned int val;
  7379                           ;doprnt.c: 529: unsigned len;
  7380                           ;doprnt.c: 530: const char * cp;
  7381                           ;doprnt.c: 533: *ap = __va_start();
  7382                           
  7383                           ;incstack = 0
  7384  000576  0E90               	movlw	low (?_printf+2)
  7385  000578  0100               	movlb	0	; () banked
  7386  00057A  6F9F               	movwf	printf@ap& (0+255),b
  7387  00057C  0E00               	movlw	high (?_printf+2)
  7388  00057E  0100               	movlb	0	; () banked
  7389  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  7390                           
  7391                           ;doprnt.c: 536: while(c = *f++) {
  7392  000582  D1EE               	goto	l4138
  7393  000584                     l4014:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;doprnt.c: 538: if(c != '%')
  7397  000584  0E25               	movlw	37
  7398  000586  0100               	movlb	0	; () banked
  7399  000588  19A8               	xorwf	printf@c& (0+255),w,b
  7400  00058A  B4D8               	btfsc	status,2,c
  7401  00058C  D005               	goto	l4018
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;doprnt.c: 540: {
  7405                           ;doprnt.c: 541: (putch(c) );
  7406  00058E  0100               	movlb	0	; () banked
  7407  000590  51A8               	movf	printf@c& (0+255),w,b
  7408  000592  EC80  F016         	call	_putch
  7409                           
  7410                           ;doprnt.c: 542: continue;
  7411  000596  D1E4               	goto	l4138
  7412  000598                     l4018:
  7413                           
  7414                           ;doprnt.c: 543: }
  7415                           ;doprnt.c: 546: width = 0;
  7416  000598  0E00               	movlw	0
  7417  00059A  0100               	movlb	0	; () banked
  7418  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  7419  00059E  0E00               	movlw	0
  7420  0005A0  6FA9               	movwf	printf@width& (0+255),b
  7421                           
  7422                           ;doprnt.c: 548: flag = 0;
  7423  0005A2  0E00               	movlw	0
  7424  0005A4  0100               	movlb	0	; () banked
  7425  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;doprnt.c: 551: switch(*f) {
  7429                           
  7430                           ;doprnt.c: 550: for(;;) {
  7431  0005A8  D005               	goto	l4024
  7432  0005AA                     l4020:
  7433                           
  7434                           ;doprnt.c: 580: flag |= 0x04;
  7435  0005AA  0100               	movlb	0	; () banked
  7436  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  7437                           
  7438                           ;doprnt.c: 581: f++;
  7439  0005AE  0100               	movlb	0	; () banked
  7440  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  7441  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7442  0005B4                     l4024:
  7443  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  7444  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  7445  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7446  0005BC  6AF8               	clrf	tblptru,c
  7447  0005BE                     	endif
  7448  0005BE                     	if	0	;tblptru may be non-zero
  7449  0005BE                     	endif
  7450  0005BE  0008               	tblrd		*
  7451  0005C0  50F5               	movf	tablat,w,c
  7452                           
  7453                           ; Switch size 1, requested type "space"
  7454                           ; Number of cases is 1, Range of values is 48 to 48
  7455                           ; switch strategies available:
  7456                           ; Name         Instructions Cycles
  7457                           ; simple_byte            4     3 (average)
  7458                           ;	Chosen strategy is simple_byte
  7459  0005C2  0A30               	xorlw	48	; case 48
  7460  0005C4  B4D8               	btfsc	status,2,c
  7461  0005C6  D7F1               	goto	l4020
  7462                           
  7463                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7464                           
  7465                           ;doprnt.c: 586: }
  7466                           
  7467                           ;doprnt.c: 585: break;
  7468  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  7469  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  7470  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7471  0005D0  6AF8               	clrf	tblptru,c
  7472  0005D2                     	endif
  7473  0005D2                     	if	0	;tblptru may be non-zero
  7474  0005D2                     	endif
  7475  0005D2  0008               	tblrd		*
  7476  0005D4  50F5               	movf	tablat,w,c
  7477  0005D6  ECA0  F015         	call	_isdigit
  7478  0005DA  A0D8               	btfss	status,0,c
  7479  0005DC  D0CF               	goto	l4070
  7480                           
  7481                           ;doprnt.c: 598: width = 0;
  7482  0005DE  0E00               	movlw	0
  7483  0005E0  0100               	movlb	0	; () banked
  7484  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  7485  0005E4  0E00               	movlw	0
  7486  0005E6  6FA9               	movwf	printf@width& (0+255),b
  7487  0005E8                     l4030:
  7488                           
  7489                           ;doprnt.c: 600: width *= 10;
  7490  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  7491  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  7492  0005F0  0E00               	movlw	0
  7493  0005F2  0100               	movlb	0	; () banked
  7494  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7495  0005F6  0E0A               	movlw	10
  7496  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7497  0005FA  EC24  F014         	call	___wmul	;wreg free
  7498  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  7499  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  7500                           
  7501                           ;doprnt.c: 601: width += *f++ - '0';
  7502  000606  0ED0               	movlw	208
  7503  000608  0100               	movlb	0	; () banked
  7504  00060A  6F9A               	movwf	??_printf& (0+255),b
  7505  00060C  0EFF               	movlw	255
  7506  00060E  0100               	movlb	0	; () banked
  7507  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  7508  000612  C08E  FFF6         	movff	printf@f,tblptrl
  7509  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  7510  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7511  00061A  6AF8               	clrf	tblptru,c
  7512  00061C                     	endif
  7513  00061C                     	if	0	;tblptru may be non-zero
  7514  00061C                     	endif
  7515  00061C  0008               	tblrd		*
  7516  00061E  50F5               	movf	tablat,w,c
  7517  000620  0100               	movlb	0	; () banked
  7518  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  7519  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  7520  000626  0100               	movlb	0	; () banked
  7521  000628  519A               	movf	??_printf& (0+255),w,b
  7522  00062A  0100               	movlb	0	; () banked
  7523  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  7524  00062E  0100               	movlb	0	; () banked
  7525  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  7526  000632  0100               	movlb	0	; () banked
  7527  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  7528  000636  0100               	movlb	0	; () banked
  7529  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  7530  00063A  0100               	movlb	0	; () banked
  7531  00063C  27A9               	addwf	printf@width& (0+255),f,b
  7532  00063E  0100               	movlb	0	; () banked
  7533  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  7534  000642  0100               	movlb	0	; () banked
  7535  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  7536                           
  7537                           ; BSR set to: 0
  7538  000646  0100               	movlb	0	; () banked
  7539  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  7540  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7544  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  7545  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  7546  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7547  000654  6AF8               	clrf	tblptru,c
  7548  000656                     	endif
  7549  000656                     	if	0	;tblptru may be non-zero
  7550  000656                     	endif
  7551  000656  0008               	tblrd		*
  7552  000658  50F5               	movf	tablat,w,c
  7553  00065A  ECA0  F015         	call	_isdigit
  7554  00065E  A0D8               	btfss	status,0,c
  7555  000660  D08D               	goto	l4070
  7556  000662  D7C2               	goto	l4030
  7557  000664                     l4038:
  7558                           
  7559                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7560  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7561  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7562  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7563  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7564  000674  0E02               	movlw	2
  7565  000676  0100               	movlb	0	; () banked
  7566  000678  279F               	addwf	printf@ap& (0+255),f,b
  7567  00067A  0E00               	movlw	0
  7568  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;doprnt.c: 740: if(!cp)
  7572  00067E  0100               	movlb	0	; () banked
  7573  000680  51A1               	movf	printf@cp& (0+255),w,b
  7574  000682  0100               	movlb	0	; () banked
  7575  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7576  000686  A4D8               	btfss	status,2,c
  7577  000688  D006               	goto	l4046
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;doprnt.c: 741: cp = "(null)";
  7581  00068A  0EBD               	movlw	low STR_51
  7582  00068C  0100               	movlb	0	; () banked
  7583  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7584  000690  0EFF               	movlw	high STR_51
  7585  000692  0100               	movlb	0	; () banked
  7586  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7587  000696                     l4046:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;doprnt.c: 745: len = 0;
  7591  000696  0E00               	movlw	0
  7592  000698  0100               	movlb	0	; () banked
  7593  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7594  00069C  0E00               	movlw	0
  7595  00069E  6FA5               	movwf	printf@len& (0+255),b
  7596                           
  7597                           ;doprnt.c: 746: while(cp[len])
  7598  0006A0  D003               	goto	l4050
  7599  0006A2                     l4048:
  7600                           
  7601                           ;doprnt.c: 747: len++;
  7602  0006A2  0100               	movlb	0	; () banked
  7603  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7604  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7605  0006A8                     l4050:
  7606                           
  7607                           ; BSR set to: 0
  7608  0006A8  0100               	movlb	0	; () banked
  7609  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7610  0006AC  0100               	movlb	0	; () banked
  7611  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7612  0006B0  0100               	movlb	0	; () banked
  7613  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7614  0006B4  0100               	movlb	0	; () banked
  7615  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7616  0006B8  0100               	movlb	0	; () banked
  7617  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7618  0006BC  0100               	movlb	0	; () banked
  7619  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7620  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7621  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7622  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7623  0006CA  6EF8               	movwf	tblptru,c
  7624  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7625  0006CE  64F7               	cpfsgt	tblptrh,c
  7626  0006D0  D003               	bra	u2747
  7627  0006D2  0008               	tblrd		*
  7628  0006D4  50F5               	movf	tablat,w,c
  7629  0006D6  D005               	bra	u2740
  7630  0006D8                     u2747:
  7631  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7632  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7633  0006E0  50EF               	movf	indf0,w,c
  7634  0006E2                     u2740:
  7635  0006E2  0900               	iorlw	0
  7636  0006E4  A4D8               	btfss	status,2,c
  7637  0006E6  D7DD               	goto	l4048
  7638                           
  7639                           ;doprnt.c: 757: if(width > len)
  7640  0006E8  0100               	movlb	0	; () banked
  7641  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7642  0006EC  0100               	movlb	0	; () banked
  7643  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7644  0006F0  0100               	movlb	0	; () banked
  7645  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7646  0006F4  0100               	movlb	0	; () banked
  7647  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7648  0006F8  B0D8               	btfsc	status,0,c
  7649  0006FA  D009               	goto	l4056
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;doprnt.c: 758: width -= len;
  7653  0006FC  0100               	movlb	0	; () banked
  7654  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7655  000700  0100               	movlb	0	; () banked
  7656  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7657  000704  0100               	movlb	0	; () banked
  7658  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7659  000708  0100               	movlb	0	; () banked
  7660  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7661  00070C  D009               	goto	l4060
  7662  00070E                     l4056:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;doprnt.c: 759: else
  7666                           ;doprnt.c: 760: width = 0;
  7667  00070E  0E00               	movlw	0
  7668  000710  0100               	movlb	0	; () banked
  7669  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7670  000714  0E00               	movlw	0
  7671  000716  6FA9               	movwf	printf@width& (0+255),b
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;doprnt.c: 764: while(width--)
  7675  000718  D003               	goto	l4060
  7676  00071A                     l4058:
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;doprnt.c: 765: (putch(' ') );
  7680  00071A  0E20               	movlw	32
  7681  00071C  EC80  F016         	call	_putch
  7682  000720                     l4060:
  7683  000720  0100               	movlb	0	; () banked
  7684  000722  07A9               	decf	printf@width& (0+255),f,b
  7685  000724  A0D8               	btfss	status,0,c
  7686  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7687  000728  0100               	movlb	0	; () banked
  7688  00072A  29A9               	incf	printf@width& (0+255),w,b
  7689  00072C  E1F6               	bnz	l4058
  7690  00072E  0100               	movlb	0	; () banked
  7691  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7692  000732  B4D8               	btfsc	status,2,c
  7693  000734  D017               	goto	l4066
  7694  000736  D7F1               	goto	l4058
  7695  000738                     l4062:
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;doprnt.c: 768: (putch(*cp++) );
  7699  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7700  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7701  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7702  000742  6EF8               	movwf	tblptru,c
  7703  000744  0E0F               	movlw	(high __ramtop+-1)
  7704  000746  64F7               	cpfsgt	tblptrh,c
  7705  000748  D003               	bra	u2787
  7706  00074A  0008               	tblrd		*
  7707  00074C  50F5               	movf	tablat,w,c
  7708  00074E  D005               	bra	u2780
  7709  000750                     u2787:
  7710  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7711  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7712  000758  50EF               	movf	indf0,w,c
  7713  00075A                     u2780:
  7714  00075A  EC80  F016         	call	_putch
  7715  00075E  0100               	movlb	0	; () banked
  7716  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7717  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7718  000764                     l4066:
  7719                           
  7720                           ; BSR set to: 0
  7721  000764  0100               	movlb	0	; () banked
  7722  000766  07A5               	decf	printf@len& (0+255),f,b
  7723  000768  A0D8               	btfss	status,0,c
  7724  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7725  00076C  0100               	movlb	0	; () banked
  7726  00076E  29A5               	incf	printf@len& (0+255),w,b
  7727  000770  E1E3               	bnz	l4062
  7728  000772  0100               	movlb	0	; () banked
  7729  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7730  000776  B4D8               	btfsc	status,2,c
  7731  000778  D0F3               	goto	l4138
  7732  00077A  D7DE               	goto	l4062
  7733  00077C                     l4070:
  7734  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7735  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7736  000784  0100               	movlb	0	; () banked
  7737  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7738  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7739  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7740  00078A  6AF8               	clrf	tblptru,c
  7741  00078C                     	endif
  7742  00078C                     	if	0	;tblptru may be non-zero
  7743  00078C                     	endif
  7744  00078C  0008               	tblrd		*
  7745  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7746  000792  0100               	movlb	0	; () banked
  7747  000794  51A8               	movf	printf@c& (0+255),w,b
  7748                           
  7749                           ; Switch size 1, requested type "space"
  7750                           ; Number of cases is 4, Range of values is 0 to 115
  7751                           ; switch strategies available:
  7752                           ; Name         Instructions Cycles
  7753                           ; simple_byte           13     7 (average)
  7754                           ;	Chosen strategy is simple_byte
  7755  000796  0A00               	xorlw	0	; case 0
  7756  000798  B4D8               	btfsc	status,2,c
  7757  00079A  0012               	return	
  7758  00079C  0A64               	xorlw	100	; case 100
  7759  00079E  B4D8               	btfsc	status,2,c
  7760  0007A0  D007               	goto	l4072
  7761  0007A2  0A0D               	xorlw	13	; case 105
  7762  0007A4  B4D8               	btfsc	status,2,c
  7763  0007A6  D004               	goto	l4072
  7764  0007A8  0A1A               	xorlw	26	; case 115
  7765  0007AA  B4D8               	btfsc	status,2,c
  7766  0007AC  D75B               	goto	l4038
  7767  0007AE  D0D8               	goto	l4138
  7768  0007B0                     l4072:
  7769                           
  7770                           ;doprnt.c: 1253: {
  7771                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7772  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7773  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7774  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7775  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7776  0007C0  0E02               	movlw	2
  7777  0007C2  0100               	movlb	0	; () banked
  7778  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7779  0007C6  0E00               	movlw	0
  7780  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;doprnt.c: 1261: if((int)val < 0) {
  7784  0007CA  0100               	movlb	0	; () banked
  7785  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7786  0007CE  D008               	goto	l4082
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;doprnt.c: 1262: flag |= 0x03;
  7790  0007D0  0E03               	movlw	3
  7791  0007D2  0100               	movlb	0	; () banked
  7792  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;doprnt.c: 1263: val = -val;
  7796  0007D6  0100               	movlb	0	; () banked
  7797  0007D8  6DA3               	negf	printf@val& (0+255),b
  7798  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7799  0007DC  B0D8               	btfsc	status,0,c
  7800  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7801  0007E0                     l4082:
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;doprnt.c: 1264: }
  7805                           ;doprnt.c: 1266: }
  7806                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7807  0007E0  0E01               	movlw	1
  7808  0007E2  0100               	movlb	0	; () banked
  7809  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7810  0007E6                     l4084:
  7811                           
  7812                           ; BSR set to: 0
  7813  0007E6  0E05               	movlw	5
  7814  0007E8  0100               	movlb	0	; () banked
  7815  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7816  0007EC  B4D8               	btfsc	status,2,c
  7817  0007EE  D019               	goto	l4096
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;doprnt.c: 1306: if(val < dpowers[c])
  7821                           
  7822                           ; BSR set to: 0
  7823                           
  7824                           ; BSR set to: 0
  7825  0007F0  0100               	movlb	0	; () banked
  7826  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7827  0007F4  0D02               	mullw	2
  7828  0007F6  0EC6               	movlw	low _dpowers
  7829  0007F8  24F3               	addwf	prodl,w,c
  7830  0007FA  6EF6               	movwf	tblptrl,c
  7831  0007FC  0EFD               	movlw	high _dpowers
  7832  0007FE  20F4               	addwfc	prodh,w,c
  7833  000800  6EF7               	movwf	tblptrh,c
  7834  000802                     	if	1	;There are 3 active tblptr bytes
  7835  000802  6AF8               	clrf	tblptru,c
  7836  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7837  000806  22F8               	addwfc	tblptru,f,c
  7838  000808                     	endif
  7839  000808  0009               	tblrd		*+
  7840  00080A  50F5               	movf	tablat,w,c
  7841  00080C  0100               	movlb	0	; () banked
  7842  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7843  000810  0009               	tblrd		*+
  7844  000812  50F5               	movf	tablat,w,c
  7845  000814  0100               	movlb	0	; () banked
  7846  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7847  000818  A0D8               	btfss	status,0,c
  7848  00081A  D003               	goto	l4096
  7849                           
  7850                           ; BSR set to: 0
  7851                           
  7852                           ; BSR set to: 0
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;doprnt.c: 1307: break;
  7856  00081C  0100               	movlb	0	; () banked
  7857  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7858  000820  D7E2               	goto	l4084
  7859  000822                     l4096:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7863  000822  0100               	movlb	0	; () banked
  7864  000824  51A9               	movf	printf@width& (0+255),w,b
  7865  000826  0100               	movlb	0	; () banked
  7866  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7867  00082A  B4D8               	btfsc	status,2,c
  7868  00082C  D00B               	goto	l4102
  7869                           
  7870                           ; BSR set to: 0
  7871  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7872  000832  0E03               	movlw	3
  7873  000834  0100               	movlb	0	; () banked
  7874  000836  179A               	andwf	??_printf& (0+255),f,b
  7875  000838  B4D8               	btfsc	status,2,c
  7876  00083A  D004               	goto	l4102
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;doprnt.c: 1346: width--;
  7880  00083C  0100               	movlb	0	; () banked
  7881  00083E  07A9               	decf	printf@width& (0+255),f,b
  7882  000840  A0D8               	btfss	status,0,c
  7883  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7884  000844                     l4102:
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;doprnt.c: 1381: if(width > c)
  7888  000844  0E80               	movlw	128
  7889  000846  0100               	movlb	0	; () banked
  7890  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7891  00084A  0E7F               	movlw	127
  7892  00084C  0100               	movlb	0	; () banked
  7893  00084E  6F9A               	movwf	??_printf& (0+255),b
  7894  000850  0100               	movlb	0	; () banked
  7895  000852  51A9               	movf	printf@width& (0+255),w,b
  7896  000854  0100               	movlb	0	; () banked
  7897  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7898  000858  0100               	movlb	0	; () banked
  7899  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7900  00085C  0A80               	xorlw	128
  7901  00085E  0100               	movlb	0	; () banked
  7902  000860  599A               	subwfb	??_printf& (0+255),w,b
  7903  000862  B0D8               	btfsc	status,0,c
  7904  000864  D00B               	goto	l4106
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;doprnt.c: 1382: width -= c;
  7908  000866  0100               	movlb	0	; () banked
  7909  000868  51A8               	movf	printf@c& (0+255),w,b
  7910  00086A  0100               	movlb	0	; () banked
  7911  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7912  00086E  0E00               	movlw	0
  7913  000870  0100               	movlb	0	; () banked
  7914  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7915  000874  0EFF               	movlw	255
  7916  000876  0100               	movlb	0	; () banked
  7917  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7918  00087A  D005               	goto	l4108
  7919  00087C                     l4106:
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;doprnt.c: 1383: else
  7923                           ;doprnt.c: 1384: width = 0;
  7924  00087C  0E00               	movlw	0
  7925  00087E  0100               	movlb	0	; () banked
  7926  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7927  000882  0E00               	movlw	0
  7928  000884  6FA9               	movwf	printf@width& (0+255),b
  7929  000886                     l4108:
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;doprnt.c: 1387: if(flag & 0x04) {
  7933  000886  0100               	movlb	0	; () banked
  7934  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7935  00088A  D018               	goto	l4120
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;doprnt.c: 1392: if(flag & 0x03)
  7939  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7940  000890  0E03               	movlw	3
  7941  000892  0100               	movlb	0	; () banked
  7942  000894  179A               	andwf	??_printf& (0+255),f,b
  7943  000896  B4D8               	btfsc	status,2,c
  7944  000898  D003               	goto	l4114
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;doprnt.c: 1393: (putch('-') );
  7948  00089A  0E2D               	movlw	45
  7949  00089C  EC80  F016         	call	_putch
  7950  0008A0                     l4114:
  7951                           
  7952                           ;doprnt.c: 1415: if(width)
  7953  0008A0  0100               	movlb	0	; () banked
  7954  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7955  0008A4  0100               	movlb	0	; () banked
  7956  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7957  0008A8  B4D8               	btfsc	status,2,c
  7958  0008AA  D025               	goto	l4130
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;doprnt.c: 1417: (putch('0') );
  7962                           
  7963                           ; BSR set to: 0
  7964                           
  7965                           ;doprnt.c: 1416: do
  7966  0008AC  0E30               	movlw	48
  7967  0008AE  EC80  F016         	call	_putch
  7968                           
  7969                           ;doprnt.c: 1418: while(--width);
  7970  0008B2  0100               	movlb	0	; () banked
  7971  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7972  0008B6  A0D8               	btfss	status,0,c
  7973  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7974  0008BA  D7F2               	goto	l4114
  7975  0008BC                     l4120:
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;doprnt.c: 1422: {
  7979                           ;doprnt.c: 1424: if(width
  7980                           ;doprnt.c: 1428: )
  7981  0008BC  0100               	movlb	0	; () banked
  7982  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7983  0008C0  0100               	movlb	0	; () banked
  7984  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7985  0008C4  B4D8               	btfsc	status,2,c
  7986  0008C6  D00D               	goto	l4126
  7987  0008C8                     l4122:
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;doprnt.c: 1430: (putch(' ') );
  7991  0008C8  0E20               	movlw	32
  7992  0008CA  EC80  F016         	call	_putch
  7993                           
  7994                           ;doprnt.c: 1431: while(--width);
  7995  0008CE  0100               	movlb	0	; () banked
  7996  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7997  0008D2  A0D8               	btfss	status,0,c
  7998  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7999  0008D6  0100               	movlb	0	; () banked
  8000  0008D8  51A9               	movf	printf@width& (0+255),w,b
  8001  0008DA  0100               	movlb	0	; () banked
  8002  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8003  0008DE  A4D8               	btfss	status,2,c
  8004  0008E0  D7F3               	goto	l4122
  8005  0008E2                     l4126:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;doprnt.c: 1438: if(flag & 0x03)
  8009  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  8010  0008E6  0E03               	movlw	3
  8011  0008E8  0100               	movlb	0	; () banked
  8012  0008EA  179A               	andwf	??_printf& (0+255),f,b
  8013  0008EC  B4D8               	btfsc	status,2,c
  8014  0008EE  D003               	goto	l4130
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;doprnt.c: 1439: (putch('-') );
  8018  0008F0  0E2D               	movlw	45
  8019  0008F2  EC80  F016         	call	_putch
  8020  0008F6                     l4130:
  8021                           
  8022                           ;doprnt.c: 1469: }
  8023                           ;doprnt.c: 1472: prec = c;
  8024  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  8025                           
  8026                           ;doprnt.c: 1474: while(prec--) {
  8027  0008FA  D02C               	goto	l4136
  8028  0008FC                     l4132:
  8029                           
  8030                           ;doprnt.c: 1478: {
  8031                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8032  0008FC  0100               	movlb	0	; () banked
  8033  0008FE  519E               	movf	printf@prec& (0+255),w,b
  8034  000900  0D02               	mullw	2
  8035  000902  0EC6               	movlw	low _dpowers
  8036  000904  24F3               	addwf	prodl,w,c
  8037  000906  6EF6               	movwf	tblptrl,c
  8038  000908  0EFD               	movlw	high _dpowers
  8039  00090A  20F4               	addwfc	prodh,w,c
  8040  00090C  6EF7               	movwf	tblptrh,c
  8041  00090E                     	if	1	;There are 3 active tblptr bytes
  8042  00090E  6AF8               	clrf	tblptru,c
  8043  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  8044  000912  22F8               	addwfc	tblptru,f,c
  8045  000914                     	endif
  8046  000914  0009               	tblrd		*+
  8047  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  8048  00091A  000A               	tblrd		*-
  8049  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  8050  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  8051  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  8052  000928  EC7F  F011         	call	___lwdiv	;wreg free
  8053  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  8054  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  8055  000934  0E00               	movlw	0
  8056  000936  0100               	movlb	0	; () banked
  8057  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8058  00093A  0E0A               	movlw	10
  8059  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  8060  00093E  EC5F  F012         	call	___lwmod	;wreg free
  8061  000942  0100               	movlb	0	; () banked
  8062  000944  5187               	movf	?___lwmod& (0+255),w,b
  8063  000946  0F30               	addlw	48
  8064  000948  0100               	movlb	0	; () banked
  8065  00094A  6FA8               	movwf	printf@c& (0+255),b
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;doprnt.c: 1523: }
  8069                           ;doprnt.c: 1524: (putch(c) );
  8070  00094C  0100               	movlb	0	; () banked
  8071  00094E  51A8               	movf	printf@c& (0+255),w,b
  8072  000950  EC80  F016         	call	_putch
  8073  000954                     l4136:
  8074  000954  0100               	movlb	0	; () banked
  8075  000956  079E               	decf	printf@prec& (0+255),f,b
  8076  000958  0100               	movlb	0	; () banked
  8077  00095A  299E               	incf	printf@prec& (0+255),w,b
  8078  00095C  A4D8               	btfss	status,2,c
  8079  00095E  D7CE               	goto	l4132
  8080  000960                     l4138:
  8081  000960  C08E  FFF6         	movff	printf@f,tblptrl
  8082  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  8083  000968  0100               	movlb	0	; () banked
  8084  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  8085  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8086  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8087  00096E  6AF8               	clrf	tblptru,c
  8088  000970                     	endif
  8089  000970                     	if	0	;tblptru may be non-zero
  8090  000970                     	endif
  8091  000970  0008               	tblrd		*
  8092  000972  CFF5 F0A8          	movff	tablat,printf@c
  8093  000976  0100               	movlb	0	; () banked
  8094  000978  51A8               	movf	printf@c& (0+255),w,b
  8095  00097A  B4D8               	btfsc	status,2,c
  8096  00097C  0012               	return	
  8097  00097E  D602               	goto	l4014
  8098  000980                     __end_of_printf:
  8099                           	opt stack 0
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon2	equ	0xFF1
  8108                           intcon3	equ	0xFF0
  8109                           indf0	equ	0xFEF
  8110                           postinc0	equ	0xFEE
  8111                           fsr0h	equ	0xFEA
  8112                           fsr0l	equ	0xFE9
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _putch *****************
  8124 ;; Defined at:
  8125 ;;		line 20 in file "lcd.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  data            1    wreg     unsigned char 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  data            1    2[BANK0 ] unsigned char 
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;Total ram usage:        1 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    8
  8146 ;; This function calls:
  8147 ;;		_lcdNibble
  8148 ;; This function is called by:
  8149 ;;		_printf
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           	psect	text35
  8154  002D00                     __ptext35:
  8155                           	opt stack 0
  8156  002D00                     _putch:
  8157                           	opt stack 19
  8158                           
  8159                           ;incstack = 0
  8160                           ;putch@data stored from wreg
  8161  002D00  0100               	movlb	0	; () banked
  8162  002D02  6F82               	movwf	putch@data& (0+255),b
  8163                           
  8164                           ;lcd.c: 21: LATDbits.LATD2 = 1;
  8165  002D04  848C               	bsf	3980,2,c	;volatile
  8166                           
  8167                           ;lcd.c: 22: lcdNibble(data);
  8168  002D06  0100               	movlb	0	; () banked
  8169  002D08  5182               	movf	putch@data& (0+255),w,b
  8170  002D0A  EC2B  F012         	call	_lcdNibble
  8171  002D0E  0012               	return		;funcret
  8172  002D10                     __end_of_putch:
  8173                           	opt stack 0
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           intcon2	equ	0xFF1
  8182                           intcon3	equ	0xFF0
  8183                           indf0	equ	0xFEF
  8184                           postinc0	equ	0xFEE
  8185                           fsr0h	equ	0xFEA
  8186                           fsr0l	equ	0xFE9
  8187                           wreg	equ	0xFE8
  8188                           postdec1	equ	0xFE5
  8189                           fsr1l	equ	0xFE1
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           postdec2	equ	0xFDD
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _isdigit *****************
  8198 ;; Defined at:
  8199 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  c               1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  c               1    2[BANK0 ] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;Total ram usage:        3 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    7
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_printf
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text36
  8228  002B40                     __ptext36:
  8229                           	opt stack 0
  8230  002B40                     _isdigit:
  8231                           	opt stack 20
  8232                           
  8233                           ;incstack = 0
  8234                           ;isdigit@c stored from wreg
  8235  002B40  0100               	movlb	0	; () banked
  8236  002B42  6F82               	movwf	isdigit@c& (0+255),b
  8237  002B44  0E00               	movlw	0
  8238  002B46  0100               	movlb	0	; () banked
  8239  002B48  6F81               	movwf	_isdigit$1584& (0+255),b
  8240                           
  8241                           ; BSR set to: 0
  8242  002B4A  0E3A               	movlw	58
  8243  002B4C  0100               	movlb	0	; () banked
  8244  002B4E  6182               	cpfslt	isdigit@c& (0+255),b
  8245  002B50  D007               	goto	l3864
  8246                           
  8247                           ; BSR set to: 0
  8248  002B52  0E2F               	movlw	47
  8249  002B54  0100               	movlb	0	; () banked
  8250  002B56  6582               	cpfsgt	isdigit@c& (0+255),b
  8251  002B58  D003               	goto	l3864
  8252                           
  8253                           ; BSR set to: 0
  8254  002B5A  0E01               	movlw	1
  8255  002B5C  0100               	movlb	0	; () banked
  8256  002B5E  6F81               	movwf	_isdigit$1584& (0+255),b
  8257  002B60                     l3864:
  8258                           
  8259                           ; BSR set to: 0
  8260  002B60  C081  F080         	movff	_isdigit$1584,??_isdigit
  8261  002B64  0100               	movlb	0	; () banked
  8262  002B66  3180               	rrcf	??_isdigit& (0+255),w,b
  8263  002B68  0012               	return	
  8264  002B6A                     __end_of_isdigit:
  8265                           	opt stack 0
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           prodh	equ	0xFF4
  8271                           prodl	equ	0xFF3
  8272                           intcon	equ	0xFF2
  8273                           intcon2	equ	0xFF1
  8274                           intcon3	equ	0xFF0
  8275                           indf0	equ	0xFEF
  8276                           postinc0	equ	0xFEE
  8277                           fsr0h	equ	0xFEA
  8278                           fsr0l	equ	0xFE9
  8279                           wreg	equ	0xFE8
  8280                           postdec1	equ	0xFE5
  8281                           fsr1l	equ	0xFE1
  8282                           indf2	equ	0xFDF
  8283                           postinc2	equ	0xFDE
  8284                           postdec2	equ	0xFDD
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8
  8288                           
  8289 ;; *************** function ___wmul *****************
  8290 ;; Defined at:
  8291 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8294 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  product         2    4[BANK0 ] unsigned int 
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  2    0[BANK0 ] unsigned int 
  8299 ;; Registers used:
  8300 ;;		wreg, status,2, status,0, prodl, prodh
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8306 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;Total ram usage:        6 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    7
  8313 ;; This function calls:
  8314 ;;		Nothing
  8315 ;; This function is called by:
  8316 ;;		_printf
  8317 ;;		_retrieveLog
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text37
  8322  002848                     __ptext37:
  8323                           	opt stack 0
  8324  002848                     ___wmul:
  8325                           	opt stack 20
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;incstack = 0
  8329  002848  0100               	movlb	0	; () banked
  8330  00284A  5180               	movf	___wmul@multiplier& (0+255),w,b
  8331  00284C  0100               	movlb	0	; () banked
  8332  00284E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8333  002850  CFF3 F084          	movff	prodl,___wmul@product
  8334  002854  CFF4 F085          	movff	prodh,___wmul@product+1
  8335  002858  0100               	movlb	0	; () banked
  8336  00285A  5180               	movf	___wmul@multiplier& (0+255),w,b
  8337  00285C  0100               	movlb	0	; () banked
  8338  00285E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8339  002860  50F3               	movf	prodl,w,c
  8340  002862  0100               	movlb	0	; () banked
  8341  002864  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8342  002866  0100               	movlb	0	; () banked
  8343  002868  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8344  00286A  0100               	movlb	0	; () banked
  8345  00286C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8346  00286E  50F3               	movf	prodl,w,c
  8347  002870  0100               	movlb	0	; () banked
  8348  002872  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8349                           
  8350                           ; BSR set to: 0
  8351  002874  C084  F080         	movff	___wmul@product,?___wmul
  8352  002878  C085  F081         	movff	___wmul@product+1,?___wmul+1
  8353  00287C  0012               	return	
  8354  00287E                     __end_of___wmul:
  8355                           	opt stack 0
  8356                           tblptru	equ	0xFF8
  8357                           tblptrh	equ	0xFF7
  8358                           tblptrl	equ	0xFF6
  8359                           tablat	equ	0xFF5
  8360                           prodh	equ	0xFF4
  8361                           prodl	equ	0xFF3
  8362                           intcon	equ	0xFF2
  8363                           intcon2	equ	0xFF1
  8364                           intcon3	equ	0xFF0
  8365                           indf0	equ	0xFEF
  8366                           postinc0	equ	0xFEE
  8367                           fsr0h	equ	0xFEA
  8368                           fsr0l	equ	0xFE9
  8369                           wreg	equ	0xFE8
  8370                           postdec1	equ	0xFE5
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8
  8378                           
  8379 ;; *************** function ___lwmod *****************
  8380 ;; Defined at:
  8381 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;  dividend        2    7[BANK0 ] unsigned int 
  8384 ;;  divisor         2    9[BANK0 ] unsigned int 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;  counter         1   11[BANK0 ] unsigned char 
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  2    7[BANK0 ] unsigned int 
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;Total ram usage:        5 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    7
  8403 ;; This function calls:
  8404 ;;		Nothing
  8405 ;; This function is called by:
  8406 ;;		_printf
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text38
  8411  0024BE                     __ptext38:
  8412                           	opt stack 0
  8413  0024BE                     ___lwmod:
  8414                           	opt stack 20
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;incstack = 0
  8418  0024BE  0100               	movlb	0	; () banked
  8419  0024C0  5189               	movf	___lwmod@divisor& (0+255),w,b
  8420  0024C2  0100               	movlb	0	; () banked
  8421  0024C4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8422  0024C6  B4D8               	btfsc	status,2,c
  8423  0024C8  D026               	goto	l1359
  8424                           
  8425                           ; BSR set to: 0
  8426  0024CA  0E01               	movlw	1
  8427  0024CC  0100               	movlb	0	; () banked
  8428  0024CE  6F8B               	movwf	___lwmod@counter& (0+255),b
  8429  0024D0  D006               	goto	l3902
  8430  0024D2                     l3900:
  8431                           
  8432                           ; BSR set to: 0
  8433  0024D2  0100               	movlb	0	; () banked
  8434  0024D4  90D8               	bcf	status,0,c
  8435  0024D6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  8436  0024D8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8437  0024DA  0100               	movlb	0	; () banked
  8438  0024DC  2B8B               	incf	___lwmod@counter& (0+255),f,b
  8439  0024DE                     l3902:
  8440                           
  8441                           ; BSR set to: 0
  8442  0024DE  0100               	movlb	0	; () banked
  8443  0024E0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8444  0024E2  D7F7               	goto	l3900
  8445  0024E4                     l3904:
  8446                           
  8447                           ; BSR set to: 0
  8448  0024E4  0100               	movlb	0	; () banked
  8449  0024E6  5189               	movf	___lwmod@divisor& (0+255),w,b
  8450  0024E8  0100               	movlb	0	; () banked
  8451  0024EA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  8452  0024EC  0100               	movlb	0	; () banked
  8453  0024EE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8454  0024F0  0100               	movlb	0	; () banked
  8455  0024F2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8456  0024F4  A0D8               	btfss	status,0,c
  8457  0024F6  D008               	goto	l3908
  8458                           
  8459                           ; BSR set to: 0
  8460  0024F8  0100               	movlb	0	; () banked
  8461  0024FA  5189               	movf	___lwmod@divisor& (0+255),w,b
  8462  0024FC  0100               	movlb	0	; () banked
  8463  0024FE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  8464  002500  0100               	movlb	0	; () banked
  8465  002502  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8466  002504  0100               	movlb	0	; () banked
  8467  002506  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8468  002508                     l3908:
  8469                           
  8470                           ; BSR set to: 0
  8471  002508  0100               	movlb	0	; () banked
  8472  00250A  90D8               	bcf	status,0,c
  8473  00250C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8474  00250E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  8475                           
  8476                           ; BSR set to: 0
  8477  002510  0100               	movlb	0	; () banked
  8478  002512  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  8479  002514  D7E7               	goto	l3904
  8480  002516                     l1359:
  8481                           
  8482                           ; BSR set to: 0
  8483  002516  C087  F087         	movff	___lwmod@dividend,?___lwmod
  8484  00251A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  8485                           
  8486                           ; BSR set to: 0
  8487  00251E  0012               	return		;funcret
  8488  002520                     __end_of___lwmod:
  8489                           	opt stack 0
  8490                           tblptru	equ	0xFF8
  8491                           tblptrh	equ	0xFF7
  8492                           tblptrl	equ	0xFF6
  8493                           tablat	equ	0xFF5
  8494                           prodh	equ	0xFF4
  8495                           prodl	equ	0xFF3
  8496                           intcon	equ	0xFF2
  8497                           intcon2	equ	0xFF1
  8498                           intcon3	equ	0xFF0
  8499                           indf0	equ	0xFEF
  8500                           postinc0	equ	0xFEE
  8501                           fsr0h	equ	0xFEA
  8502                           fsr0l	equ	0xFE9
  8503                           wreg	equ	0xFE8
  8504                           postdec1	equ	0xFE5
  8505                           fsr1l	equ	0xFE1
  8506                           indf2	equ	0xFDF
  8507                           postinc2	equ	0xFDE
  8508                           postdec2	equ	0xFDD
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function ___lwdiv *****************
  8514 ;; Defined at:
  8515 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;  dividend        2    0[BANK0 ] unsigned int 
  8518 ;;  divisor         2    2[BANK0 ] unsigned int 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  quotient        2    4[BANK0 ] unsigned int 
  8521 ;;  counter         1    6[BANK0 ] unsigned char 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  2    0[BANK0 ] unsigned int 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8531 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;Total ram usage:        7 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    7
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_printf
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text39
  8546  0022FE                     __ptext39:
  8547                           	opt stack 0
  8548  0022FE                     ___lwdiv:
  8549                           	opt stack 20
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;incstack = 0
  8553  0022FE  0E00               	movlw	0
  8554  002300  0100               	movlb	0	; () banked
  8555  002302  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8556  002304  0E00               	movlw	0
  8557  002306  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8558                           
  8559                           ; BSR set to: 0
  8560  002308  0100               	movlb	0	; () banked
  8561  00230A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8562  00230C  0100               	movlb	0	; () banked
  8563  00230E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8564  002310  B4D8               	btfsc	status,2,c
  8565  002312  D02C               	goto	l1349
  8566                           
  8567                           ; BSR set to: 0
  8568  002314  0E01               	movlw	1
  8569  002316  0100               	movlb	0	; () banked
  8570  002318  6F86               	movwf	___lwdiv@counter& (0+255),b
  8571  00231A  D006               	goto	l3882
  8572  00231C                     l3880:
  8573                           
  8574                           ; BSR set to: 0
  8575  00231C  0100               	movlb	0	; () banked
  8576  00231E  90D8               	bcf	status,0,c
  8577  002320  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8578  002322  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8579  002324  0100               	movlb	0	; () banked
  8580  002326  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8581  002328                     l3882:
  8582                           
  8583                           ; BSR set to: 0
  8584  002328  0100               	movlb	0	; () banked
  8585  00232A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8586  00232C  D7F7               	goto	l3880
  8587  00232E                     l3884:
  8588                           
  8589                           ; BSR set to: 0
  8590  00232E  0100               	movlb	0	; () banked
  8591  002330  90D8               	bcf	status,0,c
  8592  002332  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8593  002334  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8594                           
  8595                           ; BSR set to: 0
  8596  002336  0100               	movlb	0	; () banked
  8597  002338  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8598  00233A  0100               	movlb	0	; () banked
  8599  00233C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8600  00233E  0100               	movlb	0	; () banked
  8601  002340  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8602  002342  0100               	movlb	0	; () banked
  8603  002344  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8604  002346  A0D8               	btfss	status,0,c
  8605  002348  D00A               	goto	l3892
  8606                           
  8607                           ; BSR set to: 0
  8608  00234A  0100               	movlb	0	; () banked
  8609  00234C  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8610  00234E  0100               	movlb	0	; () banked
  8611  002350  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8612  002352  0100               	movlb	0	; () banked
  8613  002354  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8614  002356  0100               	movlb	0	; () banked
  8615  002358  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8616                           
  8617                           ; BSR set to: 0
  8618  00235A  0100               	movlb	0	; () banked
  8619  00235C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8620  00235E                     l3892:
  8621                           
  8622                           ; BSR set to: 0
  8623  00235E  0100               	movlb	0	; () banked
  8624  002360  90D8               	bcf	status,0,c
  8625  002362  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8626  002364  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629  002366  0100               	movlb	0	; () banked
  8630  002368  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8631  00236A  D7E1               	goto	l3884
  8632  00236C                     l1349:
  8633                           
  8634                           ; BSR set to: 0
  8635  00236C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8636  002370  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8637                           
  8638                           ; BSR set to: 0
  8639  002374  0012               	return		;funcret
  8640  002376                     __end_of___lwdiv:
  8641                           	opt stack 0
  8642                           tblptru	equ	0xFF8
  8643                           tblptrh	equ	0xFF7
  8644                           tblptrl	equ	0xFF6
  8645                           tablat	equ	0xFF5
  8646                           prodh	equ	0xFF4
  8647                           prodl	equ	0xFF3
  8648                           intcon	equ	0xFF2
  8649                           intcon2	equ	0xFF1
  8650                           intcon3	equ	0xFF0
  8651                           indf0	equ	0xFEF
  8652                           postinc0	equ	0xFEE
  8653                           fsr0h	equ	0xFEA
  8654                           fsr0l	equ	0xFE9
  8655                           wreg	equ	0xFE8
  8656                           postdec1	equ	0xFE5
  8657                           fsr1l	equ	0xFE1
  8658                           indf2	equ	0xFDF
  8659                           postinc2	equ	0xFDE
  8660                           postdec2	equ	0xFDD
  8661                           fsr2h	equ	0xFDA
  8662                           fsr2l	equ	0xFD9
  8663                           status	equ	0xFD8
  8664                           
  8665 ;; *************** function _lcdInst *****************
  8666 ;; Defined at:
  8667 ;;		line 15 in file "lcd.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  data            1    wreg     unsigned char 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  data            1    2[BANK0 ] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      void 
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;Total ram usage:        1 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    8
  8688 ;; This function calls:
  8689 ;;		_lcdNibble
  8690 ;; This function is called by:
  8691 ;;		_UI
  8692 ;;		_change_state_to_menu_start
  8693 ;;		_change_state_to_menu_12
  8694 ;;		_change_state_to_menu_22
  8695 ;;		_initLCD
  8696 ;;		_printRTC
  8697 ;;		_Loading
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           	psect	text40
  8702  002D10                     __ptext40:
  8703                           	opt stack 0
  8704  002D10                     _lcdInst:
  8705                           	opt stack 20
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;incstack = 0
  8709                           ;lcdInst@data stored from wreg
  8710  002D10  0100               	movlb	0	; () banked
  8711  002D12  6F82               	movwf	lcdInst@data& (0+255),b
  8712                           
  8713                           ;lcd.c: 16: LATDbits.LATD2 = 0;
  8714  002D14  948C               	bcf	3980,2,c	;volatile
  8715                           
  8716                           ;lcd.c: 17: lcdNibble(data);
  8717  002D16  0100               	movlb	0	; () banked
  8718  002D18  5182               	movf	lcdInst@data& (0+255),w,b
  8719  002D1A  EC2B  F012         	call	_lcdNibble
  8720  002D1E  0012               	return		;funcret
  8721  002D20                     __end_of_lcdInst:
  8722                           	opt stack 0
  8723                           tblptru	equ	0xFF8
  8724                           tblptrh	equ	0xFF7
  8725                           tblptrl	equ	0xFF6
  8726                           tablat	equ	0xFF5
  8727                           prodh	equ	0xFF4
  8728                           prodl	equ	0xFF3
  8729                           intcon	equ	0xFF2
  8730                           intcon2	equ	0xFF1
  8731                           intcon3	equ	0xFF0
  8732                           indf0	equ	0xFEF
  8733                           postinc0	equ	0xFEE
  8734                           fsr0h	equ	0xFEA
  8735                           fsr0l	equ	0xFE9
  8736                           wreg	equ	0xFE8
  8737                           postdec1	equ	0xFE5
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           fsr2h	equ	0xFDA
  8743                           fsr2l	equ	0xFD9
  8744                           status	equ	0xFD8
  8745                           
  8746 ;; *************** function _lcdNibble *****************
  8747 ;; Defined at:
  8748 ;;		line 25 in file "lcd.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  data            1    wreg     unsigned char 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  data            1    1[BANK0 ] unsigned char 
  8753 ;;  temp            1    0[BANK0 ] unsigned char 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;                  1    wreg      void 
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, status,0
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;Total ram usage:        2 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    7
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_lcdInst
  8774 ;;		_putch
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text41
  8779  002456                     __ptext41:
  8780                           	opt stack 0
  8781  002456                     _lcdNibble:
  8782                           	opt stack 20
  8783                           
  8784                           ;incstack = 0
  8785                           ;lcdNibble@data stored from wreg
  8786  002456  0100               	movlb	0	; () banked
  8787  002458  6F81               	movwf	lcdNibble@data& (0+255),b
  8788                           
  8789                           ;lcd.c: 27: char temp = data & 0xF0;
  8790  00245A  0100               	movlb	0	; () banked
  8791  00245C  5181               	movf	lcdNibble@data& (0+255),w,b
  8792  00245E  0BF0               	andlw	240
  8793  002460  0100               	movlb	0	; () banked
  8794  002462  6F80               	movwf	lcdNibble@temp& (0+255),b
  8795                           
  8796                           ;lcd.c: 28: LATD = LATD & 0x0F;
  8797  002464  508C               	movf	3980,w,c	;volatile
  8798  002466  0B0F               	andlw	15
  8799  002468  6E8C               	movwf	3980,c	;volatile
  8800                           
  8801                           ;lcd.c: 29: LATD = temp | LATD;
  8802  00246A  0100               	movlb	0	; () banked
  8803  00246C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8804  00246E  108C               	iorwf	3980,w,c	;volatile
  8805  002470  6E8C               	movwf	3980,c	;volatile
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  8809  002472  868C               	bsf	3980,3,c	;volatile
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8813  002474  0E42               	movlw	66
  8814  002476                     u5197:
  8815  002476  2EE8               	decfsz	wreg,f,c
  8816  002478  D7FE               	bra	u5197
  8817  00247A  D000               	nop2	
  8818                           
  8819                           ;lcd.c: 33: LATDbits.LATD3 = 0;
  8820  00247C  968C               	bcf	3980,3,c	;volatile
  8821                           
  8822                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8823  00247E  0E42               	movlw	66
  8824  002480                     u5207:
  8825  002480  2EE8               	decfsz	wreg,f,c
  8826  002482  D7FE               	bra	u5207
  8827  002484  D000               	nop2	
  8828                           
  8829                           ;lcd.c: 36: data = data << 4;
  8830  002486  0100               	movlb	0	; () banked
  8831  002488  3981               	swapf	lcdNibble@data& (0+255),w,b
  8832  00248A  0BF0               	andlw	240
  8833  00248C  0100               	movlb	0	; () banked
  8834  00248E  6F81               	movwf	lcdNibble@data& (0+255),b
  8835                           
  8836                           ;lcd.c: 38: temp = data & 0xF0;
  8837  002490  0100               	movlb	0	; () banked
  8838  002492  5181               	movf	lcdNibble@data& (0+255),w,b
  8839  002494  0BF0               	andlw	240
  8840  002496  0100               	movlb	0	; () banked
  8841  002498  6F80               	movwf	lcdNibble@temp& (0+255),b
  8842                           
  8843                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8844  00249A  508C               	movf	3980,w,c	;volatile
  8845  00249C  0B0F               	andlw	15
  8846  00249E  6E8C               	movwf	3980,c	;volatile
  8847                           
  8848                           ;lcd.c: 40: LATD = temp | LATD;
  8849  0024A0  0100               	movlb	0	; () banked
  8850  0024A2  5180               	movf	lcdNibble@temp& (0+255),w,b
  8851  0024A4  108C               	iorwf	3980,w,c	;volatile
  8852  0024A6  6E8C               	movwf	3980,c	;volatile
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;lcd.c: 42: LATDbits.LATD3 = 1;
  8856  0024A8  868C               	bsf	3980,3,c	;volatile
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8860  0024AA  0E42               	movlw	66
  8861  0024AC                     u5217:
  8862  0024AC  2EE8               	decfsz	wreg,f,c
  8863  0024AE  D7FE               	bra	u5217
  8864  0024B0  D000               	nop2	
  8865                           
  8866                           ;lcd.c: 44: LATDbits.LATD3 = 0;
  8867  0024B2  968C               	bcf	3980,3,c	;volatile
  8868                           
  8869                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8870  0024B4  0E42               	movlw	66
  8871  0024B6                     u5227:
  8872  0024B6  2EE8               	decfsz	wreg,f,c
  8873  0024B8  D7FE               	bra	u5227
  8874  0024BA  D000               	nop2	
  8875  0024BC  0012               	return		;funcret
  8876  0024BE                     __end_of_lcdNibble:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon2	equ	0xFF1
  8886                           intcon3	equ	0xFF0
  8887                           indf0	equ	0xFEF
  8888                           postinc0	equ	0xFEE
  8889                           fsr0h	equ	0xFEA
  8890                           fsr0l	equ	0xFE9
  8891                           wreg	equ	0xFE8
  8892                           postdec1	equ	0xFE5
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function ___awmod *****************
  8902 ;; Defined at:
  8903 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  dividend        2    0[BANK0 ] int 
  8906 ;;  divisor         2    2[BANK0 ] int 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  sign            1    5[BANK0 ] unsigned char 
  8909 ;;  counter         1    4[BANK0 ] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  2    0[BANK0 ] int 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8919 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;Total ram usage:        6 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    7
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_UI
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text42
  8934  00203C                     __ptext42:
  8935                           	opt stack 0
  8936  00203C                     ___awmod:
  8937                           	opt stack 22
  8938                           
  8939                           ;incstack = 0
  8940  00203C  0E00               	movlw	0
  8941  00203E  0100               	movlb	0	; () banked
  8942  002040  6F85               	movwf	___awmod@sign& (0+255),b
  8943                           
  8944                           ; BSR set to: 0
  8945  002042  0100               	movlb	0	; () banked
  8946  002044  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8947  002046  D008               	goto	l4990
  8948                           
  8949                           ; BSR set to: 0
  8950  002048  0100               	movlb	0	; () banked
  8951  00204A  6D80               	negf	___awmod@dividend& (0+255),b
  8952  00204C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8953  00204E  B0D8               	btfsc	status,0,c
  8954  002050  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8955                           
  8956                           ; BSR set to: 0
  8957  002052  0E01               	movlw	1
  8958  002054  0100               	movlb	0	; () banked
  8959  002056  6F85               	movwf	___awmod@sign& (0+255),b
  8960  002058                     l4990:
  8961                           
  8962                           ; BSR set to: 0
  8963  002058  0100               	movlb	0	; () banked
  8964  00205A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8965  00205C  D005               	goto	l4994
  8966                           
  8967                           ; BSR set to: 0
  8968  00205E  0100               	movlb	0	; () banked
  8969  002060  6D82               	negf	___awmod@divisor& (0+255),b
  8970  002062  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8971  002064  B0D8               	btfsc	status,0,c
  8972  002066  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8973  002068                     l4994:
  8974                           
  8975                           ; BSR set to: 0
  8976  002068  0100               	movlb	0	; () banked
  8977  00206A  5182               	movf	___awmod@divisor& (0+255),w,b
  8978  00206C  0100               	movlb	0	; () banked
  8979  00206E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8980  002070  B4D8               	btfsc	status,2,c
  8981  002072  D026               	goto	l5010
  8982                           
  8983                           ; BSR set to: 0
  8984  002074  0E01               	movlw	1
  8985  002076  0100               	movlb	0	; () banked
  8986  002078  6F84               	movwf	___awmod@counter& (0+255),b
  8987  00207A  D006               	goto	l5000
  8988  00207C                     l4998:
  8989                           
  8990                           ; BSR set to: 0
  8991  00207C  0100               	movlb	0	; () banked
  8992  00207E  90D8               	bcf	status,0,c
  8993  002080  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8994  002082  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8995  002084  0100               	movlb	0	; () banked
  8996  002086  2B84               	incf	___awmod@counter& (0+255),f,b
  8997  002088                     l5000:
  8998                           
  8999                           ; BSR set to: 0
  9000  002088  0100               	movlb	0	; () banked
  9001  00208A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9002  00208C  D7F7               	goto	l4998
  9003  00208E                     l5002:
  9004                           
  9005                           ; BSR set to: 0
  9006  00208E  0100               	movlb	0	; () banked
  9007  002090  5182               	movf	___awmod@divisor& (0+255),w,b
  9008  002092  0100               	movlb	0	; () banked
  9009  002094  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9010  002096  0100               	movlb	0	; () banked
  9011  002098  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9012  00209A  0100               	movlb	0	; () banked
  9013  00209C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9014  00209E  A0D8               	btfss	status,0,c
  9015  0020A0  D008               	goto	l5006
  9016                           
  9017                           ; BSR set to: 0
  9018  0020A2  0100               	movlb	0	; () banked
  9019  0020A4  5182               	movf	___awmod@divisor& (0+255),w,b
  9020  0020A6  0100               	movlb	0	; () banked
  9021  0020A8  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9022  0020AA  0100               	movlb	0	; () banked
  9023  0020AC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9024  0020AE  0100               	movlb	0	; () banked
  9025  0020B0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9026  0020B2                     l5006:
  9027                           
  9028                           ; BSR set to: 0
  9029  0020B2  0100               	movlb	0	; () banked
  9030  0020B4  90D8               	bcf	status,0,c
  9031  0020B6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9032  0020B8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9033                           
  9034                           ; BSR set to: 0
  9035  0020BA  0100               	movlb	0	; () banked
  9036  0020BC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9037  0020BE  D7E7               	goto	l5002
  9038  0020C0                     l5010:
  9039                           
  9040                           ; BSR set to: 0
  9041  0020C0  0100               	movlb	0	; () banked
  9042  0020C2  5185               	movf	___awmod@sign& (0+255),w,b
  9043  0020C4  0100               	movlb	0	; () banked
  9044  0020C6  B4D8               	btfsc	status,2,c
  9045  0020C8  D005               	goto	l5014
  9046                           
  9047                           ; BSR set to: 0
  9048  0020CA  0100               	movlb	0	; () banked
  9049  0020CC  6D80               	negf	___awmod@dividend& (0+255),b
  9050  0020CE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9051  0020D0  B0D8               	btfsc	status,0,c
  9052  0020D2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9053  0020D4                     l5014:
  9054                           
  9055                           ; BSR set to: 0
  9056  0020D4  C080  F080         	movff	___awmod@dividend,?___awmod
  9057  0020D8  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9058  0020DC  0012               	return	
  9059  0020DE                     __end_of___awmod:
  9060                           	opt stack 0
  9061                           tblptru	equ	0xFF8
  9062                           tblptrh	equ	0xFF7
  9063                           tblptrl	equ	0xFF6
  9064                           tablat	equ	0xFF5
  9065                           prodh	equ	0xFF4
  9066                           prodl	equ	0xFF3
  9067                           intcon	equ	0xFF2
  9068                           intcon2	equ	0xFF1
  9069                           intcon3	equ	0xFF0
  9070                           indf0	equ	0xFEF
  9071                           postinc0	equ	0xFEE
  9072                           fsr0h	equ	0xFEA
  9073                           fsr0l	equ	0xFE9
  9074                           wreg	equ	0xFE8
  9075                           postdec1	equ	0xFE5
  9076                           fsr1l	equ	0xFE1
  9077                           indf2	equ	0xFDF
  9078                           postinc2	equ	0xFDE
  9079                           postdec2	equ	0xFDD
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function ___awdiv *****************
  9085 ;; Defined at:
  9086 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  dividend        2    6[BANK0 ] int 
  9089 ;;  divisor         2    8[BANK0 ] int 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  quotient        2   12[BANK0 ] int 
  9092 ;;  sign            1   11[BANK0 ] unsigned char 
  9093 ;;  counter         1   10[BANK0 ] unsigned char 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  2    6[BANK0 ] int 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;Total ram usage:        8 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    7
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_UI
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text43
  9118  001D6C                     __ptext43:
  9119                           	opt stack 0
  9120  001D6C                     ___awdiv:
  9121                           	opt stack 22
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;incstack = 0
  9125  001D6C  0E00               	movlw	0
  9126  001D6E  0100               	movlb	0	; () banked
  9127  001D70  6F8B               	movwf	___awdiv@sign& (0+255),b
  9128                           
  9129                           ; BSR set to: 0
  9130  001D72  0100               	movlb	0	; () banked
  9131  001D74  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9132  001D76  D008               	goto	l4946
  9133                           
  9134                           ; BSR set to: 0
  9135  001D78  0100               	movlb	0	; () banked
  9136  001D7A  6D88               	negf	___awdiv@divisor& (0+255),b
  9137  001D7C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9138  001D7E  B0D8               	btfsc	status,0,c
  9139  001D80  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9140                           
  9141                           ; BSR set to: 0
  9142  001D82  0E01               	movlw	1
  9143  001D84  0100               	movlb	0	; () banked
  9144  001D86  6F8B               	movwf	___awdiv@sign& (0+255),b
  9145  001D88                     l4946:
  9146                           
  9147                           ; BSR set to: 0
  9148  001D88  0100               	movlb	0	; () banked
  9149  001D8A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9150  001D8C  D008               	goto	l4952
  9151                           
  9152                           ; BSR set to: 0
  9153  001D8E  0100               	movlb	0	; () banked
  9154  001D90  6D86               	negf	___awdiv@dividend& (0+255),b
  9155  001D92  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9156  001D94  B0D8               	btfsc	status,0,c
  9157  001D96  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9158                           
  9159                           ; BSR set to: 0
  9160  001D98  0E01               	movlw	1
  9161  001D9A  0100               	movlb	0	; () banked
  9162  001D9C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9163  001D9E                     l4952:
  9164                           
  9165                           ; BSR set to: 0
  9166  001D9E  0E00               	movlw	0
  9167  001DA0  0100               	movlb	0	; () banked
  9168  001DA2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9169  001DA4  0E00               	movlw	0
  9170  001DA6  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9171                           
  9172                           ; BSR set to: 0
  9173  001DA8  0100               	movlb	0	; () banked
  9174  001DAA  5188               	movf	___awdiv@divisor& (0+255),w,b
  9175  001DAC  0100               	movlb	0	; () banked
  9176  001DAE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9177  001DB0  B4D8               	btfsc	status,2,c
  9178  001DB2  D02C               	goto	l4974
  9179                           
  9180                           ; BSR set to: 0
  9181  001DB4  0E01               	movlw	1
  9182  001DB6  0100               	movlb	0	; () banked
  9183  001DB8  6F8A               	movwf	___awdiv@counter& (0+255),b
  9184  001DBA  D006               	goto	l4960
  9185  001DBC                     l4958:
  9186                           
  9187                           ; BSR set to: 0
  9188  001DBC  0100               	movlb	0	; () banked
  9189  001DBE  90D8               	bcf	status,0,c
  9190  001DC0  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9191  001DC2  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9192  001DC4  0100               	movlb	0	; () banked
  9193  001DC6  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9194  001DC8                     l4960:
  9195                           
  9196                           ; BSR set to: 0
  9197  001DC8  0100               	movlb	0	; () banked
  9198  001DCA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9199  001DCC  D7F7               	goto	l4958
  9200  001DCE                     l4962:
  9201                           
  9202                           ; BSR set to: 0
  9203  001DCE  0100               	movlb	0	; () banked
  9204  001DD0  90D8               	bcf	status,0,c
  9205  001DD2  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9206  001DD4  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9207                           
  9208                           ; BSR set to: 0
  9209  001DD6  0100               	movlb	0	; () banked
  9210  001DD8  5188               	movf	___awdiv@divisor& (0+255),w,b
  9211  001DDA  0100               	movlb	0	; () banked
  9212  001DDC  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9213  001DDE  0100               	movlb	0	; () banked
  9214  001DE0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9215  001DE2  0100               	movlb	0	; () banked
  9216  001DE4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9217  001DE6  A0D8               	btfss	status,0,c
  9218  001DE8  D00A               	goto	l4970
  9219                           
  9220                           ; BSR set to: 0
  9221  001DEA  0100               	movlb	0	; () banked
  9222  001DEC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9223  001DEE  0100               	movlb	0	; () banked
  9224  001DF0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9225  001DF2  0100               	movlb	0	; () banked
  9226  001DF4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9227  001DF6  0100               	movlb	0	; () banked
  9228  001DF8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9229                           
  9230                           ; BSR set to: 0
  9231  001DFA  0100               	movlb	0	; () banked
  9232  001DFC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9233  001DFE                     l4970:
  9234                           
  9235                           ; BSR set to: 0
  9236  001DFE  0100               	movlb	0	; () banked
  9237  001E00  90D8               	bcf	status,0,c
  9238  001E02  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9239  001E04  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9240                           
  9241                           ; BSR set to: 0
  9242  001E06  0100               	movlb	0	; () banked
  9243  001E08  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9244  001E0A  D7E1               	goto	l4962
  9245  001E0C                     l4974:
  9246                           
  9247                           ; BSR set to: 0
  9248  001E0C  0100               	movlb	0	; () banked
  9249  001E0E  518B               	movf	___awdiv@sign& (0+255),w,b
  9250  001E10  0100               	movlb	0	; () banked
  9251  001E12  B4D8               	btfsc	status,2,c
  9252  001E14  D005               	goto	l4978
  9253                           
  9254                           ; BSR set to: 0
  9255  001E16  0100               	movlb	0	; () banked
  9256  001E18  6D8C               	negf	___awdiv@quotient& (0+255),b
  9257  001E1A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9258  001E1C  B0D8               	btfsc	status,0,c
  9259  001E1E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9260  001E20                     l4978:
  9261                           
  9262                           ; BSR set to: 0
  9263  001E20  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9264  001E24  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9265  001E28  0012               	return	
  9266  001E2A                     __end_of___awdiv:
  9267                           	opt stack 0
  9268                           tblptru	equ	0xFF8
  9269                           tblptrh	equ	0xFF7
  9270                           tblptrl	equ	0xFF6
  9271                           tablat	equ	0xFF5
  9272                           prodh	equ	0xFF4
  9273                           prodl	equ	0xFF3
  9274                           intcon	equ	0xFF2
  9275                           intcon2	equ	0xFF1
  9276                           intcon3	equ	0xFF0
  9277                           indf0	equ	0xFEF
  9278                           postinc0	equ	0xFEE
  9279                           fsr0h	equ	0xFEA
  9280                           fsr0l	equ	0xFE9
  9281                           wreg	equ	0xFE8
  9282                           postdec1	equ	0xFE5
  9283                           fsr1l	equ	0xFE1
  9284                           indf2	equ	0xFDF
  9285                           postinc2	equ	0xFDE
  9286                           postdec2	equ	0xFDD
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function _PortTestA5 *****************
  9292 ;; Defined at:
  9293 ;;		line 15 in file "PortHigh.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		None
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    7
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_main
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           	psect	text44
  9322  002CDC                     __ptext44:
  9323                           	opt stack 0
  9324  002CDC                     _PortTestA5:
  9325                           	opt stack 23
  9326  002CDC                     l99:
  9327  002CDC  A281               	btfss	3969,1,c	;volatile
  9328  002CDE  D7FE               	goto	l99
  9329                           
  9330                           ;PortHigh.c: 19: }
  9331                           ;PortHigh.c: 20: LATAbits.LATA5 = 1;
  9332  002CE0  8A89               	bsf	3977,5,c	;volatile
  9333  002CE2                     l102:
  9334  002CE2  B281               	btfsc	3969,1,c	;volatile
  9335  002CE4  D7FE               	goto	l102
  9336                           
  9337                           ;PortHigh.c: 23: }
  9338                           ;PortHigh.c: 24: __nop();
  9339  002CE6  F000               	nop	
  9340                           
  9341                           ;PortHigh.c: 25: __nop();
  9342  002CE8  F000               	nop	
  9343                           
  9344                           ;PortHigh.c: 26: LATAbits.LATA5 = 0;
  9345  002CEA  9A89               	bcf	3977,5,c	;volatile
  9346  002CEC  0012               	return		;funcret
  9347  002CEE                     __end_of_PortTestA5:
  9348                           	opt stack 0
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           intcon2	equ	0xFF1
  9357                           intcon3	equ	0xFF0
  9358                           indf0	equ	0xFEF
  9359                           postinc0	equ	0xFEE
  9360                           fsr0h	equ	0xFEA
  9361                           fsr0l	equ	0xFE9
  9362                           wreg	equ	0xFE8
  9363                           postdec1	equ	0xFE5
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function _handler *****************
  9373 ;; Defined at:
  9374 ;;		line 16 in file "interruptHandler.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;		None
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  1    wreg      void 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;Total ram usage:       16 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    6
  9395 ;; This function calls:
  9396 ;;		_printSortTimer
  9397 ;;		_updateMenu
  9398 ;; This function is called by:
  9399 ;;		Interrupt level 2
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	intcode
  9404  000008                     __pintcode:
  9405                           	opt stack 0
  9406  000008                     _handler:
  9407                           	opt stack 18
  9408                           
  9409                           ;incstack = 0
  9410  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9411  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  9412                           tblptru	equ	0xFF8
  9413                           tblptrh	equ	0xFF7
  9414                           tblptrl	equ	0xFF6
  9415                           tablat	equ	0xFF5
  9416                           prodh	equ	0xFF4
  9417                           prodl	equ	0xFF3
  9418                           intcon	equ	0xFF2
  9419                           intcon2	equ	0xFF1
  9420                           intcon3	equ	0xFF0
  9421                           indf0	equ	0xFEF
  9422                           postinc0	equ	0xFEE
  9423                           fsr0h	equ	0xFEA
  9424                           fsr0l	equ	0xFE9
  9425                           wreg	equ	0xFE8
  9426                           postdec1	equ	0xFE5
  9427                           fsr1l	equ	0xFE1
  9428                           indf2	equ	0xFDF
  9429                           postinc2	equ	0xFDE
  9430                           postdec2	equ	0xFDD
  9431                           fsr2h	equ	0xFDA
  9432                           fsr2l	equ	0xFD9
  9433                           status	equ	0xFD8
  9434                           
  9435                           	psect	intcode_body
  9436  001866                     __pintcode_body:
  9437                           	opt stack 18
  9438  001866                     int_func:
  9439                           	opt stack 18
  9440  001866  0006               	pop		; remove dummy address from shadow register refresh
  9441  001868  CFFA F04D          	movff	pclath,??_handler+2
  9442  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  9443  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  9444  001874  CFEA F050          	movff	fsr0h,??_handler+5
  9445  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  9446  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  9447  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  9448  001884  CFDA F054          	movff	fsr2h,??_handler+9
  9449  001888  CFF3 F055          	movff	prodl,??_handler+10
  9450  00188C  CFF4 F056          	movff	prodh,??_handler+11
  9451  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  9452  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  9453  001898  CFF8 F059          	movff	tblptru,??_handler+14
  9454  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  9455                           
  9456                           ;interruptHandler.c: 18: if(INT1IF){
  9457  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  9458  0018A2  D018               	goto	i2l5714
  9459                           
  9460                           ;interruptHandler.c: 19: INT1IF = 0;
  9461  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  9462                           
  9463                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
  9464  0018A6  0100               	movlb	0	; () banked
  9465  0018A8  51FB               	movf	_machine_state& (0+255),w,b
  9466  0018AA  A4D8               	btfss	status,2,c
  9467  0018AC  D013               	goto	i2l5714
  9468                           
  9469                           ; BSR set to: 0
  9470                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
  9471  0018AE  3881               	swapf	3969,w,c	;volatile
  9472  0018B0  0B0F               	andlw	15
  9473  0018B2  0B0F               	andlw	15
  9474  0018B4  6E4B               	movwf	??_handler& (0+255),c
  9475  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  9476  0018B8  0EB5               	movlw	low _keys
  9477  0018BA  244B               	addwf	??_handler,w,c
  9478  0018BC  6EF6               	movwf	tblptrl,c
  9479  0018BE  0EFD               	movlw	high _keys
  9480  0018C0  204C               	addwfc	??_handler+1,w,c
  9481  0018C2  6EF7               	movwf	tblptrh,c
  9482  0018C4                     	if	1	;There are 3 active tblptr bytes
  9483  0018C4  6AF8               	clrf	tblptru,c
  9484  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  9485  0018C8  22F8               	addwfc	tblptru,f,c
  9486  0018CA                     	endif
  9487  0018CA  0008               	tblrd		*
  9488  0018CC  CFF5 F07D          	movff	tablat,_input	;volatile
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;interruptHandler.c: 22: updateMenu();
  9492  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  9493  0018D4                     i2l5714:
  9494                           
  9495                           ;interruptHandler.c: 23: }
  9496                           ;interruptHandler.c: 24: }
  9497                           ;interruptHandler.c: 27: if(TMR0IF){
  9498  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  9499  0018D6  D00C               	goto	i2l5728
  9500                           
  9501                           ;interruptHandler.c: 28: TMR0IF = 0;
  9502  0018D8  94F2               	bcf	intcon,2,c	;volatile
  9503                           
  9504                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
  9505  0018DA  0100               	movlb	0	; () banked
  9506  0018DC  05FB               	decf	_machine_state& (0+255),w,b
  9507  0018DE  A4D8               	btfss	status,2,c
  9508  0018E0  D007               	goto	i2l5728
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;interruptHandler.c: 30: printSortTimer();
  9512  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  9513                           
  9514                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
  9515  0018E6  0E85               	movlw	133
  9516  0018E8  6ED7               	movwf	4055,c	;volatile
  9517                           
  9518                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
  9519  0018EA  0EEE               	movlw	238
  9520  0018EC  6ED6               	movwf	4054,c	;volatile
  9521                           
  9522                           ;interruptHandler.c: 34: TMR0ON = 1;
  9523  0018EE  8ED5               	bsf	4053,7,c	;volatile
  9524  0018F0                     i2l5728:
  9525                           
  9526                           ;interruptHandler.c: 35: }
  9527                           ;interruptHandler.c: 36: }
  9528                           ;interruptHandler.c: 39: if(TMR1IF){
  9529  0018F0  A09E               	btfss	3998,0,c	;volatile
  9530  0018F2  D022               	goto	i2l5752
  9531                           
  9532                           ;interruptHandler.c: 40: TMR1IF = 0;
  9533  0018F4  909E               	bcf	3998,0,c	;volatile
  9534                           
  9535                           ;interruptHandler.c: 41: TMR1ON = 0;
  9536  0018F6  90CD               	bcf	4045,0,c	;volatile
  9537                           
  9538                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
  9539  0018F8  0100               	movlb	0	; () banked
  9540  0018FA  05FB               	decf	_machine_state& (0+255),w,b
  9541  0018FC  A4D8               	btfss	status,2,c
  9542  0018FE  D01C               	goto	i2l5752
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;interruptHandler.c: 43: if(was_low_1){
  9546  001900  5079               	movf	_was_low_1,w,c	;volatile
  9547  001902  107A               	iorwf	_was_low_1+1,w,c	;volatile
  9548  001904  B4D8               	btfsc	status,2,c
  9549  001906  D00A               	goto	i2l795
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
  9553  001908  828B               	bsf	3979,1,c	;volatile
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;interruptHandler.c: 45: was_low_1 = 0;
  9557  00190A  0E00               	movlw	0
  9558  00190C  6E7A               	movwf	_was_low_1+1,c	;volatile
  9559  00190E  0E00               	movlw	0
  9560  001910  6E79               	movwf	_was_low_1,c	;volatile
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
  9564  001912  C05B  FFCF         	movff	_servoTimes,4047	;volatile
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
  9568  001916  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
  9569                           
  9570                           ;interruptHandler.c: 48: }
  9571  00191A  D00D               	goto	i2l5750
  9572  00191C                     i2l795:
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;interruptHandler.c: 49: else{
  9576                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
  9577  00191C  928B               	bcf	3979,1,c	;volatile
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;interruptHandler.c: 51: was_low_1 = 1;
  9581  00191E  0E00               	movlw	0
  9582  001920  6E7A               	movwf	_was_low_1+1,c	;volatile
  9583  001922  0E01               	movlw	1
  9584  001924  6E79               	movwf	_was_low_1,c	;volatile
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
  9588  001926  505B               	movf	_servoTimes,w,c
  9589  001928  0800               	sublw	0
  9590  00192A  0F20               	addlw	32
  9591  00192C  6ECF               	movwf	4047,c	;volatile
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
  9595  00192E  505D               	movf	_servoTimes+2,w,c
  9596  001930  0800               	sublw	0
  9597  001932  0F20               	addlw	32
  9598  001934  6ECE               	movwf	4046,c	;volatile
  9599  001936                     i2l5750:
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;interruptHandler.c: 54: }
  9603                           ;interruptHandler.c: 55: TMR1ON = 1;
  9604  001936  80CD               	bsf	4045,0,c	;volatile
  9605  001938                     i2l5752:
  9606                           
  9607                           ;interruptHandler.c: 56: }
  9608                           ;interruptHandler.c: 57: }
  9609                           ;interruptHandler.c: 59: if(TMR3IF){
  9610  001938  A2A1               	btfss	4001,1,c	;volatile
  9611  00193A  D022               	goto	i2l801
  9612                           
  9613                           ;interruptHandler.c: 60: TMR3IF = 0;
  9614  00193C  92A1               	bcf	4001,1,c	;volatile
  9615                           
  9616                           ;interruptHandler.c: 61: TMR3ON = 0;
  9617  00193E  90B1               	bcf	4017,0,c	;volatile
  9618                           
  9619                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
  9620  001940  0100               	movlb	0	; () banked
  9621  001942  05FB               	decf	_machine_state& (0+255),w,b
  9622  001944  A4D8               	btfss	status,2,c
  9623  001946  D01C               	goto	i2l801
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;interruptHandler.c: 63: if(was_low_3){
  9627  001948  507B               	movf	_was_low_3,w,c	;volatile
  9628  00194A  107C               	iorwf	_was_low_3+1,w,c	;volatile
  9629  00194C  B4D8               	btfsc	status,2,c
  9630  00194E  D00A               	goto	i2l799
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
  9634  001950  848B               	bsf	3979,2,c	;volatile
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;interruptHandler.c: 65: was_low_3 = 0;
  9638  001952  0E00               	movlw	0
  9639  001954  6E7C               	movwf	_was_low_3+1,c	;volatile
  9640  001956  0E00               	movlw	0
  9641  001958  6E7B               	movwf	_was_low_3,c	;volatile
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
  9645  00195A  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
  9649  00195E  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
  9650                           
  9651                           ;interruptHandler.c: 68: }
  9652  001962  D00D               	goto	i2l5774
  9653  001964                     i2l799:
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;interruptHandler.c: 69: else{
  9657                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
  9658  001964  948B               	bcf	3979,2,c	;volatile
  9659                           
  9660                           ; BSR set to: 0
  9661                           ;interruptHandler.c: 71: was_low_3 = 1;
  9662  001966  0E00               	movlw	0
  9663  001968  6E7C               	movwf	_was_low_3+1,c	;volatile
  9664  00196A  0E01               	movlw	1
  9665  00196C  6E7B               	movwf	_was_low_3,c	;volatile
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
  9669  00196E  505F               	movf	_servoTimes+4,w,c
  9670  001970  0800               	sublw	0
  9671  001972  0F20               	addlw	32
  9672  001974  6EB3               	movwf	4019,c	;volatile
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
  9676  001976  5061               	movf	_servoTimes+6,w,c
  9677  001978  0800               	sublw	0
  9678  00197A  0F20               	addlw	32
  9679  00197C  6EB2               	movwf	4018,c	;volatile
  9680  00197E                     i2l5774:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;interruptHandler.c: 74: }
  9684                           ;interruptHandler.c: 75: TMR3ON = 1;
  9685  00197E  80B1               	bsf	4017,0,c	;volatile
  9686  001980                     i2l801:
  9687  001980  C05A  FFF5         	movff	??_handler+15,tablat
  9688  001984  C059  FFF8         	movff	??_handler+14,tblptru
  9689  001988  C058  FFF7         	movff	??_handler+13,tblptrh
  9690  00198C  C057  FFF6         	movff	??_handler+12,tblptrl
  9691  001990  C056  FFF4         	movff	??_handler+11,prodh
  9692  001994  C055  FFF3         	movff	??_handler+10,prodl
  9693  001998  C054  FFDA         	movff	??_handler+9,fsr2h
  9694  00199C  C053  FFD9         	movff	??_handler+8,fsr2l
  9695  0019A0  C052  FFE2         	movff	??_handler+7,fsr1h
  9696  0019A4  C051  FFE1         	movff	??_handler+6,fsr1l
  9697  0019A8  C050  FFEA         	movff	??_handler+5,fsr0h
  9698  0019AC  C04F  FFE9         	movff	??_handler+4,fsr0l
  9699  0019B0  C04E  FFFB         	movff	??_handler+3,pclatu
  9700  0019B4  C04D  FFFA         	movff	??_handler+2,pclath
  9701  0019B8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9702  0019BA  0011               	retfie		f
  9703  0019BC                     __end_of_handler:
  9704                           	opt stack 0
  9705                           pclatu	equ	0xFFB
  9706                           pclath	equ	0xFFA
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           intcon3	equ	0xFF0
  9716                           indf0	equ	0xFEF
  9717                           postinc0	equ	0xFEE
  9718                           fsr0h	equ	0xFEA
  9719                           fsr0l	equ	0xFE9
  9720                           wreg	equ	0xFE8
  9721                           postdec1	equ	0xFE5
  9722                           fsr1h	equ	0xFE2
  9723                           fsr1l	equ	0xFE1
  9724                           indf2	equ	0xFDF
  9725                           postinc2	equ	0xFDE
  9726                           postdec2	equ	0xFDD
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8
  9730                           
  9731 ;; *************** function _updateMenu *****************
  9732 ;; Defined at:
  9733 ;;		line 158 in file "UI.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;		None
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;		None
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  1    wreg      void 
  9740 ;; Registers used:
  9741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;Total ram usage:        2 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; Hardware stack levels required when called:    5
  9754 ;; This function calls:
  9755 ;;		_change_state_to_logs_11
  9756 ;;		_change_state_to_logs_12
  9757 ;;		_change_state_to_logs_22
  9758 ;;		_change_state_to_logs_23
  9759 ;;		_change_state_to_logs_33
  9760 ;;		_change_state_to_logs_34
  9761 ;;		_change_state_to_menu_11
  9762 ;;		_change_state_to_menu_23
  9763 ;;		_dispLogs
  9764 ;;		_inputHandler
  9765 ;;		i2_change_state_to_menu_12
  9766 ;;		i2_change_state_to_menu_22
  9767 ;;		i2_change_state_to_menu_start
  9768 ;; This function is called by:
  9769 ;;		_handler
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text46
  9774  000F90                     __ptext46:
  9775                           	opt stack 0
  9776  000F90                     _updateMenu:
  9777                           	opt stack 18
  9778                           
  9779                           ;UI.c: 159: up = 0; down = 0; enter = 0; back = 0;
  9780                           
  9781                           ;incstack = 0
  9782  000F90  0E00               	movlw	0
  9783  000F92  6E78               	movwf	_up+1,c
  9784  000F94  0E00               	movlw	0
  9785  000F96  6E77               	movwf	_up,c
  9786  000F98  0E00               	movlw	0
  9787  000F9A  6E68               	movwf	_down+1,c
  9788  000F9C  0E00               	movlw	0
  9789  000F9E  6E67               	movwf	_down,c
  9790  000FA0  0E00               	movlw	0
  9791  000FA2  6E6A               	movwf	_enter+1,c
  9792  000FA4  0E00               	movlw	0
  9793  000FA6  6E69               	movwf	_enter,c
  9794  000FA8  0E00               	movlw	0
  9795  000FAA  6E66               	movwf	_back+1,c
  9796  000FAC  0E00               	movlw	0
  9797  000FAE  6E65               	movwf	_back,c
  9798                           
  9799                           ;UI.c: 160: (INTCONbits.GIE = 0);
  9800  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9801                           
  9802                           ;UI.c: 162: if (inputHandler()
  9803                           ;UI.c: 165: ){
  9804  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  9805  000FB6  502A               	movf	?_inputHandler,w,c
  9806  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9807  000FBA  A4D8               	btfss	status,2,c
  9808  000FBC  D112               	goto	i2l5484
  9809  000FBE  D146               	goto	i2l228
  9810  000FC0                     i2l5336:
  9811                           
  9812                           ;UI.c: 169: change_state_to_menu_11();
  9813  000FC0  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
  9814                           
  9815                           ;UI.c: 170: break;
  9816  000FC4  D143               	goto	i2l228
  9817  000FC6                     i2l5338:
  9818                           
  9819                           ;UI.c: 173: if(up){
  9820  000FC6  5077               	movf	_up,w,c
  9821  000FC8  1078               	iorwf	_up+1,w,c
  9822  000FCA  B4D8               	btfsc	status,2,c
  9823  000FCC  D003               	goto	i2l5342
  9824                           
  9825                           ;UI.c: 174: change_state_to_menu_23();
  9826  000FCE  EC88  F014         	call	_change_state_to_menu_23	;wreg free
  9827                           
  9828                           ;UI.c: 175: }
  9829  000FD2  D13C               	goto	i2l228
  9830  000FD4                     i2l5342:
  9831                           
  9832                           ;UI.c: 176: else if(down){
  9833  000FD4  5067               	movf	_down,w,c
  9834  000FD6  1068               	iorwf	_down+1,w,c
  9835  000FD8  B4D8               	btfsc	status,2,c
  9836  000FDA  D003               	goto	i2l5346
  9837                           
  9838                           ;UI.c: 177: change_state_to_menu_12();
  9839  000FDC  EC70  F014         	call	i2_change_state_to_menu_12	;wreg free
  9840                           
  9841                           ;UI.c: 178: }
  9842  000FE0  D135               	goto	i2l228
  9843  000FE2                     i2l5346:
  9844                           
  9845                           ;UI.c: 179: else if(enter){
  9846  000FE2  5069               	movf	_enter,w,c
  9847  000FE4  106A               	iorwf	_enter+1,w,c
  9848  000FE6  B4D8               	btfsc	status,2,c
  9849  000FE8  D131               	goto	i2l228
  9850                           
  9851                           ;UI.c: 180: change_state_to_menu_start();
  9852  000FEA  ECB5  F015         	call	i2_change_state_to_menu_start	;wreg free
  9853                           
  9854                           ;UI.c: 181: }
  9855                           ;UI.c: 182: break;
  9856  000FEE  D12E               	goto	i2l228
  9857  000FF0                     i2l5350:
  9858                           
  9859                           ;UI.c: 185: if(up){
  9860  000FF0  5077               	movf	_up,w,c
  9861  000FF2  1078               	iorwf	_up+1,w,c
  9862  000FF4  B4D8               	btfsc	status,2,c
  9863  000FF6  D003               	goto	i2l5354
  9864                           
  9865                           ;UI.c: 186: change_state_to_menu_11();
  9866  000FF8  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
  9867                           
  9868                           ;UI.c: 187: }
  9869  000FFC  D127               	goto	i2l228
  9870  000FFE                     i2l5354:
  9871                           
  9872                           ;UI.c: 188: else if(down){
  9873  000FFE  5067               	movf	_down,w,c
  9874  001000  1068               	iorwf	_down+1,w,c
  9875  001002  B4D8               	btfsc	status,2,c
  9876  001004  D011               	goto	i2l5370
  9877                           
  9878                           ;UI.c: 189: change_state_to_menu_23();
  9879  001006  EC88  F014         	call	_change_state_to_menu_23	;wreg free
  9880                           
  9881                           ;UI.c: 190: }
  9882  00100A  D120               	goto	i2l228
  9883  00100C                     i2l5362:
  9884                           
  9885                           ;UI.c: 197: if(up){
  9886  00100C  5077               	movf	_up,w,c
  9887  00100E  1078               	iorwf	_up+1,w,c
  9888  001010  B4D8               	btfsc	status,2,c
  9889  001012  D003               	goto	i2l5366
  9890                           
  9891                           ;UI.c: 198: change_state_to_menu_11();
  9892  001014  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
  9893                           
  9894                           ;UI.c: 199: }
  9895  001018  D119               	goto	i2l228
  9896  00101A                     i2l5366:
  9897                           
  9898                           ;UI.c: 200: else if(down){
  9899  00101A  5067               	movf	_down,w,c
  9900  00101C  1068               	iorwf	_down+1,w,c
  9901  00101E  B4D8               	btfsc	status,2,c
  9902  001020  D003               	goto	i2l5370
  9903                           
  9904                           ;UI.c: 201: change_state_to_menu_23();
  9905  001022  EC88  F014         	call	_change_state_to_menu_23	;wreg free
  9906                           
  9907                           ;UI.c: 202: }
  9908  001026  D112               	goto	i2l228
  9909  001028                     i2l5370:
  9910                           
  9911                           ;UI.c: 203: else if(enter){
  9912  001028  5069               	movf	_enter,w,c
  9913  00102A  106A               	iorwf	_enter+1,w,c
  9914  00102C  B4D8               	btfsc	status,2,c
  9915  00102E  D10E               	goto	i2l228
  9916                           
  9917                           ;UI.c: 204: machine_state = Sorting_state;
  9918  001030  0E01               	movlw	1
  9919  001032  0100               	movlb	0	; () banked
  9920  001034  6FFB               	movwf	_machine_state& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;UI.c: 205: }
  9924                           ;UI.c: 206: break;
  9925                           
  9926                           ; BSR set to: 0
  9927                           
  9928                           ; BSR set to: 0
  9929  001036  D10A               	goto	i2l228
  9930  001038                     i2l5374:
  9931                           
  9932                           ;UI.c: 209: if(up){
  9933  001038  5077               	movf	_up,w,c
  9934  00103A  1078               	iorwf	_up+1,w,c
  9935  00103C  B4D8               	btfsc	status,2,c
  9936  00103E  D003               	goto	i2l5378
  9937                           
  9938                           ;UI.c: 210: change_state_to_menu_22();
  9939  001040  EC58  F014         	call	i2_change_state_to_menu_22	;wreg free
  9940                           
  9941                           ;UI.c: 211: }
  9942  001044  D103               	goto	i2l228
  9943  001046                     i2l5378:
  9944                           
  9945                           ;UI.c: 212: else if(down){
  9946  001046  5067               	movf	_down,w,c
  9947  001048  1068               	iorwf	_down+1,w,c
  9948  00104A  B4D8               	btfsc	status,2,c
  9949  00104C  D003               	goto	i2l5382
  9950                           
  9951                           ;UI.c: 213: change_state_to_menu_11();
  9952  00104E  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
  9953                           
  9954                           ;UI.c: 214: }
  9955  001052  D0FC               	goto	i2l228
  9956  001054                     i2l5382:
  9957                           
  9958                           ;UI.c: 215: else if(enter){
  9959  001054  5069               	movf	_enter,w,c
  9960  001056  106A               	iorwf	_enter+1,w,c
  9961  001058  B4D8               	btfsc	status,2,c
  9962  00105A  D0F8               	goto	i2l228
  9963                           
  9964                           ;UI.c: 216: change_state_to_logs_11();
  9965  00105C  EC18  F015         	call	_change_state_to_logs_11	;wreg free
  9966                           
  9967                           ;UI.c: 217: }
  9968                           ;UI.c: 218: break;
  9969  001060  D0F5               	goto	i2l228
  9970  001062                     i2l5386:
  9971                           
  9972                           ;UI.c: 221: if(up){
  9973  001062  5077               	movf	_up,w,c
  9974  001064  1078               	iorwf	_up+1,w,c
  9975  001066  B4D8               	btfsc	status,2,c
  9976  001068  D003               	goto	i2l5390
  9977                           
  9978                           ;UI.c: 222: change_state_to_logs_34();
  9979  00106A  ECB8  F014         	call	_change_state_to_logs_34	;wreg free
  9980                           
  9981                           ;UI.c: 223: }
  9982  00106E  D0EE               	goto	i2l228
  9983  001070                     i2l5390:
  9984                           
  9985                           ;UI.c: 224: else if(down){
  9986  001070  5067               	movf	_down,w,c
  9987  001072  1068               	iorwf	_down+1,w,c
  9988  001074  B4D8               	btfsc	status,2,c
  9989  001076  D003               	goto	i2l5394
  9990                           
  9991                           ;UI.c: 225: change_state_to_logs_12();
  9992  001078  EC00  F015         	call	_change_state_to_logs_12	;wreg free
  9993                           
  9994                           ;UI.c: 226: }
  9995  00107C  D0E7               	goto	i2l228
  9996  00107E                     i2l5394:
  9997                           
  9998                           ;UI.c: 227: else if(enter){
  9999  00107E  5069               	movf	_enter,w,c
 10000  001080  106A               	iorwf	_enter+1,w,c
 10001  001082  B4D8               	btfsc	status,2,c
 10002  001084  D007               	goto	i2l5398
 10003                           
 10004                           ;UI.c: 228: dispLogs(1);
 10005  001086  0E00               	movlw	0
 10006  001088  6E02               	movwf	dispLogs@myLog+1,c
 10007  00108A  0E01               	movlw	1
 10008  00108C  6E01               	movwf	dispLogs@myLog,c
 10009  00108E  EC64  F016         	call	_dispLogs	;wreg free
 10010                           
 10011                           ;UI.c: 229: }
 10012  001092  D0DC               	goto	i2l228
 10013  001094                     i2l5398:
 10014                           
 10015                           ;UI.c: 230: else if(back){
 10016  001094  5065               	movf	_back,w,c
 10017  001096  1066               	iorwf	_back+1,w,c
 10018  001098  B4D8               	btfsc	status,2,c
 10019  00109A  D0D8               	goto	i2l228
 10020                           
 10021                           ;UI.c: 231: change_state_to_menu_23();
 10022  00109C  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10023                           
 10024                           ;UI.c: 232: }
 10025                           ;UI.c: 233: break;
 10026  0010A0  D0D5               	goto	i2l228
 10027  0010A2                     i2l5402:
 10028                           
 10029                           ;UI.c: 236: if(up){
 10030  0010A2  5077               	movf	_up,w,c
 10031  0010A4  1078               	iorwf	_up+1,w,c
 10032  0010A6  B4D8               	btfsc	status,2,c
 10033  0010A8  D003               	goto	i2l5406
 10034                           
 10035                           ;UI.c: 237: change_state_to_logs_11();
 10036  0010AA  EC18  F015         	call	_change_state_to_logs_11	;wreg free
 10037                           
 10038                           ;UI.c: 238: }
 10039  0010AE  D0CE               	goto	i2l228
 10040  0010B0                     i2l5406:
 10041                           
 10042                           ;UI.c: 239: else if(down){
 10043  0010B0  5067               	movf	_down,w,c
 10044  0010B2  1068               	iorwf	_down+1,w,c
 10045  0010B4  B4D8               	btfsc	status,2,c
 10046  0010B6  D003               	goto	i2l5410
 10047                           
 10048                           ;UI.c: 240: change_state_to_logs_23();
 10049  0010B8  EC47  F015         	call	_change_state_to_logs_23	;wreg free
 10050                           
 10051                           ;UI.c: 241: }
 10052  0010BC  D0C7               	goto	i2l228
 10053  0010BE                     i2l5410:
 10054                           
 10055                           ;UI.c: 242: else if(enter){
 10056  0010BE  5069               	movf	_enter,w,c
 10057  0010C0  106A               	iorwf	_enter+1,w,c
 10058  0010C2  B4D8               	btfsc	status,2,c
 10059  0010C4  D007               	goto	i2l5414
 10060                           
 10061                           ;UI.c: 243: dispLogs(2);
 10062  0010C6  0E00               	movlw	0
 10063  0010C8  6E02               	movwf	dispLogs@myLog+1,c
 10064  0010CA  0E02               	movlw	2
 10065  0010CC  6E01               	movwf	dispLogs@myLog,c
 10066  0010CE  EC64  F016         	call	_dispLogs	;wreg free
 10067                           
 10068                           ;UI.c: 244: }
 10069  0010D2  D0BC               	goto	i2l228
 10070  0010D4                     i2l5414:
 10071                           
 10072                           ;UI.c: 245: else if(back){
 10073  0010D4  5065               	movf	_back,w,c
 10074  0010D6  1066               	iorwf	_back+1,w,c
 10075  0010D8  B4D8               	btfsc	status,2,c
 10076  0010DA  D0B8               	goto	i2l228
 10077                           
 10078                           ;UI.c: 246: change_state_to_menu_23();
 10079  0010DC  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10080                           
 10081                           ;UI.c: 247: }
 10082                           ;UI.c: 248: break;
 10083  0010E0  D0B5               	goto	i2l228
 10084  0010E2                     i2l5418:
 10085                           
 10086                           ;UI.c: 251: if(up){
 10087  0010E2  5077               	movf	_up,w,c
 10088  0010E4  1078               	iorwf	_up+1,w,c
 10089  0010E6  B4D8               	btfsc	status,2,c
 10090  0010E8  D003               	goto	i2l5422
 10091                           
 10092                           ;UI.c: 252: change_state_to_logs_11();
 10093  0010EA  EC18  F015         	call	_change_state_to_logs_11	;wreg free
 10094                           
 10095                           ;UI.c: 253: }
 10096  0010EE  D0AE               	goto	i2l228
 10097  0010F0                     i2l5422:
 10098                           
 10099                           ;UI.c: 254: else if(down){
 10100  0010F0  5067               	movf	_down,w,c
 10101  0010F2  1068               	iorwf	_down+1,w,c
 10102  0010F4  B4D8               	btfsc	status,2,c
 10103  0010F6  D003               	goto	i2l5426
 10104                           
 10105                           ;UI.c: 255: change_state_to_logs_23();
 10106  0010F8  EC47  F015         	call	_change_state_to_logs_23	;wreg free
 10107                           
 10108                           ;UI.c: 256: }
 10109  0010FC  D0A7               	goto	i2l228
 10110  0010FE                     i2l5426:
 10111                           
 10112                           ;UI.c: 257: else if(enter){
 10113  0010FE  5069               	movf	_enter,w,c
 10114  001100  106A               	iorwf	_enter+1,w,c
 10115  001102  B4D8               	btfsc	status,2,c
 10116  001104  D007               	goto	i2l5430
 10117                           
 10118                           ;UI.c: 258: dispLogs(2);
 10119  001106  0E00               	movlw	0
 10120  001108  6E02               	movwf	dispLogs@myLog+1,c
 10121  00110A  0E02               	movlw	2
 10122  00110C  6E01               	movwf	dispLogs@myLog,c
 10123  00110E  EC64  F016         	call	_dispLogs	;wreg free
 10124                           
 10125                           ;UI.c: 259: }
 10126  001112  D09C               	goto	i2l228
 10127  001114                     i2l5430:
 10128                           
 10129                           ;UI.c: 260: else if(back){
 10130  001114  5065               	movf	_back,w,c
 10131  001116  1066               	iorwf	_back+1,w,c
 10132  001118  B4D8               	btfsc	status,2,c
 10133  00111A  D098               	goto	i2l228
 10134                           
 10135                           ;UI.c: 261: change_state_to_menu_23();
 10136  00111C  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10137                           
 10138                           ;UI.c: 262: }
 10139                           ;UI.c: 263: break;
 10140  001120  D095               	goto	i2l228
 10141  001122                     i2l5434:
 10142                           
 10143                           ;UI.c: 266: if(up){
 10144  001122  5077               	movf	_up,w,c
 10145  001124  1078               	iorwf	_up+1,w,c
 10146  001126  B4D8               	btfsc	status,2,c
 10147  001128  D003               	goto	i2l5438
 10148                           
 10149                           ;UI.c: 267: change_state_to_logs_22();
 10150  00112A  ECE8  F014         	call	_change_state_to_logs_22	;wreg free
 10151                           
 10152                           ;UI.c: 268: }
 10153  00112E  D08E               	goto	i2l228
 10154  001130                     i2l5438:
 10155                           
 10156                           ;UI.c: 269: else if(down){
 10157  001130  5067               	movf	_down,w,c
 10158  001132  1068               	iorwf	_down+1,w,c
 10159  001134  B4D8               	btfsc	status,2,c
 10160  001136  D003               	goto	i2l5442
 10161                           
 10162                           ;UI.c: 270: change_state_to_logs_34();
 10163  001138  ECB8  F014         	call	_change_state_to_logs_34	;wreg free
 10164                           
 10165                           ;UI.c: 271: }
 10166  00113C  D087               	goto	i2l228
 10167  00113E                     i2l5442:
 10168                           
 10169                           ;UI.c: 272: else if(enter){
 10170  00113E  5069               	movf	_enter,w,c
 10171  001140  106A               	iorwf	_enter+1,w,c
 10172  001142  B4D8               	btfsc	status,2,c
 10173  001144  D007               	goto	i2l5446
 10174                           
 10175                           ;UI.c: 273: dispLogs(3);
 10176  001146  0E00               	movlw	0
 10177  001148  6E02               	movwf	dispLogs@myLog+1,c
 10178  00114A  0E03               	movlw	3
 10179  00114C  6E01               	movwf	dispLogs@myLog,c
 10180  00114E  EC64  F016         	call	_dispLogs	;wreg free
 10181                           
 10182                           ;UI.c: 274: }
 10183  001152  D07C               	goto	i2l228
 10184  001154                     i2l5446:
 10185                           
 10186                           ;UI.c: 275: else if(back){
 10187  001154  5065               	movf	_back,w,c
 10188  001156  1066               	iorwf	_back+1,w,c
 10189  001158  B4D8               	btfsc	status,2,c
 10190  00115A  D078               	goto	i2l228
 10191                           
 10192                           ;UI.c: 276: change_state_to_menu_23();
 10193  00115C  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10194                           
 10195                           ;UI.c: 277: }
 10196                           ;UI.c: 278: break;
 10197  001160  D075               	goto	i2l228
 10198  001162                     i2l5450:
 10199                           
 10200                           ;UI.c: 281: if(up){
 10201  001162  5077               	movf	_up,w,c
 10202  001164  1078               	iorwf	_up+1,w,c
 10203  001166  B4D8               	btfsc	status,2,c
 10204  001168  D003               	goto	i2l5454
 10205                           
 10206                           ;UI.c: 282: change_state_to_logs_22();
 10207  00116A  ECE8  F014         	call	_change_state_to_logs_22	;wreg free
 10208                           
 10209                           ;UI.c: 283: }
 10210  00116E  D06E               	goto	i2l228
 10211  001170                     i2l5454:
 10212                           
 10213                           ;UI.c: 284: else if(down){
 10214  001170  5067               	movf	_down,w,c
 10215  001172  1068               	iorwf	_down+1,w,c
 10216  001174  B4D8               	btfsc	status,2,c
 10217  001176  D003               	goto	i2l5458
 10218                           
 10219                           ;UI.c: 285: change_state_to_logs_34();
 10220  001178  ECB8  F014         	call	_change_state_to_logs_34	;wreg free
 10221                           
 10222                           ;UI.c: 286: }
 10223  00117C  D067               	goto	i2l228
 10224  00117E                     i2l5458:
 10225                           
 10226                           ;UI.c: 287: else if(enter){
 10227  00117E  5069               	movf	_enter,w,c
 10228  001180  106A               	iorwf	_enter+1,w,c
 10229  001182  B4D8               	btfsc	status,2,c
 10230  001184  D007               	goto	i2l5462
 10231                           
 10232                           ;UI.c: 288: dispLogs(3);
 10233  001186  0E00               	movlw	0
 10234  001188  6E02               	movwf	dispLogs@myLog+1,c
 10235  00118A  0E03               	movlw	3
 10236  00118C  6E01               	movwf	dispLogs@myLog,c
 10237  00118E  EC64  F016         	call	_dispLogs	;wreg free
 10238                           
 10239                           ;UI.c: 289: }
 10240  001192  D05C               	goto	i2l228
 10241  001194                     i2l5462:
 10242                           
 10243                           ;UI.c: 290: else if(back){
 10244  001194  5065               	movf	_back,w,c
 10245  001196  1066               	iorwf	_back+1,w,c
 10246  001198  B4D8               	btfsc	status,2,c
 10247  00119A  D058               	goto	i2l228
 10248                           
 10249                           ;UI.c: 291: change_state_to_menu_23();
 10250  00119C  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10251                           
 10252                           ;UI.c: 292: }
 10253                           ;UI.c: 293: break;
 10254  0011A0  D055               	goto	i2l228
 10255  0011A2                     i2l5466:
 10256                           
 10257                           ;UI.c: 296: if(up){
 10258  0011A2  5077               	movf	_up,w,c
 10259  0011A4  1078               	iorwf	_up+1,w,c
 10260  0011A6  B4D8               	btfsc	status,2,c
 10261  0011A8  D003               	goto	i2l5470
 10262                           
 10263                           ;UI.c: 297: change_state_to_logs_33();
 10264  0011AA  ECD0  F014         	call	_change_state_to_logs_33	;wreg free
 10265                           
 10266                           ;UI.c: 298: }
 10267  0011AE  D04E               	goto	i2l228
 10268  0011B0                     i2l5470:
 10269                           
 10270                           ;UI.c: 299: else if(down){
 10271  0011B0  5067               	movf	_down,w,c
 10272  0011B2  1068               	iorwf	_down+1,w,c
 10273  0011B4  B4D8               	btfsc	status,2,c
 10274  0011B6  D003               	goto	i2l5474
 10275                           
 10276                           ;UI.c: 300: change_state_to_logs_11();
 10277  0011B8  EC18  F015         	call	_change_state_to_logs_11	;wreg free
 10278                           
 10279                           ;UI.c: 301: }
 10280  0011BC  D047               	goto	i2l228
 10281  0011BE                     i2l5474:
 10282                           
 10283                           ;UI.c: 302: else if(enter){
 10284  0011BE  5069               	movf	_enter,w,c
 10285  0011C0  106A               	iorwf	_enter+1,w,c
 10286  0011C2  B4D8               	btfsc	status,2,c
 10287  0011C4  D007               	goto	i2l5478
 10288                           
 10289                           ;UI.c: 303: dispLogs(4);
 10290  0011C6  0E00               	movlw	0
 10291  0011C8  6E02               	movwf	dispLogs@myLog+1,c
 10292  0011CA  0E04               	movlw	4
 10293  0011CC  6E01               	movwf	dispLogs@myLog,c
 10294  0011CE  EC64  F016         	call	_dispLogs	;wreg free
 10295                           
 10296                           ;UI.c: 304: }
 10297  0011D2  D03C               	goto	i2l228
 10298  0011D4                     i2l5478:
 10299                           
 10300                           ;UI.c: 305: else if(back){
 10301  0011D4  5065               	movf	_back,w,c
 10302  0011D6  1066               	iorwf	_back+1,w,c
 10303  0011D8  B4D8               	btfsc	status,2,c
 10304  0011DA  D038               	goto	i2l228
 10305                           
 10306                           ;UI.c: 306: change_state_to_menu_23();
 10307  0011DC  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 10308                           
 10309                           ;UI.c: 312: }
 10310                           
 10311                           ;UI.c: 311: break;
 10312                           
 10313                           ;UI.c: 310: default:
 10314                           
 10315                           ;UI.c: 307: }
 10316                           ;UI.c: 308: break;
 10317  0011E0  D035               	goto	i2l228
 10318  0011E2                     i2l5484:
 10319  0011E2  C0E7  F043         	movff	_cur_state,??_updateMenu
 10320  0011E6  C0E8  F044         	movff	_cur_state+1,??_updateMenu+1
 10321                           
 10322                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 10323                           ; Switch size 1, requested type "space"
 10324                           ; Number of cases is 3, Range of values is 0 to 4
 10325                           ; switch strategies available:
 10326                           ; Name         Instructions Cycles
 10327                           ; simple_byte           10     6 (average)
 10328                           ;	Chosen strategy is simple_byte
 10329  0011EA  5044               	movf	??_updateMenu+1,w,c
 10330  0011EC  0A00               	xorlw	0	; case 0
 10331  0011EE  B4D8               	btfsc	status,2,c
 10332  0011F0  D007               	goto	i2l6004
 10333  0011F2  0A03               	xorlw	3	; case 3
 10334  0011F4  B4D8               	btfsc	status,2,c
 10335  0011F6  D015               	goto	i2l6006
 10336  0011F8  0A07               	xorlw	7	; case 4
 10337  0011FA  B4D8               	btfsc	status,2,c
 10338  0011FC  D020               	goto	i2l6008
 10339  0011FE  D026               	goto	i2l228
 10340  001200                     i2l6004:
 10341                           
 10342                           ; Switch size 1, requested type "space"
 10343                           ; Number of cases is 5, Range of values is 0 to 23
 10344                           ; switch strategies available:
 10345                           ; Name         Instructions Cycles
 10346                           ; simple_byte           16     9 (average)
 10347                           ;	Chosen strategy is simple_byte
 10348  001200  5043               	movf	??_updateMenu,w,c
 10349  001202  0A00               	xorlw	0	; case 0
 10350  001204  B4D8               	btfsc	status,2,c
 10351  001206  D6DC               	goto	i2l5336
 10352  001208  0A0B               	xorlw	11	; case 11
 10353  00120A  B4D8               	btfsc	status,2,c
 10354  00120C  D6DC               	goto	i2l5338
 10355  00120E  0A07               	xorlw	7	; case 12
 10356  001210  B4D8               	btfsc	status,2,c
 10357  001212  D6EE               	goto	i2l5350
 10358  001214  0A1A               	xorlw	26	; case 22
 10359  001216  B4D8               	btfsc	status,2,c
 10360  001218  D6F9               	goto	i2l5362
 10361  00121A  0A01               	xorlw	1	; case 23
 10362  00121C  B4D8               	btfsc	status,2,c
 10363  00121E  D70C               	goto	i2l5374
 10364  001220  D015               	goto	i2l228
 10365  001222                     i2l6006:
 10366                           
 10367                           ; Switch size 1, requested type "space"
 10368                           ; Number of cases is 4, Range of values is 243 to 255
 10369                           ; switch strategies available:
 10370                           ; Name         Instructions Cycles
 10371                           ; simple_byte           13     7 (average)
 10372                           ;	Chosen strategy is simple_byte
 10373  001222  5043               	movf	??_updateMenu,w,c
 10374  001224  0AF3               	xorlw	243	; case 243
 10375  001226  B4D8               	btfsc	status,2,c
 10376  001228  D71C               	goto	i2l5386
 10377  00122A  0A07               	xorlw	7	; case 244
 10378  00122C  B4D8               	btfsc	status,2,c
 10379  00122E  D739               	goto	i2l5402
 10380  001230  0A0A               	xorlw	10	; case 254
 10381  001232  B4D8               	btfsc	status,2,c
 10382  001234  D756               	goto	i2l5418
 10383  001236  0A01               	xorlw	1	; case 255
 10384  001238  B4D8               	btfsc	status,2,c
 10385  00123A  D773               	goto	i2l5434
 10386  00123C  D007               	goto	i2l228
 10387  00123E                     i2l6008:
 10388                           
 10389                           ; Switch size 1, requested type "space"
 10390                           ; Number of cases is 2, Range of values is 9 to 10
 10391                           ; switch strategies available:
 10392                           ; Name         Instructions Cycles
 10393                           ; simple_byte            7     4 (average)
 10394                           ;	Chosen strategy is simple_byte
 10395  00123E  5043               	movf	??_updateMenu,w,c
 10396  001240  0A09               	xorlw	9	; case 9
 10397  001242  B4D8               	btfsc	status,2,c
 10398  001244  D78E               	goto	i2l5450
 10399  001246  0A03               	xorlw	3	; case 10
 10400  001248  B4D8               	btfsc	status,2,c
 10401  00124A  D7AB               	goto	i2l5466
 10402  00124C                     i2l228:
 10403                           
 10404                           ;UI.c: 313: }
 10405                           ;UI.c: 314: (INTCONbits.GIE = 1);
 10406  00124C  8EF2               	bsf	intcon,7,c	;volatile
 10407  00124E  0012               	return		;funcret
 10408  001250                     __end_of_updateMenu:
 10409                           	opt stack 0
 10410                           pclatu	equ	0xFFB
 10411                           pclath	equ	0xFFA
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           intcon2	equ	0xFF1
 10420                           intcon3	equ	0xFF0
 10421                           indf0	equ	0xFEF
 10422                           postinc0	equ	0xFEE
 10423                           fsr0h	equ	0xFEA
 10424                           fsr0l	equ	0xFE9
 10425                           wreg	equ	0xFE8
 10426                           postdec1	equ	0xFE5
 10427                           fsr1h	equ	0xFE2
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function i2_change_state_to_menu_start *****************
 10437 ;; Defined at:
 10438 ;;		line 418 in file "UI.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;		None
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:        0 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    4
 10459 ;; This function calls:
 10460 ;;		i2_lcdInst
 10461 ;;		i2_printRTC
 10462 ;;		i2_printf
 10463 ;; This function is called by:
 10464 ;;		_updateMenu
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           	psect	text47
 10469  002B6A                     __ptext47:
 10470                           	opt stack 0
 10471  002B6A                     i2_change_state_to_menu_start:
 10472                           	opt stack 18
 10473                           
 10474                           ;UI.c: 419: cur_state = 0;
 10475                           
 10476                           ;incstack = 0
 10477  002B6A  0E00               	movlw	0
 10478  002B6C  0100               	movlb	0	; () banked
 10479  002B6E  6FE8               	movwf	(_cur_state+1)& (0+255),b
 10480  002B70  0E00               	movlw	0
 10481  002B72  6FE7               	movwf	_cur_state& (0+255),b
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;UI.c: 421: lcdInst(0b10000000);;
 10485  002B74  0E80               	movlw	128
 10486  002B76  EC96  F016         	call	i2_lcdInst
 10487                           
 10488                           ;UI.c: 422: printRTC();
 10489  002B7A  EC28  F009         	call	i2_printRTC	;wreg free
 10490                           
 10491                           ;UI.c: 423: lcdInst(0b11000000);;
 10492  002B7E  0EC0               	movlw	192
 10493  002B80  EC96  F016         	call	i2_lcdInst
 10494                           
 10495                           ;UI.c: 424: printf("PUSH TO CONTINUE");
 10496  002B84  0E97               	movlw	low STR_15
 10497  002B86  6E0D               	movwf	i2printf@f,c
 10498  002B88  0EFF               	movlw	high STR_15
 10499  002B8A  6E0E               	movwf	i2printf@f+1,c
 10500  002B8C  ECC0  F004         	call	i2_printf	;wreg free
 10501  002B90  0012               	return		;funcret
 10502  002B92                     __end_ofi2_change_state_to_menu_start:
 10503                           	opt stack 0
 10504                           pclatu	equ	0xFFB
 10505                           pclath	equ	0xFFA
 10506                           tblptru	equ	0xFF8
 10507                           tblptrh	equ	0xFF7
 10508                           tblptrl	equ	0xFF6
 10509                           tablat	equ	0xFF5
 10510                           prodh	equ	0xFF4
 10511                           prodl	equ	0xFF3
 10512                           intcon	equ	0xFF2
 10513                           intcon2	equ	0xFF1
 10514                           intcon3	equ	0xFF0
 10515                           indf0	equ	0xFEF
 10516                           postinc0	equ	0xFEE
 10517                           fsr0h	equ	0xFEA
 10518                           fsr0l	equ	0xFE9
 10519                           wreg	equ	0xFE8
 10520                           postdec1	equ	0xFE5
 10521                           fsr1h	equ	0xFE2
 10522                           fsr1l	equ	0xFE1
 10523                           indf2	equ	0xFDF
 10524                           postinc2	equ	0xFDE
 10525                           postdec2	equ	0xFDD
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8
 10529                           
 10530 ;; *************** function i2_printRTC *****************
 10531 ;; Defined at:
 10532 ;;		line 63 in file "RTC.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;		None
 10535 ;; Auto vars:     Size  Location     Type
 10536 ;;  printRTC       14   44[COMRAM] int [7]
 10537 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 10538 ;;  printRTC        2   64[COMRAM] int 
 10539 ;;  printRTC        2   58[COMRAM] int 
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      void 
 10542 ;; Registers used:
 10543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10553 ;;Total ram usage:       25 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    3
 10556 ;; This function calls:
 10557 ;;		i2_getRTC
 10558 ;;		i2_lcdInst
 10559 ;;		i2_printf
 10560 ;;		i2_strcpy
 10561 ;; This function is called by:
 10562 ;;		i2_change_state_to_menu_start
 10563 ;; This function uses a non-reentrant model
 10564 ;;
 10565                           
 10566                           	psect	text48
 10567  001250                     __ptext48:
 10568                           	opt stack 0
 10569  001250                     i2_printRTC:
 10570                           	opt stack 18
 10571                           
 10572                           ;RTC.c: 64: getRTC();
 10573                           
 10574                           ;incstack = 0
 10575  001250  ECBB  F011         	call	i2_getRTC	;wreg free
 10576                           
 10577                           ;RTC.c: 65: char month[] = "MMM";
 10578  001254  C122  F03D         	movff	printRTC@F3211,i2printRTC@month
 10579  001258  C123  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 10580  00125C  C124  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 10581  001260  C125  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 10582                           
 10583                           ;RTC.c: 66: int INT_time[7];
 10584                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10585  001264  0E00               	movlw	0
 10586  001266  6E42               	movwf	i2printRTC@i+1,c
 10587  001268  0E00               	movlw	0
 10588  00126A  6E41               	movwf	i2printRTC@i,c
 10589  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
 10590  00126E  D006               	goto	i2l4550
 10591  001270  5042               	movf	i2printRTC@i+1,w,c
 10592  001272  E135               	bnz	i2l567
 10593  001274  0E07               	movlw	7
 10594  001276  5C41               	subwf	i2printRTC@i,w,c
 10595  001278  B0D8               	btfsc	status,0,c
 10596  00127A  D031               	goto	i2l567
 10597  00127C                     i2l4550:
 10598                           
 10599                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10600  00127C  0ED4               	movlw	low _time
 10601  00127E  2441               	addwf	i2printRTC@i,w,c
 10602  001280  6ED9               	movwf	fsr2l,c
 10603  001282  0E00               	movlw	high _time
 10604  001284  2042               	addwfc	i2printRTC@i+1,w,c
 10605  001286  6EDA               	movwf	fsr2h,c
 10606  001288  50DF               	movf	indf2,w,c
 10607  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
 10608  00128C  3A2A               	swapf	??i2_printRTC,f,c
 10609  00128E  0E0F               	movlw	15
 10610  001290  162A               	andwf	??i2_printRTC,f,c
 10611  001292  0E0F               	movlw	15
 10612  001294  162A               	andwf	??i2_printRTC,f,c
 10613  001296  502A               	movf	??i2_printRTC,w,c
 10614  001298  0D0A               	mullw	10
 10615  00129A  0ED4               	movlw	low _time
 10616  00129C  2441               	addwf	i2printRTC@i,w,c
 10617  00129E  6ED9               	movwf	fsr2l,c
 10618  0012A0  0E00               	movlw	high _time
 10619  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
 10620  0012A4  6EDA               	movwf	fsr2h,c
 10621  0012A6  50DF               	movf	indf2,w,c
 10622  0012A8  0B0F               	andlw	15
 10623  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10624  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10625  0012AE  50F3               	movf	prodl,w,c
 10626  0012B0  262B               	addwf	??i2_printRTC+1,f,c
 10627  0012B2  50F4               	movf	prodh,w,c
 10628  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
 10629  0012B6  90D8               	bcf	status,0,c
 10630  0012B8  3441               	rlcf	i2printRTC@i,w,c
 10631  0012BA  6ED9               	movwf	fsr2l,c
 10632  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
 10633  0012BE  6EDA               	movwf	fsr2h,c
 10634  0012C0  0E2D               	movlw	low i2printRTC@INT_time
 10635  0012C2  26D9               	addwf	fsr2l,f,c
 10636  0012C4  0E00               	movlw	high i2printRTC@INT_time
 10637  0012C6  22DA               	addwfc	fsr2h,f,c
 10638  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10639  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10640  0012D0  4A41               	infsnz	i2printRTC@i,f,c
 10641  0012D2  2A42               	incf	i2printRTC@i+1,f,c
 10642  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
 10643  0012D6  D7D2               	goto	i2l4550
 10644  0012D8  5042               	movf	i2printRTC@i+1,w,c
 10645  0012DA  E101               	bnz	i2u339_40
 10646  0012DC  D7CB               	goto	L6
 10647  0012DE                     i2u339_40:
 10648  0012DE                     i2l567:
 10649                           
 10650                           ;RTC.c: 69: }
 10651                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10652  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10653  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10654                           
 10655                           ;RTC.c: 71: switch(RTC_month){
 10656  0012E6  D084               	goto	i2l4582
 10657  0012E8                     i2l4556:
 10658                           
 10659                           ;RTC.c: 73: strcpy(month, "Jan");
 10660  0012E8  0E3D               	movlw	low i2printRTC@month
 10661  0012EA  6E01               	movwf	i2strcpy@to,c
 10662  0012EC  0E00               	movlw	high i2printRTC@month
 10663  0012EE  6E02               	movwf	i2strcpy@to+1,c
 10664  0012F0  0EDB               	movlw	low STR_36
 10665  0012F2  6E03               	movwf	i2strcpy@from,c
 10666  0012F4  0EFF               	movlw	high STR_36
 10667  0012F6  6E04               	movwf	i2strcpy@from+1,c
 10668  0012F8  EC3F  F014         	call	i2_strcpy	;wreg free
 10669                           
 10670                           ;RTC.c: 74: break;
 10671  0012FC  D0A6               	goto	i2l4584
 10672  0012FE                     i2l4558:
 10673                           
 10674                           ;RTC.c: 76: strcpy(month, "Feb");
 10675  0012FE  0E3D               	movlw	low i2printRTC@month
 10676  001300  6E01               	movwf	i2strcpy@to,c
 10677  001302  0E00               	movlw	high i2printRTC@month
 10678  001304  6E02               	movwf	i2strcpy@to+1,c
 10679  001306  0ECB               	movlw	low STR_37
 10680  001308  6E03               	movwf	i2strcpy@from,c
 10681  00130A  0EFF               	movlw	high STR_37
 10682  00130C  6E04               	movwf	i2strcpy@from+1,c
 10683  00130E  EC3F  F014         	call	i2_strcpy	;wreg free
 10684                           
 10685                           ;RTC.c: 77: break;
 10686  001312  D09B               	goto	i2l4584
 10687  001314                     i2l4560:
 10688                           
 10689                           ;RTC.c: 79: strcpy(month, "Mar");
 10690  001314  0E3D               	movlw	low i2printRTC@month
 10691  001316  6E01               	movwf	i2strcpy@to,c
 10692  001318  0E00               	movlw	high i2printRTC@month
 10693  00131A  6E02               	movwf	i2strcpy@to+1,c
 10694  00131C  0EE7               	movlw	low STR_38
 10695  00131E  6E03               	movwf	i2strcpy@from,c
 10696  001320  0EFF               	movlw	high STR_38
 10697  001322  6E04               	movwf	i2strcpy@from+1,c
 10698  001324  EC3F  F014         	call	i2_strcpy	;wreg free
 10699                           
 10700                           ;RTC.c: 80: break;
 10701  001328  D090               	goto	i2l4584
 10702  00132A                     i2l4562:
 10703                           
 10704                           ;RTC.c: 82: strcpy(month, "Apr");
 10705  00132A  0E3D               	movlw	low i2printRTC@month
 10706  00132C  6E01               	movwf	i2strcpy@to,c
 10707  00132E  0E00               	movlw	high i2printRTC@month
 10708  001330  6E02               	movwf	i2strcpy@to+1,c
 10709  001332  0EEB               	movlw	low STR_39
 10710  001334  6E03               	movwf	i2strcpy@from,c
 10711  001336  0EFF               	movlw	high STR_39
 10712  001338  6E04               	movwf	i2strcpy@from+1,c
 10713  00133A  EC3F  F014         	call	i2_strcpy	;wreg free
 10714                           
 10715                           ;RTC.c: 83: break;
 10716  00133E  D085               	goto	i2l4584
 10717  001340                     i2l4564:
 10718                           
 10719                           ;RTC.c: 85: strcpy(month, "May");
 10720  001340  0E3D               	movlw	low i2printRTC@month
 10721  001342  6E01               	movwf	i2strcpy@to,c
 10722  001344  0E00               	movlw	high i2printRTC@month
 10723  001346  6E02               	movwf	i2strcpy@to+1,c
 10724  001348  0EF7               	movlw	low STR_40
 10725  00134A  6E03               	movwf	i2strcpy@from,c
 10726  00134C  0EFF               	movlw	high STR_40
 10727  00134E  6E04               	movwf	i2strcpy@from+1,c
 10728  001350  EC3F  F014         	call	i2_strcpy	;wreg free
 10729                           
 10730                           ;RTC.c: 86: break;
 10731  001354  D07A               	goto	i2l4584
 10732  001356                     i2l4566:
 10733                           
 10734                           ;RTC.c: 88: strcpy(month, "Jun");
 10735  001356  0E3D               	movlw	low i2printRTC@month
 10736  001358  6E01               	movwf	i2strcpy@to,c
 10737  00135A  0E00               	movlw	high i2printRTC@month
 10738  00135C  6E02               	movwf	i2strcpy@to+1,c
 10739  00135E  0EDF               	movlw	low STR_41
 10740  001360  6E03               	movwf	i2strcpy@from,c
 10741  001362  0EFF               	movlw	high STR_41
 10742  001364  6E04               	movwf	i2strcpy@from+1,c
 10743  001366  EC3F  F014         	call	i2_strcpy	;wreg free
 10744                           
 10745                           ;RTC.c: 89: break;
 10746  00136A  D06F               	goto	i2l4584
 10747  00136C                     i2l4568:
 10748                           
 10749                           ;RTC.c: 91: strcpy(month, "Jul");
 10750  00136C  0E3D               	movlw	low i2printRTC@month
 10751  00136E  6E01               	movwf	i2strcpy@to,c
 10752  001370  0E00               	movlw	high i2printRTC@month
 10753  001372  6E02               	movwf	i2strcpy@to+1,c
 10754  001374  0ED7               	movlw	low STR_42
 10755  001376  6E03               	movwf	i2strcpy@from,c
 10756  001378  0EFF               	movlw	high STR_42
 10757  00137A  6E04               	movwf	i2strcpy@from+1,c
 10758  00137C  EC3F  F014         	call	i2_strcpy	;wreg free
 10759                           
 10760                           ;RTC.c: 92: break;
 10761  001380  D064               	goto	i2l4584
 10762  001382                     i2l4570:
 10763                           
 10764                           ;RTC.c: 94: strcpy(month, "Aug");
 10765  001382  0E3D               	movlw	low i2printRTC@month
 10766  001384  6E01               	movwf	i2strcpy@to,c
 10767  001386  0E00               	movlw	high i2printRTC@month
 10768  001388  6E02               	movwf	i2strcpy@to+1,c
 10769  00138A  0ED3               	movlw	low STR_43
 10770  00138C  6E03               	movwf	i2strcpy@from,c
 10771  00138E  0EFF               	movlw	high STR_43
 10772  001390  6E04               	movwf	i2strcpy@from+1,c
 10773  001392  EC3F  F014         	call	i2_strcpy	;wreg free
 10774                           
 10775                           ;RTC.c: 95: break;
 10776  001396  D059               	goto	i2l4584
 10777  001398                     i2l4572:
 10778                           
 10779                           ;RTC.c: 97: strcpy(month, "Sep");
 10780  001398  0E3D               	movlw	low i2printRTC@month
 10781  00139A  6E01               	movwf	i2strcpy@to,c
 10782  00139C  0E00               	movlw	high i2printRTC@month
 10783  00139E  6E02               	movwf	i2strcpy@to+1,c
 10784  0013A0  0EE3               	movlw	low STR_44
 10785  0013A2  6E03               	movwf	i2strcpy@from,c
 10786  0013A4  0EFF               	movlw	high STR_44
 10787  0013A6  6E04               	movwf	i2strcpy@from+1,c
 10788  0013A8  EC3F  F014         	call	i2_strcpy	;wreg free
 10789                           
 10790                           ;RTC.c: 98: break;
 10791  0013AC  D04E               	goto	i2l4584
 10792  0013AE                     i2l4574:
 10793                           
 10794                           ;RTC.c: 100: strcpy(month, "Oct");
 10795  0013AE  0E3D               	movlw	low i2printRTC@month
 10796  0013B0  6E01               	movwf	i2strcpy@to,c
 10797  0013B2  0E00               	movlw	high i2printRTC@month
 10798  0013B4  6E02               	movwf	i2strcpy@to+1,c
 10799  0013B6  0EEF               	movlw	low STR_45
 10800  0013B8  6E03               	movwf	i2strcpy@from,c
 10801  0013BA  0EFF               	movlw	high STR_45
 10802  0013BC  6E04               	movwf	i2strcpy@from+1,c
 10803  0013BE  EC3F  F014         	call	i2_strcpy	;wreg free
 10804                           
 10805                           ;RTC.c: 101: break;
 10806  0013C2  D043               	goto	i2l4584
 10807  0013C4                     i2l4576:
 10808                           
 10809                           ;RTC.c: 103: strcpy(month, "Nov");
 10810  0013C4  0E3D               	movlw	low i2printRTC@month
 10811  0013C6  6E01               	movwf	i2strcpy@to,c
 10812  0013C8  0E00               	movlw	high i2printRTC@month
 10813  0013CA  6E02               	movwf	i2strcpy@to+1,c
 10814  0013CC  0EF3               	movlw	low STR_46
 10815  0013CE  6E03               	movwf	i2strcpy@from,c
 10816  0013D0  0EFF               	movlw	high STR_46
 10817  0013D2  6E04               	movwf	i2strcpy@from+1,c
 10818  0013D4  EC3F  F014         	call	i2_strcpy	;wreg free
 10819                           
 10820                           ;RTC.c: 104: break;
 10821  0013D8  D038               	goto	i2l4584
 10822  0013DA                     i2l4578:
 10823                           
 10824                           ;RTC.c: 106: strcpy(month, "Dec");
 10825  0013DA  0E3D               	movlw	low i2printRTC@month
 10826  0013DC  6E01               	movwf	i2strcpy@to,c
 10827  0013DE  0E00               	movlw	high i2printRTC@month
 10828  0013E0  6E02               	movwf	i2strcpy@to+1,c
 10829  0013E2  0ECF               	movlw	low STR_47
 10830  0013E4  6E03               	movwf	i2strcpy@from,c
 10831  0013E6  0EFF               	movlw	high STR_47
 10832  0013E8  6E04               	movwf	i2strcpy@from+1,c
 10833  0013EA  EC3F  F014         	call	i2_strcpy	;wreg free
 10834                           
 10835                           ;RTC.c: 108: }
 10836                           
 10837                           ;RTC.c: 107: break;
 10838  0013EE  D02D               	goto	i2l4584
 10839  0013F0                     i2l4582:
 10840  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10841  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10842                           
 10843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10844                           ; Switch size 1, requested type "space"
 10845                           ; Number of cases is 1, Range of values is 0 to 0
 10846                           ; switch strategies available:
 10847                           ; Name         Instructions Cycles
 10848                           ; simple_byte            4     3 (average)
 10849                           ;	Chosen strategy is simple_byte
 10850  0013F8  502B               	movf	??i2_printRTC+1,w,c
 10851  0013FA  0A00               	xorlw	0	; case 0
 10852  0013FC  A4D8               	btfss	status,2,c
 10853  0013FE  D025               	goto	i2l4584
 10854                           
 10855                           ; Switch size 1, requested type "space"
 10856                           ; Number of cases is 12, Range of values is 1 to 12
 10857                           ; switch strategies available:
 10858                           ; Name         Instructions Cycles
 10859                           ; simple_byte           37    19 (average)
 10860                           ;	Chosen strategy is simple_byte
 10861  001400  502A               	movf	??i2_printRTC,w,c
 10862  001402  0A01               	xorlw	1	; case 1
 10863  001404  B4D8               	btfsc	status,2,c
 10864  001406  D770               	goto	i2l4556
 10865  001408  0A03               	xorlw	3	; case 2
 10866  00140A  B4D8               	btfsc	status,2,c
 10867  00140C  D778               	goto	i2l4558
 10868  00140E  0A01               	xorlw	1	; case 3
 10869  001410  B4D8               	btfsc	status,2,c
 10870  001412  D780               	goto	i2l4560
 10871  001414  0A07               	xorlw	7	; case 4
 10872  001416  B4D8               	btfsc	status,2,c
 10873  001418  D788               	goto	i2l4562
 10874  00141A  0A01               	xorlw	1	; case 5
 10875  00141C  B4D8               	btfsc	status,2,c
 10876  00141E  D790               	goto	i2l4564
 10877  001420  0A03               	xorlw	3	; case 6
 10878  001422  B4D8               	btfsc	status,2,c
 10879  001424  D798               	goto	i2l4566
 10880  001426  0A01               	xorlw	1	; case 7
 10881  001428  B4D8               	btfsc	status,2,c
 10882  00142A  D7A0               	goto	i2l4568
 10883  00142C  0A0F               	xorlw	15	; case 8
 10884  00142E  B4D8               	btfsc	status,2,c
 10885  001430  D7A8               	goto	i2l4570
 10886  001432  0A01               	xorlw	1	; case 9
 10887  001434  B4D8               	btfsc	status,2,c
 10888  001436  D7B0               	goto	i2l4572
 10889  001438  0A03               	xorlw	3	; case 10
 10890  00143A  B4D8               	btfsc	status,2,c
 10891  00143C  D7B8               	goto	i2l4574
 10892  00143E  0A01               	xorlw	1	; case 11
 10893  001440  B4D8               	btfsc	status,2,c
 10894  001442  D7C0               	goto	i2l4576
 10895  001444  0A07               	xorlw	7	; case 12
 10896  001446  B4D8               	btfsc	status,2,c
 10897  001448  D7C8               	goto	i2l4578
 10898  00144A                     i2l4584:
 10899                           
 10900                           ;RTC.c: 109: lcdInst(0b10000000);;
 10901  00144A  0E80               	movlw	128
 10902  00144C  EC96  F016         	call	i2_lcdInst
 10903                           
 10904                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10905  001450  0ED0               	movlw	low STR_48
 10906  001452  6E0D               	movwf	i2printf@f,c
 10907  001454  0EFD               	movlw	high STR_48
 10908  001456  6E0E               	movwf	i2printf@f+1,c
 10909  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10910  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10911  001460  0E3D               	movlw	low i2printRTC@month
 10912  001462  6E11               	movwf	?i2_printf+4,c
 10913  001464  0E00               	movlw	high i2printRTC@month
 10914  001466  6E12               	movwf	?i2_printf+5,c
 10915  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10916  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10917  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10918  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10919  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10920  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10921  001480  ECC0  F004         	call	i2_printf	;wreg free
 10922  001484  0012               	return		;funcret
 10923  001486                     __end_ofi2_printRTC:
 10924                           	opt stack 0
 10925                           pclatu	equ	0xFFB
 10926                           pclath	equ	0xFFA
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           intcon	equ	0xFF2
 10934                           intcon2	equ	0xFF1
 10935                           intcon3	equ	0xFF0
 10936                           indf0	equ	0xFEF
 10937                           postinc0	equ	0xFEE
 10938                           fsr0h	equ	0xFEA
 10939                           fsr0l	equ	0xFE9
 10940                           wreg	equ	0xFE8
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function i2_strcpy *****************
 10952 ;; Defined at:
 10953 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  to              2    0[COMRAM] PTR unsigned char 
 10956 ;;		 -> printRTC@month(4), 
 10957 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10958 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10959 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10960 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10963 ;;		 -> printRTC@month(4), 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  2    0[COMRAM] PTR unsigned char 
 10966 ;; Registers used:
 10967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:        6 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; This function calls:
 10980 ;;		Nothing
 10981 ;; This function is called by:
 10982 ;;		i2_printRTC
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text49
 10987  00287E                     __ptext49:
 10988                           	opt stack 0
 10989  00287E                     i2_strcpy:
 10990                           	opt stack 20
 10991                           
 10992                           ;incstack = 0
 10993  00287E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10994  002882  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10995  002886  D004               	goto	i2l4346
 10996  002888                     i2l4344:
 10997  002888  4A05               	infsnz	i2strcpy@cp,f,c
 10998  00288A  2A06               	incf	i2strcpy@cp+1,f,c
 10999  00288C  4A03               	infsnz	i2strcpy@from,f,c
 11000  00288E  2A04               	incf	i2strcpy@from+1,f,c
 11001  002890                     i2l4346:
 11002  002890  C003  FFF6         	movff	i2strcpy@from,tblptrl
 11003  002894  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 11004  002898                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11005  002898  6AF8               	clrf	tblptru,c
 11006  00289A                     	endif
 11007  00289A                     	if	0	;tblptru may be non-zero
 11008  00289A                     	endif
 11009  00289A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 11010  00289E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 11011  0028A2  0008               	tblrd		*
 11012  0028A4  CFF5 FFDF          	movff	tablat,indf2
 11013  0028A8  50DF               	movf	indf2,w,c
 11014  0028AA  B4D8               	btfsc	status,2,c
 11015  0028AC  0012               	return	
 11016  0028AE  D7EC               	goto	i2l4344
 11017  0028B0                     __end_ofi2_strcpy:
 11018                           	opt stack 0
 11019                           pclatu	equ	0xFFB
 11020                           pclath	equ	0xFFA
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon2	equ	0xFF1
 11029                           intcon3	equ	0xFF0
 11030                           indf0	equ	0xFEF
 11031                           postinc0	equ	0xFEE
 11032                           fsr0h	equ	0xFEA
 11033                           fsr0l	equ	0xFE9
 11034                           wreg	equ	0xFE8
 11035                           postdec1	equ	0xFE5
 11036                           fsr1h	equ	0xFE2
 11037                           fsr1l	equ	0xFE1
 11038                           indf2	equ	0xFDF
 11039                           postinc2	equ	0xFDE
 11040                           postdec2	equ	0xFDD
 11041                           fsr2h	equ	0xFDA
 11042                           fsr2l	equ	0xFD9
 11043                           status	equ	0xFD8
 11044                           
 11045 ;; *************** function _inputHandler *****************
 11046 ;; Defined at:
 11047 ;;		line 317 in file "UI.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;		None
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;		None
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  2   41[COMRAM] int 
 11054 ;; Registers used:
 11055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;Total ram usage:        4 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    4
 11068 ;; This function calls:
 11069 ;;		_change_state_to_logs_11
 11070 ;;		_change_state_to_logs_12
 11071 ;;		_change_state_to_logs_22
 11072 ;;		_change_state_to_logs_23
 11073 ;;		_change_state_to_logs_33
 11074 ;;		_change_state_to_logs_34
 11075 ;;		_change_state_to_menu_11
 11076 ;;		_change_state_to_menu_23
 11077 ;;		i2_change_state_to_menu_12
 11078 ;;		i2_change_state_to_menu_22
 11079 ;; This function is called by:
 11080 ;;		_updateMenu
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           	psect	text50
 11085  001680                     __ptext50:
 11086                           	opt stack 0
 11087  001680                     _inputHandler:
 11088                           	opt stack 18
 11089                           
 11090                           ;UI.c: 322: if(firstboot){
 11091                           
 11092                           ;incstack = 0
 11093  001680  506D               	movf	_firstboot,w,c
 11094  001682  106E               	iorwf	_firstboot+1,w,c
 11095  001684  B4D8               	btfsc	status,2,c
 11096  001686  D00B               	goto	i2l4652
 11097                           
 11098                           ;UI.c: 323: change_state_to_menu_11();
 11099  001688  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
 11100                           
 11101                           ;UI.c: 324: firstboot = 0;
 11102  00168C  0E00               	movlw	0
 11103  00168E  6E6E               	movwf	_firstboot+1,c
 11104  001690  0E00               	movlw	0
 11105  001692  6E6D               	movwf	_firstboot,c
 11106                           
 11107                           ;UI.c: 325: return 0;
 11108  001694  0E00               	movlw	0
 11109  001696  6E2B               	movwf	?_inputHandler+1,c
 11110  001698  0E00               	movlw	0
 11111  00169A  6E2A               	movwf	?_inputHandler,c
 11112  00169C  0012               	return	
 11113  00169E                     i2l4652:
 11114                           
 11115                           ;UI.c: 326: }
 11116                           ;UI.c: 327: if (logstate){
 11117  00169E  0100               	movlb	0	; () banked
 11118  0016A0  51F7               	movf	_logstate& (0+255),w,b
 11119  0016A2  0100               	movlb	0	; () banked
 11120  0016A4  11F8               	iorwf	(_logstate+1)& (0+255),w,b
 11121  0016A6  B4D8               	btfsc	status,2,c
 11122  0016A8  D0C7               	goto	i2l4770
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;UI.c: 328: if(input == 'C' && PORTBbits.RB1 == 1){
 11126  0016AA  0E43               	movlw	67
 11127  0016AC  187D               	xorwf	_input,w,c	;volatile
 11128  0016AE  A4D8               	btfss	status,2,c
 11129  0016B0  D012               	goto	i2l4670
 11130                           
 11131                           ; BSR set to: 0
 11132  0016B2  B281               	btfsc	3969,1,c	;volatile
 11133  0016B4  D009               	goto	i2l4662
 11134  0016B6  D00F               	goto	i2l4670
 11135  0016B8                     i2l4660:
 11136                           
 11137                           ;UI.c: 331: _delay((unsigned long)((10)*(32000000/4000.0)));
 11138  0016B8  0E68               	movlw	104
 11139  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 11140  0016BC  0EE4               	movlw	228
 11141  0016BE                     i2u523_47:
 11142  0016BE  2EE8               	decfsz	wreg,f,c
 11143  0016C0  D7FE               	bra	i2u523_47
 11144  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 11145  0016C4  D7FC               	bra	i2u523_47
 11146  0016C6  D000               	nop2	
 11147  0016C8                     i2l4662:
 11148  0016C8  B281               	btfsc	3969,1,c	;volatile
 11149  0016CA  D7F6               	goto	i2l4660
 11150  0016CC                     i2l4664:
 11151                           
 11152                           ;UI.c: 332: }
 11153                           ;UI.c: 333: return 0;
 11154  0016CC  0E00               	movlw	0
 11155  0016CE  6E2B               	movwf	?_inputHandler+1,c
 11156  0016D0  0E00               	movlw	0
 11157  0016D2  6E2A               	movwf	?_inputHandler,c
 11158  0016D4  0012               	return	
 11159  0016D6                     i2l4670:
 11160                           
 11161                           ;UI.c: 335: else if (input == 'D'){
 11162  0016D6  0E44               	movlw	68
 11163  0016D8  187D               	xorwf	_input,w,c	;volatile
 11164  0016DA  A4D8               	btfss	status,2,c
 11165  0016DC  D7F7               	goto	i2l4664
 11166                           
 11167                           ;UI.c: 337: logstate = 0;
 11168  0016DE  0E00               	movlw	0
 11169  0016E0  0100               	movlb	0	; () banked
 11170  0016E2  6FF8               	movwf	(_logstate+1)& (0+255),b
 11171  0016E4  0E00               	movlw	0
 11172  0016E6  6FF7               	movwf	_logstate& (0+255),b
 11173                           
 11174                           ;UI.c: 338: switch(cur_state){
 11175  0016E8  D012               	goto	i2l4688
 11176  0016EA                     i2l4674:
 11177                           
 11178                           ;UI.c: 340: change_state_to_logs_11();
 11179  0016EA  EC18  F015         	call	_change_state_to_logs_11	;wreg free
 11180                           
 11181                           ;UI.c: 341: break;
 11182  0016EE  D7EE               	goto	i2l4664
 11183  0016F0                     i2l4676:
 11184                           
 11185                           ;UI.c: 343: change_state_to_logs_12();
 11186  0016F0  EC00  F015         	call	_change_state_to_logs_12	;wreg free
 11187                           
 11188                           ;UI.c: 344: break;
 11189  0016F4  D7EB               	goto	i2l4664
 11190  0016F6                     i2l4678:
 11191                           
 11192                           ;UI.c: 346: change_state_to_logs_22();
 11193  0016F6  ECE8  F014         	call	_change_state_to_logs_22	;wreg free
 11194                           
 11195                           ;UI.c: 347: break;
 11196  0016FA  D7E8               	goto	i2l4664
 11197  0016FC                     i2l4680:
 11198                           
 11199                           ;UI.c: 349: change_state_to_logs_23();
 11200  0016FC  EC47  F015         	call	_change_state_to_logs_23	;wreg free
 11201                           
 11202                           ;UI.c: 350: break;
 11203  001700  D7E5               	goto	i2l4664
 11204  001702                     i2l4682:
 11205                           
 11206                           ;UI.c: 352: change_state_to_logs_33();
 11207  001702  ECD0  F014         	call	_change_state_to_logs_33	;wreg free
 11208                           
 11209                           ;UI.c: 353: break;
 11210  001706  D7E2               	goto	i2l4664
 11211  001708                     i2l4684:
 11212                           
 11213                           ;UI.c: 355: change_state_to_logs_34();
 11214  001708  ECB8  F014         	call	_change_state_to_logs_34	;wreg free
 11215                           
 11216                           ;UI.c: 357: }
 11217                           
 11218                           ;UI.c: 356: break;
 11219  00170C  D7DF               	goto	i2l4664
 11220  00170E                     i2l4688:
 11221  00170E  C0E7  F02C         	movff	_cur_state,??_inputHandler
 11222  001712  C0E8  F02D         	movff	_cur_state+1,??_inputHandler+1
 11223                           
 11224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 11225                           ; Switch size 1, requested type "space"
 11226                           ; Number of cases is 2, Range of values is 3 to 4
 11227                           ; switch strategies available:
 11228                           ; Name         Instructions Cycles
 11229                           ; simple_byte            7     4 (average)
 11230                           ;	Chosen strategy is simple_byte
 11231  001716  502D               	movf	??_inputHandler+1,w,c
 11232  001718  0A03               	xorlw	3	; case 3
 11233  00171A  B4D8               	btfsc	status,2,c
 11234  00171C  D004               	goto	i2l6012
 11235  00171E  0A07               	xorlw	7	; case 4
 11236  001720  B4D8               	btfsc	status,2,c
 11237  001722  D00F               	goto	i2l6014
 11238  001724  D7D3               	goto	i2l4664
 11239  001726                     i2l6012:
 11240                           
 11241                           ; Switch size 1, requested type "space"
 11242                           ; Number of cases is 4, Range of values is 243 to 255
 11243                           ; switch strategies available:
 11244                           ; Name         Instructions Cycles
 11245                           ; simple_byte           13     7 (average)
 11246                           ;	Chosen strategy is simple_byte
 11247  001726  502C               	movf	??_inputHandler,w,c
 11248  001728  0AF3               	xorlw	243	; case 243
 11249  00172A  B4D8               	btfsc	status,2,c
 11250  00172C  D7DE               	goto	i2l4674
 11251  00172E  0A07               	xorlw	7	; case 244
 11252  001730  B4D8               	btfsc	status,2,c
 11253  001732  D7DE               	goto	i2l4676
 11254  001734  0A0A               	xorlw	10	; case 254
 11255  001736  B4D8               	btfsc	status,2,c
 11256  001738  D7DE               	goto	i2l4678
 11257  00173A  0A01               	xorlw	1	; case 255
 11258  00173C  B4D8               	btfsc	status,2,c
 11259  00173E  D7DE               	goto	i2l4680
 11260  001740  D7C5               	goto	i2l4664
 11261  001742                     i2l6014:
 11262                           
 11263                           ; Switch size 1, requested type "space"
 11264                           ; Number of cases is 2, Range of values is 9 to 10
 11265                           ; switch strategies available:
 11266                           ; Name         Instructions Cycles
 11267                           ; simple_byte            7     4 (average)
 11268                           ;	Chosen strategy is simple_byte
 11269  001742  502C               	movf	??_inputHandler,w,c
 11270  001744  0A09               	xorlw	9	; case 9
 11271  001746  B4D8               	btfsc	status,2,c
 11272  001748  D7DC               	goto	i2l4682
 11273  00174A  0A03               	xorlw	3	; case 10
 11274  00174C  B4D8               	btfsc	status,2,c
 11275  00174E  D7DC               	goto	i2l4684
 11276  001750  D7BD               	goto	i2l4664
 11277  001752                     i2l4700:
 11278                           
 11279                           ;UI.c: 367: if(cur_state == 11){
 11280  001752  0E0B               	movlw	11
 11281  001754  0100               	movlb	0	; () banked
 11282  001756  19E7               	xorwf	_cur_state& (0+255),w,b
 11283  001758  0100               	movlb	0	; () banked
 11284  00175A  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 11285  00175C  A4D8               	btfss	status,2,c
 11286  00175E  D005               	goto	i2l4708
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;UI.c: 368: return 0;
 11290  001760  0E00               	movlw	0
 11291  001762  6E2B               	movwf	?_inputHandler+1,c
 11292  001764  0E00               	movlw	0
 11293  001766  6E2A               	movwf	?_inputHandler,c
 11294                           
 11295                           ; BSR set to: 0
 11296  001768  0012               	return	
 11297  00176A                     i2l4708:
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;UI.c: 370: else{
 11301                           ;UI.c: 371: change_state_to_menu_11();
 11302  00176A  ECA0  F014         	call	_change_state_to_menu_11	;wreg free
 11303                           
 11304                           ;UI.c: 372: }
 11305                           ;UI.c: 373: return 0;
 11306  00176E  0E00               	movlw	0
 11307  001770  6E2B               	movwf	?_inputHandler+1,c
 11308  001772  0E00               	movlw	0
 11309  001774  6E2A               	movwf	?_inputHandler,c
 11310  001776  0012               	return	
 11311  001778                     i2l4714:
 11312                           
 11313                           ;UI.c: 375: if(cur_state == 22 | cur_state == 12){
 11314  001778  0E16               	movlw	22
 11315  00177A  0100               	movlb	0	; () banked
 11316  00177C  19E7               	xorwf	_cur_state& (0+255),w,b
 11317  00177E  0100               	movlb	0	; () banked
 11318  001780  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 11319  001782  B4D8               	btfsc	status,2,c
 11320  001784  D007               	goto	i2l4718
 11321                           
 11322                           ; BSR set to: 0
 11323  001786  0E0C               	movlw	12
 11324  001788  0100               	movlb	0	; () banked
 11325  00178A  19E7               	xorwf	_cur_state& (0+255),w,b
 11326  00178C  0100               	movlb	0	; () banked
 11327  00178E  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 11328  001790  A4D8               	btfss	status,2,c
 11329  001792  D005               	goto	i2l4724
 11330  001794                     i2l4718:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;UI.c: 376: return 0;
 11334  001794  0E00               	movlw	0
 11335  001796  6E2B               	movwf	?_inputHandler+1,c
 11336  001798  0E00               	movlw	0
 11337  00179A  6E2A               	movwf	?_inputHandler,c
 11338                           
 11339                           ; BSR set to: 0
 11340  00179C  0012               	return	
 11341  00179E                     i2l4724:
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;UI.c: 378: else if(cur_state == 23){
 11345  00179E  0E17               	movlw	23
 11346  0017A0  0100               	movlb	0	; () banked
 11347  0017A2  19E7               	xorwf	_cur_state& (0+255),w,b
 11348  0017A4  0100               	movlb	0	; () banked
 11349  0017A6  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 11350  0017A8  A4D8               	btfss	status,2,c
 11351  0017AA  D003               	goto	i2l4728
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;UI.c: 379: change_state_to_menu_22();
 11355  0017AC  EC58  F014         	call	i2_change_state_to_menu_22	;wreg free
 11356                           
 11357                           ;UI.c: 380: }
 11358  0017B0  D002               	goto	i2l4730
 11359  0017B2                     i2l4728:
 11360                           
 11361                           ;UI.c: 381: else{
 11362                           ;UI.c: 382: change_state_to_menu_12();
 11363  0017B2  EC70  F014         	call	i2_change_state_to_menu_12	;wreg free
 11364  0017B6                     i2l4730:
 11365                           
 11366                           ;UI.c: 383: }
 11367                           ;UI.c: 384: return 0;
 11368  0017B6  0E00               	movlw	0
 11369  0017B8  6E2B               	movwf	?_inputHandler+1,c
 11370  0017BA  0E00               	movlw	0
 11371  0017BC  6E2A               	movwf	?_inputHandler,c
 11372  0017BE  0012               	return	
 11373  0017C0                     i2l4734:
 11374                           
 11375                           ;UI.c: 386: if(cur_state == 23){
 11376  0017C0  0E17               	movlw	23
 11377  0017C2  0100               	movlb	0	; () banked
 11378  0017C4  19E7               	xorwf	_cur_state& (0+255),w,b
 11379  0017C6  0100               	movlb	0	; () banked
 11380  0017C8  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 11381  0017CA  A4D8               	btfss	status,2,c
 11382  0017CC  D005               	goto	i2l4742
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;UI.c: 387: return 0;
 11386  0017CE  0E00               	movlw	0
 11387  0017D0  6E2B               	movwf	?_inputHandler+1,c
 11388  0017D2  0E00               	movlw	0
 11389  0017D4  6E2A               	movwf	?_inputHandler,c
 11390                           
 11391                           ; BSR set to: 0
 11392  0017D6  0012               	return	
 11393  0017D8                     i2l4742:
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;UI.c: 389: else{
 11397                           ;UI.c: 390: change_state_to_menu_23();
 11398  0017D8  EC88  F014         	call	_change_state_to_menu_23	;wreg free
 11399                           
 11400                           ;UI.c: 391: }
 11401                           ;UI.c: 392: return 0;
 11402  0017DC  0E00               	movlw	0
 11403  0017DE  6E2B               	movwf	?_inputHandler+1,c
 11404  0017E0  0E00               	movlw	0
 11405  0017E2  6E2A               	movwf	?_inputHandler,c
 11406  0017E4  0012               	return	
 11407  0017E6                     i2l4748:
 11408                           
 11409                           ;UI.c: 395: up = 1;
 11410  0017E6  0E00               	movlw	0
 11411  0017E8  6E78               	movwf	_up+1,c
 11412  0017EA  0E01               	movlw	1
 11413  0017EC  6E77               	movwf	_up,c
 11414                           
 11415                           ;UI.c: 396: return 1;
 11416  0017EE  0E00               	movlw	0
 11417  0017F0  6E2B               	movwf	?_inputHandler+1,c
 11418  0017F2  0E01               	movlw	1
 11419  0017F4  6E2A               	movwf	?_inputHandler,c
 11420  0017F6  0012               	return	
 11421  0017F8                     i2l4752:
 11422                           
 11423                           ;UI.c: 398: down = 1;
 11424  0017F8  0E00               	movlw	0
 11425  0017FA  6E68               	movwf	_down+1,c
 11426  0017FC  0E01               	movlw	1
 11427  0017FE  6E67               	movwf	_down,c
 11428                           
 11429                           ;UI.c: 399: return 1;
 11430  001800  0E00               	movlw	0
 11431  001802  6E2B               	movwf	?_inputHandler+1,c
 11432  001804  0E01               	movlw	1
 11433  001806  6E2A               	movwf	?_inputHandler,c
 11434  001808  0012               	return	
 11435  00180A                     i2l4756:
 11436                           
 11437                           ;UI.c: 401: enter = 1;
 11438  00180A  0E00               	movlw	0
 11439  00180C  6E6A               	movwf	_enter+1,c
 11440  00180E  0E01               	movlw	1
 11441  001810  6E69               	movwf	_enter,c
 11442                           
 11443                           ;UI.c: 402: return 1;
 11444  001812  0E00               	movlw	0
 11445  001814  6E2B               	movwf	?_inputHandler+1,c
 11446  001816  0E01               	movlw	1
 11447  001818  6E2A               	movwf	?_inputHandler,c
 11448  00181A  0012               	return	
 11449  00181C                     i2l4760:
 11450                           
 11451                           ;UI.c: 404: back = 1;
 11452  00181C  0E00               	movlw	0
 11453  00181E  6E66               	movwf	_back+1,c
 11454  001820  0E01               	movlw	1
 11455  001822  6E65               	movwf	_back,c
 11456                           
 11457                           ;UI.c: 405: return 1;
 11458  001824  0E00               	movlw	0
 11459  001826  6E2B               	movwf	?_inputHandler+1,c
 11460  001828  0E01               	movlw	1
 11461  00182A  6E2A               	movwf	?_inputHandler,c
 11462  00182C  0012               	return	
 11463  00182E                     i2l4764:
 11464                           
 11465                           ;UI.c: 408: return 1;
 11466  00182E  0E00               	movlw	0
 11467  001830  6E2B               	movwf	?_inputHandler+1,c
 11468  001832  0E01               	movlw	1
 11469  001834  6E2A               	movwf	?_inputHandler,c
 11470                           
 11471                           ;UI.c: 409: }
 11472  001836  0012               	return	
 11473  001838                     i2l4770:
 11474  001838  507D               	movf	_input,w,c	;volatile
 11475                           
 11476                           ; Switch size 1, requested type "space"
 11477                           ; Number of cases is 7, Range of values is 49 to 68
 11478                           ; switch strategies available:
 11479                           ; Name         Instructions Cycles
 11480                           ; simple_byte           22    12 (average)
 11481                           ;	Chosen strategy is simple_byte
 11482  00183A  0A31               	xorlw	49	; case 49
 11483  00183C  B4D8               	btfsc	status,2,c
 11484  00183E  D789               	goto	i2l4700
 11485  001840  0A03               	xorlw	3	; case 50
 11486  001842  B4D8               	btfsc	status,2,c
 11487  001844  D799               	goto	i2l4714
 11488  001846  0A01               	xorlw	1	; case 51
 11489  001848  B4D8               	btfsc	status,2,c
 11490  00184A  D7BA               	goto	i2l4734
 11491  00184C  0A72               	xorlw	114	; case 65
 11492  00184E  B4D8               	btfsc	status,2,c
 11493  001850  D7CA               	goto	i2l4748
 11494  001852  0A03               	xorlw	3	; case 66
 11495  001854  B4D8               	btfsc	status,2,c
 11496  001856  D7D0               	goto	i2l4752
 11497  001858  0A01               	xorlw	1	; case 67
 11498  00185A  B4D8               	btfsc	status,2,c
 11499  00185C  D7D6               	goto	i2l4756
 11500  00185E  0A07               	xorlw	7	; case 68
 11501  001860  B4D8               	btfsc	status,2,c
 11502  001862  D7DC               	goto	i2l4760
 11503  001864  D7E4               	goto	i2l4764
 11504  001866                     __end_of_inputHandler:
 11505                           	opt stack 0
 11506                           pclatu	equ	0xFFB
 11507                           pclath	equ	0xFFA
 11508                           tblptru	equ	0xFF8
 11509                           tblptrh	equ	0xFF7
 11510                           tblptrl	equ	0xFF6
 11511                           tablat	equ	0xFF5
 11512                           prodh	equ	0xFF4
 11513                           prodl	equ	0xFF3
 11514                           intcon	equ	0xFF2
 11515                           intcon2	equ	0xFF1
 11516                           intcon3	equ	0xFF0
 11517                           indf0	equ	0xFEF
 11518                           postinc0	equ	0xFEE
 11519                           fsr0h	equ	0xFEA
 11520                           fsr0l	equ	0xFE9
 11521                           wreg	equ	0xFE8
 11522                           postdec1	equ	0xFE5
 11523                           fsr1h	equ	0xFE2
 11524                           fsr1l	equ	0xFE1
 11525                           indf2	equ	0xFDF
 11526                           postinc2	equ	0xFDE
 11527                           postdec2	equ	0xFDD
 11528                           fsr2h	equ	0xFDA
 11529                           fsr2l	equ	0xFD9
 11530                           status	equ	0xFD8
 11531                           
 11532 ;; *************** function i2_change_state_to_menu_22 *****************
 11533 ;; Defined at:
 11534 ;;		line 442 in file "UI.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;		None
 11537 ;; Auto vars:     Size  Location     Type
 11538 ;;		None
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  1    wreg      void 
 11541 ;; Registers used:
 11542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;Total ram usage:        0 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:    3
 11555 ;; This function calls:
 11556 ;;		i2_lcdInst
 11557 ;;		i2_printf
 11558 ;; This function is called by:
 11559 ;;		_updateMenu
 11560 ;;		_inputHandler
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           	psect	text51
 11565  0028B0                     __ptext51:
 11566                           	opt stack 0
 11567  0028B0                     i2_change_state_to_menu_22:
 11568                           	opt stack 19
 11569                           
 11570                           ;UI.c: 443: cur_state = 22;
 11571                           
 11572                           ;incstack = 0
 11573  0028B0  0E00               	movlw	0
 11574  0028B2  0100               	movlb	0	; () banked
 11575  0028B4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11576  0028B6  0E16               	movlw	22
 11577  0028B8  6FE7               	movwf	_cur_state& (0+255),b
 11578                           
 11579                           ; BSR set to: 0
 11580                           ;UI.c: 445: lcdInst(0b10000000);;
 11581  0028BA  0E80               	movlw	128
 11582  0028BC  EC96  F016         	call	i2_lcdInst
 11583                           
 11584                           ;UI.c: 446: printf("2. SORT        <");
 11585  0028C0  0E64               	movlw	low STR_19
 11586  0028C2  6E0D               	movwf	i2printf@f,c
 11587  0028C4  0EFF               	movlw	high STR_19
 11588  0028C6  6E0E               	movwf	i2printf@f+1,c
 11589  0028C8  ECC0  F004         	call	i2_printf	;wreg free
 11590                           
 11591                           ;UI.c: 447: lcdInst(0b11000000);;
 11592  0028CC  0EC0               	movlw	192
 11593  0028CE  EC96  F016         	call	i2_lcdInst
 11594                           
 11595                           ;UI.c: 448: printf("3. LOGS         ");
 11596  0028D2  0E65               	movlw	low STR_21
 11597  0028D4  6E0D               	movwf	i2printf@f,c
 11598  0028D6  0EFE               	movlw	high STR_21
 11599  0028D8  6E0E               	movwf	i2printf@f+1,c
 11600  0028DA  ECC0  F004         	call	i2_printf	;wreg free
 11601  0028DE  0012               	return		;funcret
 11602  0028E0                     __end_ofi2_change_state_to_menu_22:
 11603                           	opt stack 0
 11604                           pclatu	equ	0xFFB
 11605                           pclath	equ	0xFFA
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           intcon3	equ	0xFF0
 11615                           indf0	equ	0xFEF
 11616                           postinc0	equ	0xFEE
 11617                           fsr0h	equ	0xFEA
 11618                           fsr0l	equ	0xFE9
 11619                           wreg	equ	0xFE8
 11620                           postdec1	equ	0xFE5
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function i2_change_state_to_menu_12 *****************
 11631 ;; Defined at:
 11632 ;;		line 434 in file "UI.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;		None
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;Total ram usage:        0 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    3
 11653 ;; This function calls:
 11654 ;;		i2_lcdInst
 11655 ;;		i2_printf
 11656 ;; This function is called by:
 11657 ;;		_updateMenu
 11658 ;;		_inputHandler
 11659 ;; This function uses a non-reentrant model
 11660 ;;
 11661                           
 11662                           	psect	text52
 11663  0028E0                     __ptext52:
 11664                           	opt stack 0
 11665  0028E0                     i2_change_state_to_menu_12:
 11666                           	opt stack 19
 11667                           
 11668                           ;UI.c: 435: cur_state = 12;
 11669                           
 11670                           ;incstack = 0
 11671  0028E0  0E00               	movlw	0
 11672  0028E2  0100               	movlb	0	; () banked
 11673  0028E4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11674  0028E6  0E0C               	movlw	12
 11675  0028E8  6FE7               	movwf	_cur_state& (0+255),b
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;UI.c: 437: lcdInst(0b10000000);;
 11679  0028EA  0E80               	movlw	128
 11680  0028EC  EC96  F016         	call	i2_lcdInst
 11681                           
 11682                           ;UI.c: 438: printf("1. DATE/TIME    ");
 11683  0028F0  0E87               	movlw	low STR_18
 11684  0028F2  6E0D               	movwf	i2printf@f,c
 11685  0028F4  0EFE               	movlw	high STR_18
 11686  0028F6  6E0E               	movwf	i2printf@f+1,c
 11687  0028F8  ECC0  F004         	call	i2_printf	;wreg free
 11688                           
 11689                           ;UI.c: 439: lcdInst(0b11000000);;
 11690  0028FC  0EC0               	movlw	192
 11691  0028FE  EC96  F016         	call	i2_lcdInst
 11692                           
 11693                           ;UI.c: 440: printf("2. SORT        <");
 11694  002902  0E64               	movlw	low STR_19
 11695  002904  6E0D               	movwf	i2printf@f,c
 11696  002906  0EFF               	movlw	high STR_19
 11697  002908  6E0E               	movwf	i2printf@f+1,c
 11698  00290A  ECC0  F004         	call	i2_printf	;wreg free
 11699  00290E  0012               	return		;funcret
 11700  002910                     __end_ofi2_change_state_to_menu_12:
 11701                           	opt stack 0
 11702                           pclatu	equ	0xFFB
 11703                           pclath	equ	0xFFA
 11704                           tblptru	equ	0xFF8
 11705                           tblptrh	equ	0xFF7
 11706                           tblptrl	equ	0xFF6
 11707                           tablat	equ	0xFF5
 11708                           prodh	equ	0xFF4
 11709                           prodl	equ	0xFF3
 11710                           intcon	equ	0xFF2
 11711                           intcon2	equ	0xFF1
 11712                           intcon3	equ	0xFF0
 11713                           indf0	equ	0xFEF
 11714                           postinc0	equ	0xFEE
 11715                           fsr0h	equ	0xFEA
 11716                           fsr0l	equ	0xFE9
 11717                           wreg	equ	0xFE8
 11718                           postdec1	equ	0xFE5
 11719                           fsr1h	equ	0xFE2
 11720                           fsr1l	equ	0xFE1
 11721                           indf2	equ	0xFDF
 11722                           postinc2	equ	0xFDE
 11723                           postdec2	equ	0xFDD
 11724                           fsr2h	equ	0xFDA
 11725                           fsr2l	equ	0xFD9
 11726                           status	equ	0xFD8
 11727                           
 11728 ;; *************** function _change_state_to_menu_23 *****************
 11729 ;; Defined at:
 11730 ;;		line 450 in file "UI.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;		None
 11733 ;; Auto vars:     Size  Location     Type
 11734 ;;		None
 11735 ;; Return value:  Size  Location     Type
 11736 ;;                  1    wreg      void 
 11737 ;; Registers used:
 11738 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11739 ;; Tracked objects:
 11740 ;;		On entry : 0/0
 11741 ;;		On exit  : 0/0
 11742 ;;		Unchanged: 0/0
 11743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;Total ram usage:        0 bytes
 11749 ;; Hardware stack levels used:    1
 11750 ;; Hardware stack levels required when called:    3
 11751 ;; This function calls:
 11752 ;;		i2_lcdInst
 11753 ;;		i2_printf
 11754 ;; This function is called by:
 11755 ;;		_updateMenu
 11756 ;;		_inputHandler
 11757 ;; This function uses a non-reentrant model
 11758 ;;
 11759                           
 11760                           	psect	text53
 11761  002910                     __ptext53:
 11762                           	opt stack 0
 11763  002910                     _change_state_to_menu_23:
 11764                           	opt stack 18
 11765                           
 11766                           ;UI.c: 451: cur_state = 23;
 11767                           
 11768                           ;incstack = 0
 11769  002910  0E00               	movlw	0
 11770  002912  0100               	movlb	0	; () banked
 11771  002914  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11772  002916  0E17               	movlw	23
 11773  002918  6FE7               	movwf	_cur_state& (0+255),b
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;UI.c: 453: lcdInst(0b10000000);;
 11777  00291A  0E80               	movlw	128
 11778  00291C  EC96  F016         	call	i2_lcdInst
 11779                           
 11780                           ;UI.c: 454: printf("2. SORT         ");
 11781  002920  0E76               	movlw	low STR_17
 11782  002922  6E0D               	movwf	i2printf@f,c
 11783  002924  0EFE               	movlw	high STR_17
 11784  002926  6E0E               	movwf	i2printf@f+1,c
 11785  002928  ECC0  F004         	call	i2_printf	;wreg free
 11786                           
 11787                           ;UI.c: 455: lcdInst(0b11000000);;
 11788  00292C  0EC0               	movlw	192
 11789  00292E  EC96  F016         	call	i2_lcdInst
 11790                           
 11791                           ;UI.c: 456: printf("3. LOGS        <");
 11792  002932  0E53               	movlw	low STR_23
 11793  002934  6E0D               	movwf	i2printf@f,c
 11794  002936  0EFF               	movlw	high STR_23
 11795  002938  6E0E               	movwf	i2printf@f+1,c
 11796  00293A  ECC0  F004         	call	i2_printf	;wreg free
 11797  00293E  0012               	return		;funcret
 11798  002940                     __end_of_change_state_to_menu_23:
 11799                           	opt stack 0
 11800                           pclatu	equ	0xFFB
 11801                           pclath	equ	0xFFA
 11802                           tblptru	equ	0xFF8
 11803                           tblptrh	equ	0xFF7
 11804                           tblptrl	equ	0xFF6
 11805                           tablat	equ	0xFF5
 11806                           prodh	equ	0xFF4
 11807                           prodl	equ	0xFF3
 11808                           intcon	equ	0xFF2
 11809                           intcon2	equ	0xFF1
 11810                           intcon3	equ	0xFF0
 11811                           indf0	equ	0xFEF
 11812                           postinc0	equ	0xFEE
 11813                           fsr0h	equ	0xFEA
 11814                           fsr0l	equ	0xFE9
 11815                           wreg	equ	0xFE8
 11816                           postdec1	equ	0xFE5
 11817                           fsr1h	equ	0xFE2
 11818                           fsr1l	equ	0xFE1
 11819                           indf2	equ	0xFDF
 11820                           postinc2	equ	0xFDE
 11821                           postdec2	equ	0xFDD
 11822                           fsr2h	equ	0xFDA
 11823                           fsr2l	equ	0xFD9
 11824                           status	equ	0xFD8
 11825                           
 11826 ;; *************** function _change_state_to_menu_11 *****************
 11827 ;; Defined at:
 11828 ;;		line 426 in file "UI.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;		None
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  1    wreg      void 
 11835 ;; Registers used:
 11836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11846 ;;Total ram usage:        0 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:    3
 11849 ;; This function calls:
 11850 ;;		i2_lcdInst
 11851 ;;		i2_printf
 11852 ;; This function is called by:
 11853 ;;		_updateMenu
 11854 ;;		_inputHandler
 11855 ;; This function uses a non-reentrant model
 11856 ;;
 11857                           
 11858                           	psect	text54
 11859  002940                     __ptext54:
 11860                           	opt stack 0
 11861  002940                     _change_state_to_menu_11:
 11862                           	opt stack 18
 11863                           
 11864                           ;UI.c: 427: cur_state = 11;
 11865                           
 11866                           ;incstack = 0
 11867  002940  0E00               	movlw	0
 11868  002942  0100               	movlb	0	; () banked
 11869  002944  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11870  002946  0E0B               	movlw	11
 11871  002948  6FE7               	movwf	_cur_state& (0+255),b
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;UI.c: 429: lcdInst(0b10000000);;
 11875  00294A  0E80               	movlw	128
 11876  00294C  EC96  F016         	call	i2_lcdInst
 11877                           
 11878                           ;UI.c: 430: printf("1. DATE/TIME   <");
 11879  002950  0E75               	movlw	low STR_16
 11880  002952  6E0D               	movwf	i2printf@f,c
 11881  002954  0EFF               	movlw	high STR_16
 11882  002956  6E0E               	movwf	i2printf@f+1,c
 11883  002958  ECC0  F004         	call	i2_printf	;wreg free
 11884                           
 11885                           ;UI.c: 431: lcdInst(0b11000000);;
 11886  00295C  0EC0               	movlw	192
 11887  00295E  EC96  F016         	call	i2_lcdInst
 11888                           
 11889                           ;UI.c: 432: printf("2. SORT         ");
 11890  002962  0E76               	movlw	low STR_17
 11891  002964  6E0D               	movwf	i2printf@f,c
 11892  002966  0EFE               	movlw	high STR_17
 11893  002968  6E0E               	movwf	i2printf@f+1,c
 11894  00296A  ECC0  F004         	call	i2_printf	;wreg free
 11895  00296E  0012               	return		;funcret
 11896  002970                     __end_of_change_state_to_menu_11:
 11897                           	opt stack 0
 11898                           pclatu	equ	0xFFB
 11899                           pclath	equ	0xFFA
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon2	equ	0xFF1
 11908                           intcon3	equ	0xFF0
 11909                           indf0	equ	0xFEF
 11910                           postinc0	equ	0xFEE
 11911                           fsr0h	equ	0xFEA
 11912                           fsr0l	equ	0xFE9
 11913                           wreg	equ	0xFE8
 11914                           postdec1	equ	0xFE5
 11915                           fsr1h	equ	0xFE2
 11916                           fsr1l	equ	0xFE1
 11917                           indf2	equ	0xFDF
 11918                           postinc2	equ	0xFDE
 11919                           postdec2	equ	0xFDD
 11920                           fsr2h	equ	0xFDA
 11921                           fsr2l	equ	0xFD9
 11922                           status	equ	0xFD8
 11923                           
 11924 ;; *************** function _change_state_to_logs_34 *****************
 11925 ;; Defined at:
 11926 ;;		line 493 in file "UI.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;		None
 11931 ;; Return value:  Size  Location     Type
 11932 ;;                  1    wreg      void 
 11933 ;; Registers used:
 11934 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;Total ram usage:        0 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    3
 11947 ;; This function calls:
 11948 ;;		i2_lcdInst
 11949 ;;		i2_printf
 11950 ;; This function is called by:
 11951 ;;		_updateMenu
 11952 ;;		_inputHandler
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text55
 11957  002970                     __ptext55:
 11958                           	opt stack 0
 11959  002970                     _change_state_to_logs_34:
 11960                           	opt stack 18
 11961                           
 11962                           ;UI.c: 494: cur_state = 1034;
 11963                           
 11964                           ;incstack = 0
 11965  002970  0E04               	movlw	4
 11966  002972  0100               	movlb	0	; () banked
 11967  002974  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11968  002976  0E0A               	movlw	10
 11969  002978  6FE7               	movwf	_cur_state& (0+255),b
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;UI.c: 495: lcdInst(0b10000000);;
 11973  00297A  0E80               	movlw	128
 11974  00297C  EC96  F016         	call	i2_lcdInst
 11975                           
 11976                           ;UI.c: 496: printf("LOG 3           ");
 11977  002980  0E43               	movlw	low STR_29
 11978  002982  6E0D               	movwf	i2printf@f,c
 11979  002984  0EFE               	movlw	high STR_29
 11980  002986  6E0E               	movwf	i2printf@f+1,c
 11981  002988  ECC0  F004         	call	i2_printf	;wreg free
 11982                           
 11983                           ;UI.c: 497: lcdInst(0b11000000);;
 11984  00298C  0EC0               	movlw	192
 11985  00298E  EC96  F016         	call	i2_lcdInst
 11986                           
 11987                           ;UI.c: 498: printf("LOG 4          <");
 11988  002992  0E42               	movlw	low STR_35
 11989  002994  6E0D               	movwf	i2printf@f,c
 11990  002996  0EFF               	movlw	high STR_35
 11991  002998  6E0E               	movwf	i2printf@f+1,c
 11992  00299A  ECC0  F004         	call	i2_printf	;wreg free
 11993  00299E  0012               	return		;funcret
 11994  0029A0                     __end_of_change_state_to_logs_34:
 11995                           	opt stack 0
 11996                           pclatu	equ	0xFFB
 11997                           pclath	equ	0xFFA
 11998                           tblptru	equ	0xFF8
 11999                           tblptrh	equ	0xFF7
 12000                           tblptrl	equ	0xFF6
 12001                           tablat	equ	0xFF5
 12002                           prodh	equ	0xFF4
 12003                           prodl	equ	0xFF3
 12004                           intcon	equ	0xFF2
 12005                           intcon2	equ	0xFF1
 12006                           intcon3	equ	0xFF0
 12007                           indf0	equ	0xFEF
 12008                           postinc0	equ	0xFEE
 12009                           fsr0h	equ	0xFEA
 12010                           fsr0l	equ	0xFE9
 12011                           wreg	equ	0xFE8
 12012                           postdec1	equ	0xFE5
 12013                           fsr1h	equ	0xFE2
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8
 12021                           
 12022 ;; *************** function _change_state_to_logs_33 *****************
 12023 ;; Defined at:
 12024 ;;		line 486 in file "UI.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;		None
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;		None
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;Total ram usage:        0 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    3
 12045 ;; This function calls:
 12046 ;;		i2_lcdInst
 12047 ;;		i2_printf
 12048 ;; This function is called by:
 12049 ;;		_updateMenu
 12050 ;;		_inputHandler
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           	psect	text56
 12055  0029A0                     __ptext56:
 12056                           	opt stack 0
 12057  0029A0                     _change_state_to_logs_33:
 12058                           	opt stack 18
 12059                           
 12060                           ;UI.c: 487: cur_state = 1033;
 12061                           
 12062                           ;incstack = 0
 12063  0029A0  0E04               	movlw	4
 12064  0029A2  0100               	movlb	0	; () banked
 12065  0029A4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12066  0029A6  0E09               	movlw	9
 12067  0029A8  6FE7               	movwf	_cur_state& (0+255),b
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;UI.c: 488: lcdInst(0b10000000);;
 12071  0029AA  0E80               	movlw	128
 12072  0029AC  EC96  F016         	call	i2_lcdInst
 12073                           
 12074                           ;UI.c: 489: printf("LOG 3          <");
 12075  0029B0  0E31               	movlw	low STR_31
 12076  0029B2  6E0D               	movwf	i2printf@f,c
 12077  0029B4  0EFF               	movlw	high STR_31
 12078  0029B6  6E0E               	movwf	i2printf@f+1,c
 12079  0029B8  ECC0  F004         	call	i2_printf	;wreg free
 12080                           
 12081                           ;UI.c: 490: lcdInst(0b11000000);;
 12082  0029BC  0EC0               	movlw	192
 12083  0029BE  EC96  F016         	call	i2_lcdInst
 12084                           
 12085                           ;UI.c: 491: printf("LOG 4           ");
 12086  0029C2  0E54               	movlw	low STR_33
 12087  0029C4  6E0D               	movwf	i2printf@f,c
 12088  0029C6  0EFE               	movlw	high STR_33
 12089  0029C8  6E0E               	movwf	i2printf@f+1,c
 12090  0029CA  ECC0  F004         	call	i2_printf	;wreg free
 12091  0029CE  0012               	return		;funcret
 12092  0029D0                     __end_of_change_state_to_logs_33:
 12093                           	opt stack 0
 12094                           pclatu	equ	0xFFB
 12095                           pclath	equ	0xFFA
 12096                           tblptru	equ	0xFF8
 12097                           tblptrh	equ	0xFF7
 12098                           tblptrl	equ	0xFF6
 12099                           tablat	equ	0xFF5
 12100                           prodh	equ	0xFF4
 12101                           prodl	equ	0xFF3
 12102                           intcon	equ	0xFF2
 12103                           intcon2	equ	0xFF1
 12104                           intcon3	equ	0xFF0
 12105                           indf0	equ	0xFEF
 12106                           postinc0	equ	0xFEE
 12107                           fsr0h	equ	0xFEA
 12108                           fsr0l	equ	0xFE9
 12109                           wreg	equ	0xFE8
 12110                           postdec1	equ	0xFE5
 12111                           fsr1h	equ	0xFE2
 12112                           fsr1l	equ	0xFE1
 12113                           indf2	equ	0xFDF
 12114                           postinc2	equ	0xFDE
 12115                           postdec2	equ	0xFDD
 12116                           fsr2h	equ	0xFDA
 12117                           fsr2l	equ	0xFD9
 12118                           status	equ	0xFD8
 12119                           
 12120 ;; *************** function _change_state_to_logs_23 *****************
 12121 ;; Defined at:
 12122 ;;		line 479 in file "UI.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;		None
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;		None
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  1    wreg      void 
 12129 ;; Registers used:
 12130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;Total ram usage:        0 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    3
 12143 ;; This function calls:
 12144 ;;		i2_lcdInst
 12145 ;;		i2_printf
 12146 ;; This function is called by:
 12147 ;;		_updateMenu
 12148 ;;		_inputHandler
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           	psect	text57
 12153  002A8E                     __ptext57:
 12154                           	opt stack 0
 12155  002A8E                     _change_state_to_logs_23:
 12156                           	opt stack 18
 12157                           
 12158                           ;UI.c: 480: cur_state = 1023;
 12159                           
 12160                           ;incstack = 0
 12161  002A8E  0E03               	movlw	3
 12162  002A90  0100               	movlb	0	; () banked
 12163  002A92  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12164  002A94  69E7               	setf	_cur_state& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;UI.c: 481: lcdInst(0b10000000);;
 12168  002A96  0E80               	movlw	128
 12169  002A98  EC96  F016         	call	i2_lcdInst
 12170                           
 12171                           ;UI.c: 482: printf("LOG 2           ");
 12172  002A9C  0E32               	movlw	low STR_25
 12173  002A9E  6E0D               	movwf	i2printf@f,c
 12174  002AA0  0EFE               	movlw	high STR_25
 12175  002AA2  6E0E               	movwf	i2printf@f+1,c
 12176  002AA4  ECC0  F004         	call	i2_printf	;wreg free
 12177                           
 12178                           ;UI.c: 483: lcdInst(0b11000000);;
 12179  002AA8  0EC0               	movlw	192
 12180  002AAA  EC96  F016         	call	i2_lcdInst
 12181                           
 12182                           ;UI.c: 484: printf("LOG 3          <");
 12183  002AAE  0E31               	movlw	low STR_31
 12184  002AB0  6E0D               	movwf	i2printf@f,c
 12185  002AB2  0EFF               	movlw	high STR_31
 12186  002AB4  6E0E               	movwf	i2printf@f+1,c
 12187  002AB6  ECC0  F004         	call	i2_printf	;wreg free
 12188  002ABA  0012               	return		;funcret
 12189  002ABC                     __end_of_change_state_to_logs_23:
 12190                           	opt stack 0
 12191                           pclatu	equ	0xFFB
 12192                           pclath	equ	0xFFA
 12193                           tblptru	equ	0xFF8
 12194                           tblptrh	equ	0xFF7
 12195                           tblptrl	equ	0xFF6
 12196                           tablat	equ	0xFF5
 12197                           prodh	equ	0xFF4
 12198                           prodl	equ	0xFF3
 12199                           intcon	equ	0xFF2
 12200                           intcon2	equ	0xFF1
 12201                           intcon3	equ	0xFF0
 12202                           indf0	equ	0xFEF
 12203                           postinc0	equ	0xFEE
 12204                           fsr0h	equ	0xFEA
 12205                           fsr0l	equ	0xFE9
 12206                           wreg	equ	0xFE8
 12207                           postdec1	equ	0xFE5
 12208                           fsr1h	equ	0xFE2
 12209                           fsr1l	equ	0xFE1
 12210                           indf2	equ	0xFDF
 12211                           postinc2	equ	0xFDE
 12212                           postdec2	equ	0xFDD
 12213                           fsr2h	equ	0xFDA
 12214                           fsr2l	equ	0xFD9
 12215                           status	equ	0xFD8
 12216                           
 12217 ;; *************** function _change_state_to_logs_22 *****************
 12218 ;; Defined at:
 12219 ;;		line 472 in file "UI.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;		None
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;		None
 12224 ;; Return value:  Size  Location     Type
 12225 ;;                  1    wreg      void 
 12226 ;; Registers used:
 12227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/0
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;Total ram usage:        0 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; Hardware stack levels required when called:    3
 12240 ;; This function calls:
 12241 ;;		i2_lcdInst
 12242 ;;		i2_printf
 12243 ;; This function is called by:
 12244 ;;		_updateMenu
 12245 ;;		_inputHandler
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           	psect	text58
 12250  0029D0                     __ptext58:
 12251                           	opt stack 0
 12252  0029D0                     _change_state_to_logs_22:
 12253                           	opt stack 18
 12254                           
 12255                           ;UI.c: 473: cur_state = 1022;
 12256                           
 12257                           ;incstack = 0
 12258  0029D0  0E03               	movlw	3
 12259  0029D2  0100               	movlb	0	; () banked
 12260  0029D4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12261  0029D6  0EFE               	movlw	254
 12262  0029D8  6FE7               	movwf	_cur_state& (0+255),b
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;UI.c: 474: lcdInst(0b10000000);;
 12266  0029DA  0E80               	movlw	128
 12267  0029DC  EC96  F016         	call	i2_lcdInst
 12268                           
 12269                           ;UI.c: 475: printf("LOG 2          <");
 12270  0029E0  0E20               	movlw	low STR_27
 12271  0029E2  6E0D               	movwf	i2printf@f,c
 12272  0029E4  0EFF               	movlw	high STR_27
 12273  0029E6  6E0E               	movwf	i2printf@f+1,c
 12274  0029E8  ECC0  F004         	call	i2_printf	;wreg free
 12275                           
 12276                           ;UI.c: 476: lcdInst(0b11000000);;
 12277  0029EC  0EC0               	movlw	192
 12278  0029EE  EC96  F016         	call	i2_lcdInst
 12279                           
 12280                           ;UI.c: 477: printf("LOG 3           ");
 12281  0029F2  0E43               	movlw	low STR_29
 12282  0029F4  6E0D               	movwf	i2printf@f,c
 12283  0029F6  0EFE               	movlw	high STR_29
 12284  0029F8  6E0E               	movwf	i2printf@f+1,c
 12285  0029FA  ECC0  F004         	call	i2_printf	;wreg free
 12286  0029FE  0012               	return		;funcret
 12287  002A00                     __end_of_change_state_to_logs_22:
 12288                           	opt stack 0
 12289                           pclatu	equ	0xFFB
 12290                           pclath	equ	0xFFA
 12291                           tblptru	equ	0xFF8
 12292                           tblptrh	equ	0xFF7
 12293                           tblptrl	equ	0xFF6
 12294                           tablat	equ	0xFF5
 12295                           prodh	equ	0xFF4
 12296                           prodl	equ	0xFF3
 12297                           intcon	equ	0xFF2
 12298                           intcon2	equ	0xFF1
 12299                           intcon3	equ	0xFF0
 12300                           indf0	equ	0xFEF
 12301                           postinc0	equ	0xFEE
 12302                           fsr0h	equ	0xFEA
 12303                           fsr0l	equ	0xFE9
 12304                           wreg	equ	0xFE8
 12305                           postdec1	equ	0xFE5
 12306                           fsr1h	equ	0xFE2
 12307                           fsr1l	equ	0xFE1
 12308                           indf2	equ	0xFDF
 12309                           postinc2	equ	0xFDE
 12310                           postdec2	equ	0xFDD
 12311                           fsr2h	equ	0xFDA
 12312                           fsr2l	equ	0xFD9
 12313                           status	equ	0xFD8
 12314                           
 12315 ;; *************** function _change_state_to_logs_12 *****************
 12316 ;; Defined at:
 12317 ;;		line 465 in file "UI.c"
 12318 ;; Parameters:    Size  Location     Type
 12319 ;;		None
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;		None
 12322 ;; Return value:  Size  Location     Type
 12323 ;;                  1    wreg      void 
 12324 ;; Registers used:
 12325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12326 ;; Tracked objects:
 12327 ;;		On entry : 0/0
 12328 ;;		On exit  : 0/0
 12329 ;;		Unchanged: 0/0
 12330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;Total ram usage:        0 bytes
 12336 ;; Hardware stack levels used:    1
 12337 ;; Hardware stack levels required when called:    3
 12338 ;; This function calls:
 12339 ;;		i2_lcdInst
 12340 ;;		i2_printf
 12341 ;; This function is called by:
 12342 ;;		_updateMenu
 12343 ;;		_inputHandler
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           	psect	text59
 12348  002A00                     __ptext59:
 12349                           	opt stack 0
 12350  002A00                     _change_state_to_logs_12:
 12351                           	opt stack 18
 12352                           
 12353                           ;UI.c: 466: cur_state = 1012;
 12354                           
 12355                           ;incstack = 0
 12356  002A00  0E03               	movlw	3
 12357  002A02  0100               	movlb	0	; () banked
 12358  002A04  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12359  002A06  0EF4               	movlw	244
 12360  002A08  6FE7               	movwf	_cur_state& (0+255),b
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;UI.c: 467: lcdInst(0b10000000);;
 12364  002A0A  0E80               	movlw	128
 12365  002A0C  EC96  F016         	call	i2_lcdInst
 12366                           
 12367                           ;UI.c: 468: printf("LOG 1           ");
 12368  002A10  0E21               	movlw	low STR_26
 12369  002A12  6E0D               	movwf	i2printf@f,c
 12370  002A14  0EFE               	movlw	high STR_26
 12371  002A16  6E0E               	movwf	i2printf@f+1,c
 12372  002A18  ECC0  F004         	call	i2_printf	;wreg free
 12373                           
 12374                           ;UI.c: 469: lcdInst(0b11000000);;
 12375  002A1C  0EC0               	movlw	192
 12376  002A1E  EC96  F016         	call	i2_lcdInst
 12377                           
 12378                           ;UI.c: 470: printf("LOG 2          <");
 12379  002A22  0E20               	movlw	low STR_27
 12380  002A24  6E0D               	movwf	i2printf@f,c
 12381  002A26  0EFF               	movlw	high STR_27
 12382  002A28  6E0E               	movwf	i2printf@f+1,c
 12383  002A2A  ECC0  F004         	call	i2_printf	;wreg free
 12384  002A2E  0012               	return		;funcret
 12385  002A30                     __end_of_change_state_to_logs_12:
 12386                           	opt stack 0
 12387                           pclatu	equ	0xFFB
 12388                           pclath	equ	0xFFA
 12389                           tblptru	equ	0xFF8
 12390                           tblptrh	equ	0xFF7
 12391                           tblptrl	equ	0xFF6
 12392                           tablat	equ	0xFF5
 12393                           prodh	equ	0xFF4
 12394                           prodl	equ	0xFF3
 12395                           intcon	equ	0xFF2
 12396                           intcon2	equ	0xFF1
 12397                           intcon3	equ	0xFF0
 12398                           indf0	equ	0xFEF
 12399                           postinc0	equ	0xFEE
 12400                           fsr0h	equ	0xFEA
 12401                           fsr0l	equ	0xFE9
 12402                           wreg	equ	0xFE8
 12403                           postdec1	equ	0xFE5
 12404                           fsr1h	equ	0xFE2
 12405                           fsr1l	equ	0xFE1
 12406                           indf2	equ	0xFDF
 12407                           postinc2	equ	0xFDE
 12408                           postdec2	equ	0xFDD
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8
 12412                           
 12413 ;; *************** function _change_state_to_logs_11 *****************
 12414 ;; Defined at:
 12415 ;;		line 458 in file "UI.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;		None
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;		None
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  1    wreg      void 
 12422 ;; Registers used:
 12423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;Total ram usage:        0 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    3
 12436 ;; This function calls:
 12437 ;;		i2_lcdInst
 12438 ;;		i2_printf
 12439 ;; This function is called by:
 12440 ;;		_updateMenu
 12441 ;;		_inputHandler
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text60
 12446  002A30                     __ptext60:
 12447                           	opt stack 0
 12448  002A30                     _change_state_to_logs_11:
 12449                           	opt stack 18
 12450                           
 12451                           ;UI.c: 459: cur_state = 1011;
 12452                           
 12453                           ;incstack = 0
 12454  002A30  0E03               	movlw	3
 12455  002A32  0100               	movlb	0	; () banked
 12456  002A34  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12457  002A36  0EF3               	movlw	243
 12458  002A38  6FE7               	movwf	_cur_state& (0+255),b
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;UI.c: 460: lcdInst(0b10000000);;
 12462  002A3A  0E80               	movlw	128
 12463  002A3C  EC96  F016         	call	i2_lcdInst
 12464                           
 12465                           ;UI.c: 461: printf("LOG 1          <");
 12466  002A40  0E0F               	movlw	low STR_24
 12467  002A42  6E0D               	movwf	i2printf@f,c
 12468  002A44  0EFF               	movlw	high STR_24
 12469  002A46  6E0E               	movwf	i2printf@f+1,c
 12470  002A48  ECC0  F004         	call	i2_printf	;wreg free
 12471                           
 12472                           ;UI.c: 462: lcdInst(0b11000000);;
 12473  002A4C  0EC0               	movlw	192
 12474  002A4E  EC96  F016         	call	i2_lcdInst
 12475                           
 12476                           ;UI.c: 463: printf("LOG 2           ");
 12477  002A52  0E32               	movlw	low STR_25
 12478  002A54  6E0D               	movwf	i2printf@f,c
 12479  002A56  0EFE               	movlw	high STR_25
 12480  002A58  6E0E               	movwf	i2printf@f+1,c
 12481  002A5A  ECC0  F004         	call	i2_printf	;wreg free
 12482  002A5E  0012               	return		;funcret
 12483  002A60                     __end_of_change_state_to_logs_11:
 12484                           	opt stack 0
 12485                           pclatu	equ	0xFFB
 12486                           pclath	equ	0xFFA
 12487                           tblptru	equ	0xFF8
 12488                           tblptrh	equ	0xFF7
 12489                           tblptrl	equ	0xFF6
 12490                           tablat	equ	0xFF5
 12491                           prodh	equ	0xFF4
 12492                           prodl	equ	0xFF3
 12493                           intcon	equ	0xFF2
 12494                           intcon2	equ	0xFF1
 12495                           intcon3	equ	0xFF0
 12496                           indf0	equ	0xFEF
 12497                           postinc0	equ	0xFEE
 12498                           fsr0h	equ	0xFEA
 12499                           fsr0l	equ	0xFE9
 12500                           wreg	equ	0xFE8
 12501                           postdec1	equ	0xFE5
 12502                           fsr1h	equ	0xFE2
 12503                           fsr1l	equ	0xFE1
 12504                           indf2	equ	0xFDF
 12505                           postinc2	equ	0xFDE
 12506                           postdec2	equ	0xFDD
 12507                           fsr2h	equ	0xFDA
 12508                           fsr2l	equ	0xFD9
 12509                           status	equ	0xFD8
 12510                           
 12511 ;; *************** function _dispLogs *****************
 12512 ;; Defined at:
 12513 ;;		line 412 in file "UI.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;  myLog           2    0[COMRAM] int 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;Total ram usage:        2 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; This function calls:
 12534 ;;		Nothing
 12535 ;; This function is called by:
 12536 ;;		_updateMenu
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           	psect	text61
 12541  002CC8                     __ptext61:
 12542                           	opt stack 0
 12543  002CC8                     _dispLogs:
 12544                           	opt stack 22
 12545                           
 12546                           ;UI.c: 413: logstate = 1;
 12547                           
 12548                           ;incstack = 0
 12549  002CC8  0E00               	movlw	0
 12550  002CCA  0100               	movlb	0	; () banked
 12551  002CCC  6FF8               	movwf	(_logstate+1)& (0+255),b
 12552  002CCE  0E01               	movlw	1
 12553  002CD0  6FF7               	movwf	_logstate& (0+255),b
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;UI.c: 414: log = myLog;
 12557  002CD2  C001  F0F5         	movff	dispLogs@myLog,_log
 12558  002CD6  C002  F0F6         	movff	dispLogs@myLog+1,_log+1
 12559                           
 12560                           ; BSR set to: 0
 12561  002CDA  0012               	return		;funcret
 12562  002CDC                     __end_of_dispLogs:
 12563                           	opt stack 0
 12564                           pclatu	equ	0xFFB
 12565                           pclath	equ	0xFFA
 12566                           tblptru	equ	0xFF8
 12567                           tblptrh	equ	0xFF7
 12568                           tblptrl	equ	0xFF6
 12569                           tablat	equ	0xFF5
 12570                           prodh	equ	0xFF4
 12571                           prodl	equ	0xFF3
 12572                           intcon	equ	0xFF2
 12573                           intcon2	equ	0xFF1
 12574                           intcon3	equ	0xFF0
 12575                           indf0	equ	0xFEF
 12576                           postinc0	equ	0xFEE
 12577                           fsr0h	equ	0xFEA
 12578                           fsr0l	equ	0xFE9
 12579                           wreg	equ	0xFE8
 12580                           postdec1	equ	0xFE5
 12581                           fsr1h	equ	0xFE2
 12582                           fsr1l	equ	0xFE1
 12583                           indf2	equ	0xFDF
 12584                           postinc2	equ	0xFDE
 12585                           postdec2	equ	0xFDD
 12586                           fsr2h	equ	0xFDA
 12587                           fsr2l	equ	0xFD9
 12588                           status	equ	0xFD8
 12589                           
 12590 ;; *************** function _printSortTimer *****************
 12591 ;; Defined at:
 12592 ;;		line 244 in file "sort.c"
 12593 ;; Parameters:    Size  Location     Type
 12594 ;;		None
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;  i               2   72[COMRAM] int 
 12597 ;;  curTime        14   44[COMRAM] int [7]
 12598 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12599 ;;  sec             2   66[COMRAM] int 
 12600 ;;  min             2   64[COMRAM] int 
 12601 ;;  hour            2   62[COMRAM] int 
 12602 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12603 ;;  start_sec       2   58[COMRAM] unsigned int 
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;Total ram usage:       33 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    3
 12620 ;; This function calls:
 12621 ;;		i2___lwdiv
 12622 ;;		i2___lwmod
 12623 ;;		i2___wmul
 12624 ;;		i2_getRTC
 12625 ;;		i2_lcdInst
 12626 ;;		i2_printf
 12627 ;; This function is called by:
 12628 ;;		_handler
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           	psect	text62
 12633  001486                     __ptext62:
 12634                           	opt stack 0
 12635  001486                     _printSortTimer:
 12636                           	opt stack 20
 12637                           
 12638                           ;sort.c: 245: getRTC();
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;incstack = 0
 12642  001486  ECBB  F011         	call	i2_getRTC	;wreg free
 12643                           
 12644                           ;sort.c: 246: int curTime[7];
 12645                           ;sort.c: 247: for(int i = 0; i < 7; i++){
 12646  00148A  0E00               	movlw	0
 12647  00148C  6E4A               	movwf	printSortTimer@i+1,c
 12648  00148E  0E00               	movlw	0
 12649  001490  6E49               	movwf	printSortTimer@i,c
 12650  001492                     i2l5622:
 12651  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 12652  001494  D006               	goto	i2l5626
 12653  001496  504A               	movf	printSortTimer@i+1,w,c
 12654  001498  E131               	bnz	i2l5632
 12655  00149A  0E07               	movlw	7
 12656  00149C  5C49               	subwf	printSortTimer@i,w,c
 12657  00149E  B0D8               	btfsc	status,0,c
 12658  0014A0  D02D               	goto	i2l5632
 12659  0014A2                     i2l5626:
 12660                           
 12661                           ;sort.c: 248: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12662  0014A2  0ED4               	movlw	low _time
 12663  0014A4  2449               	addwf	printSortTimer@i,w,c
 12664  0014A6  6ED9               	movwf	fsr2l,c
 12665  0014A8  0E00               	movlw	high _time
 12666  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 12667  0014AC  6EDA               	movwf	fsr2h,c
 12668  0014AE  50DF               	movf	indf2,w,c
 12669  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 12670  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 12671  0014B4  0E0F               	movlw	15
 12672  0014B6  162A               	andwf	??_printSortTimer,f,c
 12673  0014B8  0E0F               	movlw	15
 12674  0014BA  162A               	andwf	??_printSortTimer,f,c
 12675  0014BC  502A               	movf	??_printSortTimer,w,c
 12676  0014BE  0D0A               	mullw	10
 12677  0014C0  0ED4               	movlw	low _time
 12678  0014C2  2449               	addwf	printSortTimer@i,w,c
 12679  0014C4  6ED9               	movwf	fsr2l,c
 12680  0014C6  0E00               	movlw	high _time
 12681  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 12682  0014CA  6EDA               	movwf	fsr2h,c
 12683  0014CC  50DF               	movf	indf2,w,c
 12684  0014CE  0B0F               	andlw	15
 12685  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12686  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12687  0014D4  50F3               	movf	prodl,w,c
 12688  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 12689  0014D8  50F4               	movf	prodh,w,c
 12690  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 12691  0014DC  90D8               	bcf	status,0,c
 12692  0014DE  3449               	rlcf	printSortTimer@i,w,c
 12693  0014E0  6ED9               	movwf	fsr2l,c
 12694  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 12695  0014E4  6EDA               	movwf	fsr2h,c
 12696  0014E6  0E2D               	movlw	low printSortTimer@curTime
 12697  0014E8  26D9               	addwf	fsr2l,f,c
 12698  0014EA  0E00               	movlw	high printSortTimer@curTime
 12699  0014EC  22DA               	addwfc	fsr2h,f,c
 12700  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12701  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12702  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 12703  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 12704  0014FA  D7CB               	goto	i2l5622
 12705  0014FC                     i2l5632:
 12706                           
 12707                           ;sort.c: 249: }
 12708                           ;sort.c: 250: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12709  0014FC  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 12710  001500  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12711  001504  0E00               	movlw	0
 12712  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 12713  001508  0E3C               	movlw	60
 12714  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 12715  00150C  ECC9  F015         	call	i2___wmul	;wreg free
 12716  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12717  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12718  001518  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 12719  00151C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12720  001520  0E0E               	movlw	14
 12721  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 12722  001524  0E10               	movlw	16
 12723  001526  6E03               	movwf	i2___wmul@multiplicand,c
 12724  001528  ECC9  F015         	call	i2___wmul	;wreg free
 12725  00152C  5001               	movf	?i2___wmul,w,c
 12726  00152E  262A               	addwf	??_printSortTimer,f,c
 12727  001530  5002               	movf	?i2___wmul+1,w,c
 12728  001532  222B               	addwfc	??_printSortTimer+1,f,c
 12729  001534  0101               	movlb	1	; () banked
 12730  001536  510E               	movf	_startTime& (0+255),w,b
 12731  001538  242A               	addwf	??_printSortTimer,w,c
 12732  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 12733  00153C  0101               	movlb	1	; () banked
 12734  00153E  510F               	movf	(_startTime+1)& (0+255),w,b
 12735  001540  202B               	addwfc	??_printSortTimer+1,w,c
 12736  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 12737                           
 12738                           ;sort.c: 251: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12739  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12740  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12741  00154C  0E00               	movlw	0
 12742  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 12743  001550  0E3C               	movlw	60
 12744  001552  6E03               	movwf	i2___wmul@multiplicand,c
 12745  001554  ECC9  F015         	call	i2___wmul	;wreg free
 12746  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12747  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12748  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12749  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12750  001568  0E0E               	movlw	14
 12751  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12752  00156C  0E10               	movlw	16
 12753  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 12754  001570  ECC9  F015         	call	i2___wmul	;wreg free
 12755  001574  5001               	movf	?i2___wmul,w,c
 12756  001576  262A               	addwf	??_printSortTimer,f,c
 12757  001578  5002               	movf	?i2___wmul+1,w,c
 12758  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 12759  00157C  502D               	movf	printSortTimer@curTime,w,c
 12760  00157E  242A               	addwf	??_printSortTimer,w,c
 12761  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 12762  001582  502E               	movf	printSortTimer@curTime+1,w,c
 12763  001584  202B               	addwfc	??_printSortTimer+1,w,c
 12764  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12765                           
 12766                           ;sort.c: 252: unsigned int timeDiff = cur_sec - start_sec;
 12767  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12768  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12769  001590  1E2A               	comf	??_printSortTimer,f,c
 12770  001592  1E2B               	comf	??_printSortTimer+1,f,c
 12771  001594  4A2A               	infsnz	??_printSortTimer,f,c
 12772  001596  2A2B               	incf	??_printSortTimer+1,f,c
 12773  001598  503D               	movf	printSortTimer@cur_sec,w,c
 12774  00159A  242A               	addwf	??_printSortTimer,w,c
 12775  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 12776  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 12777  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 12778  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 12779                           
 12780                           ;sort.c: 254: total_time = timeDiff;
 12781  0015A4  C047  F0F9         	movff	printSortTimer@timeDiff,_total_time
 12782  0015A8  C048  F0FA         	movff	printSortTimer@timeDiff+1,_total_time+1
 12783                           
 12784                           ;sort.c: 256: if(timeDiff >= 10){
 12785  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 12786  0015AE  E104               	bnz	i2u474_40
 12787  0015B0  0E0A               	movlw	10
 12788  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 12789  0015B4  A0D8               	btfss	status,0,c
 12790  0015B6  D003               	goto	i2l5642
 12791  0015B8                     i2u474_40:
 12792                           
 12793                           ;sort.c: 257: machine_state = DoneSorting_state;
 12794  0015B8  0E02               	movlw	2
 12795  0015BA  0100               	movlb	0	; () banked
 12796  0015BC  6FFB               	movwf	_machine_state& (0+255),b
 12797  0015BE                     i2l5642:
 12798                           
 12799                           ;sort.c: 259: }
 12800                           ;sort.c: 261: int hour = timeDiff / 3600;
 12801  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12802  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12803  0015C6  0E0E               	movlw	14
 12804  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12805  0015CA  0E10               	movlw	16
 12806  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 12807  0015CE  EC18  F013         	call	i2___lwdiv	;wreg free
 12808  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12809  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12810                           
 12811                           ;sort.c: 262: int min = (timeDiff % 3600) / 60;
 12812  0015DA  0E0E               	movlw	14
 12813  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 12814  0015DE  0E10               	movlw	16
 12815  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 12816  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12817  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12818  0015EA  ECB0  F013         	call	i2___lwmod	;wreg free
 12819  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12820  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12821  0015F6  0E00               	movlw	0
 12822  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12823  0015FA  0E3C               	movlw	60
 12824  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 12825  0015FE  EC18  F013         	call	i2___lwdiv	;wreg free
 12826  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12827  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12828                           
 12829                           ;sort.c: 263: int sec = (timeDiff % 3600) % 60;
 12830  00160A  0E0E               	movlw	14
 12831  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 12832  00160E  0E10               	movlw	16
 12833  001610  6E03               	movwf	i2___lwmod@divisor,c
 12834  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12835  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12836  00161A  ECB0  F013         	call	i2___lwmod	;wreg free
 12837  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2064
 12838  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2064+1
 12839                           
 12840                           ;sort.c: 263: int sec = (timeDiff % 3600) % 60;
 12841  001626  C045  F001         	movff	_printSortTimer$2064,i2___lwmod@dividend
 12842  00162A  C046  F002         	movff	_printSortTimer$2064+1,i2___lwmod@dividend+1
 12843  00162E  0E00               	movlw	0
 12844  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 12845  001632  0E3C               	movlw	60
 12846  001634  6E03               	movwf	i2___lwmod@divisor,c
 12847  001636  ECB0  F013         	call	i2___lwmod	;wreg free
 12848  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12849  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12850                           
 12851                           ;sort.c: 265: lcdInst(0b10000000);;
 12852  001642  0E80               	movlw	128
 12853  001644  EC96  F016         	call	i2_lcdInst
 12854                           
 12855                           ;sort.c: 266: printf("Sorting...");
 12856  001648  0EA8               	movlw	low STR_49
 12857  00164A  6E0D               	movwf	i2printf@f,c
 12858  00164C  0EFF               	movlw	high STR_49
 12859  00164E  6E0E               	movwf	i2printf@f+1,c
 12860  001650  ECC0  F004         	call	i2_printf	;wreg free
 12861                           
 12862                           ;sort.c: 267: lcdInst(0b11000000);;
 12863  001654  0EC0               	movlw	192
 12864  001656  EC96  F016         	call	i2_lcdInst
 12865                           
 12866                           ;sort.c: 268: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12867  00165A  0EE8               	movlw	low STR_2
 12868  00165C  6E0D               	movwf	i2printf@f,c
 12869  00165E  0EFD               	movlw	high STR_2
 12870  001660  6E0E               	movwf	i2printf@f+1,c
 12871  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12872  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12873  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12874  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12875  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12876  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12877  00167A  ECC0  F004         	call	i2_printf	;wreg free
 12878  00167E  0012               	return		;funcret
 12879  001680                     __end_of_printSortTimer:
 12880                           	opt stack 0
 12881                           pclatu	equ	0xFFB
 12882                           pclath	equ	0xFFA
 12883                           tblptru	equ	0xFF8
 12884                           tblptrh	equ	0xFF7
 12885                           tblptrl	equ	0xFF6
 12886                           tablat	equ	0xFF5
 12887                           prodh	equ	0xFF4
 12888                           prodl	equ	0xFF3
 12889                           intcon	equ	0xFF2
 12890                           intcon2	equ	0xFF1
 12891                           intcon3	equ	0xFF0
 12892                           indf0	equ	0xFEF
 12893                           postinc0	equ	0xFEE
 12894                           fsr0h	equ	0xFEA
 12895                           fsr0l	equ	0xFE9
 12896                           wreg	equ	0xFE8
 12897                           postdec1	equ	0xFE5
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           indf2	equ	0xFDF
 12901                           postinc2	equ	0xFDE
 12902                           postdec2	equ	0xFDD
 12903                           fsr2h	equ	0xFDA
 12904                           fsr2l	equ	0xFD9
 12905                           status	equ	0xFD8
 12906                           
 12907 ;; *************** function i2_printf *****************
 12908 ;; Defined at:
 12909 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12912 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12913 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12914 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12915 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12916 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12917 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12918 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12919 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12920 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12921 ;;		 -> STR_2(21), STR_1(17), 
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;  printf          4    0        struct .
 12924 ;;  printf          2   39[COMRAM] int 
 12925 ;;  printf          2   35[COMRAM] unsigned int 
 12926 ;;  printf          2   33[COMRAM] unsigned int 
 12927 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12928 ;;		 -> STR_51(7), printRTC@month(4), 
 12929 ;;  printf          2   29[COMRAM] PTR void [1]
 12930 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12931 ;;  printf          1   38[COMRAM] char 
 12932 ;;  printf          1   37[COMRAM] unsigned char 
 12933 ;;  printf          1   28[COMRAM] char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  2   12[COMRAM] int 
 12936 ;; Registers used:
 12937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12943 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;Total ram usage:       29 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    2
 12950 ;; This function calls:
 12951 ;;		i2___lwdiv
 12952 ;;		i2___lwmod
 12953 ;;		i2___wmul
 12954 ;;		i2_isdigit
 12955 ;;		i2_putch
 12956 ;; This function is called by:
 12957 ;;		_change_state_to_menu_11
 12958 ;;		_change_state_to_menu_23
 12959 ;;		_change_state_to_logs_11
 12960 ;;		_change_state_to_logs_12
 12961 ;;		_change_state_to_logs_22
 12962 ;;		_change_state_to_logs_23
 12963 ;;		_change_state_to_logs_33
 12964 ;;		_change_state_to_logs_34
 12965 ;;		_printSortTimer
 12966 ;;		i2_change_state_to_menu_start
 12967 ;;		i2_change_state_to_menu_12
 12968 ;;		i2_change_state_to_menu_22
 12969 ;;		i2_printRTC
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text63
 12974  000980                     __ptext63:
 12975                           	opt stack 0
 12976  000980                     i2_printf:
 12977                           	opt stack 19
 12978                           
 12979                           ;doprnt.c: 466: va_list ap;
 12980                           ;doprnt.c: 499: signed char c;
 12981                           ;doprnt.c: 501: int width;
 12982                           ;doprnt.c: 506: signed char prec;
 12983                           ;doprnt.c: 508: unsigned char flag;
 12984                           ;doprnt.c: 523: union {
 12985                           ;doprnt.c: 524: unsigned long vd;
 12986                           ;doprnt.c: 525: double integ;
 12987                           ;doprnt.c: 526: } tmpval;
 12988                           ;doprnt.c: 528: unsigned int val;
 12989                           ;doprnt.c: 529: unsigned len;
 12990                           ;doprnt.c: 530: const char * cp;
 12991                           ;doprnt.c: 533: *ap = __va_start();
 12992                           
 12993                           ;incstack = 0
 12994  000980  0E0F               	movlw	low (?i2_printf+2)
 12995  000982  6E1E               	movwf	i2printf@ap,c
 12996  000984  0E00               	movlw	high (?i2_printf+2)
 12997  000986  6E1F               	movwf	i2printf@ap+1,c
 12998                           
 12999                           ;doprnt.c: 536: while(c = *f++) {
 13000  000988  D190               	goto	i2l4340
 13001  00098A                     i2l4216:
 13002                           
 13003                           ;doprnt.c: 538: if(c != '%')
 13004  00098A  0E25               	movlw	37
 13005  00098C  1827               	xorwf	i2printf@c,w,c
 13006  00098E  B4D8               	btfsc	status,2,c
 13007  000990  D004               	goto	i2l4220
 13008                           
 13009                           ;doprnt.c: 540: {
 13010                           ;doprnt.c: 541: (putch(c) );
 13011  000992  5027               	movf	i2printf@c,w,c
 13012  000994  EC90  F016         	call	i2_putch
 13013                           
 13014                           ;doprnt.c: 542: continue;
 13015  000998  D188               	goto	i2l4340
 13016  00099A                     i2l4220:
 13017                           
 13018                           ;doprnt.c: 543: }
 13019                           ;doprnt.c: 546: width = 0;
 13020  00099A  0E00               	movlw	0
 13021  00099C  6E29               	movwf	i2printf@width+1,c
 13022  00099E  0E00               	movlw	0
 13023  0009A0  6E28               	movwf	i2printf@width,c
 13024                           
 13025                           ;doprnt.c: 548: flag = 0;
 13026  0009A2  0E00               	movlw	0
 13027  0009A4  6E26               	movwf	i2printf@flag,c
 13028                           
 13029                           ;doprnt.c: 551: switch(*f) {
 13030                           
 13031                           ;doprnt.c: 550: for(;;) {
 13032  0009A6  D003               	goto	i2l4226
 13033  0009A8                     i2l4222:
 13034                           
 13035                           ;doprnt.c: 580: flag |= 0x04;
 13036  0009A8  8426               	bsf	i2printf@flag,2,c
 13037                           
 13038                           ;doprnt.c: 581: f++;
 13039  0009AA  4A0D               	infsnz	i2printf@f,f,c
 13040  0009AC  2A0E               	incf	i2printf@f+1,f,c
 13041  0009AE                     i2l4226:
 13042  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 13043  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13044  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13045  0009B6  6AF8               	clrf	tblptru,c
 13046  0009B8                     	endif
 13047  0009B8                     	if	0	;tblptru may be non-zero
 13048  0009B8                     	endif
 13049  0009B8  0008               	tblrd		*
 13050  0009BA  50F5               	movf	tablat,w,c
 13051                           
 13052                           ; Switch size 1, requested type "space"
 13053                           ; Number of cases is 1, Range of values is 48 to 48
 13054                           ; switch strategies available:
 13055                           ; Name         Instructions Cycles
 13056                           ; simple_byte            4     3 (average)
 13057                           ;	Chosen strategy is simple_byte
 13058  0009BC  0A30               	xorlw	48	; case 48
 13059  0009BE  B4D8               	btfsc	status,2,c
 13060  0009C0  D7F3               	goto	i2l4222
 13061                           
 13062                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13063                           
 13064                           ;doprnt.c: 586: }
 13065                           
 13066                           ;doprnt.c: 585: break;
 13067  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 13068  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13069  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13070  0009CA  6AF8               	clrf	tblptru,c
 13071  0009CC                     	endif
 13072  0009CC                     	if	0	;tblptru may be non-zero
 13073  0009CC                     	endif
 13074  0009CC  0008               	tblrd		*
 13075  0009CE  50F5               	movf	tablat,w,c
 13076  0009D0  EC32  F016         	call	i2_isdigit
 13077  0009D4  A0D8               	btfss	status,0,c
 13078  0009D6  D0A4               	goto	i2l4272
 13079                           
 13080                           ;doprnt.c: 598: width = 0;
 13081  0009D8  0E00               	movlw	0
 13082  0009DA  6E29               	movwf	i2printf@width+1,c
 13083  0009DC  0E00               	movlw	0
 13084  0009DE  6E28               	movwf	i2printf@width,c
 13085  0009E0                     i2l4232:
 13086                           
 13087                           ;doprnt.c: 600: width *= 10;
 13088  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 13089  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13090  0009E8  0E00               	movlw	0
 13091  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 13092  0009EC  0E0A               	movlw	10
 13093  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 13094  0009F0  ECC9  F015         	call	i2___wmul	;wreg free
 13095  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 13096  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 13097                           
 13098                           ;doprnt.c: 601: width += *f++ - '0';
 13099  0009FC  0ED0               	movlw	208
 13100  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 13101  000A00  0EFF               	movlw	255
 13102  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 13103  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 13104  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13105  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13106  000A0C  6AF8               	clrf	tblptru,c
 13107  000A0E                     	endif
 13108  000A0E                     	if	0	;tblptru may be non-zero
 13109  000A0E                     	endif
 13110  000A0E  0008               	tblrd		*
 13111  000A10  50F5               	movf	tablat,w,c
 13112  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 13113  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 13114  000A16  5019               	movf	??i2_printf,w,c
 13115  000A18  261B               	addwf	??i2_printf+2,f,c
 13116  000A1A  501A               	movf	??i2_printf+1,w,c
 13117  000A1C  221C               	addwfc	??i2_printf+3,f,c
 13118  000A1E  501B               	movf	??i2_printf+2,w,c
 13119  000A20  2628               	addwf	i2printf@width,f,c
 13120  000A22  501C               	movf	??i2_printf+3,w,c
 13121  000A24  2229               	addwfc	i2printf@width+1,f,c
 13122  000A26  4A0D               	infsnz	i2printf@f,f,c
 13123  000A28  2A0E               	incf	i2printf@f+1,f,c
 13124                           
 13125                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13126  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 13127  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13128  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13129  000A32  6AF8               	clrf	tblptru,c
 13130  000A34                     	endif
 13131  000A34                     	if	0	;tblptru may be non-zero
 13132  000A34                     	endif
 13133  000A34  0008               	tblrd		*
 13134  000A36  50F5               	movf	tablat,w,c
 13135  000A38  EC32  F016         	call	i2_isdigit
 13136  000A3C  A0D8               	btfss	status,0,c
 13137  000A3E  D070               	goto	i2l4272
 13138  000A40  D7CF               	goto	i2l4232
 13139  000A42                     i2l4240:
 13140                           
 13141                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13142  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 13143  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 13144  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 13145  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 13146  000A52  0E02               	movlw	2
 13147  000A54  261E               	addwf	i2printf@ap,f,c
 13148  000A56  0E00               	movlw	0
 13149  000A58  221F               	addwfc	i2printf@ap+1,f,c
 13150                           
 13151                           ;doprnt.c: 740: if(!cp)
 13152  000A5A  5020               	movf	i2printf@cp,w,c
 13153  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 13154  000A5E  A4D8               	btfss	status,2,c
 13155  000A60  D004               	goto	i2l4248
 13156                           
 13157                           ;doprnt.c: 741: cp = "(null)";
 13158  000A62  0EBD               	movlw	low STR_51
 13159  000A64  6E20               	movwf	i2printf@cp,c
 13160  000A66  0EFF               	movlw	high STR_51
 13161  000A68  6E21               	movwf	i2printf@cp+1,c
 13162  000A6A                     i2l4248:
 13163                           
 13164                           ;doprnt.c: 745: len = 0;
 13165  000A6A  0E00               	movlw	0
 13166  000A6C  6E25               	movwf	i2printf@len+1,c
 13167  000A6E  0E00               	movlw	0
 13168  000A70  6E24               	movwf	i2printf@len,c
 13169                           
 13170                           ;doprnt.c: 746: while(cp[len])
 13171  000A72  D002               	goto	i2l4252
 13172  000A74                     i2l4250:
 13173                           
 13174                           ;doprnt.c: 747: len++;
 13175  000A74  4A24               	infsnz	i2printf@len,f,c
 13176  000A76  2A25               	incf	i2printf@len+1,f,c
 13177  000A78                     i2l4252:
 13178  000A78  5024               	movf	i2printf@len,w,c
 13179  000A7A  2420               	addwf	i2printf@cp,w,c
 13180  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 13181  000A7E  5025               	movf	i2printf@len+1,w,c
 13182  000A80  2021               	addwfc	i2printf@cp+1,w,c
 13183  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 13184  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 13185  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 13186  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 13187  000A8E  6EF8               	movwf	tblptru,c
 13188  000A90  0E0F               	movlw	(high __ramtop+-1)
 13189  000A92  64F7               	cpfsgt	tblptrh,c
 13190  000A94  D003               	bra	i2u308_47
 13191  000A96  0008               	tblrd		*
 13192  000A98  50F5               	movf	tablat,w,c
 13193  000A9A  D005               	bra	i2u308_40
 13194  000A9C                     i2u308_47:
 13195  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13196  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 13197  000AA4  50EF               	movf	indf0,w,c
 13198  000AA6                     i2u308_40:
 13199  000AA6  0900               	iorlw	0
 13200  000AA8  A4D8               	btfss	status,2,c
 13201  000AAA  D7E4               	goto	i2l4250
 13202                           
 13203                           ;doprnt.c: 757: if(width > len)
 13204  000AAC  5028               	movf	i2printf@width,w,c
 13205  000AAE  5C24               	subwf	i2printf@len,w,c
 13206  000AB0  5029               	movf	i2printf@width+1,w,c
 13207  000AB2  5825               	subwfb	i2printf@len+1,w,c
 13208  000AB4  B0D8               	btfsc	status,0,c
 13209  000AB6  D005               	goto	i2l4258
 13210                           
 13211                           ;doprnt.c: 758: width -= len;
 13212  000AB8  5024               	movf	i2printf@len,w,c
 13213  000ABA  5E28               	subwf	i2printf@width,f,c
 13214  000ABC  5025               	movf	i2printf@len+1,w,c
 13215  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 13216  000AC0  D008               	goto	i2l4262
 13217  000AC2                     i2l4258:
 13218                           
 13219                           ;doprnt.c: 759: else
 13220                           ;doprnt.c: 760: width = 0;
 13221  000AC2  0E00               	movlw	0
 13222  000AC4  6E29               	movwf	i2printf@width+1,c
 13223  000AC6  0E00               	movlw	0
 13224  000AC8  6E28               	movwf	i2printf@width,c
 13225                           
 13226                           ;doprnt.c: 764: while(width--)
 13227  000ACA  D003               	goto	i2l4262
 13228  000ACC                     i2l4260:
 13229                           
 13230                           ;doprnt.c: 765: (putch(' ') );
 13231  000ACC  0E20               	movlw	32
 13232  000ACE  EC90  F016         	call	i2_putch
 13233  000AD2                     i2l4262:
 13234  000AD2  0628               	decf	i2printf@width,f,c
 13235  000AD4  A0D8               	btfss	status,0,c
 13236  000AD6  0629               	decf	i2printf@width+1,f,c
 13237  000AD8  2828               	incf	i2printf@width,w,c
 13238  000ADA  E1F8               	bnz	i2l4260
 13239  000ADC  2829               	incf	i2printf@width+1,w,c
 13240  000ADE  B4D8               	btfsc	status,2,c
 13241  000AE0  D016               	goto	i2l4268
 13242  000AE2  D7F4               	goto	i2l4260
 13243  000AE4                     i2l4264:
 13244                           
 13245                           ;doprnt.c: 768: (putch(*cp++) );
 13246  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 13247  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 13248  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 13249  000AEE  6EF8               	movwf	tblptru,c
 13250  000AF0  0E0F               	movlw	(high __ramtop+-1)
 13251  000AF2  64F7               	cpfsgt	tblptrh,c
 13252  000AF4  D003               	bra	i2u312_47
 13253  000AF6  0008               	tblrd		*
 13254  000AF8  50F5               	movf	tablat,w,c
 13255  000AFA  D005               	bra	i2u312_40
 13256  000AFC                     i2u312_47:
 13257  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 13258  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 13259  000B04  50EF               	movf	indf0,w,c
 13260  000B06                     i2u312_40:
 13261  000B06  EC90  F016         	call	i2_putch
 13262  000B0A  4A20               	infsnz	i2printf@cp,f,c
 13263  000B0C  2A21               	incf	i2printf@cp+1,f,c
 13264  000B0E                     i2l4268:
 13265  000B0E  0624               	decf	i2printf@len,f,c
 13266  000B10  A0D8               	btfss	status,0,c
 13267  000B12  0625               	decf	i2printf@len+1,f,c
 13268  000B14  2824               	incf	i2printf@len,w,c
 13269  000B16  E1E6               	bnz	i2l4264
 13270  000B18  2825               	incf	i2printf@len+1,w,c
 13271  000B1A  B4D8               	btfsc	status,2,c
 13272  000B1C  D0C6               	goto	i2l4340
 13273  000B1E  D7E2               	goto	i2l4264
 13274  000B20                     i2l4272:
 13275  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 13276  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13277  000B28  4A0D               	infsnz	i2printf@f,f,c
 13278  000B2A  2A0E               	incf	i2printf@f+1,f,c
 13279  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13280  000B2C  6AF8               	clrf	tblptru,c
 13281  000B2E                     	endif
 13282  000B2E                     	if	0	;tblptru may be non-zero
 13283  000B2E                     	endif
 13284  000B2E  0008               	tblrd		*
 13285  000B30  CFF5 F027          	movff	tablat,i2printf@c
 13286  000B34  5027               	movf	i2printf@c,w,c
 13287                           
 13288                           ; Switch size 1, requested type "space"
 13289                           ; Number of cases is 4, Range of values is 0 to 115
 13290                           ; switch strategies available:
 13291                           ; Name         Instructions Cycles
 13292                           ; simple_byte           13     7 (average)
 13293                           ;	Chosen strategy is simple_byte
 13294  000B36  0A00               	xorlw	0	; case 0
 13295  000B38  B4D8               	btfsc	status,2,c
 13296  000B3A  0012               	return	
 13297  000B3C  0A64               	xorlw	100	; case 100
 13298  000B3E  B4D8               	btfsc	status,2,c
 13299  000B40  D007               	goto	i2l4274
 13300  000B42  0A0D               	xorlw	13	; case 105
 13301  000B44  B4D8               	btfsc	status,2,c
 13302  000B46  D004               	goto	i2l4274
 13303  000B48  0A1A               	xorlw	26	; case 115
 13304  000B4A  B4D8               	btfsc	status,2,c
 13305  000B4C  D77A               	goto	i2l4240
 13306  000B4E  D0AD               	goto	i2l4340
 13307  000B50                     i2l4274:
 13308                           
 13309                           ;doprnt.c: 1253: {
 13310                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13311  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 13312  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 13313  000B58  CFDE F022          	movff	postinc2,i2printf@val
 13314  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 13315  000B60  0E02               	movlw	2
 13316  000B62  261E               	addwf	i2printf@ap,f,c
 13317  000B64  0E00               	movlw	0
 13318  000B66  221F               	addwfc	i2printf@ap+1,f,c
 13319                           
 13320                           ;doprnt.c: 1261: if((int)val < 0) {
 13321  000B68  AE23               	btfss	i2printf@val+1,7,c
 13322  000B6A  D006               	goto	i2l4284
 13323                           
 13324                           ;doprnt.c: 1262: flag |= 0x03;
 13325  000B6C  0E03               	movlw	3
 13326  000B6E  1226               	iorwf	i2printf@flag,f,c
 13327                           
 13328                           ;doprnt.c: 1263: val = -val;
 13329  000B70  6C22               	negf	i2printf@val,c
 13330  000B72  1E23               	comf	i2printf@val+1,f,c
 13331  000B74  B0D8               	btfsc	status,0,c
 13332  000B76  2A23               	incf	i2printf@val+1,f,c
 13333  000B78                     i2l4284:
 13334                           
 13335                           ;doprnt.c: 1264: }
 13336                           ;doprnt.c: 1266: }
 13337                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13338  000B78  0E01               	movlw	1
 13339  000B7A  6E27               	movwf	i2printf@c,c
 13340  000B7C                     i2l4286:
 13341  000B7C  0E05               	movlw	5
 13342  000B7E  1827               	xorwf	i2printf@c,w,c
 13343  000B80  B4D8               	btfsc	status,2,c
 13344  000B82  D015               	goto	i2l4298
 13345                           
 13346                           ;doprnt.c: 1306: if(val < dpowers[c])
 13347  000B84  5027               	movf	i2printf@c,w,c
 13348  000B86  0D02               	mullw	2
 13349  000B88  0EC6               	movlw	low _dpowers
 13350  000B8A  24F3               	addwf	prodl,w,c
 13351  000B8C  6EF6               	movwf	tblptrl,c
 13352  000B8E  0EFD               	movlw	high _dpowers
 13353  000B90  20F4               	addwfc	prodh,w,c
 13354  000B92  6EF7               	movwf	tblptrh,c
 13355  000B94                     	if	1	;There are 3 active tblptr bytes
 13356  000B94  6AF8               	clrf	tblptru,c
 13357  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 13358  000B98  22F8               	addwfc	tblptru,f,c
 13359  000B9A                     	endif
 13360  000B9A  0009               	tblrd		*+
 13361  000B9C  50F5               	movf	tablat,w,c
 13362  000B9E  5C22               	subwf	i2printf@val,w,c
 13363  000BA0  0009               	tblrd		*+
 13364  000BA2  50F5               	movf	tablat,w,c
 13365  000BA4  5823               	subwfb	i2printf@val+1,w,c
 13366  000BA6  A0D8               	btfss	status,0,c
 13367  000BA8  D002               	goto	i2l4298
 13368                           
 13369                           ;doprnt.c: 1307: break;
 13370  000BAA  2A27               	incf	i2printf@c,f,c
 13371  000BAC  D7E7               	goto	i2l4286
 13372  000BAE                     i2l4298:
 13373                           
 13374                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13375  000BAE  5028               	movf	i2printf@width,w,c
 13376  000BB0  1029               	iorwf	i2printf@width+1,w,c
 13377  000BB2  B4D8               	btfsc	status,2,c
 13378  000BB4  D009               	goto	i2l4304
 13379  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 13380  000BBA  0E03               	movlw	3
 13381  000BBC  1619               	andwf	??i2_printf,f,c
 13382  000BBE  B4D8               	btfsc	status,2,c
 13383  000BC0  D003               	goto	i2l4304
 13384                           
 13385                           ;doprnt.c: 1346: width--;
 13386  000BC2  0628               	decf	i2printf@width,f,c
 13387  000BC4  A0D8               	btfss	status,0,c
 13388  000BC6  0629               	decf	i2printf@width+1,f,c
 13389  000BC8                     i2l4304:
 13390                           
 13391                           ;doprnt.c: 1381: if(width > c)
 13392  000BC8  0E80               	movlw	128
 13393  000BCA  BE27               	btfsc	i2printf@c,7,c
 13394  000BCC  0E7F               	movlw	127
 13395  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 13396  000BD0  5028               	movf	i2printf@width,w,c
 13397  000BD2  5C27               	subwf	i2printf@c,w,c
 13398  000BD4  5029               	movf	i2printf@width+1,w,c
 13399  000BD6  0A80               	xorlw	128
 13400  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 13401  000BDA  B0D8               	btfsc	status,0,c
 13402  000BDC  D007               	goto	i2l4308
 13403                           
 13404                           ;doprnt.c: 1382: width -= c;
 13405  000BDE  5027               	movf	i2printf@c,w,c
 13406  000BE0  5E28               	subwf	i2printf@width,f,c
 13407  000BE2  0E00               	movlw	0
 13408  000BE4  BE27               	btfsc	i2printf@c,7,c
 13409  000BE6  0EFF               	movlw	255
 13410  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 13411  000BEA  D004               	goto	i2l4310
 13412  000BEC                     i2l4308:
 13413                           
 13414                           ;doprnt.c: 1383: else
 13415                           ;doprnt.c: 1384: width = 0;
 13416  000BEC  0E00               	movlw	0
 13417  000BEE  6E29               	movwf	i2printf@width+1,c
 13418  000BF0  0E00               	movlw	0
 13419  000BF2  6E28               	movwf	i2printf@width,c
 13420  000BF4                     i2l4310:
 13421                           
 13422                           ;doprnt.c: 1387: if(flag & 0x04) {
 13423  000BF4  A426               	btfss	i2printf@flag,2,c
 13424  000BF6  D014               	goto	i2l4322
 13425                           
 13426                           ;doprnt.c: 1392: if(flag & 0x03)
 13427  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 13428  000BFC  0E03               	movlw	3
 13429  000BFE  1619               	andwf	??i2_printf,f,c
 13430  000C00  B4D8               	btfsc	status,2,c
 13431  000C02  D003               	goto	i2l4316
 13432                           
 13433                           ;doprnt.c: 1393: (putch('-') );
 13434  000C04  0E2D               	movlw	45
 13435  000C06  EC90  F016         	call	i2_putch
 13436  000C0A                     i2l4316:
 13437                           
 13438                           ;doprnt.c: 1415: if(width)
 13439  000C0A  5028               	movf	i2printf@width,w,c
 13440  000C0C  1029               	iorwf	i2printf@width+1,w,c
 13441  000C0E  B4D8               	btfsc	status,2,c
 13442  000C10  D01E               	goto	i2l4332
 13443                           
 13444                           ;doprnt.c: 1417: (putch('0') );
 13445                           
 13446                           ;doprnt.c: 1416: do
 13447  000C12  0E30               	movlw	48
 13448  000C14  EC90  F016         	call	i2_putch
 13449                           
 13450                           ;doprnt.c: 1418: while(--width);
 13451  000C18  0628               	decf	i2printf@width,f,c
 13452  000C1A  A0D8               	btfss	status,0,c
 13453  000C1C  0629               	decf	i2printf@width+1,f,c
 13454  000C1E  D7F5               	goto	i2l4316
 13455  000C20                     i2l4322:
 13456                           
 13457                           ;doprnt.c: 1422: {
 13458                           ;doprnt.c: 1424: if(width
 13459                           ;doprnt.c: 1428: )
 13460  000C20  5028               	movf	i2printf@width,w,c
 13461  000C22  1029               	iorwf	i2printf@width+1,w,c
 13462  000C24  B4D8               	btfsc	status,2,c
 13463  000C26  D00A               	goto	i2l4328
 13464  000C28                     i2l4324:
 13465                           
 13466                           ;doprnt.c: 1430: (putch(' ') );
 13467  000C28  0E20               	movlw	32
 13468  000C2A  EC90  F016         	call	i2_putch
 13469                           
 13470                           ;doprnt.c: 1431: while(--width);
 13471  000C2E  0628               	decf	i2printf@width,f,c
 13472  000C30  A0D8               	btfss	status,0,c
 13473  000C32  0629               	decf	i2printf@width+1,f,c
 13474  000C34  5028               	movf	i2printf@width,w,c
 13475  000C36  1029               	iorwf	i2printf@width+1,w,c
 13476  000C38  A4D8               	btfss	status,2,c
 13477  000C3A  D7F6               	goto	i2l4324
 13478  000C3C                     i2l4328:
 13479                           
 13480                           ;doprnt.c: 1438: if(flag & 0x03)
 13481  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 13482  000C40  0E03               	movlw	3
 13483  000C42  1619               	andwf	??i2_printf,f,c
 13484  000C44  B4D8               	btfsc	status,2,c
 13485  000C46  D003               	goto	i2l4332
 13486                           
 13487                           ;doprnt.c: 1439: (putch('-') );
 13488  000C48  0E2D               	movlw	45
 13489  000C4A  EC90  F016         	call	i2_putch
 13490  000C4E                     i2l4332:
 13491                           
 13492                           ;doprnt.c: 1469: }
 13493                           ;doprnt.c: 1472: prec = c;
 13494  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 13495                           
 13496                           ;doprnt.c: 1474: while(prec--) {
 13497  000C52  D027               	goto	i2l4338
 13498  000C54                     i2l4334:
 13499                           
 13500                           ;doprnt.c: 1478: {
 13501                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13502  000C54  501D               	movf	i2printf@prec,w,c
 13503  000C56  0D02               	mullw	2
 13504  000C58  0EC6               	movlw	low _dpowers
 13505  000C5A  24F3               	addwf	prodl,w,c
 13506  000C5C  6EF6               	movwf	tblptrl,c
 13507  000C5E  0EFD               	movlw	high _dpowers
 13508  000C60  20F4               	addwfc	prodh,w,c
 13509  000C62  6EF7               	movwf	tblptrh,c
 13510  000C64                     	if	1	;There are 3 active tblptr bytes
 13511  000C64  6AF8               	clrf	tblptru,c
 13512  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 13513  000C68  22F8               	addwfc	tblptru,f,c
 13514  000C6A                     	endif
 13515  000C6A  0009               	tblrd		*+
 13516  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 13517  000C70  000A               	tblrd		*-
 13518  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 13519  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 13520  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13521  000C7E  EC18  F013         	call	i2___lwdiv	;wreg free
 13522  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 13523  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13524  000C8A  0E00               	movlw	0
 13525  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 13526  000C8E  0E0A               	movlw	10
 13527  000C90  6E03               	movwf	i2___lwmod@divisor,c
 13528  000C92  ECB0  F013         	call	i2___lwmod	;wreg free
 13529  000C96  5001               	movf	?i2___lwmod,w,c
 13530  000C98  0F30               	addlw	48
 13531  000C9A  6E27               	movwf	i2printf@c,c
 13532                           
 13533                           ;doprnt.c: 1523: }
 13534                           ;doprnt.c: 1524: (putch(c) );
 13535  000C9C  5027               	movf	i2printf@c,w,c
 13536  000C9E  EC90  F016         	call	i2_putch
 13537  000CA2                     i2l4338:
 13538  000CA2  061D               	decf	i2printf@prec,f,c
 13539  000CA4  281D               	incf	i2printf@prec,w,c
 13540  000CA6  A4D8               	btfss	status,2,c
 13541  000CA8  D7D5               	goto	i2l4334
 13542  000CAA                     i2l4340:
 13543  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13544  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13545  000CB2  4A0D               	infsnz	i2printf@f,f,c
 13546  000CB4  2A0E               	incf	i2printf@f+1,f,c
 13547  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13548  000CB6  6AF8               	clrf	tblptru,c
 13549  000CB8                     	endif
 13550  000CB8                     	if	0	;tblptru may be non-zero
 13551  000CB8                     	endif
 13552  000CB8  0008               	tblrd		*
 13553  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 13554  000CBE  5027               	movf	i2printf@c,w,c
 13555  000CC0  B4D8               	btfsc	status,2,c
 13556  000CC2  0012               	return	
 13557  000CC4  D662               	goto	i2l4216
 13558  000CC6                     __end_ofi2_printf:
 13559                           	opt stack 0
 13560                           pclatu	equ	0xFFB
 13561                           pclath	equ	0xFFA
 13562                           tblptru	equ	0xFF8
 13563                           tblptrh	equ	0xFF7
 13564                           tblptrl	equ	0xFF6
 13565                           tablat	equ	0xFF5
 13566                           prodh	equ	0xFF4
 13567                           prodl	equ	0xFF3
 13568                           intcon	equ	0xFF2
 13569                           intcon2	equ	0xFF1
 13570                           intcon3	equ	0xFF0
 13571                           indf0	equ	0xFEF
 13572                           postinc0	equ	0xFEE
 13573                           fsr0h	equ	0xFEA
 13574                           fsr0l	equ	0xFE9
 13575                           wreg	equ	0xFE8
 13576                           postdec1	equ	0xFE5
 13577                           fsr1h	equ	0xFE2
 13578                           fsr1l	equ	0xFE1
 13579                           indf2	equ	0xFDF
 13580                           postinc2	equ	0xFDE
 13581                           postdec2	equ	0xFDD
 13582                           fsr2h	equ	0xFDA
 13583                           fsr2l	equ	0xFD9
 13584                           status	equ	0xFD8
 13585                           
 13586 ;; *************** function i2_putch *****************
 13587 ;; Defined at:
 13588 ;;		line 20 in file "lcd.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;  data            1    wreg     unsigned char 
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;  data            1    2[COMRAM] unsigned char 
 13593 ;; Return value:  Size  Location     Type
 13594 ;;                  1    wreg      void 
 13595 ;; Registers used:
 13596 ;;		wreg, status,2, status,0, cstack
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;Total ram usage:        1 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; Hardware stack levels required when called:    1
 13609 ;; This function calls:
 13610 ;;		i2_lcdNibble
 13611 ;; This function is called by:
 13612 ;;		i2_printf
 13613 ;; This function uses a non-reentrant model
 13614 ;;
 13615                           
 13616                           	psect	text64
 13617  002D20                     __ptext64:
 13618                           	opt stack 0
 13619  002D20                     i2_putch:
 13620                           	opt stack 19
 13621                           
 13622                           ;incstack = 0
 13623                           ;i2putch@data stored from wreg
 13624  002D20  6E03               	movwf	i2putch@data,c
 13625                           
 13626                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13627  002D22  848C               	bsf	3980,2,c	;volatile
 13628                           
 13629                           ;lcd.c: 22: lcdNibble(data);
 13630  002D24  5003               	movf	i2putch@data,w,c
 13631  002D26  ECED  F012         	call	i2_lcdNibble
 13632  002D2A  0012               	return		;funcret
 13633  002D2C                     __end_ofi2_putch:
 13634                           	opt stack 0
 13635                           pclatu	equ	0xFFB
 13636                           pclath	equ	0xFFA
 13637                           tblptru	equ	0xFF8
 13638                           tblptrh	equ	0xFF7
 13639                           tblptrl	equ	0xFF6
 13640                           tablat	equ	0xFF5
 13641                           prodh	equ	0xFF4
 13642                           prodl	equ	0xFF3
 13643                           intcon	equ	0xFF2
 13644                           intcon2	equ	0xFF1
 13645                           intcon3	equ	0xFF0
 13646                           indf0	equ	0xFEF
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postdec1	equ	0xFE5
 13652                           fsr1h	equ	0xFE2
 13653                           fsr1l	equ	0xFE1
 13654                           indf2	equ	0xFDF
 13655                           postinc2	equ	0xFDE
 13656                           postdec2	equ	0xFDD
 13657                           fsr2h	equ	0xFDA
 13658                           fsr2l	equ	0xFD9
 13659                           status	equ	0xFD8
 13660                           
 13661 ;; *************** function i2_isdigit *****************
 13662 ;; Defined at:
 13663 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  c               1    wreg     unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  c               1    2[COMRAM] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;		None               void
 13670 ;; Registers used:
 13671 ;;		wreg, status,2, status,0
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13680 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13681 ;;Total ram usage:        3 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		i2_printf
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text65
 13691  002C64                     __ptext65:
 13692                           	opt stack 0
 13693  002C64                     i2_isdigit:
 13694                           	opt stack 20
 13695                           
 13696                           ;incstack = 0
 13697                           ;i2isdigit@c stored from wreg
 13698  002C64  6E03               	movwf	i2isdigit@c,c
 13699  002C66  0E00               	movlw	0
 13700  002C68  6E02               	movwf	i2_isdigit$1584,c
 13701  002C6A  0E3A               	movlw	58
 13702  002C6C  6003               	cpfslt	i2isdigit@c,c
 13703  002C6E  D005               	goto	i2l3956
 13704  002C70  0E2F               	movlw	47
 13705  002C72  6403               	cpfsgt	i2isdigit@c,c
 13706  002C74  D002               	goto	i2l3956
 13707  002C76  0E01               	movlw	1
 13708  002C78  6E02               	movwf	i2_isdigit$1584,c
 13709  002C7A                     i2l3956:
 13710  002C7A  C002  F001         	movff	i2_isdigit$1584,??i2_isdigit
 13711  002C7E  3001               	rrcf	??i2_isdigit,w,c
 13712  002C80  0012               	return	
 13713  002C82                     __end_ofi2_isdigit:
 13714                           	opt stack 0
 13715                           pclatu	equ	0xFFB
 13716                           pclath	equ	0xFFA
 13717                           tblptru	equ	0xFF8
 13718                           tblptrh	equ	0xFF7
 13719                           tblptrl	equ	0xFF6
 13720                           tablat	equ	0xFF5
 13721                           prodh	equ	0xFF4
 13722                           prodl	equ	0xFF3
 13723                           intcon	equ	0xFF2
 13724                           intcon2	equ	0xFF1
 13725                           intcon3	equ	0xFF0
 13726                           indf0	equ	0xFEF
 13727                           postinc0	equ	0xFEE
 13728                           fsr0h	equ	0xFEA
 13729                           fsr0l	equ	0xFE9
 13730                           wreg	equ	0xFE8
 13731                           postdec1	equ	0xFE5
 13732                           fsr1h	equ	0xFE2
 13733                           fsr1l	equ	0xFE1
 13734                           indf2	equ	0xFDF
 13735                           postinc2	equ	0xFDE
 13736                           postdec2	equ	0xFDD
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function i2___wmul *****************
 13742 ;; Defined at:
 13743 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  multiplier      2    0[COMRAM] unsigned int 
 13746 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  __wmul          2    4[COMRAM] unsigned int 
 13749 ;; Return value:  Size  Location     Type
 13750 ;;                  2    0[COMRAM] unsigned int 
 13751 ;; Registers used:
 13752 ;;		wreg, status,2, status,0, prodl, prodh
 13753 ;; Tracked objects:
 13754 ;;		On entry : 0/0
 13755 ;;		On exit  : 0/0
 13756 ;;		Unchanged: 0/0
 13757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13758 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;Total ram usage:        6 bytes
 13763 ;; Hardware stack levels used:    1
 13764 ;; This function calls:
 13765 ;;		Nothing
 13766 ;; This function is called by:
 13767 ;;		_printSortTimer
 13768 ;;		i2_printf
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	text66
 13773  002B92                     __ptext66:
 13774                           	opt stack 0
 13775  002B92                     i2___wmul:
 13776                           	opt stack 20
 13777                           
 13778                           ;incstack = 0
 13779  002B92  5001               	movf	i2___wmul@multiplier,w,c
 13780  002B94  0203               	mulwf	i2___wmul@multiplicand,c
 13781  002B96  CFF3 F005          	movff	prodl,i2___wmul@product
 13782  002B9A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13783  002B9E  5001               	movf	i2___wmul@multiplier,w,c
 13784  002BA0  0204               	mulwf	i2___wmul@multiplicand+1,c
 13785  002BA2  50F3               	movf	prodl,w,c
 13786  002BA4  2606               	addwf	i2___wmul@product+1,f,c
 13787  002BA6  5002               	movf	i2___wmul@multiplier+1,w,c
 13788  002BA8  0203               	mulwf	i2___wmul@multiplicand,c
 13789  002BAA  50F3               	movf	prodl,w,c
 13790  002BAC  2606               	addwf	i2___wmul@product+1,f,c
 13791  002BAE  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13792  002BB2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13793  002BB6  0012               	return	
 13794  002BB8                     __end_ofi2___wmul:
 13795                           	opt stack 0
 13796                           pclatu	equ	0xFFB
 13797                           pclath	equ	0xFFA
 13798                           tblptru	equ	0xFF8
 13799                           tblptrh	equ	0xFF7
 13800                           tblptrl	equ	0xFF6
 13801                           tablat	equ	0xFF5
 13802                           prodh	equ	0xFF4
 13803                           prodl	equ	0xFF3
 13804                           intcon	equ	0xFF2
 13805                           intcon2	equ	0xFF1
 13806                           intcon3	equ	0xFF0
 13807                           indf0	equ	0xFEF
 13808                           postinc0	equ	0xFEE
 13809                           fsr0h	equ	0xFEA
 13810                           fsr0l	equ	0xFE9
 13811                           wreg	equ	0xFE8
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           fsr2h	equ	0xFDA
 13819                           fsr2l	equ	0xFD9
 13820                           status	equ	0xFD8
 13821                           
 13822 ;; *************** function i2___lwmod *****************
 13823 ;; Defined at:
 13824 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13825 ;; Parameters:    Size  Location     Type
 13826 ;;  dividend        2    0[COMRAM] unsigned int 
 13827 ;;  divisor         2    2[COMRAM] unsigned int 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  2    0[COMRAM] unsigned int 
 13832 ;; Registers used:
 13833 ;;		wreg, status,2, status,0
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;Total ram usage:        5 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; This function calls:
 13846 ;;		Nothing
 13847 ;; This function is called by:
 13848 ;;		_printSortTimer
 13849 ;;		i2_printf
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           	psect	text67
 13854  002760                     __ptext67:
 13855                           	opt stack 0
 13856  002760                     i2___lwmod:
 13857                           	opt stack 20
 13858                           
 13859                           ;incstack = 0
 13860  002760  5003               	movf	i2___lwmod@divisor,w,c
 13861  002762  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13862  002764  B4D8               	btfsc	status,2,c
 13863  002766  D018               	goto	i2l1359
 13864  002768  0E01               	movlw	1
 13865  00276A  6E05               	movwf	i2___lwmod@counter,c
 13866  00276C  D004               	goto	i2l3988
 13867  00276E                     i2l3986:
 13868  00276E  90D8               	bcf	status,0,c
 13869  002770  3603               	rlcf	i2___lwmod@divisor,f,c
 13870  002772  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13871  002774  2A05               	incf	i2___lwmod@counter,f,c
 13872  002776                     i2l3988:
 13873  002776  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13874  002778  D7FA               	goto	i2l3986
 13875  00277A                     i2l3990:
 13876  00277A  5003               	movf	i2___lwmod@divisor,w,c
 13877  00277C  5C01               	subwf	i2___lwmod@dividend,w,c
 13878  00277E  5004               	movf	i2___lwmod@divisor+1,w,c
 13879  002780  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13880  002782  A0D8               	btfss	status,0,c
 13881  002784  D004               	goto	i2l3994
 13882  002786  5003               	movf	i2___lwmod@divisor,w,c
 13883  002788  5E01               	subwf	i2___lwmod@dividend,f,c
 13884  00278A  5004               	movf	i2___lwmod@divisor+1,w,c
 13885  00278C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13886  00278E                     i2l3994:
 13887  00278E  90D8               	bcf	status,0,c
 13888  002790  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13889  002792  3203               	rrcf	i2___lwmod@divisor,f,c
 13890  002794  2E05               	decfsz	i2___lwmod@counter,f,c
 13891  002796  D7F1               	goto	i2l3990
 13892  002798                     i2l1359:
 13893  002798  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13894  00279C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13895  0027A0  0012               	return		;funcret
 13896  0027A2                     __end_ofi2___lwmod:
 13897                           	opt stack 0
 13898                           pclatu	equ	0xFFB
 13899                           pclath	equ	0xFFA
 13900                           tblptru	equ	0xFF8
 13901                           tblptrh	equ	0xFF7
 13902                           tblptrl	equ	0xFF6
 13903                           tablat	equ	0xFF5
 13904                           prodh	equ	0xFF4
 13905                           prodl	equ	0xFF3
 13906                           intcon	equ	0xFF2
 13907                           intcon2	equ	0xFF1
 13908                           intcon3	equ	0xFF0
 13909                           indf0	equ	0xFEF
 13910                           postinc0	equ	0xFEE
 13911                           fsr0h	equ	0xFEA
 13912                           fsr0l	equ	0xFE9
 13913                           wreg	equ	0xFE8
 13914                           postdec1	equ	0xFE5
 13915                           fsr1h	equ	0xFE2
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           fsr2h	equ	0xFDA
 13921                           fsr2l	equ	0xFD9
 13922                           status	equ	0xFD8
 13923                           
 13924 ;; *************** function i2___lwdiv *****************
 13925 ;; Defined at:
 13926 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  dividend        2    5[COMRAM] unsigned int 
 13929 ;;  divisor         2    7[COMRAM] unsigned int 
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13932 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  2    5[COMRAM] unsigned int 
 13935 ;; Registers used:
 13936 ;;		wreg, status,2, status,0
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;Total ram usage:        7 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; This function calls:
 13949 ;;		Nothing
 13950 ;; This function is called by:
 13951 ;;		_printSortTimer
 13952 ;;		i2_printf
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           	psect	text68
 13957  002630                     __ptext68:
 13958                           	opt stack 0
 13959  002630                     i2___lwdiv:
 13960                           	opt stack 20
 13961                           
 13962                           ;incstack = 0
 13963  002630  0E00               	movlw	0
 13964  002632  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13965  002634  0E00               	movlw	0
 13966  002636  6E0A               	movwf	i2___lwdiv@quotient,c
 13967  002638  5008               	movf	i2___lwdiv@divisor,w,c
 13968  00263A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13969  00263C  B4D8               	btfsc	status,2,c
 13970  00263E  D01C               	goto	i2l1349
 13971  002640  0E01               	movlw	1
 13972  002642  6E0C               	movwf	i2___lwdiv@counter,c
 13973  002644  D004               	goto	i2l3968
 13974  002646                     i2l3966:
 13975  002646  90D8               	bcf	status,0,c
 13976  002648  3608               	rlcf	i2___lwdiv@divisor,f,c
 13977  00264A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13978  00264C  2A0C               	incf	i2___lwdiv@counter,f,c
 13979  00264E                     i2l3968:
 13980  00264E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13981  002650  D7FA               	goto	i2l3966
 13982  002652                     i2l3970:
 13983  002652  90D8               	bcf	status,0,c
 13984  002654  360A               	rlcf	i2___lwdiv@quotient,f,c
 13985  002656  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13986  002658  5008               	movf	i2___lwdiv@divisor,w,c
 13987  00265A  5C06               	subwf	i2___lwdiv@dividend,w,c
 13988  00265C  5009               	movf	i2___lwdiv@divisor+1,w,c
 13989  00265E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13990  002660  A0D8               	btfss	status,0,c
 13991  002662  D005               	goto	i2l3978
 13992  002664  5008               	movf	i2___lwdiv@divisor,w,c
 13993  002666  5E06               	subwf	i2___lwdiv@dividend,f,c
 13994  002668  5009               	movf	i2___lwdiv@divisor+1,w,c
 13995  00266A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13996  00266C  800A               	bsf	i2___lwdiv@quotient,0,c
 13997  00266E                     i2l3978:
 13998  00266E  90D8               	bcf	status,0,c
 13999  002670  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 14000  002672  3208               	rrcf	i2___lwdiv@divisor,f,c
 14001  002674  2E0C               	decfsz	i2___lwdiv@counter,f,c
 14002  002676  D7ED               	goto	i2l3970
 14003  002678                     i2l1349:
 14004  002678  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14005  00267C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14006  002680  0012               	return		;funcret
 14007  002682                     __end_ofi2___lwdiv:
 14008                           	opt stack 0
 14009                           pclatu	equ	0xFFB
 14010                           pclath	equ	0xFFA
 14011                           tblptru	equ	0xFF8
 14012                           tblptrh	equ	0xFF7
 14013                           tblptrl	equ	0xFF6
 14014                           tablat	equ	0xFF5
 14015                           prodh	equ	0xFF4
 14016                           prodl	equ	0xFF3
 14017                           intcon	equ	0xFF2
 14018                           intcon2	equ	0xFF1
 14019                           intcon3	equ	0xFF0
 14020                           indf0	equ	0xFEF
 14021                           postinc0	equ	0xFEE
 14022                           fsr0h	equ	0xFEA
 14023                           fsr0l	equ	0xFE9
 14024                           wreg	equ	0xFE8
 14025                           postdec1	equ	0xFE5
 14026                           fsr1h	equ	0xFE2
 14027                           fsr1l	equ	0xFE1
 14028                           indf2	equ	0xFDF
 14029                           postinc2	equ	0xFDE
 14030                           postdec2	equ	0xFDD
 14031                           fsr2h	equ	0xFDA
 14032                           fsr2l	equ	0xFD9
 14033                           status	equ	0xFD8
 14034                           
 14035 ;; *************** function i2_lcdInst *****************
 14036 ;; Defined at:
 14037 ;;		line 15 in file "lcd.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  data            1    wreg     unsigned char 
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;  data            1    2[COMRAM] unsigned char 
 14042 ;; Return value:  Size  Location     Type
 14043 ;;                  1    wreg      void 
 14044 ;; Registers used:
 14045 ;;		wreg, status,2, status,0, cstack
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14054 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;Total ram usage:        1 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; Hardware stack levels required when called:    1
 14058 ;; This function calls:
 14059 ;;		i2_lcdNibble
 14060 ;; This function is called by:
 14061 ;;		_change_state_to_menu_11
 14062 ;;		_change_state_to_menu_23
 14063 ;;		_change_state_to_logs_11
 14064 ;;		_change_state_to_logs_12
 14065 ;;		_change_state_to_logs_22
 14066 ;;		_change_state_to_logs_23
 14067 ;;		_change_state_to_logs_33
 14068 ;;		_change_state_to_logs_34
 14069 ;;		_printSortTimer
 14070 ;;		i2_change_state_to_menu_start
 14071 ;;		i2_change_state_to_menu_12
 14072 ;;		i2_change_state_to_menu_22
 14073 ;;		i2_printRTC
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           	psect	text69
 14078  002D2C                     __ptext69:
 14079                           	opt stack 0
 14080  002D2C                     i2_lcdInst:
 14081                           	opt stack 19
 14082                           
 14083                           ;incstack = 0
 14084                           ;i2lcdInst@data stored from wreg
 14085  002D2C  6E03               	movwf	i2lcdInst@data,c
 14086                           
 14087                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14088  002D2E  948C               	bcf	3980,2,c	;volatile
 14089                           
 14090                           ;lcd.c: 17: lcdNibble(data);
 14091  002D30  5003               	movf	i2lcdInst@data,w,c
 14092  002D32  ECED  F012         	call	i2_lcdNibble
 14093  002D36  0012               	return		;funcret
 14094  002D38                     __end_ofi2_lcdInst:
 14095                           	opt stack 0
 14096                           pclatu	equ	0xFFB
 14097                           pclath	equ	0xFFA
 14098                           tblptru	equ	0xFF8
 14099                           tblptrh	equ	0xFF7
 14100                           tblptrl	equ	0xFF6
 14101                           tablat	equ	0xFF5
 14102                           prodh	equ	0xFF4
 14103                           prodl	equ	0xFF3
 14104                           intcon	equ	0xFF2
 14105                           intcon2	equ	0xFF1
 14106                           intcon3	equ	0xFF0
 14107                           indf0	equ	0xFEF
 14108                           postinc0	equ	0xFEE
 14109                           fsr0h	equ	0xFEA
 14110                           fsr0l	equ	0xFE9
 14111                           wreg	equ	0xFE8
 14112                           postdec1	equ	0xFE5
 14113                           fsr1h	equ	0xFE2
 14114                           fsr1l	equ	0xFE1
 14115                           indf2	equ	0xFDF
 14116                           postinc2	equ	0xFDE
 14117                           postdec2	equ	0xFDD
 14118                           fsr2h	equ	0xFDA
 14119                           fsr2l	equ	0xFD9
 14120                           status	equ	0xFD8
 14121                           
 14122 ;; *************** function i2_lcdNibble *****************
 14123 ;; Defined at:
 14124 ;;		line 25 in file "lcd.c"
 14125 ;; Parameters:    Size  Location     Type
 14126 ;;  data            1    wreg     unsigned char 
 14127 ;; Auto vars:     Size  Location     Type
 14128 ;;  data            1    1[COMRAM] unsigned char 
 14129 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      void 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2, status,0
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;Total ram usage:        2 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; This function calls:
 14146 ;;		Nothing
 14147 ;; This function is called by:
 14148 ;;		i2_lcdInst
 14149 ;;		i2_putch
 14150 ;; This function uses a non-reentrant model
 14151 ;;
 14152                           
 14153                           	psect	text70
 14154  0025DA                     __ptext70:
 14155                           	opt stack 0
 14156  0025DA                     i2_lcdNibble:
 14157                           	opt stack 19
 14158                           
 14159                           ;incstack = 0
 14160                           ;i2lcdNibble@data stored from wreg
 14161  0025DA  6E02               	movwf	i2lcdNibble@data,c
 14162                           
 14163                           ;lcd.c: 27: char temp = data & 0xF0;
 14164  0025DC  5002               	movf	i2lcdNibble@data,w,c
 14165  0025DE  0BF0               	andlw	240
 14166  0025E0  6E01               	movwf	i2lcdNibble@temp,c
 14167                           
 14168                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14169  0025E2  508C               	movf	3980,w,c	;volatile
 14170  0025E4  0B0F               	andlw	15
 14171  0025E6  6E8C               	movwf	3980,c	;volatile
 14172                           
 14173                           ;lcd.c: 29: LATD = temp | LATD;
 14174  0025E8  5001               	movf	i2lcdNibble@temp,w,c
 14175  0025EA  108C               	iorwf	3980,w,c	;volatile
 14176  0025EC  6E8C               	movwf	3980,c	;volatile
 14177                           
 14178                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14179  0025EE  868C               	bsf	3980,3,c	;volatile
 14180                           
 14181                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14182  0025F0  0E42               	movlw	66
 14183  0025F2                     i2u524_47:
 14184  0025F2  2EE8               	decfsz	wreg,f,c
 14185  0025F4  D7FE               	bra	i2u524_47
 14186  0025F6  D000               	nop2	
 14187                           
 14188                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14189  0025F8  968C               	bcf	3980,3,c	;volatile
 14190                           
 14191                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14192  0025FA  0E42               	movlw	66
 14193  0025FC                     i2u525_47:
 14194  0025FC  2EE8               	decfsz	wreg,f,c
 14195  0025FE  D7FE               	bra	i2u525_47
 14196  002600  D000               	nop2	
 14197                           
 14198                           ;lcd.c: 36: data = data << 4;
 14199  002602  3802               	swapf	i2lcdNibble@data,w,c
 14200  002604  0BF0               	andlw	240
 14201  002606  6E02               	movwf	i2lcdNibble@data,c
 14202                           
 14203                           ;lcd.c: 38: temp = data & 0xF0;
 14204  002608  5002               	movf	i2lcdNibble@data,w,c
 14205  00260A  0BF0               	andlw	240
 14206  00260C  6E01               	movwf	i2lcdNibble@temp,c
 14207                           
 14208                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14209  00260E  508C               	movf	3980,w,c	;volatile
 14210  002610  0B0F               	andlw	15
 14211  002612  6E8C               	movwf	3980,c	;volatile
 14212                           
 14213                           ;lcd.c: 40: LATD = temp | LATD;
 14214  002614  5001               	movf	i2lcdNibble@temp,w,c
 14215  002616  108C               	iorwf	3980,w,c	;volatile
 14216  002618  6E8C               	movwf	3980,c	;volatile
 14217                           
 14218                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14219  00261A  868C               	bsf	3980,3,c	;volatile
 14220                           
 14221                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14222  00261C  0E42               	movlw	66
 14223  00261E                     i2u526_47:
 14224  00261E  2EE8               	decfsz	wreg,f,c
 14225  002620  D7FE               	bra	i2u526_47
 14226  002622  D000               	nop2	
 14227                           
 14228                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14229  002624  968C               	bcf	3980,3,c	;volatile
 14230                           
 14231                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14232  002626  0E42               	movlw	66
 14233  002628                     i2u527_47:
 14234  002628  2EE8               	decfsz	wreg,f,c
 14235  00262A  D7FE               	bra	i2u527_47
 14236  00262C  D000               	nop2	
 14237  00262E  0012               	return		;funcret
 14238  002630                     __end_ofi2_lcdNibble:
 14239                           	opt stack 0
 14240                           pclatu	equ	0xFFB
 14241                           pclath	equ	0xFFA
 14242                           tblptru	equ	0xFF8
 14243                           tblptrh	equ	0xFF7
 14244                           tblptrl	equ	0xFF6
 14245                           tablat	equ	0xFF5
 14246                           prodh	equ	0xFF4
 14247                           prodl	equ	0xFF3
 14248                           intcon	equ	0xFF2
 14249                           intcon2	equ	0xFF1
 14250                           intcon3	equ	0xFF0
 14251                           indf0	equ	0xFEF
 14252                           postinc0	equ	0xFEE
 14253                           fsr0h	equ	0xFEA
 14254                           fsr0l	equ	0xFE9
 14255                           wreg	equ	0xFE8
 14256                           postdec1	equ	0xFE5
 14257                           fsr1h	equ	0xFE2
 14258                           fsr1l	equ	0xFE1
 14259                           indf2	equ	0xFDF
 14260                           postinc2	equ	0xFDE
 14261                           postdec2	equ	0xFDD
 14262                           fsr2h	equ	0xFDA
 14263                           fsr2l	equ	0xFD9
 14264                           status	equ	0xFD8
 14265                           
 14266 ;; *************** function i2_getRTC *****************
 14267 ;; Defined at:
 14268 ;;		line 44 in file "RTC.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;		None
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  getRTC          2    3[COMRAM] int 
 14273 ;; Return value:  Size  Location     Type
 14274 ;;                  1    wreg      void 
 14275 ;; Registers used:
 14276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14286 ;;Total ram usage:        2 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:    2
 14289 ;; This function calls:
 14290 ;;		i2_I2C_Master_Read
 14291 ;;		i2_I2C_Master_Start
 14292 ;;		i2_I2C_Master_Stop
 14293 ;;		i2_I2C_Master_Write
 14294 ;; This function is called by:
 14295 ;;		_printSortTimer
 14296 ;;		i2_printRTC
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           	psect	text71
 14301  002376                     __ptext71:
 14302                           	opt stack 0
 14303  002376                     i2_getRTC:
 14304                           	opt stack 18
 14305                           
 14306                           ;RTC.c: 48: I2C_Master_Start();
 14307                           
 14308                           ;incstack = 0
 14309  002376  ECB2  F016         	call	i2_I2C_Master_Start	;wreg free
 14310                           
 14311                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 14312  00237A  0E00               	movlw	0
 14313  00237C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 14314  00237E  0ED0               	movlw	208
 14315  002380  6E02               	movwf	i2I2C_Master_Write@d,c
 14316  002382  ECA1  F016         	call	i2_I2C_Master_Write	;wreg free
 14317                           
 14318                           ;RTC.c: 50: I2C_Master_Write(0x00);
 14319  002386  0E00               	movlw	0
 14320  002388  6E03               	movwf	i2I2C_Master_Write@d+1,c
 14321  00238A  0E00               	movlw	0
 14322  00238C  6E02               	movwf	i2I2C_Master_Write@d,c
 14323  00238E  ECA1  F016         	call	i2_I2C_Master_Write	;wreg free
 14324                           
 14325                           ;RTC.c: 51: I2C_Master_Stop();
 14326  002392  ECAE  F016         	call	i2_I2C_Master_Stop	;wreg free
 14327                           
 14328                           ;RTC.c: 54: I2C_Master_Start();
 14329  002396  ECB2  F016         	call	i2_I2C_Master_Start	;wreg free
 14330                           
 14331                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 14332  00239A  0E00               	movlw	0
 14333  00239C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 14334  00239E  0ED1               	movlw	209
 14335  0023A0  6E02               	movwf	i2I2C_Master_Write@d,c
 14336  0023A2  ECA1  F016         	call	i2_I2C_Master_Write	;wreg free
 14337                           
 14338                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 14339  0023A6  0E00               	movlw	0
 14340  0023A8  6E05               	movwf	i2getRTC@i+1,c
 14341  0023AA  0E00               	movlw	0
 14342  0023AC  6E04               	movwf	i2getRTC@i,c
 14343  0023AE                     i2l4202:
 14344  0023AE  BE05               	btfsc	i2getRTC@i+1,7,c
 14345  0023B0  D006               	goto	i2l4206
 14346  0023B2  5005               	movf	i2getRTC@i+1,w,c
 14347  0023B4  E111               	bnz	i2l4212
 14348  0023B6  0E06               	movlw	6
 14349  0023B8  5C04               	subwf	i2getRTC@i,w,c
 14350  0023BA  B0D8               	btfsc	status,0,c
 14351  0023BC  D00D               	goto	i2l4212
 14352  0023BE                     i2l4206:
 14353                           
 14354                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 14355  0023BE  0ED4               	movlw	low _time
 14356  0023C0  2404               	addwf	i2getRTC@i,w,c
 14357  0023C2  6ED9               	movwf	fsr2l,c
 14358  0023C4  0E00               	movlw	high _time
 14359  0023C6  2005               	addwfc	i2getRTC@i+1,w,c
 14360  0023C8  6EDA               	movwf	fsr2h,c
 14361  0023CA  0E01               	movlw	1
 14362  0023CC  ECDC  F015         	call	i2_I2C_Master_Read
 14363  0023D0  6EDF               	movwf	indf2,c
 14364  0023D2  4A04               	infsnz	i2getRTC@i,f,c
 14365  0023D4  2A05               	incf	i2getRTC@i+1,f,c
 14366  0023D6  D7EB               	goto	i2l4202
 14367  0023D8                     i2l4212:
 14368                           
 14369                           ;RTC.c: 58: }
 14370                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 14371  0023D8  0E00               	movlw	0
 14372  0023DA  ECDC  F015         	call	i2_I2C_Master_Read
 14373  0023DE  0100               	movlb	0	; () banked
 14374  0023E0  6FDA               	movwf	(_time+6)& (0+255),b
 14375                           
 14376                           ;RTC.c: 60: I2C_Master_Stop();
 14377  0023E2  ECAE  F016         	call	i2_I2C_Master_Stop	;wreg free
 14378  0023E6  0012               	return		;funcret
 14379  0023E8                     __end_ofi2_getRTC:
 14380                           	opt stack 0
 14381                           pclatu	equ	0xFFB
 14382                           pclath	equ	0xFFA
 14383                           tblptru	equ	0xFF8
 14384                           tblptrh	equ	0xFF7
 14385                           tblptrl	equ	0xFF6
 14386                           tablat	equ	0xFF5
 14387                           prodh	equ	0xFF4
 14388                           prodl	equ	0xFF3
 14389                           intcon	equ	0xFF2
 14390                           intcon2	equ	0xFF1
 14391                           intcon3	equ	0xFF0
 14392                           indf0	equ	0xFEF
 14393                           postinc0	equ	0xFEE
 14394                           fsr0h	equ	0xFEA
 14395                           fsr0l	equ	0xFE9
 14396                           wreg	equ	0xFE8
 14397                           postdec1	equ	0xFE5
 14398                           fsr1h	equ	0xFE2
 14399                           fsr1l	equ	0xFE1
 14400                           indf2	equ	0xFDF
 14401                           postinc2	equ	0xFDE
 14402                           postdec2	equ	0xFDD
 14403                           fsr2h	equ	0xFDA
 14404                           fsr2l	equ	0xFD9
 14405                           status	equ	0xFD8
 14406                           
 14407 ;; *************** function i2_I2C_Master_Write *****************
 14408 ;; Defined at:
 14409 ;;		line 49 in file "I2C.c"
 14410 ;; Parameters:    Size  Location     Type
 14411 ;;  d               2    1[COMRAM] unsigned int 
 14412 ;; Auto vars:     Size  Location     Type
 14413 ;;		None
 14414 ;; Return value:  Size  Location     Type
 14415 ;;                  1    wreg      void 
 14416 ;; Registers used:
 14417 ;;		wreg, status,2, status,0, cstack
 14418 ;; Tracked objects:
 14419 ;;		On entry : 0/0
 14420 ;;		On exit  : 0/0
 14421 ;;		Unchanged: 0/0
 14422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14427 ;;Total ram usage:        2 bytes
 14428 ;; Hardware stack levels used:    1
 14429 ;; Hardware stack levels required when called:    1
 14430 ;; This function calls:
 14431 ;;		i2_I2C_Master_Wait
 14432 ;; This function is called by:
 14433 ;;		i2_getRTC
 14434 ;; This function uses a non-reentrant model
 14435 ;;
 14436                           
 14437                           	psect	text72
 14438  002D42                     __ptext72:
 14439                           	opt stack 0
 14440  002D42                     i2_I2C_Master_Write:
 14441                           	opt stack 18
 14442                           
 14443                           ;I2C.c: 51: I2C_Master_Wait();
 14444                           
 14445                           ;incstack = 0
 14446  002D42  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14447                           
 14448                           ;I2C.c: 52: SSPBUF = d;
 14449  002D46  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 14450  002D4A  0012               	return		;funcret
 14451  002D4C                     __end_ofi2_I2C_Master_Write:
 14452                           	opt stack 0
 14453                           pclatu	equ	0xFFB
 14454                           pclath	equ	0xFFA
 14455                           tblptru	equ	0xFF8
 14456                           tblptrh	equ	0xFF7
 14457                           tblptrl	equ	0xFF6
 14458                           tablat	equ	0xFF5
 14459                           prodh	equ	0xFF4
 14460                           prodl	equ	0xFF3
 14461                           intcon	equ	0xFF2
 14462                           intcon2	equ	0xFF1
 14463                           intcon3	equ	0xFF0
 14464                           indf0	equ	0xFEF
 14465                           postinc0	equ	0xFEE
 14466                           fsr0h	equ	0xFEA
 14467                           fsr0l	equ	0xFE9
 14468                           wreg	equ	0xFE8
 14469                           postdec1	equ	0xFE5
 14470                           fsr1h	equ	0xFE2
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function i2_I2C_Master_Stop *****************
 14480 ;; Defined at:
 14481 ;;		line 43 in file "I2C.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;		None
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;		None
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  1    wreg      void 
 14488 ;; Registers used:
 14489 ;;		wreg, status,2, status,0, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;Total ram usage:        0 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    1
 14502 ;; This function calls:
 14503 ;;		i2_I2C_Master_Wait
 14504 ;; This function is called by:
 14505 ;;		i2_getRTC
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           	psect	text73
 14510  002D5C                     __ptext73:
 14511                           	opt stack 0
 14512  002D5C                     i2_I2C_Master_Stop:
 14513                           	opt stack 18
 14514                           
 14515                           ;I2C.c: 45: I2C_Master_Wait();
 14516                           
 14517                           ;incstack = 0
 14518  002D5C  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14519                           
 14520                           ;I2C.c: 46: PEN = 1;
 14521  002D60  84C5               	bsf	4037,2,c	;volatile
 14522  002D62  0012               	return		;funcret
 14523  002D64                     __end_ofi2_I2C_Master_Stop:
 14524                           	opt stack 0
 14525                           pclatu	equ	0xFFB
 14526                           pclath	equ	0xFFA
 14527                           tblptru	equ	0xFF8
 14528                           tblptrh	equ	0xFF7
 14529                           tblptrl	equ	0xFF6
 14530                           tablat	equ	0xFF5
 14531                           prodh	equ	0xFF4
 14532                           prodl	equ	0xFF3
 14533                           intcon	equ	0xFF2
 14534                           intcon2	equ	0xFF1
 14535                           intcon3	equ	0xFF0
 14536                           indf0	equ	0xFEF
 14537                           postinc0	equ	0xFEE
 14538                           fsr0h	equ	0xFEA
 14539                           fsr0l	equ	0xFE9
 14540                           wreg	equ	0xFE8
 14541                           postdec1	equ	0xFE5
 14542                           fsr1h	equ	0xFE2
 14543                           fsr1l	equ	0xFE1
 14544                           indf2	equ	0xFDF
 14545                           postinc2	equ	0xFDE
 14546                           postdec2	equ	0xFDD
 14547                           fsr2h	equ	0xFDA
 14548                           fsr2l	equ	0xFD9
 14549                           status	equ	0xFD8
 14550                           
 14551 ;; *************** function i2_I2C_Master_Start *****************
 14552 ;; Defined at:
 14553 ;;		line 31 in file "I2C.c"
 14554 ;; Parameters:    Size  Location     Type
 14555 ;;		None
 14556 ;; Auto vars:     Size  Location     Type
 14557 ;;		None
 14558 ;; Return value:  Size  Location     Type
 14559 ;;                  1    wreg      void 
 14560 ;; Registers used:
 14561 ;;		wreg, status,2, status,0, cstack
 14562 ;; Tracked objects:
 14563 ;;		On entry : 0/0
 14564 ;;		On exit  : 0/0
 14565 ;;		Unchanged: 0/0
 14566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14571 ;;Total ram usage:        0 bytes
 14572 ;; Hardware stack levels used:    1
 14573 ;; Hardware stack levels required when called:    1
 14574 ;; This function calls:
 14575 ;;		i2_I2C_Master_Wait
 14576 ;; This function is called by:
 14577 ;;		i2_getRTC
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           	psect	text74
 14582  002D64                     __ptext74:
 14583                           	opt stack 0
 14584  002D64                     i2_I2C_Master_Start:
 14585                           	opt stack 18
 14586                           
 14587                           ;I2C.c: 33: I2C_Master_Wait();
 14588                           
 14589                           ;incstack = 0
 14590  002D64  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14591                           
 14592                           ;I2C.c: 34: SEN = 1;
 14593  002D68  80C5               	bsf	4037,0,c	;volatile
 14594  002D6A  0012               	return		;funcret
 14595  002D6C                     __end_ofi2_I2C_Master_Start:
 14596                           	opt stack 0
 14597                           pclatu	equ	0xFFB
 14598                           pclath	equ	0xFFA
 14599                           tblptru	equ	0xFF8
 14600                           tblptrh	equ	0xFF7
 14601                           tblptrl	equ	0xFF6
 14602                           tablat	equ	0xFF5
 14603                           prodh	equ	0xFF4
 14604                           prodl	equ	0xFF3
 14605                           intcon	equ	0xFF2
 14606                           intcon2	equ	0xFF1
 14607                           intcon3	equ	0xFF0
 14608                           indf0	equ	0xFEF
 14609                           postinc0	equ	0xFEE
 14610                           fsr0h	equ	0xFEA
 14611                           fsr0l	equ	0xFE9
 14612                           wreg	equ	0xFE8
 14613                           postdec1	equ	0xFE5
 14614                           fsr1h	equ	0xFE2
 14615                           fsr1l	equ	0xFE1
 14616                           indf2	equ	0xFDF
 14617                           postinc2	equ	0xFDE
 14618                           postdec2	equ	0xFDD
 14619                           fsr2h	equ	0xFDA
 14620                           fsr2l	equ	0xFD9
 14621                           status	equ	0xFD8
 14622                           
 14623 ;; *************** function i2_I2C_Master_Read *****************
 14624 ;; Defined at:
 14625 ;;		line 55 in file "I2C.c"
 14626 ;; Parameters:    Size  Location     Type
 14627 ;;  a               1    wreg     unsigned char 
 14628 ;; Auto vars:     Size  Location     Type
 14629 ;;  a               1    1[COMRAM] unsigned char 
 14630 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14631 ;; Return value:  Size  Location     Type
 14632 ;;                  1    wreg      unsigned char 
 14633 ;; Registers used:
 14634 ;;		wreg, status,2, status,0, cstack
 14635 ;; Tracked objects:
 14636 ;;		On entry : 0/0
 14637 ;;		On exit  : 0/0
 14638 ;;		Unchanged: 0/0
 14639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14644 ;;Total ram usage:        2 bytes
 14645 ;; Hardware stack levels used:    1
 14646 ;; Hardware stack levels required when called:    1
 14647 ;; This function calls:
 14648 ;;		i2_I2C_Master_Wait
 14649 ;; This function is called by:
 14650 ;;		i2_getRTC
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           	psect	text75
 14655  002BB8                     __ptext75:
 14656                           	opt stack 0
 14657  002BB8                     i2_I2C_Master_Read:
 14658                           	opt stack 18
 14659                           
 14660                           ;incstack = 0
 14661                           ;i2I2C_Master_Read@a stored from wreg
 14662  002BB8  6E02               	movwf	i2I2C_Master_Read@a,c
 14663                           
 14664                           ;I2C.c: 57: unsigned char temp;
 14665                           ;I2C.c: 58: I2C_Master_Wait();
 14666  002BBA  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14667                           
 14668                           ;I2C.c: 59: RCEN = 1;
 14669  002BBE  86C5               	bsf	4037,3,c	;volatile
 14670                           
 14671                           ;I2C.c: 60: I2C_Master_Wait();
 14672  002BC0  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14673                           
 14674                           ;I2C.c: 61: temp = SSPBUF;
 14675  002BC4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14676                           
 14677                           ;I2C.c: 62: I2C_Master_Wait();
 14678  002BC8  EC77  F016         	call	i2_I2C_Master_Wait	;wreg free
 14679                           
 14680                           ;I2C.c: 63: ACKDT = (a)?0:1;
 14681  002BCC  5002               	movf	i2I2C_Master_Read@a,w,c
 14682  002BCE  A4D8               	btfss	status,2,c
 14683  002BD0  D002               	goto	i2u259_40
 14684  002BD2  8AC5               	bsf	4037,5,c	;volatile
 14685  002BD4  D001               	goto	i2l3932
 14686  002BD6                     i2u259_40:
 14687  002BD6  9AC5               	bcf	4037,5,c	;volatile
 14688  002BD8                     i2l3932:
 14689                           
 14690                           ;I2C.c: 64: ACKEN = 1;
 14691  002BD8  88C5               	bsf	4037,4,c	;volatile
 14692                           
 14693                           ;I2C.c: 65: return temp;
 14694  002BDA  5003               	movf	i2I2C_Master_Read@temp,w,c
 14695  002BDC  0012               	return	
 14696  002BDE                     __end_ofi2_I2C_Master_Read:
 14697                           	opt stack 0
 14698                           pclatu	equ	0xFFB
 14699                           pclath	equ	0xFFA
 14700                           tblptru	equ	0xFF8
 14701                           tblptrh	equ	0xFF7
 14702                           tblptrl	equ	0xFF6
 14703                           tablat	equ	0xFF5
 14704                           prodh	equ	0xFF4
 14705                           prodl	equ	0xFF3
 14706                           intcon	equ	0xFF2
 14707                           intcon2	equ	0xFF1
 14708                           intcon3	equ	0xFF0
 14709                           indf0	equ	0xFEF
 14710                           postinc0	equ	0xFEE
 14711                           fsr0h	equ	0xFEA
 14712                           fsr0l	equ	0xFE9
 14713                           wreg	equ	0xFE8
 14714                           postdec1	equ	0xFE5
 14715                           fsr1h	equ	0xFE2
 14716                           fsr1l	equ	0xFE1
 14717                           indf2	equ	0xFDF
 14718                           postinc2	equ	0xFDE
 14719                           postdec2	equ	0xFDD
 14720                           fsr2h	equ	0xFDA
 14721                           fsr2l	equ	0xFD9
 14722                           status	equ	0xFD8
 14723                           
 14724 ;; *************** function i2_I2C_Master_Wait *****************
 14725 ;; Defined at:
 14726 ;;		line 26 in file "I2C.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;		None
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;		None
 14731 ;; Return value:  Size  Location     Type
 14732 ;;                  1    wreg      void 
 14733 ;; Registers used:
 14734 ;;		wreg, status,2, status,0
 14735 ;; Tracked objects:
 14736 ;;		On entry : 0/0
 14737 ;;		On exit  : 0/0
 14738 ;;		Unchanged: 0/0
 14739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14744 ;;Total ram usage:        1 bytes
 14745 ;; Hardware stack levels used:    1
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		i2_I2C_Master_Start
 14750 ;;		i2_I2C_Master_Stop
 14751 ;;		i2_I2C_Master_Write
 14752 ;;		i2_I2C_Master_Read
 14753 ;; This function uses a non-reentrant model
 14754 ;;
 14755                           
 14756                           	psect	text76
 14757  002CEE                     __ptext76:
 14758                           	opt stack 0
 14759  002CEE                     i2_I2C_Master_Wait:
 14760                           	opt stack 18
 14761  002CEE                     i2l68:
 14762  002CEE  B4C7               	btfsc	4039,2,c	;volatile
 14763  002CF0  D7FE               	goto	i2l68
 14764  002CF2  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14765  002CF6  0E1F               	movlw	31
 14766  002CF8  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14767  002CFA  B4D8               	btfsc	status,2,c
 14768  002CFC  0012               	return	
 14769  002CFE  D7F7               	goto	i2l68
 14770  002D00                     __end_ofi2_I2C_Master_Wait:
 14771                           	opt stack 0
 14772                           pclatu	equ	0xFFB
 14773                           pclath	equ	0xFFA
 14774                           tblptru	equ	0xFF8
 14775                           tblptrh	equ	0xFF7
 14776                           tblptrl	equ	0xFF6
 14777                           tablat	equ	0xFF5
 14778                           prodh	equ	0xFF4
 14779                           prodl	equ	0xFF3
 14780                           intcon	equ	0xFF2
 14781                           intcon2	equ	0xFF1
 14782                           intcon3	equ	0xFF0
 14783                           indf0	equ	0xFEF
 14784                           postinc0	equ	0xFEE
 14785                           fsr0h	equ	0xFEA
 14786                           fsr0l	equ	0xFE9
 14787                           wreg	equ	0xFE8
 14788                           postdec1	equ	0xFE5
 14789                           fsr1h	equ	0xFE2
 14790                           fsr1l	equ	0xFE1
 14791                           indf2	equ	0xFDF
 14792                           postinc2	equ	0xFDE
 14793                           postdec2	equ	0xFDD
 14794                           fsr2h	equ	0xFDA
 14795                           fsr2l	equ	0xFD9
 14796                           status	equ	0xFD8
 14797                           pclatu	equ	0xFFB
 14798                           pclath	equ	0xFFA
 14799                           tblptru	equ	0xFF8
 14800                           tblptrh	equ	0xFF7
 14801                           tblptrl	equ	0xFF6
 14802                           tablat	equ	0xFF5
 14803                           prodh	equ	0xFF4
 14804                           prodl	equ	0xFF3
 14805                           intcon	equ	0xFF2
 14806                           intcon2	equ	0xFF1
 14807                           intcon3	equ	0xFF0
 14808                           indf0	equ	0xFEF
 14809                           postinc0	equ	0xFEE
 14810                           fsr0h	equ	0xFEA
 14811                           fsr0l	equ	0xFE9
 14812                           wreg	equ	0xFE8
 14813                           postdec1	equ	0xFE5
 14814                           fsr1h	equ	0xFE2
 14815                           fsr1l	equ	0xFE1
 14816                           indf2	equ	0xFDF
 14817                           postinc2	equ	0xFDE
 14818                           postdec2	equ	0xFDD
 14819                           fsr2h	equ	0xFDA
 14820                           fsr2l	equ	0xFD9
 14821                           status	equ	0xFD8
 14822                           
 14823                           	psect	rparam
 14824  0000                     pclatu	equ	0xFFB
 14825                           pclath	equ	0xFFA
 14826                           tblptru	equ	0xFF8
 14827                           tblptrh	equ	0xFF7
 14828                           tblptrl	equ	0xFF6
 14829                           tablat	equ	0xFF5
 14830                           prodh	equ	0xFF4
 14831                           prodl	equ	0xFF3
 14832                           intcon	equ	0xFF2
 14833                           intcon2	equ	0xFF1
 14834                           intcon3	equ	0xFF0
 14835                           indf0	equ	0xFEF
 14836                           postinc0	equ	0xFEE
 14837                           fsr0h	equ	0xFEA
 14838                           fsr0l	equ	0xFE9
 14839                           wreg	equ	0xFE8
 14840                           postdec1	equ	0xFE5
 14841                           fsr1h	equ	0xFE2
 14842                           fsr1l	equ	0xFE1
 14843                           indf2	equ	0xFDF
 14844                           postinc2	equ	0xFDE
 14845                           postdec2	equ	0xFDD
 14846                           fsr2h	equ	0xFDA
 14847                           fsr2l	equ	0xFD9
 14848                           status	equ	0xFD8
 14849                           
 14850                           	psect	temp
 14851  00007E                     btemp:
 14852                           	opt stack 0
 14853  00007E                     	ds	1
 14854  0000                     int$flags	set	btemp
 14855                           pclatu	equ	0xFFB
 14856                           pclath	equ	0xFFA
 14857                           tblptru	equ	0xFF8
 14858                           tblptrh	equ	0xFF7
 14859                           tblptrl	equ	0xFF6
 14860                           tablat	equ	0xFF5
 14861                           prodh	equ	0xFF4
 14862                           prodl	equ	0xFF3
 14863                           intcon	equ	0xFF2
 14864                           intcon2	equ	0xFF1
 14865                           intcon3	equ	0xFF0
 14866                           indf0	equ	0xFEF
 14867                           postinc0	equ	0xFEE
 14868                           fsr0h	equ	0xFEA
 14869                           fsr0l	equ	0xFE9
 14870                           wreg	equ	0xFE8
 14871                           postdec1	equ	0xFE5
 14872                           fsr1h	equ	0xFE2
 14873                           fsr1l	equ	0xFE1
 14874                           indf2	equ	0xFDF
 14875                           postinc2	equ	0xFDE
 14876                           postdec2	equ	0xFDD
 14877                           fsr2h	equ	0xFDA
 14878                           fsr2l	equ	0xFD9
 14879                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        4
    BSS         112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     127
    BANK1           256      0      38
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43371
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3287
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              2     2      0    1923
                                             10 BANK0      2     2      0
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           0     0      0    1157
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    1157
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    1157
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                               9     9      0    1688
                                              3 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         3     0      3     962
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          2     0      2     428
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13466
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12616
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   24257
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7660
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4956
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4956
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4821
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     721
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      26       7       14.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      34        0.0%
DATA                 0      0     122       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 02:08:08 2017

                   i2_I2C_Master_Start 2D64                     i2_I2C_Master_Write 2D42  
                                   _ID 1AFC                                     l68 2CB4  
                                   l99 2CDC                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C7                                    l102 2CE2  
                                  l176 00E0                                    l450 214E  
                                  l567 0D7C                                    l738 2420  
                                  l860 2C94                                    l854 2B08  
                                  l869 1AE6                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00F5                                    _sel 00FC  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 011E  
      __end_of_change_state_to_menu_11 2970        __end_of_change_state_to_menu_12 2812  
      __end_of_change_state_to_menu_22 27DA        __end_of_change_state_to_menu_23 2940  
         _f_can_coming_to_distribution 00ED                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 2A60        __end_of_change_state_to_logs_12 2A30  
      __end_of_change_state_to_logs_22 2A00        __end_of_change_state_to_logs_23 2ABC  
      __end_of_change_state_to_logs_33 29D0        __end_of_change_state_to_logs_34 29A0  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l4020 05AA                                   l4004 2AD0  
                                 l1349 236C                                   l4102 0844  
                                 l4030 05E8                                   l4014 0584  
                                 l4006 2AE2                                   l1359 2516  
                                 l5000 2088                                   l4120 08BC  
                                 l4024 05B4                                   l1296 1ED4  
                                 l5002 208E                                   l5010 20C0  
                                 l4122 08C8                                   l4130 08F6  
                                 l4114 08A0                                   l4106 087C  
                                 l4050 06A8                                   l4018 0598  
                                 l4132 08FC                                   l4108 0886  
                                 l4060 0720                                   l5100 0196  
                                 l5014 20D4                                   l5006 20B2  
                                 l4126 08E2                                   l4062 0738  
                                 l4046 0696                                   l4038 0664  
                                 l4070 077C                                   l4136 0954  
                                 l4056 070E                                   l4048 06A2  
                                 l4072 07B0                                   l4144 2240  
                                 l4160 2828                                   l4400 0ED0  
                                 l5104 01A0                                   l4082 07E0  
                                 l4066 0764                                   l4058 071A  
                                 l4138 0960                                   l4154 2276  
                                 l5202 0358                                   l5122 01EC  
                                 l5114 01CA                                   l4084 07E6  
                                 l4148 2256                                   l4404 0EEE  
                                 l5300 0506                                   l5220 03AE  
                                 l5140 0242                                   l5108 01B8  
                                 l4180 1E68                                   l4164 2410  
                                 l4500 1FA0                                   l4158 281C  
                                 l4406 0F4C                                   l5118 01D4  
                                 l5070 00FE                                   l4190 1EC2  
                                 l4182 1E6E                                   l4166 2432  
                                 l4510 202C                                   l4096 0822  
                                 l5304 0510                                   l5224 03B8  
                                 l5144 024C                                   l4504 1FB6  
                                 l5322 055C                                   l5314 053A  
                                 l5242 0404                                   l5234 03E2  
                                 l5162 0298                                   l5154 0276  
                                 l5082 0132                                   l5074 0110  
                                 l4178 1E58                                   l4602 21CC  
                                 l3900 24D2                                   l4380 0DA4  
                                 l4372 0CFA                                   l5308 0528  
                                 l5260 045A                                   l5228 03D0  
                                 l5180 0302                                   l5148 0264  
                                 l5068 00F8                                   l3902 24DE  
                                 l4390 0E3A                                   l4382 0DC2  
                                 l5318 0544                                   l5238 03EC  
                                 l5158 0280                                   l5086 0144  
                                 l5078 011A                                   l5326 0568  
                                 l3904 24E4                                   l4392 0E58  
                                 l4384 0DE0                                   l5264 0464  
                                 l5184 030C                                   l4608 21F8  
                                 l4394 0E76                                   l4386 0DFE  
                                 l4378 0D86                                   l5282 04B0  
                                 l5274 048E                                   l5194 0336  
                                 l3908 2508                                   l4396 0E94  
                                 l4388 0E1C                                   l5268 047C  
                                 l5188 0324                                   l4812 1F52  
                                 l3846 2A86                                   l4398 0EB2  
                                 l5278 0498                                   l5198 0340  
                                 l5606 1AA0                                   l3880 231C  
                                 l3864 2B60                                   l3882 2328  
                                 l3892 235E                                   l3884 232E  
                                 l5580 1A04                                   l4844 1B9A  
                                 l4598 21B6                                   l5582 1A18  
                                 l4854 1BCE                                   l4862 1BEE  
                                 _ADIE 007CEE                                   l4960 1DC8  
                                 l4952 1D9E                                   l4880 1C42  
                                 l5672 2120                                   _ADFM 007E07  
                                 l4970 1DFE                                   l4962 1DCE  
                                 l4946 1D88                                   l4882 1C5C  
                                 l4890 1CAA                                   l4858 1BDE  
                                 l5674 2126                                   l5690 2150  
                                 l4884 1C76                                   l4892 1CD8  
                                 l5684 2144                                   l5676 212C  
                                 l4958 1DBC                                   l4974 1E0C  
                                 l4990 2058                                   l4886 1C90  
                                 l4798 1F1A                                   l5686 214A  
                                 l4978 1E20                                   l4994 2068  
                                 l4998 207C                                   _ADON 007E10  
                                 STR_1 FEBA                                   STR_2 FDE8  
                                 STR_3 FDFD                                   STR_4 FF86  
                                 STR_5 FFC4                                   STR_6 FEFE  
                                 STR_7 FFB3                                   STR_8 FE0F  
                                 STR_9 FE98                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3310 2710                                   u3311 270C  
                                 u3320 2712                                   u3350 0D7C  
                                 u5007 0122                                   u3335 2550  
                                 u5017 0152                                   u2490 2A84  
                                 u5107 0372                                   u5027 01A8  
                                 u2740 06E2                                   u3620 1B8A  
                                 u5117 03C0                                   u5037 01DC  
                                 u5207 2480                                   u5127 03F4  
                                 u5047 0206                                   u5217 24AC  
                                 u5137 041E                                   u5057 0254  
                                 u5227 24B6                                   u2747 06D8  
                                 u5147 046C                                   u5067 0288  
                                 _PEIE 007F96                                   u2780 075A  
                                 u3628 1B8E                                   u5157 04A0  
                                 u5077 02B2                                   u4710 1AE6  
                                 u3590 1B30                                   u5167 04CA  
                                 u5087 0314                                   u5177 0518  
                                 u5097 0348                                   u2787 0750  
                                 u5187 054C                                   _RCEN 007E2B  
                                 u5197 2476                                   u3598 1B34  
                                 u4907 1F82                                   u4917 1B16  
                                 u4927 1B72                                   u4937 1C18  
                                 u4947 2AD8                                   i2l68 2CEE  
                                 u4957 1CE6                                   u4967 1D1A  
                                 u4977 2722                                   u4897 1F04  
                                 u4987 2756                                   u4997 002A  
                                 _RSEN 007E29                            _stopSignals 2C9E  
                                 _back 0065                                   _main 20DE  
                                 _down 0067                                   _keys FDB5  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 2C02                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 011C                        __end_ofi2_putch 2D2C  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1250                            i2_lcdNibble 25DA  
                      __end_of_Loading 1F92                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                   __end_of_EEPROM_write 2B14  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1E2A  
                                _EEADR 000FA9                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 20DE                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1EE6  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                        __end_of___lwdiv 2376  
                      __end_of___lwmod 2520                                  i2l228 124C  
                                i2l801 1980                                  i2l567 12DE  
                                i2l795 191C                        ___awdiv@counter 008A  
                                i2l799 1964                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 2D20                        __end_of_handler 19BC  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 2AE8  
                      __end_of_initLCD 2760                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                        __end_of_loadRTC 2200  
                      __end_of_readMAG 271A                        __end_of_dpowers FDD0  
                                _first 00F3                                  _enter 0069  
                      __end_of_isdigit 2B6A                                  _input 007D  
                                _putch 2D00                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 2BB8  
                     __end_ofi2_getRTC 23E8                    _log_count_pop_w_tab 0073  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 28B0                       _count_can_no_lab 00DD  
                 __size_of_EEPROM_read 001C                        __initialization 2682  
                   __size_ofi2_lcdInst 000C                           __end_of_main 2174  
                         __end_of_keys FDC6                           __end_of_sort 2C24  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                               ??_sort 008E                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 0080  
                    ?_I2C_Master_Write 0081                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADRESH 000FC4  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 28E0  
            i2_change_state_to_menu_22 28B0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1349 2678                                 i2l1359 2798  
                               i2l4202 23AE                                 i2l4212 23D8  
                               i2l4220 099A                                 i2l4206 23BE  
                               i2l4310 0BF4                                 i2l4222 09A8  
                               i2l4304 0BC8                                 i2l4240 0A42  
                               i2l4232 09E0                                 i2l4216 098A  
                               i2l4322 0C20                                 i2l4250 0A74  
                               i2l4226 09AE                                 i2l4324 0C28  
                               i2l4332 0C4E                                 i2l4316 0C0A  
                               i2l4308 0BEC                                 i2l4260 0ACC  
                               i2l4252 0A78                                 i2l4340 0CAA  
                               i2l6012 1726                                 i2l6004 1200  
                               i2l4334 0C54                                 i2l4262 0AD2  
                               i2l6014 1742                                 i2l6006 1222  
                               i2l4328 0C3C                                 i2l4264 0AE4  
                               i2l4248 0A6A                                 i2l4272 0B20  
                               i2l4344 2888                                 i2l6008 123E  
                               i2l4338 0CA2                                 i2l4258 0AC2  
                               i2l4274 0B50                                 i2l4346 2890  
                               i2l5410 10BE                                 i2l5402 10A2  
                               i2l4284 0B78                                 i2l4268 0B0E  
                               i2l4700 1752                                 i2l4286 0B7C  
                               i2l4550 127C                                 i2l5430 1114  
                               i2l5422 10F0                                 i2l5414 10D4  
                               i2l5406 10B0                                 i2l5350 0FF0  
                               i2l5342 0FD4                                 i2l4560 1314  
                               i2l5336 0FC0                                 i2l4298 0BAE  
                               i2l4730 17B6                                 i2l4714 1778  
                               i2l4570 1382                                 i2l4562 132A  
                               i2l5450 1162                                 i2l5442 113E  
                               i2l5434 1122                                 i2l5426 10FE  
                               i2l5418 10E2                                 i2l5370 1028  
                               i2l5362 100C                                 i2l5354 0FFE  
                               i2l5346 0FE2                                 i2l5338 0FC6  
                               i2l3932 2BD8                                 i2l4724 179E  
                               i2l4708 176A                                 i2l4660 16B8  
                               i2l4652 169E                                 i2l4572 1398  
                               i2l4564 1340                                 i2l4556 12E8  
                               i2l5622 1492                                 i2l4742 17D8  
                               i2l4734 17C0                                 i2l4718 1794  
                               i2l4662 16C8                                 i2l4670 16D6  
                               i2l4574 13AE                                 i2l4566 1356  
                               i2l4558 12FE                                 i2l4582 13F0  
                               i2l5470 11B0                                 i2l5462 1194  
                               i2l5454 1170                                 i2l5446 1154  
                               i2l5438 1130                                 i2l5390 1070  
                               i2l5382 1054                                 i2l5374 1038  
                               i2l5366 101A                                 i2l5632 14FC  
                               i2l4760 181C                                 i2l4752 17F8  
                               i2l4728 17B2                                 i2l4680 16FC  
                               i2l4664 16CC                                 i2l4576 13C4  
                               i2l4568 136C                                 i2l4584 144A  
                               i2l3970 2652                                 i2l5642 15BE  
                               i2l5626 14A2                                 i2l4682 1702  
                               i2l4674 16EA                                 i2l4770 1838  
                               i2l4578 13DA                                 i2l5474 11BE  
                               i2l5466 11A2                                 i2l5458 117E  
                               i2l5394 107E                                 i2l5386 1062  
                               i2l5378 1046                                 i2l5714 18D4  
                               i2l3956 2C7A                                 i2l4764 182E  
                               i2l4756 180A                                 i2l4748 17E6  
                               i2l4684 1708                                 i2l4676 16F0  
                               i2l5484 11E2                                 i2l3966 2646  
                               i2l3990 277A                                 i2l4678 16F6  
                               i2l5478 11D4                                 i2l5398 1094  
                               i2l5750 1936                                 i2l3968 264E  
                               i2l4688 170E                                 i2l5752 1938  
                               i2l5728 18F0                                 i2l3978 266E  
                               i2l3994 278E                                 i2l3986 276E  
                               i2l3988 2776                                 i2l5774 197E  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 008A                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 2CDC  
                          ?i2_printRTC 0001                   __end_of_Distribution 1D6C  
                               ___wmul 2848                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 0083                            logRun@byte2 0084  
                          logRun@byte3 0085                                 _getRTC 2200  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 2C46                                 _initUI 2BDE  
                               _logRun 19BC                                 clear_0 26A8  
                               clear_1 26B4                                 clear_2 26C0  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 2CDC                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                __size_of_initGlobalVars 0078  
                               _strcpy 2812                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 2B92  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 2B6A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 2682  
                     __end_of_printRTC 0F90                           __mediumconst FDB4  
                    __end_ofi2___lwmod 27A2                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0071                      __end_ofi2_lcdInst 2D38  
                    __end_ofi2_isdigit 2C82                             __accesstop 0080  
              __end_of__initialization 26C6                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 002C                           __pidataBANK1 2D6C  
                          i2printRTC@i 0041                          _initSortTimer 1F92  
          __end_of_updateServoPosition 2456                          __end_of_putch 2D10  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1C34                             __end_of_UI 0576  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 2B40          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 2B14                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 00E1                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 2AE8  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_500 00D1                                UI@i_503 00D2  
                              UI@i_504 00D3                                UI@i_491 00CC  
                              UI@i_483 00C8                         ?_initSortTimer 0001  
                              UI@i_492 00CD                                UI@i_484 00C9  
                              UI@i_495 00CE                                UI@i_487 00CA  
                              UI@i_496 00CF                                UI@i_488 00CB  
                              UI@i_499 00D0                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$1949 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 2D20                              ?_initTime 0080  
                      _f_loadingNewCan 00F1                        i2printRTC@month 003D  
                __size_of_Distribution 0138            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 24BE                                _Loading 1EE6  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 0082  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 1D6C  
                              ___awmod 203C                             _initServos 2C46  
                              ___lldiv 1E2A                        __size_of___wmul 0036  
                              ___lwdiv 22FE                                ___lwmod 24BE  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                           logRun@byte11 0087  
                      __size_of_initUI 0024                                __pcinit 2682  
                      __size_of_logRun 0140                           logRun@byte_i 0086  
                              __ramtop 1000                         _initGlobalVars 2286  
                              _lcdInst 2D10                                _handler 0008  
                              __ptext0 20DE                                __ptext1 2C9E  
                              __ptext2 2C02                                __ptext3 1EE6  
                              __ptext4 1F92                                __ptext5 2C46  
                              __ptext6 2286                                __ptext7 1AFC  
                              __ptext8 26D0                                __ptext9 2ABC  
                      __size_of_printf 040A                                _readADC 2ABC  
                      __size_of_strcpy 0036                                _initLCD 271A  
                              _cur_can 00E5                                _loadRTC 2174  
                              _readMAG 26D0                                _dpowers FDC6  
                              _isdigit 2B40                       ___awmod@dividend 0080  
                              getRTC@i 0083               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0003                           _Distribution 1C34  
                       __pintcode_body 1866                   end_of_initialization 26C6  
                              logRun@i 0088                             ??_initTime 0086  
                              int_func 1866                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 22FE  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 25DA                             _updateMenu 0F90  
                    i2_I2C_Master_Read 2BB8                              _IR_signal 0063  
                    i2_I2C_Master_Wait 2CEE                      i2_I2C_Master_Stop 2D5C  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 2630                              i2___lwmod 2760  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1486  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 2D2C                             _total_time 00F9  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 2C64  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 2C9E  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 287E                         __end_of_getRTC 2286  
                 __size_ofi2_lcdNibble 0056                          i2lcdInst@data 0003  
                       __end_of_initUI 2C02                         __end_of_logRun 1AFC  
                     i2___wmul@product 0005                         __end_of_printf 0980  
                         i2printf@flag 0026                         __end_of_strcpy 2848  
            __end_ofi2_I2C_Master_Read 2BDE              __end_ofi2_I2C_Master_Wait 2D00  
                         i2printf@prec 001D                    start_initialization 2682  
            __end_ofi2_I2C_Master_Stop 2D64                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 00DF  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                             logRun@addr 008A  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK1 0122                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_logRun 0083  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2064 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 006E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1584 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 001E                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 00E3  
                          _EEPROM_read 2C82                     __end_of_PortTestA5 2CEE  
                     _I2C_Master_Start 2D54                              _f_lastCan 00EF  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2D38                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 2456                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006D                              _cur_state 00E7  
                     ___lwdiv@quotient 0084                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0138                            __size_of_UI 0564  
           __end_ofi2_I2C_Master_Start 2D6C             __end_ofi2_I2C_Master_Write 2D4C  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 1680  
                          ??i2_isdigit 0001                               i2u312_40 0B06  
                             i2u312_47 0AFC                               i2u308_40 0AA6  
                             i2u308_47 0A9C                               i2u259_40 2BD6  
                             i2u339_40 12DE                               _PIR2bits 000FA1  
                             i2u523_47 16BE                               i2u524_47 25F2  
                             i2u525_47 25FC                               i2u526_47 261E  
                             i2u527_47 2628                               i2u474_40 15B8  
                  __size_of_updateMenu 02C0                         _log_completion 006F  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 2B92  
                        lcdNibble@data 0081                               i2_getRTC 2376  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0980  
                             i2_strcpy 287E                    I2C_Master_Read@temp 0082  
                            copy_data0 2696                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                            _count_total 00FD  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00AC                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 203C  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 2940  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 27DA  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 27A2  
              _change_state_to_menu_23 2910                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 2A30                _change_state_to_logs_12 2A00  
              _change_state_to_logs_22 29D0                _change_state_to_logs_23 2A8E  
              _change_state_to_logs_33 29A0                _change_state_to_logs_34 2970  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 19B4                        _I2C_Master_Init 2520  
                     __size_of_readADC 002C                        _I2C_Master_Read 2A60  
                     __size_of_initLCD 0046                           _f_ID_receive 00E9  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004A  
                      _I2C_Master_Wait 2CB4                        _I2C_Master_Stop 2D4C  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 1C34                               __ptext11 23E8  
                             __ptext20 2B14                               __ptext12 2580  
                             __ptext21 2C24                               __ptext13 19BC  
                             __ptext30 2A60                               __ptext22 271A  
                             __ptext14 2AE8                               __ptext31 2CB4  
                             __ptext23 0012                               __ptext15 2C82  
                             __ptext40 2D10                               __ptext32 27A2  
                             __ptext24 0CC6                               __ptext16 2BDE  
                             __ptext41 2456                               __ptext33 27DA  
                             __ptext25 2812                               __ptext17 2174  
                             __ptext50 1680                               __ptext42 203C  
                             __ptext34 0576                               __ptext26 2200  
                             __ptext18 2520                               __ptext51 28B0  
                             __ptext43 1D6C                               __ptext35 2D00  
                             __ptext27 2D38                               __ptext19 1E2A  
                             __ptext60 2A30                               __ptext52 28E0  
                             __ptext44 2CDC                               __ptext36 2B40  
                             __ptext28 2D4C                               __ptext61 2CC8  
                             __ptext53 2910                               __ptext37 2848  
                             __ptext29 2D54                               __ptext70 25DA  
                             __ptext62 1486                               __ptext54 2940  
                             __ptext46 0F90                               __ptext38 24BE  
                             __ptext71 2376                               __ptext63 0980  
                             __ptext55 2970                               __ptext47 2B6A  
                             __ptext39 22FE                               __ptext72 2D42  
                             __ptext64 2D20                               __ptext56 29A0  
                             __ptext48 1250                               __ptext73 2D5C  
                             __ptext65 2C64                               __ptext57 2A8E  
                             __ptext49 287E                               __ptext74 2D64  
                             __ptext66 2B92                               __ptext58 29D0  
                             __ptext75 2BB8                               __ptext67 2760  
                             __ptext59 2A00                               __ptext76 2CEE  
                             __ptext68 2630                               __ptext69 2D2C  
                             _dispLogs 2CC8                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1584 0002  
                   __end_of_initServos 2C64                          ?_EEPROM_write 0080  
                             _initTime 2C24                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F7                    _updateServoPosition 23E8  
               __size_of_machineConfig 005A                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                       _log_total_time 0120                     _f_can_coming_to_ID 00EB  
                            printf@len 00A5                              printf@val 00A3  
    __end_ofi2_change_state_to_menu_12 2910      __end_ofi2_change_state_to_menu_22 28E0  
                             loadRTC@i 0096                 __end_of_printSortTimer 1680  
                            putch@data 0082               __end_of_I2C_Master_Start 2D5C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 2D42  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                             _MAG_signal 00DB  
                             isdigit@c 0082                               intlevel2 0000  
                       ??_EEPROM_write 0083                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 2CB4              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 1250  
              __end_of_I2C_Master_Init 2580                __end_of_I2C_Master_Read 2A8E  
              __end_of_I2C_Master_Wait 2CC8                __end_of_I2C_Master_Stop 2D54  
                        printRTC@F3211 0122                            lcdInst@data 0082  
                  __end_ofi2_lcdNibble 2630                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 006B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2580  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FB  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
