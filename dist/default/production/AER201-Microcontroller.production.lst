

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 15:04:31 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   110                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   111                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   112  0000                     
   113                           ; Version 1.40
   114                           ; Generated 01/12/2016 GMT
   115                           ; 
   116                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC18F4620 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     
   148                           	psect	idataBANK1
   149  005136                     __pidataBANK1:
   150                           	opt stack 0
   151                           
   152                           ;initializer for UI@F3228
   153  005136  4D                 	db	77
   154  005137  4D                 	db	77
   155  005138  4D                 	db	77
   156  005139  00                 	db	0
   157                           
   158                           ;initializer for printRTC@F3219
   159  00513A  4D                 	db	77
   160  00513B  4D                 	db	77
   161  00513C  4D                 	db	77
   162  00513D  00                 	db	0
   163                           
   164                           	psect	mediumconst
   165  00FAEE                     __pmediumconst:
   166                           	opt stack 0
   167  00FAEE  00                 	db	0
   168  00FAEF                     _keys:
   169                           	opt stack 0
   170  00FAEF  31                 	db	49
   171  00FAF0  32                 	db	50
   172  00FAF1  33                 	db	51
   173  00FAF2  41                 	db	65
   174  00FAF3  34                 	db	52
   175  00FAF4  35                 	db	53
   176  00FAF5  36                 	db	54
   177  00FAF6  42                 	db	66
   178  00FAF7  37                 	db	55
   179  00FAF8  38                 	db	56
   180  00FAF9  39                 	db	57
   181  00FAFA  43                 	db	67
   182  00FAFB  2A                 	db	42
   183  00FAFC  30                 	db	48
   184  00FAFD  23                 	db	35
   185  00FAFE  44                 	db	68
   186  00FAFF  00                 	db	0
   187  00FB00                     __end_of_keys:
   188                           	opt stack 0
   189  00FB00                     _dpowers:
   190                           	opt stack 0
   191  00FB00  0001               	dw	1
   192  00FB02  000A               	dw	10
   193  00FB04  0064               	dw	100
   194  00FB06  03E8               	dw	1000
   195  00FB08  2710               	dw	10000
   196  00FB0A                     __end_of_dpowers:
   197                           	opt stack 0
   198  0000                     _ADCON0	set	4034
   199  0000                     _ADCON0bits	set	4034
   200  0000                     _ADCON1	set	4033
   201  0000                     _ADCON2	set	4032
   202  0000                     _ADRESH	set	4036
   203  0000                     _ADRESL	set	4035
   204  0000                     _CMCONbits	set	4020
   205  0000                     _CVRCON	set	4021
   206  0000                     _EEADR	set	4009
   207  0000                     _EEADRH	set	4010
   208  0000                     _EECON1bits	set	4006
   209  0000                     _EECON2	set	4007
   210  0000                     _EEDATA	set	4008
   211  0000                     _INTCONbits	set	4082
   212  0000                     _LATA	set	3977
   213  0000                     _LATAbits	set	3977
   214  0000                     _LATB	set	3978
   215  0000                     _LATC	set	3979
   216  0000                     _LATCbits	set	3979
   217  0000                     _LATD	set	3980
   218  0000                     _LATDbits	set	3980
   219  0000                     _LATE	set	3981
   220  0000                     _LATEbits	set	3981
   221  0000                     _OSCCON	set	4051
   222  0000                     _OSCTUNEbits	set	3995
   223  0000                     _PIR2bits	set	4001
   224  0000                     _PORTAbits	set	3968
   225  0000                     _PORTB	set	3969
   226  0000                     _PORTBbits	set	3969
   227  0000                     _SSPADD	set	4040
   228  0000                     _SSPBUF	set	4041
   229  0000                     _SSPCON1	set	4038
   230  0000                     _SSPCON2	set	4037
   231  0000                     _SSPSTAT	set	4039
   232  0000                     _T0CON	set	4053
   233  0000                     _T1CON	set	4045
   234  0000                     _T3CON	set	4017
   235  0000                     _TMR0H	set	4055
   236  0000                     _TMR0L	set	4054
   237  0000                     _TMR1H	set	4047
   238  0000                     _TMR1L	set	4046
   239  0000                     _TMR3H	set	4019
   240  0000                     _TMR3L	set	4018
   241  0000                     _TRISA	set	3986
   242  0000                     _TRISB	set	3987
   243  0000                     _TRISC	set	3988
   244  0000                     _TRISD	set	3989
   245  0000                     _TRISE	set	3990
   246  0000                     _ACKDT	set	32301
   247  0000                     _ACKEN	set	32300
   248  0000                     _ADIE	set	31982
   249  0000                     _INT1IE	set	32643
   250  0000                     _INT1IF	set	32640
   251  0000                     _PEIE	set	32662
   252  0000                     _PEN	set	32298
   253  0000                     _RCEN	set	32299
   254  0000                     _RSEN	set	32297
   255  0000                     _SEN	set	32296
   256  0000                     _TMR0IE	set	32661
   257  0000                     _TMR0IF	set	32658
   258  0000                     _TMR0ON	set	32431
   259  0000                     _TMR1IE	set	31976
   260  0000                     _TMR1IF	set	31984
   261  0000                     _TMR1ON	set	32360
   262  0000                     _TMR2IE	set	31977
   263  0000                     _TMR3IE	set	32001
   264  0000                     _TMR3IF	set	32009
   265  0000                     _TMR3ON	set	32136
   266  0000                     _TRISC3	set	31907
   267  0000                     _TRISC4	set	31908
   268  0000                     _nRBPU	set	32655
   269  00FB0A                     STR_21:
   270  00FB0A  25                 	db	37
   271  00FB0B  30                 	db	48	;'0'
   272  00FB0C  32                 	db	50	;'2'
   273  00FB0D  64                 	db	100	;'d'
   274  00FB0E  25                 	db	37
   275  00FB0F  73                 	db	115	;'s'
   276  00FB10  20                 	db	32
   277  00FB11  7C                 	db	124
   278  00FB12  20                 	db	32
   279  00FB13  25                 	db	37
   280  00FB14  30                 	db	48	;'0'
   281  00FB15  32                 	db	50	;'2'
   282  00FB16  64                 	db	100	;'d'
   283  00FB17  3A                 	db	58	;':'
   284  00FB18  25                 	db	37
   285  00FB19  30                 	db	48	;'0'
   286  00FB1A  32                 	db	50	;'2'
   287  00FB1B  64                 	db	100	;'d'
   288  00FB1C  3A                 	db	58	;':'
   289  00FB1D  25                 	db	37
   290  00FB1E  30                 	db	48	;'0'
   291  00FB1F  32                 	db	50	;'2'
   292  00FB20  64                 	db	100	;'d'
   293  00FB21  00                 	db	0
   294  00FB22                     STR_66:
   295  00FB22  28                 	db	40
   296  00FB23  64                 	db	100	;'d'
   297  00FB24  61                 	db	97	;'a'
   298  00FB25  74                 	db	116	;'t'
   299  00FB26  61                 	db	97	;'a'
   300  00FB27  3A                 	db	58	;':'
   301  00FB28  20                 	db	32
   302  00FB29  25                 	db	37
   303  00FB2A  75                 	db	117	;'u'
   304  00FB2B  2C                 	db	44
   305  00FB2C  20                 	db	32
   306  00FB2D  61                 	db	97	;'a'
   307  00FB2E  64                 	db	100	;'d'
   308  00FB2F  64                 	db	100	;'d'
   309  00FB30  72                 	db	114	;'r'
   310  00FB31  3A                 	db	58	;':'
   311  00FB32  20                 	db	32
   312  00FB33  25                 	db	37
   313  00FB34  75                 	db	117	;'u'
   314  00FB35  29                 	db	41
   315  00FB36  00                 	db	0
   316  00FB37                     STR_111:
   317  00FB37  44                 	db	68	;'D'
   318  00FB38  20                 	db	32
   319  00FB39  57                 	db	87	;'W'
   320  00FB3A  49                 	db	73	;'I'
   321  00FB3B  4C                 	db	76	;'L'
   322  00FB3C  4C                 	db	76	;'L'
   323  00FB3D  20                 	db	32
   324  00FB3E  52                 	db	82	;'R'
   325  00FB3F  45                 	db	69	;'E'
   326  00FB40  54                 	db	84	;'T'
   327  00FB41  55                 	db	85	;'U'
   328  00FB42  52                 	db	82	;'R'
   329  00FB43  4E                 	db	78	;'N'
   330  00FB44  20                 	db	32
   331  00FB45  20                 	db	32
   332  00FB46  20                 	db	32
   333  00FB47  20                 	db	32
   334  00FB48  00                 	db	0
   335  00FB49                     STR_112:
   336  00FB49  4F                 	db	79	;'O'
   337  00FB4A  54                 	db	84	;'T'
   338  00FB4B  48                 	db	72	;'H'
   339  00FB4C  45                 	db	69	;'E'
   340  00FB4D  52                 	db	82	;'R'
   341  00FB4E  20                 	db	32
   342  00FB4F  53                 	db	83	;'S'
   343  00FB50  45                 	db	69	;'E'
   344  00FB51  54                 	db	84	;'T'
   345  00FB52  53                 	db	83	;'S'
   346  00FB53  20                 	db	32
   347  00FB54  52                 	db	82	;'R'
   348  00FB55  41                 	db	65	;'A'
   349  00FB56  35                 	db	53	;'5'
   350  00FB57  20                 	db	32
   351  00FB58  20                 	db	32
   352  00FB59  20                 	db	32
   353  00FB5A  00                 	db	0
   354  00FB5B                     STR_120:
   355  00FB5B  53                 	db	83	;'S'
   356  00FB5C  3A                 	db	58	;':'
   357  00FB5D  20                 	db	32
   358  00FB5E  44                 	db	68	;'D'
   359  00FB5F  20                 	db	32
   360  00FB60  57                 	db	87	;'W'
   361  00FB61  49                 	db	73	;'I'
   362  00FB62  4C                 	db	76	;'L'
   363  00FB63  4C                 	db	76	;'L'
   364  00FB64  20                 	db	32
   365  00FB65  52                 	db	82	;'R'
   366  00FB66  45                 	db	69	;'E'
   367  00FB67  54                 	db	84	;'T'
   368  00FB68  55                 	db	85	;'U'
   369  00FB69  52                 	db	82	;'R'
   370  00FB6A  4E                 	db	78	;'N'
   371  00FB6B  20                 	db	32
   372  00FB6C  00                 	db	0
   373  00FB6D                     STR_123:
   374  00FB6D  4F                 	db	79	;'O'
   375  00FB6E  54                 	db	84	;'T'
   376  00FB6F  48                 	db	72	;'H'
   377  00FB70  45                 	db	69	;'E'
   378  00FB71  52                 	db	82	;'R'
   379  00FB72  3A                 	db	58	;':'
   380  00FB73  20                 	db	32
   381  00FB74  43                 	db	67	;'C'
   382  00FB75  41                 	db	65	;'A'
   383  00FB76  4D                 	db	77	;'M'
   384  00FB77  20                 	db	32
   385  00FB78  54                 	db	84	;'T'
   386  00FB79  4F                 	db	79	;'O'
   387  00FB7A  47                 	db	71	;'G'
   388  00FB7B  47                 	db	71	;'G'
   389  00FB7C  4C                 	db	76	;'L'
   390  00FB7D  45                 	db	69	;'E'
   391  00FB7E  00                 	db	0
   392  00FB7F                     STR_122:
   393  00FB7F  44                 	db	68	;'D'
   394  00FB80  3A                 	db	58	;':'
   395  00FB81  20                 	db	32
   396  00FB82  52                 	db	82	;'R'
   397  00FB83  45                 	db	69	;'E'
   398  00FB84  54                 	db	84	;'T'
   399  00FB85  7C                 	db	124
   400  00FB86  32                 	db	50	;'2'
   401  00FB87  3A                 	db	58	;':'
   402  00FB88  20                 	db	32
   403  00FB89  43                 	db	67	;'C'
   404  00FB8A  4F                 	db	79	;'O'
   405  00FB8B  4E                 	db	78	;'N'
   406  00FB8C  44                 	db	68	;'D'
   407  00FB8D  20                 	db	32
   408  00FB8E  25                 	db	37
   409  00FB8F  64                 	db	100	;'d'
   410  00FB90  00                 	db	0
   411  00FB91                     STR_3:
   412  00FB91  2D                 	db	45
   413  00FB92  2D                 	db	45
   414  00FB93  20                 	db	32
   415  00FB94  4C                 	db	76	;'L'
   416  00FB95  4F                 	db	79	;'O'
   417  00FB96  47                 	db	71	;'G'
   418  00FB97  20                 	db	32
   419  00FB98  25                 	db	37
   420  00FB99  32                 	db	50	;'2'
   421  00FB9A  64                 	db	100	;'d'
   422  00FB9B  20                 	db	32
   423  00FB9C  48                 	db	72	;'H'
   424  00FB9D  45                 	db	69	;'E'
   425  00FB9E  52                 	db	82	;'R'
   426  00FB9F  45                 	db	69	;'E'
   427  00FBA0  2D                 	db	45
   428  00FBA1  2D                 	db	45
   429  00FBA2  00                 	db	0
   430  00FBA3                     STR_1:
   431  00FBA3  52                 	db	82	;'R'
   432  00FBA4  45                 	db	69	;'E'
   433  00FBA5  53                 	db	83	;'S'
   434  00FBA6  55                 	db	85	;'U'
   435  00FBA7  4C                 	db	76	;'L'
   436  00FBA8  54                 	db	84	;'T'
   437  00FBA9  53                 	db	83	;'S'
   438  00FBAA  20                 	db	32
   439  00FBAB  49                 	db	73	;'I'
   440  00FBAC  4E                 	db	78	;'N'
   441  00FBAD  20                 	db	32
   442  00FBAE  4C                 	db	76	;'L'
   443  00FBAF  4F                 	db	79	;'O'
   444  00FBB0  47                 	db	71	;'G'
   445  00FBB1  20                 	db	32
   446  00FBB2  25                 	db	37
   447  00FBB3  64                 	db	100	;'d'
   448  00FBB4  00                 	db	0
   449  00FBB5                     STR_102:
   450  00FBB5  4D                 	db	77	;'M'
   451  00FBB6  49                 	db	73	;'I'
   452  00FBB7  44                 	db	68	;'D'
   453  00FBB8  20                 	db	32
   454  00FBB9  2D                 	db	45
   455  00FBBA  2D                 	db	45
   456  00FBBB  20                 	db	32
   457  00FBBC  32                 	db	50	;'2'
   458  00FBBD  73                 	db	115	;'s'
   459  00FBBE  20                 	db	32
   460  00FBBF  20                 	db	32
   461  00FBC0  20                 	db	32
   462  00FBC1  20                 	db	32
   463  00FBC2  20                 	db	32
   464  00FBC3  20                 	db	32
   465  00FBC4  20                 	db	32
   466  00FBC5  00                 	db	0
   467  00FBC6                     STR_105:
   468  00FBC6  44                 	db	68	;'D'
   469  00FBC7  52                 	db	82	;'R'
   470  00FBC8  4F                 	db	79	;'O'
   471  00FBC9  50                 	db	80	;'P'
   472  00FBCA  20                 	db	32
   473  00FBCB  2D                 	db	45
   474  00FBCC  2D                 	db	45
   475  00FBCD  20                 	db	32
   476  00FBCE  32                 	db	50	;'2'
   477  00FBCF  73                 	db	115	;'s'
   478  00FBD0  20                 	db	32
   479  00FBD1  20                 	db	32
   480  00FBD2  20                 	db	32
   481  00FBD3  20                 	db	32
   482  00FBD4  20                 	db	32
   483  00FBD5  20                 	db	32
   484  00FBD6  00                 	db	0
   485  00FBD7                     STR_99:
   486  00FBD7  4C                 	db	76	;'L'
   487  00FBD8  45                 	db	69	;'E'
   488  00FBD9  46                 	db	70	;'F'
   489  00FBDA  54                 	db	84	;'T'
   490  00FBDB  20                 	db	32
   491  00FBDC  2D                 	db	45
   492  00FBDD  2D                 	db	45
   493  00FBDE  20                 	db	32
   494  00FBDF  32                 	db	50	;'2'
   495  00FBE0  73                 	db	115	;'s'
   496  00FBE1  20                 	db	32
   497  00FBE2  20                 	db	32
   498  00FBE3  20                 	db	32
   499  00FBE4  20                 	db	32
   500  00FBE5  20                 	db	32
   501  00FBE6  20                 	db	32
   502  00FBE7  00                 	db	0
   503  00FBE8                     STR_104:
   504  00FBE8  4C                 	db	76	;'L'
   505  00FBE9  45                 	db	69	;'E'
   506  00FBEA  56                 	db	86	;'V'
   507  00FBEB  45                 	db	69	;'E'
   508  00FBEC  4C                 	db	76	;'L'
   509  00FBED  20                 	db	32
   510  00FBEE  2D                 	db	45
   511  00FBEF  2D                 	db	45
   512  00FBF0  20                 	db	32
   513  00FBF1  32                 	db	50	;'2'
   514  00FBF2  73                 	db	115	;'s'
   515  00FBF3  20                 	db	32
   516  00FBF4  20                 	db	32
   517  00FBF5  20                 	db	32
   518  00FBF6  20                 	db	32
   519  00FBF7  20                 	db	32
   520  00FBF8  00                 	db	0
   521  00FBF9                     STR_98:
   522  00FBF9  52                 	db	82	;'R'
   523  00FBFA  49                 	db	73	;'I'
   524  00FBFB  47                 	db	71	;'G'
   525  00FBFC  48                 	db	72	;'H'
   526  00FBFD  54                 	db	84	;'T'
   527  00FBFE  20                 	db	32
   528  00FBFF  2D                 	db	45
   529  00FC00  2D                 	db	45
   530  00FC01  20                 	db	32
   531  00FC02  32                 	db	50	;'2'
   532  00FC03  73                 	db	115	;'s'
   533  00FC04  20                 	db	32
   534  00FC05  20                 	db	32
   535  00FC06  20                 	db	32
   536  00FC07  20                 	db	32
   537  00FC08  20                 	db	32
   538  00FC09  00                 	db	0
   539  00FC0A                     STR_97:
   540  00FC0A  4D                 	db	77	;'M'
   541  00FC0B  49                 	db	73	;'I'
   542  00FC0C  44                 	db	68	;'D'
   543  00FC0D  44                 	db	68	;'D'
   544  00FC0E  4C                 	db	76	;'L'
   545  00FC0F  45                 	db	69	;'E'
   546  00FC10  20                 	db	32
   547  00FC11  2D                 	db	45
   548  00FC12  2D                 	db	45
   549  00FC13  20                 	db	32
   550  00FC14  32                 	db	50	;'2'
   551  00FC15  73                 	db	115	;'s'
   552  00FC16  20                 	db	32
   553  00FC17  20                 	db	32
   554  00FC18  20                 	db	32
   555  00FC19  20                 	db	32
   556  00FC1A  00                 	db	0
   557  00FC1B  44                 	db	68	;'D'
   558  00FC1C  20                 	db	32
   559  00FC1D  57                 	db	87	;'W'
   560  00FC1E  49                 	db	73	;'I'
   561  00FC1F  4C                 	db	76	;'L'
   562  00FC20  4C                 	db	76	;'L'
   563  00FC21  20                 	db	32
   564  00FC22  52                 	db	82	;'R'
   565  00FC23  45                 	db	69	;'E'
   566  00FC24  54                 	db	84	;'T'
   567  00FC25  55                 	db	85	;'U'
   568  00FC26  52                 	db	82	;'R'
   569  00FC27  4E                 	db	78	;'N'
   570  00FC28  20                 	db	32
   571  00FC29  20                 	db	32
   572  00FC2A  20                 	db	32
   573  00FC2B  00                 	db	0
   574  00FC2C                     STR_100:
   575  00FC2C  4D                 	db	77	;'M'
   576  00FC2D  49                 	db	73	;'I'
   577  00FC2E  44                 	db	68	;'D'
   578  00FC2F  2D                 	db	45
   579  00FC30  4C                 	db	76	;'L'
   580  00FC31  45                 	db	69	;'E'
   581  00FC32  46                 	db	70	;'F'
   582  00FC33  54                 	db	84	;'T'
   583  00FC34  20                 	db	32
   584  00FC35  2D                 	db	45
   585  00FC36  2D                 	db	45
   586  00FC37  20                 	db	32
   587  00FC38  32                 	db	50	;'2'
   588  00FC39  73                 	db	115	;'s'
   589  00FC3A  20                 	db	32
   590  00FC3B  20                 	db	32
   591  00FC3C  00                 	db	0
   592  00FC3D                     STR_101:
   593  00FC3D  4D                 	db	77	;'M'
   594  00FC3E  49                 	db	73	;'I'
   595  00FC3F  44                 	db	68	;'D'
   596  00FC40  2D                 	db	45
   597  00FC41  52                 	db	82	;'R'
   598  00FC42  49                 	db	73	;'I'
   599  00FC43  47                 	db	71	;'G'
   600  00FC44  48                 	db	72	;'H'
   601  00FC45  54                 	db	84	;'T'
   602  00FC46  20                 	db	32
   603  00FC47  2D                 	db	45
   604  00FC48  2D                 	db	45
   605  00FC49  20                 	db	32
   606  00FC4A  32                 	db	50	;'2'
   607  00FC4B  73                 	db	115	;'s'
   608  00FC4C  20                 	db	32
   609  00FC4D  00                 	db	0
   610  00FC4E  45                 	db	69	;'E'
   611  00FC4F  4C                 	db	76	;'L'
   612  00FC50  53                 	db	83	;'S'
   613  00FC51  45                 	db	69	;'E'
   614  00FC52  20                 	db	32
   615  00FC53  54                 	db	84	;'T'
   616  00FC54  4F                 	db	79	;'O'
   617  00FC55  47                 	db	71	;'G'
   618  00FC56  47                 	db	71	;'G'
   619  00FC57  4C                 	db	76	;'L'
   620  00FC58  45                 	db	69	;'E'
   621  00FC59  53                 	db	83	;'S'
   622  00FC5A  20                 	db	32
   623  00FC5B  52                 	db	82	;'R'
   624  00FC5C  41                 	db	65	;'A'
   625  00FC5D  35                 	db	53	;'5'
   626  00FC5E  00                 	db	0
   627  00FC5F                     STR_72:
   628  00FC5F  41                 	db	65	;'A'
   629  00FC60  4C                 	db	76	;'L'
   630  00FC61  47                 	db	71	;'G'
   631  00FC62  31                 	db	49	;'1'
   632  00FC63  3A                 	db	58	;':'
   633  00FC64  20                 	db	32
   634  00FC65  39                 	db	57	;'9'
   635  00FC66  20                 	db	32
   636  00FC67  50                 	db	80	;'P'
   637  00FC68  4F                 	db	79	;'O'
   638  00FC69  50                 	db	80	;'P'
   639  00FC6A  4E                 	db	78	;'N'
   640  00FC6B  4F                 	db	79	;'O'
   641  00FC6C  54                 	db	84	;'T'
   642  00FC6D  41                 	db	65	;'A'
   643  00FC6E  42                 	db	66	;'B'
   644  00FC6F  00                 	db	0
   645  00FC70                     STR_92:
   646  00FC70  54                 	db	84	;'T'
   647  00FC71  53                 	db	83	;'S'
   648  00FC72  54                 	db	84	;'T'
   649  00FC73  3A                 	db	58	;':'
   650  00FC74  20                 	db	32
   651  00FC75  43                 	db	67	;'C'
   652  00FC76  4F                 	db	79	;'O'
   653  00FC77  4E                 	db	78	;'N'
   654  00FC78  44                 	db	68	;'D'
   655  00FC79  20                 	db	32
   656  00FC7A  53                 	db	83	;'S'
   657  00FC7B  4F                 	db	79	;'O'
   658  00FC7C  4C                 	db	76	;'L'
   659  00FC7D  4E                 	db	78	;'N'
   660  00FC7E  27                 	db	39
   661  00FC7F  44                 	db	68	;'D'
   662  00FC80  00                 	db	0
   663  00FC81                     STR_94:
   664  00FC81  54                 	db	84	;'T'
   665  00FC82  53                 	db	83	;'S'
   666  00FC83  54                 	db	84	;'T'
   667  00FC84  3A                 	db	58	;':'
   668  00FC85  20                 	db	32
   669  00FC86  50                 	db	80	;'P'
   670  00FC87  55                 	db	85	;'U'
   671  00FC88  53                 	db	83	;'S'
   672  00FC89  48                 	db	72	;'H'
   673  00FC8A  20                 	db	32
   674  00FC8B  53                 	db	83	;'S'
   675  00FC8C  4F                 	db	79	;'O'
   676  00FC8D  4C                 	db	76	;'L'
   677  00FC8E  4E                 	db	78	;'N'
   678  00FC8F  27                 	db	39
   679  00FC90  44                 	db	68	;'D'
   680  00FC91  00                 	db	0
   681  00FC92                     STR_68:
   682  00FC92  32                 	db	50	;'2'
   683  00FC93  2E                 	db	46
   684  00FC94  53                 	db	83	;'S'
   685  00FC95  4E                 	db	78	;'N'
   686  00FC96  52                 	db	82	;'R'
   687  00FC97  7C                 	db	124
   688  00FC98  34                 	db	52	;'4'
   689  00FC99  2E                 	db	46
   690  00FC9A  48                 	db	72	;'H'
   691  00FC9B  49                 	db	73	;'I'
   692  00FC9C  7C                 	db	124
   693  00FC9D  35                 	db	53	;'5'
   694  00FC9E  2E                 	db	46
   695  00FC9F  4D                 	db	77	;'M'
   696  00FCA0  45                 	db	69	;'E'
   697  00FCA1  44                 	db	68	;'D'
   698  00FCA2  00                 	db	0
   699  00FCA3                     STR_69:
   700  00FCA3  42                 	db	66	;'B'
   701  00FCA4  2E                 	db	46
   702  00FCA5  50                 	db	80	;'P'
   703  00FCA6  53                 	db	83	;'S'
   704  00FCA7  48                 	db	72	;'H'
   705  00FCA8  7C                 	db	124
   706  00FCA9  38                 	db	56	;'8'
   707  00FCAA  2E                 	db	46
   708  00FCAB  53                 	db	83	;'S'
   709  00FCAC  56                 	db	86	;'V'
   710  00FCAD  7C                 	db	124
   711  00FCAE  39                 	db	57	;'9'
   712  00FCAF  2E                 	db	46
   713  00FCB0  42                 	db	66	;'B'
   714  00FCB1  4C                 	db	76	;'L'
   715  00FCB2  4B                 	db	75	;'K'
   716  00FCB3  00                 	db	0
   717  00FCB4                     STR_110:
   718  00FCB4  54                 	db	84	;'T'
   719  00FCB5  53                 	db	83	;'S'
   720  00FCB6  54                 	db	84	;'T'
   721  00FCB7  3A                 	db	58	;':'
   722  00FCB8  20                 	db	32
   723  00FCB9  42                 	db	66	;'B'
   724  00FCBA  4F                 	db	79	;'O'
   725  00FCBB  54                 	db	84	;'T'
   726  00FCBC  48                 	db	72	;'H'
   727  00FCBD  20                 	db	32
   728  00FCBE  53                 	db	83	;'S'
   729  00FCBF  45                 	db	69	;'E'
   730  00FCC0  52                 	db	82	;'R'
   731  00FCC1  56                 	db	86	;'V'
   732  00FCC2  4F                 	db	79	;'O'
   733  00FCC3  53                 	db	83	;'S'
   734  00FCC4  00                 	db	0
   735  00FCC5                     STR_41:
   736  00FCC5  4C                 	db	76	;'L'
   737  00FCC6  4F                 	db	79	;'O'
   738  00FCC7  47                 	db	71	;'G'
   739  00FCC8  20                 	db	32
   740  00FCC9  31                 	db	49	;'1'
   741  00FCCA  20                 	db	32
   742  00FCCB  20                 	db	32
   743  00FCCC  20                 	db	32
   744  00FCCD  20                 	db	32
   745  00FCCE  20                 	db	32
   746  00FCCF  20                 	db	32
   747  00FCD0  20                 	db	32
   748  00FCD1  20                 	db	32
   749  00FCD2  20                 	db	32
   750  00FCD3  20                 	db	32
   751  00FCD4  20                 	db	32
   752  00FCD5  00                 	db	0
   753  00FCD6                     STR_40:
   754  00FCD6  4C                 	db	76	;'L'
   755  00FCD7  4F                 	db	79	;'O'
   756  00FCD8  47                 	db	71	;'G'
   757  00FCD9  20                 	db	32
   758  00FCDA  32                 	db	50	;'2'
   759  00FCDB  20                 	db	32
   760  00FCDC  20                 	db	32
   761  00FCDD  20                 	db	32
   762  00FCDE  20                 	db	32
   763  00FCDF  20                 	db	32
   764  00FCE0  20                 	db	32
   765  00FCE1  20                 	db	32
   766  00FCE2  20                 	db	32
   767  00FCE3  20                 	db	32
   768  00FCE4  20                 	db	32
   769  00FCE5  20                 	db	32
   770  00FCE6  00                 	db	0
   771  00FCE7                     STR_44:
   772  00FCE7  4C                 	db	76	;'L'
   773  00FCE8  4F                 	db	79	;'O'
   774  00FCE9  47                 	db	71	;'G'
   775  00FCEA  20                 	db	32
   776  00FCEB  33                 	db	51	;'3'
   777  00FCEC  20                 	db	32
   778  00FCED  20                 	db	32
   779  00FCEE  20                 	db	32
   780  00FCEF  20                 	db	32
   781  00FCF0  20                 	db	32
   782  00FCF1  20                 	db	32
   783  00FCF2  20                 	db	32
   784  00FCF3  20                 	db	32
   785  00FCF4  20                 	db	32
   786  00FCF5  20                 	db	32
   787  00FCF6  20                 	db	32
   788  00FCF7  00                 	db	0
   789  00FCF8                     STR_48:
   790  00FCF8  4C                 	db	76	;'L'
   791  00FCF9  4F                 	db	79	;'O'
   792  00FCFA  47                 	db	71	;'G'
   793  00FCFB  20                 	db	32
   794  00FCFC  34                 	db	52	;'4'
   795  00FCFD  20                 	db	32
   796  00FCFE  20                 	db	32
   797  00FCFF  20                 	db	32
   798  00FD00  20                 	db	32
   799  00FD01  20                 	db	32
   800  00FD02  20                 	db	32
   801  00FD03  20                 	db	32
   802  00FD04  20                 	db	32
   803  00FD05  20                 	db	32
   804  00FD06  20                 	db	32
   805  00FD07  20                 	db	32
   806  00FD08  00                 	db	0
   807  00FD09                     STR_36:
   808  00FD09  33                 	db	51	;'3'
   809  00FD0A  2E                 	db	46
   810  00FD0B  20                 	db	32
   811  00FD0C  4C                 	db	76	;'L'
   812  00FD0D  4F                 	db	79	;'O'
   813  00FD0E  47                 	db	71	;'G'
   814  00FD0F  53                 	db	83	;'S'
   815  00FD10  20                 	db	32
   816  00FD11  20                 	db	32
   817  00FD12  20                 	db	32
   818  00FD13  20                 	db	32
   819  00FD14  20                 	db	32
   820  00FD15  20                 	db	32
   821  00FD16  20                 	db	32
   822  00FD17  20                 	db	32
   823  00FD18  20                 	db	32
   824  00FD19  00                 	db	0
   825  00FD1A                     STR_32:
   826  00FD1A  32                 	db	50	;'2'
   827  00FD1B  2E                 	db	46
   828  00FD1C  20                 	db	32
   829  00FD1D  53                 	db	83	;'S'
   830  00FD1E  4F                 	db	79	;'O'
   831  00FD1F  52                 	db	82	;'R'
   832  00FD20  54                 	db	84	;'T'
   833  00FD21  20                 	db	32
   834  00FD22  20                 	db	32
   835  00FD23  20                 	db	32
   836  00FD24  20                 	db	32
   837  00FD25  20                 	db	32
   838  00FD26  20                 	db	32
   839  00FD27  20                 	db	32
   840  00FD28  20                 	db	32
   841  00FD29  20                 	db	32
   842  00FD2A  00                 	db	0
   843  00FD2B                     STR_33:
   844  00FD2B  31                 	db	49	;'1'
   845  00FD2C  2E                 	db	46
   846  00FD2D  20                 	db	32
   847  00FD2E  44                 	db	68	;'D'
   848  00FD2F  41                 	db	65	;'A'
   849  00FD30  54                 	db	84	;'T'
   850  00FD31  45                 	db	69	;'E'
   851  00FD32  2F                 	db	47
   852  00FD33  54                 	db	84	;'T'
   853  00FD34  49                 	db	73	;'I'
   854  00FD35  4D                 	db	77	;'M'
   855  00FD36  45                 	db	69	;'E'
   856  00FD37  20                 	db	32
   857  00FD38  20                 	db	32
   858  00FD39  20                 	db	32
   859  00FD3A  20                 	db	32
   860  00FD3B  00                 	db	0
   861  00FD3C                     STR_24:
   862  00FD3C  20                 	db	32
   863  00FD3D  2D                 	db	45
   864  00FD3E  2D                 	db	45
   865  00FD3F  20                 	db	32
   866  00FD40  50                 	db	80	;'P'
   867  00FD41  4F                 	db	79	;'O'
   868  00FD42  50                 	db	80	;'P'
   869  00FD43  20                 	db	32
   870  00FD44  20                 	db	32
   871  00FD45  43                 	db	67	;'C'
   872  00FD46  41                 	db	65	;'A'
   873  00FD47  4E                 	db	78	;'N'
   874  00FD48  20                 	db	32
   875  00FD49  2D                 	db	45
   876  00FD4A  2D                 	db	45
   877  00FD4B  20                 	db	32
   878  00FD4C  00                 	db	0
   879  00FD4D                     STR_26:
   880  00FD4D  20                 	db	32
   881  00FD4E  2D                 	db	45
   882  00FD4F  2D                 	db	45
   883  00FD50  20                 	db	32
   884  00FD51  53                 	db	83	;'S'
   885  00FD52  4F                 	db	79	;'O'
   886  00FD53  55                 	db	85	;'U'
   887  00FD54  50                 	db	80	;'P'
   888  00FD55  20                 	db	32
   889  00FD56  43                 	db	67	;'C'
   890  00FD57  41                 	db	65	;'A'
   891  00FD58  4E                 	db	78	;'N'
   892  00FD59  20                 	db	32
   893  00FD5A  2D                 	db	45
   894  00FD5B  2D                 	db	45
   895  00FD5C  20                 	db	32
   896  00FD5D  00                 	db	0
   897  00FD5E                     STR_28:
   898  00FD5E  2D                 	db	45
   899  00FD5F  2D                 	db	45
   900  00FD60  20                 	db	32
   901  00FD61  54                 	db	84	;'T'
   902  00FD62  4F                 	db	79	;'O'
   903  00FD63  54                 	db	84	;'T'
   904  00FD64  41                 	db	65	;'A'
   905  00FD65  4C                 	db	76	;'L'
   906  00FD66  20                 	db	32
   907  00FD67  43                 	db	67	;'C'
   908  00FD68  41                 	db	65	;'A'
   909  00FD69  4E                 	db	78	;'N'
   910  00FD6A  53                 	db	83	;'S'
   911  00FD6B  20                 	db	32
   912  00FD6C  2D                 	db	45
   913  00FD6D  2D                 	db	45
   914  00FD6E  00                 	db	0
   915  00FD6F                     STR_39:
   916  00FD6F  4C                 	db	76	;'L'
   917  00FD70  4F                 	db	79	;'O'
   918  00FD71  47                 	db	71	;'G'
   919  00FD72  20                 	db	32
   920  00FD73  31                 	db	49	;'1'
   921  00FD74  20                 	db	32
   922  00FD75  20                 	db	32
   923  00FD76  20                 	db	32
   924  00FD77  20                 	db	32
   925  00FD78  20                 	db	32
   926  00FD79  20                 	db	32
   927  00FD7A  20                 	db	32
   928  00FD7B  20                 	db	32
   929  00FD7C  20                 	db	32
   930  00FD7D  20                 	db	32
   931  00FD7E  3C                 	db	60	;'<'
   932  00FD7F  00                 	db	0
   933  00FD80                     STR_42:
   934  00FD80  4C                 	db	76	;'L'
   935  00FD81  4F                 	db	79	;'O'
   936  00FD82  47                 	db	71	;'G'
   937  00FD83  20                 	db	32
   938  00FD84  32                 	db	50	;'2'
   939  00FD85  20                 	db	32
   940  00FD86  20                 	db	32
   941  00FD87  20                 	db	32
   942  00FD88  20                 	db	32
   943  00FD89  20                 	db	32
   944  00FD8A  20                 	db	32
   945  00FD8B  20                 	db	32
   946  00FD8C  20                 	db	32
   947  00FD8D  20                 	db	32
   948  00FD8E  20                 	db	32
   949  00FD8F  3C                 	db	60	;'<'
   950  00FD90  00                 	db	0
   951  00FD91                     STR_46:
   952  00FD91  4C                 	db	76	;'L'
   953  00FD92  4F                 	db	79	;'O'
   954  00FD93  47                 	db	71	;'G'
   955  00FD94  20                 	db	32
   956  00FD95  33                 	db	51	;'3'
   957  00FD96  20                 	db	32
   958  00FD97  20                 	db	32
   959  00FD98  20                 	db	32
   960  00FD99  20                 	db	32
   961  00FD9A  20                 	db	32
   962  00FD9B  20                 	db	32
   963  00FD9C  20                 	db	32
   964  00FD9D  20                 	db	32
   965  00FD9E  20                 	db	32
   966  00FD9F  20                 	db	32
   967  00FDA0  3C                 	db	60	;'<'
   968  00FDA1  00                 	db	0
   969  00FDA2                     STR_50:
   970  00FDA2  4C                 	db	76	;'L'
   971  00FDA3  4F                 	db	79	;'O'
   972  00FDA4  47                 	db	71	;'G'
   973  00FDA5  20                 	db	32
   974  00FDA6  34                 	db	52	;'4'
   975  00FDA7  20                 	db	32
   976  00FDA8  20                 	db	32
   977  00FDA9  20                 	db	32
   978  00FDAA  20                 	db	32
   979  00FDAB  20                 	db	32
   980  00FDAC  20                 	db	32
   981  00FDAD  20                 	db	32
   982  00FDAE  20                 	db	32
   983  00FDAF  20                 	db	32
   984  00FDB0  20                 	db	32
   985  00FDB1  3C                 	db	60	;'<'
   986  00FDB2  00                 	db	0
   987  00FDB3                     STR_38:
   988  00FDB3  33                 	db	51	;'3'
   989  00FDB4  2E                 	db	46
   990  00FDB5  20                 	db	32
   991  00FDB6  4C                 	db	76	;'L'
   992  00FDB7  4F                 	db	79	;'O'
   993  00FDB8  47                 	db	71	;'G'
   994  00FDB9  53                 	db	83	;'S'
   995  00FDBA  20                 	db	32
   996  00FDBB  20                 	db	32
   997  00FDBC  20                 	db	32
   998  00FDBD  20                 	db	32
   999  00FDBE  20                 	db	32
  1000  00FDBF  20                 	db	32
  1001  00FDC0  20                 	db	32
  1002  00FDC1  20                 	db	32
  1003  00FDC2  3C                 	db	60	;'<'
  1004  00FDC3  00                 	db	0
  1005  00FDC4                     STR_34:
  1006  00FDC4  32                 	db	50	;'2'
  1007  00FDC5  2E                 	db	46
  1008  00FDC6  20                 	db	32
  1009  00FDC7  53                 	db	83	;'S'
  1010  00FDC8  4F                 	db	79	;'O'
  1011  00FDC9  52                 	db	82	;'R'
  1012  00FDCA  54                 	db	84	;'T'
  1013  00FDCB  20                 	db	32
  1014  00FDCC  20                 	db	32
  1015  00FDCD  20                 	db	32
  1016  00FDCE  20                 	db	32
  1017  00FDCF  20                 	db	32
  1018  00FDD0  20                 	db	32
  1019  00FDD1  20                 	db	32
  1020  00FDD2  20                 	db	32
  1021  00FDD3  3C                 	db	60	;'<'
  1022  00FDD4  00                 	db	0
  1023  00FDD5                     STR_31:
  1024  00FDD5  31                 	db	49	;'1'
  1025  00FDD6  2E                 	db	46
  1026  00FDD7  20                 	db	32
  1027  00FDD8  44                 	db	68	;'D'
  1028  00FDD9  41                 	db	65	;'A'
  1029  00FDDA  54                 	db	84	;'T'
  1030  00FDDB  45                 	db	69	;'E'
  1031  00FDDC  2F                 	db	47
  1032  00FDDD  54                 	db	84	;'T'
  1033  00FDDE  49                 	db	73	;'I'
  1034  00FDDF  4D                 	db	77	;'M'
  1035  00FDE0  45                 	db	69	;'E'
  1036  00FDE1  20                 	db	32
  1037  00FDE2  20                 	db	32
  1038  00FDE3  20                 	db	32
  1039  00FDE4  3C                 	db	60	;'<'
  1040  00FDE5  00                 	db	0
  1041  00FDE6                     STR_6:
  1042  00FDE6  50                 	db	80	;'P'
  1043  00FDE7  41                 	db	65	;'A'
  1044  00FDE8  55                 	db	85	;'U'
  1045  00FDE9  53                 	db	83	;'S'
  1046  00FDEA  45                 	db	69	;'E'
  1047  00FDEB  20                 	db	32
  1048  00FDEC  3C                 	db	60	;'<'
  1049  00FDED  20                 	db	32
  1050  00FDEE  7C                 	db	124
  1051  00FDEF  20                 	db	32
  1052  00FDF0  42                 	db	66	;'B'
  1053  00FDF1  41                 	db	65	;'A'
  1054  00FDF2  43                 	db	67	;'C'
  1055  00FDF3  4B                 	db	75	;'K'
  1056  00FDF4  20                 	db	32
  1057  00FDF5  3E                 	db	62	;'>'
  1058  00FDF6  00                 	db	0
  1059  00FDF7                     STR_30:
  1060  00FDF7  50                 	db	80	;'P'
  1061  00FDF8  55                 	db	85	;'U'
  1062  00FDF9  53                 	db	83	;'S'
  1063  00FDFA  48                 	db	72	;'H'
  1064  00FDFB  20                 	db	32
  1065  00FDFC  54                 	db	84	;'T'
  1066  00FDFD  4F                 	db	79	;'O'
  1067  00FDFE  20                 	db	32
  1068  00FDFF  43                 	db	67	;'C'
  1069  00FE00  4F                 	db	79	;'O'
  1070  00FE01  4E                 	db	78	;'N'
  1071  00FE02  54                 	db	84	;'T'
  1072  00FE03  49                 	db	73	;'I'
  1073  00FE04  4E                 	db	78	;'N'
  1074  00FE05  55                 	db	85	;'U'
  1075  00FE06  45                 	db	69	;'E'
  1076  00FE07  00                 	db	0
  1077  00FE08                     STR_27:
  1078  00FE08  4E                 	db	78	;'N'
  1079  00FE09  4C                 	db	76	;'L'
  1080  00FE0A  41                 	db	65	;'A'
  1081  00FE0B  42                 	db	66	;'B'
  1082  00FE0C  3A                 	db	58	;':'
  1083  00FE0D  20                 	db	32
  1084  00FE0E  25                 	db	37
  1085  00FE0F  64                 	db	100	;'d'
  1086  00FE10  7C                 	db	124
  1087  00FE11  4C                 	db	76	;'L'
  1088  00FE12  41                 	db	65	;'A'
  1089  00FE13  42                 	db	66	;'B'
  1090  00FE14  3A                 	db	58	;':'
  1091  00FE15  20                 	db	32
  1092  00FE16  25                 	db	37
  1093  00FE17  64                 	db	100	;'d'
  1094  00FE18  00                 	db	0
  1095  00FE19                     STR_25:
  1096  00FE19  4E                 	db	78	;'N'
  1097  00FE1A  54                 	db	84	;'T'
  1098  00FE1B  41                 	db	65	;'A'
  1099  00FE1C  42                 	db	66	;'B'
  1100  00FE1D  3A                 	db	58	;':'
  1101  00FE1E  20                 	db	32
  1102  00FE1F  25                 	db	37
  1103  00FE20  64                 	db	100	;'d'
  1104  00FE21  7C                 	db	124
  1105  00FE22  54                 	db	84	;'T'
  1106  00FE23  41                 	db	65	;'A'
  1107  00FE24  42                 	db	66	;'B'
  1108  00FE25  3A                 	db	58	;':'
  1109  00FE26  20                 	db	32
  1110  00FE27  25                 	db	37
  1111  00FE28  64                 	db	100	;'d'
  1112  00FE29  00                 	db	0
  1113  00FE2A                     STR_83:
  1114  00FE2A  4D                 	db	77	;'M'
  1115  00FE2B  41                 	db	65	;'A'
  1116  00FE2C  47                 	db	71	;'G'
  1117  00FE2D  5F                 	db	95	;'_'
  1118  00FE2E  73                 	db	115	;'s'
  1119  00FE2F  69                 	db	105	;'i'
  1120  00FE30  67                 	db	103	;'g'
  1121  00FE31  6E                 	db	110	;'n'
  1122  00FE32  61                 	db	97	;'a'
  1123  00FE33  6C                 	db	108	;'l'
  1124  00FE34  3A                 	db	58	;':'
  1125  00FE35  20                 	db	32
  1126  00FE36  25                 	db	37
  1127  00FE37  64                 	db	100	;'d'
  1128  00FE38  20                 	db	32
  1129  00FE39  00                 	db	0
  1130  00FE3A                     STR_103:
  1131  00FE3A  54                 	db	84	;'T'
  1132  00FE3B  53                 	db	83	;'S'
  1133  00FE3C  54                 	db	84	;'T'
  1134  00FE3D  3A                 	db	58	;':'
  1135  00FE3E  20                 	db	32
  1136  00FE3F  54                 	db	84	;'T'
  1137  00FE40  49                 	db	73	;'I'
  1138  00FE41  4C                 	db	76	;'L'
  1139  00FE42  54                 	db	84	;'T'
  1140  00FE43  20                 	db	32
  1141  00FE44  53                 	db	83	;'S'
  1142  00FE45  45                 	db	69	;'E'
  1143  00FE46  52                 	db	82	;'R'
  1144  00FE47  56                 	db	86	;'V'
  1145  00FE48  4F                 	db	79	;'O'
  1146  00FE49  00                 	db	0
  1147  00FE4A                     STR_4:
  1148  00FE4A  44                 	db	68	;'D'
  1149  00FE4B  49                 	db	73	;'I'
  1150  00FE4C  44                 	db	68	;'D'
  1151  00FE4D  4E                 	db	78	;'N'
  1152  00FE4E  27                 	db	39
  1153  00FE4F  54                 	db	84	;'T'
  1154  00FE50  20                 	db	32
  1155  00FE51  43                 	db	67	;'C'
  1156  00FE52  4F                 	db	79	;'O'
  1157  00FE53  4D                 	db	77	;'M'
  1158  00FE54  50                 	db	80	;'P'
  1159  00FE55  4C                 	db	76	;'L'
  1160  00FE56  45                 	db	69	;'E'
  1161  00FE57  54                 	db	84	;'T'
  1162  00FE58  45                 	db	69	;'E'
  1163  00FE59  00                 	db	0
  1164  00FE5A                     STR_80:
  1165  00FE5A  49                 	db	73	;'I'
  1166  00FE5B  52                 	db	82	;'R'
  1167  00FE5C  5F                 	db	95	;'_'
  1168  00FE5D  73                 	db	115	;'s'
  1169  00FE5E  69                 	db	105	;'i'
  1170  00FE5F  67                 	db	103	;'g'
  1171  00FE60  6E                 	db	110	;'n'
  1172  00FE61  61                 	db	97	;'a'
  1173  00FE62  6C                 	db	108	;'l'
  1174  00FE63  3A                 	db	58	;':'
  1175  00FE64  20                 	db	32
  1176  00FE65  25                 	db	37
  1177  00FE66  64                 	db	100	;'d'
  1178  00FE67  20                 	db	32
  1179  00FE68  00                 	db	0
  1180  00FE69                     STR_109:
  1181  00FE69  43                 	db	67	;'C'
  1182  00FE6A  41                 	db	65	;'A'
  1183  00FE6B  4D                 	db	77	;'M'
  1184  00FE6C  20                 	db	32
  1185  00FE6D  44                 	db	68	;'D'
  1186  00FE6E  57                 	db	87	;'W'
  1187  00FE6F  4E                 	db	78	;'N'
  1188  00FE70  20                 	db	32
  1189  00FE71  7C                 	db	124
  1190  00FE72  52                 	db	82	;'R'
  1191  00FE73  43                 	db	67	;'C'
  1192  00FE74  30                 	db	48	;'0'
  1193  00FE75  3D                 	db	61	;'='
  1194  00FE76  30                 	db	48	;'0'
  1195  00FE77  00                 	db	0
  1196  00FE78                     STR_108:
  1197  00FE78  43                 	db	67	;'C'
  1198  00FE79  41                 	db	65	;'A'
  1199  00FE7A  4D                 	db	77	;'M'
  1200  00FE7B  20                 	db	32
  1201  00FE7C  55                 	db	85	;'U'
  1202  00FE7D  50                 	db	80	;'P'
  1203  00FE7E  20                 	db	32
  1204  00FE7F  20                 	db	32
  1205  00FE80  7C                 	db	124
  1206  00FE81  52                 	db	82	;'R'
  1207  00FE82  43                 	db	67	;'C'
  1208  00FE83  30                 	db	48	;'0'
  1209  00FE84  3D                 	db	61	;'='
  1210  00FE85  31                 	db	49	;'1'
  1211  00FE86  00                 	db	0
  1212  00FE87                     STR_82:
  1213  00FE87  54                 	db	84	;'T'
  1214  00FE88  53                 	db	83	;'S'
  1215  00FE89  54                 	db	84	;'T'
  1216  00FE8A  3A                 	db	58	;':'
  1217  00FE8B  20                 	db	32
  1218  00FE8C  4D                 	db	77	;'M'
  1219  00FE8D  41                 	db	65	;'A'
  1220  00FE8E  47                 	db	71	;'G'
  1221  00FE8F  4E                 	db	78	;'N'
  1222  00FE90  45                 	db	69	;'E'
  1223  00FE91  54                 	db	84	;'T'
  1224  00FE92  49                 	db	73	;'I'
  1225  00FE93  53                 	db	83	;'S'
  1226  00FE94  4D                 	db	77	;'M'
  1227  00FE95  00                 	db	0
  1228  00FE96                     STR_107:
  1229  00FE96  54                 	db	84	;'T'
  1230  00FE97  53                 	db	83	;'S'
  1231  00FE98  54                 	db	84	;'T'
  1232  00FE99  3A                 	db	58	;':'
  1233  00FE9A  20                 	db	32
  1234  00FE9B  43                 	db	67	;'C'
  1235  00FE9C  41                 	db	65	;'A'
  1236  00FE9D  4D                 	db	77	;'M'
  1237  00FE9E  20                 	db	32
  1238  00FE9F  53                 	db	83	;'S'
  1239  00FEA0  45                 	db	69	;'E'
  1240  00FEA1  52                 	db	82	;'R'
  1241  00FEA2  56                 	db	86	;'V'
  1242  00FEA3  4F                 	db	79	;'O'
  1243  00FEA4  00                 	db	0
  1244  00FEA5                     STR_96:
  1245  00FEA5  54                 	db	84	;'T'
  1246  00FEA6  53                 	db	83	;'S'
  1247  00FEA7  54                 	db	84	;'T'
  1248  00FEA8  3A                 	db	58	;':'
  1249  00FEA9  20                 	db	32
  1250  00FEAA  50                 	db	80	;'P'
  1251  00FEAB  41                 	db	65	;'A'
  1252  00FEAC  4E                 	db	78	;'N'
  1253  00FEAD  20                 	db	32
  1254  00FEAE  53                 	db	83	;'S'
  1255  00FEAF  45                 	db	69	;'E'
  1256  00FEB0  52                 	db	82	;'R'
  1257  00FEB1  56                 	db	86	;'V'
  1258  00FEB2  4F                 	db	79	;'O'
  1259  00FEB3  00                 	db	0
  1260  00FEB4                     STR_75:
  1261  00FEB4  41                 	db	65	;'A'
  1262  00FEB5  4C                 	db	76	;'L'
  1263  00FEB6  47                 	db	71	;'G'
  1264  00FEB7  34                 	db	52	;'4'
  1265  00FEB8  3A                 	db	58	;':'
  1266  00FEB9  20                 	db	32
  1267  00FEBA  41                 	db	65	;'A'
  1268  00FEBB  4C                 	db	76	;'L'
  1269  00FEBC  4C                 	db	76	;'L'
  1270  00FEBD  20                 	db	32
  1271  00FEBE  43                 	db	67	;'C'
  1272  00FEBF  41                 	db	65	;'A'
  1273  00FEC0  4E                 	db	78	;'N'
  1274  00FEC1  53                 	db	83	;'S'
  1275  00FEC2  00                 	db	0
  1276  00FEC3                     STR_90:
  1277  00FEC3  54                 	db	84	;'T'
  1278  00FEC4  53                 	db	83	;'S'
  1279  00FEC5  54                 	db	84	;'T'
  1280  00FEC6  3A                 	db	58	;':'
  1281  00FEC7  20                 	db	32
  1282  00FEC8  44                 	db	68	;'D'
  1283  00FEC9  43                 	db	67	;'C'
  1284  00FECA  20                 	db	32
  1285  00FECB  4D                 	db	77	;'M'
  1286  00FECC  4F                 	db	79	;'O'
  1287  00FECD  54                 	db	84	;'T'
  1288  00FECE  4F                 	db	79	;'O'
  1289  00FECF  52                 	db	82	;'R'
  1290  00FED0  53                 	db	83	;'S'
  1291  00FED1  00                 	db	0
  1292  00FED2                     STR_70:
  1293  00FED2  41                 	db	65	;'A'
  1294  00FED3  4C                 	db	76	;'L'
  1295  00FED4  47                 	db	71	;'G'
  1296  00FED5  4F                 	db	79	;'O'
  1297  00FED6  52                 	db	82	;'R'
  1298  00FED7  49                 	db	73	;'I'
  1299  00FED8  54                 	db	84	;'T'
  1300  00FED9  48                 	db	72	;'H'
  1301  00FEDA  4D                 	db	77	;'M'
  1302  00FEDB  20                 	db	32
  1303  00FEDC  54                 	db	84	;'T'
  1304  00FEDD  45                 	db	69	;'E'
  1305  00FEDE  53                 	db	83	;'S'
  1306  00FEDF  54                 	db	84	;'T'
  1307  00FEE0  00                 	db	0
  1308  00FEE1                     STR_91:
  1309  00FEE1  50                 	db	80	;'P'
  1310  00FEE2  49                 	db	73	;'I'
  1311  00FEE3  4E                 	db	78	;'N'
  1312  00FEE4  20                 	db	32
  1313  00FEE5  52                 	db	82	;'R'
  1314  00FEE6  41                 	db	65	;'A'
  1315  00FEE7  35                 	db	53	;'5'
  1316  00FEE8  20                 	db	32
  1317  00FEE9  48                 	db	72	;'H'
  1318  00FEEA  49                 	db	73	;'I'
  1319  00FEEB  47                 	db	71	;'G'
  1320  00FEEC  48                 	db	72	;'H'
  1321  00FEED  2E                 	db	46
  1322  00FEEE  00                 	db	0
  1323  00FEEF                     STR_73:
  1324  00FEEF  41                 	db	65	;'A'
  1325  00FEF0  4C                 	db	76	;'L'
  1326  00FEF1  47                 	db	71	;'G'
  1327  00FEF2  32                 	db	50	;'2'
  1328  00FEF3  3A                 	db	58	;':'
  1329  00FEF4  20                 	db	32
  1330  00FEF5  31                 	db	49	;'1'
  1331  00FEF6  32                 	db	50	;'2'
  1332  00FEF7  20                 	db	32
  1333  00FEF8  43                 	db	67	;'C'
  1334  00FEF9  41                 	db	65	;'A'
  1335  00FEFA  4E                 	db	78	;'N'
  1336  00FEFB  53                 	db	83	;'S'
  1337  00FEFC  00                 	db	0
  1338  00FEFD                     STR_76:
  1339  00FEFD  41                 	db	65	;'A'
  1340  00FEFE  4C                 	db	76	;'L'
  1341  00FEFF  47                 	db	71	;'G'
  1342  00FF00  35                 	db	53	;'5'
  1343  00FF01  3A                 	db	58	;':'
  1344  00FF02  20                 	db	32
  1345  00FF03  4E                 	db	78	;'N'
  1346  00FF04  4F                 	db	79	;'O'
  1347  00FF05  20                 	db	32
  1348  00FF06  43                 	db	67	;'C'
  1349  00FF07  41                 	db	65	;'A'
  1350  00FF08  4E                 	db	78	;'N'
  1351  00FF09  53                 	db	83	;'S'
  1352  00FF0A  00                 	db	0
  1353  00FF0B                     STR_71:
  1354  00FF0B  50                 	db	80	;'P'
  1355  00FF0C  55                 	db	85	;'U'
  1356  00FF0D  53                 	db	83	;'S'
  1357  00FF0E  48                 	db	72	;'H'
  1358  00FF0F  20                 	db	32
  1359  00FF10  54                 	db	84	;'T'
  1360  00FF11  4F                 	db	79	;'O'
  1361  00FF12  20                 	db	32
  1362  00FF13  53                 	db	83	;'S'
  1363  00FF14  54                 	db	84	;'T'
  1364  00FF15  41                 	db	65	;'A'
  1365  00FF16  52                 	db	82	;'R'
  1366  00FF17  54                 	db	84	;'T'
  1367  00FF18  00                 	db	0
  1368  00FF19                     STR_23:
  1369  00FF19  25                 	db	37
  1370  00FF1A  64                 	db	100	;'d'
  1371  00FF1B  20                 	db	32
  1372  00FF1C  4D                 	db	77	;'M'
  1373  00FF1D  49                 	db	73	;'I'
  1374  00FF1E  4E                 	db	78	;'N'
  1375  00FF1F  20                 	db	32
  1376  00FF20  25                 	db	37
  1377  00FF21  64                 	db	100	;'d'
  1378  00FF22  20                 	db	32
  1379  00FF23  53                 	db	83	;'S'
  1380  00FF24  45                 	db	69	;'E'
  1381  00FF25  43                 	db	67	;'C'
  1382  00FF26  00                 	db	0
  1383  00FF27                     STR_2:
  1384  00FF27  54                 	db	84	;'T'
  1385  00FF28  49                 	db	73	;'I'
  1386  00FF29  4D                 	db	77	;'M'
  1387  00FF2A  45                 	db	69	;'E'
  1388  00FF2B  3A                 	db	58	;':'
  1389  00FF2C  20                 	db	32
  1390  00FF2D  25                 	db	37
  1391  00FF2E  64                 	db	100	;'d'
  1392  00FF2F  3A                 	db	58	;':'
  1393  00FF30  25                 	db	37
  1394  00FF31  30                 	db	48	;'0'
  1395  00FF32  32                 	db	50	;'2'
  1396  00FF33  64                 	db	100	;'d'
  1397  00FF34  00                 	db	0
  1398  00FF35                     STR_79:
  1399  00FF35  54                 	db	84	;'T'
  1400  00FF36  53                 	db	83	;'S'
  1401  00FF37  54                 	db	84	;'T'
  1402  00FF38  3A                 	db	58	;':'
  1403  00FF39  20                 	db	32
  1404  00FF3A  49                 	db	73	;'I'
  1405  00FF3B  52                 	db	82	;'R'
  1406  00FF3C  20                 	db	32
  1407  00FF3D  53                 	db	83	;'S'
  1408  00FF3E  4E                 	db	78	;'N'
  1409  00FF3F  53                 	db	83	;'S'
  1410  00FF40  52                 	db	82	;'R'
  1411  00FF41  00                 	db	0
  1412  00FF42                     STR_65:
  1413  00FF42  54                 	db	84	;'T'
  1414  00FF43  49                 	db	73	;'I'
  1415  00FF44  4D                 	db	77	;'M'
  1416  00FF45  45                 	db	69	;'E'
  1417  00FF46  20                 	db	32
  1418  00FF47  25                 	db	37
  1419  00FF48  64                 	db	100	;'d'
  1420  00FF49  3A                 	db	58	;':'
  1421  00FF4A  25                 	db	37
  1422  00FF4B  30                 	db	48	;'0'
  1423  00FF4C  32                 	db	50	;'2'
  1424  00FF4D  64                 	db	100	;'d'
  1425  00FF4E  00                 	db	0
  1426  00FF4F                     STR_74:
  1427  00FF4F  41                 	db	65	;'A'
  1428  00FF50  4C                 	db	76	;'L'
  1429  00FF51  47                 	db	71	;'G'
  1430  00FF52  33                 	db	51	;'3'
  1431  00FF53  3A                 	db	58	;':'
  1432  00FF54  20                 	db	32
  1433  00FF55  31                 	db	49	;'1'
  1434  00FF56  20                 	db	32
  1435  00FF57  43                 	db	67	;'C'
  1436  00FF58  41                 	db	65	;'A'
  1437  00FF59  4E                 	db	78	;'N'
  1438  00FF5A  00                 	db	0
  1439  00FF5B                     STR_93:
  1440  00FF5B  50                 	db	80	;'P'
  1441  00FF5C  49                 	db	73	;'I'
  1442  00FF5D  4E                 	db	78	;'N'
  1443  00FF5E  20                 	db	32
  1444  00FF5F  52                 	db	82	;'R'
  1445  00FF60  41                 	db	65	;'A'
  1446  00FF61  33                 	db	51	;'3'
  1447  00FF62  2E                 	db	46
  1448  00FF63  2E                 	db	46
  1449  00FF64  2E                 	db	46
  1450  00FF65  00                 	db	0
  1451  00FF66                     STR_95:
  1452  00FF66  50                 	db	80	;'P'
  1453  00FF67  49                 	db	73	;'I'
  1454  00FF68  4E                 	db	78	;'N'
  1455  00FF69  20                 	db	32
  1456  00FF6A  52                 	db	82	;'R'
  1457  00FF6B  41                 	db	65	;'A'
  1458  00FF6C  34                 	db	52	;'4'
  1459  00FF6D  2E                 	db	46
  1460  00FF6E  2E                 	db	46
  1461  00FF6F  2E                 	db	46
  1462  00FF70  00                 	db	0
  1463  00FF71                     STR_113:
  1464  00FF71  50                 	db	80	;'P'
  1465  00FF72  55                 	db	85	;'U'
  1466  00FF73  53                 	db	83	;'S'
  1467  00FF74  48                 	db	72	;'H'
  1468  00FF75  45                 	db	69	;'E'
  1469  00FF76  52                 	db	82	;'R'
  1470  00FF77  20                 	db	32
  1471  00FF78  54                 	db	84	;'T'
  1472  00FF79  53                 	db	83	;'S'
  1473  00FF7A  54                 	db	84	;'T'
  1474  00FF7B  00                 	db	0
  1475  00FF7C                     STR_64:
  1476  00FF7C  53                 	db	83	;'S'
  1477  00FF7D  4F                 	db	79	;'O'
  1478  00FF7E  52                 	db	82	;'R'
  1479  00FF7F  54                 	db	84	;'T'
  1480  00FF80  49                 	db	73	;'I'
  1481  00FF81  4E                 	db	78	;'N'
  1482  00FF82  47                 	db	71	;'G'
  1483  00FF83  2E                 	db	46
  1484  00FF84  2E                 	db	46
  1485  00FF85  2E                 	db	46
  1486  00FF86  00                 	db	0
  1487  00FF87                     STR_84:
  1488  00FF87  54                 	db	84	;'T'
  1489  00FF88  53                 	db	83	;'S'
  1490  00FF89  54                 	db	84	;'T'
  1491  00FF8A  3A                 	db	58	;':'
  1492  00FF8B  20                 	db	32
  1493  00FF8C  43                 	db	67	;'C'
  1494  00FF8D  4F                 	db	79	;'O'
  1495  00FF8E  4E                 	db	78	;'N'
  1496  00FF8F  44                 	db	68	;'D'
  1497  00FF90  00                 	db	0
  1498  00FF91                     STR_88:
  1499  00FF91  41                 	db	65	;'A'
  1500  00FF92  43                 	db	67	;'C'
  1501  00FF93  54                 	db	84	;'T'
  1502  00FF94  55                 	db	85	;'U'
  1503  00FF95  41                 	db	65	;'A'
  1504  00FF96  54                 	db	84	;'T'
  1505  00FF97  4F                 	db	79	;'O'
  1506  00FF98  52                 	db	82	;'R'
  1507  00FF99  53                 	db	83	;'S'
  1508  00FF9A  00                 	db	0
  1509  00FF9B                     STR_22:
  1510  00FF9B  44                 	db	68	;'D'
  1511  00FF9C  55                 	db	85	;'U'
  1512  00FF9D  52                 	db	82	;'R'
  1513  00FF9E  41                 	db	65	;'A'
  1514  00FF9F  54                 	db	84	;'T'
  1515  00FFA0  49                 	db	73	;'I'
  1516  00FFA1  4F                 	db	79	;'O'
  1517  00FFA2  4E                 	db	78	;'N'
  1518  00FFA3  3A                 	db	58	;':'
  1519  00FFA4  00                 	db	0
  1520  00FFA5                     STR_86:
  1521  00FFA5  43                 	db	67	;'C'
  1522  00FFA6  4F                 	db	79	;'O'
  1523  00FFA7  4E                 	db	78	;'N'
  1524  00FFA8  44                 	db	68	;'D'
  1525  00FFA9  3A                 	db	58	;':'
  1526  00FFAA  20                 	db	32
  1527  00FFAB  25                 	db	37
  1528  00FFAC  64                 	db	100	;'d'
  1529  00FFAD  00                 	db	0
  1530  00FFAE                     STR_77:
  1531  00FFAE  53                 	db	83	;'S'
  1532  00FFAF  45                 	db	69	;'E'
  1533  00FFB0  4E                 	db	78	;'N'
  1534  00FFB1  53                 	db	83	;'S'
  1535  00FFB2  4F                 	db	79	;'O'
  1536  00FFB3  52                 	db	82	;'R'
  1537  00FFB4  53                 	db	83	;'S'
  1538  00FFB5  00                 	db	0
  1539  00FFB6                     STR_126:
  1540  00FFB6  28                 	db	40
  1541  00FFB7  6E                 	db	110	;'n'
  1542  00FFB8  75                 	db	117	;'u'
  1543  00FFB9  6C                 	db	108	;'l'
  1544  00FFBA  6C                 	db	108	;'l'
  1545  00FFBB  29                 	db	41
  1546  00FFBC  00                 	db	0
  1547  00FFBD                     STR_67:
  1548  00FFBD  46                 	db	70	;'F'
  1549  00FFBE  41                 	db	65	;'A'
  1550  00FFBF  49                 	db	73	;'I'
  1551  00FFC0  4C                 	db	76	;'L'
  1552  00FFC1  45                 	db	69	;'E'
  1553  00FFC2  44                 	db	68	;'D'
  1554  00FFC3  00                 	db	0
  1555  00FFC4                     STR_7:
  1556  00FFC4  53                 	db	83	;'S'
  1557  00FFC5  54                 	db	84	;'T'
  1558  00FFC6  41                 	db	65	;'A'
  1559  00FFC7  52                 	db	82	;'R'
  1560  00FFC8  54                 	db	84	;'T'
  1561  00FFC9  3A                 	db	58	;':'
  1562  00FFCA  00                 	db	0
  1563  00FFCB                     STR_9:
  1564  00FFCB  46                 	db	70	;'F'
  1565  00FFCC  45                 	db	69	;'E'
  1566  00FFCD  42                 	db	66	;'B'
  1567  00FFCE  00                 	db	0
  1568  00FFCF                     STR_19:
  1569  00FFCF  44                 	db	68	;'D'
  1570  00FFD0  45                 	db	69	;'E'
  1571  00FFD1  43                 	db	67	;'C'
  1572  00FFD2  00                 	db	0
  1573  00FFD3                     STR_15:
  1574  00FFD3  41                 	db	65	;'A'
  1575  00FFD4  55                 	db	85	;'U'
  1576  00FFD5  47                 	db	71	;'G'
  1577  00FFD6  00                 	db	0
  1578  00FFD7                     STR_14:
  1579  00FFD7  4A                 	db	74	;'J'
  1580  00FFD8  55                 	db	85	;'U'
  1581  00FFD9  4C                 	db	76	;'L'
  1582  00FFDA  00                 	db	0
  1583  00FFDB                     STR_8:
  1584  00FFDB  4A                 	db	74	;'J'
  1585  00FFDC  41                 	db	65	;'A'
  1586  00FFDD  4E                 	db	78	;'N'
  1587  00FFDE  00                 	db	0
  1588  00FFDF                     STR_13:
  1589  00FFDF  4A                 	db	74	;'J'
  1590  00FFE0  55                 	db	85	;'U'
  1591  00FFE1  4E                 	db	78	;'N'
  1592  00FFE2  00                 	db	0
  1593  00FFE3                     STR_16:
  1594  00FFE3  53                 	db	83	;'S'
  1595  00FFE4  45                 	db	69	;'E'
  1596  00FFE5  50                 	db	80	;'P'
  1597  00FFE6  00                 	db	0
  1598  00FFE7                     STR_10:
  1599  00FFE7  4D                 	db	77	;'M'
  1600  00FFE8  41                 	db	65	;'A'
  1601  00FFE9  52                 	db	82	;'R'
  1602  00FFEA  00                 	db	0
  1603  00FFEB                     STR_11:
  1604  00FFEB  41                 	db	65	;'A'
  1605  00FFEC  50                 	db	80	;'P'
  1606  00FFED  52                 	db	82	;'R'
  1607  00FFEE  00                 	db	0
  1608  00FFEF                     STR_20:
  1609  00FFEF  45                 	db	69	;'E'
  1610  00FFF0  52                 	db	82	;'R'
  1611  00FFF1  52                 	db	82	;'R'
  1612  00FFF2  00                 	db	0
  1613  00FFF3                     STR_17:
  1614  00FFF3  4F                 	db	79	;'O'
  1615  00FFF4  43                 	db	67	;'C'
  1616  00FFF5  54                 	db	84	;'T'
  1617  00FFF6  00                 	db	0
  1618  00FFF7                     STR_18:
  1619  00FFF7  4E                 	db	78	;'N'
  1620  00FFF8  4F                 	db	79	;'O'
  1621  00FFF9  56                 	db	86	;'V'
  1622  00FFFA  00                 	db	0
  1623  00FFFB                     STR_12:
  1624  00FFFB  4D                 	db	77	;'M'
  1625  00FFFC  41                 	db	65	;'A'
  1626  00FFFD  59                 	db	89	;'Y'
  1627  00FFFE  00                 	db	0
  1628  0000                     
  1629                           ; #config settings
  1630  00FFFF  00                 	db	0	; dummy byte at the end
  1631  0000                     
  1632                           	psect	cinit
  1633  0049D4                     __pcinit:
  1634                           	opt stack 0
  1635  0049D4                     start_initialization:
  1636                           	opt stack 0
  1637  0049D4                     __initialization:
  1638                           	opt stack 0
  1639                           
  1640                           ; Initialize objects allocated to BANK1 (8 bytes)
  1641                           ; load TBLPTR registers with __pidataBANK1
  1642  0049D4  0E36               	movlw	low __pidataBANK1
  1643  0049D6  6EF6               	movwf	tblptrl,c
  1644  0049D8  0E51               	movlw	high __pidataBANK1
  1645  0049DA  6EF7               	movwf	tblptrh,c
  1646  0049DC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1647  0049DE  6EF8               	movwf	tblptru,c
  1648  0049E0  EE01  F037         	lfsr	0,__pdataBANK1
  1649  0049E4  EE10 F008          	lfsr	1,8
  1650  0049E8                     copy_data0:
  1651  0049E8  0009               	tblrd		*+
  1652  0049EA  CFF5 FFEE          	movff	tablat,postinc0
  1653  0049EE  50E5               	movf	postdec1,w,c
  1654  0049F0  50E1               	movf	fsr1l,w,c
  1655  0049F2  E1FA               	bnz	copy_data0
  1656                           
  1657                           ; Clear objects allocated to BANK1 (55 bytes)
  1658  0049F4  EE01  F000         	lfsr	0,__pbssBANK1
  1659  0049F8  0E37               	movlw	55
  1660  0049FA                     clear_0:
  1661  0049FA  6AEE               	clrf	postinc0,c
  1662  0049FC  06E8               	decf	wreg,f,c
  1663  0049FE  E1FD               	bnz	clear_0
  1664                           
  1665                           ; Clear objects allocated to BANK0 (38 bytes)
  1666  004A00  EE00  F0DA         	lfsr	0,__pbssBANK0
  1667  004A04  0E26               	movlw	38
  1668  004A06                     clear_1:
  1669  004A06  6AEE               	clrf	postinc0,c
  1670  004A08  06E8               	decf	wreg,f,c
  1671  004A0A  E1FD               	bnz	clear_1
  1672                           
  1673                           ; Clear objects allocated to COMRAM (35 bytes)
  1674  004A0C  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1675  004A10  0E23               	movlw	35
  1676  004A12                     clear_2:
  1677  004A12  6AEE               	clrf	postinc0,c
  1678  004A14  06E8               	decf	wreg,f,c
  1679  004A16  E1FD               	bnz	clear_2
  1680  004A18                     end_of_initialization:
  1681                           	opt stack 0
  1682  004A18                     __end_of__initialization:
  1683                           	opt stack 0
  1684  004A18  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1685  004A1A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1686  004A1C  0100               	movlb	0
  1687  004A1E  EF7E  F01F         	goto	_main	;jump to C main() function
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1l	equ	0xFE1
  1696                           
  1697                           	psect	bssCOMRAM
  1698  00005B                     __pbssCOMRAM:
  1699                           	opt stack 0
  1700  00005B                     _back:
  1701                           	opt stack 0
  1702  00005B                     	ds	2
  1703  00005D                     _debug:
  1704                           	opt stack 0
  1705  00005D                     	ds	2
  1706  00005F                     _down:
  1707                           	opt stack 0
  1708  00005F                     	ds	2
  1709  000061                     _enter:
  1710                           	opt stack 0
  1711  000061                     	ds	2
  1712  000063                     _f_ID_receive:
  1713                           	opt stack 0
  1714  000063                     	ds	2
  1715  000065                     _f_can_coming_to_ID:
  1716                           	opt stack 0
  1717  000065                     	ds	2
  1718  000067                     _f_can_coming_to_distribution:
  1719                           	opt stack 0
  1720  000067                     	ds	2
  1721  000069                     _f_most_recent_sort_time:
  1722                           	opt stack 0
  1723  000069                     	ds	2
  1724  00006B                     _first:
  1725                           	opt stack 0
  1726  00006B                     	ds	2
  1727  00006D                     _firstboot:
  1728                           	opt stack 0
  1729  00006D                     	ds	2
  1730  00006F                     _log_count_can_no_lab:
  1731                           	opt stack 0
  1732  00006F                     	ds	2
  1733  000071                     _log_count_can_w_lab:
  1734                           	opt stack 0
  1735  000071                     	ds	2
  1736  000073                     _log_count_total:
  1737                           	opt stack 0
  1738  000073                     	ds	2
  1739  000075                     _most_recent_sort_time:
  1740                           	opt stack 0
  1741  000075                     	ds	2
  1742  000077                     _up:
  1743                           	opt stack 0
  1744  000077                     	ds	2
  1745  000079                     _was_low_1:
  1746                           	opt stack 0
  1747  000079                     	ds	2
  1748  00007B                     _was_low_3:
  1749                           	opt stack 0
  1750  00007B                     	ds	2
  1751  00007D                     _input:
  1752                           	opt stack 0
  1753  00007D                     	ds	1
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1l	equ	0xFE1
  1762                           
  1763                           	psect	bssBANK0
  1764  0000DA                     __pbssBANK0:
  1765                           	opt stack 0
  1766  0000DA                     _sensor_outputs:
  1767                           	opt stack 0
  1768  0000DA                     	ds	4
  1769  0000DE                     _IR_signal:
  1770                           	opt stack 0
  1771  0000DE                     	ds	2
  1772  0000E0                     _MAG_signal:
  1773                           	opt stack 0
  1774  0000E0                     	ds	2
  1775  0000E2                     _RTCflag:
  1776                           	opt stack 0
  1777  0000E2                     	ds	2
  1778  0000E4                     _cur_can:
  1779                           	opt stack 0
  1780  0000E4                     	ds	2
  1781  0000E6                     _cur_state:
  1782                           	opt stack 0
  1783  0000E6                     	ds	2
  1784  0000E8                     _f_lastCan:
  1785                           	opt stack 0
  1786  0000E8                     	ds	2
  1787  0000EA                     _f_loadingNewCan:
  1788                           	opt stack 0
  1789  0000EA                     	ds	2
  1790  0000EC                     _log:
  1791                           	opt stack 0
  1792  0000EC                     	ds	2
  1793  0000EE                     _log_completion:
  1794                           	opt stack 0
  1795  0000EE                     	ds	2
  1796  0000F0                     _log_count_pop_no_tab:
  1797                           	opt stack 0
  1798  0000F0                     	ds	2
  1799  0000F2                     _log_count_pop_w_tab:
  1800                           	opt stack 0
  1801  0000F2                     	ds	2
  1802  0000F4                     _log_total_time:
  1803                           	opt stack 0
  1804  0000F4                     	ds	2
  1805  0000F6                     _logstate:
  1806                           	opt stack 0
  1807  0000F6                     	ds	2
  1808  0000F8                     _total_time:
  1809                           	opt stack 0
  1810  0000F8                     	ds	2
  1811  0000FA                     _var:
  1812                           	opt stack 0
  1813  0000FA                     	ds	2
  1814  0000FC                     _machine_state:
  1815                           	opt stack 0
  1816  0000FC                     	ds	1
  1817  0000FD                     _sel:
  1818                           	opt stack 0
  1819  0000FD                     	ds	1
  1820  0000FE                     _count_total:
  1821                           	opt stack 0
  1822  0000FE                     	ds	2
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           
  1832                           	psect	bssBANK1
  1833  000100                     __pbssBANK1:
  1834                           	opt stack 0
  1835  000100                     _log_startTime:
  1836                           	opt stack 0
  1837  000100                     	ds	14
  1838  00010E                     _startTime:
  1839                           	opt stack 0
  1840  00010E                     	ds	14
  1841  00011C                     _servoTimes:
  1842                           	opt stack 0
  1843  00011C                     	ds	8
  1844  000124                     _time:
  1845                           	opt stack 0
  1846  000124                     	ds	7
  1847  00012B                     _count_can_no_lab:
  1848                           	opt stack 0
  1849  00012B                     	ds	2
  1850  00012D                     _count_can_w_lab:
  1851                           	opt stack 0
  1852  00012D                     	ds	2
  1853  00012F                     _count_pop_no_tab:
  1854                           	opt stack 0
  1855  00012F                     	ds	2
  1856  000131                     _count_pop_w_tab:
  1857                           	opt stack 0
  1858  000131                     	ds	2
  1859  000133                     _f_can_distributed:
  1860                           	opt stack 0
  1861  000133                     	ds	2
  1862  000135                     _i:
  1863                           	opt stack 0
  1864  000135                     	ds	2
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           
  1874                           	psect	dataBANK1
  1875  000137                     __pdataBANK1:
  1876                           	opt stack 0
  1877  000137                     UI@F3228:
  1878                           	opt stack 0
  1879  000137                     	ds	4
  1880  00013B                     printRTC@F3219:
  1881                           	opt stack 0
  1882  00013B                     	ds	4
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892                           	psect	cstackBANK0
  1893  000080                     __pcstackBANK0:
  1894                           	opt stack 0
  1895  000080                     ??_delay_ms:
  1896  000080                     ??_PortTests:
  1897  000080                     ??_isdigit:
  1898  000080                     ??_readADC:
  1899  000080                     ??_I2C_Master_Wait:
  1900  000080                     ?___wmul:
  1901                           	opt stack 0
  1902  000080                     ?___awmod:
  1903                           	opt stack 0
  1904  000080                     ?___lwdiv:
  1905                           	opt stack 0
  1906  000080                     ?___lldiv:
  1907                           	opt stack 0
  1908  000080                     lcdNibble@temp:
  1909                           	opt stack 0
  1910  000080                     initTime@m:
  1911                           	opt stack 0
  1912  000080                     updateServoPosition@time_us:
  1913                           	opt stack 0
  1914  000080                     EEPROM_read@address:
  1915                           	opt stack 0
  1916  000080                     ___wmul@multiplier:
  1917                           	opt stack 0
  1918  000080                     ___awmod@dividend:
  1919                           	opt stack 0
  1920  000080                     ___lwdiv@dividend:
  1921                           	opt stack 0
  1922  000080                     strcpy@to:
  1923                           	opt stack 0
  1924  000080                     ___lldiv@dividend:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x0
  1928  000080                     	ds	1
  1929  000081                     readADC@channel:
  1930                           	opt stack 0
  1931  000081                     I2C_Master_Read@a:
  1932                           	opt stack 0
  1933  000081                     lcdNibble@data:
  1934                           	opt stack 0
  1935  000081                     initTime@h:
  1936                           	opt stack 0
  1937  000081                     delay_ms@milliseconds:
  1938                           	opt stack 0
  1939  000081                     _isdigit$1978:
  1940                           	opt stack 0
  1941  000081                     I2C_Master_Write@d:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x1
  1945  000081                     	ds	1
  1946  000082                     ??_ID:
  1947  000082                     ??_readIR:
  1948  000082                     ??_readMAG:
  1949  000082                     I2C_Master_Read@temp:
  1950                           	opt stack 0
  1951  000082                     lcdInst@data:
  1952                           	opt stack 0
  1953  000082                     putch@data:
  1954                           	opt stack 0
  1955  000082                     initTime@w:
  1956                           	opt stack 0
  1957  000082                     isdigit@c:
  1958                           	opt stack 0
  1959  000082                     updateServoPosition@timer:
  1960                           	opt stack 0
  1961  000082                     ___wmul@multiplicand:
  1962                           	opt stack 0
  1963  000082                     ___awmod@divisor:
  1964                           	opt stack 0
  1965  000082                     ___lwdiv@divisor:
  1966                           	opt stack 0
  1967  000082                     strcpy@from:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x2
  1971  000082                     	ds	1
  1972  000083                     ??_initLCD:
  1973  000083                     initTime@DD:
  1974                           	opt stack 0
  1975  000083                     getRTC@i:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x3
  1979  000083                     	ds	1
  1980  000084                     ??_updateServoPosition:
  1981  000084                     initTime@MM:
  1982                           	opt stack 0
  1983  000084                     ___awmod@counter:
  1984                           	opt stack 0
  1985  000084                     readIR@res:
  1986                           	opt stack 0
  1987  000084                     readMAG@res:
  1988                           	opt stack 0
  1989  000084                     ID@i:
  1990                           	opt stack 0
  1991  000084                     ___wmul@product:
  1992                           	opt stack 0
  1993  000084                     ___lwdiv@quotient:
  1994                           	opt stack 0
  1995  000084                     strcpy@cp:
  1996                           	opt stack 0
  1997  000084                     ___lldiv@divisor:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0x4
  2001  000084                     	ds	1
  2002  000085                     ??_initSortTimer:
  2003  000085                     initTime@YY:
  2004                           	opt stack 0
  2005  000085                     ___awmod@sign:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x5
  2009  000085                     	ds	1
  2010  000086                     ??_getIR:
  2011  000086                     ??_getMAG:
  2012  000086                     ?___awdiv:
  2013                           	opt stack 0
  2014  000086                     initTime@s:
  2015                           	opt stack 0
  2016  000086                     ___lwdiv@counter:
  2017                           	opt stack 0
  2018  000086                     ID@i_1120:
  2019                           	opt stack 0
  2020  000086                     updateServoPosition@my_time:
  2021                           	opt stack 0
  2022  000086                     ___awdiv@dividend:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x6
  2026  000086                     	ds	1
  2027  000087                     ?___lwmod:
  2028                           	opt stack 0
  2029  000087                     getIR@i:
  2030                           	opt stack 0
  2031  000087                     ___lwmod@dividend:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x7
  2035  000087                     	ds	1
  2036  000088                     ??_Distribution:
  2037  000088                     ??_initServos:
  2038  000088                     initSortTimer@i:
  2039                           	opt stack 0
  2040  000088                     ___awdiv@divisor:
  2041                           	opt stack 0
  2042  000088                     ___lldiv@quotient:
  2043                           	opt stack 0
  2044                           
  2045                           ; 4 bytes @ 0x8
  2046  000088                     	ds	1
  2047  000089                     ___lwmod@divisor:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x9
  2051  000089                     	ds	1
  2052  00008A                     ___awdiv@counter:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0xA
  2056  00008A                     	ds	1
  2057  00008B                     ___awdiv@sign:
  2058                           	opt stack 0
  2059  00008B                     ___lwmod@counter:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0xB
  2063  00008B                     	ds	1
  2064  00008C                     ___lldiv@counter:
  2065                           	opt stack 0
  2066  00008C                     ___awdiv@quotient:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0xC
  2070  00008C                     	ds	1
  2071  00008D                     I2C_Master_Init@c:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0xD
  2075  00008D                     	ds	1
  2076  00008E                     ?_printf:
  2077                           	opt stack 0
  2078  00008E                     printf@f:
  2079                           	opt stack 0
  2080                           
  2081                           ; 2 bytes @ 0xE
  2082  00008E                     	ds	3
  2083  000091                     ??_I2C_Master_Init:
  2084                           
  2085                           ; 1 bytes @ 0x11
  2086  000091                     	ds	4
  2087  000095                     ??_loadRTC:
  2088                           
  2089                           ; 1 bytes @ 0x15
  2090  000095                     	ds	1
  2091  000096                     loadRTC@i:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x16
  2095  000096                     	ds	4
  2096  00009A                     ??_printf:
  2097                           
  2098                           ; 1 bytes @ 0x1A
  2099  00009A                     	ds	4
  2100  00009E                     printf@prec:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x1E
  2104  00009E                     	ds	1
  2105  00009F                     printf@cp:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x1F
  2109  00009F                     	ds	2
  2110  0000A1                     printf@ap:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x21
  2114  0000A1                     	ds	2
  2115  0000A3                     printf@len:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x23
  2119  0000A3                     	ds	2
  2120  0000A5                     printf@val:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x25
  2124  0000A5                     	ds	2
  2125  0000A7                     printf@flag:
  2126                           	opt stack 0
  2127                           
  2128                           ; 1 bytes @ 0x27
  2129  0000A7                     	ds	1
  2130  0000A8                     printf@c:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x28
  2134  0000A8                     	ds	1
  2135  0000A9                     printf@width:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x29
  2139  0000A9                     	ds	2
  2140  0000AB                     ??_printRTC:
  2141  0000AB                     ??_algorithmTest:
  2142  0000AB                     ??_sensorTest:
  2143  0000AB                     ??_actuatorTest:
  2144  0000AB                     ??_PortTestA5:
  2145  0000AB                     ??_SpeedTest:
  2146  0000AB                     ??_PusherTest:
  2147  0000AB                     ??_BothServos:
  2148  0000AB                     ??_BlockerTest:
  2149  0000AB                     EEPROM_write@address:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x2B
  2153  0000AB                     	ds	1
  2154  0000AC                     BlockerTest@i:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x2C
  2158  0000AC                     	ds	1
  2159  0000AD                     EEPROM_write@data:
  2160                           	opt stack 0
  2161  0000AD                     actuatorTest@i_1654:
  2162                           	opt stack 0
  2163  0000AD                     sensorTest@res:
  2164                           	opt stack 0
  2165  0000AD                     PusherTest@res:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x2D
  2169  0000AD                     	ds	1
  2170  0000AE                     ??_EEPROM_write:
  2171  0000AE                     actuatorTest@i_1661:
  2172                           	opt stack 0
  2173  0000AE                     BlockerTest@cam_flag:
  2174                           	opt stack 0
  2175  0000AE                     printRTC@INT_time:
  2176                           	opt stack 0
  2177                           
  2178                           ; 14 bytes @ 0x2E
  2179  0000AE                     	ds	1
  2180  0000AF                     EEPROM_write@i:
  2181                           	opt stack 0
  2182  0000AF                     actuatorTest@i_1662:
  2183                           	opt stack 0
  2184  0000AF                     PusherTest@res_1709:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x2F
  2188  0000AF                     	ds	1
  2189  0000B0                     EEPROM_write@i_1340:
  2190                           	opt stack 0
  2191  0000B0                     actuatorTest@i_1664:
  2192                           	opt stack 0
  2193  0000B0                     BlockerTest@cond_flag:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x30
  2197  0000B0                     	ds	1
  2198  0000B1                     ??_Loading:
  2199  0000B1                     logRun@num:
  2200                           	opt stack 0
  2201  0000B1                     actuatorTest@i_1665:
  2202                           	opt stack 0
  2203  0000B1                     PusherTest@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x31
  2207  0000B1                     	ds	1
  2208  0000B2                     logRun@byte1:
  2209                           	opt stack 0
  2210  0000B2                     actuatorTest@i_1667:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x32
  2214  0000B2                     	ds	1
  2215  0000B3                     logRun@byte2:
  2216                           	opt stack 0
  2217  0000B3                     actuatorTest@i_1668:
  2218                           	opt stack 0
  2219  0000B3                     Loading@addr:
  2220                           	opt stack 0
  2221  0000B3                     PusherTest@i_1713:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x33
  2225  0000B3                     	ds	1
  2226  0000B4                     logRun@byte3:
  2227                           	opt stack 0
  2228  0000B4                     actuatorTest@i_1670:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x34
  2232  0000B4                     	ds	1
  2233  0000B5                     Loading@byte1:
  2234                           	opt stack 0
  2235  0000B5                     logRun@byte_i:
  2236                           	opt stack 0
  2237  0000B5                     actuatorTest@i_1671:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x35
  2241  0000B5                     	ds	1
  2242  0000B6                     logRun@byte11:
  2243                           	opt stack 0
  2244  0000B6                     actuatorTest@i_1673:
  2245                           	opt stack 0
  2246  0000B6                     Loading@i_1103:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x36
  2250  0000B6                     	ds	1
  2251  0000B7                     actuatorTest@i_1674:
  2252                           	opt stack 0
  2253  0000B7                     logRun@i:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x37
  2257  0000B7                     	ds	1
  2258  0000B8                     actuatorTest@i_1676:
  2259                           	opt stack 0
  2260  0000B8                     Loading@i_1104:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x38
  2264  0000B8                     	ds	1
  2265  0000B9                     actuatorTest@i_1677:
  2266                           	opt stack 0
  2267  0000B9                     logRun@addr:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x39
  2271  0000B9                     	ds	1
  2272  0000BA                     actuatorTest@i_1680:
  2273                           	opt stack 0
  2274  0000BA                     Loading@i_1106:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x3A
  2278  0000BA                     	ds	1
  2279  0000BB                     actuatorTest@i_1681:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x3B
  2283  0000BB                     	ds	1
  2284  0000BC                     actuatorTest@i_1683:
  2285                           	opt stack 0
  2286  0000BC                     printRTC@RTC_month:
  2287                           	opt stack 0
  2288  0000BC                     Loading@i_1107:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x3C
  2292  0000BC                     	ds	1
  2293  0000BD                     actuatorTest@i_1684:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x3D
  2297  0000BD                     	ds	1
  2298  0000BE                     actuatorTest@i_1686:
  2299                           	opt stack 0
  2300  0000BE                     Loading@i_1109:
  2301                           	opt stack 0
  2302  0000BE                     printRTC@month:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x3E
  2306  0000BE                     	ds	1
  2307  0000BF                     actuatorTest@i_1687:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x3F
  2311  0000BF                     	ds	1
  2312  0000C0                     actuatorTest@i_1690:
  2313                           	opt stack 0
  2314  0000C0                     Loading@j:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x40
  2318  0000C0                     	ds	1
  2319  0000C1                     actuatorTest@i_1691:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x41
  2323  0000C1                     	ds	1
  2324  0000C2                     actuatorTest@i_1693:
  2325                           	opt stack 0
  2326  0000C2                     printRTC@i:
  2327                           	opt stack 0
  2328  0000C2                     Loading@i:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x42
  2332  0000C2                     	ds	1
  2333  0000C3                     actuatorTest@i_1694:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x43
  2337  0000C3                     	ds	1
  2338  0000C4                     ??_UI:
  2339  0000C4                     actuatorTest@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x44
  2343  0000C4                     	ds	2
  2344  0000C6                     ??_Test:
  2345  0000C6                     _UI$2334:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x46
  2349  0000C6                     	ds	2
  2350  0000C8                     UI@i:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x48
  2354  0000C8                     	ds	1
  2355  0000C9                     UI@i_409:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x49
  2359  0000C9                     	ds	1
  2360  0000CA                     UI@i_412:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x4A
  2364  0000CA                     	ds	1
  2365  0000CB                     UI@i_413:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x4B
  2369  0000CB                     	ds	1
  2370  0000CC                     UI@i_431:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x4C
  2374  0000CC                     	ds	1
  2375  0000CD                     UI@i_432:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x4D
  2379  0000CD                     	ds	1
  2380  0000CE                     UI@i_435:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4E
  2384  0000CE                     	ds	1
  2385  0000CF                     UI@i_436:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x4F
  2389  0000CF                     	ds	1
  2390  0000D0                     UI@i_439:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x50
  2394  0000D0                     	ds	1
  2395  0000D1                     UI@i_440:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x51
  2399  0000D1                     	ds	1
  2400  0000D2                     UI@i_443:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x52
  2404  0000D2                     	ds	1
  2405  0000D3                     UI@i_444:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x53
  2409  0000D3                     	ds	1
  2410  0000D4                     UI@i_447:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x54
  2414  0000D4                     	ds	1
  2415  0000D5                     UI@i_448:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x55
  2419  0000D5                     	ds	1
  2420  0000D6                     UI@month:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x56
  2424  0000D6                     	ds	4
  2425  0000DA                     tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           postinc0	equ	0xFEE
  2430                           wreg	equ	0xFE8
  2431                           postdec1	equ	0xFE5
  2432                           fsr1l	equ	0xFE1
  2433                           
  2434                           ; 1 bytes @ 0x5A
  2435                           
  2436                           	psect	cstackCOMRAM
  2437  000001                     __pcstackCOMRAM:
  2438                           	opt stack 0
  2439  000001                     ??i2_I2C_Master_Wait:
  2440  000001                     ??i2_delay_ms:
  2441  000001                     ??i2_isdigit:
  2442  000001                     ?i2___wmul:
  2443                           	opt stack 0
  2444  000001                     ?i2___lwmod:
  2445                           	opt stack 0
  2446  000001                     i2lcdNibble@temp:
  2447                           	opt stack 0
  2448  000001                     i2EEPROM_read@address:
  2449                           	opt stack 0
  2450  000001                     i2___wmul@multiplier:
  2451                           	opt stack 0
  2452  000001                     i2___lwmod@dividend:
  2453                           	opt stack 0
  2454  000001                     i2strcpy@to:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x0
  2458  000001                     	ds	1
  2459  000002                     i2I2C_Master_Read@a:
  2460                           	opt stack 0
  2461  000002                     i2lcdNibble@data:
  2462                           	opt stack 0
  2463  000002                     i2delay_ms@milliseconds:
  2464                           	opt stack 0
  2465  000002                     i2_isdigit$1978:
  2466                           	opt stack 0
  2467  000002                     i2I2C_Master_Write@d:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x1
  2471  000002                     	ds	1
  2472  000003                     i2I2C_Master_Read@temp:
  2473                           	opt stack 0
  2474  000003                     i2lcdInst@data:
  2475                           	opt stack 0
  2476  000003                     i2putch@data:
  2477                           	opt stack 0
  2478  000003                     i2isdigit@c:
  2479                           	opt stack 0
  2480  000003                     i2___wmul@multiplicand:
  2481                           	opt stack 0
  2482  000003                     i2___lwmod@divisor:
  2483                           	opt stack 0
  2484  000003                     i2strcpy@from:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x2
  2488  000003                     	ds	1
  2489  000004                     i2getRTC@i:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x3
  2493  000004                     	ds	1
  2494  000005                     i2___lwmod@counter:
  2495                           	opt stack 0
  2496  000005                     i2___wmul@product:
  2497                           	opt stack 0
  2498  000005                     i2strcpy@cp:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x4
  2502  000005                     	ds	1
  2503  000006                     ?i2___lwdiv:
  2504                           	opt stack 0
  2505  000006                     i2___lwdiv@dividend:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x5
  2509  000006                     	ds	1
  2510  000007                     retrieveLog@logNum:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x6
  2514  000007                     	ds	1
  2515  000008                     i2___lwdiv@divisor:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x7
  2519  000008                     	ds	1
  2520  000009                     ??_retrieveLog:
  2521                           
  2522                           ; 1 bytes @ 0x8
  2523  000009                     	ds	1
  2524  00000A                     i2___lwdiv@quotient:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x9
  2528  00000A                     	ds	1
  2529  00000B                     retrieveLog@byte1:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0xA
  2533  00000B                     	ds	1
  2534  00000C                     retrieveLog@byte2:
  2535                           	opt stack 0
  2536  00000C                     i2___lwdiv@counter:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0xB
  2540  00000C                     	ds	1
  2541  00000D                     ?i2_printf:
  2542                           	opt stack 0
  2543  00000D                     retrieveLog@byte3:
  2544                           	opt stack 0
  2545  00000D                     i2printf@f:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0xC
  2549  00000D                     	ds	1
  2550  00000E                     retrieveLog@i:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0xD
  2554  00000E                     	ds	2
  2555  000010                     retrieveLog@addr:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0xF
  2559  000010                     	ds	2
  2560  000012                     dispLogs@myLog:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x11
  2564  000012                     	ds	2
  2565  000014                     
  2566                           ; 1 bytes @ 0x13
  2567  000014                     	ds	5
  2568  000019                     ??i2_printf:
  2569                           
  2570                           ; 1 bytes @ 0x18
  2571  000019                     	ds	4
  2572  00001D                     i2printf@prec:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x1C
  2576  00001D                     	ds	1
  2577  00001E                     i2printf@cp:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x1D
  2581  00001E                     	ds	2
  2582  000020                     i2printf@ap:
  2583                           	opt stack 0
  2584                           
  2585                           ; 2 bytes @ 0x1F
  2586  000020                     	ds	2
  2587  000022                     i2printf@len:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x21
  2591  000022                     	ds	2
  2592  000024                     i2printf@val:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x23
  2596  000024                     	ds	2
  2597  000026                     i2printf@flag:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x25
  2601  000026                     	ds	1
  2602  000027                     i2printf@c:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x26
  2606  000027                     	ds	1
  2607  000028                     i2printf@width:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x27
  2611  000028                     	ds	2
  2612  00002A                     ??_printSortTimer:
  2613  00002A                     ??i2_printRTC:
  2614  00002A                     ?_inputHandler:
  2615                           	opt stack 0
  2616                           
  2617                           ; 2 bytes @ 0x29
  2618  00002A                     	ds	2
  2619  00002C                     ??_inputHandler:
  2620                           
  2621                           ; 1 bytes @ 0x2B
  2622  00002C                     	ds	1
  2623  00002D                     printSortTimer@curTime:
  2624                           	opt stack 0
  2625  00002D                     i2printRTC@INT_time:
  2626                           	opt stack 0
  2627                           
  2628                           ; 14 bytes @ 0x2C
  2629  00002D                     	ds	14
  2630  00003B                     printSortTimer@start_sec:
  2631                           	opt stack 0
  2632  00003B                     i2printRTC@RTC_month:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x3A
  2636  00003B                     	ds	2
  2637  00003D                     printSortTimer@cur_sec:
  2638                           	opt stack 0
  2639  00003D                     i2printRTC@month:
  2640                           	opt stack 0
  2641                           
  2642                           ; 4 bytes @ 0x3C
  2643  00003D                     	ds	2
  2644  00003F                     printSortTimer@min:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x3E
  2648  00003F                     	ds	2
  2649  000041                     printSortTimer@sec:
  2650                           	opt stack 0
  2651  000041                     i2printRTC@i:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x40
  2655  000041                     	ds	2
  2656  000043                     ??_updateMenu:
  2657  000043                     _printSortTimer$2459:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x42
  2661  000043                     	ds	2
  2662  000045                     printSortTimer@timeDiff:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x44
  2666  000045                     	ds	2
  2667  000047                     printSortTimer@i_1132:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x46
  2671  000047                     	ds	2
  2672  000049                     printSortTimer@i:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x48
  2676  000049                     	ds	2
  2677  00004B                     ??_handler:
  2678                           
  2679                           ; 1 bytes @ 0x4A
  2680  00004B                     	ds	16
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           
  2690 ;;
  2691 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2692 ;;
  2693 ;; *************** function _main *****************
  2694 ;; Defined at:
  2695 ;;		line 19 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;		None
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;Total ram usage:        0 bytes
  2714 ;; Hardware stack levels required when called:   13
  2715 ;; This function calls:
  2716 ;;		_I2C_Master_Init
  2717 ;;		_Test
  2718 ;;		_UI
  2719 ;;		_initLCD
  2720 ;;		_initTime
  2721 ;;		_initUI
  2722 ;;		_logRun
  2723 ;;		_machineConfig
  2724 ;;		_sort
  2725 ;;		_stopSignals
  2726 ;; This function is called by:
  2727 ;;		Startup code after reset
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text0
  2732  003EFC                     __ptext0:
  2733                           	opt stack 0
  2734  003EFC                     _main:
  2735                           	opt stack 18
  2736                           
  2737                           ;main.c: 20: machineConfig();
  2738                           
  2739                           ;incstack = 0
  2740  003EFC  EC0D  F024         	call	_machineConfig	;wreg free
  2741                           
  2742                           ;main.c: 21: initLCD();
  2743  003F00  EC5D  F025         	call	_initLCD	;wreg free
  2744                           
  2745                           ;main.c: 24: RTCflag = 0;
  2746  003F04  0E00               	movlw	0
  2747  003F06  0100               	movlb	0	; () banked
  2748  003F08  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2749  003F0A  0E00               	movlw	0
  2750  003F0C  6FE2               	movwf	_RTCflag& (0+255),b
  2751                           
  2752                           ;main.c: 25: if(RTCflag){
  2753  003F0E  0100               	movlb	0	; () banked
  2754  003F10  51E2               	movf	_RTCflag& (0+255),w,b
  2755  003F12  0100               	movlb	0	; () banked
  2756  003F14  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2757  003F16  B4D8               	btfsc	status,2,c
  2758  003F18  D016               	goto	l8980
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2762  003F1A  0E20               	movlw	32
  2763  003F1C  0100               	movlb	0	; () banked
  2764  003F1E  6F80               	movwf	initTime@m& (0+255),b
  2765  003F20  0E15               	movlw	21
  2766  003F22  0100               	movlb	0	; () banked
  2767  003F24  6F81               	movwf	initTime@h& (0+255),b
  2768  003F26  0E04               	movlw	4
  2769  003F28  0100               	movlb	0	; () banked
  2770  003F2A  6F82               	movwf	initTime@w& (0+255),b
  2771  003F2C  0E15               	movlw	21
  2772  003F2E  0100               	movlb	0	; () banked
  2773  003F30  6F83               	movwf	initTime@DD& (0+255),b
  2774  003F32  0E03               	movlw	3
  2775  003F34  0100               	movlb	0	; () banked
  2776  003F36  6F84               	movwf	initTime@MM& (0+255),b
  2777  003F38  0E17               	movlw	23
  2778  003F3A  0100               	movlb	0	; () banked
  2779  003F3C  6F85               	movwf	initTime@YY& (0+255),b
  2780  003F3E  0E42               	movlw	66
  2781  003F40  EC10  F028         	call	_initTime
  2782                           
  2783                           ;main.c: 27: }
  2784  003F44  D00B               	goto	l8982
  2785  003F46                     l8980:
  2786                           
  2787                           ;main.c: 28: else{
  2788                           ;main.c: 29: I2C_Master_Init(10000);
  2789  003F46  0E10               	movlw	16
  2790  003F48  0100               	movlb	0	; () banked
  2791  003F4A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2792  003F4C  0E27               	movlw	39
  2793  003F4E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2794  003F50  0E00               	movlw	0
  2795  003F52  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2796  003F54  0E00               	movlw	0
  2797  003F56  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2798  003F58  ECDD  F023         	call	_I2C_Master_Init	;wreg free
  2799  003F5C                     l8982:
  2800                           
  2801                           ;main.c: 30: }
  2802                           ;main.c: 32: initUI();
  2803  003F5C  EC19  F027         	call	_initUI	;wreg free
  2804                           
  2805                           ;main.c: 33: first = 1;
  2806  003F60  0E00               	movlw	0
  2807  003F62  6E6C               	movwf	_first+1,c
  2808  003F64  0E01               	movlw	1
  2809  003F66  6E6B               	movwf	_first,c
  2810                           
  2811                           ;main.c: 44: switch(machine_state){
  2812                           
  2813                           ;main.c: 43: while(1){
  2814  003F68  D017               	goto	l9004
  2815  003F6A                     l8986:
  2816                           
  2817                           ;main.c: 46: UI();
  2818  003F6A  EC65  F004         	call	_UI	;wreg free
  2819                           
  2820                           ;main.c: 47: break;
  2821  003F6E  D014               	goto	l9004
  2822  003F70                     l8988:
  2823                           
  2824                           ;main.c: 49: sort();
  2825  003F70  ECFF  F027         	call	_sort	;wreg free
  2826                           
  2827                           ;main.c: 50: break;
  2828  003F74  D011               	goto	l9004
  2829  003F76                     l8990:
  2830                           
  2831                           ;main.c: 52: stopSignals();
  2832  003F76  EC3E  F028         	call	_stopSignals	;wreg free
  2833                           
  2834                           ;main.c: 53: logRun();
  2835  003F7A  ECE5  F01C         	call	_logRun	;wreg free
  2836                           
  2837                           ;main.c: 54: first = 1;
  2838  003F7E  0E00               	movlw	0
  2839  003F80  6E6C               	movwf	_first+1,c
  2840  003F82  0E01               	movlw	1
  2841  003F84  6E6B               	movwf	_first,c
  2842                           
  2843                           ;main.c: 55: UI();
  2844  003F86  EC65  F004         	call	_UI	;wreg free
  2845                           
  2846                           ;main.c: 56: break;
  2847  003F8A  D006               	goto	l9004
  2848  003F8C                     l8998:
  2849                           
  2850                           ;main.c: 58: Test();
  2851  003F8C  EC17  F01E         	call	_Test	;wreg free
  2852                           
  2853                           ;main.c: 59: break;
  2854  003F90  D003               	goto	l9004
  2855  003F92                     l9000:
  2856                           
  2857                           ;main.c: 61: stopSignals();
  2858  003F92  EC3E  F028         	call	_stopSignals	;wreg free
  2859  003F96                     l491:
  2860  003F96  D7FF               	goto	l491
  2861  003F98                     l9004:
  2862  003F98  0100               	movlb	0	; () banked
  2863  003F9A  51FC               	movf	_machine_state& (0+255),w,b
  2864                           
  2865                           ; Switch size 1, requested type "space"
  2866                           ; Number of cases is 5, Range of values is 0 to 4
  2867                           ; switch strategies available:
  2868                           ; Name         Instructions Cycles
  2869                           ; simple_byte           16     9 (average)
  2870                           ;	Chosen strategy is simple_byte
  2871  003F9C  0A00               	xorlw	0	; case 0
  2872  003F9E  B4D8               	btfsc	status,2,c
  2873  003FA0  D7E4               	goto	l8986
  2874  003FA2  0A01               	xorlw	1	; case 1
  2875  003FA4  B4D8               	btfsc	status,2,c
  2876  003FA6  D7E4               	goto	l8988
  2877  003FA8  0A03               	xorlw	3	; case 2
  2878  003FAA  B4D8               	btfsc	status,2,c
  2879  003FAC  D7E4               	goto	l8990
  2880  003FAE  0A01               	xorlw	1	; case 3
  2881  003FB0  B4D8               	btfsc	status,2,c
  2882  003FB2  D7EC               	goto	l8998
  2883  003FB4  0A07               	xorlw	7	; case 4
  2884  003FB6  B4D8               	btfsc	status,2,c
  2885  003FB8  D7EC               	goto	l9000
  2886                           
  2887                           ; BSR set to: 0
  2888                           
  2889                           ; BSR set to: 0
  2890  003FBA  D7EE               	goto	l9004
  2891  003FBC                     __end_of_main:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _stopSignals *****************
  2904 ;; Defined at:
  2905 ;;		line 70 in file "main.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    7
  2926 ;; This function calls:
  2927 ;;		Nothing
  2928 ;; This function is called by:
  2929 ;;		_main
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text1
  2934  00507C                     __ptext1:
  2935                           	opt stack 0
  2936  00507C                     _stopSignals:
  2937                           	opt stack 23
  2938                           
  2939                           ;main.c: 71: LATA = 0x00;
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;incstack = 0
  2943  00507C  0E00               	movlw	0
  2944  00507E  6E89               	movwf	3977,c	;volatile
  2945                           
  2946                           ;main.c: 72: LATB = 0x00;
  2947  005080  0E00               	movlw	0
  2948  005082  6E8A               	movwf	3978,c	;volatile
  2949                           
  2950                           ;main.c: 73: LATC = 0x00;
  2951  005084  0E00               	movlw	0
  2952  005086  6E8B               	movwf	3979,c	;volatile
  2953                           
  2954                           ;main.c: 74: LATD = 0x00;
  2955  005088  0E00               	movlw	0
  2956  00508A  6E8C               	movwf	3980,c	;volatile
  2957                           
  2958                           ;main.c: 75: LATE = 0x00;
  2959  00508C  0E00               	movlw	0
  2960  00508E  6E8D               	movwf	3981,c	;volatile
  2961                           
  2962                           ;main.c: 76: TMR1ON = 0;
  2963  005090  90CD               	bcf	4045,0,c	;volatile
  2964                           
  2965                           ;main.c: 77: TMR3ON = 0;
  2966  005092  90B1               	bcf	4017,0,c	;volatile
  2967  005094  0012               	return		;funcret
  2968  005096                     __end_of_stopSignals:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           postdec1	equ	0xFE5
  2977                           fsr1l	equ	0xFE1
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _sort *****************
  2981 ;; Defined at:
  2982 ;;		line 58 in file "sort.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;Total ram usage:        0 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:   12
  3003 ;; This function calls:
  3004 ;;		_Distribution
  3005 ;;		_ID
  3006 ;;		_Loading
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text2
  3013  004FFE                     __ptext2:
  3014                           	opt stack 0
  3015  004FFE                     _sort:
  3016                           	opt stack 18
  3017                           
  3018                           ;sort.c: 59: if(machine_state == Sorting_state){
  3019                           
  3020                           ;incstack = 0
  3021  004FFE  0100               	movlb	0	; () banked
  3022  005000  05FC               	decf	_machine_state& (0+255),w,b
  3023  005002  B4D8               	btfsc	status,2,c
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;sort.c: 60: Loading();
  3027  005004  ECB8  F008         	call	_Loading	;wreg free
  3028                           
  3029                           ;sort.c: 61: }
  3030                           ;sort.c: 62: if(machine_state == Sorting_state){
  3031  005008  0100               	movlb	0	; () banked
  3032  00500A  05FC               	decf	_machine_state& (0+255),w,b
  3033  00500C  B4D8               	btfsc	status,2,c
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;sort.c: 63: ID();
  3037  00500E  EC4D  F018         	call	_ID	;wreg free
  3038                           
  3039                           ;sort.c: 64: }
  3040                           ;sort.c: 65: if(machine_state == Sorting_state){
  3041  005012  0100               	movlb	0	; () banked
  3042  005014  05FC               	decf	_machine_state& (0+255),w,b
  3043  005016  A4D8               	btfss	status,2,c
  3044  005018  0012               	return	
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;sort.c: 66: Distribution();
  3048  00501A  EC62  F019         	call	_Distribution	;wreg free
  3049  00501E  0012               	return	
  3050  005020                     __end_of_sort:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1l	equ	0xFE1
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _Loading *****************
  3063 ;; Defined at:
  3064 ;;		line 70 in file "sort.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  i               2   62[BANK0 ] int 
  3069 ;;  i               2   60[BANK0 ] int 
  3070 ;;  i               2   58[BANK0 ] int 
  3071 ;;  i               2   56[BANK0 ] int 
  3072 ;;  i               2   54[BANK0 ] int 
  3073 ;;  j               2   64[BANK0 ] int 
  3074 ;;  i               2   66[BANK0 ] int 
  3075 ;;  addr            2   51[BANK0 ] unsigned short 
  3076 ;;  byte1           1   53[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;Total ram usage:       19 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:   11
  3093 ;; This function calls:
  3094 ;;		_EEPROM_read
  3095 ;;		_EEPROM_write
  3096 ;;		_delay_ms
  3097 ;;		_getIR
  3098 ;;		_getMAG
  3099 ;;		_initGlobalVars
  3100 ;;		_initServos
  3101 ;;		_initSortTimer
  3102 ;;		_lcdInst
  3103 ;;		_readIR
  3104 ;; This function is called by:
  3105 ;;		_sort
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text3
  3110  001170                     __ptext3:
  3111                           	opt stack 0
  3112  001170                     _Loading:
  3113                           	opt stack 18
  3114                           
  3115                           ;sort.c: 71: if(first){
  3116                           
  3117                           ;incstack = 0
  3118  001170  506B               	movf	_first,w,c
  3119  001172  106C               	iorwf	_first+1,w,c
  3120  001174  B4D8               	btfsc	status,2,c
  3121  001176  D066               	goto	l6954
  3122                           
  3123                           ;sort.c: 72: initGlobalVars();
  3124  001178  EC4E  F022         	call	_initGlobalVars	;wreg free
  3125                           
  3126                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3127  00117C  0E01               	movlw	1
  3128  00117E  EC7D  F028         	call	_lcdInst
  3129  001182  0E68               	movlw	104
  3130  001184  0100               	movlb	0	; () banked
  3131  001186  6FB1               	movwf	??_Loading& (0+255),b
  3132  001188  0EE4               	movlw	228
  3133  00118A                     u8377:
  3134  00118A  2EE8               	decfsz	wreg,f,c
  3135  00118C  D7FE               	bra	u8377
  3136  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3137  001190  D7FC               	bra	u8377
  3138  001192  F000               	nop	
  3139                           
  3140                           ;sort.c: 74: initSortTimer();
  3141  001194  EC9B  F020         	call	_initSortTimer	;wreg free
  3142                           
  3143                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3144  001198  8A8B               	bsf	3979,5,c	;volatile
  3145                           
  3146                           ;sort.c: 80: sel = EEPROM_read(0);
  3147  00119A  0E00               	movlw	0
  3148  00119C  0100               	movlb	0	; () banked
  3149  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3150  0011A0  0E00               	movlw	0
  3151  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3152  0011A4  EC4B  F028         	call	_EEPROM_read	;wreg free
  3153  0011A8  0100               	movlb	0	; () banked
  3154  0011AA  6FFD               	movwf	_sel& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3158  0011AC  0100               	movlb	0	; () banked
  3159  0011AE  51FD               	movf	_sel& (0+255),w,b
  3160  0011B0  0D0B               	mullw	11
  3161  0011B2  0E01               	movlw	1
  3162  0011B4  24F3               	addwf	prodl,w,c
  3163  0011B6  0100               	movlb	0	; () banked
  3164  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3165  0011BA  0E00               	movlw	0
  3166  0011BC  20F4               	addwfc	prodh,w,c
  3167  0011BE  0100               	movlb	0	; () banked
  3168  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3172  0011C2  0E7F               	movlw	127
  3173  0011C4  0100               	movlb	0	; () banked
  3174  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3178  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3179  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3180  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3181  0011D4  ECA1  F01E         	call	_EEPROM_write	;wreg free
  3182                           
  3183                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3184  0011D8  9A89               	bcf	3977,5,c	;volatile
  3185                           
  3186                           ;sort.c: 88: for(int i=0; i<46; i++){
  3187  0011DA  0E00               	movlw	0
  3188  0011DC  0100               	movlb	0	; () banked
  3189  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3190  0011E0  0E00               	movlw	0
  3191  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3192                           
  3193                           ; BSR set to: 0
  3194  0011E4  0100               	movlb	0	; () banked
  3195  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3196  0011E8  D008               	goto	l6944
  3197  0011EA  0100               	movlb	0	; () banked
  3198  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3199  0011EE  E126               	bnz	l740
  3200  0011F0  0E2E               	movlw	46
  3201  0011F2  0100               	movlb	0	; () banked
  3202  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3203  0011F6  B0D8               	btfsc	status,0,c
  3204  0011F8  D021               	goto	l740
  3205  0011FA                     l6944:
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3209  0011FA  BA89               	btfsc	3977,5,c	;volatile
  3210  0011FC  D004               	goto	u5500
  3211  0011FE  0100               	movlb	0	; () banked
  3212  001200  6BB1               	clrf	??_Loading& (0+255),b
  3213  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3214  001204  D002               	goto	u5518
  3215  001206                     u5500:
  3216  001206  0100               	movlb	0	; () banked
  3217  001208  6BB1               	clrf	??_Loading& (0+255),b
  3218  00120A                     u5518:
  3219  00120A  0100               	movlb	0	; () banked
  3220  00120C  3BB1               	swapf	??_Loading& (0+255),f,b
  3221  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3222  001210  5089               	movf	3977,w,c	;volatile
  3223  001212  0100               	movlb	0	; () banked
  3224  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3225  001216  0BDF               	andlw	-33
  3226  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3227  00121A  6E89               	movwf	3977,c	;volatile
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 90: delay_ms(45-i);
  3231  00121C  0100               	movlb	0	; () banked
  3232  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3233  001220  0800               	sublw	0
  3234  001222  0F2D               	addlw	45
  3235  001224  EC9F  F027         	call	_delay_ms
  3236  001228  0100               	movlb	0	; () banked
  3237  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3238  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241  00122E  0100               	movlb	0	; () banked
  3242  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3243  001232  D7E3               	goto	l6944
  3244  001234  0100               	movlb	0	; () banked
  3245  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3246  001238  E101               	bnz	u5520
  3247  00123A  D7DA               	goto	L1
  3248  00123C                     u5520:
  3249  00123C                     l740:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;sort.c: 91: }
  3253                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3254  00123C  8A89               	bsf	3977,5,c	;volatile
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sort.c: 95: initServos();
  3258  00123E  EC69  F024         	call	_initServos	;wreg free
  3259                           
  3260                           ;sort.c: 96: }
  3261  001242  0012               	return	
  3262  001244                     l6954:
  3263                           
  3264                           ;sort.c: 97: else{
  3265                           ;sort.c: 100: if(!f_loadingNewCan){
  3266  001244  0100               	movlb	0	; () banked
  3267  001246  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3268  001248  0100               	movlb	0	; () banked
  3269  00124A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3270  00124C  A4D8               	btfss	status,2,c
  3271  00124E  D018               	goto	l6970
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;sort.c: 102: getIR();
  3275  001250  EC06  F023         	call	_getIR	;wreg free
  3276                           
  3277                           ;sort.c: 104: if(!f_loadingNewCan){
  3278  001254  0100               	movlb	0	; () banked
  3279  001256  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3280  001258  0100               	movlb	0	; () banked
  3281  00125A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3282  00125C  B4D8               	btfsc	status,2,c
  3283  00125E  0012               	return	
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 108: else{
  3287                           ;sort.c: 109: count_total++;
  3288                           
  3289                           ; BSR set to: 0
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 106: }
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 105: return;
  3296  001260  0100               	movlb	0	; () banked
  3297  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3298  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;sort.c: 110: if(count_total == 12){
  3302  001266  0E0C               	movlw	12
  3303  001268  0100               	movlb	0	; () banked
  3304  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3305  00126C  0100               	movlb	0	; () banked
  3306  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3307  001270  A4D8               	btfss	status,2,c
  3308  001272  0012               	return	
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;sort.c: 111: f_lastCan = 1;
  3312  001274  0E00               	movlw	0
  3313  001276  0100               	movlb	0	; () banked
  3314  001278  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3315  00127A  0E01               	movlw	1
  3316  00127C  6FE8               	movwf	_f_lastCan& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 112: }
  3320                           ;sort.c: 113: }
  3321                           ;sort.c: 114: }
  3322                           
  3323                           ; BSR set to: 0
  3324  00127E  0012               	return	
  3325  001280                     l6970:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;sort.c: 117: else if(f_ID_receive){
  3329  001280  5063               	movf	_f_ID_receive,w,c
  3330  001282  1064               	iorwf	_f_ID_receive+1,w,c
  3331  001284  B4D8               	btfsc	status,2,c
  3332  001286  0012               	return	
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;sort.c: 118: f_loadingNewCan = 0;
  3336  001288  0E00               	movlw	0
  3337  00128A  0100               	movlb	0	; () banked
  3338  00128C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3339  00128E  0E00               	movlw	0
  3340  001290  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 119: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3344  001292  0E3D               	movlw	61
  3345  001294  0100               	movlb	0	; () banked
  3346  001296  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3347  001298  0EE1               	movlw	225
  3348  00129A  0100               	movlb	0	; () banked
  3349  00129C  6FB1               	movwf	??_Loading& (0+255),b
  3350  00129E  0E3F               	movlw	63
  3351  0012A0                     u8387:
  3352  0012A0  2EE8               	decfsz	wreg,f,c
  3353  0012A2  D7FE               	bra	u8387
  3354  0012A4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3355  0012A6  D7FC               	bra	u8387
  3356  0012A8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3357  0012AA  D7FA               	bra	u8387
  3358  0012AC  D000               	nop2	
  3359                           
  3360                           ;sort.c: 120: LATAbits.LATA5 = 0;
  3361  0012AE  9A89               	bcf	3977,5,c	;volatile
  3362                           
  3363                           ;sort.c: 124: getMAG();
  3364  0012B0  EC0F  F026         	call	_getMAG	;wreg free
  3365                           
  3366                           ;sort.c: 125: sensor_outputs[0] = MAG_signal;
  3367  0012B4  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3368  0012B8  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3369                           
  3370                           ;sort.c: 127: if(sensor_outputs[0]){
  3371  0012BC  0100               	movlb	0	; () banked
  3372  0012BE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3373  0012C0  0100               	movlb	0	; () banked
  3374  0012C2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3375  0012C4  B4D8               	btfsc	status,2,c
  3376  0012C6  D01D               	goto	l6996
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sort.c: 128: for(int i = 0; i<2500; i++){
  3380  0012C8  0E00               	movlw	0
  3381  0012CA  0100               	movlb	0	; () banked
  3382  0012CC  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3383  0012CE  0E00               	movlw	0
  3384  0012D0  6FB6               	movwf	Loading@i_1103& (0+255),b
  3385  0012D2                     l6986:
  3386                           
  3387                           ; BSR set to: 0
  3388  0012D2  0100               	movlb	0	; () banked
  3389  0012D4  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3390  0012D6  D008               	goto	l750
  3391  0012D8  0EC4               	movlw	196
  3392  0012DA  0100               	movlb	0	; () banked
  3393  0012DC  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3394  0012DE  0E09               	movlw	9
  3395  0012E0  0100               	movlb	0	; () banked
  3396  0012E2  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3397  0012E4  B0D8               	btfsc	status,0,c
  3398  0012E6  D02A               	goto	l7008
  3399  0012E8                     l750:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3403  0012E8  8889               	bsf	3977,4,c	;volatile
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;sort.c: 130: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3407  0012EA  0EC8               	movlw	200
  3408  0012EC                     u8397:
  3409  0012EC  2EE8               	decfsz	wreg,f,c
  3410  0012EE  D7FE               	bra	u8397
  3411                           
  3412                           ;sort.c: 131: LATAbits.LATA4 = 0;
  3413  0012F0  9889               	bcf	3977,4,c	;volatile
  3414                           
  3415                           ;sort.c: 132: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3416  0012F2  0E42               	movlw	66
  3417  0012F4                     u8407:
  3418  0012F4  2EE8               	decfsz	wreg,f,c
  3419  0012F6  D7FE               	bra	u8407
  3420  0012F8  D000               	nop2	
  3421  0012FA  0100               	movlb	0	; () banked
  3422  0012FC  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3423  0012FE  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3424  001300  D7E8               	goto	l6986
  3425  001302                     l6996:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;sort.c: 135: else{
  3429                           ;sort.c: 136: for(int i = 0; i<2500; i++){
  3430  001302  0E00               	movlw	0
  3431  001304  0100               	movlb	0	; () banked
  3432  001306  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3433  001308  0E00               	movlw	0
  3434  00130A  6FB8               	movwf	Loading@i_1104& (0+255),b
  3435  00130C                     l6998:
  3436                           
  3437                           ; BSR set to: 0
  3438  00130C  0100               	movlb	0	; () banked
  3439  00130E  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3440  001310  D008               	goto	l753
  3441  001312  0EC4               	movlw	196
  3442  001314  0100               	movlb	0	; () banked
  3443  001316  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3444  001318  0E09               	movlw	9
  3445  00131A  0100               	movlb	0	; () banked
  3446  00131C  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3447  00131E  B0D8               	btfsc	status,0,c
  3448  001320  D00D               	goto	l7008
  3449  001322                     l753:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;sort.c: 137: LATAbits.LATA4 = 1;
  3453  001322  8889               	bsf	3977,4,c	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;sort.c: 138: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3457  001324  0E9A               	movlw	154
  3458  001326                     u8417:
  3459  001326  2EE8               	decfsz	wreg,f,c
  3460  001328  D7FE               	bra	u8417
  3461  00132A  D000               	nop2	
  3462                           
  3463                           ;sort.c: 139: LATAbits.LATA4 = 0;
  3464  00132C  9889               	bcf	3977,4,c	;volatile
  3465                           
  3466                           ;sort.c: 140: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3467  00132E  0E70               	movlw	112
  3468  001330                     u8427:
  3469  001330  2EE8               	decfsz	wreg,f,c
  3470  001332  D7FE               	bra	u8427
  3471  001334  0100               	movlb	0	; () banked
  3472  001336  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3473  001338  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3474  00133A  D7E8               	goto	l6998
  3475  00133C                     l7008:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 141: }
  3479                           ;sort.c: 142: }
  3480                           ;sort.c: 144: _delay((unsigned long)((350)*(32000000/4000.0)));
  3481  00133C  0E0F               	movlw	15
  3482  00133E  0100               	movlb	0	; () banked
  3483  001340  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3484  001342  0E35               	movlw	53
  3485  001344  0100               	movlb	0	; () banked
  3486  001346  6FB1               	movwf	??_Loading& (0+255),b
  3487  001348  0E51               	movlw	81
  3488  00134A                     u8437:
  3489  00134A  2EE8               	decfsz	wreg,f,c
  3490  00134C  D7FE               	bra	u8437
  3491  00134E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3492  001350  D7FC               	bra	u8437
  3493  001352  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3494  001354  D7FA               	bra	u8437
  3495                           
  3496                           ;sort.c: 146: readIR();
  3497  001356  EC11  F025         	call	_readIR	;wreg free
  3498                           
  3499                           ;sort.c: 147: if(IR_signal==1){
  3500  00135A  0100               	movlb	0	; () banked
  3501  00135C  05DE               	decf	_IR_signal& (0+255),w,b
  3502  00135E  0100               	movlb	0	; () banked
  3503  001360  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3504  001362  A4D8               	btfss	status,2,c
  3505  001364  D12C               	goto	l7114
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;sort.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  3509  001366  0E05               	movlw	5
  3510  001368  0100               	movlb	0	; () banked
  3511  00136A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3512  00136C  0E0F               	movlw	15
  3513  00136E  0100               	movlb	0	; () banked
  3514  001370  6FB1               	movwf	??_Loading& (0+255),b
  3515  001372  0EF1               	movlw	241
  3516  001374                     u8447:
  3517  001374  2EE8               	decfsz	wreg,f,c
  3518  001376  D7FE               	bra	u8447
  3519  001378  2FB1               	decfsz	??_Loading& (0+255),f,b
  3520  00137A  D7FC               	bra	u8447
  3521  00137C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3522  00137E  D7FA               	bra	u8447
  3523                           
  3524                           ;sort.c: 149: readIR();
  3525  001380  EC11  F025         	call	_readIR	;wreg free
  3526                           
  3527                           ;sort.c: 150: if(IR_signal==1){
  3528  001384  0100               	movlb	0	; () banked
  3529  001386  05DE               	decf	_IR_signal& (0+255),w,b
  3530  001388  0100               	movlb	0	; () banked
  3531  00138A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3532  00138C  A4D8               	btfss	status,2,c
  3533  00138E  D040               	goto	l7046
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;sort.c: 151: if(sensor_outputs[0]){
  3537  001390  0100               	movlb	0	; () banked
  3538  001392  51DA               	movf	_sensor_outputs& (0+255),w,b
  3539  001394  0100               	movlb	0	; () banked
  3540  001396  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3541  001398  B4D8               	btfsc	status,2,c
  3542  00139A  D01D               	goto	l7034
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;sort.c: 152: for(int i = 0; i<2500; i++){
  3546  00139C  0E00               	movlw	0
  3547  00139E  0100               	movlb	0	; () banked
  3548  0013A0  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3549  0013A2  0E00               	movlw	0
  3550  0013A4  6FBA               	movwf	Loading@i_1106& (0+255),b
  3551  0013A6                     l7024:
  3552                           
  3553                           ; BSR set to: 0
  3554  0013A6  0100               	movlb	0	; () banked
  3555  0013A8  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3556  0013AA  D008               	goto	l758
  3557  0013AC  0EC4               	movlw	196
  3558  0013AE  0100               	movlb	0	; () banked
  3559  0013B0  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3560  0013B2  0E09               	movlw	9
  3561  0013B4  0100               	movlb	0	; () banked
  3562  0013B6  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3563  0013B8  B0D8               	btfsc	status,0,c
  3564  0013BA  D02A               	goto	l7046
  3565  0013BC                     l758:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3569  0013BC  8889               	bsf	3977,4,c	;volatile
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3573  0013BE  0EC8               	movlw	200
  3574  0013C0                     u8457:
  3575  0013C0  2EE8               	decfsz	wreg,f,c
  3576  0013C2  D7FE               	bra	u8457
  3577                           
  3578                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3579  0013C4  9889               	bcf	3977,4,c	;volatile
  3580                           
  3581                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3582  0013C6  0E42               	movlw	66
  3583  0013C8                     u8467:
  3584  0013C8  2EE8               	decfsz	wreg,f,c
  3585  0013CA  D7FE               	bra	u8467
  3586  0013CC  D000               	nop2	
  3587  0013CE  0100               	movlb	0	; () banked
  3588  0013D0  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3589  0013D2  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3590  0013D4  D7E8               	goto	l7024
  3591  0013D6                     l7034:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;sort.c: 159: else{
  3595                           ;sort.c: 160: for(int i = 0; i<2500; i++){
  3596  0013D6  0E00               	movlw	0
  3597  0013D8  0100               	movlb	0	; () banked
  3598  0013DA  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3599  0013DC  0E00               	movlw	0
  3600  0013DE  6FBC               	movwf	Loading@i_1107& (0+255),b
  3601  0013E0                     l7036:
  3602                           
  3603                           ; BSR set to: 0
  3604  0013E0  0100               	movlb	0	; () banked
  3605  0013E2  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3606  0013E4  D008               	goto	l761
  3607  0013E6  0EC4               	movlw	196
  3608  0013E8  0100               	movlb	0	; () banked
  3609  0013EA  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3610  0013EC  0E09               	movlw	9
  3611  0013EE  0100               	movlb	0	; () banked
  3612  0013F0  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3613  0013F2  B0D8               	btfsc	status,0,c
  3614  0013F4  D00D               	goto	l7046
  3615  0013F6                     l761:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3619  0013F6  8889               	bsf	3977,4,c	;volatile
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3623  0013F8  0E9A               	movlw	154
  3624  0013FA                     u8477:
  3625  0013FA  2EE8               	decfsz	wreg,f,c
  3626  0013FC  D7FE               	bra	u8477
  3627  0013FE  D000               	nop2	
  3628                           
  3629                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3630  001400  9889               	bcf	3977,4,c	;volatile
  3631                           
  3632                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3633  001402  0E70               	movlw	112
  3634  001404                     u8487:
  3635  001404  2EE8               	decfsz	wreg,f,c
  3636  001406  D7FE               	bra	u8487
  3637  001408  0100               	movlb	0	; () banked
  3638  00140A  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3639  00140C  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3640  00140E  D7E8               	goto	l7036
  3641  001410                     l7046:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;sort.c: 165: }
  3645                           ;sort.c: 166: }
  3646                           ;sort.c: 167: }
  3647                           ;sort.c: 169: _delay((unsigned long)((350)*(32000000/4000.0)));
  3648  001410  0E0F               	movlw	15
  3649  001412  0100               	movlb	0	; () banked
  3650  001414  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3651  001416  0E35               	movlw	53
  3652  001418  0100               	movlb	0	; () banked
  3653  00141A  6FB1               	movwf	??_Loading& (0+255),b
  3654  00141C  0E51               	movlw	81
  3655  00141E                     u8497:
  3656  00141E  2EE8               	decfsz	wreg,f,c
  3657  001420  D7FE               	bra	u8497
  3658  001422  2FB1               	decfsz	??_Loading& (0+255),f,b
  3659  001424  D7FC               	bra	u8497
  3660  001426  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3661  001428  D7FA               	bra	u8497
  3662                           
  3663                           ;sort.c: 171: int j = 1;
  3664  00142A  0E00               	movlw	0
  3665  00142C  0100               	movlb	0	; () banked
  3666  00142E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3667  001430  0E01               	movlw	1
  3668  001432  6FC0               	movwf	Loading@j& (0+255),b
  3669                           
  3670                           ;sort.c: 172: while(IR_signal == 1){
  3671  001434  D0BD               	goto	l7112
  3672  001436                     l7050:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;sort.c: 173: readIR();
  3676  001436  EC11  F025         	call	_readIR	;wreg free
  3677                           
  3678                           ;sort.c: 174: if(j == 10){
  3679  00143A  0E0A               	movlw	10
  3680  00143C  0100               	movlb	0	; () banked
  3681  00143E  19C0               	xorwf	Loading@j& (0+255),w,b
  3682  001440  0100               	movlb	0	; () banked
  3683  001442  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3684  001444  A4D8               	btfss	status,2,c
  3685  001446  D016               	goto	l7058
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 175: LATAbits.LATA5 = !LATAbits.LATA5;
  3689  001448  BA89               	btfsc	3977,5,c	;volatile
  3690  00144A  D004               	goto	u5700
  3691  00144C  0100               	movlb	0	; () banked
  3692  00144E  6BB1               	clrf	??_Loading& (0+255),b
  3693  001450  2BB1               	incf	??_Loading& (0+255),f,b
  3694  001452  D002               	goto	u5718
  3695  001454                     u5700:
  3696  001454  0100               	movlb	0	; () banked
  3697  001456  6BB1               	clrf	??_Loading& (0+255),b
  3698  001458                     u5718:
  3699  001458  0100               	movlb	0	; () banked
  3700  00145A  3BB1               	swapf	??_Loading& (0+255),f,b
  3701  00145C  47B1               	rlncf	??_Loading& (0+255),f,b
  3702  00145E  5089               	movf	3977,w,c	;volatile
  3703  001460  0100               	movlb	0	; () banked
  3704  001462  19B1               	xorwf	??_Loading& (0+255),w,b
  3705  001464  0BDF               	andlw	-33
  3706  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3707  001468  6E89               	movwf	3977,c	;volatile
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;sort.c: 176: j = 0;
  3711  00146A  0E00               	movlw	0
  3712  00146C  0100               	movlb	0	; () banked
  3713  00146E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3714  001470  0E00               	movlw	0
  3715  001472  6FC0               	movwf	Loading@j& (0+255),b
  3716  001474                     l7058:
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 177: }
  3720                           ;sort.c: 178: if(IR_signal==1){
  3721  001474  0100               	movlb	0	; () banked
  3722  001476  05DE               	decf	_IR_signal& (0+255),w,b
  3723  001478  0100               	movlb	0	; () banked
  3724  00147A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3725  00147C  A4D8               	btfss	status,2,c
  3726  00147E  D098               	goto	l7112
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3730  001480  0E0F               	movlw	15
  3731  001482  0100               	movlb	0	; () banked
  3732  001484  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3733  001486  0E35               	movlw	53
  3734  001488  0100               	movlb	0	; () banked
  3735  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3736  00148C  0E51               	movlw	81
  3737  00148E                     u8507:
  3738  00148E  2EE8               	decfsz	wreg,f,c
  3739  001490  D7FE               	bra	u8507
  3740  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3741  001494  D7FC               	bra	u8507
  3742  001496  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3743  001498  D7FA               	bra	u8507
  3744                           
  3745                           ;sort.c: 180: readIR();
  3746  00149A  EC11  F025         	call	_readIR	;wreg free
  3747                           
  3748                           ;sort.c: 181: if(IR_signal==1){
  3749  00149E  0100               	movlb	0	; () banked
  3750  0014A0  05DE               	decf	_IR_signal& (0+255),w,b
  3751  0014A2  0100               	movlb	0	; () banked
  3752  0014A4  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3753  0014A6  A4D8               	btfss	status,2,c
  3754  0014A8  D07F               	goto	l767
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;sort.c: 182: if(sensor_outputs[0]){
  3758  0014AA  0100               	movlb	0	; () banked
  3759  0014AC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3760  0014AE  0100               	movlb	0	; () banked
  3761  0014B0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3762  0014B2  B4D8               	btfsc	status,2,c
  3763  0014B4  D011               	goto	l7074
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;sort.c: 183: LATAbits.LATA4 = 1;
  3767  0014B6  8889               	bsf	3977,4,c	;volatile
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 184: _delay((unsigned long)((250)*(32000000/4000.0)));
  3771  0014B8  0E0B               	movlw	11
  3772  0014BA  0100               	movlb	0	; () banked
  3773  0014BC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3774  0014BE  0E26               	movlw	38
  3775  0014C0  0100               	movlb	0	; () banked
  3776  0014C2  6FB1               	movwf	??_Loading& (0+255),b
  3777  0014C4  0E5D               	movlw	93
  3778  0014C6                     u8517:
  3779  0014C6  2EE8               	decfsz	wreg,f,c
  3780  0014C8  D7FE               	bra	u8517
  3781  0014CA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3782  0014CC  D7FC               	bra	u8517
  3783  0014CE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3784  0014D0  D7FA               	bra	u8517
  3785  0014D2  D000               	nop2	
  3786                           
  3787                           ;sort.c: 185: LATAbits.LATA4 = 0;
  3788  0014D4  9889               	bcf	3977,4,c	;volatile
  3789                           
  3790                           ;sort.c: 186: }
  3791  0014D6  D068               	goto	l767
  3792  0014D8                     l7074:
  3793                           
  3794                           ;sort.c: 187: else{
  3795                           ;sort.c: 188: for(int i = 0; i<2500; i++){
  3796  0014D8  0E00               	movlw	0
  3797  0014DA  0100               	movlb	0	; () banked
  3798  0014DC  6FBF               	movwf	(Loading@i_1109+1)& (0+255),b
  3799  0014DE  0E00               	movlw	0
  3800  0014E0  6FBE               	movwf	Loading@i_1109& (0+255),b
  3801  0014E2                     l7076:
  3802                           
  3803                           ; BSR set to: 0
  3804  0014E2  0100               	movlb	0	; () banked
  3805  0014E4  BFBF               	btfsc	(Loading@i_1109+1)& (0+255),7,b
  3806  0014E6  D041               	goto	l7104
  3807  0014E8  0EC4               	movlw	196
  3808  0014EA  0100               	movlb	0	; () banked
  3809  0014EC  5DBE               	subwf	Loading@i_1109& (0+255),w,b
  3810  0014EE  0E09               	movlw	9
  3811  0014F0  0100               	movlb	0	; () banked
  3812  0014F2  59BF               	subwfb	(Loading@i_1109+1)& (0+255),w,b
  3813  0014F4  B0D8               	btfsc	status,0,c
  3814  0014F6  D058               	goto	l767
  3815  0014F8  D038               	goto	l7104
  3816  0014FA                     l773:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;sort.c: 191: LATAbits.LATA4 = 1;
  3820  0014FA  8889               	bsf	3977,4,c	;volatile
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;sort.c: 192: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3824  0014FC  0EC8               	movlw	200
  3825  0014FE                     u8527:
  3826  0014FE  2EE8               	decfsz	wreg,f,c
  3827  001500  D7FE               	bra	u8527
  3828                           
  3829                           ;sort.c: 193: LATAbits.LATA4 = 0;
  3830  001502  9889               	bcf	3977,4,c	;volatile
  3831                           
  3832                           ;sort.c: 194: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3833  001504  0E42               	movlw	66
  3834  001506                     u8537:
  3835  001506  2EE8               	decfsz	wreg,f,c
  3836  001508  D7FE               	bra	u8537
  3837  00150A  D01C               	goto	L2
  3838  00150C                     l775:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3842  00150C  8889               	bsf	3977,4,c	;volatile
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;sort.c: 198: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3846  00150E  0ED5               	movlw	213
  3847  001510                     u8547:
  3848  001510  2EE8               	decfsz	wreg,f,c
  3849  001512  D7FE               	bra	u8547
  3850  001514  F000               	nop	
  3851                           
  3852                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3853  001516  9889               	bcf	3977,4,c	;volatile
  3854                           
  3855                           ;sort.c: 200: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3856  001518  0E35               	movlw	53
  3857  00151A                     u8557:
  3858  00151A  2EE8               	decfsz	wreg,f,c
  3859  00151C  D7FE               	bra	u8557
  3860  00151E  D01D               	goto	L3
  3861  001520                     l776:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3865  001520  8889               	bsf	3977,4,c	;volatile
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 204: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3869  001522  0EE2               	movlw	226
  3870  001524                     u8567:
  3871  001524  2EE8               	decfsz	wreg,f,c
  3872  001526  D7FE               	bra	u8567
  3873  001528  D000               	nop2	
  3874                           
  3875                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3876  00152A  9889               	bcf	3977,4,c	;volatile
  3877                           
  3878                           ;sort.c: 206: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3879  00152C  0E28               	movlw	40
  3880  00152E                     u8577:
  3881  00152E  2EE8               	decfsz	wreg,f,c
  3882  001530  D7FE               	bra	u8577
  3883                           
  3884                           ;sort.c: 207: break;
  3885  001532  D036               	goto	l7106
  3886  001534                     l777:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3890  001534  8889               	bsf	3977,4,c	;volatile
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;sort.c: 210: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3894  001536  0EF0               	movlw	240
  3895  001538                     u8587:
  3896  001538  2EE8               	decfsz	wreg,f,c
  3897  00153A  D7FE               	bra	u8587
  3898                           
  3899                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3900  00153C  9889               	bcf	3977,4,c	;volatile
  3901                           
  3902                           ;sort.c: 212: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3903  00153E  0E1A               	movlw	26
  3904  001540                     u8597:
  3905  001540  2EE8               	decfsz	wreg,f,c
  3906  001542  D7FE               	bra	u8597
  3907  001544                     L2:
  3908  001544  D000               	nop2	
  3909                           
  3910                           ;sort.c: 213: break;
  3911  001546  D02C               	goto	l7106
  3912  001548                     l778:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3916  001548  8889               	bsf	3977,4,c	;volatile
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 216: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3920  00154A  0EFD               	movlw	253
  3921  00154C                     u8607:
  3922  00154C  2EE8               	decfsz	wreg,f,c
  3923  00154E  D7FE               	bra	u8607
  3924  001550  F000               	nop	
  3925                           
  3926                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3927  001552  9889               	bcf	3977,4,c	;volatile
  3928                           
  3929                           ;sort.c: 218: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3930  001554  0E0D               	movlw	13
  3931  001556                     u8617:
  3932  001556  2EE8               	decfsz	wreg,f,c
  3933  001558  D7FE               	bra	u8617
  3934  00155A                     L3:
  3935  00155A  F000               	nop	
  3936                           
  3937                           ;sort.c: 219: break;
  3938  00155C  D021               	goto	l7106
  3939  00155E                     l779:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3943  00155E  8889               	bsf	3977,4,c	;volatile
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;sort.c: 222: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3947  001560  0EA0               	movlw	160
  3948  001562                     u8627:
  3949  001562  D000               	nop2	
  3950  001564  2EE8               	decfsz	wreg,f,c
  3951  001566  D7FD               	bra	u8627
  3952                           
  3953                           ;sort.c: 224: }
  3954                           
  3955                           ;sort.c: 223: break;
  3956  001568  D01B               	goto	l7106
  3957  00156A                     l7104:
  3958  00156A  C0C0  F0B1         	movff	Loading@j,??_Loading
  3959  00156E  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3960                           
  3961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3962                           ; Switch size 1, requested type "space"
  3963                           ; Number of cases is 1, Range of values is 0 to 0
  3964                           ; switch strategies available:
  3965                           ; Name         Instructions Cycles
  3966                           ; simple_byte            4     3 (average)
  3967                           ;	Chosen strategy is simple_byte
  3968  001572  0100               	movlb	0	; () banked
  3969  001574  51B2               	movf	(??_Loading+1)& (0+255),w,b
  3970  001576  0A00               	xorlw	0	; case 0
  3971  001578  A4D8               	btfss	status,2,c
  3972  00157A  D7F1               	goto	l779
  3973                           
  3974                           ; BSR set to: 0
  3975                           ; Switch size 1, requested type "space"
  3976                           ; Number of cases is 5, Range of values is 1 to 5
  3977                           ; switch strategies available:
  3978                           ; Name         Instructions Cycles
  3979                           ; simple_byte           16     9 (average)
  3980                           ;	Chosen strategy is simple_byte
  3981  00157C  0100               	movlb	0	; () banked
  3982  00157E  51B1               	movf	??_Loading& (0+255),w,b
  3983  001580  0A01               	xorlw	1	; case 1
  3984  001582  B4D8               	btfsc	status,2,c
  3985  001584  D7BA               	goto	l773
  3986  001586  0A03               	xorlw	3	; case 2
  3987  001588  B4D8               	btfsc	status,2,c
  3988  00158A  D7C0               	goto	l775
  3989  00158C  0A01               	xorlw	1	; case 3
  3990  00158E  B4D8               	btfsc	status,2,c
  3991  001590  D7C7               	goto	l776
  3992  001592  0A07               	xorlw	7	; case 4
  3993  001594  B4D8               	btfsc	status,2,c
  3994  001596  D7CE               	goto	l777
  3995  001598  0A01               	xorlw	1	; case 5
  3996  00159A  B4D8               	btfsc	status,2,c
  3997  00159C  D7D5               	goto	l778
  3998  00159E  D7DF               	goto	l779
  3999  0015A0                     l7106:
  4000  0015A0  0100               	movlb	0	; () banked
  4001  0015A2  4BBE               	infsnz	Loading@i_1109& (0+255),f,b
  4002  0015A4  2BBF               	incf	(Loading@i_1109+1)& (0+255),f,b
  4003  0015A6  D79D               	goto	l7076
  4004  0015A8                     l767:
  4005                           
  4006                           ;sort.c: 225: }
  4007                           ;sort.c: 226: }
  4008                           ;sort.c: 227: }
  4009                           ;sort.c: 228: LATAbits.LATA4 = 0;
  4010  0015A8  9889               	bcf	3977,4,c	;volatile
  4011                           
  4012                           ;sort.c: 229: j++;
  4013  0015AA  0100               	movlb	0	; () banked
  4014  0015AC  4BC0               	infsnz	Loading@j& (0+255),f,b
  4015  0015AE  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4016  0015B0                     l7112:
  4017                           
  4018                           ; BSR set to: 0
  4019  0015B0  0100               	movlb	0	; () banked
  4020  0015B2  05DE               	decf	_IR_signal& (0+255),w,b
  4021  0015B4  0100               	movlb	0	; () banked
  4022  0015B6  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4023  0015B8  B4D8               	btfsc	status,2,c
  4024  0015BA  D73D               	goto	l7050
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 230: }
  4028                           ;sort.c: 231: }
  4029                           ;sort.c: 232: LATAbits.LATA5 = 0;
  4030  0015BC  9A89               	bcf	3977,5,c	;volatile
  4031  0015BE                     l7114:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;sort.c: 233: }
  4035                           ;sort.c: 234: f_can_coming_to_ID = 1;
  4036  0015BE  0E00               	movlw	0
  4037  0015C0  6E66               	movwf	_f_can_coming_to_ID+1,c
  4038  0015C2  0E01               	movlw	1
  4039  0015C4  6E65               	movwf	_f_can_coming_to_ID,c
  4040                           
  4041                           ; BSR set to: 0
  4042                           
  4043                           ; BSR set to: 0
  4044  0015C6  0012               	return	
  4045  0015C8                     __end_of_Loading:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           postdec1	equ	0xFE5
  4056                           fsr1l	equ	0xFE1
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _initSortTimer *****************
  4060 ;; Defined at:
  4061 ;;		line 403 in file "sort.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  i               2    8[BANK0 ] int 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;Total ram usage:        5 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:   10
  4082 ;; This function calls:
  4083 ;;		_getRTC
  4084 ;; This function is called by:
  4085 ;;		_Loading
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text4
  4090  004136                     __ptext4:
  4091                           	opt stack 0
  4092  004136                     _initSortTimer:
  4093                           	opt stack 18
  4094                           
  4095                           ;sort.c: 405: getRTC();
  4096                           
  4097                           ;incstack = 0
  4098  004136  EC87  F021         	call	_getRTC	;wreg free
  4099                           
  4100                           ;sort.c: 406: for(int i = 0; i < 7; i++){
  4101  00413A  0E00               	movlw	0
  4102  00413C  0100               	movlb	0	; () banked
  4103  00413E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4104  004140  0E00               	movlw	0
  4105  004142  6F88               	movwf	initSortTimer@i& (0+255),b
  4106  004144                     l6528:
  4107                           
  4108                           ; BSR set to: 0
  4109  004144  0100               	movlb	0	; () banked
  4110  004146  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4111  004148  D008               	goto	l6532
  4112  00414A  0100               	movlb	0	; () banked
  4113  00414C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4114  00414E  E140               	bnz	l6538
  4115  004150  0E07               	movlw	7
  4116  004152  0100               	movlb	0	; () banked
  4117  004154  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4118  004156  B0D8               	btfsc	status,0,c
  4119  004158  D03B               	goto	l6538
  4120  00415A                     l6532:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;sort.c: 407: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4124  00415A  0E24               	movlw	low _time
  4125  00415C  0100               	movlb	0	; () banked
  4126  00415E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4127  004160  6ED9               	movwf	fsr2l,c
  4128  004162  0E01               	movlw	high _time
  4129  004164  0100               	movlb	0	; () banked
  4130  004166  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4131  004168  6EDA               	movwf	fsr2h,c
  4132  00416A  50DF               	movf	indf2,w,c
  4133  00416C  0100               	movlb	0	; () banked
  4134  00416E  6F85               	movwf	??_initSortTimer& (0+255),b
  4135  004170  0100               	movlb	0	; () banked
  4136  004172  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4137  004174  0E0F               	movlw	15
  4138  004176  1785               	andwf	??_initSortTimer& (0+255),f,b
  4139  004178  0E0F               	movlw	15
  4140  00417A  0100               	movlb	0	; () banked
  4141  00417C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4142  00417E  0100               	movlb	0	; () banked
  4143  004180  5185               	movf	??_initSortTimer& (0+255),w,b
  4144  004182  0D0A               	mullw	10
  4145  004184  0E24               	movlw	low _time
  4146  004186  0100               	movlb	0	; () banked
  4147  004188  2588               	addwf	initSortTimer@i& (0+255),w,b
  4148  00418A  6ED9               	movwf	fsr2l,c
  4149  00418C  0E01               	movlw	high _time
  4150  00418E  0100               	movlb	0	; () banked
  4151  004190  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4152  004192  6EDA               	movwf	fsr2h,c
  4153  004194  50DF               	movf	indf2,w,c
  4154  004196  0B0F               	andlw	15
  4155  004198  0100               	movlb	0	; () banked
  4156  00419A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4157  00419C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4158  00419E  50F3               	movf	prodl,w,c
  4159  0041A0  0100               	movlb	0	; () banked
  4160  0041A2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4161  0041A4  50F4               	movf	prodh,w,c
  4162  0041A6  0100               	movlb	0	; () banked
  4163  0041A8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4164  0041AA  90D8               	bcf	status,0,c
  4165  0041AC  0100               	movlb	0	; () banked
  4166  0041AE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4167  0041B0  6ED9               	movwf	fsr2l,c
  4168  0041B2  0100               	movlb	0	; () banked
  4169  0041B4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4170  0041B6  6EDA               	movwf	fsr2h,c
  4171  0041B8  0E0E               	movlw	low _startTime
  4172  0041BA  26D9               	addwf	fsr2l,f,c
  4173  0041BC  0E01               	movlw	high _startTime
  4174  0041BE  22DA               	addwfc	fsr2h,f,c
  4175  0041C0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4176  0041C4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4177                           
  4178                           ; BSR set to: 0
  4179  0041C8  0100               	movlb	0	; () banked
  4180  0041CA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4181  0041CC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4182  0041CE  D7BA               	goto	l6528
  4183  0041D0                     l6538:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;sort.c: 408: }
  4187                           ;sort.c: 410: T0CON = 0b00010111;
  4188  0041D0  0E17               	movlw	23
  4189  0041D2  6ED5               	movwf	4053,c	;volatile
  4190                           
  4191                           ;sort.c: 419: TMR0H = 0b10000101;
  4192  0041D4  0E85               	movlw	133
  4193  0041D6  6ED7               	movwf	4055,c	;volatile
  4194                           
  4195                           ;sort.c: 420: TMR0L = 0b11101110;
  4196  0041D8  0EEE               	movlw	238
  4197  0041DA  6ED6               	movwf	4054,c	;volatile
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;sort.c: 421: TMR0ON = 1;
  4201  0041DC  8ED5               	bsf	4053,7,c	;volatile
  4202                           
  4203                           ; BSR set to: 0
  4204  0041DE  0012               	return		;funcret
  4205  0041E0                     __end_of_initSortTimer:
  4206                           	opt stack 0
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           postinc0	equ	0xFEE
  4214                           wreg	equ	0xFE8
  4215                           postdec1	equ	0xFE5
  4216                           fsr1l	equ	0xFE1
  4217                           indf2	equ	0xFDF
  4218                           postinc2	equ	0xFDE
  4219                           postdec2	equ	0xFDD
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _initGlobalVars *****************
  4225 ;; Defined at:
  4226 ;;		line 380 in file "sort.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;Total ram usage:        0 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    7
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_Loading
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text5
  4255  00449C                     __ptext5:
  4256                           	opt stack 0
  4257  00449C                     _initGlobalVars:
  4258                           	opt stack 21
  4259                           
  4260                           ;sort.c: 382: first = 0;
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;incstack = 0
  4264  00449C  0E00               	movlw	0
  4265  00449E  6E6C               	movwf	_first+1,c
  4266  0044A0  0E00               	movlw	0
  4267  0044A2  6E6B               	movwf	_first,c
  4268                           
  4269                           ;sort.c: 385: f_loadingNewCan = 0;
  4270  0044A4  0E00               	movlw	0
  4271  0044A6  0100               	movlb	0	; () banked
  4272  0044A8  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4273  0044AA  0E00               	movlw	0
  4274  0044AC  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4275                           
  4276                           ;sort.c: 386: f_lastCan = 0;
  4277  0044AE  0E00               	movlw	0
  4278  0044B0  0100               	movlb	0	; () banked
  4279  0044B2  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  4280  0044B4  0E00               	movlw	0
  4281  0044B6  6FE8               	movwf	_f_lastCan& (0+255),b
  4282                           
  4283                           ;sort.c: 387: f_ID_receive = 1;
  4284  0044B8  0E00               	movlw	0
  4285  0044BA  6E64               	movwf	_f_ID_receive+1,c
  4286  0044BC  0E01               	movlw	1
  4287  0044BE  6E63               	movwf	_f_ID_receive,c
  4288                           
  4289                           ;sort.c: 388: f_can_coming_to_ID = 0;
  4290  0044C0  0E00               	movlw	0
  4291  0044C2  6E66               	movwf	_f_can_coming_to_ID+1,c
  4292  0044C4  0E00               	movlw	0
  4293  0044C6  6E65               	movwf	_f_can_coming_to_ID,c
  4294                           
  4295                           ;sort.c: 389: f_can_coming_to_distribution = 0;
  4296  0044C8  0E00               	movlw	0
  4297  0044CA  6E68               	movwf	_f_can_coming_to_distribution+1,c
  4298  0044CC  0E00               	movlw	0
  4299  0044CE  6E67               	movwf	_f_can_coming_to_distribution,c
  4300                           
  4301                           ;sort.c: 390: f_can_distributed = 0;
  4302  0044D0  0E00               	movlw	0
  4303  0044D2  0101               	movlb	1	; () banked
  4304  0044D4  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4305  0044D6  0E00               	movlw	0
  4306  0044D8  6F33               	movwf	_f_can_distributed& (0+255),b
  4307                           
  4308                           ;sort.c: 391: f_most_recent_sort_time = 0;
  4309  0044DA  0E00               	movlw	0
  4310  0044DC  6E6A               	movwf	_f_most_recent_sort_time+1,c
  4311  0044DE  0E00               	movlw	0
  4312  0044E0  6E69               	movwf	_f_most_recent_sort_time,c
  4313                           
  4314                           ;sort.c: 394: count_total = 0;
  4315  0044E2  0E00               	movlw	0
  4316  0044E4  0100               	movlb	0	; () banked
  4317  0044E6  6FFF               	movwf	(_count_total+1)& (0+255),b
  4318  0044E8  0E00               	movlw	0
  4319  0044EA  6FFE               	movwf	_count_total& (0+255),b
  4320                           
  4321                           ;sort.c: 395: count_pop_no_tab = 0;
  4322  0044EC  0E00               	movlw	0
  4323  0044EE  0101               	movlb	1	; () banked
  4324  0044F0  6F30               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4325  0044F2  0E00               	movlw	0
  4326  0044F4  6F2F               	movwf	_count_pop_no_tab& (0+255),b
  4327                           
  4328                           ;sort.c: 396: count_pop_w_tab = 0;
  4329  0044F6  0E00               	movlw	0
  4330  0044F8  0101               	movlb	1	; () banked
  4331  0044FA  6F32               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4332  0044FC  0E00               	movlw	0
  4333  0044FE  6F31               	movwf	_count_pop_w_tab& (0+255),b
  4334                           
  4335                           ;sort.c: 397: count_can_w_lab = 0;
  4336  004500  0E00               	movlw	0
  4337  004502  0101               	movlb	1	; () banked
  4338  004504  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4339  004506  0E00               	movlw	0
  4340  004508  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4341                           
  4342                           ;sort.c: 398: count_can_no_lab = 0;
  4343  00450A  0E00               	movlw	0
  4344  00450C  0101               	movlb	1	; () banked
  4345  00450E  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4346  004510  0E00               	movlw	0
  4347  004512  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4348                           
  4349                           ;sort.c: 401: most_recent_sort_time = 999;
  4350  004514  0E03               	movlw	3
  4351  004516  6E76               	movwf	_most_recent_sort_time+1,c
  4352  004518  0EE7               	movlw	231
  4353  00451A  6E75               	movwf	_most_recent_sort_time,c
  4354                           
  4355                           ; BSR set to: 1
  4356  00451C  0012               	return		;funcret
  4357  00451E                     __end_of_initGlobalVars:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function _getMAG *****************
  4377 ;; Defined at:
  4378 ;;		line 491 in file "sort.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        2 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    9
  4399 ;; This function calls:
  4400 ;;		_readMAG
  4401 ;; This function is called by:
  4402 ;;		_Loading
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text6
  4407  004C1E                     __ptext6:
  4408                           	opt stack 0
  4409  004C1E                     _getMAG:
  4410                           	opt stack 19
  4411                           
  4412                           ;sort.c: 492: readMAG();
  4413                           
  4414                           ; BSR set to: 1
  4415                           ;incstack = 0
  4416  004C1E  EC37  F025         	call	_readMAG	;wreg free
  4417                           
  4418                           ;sort.c: 494: if(MAG_signal==1){
  4419  004C22  0100               	movlb	0	; () banked
  4420  004C24  05E0               	decf	_MAG_signal& (0+255),w,b
  4421  004C26  0100               	movlb	0	; () banked
  4422  004C28  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4423  004C2A  A4D8               	btfss	status,2,c
  4424  004C2C  0012               	return	
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 495: _delay((unsigned long)((500)*(32000000/4000.0)));
  4428  004C2E  0E15               	movlw	21
  4429  004C30  0100               	movlb	0	; () banked
  4430  004C32  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4431  004C34  0E4B               	movlw	75
  4432  004C36  0100               	movlb	0	; () banked
  4433  004C38  6F86               	movwf	??_getMAG& (0+255),b
  4434  004C3A  0EBE               	movlw	190
  4435  004C3C                     u8637:
  4436  004C3C  2EE8               	decfsz	wreg,f,c
  4437  004C3E  D7FE               	bra	u8637
  4438  004C40  2F86               	decfsz	??_getMAG& (0+255),f,b
  4439  004C42  D7FC               	bra	u8637
  4440  004C44  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4441  004C46  D7FA               	bra	u8637
  4442  004C48  F000               	nop	
  4443                           
  4444                           ;sort.c: 496: readMAG();
  4445  004C4A  EC37  F025         	call	_readMAG	;wreg free
  4446  004C4E  0012               	return	
  4447  004C50                     __end_of_getMAG:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postdec1	equ	0xFE5
  4458                           fsr1l	equ	0xFE1
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           fsr2h	equ	0xFDA
  4463                           fsr2l	equ	0xFD9
  4464                           status	equ	0xFD8
  4465                           
  4466 ;; *************** function _getIR *****************
  4467 ;; Defined at:
  4468 ;;		line 475 in file "sort.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  i               2    7[BANK0 ] int 
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;Total ram usage:        3 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    9
  4489 ;; This function calls:
  4490 ;;		_readIR
  4491 ;; This function is called by:
  4492 ;;		_Loading
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text7
  4497  00460C                     __ptext7:
  4498                           	opt stack 0
  4499  00460C                     _getIR:
  4500                           	opt stack 19
  4501                           
  4502                           ;sort.c: 476: readIR();
  4503                           
  4504                           ;incstack = 0
  4505  00460C  EC11  F025         	call	_readIR	;wreg free
  4506                           
  4507                           ;sort.c: 477: for(int i = 0; i < 150; i++){
  4508  004610  0E00               	movlw	0
  4509  004612  0100               	movlb	0	; () banked
  4510  004614  6F88               	movwf	(getIR@i+1)& (0+255),b
  4511  004616  0E00               	movlw	0
  4512  004618  6F87               	movwf	getIR@i& (0+255),b
  4513  00461A                     l6620:
  4514                           
  4515                           ; BSR set to: 0
  4516  00461A  0100               	movlb	0	; () banked
  4517  00461C  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4518  00461E  D008               	goto	l6624
  4519  004620  0100               	movlb	0	; () banked
  4520  004622  5188               	movf	(getIR@i+1)& (0+255),w,b
  4521  004624  E11A               	bnz	l6636
  4522  004626  0E96               	movlw	150
  4523  004628  0100               	movlb	0	; () banked
  4524  00462A  5D87               	subwf	getIR@i& (0+255),w,b
  4525  00462C  B0D8               	btfsc	status,0,c
  4526  00462E  D015               	goto	l6636
  4527  004630                     l6624:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;sort.c: 478: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4531  004630  0E06               	movlw	6
  4532  004632  0100               	movlb	0	; () banked
  4533  004634  6F86               	movwf	??_getIR& (0+255),b
  4534  004636  0E30               	movlw	48
  4535  004638                     u8647:
  4536  004638  2EE8               	decfsz	wreg,f,c
  4537  00463A  D7FE               	bra	u8647
  4538  00463C  2F86               	decfsz	??_getIR& (0+255),f,b
  4539  00463E  D7FC               	bra	u8647
  4540  004640  F000               	nop	
  4541                           
  4542                           ;sort.c: 479: readIR();
  4543  004642  EC11  F025         	call	_readIR	;wreg free
  4544                           
  4545                           ;sort.c: 480: if(!IR_signal){
  4546  004646  0100               	movlb	0	; () banked
  4547  004648  51DE               	movf	_IR_signal& (0+255),w,b
  4548  00464A  0100               	movlb	0	; () banked
  4549  00464C  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4550  00464E  B4D8               	btfsc	status,2,c
  4551  004650  D004               	goto	l6636
  4552                           
  4553                           ; BSR set to: 0
  4554                           
  4555                           ; BSR set to: 0
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;sort.c: 481: break;
  4559  004652  0100               	movlb	0	; () banked
  4560  004654  4B87               	infsnz	getIR@i& (0+255),f,b
  4561  004656  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4562  004658  D7E0               	goto	l6620
  4563  00465A                     l6636:
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;sort.c: 482: }
  4567                           ;sort.c: 483: }
  4568                           ;sort.c: 484: if(IR_signal==1){
  4569  00465A  0100               	movlb	0	; () banked
  4570  00465C  05DE               	decf	_IR_signal& (0+255),w,b
  4571  00465E  0100               	movlb	0	; () banked
  4572  004660  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4573  004662  A4D8               	btfss	status,2,c
  4574  004664  D006               	goto	l6640
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;sort.c: 485: f_loadingNewCan = 1;
  4578  004666  0E00               	movlw	0
  4579  004668  0100               	movlb	0	; () banked
  4580  00466A  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4581  00466C  0E01               	movlw	1
  4582  00466E  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4583                           
  4584                           ;sort.c: 486: }
  4585  004670  0012               	return	
  4586  004672                     l6640:
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;sort.c: 487: else{
  4590                           ;sort.c: 488: f_loadingNewCan = 0;
  4591  004672  0E00               	movlw	0
  4592  004674  0100               	movlb	0	; () banked
  4593  004676  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4594  004678  0E00               	movlw	0
  4595  00467A  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4596  00467C  0012               	return	
  4597  00467E                     __end_of_getIR:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           postdec1	equ	0xFE5
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _readIR *****************
  4617 ;; Defined at:
  4618 ;;		line 23 in file "ADCFunctionality.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  res             2    4[BANK0 ] int 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        4 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    8
  4639 ;; This function calls:
  4640 ;;		_readADC
  4641 ;; This function is called by:
  4642 ;;		_Loading
  4643 ;;		_getIR
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text8
  4648  004A22                     __ptext8:
  4649                           	opt stack 0
  4650  004A22                     _readIR:
  4651                           	opt stack 20
  4652                           
  4653                           ;ADCFunctionality.c: 24: readADC(0);
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;incstack = 0
  4657  004A22  0E00               	movlw	0
  4658  004A24  EC74  F027         	call	_readADC
  4659                           
  4660                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4661  004A28  50C3               	movf	4035,w,c	;volatile
  4662  004A2A  CFC4 F082          	movff	4036,??_readIR	;volatile
  4663  004A2E  0100               	movlb	0	; () banked
  4664  004A30  6B83               	clrf	(??_readIR+1)& (0+255),b
  4665  004A32  C082  F083         	movff	??_readIR,??_readIR+1
  4666  004A36  0100               	movlb	0	; () banked
  4667  004A38  6B82               	clrf	??_readIR& (0+255),b
  4668  004A3A  0100               	movlb	0	; () banked
  4669  004A3C  1182               	iorwf	??_readIR& (0+255),w,b
  4670  004A3E  0100               	movlb	0	; () banked
  4671  004A40  6F84               	movwf	readIR@res& (0+255),b
  4672  004A42  0100               	movlb	0	; () banked
  4673  004A44  5183               	movf	(??_readIR+1)& (0+255),w,b
  4674  004A46  0100               	movlb	0	; () banked
  4675  004A48  6F85               	movwf	(readIR@res+1)& (0+255),b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4679  004A4A  0100               	movlb	0	; () banked
  4680  004A4C  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4681  004A4E  D00A               	goto	u4440
  4682  004A50  0E21               	movlw	33
  4683  004A52  0100               	movlb	0	; () banked
  4684  004A54  5D84               	subwf	readIR@res& (0+255),w,b
  4685  004A56  0E03               	movlw	3
  4686  004A58  0100               	movlb	0	; () banked
  4687  004A5A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4688  004A5C  A0D8               	btfss	status,0,c
  4689  004A5E  D002               	goto	u4440
  4690  004A60  0E01               	movlw	1
  4691  004A62  D001               	goto	u4450
  4692  004A64                     u4440:
  4693  004A64  0E00               	movlw	0
  4694  004A66                     u4450:
  4695  004A66  0100               	movlb	0	; () banked
  4696  004A68  6FDE               	movwf	_IR_signal& (0+255),b
  4697  004A6A  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4698                           
  4699                           ; BSR set to: 0
  4700  004A6C  0012               	return		;funcret
  4701  004A6E                     __end_of_readIR:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           postdec1	equ	0xFE5
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _ID *****************
  4721 ;; Defined at:
  4722 ;;		line 238 in file "sort.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  i               2    6[BANK0 ] int 
  4727 ;;  i               2    4[BANK0 ] int 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        6 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    8
  4744 ;; This function calls:
  4745 ;;		_delay_ms
  4746 ;; This function is called by:
  4747 ;;		_sort
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text9
  4752  00309A                     __ptext9:
  4753                           	opt stack 0
  4754  00309A                     _ID:
  4755                           	opt stack 21
  4756                           
  4757                           ;sort.c: 239: if(f_can_coming_to_ID){
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;incstack = 0
  4761  00309A  5065               	movf	_f_can_coming_to_ID,w,c
  4762  00309C  1066               	iorwf	_f_can_coming_to_ID+1,w,c
  4763  00309E  B4D8               	btfsc	status,2,c
  4764  0030A0  0012               	return	
  4765                           
  4766                           ;sort.c: 241: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4767  0030A2  0E3D               	movlw	61
  4768  0030A4  0100               	movlb	0	; () banked
  4769  0030A6  6F83               	movwf	(??_ID+1)& (0+255),b
  4770  0030A8  0EE1               	movlw	225
  4771  0030AA  0100               	movlb	0	; () banked
  4772  0030AC  6F82               	movwf	??_ID& (0+255),b
  4773  0030AE  0E3F               	movlw	63
  4774  0030B0                     u8657:
  4775  0030B0  2EE8               	decfsz	wreg,f,c
  4776  0030B2  D7FE               	bra	u8657
  4777  0030B4  2F82               	decfsz	??_ID& (0+255),f,b
  4778  0030B6  D7FC               	bra	u8657
  4779  0030B8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4780  0030BA  D7FA               	bra	u8657
  4781  0030BC  D000               	nop2	
  4782                           
  4783                           ;sort.c: 243: LATAbits.LATA3 = 1;
  4784  0030BE  8689               	bsf	3977,3,c	;volatile
  4785                           
  4786                           ;sort.c: 244: _delay((unsigned long)((600)*(32000000/4000.0)));
  4787  0030C0  0E19               	movlw	25
  4788  0030C2  0100               	movlb	0	; () banked
  4789  0030C4  6F83               	movwf	(??_ID+1)& (0+255),b
  4790  0030C6  0E5A               	movlw	90
  4791  0030C8  0100               	movlb	0	; () banked
  4792  0030CA  6F82               	movwf	??_ID& (0+255),b
  4793  0030CC  0EB1               	movlw	177
  4794  0030CE                     u8667:
  4795  0030CE  2EE8               	decfsz	wreg,f,c
  4796  0030D0  D7FE               	bra	u8667
  4797  0030D2  2F82               	decfsz	??_ID& (0+255),f,b
  4798  0030D4  D7FC               	bra	u8667
  4799  0030D6  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4800  0030D8  D7FA               	bra	u8667
  4801  0030DA  D000               	nop2	
  4802                           
  4803                           ;sort.c: 245: sensor_outputs[1] = PORTAbits.RA2;
  4804  0030DC  A480               	btfss	3968,2,c	;volatile
  4805  0030DE  D004               	goto	u5790
  4806  0030E0  0100               	movlb	0	; () banked
  4807  0030E2  6B82               	clrf	??_ID& (0+255),b
  4808  0030E4  2B82               	incf	??_ID& (0+255),f,b
  4809  0030E6  D002               	goto	u5798
  4810  0030E8                     u5790:
  4811  0030E8  0100               	movlb	0	; () banked
  4812  0030EA  6B82               	clrf	??_ID& (0+255),b
  4813  0030EC                     u5798:
  4814  0030EC  0100               	movlb	0	; () banked
  4815  0030EE  5182               	movf	??_ID& (0+255),w,b
  4816  0030F0  0100               	movlb	0	; () banked
  4817  0030F2  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4818  0030F4  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;sort.c: 246: LATAbits.LATA3 = 0;
  4822  0030F6  9689               	bcf	3977,3,c	;volatile
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;sort.c: 248: _delay((unsigned long)((200)*(32000000/4000.0)));
  4826  0030F8  0E09               	movlw	9
  4827  0030FA  0100               	movlb	0	; () banked
  4828  0030FC  6F83               	movwf	(??_ID+1)& (0+255),b
  4829  0030FE  0E1E               	movlw	30
  4830  003100  0100               	movlb	0	; () banked
  4831  003102  6F82               	movwf	??_ID& (0+255),b
  4832  003104  0EE4               	movlw	228
  4833  003106                     u8677:
  4834  003106  2EE8               	decfsz	wreg,f,c
  4835  003108  D7FE               	bra	u8677
  4836  00310A  2F82               	decfsz	??_ID& (0+255),f,b
  4837  00310C  D7FC               	bra	u8677
  4838  00310E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4839  003110  D7FA               	bra	u8677
  4840  003112  F000               	nop	
  4841                           
  4842                           ;sort.c: 249: LATAbits.LATA3 = 1;
  4843  003114  8689               	bsf	3977,3,c	;volatile
  4844                           
  4845                           ;sort.c: 250: _delay((unsigned long)((600)*(32000000/4000.0)));
  4846  003116  0E19               	movlw	25
  4847  003118  0100               	movlb	0	; () banked
  4848  00311A  6F83               	movwf	(??_ID+1)& (0+255),b
  4849  00311C  0E5A               	movlw	90
  4850  00311E  0100               	movlb	0	; () banked
  4851  003120  6F82               	movwf	??_ID& (0+255),b
  4852  003122  0EB1               	movlw	177
  4853  003124                     u8687:
  4854  003124  2EE8               	decfsz	wreg,f,c
  4855  003126  D7FE               	bra	u8687
  4856  003128  2F82               	decfsz	??_ID& (0+255),f,b
  4857  00312A  D7FC               	bra	u8687
  4858  00312C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4859  00312E  D7FA               	bra	u8687
  4860  003130  D000               	nop2	
  4861                           
  4862                           ;sort.c: 251: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4863  003132  A480               	btfss	3968,2,c	;volatile
  4864  003134  D004               	goto	u5800
  4865  003136  0100               	movlb	0	; () banked
  4866  003138  6B82               	clrf	??_ID& (0+255),b
  4867  00313A  2B82               	incf	??_ID& (0+255),f,b
  4868  00313C  D002               	goto	u5808
  4869  00313E                     u5800:
  4870  00313E  0100               	movlb	0	; () banked
  4871  003140  6B82               	clrf	??_ID& (0+255),b
  4872  003142                     u5808:
  4873  003142  0100               	movlb	0	; () banked
  4874  003144  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4875  003146  0100               	movlb	0	; () banked
  4876  003148  1182               	iorwf	??_ID& (0+255),w,b
  4877  00314A  0100               	movlb	0	; () banked
  4878  00314C  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4879  00314E  0100               	movlb	0	; () banked
  4880  003150  51DD               	movf	(_sensor_outputs+3)& (0+255),w,b
  4881  003152  0100               	movlb	0	; () banked
  4882  003154  6FDD               	movwf	(_sensor_outputs+3)& (0+255),b
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;sort.c: 259: if(!sensor_outputs[0]){
  4886  003156  0100               	movlb	0	; () banked
  4887  003158  51DA               	movf	_sensor_outputs& (0+255),w,b
  4888  00315A  0100               	movlb	0	; () banked
  4889  00315C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4890  00315E  A4D8               	btfss	status,2,c
  4891  003160  D016               	goto	l7152
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;sort.c: 260: if(!sensor_outputs[1]){
  4895  003162  0100               	movlb	0	; () banked
  4896  003164  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4897  003166  0100               	movlb	0	; () banked
  4898  003168  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4899  00316A  A4D8               	btfss	status,2,c
  4900  00316C  D008               	goto	l7148
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;sort.c: 261: count_pop_no_tab++;
  4904  00316E  0101               	movlb	1	; () banked
  4905  003170  4B2F               	infsnz	_count_pop_no_tab& (0+255),f,b
  4906  003172  2B30               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  4907                           
  4908                           ; BSR set to: 1
  4909                           ;sort.c: 262: cur_can = 0;
  4910  003174  0E00               	movlw	0
  4911  003176  0100               	movlb	0	; () banked
  4912  003178  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4913  00317A  0E00               	movlw	0
  4914  00317C  D007               	goto	L4
  4915  00317E                     l7148:
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;sort.c: 264: else{
  4919                           ;sort.c: 265: count_pop_w_tab++;
  4920  00317E  0101               	movlb	1	; () banked
  4921  003180  4B31               	infsnz	_count_pop_w_tab& (0+255),f,b
  4922  003182  2B32               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  4923                           
  4924                           ; BSR set to: 1
  4925                           ;sort.c: 266: cur_can = 1;
  4926  003184  0E00               	movlw	0
  4927  003186  0100               	movlb	0	; () banked
  4928  003188  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4929  00318A  0E01               	movlw	1
  4930  00318C                     L4:
  4931  00318C  6FE4               	movwf	_cur_can& (0+255),b
  4932  00318E                     l7152:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 267: }
  4936                           ;sort.c: 268: }
  4937                           ;sort.c: 269: if(sensor_outputs[0]){
  4938  00318E  0100               	movlb	0	; () banked
  4939  003190  51DA               	movf	_sensor_outputs& (0+255),w,b
  4940  003192  0100               	movlb	0	; () banked
  4941  003194  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4942  003196  B4D8               	btfsc	status,2,c
  4943  003198  D016               	goto	l7164
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;sort.c: 270: if(!sensor_outputs[1]){
  4947  00319A  0100               	movlb	0	; () banked
  4948  00319C  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4949  00319E  0100               	movlb	0	; () banked
  4950  0031A0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4951  0031A2  A4D8               	btfss	status,2,c
  4952  0031A4  D008               	goto	l7160
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;sort.c: 271: count_can_w_lab++;
  4956  0031A6  0101               	movlb	1	; () banked
  4957  0031A8  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4958  0031AA  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4959                           
  4960                           ; BSR set to: 1
  4961                           ;sort.c: 272: cur_can = 2;
  4962  0031AC  0E00               	movlw	0
  4963  0031AE  0100               	movlb	0	; () banked
  4964  0031B0  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4965  0031B2  0E02               	movlw	2
  4966  0031B4  D007               	goto	L5
  4967  0031B6                     l7160:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;sort.c: 274: else{
  4971                           ;sort.c: 275: count_can_no_lab++;
  4972  0031B6  0101               	movlb	1	; () banked
  4973  0031B8  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4974  0031BA  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4975                           
  4976                           ; BSR set to: 1
  4977                           ;sort.c: 276: cur_can = 3;
  4978  0031BC  0E00               	movlw	0
  4979  0031BE  0100               	movlb	0	; () banked
  4980  0031C0  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4981  0031C2  0E03               	movlw	3
  4982  0031C4                     L5:
  4983  0031C4  6FE4               	movwf	_cur_can& (0+255),b
  4984  0031C6                     l7164:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 277: }
  4988                           ;sort.c: 278: }
  4989                           ;sort.c: 279: LATAbits.LATA3 = 0;
  4990  0031C6  9689               	bcf	3977,3,c	;volatile
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;sort.c: 280: _delay((unsigned long)((200)*(32000000/4000.0)));
  4994  0031C8  0E09               	movlw	9
  4995  0031CA  0100               	movlb	0	; () banked
  4996  0031CC  6F83               	movwf	(??_ID+1)& (0+255),b
  4997  0031CE  0E1E               	movlw	30
  4998  0031D0  0100               	movlb	0	; () banked
  4999  0031D2  6F82               	movwf	??_ID& (0+255),b
  5000  0031D4  0EE4               	movlw	228
  5001  0031D6                     u8697:
  5002  0031D6  2EE8               	decfsz	wreg,f,c
  5003  0031D8  D7FE               	bra	u8697
  5004  0031DA  2F82               	decfsz	??_ID& (0+255),f,b
  5005  0031DC  D7FC               	bra	u8697
  5006  0031DE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5007  0031E0  D7FA               	bra	u8697
  5008  0031E2  F000               	nop	
  5009                           
  5010                           ;sort.c: 281: LATAbits.LATA3 = 1;
  5011  0031E4  8689               	bsf	3977,3,c	;volatile
  5012                           
  5013                           ;sort.c: 284: for(int i=0;i<10000;i++)
  5014  0031E6  0E00               	movlw	0
  5015  0031E8  0100               	movlb	0	; () banked
  5016  0031EA  6F85               	movwf	(ID@i+1)& (0+255),b
  5017  0031EC  0E00               	movlw	0
  5018  0031EE  6F84               	movwf	ID@i& (0+255),b
  5019  0031F0  0100               	movlb	0	; () banked
  5020  0031F2  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5021  0031F4  D008               	goto	l790
  5022  0031F6  0E10               	movlw	16
  5023  0031F8  0100               	movlb	0	; () banked
  5024  0031FA  5D84               	subwf	ID@i& (0+255),w,b
  5025  0031FC  0E27               	movlw	39
  5026  0031FE  0100               	movlb	0	; () banked
  5027  003200  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5028  003202  B0D8               	btfsc	status,0,c
  5029  003204  D00D               	goto	l791
  5030  003206                     l790:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;sort.c: 285: {
  5034                           ;sort.c: 286: LATCbits.LATC0 = 1;
  5035  003206  808B               	bsf	3979,0,c	;volatile
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;sort.c: 287: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5039  003208  0E1A               	movlw	26
  5040  00320A                     u8707:
  5041  00320A  2EE8               	decfsz	wreg,f,c
  5042  00320C  D7FE               	bra	u8707
  5043  00320E  D000               	nop2	
  5044                           
  5045                           ;sort.c: 288: LATCbits.LATC0 = 0;
  5046  003210  908B               	bcf	3979,0,c	;volatile
  5047                           
  5048                           ;sort.c: 289: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5049  003212  0EF0               	movlw	240
  5050  003214                     u8717:
  5051  003214  2EE8               	decfsz	wreg,f,c
  5052  003216  D7FE               	bra	u8717
  5053  003218  0100               	movlb	0	; () banked
  5054  00321A  4B84               	infsnz	ID@i& (0+255),f,b
  5055  00321C  2B85               	incf	(ID@i+1)& (0+255),f,b
  5056  00321E  D7E8               	goto	L6
  5057  003220                     l791:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;sort.c: 290: }
  5061                           ;sort.c: 291: LATCbits.LATC0 = 0;
  5062  003220  908B               	bcf	3979,0,c	;volatile
  5063                           
  5064                           ;sort.c: 293: LATAbits.LATA3 = 0;
  5065  003222  9689               	bcf	3977,3,c	;volatile
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;sort.c: 297: f_can_coming_to_distribution = 1;
  5069  003224  0E00               	movlw	0
  5070  003226  6E68               	movwf	_f_can_coming_to_distribution+1,c
  5071  003228  0E01               	movlw	1
  5072  00322A  6E67               	movwf	_f_can_coming_to_distribution,c
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;sort.c: 298: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5076  00322C  0E3D               	movlw	61
  5077  00322E  0100               	movlb	0	; () banked
  5078  003230  6F83               	movwf	(??_ID+1)& (0+255),b
  5079  003232  0EE1               	movlw	225
  5080  003234  0100               	movlb	0	; () banked
  5081  003236  6F82               	movwf	??_ID& (0+255),b
  5082  003238  0E3F               	movlw	63
  5083  00323A                     u8727:
  5084  00323A  2EE8               	decfsz	wreg,f,c
  5085  00323C  D7FE               	bra	u8727
  5086  00323E  2F82               	decfsz	??_ID& (0+255),f,b
  5087  003240  D7FC               	bra	u8727
  5088  003242  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5089  003244  D7FA               	bra	u8727
  5090  003246  D000               	nop2	
  5091                           
  5092                           ;sort.c: 299: LATCbits.LATC0 = 1;
  5093  003248  808B               	bsf	3979,0,c	;volatile
  5094                           
  5095                           ;sort.c: 302: if(!f_lastCan){
  5096  00324A  0100               	movlb	0	; () banked
  5097  00324C  51E8               	movf	_f_lastCan& (0+255),w,b
  5098  00324E  0100               	movlb	0	; () banked
  5099  003250  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5100  003252  A4D8               	btfss	status,2,c
  5101  003254  D032               	goto	l7202
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;sort.c: 303: for(int i=0; i<46; i++){
  5105  003256  0E00               	movlw	0
  5106  003258  0100               	movlb	0	; () banked
  5107  00325A  6F87               	movwf	(ID@i_1120+1)& (0+255),b
  5108  00325C  0E00               	movlw	0
  5109  00325E  6F86               	movwf	ID@i_1120& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112  003260  0100               	movlb	0	; () banked
  5113  003262  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5114  003264  D008               	goto	l7194
  5115  003266  0100               	movlb	0	; () banked
  5116  003268  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5117  00326A  E126               	bnz	l794
  5118  00326C  0E2E               	movlw	46
  5119  00326E  0100               	movlb	0	; () banked
  5120  003270  5D86               	subwf	ID@i_1120& (0+255),w,b
  5121  003272  B0D8               	btfsc	status,0,c
  5122  003274  D021               	goto	l794
  5123  003276                     l7194:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;sort.c: 304: LATAbits.LATA5 = !LATAbits.LATA5;
  5127  003276  BA89               	btfsc	3977,5,c	;volatile
  5128  003278  D004               	goto	u5890
  5129  00327A  0100               	movlb	0	; () banked
  5130  00327C  6B82               	clrf	??_ID& (0+255),b
  5131  00327E  2B82               	incf	??_ID& (0+255),f,b
  5132  003280  D002               	goto	u5908
  5133  003282                     u5890:
  5134  003282  0100               	movlb	0	; () banked
  5135  003284  6B82               	clrf	??_ID& (0+255),b
  5136  003286                     u5908:
  5137  003286  0100               	movlb	0	; () banked
  5138  003288  3B82               	swapf	??_ID& (0+255),f,b
  5139  00328A  4782               	rlncf	??_ID& (0+255),f,b
  5140  00328C  5089               	movf	3977,w,c	;volatile
  5141  00328E  0100               	movlb	0	; () banked
  5142  003290  1982               	xorwf	??_ID& (0+255),w,b
  5143  003292  0BDF               	andlw	-33
  5144  003294  1982               	xorwf	??_ID& (0+255),w,b
  5145  003296  6E89               	movwf	3977,c	;volatile
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;sort.c: 305: delay_ms(45-i);
  5149  003298  0100               	movlb	0	; () banked
  5150  00329A  5186               	movf	ID@i_1120& (0+255),w,b
  5151  00329C  0800               	sublw	0
  5152  00329E  0F2D               	addlw	45
  5153  0032A0  EC9F  F027         	call	_delay_ms
  5154  0032A4  0100               	movlb	0	; () banked
  5155  0032A6  4B86               	infsnz	ID@i_1120& (0+255),f,b
  5156  0032A8  2B87               	incf	(ID@i_1120+1)& (0+255),f,b
  5157                           
  5158                           ; BSR set to: 0
  5159  0032AA  0100               	movlb	0	; () banked
  5160  0032AC  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5161  0032AE  D7E3               	goto	l7194
  5162  0032B0  0100               	movlb	0	; () banked
  5163  0032B2  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5164  0032B4  E101               	bnz	u5910
  5165  0032B6  D7DA               	goto	L7
  5166  0032B8                     u5910:
  5167  0032B8                     l794:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;sort.c: 306: }
  5171                           ;sort.c: 307: LATAbits.LATA5 = 1;
  5172  0032B8  8A89               	bsf	3977,5,c	;volatile
  5173  0032BA                     l7202:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;sort.c: 308: }
  5177                           ;sort.c: 310: f_can_coming_to_ID = 0;
  5178  0032BA  0E00               	movlw	0
  5179  0032BC  6E66               	movwf	_f_can_coming_to_ID+1,c
  5180  0032BE  0E00               	movlw	0
  5181  0032C0  6E65               	movwf	_f_can_coming_to_ID,c
  5182  0032C2  0012               	return	
  5183  0032C4                     __end_of_ID:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _delay_ms *****************
  5203 ;; Defined at:
  5204 ;;		line 512 in file "sort.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  milliseconds    1    wreg     unsigned char 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, status,2, status,0, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;Total ram usage:        2 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    7
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_Loading
  5229 ;;		_ID
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text10
  5234  004F3E                     __ptext10:
  5235                           	opt stack 0
  5236  004F3E                     _delay_ms:
  5237                           	opt stack 21
  5238                           
  5239                           ;incstack = 0
  5240                           ;delay_ms@milliseconds stored from wreg
  5241  004F3E  0100               	movlb	0	; () banked
  5242  004F40  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5243                           
  5244                           ;sort.c: 513: while(milliseconds > 0)
  5245  004F42  D00B               	goto	l6600
  5246  004F44                     l6596:
  5247                           
  5248                           ;sort.c: 514: {
  5249                           ;sort.c: 515: milliseconds--;
  5250  004F44  0100               	movlb	0	; () banked
  5251  004F46  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;sort.c: 516: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5255  004F48  0E0B               	movlw	11
  5256  004F4A  0100               	movlb	0	; () banked
  5257  004F4C  6F80               	movwf	??_delay_ms& (0+255),b
  5258  004F4E  0E47               	movlw	71
  5259  004F50                     u8737:
  5260  004F50  2EE8               	decfsz	wreg,f,c
  5261  004F52  D7FE               	bra	u8737
  5262  004F54  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5263  004F56  D7FC               	bra	u8737
  5264  004F58  D000               	nop2	
  5265  004F5A                     l6600:
  5266  004F5A  0100               	movlb	0	; () banked
  5267  004F5C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5268  004F5E  0100               	movlb	0	; () banked
  5269  004F60  B4D8               	btfsc	status,2,c
  5270  004F62  0012               	return	
  5271  004F64  D7EF               	goto	l6596
  5272  004F66                     __end_of_delay_ms:
  5273                           	opt stack 0
  5274                           tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           postdec1	equ	0xFE5
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _Distribution *****************
  5292 ;; Defined at:
  5293 ;;		line 313 in file "sort.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:        2 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    8
  5314 ;; This function calls:
  5315 ;;		_updateServoPosition
  5316 ;; This function is called by:
  5317 ;;		_sort
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text11
  5322  0032C4                     __ptext11:
  5323                           	opt stack 0
  5324  0032C4                     _Distribution:
  5325                           	opt stack 21
  5326                           
  5327                           ;sort.c: 314: if(f_can_coming_to_distribution){
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;incstack = 0
  5331  0032C4  5067               	movf	_f_can_coming_to_distribution,w,c
  5332  0032C6  1068               	iorwf	_f_can_coming_to_distribution+1,w,c
  5333  0032C8  B4D8               	btfsc	status,2,c
  5334  0032CA  0012               	return	
  5335  0032CC  D034               	goto	l7218
  5336  0032CE                     l7208:
  5337                           
  5338                           ;sort.c: 324: updateServoPosition(500, 1);
  5339  0032CE  0E01               	movlw	1
  5340  0032D0  0100               	movlb	0	; () banked
  5341  0032D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5342  0032D4  0EF4               	movlw	244
  5343  0032D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5344  0032D8  0E00               	movlw	0
  5345  0032DA  0100               	movlb	0	; () banked
  5346  0032DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5347  0032DE  0E01               	movlw	1
  5348  0032E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5349  0032E2  ECCB  F022         	call	_updateServoPosition	;wreg free
  5350                           
  5351                           ;sort.c: 325: break;
  5352  0032E6  D03E               	goto	l7220
  5353  0032E8                     l7210:
  5354                           
  5355                           ;sort.c: 327: updateServoPosition(850, 1);
  5356  0032E8  0E03               	movlw	3
  5357  0032EA  0100               	movlb	0	; () banked
  5358  0032EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5359  0032EE  0E52               	movlw	82
  5360  0032F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5361  0032F2  0E00               	movlw	0
  5362  0032F4  0100               	movlb	0	; () banked
  5363  0032F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5364  0032F8  0E01               	movlw	1
  5365  0032FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5366  0032FC  ECCB  F022         	call	_updateServoPosition	;wreg free
  5367                           
  5368                           ;sort.c: 328: break;
  5369  003300  D031               	goto	l7220
  5370  003302                     l7212:
  5371                           
  5372                           ;sort.c: 330: updateServoPosition(1670, 1);
  5373  003302  0E06               	movlw	6
  5374  003304  0100               	movlb	0	; () banked
  5375  003306  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5376  003308  0E86               	movlw	134
  5377  00330A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5378  00330C  0E00               	movlw	0
  5379  00330E  0100               	movlb	0	; () banked
  5380  003310  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5381  003312  0E01               	movlw	1
  5382  003314  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5383  003316  ECCB  F022         	call	_updateServoPosition	;wreg free
  5384                           
  5385                           ;sort.c: 331: break;
  5386  00331A  D024               	goto	l7220
  5387  00331C                     l7214:
  5388                           
  5389                           ;sort.c: 333: updateServoPosition(2400, 1);
  5390  00331C  0E09               	movlw	9
  5391  00331E  0100               	movlb	0	; () banked
  5392  003320  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5393  003322  0E60               	movlw	96
  5394  003324  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5395  003326  0E00               	movlw	0
  5396  003328  0100               	movlb	0	; () banked
  5397  00332A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5398  00332C  0E01               	movlw	1
  5399  00332E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5400  003330  ECCB  F022         	call	_updateServoPosition	;wreg free
  5401                           
  5402                           ;sort.c: 337: }
  5403                           
  5404                           ;sort.c: 336: break;
  5405                           
  5406                           ;sort.c: 335: default:
  5407                           
  5408                           ;sort.c: 334: break;
  5409  003334  D017               	goto	l7220
  5410  003336                     l7218:
  5411  003336  C0E4  F088         	movff	_cur_can,??_Distribution
  5412  00333A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5413                           
  5414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5415                           ; Switch size 1, requested type "space"
  5416                           ; Number of cases is 1, Range of values is 0 to 0
  5417                           ; switch strategies available:
  5418                           ; Name         Instructions Cycles
  5419                           ; simple_byte            4     3 (average)
  5420                           ;	Chosen strategy is simple_byte
  5421  00333E  0100               	movlb	0	; () banked
  5422  003340  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5423  003342  0A00               	xorlw	0	; case 0
  5424  003344  A4D8               	btfss	status,2,c
  5425  003346  D00E               	goto	l7220
  5426                           
  5427                           ; BSR set to: 0
  5428                           ; Switch size 1, requested type "space"
  5429                           ; Number of cases is 4, Range of values is 0 to 3
  5430                           ; switch strategies available:
  5431                           ; Name         Instructions Cycles
  5432                           ; simple_byte           13     7 (average)
  5433                           ;	Chosen strategy is simple_byte
  5434  003348  0100               	movlb	0	; () banked
  5435  00334A  5188               	movf	??_Distribution& (0+255),w,b
  5436  00334C  0A00               	xorlw	0	; case 0
  5437  00334E  B4D8               	btfsc	status,2,c
  5438  003350  D7BE               	goto	l7208
  5439  003352  0A01               	xorlw	1	; case 1
  5440  003354  B4D8               	btfsc	status,2,c
  5441  003356  D7C8               	goto	l7210
  5442  003358  0A03               	xorlw	3	; case 2
  5443  00335A  B4D8               	btfsc	status,2,c
  5444  00335C  D7D2               	goto	l7212
  5445  00335E  0A01               	xorlw	1	; case 3
  5446  003360  B4D8               	btfsc	status,2,c
  5447  003362  D7DC               	goto	l7214
  5448  003364                     l7220:
  5449                           
  5450                           ;sort.c: 338: updateServoPosition(1050, 3);
  5451  003364  0E04               	movlw	4
  5452  003366  0100               	movlb	0	; () banked
  5453  003368  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5454  00336A  0E1A               	movlw	26
  5455  00336C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5456  00336E  0E00               	movlw	0
  5457  003370  0100               	movlb	0	; () banked
  5458  003372  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5459  003374  0E03               	movlw	3
  5460  003376  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5461  003378  ECCB  F022         	call	_updateServoPosition	;wreg free
  5462                           
  5463                           ;sort.c: 339: _delay((unsigned long)((750)*(32000000/4000.0)));
  5464  00337C  0E1F               	movlw	31
  5465  00337E  0100               	movlb	0	; () banked
  5466  003380  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5467  003382  0E71               	movlw	113
  5468  003384  0100               	movlb	0	; () banked
  5469  003386  6F88               	movwf	??_Distribution& (0+255),b
  5470  003388  0E1E               	movlw	30
  5471  00338A                     u8747:
  5472  00338A  2EE8               	decfsz	wreg,f,c
  5473  00338C  D7FE               	bra	u8747
  5474  00338E  2F88               	decfsz	??_Distribution& (0+255),f,b
  5475  003390  D7FC               	bra	u8747
  5476  003392  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5477  003394  D7FA               	bra	u8747
  5478  003396  F000               	nop	
  5479                           
  5480                           ;sort.c: 347: switch(cur_can){
  5481  003398  D034               	goto	l7234
  5482  00339A                     l7224:
  5483                           
  5484                           ;sort.c: 349: updateServoPosition(1260, 3);
  5485  00339A  0E04               	movlw	4
  5486  00339C  0100               	movlb	0	; () banked
  5487  00339E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5488  0033A0  0EEC               	movlw	236
  5489  0033A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5490  0033A4  0E00               	movlw	0
  5491  0033A6  0100               	movlb	0	; () banked
  5492  0033A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5493  0033AA  0E03               	movlw	3
  5494  0033AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5495  0033AE  ECCB  F022         	call	_updateServoPosition	;wreg free
  5496                           
  5497                           ;sort.c: 350: break;
  5498  0033B2  D03E               	goto	l7236
  5499  0033B4                     l7226:
  5500                           
  5501                           ;sort.c: 352: updateServoPosition(1260, 3);
  5502  0033B4  0E04               	movlw	4
  5503  0033B6  0100               	movlb	0	; () banked
  5504  0033B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5505  0033BA  0EEC               	movlw	236
  5506  0033BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5507  0033BE  0E00               	movlw	0
  5508  0033C0  0100               	movlb	0	; () banked
  5509  0033C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5510  0033C4  0E03               	movlw	3
  5511  0033C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5512  0033C8  ECCB  F022         	call	_updateServoPosition	;wreg free
  5513                           
  5514                           ;sort.c: 353: break;
  5515  0033CC  D031               	goto	l7236
  5516  0033CE                     l7228:
  5517                           
  5518                           ;sort.c: 355: updateServoPosition(1390, 3);
  5519  0033CE  0E05               	movlw	5
  5520  0033D0  0100               	movlb	0	; () banked
  5521  0033D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5522  0033D4  0E6E               	movlw	110
  5523  0033D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5524  0033D8  0E00               	movlw	0
  5525  0033DA  0100               	movlb	0	; () banked
  5526  0033DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5527  0033DE  0E03               	movlw	3
  5528  0033E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5529  0033E2  ECCB  F022         	call	_updateServoPosition	;wreg free
  5530                           
  5531                           ;sort.c: 356: break;
  5532  0033E6  D024               	goto	l7236
  5533  0033E8                     l7230:
  5534                           
  5535                           ;sort.c: 358: updateServoPosition(1390, 3);
  5536  0033E8  0E05               	movlw	5
  5537  0033EA  0100               	movlb	0	; () banked
  5538  0033EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5539  0033EE  0E6E               	movlw	110
  5540  0033F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5541  0033F2  0E00               	movlw	0
  5542  0033F4  0100               	movlb	0	; () banked
  5543  0033F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5544  0033F8  0E03               	movlw	3
  5545  0033FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5546  0033FC  ECCB  F022         	call	_updateServoPosition	;wreg free
  5547                           
  5548                           ;sort.c: 362: }
  5549                           
  5550                           ;sort.c: 361: break;
  5551                           
  5552                           ;sort.c: 360: default:
  5553                           
  5554                           ;sort.c: 359: break;
  5555  003400  D017               	goto	l7236
  5556  003402                     l7234:
  5557  003402  C0E4  F088         	movff	_cur_can,??_Distribution
  5558  003406  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5559                           
  5560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5561                           ; Switch size 1, requested type "space"
  5562                           ; Number of cases is 1, Range of values is 0 to 0
  5563                           ; switch strategies available:
  5564                           ; Name         Instructions Cycles
  5565                           ; simple_byte            4     3 (average)
  5566                           ;	Chosen strategy is simple_byte
  5567  00340A  0100               	movlb	0	; () banked
  5568  00340C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5569  00340E  0A00               	xorlw	0	; case 0
  5570  003410  A4D8               	btfss	status,2,c
  5571  003412  D00E               	goto	l7236
  5572                           
  5573                           ; BSR set to: 0
  5574                           ; Switch size 1, requested type "space"
  5575                           ; Number of cases is 4, Range of values is 0 to 3
  5576                           ; switch strategies available:
  5577                           ; Name         Instructions Cycles
  5578                           ; simple_byte           13     7 (average)
  5579                           ;	Chosen strategy is simple_byte
  5580  003414  0100               	movlb	0	; () banked
  5581  003416  5188               	movf	??_Distribution& (0+255),w,b
  5582  003418  0A00               	xorlw	0	; case 0
  5583  00341A  B4D8               	btfsc	status,2,c
  5584  00341C  D7BE               	goto	l7224
  5585  00341E  0A01               	xorlw	1	; case 1
  5586  003420  B4D8               	btfsc	status,2,c
  5587  003422  D7C8               	goto	l7226
  5588  003424  0A03               	xorlw	3	; case 2
  5589  003426  B4D8               	btfsc	status,2,c
  5590  003428  D7D2               	goto	l7228
  5591  00342A  0A01               	xorlw	1	; case 3
  5592  00342C  B4D8               	btfsc	status,2,c
  5593  00342E  D7DC               	goto	l7230
  5594  003430                     l7236:
  5595                           
  5596                           ;sort.c: 363: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5597  003430  0E66               	movlw	102
  5598  003432  0100               	movlb	0	; () banked
  5599  003434  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5600  003436  0E76               	movlw	118
  5601  003438  0100               	movlb	0	; () banked
  5602  00343A  6F88               	movwf	??_Distribution& (0+255),b
  5603  00343C  0EC1               	movlw	193
  5604  00343E                     u8757:
  5605  00343E  2EE8               	decfsz	wreg,f,c
  5606  003440  D7FE               	bra	u8757
  5607  003442  2F88               	decfsz	??_Distribution& (0+255),f,b
  5608  003444  D7FC               	bra	u8757
  5609  003446  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5610  003448  D7FA               	bra	u8757
  5611                           
  5612                           ;sort.c: 366: updateServoPosition(1050, 3);
  5613  00344A  0E04               	movlw	4
  5614  00344C  0100               	movlb	0	; () banked
  5615  00344E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5616  003450  0E1A               	movlw	26
  5617  003452  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5618  003454  0E00               	movlw	0
  5619  003456  0100               	movlb	0	; () banked
  5620  003458  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5621  00345A  0E03               	movlw	3
  5622  00345C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5623  00345E  ECCB  F022         	call	_updateServoPosition	;wreg free
  5624                           
  5625                           ;sort.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
  5626  003462  0E1F               	movlw	31
  5627  003464  0100               	movlb	0	; () banked
  5628  003466  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5629  003468  0E71               	movlw	113
  5630  00346A  0100               	movlb	0	; () banked
  5631  00346C  6F88               	movwf	??_Distribution& (0+255),b
  5632  00346E  0E1E               	movlw	30
  5633  003470                     u8767:
  5634  003470  2EE8               	decfsz	wreg,f,c
  5635  003472  D7FE               	bra	u8767
  5636  003474  2F88               	decfsz	??_Distribution& (0+255),f,b
  5637  003476  D7FC               	bra	u8767
  5638  003478  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5639  00347A  D7FA               	bra	u8767
  5640  00347C  F000               	nop	
  5641                           
  5642                           ;sort.c: 368: updateServoPosition(1200, 1);
  5643  00347E  0E04               	movlw	4
  5644  003480  0100               	movlb	0	; () banked
  5645  003482  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5646  003484  0EB0               	movlw	176
  5647  003486  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5648  003488  0E00               	movlw	0
  5649  00348A  0100               	movlb	0	; () banked
  5650  00348C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5651  00348E  0E01               	movlw	1
  5652  003490  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5653  003492  ECCB  F022         	call	_updateServoPosition	;wreg free
  5654                           
  5655                           ;sort.c: 369: updateServoPosition(1050, 3);
  5656  003496  0E04               	movlw	4
  5657  003498  0100               	movlb	0	; () banked
  5658  00349A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5659  00349C  0E1A               	movlw	26
  5660  00349E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5661  0034A0  0E00               	movlw	0
  5662  0034A2  0100               	movlb	0	; () banked
  5663  0034A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5664  0034A6  0E03               	movlw	3
  5665  0034A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5666  0034AA  ECCB  F022         	call	_updateServoPosition	;wreg free
  5667                           
  5668                           ;sort.c: 371: f_can_coming_to_distribution = 0;
  5669  0034AE  0E00               	movlw	0
  5670  0034B0  6E68               	movwf	_f_can_coming_to_distribution+1,c
  5671  0034B2  0E00               	movlw	0
  5672  0034B4  6E67               	movwf	_f_can_coming_to_distribution,c
  5673                           
  5674                           ;sort.c: 372: f_can_distributed = 1;
  5675  0034B6  0E00               	movlw	0
  5676  0034B8  0101               	movlb	1	; () banked
  5677  0034BA  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  5678  0034BC  0E01               	movlw	1
  5679  0034BE  6F33               	movwf	_f_can_distributed& (0+255),b
  5680                           
  5681                           ; BSR set to: 1
  5682                           ;sort.c: 373: f_most_recent_sort_time = 1;
  5683  0034C0  0E00               	movlw	0
  5684  0034C2  6E6A               	movwf	_f_most_recent_sort_time+1,c
  5685  0034C4  0E01               	movlw	1
  5686  0034C6  6E69               	movwf	_f_most_recent_sort_time,c
  5687                           
  5688                           ; BSR set to: 1
  5689                           ;sort.c: 374: if(f_lastCan == 1){
  5690  0034C8  0100               	movlb	0	; () banked
  5691  0034CA  05E8               	decf	_f_lastCan& (0+255),w,b
  5692  0034CC  0100               	movlb	0	; () banked
  5693  0034CE  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5694  0034D0  A4D8               	btfss	status,2,c
  5695  0034D2  0012               	return	
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;sort.c: 375: machine_state = DoneSorting_state;
  5699  0034D4  0E02               	movlw	2
  5700  0034D6  0100               	movlb	0	; () banked
  5701  0034D8  6FFC               	movwf	_machine_state& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704  0034DA  0012               	return	
  5705  0034DC                     __end_of_Distribution:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           postdec1	equ	0xFE5
  5716                           fsr1l	equ	0xFE1
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function _machineConfig *****************
  5725 ;; Defined at:
  5726 ;;		line 15 in file "MachineConfig.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;Total ram usage:        0 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    7
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text12
  5755  00481A                     __ptext12:
  5756                           	opt stack 0
  5757  00481A                     _machineConfig:
  5758                           	opt stack 23
  5759                           
  5760                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5761                           
  5762                           ;incstack = 0
  5763  00481A  0EF0               	movlw	240
  5764  00481C  6ED3               	movwf	4051,c	;volatile
  5765                           
  5766                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5767  00481E  8C9B               	bsf	3995,6,c	;volatile
  5768                           
  5769                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5770  004820  0E07               	movlw	7
  5771  004822  6E92               	movwf	3986,c	;volatile
  5772                           
  5773                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5774  004824  0EF2               	movlw	242
  5775  004826  6E93               	movwf	3987,c	;volatile
  5776                           
  5777                           ;MachineConfig.c: 27: TRISC = 0x00;
  5778  004828  0E00               	movlw	0
  5779  00482A  6E94               	movwf	3988,c	;volatile
  5780                           
  5781                           ;MachineConfig.c: 31: TRISD = 0x00;
  5782  00482C  0E00               	movlw	0
  5783  00482E  6E95               	movwf	3989,c	;volatile
  5784                           
  5785                           ;MachineConfig.c: 34: TRISE = 0x00;
  5786  004830  0E00               	movlw	0
  5787  004832  6E96               	movwf	3990,c	;volatile
  5788                           
  5789                           ;MachineConfig.c: 37: LATA = 0x00;
  5790  004834  0E00               	movlw	0
  5791  004836  6E89               	movwf	3977,c	;volatile
  5792                           
  5793                           ;MachineConfig.c: 38: LATB = 0x00;
  5794  004838  0E00               	movlw	0
  5795  00483A  6E8A               	movwf	3978,c	;volatile
  5796                           
  5797                           ;MachineConfig.c: 39: LATC = 0x00;
  5798  00483C  0E00               	movlw	0
  5799  00483E  6E8B               	movwf	3979,c	;volatile
  5800                           
  5801                           ;MachineConfig.c: 40: LATD = 0x00;
  5802  004840  0E00               	movlw	0
  5803  004842  6E8C               	movwf	3980,c	;volatile
  5804                           
  5805                           ;MachineConfig.c: 41: LATE = 0x00;
  5806  004844  0E00               	movlw	0
  5807  004846  6E8D               	movwf	3981,c	;volatile
  5808                           
  5809                           ;MachineConfig.c: 43: nRBPU = 0;
  5810  004848  9EF1               	bcf	intcon2,7,c	;volatile
  5811                           
  5812                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5813  00484A  0E00               	movlw	0
  5814  00484C  6EC2               	movwf	4034,c	;volatile
  5815                           
  5816                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5817  00484E  0E0D               	movlw	13
  5818  004850  6EC1               	movwf	4033,c	;volatile
  5819                           
  5820                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5821  004852  0E00               	movlw	0
  5822  004854  6EB5               	movwf	4021,c	;volatile
  5823                           
  5824                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5825  004856  96B4               	bcf	4020,3,c	;volatile
  5826                           
  5827                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5828  004858  0EB1               	movlw	177
  5829  00485A  6EC0               	movwf	4032,c	;volatile
  5830                           
  5831                           ;MachineConfig.c: 55: INT1IE = 1;
  5832  00485C  86F0               	bsf	intcon3,3,c	;volatile
  5833                           
  5834                           ;MachineConfig.c: 57: TMR0IE = 1;
  5835  00485E  8AF2               	bsf	intcon,5,c	;volatile
  5836                           
  5837                           ;MachineConfig.c: 58: TMR1IE = 1;
  5838  004860  809D               	bsf	3997,0,c	;volatile
  5839                           
  5840                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5841  004862  0EB0               	movlw	176
  5842  004864  6ECD               	movwf	4045,c	;volatile
  5843                           
  5844                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5845  004866  0EB0               	movlw	176
  5846  004868  6EB1               	movwf	4017,c	;volatile
  5847                           
  5848                           ;MachineConfig.c: 61: TMR2IE = 1;
  5849  00486A  829D               	bsf	3997,1,c	;volatile
  5850                           
  5851                           ;MachineConfig.c: 62: TMR3IE = 1;
  5852  00486C  82A0               	bsf	4000,1,c	;volatile
  5853                           
  5854                           ;MachineConfig.c: 63: PEIE = 1;
  5855  00486E  8CF2               	bsf	intcon,6,c	;volatile
  5856                           
  5857                           ;MachineConfig.c: 64: ADIE = 0;
  5858  004870  9C9D               	bcf	3997,6,c	;volatile
  5859                           
  5860                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5861  004872  9EF2               	bcf	intcon,7,c	;volatile
  5862  004874  0012               	return		;funcret
  5863  004876                     __end_of_machineConfig:
  5864                           	opt stack 0
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon2	equ	0xFF1
  5873                           intcon3	equ	0xFF0
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _logRun *****************
  5886 ;; Defined at:
  5887 ;;		line 84 in file "EEPROM.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;		None
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5892 ;;  i               2   55[BANK0 ] int 
  5893 ;;  num             1   49[BANK0 ] unsigned char 
  5894 ;;  addr            2   57[BANK0 ] unsigned short 
  5895 ;;  byte11          1   54[BANK0 ] unsigned char 
  5896 ;;  byte3           1   52[BANK0 ] unsigned char 
  5897 ;;  byte2           1   51[BANK0 ] unsigned char 
  5898 ;;  byte1           1   50[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;Total ram usage:       10 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:   11
  5915 ;; This function calls:
  5916 ;;		_EEPROM_read
  5917 ;;		_EEPROM_write
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text13
  5924  0039CA                     __ptext13:
  5925                           	opt stack 0
  5926  0039CA                     _logRun:
  5927                           	opt stack 19
  5928                           
  5929                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5930                           
  5931                           ;incstack = 0
  5932  0039CA  0E00               	movlw	0
  5933  0039CC  0100               	movlb	0	; () banked
  5934  0039CE  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5935  0039D0  0E00               	movlw	0
  5936  0039D2  6F80               	movwf	EEPROM_read@address& (0+255),b
  5937  0039D4  EC4B  F028         	call	_EEPROM_read	;wreg free
  5938  0039D8  0100               	movlb	0	; () banked
  5939  0039DA  6FFD               	movwf	_sel& (0+255),b
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5943  0039DC  0100               	movlb	0	; () banked
  5944  0039DE  51FD               	movf	_sel& (0+255),w,b
  5945  0039E0  0D0B               	mullw	11
  5946  0039E2  0E01               	movlw	1
  5947  0039E4  24F3               	addwf	prodl,w,c
  5948  0039E6  0100               	movlb	0	; () banked
  5949  0039E8  6FB9               	movwf	logRun@addr& (0+255),b
  5950  0039EA  0E00               	movlw	0
  5951  0039EC  20F4               	addwfc	prodh,w,c
  5952  0039EE  0100               	movlb	0	; () banked
  5953  0039F0  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;EEPROM.c: 101: if (sel < 3){
  5957  0039F2  0E03               	movlw	3
  5958  0039F4  0100               	movlb	0	; () banked
  5959  0039F6  61FD               	cpfslt	_sel& (0+255),b
  5960  0039F8  D00E               	goto	l8818
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5964  0039FA  0100               	movlb	0	; () banked
  5965  0039FC  29FD               	incf	_sel& (0+255),w,b
  5966  0039FE  0100               	movlb	0	; () banked
  5967  003A00  6FB1               	movwf	logRun@num& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5971  003A02  0E00               	movlw	0
  5972  003A04  0100               	movlb	0	; () banked
  5973  003A06  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5974  003A08  0E00               	movlw	0
  5975  003A0A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5976  003A0C  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5977  003A10  ECA1  F01E         	call	_EEPROM_write	;wreg free
  5978                           
  5979                           ;EEPROM.c: 104: }
  5980  003A14  D00A               	goto	l8820
  5981  003A16                     l8818:
  5982                           
  5983                           ;EEPROM.c: 105: else{
  5984                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5985  003A16  0E00               	movlw	0
  5986  003A18  0100               	movlb	0	; () banked
  5987  003A1A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5988  003A1C  0E00               	movlw	0
  5989  003A1E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5990  003A20  0E00               	movlw	0
  5991  003A22  0100               	movlb	0	; () banked
  5992  003A24  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5993  003A26  ECA1  F01E         	call	_EEPROM_write	;wreg free
  5994  003A2A                     l8820:
  5995                           
  5996                           ;EEPROM.c: 107: }
  5997                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5998  003A2A  0100               	movlb	0	; () banked
  5999  003A2C  51FE               	movf	_count_total& (0+255),w,b
  6000  003A2E  0980               	iorlw	128
  6001  003A30  0100               	movlb	0	; () banked
  6002  003A32  6FB2               	movwf	logRun@byte1& (0+255),b
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6006  003A34  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6007  003A38  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6008  003A3C  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6009  003A40  ECA1  F01E         	call	_EEPROM_write	;wreg free
  6010                           
  6011                           ;EEPROM.c: 112: addr++;
  6012  003A44  0100               	movlb	0	; () banked
  6013  003A46  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6014  003A48  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6018  003A4A  0101               	movlb	1	; () banked
  6019  003A4C  392F               	swapf	_count_pop_no_tab& (0+255),w,b
  6020  003A4E  0BF0               	andlw	240
  6021  003A50  0101               	movlb	1	; () banked
  6022  003A52  1131               	iorwf	_count_pop_w_tab& (0+255),w,b
  6023  003A54  0100               	movlb	0	; () banked
  6024  003A56  6FB3               	movwf	logRun@byte2& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6028  003A58  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6029  003A5C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6030  003A60  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6031  003A64  ECA1  F01E         	call	_EEPROM_write	;wreg free
  6032                           
  6033                           ;EEPROM.c: 117: addr++;
  6034  003A68  0100               	movlb	0	; () banked
  6035  003A6A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6036  003A6C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6040  003A6E  0101               	movlb	1	; () banked
  6041  003A70  392D               	swapf	_count_can_w_lab& (0+255),w,b
  6042  003A72  0BF0               	andlw	240
  6043  003A74  0101               	movlb	1	; () banked
  6044  003A76  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  6045  003A78  0100               	movlb	0	; () banked
  6046  003A7A  6FB4               	movwf	logRun@byte3& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6050  003A7C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6051  003A80  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6052  003A84  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6053  003A88  ECA1  F01E         	call	_EEPROM_write	;wreg free
  6054                           
  6055                           ;EEPROM.c: 120: addr++;
  6056  003A8C  0100               	movlb	0	; () banked
  6057  003A8E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6058  003A90  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6062  003A92  0E00               	movlw	0
  6063  003A94  0100               	movlb	0	; () banked
  6064  003A96  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6065  003A98  0E00               	movlw	0
  6066  003A9A  6FB7               	movwf	logRun@i& (0+255),b
  6067                           
  6068                           ; BSR set to: 0
  6069  003A9C  0100               	movlb	0	; () banked
  6070  003A9E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6071  003AA0  D008               	goto	l8844
  6072  003AA2  0100               	movlb	0	; () banked
  6073  003AA4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6074  003AA6  E128               	bnz	l1012
  6075  003AA8  0E07               	movlw	7
  6076  003AAA  0100               	movlb	0	; () banked
  6077  003AAC  5DB7               	subwf	logRun@i& (0+255),w,b
  6078  003AAE  B0D8               	btfsc	status,0,c
  6079  003AB0  D023               	goto	l1012
  6080  003AB2                     l8844:
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6084  003AB2  90D8               	bcf	status,0,c
  6085  003AB4  0100               	movlb	0	; () banked
  6086  003AB6  35B7               	rlcf	logRun@i& (0+255),w,b
  6087  003AB8  6ED9               	movwf	fsr2l,c
  6088  003ABA  0100               	movlb	0	; () banked
  6089  003ABC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6090  003ABE  6EDA               	movwf	fsr2h,c
  6091  003AC0  0E0E               	movlw	low _startTime
  6092  003AC2  26D9               	addwf	fsr2l,f,c
  6093  003AC4  0E01               	movlw	high _startTime
  6094  003AC6  22DA               	addwfc	fsr2h,f,c
  6095  003AC8  50DF               	movf	indf2,w,c
  6096  003ACA  0100               	movlb	0	; () banked
  6097  003ACC  6FB5               	movwf	logRun@byte_i& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6101  003ACE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6102  003AD2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6103  003AD6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6104  003ADA  ECA1  F01E         	call	_EEPROM_write	;wreg free
  6105                           
  6106                           ;EEPROM.c: 126: addr++;
  6107  003ADE  0100               	movlb	0	; () banked
  6108  003AE0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6109  003AE2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6110                           
  6111                           ; BSR set to: 0
  6112  003AE4  0100               	movlb	0	; () banked
  6113  003AE6  4BB7               	infsnz	logRun@i& (0+255),f,b
  6114  003AE8  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6115                           
  6116                           ; BSR set to: 0
  6117  003AEA  0100               	movlb	0	; () banked
  6118  003AEC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6119  003AEE  D7E1               	goto	l8844
  6120  003AF0  0100               	movlb	0	; () banked
  6121  003AF2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6122  003AF4  E101               	bnz	u8080
  6123  003AF6  D7D8               	goto	L8
  6124  003AF8                     u8080:
  6125  003AF8                     l1012:
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;EEPROM.c: 127: }
  6129                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6130  003AF8  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6134  003AFC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6135  003B00  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6136  003B04  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6137  003B08  ECA1  F01E         	call	_EEPROM_write	;wreg free
  6138  003B0C  0012               	return		;funcret
  6139  003B0E                     __end_of_logRun:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           intcon2	equ	0xFF1
  6149                           intcon3	equ	0xFF0
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _EEPROM_write *****************
  6162 ;; Defined at:
  6163 ;;		line 32 in file "EEPROM.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  address         2   43[BANK0 ] unsigned short 
  6166 ;;  data            1   45[BANK0 ] unsigned char 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  i               1   48[BANK0 ] unsigned char 
  6169 ;;  i               1   47[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;Total ram usage:        6 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:   10
  6186 ;; This function calls:
  6187 ;;		_EEPROM_read
  6188 ;;		_lcdInst
  6189 ;;		_printf
  6190 ;; This function is called by:
  6191 ;;		_Loading
  6192 ;;		_logRun
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text14
  6197  003D42                     __ptext14:
  6198                           	opt stack 0
  6199  003D42                     _EEPROM_write:
  6200                           	opt stack 18
  6201                           
  6202                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6203                           
  6204                           ;incstack = 0
  6205  003D42  84A6               	bsf	4006,2,c	;volatile
  6206                           
  6207                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6208  003D44  0100               	movlb	0	; () banked
  6209  003D46  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6210  003D48  6EAA               	movwf	4010,c	;volatile
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6214  003D4A  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;EEPROM.c: 39: EEDATA = data;
  6218  003D4E  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6222  003D52  9EA6               	bcf	4006,7,c	;volatile
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6226  003D54  9CA6               	bcf	4006,6,c	;volatile
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6230  003D56  9EF2               	bcf	intcon,7,c	;volatile
  6231                           
  6232                           ;EEPROM.c: 45: EECON2 = 0x55;
  6233  003D58  0E55               	movlw	85
  6234  003D5A  6EA7               	movwf	4007,c	;volatile
  6235                           
  6236                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6237  003D5C  0EAA               	movlw	170
  6238  003D5E  6EA7               	movwf	4007,c	;volatile
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6242  003D60  82A6               	bsf	4006,1,c	;volatile
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6246  003D62  8EF2               	bsf	intcon,7,c	;volatile
  6247  003D64                     l990:
  6248  003D64  A8A1               	btfss	4001,4,c	;volatile
  6249  003D66  D7FE               	goto	l990
  6250                           
  6251                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6252  003D68  98A1               	bcf	4001,4,c	;volatile
  6253                           
  6254                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6255  003D6A  94A6               	bcf	4006,2,c	;volatile
  6256                           
  6257                           ;EEPROM.c: 57: if(debug){
  6258  003D6C  505D               	movf	_debug,w,c
  6259  003D6E  105E               	iorwf	_debug+1,w,c
  6260  003D70  B4D8               	btfsc	status,2,c
  6261  003D72  0012               	return	
  6262                           
  6263                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6264  003D74  0E01               	movlw	1
  6265  003D76  EC7D  F028         	call	_lcdInst
  6266  003D7A  0E68               	movlw	104
  6267  003D7C  0100               	movlb	0	; () banked
  6268  003D7E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6269  003D80  0EE4               	movlw	228
  6270  003D82                     u8777:
  6271  003D82  2EE8               	decfsz	wreg,f,c
  6272  003D84  D7FE               	bra	u8777
  6273  003D86  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6274  003D88  D7FC               	bra	u8777
  6275  003D8A  F000               	nop	
  6276                           
  6277                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6278  003D8C  0E80               	movlw	128
  6279  003D8E  EC7D  F028         	call	_lcdInst
  6280                           
  6281                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6282  003D92  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6283  003D96  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6284  003D9A  EC4B  F028         	call	_EEPROM_read	;wreg free
  6285  003D9E  0100               	movlb	0	; () banked
  6286  003DA0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6287  003DA2  A4D8               	btfss	status,2,c
  6288  003DA4  D024               	goto	l6582
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6292  003DA6  0E22               	movlw	low STR_66
  6293  003DA8  0100               	movlb	0	; () banked
  6294  003DAA  6F8E               	movwf	printf@f& (0+255),b
  6295  003DAC  0EFB               	movlw	high STR_66
  6296  003DAE  0100               	movlb	0	; () banked
  6297  003DB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  6298  003DB2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6299  003DB6  0100               	movlb	0	; () banked
  6300  003DB8  6B91               	clrf	(?_printf+3)& (0+255),b
  6301  003DBA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6302  003DBE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6303  003DC2  ECE4  F00A         	call	_printf	;wreg free
  6304                           
  6305                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6306  003DC6  0E00               	movlw	0
  6307  003DC8  0100               	movlb	0	; () banked
  6308  003DCA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6309  003DCC                     l6574:
  6310                           
  6311                           ; BSR set to: 0
  6312  003DCC  0E63               	movlw	99
  6313  003DCE  0100               	movlb	0	; () banked
  6314  003DD0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6315  003DD2  D001               	goto	l6578
  6316  003DD4  0012               	return	
  6317  003DD6                     l6578:
  6318                           
  6319                           ; BSR set to: 0
  6320  003DD6  0E68               	movlw	104
  6321  003DD8  0100               	movlb	0	; () banked
  6322  003DDA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6323  003DDC  0EE4               	movlw	228
  6324  003DDE                     u8787:
  6325  003DDE  2EE8               	decfsz	wreg,f,c
  6326  003DE0  D7FE               	bra	u8787
  6327  003DE2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6328  003DE4  D7FC               	bra	u8787
  6329  003DE6  F000               	nop	
  6330  003DE8  0100               	movlb	0	; () banked
  6331  003DEA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6332  003DEC  D7EF               	goto	l6574
  6333  003DEE                     l6582:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6337  003DEE  0EBD               	movlw	low STR_67
  6338  003DF0  0100               	movlb	0	; () banked
  6339  003DF2  6F8E               	movwf	printf@f& (0+255),b
  6340  003DF4  0EFF               	movlw	high STR_67
  6341  003DF6  0100               	movlb	0	; () banked
  6342  003DF8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6343  003DFA  ECE4  F00A         	call	_printf	;wreg free
  6344  003DFE  0E00               	movlw	0
  6345  003E00  0100               	movlb	0	; () banked
  6346  003E02  6FB0               	movwf	EEPROM_write@i_1340& (0+255),b
  6347  003E04                     l6586:
  6348                           
  6349                           ; BSR set to: 0
  6350  003E04  0E63               	movlw	99
  6351  003E06  0100               	movlb	0	; () banked
  6352  003E08  65B0               	cpfsgt	EEPROM_write@i_1340& (0+255),b
  6353  003E0A  D001               	goto	l6590
  6354  003E0C  0012               	return	
  6355  003E0E                     l6590:
  6356                           
  6357                           ; BSR set to: 0
  6358  003E0E  0E68               	movlw	104
  6359  003E10  0100               	movlb	0	; () banked
  6360  003E12  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6361  003E14  0EE4               	movlw	228
  6362  003E16                     u8797:
  6363  003E16  2EE8               	decfsz	wreg,f,c
  6364  003E18  D7FE               	bra	u8797
  6365  003E1A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6366  003E1C  D7FC               	bra	u8797
  6367  003E1E  F000               	nop	
  6368  003E20  0100               	movlb	0	; () banked
  6369  003E22  2BB0               	incf	EEPROM_write@i_1340& (0+255),f,b
  6370  003E24  D7EF               	goto	l6586
  6371  003E26                     __end_of_EEPROM_write:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           intcon	equ	0xFF2
  6380                           intcon2	equ	0xFF1
  6381                           intcon3	equ	0xFF0
  6382                           postinc0	equ	0xFEE
  6383                           wreg	equ	0xFE8
  6384                           postdec1	equ	0xFE5
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _EEPROM_read *****************
  6394 ;; Defined at:
  6395 ;;		line 68 in file "EEPROM.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  address         2    0[BANK0 ] unsigned short 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      unsigned char 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;Total ram usage:        2 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    7
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_Loading
  6420 ;;		_EEPROM_write
  6421 ;;		_logRun
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text15
  6426  005096                     __ptext15:
  6427                           	opt stack 0
  6428  005096                     _EEPROM_read:
  6429                           	opt stack 20
  6430                           
  6431                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6432                           
  6433                           ;incstack = 0
  6434  005096  0100               	movlb	0	; () banked
  6435  005098  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6436  00509A  6EAA               	movwf	4010,c	;volatile
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6440  00509C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6444  0050A0  9EA6               	bcf	4006,7,c	;volatile
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6448  0050A2  9CA6               	bcf	4006,6,c	;volatile
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6452  0050A4  80A6               	bsf	4006,0,c	;volatile
  6453  0050A6                     l1003:
  6454  0050A6  B0A6               	btfsc	4006,0,c	;volatile
  6455  0050A8  D7FE               	goto	l1003
  6456                           
  6457                           ;EEPROM.c: 81: return EEDATA;
  6458  0050AA  50A8               	movf	4008,w,c	;volatile
  6459  0050AC  0012               	return	
  6460  0050AE                     __end_of_EEPROM_read:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           intcon3	equ	0xFF0
  6471                           postinc0	equ	0xFEE
  6472                           wreg	equ	0xFE8
  6473                           postdec1	equ	0xFE5
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           
  6482 ;; *************** function _initUI *****************
  6483 ;; Defined at:
  6484 ;;		line 62 in file "UI.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:   12
  6505 ;; This function calls:
  6506 ;;		_change_state_to_menu_start
  6507 ;;		_loadRTC
  6508 ;; This function is called by:
  6509 ;;		_main
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text16
  6514  004E32                     __ptext16:
  6515                           	opt stack 0
  6516  004E32                     _initUI:
  6517                           	opt stack 18
  6518                           
  6519                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6520                           
  6521                           ;incstack = 0
  6522  004E32  8EF2               	bsf	intcon,7,c	;volatile
  6523                           
  6524                           ;UI.c: 64: machine_state = UI_state;
  6525  004E34  0E00               	movlw	0
  6526  004E36  0100               	movlb	0	; () banked
  6527  004E38  6FFC               	movwf	_machine_state& (0+255),b
  6528                           
  6529                           ;UI.c: 65: logstate = 0;
  6530  004E3A  0E00               	movlw	0
  6531  004E3C  0100               	movlb	0	; () banked
  6532  004E3E  6FF7               	movwf	(_logstate+1)& (0+255),b
  6533  004E40  0E00               	movlw	0
  6534  004E42  6FF6               	movwf	_logstate& (0+255),b
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;UI.c: 67: if(RTCflag){
  6538  004E44  0100               	movlb	0	; () banked
  6539  004E46  51E2               	movf	_RTCflag& (0+255),w,b
  6540  004E48  0100               	movlb	0	; () banked
  6541  004E4A  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6542  004E4C  A4D8               	btfss	status,2,c
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;UI.c: 68: loadRTC();
  6546  004E4E  EC41  F021         	call	_loadRTC	;wreg free
  6547                           
  6548                           ;UI.c: 69: }
  6549                           ;UI.c: 71: change_state_to_menu_start();
  6550  004E52  EC5E  F027         	call	_change_state_to_menu_start	;wreg free
  6551                           
  6552                           ;UI.c: 72: firstboot = 1;
  6553  004E56  0E00               	movlw	0
  6554  004E58  6E6E               	movwf	_firstboot+1,c
  6555  004E5A  0E01               	movlw	1
  6556  004E5C  6E6D               	movwf	_firstboot,c
  6557  004E5E  0012               	return		;funcret
  6558  004E60                     __end_of_initUI:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           intcon3	equ	0xFF0
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           postdec1	equ	0xFE5
  6572                           fsr1l	equ	0xFE1
  6573                           indf2	equ	0xFDF
  6574                           postinc2	equ	0xFDE
  6575                           postdec2	equ	0xFDD
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _loadRTC *****************
  6581 ;; Defined at:
  6582 ;;		line 28 in file "RTC.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  i               2   22[BANK0 ] int 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  1    wreg      void 
  6589 ;; Registers used:
  6590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;Total ram usage:        3 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    9
  6603 ;; This function calls:
  6604 ;;		_I2C_Master_Init
  6605 ;;		_I2C_Master_Start
  6606 ;;		_I2C_Master_Stop
  6607 ;;		_I2C_Master_Write
  6608 ;; This function is called by:
  6609 ;;		_initUI
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text17
  6614  004282                     __ptext17:
  6615                           	opt stack 0
  6616  004282                     _loadRTC:
  6617                           	opt stack 20
  6618                           
  6619                           ;RTC.c: 30: I2C_Master_Init(10000);
  6620                           
  6621                           ;incstack = 0
  6622  004282  0E10               	movlw	16
  6623  004284  0100               	movlb	0	; () banked
  6624  004286  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6625  004288  0E27               	movlw	39
  6626  00428A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6627  00428C  0E00               	movlw	0
  6628  00428E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6629  004290  0E00               	movlw	0
  6630  004292  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6631  004294  ECDD  F023         	call	_I2C_Master_Init	;wreg free
  6632                           
  6633                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6634  004298  9EF2               	bcf	intcon,7,c	;volatile
  6635                           
  6636                           ;RTC.c: 34: I2C_Master_Start();
  6637  00429A  ECA3  F028         	call	_I2C_Master_Start	;wreg free
  6638                           
  6639                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6640  00429E  0E00               	movlw	0
  6641  0042A0  0100               	movlb	0	; () banked
  6642  0042A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6643  0042A4  0ED0               	movlw	208
  6644  0042A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6645  0042A8  EC91  F028         	call	_I2C_Master_Write	;wreg free
  6646                           
  6647                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6648  0042AC  0E00               	movlw	0
  6649  0042AE  0100               	movlb	0	; () banked
  6650  0042B0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6651  0042B2  0E00               	movlw	0
  6652  0042B4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6653  0042B6  EC91  F028         	call	_I2C_Master_Write	;wreg free
  6654                           
  6655                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6656  0042BA  0E00               	movlw	0
  6657  0042BC  0100               	movlb	0	; () banked
  6658  0042BE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6659  0042C0  0E00               	movlw	0
  6660  0042C2  6F96               	movwf	loadRTC@i& (0+255),b
  6661  0042C4                     l6728:
  6662                           
  6663                           ; BSR set to: 0
  6664  0042C4  0100               	movlb	0	; () banked
  6665  0042C6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6666  0042C8  D008               	goto	l6732
  6667  0042CA  0100               	movlb	0	; () banked
  6668  0042CC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6669  0042CE  E11B               	bnz	l6738
  6670  0042D0  0E07               	movlw	7
  6671  0042D2  0100               	movlb	0	; () banked
  6672  0042D4  5D96               	subwf	loadRTC@i& (0+255),w,b
  6673  0042D6  B0D8               	btfsc	status,0,c
  6674  0042D8  D016               	goto	l6738
  6675  0042DA                     l6732:
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6679  0042DA  0E24               	movlw	low _time
  6680  0042DC  0100               	movlb	0	; () banked
  6681  0042DE  2596               	addwf	loadRTC@i& (0+255),w,b
  6682  0042E0  6ED9               	movwf	fsr2l,c
  6683  0042E2  0E01               	movlw	high _time
  6684  0042E4  0100               	movlb	0	; () banked
  6685  0042E6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6686  0042E8  6EDA               	movwf	fsr2h,c
  6687  0042EA  50DF               	movf	indf2,w,c
  6688  0042EC  0100               	movlb	0	; () banked
  6689  0042EE  6F95               	movwf	??_loadRTC& (0+255),b
  6690  0042F0  0100               	movlb	0	; () banked
  6691  0042F2  5195               	movf	??_loadRTC& (0+255),w,b
  6692  0042F4  0100               	movlb	0	; () banked
  6693  0042F6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6694  0042F8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6695  0042FA  EC91  F028         	call	_I2C_Master_Write	;wreg free
  6696  0042FE  0100               	movlb	0	; () banked
  6697  004300  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6698  004302  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6699  004304  D7DF               	goto	l6728
  6700  004306                     l6738:
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;RTC.c: 39: }
  6704                           ;RTC.c: 40: I2C_Master_Stop();
  6705  004306  EC9F  F028         	call	_I2C_Master_Stop	;wreg free
  6706                           
  6707                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6708  00430A  8EF2               	bsf	intcon,7,c	;volatile
  6709  00430C  0012               	return		;funcret
  6710  00430E                     __end_of_loadRTC:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           intcon2	equ	0xFF1
  6720                           intcon3	equ	0xFF0
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           postdec1	equ	0xFE5
  6724                           fsr1l	equ	0xFE1
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function _I2C_Master_Init *****************
  6733 ;; Defined at:
  6734 ;;		line 15 in file "I2C.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  c               4   13[BANK0 ] const unsigned long 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        8 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    8
  6755 ;; This function calls:
  6756 ;;		___lldiv
  6757 ;; This function is called by:
  6758 ;;		_main
  6759 ;;		_loadRTC
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text18
  6764  0047BA                     __ptext18:
  6765                           	opt stack 0
  6766  0047BA                     _I2C_Master_Init:
  6767                           	opt stack 20
  6768                           
  6769                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6770                           
  6771                           ;incstack = 0
  6772  0047BA  0E00               	movlw	0
  6773  0047BC  6EC7               	movwf	4039,c	;volatile
  6774                           
  6775                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6776  0047BE  0E28               	movlw	40
  6777  0047C0  6EC6               	movwf	4038,c	;volatile
  6778                           
  6779                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6780  0047C2  0E00               	movlw	0
  6781  0047C4  6EC5               	movwf	4037,c	;volatile
  6782                           
  6783                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6784  0047C6  0E00               	movlw	0
  6785  0047C8  0100               	movlb	0	; () banked
  6786  0047CA  6F80               	movwf	___lldiv@dividend& (0+255),b
  6787  0047CC  0E48               	movlw	72
  6788  0047CE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6789  0047D0  0EE8               	movlw	232
  6790  0047D2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6791  0047D4  0E01               	movlw	1
  6792  0047D6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6793  0047D8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6794  0047DC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6795  0047E0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6796  0047E4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6797  0047E8  0E02               	movlw	2
  6798  0047EA                     u5135:
  6799  0047EA  90D8               	bcf	status,0,c
  6800  0047EC  0100               	movlb	0	; () banked
  6801  0047EE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6802  0047F0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6803  0047F2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6804  0047F4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6805  0047F6  2EE8               	decfsz	wreg,f,c
  6806  0047F8  D7F8               	goto	u5135
  6807  0047FA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6808  0047FE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6809  004802  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6810  004806  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6811  00480A  EC3D  F020         	call	___lldiv	;wreg free
  6812  00480E  0100               	movlb	0	; () banked
  6813  004810  0580               	decf	?___lldiv& (0+255),w,b
  6814  004812  6EC8               	movwf	4040,c	;volatile
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;I2C.c: 22: TRISC3 = 1;
  6818  004814  8694               	bsf	3988,3,c	;volatile
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;I2C.c: 23: TRISC4 = 1;
  6822  004816  8894               	bsf	3988,4,c	;volatile
  6823                           
  6824                           ; BSR set to: 0
  6825  004818  0012               	return		;funcret
  6826  00481A                     __end_of_I2C_Master_Init:
  6827                           	opt stack 0
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           intcon2	equ	0xFF1
  6836                           intcon3	equ	0xFF0
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           postdec1	equ	0xFE5
  6840                           fsr1l	equ	0xFE1
  6841                           indf2	equ	0xFDF
  6842                           postinc2	equ	0xFDE
  6843                           postdec2	equ	0xFDD
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function ___lldiv *****************
  6849 ;; Defined at:
  6850 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  dividend        4    0[BANK0 ] unsigned long 
  6853 ;;  divisor         4    4[BANK0 ] unsigned long 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  quotient        4    8[BANK0 ] unsigned long 
  6856 ;;  counter         1   12[BANK0 ] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  4    0[BANK0 ] unsigned long 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6866 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;Total ram usage:       13 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    7
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_I2C_Master_Init
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text19
  6881  00407A                     __ptext19:
  6882                           	opt stack 0
  6883  00407A                     ___lldiv:
  6884                           	opt stack 20
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;incstack = 0
  6888  00407A  0E00               	movlw	0
  6889  00407C  0100               	movlb	0	; () banked
  6890  00407E  6F88               	movwf	___lldiv@quotient& (0+255),b
  6891  004080  0E00               	movlw	0
  6892  004082  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6893  004084  0E00               	movlw	0
  6894  004086  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6895  004088  0E00               	movlw	0
  6896  00408A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899  00408C  0100               	movlb	0	; () banked
  6900  00408E  5184               	movf	___lldiv@divisor& (0+255),w,b
  6901  004090  0100               	movlb	0	; () banked
  6902  004092  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6903  004094  0100               	movlb	0	; () banked
  6904  004096  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6905  004098  0100               	movlb	0	; () banked
  6906  00409A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6907  00409C  B4D8               	btfsc	status,2,c
  6908  00409E  D042               	goto	l1762
  6909                           
  6910                           ; BSR set to: 0
  6911  0040A0  0E01               	movlw	1
  6912  0040A2  0100               	movlb	0	; () banked
  6913  0040A4  6F8C               	movwf	___lldiv@counter& (0+255),b
  6914  0040A6  D008               	goto	l6152
  6915  0040A8                     l6150:
  6916                           
  6917                           ; BSR set to: 0
  6918  0040A8  0100               	movlb	0	; () banked
  6919  0040AA  90D8               	bcf	status,0,c
  6920  0040AC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6921  0040AE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6922  0040B0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6923  0040B2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6924  0040B4  0100               	movlb	0	; () banked
  6925  0040B6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6926  0040B8                     l6152:
  6927                           
  6928                           ; BSR set to: 0
  6929  0040B8  0100               	movlb	0	; () banked
  6930  0040BA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6931  0040BC  D7F5               	goto	l6150
  6932  0040BE                     l6154:
  6933                           
  6934                           ; BSR set to: 0
  6935  0040BE  0100               	movlb	0	; () banked
  6936  0040C0  90D8               	bcf	status,0,c
  6937  0040C2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6938  0040C4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6939  0040C6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6940  0040C8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6941                           
  6942                           ; BSR set to: 0
  6943  0040CA  0100               	movlb	0	; () banked
  6944  0040CC  5184               	movf	___lldiv@divisor& (0+255),w,b
  6945  0040CE  0100               	movlb	0	; () banked
  6946  0040D0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6947  0040D2  0100               	movlb	0	; () banked
  6948  0040D4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6949  0040D6  0100               	movlb	0	; () banked
  6950  0040D8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6951  0040DA  0100               	movlb	0	; () banked
  6952  0040DC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6953  0040DE  0100               	movlb	0	; () banked
  6954  0040E0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6955  0040E2  0100               	movlb	0	; () banked
  6956  0040E4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6957  0040E6  0100               	movlb	0	; () banked
  6958  0040E8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6959  0040EA  A0D8               	btfss	status,0,c
  6960  0040EC  D012               	goto	l6162
  6961                           
  6962                           ; BSR set to: 0
  6963  0040EE  0100               	movlb	0	; () banked
  6964  0040F0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6965  0040F2  0100               	movlb	0	; () banked
  6966  0040F4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6967  0040F6  0100               	movlb	0	; () banked
  6968  0040F8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6969  0040FA  0100               	movlb	0	; () banked
  6970  0040FC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6971  0040FE  0100               	movlb	0	; () banked
  6972  004100  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6973  004102  0100               	movlb	0	; () banked
  6974  004104  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6975  004106  0100               	movlb	0	; () banked
  6976  004108  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6977  00410A  0100               	movlb	0	; () banked
  6978  00410C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6979                           
  6980                           ; BSR set to: 0
  6981  00410E  0100               	movlb	0	; () banked
  6982  004110  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6983  004112                     l6162:
  6984                           
  6985                           ; BSR set to: 0
  6986  004112  0100               	movlb	0	; () banked
  6987  004114  90D8               	bcf	status,0,c
  6988  004116  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6989  004118  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6990  00411A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6991  00411C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6992                           
  6993                           ; BSR set to: 0
  6994  00411E  0100               	movlb	0	; () banked
  6995  004120  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6996  004122  D7CD               	goto	l6154
  6997  004124                     l1762:
  6998                           
  6999                           ; BSR set to: 0
  7000  004124  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7001  004128  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7002  00412C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7003  004130  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7004                           
  7005                           ; BSR set to: 0
  7006  004134  0012               	return		;funcret
  7007  004136                     __end_of___lldiv:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           intcon2	equ	0xFF1
  7017                           intcon3	equ	0xFF0
  7018                           postinc0	equ	0xFEE
  7019                           wreg	equ	0xFE8
  7020                           postdec1	equ	0xFE5
  7021                           fsr1l	equ	0xFE1
  7022                           indf2	equ	0xFDF
  7023                           postinc2	equ	0xFDE
  7024                           postdec2	equ	0xFDD
  7025                           fsr2h	equ	0xFDA
  7026                           fsr2l	equ	0xFD9
  7027                           status	equ	0xFD8
  7028                           
  7029 ;; *************** function _change_state_to_menu_start *****************
  7030 ;; Defined at:
  7031 ;;		line 474 in file "UI.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;		None
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;		None
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  1    wreg      void 
  7038 ;; Registers used:
  7039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;Total ram usage:        0 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:   11
  7052 ;; This function calls:
  7053 ;;		_lcdInst
  7054 ;;		_printRTC
  7055 ;;		_printf
  7056 ;; This function is called by:
  7057 ;;		_initUI
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text20
  7062  004EBC                     __ptext20:
  7063                           	opt stack 0
  7064  004EBC                     _change_state_to_menu_start:
  7065                           	opt stack 18
  7066                           
  7067                           ;UI.c: 475: cur_state = 0;
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;incstack = 0
  7071  004EBC  0E00               	movlw	0
  7072  004EBE  0100               	movlb	0	; () banked
  7073  004EC0  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7074  004EC2  0E00               	movlw	0
  7075  004EC4  6FE6               	movwf	_cur_state& (0+255),b
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;UI.c: 477: lcdInst(0b10000000);;
  7079  004EC6  0E80               	movlw	128
  7080  004EC8  EC7D  F028         	call	_lcdInst
  7081                           
  7082                           ;UI.c: 478: printRTC();
  7083  004ECC  ECF8  F011         	call	_printRTC	;wreg free
  7084                           
  7085                           ;UI.c: 479: lcdInst(0b11000000);;
  7086  004ED0  0EC0               	movlw	192
  7087  004ED2  EC7D  F028         	call	_lcdInst
  7088                           
  7089                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7090  004ED6  0EF7               	movlw	low STR_30
  7091  004ED8  0100               	movlb	0	; () banked
  7092  004EDA  6F8E               	movwf	printf@f& (0+255),b
  7093  004EDC  0EFD               	movlw	high STR_30
  7094  004EDE  0100               	movlb	0	; () banked
  7095  004EE0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7096  004EE2  ECE4  F00A         	call	_printf	;wreg free
  7097  004EE6  0012               	return		;funcret
  7098  004EE8                     __end_of_change_state_to_menu_start:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           intcon2	equ	0xFF1
  7108                           intcon3	equ	0xFF0
  7109                           postinc0	equ	0xFEE
  7110                           wreg	equ	0xFE8
  7111                           postdec1	equ	0xFE5
  7112                           fsr1l	equ	0xFE1
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _initTime *****************
  7121 ;; Defined at:
  7122 ;;		line 17 in file "RTC.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  s               1    wreg     unsigned char 
  7125 ;;  m               1    0[BANK0 ] unsigned char 
  7126 ;;  h               1    1[BANK0 ] unsigned char 
  7127 ;;  w               1    2[BANK0 ] unsigned char 
  7128 ;;  DD              1    3[BANK0 ] unsigned char 
  7129 ;;  MM              1    4[BANK0 ] unsigned char 
  7130 ;;  YY              1    5[BANK0 ] unsigned char 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;  s               1    6[BANK0 ] unsigned char 
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      void 
  7135 ;; Registers used:
  7136 ;;		wreg
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7142 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;Total ram usage:        7 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    7
  7149 ;; This function calls:
  7150 ;;		Nothing
  7151 ;; This function is called by:
  7152 ;;		_main
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text21
  7157  005020                     __ptext21:
  7158                           	opt stack 0
  7159  005020                     _initTime:
  7160                           	opt stack 23
  7161                           
  7162                           ;incstack = 0
  7163                           ;initTime@s stored from wreg
  7164  005020  0100               	movlb	0	; () banked
  7165  005022  6F86               	movwf	initTime@s& (0+255),b
  7166                           
  7167                           ;RTC.c: 19: time[0] = s;
  7168  005024  C086  F124         	movff	initTime@s,_time
  7169                           
  7170                           ;RTC.c: 20: time[1] = m;
  7171  005028  C080  F125         	movff	initTime@m,_time+1
  7172                           
  7173                           ;RTC.c: 21: time[2] = h;
  7174  00502C  C081  F126         	movff	initTime@h,_time+2
  7175                           
  7176                           ;RTC.c: 22: time[3] = w;
  7177  005030  C082  F127         	movff	initTime@w,_time+3
  7178                           
  7179                           ;RTC.c: 23: time[4] = DD;
  7180  005034  C083  F128         	movff	initTime@DD,_time+4
  7181                           
  7182                           ;RTC.c: 24: time[5] = MM;
  7183  005038  C084  F129         	movff	initTime@MM,_time+5
  7184                           
  7185                           ;RTC.c: 25: time[6] = YY;
  7186  00503C  C085  F12A         	movff	initTime@YY,_time+6
  7187  005040  0012               	return		;funcret
  7188  005042                     __end_of_initTime:
  7189                           	opt stack 0
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           prodh	equ	0xFF4
  7195                           prodl	equ	0xFF3
  7196                           intcon	equ	0xFF2
  7197                           intcon2	equ	0xFF1
  7198                           intcon3	equ	0xFF0
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           postdec1	equ	0xFE5
  7202                           fsr1l	equ	0xFE1
  7203                           indf2	equ	0xFDF
  7204                           postinc2	equ	0xFDE
  7205                           postdec2	equ	0xFDD
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _initLCD *****************
  7211 ;; Defined at:
  7212 ;;		line 48 in file "lcd.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;Total ram usage:        1 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    9
  7233 ;; This function calls:
  7234 ;;		_lcdInst
  7235 ;; This function is called by:
  7236 ;;		_main
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text22
  7241  004ABA                     __ptext22:
  7242                           	opt stack 0
  7243  004ABA                     _initLCD:
  7244                           	opt stack 21
  7245                           
  7246                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7247                           
  7248                           ;incstack = 0
  7249  004ABA  0E9C               	movlw	156
  7250  004ABC  0100               	movlb	0	; () banked
  7251  004ABE  6F83               	movwf	??_initLCD& (0+255),b
  7252  004AC0  0ED7               	movlw	215
  7253  004AC2                     u8807:
  7254  004AC2  2EE8               	decfsz	wreg,f,c
  7255  004AC4  D7FE               	bra	u8807
  7256  004AC6  2F83               	decfsz	??_initLCD& (0+255),f,b
  7257  004AC8  D7FC               	bra	u8807
  7258                           
  7259                           ;lcd.c: 50: lcdInst(0b00110011);
  7260  004ACA  0E33               	movlw	51
  7261  004ACC  EC7D  F028         	call	_lcdInst
  7262                           
  7263                           ;lcd.c: 51: lcdInst(0b00110010);
  7264  004AD0  0E32               	movlw	50
  7265  004AD2  EC7D  F028         	call	_lcdInst
  7266                           
  7267                           ;lcd.c: 53: lcdInst(0b00101000);
  7268  004AD6  0E28               	movlw	40
  7269  004AD8  EC7D  F028         	call	_lcdInst
  7270                           
  7271                           ;lcd.c: 54: lcdInst(0b00001100);
  7272  004ADC  0E0C               	movlw	12
  7273  004ADE  EC7D  F028         	call	_lcdInst
  7274                           
  7275                           ;lcd.c: 55: lcdInst(0b00000110);
  7276  004AE2  0E06               	movlw	6
  7277  004AE4  EC7D  F028         	call	_lcdInst
  7278                           
  7279                           ;lcd.c: 56: lcdInst(0b00000001);
  7280  004AE8  0E01               	movlw	1
  7281  004AEA  EC7D  F028         	call	_lcdInst
  7282                           
  7283                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7284  004AEE  0E9C               	movlw	156
  7285  004AF0  0100               	movlb	0	; () banked
  7286  004AF2  6F83               	movwf	??_initLCD& (0+255),b
  7287  004AF4  0ED7               	movlw	215
  7288  004AF6                     u8817:
  7289  004AF6  2EE8               	decfsz	wreg,f,c
  7290  004AF8  D7FE               	bra	u8817
  7291  004AFA  2F83               	decfsz	??_initLCD& (0+255),f,b
  7292  004AFC  D7FC               	bra	u8817
  7293  004AFE  0012               	return		;funcret
  7294  004B00                     __end_of_initLCD:
  7295                           	opt stack 0
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           intcon3	equ	0xFF0
  7305                           postinc0	equ	0xFEE
  7306                           wreg	equ	0xFE8
  7307                           postdec1	equ	0xFE5
  7308                           fsr1l	equ	0xFE1
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function _UI *****************
  7317 ;; Defined at:
  7318 ;;		line 76 in file "UI.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;		None
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  i               1   73[BANK0 ] unsigned char 
  7323 ;;  i               1   85[BANK0 ] unsigned char 
  7324 ;;  i               1   84[BANK0 ] unsigned char 
  7325 ;;  i               1   83[BANK0 ] unsigned char 
  7326 ;;  i               1   82[BANK0 ] unsigned char 
  7327 ;;  i               1   81[BANK0 ] unsigned char 
  7328 ;;  i               1   80[BANK0 ] unsigned char 
  7329 ;;  i               1   79[BANK0 ] unsigned char 
  7330 ;;  i               1   78[BANK0 ] unsigned char 
  7331 ;;  i               1   77[BANK0 ] unsigned char 
  7332 ;;  i               1   76[BANK0 ] unsigned char 
  7333 ;;  i               1   75[BANK0 ] unsigned char 
  7334 ;;  i               1   74[BANK0 ] unsigned char 
  7335 ;;  month           4   86[BANK0 ] unsigned char [4]
  7336 ;;  i               1   72[BANK0 ] unsigned char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;Total ram usage:       22 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:   11
  7353 ;; This function calls:
  7354 ;;		___awdiv
  7355 ;;		___awmod
  7356 ;;		_change_state_to_menu_12
  7357 ;;		_change_state_to_menu_22
  7358 ;;		_lcdInst
  7359 ;;		_printRTC
  7360 ;;		_printf
  7361 ;;		_strcpy
  7362 ;; This function is called by:
  7363 ;;		_main
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text23
  7368  0008CA                     __ptext23:
  7369                           	opt stack 0
  7370  0008CA                     _UI:
  7371                           	opt stack 19
  7372                           
  7373                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7374                           
  7375                           ;incstack = 0
  7376  0008CA  0E02               	movlw	2
  7377  0008CC  0100               	movlb	0	; () banked
  7378  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7379  0008D0  A4D8               	btfss	status,2,c
  7380  0008D2  D075               	goto	l8242
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7384  0008D4  0E01               	movlw	1
  7385  0008D6  EC7D  F028         	call	_lcdInst
  7386  0008DA  0E68               	movlw	104
  7387  0008DC  0100               	movlb	0	; () banked
  7388  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7389  0008E0  0EE4               	movlw	228
  7390  0008E2                     u8827:
  7391  0008E2  2EE8               	decfsz	wreg,f,c
  7392  0008E4  D7FE               	bra	u8827
  7393  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7394  0008E8  D7FC               	bra	u8827
  7395  0008EA  F000               	nop	
  7396                           
  7397                           ;UI.c: 79: lcdInst(0b10000000);;
  7398  0008EC  0E80               	movlw	128
  7399  0008EE  EC7D  F028         	call	_lcdInst
  7400                           
  7401                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7402  0008F2  0EA3               	movlw	low STR_1
  7403  0008F4  0100               	movlb	0	; () banked
  7404  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7405  0008F8  0EFB               	movlw	high STR_1
  7406  0008FA  0100               	movlb	0	; () banked
  7407  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7408  0008FE  0E01               	movlw	1
  7409  000900  0100               	movlb	0	; () banked
  7410  000902  25FD               	addwf	_sel& (0+255),w,b
  7411  000904  0100               	movlb	0	; () banked
  7412  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7413  000908  0100               	movlb	0	; () banked
  7414  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7415  00090C  0E00               	movlw	0
  7416  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7417  000910  ECE4  F00A         	call	_printf	;wreg free
  7418                           
  7419                           ;UI.c: 81: lcdInst(0b11000000);;
  7420  000914  0EC0               	movlw	192
  7421  000916  EC7D  F028         	call	_lcdInst
  7422                           
  7423                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7424  00091A  0E0E               	movlw	14
  7425  00091C  0100               	movlb	0	; () banked
  7426  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7427  000920  0E10               	movlw	16
  7428  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7429  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7430  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7431  00092C  ECF0  F020         	call	___awmod	;wreg free
  7432  000930  C080  F0C6         	movff	?___awmod,_UI$2334
  7433  000934  C081  F0C7         	movff	?___awmod+1,_UI$2334+1
  7434                           
  7435                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7436  000938  0E27               	movlw	low STR_2
  7437  00093A  0100               	movlb	0	; () banked
  7438  00093C  6F8E               	movwf	printf@f& (0+255),b
  7439  00093E  0EFF               	movlw	high STR_2
  7440  000940  0100               	movlb	0	; () banked
  7441  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7442  000944  0E0E               	movlw	14
  7443  000946  0100               	movlb	0	; () banked
  7444  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7445  00094A  0E10               	movlw	16
  7446  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7447  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7448  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7449  000956  ECF0  F020         	call	___awmod	;wreg free
  7450  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7451  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7452  000962  0E00               	movlw	0
  7453  000964  0100               	movlb	0	; () banked
  7454  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7455  000968  0E3C               	movlw	60
  7456  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7457  00096C  ECDE  F01F         	call	___awdiv	;wreg free
  7458  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7459  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7460  000978  C0C6  F080         	movff	_UI$2334,___awmod@dividend
  7461  00097C  C0C7  F081         	movff	_UI$2334+1,___awmod@dividend+1
  7462  000980  0E00               	movlw	0
  7463  000982  0100               	movlb	0	; () banked
  7464  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7465  000986  0E3C               	movlw	60
  7466  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7467  00098A  ECF0  F020         	call	___awmod	;wreg free
  7468  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7469  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7470  000996  ECE4  F00A         	call	_printf	;wreg free
  7471                           
  7472                           ;UI.c: 83: machine_state = UI_state;
  7473  00099A  0E00               	movlw	0
  7474  00099C  0100               	movlb	0	; () banked
  7475  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7476  0009A0                     l180:
  7477  0009A0  A281               	btfss	3969,1,c	;volatile
  7478  0009A2  D7FE               	goto	l180
  7479                           
  7480                           ;UI.c: 86: }
  7481                           ;UI.c: 87: if(cur_state==12){
  7482  0009A4  0E0C               	movlw	12
  7483  0009A6  0100               	movlb	0	; () banked
  7484  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7485  0009AA  0100               	movlb	0	; () banked
  7486  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7487  0009AE  A4D8               	btfss	status,2,c
  7488  0009B0  D003               	goto	l8240
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;UI.c: 88: change_state_to_menu_12();
  7492  0009B2  ECBD  F025         	call	_change_state_to_menu_12	;wreg free
  7493                           
  7494                           ;UI.c: 89: }
  7495  0009B6  D3D5               	goto	l8562
  7496  0009B8                     l8240:
  7497                           
  7498                           ;UI.c: 90: else{
  7499                           ;UI.c: 91: change_state_to_menu_22();
  7500  0009B8  ECA1  F025         	call	_change_state_to_menu_22	;wreg free
  7501                           
  7502                           ;UI.c: 92: }
  7503                           ;UI.c: 93: }
  7504  0009BC  D3D2               	goto	l8562
  7505  0009BE                     l8242:
  7506                           
  7507                           ;UI.c: 94: else if(cur_state == 0){
  7508  0009BE  0100               	movlb	0	; () banked
  7509  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7510  0009C2  0100               	movlb	0	; () banked
  7511  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7512  0009C6  A4D8               	btfss	status,2,c
  7513  0009C8  D3CC               	goto	l8562
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7517  0009CA  0E00               	movlw	0
  7518  0009CC  0100               	movlb	0	; () banked
  7519  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7520  0009D0                     l8246:
  7521                           
  7522                           ; BSR set to: 0
  7523  0009D0  0E63               	movlw	99
  7524  0009D2  0100               	movlb	0	; () banked
  7525  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7526  0009D6  D001               	goto	l8250
  7527  0009D8  D00C               	goto	l8254
  7528  0009DA                     l8250:
  7529                           
  7530                           ; BSR set to: 0
  7531  0009DA  0E68               	movlw	104
  7532  0009DC  0100               	movlb	0	; () banked
  7533  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7534  0009E0  0EE4               	movlw	228
  7535  0009E2                     u8837:
  7536  0009E2  2EE8               	decfsz	wreg,f,c
  7537  0009E4  D7FE               	bra	u8837
  7538  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7539  0009E8  D7FC               	bra	u8837
  7540  0009EA  F000               	nop	
  7541  0009EC  0100               	movlb	0	; () banked
  7542  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7543  0009F0  D7EF               	goto	l8246
  7544  0009F2                     l8254:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;UI.c: 96: if(cur_state == 0){
  7548  0009F2  0100               	movlb	0	; () banked
  7549  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7550  0009F6  0100               	movlb	0	; () banked
  7551  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7552  0009FA  A4D8               	btfss	status,2,c
  7553  0009FC  D3B2               	goto	l8562
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;UI.c: 97: printRTC();
  7557  0009FE  ECF8  F011         	call	_printRTC	;wreg free
  7558                           
  7559                           ;UI.c: 98: }
  7560                           ;UI.c: 99: }
  7561                           ;UI.c: 100: while(logstate){
  7562  000A02  D3AF               	goto	l8562
  7563  000A04                     l8258:
  7564                           
  7565                           ;UI.c: 102: if(!log_completion){
  7566  000A04  0100               	movlb	0	; () banked
  7567  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7568  000A08  0100               	movlb	0	; () banked
  7569  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7570  000A0C  A4D8               	btfss	status,2,c
  7571  000A0E  D041               	goto	l8288
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7575  000A10  0E01               	movlw	1
  7576  000A12  EC7D  F028         	call	_lcdInst
  7577  000A16  0E68               	movlw	104
  7578  000A18  0100               	movlb	0	; () banked
  7579  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7580  000A1C  0EE4               	movlw	228
  7581  000A1E                     u8847:
  7582  000A1E  2EE8               	decfsz	wreg,f,c
  7583  000A20  D7FE               	bra	u8847
  7584  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7585  000A24  D7FC               	bra	u8847
  7586  000A26  F000               	nop	
  7587                           
  7588                           ;UI.c: 104: lcdInst(0b10000000);;
  7589  000A28  0E80               	movlw	128
  7590  000A2A  EC7D  F028         	call	_lcdInst
  7591                           
  7592                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7593  000A2E  0E91               	movlw	low STR_3
  7594  000A30  0100               	movlb	0	; () banked
  7595  000A32  6F8E               	movwf	printf@f& (0+255),b
  7596  000A34  0EFB               	movlw	high STR_3
  7597  000A36  0100               	movlb	0	; () banked
  7598  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7599  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7600  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7601  000A42  ECE4  F00A         	call	_printf	;wreg free
  7602                           
  7603                           ;UI.c: 106: lcdInst(0b11000000);;
  7604  000A46  0EC0               	movlw	192
  7605  000A48  EC7D  F028         	call	_lcdInst
  7606                           
  7607                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7608  000A4C  0E4A               	movlw	low STR_4
  7609  000A4E  0100               	movlb	0	; () banked
  7610  000A50  6F8E               	movwf	printf@f& (0+255),b
  7611  000A52  0EFE               	movlw	high STR_4
  7612  000A54  0100               	movlb	0	; () banked
  7613  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7614  000A58  ECE4  F00A         	call	_printf	;wreg free
  7615  000A5C                     l8272:
  7616  000A5C  0E00               	movlw	0
  7617  000A5E  0100               	movlb	0	; () banked
  7618  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7619  000A62                     l8274:
  7620                           
  7621                           ; BSR set to: 0
  7622  000A62  0E63               	movlw	99
  7623  000A64  0100               	movlb	0	; () banked
  7624  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7625  000A68  D001               	goto	l8278
  7626  000A6A  D00C               	goto	l8282
  7627  000A6C                     l8278:
  7628                           
  7629                           ; BSR set to: 0
  7630  000A6C  0E68               	movlw	104
  7631  000A6E  0100               	movlb	0	; () banked
  7632  000A70  6FC4               	movwf	??_UI& (0+255),b
  7633  000A72  0EE4               	movlw	228
  7634  000A74                     u8857:
  7635  000A74  2EE8               	decfsz	wreg,f,c
  7636  000A76  D7FE               	bra	u8857
  7637  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7638  000A7A  D7FC               	bra	u8857
  7639  000A7C  F000               	nop	
  7640  000A7E  0100               	movlb	0	; () banked
  7641  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7642  000A82  D7EF               	goto	l8274
  7643  000A84                     l8282:
  7644                           
  7645                           ; BSR set to: 0
  7646  000A84  0100               	movlb	0	; () banked
  7647  000A86  51F6               	movf	_logstate& (0+255),w,b
  7648  000A88  0100               	movlb	0	; () banked
  7649  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7650  000A8C  B4D8               	btfsc	status,2,c
  7651  000A8E  0012               	return	
  7652  000A90  D7E5               	goto	l8272
  7653  000A92                     l8288:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;UI.c: 111: else{
  7657                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7658  000A92  0E01               	movlw	1
  7659  000A94  EC7D  F028         	call	_lcdInst
  7660  000A98  0E68               	movlw	104
  7661  000A9A  0100               	movlb	0	; () banked
  7662  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7663  000A9E  0EE4               	movlw	228
  7664  000AA0                     u8867:
  7665  000AA0  2EE8               	decfsz	wreg,f,c
  7666  000AA2  D7FE               	bra	u8867
  7667  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7668  000AA6  D7FC               	bra	u8867
  7669  000AA8  F000               	nop	
  7670                           
  7671                           ;UI.c: 113: lcdInst(0b10000000);;
  7672  000AAA  0E80               	movlw	128
  7673  000AAC  EC7D  F028         	call	_lcdInst
  7674                           
  7675                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7676  000AB0  0E91               	movlw	low STR_3
  7677  000AB2  0100               	movlb	0	; () banked
  7678  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7679  000AB6  0EFB               	movlw	high STR_3
  7680  000AB8  0100               	movlb	0	; () banked
  7681  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7682  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7683  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7684  000AC4  ECE4  F00A         	call	_printf	;wreg free
  7685                           
  7686                           ;UI.c: 115: lcdInst(0b11000000);;
  7687  000AC8  0EC0               	movlw	192
  7688  000ACA  EC7D  F028         	call	_lcdInst
  7689                           
  7690                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7691  000ACE  0EE6               	movlw	low STR_6
  7692  000AD0  0100               	movlb	0	; () banked
  7693  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7694  000AD4  0EFD               	movlw	high STR_6
  7695  000AD6  0100               	movlb	0	; () banked
  7696  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7697  000ADA  ECE4  F00A         	call	_printf	;wreg free
  7698                           
  7699                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7700  000ADE  0E00               	movlw	0
  7701  000AE0  0100               	movlb	0	; () banked
  7702  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7703  000AE4                     l8302:
  7704                           
  7705                           ; BSR set to: 0
  7706  000AE4  0E63               	movlw	99
  7707  000AE6  0100               	movlb	0	; () banked
  7708  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7709  000AEA  D001               	goto	l8306
  7710  000AEC  D00C               	goto	l8310
  7711  000AEE                     l8306:
  7712                           
  7713                           ; BSR set to: 0
  7714  000AEE  0E68               	movlw	104
  7715  000AF0  0100               	movlb	0	; () banked
  7716  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7717  000AF4  0EE4               	movlw	228
  7718  000AF6                     u8877:
  7719  000AF6  2EE8               	decfsz	wreg,f,c
  7720  000AF8  D7FE               	bra	u8877
  7721  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7722  000AFC  D7FC               	bra	u8877
  7723  000AFE  F000               	nop	
  7724  000B00  0100               	movlb	0	; () banked
  7725  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7726  000B04  D7EF               	goto	l8302
  7727  000B06                     l8310:
  7728                           
  7729                           ; BSR set to: 0
  7730  000B06  0100               	movlb	0	; () banked
  7731  000B08  51F6               	movf	_logstate& (0+255),w,b
  7732  000B0A  0100               	movlb	0	; () banked
  7733  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7734  000B0E  B4D8               	btfsc	status,2,c
  7735  000B10  0012               	return	
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7739                           
  7740                           ; BSR set to: 0
  7741                           
  7742                           ; BSR set to: 0
  7743  000B12  0E00               	movlw	0
  7744  000B14  0100               	movlb	0	; () banked
  7745  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7746  000B18                     l8316:
  7747                           
  7748                           ; BSR set to: 0
  7749  000B18  0E63               	movlw	99
  7750  000B1A  0100               	movlb	0	; () banked
  7751  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7752  000B1E  D001               	goto	l8320
  7753  000B20  D00C               	goto	l8324
  7754  000B22                     l8320:
  7755                           
  7756                           ; BSR set to: 0
  7757  000B22  0E68               	movlw	104
  7758  000B24  0100               	movlb	0	; () banked
  7759  000B26  6FC4               	movwf	??_UI& (0+255),b
  7760  000B28  0EE4               	movlw	228
  7761  000B2A                     u8887:
  7762  000B2A  2EE8               	decfsz	wreg,f,c
  7763  000B2C  D7FE               	bra	u8887
  7764  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7765  000B30  D7FC               	bra	u8887
  7766  000B32  F000               	nop	
  7767  000B34  0100               	movlb	0	; () banked
  7768  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7769  000B38  D7EF               	goto	l8316
  7770  000B3A                     l8324:
  7771                           
  7772                           ; BSR set to: 0
  7773  000B3A  0100               	movlb	0	; () banked
  7774  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7775  000B3E  0100               	movlb	0	; () banked
  7776  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7777  000B42  B4D8               	btfsc	status,2,c
  7778  000B44  0012               	return	
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7782                           
  7783                           ; BSR set to: 0
  7784                           
  7785                           ; BSR set to: 0
  7786  000B46  0E01               	movlw	1
  7787  000B48  EC7D  F028         	call	_lcdInst
  7788  000B4C  0E68               	movlw	104
  7789  000B4E  0100               	movlb	0	; () banked
  7790  000B50  6FC4               	movwf	??_UI& (0+255),b
  7791  000B52  0EE4               	movlw	228
  7792  000B54                     u8897:
  7793  000B54  2EE8               	decfsz	wreg,f,c
  7794  000B56  D7FE               	bra	u8897
  7795  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7796  000B5A  D7FC               	bra	u8897
  7797  000B5C  F000               	nop	
  7798                           
  7799                           ;UI.c: 122: lcdInst(0b10000000);;
  7800  000B5E  0E80               	movlw	128
  7801  000B60  EC7D  F028         	call	_lcdInst
  7802                           
  7803                           ;UI.c: 123: printf("START:");
  7804  000B64  0EC4               	movlw	low STR_7
  7805  000B66  0100               	movlb	0	; () banked
  7806  000B68  6F8E               	movwf	printf@f& (0+255),b
  7807  000B6A  0EFF               	movlw	high STR_7
  7808  000B6C  0100               	movlb	0	; () banked
  7809  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7810  000B70  ECE4  F00A         	call	_printf	;wreg free
  7811                           
  7812                           ;UI.c: 124: lcdInst(0b11000000);;
  7813  000B74  0EC0               	movlw	192
  7814  000B76  EC7D  F028         	call	_lcdInst
  7815                           
  7816                           ;UI.c: 125: char month[] = "MMM";
  7817  000B7A  C137  F0D6         	movff	UI@F3228,UI@month
  7818  000B7E  C138  F0D7         	movff	UI@F3228+1,UI@month+1
  7819  000B82  C139  F0D8         	movff	UI@F3228+2,UI@month+2
  7820  000B86  C13A  F0D9         	movff	UI@F3228+3,UI@month+3
  7821                           
  7822                           ;UI.c: 126: switch(log_startTime[5]){
  7823  000B8A  D0C3               	goto	l8368
  7824  000B8C                     l8340:
  7825                           
  7826                           ;UI.c: 128: strcpy(month, "JAN");
  7827  000B8C  0ED6               	movlw	low UI@month
  7828  000B8E  0100               	movlb	0	; () banked
  7829  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7830  000B92  0E00               	movlw	high UI@month
  7831  000B94  0100               	movlb	0	; () banked
  7832  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7833  000B98  0EDB               	movlw	low STR_8
  7834  000B9A  0100               	movlb	0	; () banked
  7835  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7836  000B9E  0EFF               	movlw	high STR_8
  7837  000BA0  0100               	movlb	0	; () banked
  7838  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7839  000BA4  ECD9  F025         	call	_strcpy	;wreg free
  7840                           
  7841                           ;UI.c: 129: break;
  7842  000BA8  D0E6               	goto	l8370
  7843  000BAA                     l8342:
  7844                           
  7845                           ;UI.c: 131: strcpy(month, "FEB");
  7846  000BAA  0ED6               	movlw	low UI@month
  7847  000BAC  0100               	movlb	0	; () banked
  7848  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7849  000BB0  0E00               	movlw	high UI@month
  7850  000BB2  0100               	movlb	0	; () banked
  7851  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7852  000BB6  0ECB               	movlw	low STR_9
  7853  000BB8  0100               	movlb	0	; () banked
  7854  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7855  000BBC  0EFF               	movlw	high STR_9
  7856  000BBE  0100               	movlb	0	; () banked
  7857  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7858  000BC2  ECD9  F025         	call	_strcpy	;wreg free
  7859                           
  7860                           ;UI.c: 132: break;
  7861  000BC6  D0D7               	goto	l8370
  7862  000BC8                     l8344:
  7863                           
  7864                           ;UI.c: 134: strcpy(month, "MAR");
  7865  000BC8  0ED6               	movlw	low UI@month
  7866  000BCA  0100               	movlb	0	; () banked
  7867  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7868  000BCE  0E00               	movlw	high UI@month
  7869  000BD0  0100               	movlb	0	; () banked
  7870  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7871  000BD4  0EE7               	movlw	low STR_10
  7872  000BD6  0100               	movlb	0	; () banked
  7873  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7874  000BDA  0EFF               	movlw	high STR_10
  7875  000BDC  0100               	movlb	0	; () banked
  7876  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7877  000BE0  ECD9  F025         	call	_strcpy	;wreg free
  7878                           
  7879                           ;UI.c: 135: break;
  7880  000BE4  D0C8               	goto	l8370
  7881  000BE6                     l8346:
  7882                           
  7883                           ;UI.c: 137: strcpy(month, "APR");
  7884  000BE6  0ED6               	movlw	low UI@month
  7885  000BE8  0100               	movlb	0	; () banked
  7886  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7887  000BEC  0E00               	movlw	high UI@month
  7888  000BEE  0100               	movlb	0	; () banked
  7889  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7890  000BF2  0EEB               	movlw	low STR_11
  7891  000BF4  0100               	movlb	0	; () banked
  7892  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7893  000BF8  0EFF               	movlw	high STR_11
  7894  000BFA  0100               	movlb	0	; () banked
  7895  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7896  000BFE  ECD9  F025         	call	_strcpy	;wreg free
  7897                           
  7898                           ;UI.c: 138: break;
  7899  000C02  D0B9               	goto	l8370
  7900  000C04                     l8348:
  7901                           
  7902                           ;UI.c: 140: strcpy(month, "MAY");
  7903  000C04  0ED6               	movlw	low UI@month
  7904  000C06  0100               	movlb	0	; () banked
  7905  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7906  000C0A  0E00               	movlw	high UI@month
  7907  000C0C  0100               	movlb	0	; () banked
  7908  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7909  000C10  0EFB               	movlw	low STR_12
  7910  000C12  0100               	movlb	0	; () banked
  7911  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7912  000C16  0EFF               	movlw	high STR_12
  7913  000C18  0100               	movlb	0	; () banked
  7914  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7915  000C1C  ECD9  F025         	call	_strcpy	;wreg free
  7916                           
  7917                           ;UI.c: 141: break;
  7918  000C20  D0AA               	goto	l8370
  7919  000C22                     l8350:
  7920                           
  7921                           ;UI.c: 143: strcpy(month, "JUN");
  7922  000C22  0ED6               	movlw	low UI@month
  7923  000C24  0100               	movlb	0	; () banked
  7924  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7925  000C28  0E00               	movlw	high UI@month
  7926  000C2A  0100               	movlb	0	; () banked
  7927  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7928  000C2E  0EDF               	movlw	low STR_13
  7929  000C30  0100               	movlb	0	; () banked
  7930  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7931  000C34  0EFF               	movlw	high STR_13
  7932  000C36  0100               	movlb	0	; () banked
  7933  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7934  000C3A  ECD9  F025         	call	_strcpy	;wreg free
  7935                           
  7936                           ;UI.c: 144: break;
  7937  000C3E  D09B               	goto	l8370
  7938  000C40                     l8352:
  7939                           
  7940                           ;UI.c: 146: strcpy(month, "JUL");
  7941  000C40  0ED6               	movlw	low UI@month
  7942  000C42  0100               	movlb	0	; () banked
  7943  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7944  000C46  0E00               	movlw	high UI@month
  7945  000C48  0100               	movlb	0	; () banked
  7946  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7947  000C4C  0ED7               	movlw	low STR_14
  7948  000C4E  0100               	movlb	0	; () banked
  7949  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7950  000C52  0EFF               	movlw	high STR_14
  7951  000C54  0100               	movlb	0	; () banked
  7952  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7953  000C58  ECD9  F025         	call	_strcpy	;wreg free
  7954                           
  7955                           ;UI.c: 147: break;
  7956  000C5C  D08C               	goto	l8370
  7957  000C5E                     l8354:
  7958                           
  7959                           ;UI.c: 149: strcpy(month, "AUG");
  7960  000C5E  0ED6               	movlw	low UI@month
  7961  000C60  0100               	movlb	0	; () banked
  7962  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7963  000C64  0E00               	movlw	high UI@month
  7964  000C66  0100               	movlb	0	; () banked
  7965  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7966  000C6A  0ED3               	movlw	low STR_15
  7967  000C6C  0100               	movlb	0	; () banked
  7968  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7969  000C70  0EFF               	movlw	high STR_15
  7970  000C72  0100               	movlb	0	; () banked
  7971  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7972  000C76  ECD9  F025         	call	_strcpy	;wreg free
  7973                           
  7974                           ;UI.c: 150: break;
  7975  000C7A  D07D               	goto	l8370
  7976  000C7C                     l8356:
  7977                           
  7978                           ;UI.c: 152: strcpy(month, "SEP");
  7979  000C7C  0ED6               	movlw	low UI@month
  7980  000C7E  0100               	movlb	0	; () banked
  7981  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7982  000C82  0E00               	movlw	high UI@month
  7983  000C84  0100               	movlb	0	; () banked
  7984  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7985  000C88  0EE3               	movlw	low STR_16
  7986  000C8A  0100               	movlb	0	; () banked
  7987  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7988  000C8E  0EFF               	movlw	high STR_16
  7989  000C90  0100               	movlb	0	; () banked
  7990  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7991  000C94  ECD9  F025         	call	_strcpy	;wreg free
  7992                           
  7993                           ;UI.c: 153: break;
  7994  000C98  D06E               	goto	l8370
  7995  000C9A                     l8358:
  7996                           
  7997                           ;UI.c: 155: strcpy(month, "OCT");
  7998  000C9A  0ED6               	movlw	low UI@month
  7999  000C9C  0100               	movlb	0	; () banked
  8000  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  8001  000CA0  0E00               	movlw	high UI@month
  8002  000CA2  0100               	movlb	0	; () banked
  8003  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8004  000CA6  0EF3               	movlw	low STR_17
  8005  000CA8  0100               	movlb	0	; () banked
  8006  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  8007  000CAC  0EFF               	movlw	high STR_17
  8008  000CAE  0100               	movlb	0	; () banked
  8009  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8010  000CB2  ECD9  F025         	call	_strcpy	;wreg free
  8011                           
  8012                           ;UI.c: 156: break;
  8013  000CB6  D05F               	goto	l8370
  8014  000CB8                     l8360:
  8015                           
  8016                           ;UI.c: 158: strcpy(month, "NOV");
  8017  000CB8  0ED6               	movlw	low UI@month
  8018  000CBA  0100               	movlb	0	; () banked
  8019  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  8020  000CBE  0E00               	movlw	high UI@month
  8021  000CC0  0100               	movlb	0	; () banked
  8022  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8023  000CC4  0EF7               	movlw	low STR_18
  8024  000CC6  0100               	movlb	0	; () banked
  8025  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  8026  000CCA  0EFF               	movlw	high STR_18
  8027  000CCC  0100               	movlb	0	; () banked
  8028  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8029  000CD0  ECD9  F025         	call	_strcpy	;wreg free
  8030                           
  8031                           ;UI.c: 159: break;
  8032  000CD4  D050               	goto	l8370
  8033  000CD6                     l8362:
  8034                           
  8035                           ;UI.c: 161: strcpy(month, "DEC");
  8036  000CD6  0ED6               	movlw	low UI@month
  8037  000CD8  0100               	movlb	0	; () banked
  8038  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  8039  000CDC  0E00               	movlw	high UI@month
  8040  000CDE  0100               	movlb	0	; () banked
  8041  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8042  000CE2  0ECF               	movlw	low STR_19
  8043  000CE4  0100               	movlb	0	; () banked
  8044  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  8045  000CE8  0EFF               	movlw	high STR_19
  8046  000CEA  0100               	movlb	0	; () banked
  8047  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8048  000CEE  ECD9  F025         	call	_strcpy	;wreg free
  8049                           
  8050                           ;UI.c: 162: break;
  8051  000CF2  D041               	goto	l8370
  8052  000CF4                     l8364:
  8053                           
  8054                           ;UI.c: 164: strcpy(month, "ERR");
  8055  000CF4  0ED6               	movlw	low UI@month
  8056  000CF6  0100               	movlb	0	; () banked
  8057  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  8058  000CFA  0E00               	movlw	high UI@month
  8059  000CFC  0100               	movlb	0	; () banked
  8060  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8061  000D00  0EEF               	movlw	low STR_20
  8062  000D02  0100               	movlb	0	; () banked
  8063  000D04  6F82               	movwf	strcpy@from& (0+255),b
  8064  000D06  0EFF               	movlw	high STR_20
  8065  000D08  0100               	movlb	0	; () banked
  8066  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8067  000D0C  ECD9  F025         	call	_strcpy	;wreg free
  8068                           
  8069                           ;UI.c: 166: }
  8070                           
  8071                           ;UI.c: 165: break;
  8072  000D10  D032               	goto	l8370
  8073  000D12                     l8368:
  8074  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  8075  000D16  CFDE F0C4          	movff	postinc2,??_UI
  8076  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  8077                           
  8078                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8079                           ; Switch size 1, requested type "space"
  8080                           ; Number of cases is 1, Range of values is 0 to 0
  8081                           ; switch strategies available:
  8082                           ; Name         Instructions Cycles
  8083                           ; simple_byte            4     3 (average)
  8084                           ;	Chosen strategy is simple_byte
  8085  000D1E  0100               	movlb	0	; () banked
  8086  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  8087  000D22  0A00               	xorlw	0	; case 0
  8088  000D24  A4D8               	btfss	status,2,c
  8089  000D26  D7E6               	goto	l8364
  8090                           
  8091                           ; BSR set to: 0
  8092                           ; Switch size 1, requested type "space"
  8093                           ; Number of cases is 12, Range of values is 1 to 12
  8094                           ; switch strategies available:
  8095                           ; Name         Instructions Cycles
  8096                           ; simple_byte           37    19 (average)
  8097                           ;	Chosen strategy is simple_byte
  8098  000D28  0100               	movlb	0	; () banked
  8099  000D2A  51C4               	movf	??_UI& (0+255),w,b
  8100  000D2C  0A01               	xorlw	1	; case 1
  8101  000D2E  B4D8               	btfsc	status,2,c
  8102  000D30  D72D               	goto	l8340
  8103  000D32  0A03               	xorlw	3	; case 2
  8104  000D34  B4D8               	btfsc	status,2,c
  8105  000D36  D739               	goto	l8342
  8106  000D38  0A01               	xorlw	1	; case 3
  8107  000D3A  B4D8               	btfsc	status,2,c
  8108  000D3C  D745               	goto	l8344
  8109  000D3E  0A07               	xorlw	7	; case 4
  8110  000D40  B4D8               	btfsc	status,2,c
  8111  000D42  D751               	goto	l8346
  8112  000D44  0A01               	xorlw	1	; case 5
  8113  000D46  B4D8               	btfsc	status,2,c
  8114  000D48  D75D               	goto	l8348
  8115  000D4A  0A03               	xorlw	3	; case 6
  8116  000D4C  B4D8               	btfsc	status,2,c
  8117  000D4E  D769               	goto	l8350
  8118  000D50  0A01               	xorlw	1	; case 7
  8119  000D52  B4D8               	btfsc	status,2,c
  8120  000D54  D775               	goto	l8352
  8121  000D56  0A0F               	xorlw	15	; case 8
  8122  000D58  B4D8               	btfsc	status,2,c
  8123  000D5A  D781               	goto	l8354
  8124  000D5C  0A01               	xorlw	1	; case 9
  8125  000D5E  B4D8               	btfsc	status,2,c
  8126  000D60  D78D               	goto	l8356
  8127  000D62  0A03               	xorlw	3	; case 10
  8128  000D64  B4D8               	btfsc	status,2,c
  8129  000D66  D799               	goto	l8358
  8130  000D68  0A01               	xorlw	1	; case 11
  8131  000D6A  B4D8               	btfsc	status,2,c
  8132  000D6C  D7A5               	goto	l8360
  8133  000D6E  0A07               	xorlw	7	; case 12
  8134  000D70  B4D8               	btfsc	status,2,c
  8135  000D72  D7B1               	goto	l8362
  8136  000D74  D7BF               	goto	l8364
  8137  000D76                     l8370:
  8138                           
  8139                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8140  000D76  0E0A               	movlw	low STR_21
  8141  000D78  0100               	movlb	0	; () banked
  8142  000D7A  6F8E               	movwf	printf@f& (0+255),b
  8143  000D7C  0EFB               	movlw	high STR_21
  8144  000D7E  0100               	movlb	0	; () banked
  8145  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  8146  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  8147  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  8148  000D8A  0ED6               	movlw	low UI@month
  8149  000D8C  0100               	movlb	0	; () banked
  8150  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  8151  000D90  0E00               	movlw	high UI@month
  8152  000D92  0100               	movlb	0	; () banked
  8153  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  8154  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  8155  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  8156  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  8157  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  8158  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  8159  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  8160  000DAE  ECE4  F00A         	call	_printf	;wreg free
  8161                           
  8162                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8163  000DB2  0E00               	movlw	0
  8164  000DB4  0100               	movlb	0	; () banked
  8165  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  8166  000DB8                     l8374:
  8167                           
  8168                           ; BSR set to: 0
  8169  000DB8  0E63               	movlw	99
  8170  000DBA  0100               	movlb	0	; () banked
  8171  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  8172  000DBE  D001               	goto	l8378
  8173  000DC0  D00C               	goto	l8382
  8174  000DC2                     l8378:
  8175                           
  8176                           ; BSR set to: 0
  8177  000DC2  0E68               	movlw	104
  8178  000DC4  0100               	movlb	0	; () banked
  8179  000DC6  6FC4               	movwf	??_UI& (0+255),b
  8180  000DC8  0EE4               	movlw	228
  8181  000DCA                     u8907:
  8182  000DCA  2EE8               	decfsz	wreg,f,c
  8183  000DCC  D7FE               	bra	u8907
  8184  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  8185  000DD0  D7FC               	bra	u8907
  8186  000DD2  F000               	nop	
  8187  000DD4  0100               	movlb	0	; () banked
  8188  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  8189  000DD8  D7EF               	goto	l8374
  8190  000DDA                     l8382:
  8191                           
  8192                           ; BSR set to: 0
  8193  000DDA  0100               	movlb	0	; () banked
  8194  000DDC  51F6               	movf	_logstate& (0+255),w,b
  8195  000DDE  0100               	movlb	0	; () banked
  8196  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8197  000DE2  B4D8               	btfsc	status,2,c
  8198  000DE4  0012               	return	
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8202                           
  8203                           ; BSR set to: 0
  8204                           
  8205                           ; BSR set to: 0
  8206  000DE6  0E00               	movlw	0
  8207  000DE8  0100               	movlb	0	; () banked
  8208  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  8209  000DEC                     l8388:
  8210                           
  8211                           ; BSR set to: 0
  8212  000DEC  0E63               	movlw	99
  8213  000DEE  0100               	movlb	0	; () banked
  8214  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  8215  000DF2  D001               	goto	l8392
  8216  000DF4  D00C               	goto	l8396
  8217  000DF6                     l8392:
  8218                           
  8219                           ; BSR set to: 0
  8220  000DF6  0E68               	movlw	104
  8221  000DF8  0100               	movlb	0	; () banked
  8222  000DFA  6FC4               	movwf	??_UI& (0+255),b
  8223  000DFC  0EE4               	movlw	228
  8224  000DFE                     u8917:
  8225  000DFE  2EE8               	decfsz	wreg,f,c
  8226  000E00  D7FE               	bra	u8917
  8227  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  8228  000E04  D7FC               	bra	u8917
  8229  000E06  F000               	nop	
  8230  000E08  0100               	movlb	0	; () banked
  8231  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  8232  000E0C  D7EF               	goto	l8388
  8233  000E0E                     l8396:
  8234                           
  8235                           ; BSR set to: 0
  8236  000E0E  0100               	movlb	0	; () banked
  8237  000E10  51F6               	movf	_logstate& (0+255),w,b
  8238  000E12  0100               	movlb	0	; () banked
  8239  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8240  000E16  B4D8               	btfsc	status,2,c
  8241  000E18  0012               	return	
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8245                           
  8246                           ; BSR set to: 0
  8247                           
  8248                           ; BSR set to: 0
  8249  000E1A  0E01               	movlw	1
  8250  000E1C  EC7D  F028         	call	_lcdInst
  8251  000E20  0E68               	movlw	104
  8252  000E22  0100               	movlb	0	; () banked
  8253  000E24  6FC4               	movwf	??_UI& (0+255),b
  8254  000E26  0EE4               	movlw	228
  8255  000E28                     u8927:
  8256  000E28  2EE8               	decfsz	wreg,f,c
  8257  000E2A  D7FE               	bra	u8927
  8258  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  8259  000E2E  D7FC               	bra	u8927
  8260  000E30  F000               	nop	
  8261                           
  8262                           ;UI.c: 173: lcdInst(0b10000000);;
  8263  000E32  0E80               	movlw	128
  8264  000E34  EC7D  F028         	call	_lcdInst
  8265                           
  8266                           ;UI.c: 174: printf("DURATION:");
  8267  000E38  0E9B               	movlw	low STR_22
  8268  000E3A  0100               	movlb	0	; () banked
  8269  000E3C  6F8E               	movwf	printf@f& (0+255),b
  8270  000E3E  0EFF               	movlw	high STR_22
  8271  000E40  0100               	movlb	0	; () banked
  8272  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8273  000E44  ECE4  F00A         	call	_printf	;wreg free
  8274                           
  8275                           ;UI.c: 175: lcdInst(0b11000000);;
  8276  000E48  0EC0               	movlw	192
  8277  000E4A  EC7D  F028         	call	_lcdInst
  8278                           
  8279                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8280  000E4E  0E0E               	movlw	14
  8281  000E50  0100               	movlb	0	; () banked
  8282  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8283  000E54  0E10               	movlw	16
  8284  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  8285  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8286  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8287  000E60  ECF0  F020         	call	___awmod	;wreg free
  8288  000E64  C080  F0C6         	movff	?___awmod,_UI$2334
  8289  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2334+1
  8290                           
  8291                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8292  000E6C  0E19               	movlw	low STR_23
  8293  000E6E  0100               	movlb	0	; () banked
  8294  000E70  6F8E               	movwf	printf@f& (0+255),b
  8295  000E72  0EFF               	movlw	high STR_23
  8296  000E74  0100               	movlb	0	; () banked
  8297  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  8298  000E78  0E0E               	movlw	14
  8299  000E7A  0100               	movlb	0	; () banked
  8300  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8301  000E7E  0E10               	movlw	16
  8302  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  8303  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8304  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8305  000E8A  ECF0  F020         	call	___awmod	;wreg free
  8306  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  8307  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8308  000E96  0E00               	movlw	0
  8309  000E98  0100               	movlb	0	; () banked
  8310  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8311  000E9C  0E3C               	movlw	60
  8312  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  8313  000EA0  ECDE  F01F         	call	___awdiv	;wreg free
  8314  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  8315  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  8316  000EAC  C0C6  F080         	movff	_UI$2334,___awmod@dividend
  8317  000EB0  C0C7  F081         	movff	_UI$2334+1,___awmod@dividend+1
  8318  000EB4  0E00               	movlw	0
  8319  000EB6  0100               	movlb	0	; () banked
  8320  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8321  000EBA  0E3C               	movlw	60
  8322  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8323  000EBE  ECF0  F020         	call	___awmod	;wreg free
  8324  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  8325  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  8326  000ECA  ECE4  F00A         	call	_printf	;wreg free
  8327                           
  8328                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8329  000ECE  0E00               	movlw	0
  8330  000ED0  0100               	movlb	0	; () banked
  8331  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  8332  000ED4                     l8416:
  8333                           
  8334                           ; BSR set to: 0
  8335  000ED4  0E63               	movlw	99
  8336  000ED6  0100               	movlb	0	; () banked
  8337  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  8338  000EDA  D001               	goto	l8420
  8339  000EDC  D00C               	goto	l8424
  8340  000EDE                     l8420:
  8341                           
  8342                           ; BSR set to: 0
  8343  000EDE  0E68               	movlw	104
  8344  000EE0  0100               	movlb	0	; () banked
  8345  000EE2  6FC4               	movwf	??_UI& (0+255),b
  8346  000EE4  0EE4               	movlw	228
  8347  000EE6                     u8937:
  8348  000EE6  2EE8               	decfsz	wreg,f,c
  8349  000EE8  D7FE               	bra	u8937
  8350  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  8351  000EEC  D7FC               	bra	u8937
  8352  000EEE  F000               	nop	
  8353  000EF0  0100               	movlb	0	; () banked
  8354  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  8355  000EF4  D7EF               	goto	l8416
  8356  000EF6                     l8424:
  8357                           
  8358                           ; BSR set to: 0
  8359  000EF6  0100               	movlb	0	; () banked
  8360  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8361  000EFA  0100               	movlb	0	; () banked
  8362  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8363  000EFE  B4D8               	btfsc	status,2,c
  8364  000F00  0012               	return	
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8368                           
  8369                           ; BSR set to: 0
  8370                           
  8371                           ; BSR set to: 0
  8372  000F02  0E00               	movlw	0
  8373  000F04  0100               	movlb	0	; () banked
  8374  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8375  000F08                     l8430:
  8376                           
  8377                           ; BSR set to: 0
  8378  000F08  0E63               	movlw	99
  8379  000F0A  0100               	movlb	0	; () banked
  8380  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8381  000F0E  D001               	goto	l8434
  8382  000F10  D00C               	goto	l8438
  8383  000F12                     l8434:
  8384                           
  8385                           ; BSR set to: 0
  8386  000F12  0E68               	movlw	104
  8387  000F14  0100               	movlb	0	; () banked
  8388  000F16  6FC4               	movwf	??_UI& (0+255),b
  8389  000F18  0EE4               	movlw	228
  8390  000F1A                     u8947:
  8391  000F1A  2EE8               	decfsz	wreg,f,c
  8392  000F1C  D7FE               	bra	u8947
  8393  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8394  000F20  D7FC               	bra	u8947
  8395  000F22  F000               	nop	
  8396  000F24  0100               	movlb	0	; () banked
  8397  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8398  000F28  D7EF               	goto	l8430
  8399  000F2A                     l8438:
  8400                           
  8401                           ; BSR set to: 0
  8402  000F2A  0100               	movlb	0	; () banked
  8403  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8404  000F2E  0100               	movlb	0	; () banked
  8405  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8406  000F32  B4D8               	btfsc	status,2,c
  8407  000F34  0012               	return	
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8411                           
  8412                           ; BSR set to: 0
  8413                           
  8414                           ; BSR set to: 0
  8415  000F36  0E01               	movlw	1
  8416  000F38  EC7D  F028         	call	_lcdInst
  8417  000F3C  0E68               	movlw	104
  8418  000F3E  0100               	movlb	0	; () banked
  8419  000F40  6FC4               	movwf	??_UI& (0+255),b
  8420  000F42  0EE4               	movlw	228
  8421  000F44                     u8957:
  8422  000F44  2EE8               	decfsz	wreg,f,c
  8423  000F46  D7FE               	bra	u8957
  8424  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8425  000F4A  D7FC               	bra	u8957
  8426  000F4C  F000               	nop	
  8427                           
  8428                           ;UI.c: 182: lcdInst(0b10000000);;
  8429  000F4E  0E80               	movlw	128
  8430  000F50  EC7D  F028         	call	_lcdInst
  8431                           
  8432                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8433  000F54  0E3C               	movlw	low STR_24
  8434  000F56  0100               	movlb	0	; () banked
  8435  000F58  6F8E               	movwf	printf@f& (0+255),b
  8436  000F5A  0EFD               	movlw	high STR_24
  8437  000F5C  0100               	movlb	0	; () banked
  8438  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8439  000F60  ECE4  F00A         	call	_printf	;wreg free
  8440                           
  8441                           ;UI.c: 184: lcdInst(0b11000000);;
  8442  000F64  0EC0               	movlw	192
  8443  000F66  EC7D  F028         	call	_lcdInst
  8444                           
  8445                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8446  000F6A  0E19               	movlw	low STR_25
  8447  000F6C  0100               	movlb	0	; () banked
  8448  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8449  000F70  0EFE               	movlw	high STR_25
  8450  000F72  0100               	movlb	0	; () banked
  8451  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8452  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8453  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8454  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8455  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8456  000F86  ECE4  F00A         	call	_printf	;wreg free
  8457                           
  8458                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8459  000F8A  0E00               	movlw	0
  8460  000F8C  0100               	movlb	0	; () banked
  8461  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8462  000F90                     l8456:
  8463                           
  8464                           ; BSR set to: 0
  8465  000F90  0E63               	movlw	99
  8466  000F92  0100               	movlb	0	; () banked
  8467  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8468  000F96  D001               	goto	l8460
  8469  000F98  D00C               	goto	l8464
  8470  000F9A                     l8460:
  8471                           
  8472                           ; BSR set to: 0
  8473  000F9A  0E68               	movlw	104
  8474  000F9C  0100               	movlb	0	; () banked
  8475  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8476  000FA0  0EE4               	movlw	228
  8477  000FA2                     u8967:
  8478  000FA2  2EE8               	decfsz	wreg,f,c
  8479  000FA4  D7FE               	bra	u8967
  8480  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8481  000FA8  D7FC               	bra	u8967
  8482  000FAA  F000               	nop	
  8483  000FAC  0100               	movlb	0	; () banked
  8484  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8485  000FB0  D7EF               	goto	l8456
  8486  000FB2                     l8464:
  8487                           
  8488                           ; BSR set to: 0
  8489  000FB2  0100               	movlb	0	; () banked
  8490  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8491  000FB6  0100               	movlb	0	; () banked
  8492  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8493  000FBA  B4D8               	btfsc	status,2,c
  8494  000FBC  0012               	return	
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8498                           
  8499                           ; BSR set to: 0
  8500                           
  8501                           ; BSR set to: 0
  8502  000FBE  0E00               	movlw	0
  8503  000FC0  0100               	movlb	0	; () banked
  8504  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8505  000FC4                     l8470:
  8506                           
  8507                           ; BSR set to: 0
  8508  000FC4  0E63               	movlw	99
  8509  000FC6  0100               	movlb	0	; () banked
  8510  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8511  000FCA  D001               	goto	l8474
  8512  000FCC  D00C               	goto	l8478
  8513  000FCE                     l8474:
  8514                           
  8515                           ; BSR set to: 0
  8516  000FCE  0E68               	movlw	104
  8517  000FD0  0100               	movlb	0	; () banked
  8518  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8519  000FD4  0EE4               	movlw	228
  8520  000FD6                     u8977:
  8521  000FD6  2EE8               	decfsz	wreg,f,c
  8522  000FD8  D7FE               	bra	u8977
  8523  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8524  000FDC  D7FC               	bra	u8977
  8525  000FDE  F000               	nop	
  8526  000FE0  0100               	movlb	0	; () banked
  8527  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8528  000FE4  D7EF               	goto	l8470
  8529  000FE6                     l8478:
  8530                           
  8531                           ; BSR set to: 0
  8532  000FE6  0100               	movlb	0	; () banked
  8533  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8534  000FEA  0100               	movlb	0	; () banked
  8535  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8536  000FEE  B4D8               	btfsc	status,2,c
  8537  000FF0  0012               	return	
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8541                           
  8542                           ; BSR set to: 0
  8543                           
  8544                           ; BSR set to: 0
  8545  000FF2  0E01               	movlw	1
  8546  000FF4  EC7D  F028         	call	_lcdInst
  8547  000FF8  0E68               	movlw	104
  8548  000FFA  0100               	movlb	0	; () banked
  8549  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8550  000FFE  0EE4               	movlw	228
  8551  001000                     u8987:
  8552  001000  2EE8               	decfsz	wreg,f,c
  8553  001002  D7FE               	bra	u8987
  8554  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8555  001006  D7FC               	bra	u8987
  8556  001008  F000               	nop	
  8557                           
  8558                           ;UI.c: 191: lcdInst(0b10000000);;
  8559  00100A  0E80               	movlw	128
  8560  00100C  EC7D  F028         	call	_lcdInst
  8561                           
  8562                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8563  001010  0E4D               	movlw	low STR_26
  8564  001012  0100               	movlb	0	; () banked
  8565  001014  6F8E               	movwf	printf@f& (0+255),b
  8566  001016  0EFD               	movlw	high STR_26
  8567  001018  0100               	movlb	0	; () banked
  8568  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8569  00101C  ECE4  F00A         	call	_printf	;wreg free
  8570                           
  8571                           ;UI.c: 193: lcdInst(0b11000000);;
  8572  001020  0EC0               	movlw	192
  8573  001022  EC7D  F028         	call	_lcdInst
  8574                           
  8575                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8576  001026  0E08               	movlw	low STR_27
  8577  001028  0100               	movlb	0	; () banked
  8578  00102A  6F8E               	movwf	printf@f& (0+255),b
  8579  00102C  0EFE               	movlw	high STR_27
  8580  00102E  0100               	movlb	0	; () banked
  8581  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8582  001032  C06F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8583  001036  C070  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8584  00103A  C071  F092         	movff	_log_count_can_w_lab,?_printf+4
  8585  00103E  C072  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8586  001042  ECE4  F00A         	call	_printf	;wreg free
  8587                           
  8588                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8589  001046  0E00               	movlw	0
  8590  001048  0100               	movlb	0	; () banked
  8591  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8592  00104C                     l8496:
  8593                           
  8594                           ; BSR set to: 0
  8595  00104C  0E63               	movlw	99
  8596  00104E  0100               	movlb	0	; () banked
  8597  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8598  001052  D001               	goto	l8500
  8599  001054  D00C               	goto	l8504
  8600  001056                     l8500:
  8601                           
  8602                           ; BSR set to: 0
  8603  001056  0E68               	movlw	104
  8604  001058  0100               	movlb	0	; () banked
  8605  00105A  6FC4               	movwf	??_UI& (0+255),b
  8606  00105C  0EE4               	movlw	228
  8607  00105E                     u8997:
  8608  00105E  2EE8               	decfsz	wreg,f,c
  8609  001060  D7FE               	bra	u8997
  8610  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8611  001064  D7FC               	bra	u8997
  8612  001066  F000               	nop	
  8613  001068  0100               	movlb	0	; () banked
  8614  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8615  00106C  D7EF               	goto	l8496
  8616  00106E                     l8504:
  8617                           
  8618                           ; BSR set to: 0
  8619  00106E  0100               	movlb	0	; () banked
  8620  001070  51F6               	movf	_logstate& (0+255),w,b
  8621  001072  0100               	movlb	0	; () banked
  8622  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8623  001076  B4D8               	btfsc	status,2,c
  8624  001078  0012               	return	
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8628                           
  8629                           ; BSR set to: 0
  8630                           
  8631                           ; BSR set to: 0
  8632  00107A  0E00               	movlw	0
  8633  00107C  0100               	movlb	0	; () banked
  8634  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8635  001080                     l8510:
  8636                           
  8637                           ; BSR set to: 0
  8638  001080  0E63               	movlw	99
  8639  001082  0100               	movlb	0	; () banked
  8640  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8641  001086  D001               	goto	l8514
  8642  001088  D00C               	goto	l8518
  8643  00108A                     l8514:
  8644                           
  8645                           ; BSR set to: 0
  8646  00108A  0E68               	movlw	104
  8647  00108C  0100               	movlb	0	; () banked
  8648  00108E  6FC4               	movwf	??_UI& (0+255),b
  8649  001090  0EE4               	movlw	228
  8650  001092                     u9007:
  8651  001092  2EE8               	decfsz	wreg,f,c
  8652  001094  D7FE               	bra	u9007
  8653  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8654  001098  D7FC               	bra	u9007
  8655  00109A  F000               	nop	
  8656  00109C  0100               	movlb	0	; () banked
  8657  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8658  0010A0  D7EF               	goto	l8510
  8659  0010A2                     l8518:
  8660                           
  8661                           ; BSR set to: 0
  8662  0010A2  0100               	movlb	0	; () banked
  8663  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8664  0010A6  0100               	movlb	0	; () banked
  8665  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8666  0010AA  B4D8               	btfsc	status,2,c
  8667  0010AC  0012               	return	
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8671                           
  8672                           ; BSR set to: 0
  8673                           
  8674                           ; BSR set to: 0
  8675  0010AE  0E01               	movlw	1
  8676  0010B0  EC7D  F028         	call	_lcdInst
  8677  0010B4  0E68               	movlw	104
  8678  0010B6  0100               	movlb	0	; () banked
  8679  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8680  0010BA  0EE4               	movlw	228
  8681  0010BC                     u9017:
  8682  0010BC  2EE8               	decfsz	wreg,f,c
  8683  0010BE  D7FE               	bra	u9017
  8684  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8685  0010C2  D7FC               	bra	u9017
  8686  0010C4  F000               	nop	
  8687                           
  8688                           ;UI.c: 200: lcdInst(0b10000000);;
  8689  0010C6  0E80               	movlw	128
  8690  0010C8  EC7D  F028         	call	_lcdInst
  8691                           
  8692                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8693  0010CC  0E5E               	movlw	low STR_28
  8694  0010CE  0100               	movlb	0	; () banked
  8695  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8696  0010D2  0EFD               	movlw	high STR_28
  8697  0010D4  0100               	movlb	0	; () banked
  8698  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8699  0010D8  ECE4  F00A         	call	_printf	;wreg free
  8700                           
  8701                           ;UI.c: 202: lcdInst(0b11000000);;
  8702  0010DC  0EC0               	movlw	192
  8703  0010DE  EC7D  F028         	call	_lcdInst
  8704                           
  8705                           ;UI.c: 203: printf("%d", log_count_total);
  8706  0010E2  0E16               	movlw	low (STR_27+14)
  8707  0010E4  0100               	movlb	0	; () banked
  8708  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8709  0010E8  0EFE               	movlw	high (STR_27+14)
  8710  0010EA  0100               	movlb	0	; () banked
  8711  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8712  0010EE  C073  F090         	movff	_log_count_total,?_printf+2
  8713  0010F2  C074  F091         	movff	_log_count_total+1,?_printf+3
  8714  0010F6  ECE4  F00A         	call	_printf	;wreg free
  8715                           
  8716                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8717  0010FA  0E00               	movlw	0
  8718  0010FC  0100               	movlb	0	; () banked
  8719  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8720  001100                     l8536:
  8721                           
  8722                           ; BSR set to: 0
  8723  001100  0E63               	movlw	99
  8724  001102  0100               	movlb	0	; () banked
  8725  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8726  001106  D001               	goto	l8540
  8727  001108  D00C               	goto	l8544
  8728  00110A                     l8540:
  8729                           
  8730                           ; BSR set to: 0
  8731  00110A  0E68               	movlw	104
  8732  00110C  0100               	movlb	0	; () banked
  8733  00110E  6FC4               	movwf	??_UI& (0+255),b
  8734  001110  0EE4               	movlw	228
  8735  001112                     u9027:
  8736  001112  2EE8               	decfsz	wreg,f,c
  8737  001114  D7FE               	bra	u9027
  8738  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8739  001118  D7FC               	bra	u9027
  8740  00111A  F000               	nop	
  8741  00111C  0100               	movlb	0	; () banked
  8742  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8743  001120  D7EF               	goto	l8536
  8744  001122                     l8544:
  8745                           
  8746                           ; BSR set to: 0
  8747  001122  0100               	movlb	0	; () banked
  8748  001124  51F6               	movf	_logstate& (0+255),w,b
  8749  001126  0100               	movlb	0	; () banked
  8750  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8751  00112A  B4D8               	btfsc	status,2,c
  8752  00112C  0012               	return	
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8756                           
  8757                           ; BSR set to: 0
  8758                           
  8759                           ; BSR set to: 0
  8760  00112E  0E00               	movlw	0
  8761  001130  0100               	movlb	0	; () banked
  8762  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8763  001134                     l8550:
  8764                           
  8765                           ; BSR set to: 0
  8766  001134  0E63               	movlw	99
  8767  001136  0100               	movlb	0	; () banked
  8768  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8769  00113A  D001               	goto	l8554
  8770  00113C  D00C               	goto	l8558
  8771  00113E                     l8554:
  8772                           
  8773                           ; BSR set to: 0
  8774  00113E  0E68               	movlw	104
  8775  001140  0100               	movlb	0	; () banked
  8776  001142  6FC4               	movwf	??_UI& (0+255),b
  8777  001144  0EE4               	movlw	228
  8778  001146                     u9037:
  8779  001146  2EE8               	decfsz	wreg,f,c
  8780  001148  D7FE               	bra	u9037
  8781  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8782  00114C  D7FC               	bra	u9037
  8783  00114E  F000               	nop	
  8784  001150  0100               	movlb	0	; () banked
  8785  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8786  001154  D7EF               	goto	l8550
  8787  001156                     l8558:
  8788                           
  8789                           ; BSR set to: 0
  8790  001156  0100               	movlb	0	; () banked
  8791  001158  51F6               	movf	_logstate& (0+255),w,b
  8792  00115A  0100               	movlb	0	; () banked
  8793  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8794  00115E  B4D8               	btfsc	status,2,c
  8795  001160  0012               	return	
  8796  001162                     l8562:
  8797  001162  0100               	movlb	0	; () banked
  8798  001164  51F6               	movf	_logstate& (0+255),w,b
  8799  001166  0100               	movlb	0	; () banked
  8800  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8801  00116A  B4D8               	btfsc	status,2,c
  8802  00116C  0012               	return	
  8803  00116E  D44A               	goto	l8258
  8804  001170                     __end_of_UI:
  8805                           	opt stack 0
  8806                           tblptru	equ	0xFF8
  8807                           tblptrh	equ	0xFF7
  8808                           tblptrl	equ	0xFF6
  8809                           tablat	equ	0xFF5
  8810                           prodh	equ	0xFF4
  8811                           prodl	equ	0xFF3
  8812                           intcon	equ	0xFF2
  8813                           intcon2	equ	0xFF1
  8814                           intcon3	equ	0xFF0
  8815                           postinc0	equ	0xFEE
  8816                           wreg	equ	0xFE8
  8817                           postdec1	equ	0xFE5
  8818                           fsr1l	equ	0xFE1
  8819                           indf2	equ	0xFDF
  8820                           postinc2	equ	0xFDE
  8821                           postdec2	equ	0xFDD
  8822                           fsr2h	equ	0xFDA
  8823                           fsr2l	equ	0xFD9
  8824                           status	equ	0xFD8
  8825                           
  8826 ;; *************** function _printRTC *****************
  8827 ;; Defined at:
  8828 ;;		line 63 in file "RTC.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;		None
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  i               2   66[BANK0 ] int 
  8833 ;;  INT_time       14   46[BANK0 ] int [7]
  8834 ;;  month           4   62[BANK0 ] unsigned char [4]
  8835 ;;  RTC_month       2   60[BANK0 ] int 
  8836 ;; Return value:  Size  Location     Type
  8837 ;;                  1    wreg      void 
  8838 ;; Registers used:
  8839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;Total ram usage:       25 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:   10
  8852 ;; This function calls:
  8853 ;;		_getRTC
  8854 ;;		_lcdInst
  8855 ;;		_printf
  8856 ;;		_strcpy
  8857 ;; This function is called by:
  8858 ;;		_UI
  8859 ;;		_change_state_to_menu_start
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text24
  8864  0023F0                     __ptext24:
  8865                           	opt stack 0
  8866  0023F0                     _printRTC:
  8867                           	opt stack 18
  8868                           
  8869                           ;RTC.c: 64: getRTC();
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;incstack = 0
  8873  0023F0  EC87  F021         	call	_getRTC	;wreg free
  8874                           
  8875                           ;RTC.c: 65: char month[] = "MMM";
  8876  0023F4  C13B  F0BE         	movff	printRTC@F3219,printRTC@month
  8877  0023F8  C13C  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8878  0023FC  C13D  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8879  002400  C13E  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8880                           
  8881                           ;RTC.c: 66: int INT_time[7];
  8882                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8883  002404  0E00               	movlw	0
  8884  002406  0100               	movlb	0	; () banked
  8885  002408  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8886  00240A  0E00               	movlw	0
  8887  00240C  6FC2               	movwf	printRTC@i& (0+255),b
  8888                           
  8889                           ; BSR set to: 0
  8890  00240E  0100               	movlb	0	; () banked
  8891  002410  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8892  002412  D008               	goto	l6358
  8893  002414  0100               	movlb	0	; () banked
  8894  002416  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8895  002418  E146               	bnz	l606
  8896  00241A  0E07               	movlw	7
  8897  00241C  0100               	movlb	0	; () banked
  8898  00241E  5DC2               	subwf	printRTC@i& (0+255),w,b
  8899  002420  B0D8               	btfsc	status,0,c
  8900  002422  D041               	goto	l606
  8901  002424                     l6358:
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8905  002424  0E24               	movlw	low _time
  8906  002426  0100               	movlb	0	; () banked
  8907  002428  25C2               	addwf	printRTC@i& (0+255),w,b
  8908  00242A  6ED9               	movwf	fsr2l,c
  8909  00242C  0E01               	movlw	high _time
  8910  00242E  0100               	movlb	0	; () banked
  8911  002430  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8912  002432  6EDA               	movwf	fsr2h,c
  8913  002434  50DF               	movf	indf2,w,c
  8914  002436  0100               	movlb	0	; () banked
  8915  002438  6FAB               	movwf	??_printRTC& (0+255),b
  8916  00243A  0100               	movlb	0	; () banked
  8917  00243C  3BAB               	swapf	??_printRTC& (0+255),f,b
  8918  00243E  0E0F               	movlw	15
  8919  002440  17AB               	andwf	??_printRTC& (0+255),f,b
  8920  002442  0E0F               	movlw	15
  8921  002444  0100               	movlb	0	; () banked
  8922  002446  17AB               	andwf	??_printRTC& (0+255),f,b
  8923  002448  0100               	movlb	0	; () banked
  8924  00244A  51AB               	movf	??_printRTC& (0+255),w,b
  8925  00244C  0D0A               	mullw	10
  8926  00244E  0E24               	movlw	low _time
  8927  002450  0100               	movlb	0	; () banked
  8928  002452  25C2               	addwf	printRTC@i& (0+255),w,b
  8929  002454  6ED9               	movwf	fsr2l,c
  8930  002456  0E01               	movlw	high _time
  8931  002458  0100               	movlb	0	; () banked
  8932  00245A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8933  00245C  6EDA               	movwf	fsr2h,c
  8934  00245E  50DF               	movf	indf2,w,c
  8935  002460  0B0F               	andlw	15
  8936  002462  0100               	movlb	0	; () banked
  8937  002464  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8938  002466  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8939  002468  50F3               	movf	prodl,w,c
  8940  00246A  0100               	movlb	0	; () banked
  8941  00246C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8942  00246E  50F4               	movf	prodh,w,c
  8943  002470  0100               	movlb	0	; () banked
  8944  002472  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8945  002474  90D8               	bcf	status,0,c
  8946  002476  0100               	movlb	0	; () banked
  8947  002478  35C2               	rlcf	printRTC@i& (0+255),w,b
  8948  00247A  6ED9               	movwf	fsr2l,c
  8949  00247C  0100               	movlb	0	; () banked
  8950  00247E  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8951  002480  6EDA               	movwf	fsr2h,c
  8952  002482  0EAE               	movlw	low printRTC@INT_time
  8953  002484  26D9               	addwf	fsr2l,f,c
  8954  002486  0E00               	movlw	high printRTC@INT_time
  8955  002488  22DA               	addwfc	fsr2h,f,c
  8956  00248A  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8957  00248E  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8958                           
  8959                           ; BSR set to: 0
  8960  002492  0100               	movlb	0	; () banked
  8961  002494  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8962  002496  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8963                           
  8964                           ; BSR set to: 0
  8965  002498  0100               	movlb	0	; () banked
  8966  00249A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8967  00249C  D7C3               	goto	l6358
  8968  00249E  0100               	movlb	0	; () banked
  8969  0024A0  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8970  0024A2  E101               	bnz	u5150
  8971  0024A4  D7BA               	goto	L9
  8972  0024A6                     u5150:
  8973  0024A6                     l606:
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;RTC.c: 69: }
  8977                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8978  0024A6  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8979  0024AA  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8980                           
  8981                           ;RTC.c: 71: switch(RTC_month){
  8982  0024AE  D0B4               	goto	l6390
  8983  0024B0                     l6364:
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;RTC.c: 73: strcpy(month, "JAN");
  8987  0024B0  0EBE               	movlw	low printRTC@month
  8988  0024B2  0100               	movlb	0	; () banked
  8989  0024B4  6F80               	movwf	strcpy@to& (0+255),b
  8990  0024B6  0E00               	movlw	high printRTC@month
  8991  0024B8  0100               	movlb	0	; () banked
  8992  0024BA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8993  0024BC  0EDB               	movlw	low STR_8
  8994  0024BE  0100               	movlb	0	; () banked
  8995  0024C0  6F82               	movwf	strcpy@from& (0+255),b
  8996  0024C2  0EFF               	movlw	high STR_8
  8997  0024C4  0100               	movlb	0	; () banked
  8998  0024C6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8999  0024C8  ECD9  F025         	call	_strcpy	;wreg free
  9000                           
  9001                           ;RTC.c: 74: break;
  9002  0024CC  D0D4               	goto	l6392
  9003  0024CE                     l6366:
  9004                           
  9005                           ;RTC.c: 76: strcpy(month, "FEB");
  9006  0024CE  0EBE               	movlw	low printRTC@month
  9007  0024D0  0100               	movlb	0	; () banked
  9008  0024D2  6F80               	movwf	strcpy@to& (0+255),b
  9009  0024D4  0E00               	movlw	high printRTC@month
  9010  0024D6  0100               	movlb	0	; () banked
  9011  0024D8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9012  0024DA  0ECB               	movlw	low STR_9
  9013  0024DC  0100               	movlb	0	; () banked
  9014  0024DE  6F82               	movwf	strcpy@from& (0+255),b
  9015  0024E0  0EFF               	movlw	high STR_9
  9016  0024E2  0100               	movlb	0	; () banked
  9017  0024E4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9018  0024E6  ECD9  F025         	call	_strcpy	;wreg free
  9019                           
  9020                           ;RTC.c: 77: break;
  9021  0024EA  D0C5               	goto	l6392
  9022  0024EC                     l6368:
  9023                           
  9024                           ;RTC.c: 79: strcpy(month, "MAR");
  9025  0024EC  0EBE               	movlw	low printRTC@month
  9026  0024EE  0100               	movlb	0	; () banked
  9027  0024F0  6F80               	movwf	strcpy@to& (0+255),b
  9028  0024F2  0E00               	movlw	high printRTC@month
  9029  0024F4  0100               	movlb	0	; () banked
  9030  0024F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9031  0024F8  0EE7               	movlw	low STR_10
  9032  0024FA  0100               	movlb	0	; () banked
  9033  0024FC  6F82               	movwf	strcpy@from& (0+255),b
  9034  0024FE  0EFF               	movlw	high STR_10
  9035  002500  0100               	movlb	0	; () banked
  9036  002502  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9037  002504  ECD9  F025         	call	_strcpy	;wreg free
  9038                           
  9039                           ;RTC.c: 80: break;
  9040  002508  D0B6               	goto	l6392
  9041  00250A                     l6370:
  9042                           
  9043                           ;RTC.c: 82: strcpy(month, "APR");
  9044  00250A  0EBE               	movlw	low printRTC@month
  9045  00250C  0100               	movlb	0	; () banked
  9046  00250E  6F80               	movwf	strcpy@to& (0+255),b
  9047  002510  0E00               	movlw	high printRTC@month
  9048  002512  0100               	movlb	0	; () banked
  9049  002514  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9050  002516  0EEB               	movlw	low STR_11
  9051  002518  0100               	movlb	0	; () banked
  9052  00251A  6F82               	movwf	strcpy@from& (0+255),b
  9053  00251C  0EFF               	movlw	high STR_11
  9054  00251E  0100               	movlb	0	; () banked
  9055  002520  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9056  002522  ECD9  F025         	call	_strcpy	;wreg free
  9057                           
  9058                           ;RTC.c: 83: break;
  9059  002526  D0A7               	goto	l6392
  9060  002528                     l6372:
  9061                           
  9062                           ;RTC.c: 85: strcpy(month, "MAY");
  9063  002528  0EBE               	movlw	low printRTC@month
  9064  00252A  0100               	movlb	0	; () banked
  9065  00252C  6F80               	movwf	strcpy@to& (0+255),b
  9066  00252E  0E00               	movlw	high printRTC@month
  9067  002530  0100               	movlb	0	; () banked
  9068  002532  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9069  002534  0EFB               	movlw	low STR_12
  9070  002536  0100               	movlb	0	; () banked
  9071  002538  6F82               	movwf	strcpy@from& (0+255),b
  9072  00253A  0EFF               	movlw	high STR_12
  9073  00253C  0100               	movlb	0	; () banked
  9074  00253E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9075  002540  ECD9  F025         	call	_strcpy	;wreg free
  9076                           
  9077                           ;RTC.c: 86: break;
  9078  002544  D098               	goto	l6392
  9079  002546                     l6374:
  9080                           
  9081                           ;RTC.c: 88: strcpy(month, "JUN");
  9082  002546  0EBE               	movlw	low printRTC@month
  9083  002548  0100               	movlb	0	; () banked
  9084  00254A  6F80               	movwf	strcpy@to& (0+255),b
  9085  00254C  0E00               	movlw	high printRTC@month
  9086  00254E  0100               	movlb	0	; () banked
  9087  002550  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9088  002552  0EDF               	movlw	low STR_13
  9089  002554  0100               	movlb	0	; () banked
  9090  002556  6F82               	movwf	strcpy@from& (0+255),b
  9091  002558  0EFF               	movlw	high STR_13
  9092  00255A  0100               	movlb	0	; () banked
  9093  00255C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9094  00255E  ECD9  F025         	call	_strcpy	;wreg free
  9095                           
  9096                           ;RTC.c: 89: break;
  9097  002562  D089               	goto	l6392
  9098  002564                     l6376:
  9099                           
  9100                           ;RTC.c: 91: strcpy(month, "JUL");
  9101  002564  0EBE               	movlw	low printRTC@month
  9102  002566  0100               	movlb	0	; () banked
  9103  002568  6F80               	movwf	strcpy@to& (0+255),b
  9104  00256A  0E00               	movlw	high printRTC@month
  9105  00256C  0100               	movlb	0	; () banked
  9106  00256E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9107  002570  0ED7               	movlw	low STR_14
  9108  002572  0100               	movlb	0	; () banked
  9109  002574  6F82               	movwf	strcpy@from& (0+255),b
  9110  002576  0EFF               	movlw	high STR_14
  9111  002578  0100               	movlb	0	; () banked
  9112  00257A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9113  00257C  ECD9  F025         	call	_strcpy	;wreg free
  9114                           
  9115                           ;RTC.c: 92: break;
  9116  002580  D07A               	goto	l6392
  9117  002582                     l6378:
  9118                           
  9119                           ;RTC.c: 94: strcpy(month, "AUG");
  9120  002582  0EBE               	movlw	low printRTC@month
  9121  002584  0100               	movlb	0	; () banked
  9122  002586  6F80               	movwf	strcpy@to& (0+255),b
  9123  002588  0E00               	movlw	high printRTC@month
  9124  00258A  0100               	movlb	0	; () banked
  9125  00258C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9126  00258E  0ED3               	movlw	low STR_15
  9127  002590  0100               	movlb	0	; () banked
  9128  002592  6F82               	movwf	strcpy@from& (0+255),b
  9129  002594  0EFF               	movlw	high STR_15
  9130  002596  0100               	movlb	0	; () banked
  9131  002598  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9132  00259A  ECD9  F025         	call	_strcpy	;wreg free
  9133                           
  9134                           ;RTC.c: 95: break;
  9135  00259E  D06B               	goto	l6392
  9136  0025A0                     l6380:
  9137                           
  9138                           ;RTC.c: 97: strcpy(month, "SEP");
  9139  0025A0  0EBE               	movlw	low printRTC@month
  9140  0025A2  0100               	movlb	0	; () banked
  9141  0025A4  6F80               	movwf	strcpy@to& (0+255),b
  9142  0025A6  0E00               	movlw	high printRTC@month
  9143  0025A8  0100               	movlb	0	; () banked
  9144  0025AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9145  0025AC  0EE3               	movlw	low STR_16
  9146  0025AE  0100               	movlb	0	; () banked
  9147  0025B0  6F82               	movwf	strcpy@from& (0+255),b
  9148  0025B2  0EFF               	movlw	high STR_16
  9149  0025B4  0100               	movlb	0	; () banked
  9150  0025B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9151  0025B8  ECD9  F025         	call	_strcpy	;wreg free
  9152                           
  9153                           ;RTC.c: 98: break;
  9154  0025BC  D05C               	goto	l6392
  9155  0025BE                     l6382:
  9156                           
  9157                           ;RTC.c: 100: strcpy(month, "OCT");
  9158  0025BE  0EBE               	movlw	low printRTC@month
  9159  0025C0  0100               	movlb	0	; () banked
  9160  0025C2  6F80               	movwf	strcpy@to& (0+255),b
  9161  0025C4  0E00               	movlw	high printRTC@month
  9162  0025C6  0100               	movlb	0	; () banked
  9163  0025C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9164  0025CA  0EF3               	movlw	low STR_17
  9165  0025CC  0100               	movlb	0	; () banked
  9166  0025CE  6F82               	movwf	strcpy@from& (0+255),b
  9167  0025D0  0EFF               	movlw	high STR_17
  9168  0025D2  0100               	movlb	0	; () banked
  9169  0025D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9170  0025D6  ECD9  F025         	call	_strcpy	;wreg free
  9171                           
  9172                           ;RTC.c: 101: break;
  9173  0025DA  D04D               	goto	l6392
  9174  0025DC                     l6384:
  9175                           
  9176                           ;RTC.c: 103: strcpy(month, "NOV");
  9177  0025DC  0EBE               	movlw	low printRTC@month
  9178  0025DE  0100               	movlb	0	; () banked
  9179  0025E0  6F80               	movwf	strcpy@to& (0+255),b
  9180  0025E2  0E00               	movlw	high printRTC@month
  9181  0025E4  0100               	movlb	0	; () banked
  9182  0025E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9183  0025E8  0EF7               	movlw	low STR_18
  9184  0025EA  0100               	movlb	0	; () banked
  9185  0025EC  6F82               	movwf	strcpy@from& (0+255),b
  9186  0025EE  0EFF               	movlw	high STR_18
  9187  0025F0  0100               	movlb	0	; () banked
  9188  0025F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9189  0025F4  ECD9  F025         	call	_strcpy	;wreg free
  9190                           
  9191                           ;RTC.c: 104: break;
  9192  0025F8  D03E               	goto	l6392
  9193  0025FA                     l6386:
  9194                           
  9195                           ;RTC.c: 106: strcpy(month, "DEC");
  9196  0025FA  0EBE               	movlw	low printRTC@month
  9197  0025FC  0100               	movlb	0	; () banked
  9198  0025FE  6F80               	movwf	strcpy@to& (0+255),b
  9199  002600  0E00               	movlw	high printRTC@month
  9200  002602  0100               	movlb	0	; () banked
  9201  002604  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9202  002606  0ECF               	movlw	low STR_19
  9203  002608  0100               	movlb	0	; () banked
  9204  00260A  6F82               	movwf	strcpy@from& (0+255),b
  9205  00260C  0EFF               	movlw	high STR_19
  9206  00260E  0100               	movlb	0	; () banked
  9207  002610  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9208  002612  ECD9  F025         	call	_strcpy	;wreg free
  9209                           
  9210                           ;RTC.c: 108: }
  9211                           
  9212                           ;RTC.c: 107: break;
  9213  002616  D02F               	goto	l6392
  9214  002618                     l6390:
  9215  002618  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9216  00261C  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9217                           
  9218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9219                           ; Switch size 1, requested type "space"
  9220                           ; Number of cases is 1, Range of values is 0 to 0
  9221                           ; switch strategies available:
  9222                           ; Name         Instructions Cycles
  9223                           ; simple_byte            4     3 (average)
  9224                           ;	Chosen strategy is simple_byte
  9225  002620  0100               	movlb	0	; () banked
  9226  002622  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9227  002624  0A00               	xorlw	0	; case 0
  9228  002626  A4D8               	btfss	status,2,c
  9229  002628  D026               	goto	l6392
  9230                           
  9231                           ; BSR set to: 0
  9232                           ; Switch size 1, requested type "space"
  9233                           ; Number of cases is 12, Range of values is 1 to 12
  9234                           ; switch strategies available:
  9235                           ; Name         Instructions Cycles
  9236                           ; simple_byte           37    19 (average)
  9237                           ;	Chosen strategy is simple_byte
  9238  00262A  0100               	movlb	0	; () banked
  9239  00262C  51AB               	movf	??_printRTC& (0+255),w,b
  9240  00262E  0A01               	xorlw	1	; case 1
  9241  002630  B4D8               	btfsc	status,2,c
  9242  002632  D73E               	goto	l6364
  9243  002634  0A03               	xorlw	3	; case 2
  9244  002636  B4D8               	btfsc	status,2,c
  9245  002638  D74A               	goto	l6366
  9246  00263A  0A01               	xorlw	1	; case 3
  9247  00263C  B4D8               	btfsc	status,2,c
  9248  00263E  D756               	goto	l6368
  9249  002640  0A07               	xorlw	7	; case 4
  9250  002642  B4D8               	btfsc	status,2,c
  9251  002644  D762               	goto	l6370
  9252  002646  0A01               	xorlw	1	; case 5
  9253  002648  B4D8               	btfsc	status,2,c
  9254  00264A  D76E               	goto	l6372
  9255  00264C  0A03               	xorlw	3	; case 6
  9256  00264E  B4D8               	btfsc	status,2,c
  9257  002650  D77A               	goto	l6374
  9258  002652  0A01               	xorlw	1	; case 7
  9259  002654  B4D8               	btfsc	status,2,c
  9260  002656  D786               	goto	l6376
  9261  002658  0A0F               	xorlw	15	; case 8
  9262  00265A  B4D8               	btfsc	status,2,c
  9263  00265C  D792               	goto	l6378
  9264  00265E  0A01               	xorlw	1	; case 9
  9265  002660  B4D8               	btfsc	status,2,c
  9266  002662  D79E               	goto	l6380
  9267  002664  0A03               	xorlw	3	; case 10
  9268  002666  B4D8               	btfsc	status,2,c
  9269  002668  D7AA               	goto	l6382
  9270  00266A  0A01               	xorlw	1	; case 11
  9271  00266C  B4D8               	btfsc	status,2,c
  9272  00266E  D7B6               	goto	l6384
  9273  002670  0A07               	xorlw	7	; case 12
  9274  002672  B4D8               	btfsc	status,2,c
  9275  002674  D7C2               	goto	l6386
  9276  002676                     l6392:
  9277                           
  9278                           ;RTC.c: 109: lcdInst(0b10000000);;
  9279  002676  0E80               	movlw	128
  9280  002678  EC7D  F028         	call	_lcdInst
  9281                           
  9282                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9283  00267C  0E0A               	movlw	low STR_21
  9284  00267E  0100               	movlb	0	; () banked
  9285  002680  6F8E               	movwf	printf@f& (0+255),b
  9286  002682  0EFB               	movlw	high STR_21
  9287  002684  0100               	movlb	0	; () banked
  9288  002686  6F8F               	movwf	(printf@f+1)& (0+255),b
  9289  002688  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9290  00268C  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9291  002690  0EBE               	movlw	low printRTC@month
  9292  002692  0100               	movlb	0	; () banked
  9293  002694  6F92               	movwf	(?_printf+4)& (0+255),b
  9294  002696  0E00               	movlw	high printRTC@month
  9295  002698  0100               	movlb	0	; () banked
  9296  00269A  6F93               	movwf	(?_printf+5)& (0+255),b
  9297  00269C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9298  0026A0  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9299  0026A4  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9300  0026A8  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9301  0026AC  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9302  0026B0  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9303  0026B4  ECE4  F00A         	call	_printf	;wreg free
  9304  0026B8  0012               	return		;funcret
  9305  0026BA                     __end_of_printRTC:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           intcon3	equ	0xFF0
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _strcpy *****************
  9328 ;; Defined at:
  9329 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9332 ;;		 -> printRTC@month(4), UI@month(4), 
  9333 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9334 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9335 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9336 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9337 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9338 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9339 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9340 ;;		 -> STR_8(4), 
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9343 ;;		 -> printRTC@month(4), UI@month(4), 
  9344 ;; Return value:  Size  Location     Type
  9345 ;;                  2    0[BANK0 ] PTR unsigned char 
  9346 ;; Registers used:
  9347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;Total ram usage:        6 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    7
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_UI
  9364 ;;		_printRTC
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text25
  9369  004BB2                     __ptext25:
  9370                           	opt stack 0
  9371  004BB2                     _strcpy:
  9372                           	opt stack 20
  9373                           
  9374                           ;incstack = 0
  9375  004BB2  C080  F084         	movff	strcpy@to,strcpy@cp
  9376  004BB6  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9377  004BBA  D006               	goto	l6102
  9378  004BBC                     l6100:
  9379  004BBC  0100               	movlb	0	; () banked
  9380  004BBE  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9381  004BC0  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9382  004BC2  0100               	movlb	0	; () banked
  9383  004BC4  4B82               	infsnz	strcpy@from& (0+255),f,b
  9384  004BC6  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9385  004BC8                     l6102:
  9386  004BC8  C082  FFF6         	movff	strcpy@from,tblptrl
  9387  004BCC  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9388  004BD0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9389  004BD0  6AF8               	clrf	tblptru,c
  9390  004BD2                     	endif
  9391  004BD2                     	if	0	;tblptru may be non-zero
  9392  004BD2                     	endif
  9393  004BD2  C084  FFD9         	movff	strcpy@cp,fsr2l
  9394  004BD6  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9395  004BDA  0008               	tblrd		*
  9396  004BDC  CFF5 FFDF          	movff	tablat,indf2
  9397  004BE0  50DF               	movf	indf2,w,c
  9398  004BE2  B4D8               	btfsc	status,2,c
  9399  004BE4  0012               	return	
  9400  004BE6  D7EA               	goto	l6100
  9401  004BE8                     __end_of_strcpy:
  9402                           	opt stack 0
  9403                           tblptru	equ	0xFF8
  9404                           tblptrh	equ	0xFF7
  9405                           tblptrl	equ	0xFF6
  9406                           tablat	equ	0xFF5
  9407                           prodh	equ	0xFF4
  9408                           prodl	equ	0xFF3
  9409                           intcon	equ	0xFF2
  9410                           intcon2	equ	0xFF1
  9411                           intcon3	equ	0xFF0
  9412                           postinc0	equ	0xFEE
  9413                           wreg	equ	0xFE8
  9414                           postdec1	equ	0xFE5
  9415                           fsr1l	equ	0xFE1
  9416                           indf2	equ	0xFDF
  9417                           postinc2	equ	0xFDE
  9418                           postdec2	equ	0xFDD
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function _getRTC *****************
  9424 ;; Defined at:
  9425 ;;		line 44 in file "RTC.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  i               2    3[BANK0 ] int 
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;Total ram usage:        2 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    9
  9446 ;; This function calls:
  9447 ;;		_I2C_Master_Read
  9448 ;;		_I2C_Master_Start
  9449 ;;		_I2C_Master_Stop
  9450 ;;		_I2C_Master_Write
  9451 ;; This function is called by:
  9452 ;;		_printRTC
  9453 ;;		_initSortTimer
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	text26
  9458  00430E                     __ptext26:
  9459                           	opt stack 0
  9460  00430E                     _getRTC:
  9461                           	opt stack 18
  9462                           
  9463                           ;RTC.c: 48: I2C_Master_Start();
  9464                           
  9465                           ;incstack = 0
  9466  00430E  ECA3  F028         	call	_I2C_Master_Start	;wreg free
  9467                           
  9468                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9469  004312  0E00               	movlw	0
  9470  004314  0100               	movlb	0	; () banked
  9471  004316  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9472  004318  0ED0               	movlw	208
  9473  00431A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9474  00431C  EC91  F028         	call	_I2C_Master_Write	;wreg free
  9475                           
  9476                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9477  004320  0E00               	movlw	0
  9478  004322  0100               	movlb	0	; () banked
  9479  004324  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9480  004326  0E00               	movlw	0
  9481  004328  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9482  00432A  EC91  F028         	call	_I2C_Master_Write	;wreg free
  9483                           
  9484                           ;RTC.c: 51: I2C_Master_Stop();
  9485  00432E  EC9F  F028         	call	_I2C_Master_Stop	;wreg free
  9486                           
  9487                           ;RTC.c: 54: I2C_Master_Start();
  9488  004332  ECA3  F028         	call	_I2C_Master_Start	;wreg free
  9489                           
  9490                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9491  004336  0E00               	movlw	0
  9492  004338  0100               	movlb	0	; () banked
  9493  00433A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9494  00433C  0ED1               	movlw	209
  9495  00433E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9496  004340  EC91  F028         	call	_I2C_Master_Write	;wreg free
  9497                           
  9498                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9499  004344  0E00               	movlw	0
  9500  004346  0100               	movlb	0	; () banked
  9501  004348  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9502  00434A  0E00               	movlw	0
  9503  00434C  6F83               	movwf	getRTC@i& (0+255),b
  9504  00434E                     l6108:
  9505                           
  9506                           ; BSR set to: 0
  9507  00434E  0100               	movlb	0	; () banked
  9508  004350  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9509  004352  D008               	goto	l6112
  9510  004354  0100               	movlb	0	; () banked
  9511  004356  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9512  004358  E115               	bnz	l6118
  9513  00435A  0E06               	movlw	6
  9514  00435C  0100               	movlb	0	; () banked
  9515  00435E  5D83               	subwf	getRTC@i& (0+255),w,b
  9516  004360  B0D8               	btfsc	status,0,c
  9517  004362  D010               	goto	l6118
  9518  004364                     l6112:
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9522  004364  0E24               	movlw	low _time
  9523  004366  0100               	movlb	0	; () banked
  9524  004368  2583               	addwf	getRTC@i& (0+255),w,b
  9525  00436A  6ED9               	movwf	fsr2l,c
  9526  00436C  0E01               	movlw	high _time
  9527  00436E  0100               	movlb	0	; () banked
  9528  004370  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9529  004372  6EDA               	movwf	fsr2h,c
  9530  004374  0E01               	movlw	1
  9531  004376  EC30  F027         	call	_I2C_Master_Read
  9532  00437A  6EDF               	movwf	indf2,c
  9533  00437C  0100               	movlb	0	; () banked
  9534  00437E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9535  004380  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9536  004382  D7E5               	goto	l6108
  9537  004384                     l6118:
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;RTC.c: 58: }
  9541                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9542  004384  0E00               	movlw	0
  9543  004386  EC30  F027         	call	_I2C_Master_Read
  9544  00438A  0101               	movlb	1	; () banked
  9545  00438C  6F2A               	movwf	(_time+6)& (0+255),b
  9546                           
  9547                           ;RTC.c: 60: I2C_Master_Stop();
  9548  00438E  EC9F  F028         	call	_I2C_Master_Stop	;wreg free
  9549  004392  0012               	return		;funcret
  9550  004394                     __end_of_getRTC:
  9551                           	opt stack 0
  9552                           tblptru	equ	0xFF8
  9553                           tblptrh	equ	0xFF7
  9554                           tblptrl	equ	0xFF6
  9555                           tablat	equ	0xFF5
  9556                           prodh	equ	0xFF4
  9557                           prodl	equ	0xFF3
  9558                           intcon	equ	0xFF2
  9559                           intcon2	equ	0xFF1
  9560                           intcon3	equ	0xFF0
  9561                           postinc0	equ	0xFEE
  9562                           wreg	equ	0xFE8
  9563                           postdec1	equ	0xFE5
  9564                           fsr1l	equ	0xFE1
  9565                           indf2	equ	0xFDF
  9566                           postinc2	equ	0xFDE
  9567                           postdec2	equ	0xFDD
  9568                           fsr2h	equ	0xFDA
  9569                           fsr2l	equ	0xFD9
  9570                           status	equ	0xFD8
  9571                           
  9572 ;; *************** function _I2C_Master_Write *****************
  9573 ;; Defined at:
  9574 ;;		line 49 in file "I2C.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  d               2    1[BANK0 ] unsigned int 
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;		None
  9579 ;; Return value:  Size  Location     Type
  9580 ;;                  1    wreg      void 
  9581 ;; Registers used:
  9582 ;;		wreg, status,2, status,0, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9588 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9592 ;;Total ram usage:        2 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    8
  9595 ;; This function calls:
  9596 ;;		_I2C_Master_Wait
  9597 ;; This function is called by:
  9598 ;;		_loadRTC
  9599 ;;		_getRTC
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           	psect	text27
  9604  005122                     __ptext27:
  9605                           	opt stack 0
  9606  005122                     _I2C_Master_Write:
  9607                           	opt stack 18
  9608                           
  9609                           ;I2C.c: 51: I2C_Master_Wait();
  9610                           
  9611                           ;incstack = 0
  9612  005122  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9613                           
  9614                           ;I2C.c: 52: SSPBUF = d;
  9615  005126  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9616  00512A  0012               	return		;funcret
  9617  00512C                     __end_of_I2C_Master_Write:
  9618                           	opt stack 0
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           intcon2	equ	0xFF1
  9627                           intcon3	equ	0xFF0
  9628                           postinc0	equ	0xFEE
  9629                           wreg	equ	0xFE8
  9630                           postdec1	equ	0xFE5
  9631                           fsr1l	equ	0xFE1
  9632                           indf2	equ	0xFDF
  9633                           postinc2	equ	0xFDE
  9634                           postdec2	equ	0xFDD
  9635                           fsr2h	equ	0xFDA
  9636                           fsr2l	equ	0xFD9
  9637                           status	equ	0xFD8
  9638                           
  9639 ;; *************** function _I2C_Master_Stop *****************
  9640 ;; Defined at:
  9641 ;;		line 43 in file "I2C.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      void 
  9648 ;; Registers used:
  9649 ;;		wreg, status,2, status,0, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;Total ram usage:        0 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    8
  9662 ;; This function calls:
  9663 ;;		_I2C_Master_Wait
  9664 ;; This function is called by:
  9665 ;;		_loadRTC
  9666 ;;		_getRTC
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text28
  9671  00513E                     __ptext28:
  9672                           	opt stack 0
  9673  00513E                     _I2C_Master_Stop:
  9674                           	opt stack 18
  9675                           
  9676                           ;I2C.c: 45: I2C_Master_Wait();
  9677                           
  9678                           ;incstack = 0
  9679  00513E  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9680                           
  9681                           ;I2C.c: 46: PEN = 1;
  9682  005142  84C5               	bsf	4037,2,c	;volatile
  9683  005144  0012               	return		;funcret
  9684  005146                     __end_of_I2C_Master_Stop:
  9685                           	opt stack 0
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           intcon	equ	0xFF2
  9693                           intcon2	equ	0xFF1
  9694                           intcon3	equ	0xFF0
  9695                           postinc0	equ	0xFEE
  9696                           wreg	equ	0xFE8
  9697                           postdec1	equ	0xFE5
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706 ;; *************** function _I2C_Master_Start *****************
  9707 ;; Defined at:
  9708 ;;		line 31 in file "I2C.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg, status,2, status,0, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;Total ram usage:        0 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    8
  9729 ;; This function calls:
  9730 ;;		_I2C_Master_Wait
  9731 ;; This function is called by:
  9732 ;;		_loadRTC
  9733 ;;		_getRTC
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text29
  9738  005146                     __ptext29:
  9739                           	opt stack 0
  9740  005146                     _I2C_Master_Start:
  9741                           	opt stack 18
  9742                           
  9743                           ;I2C.c: 33: I2C_Master_Wait();
  9744                           
  9745                           ;incstack = 0
  9746  005146  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9747                           
  9748                           ;I2C.c: 34: SEN = 1;
  9749  00514A  80C5               	bsf	4037,0,c	;volatile
  9750  00514C  0012               	return		;funcret
  9751  00514E                     __end_of_I2C_Master_Start:
  9752                           	opt stack 0
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           intcon	equ	0xFF2
  9760                           intcon2	equ	0xFF1
  9761                           intcon3	equ	0xFF0
  9762                           postinc0	equ	0xFEE
  9763                           wreg	equ	0xFE8
  9764                           postdec1	equ	0xFE5
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _I2C_Master_Read *****************
  9774 ;; Defined at:
  9775 ;;		line 55 in file "I2C.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;  a               1    wreg     unsigned char 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  a               1    1[BANK0 ] unsigned char 
  9780 ;;  temp            1    2[BANK0 ] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  1    wreg      unsigned char 
  9783 ;; Registers used:
  9784 ;;		wreg, status,2, status,0, cstack
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;Total ram usage:        2 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    8
  9797 ;; This function calls:
  9798 ;;		_I2C_Master_Wait
  9799 ;; This function is called by:
  9800 ;;		_getRTC
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text30
  9805  004E60                     __ptext30:
  9806                           	opt stack 0
  9807  004E60                     _I2C_Master_Read:
  9808                           	opt stack 18
  9809                           
  9810                           ;incstack = 0
  9811                           ;I2C_Master_Read@a stored from wreg
  9812  004E60  0100               	movlb	0	; () banked
  9813  004E62  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9814                           
  9815                           ;I2C.c: 57: unsigned char temp;
  9816                           ;I2C.c: 58: I2C_Master_Wait();
  9817  004E64  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9818                           
  9819                           ;I2C.c: 59: RCEN = 1;
  9820  004E68  86C5               	bsf	4037,3,c	;volatile
  9821                           
  9822                           ;I2C.c: 60: I2C_Master_Wait();
  9823  004E6A  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9824                           
  9825                           ;I2C.c: 61: temp = SSPBUF;
  9826  004E6E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9827                           
  9828                           ;I2C.c: 62: I2C_Master_Wait();
  9829  004E72  EC62  F028         	call	_I2C_Master_Wait	;wreg free
  9830                           
  9831                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9832  004E76  0100               	movlb	0	; () banked
  9833  004E78  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9834  004E7A  0100               	movlb	0	; () banked
  9835  004E7C  A4D8               	btfss	status,2,c
  9836  004E7E  D002               	goto	u4240
  9837  004E80  8AC5               	bsf	4037,5,c	;volatile
  9838  004E82  D001               	goto	l5796
  9839  004E84                     u4240:
  9840  004E84  9AC5               	bcf	4037,5,c	;volatile
  9841  004E86                     l5796:
  9842                           
  9843                           ;I2C.c: 64: ACKEN = 1;
  9844  004E86  88C5               	bsf	4037,4,c	;volatile
  9845                           
  9846                           ;I2C.c: 65: return temp;
  9847  004E88  0100               	movlb	0	; () banked
  9848  004E8A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9849  004E8C  0012               	return	
  9850  004E8E                     __end_of_I2C_Master_Read:
  9851                           	opt stack 0
  9852                           tblptru	equ	0xFF8
  9853                           tblptrh	equ	0xFF7
  9854                           tblptrl	equ	0xFF6
  9855                           tablat	equ	0xFF5
  9856                           prodh	equ	0xFF4
  9857                           prodl	equ	0xFF3
  9858                           intcon	equ	0xFF2
  9859                           intcon2	equ	0xFF1
  9860                           intcon3	equ	0xFF0
  9861                           postinc0	equ	0xFEE
  9862                           wreg	equ	0xFE8
  9863                           postdec1	equ	0xFE5
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           postinc2	equ	0xFDE
  9867                           postdec2	equ	0xFDD
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872 ;; *************** function _I2C_Master_Wait *****************
  9873 ;; Defined at:
  9874 ;;		line 26 in file "I2C.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;		None
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  1    wreg      void 
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;Total ram usage:        1 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    7
  9895 ;; This function calls:
  9896 ;;		Nothing
  9897 ;; This function is called by:
  9898 ;;		_I2C_Master_Start
  9899 ;;		_I2C_Master_Stop
  9900 ;;		_I2C_Master_Write
  9901 ;;		_I2C_Master_Read
  9902 ;;		_I2C_Master_RepeatedStart
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text31
  9907  0050C4                     __ptext31:
  9908                           	opt stack 0
  9909  0050C4                     _I2C_Master_Wait:
  9910                           	opt stack 18
  9911  0050C4                     l66:
  9912  0050C4  B4C7               	btfsc	4039,2,c	;volatile
  9913  0050C6  D7FE               	goto	l66
  9914  0050C8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9915  0050CC  0E1F               	movlw	31
  9916  0050CE  0100               	movlb	0	; () banked
  9917  0050D0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9918  0050D2  B4D8               	btfsc	status,2,c
  9919  0050D4  0012               	return	
  9920  0050D6  D7F6               	goto	l66
  9921  0050D8                     __end_of_I2C_Master_Wait:
  9922                           	opt stack 0
  9923                           tblptru	equ	0xFF8
  9924                           tblptrh	equ	0xFF7
  9925                           tblptrl	equ	0xFF6
  9926                           tablat	equ	0xFF5
  9927                           prodh	equ	0xFF4
  9928                           prodl	equ	0xFF3
  9929                           intcon	equ	0xFF2
  9930                           intcon2	equ	0xFF1
  9931                           intcon3	equ	0xFF0
  9932                           postinc0	equ	0xFEE
  9933                           wreg	equ	0xFE8
  9934                           postdec1	equ	0xFE5
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _change_state_to_menu_22 *****************
  9944 ;; Defined at:
  9945 ;;		line 498 in file "UI.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;		None
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;		None
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  1    wreg      void 
  9952 ;; Registers used:
  9953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;Total ram usage:        0 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:   10
  9966 ;; This function calls:
  9967 ;;		_lcdInst
  9968 ;;		_printf
  9969 ;; This function is called by:
  9970 ;;		_UI
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text32
  9975  004B42                     __ptext32:
  9976                           	opt stack 0
  9977  004B42                     _change_state_to_menu_22:
  9978                           	opt stack 19
  9979                           
  9980                           ;UI.c: 499: cur_state = 22;
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;incstack = 0
  9984  004B42  0E00               	movlw	0
  9985  004B44  0100               	movlb	0	; () banked
  9986  004B46  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9987  004B48  0E16               	movlw	22
  9988  004B4A  6FE6               	movwf	_cur_state& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;UI.c: 501: lcdInst(0b10000000);;
  9992  004B4C  0E80               	movlw	128
  9993  004B4E  EC7D  F028         	call	_lcdInst
  9994                           
  9995                           ;UI.c: 502: printf("2. SORT        <");
  9996  004B52  0EC4               	movlw	low STR_34
  9997  004B54  0100               	movlb	0	; () banked
  9998  004B56  6F8E               	movwf	printf@f& (0+255),b
  9999  004B58  0EFD               	movlw	high STR_34
 10000  004B5A  0100               	movlb	0	; () banked
 10001  004B5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10002  004B5E  ECE4  F00A         	call	_printf	;wreg free
 10003                           
 10004                           ;UI.c: 503: lcdInst(0b11000000);;
 10005  004B62  0EC0               	movlw	192
 10006  004B64  EC7D  F028         	call	_lcdInst
 10007                           
 10008                           ;UI.c: 504: printf("3. LOGS         ");
 10009  004B68  0E09               	movlw	low STR_36
 10010  004B6A  0100               	movlb	0	; () banked
 10011  004B6C  6F8E               	movwf	printf@f& (0+255),b
 10012  004B6E  0EFD               	movlw	high STR_36
 10013  004B70  0100               	movlb	0	; () banked
 10014  004B72  6F8F               	movwf	(printf@f+1)& (0+255),b
 10015  004B74  ECE4  F00A         	call	_printf	;wreg free
 10016  004B78  0012               	return		;funcret
 10017  004B7A                     __end_of_change_state_to_menu_22:
 10018                           	opt stack 0
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           intcon2	equ	0xFF1
 10027                           intcon3	equ	0xFF0
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postdec1	equ	0xFE5
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           fsr2h	equ	0xFDA
 10036                           fsr2l	equ	0xFD9
 10037                           status	equ	0xFD8
 10038                           
 10039 ;; *************** function _change_state_to_menu_12 *****************
 10040 ;; Defined at:
 10041 ;;		line 490 in file "UI.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;		None
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;Total ram usage:        0 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:   10
 10062 ;; This function calls:
 10063 ;;		_lcdInst
 10064 ;;		_printf
 10065 ;; This function is called by:
 10066 ;;		_UI
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           	psect	text33
 10071  004B7A                     __ptext33:
 10072                           	opt stack 0
 10073  004B7A                     _change_state_to_menu_12:
 10074                           	opt stack 19
 10075                           
 10076                           ;UI.c: 491: cur_state = 12;
 10077                           
 10078                           ;incstack = 0
 10079  004B7A  0E00               	movlw	0
 10080  004B7C  0100               	movlb	0	; () banked
 10081  004B7E  6FE7               	movwf	(_cur_state+1)& (0+255),b
 10082  004B80  0E0C               	movlw	12
 10083  004B82  6FE6               	movwf	_cur_state& (0+255),b
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;UI.c: 493: lcdInst(0b10000000);;
 10087  004B84  0E80               	movlw	128
 10088  004B86  EC7D  F028         	call	_lcdInst
 10089                           
 10090                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10091  004B8A  0E2B               	movlw	low STR_33
 10092  004B8C  0100               	movlb	0	; () banked
 10093  004B8E  6F8E               	movwf	printf@f& (0+255),b
 10094  004B90  0EFD               	movlw	high STR_33
 10095  004B92  0100               	movlb	0	; () banked
 10096  004B94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10097  004B96  ECE4  F00A         	call	_printf	;wreg free
 10098                           
 10099                           ;UI.c: 495: lcdInst(0b11000000);;
 10100  004B9A  0EC0               	movlw	192
 10101  004B9C  EC7D  F028         	call	_lcdInst
 10102                           
 10103                           ;UI.c: 496: printf("2. SORT        <");
 10104  004BA0  0EC4               	movlw	low STR_34
 10105  004BA2  0100               	movlb	0	; () banked
 10106  004BA4  6F8E               	movwf	printf@f& (0+255),b
 10107  004BA6  0EFD               	movlw	high STR_34
 10108  004BA8  0100               	movlb	0	; () banked
 10109  004BAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10110  004BAC  ECE4  F00A         	call	_printf	;wreg free
 10111  004BB0  0012               	return		;funcret
 10112  004BB2                     __end_of_change_state_to_menu_12:
 10113                           	opt stack 0
 10114                           tblptru	equ	0xFF8
 10115                           tblptrh	equ	0xFF7
 10116                           tblptrl	equ	0xFF6
 10117                           tablat	equ	0xFF5
 10118                           prodh	equ	0xFF4
 10119                           prodl	equ	0xFF3
 10120                           intcon	equ	0xFF2
 10121                           intcon2	equ	0xFF1
 10122                           intcon3	equ	0xFF0
 10123                           postinc0	equ	0xFEE
 10124                           wreg	equ	0xFE8
 10125                           postdec1	equ	0xFE5
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           postdec2	equ	0xFDD
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function ___awmod *****************
 10135 ;; Defined at:
 10136 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  dividend        2    0[BANK0 ] int 
 10139 ;;  divisor         2    2[BANK0 ] int 
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;  sign            1    5[BANK0 ] unsigned char 
 10142 ;;  counter         1    4[BANK0 ] unsigned char 
 10143 ;; Return value:  Size  Location     Type
 10144 ;;                  2    0[BANK0 ] int 
 10145 ;; Registers used:
 10146 ;;		wreg, status,2, status,0
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10152 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;Total ram usage:        6 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    7
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		_UI
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           	psect	text34
 10167  0041E0                     __ptext34:
 10168                           	opt stack 0
 10169  0041E0                     ___awmod:
 10170                           	opt stack 22
 10171                           
 10172                           ;incstack = 0
 10173  0041E0  0E00               	movlw	0
 10174  0041E2  0100               	movlb	0	; () banked
 10175  0041E4  6F85               	movwf	___awmod@sign& (0+255),b
 10176                           
 10177                           ; BSR set to: 0
 10178  0041E6  0100               	movlb	0	; () banked
 10179  0041E8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10180  0041EA  D008               	goto	l8160
 10181                           
 10182                           ; BSR set to: 0
 10183  0041EC  0100               	movlb	0	; () banked
 10184  0041EE  6D80               	negf	___awmod@dividend& (0+255),b
 10185  0041F0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10186  0041F2  B0D8               	btfsc	status,0,c
 10187  0041F4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10188                           
 10189                           ; BSR set to: 0
 10190  0041F6  0E01               	movlw	1
 10191  0041F8  0100               	movlb	0	; () banked
 10192  0041FA  6F85               	movwf	___awmod@sign& (0+255),b
 10193  0041FC                     l8160:
 10194                           
 10195                           ; BSR set to: 0
 10196  0041FC  0100               	movlb	0	; () banked
 10197  0041FE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10198  004200  D005               	goto	l8164
 10199                           
 10200                           ; BSR set to: 0
 10201  004202  0100               	movlb	0	; () banked
 10202  004204  6D82               	negf	___awmod@divisor& (0+255),b
 10203  004206  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10204  004208  B0D8               	btfsc	status,0,c
 10205  00420A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10206  00420C                     l8164:
 10207                           
 10208                           ; BSR set to: 0
 10209  00420C  0100               	movlb	0	; () banked
 10210  00420E  5182               	movf	___awmod@divisor& (0+255),w,b
 10211  004210  0100               	movlb	0	; () banked
 10212  004212  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10213  004214  B4D8               	btfsc	status,2,c
 10214  004216  D026               	goto	l8180
 10215                           
 10216                           ; BSR set to: 0
 10217  004218  0E01               	movlw	1
 10218  00421A  0100               	movlb	0	; () banked
 10219  00421C  6F84               	movwf	___awmod@counter& (0+255),b
 10220  00421E  D006               	goto	l8170
 10221  004220                     l8168:
 10222                           
 10223                           ; BSR set to: 0
 10224  004220  0100               	movlb	0	; () banked
 10225  004222  90D8               	bcf	status,0,c
 10226  004224  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10227  004226  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10228  004228  0100               	movlb	0	; () banked
 10229  00422A  2B84               	incf	___awmod@counter& (0+255),f,b
 10230  00422C                     l8170:
 10231                           
 10232                           ; BSR set to: 0
 10233  00422C  0100               	movlb	0	; () banked
 10234  00422E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10235  004230  D7F7               	goto	l8168
 10236  004232                     l8172:
 10237                           
 10238                           ; BSR set to: 0
 10239  004232  0100               	movlb	0	; () banked
 10240  004234  5182               	movf	___awmod@divisor& (0+255),w,b
 10241  004236  0100               	movlb	0	; () banked
 10242  004238  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10243  00423A  0100               	movlb	0	; () banked
 10244  00423C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10245  00423E  0100               	movlb	0	; () banked
 10246  004240  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10247  004242  A0D8               	btfss	status,0,c
 10248  004244  D008               	goto	l8176
 10249                           
 10250                           ; BSR set to: 0
 10251  004246  0100               	movlb	0	; () banked
 10252  004248  5182               	movf	___awmod@divisor& (0+255),w,b
 10253  00424A  0100               	movlb	0	; () banked
 10254  00424C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10255  00424E  0100               	movlb	0	; () banked
 10256  004250  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10257  004252  0100               	movlb	0	; () banked
 10258  004254  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10259  004256                     l8176:
 10260                           
 10261                           ; BSR set to: 0
 10262  004256  0100               	movlb	0	; () banked
 10263  004258  90D8               	bcf	status,0,c
 10264  00425A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10265  00425C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  00425E  0100               	movlb	0	; () banked
 10269  004260  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10270  004262  D7E7               	goto	l8172
 10271  004264                     l8180:
 10272                           
 10273                           ; BSR set to: 0
 10274  004264  0100               	movlb	0	; () banked
 10275  004266  5185               	movf	___awmod@sign& (0+255),w,b
 10276  004268  0100               	movlb	0	; () banked
 10277  00426A  B4D8               	btfsc	status,2,c
 10278  00426C  D005               	goto	l8184
 10279                           
 10280                           ; BSR set to: 0
 10281  00426E  0100               	movlb	0	; () banked
 10282  004270  6D80               	negf	___awmod@dividend& (0+255),b
 10283  004272  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10284  004274  B0D8               	btfsc	status,0,c
 10285  004276  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10286  004278                     l8184:
 10287                           
 10288                           ; BSR set to: 0
 10289  004278  C080  F080         	movff	___awmod@dividend,?___awmod
 10290  00427C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10291  004280  0012               	return	
 10292  004282                     __end_of___awmod:
 10293                           	opt stack 0
 10294                           tblptru	equ	0xFF8
 10295                           tblptrh	equ	0xFF7
 10296                           tblptrl	equ	0xFF6
 10297                           tablat	equ	0xFF5
 10298                           prodh	equ	0xFF4
 10299                           prodl	equ	0xFF3
 10300                           intcon	equ	0xFF2
 10301                           intcon2	equ	0xFF1
 10302                           intcon3	equ	0xFF0
 10303                           postinc0	equ	0xFEE
 10304                           wreg	equ	0xFE8
 10305                           postdec1	equ	0xFE5
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           postdec2	equ	0xFDD
 10310                           fsr2h	equ	0xFDA
 10311                           fsr2l	equ	0xFD9
 10312                           status	equ	0xFD8
 10313                           
 10314 ;; *************** function ___awdiv *****************
 10315 ;; Defined at:
 10316 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;  dividend        2    6[BANK0 ] int 
 10319 ;;  divisor         2    8[BANK0 ] int 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  quotient        2   12[BANK0 ] int 
 10322 ;;  sign            1   11[BANK0 ] unsigned char 
 10323 ;;  counter         1   10[BANK0 ] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  2    6[BANK0 ] int 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2, status,0
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10333 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10336 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10337 ;;Total ram usage:        8 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    7
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_UI
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text35
 10348  003FBC                     __ptext35:
 10349                           	opt stack 0
 10350  003FBC                     ___awdiv:
 10351                           	opt stack 22
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;incstack = 0
 10355  003FBC  0E00               	movlw	0
 10356  003FBE  0100               	movlb	0	; () banked
 10357  003FC0  6F8B               	movwf	___awdiv@sign& (0+255),b
 10358                           
 10359                           ; BSR set to: 0
 10360  003FC2  0100               	movlb	0	; () banked
 10361  003FC4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10362  003FC6  D008               	goto	l8116
 10363                           
 10364                           ; BSR set to: 0
 10365  003FC8  0100               	movlb	0	; () banked
 10366  003FCA  6D88               	negf	___awdiv@divisor& (0+255),b
 10367  003FCC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10368  003FCE  B0D8               	btfsc	status,0,c
 10369  003FD0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10370                           
 10371                           ; BSR set to: 0
 10372  003FD2  0E01               	movlw	1
 10373  003FD4  0100               	movlb	0	; () banked
 10374  003FD6  6F8B               	movwf	___awdiv@sign& (0+255),b
 10375  003FD8                     l8116:
 10376                           
 10377                           ; BSR set to: 0
 10378  003FD8  0100               	movlb	0	; () banked
 10379  003FDA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10380  003FDC  D008               	goto	l8122
 10381                           
 10382                           ; BSR set to: 0
 10383  003FDE  0100               	movlb	0	; () banked
 10384  003FE0  6D86               	negf	___awdiv@dividend& (0+255),b
 10385  003FE2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10386  003FE4  B0D8               	btfsc	status,0,c
 10387  003FE6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10388                           
 10389                           ; BSR set to: 0
 10390  003FE8  0E01               	movlw	1
 10391  003FEA  0100               	movlb	0	; () banked
 10392  003FEC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10393  003FEE                     l8122:
 10394                           
 10395                           ; BSR set to: 0
 10396  003FEE  0E00               	movlw	0
 10397  003FF0  0100               	movlb	0	; () banked
 10398  003FF2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10399  003FF4  0E00               	movlw	0
 10400  003FF6  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10401                           
 10402                           ; BSR set to: 0
 10403  003FF8  0100               	movlb	0	; () banked
 10404  003FFA  5188               	movf	___awdiv@divisor& (0+255),w,b
 10405  003FFC  0100               	movlb	0	; () banked
 10406  003FFE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10407  004000  B4D8               	btfsc	status,2,c
 10408  004002  D02C               	goto	l8144
 10409                           
 10410                           ; BSR set to: 0
 10411  004004  0E01               	movlw	1
 10412  004006  0100               	movlb	0	; () banked
 10413  004008  6F8A               	movwf	___awdiv@counter& (0+255),b
 10414  00400A  D006               	goto	l8130
 10415  00400C                     l8128:
 10416                           
 10417                           ; BSR set to: 0
 10418  00400C  0100               	movlb	0	; () banked
 10419  00400E  90D8               	bcf	status,0,c
 10420  004010  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10421  004012  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10422  004014  0100               	movlb	0	; () banked
 10423  004016  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10424  004018                     l8130:
 10425                           
 10426                           ; BSR set to: 0
 10427  004018  0100               	movlb	0	; () banked
 10428  00401A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10429  00401C  D7F7               	goto	l8128
 10430  00401E                     l8132:
 10431                           
 10432                           ; BSR set to: 0
 10433  00401E  0100               	movlb	0	; () banked
 10434  004020  90D8               	bcf	status,0,c
 10435  004022  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10436  004024  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10437                           
 10438                           ; BSR set to: 0
 10439  004026  0100               	movlb	0	; () banked
 10440  004028  5188               	movf	___awdiv@divisor& (0+255),w,b
 10441  00402A  0100               	movlb	0	; () banked
 10442  00402C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10443  00402E  0100               	movlb	0	; () banked
 10444  004030  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10445  004032  0100               	movlb	0	; () banked
 10446  004034  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10447  004036  A0D8               	btfss	status,0,c
 10448  004038  D00A               	goto	l8140
 10449                           
 10450                           ; BSR set to: 0
 10451  00403A  0100               	movlb	0	; () banked
 10452  00403C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10453  00403E  0100               	movlb	0	; () banked
 10454  004040  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10455  004042  0100               	movlb	0	; () banked
 10456  004044  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10457  004046  0100               	movlb	0	; () banked
 10458  004048  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10459                           
 10460                           ; BSR set to: 0
 10461  00404A  0100               	movlb	0	; () banked
 10462  00404C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10463  00404E                     l8140:
 10464                           
 10465                           ; BSR set to: 0
 10466  00404E  0100               	movlb	0	; () banked
 10467  004050  90D8               	bcf	status,0,c
 10468  004052  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10469  004054  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10470                           
 10471                           ; BSR set to: 0
 10472  004056  0100               	movlb	0	; () banked
 10473  004058  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10474  00405A  D7E1               	goto	l8132
 10475  00405C                     l8144:
 10476                           
 10477                           ; BSR set to: 0
 10478  00405C  0100               	movlb	0	; () banked
 10479  00405E  518B               	movf	___awdiv@sign& (0+255),w,b
 10480  004060  0100               	movlb	0	; () banked
 10481  004062  B4D8               	btfsc	status,2,c
 10482  004064  D005               	goto	l8148
 10483                           
 10484                           ; BSR set to: 0
 10485  004066  0100               	movlb	0	; () banked
 10486  004068  6D8C               	negf	___awdiv@quotient& (0+255),b
 10487  00406A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10488  00406C  B0D8               	btfsc	status,0,c
 10489  00406E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10490  004070                     l8148:
 10491                           
 10492                           ; BSR set to: 0
 10493  004070  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10494  004074  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10495  004078  0012               	return	
 10496  00407A                     __end_of___awdiv:
 10497                           	opt stack 0
 10498                           tblptru	equ	0xFF8
 10499                           tblptrh	equ	0xFF7
 10500                           tblptrl	equ	0xFF6
 10501                           tablat	equ	0xFF5
 10502                           prodh	equ	0xFF4
 10503                           prodl	equ	0xFF3
 10504                           intcon	equ	0xFF2
 10505                           intcon2	equ	0xFF1
 10506                           intcon3	equ	0xFF0
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           postdec1	equ	0xFE5
 10510                           fsr1l	equ	0xFE1
 10511                           indf2	equ	0xFDF
 10512                           postinc2	equ	0xFDE
 10513                           postdec2	equ	0xFDD
 10514                           fsr2h	equ	0xFDA
 10515                           fsr2l	equ	0xFD9
 10516                           status	equ	0xFD8
 10517                           
 10518 ;; *************** function _Test *****************
 10519 ;; Defined at:
 10520 ;;		line 30 in file "Test.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;		None
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  1    wreg      void 
 10527 ;; Registers used:
 10528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;Total ram usage:        2 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:   11
 10541 ;; This function calls:
 10542 ;;		_BlockerTest
 10543 ;;		_BothServos
 10544 ;;		_EEPROMTest
 10545 ;;		_PortTestA5
 10546 ;;		_PortTests
 10547 ;;		_PusherTest
 10548 ;;		_SpeedTest
 10549 ;;		_actuatorTest
 10550 ;;		_algorithmTest
 10551 ;;		_lcdInst
 10552 ;;		_printf
 10553 ;;		_sensorTest
 10554 ;; This function is called by:
 10555 ;;		_main
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text36
 10560  003C2E                     __ptext36:
 10561                           	opt stack 0
 10562  003C2E                     _Test:
 10563                           	opt stack 19
 10564  003C2E                     
 10565                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10566  003C2E  0E01               	movlw	1
 10567  003C30  EC7D  F028         	call	_lcdInst
 10568  003C34  0E68               	movlw	104
 10569  003C36  0100               	movlb	0	; () banked
 10570  003C38  6FC6               	movwf	??_Test& (0+255),b
 10571  003C3A  0EE4               	movlw	228
 10572  003C3C                     u9047:
 10573  003C3C  2EE8               	decfsz	wreg,f,c
 10574  003C3E  D7FE               	bra	u9047
 10575  003C40  2FC6               	decfsz	??_Test& (0+255),f,b
 10576  003C42  D7FC               	bra	u9047
 10577  003C44  F000               	nop	
 10578  003C46  0E80               	movlw	128
 10579  003C48  EC7D  F028         	call	_lcdInst
 10580                           
 10581                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10582  003C4C  0E92               	movlw	low STR_68
 10583  003C4E  0100               	movlb	0	; () banked
 10584  003C50  6F8E               	movwf	printf@f& (0+255),b
 10585  003C52  0EFC               	movlw	high STR_68
 10586  003C54  0100               	movlb	0	; () banked
 10587  003C56  6F8F               	movwf	(printf@f+1)& (0+255),b
 10588  003C58  ECE4  F00A         	call	_printf	;wreg free
 10589                           
 10590                           ;Test.c: 35: lcdInst(0b11000000);;
 10591  003C5C  0EC0               	movlw	192
 10592  003C5E  EC7D  F028         	call	_lcdInst
 10593                           
 10594                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10595  003C62  0EA3               	movlw	low STR_69
 10596  003C64  0100               	movlb	0	; () banked
 10597  003C66  6F8E               	movwf	printf@f& (0+255),b
 10598  003C68  0EFC               	movlw	high STR_69
 10599  003C6A  0100               	movlb	0	; () banked
 10600  003C6C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10601  003C6E  ECE4  F00A         	call	_printf	;wreg free
 10602                           
 10603                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10604  003C72  0E05               	movlw	5
 10605  003C74  0100               	movlb	0	; () banked
 10606  003C76  6FC7               	movwf	(??_Test+1)& (0+255),b
 10607  003C78  0E0F               	movlw	15
 10608  003C7A  0100               	movlb	0	; () banked
 10609  003C7C  6FC6               	movwf	??_Test& (0+255),b
 10610  003C7E  0EF1               	movlw	241
 10611  003C80                     u9057:
 10612  003C80  2EE8               	decfsz	wreg,f,c
 10613  003C82  D7FE               	bra	u9057
 10614  003C84  2FC6               	decfsz	??_Test& (0+255),f,b
 10615  003C86  D7FC               	bra	u9057
 10616  003C88  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10617  003C8A  D7FA               	bra	u9057
 10618  003C8C                     l1104:
 10619  003C8C  A281               	btfss	3969,1,c	;volatile
 10620  003C8E  D7FE               	goto	l1104
 10621                           
 10622                           ;Test.c: 39: var = PORTB >> 4;
 10623  003C90  CF81 F0C6          	movff	3969,??_Test	;volatile
 10624  003C94  0100               	movlb	0	; () banked
 10625  003C96  3BC6               	swapf	??_Test& (0+255),f,b
 10626  003C98  0E0F               	movlw	15
 10627  003C9A  17C6               	andwf	??_Test& (0+255),f,b
 10628  003C9C  0100               	movlb	0	; () banked
 10629  003C9E  51C6               	movf	??_Test& (0+255),w,b
 10630  003CA0  0100               	movlb	0	; () banked
 10631  003CA2  6FFA               	movwf	_var& (0+255),b
 10632  003CA4  6BFB               	clrf	(_var+1)& (0+255),b
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;Test.c: 40: var++;
 10636  003CA6  0100               	movlb	0	; () banked
 10637  003CA8  4BFA               	infsnz	_var& (0+255),f,b
 10638  003CAA  2BFB               	incf	(_var+1)& (0+255),f,b
 10639  003CAC                     l1107:
 10640  003CAC  A281               	btfss	3969,1,c	;volatile
 10641  003CAE  D01F               	goto	l8896
 10642  003CB0  D7FD               	goto	l1107
 10643  003CB2                     l8874:
 10644                           
 10645                           ;Test.c: 44: algorithmTest();
 10646  003CB2  EC13  F01F         	call	_algorithmTest	;wreg free
 10647                           
 10648                           ;Test.c: 45: break;
 10649  003CB6  D7BB               	goto	l8856
 10650  003CB8                     l8876:
 10651                           
 10652                           ;Test.c: 47: sensorTest();
 10653  003CB8  EC79  F010         	call	_sensorTest	;wreg free
 10654                           
 10655                           ;Test.c: 48: break;
 10656  003CBC  D7B8               	goto	l8856
 10657  003CBE                     l8878:
 10658                           
 10659                           ;Test.c: 50: actuatorTest();
 10660  003CBE  EC09  F000         	call	_actuatorTest	;wreg free
 10661                           
 10662                           ;Test.c: 51: break;
 10663  003CC2  D7B5               	goto	l8856
 10664  003CC4                     l8880:
 10665                           
 10666                           ;Test.c: 53: PortTestA5();
 10667  003CC4  EC3B  F024         	call	_PortTestA5	;wreg free
 10668                           
 10669                           ;Test.c: 54: break;
 10670  003CC8  D7B2               	goto	l8856
 10671  003CCA                     l8882:
 10672                           
 10673                           ;Test.c: 57: SpeedTest();
 10674  003CCA  ECCA  F021         	call	_SpeedTest	;wreg free
 10675                           
 10676                           ;Test.c: 58: break;
 10677  003CCE  D7AF               	goto	l8856
 10678  003CD0                     l8884:
 10679                           
 10680                           ;Test.c: 60: EEPROMTest();
 10681  003CD0  ECAF  F028         	call	_EEPROMTest	;wreg free
 10682                           
 10683                           ;Test.c: 61: break;
 10684  003CD4  D7AC               	goto	l8856
 10685  003CD6                     l8886:
 10686                           
 10687                           ;Test.c: 63: PusherTest();
 10688  003CD6  EC0E  F016         	call	_PusherTest	;wreg free
 10689                           
 10690                           ;Test.c: 64: break;
 10691  003CDA  D7A9               	goto	l8856
 10692  003CDC                     l8888:
 10693                           
 10694                           ;Test.c: 66: PortTests();
 10695  003CDC  EC0C  F022         	call	_PortTests	;wreg free
 10696                           
 10697                           ;Test.c: 67: break;
 10698  003CE0  D7A6               	goto	l8856
 10699  003CE2                     l8890:
 10700                           
 10701                           ;Test.c: 69: BothServos();
 10702  003CE2  EC00  F00D         	call	_BothServos	;wreg free
 10703                           
 10704                           ;Test.c: 70: break;
 10705  003CE6  D7A3               	goto	l8856
 10706  003CE8                     l8892:
 10707                           
 10708                           ;Test.c: 72: BlockerTest();
 10709  003CE8  EC61  F01B         	call	_BlockerTest	;wreg free
 10710                           
 10711                           ;Test.c: 76: }
 10712                           
 10713                           ;Test.c: 75: break;
 10714                           
 10715                           ;Test.c: 74: default:
 10716                           
 10717                           ;Test.c: 73: break;
 10718  003CEC  D7A0               	goto	l8856
 10719  003CEE                     l8896:
 10720  003CEE  C0FA  F0C6         	movff	_var,??_Test
 10721  003CF2  C0FB  F0C7         	movff	_var+1,??_Test+1
 10722                           
 10723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10724                           ; Switch size 1, requested type "space"
 10725                           ; Number of cases is 1, Range of values is 0 to 0
 10726                           ; switch strategies available:
 10727                           ; Name         Instructions Cycles
 10728                           ; simple_byte            4     3 (average)
 10729                           ;	Chosen strategy is simple_byte
 10730  003CF6  0100               	movlb	0	; () banked
 10731  003CF8  51C7               	movf	(??_Test+1)& (0+255),w,b
 10732  003CFA  0A00               	xorlw	0	; case 0
 10733  003CFC  A4D8               	btfss	status,2,c
 10734  003CFE  D797               	goto	l8856
 10735                           
 10736                           ; BSR set to: 0
 10737                           ; Switch size 1, requested type "space"
 10738                           ; Number of cases is 10, Range of values is 1 to 11
 10739                           ; switch strategies available:
 10740                           ; Name         Instructions Cycles
 10741                           ; simple_byte           31    16 (average)
 10742                           ;	Chosen strategy is simple_byte
 10743  003D00  0100               	movlb	0	; () banked
 10744  003D02  51C6               	movf	??_Test& (0+255),w,b
 10745  003D04  0A01               	xorlw	1	; case 1
 10746  003D06  B4D8               	btfsc	status,2,c
 10747  003D08  D7D4               	goto	l8874
 10748  003D0A  0A03               	xorlw	3	; case 2
 10749  003D0C  B4D8               	btfsc	status,2,c
 10750  003D0E  D7D4               	goto	l8876
 10751  003D10  0A01               	xorlw	1	; case 3
 10752  003D12  B4D8               	btfsc	status,2,c
 10753  003D14  D7D4               	goto	l8878
 10754  003D16  0A06               	xorlw	6	; case 5
 10755  003D18  B4D8               	btfsc	status,2,c
 10756  003D1A  D7D4               	goto	l8880
 10757  003D1C  0A03               	xorlw	3	; case 6
 10758  003D1E  B4D8               	btfsc	status,2,c
 10759  003D20  D7D4               	goto	l8882
 10760  003D22  0A01               	xorlw	1	; case 7
 10761  003D24  B4D8               	btfsc	status,2,c
 10762  003D26  D7D4               	goto	l8884
 10763  003D28  0A0F               	xorlw	15	; case 8
 10764  003D2A  B4D8               	btfsc	status,2,c
 10765  003D2C  D7D4               	goto	l8886
 10766  003D2E  0A01               	xorlw	1	; case 9
 10767  003D30  B4D8               	btfsc	status,2,c
 10768  003D32  D7D4               	goto	l8888
 10769  003D34  0A03               	xorlw	3	; case 10
 10770  003D36  B4D8               	btfsc	status,2,c
 10771  003D38  D7D4               	goto	l8890
 10772  003D3A  0A01               	xorlw	1	; case 11
 10773  003D3C  B4D8               	btfsc	status,2,c
 10774  003D3E  D7D4               	goto	l8892
 10775                           
 10776                           ; BSR set to: 0
 10777                           
 10778                           ; BSR set to: 0
 10779  003D40  D776               	goto	l8856
 10780  003D42                     __end_of_Test:
 10781                           	opt stack 0
 10782                           tblptru	equ	0xFF8
 10783                           tblptrh	equ	0xFF7
 10784                           tblptrl	equ	0xFF6
 10785                           tablat	equ	0xFF5
 10786                           prodh	equ	0xFF4
 10787                           prodl	equ	0xFF3
 10788                           intcon	equ	0xFF2
 10789                           intcon2	equ	0xFF1
 10790                           intcon3	equ	0xFF0
 10791                           postinc0	equ	0xFEE
 10792                           wreg	equ	0xFE8
 10793                           postdec1	equ	0xFE5
 10794                           fsr1l	equ	0xFE1
 10795                           indf2	equ	0xFDF
 10796                           postinc2	equ	0xFDE
 10797                           postdec2	equ	0xFDD
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _sensorTest *****************
 10803 ;; Defined at:
 10804 ;;		line 124 in file "Test.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  res             2   45[BANK0 ] int 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      void 
 10811 ;; Registers used:
 10812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:        4 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:   10
 10825 ;; This function calls:
 10826 ;;		_lcdInst
 10827 ;;		_printf
 10828 ;;		_readADC
 10829 ;;		_readMAG
 10830 ;; This function is called by:
 10831 ;;		_Test
 10832 ;; This function uses a non-reentrant model
 10833 ;;
 10834                           
 10835                           	psect	text37
 10836  0020F2                     __ptext37:
 10837                           	opt stack 0
 10838  0020F2                     _sensorTest:
 10839                           	opt stack 19
 10840                           
 10841                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;incstack = 0
 10845  0020F2  0E01               	movlw	1
 10846  0020F4  EC7D  F028         	call	_lcdInst
 10847  0020F8  0E68               	movlw	104
 10848  0020FA  0100               	movlb	0	; () banked
 10849  0020FC  6FAB               	movwf	??_sensorTest& (0+255),b
 10850  0020FE  0EE4               	movlw	228
 10851  002100                     u9067:
 10852  002100  2EE8               	decfsz	wreg,f,c
 10853  002102  D7FE               	bra	u9067
 10854  002104  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10855  002106  D7FC               	bra	u9067
 10856  002108  F000               	nop	
 10857  00210A  0E80               	movlw	128
 10858  00210C  EC7D  F028         	call	_lcdInst
 10859                           
 10860                           ;Test.c: 127: printf("SENSORS");
 10861  002110  0EAE               	movlw	low STR_77
 10862  002112  0100               	movlb	0	; () banked
 10863  002114  6F8E               	movwf	printf@f& (0+255),b
 10864  002116  0EFF               	movlw	high STR_77
 10865  002118  0100               	movlb	0	; () banked
 10866  00211A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10867  00211C  ECE4  F00A         	call	_printf	;wreg free
 10868                           
 10869                           ;Test.c: 128: lcdInst(0b11000000);;
 10870  002120  0EC0               	movlw	192
 10871  002122  EC7D  F028         	call	_lcdInst
 10872                           
 10873                           ;Test.c: 129: printf("PUSH TO START");
 10874  002126  0E0B               	movlw	low STR_71
 10875  002128  0100               	movlb	0	; () banked
 10876  00212A  6F8E               	movwf	printf@f& (0+255),b
 10877  00212C  0EFF               	movlw	high STR_71
 10878  00212E  0100               	movlb	0	; () banked
 10879  002130  6F8F               	movwf	(printf@f+1)& (0+255),b
 10880  002132  ECE4  F00A         	call	_printf	;wreg free
 10881                           
 10882                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10883  002136  0E05               	movlw	5
 10884  002138  0100               	movlb	0	; () banked
 10885  00213A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10886  00213C  0E0F               	movlw	15
 10887  00213E  0100               	movlb	0	; () banked
 10888  002140  6FAB               	movwf	??_sensorTest& (0+255),b
 10889  002142  0EF1               	movlw	241
 10890  002144                     u9077:
 10891  002144  2EE8               	decfsz	wreg,f,c
 10892  002146  D7FE               	bra	u9077
 10893  002148  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10894  00214A  D7FC               	bra	u9077
 10895  00214C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10896  00214E  D7FA               	bra	u9077
 10897  002150                     l1137:
 10898  002150  A281               	btfss	3969,1,c	;volatile
 10899  002152  D7FE               	goto	l1137
 10900  002154                     l1140:
 10901  002154  B281               	btfsc	3969,1,c	;volatile
 10902  002156  D7FE               	goto	l1140
 10903                           
 10904                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10905  002158  0E01               	movlw	1
 10906  00215A  EC7D  F028         	call	_lcdInst
 10907  00215E  0E68               	movlw	104
 10908  002160  0100               	movlb	0	; () banked
 10909  002162  6FAB               	movwf	??_sensorTest& (0+255),b
 10910  002164  0EE4               	movlw	228
 10911  002166                     u9087:
 10912  002166  2EE8               	decfsz	wreg,f,c
 10913  002168  D7FE               	bra	u9087
 10914  00216A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10915  00216C  D7FC               	bra	u9087
 10916  00216E  F000               	nop	
 10917  002170  0E80               	movlw	128
 10918  002172  EC7D  F028         	call	_lcdInst
 10919                           
 10920                           ;Test.c: 138: printf("TST: IR SNSR");
 10921  002176  0E35               	movlw	low STR_79
 10922  002178  0100               	movlb	0	; () banked
 10923  00217A  6F8E               	movwf	printf@f& (0+255),b
 10924  00217C  0EFF               	movlw	high STR_79
 10925  00217E  0100               	movlb	0	; () banked
 10926  002180  6F8F               	movwf	(printf@f+1)& (0+255),b
 10927  002182  ECE4  F00A         	call	_printf	;wreg free
 10928                           
 10929                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10930  002186  0E05               	movlw	5
 10931  002188  0100               	movlb	0	; () banked
 10932  00218A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10933  00218C  0E0F               	movlw	15
 10934  00218E  0100               	movlb	0	; () banked
 10935  002190  6FAB               	movwf	??_sensorTest& (0+255),b
 10936  002192  0EF1               	movlw	241
 10937  002194                     u9097:
 10938  002194  2EE8               	decfsz	wreg,f,c
 10939  002196  D7FE               	bra	u9097
 10940  002198  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10941  00219A  D7FC               	bra	u9097
 10942  00219C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10943  00219E  D7FA               	bra	u9097
 10944                           
 10945                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10946  0021A0  8A8B               	bsf	3979,5,c	;volatile
 10947                           
 10948                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10949  0021A2  D05C               	goto	l7334
 10950  0021A4                     l7316:
 10951                           
 10952                           ;Test.c: 143: readADC(0);
 10953  0021A4  0E00               	movlw	0
 10954  0021A6  EC74  F027         	call	_readADC
 10955                           
 10956                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10957  0021AA  50C3               	movf	4035,w,c	;volatile
 10958  0021AC  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10959  0021B0  0100               	movlb	0	; () banked
 10960  0021B2  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10961  0021B4  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10962  0021B8  0100               	movlb	0	; () banked
 10963  0021BA  6BAB               	clrf	??_sensorTest& (0+255),b
 10964  0021BC  0100               	movlb	0	; () banked
 10965  0021BE  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10966  0021C0  0100               	movlb	0	; () banked
 10967  0021C2  6FAD               	movwf	sensorTest@res& (0+255),b
 10968  0021C4  0100               	movlb	0	; () banked
 10969  0021C6  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10970  0021C8  0100               	movlb	0	; () banked
 10971  0021CA  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10975  0021CC  0100               	movlb	0	; () banked
 10976  0021CE  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10977  0021D0  D00A               	goto	u5980
 10978  0021D2  0E21               	movlw	33
 10979  0021D4  0100               	movlb	0	; () banked
 10980  0021D6  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10981  0021D8  0E03               	movlw	3
 10982  0021DA  0100               	movlb	0	; () banked
 10983  0021DC  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10984  0021DE  A0D8               	btfss	status,0,c
 10985  0021E0  D002               	goto	u5980
 10986  0021E2  0E01               	movlw	1
 10987  0021E4  D001               	goto	u5990
 10988  0021E6                     u5980:
 10989  0021E6  0E00               	movlw	0
 10990  0021E8                     u5990:
 10991  0021E8  0100               	movlb	0	; () banked
 10992  0021EA  6FDE               	movwf	_IR_signal& (0+255),b
 10993  0021EC  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10994                           
 10995                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10996  0021EE  0E01               	movlw	1
 10997  0021F0  EC7D  F028         	call	_lcdInst
 10998  0021F4  0E68               	movlw	104
 10999  0021F6  0100               	movlb	0	; () banked
 11000  0021F8  6FAB               	movwf	??_sensorTest& (0+255),b
 11001  0021FA  0EE4               	movlw	228
 11002  0021FC                     u9107:
 11003  0021FC  2EE8               	decfsz	wreg,f,c
 11004  0021FE  D7FE               	bra	u9107
 11005  002200  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11006  002202  D7FC               	bra	u9107
 11007  002204  F000               	nop	
 11008  002206  0E80               	movlw	128
 11009  002208  EC7D  F028         	call	_lcdInst
 11010                           
 11011                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 11012  00220C  0E5A               	movlw	low STR_80
 11013  00220E  0100               	movlb	0	; () banked
 11014  002210  6F8E               	movwf	printf@f& (0+255),b
 11015  002212  0EFE               	movlw	high STR_80
 11016  002214  0100               	movlb	0	; () banked
 11017  002216  6F8F               	movwf	(printf@f+1)& (0+255),b
 11018  002218  C0DE  F090         	movff	_IR_signal,?_printf+2
 11019  00221C  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 11020  002220  ECE4  F00A         	call	_printf	;wreg free
 11021                           
 11022                           ;Test.c: 149: lcdInst(0b11000000);;
 11023  002224  0EC0               	movlw	192
 11024  002226  EC7D  F028         	call	_lcdInst
 11025                           
 11026                           ;Test.c: 150: printf("%d", res);
 11027  00222A  0E16               	movlw	low (STR_27+14)
 11028  00222C  0100               	movlb	0	; () banked
 11029  00222E  6F8E               	movwf	printf@f& (0+255),b
 11030  002230  0EFE               	movlw	high (STR_27+14)
 11031  002232  0100               	movlb	0	; () banked
 11032  002234  6F8F               	movwf	(printf@f+1)& (0+255),b
 11033  002236  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11034  00223A  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11035  00223E  ECE4  F00A         	call	_printf	;wreg free
 11036                           
 11037                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11038  002242  0E05               	movlw	5
 11039  002244  0100               	movlb	0	; () banked
 11040  002246  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11041  002248  0E0F               	movlw	15
 11042  00224A  0100               	movlb	0	; () banked
 11043  00224C  6FAB               	movwf	??_sensorTest& (0+255),b
 11044  00224E  0EF1               	movlw	241
 11045  002250                     u9117:
 11046  002250  2EE8               	decfsz	wreg,f,c
 11047  002252  D7FE               	bra	u9117
 11048  002254  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11049  002256  D7FC               	bra	u9117
 11050  002258  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11051  00225A  D7FA               	bra	u9117
 11052  00225C                     l7334:
 11053  00225C  A281               	btfss	3969,1,c	;volatile
 11054  00225E  D7A2               	goto	l7316
 11055                           
 11056                           ;Test.c: 152: }
 11057                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11058  002260  9A8B               	bcf	3979,5,c	;volatile
 11059                           
 11060                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11061  002262  0E01               	movlw	1
 11062  002264  EC7D  F028         	call	_lcdInst
 11063  002268  0E68               	movlw	104
 11064  00226A  0100               	movlb	0	; () banked
 11065  00226C  6FAB               	movwf	??_sensorTest& (0+255),b
 11066  00226E  0EE4               	movlw	228
 11067  002270                     u9127:
 11068  002270  2EE8               	decfsz	wreg,f,c
 11069  002272  D7FE               	bra	u9127
 11070  002274  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11071  002276  D7FC               	bra	u9127
 11072  002278  F000               	nop	
 11073  00227A  0E80               	movlw	128
 11074  00227C  EC7D  F028         	call	_lcdInst
 11075                           
 11076                           ;Test.c: 162: printf("TST: MAGNETISM");
 11077  002280  0E87               	movlw	low STR_82
 11078  002282  0100               	movlb	0	; () banked
 11079  002284  6F8E               	movwf	printf@f& (0+255),b
 11080  002286  0EFE               	movlw	high STR_82
 11081  002288  0100               	movlb	0	; () banked
 11082  00228A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11083  00228C  ECE4  F00A         	call	_printf	;wreg free
 11084                           
 11085                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11086  002290  0E05               	movlw	5
 11087  002292  0100               	movlb	0	; () banked
 11088  002294  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11089  002296  0E0F               	movlw	15
 11090  002298  0100               	movlb	0	; () banked
 11091  00229A  6FAB               	movwf	??_sensorTest& (0+255),b
 11092  00229C  0EF1               	movlw	241
 11093  00229E                     u9137:
 11094  00229E  2EE8               	decfsz	wreg,f,c
 11095  0022A0  D7FE               	bra	u9137
 11096  0022A2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11097  0022A4  D7FC               	bra	u9137
 11098  0022A6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11099  0022A8  D7FA               	bra	u9137
 11100                           
 11101                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11102  0022AA  D021               	goto	l7352
 11103  0022AC                     l7346:
 11104                           
 11105                           ;Test.c: 165: readMAG();
 11106  0022AC  EC37  F025         	call	_readMAG	;wreg free
 11107                           
 11108                           ;Test.c: 166: lcdInst(0b10000000);;
 11109  0022B0  0E80               	movlw	128
 11110  0022B2  EC7D  F028         	call	_lcdInst
 11111                           
 11112                           ;Test.c: 167: lcdInst(0b11000000);;
 11113  0022B6  0EC0               	movlw	192
 11114  0022B8  EC7D  F028         	call	_lcdInst
 11115                           
 11116                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11117  0022BC  0E2A               	movlw	low STR_83
 11118  0022BE  0100               	movlb	0	; () banked
 11119  0022C0  6F8E               	movwf	printf@f& (0+255),b
 11120  0022C2  0EFE               	movlw	high STR_83
 11121  0022C4  0100               	movlb	0	; () banked
 11122  0022C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11123  0022C8  C0E0  F090         	movff	_MAG_signal,?_printf+2
 11124  0022CC  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 11125  0022D0  ECE4  F00A         	call	_printf	;wreg free
 11126                           
 11127                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11128  0022D4  0E05               	movlw	5
 11129  0022D6  0100               	movlb	0	; () banked
 11130  0022D8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11131  0022DA  0E0F               	movlw	15
 11132  0022DC  0100               	movlb	0	; () banked
 11133  0022DE  6FAB               	movwf	??_sensorTest& (0+255),b
 11134  0022E0  0EF1               	movlw	241
 11135  0022E2                     u9147:
 11136  0022E2  2EE8               	decfsz	wreg,f,c
 11137  0022E4  D7FE               	bra	u9147
 11138  0022E6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11139  0022E8  D7FC               	bra	u9147
 11140  0022EA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11141  0022EC  D7FA               	bra	u9147
 11142  0022EE                     l7352:
 11143  0022EE  A281               	btfss	3969,1,c	;volatile
 11144  0022F0  D7DD               	goto	l7346
 11145                           
 11146                           ;Test.c: 170: }
 11147                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11148  0022F2  0E01               	movlw	1
 11149  0022F4  EC7D  F028         	call	_lcdInst
 11150  0022F8  0E68               	movlw	104
 11151  0022FA  0100               	movlb	0	; () banked
 11152  0022FC  6FAB               	movwf	??_sensorTest& (0+255),b
 11153  0022FE  0EE4               	movlw	228
 11154  002300                     u9157:
 11155  002300  2EE8               	decfsz	wreg,f,c
 11156  002302  D7FE               	bra	u9157
 11157  002304  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11158  002306  D7FC               	bra	u9157
 11159  002308  F000               	nop	
 11160  00230A  0E80               	movlw	128
 11161  00230C  EC7D  F028         	call	_lcdInst
 11162                           
 11163                           ;Test.c: 176: printf("TST: COND");
 11164  002310  0E87               	movlw	low STR_84
 11165  002312  0100               	movlb	0	; () banked
 11166  002314  6F8E               	movwf	printf@f& (0+255),b
 11167  002316  0EFF               	movlw	high STR_84
 11168  002318  0100               	movlb	0	; () banked
 11169  00231A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11170  00231C  ECE4  F00A         	call	_printf	;wreg free
 11171                           
 11172                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11173  002320  0E05               	movlw	5
 11174  002322  0100               	movlb	0	; () banked
 11175  002324  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11176  002326  0E0F               	movlw	15
 11177  002328  0100               	movlb	0	; () banked
 11178  00232A  6FAB               	movwf	??_sensorTest& (0+255),b
 11179  00232C  0EF1               	movlw	241
 11180  00232E                     u9167:
 11181  00232E  2EE8               	decfsz	wreg,f,c
 11182  002330  D7FE               	bra	u9167
 11183  002332  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11184  002334  D7FC               	bra	u9167
 11185  002336  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11186  002338  D7FA               	bra	u9167
 11187  00233A                     l7364:
 11188                           
 11189                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11190  00233A  0E01               	movlw	1
 11191  00233C  EC7D  F028         	call	_lcdInst
 11192  002340  0E68               	movlw	104
 11193  002342  0100               	movlb	0	; () banked
 11194  002344  6FAB               	movwf	??_sensorTest& (0+255),b
 11195  002346  0EE4               	movlw	228
 11196  002348                     u9177:
 11197  002348  2EE8               	decfsz	wreg,f,c
 11198  00234A  D7FE               	bra	u9177
 11199  00234C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11200  00234E  D7FC               	bra	u9177
 11201  002350  F000               	nop	
 11202  002352  0E80               	movlw	128
 11203  002354  EC7D  F028         	call	_lcdInst
 11204                           
 11205                           ;Test.c: 180: printf("TST: COND");
 11206  002358  0E87               	movlw	low STR_84
 11207  00235A  0100               	movlb	0	; () banked
 11208  00235C  6F8E               	movwf	printf@f& (0+255),b
 11209  00235E  0EFF               	movlw	high STR_84
 11210  002360  0100               	movlb	0	; () banked
 11211  002362  6F8F               	movwf	(printf@f+1)& (0+255),b
 11212  002364  ECE4  F00A         	call	_printf	;wreg free
 11213                           
 11214                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11215  002368  D01B               	goto	l7376
 11216  00236A                     l7372:
 11217                           
 11218                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11219  00236A  0E80               	movlw	128
 11220  00236C  EC7D  F028         	call	_lcdInst
 11221  002370  0EC0               	movlw	192
 11222  002372  EC7D  F028         	call	_lcdInst
 11223                           
 11224                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11225  002376  0EA5               	movlw	low STR_86
 11226  002378  0100               	movlb	0	; () banked
 11227  00237A  6F8E               	movwf	printf@f& (0+255),b
 11228  00237C  0EFF               	movlw	high STR_86
 11229  00237E  0100               	movlb	0	; () banked
 11230  002380  6F8F               	movwf	(printf@f+1)& (0+255),b
 11231  002382  A480               	btfss	3968,2,c	;volatile
 11232  002384  D004               	goto	u6020
 11233  002386  0100               	movlb	0	; () banked
 11234  002388  6BAB               	clrf	??_sensorTest& (0+255),b
 11235  00238A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11236  00238C  D002               	goto	u6028
 11237  00238E                     u6020:
 11238  00238E  0100               	movlb	0	; () banked
 11239  002390  6BAB               	clrf	??_sensorTest& (0+255),b
 11240  002392                     u6028:
 11241  002392  0100               	movlb	0	; () banked
 11242  002394  51AB               	movf	??_sensorTest& (0+255),w,b
 11243  002396  0100               	movlb	0	; () banked
 11244  002398  6F90               	movwf	(?_printf+2)& (0+255),b
 11245  00239A  6B91               	clrf	(?_printf+3)& (0+255),b
 11246  00239C  ECE4  F00A         	call	_printf	;wreg free
 11247  0023A0                     l7376:
 11248  0023A0  A281               	btfss	3969,1,c	;volatile
 11249  0023A2  D7E3               	goto	l7372
 11250                           
 11251                           ;Test.c: 187: }
 11252                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11253  0023A4  3881               	swapf	3969,w,c	;volatile
 11254  0023A6  0B0F               	andlw	15
 11255  0023A8  0A0F               	xorlw	15
 11256  0023AA  B4D8               	btfsc	status,2,c
 11257  0023AC  0012               	return	
 11258                           
 11259                           ;Test.c: 191: else{
 11260                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11261                           
 11262                           ;Test.c: 190: }
 11263                           
 11264                           ;Test.c: 189: break;
 11265  0023AE  8689               	bsf	3977,3,c	;volatile
 11266                           
 11267                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11268  0023B0  D01B               	goto	l7388
 11269  0023B2                     l7384:
 11270                           
 11271                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11272  0023B2  0E80               	movlw	128
 11273  0023B4  EC7D  F028         	call	_lcdInst
 11274  0023B8  0EC0               	movlw	192
 11275  0023BA  EC7D  F028         	call	_lcdInst
 11276                           
 11277                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11278  0023BE  0EA5               	movlw	low STR_86
 11279  0023C0  0100               	movlb	0	; () banked
 11280  0023C2  6F8E               	movwf	printf@f& (0+255),b
 11281  0023C4  0EFF               	movlw	high STR_86
 11282  0023C6  0100               	movlb	0	; () banked
 11283  0023C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11284  0023CA  A480               	btfss	3968,2,c	;volatile
 11285  0023CC  D004               	goto	u6050
 11286  0023CE  0100               	movlb	0	; () banked
 11287  0023D0  6BAB               	clrf	??_sensorTest& (0+255),b
 11288  0023D2  2BAB               	incf	??_sensorTest& (0+255),f,b
 11289  0023D4  D002               	goto	u6058
 11290  0023D6                     u6050:
 11291  0023D6  0100               	movlb	0	; () banked
 11292  0023D8  6BAB               	clrf	??_sensorTest& (0+255),b
 11293  0023DA                     u6058:
 11294  0023DA  0100               	movlb	0	; () banked
 11295  0023DC  51AB               	movf	??_sensorTest& (0+255),w,b
 11296  0023DE  0100               	movlb	0	; () banked
 11297  0023E0  6F90               	movwf	(?_printf+2)& (0+255),b
 11298  0023E2  6B91               	clrf	(?_printf+3)& (0+255),b
 11299  0023E4  ECE4  F00A         	call	_printf	;wreg free
 11300  0023E8                     l7388:
 11301  0023E8  B281               	btfsc	3969,1,c	;volatile
 11302  0023EA  D7E3               	goto	l7384
 11303                           
 11304                           ;Test.c: 197: }
 11305                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11306  0023EC  9689               	bcf	3977,3,c	;volatile
 11307  0023EE  D7A5               	goto	l7364
 11308  0023F0                     __end_of_sensorTest:
 11309                           	opt stack 0
 11310                           tblptru	equ	0xFF8
 11311                           tblptrh	equ	0xFF7
 11312                           tblptrl	equ	0xFF6
 11313                           tablat	equ	0xFF5
 11314                           prodh	equ	0xFF4
 11315                           prodl	equ	0xFF3
 11316                           intcon	equ	0xFF2
 11317                           intcon2	equ	0xFF1
 11318                           intcon3	equ	0xFF0
 11319                           postinc0	equ	0xFEE
 11320                           wreg	equ	0xFE8
 11321                           postdec1	equ	0xFE5
 11322                           fsr1l	equ	0xFE1
 11323                           indf2	equ	0xFDF
 11324                           postinc2	equ	0xFDE
 11325                           postdec2	equ	0xFDD
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8
 11329                           
 11330 ;; *************** function _readMAG *****************
 11331 ;; Defined at:
 11332 ;;		line 29 in file "ADCFunctionality.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;		None
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  res             2    4[BANK0 ] int 
 11337 ;; Return value:  Size  Location     Type
 11338 ;;                  1    wreg      void 
 11339 ;; Registers used:
 11340 ;;		wreg, status,2, status,0, cstack
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;Total ram usage:        4 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    8
 11353 ;; This function calls:
 11354 ;;		_readADC
 11355 ;; This function is called by:
 11356 ;;		_getMAG
 11357 ;;		_sensorTest
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           	psect	text38
 11362  004A6E                     __ptext38:
 11363                           	opt stack 0
 11364  004A6E                     _readMAG:
 11365                           	opt stack 19
 11366                           
 11367                           ;ADCFunctionality.c: 30: readADC(1);
 11368                           
 11369                           ;incstack = 0
 11370  004A6E  0E01               	movlw	1
 11371  004A70  EC74  F027         	call	_readADC
 11372                           
 11373                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11374  004A74  50C3               	movf	4035,w,c	;volatile
 11375  004A76  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11376  004A7A  0100               	movlb	0	; () banked
 11377  004A7C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11378  004A7E  C082  F083         	movff	??_readMAG,??_readMAG+1
 11379  004A82  0100               	movlb	0	; () banked
 11380  004A84  6B82               	clrf	??_readMAG& (0+255),b
 11381  004A86  0100               	movlb	0	; () banked
 11382  004A88  1182               	iorwf	??_readMAG& (0+255),w,b
 11383  004A8A  0100               	movlb	0	; () banked
 11384  004A8C  6F84               	movwf	readMAG@res& (0+255),b
 11385  004A8E  0100               	movlb	0	; () banked
 11386  004A90  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11387  004A92  0100               	movlb	0	; () banked
 11388  004A94  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11392  004A96  0100               	movlb	0	; () banked
 11393  004A98  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11394  004A9A  D008               	goto	u4461
 11395  004A9C  0100               	movlb	0	; () banked
 11396  004A9E  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11397  004AA0  E107               	bnz	u4460
 11398  004AA2  0E96               	movlw	150
 11399  004AA4  0100               	movlb	0	; () banked
 11400  004AA6  5D84               	subwf	readMAG@res& (0+255),w,b
 11401  004AA8  B0D8               	btfsc	status,0,c
 11402  004AAA  D002               	goto	u4460
 11403  004AAC                     u4461:
 11404  004AAC  0E01               	movlw	1
 11405  004AAE  D001               	goto	u4470
 11406  004AB0                     u4460:
 11407  004AB0  0E00               	movlw	0
 11408  004AB2                     u4470:
 11409  004AB2  0100               	movlb	0	; () banked
 11410  004AB4  6FE0               	movwf	_MAG_signal& (0+255),b
 11411  004AB6  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11412                           
 11413                           ; BSR set to: 0
 11414  004AB8  0012               	return		;funcret
 11415  004ABA                     __end_of_readMAG:
 11416                           	opt stack 0
 11417                           tblptru	equ	0xFF8
 11418                           tblptrh	equ	0xFF7
 11419                           tblptrl	equ	0xFF6
 11420                           tablat	equ	0xFF5
 11421                           prodh	equ	0xFF4
 11422                           prodl	equ	0xFF3
 11423                           intcon	equ	0xFF2
 11424                           intcon2	equ	0xFF1
 11425                           intcon3	equ	0xFF0
 11426                           postinc0	equ	0xFEE
 11427                           wreg	equ	0xFE8
 11428                           postdec1	equ	0xFE5
 11429                           fsr1l	equ	0xFE1
 11430                           indf2	equ	0xFDF
 11431                           postinc2	equ	0xFDE
 11432                           postdec2	equ	0xFDD
 11433                           fsr2h	equ	0xFDA
 11434                           fsr2l	equ	0xFD9
 11435                           status	equ	0xFD8
 11436                           
 11437 ;; *************** function _algorithmTest *****************
 11438 ;; Defined at:
 11439 ;;		line 80 in file "Test.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;		None
 11444 ;; Return value:  Size  Location     Type
 11445 ;;                  1    wreg      void 
 11446 ;; Registers used:
 11447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11448 ;; Tracked objects:
 11449 ;;		On entry : 0/0
 11450 ;;		On exit  : 0/0
 11451 ;;		Unchanged: 0/0
 11452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;Total ram usage:        2 bytes
 11458 ;; Hardware stack levels used:    1
 11459 ;; Hardware stack levels required when called:   10
 11460 ;; This function calls:
 11461 ;;		_lcdInst
 11462 ;;		_printf
 11463 ;; This function is called by:
 11464 ;;		_Test
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text39
 11469  003E26                     __ptext39:
 11470                           	opt stack 0
 11471  003E26                     _algorithmTest:
 11472                           	opt stack 19
 11473                           
 11474                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;incstack = 0
 11478  003E26  0E01               	movlw	1
 11479  003E28  EC7D  F028         	call	_lcdInst
 11480  003E2C  0E68               	movlw	104
 11481  003E2E  0100               	movlb	0	; () banked
 11482  003E30  6FAB               	movwf	??_algorithmTest& (0+255),b
 11483  003E32  0EE4               	movlw	228
 11484  003E34                     u9187:
 11485  003E34  2EE8               	decfsz	wreg,f,c
 11486  003E36  D7FE               	bra	u9187
 11487  003E38  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11488  003E3A  D7FC               	bra	u9187
 11489  003E3C  F000               	nop	
 11490  003E3E  0E80               	movlw	128
 11491  003E40  EC7D  F028         	call	_lcdInst
 11492                           
 11493                           ;Test.c: 83: printf("ALGORITHM TEST");
 11494  003E44  0ED2               	movlw	low STR_70
 11495  003E46  0100               	movlb	0	; () banked
 11496  003E48  6F8E               	movwf	printf@f& (0+255),b
 11497  003E4A  0EFE               	movlw	high STR_70
 11498  003E4C  0100               	movlb	0	; () banked
 11499  003E4E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11500  003E50  ECE4  F00A         	call	_printf	;wreg free
 11501                           
 11502                           ;Test.c: 84: lcdInst(0b11000000);;
 11503  003E54  0EC0               	movlw	192
 11504  003E56  EC7D  F028         	call	_lcdInst
 11505                           
 11506                           ;Test.c: 85: printf("PUSH TO START");
 11507  003E5A  0E0B               	movlw	low STR_71
 11508  003E5C  0100               	movlb	0	; () banked
 11509  003E5E  6F8E               	movwf	printf@f& (0+255),b
 11510  003E60  0EFF               	movlw	high STR_71
 11511  003E62  0100               	movlb	0	; () banked
 11512  003E64  6F8F               	movwf	(printf@f+1)& (0+255),b
 11513  003E66  ECE4  F00A         	call	_printf	;wreg free
 11514                           
 11515                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11516  003E6A  0E05               	movlw	5
 11517  003E6C  0100               	movlb	0	; () banked
 11518  003E6E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11519  003E70  0E0F               	movlw	15
 11520  003E72  0100               	movlb	0	; () banked
 11521  003E74  6FAB               	movwf	??_algorithmTest& (0+255),b
 11522  003E76  0EF1               	movlw	241
 11523  003E78                     u9197:
 11524  003E78  2EE8               	decfsz	wreg,f,c
 11525  003E7A  D7FE               	bra	u9197
 11526  003E7C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11527  003E7E  D7FC               	bra	u9197
 11528  003E80  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11529  003E82  D7FA               	bra	u9197
 11530  003E84                     l1128:
 11531  003E84  A281               	btfss	3969,1,c	;volatile
 11532  003E86  D7FE               	goto	l1128
 11533  003E88                     l1131:
 11534  003E88  B281               	btfsc	3969,1,c	;volatile
 11535  003E8A  D7FE               	goto	l1131
 11536                           
 11537                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11538  003E8C  0E01               	movlw	1
 11539  003E8E  EC7D  F028         	call	_lcdInst
 11540  003E92  0E68               	movlw	104
 11541  003E94  0100               	movlb	0	; () banked
 11542  003E96  6FAB               	movwf	??_algorithmTest& (0+255),b
 11543  003E98  0EE4               	movlw	228
 11544  003E9A                     u9207:
 11545  003E9A  2EE8               	decfsz	wreg,f,c
 11546  003E9C  D7FE               	bra	u9207
 11547  003E9E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11548  003EA0  D7FC               	bra	u9207
 11549  003EA2  F000               	nop	
 11550  003EA4  0E80               	movlw	128
 11551  003EA6  EC7D  F028         	call	_lcdInst
 11552                           
 11553                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11554  003EAA  0E5F               	movlw	low STR_72
 11555  003EAC  0100               	movlb	0	; () banked
 11556  003EAE  6F8E               	movwf	printf@f& (0+255),b
 11557  003EB0  0EFC               	movlw	high STR_72
 11558  003EB2  0100               	movlb	0	; () banked
 11559  003EB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11560  003EB6  ECE4  F00A         	call	_printf	;wreg free
 11561                           
 11562                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11563  003EBA  0EEF               	movlw	low STR_73
 11564  003EBC  0100               	movlb	0	; () banked
 11565  003EBE  6F8E               	movwf	printf@f& (0+255),b
 11566  003EC0  0EFE               	movlw	high STR_73
 11567  003EC2  0100               	movlb	0	; () banked
 11568  003EC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11569  003EC6  ECE4  F00A         	call	_printf	;wreg free
 11570                           
 11571                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11572  003ECA  0E4F               	movlw	low STR_74
 11573  003ECC  0100               	movlb	0	; () banked
 11574  003ECE  6F8E               	movwf	printf@f& (0+255),b
 11575  003ED0  0EFF               	movlw	high STR_74
 11576  003ED2  0100               	movlb	0	; () banked
 11577  003ED4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11578  003ED6  ECE4  F00A         	call	_printf	;wreg free
 11579                           
 11580                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11581  003EDA  0EB4               	movlw	low STR_75
 11582  003EDC  0100               	movlb	0	; () banked
 11583  003EDE  6F8E               	movwf	printf@f& (0+255),b
 11584  003EE0  0EFE               	movlw	high STR_75
 11585  003EE2  0100               	movlb	0	; () banked
 11586  003EE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11587  003EE6  ECE4  F00A         	call	_printf	;wreg free
 11588                           
 11589                           ;Test.c: 121: printf("ALG5: NO CANS");
 11590  003EEA  0EFD               	movlw	low STR_76
 11591  003EEC  0100               	movlb	0	; () banked
 11592  003EEE  6F8E               	movwf	printf@f& (0+255),b
 11593  003EF0  0EFE               	movlw	high STR_76
 11594  003EF2  0100               	movlb	0	; () banked
 11595  003EF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11596  003EF6  ECE4  F00A         	call	_printf	;wreg free
 11597  003EFA  0012               	return		;funcret
 11598  003EFC                     __end_of_algorithmTest:
 11599                           	opt stack 0
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodh	equ	0xFF4
 11605                           prodl	equ	0xFF3
 11606                           intcon	equ	0xFF2
 11607                           intcon2	equ	0xFF1
 11608                           intcon3	equ	0xFF0
 11609                           postinc0	equ	0xFEE
 11610                           wreg	equ	0xFE8
 11611                           postdec1	equ	0xFE5
 11612                           fsr1l	equ	0xFE1
 11613                           indf2	equ	0xFDF
 11614                           postinc2	equ	0xFDE
 11615                           postdec2	equ	0xFDD
 11616                           fsr2h	equ	0xFDA
 11617                           fsr2l	equ	0xFD9
 11618                           status	equ	0xFD8
 11619                           
 11620 ;; *************** function _actuatorTest *****************
 11621 ;; Defined at:
 11622 ;;		line 203 in file "Test.c"
 11623 ;; Parameters:    Size  Location     Type
 11624 ;;		None
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;  i               1   45[BANK0 ] unsigned char 
 11627 ;;  i               1   67[BANK0 ] unsigned char 
 11628 ;;  i               1   66[BANK0 ] unsigned char 
 11629 ;;  i               1   65[BANK0 ] unsigned char 
 11630 ;;  i               1   64[BANK0 ] unsigned char 
 11631 ;;  i               1   63[BANK0 ] unsigned char 
 11632 ;;  i               1   62[BANK0 ] unsigned char 
 11633 ;;  i               1   61[BANK0 ] unsigned char 
 11634 ;;  i               1   60[BANK0 ] unsigned char 
 11635 ;;  i               1   59[BANK0 ] unsigned char 
 11636 ;;  i               1   58[BANK0 ] unsigned char 
 11637 ;;  i               1   57[BANK0 ] unsigned char 
 11638 ;;  i               1   56[BANK0 ] unsigned char 
 11639 ;;  i               1   55[BANK0 ] unsigned char 
 11640 ;;  i               1   54[BANK0 ] unsigned char 
 11641 ;;  i               1   53[BANK0 ] unsigned char 
 11642 ;;  i               1   52[BANK0 ] unsigned char 
 11643 ;;  i               1   51[BANK0 ] unsigned char 
 11644 ;;  i               1   50[BANK0 ] unsigned char 
 11645 ;;  i               1   49[BANK0 ] unsigned char 
 11646 ;;  i               1   48[BANK0 ] unsigned char 
 11647 ;;  i               1   47[BANK0 ] unsigned char 
 11648 ;;  i               1   46[BANK0 ] unsigned char 
 11649 ;;  i               2   68[BANK0 ] int 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      void 
 11652 ;; Registers used:
 11653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11660 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;Total ram usage:       27 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:   10
 11666 ;; This function calls:
 11667 ;;		_lcdInst
 11668 ;;		_printf
 11669 ;;		_updateServoPosition
 11670 ;; This function is called by:
 11671 ;;		_Test
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           	psect	text40
 11676  000012                     __ptext40:
 11677                           	opt stack 0
 11678  000012                     _actuatorTest:
 11679                           	opt stack 19
 11680                           
 11681                           ;Test.c: 205: int i = 0;
 11682                           
 11683                           ;incstack = 0
 11684  000012  0E00               	movlw	0
 11685  000014  0100               	movlb	0	; () banked
 11686  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11687  000018  0E00               	movlw	0
 11688  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11692  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11696  00001E  0E01               	movlw	1
 11697  000020  EC7D  F028         	call	_lcdInst
 11698  000024  0E68               	movlw	104
 11699  000026  0100               	movlb	0	; () banked
 11700  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11701  00002A  0EE4               	movlw	228
 11702  00002C                     u9217:
 11703  00002C  2EE8               	decfsz	wreg,f,c
 11704  00002E  D7FE               	bra	u9217
 11705  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11706  000032  D7FC               	bra	u9217
 11707  000034  F000               	nop	
 11708  000036  0E80               	movlw	128
 11709  000038  EC7D  F028         	call	_lcdInst
 11710                           
 11711                           ;Test.c: 209: printf("ACTUATORS");
 11712  00003C  0E91               	movlw	low STR_88
 11713  00003E  0100               	movlb	0	; () banked
 11714  000040  6F8E               	movwf	printf@f& (0+255),b
 11715  000042  0EFF               	movlw	high STR_88
 11716  000044  0100               	movlb	0	; () banked
 11717  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11718  000048  ECE4  F00A         	call	_printf	;wreg free
 11719                           
 11720                           ;Test.c: 210: lcdInst(0b11000000);;
 11721  00004C  0EC0               	movlw	192
 11722  00004E  EC7D  F028         	call	_lcdInst
 11723                           
 11724                           ;Test.c: 211: printf("PUSH TO START");
 11725  000052  0E0B               	movlw	low STR_71
 11726  000054  0100               	movlb	0	; () banked
 11727  000056  6F8E               	movwf	printf@f& (0+255),b
 11728  000058  0EFF               	movlw	high STR_71
 11729  00005A  0100               	movlb	0	; () banked
 11730  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11731  00005E  ECE4  F00A         	call	_printf	;wreg free
 11732                           
 11733                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11734  000062  0E05               	movlw	5
 11735  000064  0100               	movlb	0	; () banked
 11736  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11737  000068  0E0F               	movlw	15
 11738  00006A  0100               	movlb	0	; () banked
 11739  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11740  00006E  0EF1               	movlw	241
 11741  000070                     u9227:
 11742  000070  2EE8               	decfsz	wreg,f,c
 11743  000072  D7FE               	bra	u9227
 11744  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11745  000076  D7FC               	bra	u9227
 11746  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11747  00007A  D7FA               	bra	u9227
 11748  00007C                     l1163:
 11749  00007C  A281               	btfss	3969,1,c	;volatile
 11750  00007E  D7FE               	goto	l1163
 11751  000080                     l1166:
 11752  000080  B281               	btfsc	3969,1,c	;volatile
 11753  000082  D7FE               	goto	l1166
 11754                           
 11755                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11756  000084  0E01               	movlw	1
 11757  000086  EC7D  F028         	call	_lcdInst
 11758  00008A  0E68               	movlw	104
 11759  00008C  0100               	movlb	0	; () banked
 11760  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11761  000090  0EE4               	movlw	228
 11762  000092                     u9237:
 11763  000092  2EE8               	decfsz	wreg,f,c
 11764  000094  D7FE               	bra	u9237
 11765  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11766  000098  D7FC               	bra	u9237
 11767  00009A  F000               	nop	
 11768  00009C  0E80               	movlw	128
 11769  00009E  EC7D  F028         	call	_lcdInst
 11770                           
 11771                           ;Test.c: 220: printf("TST: DC MOTORS");
 11772  0000A2  0EC3               	movlw	low STR_90
 11773  0000A4  0100               	movlb	0	; () banked
 11774  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11775  0000A8  0EFE               	movlw	high STR_90
 11776  0000AA  0100               	movlb	0	; () banked
 11777  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11778  0000AE  ECE4  F00A         	call	_printf	;wreg free
 11779                           
 11780                           ;Test.c: 221: lcdInst(0b11000000);;
 11781  0000B2  0EC0               	movlw	192
 11782  0000B4  EC7D  F028         	call	_lcdInst
 11783                           
 11784                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11785  0000B8  0EE1               	movlw	low STR_91
 11786  0000BA  0100               	movlb	0	; () banked
 11787  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11788  0000BE  0EFE               	movlw	high STR_91
 11789  0000C0  0100               	movlb	0	; () banked
 11790  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11791  0000C4  ECE4  F00A         	call	_printf	;wreg free
 11792                           
 11793                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11794  0000C8  8A89               	bsf	3977,5,c	;volatile
 11795                           
 11796                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11797  0000CA  0E00               	movlw	0
 11798  0000CC  0100               	movlb	0	; () banked
 11799  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11800  0000D0  0E00               	movlw	0
 11801  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11802                           
 11803                           ; BSR set to: 0
 11804  0000D4  0100               	movlb	0	; () banked
 11805  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11806  0000D8  D008               	goto	l7428
 11807  0000DA  0100               	movlb	0	; () banked
 11808  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11809  0000DE  E123               	bnz	l1170
 11810  0000E0  0E05               	movlw	5
 11811  0000E2  0100               	movlb	0	; () banked
 11812  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11813  0000E6  B0D8               	btfsc	status,0,c
 11814  0000E8  D01E               	goto	l1170
 11815  0000EA                     l7428:
 11816                           
 11817                           ; BSR set to: 0
 11818  0000EA  0E00               	movlw	0
 11819  0000EC  0100               	movlb	0	; () banked
 11820  0000EE  6FAD               	movwf	actuatorTest@i_1654& (0+255),b
 11821  0000F0                     l7430:
 11822                           
 11823                           ; BSR set to: 0
 11824  0000F0  0E63               	movlw	99
 11825  0000F2  0100               	movlb	0	; () banked
 11826  0000F4  65AD               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11827  0000F6  D001               	goto	l7434
 11828  0000F8  D00C               	goto	l7438
 11829  0000FA                     l7434:
 11830                           
 11831                           ; BSR set to: 0
 11832  0000FA  0E68               	movlw	104
 11833  0000FC  0100               	movlb	0	; () banked
 11834  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11835  000100  0EE4               	movlw	228
 11836  000102                     u9247:
 11837  000102  2EE8               	decfsz	wreg,f,c
 11838  000104  D7FE               	bra	u9247
 11839  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11840  000108  D7FC               	bra	u9247
 11841  00010A  F000               	nop	
 11842  00010C  0100               	movlb	0	; () banked
 11843  00010E  2BAD               	incf	actuatorTest@i_1654& (0+255),f,b
 11844  000110  D7EF               	goto	l7430
 11845  000112                     l7438:
 11846                           
 11847                           ; BSR set to: 0
 11848  000112  0100               	movlb	0	; () banked
 11849  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11850  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11851                           
 11852                           ; BSR set to: 0
 11853  000118  0100               	movlb	0	; () banked
 11854  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11855  00011C  D7E6               	goto	l7428
 11856  00011E  0100               	movlb	0	; () banked
 11857  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11858  000122  E101               	bnz	u6120
 11859  000124  D7DD               	goto	L10
 11860  000126                     u6120:
 11861  000126                     l1170:
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11865  000126  9A89               	bcf	3977,5,c	;volatile
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11869  000128  0E01               	movlw	1
 11870  00012A  EC7D  F028         	call	_lcdInst
 11871  00012E  0E68               	movlw	104
 11872  000130  0100               	movlb	0	; () banked
 11873  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11874  000134  0EE4               	movlw	228
 11875  000136                     u9257:
 11876  000136  2EE8               	decfsz	wreg,f,c
 11877  000138  D7FE               	bra	u9257
 11878  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11879  00013C  D7FC               	bra	u9257
 11880  00013E  F000               	nop	
 11881  000140  0E80               	movlw	128
 11882  000142  EC7D  F028         	call	_lcdInst
 11883                           
 11884                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11885  000146  0E70               	movlw	low STR_92
 11886  000148  0100               	movlb	0	; () banked
 11887  00014A  6F8E               	movwf	printf@f& (0+255),b
 11888  00014C  0EFC               	movlw	high STR_92
 11889  00014E  0100               	movlb	0	; () banked
 11890  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11891  000152  ECE4  F00A         	call	_printf	;wreg free
 11892                           
 11893                           ;Test.c: 233: lcdInst(0b11000000);;
 11894  000156  0EC0               	movlw	192
 11895  000158  EC7D  F028         	call	_lcdInst
 11896                           
 11897                           ;Test.c: 234: printf("PIN RA3...");
 11898  00015C  0E5B               	movlw	low STR_93
 11899  00015E  0100               	movlb	0	; () banked
 11900  000160  6F8E               	movwf	printf@f& (0+255),b
 11901  000162  0EFF               	movlw	high STR_93
 11902  000164  0100               	movlb	0	; () banked
 11903  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11904  000168  ECE4  F00A         	call	_printf	;wreg free
 11905                           
 11906                           ;Test.c: 235: for(i=0;i<5;i++){
 11907  00016C  0E00               	movlw	0
 11908  00016E  0100               	movlb	0	; () banked
 11909  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11910  000172  0E00               	movlw	0
 11911  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11912                           
 11913                           ; BSR set to: 0
 11914  000176  0100               	movlb	0	; () banked
 11915  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11916  00017A  D008               	goto	l1173
 11917  00017C  0100               	movlb	0	; () banked
 11918  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11919  000180  E12C               	bnz	l1174
 11920  000182  0E05               	movlw	5
 11921  000184  0100               	movlb	0	; () banked
 11922  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11923  000188  B0D8               	btfsc	status,0,c
 11924  00018A  D027               	goto	l1174
 11925  00018C                     l1173:
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11929  00018C  8689               	bsf	3977,3,c	;volatile
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11933  00018E  0E0D               	movlw	13
 11934  000190  0100               	movlb	0	; () banked
 11935  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11936  000194  0E2D               	movlw	45
 11937  000196  0100               	movlb	0	; () banked
 11938  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11939  00019A  0ED7               	movlw	215
 11940  00019C                     u9267:
 11941  00019C  2EE8               	decfsz	wreg,f,c
 11942  00019E  D7FE               	bra	u9267
 11943  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11944  0001A2  D7FC               	bra	u9267
 11945  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11946  0001A6  D7FA               	bra	u9267
 11947  0001A8  D000               	nop2	
 11948                           
 11949                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11950  0001AA  9689               	bcf	3977,3,c	;volatile
 11951                           
 11952                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11953  0001AC  0E1D               	movlw	29
 11954  0001AE  0100               	movlb	0	; () banked
 11955  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11956  0001B2  0E69               	movlw	105
 11957  0001B4  0100               	movlb	0	; () banked
 11958  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11959  0001B8  0EA5               	movlw	165
 11960  0001BA                     u9277:
 11961  0001BA  2EE8               	decfsz	wreg,f,c
 11962  0001BC  D7FE               	bra	u9277
 11963  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11964  0001C0  D7FC               	bra	u9277
 11965  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11966  0001C4  D7FA               	bra	u9277
 11967  0001C6  0100               	movlb	0	; () banked
 11968  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11969  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11970  0001CC  0100               	movlb	0	; () banked
 11971  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11972  0001D0  D7DD               	goto	l1173
 11973  0001D2  0100               	movlb	0	; () banked
 11974  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11975  0001D6  E101               	bnz	u6140
 11976  0001D8  D7D4               	goto	L11
 11977  0001DA                     u6140:
 11978  0001DA                     l1174:
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;Test.c: 240: }
 11982                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11983  0001DA  9689               	bcf	3977,3,c	;volatile
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11987  0001DC  0E01               	movlw	1
 11988  0001DE  EC7D  F028         	call	_lcdInst
 11989  0001E2  0E68               	movlw	104
 11990  0001E4  0100               	movlb	0	; () banked
 11991  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11992  0001E8  0EE4               	movlw	228
 11993  0001EA                     u9287:
 11994  0001EA  2EE8               	decfsz	wreg,f,c
 11995  0001EC  D7FE               	bra	u9287
 11996  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11997  0001F0  D7FC               	bra	u9287
 11998  0001F2  F000               	nop	
 11999  0001F4  0E80               	movlw	128
 12000  0001F6  EC7D  F028         	call	_lcdInst
 12001                           
 12002                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 12003  0001FA  0E81               	movlw	low STR_94
 12004  0001FC  0100               	movlb	0	; () banked
 12005  0001FE  6F8E               	movwf	printf@f& (0+255),b
 12006  000200  0EFC               	movlw	high STR_94
 12007  000202  0100               	movlb	0	; () banked
 12008  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 12009  000206  ECE4  F00A         	call	_printf	;wreg free
 12010                           
 12011                           ;Test.c: 249: lcdInst(0b11000000);;
 12012  00020A  0EC0               	movlw	192
 12013  00020C  EC7D  F028         	call	_lcdInst
 12014                           
 12015                           ;Test.c: 250: printf("PIN RA4...");
 12016  000210  0E66               	movlw	low STR_95
 12017  000212  0100               	movlb	0	; () banked
 12018  000214  6F8E               	movwf	printf@f& (0+255),b
 12019  000216  0EFF               	movlw	high STR_95
 12020  000218  0100               	movlb	0	; () banked
 12021  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12022  00021C  ECE4  F00A         	call	_printf	;wreg free
 12023                           
 12024                           ;Test.c: 251: for(i=0;i<5;i++){
 12025  000220  0E00               	movlw	0
 12026  000222  0100               	movlb	0	; () banked
 12027  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12028  000226  0E00               	movlw	0
 12029  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12030                           
 12031                           ; BSR set to: 0
 12032  00022A  0100               	movlb	0	; () banked
 12033  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12034  00022E  D008               	goto	l1175
 12035  000230  0100               	movlb	0	; () banked
 12036  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12037  000234  E12C               	bnz	l1176
 12038  000236  0E05               	movlw	5
 12039  000238  0100               	movlb	0	; () banked
 12040  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12041  00023C  B0D8               	btfsc	status,0,c
 12042  00023E  D027               	goto	l1176
 12043  000240                     l1175:
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12047  000240  8889               	bsf	3977,4,c	;volatile
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12051  000242  0E0D               	movlw	13
 12052  000244  0100               	movlb	0	; () banked
 12053  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12054  000248  0E2D               	movlw	45
 12055  00024A  0100               	movlb	0	; () banked
 12056  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12057  00024E  0ED7               	movlw	215
 12058  000250                     u9297:
 12059  000250  2EE8               	decfsz	wreg,f,c
 12060  000252  D7FE               	bra	u9297
 12061  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12062  000256  D7FC               	bra	u9297
 12063  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12064  00025A  D7FA               	bra	u9297
 12065  00025C  D000               	nop2	
 12066                           
 12067                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12068  00025E  9889               	bcf	3977,4,c	;volatile
 12069                           
 12070                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12071  000260  0E1D               	movlw	29
 12072  000262  0100               	movlb	0	; () banked
 12073  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12074  000266  0E69               	movlw	105
 12075  000268  0100               	movlb	0	; () banked
 12076  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12077  00026C  0EA5               	movlw	165
 12078  00026E                     u9307:
 12079  00026E  2EE8               	decfsz	wreg,f,c
 12080  000270  D7FE               	bra	u9307
 12081  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12082  000274  D7FC               	bra	u9307
 12083  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12084  000278  D7FA               	bra	u9307
 12085  00027A  0100               	movlb	0	; () banked
 12086  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12087  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12088  000280  0100               	movlb	0	; () banked
 12089  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12090  000284  D7DD               	goto	l1175
 12091  000286  0100               	movlb	0	; () banked
 12092  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12093  00028A  E101               	bnz	u6160
 12094  00028C  D7D4               	goto	L12
 12095  00028E                     u6160:
 12096  00028E                     l1176:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;Test.c: 256: }
 12100                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12101  00028E  9889               	bcf	3977,4,c	;volatile
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12105  000290  0E01               	movlw	1
 12106  000292  EC7D  F028         	call	_lcdInst
 12107  000296  0E68               	movlw	104
 12108  000298  0100               	movlb	0	; () banked
 12109  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12110  00029C  0EE4               	movlw	228
 12111  00029E                     u9317:
 12112  00029E  2EE8               	decfsz	wreg,f,c
 12113  0002A0  D7FE               	bra	u9317
 12114  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12115  0002A4  D7FC               	bra	u9317
 12116  0002A6  F000               	nop	
 12117  0002A8  0E80               	movlw	128
 12118  0002AA  EC7D  F028         	call	_lcdInst
 12119                           
 12120                           ;Test.c: 261: machine_state = Sorting_state;
 12121  0002AE  0E01               	movlw	1
 12122  0002B0  0100               	movlb	0	; () banked
 12123  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;Test.c: 262: was_low_1 = 0;
 12127  0002B4  0E00               	movlw	0
 12128  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12129  0002B8  0E00               	movlw	0
 12130  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;Test.c: 263: was_low_1 = 0;
 12134  0002BC  0E00               	movlw	0
 12135  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12136  0002C0  0E00               	movlw	0
 12137  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;Test.c: 270: printf("TST: PAN SERVO");
 12141  0002C4  0EA5               	movlw	low STR_96
 12142  0002C6  0100               	movlb	0	; () banked
 12143  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12144  0002CA  0EFE               	movlw	high STR_96
 12145  0002CC  0100               	movlb	0	; () banked
 12146  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12147  0002D0  ECE4  F00A         	call	_printf	;wreg free
 12148                           
 12149                           ;Test.c: 271: lcdInst(0b11000000);;
 12150  0002D4  0EC0               	movlw	192
 12151  0002D6  EC7D  F028         	call	_lcdInst
 12152                           
 12153                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12154  0002DA  0E0A               	movlw	low STR_97
 12155  0002DC  0100               	movlb	0	; () banked
 12156  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12157  0002E0  0EFC               	movlw	high STR_97
 12158  0002E2  0100               	movlb	0	; () banked
 12159  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12160  0002E6  ECE4  F00A         	call	_printf	;wreg free
 12161                           
 12162                           ;Test.c: 273: updateServoPosition(1200, 1);
 12163  0002EA  0E04               	movlw	4
 12164  0002EC  0100               	movlb	0	; () banked
 12165  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12166  0002F0  0EB0               	movlw	176
 12167  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12168  0002F4  0E00               	movlw	0
 12169  0002F6  0100               	movlb	0	; () banked
 12170  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12171  0002FA  0E01               	movlw	1
 12172  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12173  0002FE  ECCB  F022         	call	_updateServoPosition	;wreg free
 12174                           
 12175                           ;Test.c: 274: TMR1ON = 1;
 12176  000302  80CD               	bsf	4045,0,c	;volatile
 12177                           
 12178                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12179  000304  0E00               	movlw	0
 12180  000306  0100               	movlb	0	; () banked
 12181  000308  6FAE               	movwf	actuatorTest@i_1661& (0+255),b
 12182  00030A                     l7514:
 12183                           
 12184                           ; BSR set to: 0
 12185  00030A  0E63               	movlw	99
 12186  00030C  0100               	movlb	0	; () banked
 12187  00030E  65AE               	cpfsgt	actuatorTest@i_1661& (0+255),b
 12188  000310  D001               	goto	l7518
 12189  000312  D00C               	goto	l7522
 12190  000314                     l7518:
 12191                           
 12192                           ; BSR set to: 0
 12193  000314  0E68               	movlw	104
 12194  000316  0100               	movlb	0	; () banked
 12195  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12196  00031A  0EE4               	movlw	228
 12197  00031C                     u9327:
 12198  00031C  2EE8               	decfsz	wreg,f,c
 12199  00031E  D7FE               	bra	u9327
 12200  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12201  000322  D7FC               	bra	u9327
 12202  000324  F000               	nop	
 12203  000326  0100               	movlb	0	; () banked
 12204  000328  2BAE               	incf	actuatorTest@i_1661& (0+255),f,b
 12205  00032A  D7EF               	goto	l7514
 12206  00032C                     l7522:
 12207                           
 12208                           ; BSR set to: 0
 12209  00032C  0E00               	movlw	0
 12210  00032E  0100               	movlb	0	; () banked
 12211  000330  6FAF               	movwf	actuatorTest@i_1662& (0+255),b
 12212  000332                     l7524:
 12213                           
 12214                           ; BSR set to: 0
 12215  000332  0E63               	movlw	99
 12216  000334  0100               	movlb	0	; () banked
 12217  000336  65AF               	cpfsgt	actuatorTest@i_1662& (0+255),b
 12218  000338  D001               	goto	l7528
 12219  00033A  D00C               	goto	l7532
 12220  00033C                     l7528:
 12221                           
 12222                           ; BSR set to: 0
 12223  00033C  0E68               	movlw	104
 12224  00033E  0100               	movlb	0	; () banked
 12225  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12226  000342  0EE4               	movlw	228
 12227  000344                     u9337:
 12228  000344  2EE8               	decfsz	wreg,f,c
 12229  000346  D7FE               	bra	u9337
 12230  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12231  00034A  D7FC               	bra	u9337
 12232  00034C  F000               	nop	
 12233  00034E  0100               	movlb	0	; () banked
 12234  000350  2BAF               	incf	actuatorTest@i_1662& (0+255),f,b
 12235  000352  D7EF               	goto	l7524
 12236  000354                     l7532:
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12240  000354  0E80               	movlw	128
 12241  000356  EC7D  F028         	call	_lcdInst
 12242  00035A  0EC0               	movlw	192
 12243  00035C  EC7D  F028         	call	_lcdInst
 12244                           
 12245                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12246  000360  0EF9               	movlw	low STR_98
 12247  000362  0100               	movlb	0	; () banked
 12248  000364  6F8E               	movwf	printf@f& (0+255),b
 12249  000366  0EFB               	movlw	high STR_98
 12250  000368  0100               	movlb	0	; () banked
 12251  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12252  00036C  ECE4  F00A         	call	_printf	;wreg free
 12253                           
 12254                           ;Test.c: 279: updateServoPosition(500, 1);
 12255  000370  0E01               	movlw	1
 12256  000372  0100               	movlb	0	; () banked
 12257  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12258  000376  0EF4               	movlw	244
 12259  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12260  00037A  0E00               	movlw	0
 12261  00037C  0100               	movlb	0	; () banked
 12262  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12263  000380  0E01               	movlw	1
 12264  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12265  000384  ECCB  F022         	call	_updateServoPosition	;wreg free
 12266                           
 12267                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12268  000388  0E00               	movlw	0
 12269  00038A  0100               	movlb	0	; () banked
 12270  00038C  6FB0               	movwf	actuatorTest@i_1664& (0+255),b
 12271  00038E                     l7540:
 12272                           
 12273                           ; BSR set to: 0
 12274  00038E  0E63               	movlw	99
 12275  000390  0100               	movlb	0	; () banked
 12276  000392  65B0               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12277  000394  D001               	goto	l7544
 12278  000396  D00C               	goto	l7548
 12279  000398                     l7544:
 12280                           
 12281                           ; BSR set to: 0
 12282  000398  0E68               	movlw	104
 12283  00039A  0100               	movlb	0	; () banked
 12284  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12285  00039E  0EE4               	movlw	228
 12286  0003A0                     u9347:
 12287  0003A0  2EE8               	decfsz	wreg,f,c
 12288  0003A2  D7FE               	bra	u9347
 12289  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12290  0003A6  D7FC               	bra	u9347
 12291  0003A8  F000               	nop	
 12292  0003AA  0100               	movlb	0	; () banked
 12293  0003AC  2BB0               	incf	actuatorTest@i_1664& (0+255),f,b
 12294  0003AE  D7EF               	goto	l7540
 12295  0003B0                     l7548:
 12296                           
 12297                           ; BSR set to: 0
 12298  0003B0  0E00               	movlw	0
 12299  0003B2  0100               	movlb	0	; () banked
 12300  0003B4  6FB1               	movwf	actuatorTest@i_1665& (0+255),b
 12301  0003B6                     l7550:
 12302                           
 12303                           ; BSR set to: 0
 12304  0003B6  0E63               	movlw	99
 12305  0003B8  0100               	movlb	0	; () banked
 12306  0003BA  65B1               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12307  0003BC  D001               	goto	l7554
 12308  0003BE  D00C               	goto	l7558
 12309  0003C0                     l7554:
 12310                           
 12311                           ; BSR set to: 0
 12312  0003C0  0E68               	movlw	104
 12313  0003C2  0100               	movlb	0	; () banked
 12314  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12315  0003C6  0EE4               	movlw	228
 12316  0003C8                     u9357:
 12317  0003C8  2EE8               	decfsz	wreg,f,c
 12318  0003CA  D7FE               	bra	u9357
 12319  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12320  0003CE  D7FC               	bra	u9357
 12321  0003D0  F000               	nop	
 12322  0003D2  0100               	movlb	0	; () banked
 12323  0003D4  2BB1               	incf	actuatorTest@i_1665& (0+255),f,b
 12324  0003D6  D7EF               	goto	l7550
 12325  0003D8                     l7558:
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12329  0003D8  0E80               	movlw	128
 12330  0003DA  EC7D  F028         	call	_lcdInst
 12331  0003DE  0EC0               	movlw	192
 12332  0003E0  EC7D  F028         	call	_lcdInst
 12333                           
 12334                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12335  0003E4  0ED7               	movlw	low STR_99
 12336  0003E6  0100               	movlb	0	; () banked
 12337  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12338  0003EA  0EFB               	movlw	high STR_99
 12339  0003EC  0100               	movlb	0	; () banked
 12340  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12341  0003F0  ECE4  F00A         	call	_printf	;wreg free
 12342                           
 12343                           ;Test.c: 284: updateServoPosition(2400, 1);
 12344  0003F4  0E09               	movlw	9
 12345  0003F6  0100               	movlb	0	; () banked
 12346  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12347  0003FA  0E60               	movlw	96
 12348  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12349  0003FE  0E00               	movlw	0
 12350  000400  0100               	movlb	0	; () banked
 12351  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12352  000404  0E01               	movlw	1
 12353  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12354  000408  ECCB  F022         	call	_updateServoPosition	;wreg free
 12355                           
 12356                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12357  00040C  0E00               	movlw	0
 12358  00040E  0100               	movlb	0	; () banked
 12359  000410  6FB2               	movwf	actuatorTest@i_1667& (0+255),b
 12360  000412                     l7566:
 12361                           
 12362                           ; BSR set to: 0
 12363  000412  0E63               	movlw	99
 12364  000414  0100               	movlb	0	; () banked
 12365  000416  65B2               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12366  000418  D001               	goto	l7570
 12367  00041A  D00C               	goto	l7574
 12368  00041C                     l7570:
 12369                           
 12370                           ; BSR set to: 0
 12371  00041C  0E68               	movlw	104
 12372  00041E  0100               	movlb	0	; () banked
 12373  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12374  000422  0EE4               	movlw	228
 12375  000424                     u9367:
 12376  000424  2EE8               	decfsz	wreg,f,c
 12377  000426  D7FE               	bra	u9367
 12378  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12379  00042A  D7FC               	bra	u9367
 12380  00042C  F000               	nop	
 12381  00042E  0100               	movlb	0	; () banked
 12382  000430  2BB2               	incf	actuatorTest@i_1667& (0+255),f,b
 12383  000432  D7EF               	goto	l7566
 12384  000434                     l7574:
 12385                           
 12386                           ; BSR set to: 0
 12387  000434  0E00               	movlw	0
 12388  000436  0100               	movlb	0	; () banked
 12389  000438  6FB3               	movwf	actuatorTest@i_1668& (0+255),b
 12390  00043A                     l7576:
 12391                           
 12392                           ; BSR set to: 0
 12393  00043A  0E63               	movlw	99
 12394  00043C  0100               	movlb	0	; () banked
 12395  00043E  65B3               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12396  000440  D001               	goto	l7580
 12397  000442  D00C               	goto	l7584
 12398  000444                     l7580:
 12399                           
 12400                           ; BSR set to: 0
 12401  000444  0E68               	movlw	104
 12402  000446  0100               	movlb	0	; () banked
 12403  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12404  00044A  0EE4               	movlw	228
 12405  00044C                     u9377:
 12406  00044C  2EE8               	decfsz	wreg,f,c
 12407  00044E  D7FE               	bra	u9377
 12408  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12409  000452  D7FC               	bra	u9377
 12410  000454  F000               	nop	
 12411  000456  0100               	movlb	0	; () banked
 12412  000458  2BB3               	incf	actuatorTest@i_1668& (0+255),f,b
 12413  00045A  D7EF               	goto	l7576
 12414  00045C                     l7584:
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12418  00045C  0E80               	movlw	128
 12419  00045E  EC7D  F028         	call	_lcdInst
 12420  000462  0EC0               	movlw	192
 12421  000464  EC7D  F028         	call	_lcdInst
 12422                           
 12423                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12424  000468  0E2C               	movlw	low STR_100
 12425  00046A  0100               	movlb	0	; () banked
 12426  00046C  6F8E               	movwf	printf@f& (0+255),b
 12427  00046E  0EFC               	movlw	high STR_100
 12428  000470  0100               	movlb	0	; () banked
 12429  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12430  000474  ECE4  F00A         	call	_printf	;wreg free
 12431                           
 12432                           ;Test.c: 289: updateServoPosition(1670, 1);
 12433  000478  0E06               	movlw	6
 12434  00047A  0100               	movlb	0	; () banked
 12435  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12436  00047E  0E86               	movlw	134
 12437  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12438  000482  0E00               	movlw	0
 12439  000484  0100               	movlb	0	; () banked
 12440  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12441  000488  0E01               	movlw	1
 12442  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12443  00048C  ECCB  F022         	call	_updateServoPosition	;wreg free
 12444                           
 12445                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12446  000490  0E00               	movlw	0
 12447  000492  0100               	movlb	0	; () banked
 12448  000494  6FB4               	movwf	actuatorTest@i_1670& (0+255),b
 12449  000496                     l7592:
 12450                           
 12451                           ; BSR set to: 0
 12452  000496  0E63               	movlw	99
 12453  000498  0100               	movlb	0	; () banked
 12454  00049A  65B4               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12455  00049C  D001               	goto	l7596
 12456  00049E  D00C               	goto	l7600
 12457  0004A0                     l7596:
 12458                           
 12459                           ; BSR set to: 0
 12460  0004A0  0E68               	movlw	104
 12461  0004A2  0100               	movlb	0	; () banked
 12462  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12463  0004A6  0EE4               	movlw	228
 12464  0004A8                     u9387:
 12465  0004A8  2EE8               	decfsz	wreg,f,c
 12466  0004AA  D7FE               	bra	u9387
 12467  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12468  0004AE  D7FC               	bra	u9387
 12469  0004B0  F000               	nop	
 12470  0004B2  0100               	movlb	0	; () banked
 12471  0004B4  2BB4               	incf	actuatorTest@i_1670& (0+255),f,b
 12472  0004B6  D7EF               	goto	l7592
 12473  0004B8                     l7600:
 12474                           
 12475                           ; BSR set to: 0
 12476  0004B8  0E00               	movlw	0
 12477  0004BA  0100               	movlb	0	; () banked
 12478  0004BC  6FB5               	movwf	actuatorTest@i_1671& (0+255),b
 12479  0004BE                     l7602:
 12480                           
 12481                           ; BSR set to: 0
 12482  0004BE  0E63               	movlw	99
 12483  0004C0  0100               	movlb	0	; () banked
 12484  0004C2  65B5               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12485  0004C4  D001               	goto	l7606
 12486  0004C6  D00C               	goto	l7610
 12487  0004C8                     l7606:
 12488                           
 12489                           ; BSR set to: 0
 12490  0004C8  0E68               	movlw	104
 12491  0004CA  0100               	movlb	0	; () banked
 12492  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12493  0004CE  0EE4               	movlw	228
 12494  0004D0                     u9397:
 12495  0004D0  2EE8               	decfsz	wreg,f,c
 12496  0004D2  D7FE               	bra	u9397
 12497  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12498  0004D6  D7FC               	bra	u9397
 12499  0004D8  F000               	nop	
 12500  0004DA  0100               	movlb	0	; () banked
 12501  0004DC  2BB5               	incf	actuatorTest@i_1671& (0+255),f,b
 12502  0004DE  D7EF               	goto	l7602
 12503  0004E0                     l7610:
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12507  0004E0  0E80               	movlw	128
 12508  0004E2  EC7D  F028         	call	_lcdInst
 12509  0004E6  0EC0               	movlw	192
 12510  0004E8  EC7D  F028         	call	_lcdInst
 12511                           
 12512                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12513  0004EC  0E3D               	movlw	low STR_101
 12514  0004EE  0100               	movlb	0	; () banked
 12515  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12516  0004F2  0EFC               	movlw	high STR_101
 12517  0004F4  0100               	movlb	0	; () banked
 12518  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12519  0004F8  ECE4  F00A         	call	_printf	;wreg free
 12520                           
 12521                           ;Test.c: 294: updateServoPosition(850, 1);
 12522  0004FC  0E03               	movlw	3
 12523  0004FE  0100               	movlb	0	; () banked
 12524  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12525  000502  0E52               	movlw	82
 12526  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12527  000506  0E00               	movlw	0
 12528  000508  0100               	movlb	0	; () banked
 12529  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12530  00050C  0E01               	movlw	1
 12531  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12532  000510  ECCB  F022         	call	_updateServoPosition	;wreg free
 12533                           
 12534                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12535  000514  0E00               	movlw	0
 12536  000516  0100               	movlb	0	; () banked
 12537  000518  6FB6               	movwf	actuatorTest@i_1673& (0+255),b
 12538  00051A                     l7618:
 12539                           
 12540                           ; BSR set to: 0
 12541  00051A  0E63               	movlw	99
 12542  00051C  0100               	movlb	0	; () banked
 12543  00051E  65B6               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12544  000520  D001               	goto	l7622
 12545  000522  D00C               	goto	l7626
 12546  000524                     l7622:
 12547                           
 12548                           ; BSR set to: 0
 12549  000524  0E68               	movlw	104
 12550  000526  0100               	movlb	0	; () banked
 12551  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12552  00052A  0EE4               	movlw	228
 12553  00052C                     u9407:
 12554  00052C  2EE8               	decfsz	wreg,f,c
 12555  00052E  D7FE               	bra	u9407
 12556  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12557  000532  D7FC               	bra	u9407
 12558  000534  F000               	nop	
 12559  000536  0100               	movlb	0	; () banked
 12560  000538  2BB6               	incf	actuatorTest@i_1673& (0+255),f,b
 12561  00053A  D7EF               	goto	l7618
 12562  00053C                     l7626:
 12563                           
 12564                           ; BSR set to: 0
 12565  00053C  0E00               	movlw	0
 12566  00053E  0100               	movlb	0	; () banked
 12567  000540  6FB7               	movwf	actuatorTest@i_1674& (0+255),b
 12568  000542                     l7628:
 12569                           
 12570                           ; BSR set to: 0
 12571  000542  0E63               	movlw	99
 12572  000544  0100               	movlb	0	; () banked
 12573  000546  65B7               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12574  000548  D001               	goto	l7632
 12575  00054A  D00C               	goto	l7636
 12576  00054C                     l7632:
 12577                           
 12578                           ; BSR set to: 0
 12579  00054C  0E68               	movlw	104
 12580  00054E  0100               	movlb	0	; () banked
 12581  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12582  000552  0EE4               	movlw	228
 12583  000554                     u9417:
 12584  000554  2EE8               	decfsz	wreg,f,c
 12585  000556  D7FE               	bra	u9417
 12586  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12587  00055A  D7FC               	bra	u9417
 12588  00055C  F000               	nop	
 12589  00055E  0100               	movlb	0	; () banked
 12590  000560  2BB7               	incf	actuatorTest@i_1674& (0+255),f,b
 12591  000562  D7EF               	goto	l7628
 12592  000564                     l7636:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12596  000564  0E80               	movlw	128
 12597  000566  EC7D  F028         	call	_lcdInst
 12598  00056A  0EC0               	movlw	192
 12599  00056C  EC7D  F028         	call	_lcdInst
 12600                           
 12601                           ;Test.c: 298: printf("MID -- 2s       ");
 12602  000570  0EB5               	movlw	low STR_102
 12603  000572  0100               	movlb	0	; () banked
 12604  000574  6F8E               	movwf	printf@f& (0+255),b
 12605  000576  0EFB               	movlw	high STR_102
 12606  000578  0100               	movlb	0	; () banked
 12607  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12608  00057C  ECE4  F00A         	call	_printf	;wreg free
 12609                           
 12610                           ;Test.c: 299: updateServoPosition(1200, 1);
 12611  000580  0E04               	movlw	4
 12612  000582  0100               	movlb	0	; () banked
 12613  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12614  000586  0EB0               	movlw	176
 12615  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12616  00058A  0E00               	movlw	0
 12617  00058C  0100               	movlb	0	; () banked
 12618  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12619  000590  0E01               	movlw	1
 12620  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12621  000594  ECCB  F022         	call	_updateServoPosition	;wreg free
 12622                           
 12623                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12624  000598  0E00               	movlw	0
 12625  00059A  0100               	movlb	0	; () banked
 12626  00059C  6FB8               	movwf	actuatorTest@i_1676& (0+255),b
 12627  00059E                     l7644:
 12628                           
 12629                           ; BSR set to: 0
 12630  00059E  0E63               	movlw	99
 12631  0005A0  0100               	movlb	0	; () banked
 12632  0005A2  65B8               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12633  0005A4  D001               	goto	l7648
 12634  0005A6  D00C               	goto	l7652
 12635  0005A8                     l7648:
 12636                           
 12637                           ; BSR set to: 0
 12638  0005A8  0E68               	movlw	104
 12639  0005AA  0100               	movlb	0	; () banked
 12640  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12641  0005AE  0EE4               	movlw	228
 12642  0005B0                     u9427:
 12643  0005B0  2EE8               	decfsz	wreg,f,c
 12644  0005B2  D7FE               	bra	u9427
 12645  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12646  0005B6  D7FC               	bra	u9427
 12647  0005B8  F000               	nop	
 12648  0005BA  0100               	movlb	0	; () banked
 12649  0005BC  2BB8               	incf	actuatorTest@i_1676& (0+255),f,b
 12650  0005BE  D7EF               	goto	l7644
 12651  0005C0                     l7652:
 12652                           
 12653                           ; BSR set to: 0
 12654  0005C0  0E00               	movlw	0
 12655  0005C2  0100               	movlb	0	; () banked
 12656  0005C4  6FB9               	movwf	actuatorTest@i_1677& (0+255),b
 12657  0005C6                     l7654:
 12658                           
 12659                           ; BSR set to: 0
 12660  0005C6  0E63               	movlw	99
 12661  0005C8  0100               	movlb	0	; () banked
 12662  0005CA  65B9               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12663  0005CC  D001               	goto	l7658
 12664  0005CE  D00C               	goto	l1200
 12665  0005D0                     l7658:
 12666                           
 12667                           ; BSR set to: 0
 12668  0005D0  0E68               	movlw	104
 12669  0005D2  0100               	movlb	0	; () banked
 12670  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12671  0005D6  0EE4               	movlw	228
 12672  0005D8                     u9437:
 12673  0005D8  2EE8               	decfsz	wreg,f,c
 12674  0005DA  D7FE               	bra	u9437
 12675  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12676  0005DE  D7FC               	bra	u9437
 12677  0005E0  F000               	nop	
 12678  0005E2  0100               	movlb	0	; () banked
 12679  0005E4  2BB9               	incf	actuatorTest@i_1677& (0+255),f,b
 12680  0005E6  D7EF               	goto	l7654
 12681  0005E8                     l1200:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;Test.c: 301: TMR1ON = 0;
 12685  0005E8  90CD               	bcf	4045,0,c	;volatile
 12686                           
 12687                           ; BSR set to: 0
 12688                           ;Test.c: 308: printf("TST: TILT SERVO");
 12689  0005EA  0E3A               	movlw	low STR_103
 12690  0005EC  0100               	movlb	0	; () banked
 12691  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12692  0005F0  0EFE               	movlw	high STR_103
 12693  0005F2  0100               	movlb	0	; () banked
 12694  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12695  0005F6  ECE4  F00A         	call	_printf	;wreg free
 12696                           
 12697                           ;Test.c: 309: lcdInst(0b11000000);;
 12698  0005FA  0EC0               	movlw	192
 12699  0005FC  EC7D  F028         	call	_lcdInst
 12700                           
 12701                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12702  000600  0EE8               	movlw	low STR_104
 12703  000602  0100               	movlb	0	; () banked
 12704  000604  6F8E               	movwf	printf@f& (0+255),b
 12705  000606  0EFB               	movlw	high STR_104
 12706  000608  0100               	movlb	0	; () banked
 12707  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12708  00060C  ECE4  F00A         	call	_printf	;wreg free
 12709                           
 12710                           ;Test.c: 311: updateServoPosition(1050, 3);
 12711  000610  0E04               	movlw	4
 12712  000612  0100               	movlb	0	; () banked
 12713  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12714  000616  0E1A               	movlw	26
 12715  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12716  00061A  0E00               	movlw	0
 12717  00061C  0100               	movlb	0	; () banked
 12718  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12719  000620  0E03               	movlw	3
 12720  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12721  000624  ECCB  F022         	call	_updateServoPosition	;wreg free
 12722                           
 12723                           ;Test.c: 312: TMR3ON = 1;
 12724  000628  80B1               	bsf	4017,0,c	;volatile
 12725                           
 12726                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12727  00062A  0E00               	movlw	0
 12728  00062C  0100               	movlb	0	; () banked
 12729  00062E  6FBA               	movwf	actuatorTest@i_1680& (0+255),b
 12730  000630                     l7672:
 12731                           
 12732                           ; BSR set to: 0
 12733  000630  0E63               	movlw	99
 12734  000632  0100               	movlb	0	; () banked
 12735  000634  65BA               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12736  000636  D001               	goto	l7676
 12737  000638  D00C               	goto	l7680
 12738  00063A                     l7676:
 12739                           
 12740                           ; BSR set to: 0
 12741  00063A  0E68               	movlw	104
 12742  00063C  0100               	movlb	0	; () banked
 12743  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12744  000640  0EE4               	movlw	228
 12745  000642                     u9447:
 12746  000642  2EE8               	decfsz	wreg,f,c
 12747  000644  D7FE               	bra	u9447
 12748  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12749  000648  D7FC               	bra	u9447
 12750  00064A  F000               	nop	
 12751  00064C  0100               	movlb	0	; () banked
 12752  00064E  2BBA               	incf	actuatorTest@i_1680& (0+255),f,b
 12753  000650  D7EF               	goto	l7672
 12754  000652                     l7680:
 12755                           
 12756                           ; BSR set to: 0
 12757  000652  0E00               	movlw	0
 12758  000654  0100               	movlb	0	; () banked
 12759  000656  6FBB               	movwf	actuatorTest@i_1681& (0+255),b
 12760  000658                     l7682:
 12761                           
 12762                           ; BSR set to: 0
 12763  000658  0E63               	movlw	99
 12764  00065A  0100               	movlb	0	; () banked
 12765  00065C  65BB               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12766  00065E  D001               	goto	l7686
 12767  000660  D00C               	goto	l7690
 12768  000662                     l7686:
 12769                           
 12770                           ; BSR set to: 0
 12771  000662  0E68               	movlw	104
 12772  000664  0100               	movlb	0	; () banked
 12773  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12774  000668  0EE4               	movlw	228
 12775  00066A                     u9457:
 12776  00066A  2EE8               	decfsz	wreg,f,c
 12777  00066C  D7FE               	bra	u9457
 12778  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12779  000670  D7FC               	bra	u9457
 12780  000672  F000               	nop	
 12781  000674  0100               	movlb	0	; () banked
 12782  000676  2BBB               	incf	actuatorTest@i_1681& (0+255),f,b
 12783  000678  D7EF               	goto	l7682
 12784  00067A                     l7690:
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12788  00067A  0E80               	movlw	128
 12789  00067C  EC7D  F028         	call	_lcdInst
 12790  000680  0EC0               	movlw	192
 12791  000682  EC7D  F028         	call	_lcdInst
 12792                           
 12793                           ;Test.c: 316: printf("DROP -- 2s      ");
 12794  000686  0EC6               	movlw	low STR_105
 12795  000688  0100               	movlb	0	; () banked
 12796  00068A  6F8E               	movwf	printf@f& (0+255),b
 12797  00068C  0EFB               	movlw	high STR_105
 12798  00068E  0100               	movlb	0	; () banked
 12799  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12800  000692  ECE4  F00A         	call	_printf	;wreg free
 12801                           
 12802                           ;Test.c: 317: updateServoPosition(1260, 3);
 12803  000696  0E04               	movlw	4
 12804  000698  0100               	movlb	0	; () banked
 12805  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12806  00069C  0EEC               	movlw	236
 12807  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12808  0006A0  0E00               	movlw	0
 12809  0006A2  0100               	movlb	0	; () banked
 12810  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12811  0006A6  0E03               	movlw	3
 12812  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12813  0006AA  ECCB  F022         	call	_updateServoPosition	;wreg free
 12814                           
 12815                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12816  0006AE  0E00               	movlw	0
 12817  0006B0  0100               	movlb	0	; () banked
 12818  0006B2  6FBC               	movwf	actuatorTest@i_1683& (0+255),b
 12819  0006B4                     l7698:
 12820                           
 12821                           ; BSR set to: 0
 12822  0006B4  0E63               	movlw	99
 12823  0006B6  0100               	movlb	0	; () banked
 12824  0006B8  65BC               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12825  0006BA  D001               	goto	l7702
 12826  0006BC  D00C               	goto	l7706
 12827  0006BE                     l7702:
 12828                           
 12829                           ; BSR set to: 0
 12830  0006BE  0E68               	movlw	104
 12831  0006C0  0100               	movlb	0	; () banked
 12832  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12833  0006C4  0EE4               	movlw	228
 12834  0006C6                     u9467:
 12835  0006C6  2EE8               	decfsz	wreg,f,c
 12836  0006C8  D7FE               	bra	u9467
 12837  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12838  0006CC  D7FC               	bra	u9467
 12839  0006CE  F000               	nop	
 12840  0006D0  0100               	movlb	0	; () banked
 12841  0006D2  2BBC               	incf	actuatorTest@i_1683& (0+255),f,b
 12842  0006D4  D7EF               	goto	l7698
 12843  0006D6                     l7706:
 12844                           
 12845                           ; BSR set to: 0
 12846  0006D6  0E00               	movlw	0
 12847  0006D8  0100               	movlb	0	; () banked
 12848  0006DA  6FBD               	movwf	actuatorTest@i_1684& (0+255),b
 12849  0006DC                     l7708:
 12850                           
 12851                           ; BSR set to: 0
 12852  0006DC  0E63               	movlw	99
 12853  0006DE  0100               	movlb	0	; () banked
 12854  0006E0  65BD               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12855  0006E2  D001               	goto	l7712
 12856  0006E4  D00C               	goto	l7716
 12857  0006E6                     l7712:
 12858                           
 12859                           ; BSR set to: 0
 12860  0006E6  0E68               	movlw	104
 12861  0006E8  0100               	movlb	0	; () banked
 12862  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12863  0006EC  0EE4               	movlw	228
 12864  0006EE                     u9477:
 12865  0006EE  2EE8               	decfsz	wreg,f,c
 12866  0006F0  D7FE               	bra	u9477
 12867  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12868  0006F4  D7FC               	bra	u9477
 12869  0006F6  F000               	nop	
 12870  0006F8  0100               	movlb	0	; () banked
 12871  0006FA  2BBD               	incf	actuatorTest@i_1684& (0+255),f,b
 12872  0006FC  D7EF               	goto	l7708
 12873  0006FE                     l7716:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12877  0006FE  0E80               	movlw	128
 12878  000700  EC7D  F028         	call	_lcdInst
 12879  000704  0EC0               	movlw	192
 12880  000706  EC7D  F028         	call	_lcdInst
 12881                           
 12882                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12883  00070A  0EE8               	movlw	low STR_104
 12884  00070C  0100               	movlb	0	; () banked
 12885  00070E  6F8E               	movwf	printf@f& (0+255),b
 12886  000710  0EFB               	movlw	high STR_104
 12887  000712  0100               	movlb	0	; () banked
 12888  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12889  000716  ECE4  F00A         	call	_printf	;wreg free
 12890                           
 12891                           ;Test.c: 322: updateServoPosition(1050, 3);
 12892  00071A  0E04               	movlw	4
 12893  00071C  0100               	movlb	0	; () banked
 12894  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12895  000720  0E1A               	movlw	26
 12896  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12897  000724  0E00               	movlw	0
 12898  000726  0100               	movlb	0	; () banked
 12899  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12900  00072A  0E03               	movlw	3
 12901  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12902  00072E  ECCB  F022         	call	_updateServoPosition	;wreg free
 12903                           
 12904                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12905  000732  0E00               	movlw	0
 12906  000734  0100               	movlb	0	; () banked
 12907  000736  6FBE               	movwf	actuatorTest@i_1686& (0+255),b
 12908  000738                     l7724:
 12909                           
 12910                           ; BSR set to: 0
 12911  000738  0E63               	movlw	99
 12912  00073A  0100               	movlb	0	; () banked
 12913  00073C  65BE               	cpfsgt	actuatorTest@i_1686& (0+255),b
 12914  00073E  D001               	goto	l7728
 12915  000740  D00C               	goto	l7732
 12916  000742                     l7728:
 12917                           
 12918                           ; BSR set to: 0
 12919  000742  0E68               	movlw	104
 12920  000744  0100               	movlb	0	; () banked
 12921  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12922  000748  0EE4               	movlw	228
 12923  00074A                     u9487:
 12924  00074A  2EE8               	decfsz	wreg,f,c
 12925  00074C  D7FE               	bra	u9487
 12926  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12927  000750  D7FC               	bra	u9487
 12928  000752  F000               	nop	
 12929  000754  0100               	movlb	0	; () banked
 12930  000756  2BBE               	incf	actuatorTest@i_1686& (0+255),f,b
 12931  000758  D7EF               	goto	l7724
 12932  00075A                     l7732:
 12933                           
 12934                           ; BSR set to: 0
 12935  00075A  0E00               	movlw	0
 12936  00075C  0100               	movlb	0	; () banked
 12937  00075E  6FBF               	movwf	actuatorTest@i_1687& (0+255),b
 12938  000760                     l7734:
 12939                           
 12940                           ; BSR set to: 0
 12941  000760  0E63               	movlw	99
 12942  000762  0100               	movlb	0	; () banked
 12943  000764  65BF               	cpfsgt	actuatorTest@i_1687& (0+255),b
 12944  000766  D001               	goto	l7738
 12945  000768  D00C               	goto	l1212
 12946  00076A                     l7738:
 12947                           
 12948                           ; BSR set to: 0
 12949  00076A  0E68               	movlw	104
 12950  00076C  0100               	movlb	0	; () banked
 12951  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12952  000770  0EE4               	movlw	228
 12953  000772                     u9497:
 12954  000772  2EE8               	decfsz	wreg,f,c
 12955  000774  D7FE               	bra	u9497
 12956  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12957  000778  D7FC               	bra	u9497
 12958  00077A  F000               	nop	
 12959  00077C  0100               	movlb	0	; () banked
 12960  00077E  2BBF               	incf	actuatorTest@i_1687& (0+255),f,b
 12961  000780  D7EF               	goto	l7734
 12962  000782                     l1212:
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;Test.c: 324: TMR3ON = 0;
 12966  000782  90B1               	bcf	4017,0,c	;volatile
 12967                           
 12968                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12969  000784  9EF2               	bcf	intcon,7,c	;volatile
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12973  000786  0E01               	movlw	1
 12974  000788  EC7D  F028         	call	_lcdInst
 12975  00078C  0E68               	movlw	104
 12976  00078E  0100               	movlb	0	; () banked
 12977  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12978  000792  0EE4               	movlw	228
 12979  000794                     u9507:
 12980  000794  2EE8               	decfsz	wreg,f,c
 12981  000796  D7FE               	bra	u9507
 12982  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12983  00079A  D7FC               	bra	u9507
 12984  00079C  F000               	nop	
 12985  00079E  0E80               	movlw	128
 12986  0007A0  EC7D  F028         	call	_lcdInst
 12987                           
 12988                           ;Test.c: 331: printf("TST: CAM SERVO");
 12989  0007A4  0E96               	movlw	low STR_107
 12990  0007A6  0100               	movlb	0	; () banked
 12991  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12992  0007AA  0EFE               	movlw	high STR_107
 12993  0007AC  0100               	movlb	0	; () banked
 12994  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12995  0007B0  ECE4  F00A         	call	_printf	;wreg free
 12996                           
 12997                           ;Test.c: 332: lcdInst(0b11000000);;
 12998  0007B4  0EC0               	movlw	192
 12999  0007B6  EC7D  F028         	call	_lcdInst
 13000                           
 13001                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 13002  0007BA  0E78               	movlw	low STR_108
 13003  0007BC  0100               	movlb	0	; () banked
 13004  0007BE  6F8E               	movwf	printf@f& (0+255),b
 13005  0007C0  0EFE               	movlw	high STR_108
 13006  0007C2  0100               	movlb	0	; () banked
 13007  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13008  0007C6  ECE4  F00A         	call	_printf	;wreg free
 13009                           
 13010                           ;Test.c: 334: LATCbits.LATC0 = 1;
 13011  0007CA  808B               	bsf	3979,0,c	;volatile
 13012                           
 13013                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13014  0007CC  0E00               	movlw	0
 13015  0007CE  0100               	movlb	0	; () banked
 13016  0007D0  6FC0               	movwf	actuatorTest@i_1690& (0+255),b
 13017  0007D2                     l7758:
 13018                           
 13019                           ; BSR set to: 0
 13020  0007D2  0E63               	movlw	99
 13021  0007D4  0100               	movlb	0	; () banked
 13022  0007D6  65C0               	cpfsgt	actuatorTest@i_1690& (0+255),b
 13023  0007D8  D001               	goto	l7762
 13024  0007DA  D00C               	goto	l7766
 13025  0007DC                     l7762:
 13026                           
 13027                           ; BSR set to: 0
 13028  0007DC  0E68               	movlw	104
 13029  0007DE  0100               	movlb	0	; () banked
 13030  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13031  0007E2  0EE4               	movlw	228
 13032  0007E4                     u9517:
 13033  0007E4  2EE8               	decfsz	wreg,f,c
 13034  0007E6  D7FE               	bra	u9517
 13035  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13036  0007EA  D7FC               	bra	u9517
 13037  0007EC  F000               	nop	
 13038  0007EE  0100               	movlb	0	; () banked
 13039  0007F0  2BC0               	incf	actuatorTest@i_1690& (0+255),f,b
 13040  0007F2  D7EF               	goto	l7758
 13041  0007F4                     l7766:
 13042                           
 13043                           ; BSR set to: 0
 13044  0007F4  0E00               	movlw	0
 13045  0007F6  0100               	movlb	0	; () banked
 13046  0007F8  6FC1               	movwf	actuatorTest@i_1691& (0+255),b
 13047  0007FA                     l7768:
 13048                           
 13049                           ; BSR set to: 0
 13050  0007FA  0E63               	movlw	99
 13051  0007FC  0100               	movlb	0	; () banked
 13052  0007FE  65C1               	cpfsgt	actuatorTest@i_1691& (0+255),b
 13053  000800  D001               	goto	l7772
 13054  000802  D00C               	goto	l7776
 13055  000804                     l7772:
 13056                           
 13057                           ; BSR set to: 0
 13058  000804  0E68               	movlw	104
 13059  000806  0100               	movlb	0	; () banked
 13060  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13061  00080A  0EE4               	movlw	228
 13062  00080C                     u9527:
 13063  00080C  2EE8               	decfsz	wreg,f,c
 13064  00080E  D7FE               	bra	u9527
 13065  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13066  000812  D7FC               	bra	u9527
 13067  000814  F000               	nop	
 13068  000816  0100               	movlb	0	; () banked
 13069  000818  2BC1               	incf	actuatorTest@i_1691& (0+255),f,b
 13070  00081A  D7EF               	goto	l7768
 13071  00081C                     l7776:
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13075  00081C  0E80               	movlw	128
 13076  00081E  EC7D  F028         	call	_lcdInst
 13077  000822  0EC0               	movlw	192
 13078  000824  EC7D  F028         	call	_lcdInst
 13079                           
 13080                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13081  000828  0E69               	movlw	low STR_109
 13082  00082A  0100               	movlb	0	; () banked
 13083  00082C  6F8E               	movwf	printf@f& (0+255),b
 13084  00082E  0EFE               	movlw	high STR_109
 13085  000830  0100               	movlb	0	; () banked
 13086  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13087  000834  ECE4  F00A         	call	_printf	;wreg free
 13088                           
 13089                           ;Test.c: 340: for(i=0;i<10000;i++)
 13090  000838  0E00               	movlw	0
 13091  00083A  0100               	movlb	0	; () banked
 13092  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13093  00083E  0E00               	movlw	0
 13094  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13095  000842                     l7782:
 13096                           
 13097                           ; BSR set to: 0
 13098  000842  0100               	movlb	0	; () banked
 13099  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13100  000846  D008               	goto	l1217
 13101  000848  0E10               	movlw	16
 13102  00084A  0100               	movlb	0	; () banked
 13103  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13104  00084E  0E27               	movlw	39
 13105  000850  0100               	movlb	0	; () banked
 13106  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13107  000854  B0D8               	btfsc	status,0,c
 13108  000856  D00D               	goto	l7792
 13109  000858                     l1217:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;Test.c: 341: {
 13113                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13114  000858  808B               	bsf	3979,0,c	;volatile
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13118  00085A  0E1A               	movlw	26
 13119  00085C                     u9537:
 13120  00085C  2EE8               	decfsz	wreg,f,c
 13121  00085E  D7FE               	bra	u9537
 13122  000860  D000               	nop2	
 13123                           
 13124                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13125  000862  908B               	bcf	3979,0,c	;volatile
 13126                           
 13127                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13128  000864  0EF0               	movlw	240
 13129  000866                     u9547:
 13130  000866  2EE8               	decfsz	wreg,f,c
 13131  000868  D7FE               	bra	u9547
 13132  00086A  0100               	movlb	0	; () banked
 13133  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13134  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13135  000870  D7E8               	goto	l7782
 13136  000872                     l7792:
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;Test.c: 346: }
 13140                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13141  000872  0E00               	movlw	0
 13142  000874  0100               	movlb	0	; () banked
 13143  000876  6FC2               	movwf	actuatorTest@i_1693& (0+255),b
 13144  000878                     l7794:
 13145                           
 13146                           ; BSR set to: 0
 13147  000878  0E63               	movlw	99
 13148  00087A  0100               	movlb	0	; () banked
 13149  00087C  65C2               	cpfsgt	actuatorTest@i_1693& (0+255),b
 13150  00087E  D001               	goto	l7798
 13151  000880  D00C               	goto	l7802
 13152  000882                     l7798:
 13153                           
 13154                           ; BSR set to: 0
 13155  000882  0E68               	movlw	104
 13156  000884  0100               	movlb	0	; () banked
 13157  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13158  000888  0EE4               	movlw	228
 13159  00088A                     u9557:
 13160  00088A  2EE8               	decfsz	wreg,f,c
 13161  00088C  D7FE               	bra	u9557
 13162  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13163  000890  D7FC               	bra	u9557
 13164  000892  F000               	nop	
 13165  000894  0100               	movlb	0	; () banked
 13166  000896  2BC2               	incf	actuatorTest@i_1693& (0+255),f,b
 13167  000898  D7EF               	goto	l7794
 13168  00089A                     l7802:
 13169                           
 13170                           ; BSR set to: 0
 13171  00089A  0E00               	movlw	0
 13172  00089C  0100               	movlb	0	; () banked
 13173  00089E  6FC3               	movwf	actuatorTest@i_1694& (0+255),b
 13174  0008A0                     l7804:
 13175                           
 13176                           ; BSR set to: 0
 13177  0008A0  0E63               	movlw	99
 13178  0008A2  0100               	movlb	0	; () banked
 13179  0008A4  65C3               	cpfsgt	actuatorTest@i_1694& (0+255),b
 13180  0008A6  D001               	goto	l7808
 13181  0008A8  D00C               	goto	l7812
 13182  0008AA                     l7808:
 13183                           
 13184                           ; BSR set to: 0
 13185  0008AA  0E68               	movlw	104
 13186  0008AC  0100               	movlb	0	; () banked
 13187  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13188  0008B0  0EE4               	movlw	228
 13189  0008B2                     u9567:
 13190  0008B2  2EE8               	decfsz	wreg,f,c
 13191  0008B4  D7FE               	bra	u9567
 13192  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13193  0008B8  D7FC               	bra	u9567
 13194  0008BA  F000               	nop	
 13195  0008BC  0100               	movlb	0	; () banked
 13196  0008BE  2BC3               	incf	actuatorTest@i_1694& (0+255),f,b
 13197  0008C0  D7EF               	goto	l7804
 13198  0008C2                     l7812:
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;Test.c: 349: machine_state = Testing_state;
 13202  0008C2  0E03               	movlw	3
 13203  0008C4  0100               	movlb	0	; () banked
 13204  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13205                           
 13206                           ; BSR set to: 0
 13207  0008C8  0012               	return		;funcret
 13208  0008CA                     __end_of_actuatorTest:
 13209                           	opt stack 0
 13210                           tblptru	equ	0xFF8
 13211                           tblptrh	equ	0xFF7
 13212                           tblptrl	equ	0xFF6
 13213                           tablat	equ	0xFF5
 13214                           prodh	equ	0xFF4
 13215                           prodl	equ	0xFF3
 13216                           intcon	equ	0xFF2
 13217                           intcon2	equ	0xFF1
 13218                           intcon3	equ	0xFF0
 13219                           postinc0	equ	0xFEE
 13220                           wreg	equ	0xFE8
 13221                           postdec1	equ	0xFE5
 13222                           fsr1l	equ	0xFE1
 13223                           indf2	equ	0xFDF
 13224                           postinc2	equ	0xFDE
 13225                           postdec2	equ	0xFDD
 13226                           fsr2h	equ	0xFDA
 13227                           fsr2l	equ	0xFD9
 13228                           status	equ	0xFD8
 13229                           
 13230 ;; *************** function _SpeedTest *****************
 13231 ;; Defined at:
 13232 ;;		line 549 in file "Test.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;		None
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;		None
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      void 
 13239 ;; Registers used:
 13240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;Total ram usage:        1 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:   10
 13253 ;; This function calls:
 13254 ;;		_lcdInst
 13255 ;;		_printf
 13256 ;; This function is called by:
 13257 ;;		_Test
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           	psect	text41
 13262  004394                     __ptext41:
 13263                           	opt stack 0
 13264  004394                     _SpeedTest:
 13265                           	opt stack 19
 13266                           
 13267                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13268                           
 13269                           ; BSR set to: 0
 13270                           ;incstack = 0
 13271  004394  0E01               	movlw	1
 13272  004396  EC7D  F028         	call	_lcdInst
 13273  00439A  0E68               	movlw	104
 13274  00439C  0100               	movlb	0	; () banked
 13275  00439E  6FAB               	movwf	??_SpeedTest& (0+255),b
 13276  0043A0  0EE4               	movlw	228
 13277  0043A2                     u9577:
 13278  0043A2  2EE8               	decfsz	wreg,f,c
 13279  0043A4  D7FE               	bra	u9577
 13280  0043A6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13281  0043A8  D7FC               	bra	u9577
 13282  0043AA  F000               	nop	
 13283  0043AC  0E80               	movlw	128
 13284  0043AE  EC7D  F028         	call	_lcdInst
 13285                           
 13286                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13287  0043B2  0E5B               	movlw	low STR_120
 13288  0043B4  0100               	movlb	0	; () banked
 13289  0043B6  6F8E               	movwf	printf@f& (0+255),b
 13290  0043B8  0EFB               	movlw	high STR_120
 13291  0043BA  0100               	movlb	0	; () banked
 13292  0043BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13293  0043BE  ECE4  F00A         	call	_printf	;wreg free
 13294                           
 13295                           ;Test.c: 553: lcdInst(0b11000000);;
 13296  0043C2  0EC0               	movlw	192
 13297  0043C4  EC7D  F028         	call	_lcdInst
 13298                           
 13299                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13300  0043C8  0E49               	movlw	low STR_112
 13301  0043CA  0100               	movlb	0	; () banked
 13302  0043CC  6F8E               	movwf	printf@f& (0+255),b
 13303  0043CE  0EFB               	movlw	high STR_112
 13304  0043D0  0100               	movlb	0	; () banked
 13305  0043D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13306  0043D4  ECE4  F00A         	call	_printf	;wreg free
 13307  0043D8                     l1303:
 13308  0043D8  A281               	btfss	3969,1,c	;volatile
 13309  0043DA  D7FE               	goto	l1303
 13310                           
 13311                           ;Test.c: 559: }
 13312                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13313  0043DC  3881               	swapf	3969,w,c	;volatile
 13314  0043DE  0B0F               	andlw	15
 13315  0043E0  0A0F               	xorlw	15
 13316  0043E2  B4D8               	btfsc	status,2,c
 13317  0043E4  0012               	return	
 13318  0043E6  D014               	goto	l7854
 13319  0043E8                     l1310:
 13320                           
 13321                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13322  0043E8  8A89               	bsf	3977,5,c	;volatile
 13323                           
 13324                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13325  0043EA  0E34               	movlw	52
 13326  0043EC  0100               	movlb	0	; () banked
 13327  0043EE  6FAB               	movwf	??_SpeedTest& (0+255),b
 13328  0043F0  0EF1               	movlw	241
 13329  0043F2                     u9587:
 13330  0043F2  2EE8               	decfsz	wreg,f,c
 13331  0043F4  D7FE               	bra	u9587
 13332  0043F6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13333  0043F8  D7FC               	bra	u9587
 13334  0043FA  D000               	nop2	
 13335                           
 13336                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13337  0043FC  9A89               	bcf	3977,5,c	;volatile
 13338                           
 13339                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13340  0043FE  0E34               	movlw	52
 13341  004400  0100               	movlb	0	; () banked
 13342  004402  6FAB               	movwf	??_SpeedTest& (0+255),b
 13343  004404  0EF1               	movlw	241
 13344  004406                     u9597:
 13345  004406  2EE8               	decfsz	wreg,f,c
 13346  004408  D7FE               	bra	u9597
 13347  00440A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13348  00440C  D7FC               	bra	u9597
 13349  00440E  D000               	nop2	
 13350  004410                     l7854:
 13351  004410  B281               	btfsc	3969,1,c	;volatile
 13352  004412  D7EA               	goto	l1310
 13353                           
 13354                           ;Test.c: 571: }
 13355                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13356  004414  9A89               	bcf	3977,5,c	;volatile
 13357  004416  D7E0               	goto	l1303
 13358  004418                     __end_of_SpeedTest:
 13359                           	opt stack 0
 13360                           tblptru	equ	0xFF8
 13361                           tblptrh	equ	0xFF7
 13362                           tblptrl	equ	0xFF6
 13363                           tablat	equ	0xFF5
 13364                           prodh	equ	0xFF4
 13365                           prodl	equ	0xFF3
 13366                           intcon	equ	0xFF2
 13367                           intcon2	equ	0xFF1
 13368                           intcon3	equ	0xFF0
 13369                           postinc0	equ	0xFEE
 13370                           wreg	equ	0xFE8
 13371                           postdec1	equ	0xFE5
 13372                           fsr1l	equ	0xFE1
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           postdec2	equ	0xFDD
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function _PusherTest *****************
 13381 ;; Defined at:
 13382 ;;		line 467 in file "Test.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;		None
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;  i               2   51[BANK0 ] int 
 13387 ;;  i               2   49[BANK0 ] int 
 13388 ;;  res             2   47[BANK0 ] int 
 13389 ;;  res             2   45[BANK0 ] int 
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13402 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13403 ;;Total ram usage:       10 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:   10
 13406 ;; This function calls:
 13407 ;;		_lcdInst
 13408 ;;		_printf
 13409 ;;		_readADC
 13410 ;; This function is called by:
 13411 ;;		_Test
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           	psect	text42
 13416  002C1C                     __ptext42:
 13417                           	opt stack 0
 13418  002C1C                     _PusherTest:
 13419                           	opt stack 19
 13420                           
 13421                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13422                           
 13423                           ;incstack = 0
 13424  002C1C  0E01               	movlw	1
 13425  002C1E  EC7D  F028         	call	_lcdInst
 13426  002C22  0E68               	movlw	104
 13427  002C24  0100               	movlb	0	; () banked
 13428  002C26  6FAB               	movwf	??_PusherTest& (0+255),b
 13429  002C28  0EE4               	movlw	228
 13430  002C2A                     u9607:
 13431  002C2A  2EE8               	decfsz	wreg,f,c
 13432  002C2C  D7FE               	bra	u9607
 13433  002C2E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13434  002C30  D7FC               	bra	u9607
 13435  002C32  F000               	nop	
 13436  002C34  0E80               	movlw	128
 13437  002C36  EC7D  F028         	call	_lcdInst
 13438                           
 13439                           ;Test.c: 469: printf("PUSHER TST");
 13440  002C3A  0E71               	movlw	low STR_113
 13441  002C3C  0100               	movlb	0	; () banked
 13442  002C3E  6F8E               	movwf	printf@f& (0+255),b
 13443  002C40  0EFF               	movlw	high STR_113
 13444  002C42  0100               	movlb	0	; () banked
 13445  002C44  6F8F               	movwf	(printf@f+1)& (0+255),b
 13446  002C46  ECE4  F00A         	call	_printf	;wreg free
 13447                           
 13448                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13449  002C4A  8A8B               	bsf	3979,5,c	;volatile
 13450                           
 13451                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13452  002C4C  D05C               	goto	l7884
 13453  002C4E                     l7866:
 13454                           
 13455                           ;Test.c: 473: readADC(0);
 13456  002C4E  0E00               	movlw	0
 13457  002C50  EC74  F027         	call	_readADC
 13458                           
 13459                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13460  002C54  50C3               	movf	4035,w,c	;volatile
 13461  002C56  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13462  002C5A  0100               	movlb	0	; () banked
 13463  002C5C  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13464  002C5E  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13465  002C62  0100               	movlb	0	; () banked
 13466  002C64  6BAB               	clrf	??_PusherTest& (0+255),b
 13467  002C66  0100               	movlb	0	; () banked
 13468  002C68  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13469  002C6A  0100               	movlb	0	; () banked
 13470  002C6C  6FAD               	movwf	PusherTest@res& (0+255),b
 13471  002C6E  0100               	movlb	0	; () banked
 13472  002C70  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13473  002C72  0100               	movlb	0	; () banked
 13474  002C74  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13478  002C76  0100               	movlb	0	; () banked
 13479  002C78  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13480  002C7A  D00A               	goto	u6690
 13481  002C7C  0E21               	movlw	33
 13482  002C7E  0100               	movlb	0	; () banked
 13483  002C80  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13484  002C82  0E03               	movlw	3
 13485  002C84  0100               	movlb	0	; () banked
 13486  002C86  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13487  002C88  A0D8               	btfss	status,0,c
 13488  002C8A  D002               	goto	u6690
 13489  002C8C  0E01               	movlw	1
 13490  002C8E  D001               	goto	u6700
 13491  002C90                     u6690:
 13492  002C90  0E00               	movlw	0
 13493  002C92                     u6700:
 13494  002C92  0100               	movlb	0	; () banked
 13495  002C94  6FDE               	movwf	_IR_signal& (0+255),b
 13496  002C96  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13497                           
 13498                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13499  002C98  0E01               	movlw	1
 13500  002C9A  EC7D  F028         	call	_lcdInst
 13501  002C9E  0E68               	movlw	104
 13502  002CA0  0100               	movlb	0	; () banked
 13503  002CA2  6FAB               	movwf	??_PusherTest& (0+255),b
 13504  002CA4  0EE4               	movlw	228
 13505  002CA6                     u9617:
 13506  002CA6  2EE8               	decfsz	wreg,f,c
 13507  002CA8  D7FE               	bra	u9617
 13508  002CAA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13509  002CAC  D7FC               	bra	u9617
 13510  002CAE  F000               	nop	
 13511  002CB0  0E80               	movlw	128
 13512  002CB2  EC7D  F028         	call	_lcdInst
 13513                           
 13514                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13515  002CB6  0E5A               	movlw	low STR_80
 13516  002CB8  0100               	movlb	0	; () banked
 13517  002CBA  6F8E               	movwf	printf@f& (0+255),b
 13518  002CBC  0EFE               	movlw	high STR_80
 13519  002CBE  0100               	movlb	0	; () banked
 13520  002CC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13521  002CC2  C0DE  F090         	movff	_IR_signal,?_printf+2
 13522  002CC6  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13523  002CCA  ECE4  F00A         	call	_printf	;wreg free
 13524                           
 13525                           ;Test.c: 479: lcdInst(0b11000000);;
 13526  002CCE  0EC0               	movlw	192
 13527  002CD0  EC7D  F028         	call	_lcdInst
 13528                           
 13529                           ;Test.c: 480: printf("%d", res);
 13530  002CD4  0E16               	movlw	low (STR_27+14)
 13531  002CD6  0100               	movlb	0	; () banked
 13532  002CD8  6F8E               	movwf	printf@f& (0+255),b
 13533  002CDA  0EFE               	movlw	high (STR_27+14)
 13534  002CDC  0100               	movlb	0	; () banked
 13535  002CDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13536  002CE0  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13537  002CE4  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13538  002CE8  ECE4  F00A         	call	_printf	;wreg free
 13539                           
 13540                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13541  002CEC  0E05               	movlw	5
 13542  002CEE  0100               	movlb	0	; () banked
 13543  002CF0  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13544  002CF2  0E0F               	movlw	15
 13545  002CF4  0100               	movlb	0	; () banked
 13546  002CF6  6FAB               	movwf	??_PusherTest& (0+255),b
 13547  002CF8  0EF1               	movlw	241
 13548  002CFA                     u9627:
 13549  002CFA  2EE8               	decfsz	wreg,f,c
 13550  002CFC  D7FE               	bra	u9627
 13551  002CFE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13552  002D00  D7FC               	bra	u9627
 13553  002D02  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13554  002D04  D7FA               	bra	u9627
 13555  002D06                     l7884:
 13556  002D06  B281               	btfsc	3969,1,c	;volatile
 13557  002D08  D05D               	goto	l7904
 13558  002D0A  D7A1               	goto	l7866
 13559  002D0C                     l7886:
 13560                           
 13561                           ;Test.c: 487: readADC(0);
 13562  002D0C  0E00               	movlw	0
 13563  002D0E  EC74  F027         	call	_readADC
 13564                           
 13565                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13566  002D12  50C3               	movf	4035,w,c	;volatile
 13567  002D14  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13568  002D18  0100               	movlb	0	; () banked
 13569  002D1A  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13570  002D1C  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13571  002D20  0100               	movlb	0	; () banked
 13572  002D22  6BAB               	clrf	??_PusherTest& (0+255),b
 13573  002D24  0100               	movlb	0	; () banked
 13574  002D26  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13575  002D28  0100               	movlb	0	; () banked
 13576  002D2A  6FAF               	movwf	PusherTest@res_1709& (0+255),b
 13577  002D2C  0100               	movlb	0	; () banked
 13578  002D2E  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13579  002D30  0100               	movlb	0	; () banked
 13580  002D32  6FB0               	movwf	(PusherTest@res_1709+1)& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13584  002D34  0100               	movlb	0	; () banked
 13585  002D36  BFB0               	btfsc	(PusherTest@res_1709+1)& (0+255),7,b
 13586  002D38  D00A               	goto	u6720
 13587  002D3A  0E21               	movlw	33
 13588  002D3C  0100               	movlb	0	; () banked
 13589  002D3E  5DAF               	subwf	PusherTest@res_1709& (0+255),w,b
 13590  002D40  0E03               	movlw	3
 13591  002D42  0100               	movlb	0	; () banked
 13592  002D44  59B0               	subwfb	(PusherTest@res_1709+1)& (0+255),w,b
 13593  002D46  A0D8               	btfss	status,0,c
 13594  002D48  D002               	goto	u6720
 13595  002D4A  0E01               	movlw	1
 13596  002D4C  D001               	goto	u6730
 13597  002D4E                     u6720:
 13598  002D4E  0E00               	movlw	0
 13599  002D50                     u6730:
 13600  002D50  0100               	movlb	0	; () banked
 13601  002D52  6FDE               	movwf	_IR_signal& (0+255),b
 13602  002D54  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13603                           
 13604                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13605  002D56  0E01               	movlw	1
 13606  002D58  EC7D  F028         	call	_lcdInst
 13607  002D5C  0E68               	movlw	104
 13608  002D5E  0100               	movlb	0	; () banked
 13609  002D60  6FAB               	movwf	??_PusherTest& (0+255),b
 13610  002D62  0EE4               	movlw	228
 13611  002D64                     u9637:
 13612  002D64  2EE8               	decfsz	wreg,f,c
 13613  002D66  D7FE               	bra	u9637
 13614  002D68  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13615  002D6A  D7FC               	bra	u9637
 13616  002D6C  F000               	nop	
 13617  002D6E  0E80               	movlw	128
 13618  002D70  EC7D  F028         	call	_lcdInst
 13619                           
 13620                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13621  002D74  0E5A               	movlw	low STR_80
 13622  002D76  0100               	movlb	0	; () banked
 13623  002D78  6F8E               	movwf	printf@f& (0+255),b
 13624  002D7A  0EFE               	movlw	high STR_80
 13625  002D7C  0100               	movlb	0	; () banked
 13626  002D7E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13627  002D80  C0DE  F090         	movff	_IR_signal,?_printf+2
 13628  002D84  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13629  002D88  ECE4  F00A         	call	_printf	;wreg free
 13630                           
 13631                           ;Test.c: 492: lcdInst(0b11000000);;
 13632  002D8C  0EC0               	movlw	192
 13633  002D8E  EC7D  F028         	call	_lcdInst
 13634                           
 13635                           ;Test.c: 493: printf("%d", res);
 13636  002D92  0E16               	movlw	low (STR_27+14)
 13637  002D94  0100               	movlb	0	; () banked
 13638  002D96  6F8E               	movwf	printf@f& (0+255),b
 13639  002D98  0EFE               	movlw	high (STR_27+14)
 13640  002D9A  0100               	movlb	0	; () banked
 13641  002D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13642  002D9E  C0AF  F090         	movff	PusherTest@res_1709,?_printf+2
 13643  002DA2  C0B0  F091         	movff	PusherTest@res_1709+1,?_printf+3
 13644  002DA6  ECE4  F00A         	call	_printf	;wreg free
 13645                           
 13646                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13647  002DAA  0E05               	movlw	5
 13648  002DAC  0100               	movlb	0	; () banked
 13649  002DAE  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13650  002DB0  0E0F               	movlw	15
 13651  002DB2  0100               	movlb	0	; () banked
 13652  002DB4  6FAB               	movwf	??_PusherTest& (0+255),b
 13653  002DB6  0EF1               	movlw	241
 13654  002DB8                     u9647:
 13655  002DB8  2EE8               	decfsz	wreg,f,c
 13656  002DBA  D7FE               	bra	u9647
 13657  002DBC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13658  002DBE  D7FC               	bra	u9647
 13659  002DC0  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13660  002DC2  D7FA               	bra	u9647
 13661  002DC4                     l7904:
 13662  002DC4  A281               	btfss	3969,1,c	;volatile
 13663  002DC6  D7A2               	goto	l7886
 13664                           
 13665                           ;Test.c: 495: }
 13666                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13667  002DC8  3881               	swapf	3969,w,c	;volatile
 13668  002DCA  0B0F               	andlw	15
 13669  002DCC  0A0F               	xorlw	15
 13670  002DCE  B4D8               	btfsc	status,2,c
 13671  002DD0  D047               	goto	l1272
 13672                           
 13673                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13674                           
 13675                           ;Test.c: 498: }
 13676                           
 13677                           ;Test.c: 497: break;
 13678  002DD2  3881               	swapf	3969,w,c	;volatile
 13679  002DD4  0B0F               	andlw	15
 13680  002DD6  0A05               	xorlw	5
 13681  002DD8  A4D8               	btfss	status,2,c
 13682  002DDA  D01D               	goto	l7926
 13683                           
 13684                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13685  002DDC  0E00               	movlw	0
 13686  002DDE  0100               	movlb	0	; () banked
 13687  002DE0  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13688  002DE2  0E00               	movlw	0
 13689  002DE4  6FB1               	movwf	PusherTest@i& (0+255),b
 13690  002DE6                     l7916:
 13691                           
 13692                           ; BSR set to: 0
 13693  002DE6  0100               	movlb	0	; () banked
 13694  002DE8  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13695  002DEA  D008               	goto	l1275
 13696  002DEC  0EB8               	movlw	184
 13697  002DEE  0100               	movlb	0	; () banked
 13698  002DF0  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13699  002DF2  0E0B               	movlw	11
 13700  002DF4  0100               	movlb	0	; () banked
 13701  002DF6  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13702  002DF8  B0D8               	btfsc	status,0,c
 13703  002DFA  D02F               	goto	l1281
 13704  002DFC                     l1275:
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13708  002DFC  8889               	bsf	3977,4,c	;volatile
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13712  002DFE  0EC8               	movlw	200
 13713  002E00                     u9657:
 13714  002E00  2EE8               	decfsz	wreg,f,c
 13715  002E02  D7FE               	bra	u9657
 13716                           
 13717                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13718  002E04  9889               	bcf	3977,4,c	;volatile
 13719                           
 13720                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13721  002E06  0E42               	movlw	66
 13722  002E08                     u9667:
 13723  002E08  2EE8               	decfsz	wreg,f,c
 13724  002E0A  D7FE               	bra	u9667
 13725  002E0C  D000               	nop2	
 13726  002E0E  0100               	movlb	0	; () banked
 13727  002E10  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13728  002E12  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13729  002E14  D7E8               	goto	l7916
 13730  002E16                     l7926:
 13731                           
 13732                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13733  002E16  3881               	swapf	3969,w,c	;volatile
 13734  002E18  0B0F               	andlw	15
 13735  002E1A  0A06               	xorlw	6
 13736  002E1C  A4D8               	btfss	status,2,c
 13737  002E1E  D01D               	goto	l1281
 13738                           
 13739                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13740  002E20  0E00               	movlw	0
 13741  002E22  0100               	movlb	0	; () banked
 13742  002E24  6FB4               	movwf	(PusherTest@i_1713+1)& (0+255),b
 13743  002E26  0E00               	movlw	0
 13744  002E28  6FB3               	movwf	PusherTest@i_1713& (0+255),b
 13745  002E2A                     l7930:
 13746                           
 13747                           ; BSR set to: 0
 13748  002E2A  0100               	movlb	0	; () banked
 13749  002E2C  BFB4               	btfsc	(PusherTest@i_1713+1)& (0+255),7,b
 13750  002E2E  D008               	goto	l1279
 13751  002E30  0EB8               	movlw	184
 13752  002E32  0100               	movlb	0	; () banked
 13753  002E34  5DB3               	subwf	PusherTest@i_1713& (0+255),w,b
 13754  002E36  0E0B               	movlw	11
 13755  002E38  0100               	movlb	0	; () banked
 13756  002E3A  59B4               	subwfb	(PusherTest@i_1713+1)& (0+255),w,b
 13757  002E3C  B0D8               	btfsc	status,0,c
 13758  002E3E  D00D               	goto	l1281
 13759  002E40                     l1279:
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13763  002E40  8889               	bsf	3977,4,c	;volatile
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13767  002E42  0E9A               	movlw	154
 13768  002E44                     u9677:
 13769  002E44  2EE8               	decfsz	wreg,f,c
 13770  002E46  D7FE               	bra	u9677
 13771  002E48  D000               	nop2	
 13772                           
 13773                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13774  002E4A  9889               	bcf	3977,4,c	;volatile
 13775                           
 13776                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13777  002E4C  0E70               	movlw	112
 13778  002E4E                     u9687:
 13779  002E4E  2EE8               	decfsz	wreg,f,c
 13780  002E50  D7FE               	bra	u9687
 13781  002E52  0100               	movlb	0	; () banked
 13782  002E54  4BB3               	infsnz	PusherTest@i_1713& (0+255),f,b
 13783  002E56  2BB4               	incf	(PusherTest@i_1713+1)& (0+255),f,b
 13784  002E58  D7E8               	goto	l7930
 13785  002E5A                     l1281:
 13786  002E5A  A281               	btfss	3969,1,c	;volatile
 13787  002E5C  D7B3               	goto	l7904
 13788  002E5E  D7FD               	goto	l1281
 13789  002E60                     l1272:
 13790                           
 13791                           ;Test.c: 519: }
 13792                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13793  002E60  9A8B               	bcf	3979,5,c	;volatile
 13794  002E62  0012               	return		;funcret
 13795  002E64                     __end_of_PusherTest:
 13796                           	opt stack 0
 13797                           tblptru	equ	0xFF8
 13798                           tblptrh	equ	0xFF7
 13799                           tblptrl	equ	0xFF6
 13800                           tablat	equ	0xFF5
 13801                           prodh	equ	0xFF4
 13802                           prodl	equ	0xFF3
 13803                           intcon	equ	0xFF2
 13804                           intcon2	equ	0xFF1
 13805                           intcon3	equ	0xFF0
 13806                           postinc0	equ	0xFEE
 13807                           wreg	equ	0xFE8
 13808                           postdec1	equ	0xFE5
 13809                           fsr1l	equ	0xFE1
 13810                           indf2	equ	0xFDF
 13811                           postinc2	equ	0xFDE
 13812                           postdec2	equ	0xFDD
 13813                           fsr2h	equ	0xFDA
 13814                           fsr2l	equ	0xFD9
 13815                           status	equ	0xFD8
 13816                           
 13817 ;; *************** function _readADC *****************
 13818 ;; Defined at:
 13819 ;;		line 15 in file "ADCFunctionality.c"
 13820 ;; Parameters:    Size  Location     Type
 13821 ;;  channel         1    wreg     unsigned char 
 13822 ;; Auto vars:     Size  Location     Type
 13823 ;;  channel         1    1[BANK0 ] unsigned char 
 13824 ;; Return value:  Size  Location     Type
 13825 ;;                  1    wreg      void 
 13826 ;; Registers used:
 13827 ;;		wreg, status,2, status,0, cstack
 13828 ;; Tracked objects:
 13829 ;;		On entry : 0/0
 13830 ;;		On exit  : 0/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;Total ram usage:        2 bytes
 13838 ;; Hardware stack levels used:    1
 13839 ;; Hardware stack levels required when called:    7
 13840 ;; This function calls:
 13841 ;;		Nothing
 13842 ;; This function is called by:
 13843 ;;		_readIR
 13844 ;;		_readMAG
 13845 ;;		_sensorTest
 13846 ;;		_PusherTest
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           	psect	text43
 13851  004EE8                     __ptext43:
 13852                           	opt stack 0
 13853  004EE8                     _readADC:
 13854                           	opt stack 20
 13855                           
 13856                           ;incstack = 0
 13857                           ;readADC@channel stored from wreg
 13858  004EE8  0100               	movlb	0	; () banked
 13859  004EEA  6F81               	movwf	readADC@channel& (0+255),b
 13860                           
 13861                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13862  004EEC  0100               	movlb	0	; () banked
 13863  004EEE  4581               	rlncf	readADC@channel& (0+255),w,b
 13864  004EF0  46E8               	rlncf	wreg,f,c
 13865  004EF2  0BFC               	andlw	252
 13866  004EF4  6EC2               	movwf	4034,c	;volatile
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13870  004EF6  80C2               	bsf	4034,0,c	;volatile
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13874  004EF8  82C2               	bsf	4034,1,c	;volatile
 13875                           
 13876                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13877  004EFA  D009               	goto	l5774
 13878  004EFC                     l5772:
 13879  004EFC  0E34               	movlw	52
 13880  004EFE  0100               	movlb	0	; () banked
 13881  004F00  6F80               	movwf	??_readADC& (0+255),b
 13882  004F02  0EF1               	movlw	241
 13883  004F04                     u9697:
 13884  004F04  2EE8               	decfsz	wreg,f,c
 13885  004F06  D7FE               	bra	u9697
 13886  004F08  2F80               	decfsz	??_readADC& (0+255),f,b
 13887  004F0A  D7FC               	bra	u9697
 13888  004F0C  D000               	nop2	
 13889  004F0E                     l5774:
 13890  004F0E  A2C2               	btfss	4034,1,c	;volatile
 13891  004F10  0012               	return	
 13892  004F12  D7F4               	goto	l5772
 13893  004F14                     __end_of_readADC:
 13894                           	opt stack 0
 13895                           tblptru	equ	0xFF8
 13896                           tblptrh	equ	0xFF7
 13897                           tblptrl	equ	0xFF6
 13898                           tablat	equ	0xFF5
 13899                           prodh	equ	0xFF4
 13900                           prodl	equ	0xFF3
 13901                           intcon	equ	0xFF2
 13902                           intcon2	equ	0xFF1
 13903                           intcon3	equ	0xFF0
 13904                           postinc0	equ	0xFEE
 13905                           wreg	equ	0xFE8
 13906                           postdec1	equ	0xFE5
 13907                           fsr1l	equ	0xFE1
 13908                           indf2	equ	0xFDF
 13909                           postinc2	equ	0xFDE
 13910                           postdec2	equ	0xFDD
 13911                           fsr2h	equ	0xFDA
 13912                           fsr2l	equ	0xFD9
 13913                           status	equ	0xFD8
 13914                           
 13915 ;; *************** function _PortTests *****************
 13916 ;; Defined at:
 13917 ;;		line 409 in file "Test.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;		None
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;		None
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, status,0
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;Total ram usage:        2 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    7
 13938 ;; This function calls:
 13939 ;;		Nothing
 13940 ;; This function is called by:
 13941 ;;		_Test
 13942 ;; This function uses a non-reentrant model
 13943 ;;
 13944                           
 13945                           	psect	text44
 13946  004418                     __ptext44:
 13947                           	opt stack 0
 13948  004418                     _PortTests:
 13949                           	opt stack 22
 13950  004418                     l1230:
 13951  004418  A281               	btfss	3969,1,c	;volatile
 13952  00441A  D7FE               	goto	l1230
 13953                           
 13954                           ;Test.c: 413: var = PORTB >> 4;
 13955  00441C  CF81 F080          	movff	3969,??_PortTests	;volatile
 13956  004420  0100               	movlb	0	; () banked
 13957  004422  3B80               	swapf	??_PortTests& (0+255),f,b
 13958  004424  0E0F               	movlw	15
 13959  004426  1780               	andwf	??_PortTests& (0+255),f,b
 13960  004428  0100               	movlb	0	; () banked
 13961  00442A  5180               	movf	??_PortTests& (0+255),w,b
 13962  00442C  0100               	movlb	0	; () banked
 13963  00442E  6FFA               	movwf	_var& (0+255),b
 13964  004430  6BFB               	clrf	(_var+1)& (0+255),b
 13965                           
 13966                           ;Test.c: 414: switch(var){
 13967  004432  D00C               	goto	l7944
 13968  004434                     l1234:
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13972  004434  808D               	bsf	3981,0,c	;volatile
 13973                           
 13974                           ;Test.c: 417: break;
 13975  004436  D027               	goto	l1242
 13976  004438                     l1236:
 13977                           
 13978                           ; BSR set to: 0
 13979                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13980  004438  828D               	bsf	3981,1,c	;volatile
 13981                           
 13982                           ;Test.c: 420: break;
 13983  00443A  D025               	goto	l1242
 13984  00443C                     l1237:
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13988  00443C  808C               	bsf	3980,0,c	;volatile
 13989                           
 13990                           ;Test.c: 423: break;
 13991  00443E  D023               	goto	l1242
 13992  004440                     l1238:
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13996  004440  8689               	bsf	3977,3,c	;volatile
 13997                           
 13998                           ;Test.c: 426: break;
 13999  004442  D021               	goto	l1242
 14000  004444                     l1239:
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;Test.c: 428: LATAbits.LATA4 = 1;
 14004  004444  8889               	bsf	3977,4,c	;volatile
 14005                           
 14006                           ;Test.c: 429: break;
 14007  004446  D01F               	goto	l1242
 14008  004448                     l1240:
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;Test.c: 431: LATAbits.LATA5 = 1;
 14012  004448  8A89               	bsf	3977,5,c	;volatile
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;Test.c: 435: }
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Test.c: 434: break;
 14019                           
 14020                           ;Test.c: 433: default:
 14021                           
 14022                           ;Test.c: 432: break;
 14023  00444A  D01D               	goto	l1242
 14024  00444C                     l7944:
 14025                           
 14026                           ; BSR set to: 0
 14027  00444C  C0FA  F080         	movff	_var,??_PortTests
 14028  004450  C0FB  F081         	movff	_var+1,??_PortTests+1
 14029                           
 14030                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14031                           ; Switch size 1, requested type "space"
 14032                           ; Number of cases is 1, Range of values is 0 to 0
 14033                           ; switch strategies available:
 14034                           ; Name         Instructions Cycles
 14035                           ; simple_byte            4     3 (average)
 14036                           ;	Chosen strategy is simple_byte
 14037  004454  0100               	movlb	0	; () banked
 14038  004456  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14039  004458  0A00               	xorlw	0	; case 0
 14040  00445A  A4D8               	btfss	status,2,c
 14041  00445C  D014               	goto	l1242
 14042                           
 14043                           ; BSR set to: 0
 14044                           ; Switch size 1, requested type "space"
 14045                           ; Number of cases is 6, Range of values is 0 to 5
 14046                           ; switch strategies available:
 14047                           ; Name         Instructions Cycles
 14048                           ; simple_byte           19    10 (average)
 14049                           ;	Chosen strategy is simple_byte
 14050  00445E  0100               	movlb	0	; () banked
 14051  004460  5180               	movf	??_PortTests& (0+255),w,b
 14052  004462  0A00               	xorlw	0	; case 0
 14053  004464  B4D8               	btfsc	status,2,c
 14054  004466  D7E6               	goto	l1234
 14055  004468  0A01               	xorlw	1	; case 1
 14056  00446A  B4D8               	btfsc	status,2,c
 14057  00446C  D7E5               	goto	l1236
 14058  00446E  0A03               	xorlw	3	; case 2
 14059  004470  B4D8               	btfsc	status,2,c
 14060  004472  D7E4               	goto	l1237
 14061  004474  0A01               	xorlw	1	; case 3
 14062  004476  B4D8               	btfsc	status,2,c
 14063  004478  D7E3               	goto	l1238
 14064  00447A  0A07               	xorlw	7	; case 4
 14065  00447C  B4D8               	btfsc	status,2,c
 14066  00447E  D7E2               	goto	l1239
 14067  004480  0A01               	xorlw	1	; case 5
 14068  004482  B4D8               	btfsc	status,2,c
 14069  004484  D7E1               	goto	l1240
 14070  004486                     l1242:
 14071  004486  B281               	btfsc	3969,1,c	;volatile
 14072  004488  D7FE               	goto	l1242
 14073                           
 14074                           ;Test.c: 437: __nop();
 14075  00448A  F000               	nop	
 14076                           
 14077                           ;Test.c: 438: __nop();
 14078  00448C  F000               	nop	
 14079                           
 14080                           ;Test.c: 439: LATA = 0x00;
 14081  00448E  0E00               	movlw	0
 14082  004490  6E89               	movwf	3977,c	;volatile
 14083                           
 14084                           ;Test.c: 440: LATE = 0x00;
 14085  004492  0E00               	movlw	0
 14086  004494  6E8D               	movwf	3981,c	;volatile
 14087                           
 14088                           ;Test.c: 441: LATD = 0x00; }
 14089  004496  0E00               	movlw	0
 14090  004498  6E8C               	movwf	3980,c	;volatile
 14091  00449A  D7BE               	goto	l1230
 14092  00449C                     __end_of_PortTests:
 14093                           	opt stack 0
 14094                           tblptru	equ	0xFF8
 14095                           tblptrh	equ	0xFF7
 14096                           tblptrl	equ	0xFF6
 14097                           tablat	equ	0xFF5
 14098                           prodh	equ	0xFF4
 14099                           prodl	equ	0xFF3
 14100                           intcon	equ	0xFF2
 14101                           intcon2	equ	0xFF1
 14102                           intcon3	equ	0xFF0
 14103                           postinc0	equ	0xFEE
 14104                           wreg	equ	0xFE8
 14105                           postdec1	equ	0xFE5
 14106                           fsr1l	equ	0xFE1
 14107                           indf2	equ	0xFDF
 14108                           postinc2	equ	0xFDE
 14109                           postdec2	equ	0xFDD
 14110                           fsr2h	equ	0xFDA
 14111                           fsr2l	equ	0xFD9
 14112                           status	equ	0xFD8
 14113                           
 14114 ;; *************** function _PortTestA5 *****************
 14115 ;; Defined at:
 14116 ;;		line 444 in file "Test.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;		None
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;		None
 14121 ;; Return value:  Size  Location     Type
 14122 ;;                  1    wreg      void 
 14123 ;; Registers used:
 14124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14125 ;; Tracked objects:
 14126 ;;		On entry : 0/0
 14127 ;;		On exit  : 0/0
 14128 ;;		Unchanged: 0/0
 14129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;Total ram usage:        1 bytes
 14135 ;; Hardware stack levels used:    1
 14136 ;; Hardware stack levels required when called:   10
 14137 ;; This function calls:
 14138 ;;		_lcdInst
 14139 ;;		_printf
 14140 ;; This function is called by:
 14141 ;;		_Test
 14142 ;; This function uses a non-reentrant model
 14143 ;;
 14144                           
 14145                           	psect	text45
 14146  004876                     __ptext45:
 14147                           	opt stack 0
 14148  004876                     _PortTestA5:
 14149                           	opt stack 19
 14150                           
 14151                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14152                           
 14153                           ;incstack = 0
 14154  004876  0E01               	movlw	1
 14155  004878  EC7D  F028         	call	_lcdInst
 14156  00487C  0E68               	movlw	104
 14157  00487E  0100               	movlb	0	; () banked
 14158  004880  6FAB               	movwf	??_PortTestA5& (0+255),b
 14159  004882  0EE4               	movlw	228
 14160  004884                     u9707:
 14161  004884  2EE8               	decfsz	wreg,f,c
 14162  004886  D7FE               	bra	u9707
 14163  004888  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14164  00488A  D7FC               	bra	u9707
 14165  00488C  F000               	nop	
 14166  00488E  0E80               	movlw	128
 14167  004890  EC7D  F028         	call	_lcdInst
 14168                           
 14169                           ;Test.c: 446: printf("D WILL RETURN    ");
 14170  004894  0E37               	movlw	low STR_111
 14171  004896  0100               	movlb	0	; () banked
 14172  004898  6F8E               	movwf	printf@f& (0+255),b
 14173  00489A  0EFB               	movlw	high STR_111
 14174  00489C  0100               	movlb	0	; () banked
 14175  00489E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14176  0048A0  ECE4  F00A         	call	_printf	;wreg free
 14177                           
 14178                           ;Test.c: 447: lcdInst(0b11000000);;
 14179  0048A4  0EC0               	movlw	192
 14180  0048A6  EC7D  F028         	call	_lcdInst
 14181                           
 14182                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14183  0048AA  0E49               	movlw	low STR_112
 14184  0048AC  0100               	movlb	0	; () banked
 14185  0048AE  6F8E               	movwf	printf@f& (0+255),b
 14186  0048B0  0EFB               	movlw	high STR_112
 14187  0048B2  0100               	movlb	0	; () banked
 14188  0048B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14189  0048B6  ECE4  F00A         	call	_printf	;wreg free
 14190  0048BA                     l1251:
 14191  0048BA  A281               	btfss	3969,1,c	;volatile
 14192  0048BC  D7FE               	goto	l1251
 14193                           
 14194                           ;Test.c: 453: }
 14195                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14196  0048BE  3881               	swapf	3969,w,c	;volatile
 14197  0048C0  0B0F               	andlw	15
 14198  0048C2  0A0F               	xorlw	15
 14199  0048C4  B4D8               	btfsc	status,2,c
 14200  0048C6  0012               	return	
 14201                           
 14202                           ;Test.c: 457: else{
 14203                           ;Test.c: 458: LATAbits.LATA5 = 1;
 14204                           
 14205                           ;Test.c: 456: }
 14206                           
 14207                           ;Test.c: 455: break;
 14208  0048C8  8A89               	bsf	3977,5,c	;volatile
 14209  0048CA                     l1257:
 14210  0048CA  B281               	btfsc	3969,1,c	;volatile
 14211  0048CC  D7FE               	goto	l1257
 14212                           
 14213                           ;Test.c: 461: }
 14214                           ;Test.c: 462: LATAbits.LATA5 = 0;
 14215  0048CE  9A89               	bcf	3977,5,c	;volatile
 14216  0048D0  D7F4               	goto	l1251
 14217  0048D2                     __end_of_PortTestA5:
 14218                           	opt stack 0
 14219                           tblptru	equ	0xFF8
 14220                           tblptrh	equ	0xFF7
 14221                           tblptrl	equ	0xFF6
 14222                           tablat	equ	0xFF5
 14223                           prodh	equ	0xFF4
 14224                           prodl	equ	0xFF3
 14225                           intcon	equ	0xFF2
 14226                           intcon2	equ	0xFF1
 14227                           intcon3	equ	0xFF0
 14228                           postinc0	equ	0xFEE
 14229                           wreg	equ	0xFE8
 14230                           postdec1	equ	0xFE5
 14231                           fsr1l	equ	0xFE1
 14232                           indf2	equ	0xFDF
 14233                           postinc2	equ	0xFDE
 14234                           postdec2	equ	0xFDD
 14235                           fsr2h	equ	0xFDA
 14236                           fsr2l	equ	0xFD9
 14237                           status	equ	0xFD8
 14238                           
 14239 ;; *************** function _EEPROMTest *****************
 14240 ;; Defined at:
 14241 ;;		line 577 in file "Test.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		None
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14259 ;;Total ram usage:        0 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    7
 14262 ;; This function calls:
 14263 ;;		Nothing
 14264 ;; This function is called by:
 14265 ;;		_Test
 14266 ;; This function uses a non-reentrant model
 14267 ;;
 14268                           
 14269                           	psect	text46
 14270  00515E                     __ptext46:
 14271                           	opt stack 0
 14272  00515E                     _EEPROMTest:
 14273                           	opt stack 22
 14274                           
 14275                           ;incstack = 0
 14276  00515E  0012               	return		;funcret
 14277  005160                     __end_of_EEPROMTest:
 14278                           	opt stack 0
 14279                           tblptru	equ	0xFF8
 14280                           tblptrh	equ	0xFF7
 14281                           tblptrl	equ	0xFF6
 14282                           tablat	equ	0xFF5
 14283                           prodh	equ	0xFF4
 14284                           prodl	equ	0xFF3
 14285                           intcon	equ	0xFF2
 14286                           intcon2	equ	0xFF1
 14287                           intcon3	equ	0xFF0
 14288                           postinc0	equ	0xFEE
 14289                           wreg	equ	0xFE8
 14290                           postdec1	equ	0xFE5
 14291                           fsr1l	equ	0xFE1
 14292                           indf2	equ	0xFDF
 14293                           postinc2	equ	0xFDE
 14294                           postdec2	equ	0xFDD
 14295                           fsr2h	equ	0xFDA
 14296                           fsr2l	equ	0xFD9
 14297                           status	equ	0xFD8
 14298                           
 14299 ;; *************** function _BothServos *****************
 14300 ;; Defined at:
 14301 ;;		line 352 in file "Test.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;		None
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;		None
 14306 ;; Return value:  Size  Location     Type
 14307 ;;                  1    wreg      void 
 14308 ;; Registers used:
 14309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14310 ;; Tracked objects:
 14311 ;;		On entry : 0/0
 14312 ;;		On exit  : 0/0
 14313 ;;		Unchanged: 0/0
 14314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14319 ;;Total ram usage:        2 bytes
 14320 ;; Hardware stack levels used:    1
 14321 ;; Hardware stack levels required when called:   10
 14322 ;; This function calls:
 14323 ;;		_initServos
 14324 ;;		_lcdInst
 14325 ;;		_printf
 14326 ;;		_updateServoPosition
 14327 ;; This function is called by:
 14328 ;;		_Test
 14329 ;; This function uses a non-reentrant model
 14330 ;;
 14331                           
 14332                           	psect	text47
 14333  001A00                     __ptext47:
 14334                           	opt stack 0
 14335  001A00                     _BothServos:
 14336                           	opt stack 19
 14337                           
 14338                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14339                           
 14340                           ;incstack = 0
 14341  001A00  0E01               	movlw	1
 14342  001A02  EC7D  F028         	call	_lcdInst
 14343  001A06  0E68               	movlw	104
 14344  001A08  0100               	movlb	0	; () banked
 14345  001A0A  6FAB               	movwf	??_BothServos& (0+255),b
 14346  001A0C  0EE4               	movlw	228
 14347  001A0E                     u9717:
 14348  001A0E  2EE8               	decfsz	wreg,f,c
 14349  001A10  D7FE               	bra	u9717
 14350  001A12  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14351  001A14  D7FC               	bra	u9717
 14352  001A16  F000               	nop	
 14353  001A18  0E80               	movlw	128
 14354  001A1A  EC7D  F028         	call	_lcdInst
 14355                           
 14356                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14357  001A1E  0EB4               	movlw	low STR_110
 14358  001A20  0100               	movlb	0	; () banked
 14359  001A22  6F8E               	movwf	printf@f& (0+255),b
 14360  001A24  0EFC               	movlw	high STR_110
 14361  001A26  0100               	movlb	0	; () banked
 14362  001A28  6F8F               	movwf	(printf@f+1)& (0+255),b
 14363  001A2A  ECE4  F00A         	call	_printf	;wreg free
 14364                           
 14365                           ;Test.c: 355: TMR1ON = 1;
 14366  001A2E  80CD               	bsf	4045,0,c	;volatile
 14367                           
 14368                           ;Test.c: 356: TMR3ON = 1;
 14369  001A30  80B1               	bsf	4017,0,c	;volatile
 14370                           
 14371                           ;Test.c: 357: machine_state = Sorting_state;
 14372  001A32  0E01               	movlw	1
 14373  001A34  0100               	movlb	0	; () banked
 14374  001A36  6FFC               	movwf	_machine_state& (0+255),b
 14375                           
 14376                           ; BSR set to: 0
 14377                           ;Test.c: 358: was_low_1 = 0;
 14378  001A38  0E00               	movlw	0
 14379  001A3A  6E7A               	movwf	_was_low_1+1,c	;volatile
 14380  001A3C  0E00               	movlw	0
 14381  001A3E  6E79               	movwf	_was_low_1,c	;volatile
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;Test.c: 359: was_low_3 = 0;
 14385  001A40  0E00               	movlw	0
 14386  001A42  6E7C               	movwf	_was_low_3+1,c	;volatile
 14387  001A44  0E00               	movlw	0
 14388  001A46  6E7B               	movwf	_was_low_3,c	;volatile
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;Test.c: 365: initServos();
 14392  001A48  EC69  F024         	call	_initServos	;wreg free
 14393                           
 14394                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14395  001A4C  0E3D               	movlw	61
 14396  001A4E  0100               	movlb	0	; () banked
 14397  001A50  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14398  001A52  0EE1               	movlw	225
 14399  001A54  0100               	movlb	0	; () banked
 14400  001A56  6FAB               	movwf	??_BothServos& (0+255),b
 14401  001A58  0E3F               	movlw	63
 14402  001A5A                     u9727:
 14403  001A5A  2EE8               	decfsz	wreg,f,c
 14404  001A5C  D7FE               	bra	u9727
 14405  001A5E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14406  001A60  D7FC               	bra	u9727
 14407  001A62  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14408  001A64  D7FA               	bra	u9727
 14409  001A66  D000               	nop2	
 14410                           
 14411                           ;Test.c: 368: updateServoPosition(500, 1);
 14412  001A68  0E01               	movlw	1
 14413  001A6A  0100               	movlb	0	; () banked
 14414  001A6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14415  001A6E  0EF4               	movlw	244
 14416  001A70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14417  001A72  0E00               	movlw	0
 14418  001A74  0100               	movlb	0	; () banked
 14419  001A76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14420  001A78  0E01               	movlw	1
 14421  001A7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14422  001A7C  ECCB  F022         	call	_updateServoPosition	;wreg free
 14423                           
 14424                           ;Test.c: 369: updateServoPosition(1050, 3);
 14425  001A80  0E04               	movlw	4
 14426  001A82  0100               	movlb	0	; () banked
 14427  001A84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14428  001A86  0E1A               	movlw	26
 14429  001A88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14430  001A8A  0E00               	movlw	0
 14431  001A8C  0100               	movlb	0	; () banked
 14432  001A8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14433  001A90  0E03               	movlw	3
 14434  001A92  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14435  001A94  ECCB  F022         	call	_updateServoPosition	;wreg free
 14436                           
 14437                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14438  001A98  0E1F               	movlw	31
 14439  001A9A  0100               	movlb	0	; () banked
 14440  001A9C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14441  001A9E  0E71               	movlw	113
 14442  001AA0  0100               	movlb	0	; () banked
 14443  001AA2  6FAB               	movwf	??_BothServos& (0+255),b
 14444  001AA4  0E1E               	movlw	30
 14445  001AA6                     u9737:
 14446  001AA6  2EE8               	decfsz	wreg,f,c
 14447  001AA8  D7FE               	bra	u9737
 14448  001AAA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14449  001AAC  D7FC               	bra	u9737
 14450  001AAE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14451  001AB0  D7FA               	bra	u9737
 14452  001AB2  F000               	nop	
 14453                           
 14454                           ;Test.c: 371: updateServoPosition(1260, 3);
 14455  001AB4  0E04               	movlw	4
 14456  001AB6  0100               	movlb	0	; () banked
 14457  001AB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14458  001ABA  0EEC               	movlw	236
 14459  001ABC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14460  001ABE  0E00               	movlw	0
 14461  001AC0  0100               	movlb	0	; () banked
 14462  001AC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14463  001AC4  0E03               	movlw	3
 14464  001AC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14465  001AC8  ECCB  F022         	call	_updateServoPosition	;wreg free
 14466                           
 14467                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14468  001ACC  0E66               	movlw	102
 14469  001ACE  0100               	movlb	0	; () banked
 14470  001AD0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14471  001AD2  0E76               	movlw	118
 14472  001AD4  0100               	movlb	0	; () banked
 14473  001AD6  6FAB               	movwf	??_BothServos& (0+255),b
 14474  001AD8  0EC1               	movlw	193
 14475  001ADA                     u9747:
 14476  001ADA  2EE8               	decfsz	wreg,f,c
 14477  001ADC  D7FE               	bra	u9747
 14478  001ADE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14479  001AE0  D7FC               	bra	u9747
 14480  001AE2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14481  001AE4  D7FA               	bra	u9747
 14482                           
 14483                           ;Test.c: 373: updateServoPosition(1050, 3);
 14484  001AE6  0E04               	movlw	4
 14485  001AE8  0100               	movlb	0	; () banked
 14486  001AEA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14487  001AEC  0E1A               	movlw	26
 14488  001AEE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14489  001AF0  0E00               	movlw	0
 14490  001AF2  0100               	movlb	0	; () banked
 14491  001AF4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14492  001AF6  0E03               	movlw	3
 14493  001AF8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14494  001AFA  ECCB  F022         	call	_updateServoPosition	;wreg free
 14495                           
 14496                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14497  001AFE  0E1F               	movlw	31
 14498  001B00  0100               	movlb	0	; () banked
 14499  001B02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14500  001B04  0E71               	movlw	113
 14501  001B06  0100               	movlb	0	; () banked
 14502  001B08  6FAB               	movwf	??_BothServos& (0+255),b
 14503  001B0A  0E1E               	movlw	30
 14504  001B0C                     u9757:
 14505  001B0C  2EE8               	decfsz	wreg,f,c
 14506  001B0E  D7FE               	bra	u9757
 14507  001B10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14508  001B12  D7FC               	bra	u9757
 14509  001B14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14510  001B16  D7FA               	bra	u9757
 14511  001B18  F000               	nop	
 14512                           
 14513                           ;Test.c: 376: updateServoPosition(850, 1);
 14514  001B1A  0E03               	movlw	3
 14515  001B1C  0100               	movlb	0	; () banked
 14516  001B1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14517  001B20  0E52               	movlw	82
 14518  001B22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14519  001B24  0E00               	movlw	0
 14520  001B26  0100               	movlb	0	; () banked
 14521  001B28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14522  001B2A  0E01               	movlw	1
 14523  001B2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14524  001B2E  ECCB  F022         	call	_updateServoPosition	;wreg free
 14525                           
 14526                           ;Test.c: 377: updateServoPosition(1050, 3);
 14527  001B32  0E04               	movlw	4
 14528  001B34  0100               	movlb	0	; () banked
 14529  001B36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14530  001B38  0E1A               	movlw	26
 14531  001B3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14532  001B3C  0E00               	movlw	0
 14533  001B3E  0100               	movlb	0	; () banked
 14534  001B40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14535  001B42  0E03               	movlw	3
 14536  001B44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14537  001B46  ECCB  F022         	call	_updateServoPosition	;wreg free
 14538                           
 14539                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14540  001B4A  0E1F               	movlw	31
 14541  001B4C  0100               	movlb	0	; () banked
 14542  001B4E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14543  001B50  0E71               	movlw	113
 14544  001B52  0100               	movlb	0	; () banked
 14545  001B54  6FAB               	movwf	??_BothServos& (0+255),b
 14546  001B56  0E1E               	movlw	30
 14547  001B58                     u9767:
 14548  001B58  2EE8               	decfsz	wreg,f,c
 14549  001B5A  D7FE               	bra	u9767
 14550  001B5C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14551  001B5E  D7FC               	bra	u9767
 14552  001B60  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14553  001B62  D7FA               	bra	u9767
 14554  001B64  F000               	nop	
 14555                           
 14556                           ;Test.c: 379: updateServoPosition(1260, 3);
 14557  001B66  0E04               	movlw	4
 14558  001B68  0100               	movlb	0	; () banked
 14559  001B6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14560  001B6C  0EEC               	movlw	236
 14561  001B6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14562  001B70  0E00               	movlw	0
 14563  001B72  0100               	movlb	0	; () banked
 14564  001B74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14565  001B76  0E03               	movlw	3
 14566  001B78  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14567  001B7A  ECCB  F022         	call	_updateServoPosition	;wreg free
 14568                           
 14569                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14570  001B7E  0E66               	movlw	102
 14571  001B80  0100               	movlb	0	; () banked
 14572  001B82  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14573  001B84  0E76               	movlw	118
 14574  001B86  0100               	movlb	0	; () banked
 14575  001B88  6FAB               	movwf	??_BothServos& (0+255),b
 14576  001B8A  0EC1               	movlw	193
 14577  001B8C                     u9777:
 14578  001B8C  2EE8               	decfsz	wreg,f,c
 14579  001B8E  D7FE               	bra	u9777
 14580  001B90  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14581  001B92  D7FC               	bra	u9777
 14582  001B94  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14583  001B96  D7FA               	bra	u9777
 14584                           
 14585                           ;Test.c: 381: updateServoPosition(1050, 3);
 14586  001B98  0E04               	movlw	4
 14587  001B9A  0100               	movlb	0	; () banked
 14588  001B9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14589  001B9E  0E1A               	movlw	26
 14590  001BA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14591  001BA2  0E00               	movlw	0
 14592  001BA4  0100               	movlb	0	; () banked
 14593  001BA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14594  001BA8  0E03               	movlw	3
 14595  001BAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14596  001BAC  ECCB  F022         	call	_updateServoPosition	;wreg free
 14597                           
 14598                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14599  001BB0  0E1F               	movlw	31
 14600  001BB2  0100               	movlb	0	; () banked
 14601  001BB4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14602  001BB6  0E71               	movlw	113
 14603  001BB8  0100               	movlb	0	; () banked
 14604  001BBA  6FAB               	movwf	??_BothServos& (0+255),b
 14605  001BBC  0E1E               	movlw	30
 14606  001BBE                     u9787:
 14607  001BBE  2EE8               	decfsz	wreg,f,c
 14608  001BC0  D7FE               	bra	u9787
 14609  001BC2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14610  001BC4  D7FC               	bra	u9787
 14611  001BC6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14612  001BC8  D7FA               	bra	u9787
 14613  001BCA  F000               	nop	
 14614                           
 14615                           ;Test.c: 384: updateServoPosition(1200, 1);
 14616  001BCC  0E04               	movlw	4
 14617  001BCE  0100               	movlb	0	; () banked
 14618  001BD0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14619  001BD2  0EB0               	movlw	176
 14620  001BD4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14621  001BD6  0E00               	movlw	0
 14622  001BD8  0100               	movlb	0	; () banked
 14623  001BDA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14624  001BDC  0E01               	movlw	1
 14625  001BDE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14626  001BE0  ECCB  F022         	call	_updateServoPosition	;wreg free
 14627                           
 14628                           ;Test.c: 385: updateServoPosition(1050, 3);
 14629  001BE4  0E04               	movlw	4
 14630  001BE6  0100               	movlb	0	; () banked
 14631  001BE8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14632  001BEA  0E1A               	movlw	26
 14633  001BEC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14634  001BEE  0E00               	movlw	0
 14635  001BF0  0100               	movlb	0	; () banked
 14636  001BF2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14637  001BF4  0E03               	movlw	3
 14638  001BF6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14639  001BF8  ECCB  F022         	call	_updateServoPosition	;wreg free
 14640                           
 14641                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14642  001BFC  0E3D               	movlw	61
 14643  001BFE  0100               	movlb	0	; () banked
 14644  001C00  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14645  001C02  0EE1               	movlw	225
 14646  001C04  0100               	movlb	0	; () banked
 14647  001C06  6FAB               	movwf	??_BothServos& (0+255),b
 14648  001C08  0E3F               	movlw	63
 14649  001C0A                     u9797:
 14650  001C0A  2EE8               	decfsz	wreg,f,c
 14651  001C0C  D7FE               	bra	u9797
 14652  001C0E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14653  001C10  D7FC               	bra	u9797
 14654  001C12  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14655  001C14  D7FA               	bra	u9797
 14656  001C16  D000               	nop2	
 14657                           
 14658                           ;Test.c: 388: updateServoPosition(1670, 1);
 14659  001C18  0E06               	movlw	6
 14660  001C1A  0100               	movlb	0	; () banked
 14661  001C1C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14662  001C1E  0E86               	movlw	134
 14663  001C20  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14664  001C22  0E00               	movlw	0
 14665  001C24  0100               	movlb	0	; () banked
 14666  001C26  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14667  001C28  0E01               	movlw	1
 14668  001C2A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14669  001C2C  ECCB  F022         	call	_updateServoPosition	;wreg free
 14670                           
 14671                           ;Test.c: 389: updateServoPosition(1050, 3);
 14672  001C30  0E04               	movlw	4
 14673  001C32  0100               	movlb	0	; () banked
 14674  001C34  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14675  001C36  0E1A               	movlw	26
 14676  001C38  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14677  001C3A  0E00               	movlw	0
 14678  001C3C  0100               	movlb	0	; () banked
 14679  001C3E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14680  001C40  0E03               	movlw	3
 14681  001C42  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14682  001C44  ECCB  F022         	call	_updateServoPosition	;wreg free
 14683                           
 14684                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14685  001C48  0E1F               	movlw	31
 14686  001C4A  0100               	movlb	0	; () banked
 14687  001C4C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14688  001C4E  0E71               	movlw	113
 14689  001C50  0100               	movlb	0	; () banked
 14690  001C52  6FAB               	movwf	??_BothServos& (0+255),b
 14691  001C54  0E1E               	movlw	30
 14692  001C56                     u9807:
 14693  001C56  2EE8               	decfsz	wreg,f,c
 14694  001C58  D7FE               	bra	u9807
 14695  001C5A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14696  001C5C  D7FC               	bra	u9807
 14697  001C5E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14698  001C60  D7FA               	bra	u9807
 14699  001C62  F000               	nop	
 14700                           
 14701                           ;Test.c: 391: updateServoPosition(1390, 3);
 14702  001C64  0E05               	movlw	5
 14703  001C66  0100               	movlb	0	; () banked
 14704  001C68  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14705  001C6A  0E6E               	movlw	110
 14706  001C6C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14707  001C6E  0E00               	movlw	0
 14708  001C70  0100               	movlb	0	; () banked
 14709  001C72  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14710  001C74  0E03               	movlw	3
 14711  001C76  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14712  001C78  ECCB  F022         	call	_updateServoPosition	;wreg free
 14713                           
 14714                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14715  001C7C  0E66               	movlw	102
 14716  001C7E  0100               	movlb	0	; () banked
 14717  001C80  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14718  001C82  0E76               	movlw	118
 14719  001C84  0100               	movlb	0	; () banked
 14720  001C86  6FAB               	movwf	??_BothServos& (0+255),b
 14721  001C88  0EC1               	movlw	193
 14722  001C8A                     u9817:
 14723  001C8A  2EE8               	decfsz	wreg,f,c
 14724  001C8C  D7FE               	bra	u9817
 14725  001C8E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14726  001C90  D7FC               	bra	u9817
 14727  001C92  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14728  001C94  D7FA               	bra	u9817
 14729                           
 14730                           ;Test.c: 393: updateServoPosition(1050, 3);
 14731  001C96  0E04               	movlw	4
 14732  001C98  0100               	movlb	0	; () banked
 14733  001C9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14734  001C9C  0E1A               	movlw	26
 14735  001C9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14736  001CA0  0E00               	movlw	0
 14737  001CA2  0100               	movlb	0	; () banked
 14738  001CA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14739  001CA6  0E03               	movlw	3
 14740  001CA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14741  001CAA  ECCB  F022         	call	_updateServoPosition	;wreg free
 14742                           
 14743                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14744  001CAE  0E1F               	movlw	31
 14745  001CB0  0100               	movlb	0	; () banked
 14746  001CB2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14747  001CB4  0E71               	movlw	113
 14748  001CB6  0100               	movlb	0	; () banked
 14749  001CB8  6FAB               	movwf	??_BothServos& (0+255),b
 14750  001CBA  0E1E               	movlw	30
 14751  001CBC                     u9827:
 14752  001CBC  2EE8               	decfsz	wreg,f,c
 14753  001CBE  D7FE               	bra	u9827
 14754  001CC0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14755  001CC2  D7FC               	bra	u9827
 14756  001CC4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14757  001CC6  D7FA               	bra	u9827
 14758  001CC8  F000               	nop	
 14759                           
 14760                           ;Test.c: 396: updateServoPosition(2400, 1);
 14761  001CCA  0E09               	movlw	9
 14762  001CCC  0100               	movlb	0	; () banked
 14763  001CCE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14764  001CD0  0E60               	movlw	96
 14765  001CD2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14766  001CD4  0E00               	movlw	0
 14767  001CD6  0100               	movlb	0	; () banked
 14768  001CD8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14769  001CDA  0E01               	movlw	1
 14770  001CDC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14771  001CDE  ECCB  F022         	call	_updateServoPosition	;wreg free
 14772                           
 14773                           ;Test.c: 397: updateServoPosition(1050, 3);
 14774  001CE2  0E04               	movlw	4
 14775  001CE4  0100               	movlb	0	; () banked
 14776  001CE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14777  001CE8  0E1A               	movlw	26
 14778  001CEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14779  001CEC  0E00               	movlw	0
 14780  001CEE  0100               	movlb	0	; () banked
 14781  001CF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14782  001CF2  0E03               	movlw	3
 14783  001CF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14784  001CF6  ECCB  F022         	call	_updateServoPosition	;wreg free
 14785                           
 14786                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14787  001CFA  0E1F               	movlw	31
 14788  001CFC  0100               	movlb	0	; () banked
 14789  001CFE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14790  001D00  0E71               	movlw	113
 14791  001D02  0100               	movlb	0	; () banked
 14792  001D04  6FAB               	movwf	??_BothServos& (0+255),b
 14793  001D06  0E1E               	movlw	30
 14794  001D08                     u9837:
 14795  001D08  2EE8               	decfsz	wreg,f,c
 14796  001D0A  D7FE               	bra	u9837
 14797  001D0C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14798  001D0E  D7FC               	bra	u9837
 14799  001D10  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14800  001D12  D7FA               	bra	u9837
 14801  001D14  F000               	nop	
 14802                           
 14803                           ;Test.c: 399: updateServoPosition(1390, 3);
 14804  001D16  0E05               	movlw	5
 14805  001D18  0100               	movlb	0	; () banked
 14806  001D1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14807  001D1C  0E6E               	movlw	110
 14808  001D1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14809  001D20  0E00               	movlw	0
 14810  001D22  0100               	movlb	0	; () banked
 14811  001D24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14812  001D26  0E03               	movlw	3
 14813  001D28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14814  001D2A  ECCB  F022         	call	_updateServoPosition	;wreg free
 14815                           
 14816                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14817  001D2E  0E66               	movlw	102
 14818  001D30  0100               	movlb	0	; () banked
 14819  001D32  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14820  001D34  0E76               	movlw	118
 14821  001D36  0100               	movlb	0	; () banked
 14822  001D38  6FAB               	movwf	??_BothServos& (0+255),b
 14823  001D3A  0EC1               	movlw	193
 14824  001D3C                     u9847:
 14825  001D3C  2EE8               	decfsz	wreg,f,c
 14826  001D3E  D7FE               	bra	u9847
 14827  001D40  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14828  001D42  D7FC               	bra	u9847
 14829  001D44  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14830  001D46  D7FA               	bra	u9847
 14831                           
 14832                           ;Test.c: 401: updateServoPosition(1050, 3);
 14833  001D48  0E04               	movlw	4
 14834  001D4A  0100               	movlb	0	; () banked
 14835  001D4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14836  001D4E  0E1A               	movlw	26
 14837  001D50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14838  001D52  0E00               	movlw	0
 14839  001D54  0100               	movlb	0	; () banked
 14840  001D56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14841  001D58  0E03               	movlw	3
 14842  001D5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14843  001D5C  ECCB  F022         	call	_updateServoPosition	;wreg free
 14844                           
 14845                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14846  001D60  0E1F               	movlw	31
 14847  001D62  0100               	movlb	0	; () banked
 14848  001D64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14849  001D66  0E71               	movlw	113
 14850  001D68  0100               	movlb	0	; () banked
 14851  001D6A  6FAB               	movwf	??_BothServos& (0+255),b
 14852  001D6C  0E1E               	movlw	30
 14853  001D6E                     u9857:
 14854  001D6E  2EE8               	decfsz	wreg,f,c
 14855  001D70  D7FE               	bra	u9857
 14856  001D72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14857  001D74  D7FC               	bra	u9857
 14858  001D76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14859  001D78  D7FA               	bra	u9857
 14860  001D7A  F000               	nop	
 14861                           
 14862                           ;Test.c: 404: TMR1ON = 0;
 14863  001D7C  90CD               	bcf	4045,0,c	;volatile
 14864                           
 14865                           ;Test.c: 405: TMR3ON = 0;
 14866  001D7E  90B1               	bcf	4017,0,c	;volatile
 14867                           
 14868                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14869  001D80  9EF2               	bcf	intcon,7,c	;volatile
 14870  001D82  0012               	return		;funcret
 14871  001D84                     __end_of_BothServos:
 14872                           	opt stack 0
 14873                           tblptru	equ	0xFF8
 14874                           tblptrh	equ	0xFF7
 14875                           tblptrl	equ	0xFF6
 14876                           tablat	equ	0xFF5
 14877                           prodh	equ	0xFF4
 14878                           prodl	equ	0xFF3
 14879                           intcon	equ	0xFF2
 14880                           intcon2	equ	0xFF1
 14881                           intcon3	equ	0xFF0
 14882                           postinc0	equ	0xFEE
 14883                           wreg	equ	0xFE8
 14884                           postdec1	equ	0xFE5
 14885                           fsr1l	equ	0xFE1
 14886                           indf2	equ	0xFDF
 14887                           postinc2	equ	0xFDE
 14888                           postdec2	equ	0xFDD
 14889                           fsr2h	equ	0xFDA
 14890                           fsr2l	equ	0xFD9
 14891                           status	equ	0xFD8
 14892                           
 14893 ;; *************** function _initServos *****************
 14894 ;; Defined at:
 14895 ;;		line 423 in file "sort.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;		None
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;		None
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  1    wreg      void 
 14902 ;; Registers used:
 14903 ;;		wreg, status,2, status,0, cstack
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14913 ;;Total ram usage:        1 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    8
 14916 ;; This function calls:
 14917 ;;		_updateServoPosition
 14918 ;; This function is called by:
 14919 ;;		_Loading
 14920 ;;		_BothServos
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           	psect	text48
 14925  0048D2                     __ptext48:
 14926                           	opt stack 0
 14927  0048D2                     _initServos:
 14928                           	opt stack 20
 14929                           
 14930                           ;sort.c: 424: updateServoPosition(1200, 1);
 14931                           
 14932                           ;incstack = 0
 14933  0048D2  0E04               	movlw	4
 14934  0048D4  0100               	movlb	0	; () banked
 14935  0048D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14936  0048D8  0EB0               	movlw	176
 14937  0048DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14938  0048DC  0E00               	movlw	0
 14939  0048DE  0100               	movlb	0	; () banked
 14940  0048E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14941  0048E2  0E01               	movlw	1
 14942  0048E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14943  0048E6  ECCB  F022         	call	_updateServoPosition	;wreg free
 14944                           
 14945                           ;sort.c: 425: updateServoPosition(1050, 3);
 14946  0048EA  0E04               	movlw	4
 14947  0048EC  0100               	movlb	0	; () banked
 14948  0048EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14949  0048F0  0E1A               	movlw	26
 14950  0048F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14951  0048F4  0E00               	movlw	0
 14952  0048F6  0100               	movlb	0	; () banked
 14953  0048F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14954  0048FA  0E03               	movlw	3
 14955  0048FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14956  0048FE  ECCB  F022         	call	_updateServoPosition	;wreg free
 14957                           
 14958                           ;sort.c: 426: TMR1ON = 1;
 14959  004902  80CD               	bsf	4045,0,c	;volatile
 14960                           
 14961                           ;sort.c: 427: was_low_1 = 0;
 14962  004904  0E00               	movlw	0
 14963  004906  6E7A               	movwf	_was_low_1+1,c	;volatile
 14964  004908  0E00               	movlw	0
 14965  00490A  6E79               	movwf	_was_low_1,c	;volatile
 14966                           
 14967                           ;sort.c: 428: _delay((unsigned long)((5)*(32000000/4000.0)));
 14968  00490C  0E34               	movlw	52
 14969  00490E  0100               	movlb	0	; () banked
 14970  004910  6F88               	movwf	??_initServos& (0+255),b
 14971  004912  0EF1               	movlw	241
 14972  004914                     u9867:
 14973  004914  2EE8               	decfsz	wreg,f,c
 14974  004916  D7FE               	bra	u9867
 14975  004918  2F88               	decfsz	??_initServos& (0+255),f,b
 14976  00491A  D7FC               	bra	u9867
 14977  00491C  D000               	nop2	
 14978                           
 14979                           ;sort.c: 429: TMR3ON = 1;
 14980  00491E  80B1               	bsf	4017,0,c	;volatile
 14981                           
 14982                           ;sort.c: 430: was_low_3 = 0;
 14983  004920  0E00               	movlw	0
 14984  004922  6E7C               	movwf	_was_low_3+1,c	;volatile
 14985  004924  0E00               	movlw	0
 14986  004926  6E7B               	movwf	_was_low_3,c	;volatile
 14987                           
 14988                           ;sort.c: 432: LATCbits.LATC0 = 1;
 14989  004928  808B               	bsf	3979,0,c	;volatile
 14990  00492A  0012               	return		;funcret
 14991  00492C                     __end_of_initServos:
 14992                           	opt stack 0
 14993                           tblptru	equ	0xFF8
 14994                           tblptrh	equ	0xFF7
 14995                           tblptrl	equ	0xFF6
 14996                           tablat	equ	0xFF5
 14997                           prodh	equ	0xFF4
 14998                           prodl	equ	0xFF3
 14999                           intcon	equ	0xFF2
 15000                           intcon2	equ	0xFF1
 15001                           intcon3	equ	0xFF0
 15002                           postinc0	equ	0xFEE
 15003                           wreg	equ	0xFE8
 15004                           postdec1	equ	0xFE5
 15005                           fsr1l	equ	0xFE1
 15006                           indf2	equ	0xFDF
 15007                           postinc2	equ	0xFDE
 15008                           postdec2	equ	0xFDD
 15009                           fsr2h	equ	0xFDA
 15010                           fsr2l	equ	0xFD9
 15011                           status	equ	0xFD8
 15012                           
 15013 ;; *************** function _updateServoPosition *****************
 15014 ;; Defined at:
 15015 ;;		line 500 in file "sort.c"
 15016 ;; Parameters:    Size  Location     Type
 15017 ;;  time_us         2    0[BANK0 ] int 
 15018 ;;  timer           2    2[BANK0 ] int 
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;  my_time         2    6[BANK0 ] unsigned int 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;                  1    wreg      void 
 15023 ;; Registers used:
 15024 ;;		wreg, status,2, status,0
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15030 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;Total ram usage:        8 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    7
 15037 ;; This function calls:
 15038 ;;		Nothing
 15039 ;; This function is called by:
 15040 ;;		_Distribution
 15041 ;;		_initServos
 15042 ;;		_actuatorTest
 15043 ;;		_BothServos
 15044 ;; This function uses a non-reentrant model
 15045 ;;
 15046                           
 15047                           	psect	text49
 15048  004596                     __ptext49:
 15049                           	opt stack 0
 15050  004596                     _updateServoPosition:
 15051                           	opt stack 20
 15052                           
 15053                           ;sort.c: 501: unsigned int my_time = 65535 - time_us;
 15054                           
 15055                           ;incstack = 0
 15056  004596  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15057  00459A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15058  00459E  0100               	movlb	0	; () banked
 15059  0045A0  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15060  0045A2  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15061  0045A4  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15062  0045A6  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15063  0045A8  0EFF               	movlw	255
 15064  0045AA  0100               	movlb	0	; () banked
 15065  0045AC  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15066  0045AE  0100               	movlb	0	; () banked
 15067  0045B0  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15068  0045B2  0EFF               	movlw	255
 15069  0045B4  0100               	movlb	0	; () banked
 15070  0045B6  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15071  0045B8  0100               	movlb	0	; () banked
 15072  0045BA  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15073                           
 15074                           ;sort.c: 502: switch(timer){
 15075  0045BC  D015               	goto	l6138
 15076  0045BE                     l6136:
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;sort.c: 504: servoTimes[0] = my_time >> 8;
 15080  0045BE  0100               	movlb	0	; () banked
 15081  0045C0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15082  0045C2  0101               	movlb	1	; () banked
 15083  0045C4  6F1C               	movwf	_servoTimes& (0+255),b
 15084  0045C6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15085                           
 15086                           ;sort.c: 505: servoTimes[1] = my_time & 0xFF;
 15087  0045C8  0100               	movlb	0	; () banked
 15088  0045CA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15089  0045CC  0101               	movlb	1	; () banked
 15090  0045CE  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15091  0045D0  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15092  0045D2                     l854:
 15093                           
 15094                           ;sort.c: 507: servoTimes[2] = my_time >> 8;
 15095  0045D2  0100               	movlb	0	; () banked
 15096  0045D4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15097  0045D6  0101               	movlb	1	; () banked
 15098  0045D8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15099  0045DA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15100                           
 15101                           ;sort.c: 508: servoTimes[3] = my_time & 0xFF;
 15102  0045DC  0100               	movlb	0	; () banked
 15103  0045DE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15104  0045E0  0101               	movlb	1	; () banked
 15105  0045E2  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15106  0045E4  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15107                           
 15108                           ;sort.c: 509: }
 15109  0045E6  0012               	return	
 15110  0045E8                     l6138:
 15111  0045E8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15112  0045EC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15113                           
 15114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15115                           ; Switch size 1, requested type "space"
 15116                           ; Number of cases is 1, Range of values is 0 to 0
 15117                           ; switch strategies available:
 15118                           ; Name         Instructions Cycles
 15119                           ; simple_byte            4     3 (average)
 15120                           ;	Chosen strategy is simple_byte
 15121  0045F0  0100               	movlb	0	; () banked
 15122  0045F2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15123  0045F4  0A00               	xorlw	0	; case 0
 15124  0045F6  A4D8               	btfss	status,2,c
 15125  0045F8  0012               	return	
 15126                           
 15127                           ; BSR set to: 0
 15128                           ; Switch size 1, requested type "space"
 15129                           ; Number of cases is 2, Range of values is 1 to 3
 15130                           ; switch strategies available:
 15131                           ; Name         Instructions Cycles
 15132                           ; simple_byte            7     4 (average)
 15133                           ;	Chosen strategy is simple_byte
 15134  0045FA  0100               	movlb	0	; () banked
 15135  0045FC  5184               	movf	??_updateServoPosition& (0+255),w,b
 15136  0045FE  0A01               	xorlw	1	; case 1
 15137  004600  B4D8               	btfsc	status,2,c
 15138  004602  D7DD               	goto	l6136
 15139  004604  0A02               	xorlw	2	; case 3
 15140  004606  A4D8               	btfss	status,2,c
 15141  004608  0012               	return	
 15142  00460A  D7E3               	goto	l854
 15143  00460C                     __end_of_updateServoPosition:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           intcon2	equ	0xFF1
 15153                           intcon3	equ	0xFF0
 15154                           postinc0	equ	0xFEE
 15155                           wreg	equ	0xFE8
 15156                           postdec1	equ	0xFE5
 15157                           fsr1l	equ	0xFE1
 15158                           indf2	equ	0xFDF
 15159                           postinc2	equ	0xFDE
 15160                           postdec2	equ	0xFDD
 15161                           fsr2h	equ	0xFDA
 15162                           fsr2l	equ	0xFD9
 15163                           status	equ	0xFD8
 15164                           
 15165 ;; *************** function _BlockerTest *****************
 15166 ;; Defined at:
 15167 ;;		line 589 in file "Test.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  i               2   44[BANK0 ] int 
 15172 ;;  cond_flag       2   48[BANK0 ] int 
 15173 ;;  cam_flag        2   46[BANK0 ] int 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  1    wreg      void 
 15176 ;; Registers used:
 15177 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15187 ;;Total ram usage:        7 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:   10
 15190 ;; This function calls:
 15191 ;;		_lcdInst
 15192 ;;		_printf
 15193 ;; This function is called by:
 15194 ;;		_Test
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           	psect	text50
 15199  0036C2                     __ptext50:
 15200                           	opt stack 0
 15201  0036C2                     _BlockerTest:
 15202                           	opt stack 19
 15203                           
 15204                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15205                           
 15206                           ;incstack = 0
 15207  0036C2  0E01               	movlw	1
 15208  0036C4  EC7D  F028         	call	_lcdInst
 15209  0036C8  0E68               	movlw	104
 15210  0036CA  0100               	movlb	0	; () banked
 15211  0036CC  6FAB               	movwf	??_BlockerTest& (0+255),b
 15212  0036CE  0EE4               	movlw	228
 15213  0036D0                     u9877:
 15214  0036D0  2EE8               	decfsz	wreg,f,c
 15215  0036D2  D7FE               	bra	u9877
 15216  0036D4  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15217  0036D6  D7FC               	bra	u9877
 15218  0036D8  F000               	nop	
 15219  0036DA  0E80               	movlw	128
 15220  0036DC  EC7D  F028         	call	_lcdInst
 15221                           
 15222                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15223  0036E0  0E7F               	movlw	low STR_122
 15224  0036E2  0100               	movlb	0	; () banked
 15225  0036E4  6F8E               	movwf	printf@f& (0+255),b
 15226  0036E6  0EFB               	movlw	high STR_122
 15227  0036E8  0100               	movlb	0	; () banked
 15228  0036EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15229  0036EC  A480               	btfss	3968,2,c	;volatile
 15230  0036EE  D004               	goto	u6850
 15231  0036F0  0100               	movlb	0	; () banked
 15232  0036F2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15233  0036F4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15234  0036F6  D002               	goto	u6858
 15235  0036F8                     u6850:
 15236  0036F8  0100               	movlb	0	; () banked
 15237  0036FA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15238  0036FC                     u6858:
 15239  0036FC  0100               	movlb	0	; () banked
 15240  0036FE  51AB               	movf	??_BlockerTest& (0+255),w,b
 15241  003700  0100               	movlb	0	; () banked
 15242  003702  6F90               	movwf	(?_printf+2)& (0+255),b
 15243  003704  6B91               	clrf	(?_printf+3)& (0+255),b
 15244  003706  ECE4  F00A         	call	_printf	;wreg free
 15245                           
 15246                           ;Test.c: 592: lcdInst(0b11000000);;
 15247  00370A  0EC0               	movlw	192
 15248  00370C  EC7D  F028         	call	_lcdInst
 15249                           
 15250                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15251  003710  0E6D               	movlw	low STR_123
 15252  003712  0100               	movlb	0	; () banked
 15253  003714  6F8E               	movwf	printf@f& (0+255),b
 15254  003716  0EFB               	movlw	high STR_123
 15255  003718  0100               	movlb	0	; () banked
 15256  00371A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15257  00371C  ECE4  F00A         	call	_printf	;wreg free
 15258                           
 15259                           ;Test.c: 594: int cam_flag = 1;
 15260  003720  0E00               	movlw	0
 15261  003722  0100               	movlb	0	; () banked
 15262  003724  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15263  003726  0E01               	movlw	1
 15264  003728  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;Test.c: 595: int cond_flag = 0;
 15268  00372A  0E00               	movlw	0
 15269  00372C  0100               	movlb	0	; () banked
 15270  00372E  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15271  003730  0E00               	movlw	0
 15272  003732  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15276                           
 15277                           ;Test.c: 596: while(1){
 15278  003734  D018               	goto	l8064
 15279  003736                     l8060:
 15280                           
 15281                           ;Test.c: 598: lcdInst(0b10000000);;
 15282  003736  0E80               	movlw	128
 15283  003738  EC7D  F028         	call	_lcdInst
 15284                           
 15285                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15286  00373C  0E7F               	movlw	low STR_122
 15287  00373E  0100               	movlb	0	; () banked
 15288  003740  6F8E               	movwf	printf@f& (0+255),b
 15289  003742  0EFB               	movlw	high STR_122
 15290  003744  0100               	movlb	0	; () banked
 15291  003746  6F8F               	movwf	(printf@f+1)& (0+255),b
 15292  003748  A480               	btfss	3968,2,c	;volatile
 15293  00374A  D004               	goto	u6860
 15294  00374C  0100               	movlb	0	; () banked
 15295  00374E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15296  003750  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15297  003752  D002               	goto	u6868
 15298  003754                     u6860:
 15299  003754  0100               	movlb	0	; () banked
 15300  003756  6BAB               	clrf	??_BlockerTest& (0+255),b
 15301  003758                     u6868:
 15302  003758  0100               	movlb	0	; () banked
 15303  00375A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15304  00375C  0100               	movlb	0	; () banked
 15305  00375E  6F90               	movwf	(?_printf+2)& (0+255),b
 15306  003760  6B91               	clrf	(?_printf+3)& (0+255),b
 15307  003762  ECE4  F00A         	call	_printf	;wreg free
 15308  003766                     l8064:
 15309  003766  A281               	btfss	3969,1,c	;volatile
 15310  003768  D7E6               	goto	l8060
 15311                           
 15312                           ;Test.c: 600: }
 15313                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15314  00376A  3881               	swapf	3969,w,c	;volatile
 15315  00376C  0B0F               	andlw	15
 15316  00376E  0A0F               	xorlw	15
 15317  003770  B4D8               	btfsc	status,2,c
 15318  003772  0012               	return	
 15319                           
 15320                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15321                           
 15322                           ;Test.c: 603: }
 15323                           
 15324                           ;Test.c: 602: break;
 15325  003774  3881               	swapf	3969,w,c	;volatile
 15326  003776  0B0F               	andlw	15
 15327  003778  06E8               	decf	wreg,f,c
 15328  00377A  A4D8               	btfss	status,2,c
 15329  00377C  D016               	goto	l8082
 15330                           
 15331                           ;Test.c: 605: if(cond_flag){
 15332  00377E  0100               	movlb	0	; () banked
 15333  003780  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15334  003782  0100               	movlb	0	; () banked
 15335  003784  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15336  003786  B4D8               	btfsc	status,2,c
 15337  003788  D007               	goto	l1327
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15341  00378A  8689               	bsf	3977,3,c	;volatile
 15342  00378C  D006               	goto	l8080
 15343  00378E                     u6911:
 15344  00378E  0E01               	movlw	1
 15345  003790                     u6920:
 15346  003790  0100               	movlb	0	; () banked
 15347  003792  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15348  003794  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15349                           
 15350                           ;Test.c: 608: }
 15351  003796  D054               	goto	l8106
 15352  003798                     l1327:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;Test.c: 609: else{
 15356                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15357  003798  9689               	bcf	3977,3,c	;volatile
 15358  00379A                     l8080:
 15359                           
 15360                           ; BSR set to: 0
 15361                           ;Test.c: 611: cond_flag = !cond_flag;
 15362  00379A  0100               	movlb	0	; () banked
 15363  00379C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15364  00379E  0100               	movlb	0	; () banked
 15365  0037A0  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15366  0037A2  B4D8               	btfsc	status,2,c
 15367  0037A4  D7F4               	goto	u6911
 15368  0037A6  0E00               	movlw	0
 15369  0037A8  D7F3               	goto	u6920
 15370  0037AA                     l8082:
 15371                           
 15372                           ;Test.c: 614: else{
 15373                           ;Test.c: 615: if(cam_flag){
 15374  0037AA  0100               	movlb	0	; () banked
 15375  0037AC  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15376  0037AE  0100               	movlb	0	; () banked
 15377  0037B0  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15378  0037B2  B4D8               	btfsc	status,2,c
 15379  0037B4  D007               	goto	l8088
 15380                           
 15381                           ; BSR set to: 0
 15382                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15383  0037B6  808B               	bsf	3979,0,c	;volatile
 15384  0037B8  D023               	goto	l8100
 15385  0037BA                     u6961:
 15386  0037BA  0E01               	movlw	1
 15387  0037BC                     u6970:
 15388  0037BC  0100               	movlb	0	; () banked
 15389  0037BE  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15390  0037C0  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15391                           
 15392                           ;Test.c: 618: }
 15393  0037C2  D03E               	goto	l8106
 15394  0037C4                     l8088:
 15395                           
 15396                           ; BSR set to: 0
 15397                           ;Test.c: 619: else{
 15398                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15399  0037C4  0E00               	movlw	0
 15400  0037C6  0100               	movlb	0	; () banked
 15401  0037C8  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15402  0037CA  0E00               	movlw	0
 15403  0037CC  6FAC               	movwf	BlockerTest@i& (0+255),b
 15404  0037CE                     l8090:
 15405                           
 15406                           ; BSR set to: 0
 15407  0037CE  0100               	movlb	0	; () banked
 15408  0037D0  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15409  0037D2  D008               	goto	l1332
 15410  0037D4  0E88               	movlw	136
 15411  0037D6  0100               	movlb	0	; () banked
 15412  0037D8  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15413  0037DA  0E13               	movlw	19
 15414  0037DC  0100               	movlb	0	; () banked
 15415  0037DE  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15416  0037E0  B0D8               	btfsc	status,0,c
 15417  0037E2  D00D               	goto	l1333
 15418  0037E4                     l1332:
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;Test.c: 621: {
 15422                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15423  0037E4  808B               	bsf	3979,0,c	;volatile
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15427  0037E6  0E1A               	movlw	26
 15428  0037E8                     u9887:
 15429  0037E8  2EE8               	decfsz	wreg,f,c
 15430  0037EA  D7FE               	bra	u9887
 15431  0037EC  D000               	nop2	
 15432                           
 15433                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15434  0037EE  908B               	bcf	3979,0,c	;volatile
 15435                           
 15436                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15437  0037F0  0EF0               	movlw	240
 15438  0037F2                     u9897:
 15439  0037F2  2EE8               	decfsz	wreg,f,c
 15440  0037F4  D7FE               	bra	u9897
 15441  0037F6  0100               	movlb	0	; () banked
 15442  0037F8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15443  0037FA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15444  0037FC  D7E8               	goto	l8090
 15445  0037FE                     l1333:
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;Test.c: 626: }
 15449                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15450  0037FE  908B               	bcf	3979,0,c	;volatile
 15451  003800                     l8100:
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;Test.c: 628: cam_flag = !cam_flag;
 15455  003800  0100               	movlb	0	; () banked
 15456  003802  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15457  003804  0100               	movlb	0	; () banked
 15458  003806  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15459  003808  B4D8               	btfsc	status,2,c
 15460  00380A  D7D7               	goto	u6961
 15461  00380C  0E00               	movlw	0
 15462  00380E  D7D6               	goto	u6970
 15463  003810                     l8102:
 15464                           
 15465                           ;Test.c: 633: lcdInst(0b10000000);;
 15466  003810  0E80               	movlw	128
 15467  003812  EC7D  F028         	call	_lcdInst
 15468                           
 15469                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15470  003816  0E7F               	movlw	low STR_122
 15471  003818  0100               	movlb	0	; () banked
 15472  00381A  6F8E               	movwf	printf@f& (0+255),b
 15473  00381C  0EFB               	movlw	high STR_122
 15474  00381E  0100               	movlb	0	; () banked
 15475  003820  6F8F               	movwf	(printf@f+1)& (0+255),b
 15476  003822  A480               	btfss	3968,2,c	;volatile
 15477  003824  D004               	goto	u7020
 15478  003826  0100               	movlb	0	; () banked
 15479  003828  6BAB               	clrf	??_BlockerTest& (0+255),b
 15480  00382A  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15481  00382C  D002               	goto	u7028
 15482  00382E                     u7020:
 15483  00382E  0100               	movlb	0	; () banked
 15484  003830  6BAB               	clrf	??_BlockerTest& (0+255),b
 15485  003832                     u7028:
 15486  003832  0100               	movlb	0	; () banked
 15487  003834  51AB               	movf	??_BlockerTest& (0+255),w,b
 15488  003836  0100               	movlb	0	; () banked
 15489  003838  6F90               	movwf	(?_printf+2)& (0+255),b
 15490  00383A  6B91               	clrf	(?_printf+3)& (0+255),b
 15491  00383C  ECE4  F00A         	call	_printf	;wreg free
 15492  003840                     l8106:
 15493  003840  A281               	btfss	3969,1,c	;volatile
 15494  003842  D791               	goto	l8064
 15495  003844  D7E5               	goto	l8102
 15496  003846                     __end_of_BlockerTest:
 15497                           	opt stack 0
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           intcon2	equ	0xFF1
 15506                           intcon3	equ	0xFF0
 15507                           postinc0	equ	0xFEE
 15508                           wreg	equ	0xFE8
 15509                           postdec1	equ	0xFE5
 15510                           fsr1l	equ	0xFE1
 15511                           indf2	equ	0xFDF
 15512                           postinc2	equ	0xFDE
 15513                           postdec2	equ	0xFDD
 15514                           fsr2h	equ	0xFDA
 15515                           fsr2l	equ	0xFD9
 15516                           status	equ	0xFD8
 15517                           
 15518 ;; *************** function _printf *****************
 15519 ;; Defined at:
 15520 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15523 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15524 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15525 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15526 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15527 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15528 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15529 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15530 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15531 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15532 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15533 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15534 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15535 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15536 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15537 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15538 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15539 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15540 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15541 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15542 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15543 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15544 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15545 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15546 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15547 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15548 ;; Auto vars:     Size  Location     Type
 15549 ;;  tmpval          4    0        struct .
 15550 ;;  width           2   41[BANK0 ] int 
 15551 ;;  val             2   37[BANK0 ] unsigned int 
 15552 ;;  len             2   35[BANK0 ] unsigned int 
 15553 ;;  ap              2   33[BANK0 ] PTR void [1]
 15554 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15555 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15556 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15557 ;;  c               1   40[BANK0 ] char 
 15558 ;;  flag            1   39[BANK0 ] unsigned char 
 15559 ;;  prec            1   30[BANK0 ] char 
 15560 ;; Return value:  Size  Location     Type
 15561 ;;                  2   14[BANK0 ] int 
 15562 ;; Registers used:
 15563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15564 ;; Tracked objects:
 15565 ;;		On entry : 0/0
 15566 ;;		On exit  : 0/0
 15567 ;;		Unchanged: 0/0
 15568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15569 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15570 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15571 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15572 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15573 ;;Total ram usage:       29 bytes
 15574 ;; Hardware stack levels used:    1
 15575 ;; Hardware stack levels required when called:    9
 15576 ;; This function calls:
 15577 ;;		___lwdiv
 15578 ;;		___lwmod
 15579 ;;		___wmul
 15580 ;;		_isdigit
 15581 ;;		_putch
 15582 ;; This function is called by:
 15583 ;;		_UI
 15584 ;;		_change_state_to_menu_start
 15585 ;;		_change_state_to_menu_12
 15586 ;;		_change_state_to_menu_22
 15587 ;;		_printRTC
 15588 ;;		_EEPROM_write
 15589 ;;		_Test
 15590 ;;		_algorithmTest
 15591 ;;		_sensorTest
 15592 ;;		_actuatorTest
 15593 ;;		_BothServos
 15594 ;;		_PortTestA5
 15595 ;;		_PusherTest
 15596 ;;		_SpeedTest
 15597 ;;		_BlockerTest
 15598 ;;		_ToggleTestA5
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text51
 15603  0015C8                     __ptext51:
 15604                           	opt stack 0
 15605  0015C8                     _printf:
 15606                           	opt stack 18
 15607                           
 15608                           ;doprnt.c: 466: va_list ap;
 15609                           ;doprnt.c: 499: signed char c;
 15610                           ;doprnt.c: 501: int width;
 15611                           ;doprnt.c: 506: signed char prec;
 15612                           ;doprnt.c: 508: unsigned char flag;
 15613                           ;doprnt.c: 523: union {
 15614                           ;doprnt.c: 524: unsigned long vd;
 15615                           ;doprnt.c: 525: double integ;
 15616                           ;doprnt.c: 526: } tmpval;
 15617                           ;doprnt.c: 528: unsigned int val;
 15618                           ;doprnt.c: 529: unsigned len;
 15619                           ;doprnt.c: 530: const char * cp;
 15620                           ;doprnt.c: 533: *ap = __va_start();
 15621                           
 15622                           ;incstack = 0
 15623  0015C8  0E90               	movlw	low (?_printf+2)
 15624  0015CA  0100               	movlb	0	; () banked
 15625  0015CC  6FA1               	movwf	printf@ap& (0+255),b
 15626  0015CE  0E00               	movlw	high (?_printf+2)
 15627  0015D0  0100               	movlb	0	; () banked
 15628  0015D2  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15629                           
 15630                           ;doprnt.c: 536: while(c = *f++) {
 15631  0015D4  D205               	goto	l6096
 15632  0015D6                     l5966:
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;doprnt.c: 538: if(c != '%')
 15636  0015D6  0E25               	movlw	37
 15637  0015D8  0100               	movlb	0	; () banked
 15638  0015DA  19A8               	xorwf	printf@c& (0+255),w,b
 15639  0015DC  B4D8               	btfsc	status,2,c
 15640  0015DE  D005               	goto	l5970
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;doprnt.c: 540: {
 15644                           ;doprnt.c: 541: (putch(c) );
 15645  0015E0  0100               	movlb	0	; () banked
 15646  0015E2  51A8               	movf	printf@c& (0+255),w,b
 15647  0015E4  EC75  F028         	call	_putch
 15648                           
 15649                           ;doprnt.c: 542: continue;
 15650  0015E8  D1FB               	goto	l6096
 15651  0015EA                     l5970:
 15652                           
 15653                           ;doprnt.c: 543: }
 15654                           ;doprnt.c: 546: width = 0;
 15655  0015EA  0E00               	movlw	0
 15656  0015EC  0100               	movlb	0	; () banked
 15657  0015EE  6FAA               	movwf	(printf@width+1)& (0+255),b
 15658  0015F0  0E00               	movlw	0
 15659  0015F2  6FA9               	movwf	printf@width& (0+255),b
 15660                           
 15661                           ;doprnt.c: 548: flag = 0;
 15662  0015F4  0E00               	movlw	0
 15663  0015F6  0100               	movlb	0	; () banked
 15664  0015F8  6FA7               	movwf	printf@flag& (0+255),b
 15665                           
 15666                           ; BSR set to: 0
 15667                           ;doprnt.c: 551: switch(*f) {
 15668                           
 15669                           ;doprnt.c: 550: for(;;) {
 15670  0015FA  D005               	goto	l5976
 15671  0015FC                     l5972:
 15672                           
 15673                           ;doprnt.c: 580: flag |= 0x04;
 15674  0015FC  0100               	movlb	0	; () banked
 15675  0015FE  85A7               	bsf	printf@flag& (0+255),2,b
 15676                           
 15677                           ;doprnt.c: 581: f++;
 15678  001600  0100               	movlb	0	; () banked
 15679  001602  4B8E               	infsnz	printf@f& (0+255),f,b
 15680  001604  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15681  001606                     l5976:
 15682  001606  C08E  FFF6         	movff	printf@f,tblptrl
 15683  00160A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15684  00160E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15685  00160E  6AF8               	clrf	tblptru,c
 15686  001610                     	endif
 15687  001610                     	if	0	;tblptru may be non-zero
 15688  001610                     	endif
 15689  001610  0008               	tblrd		*
 15690  001612  50F5               	movf	tablat,w,c
 15691                           
 15692                           ; Switch size 1, requested type "space"
 15693                           ; Number of cases is 1, Range of values is 48 to 48
 15694                           ; switch strategies available:
 15695                           ; Name         Instructions Cycles
 15696                           ; simple_byte            4     3 (average)
 15697                           ;	Chosen strategy is simple_byte
 15698  001614  0A30               	xorlw	48	; case 48
 15699  001616  B4D8               	btfsc	status,2,c
 15700  001618  D7F1               	goto	l5972
 15701                           
 15702                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15703                           
 15704                           ;doprnt.c: 586: }
 15705                           
 15706                           ;doprnt.c: 585: break;
 15707  00161A  C08E  FFF6         	movff	printf@f,tblptrl
 15708  00161E  C08F  FFF7         	movff	printf@f+1,tblptrh
 15709  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15710  001622  6AF8               	clrf	tblptru,c
 15711  001624                     	endif
 15712  001624                     	if	0	;tblptru may be non-zero
 15713  001624                     	endif
 15714  001624  0008               	tblrd		*
 15715  001626  50F5               	movf	tablat,w,c
 15716  001628  EC8A  F027         	call	_isdigit
 15717  00162C  A0D8               	btfss	status,0,c
 15718  00162E  D0D2               	goto	l6024
 15719                           
 15720                           ;doprnt.c: 598: width = 0;
 15721  001630  0E00               	movlw	0
 15722  001632  0100               	movlb	0	; () banked
 15723  001634  6FAA               	movwf	(printf@width+1)& (0+255),b
 15724  001636  0E00               	movlw	0
 15725  001638  6FA9               	movwf	printf@width& (0+255),b
 15726  00163A                     l5982:
 15727                           
 15728                           ;doprnt.c: 600: width *= 10;
 15729  00163A  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15730  00163E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15731  001642  0E00               	movlw	0
 15732  001644  0100               	movlb	0	; () banked
 15733  001646  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15734  001648  0E0A               	movlw	10
 15735  00164A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15736  00164C  ECF4  F025         	call	___wmul	;wreg free
 15737  001650  C080  F0A9         	movff	?___wmul,printf@width
 15738  001654  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15739                           
 15740                           ;doprnt.c: 601: width += *f++ - '0';
 15741  001658  0ED0               	movlw	208
 15742  00165A  0100               	movlb	0	; () banked
 15743  00165C  6F9A               	movwf	??_printf& (0+255),b
 15744  00165E  0EFF               	movlw	255
 15745  001660  0100               	movlb	0	; () banked
 15746  001662  6F9B               	movwf	(??_printf+1)& (0+255),b
 15747  001664  C08E  FFF6         	movff	printf@f,tblptrl
 15748  001668  C08F  FFF7         	movff	printf@f+1,tblptrh
 15749  00166C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15750  00166C  6AF8               	clrf	tblptru,c
 15751  00166E                     	endif
 15752  00166E                     	if	0	;tblptru may be non-zero
 15753  00166E                     	endif
 15754  00166E  0008               	tblrd		*
 15755  001670  50F5               	movf	tablat,w,c
 15756  001672  0100               	movlb	0	; () banked
 15757  001674  6F9C               	movwf	(??_printf+2)& (0+255),b
 15758  001676  6B9D               	clrf	(??_printf+3)& (0+255),b
 15759  001678  0100               	movlb	0	; () banked
 15760  00167A  519A               	movf	??_printf& (0+255),w,b
 15761  00167C  0100               	movlb	0	; () banked
 15762  00167E  279C               	addwf	(??_printf+2)& (0+255),f,b
 15763  001680  0100               	movlb	0	; () banked
 15764  001682  519B               	movf	(??_printf+1)& (0+255),w,b
 15765  001684  0100               	movlb	0	; () banked
 15766  001686  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15767  001688  0100               	movlb	0	; () banked
 15768  00168A  519C               	movf	(??_printf+2)& (0+255),w,b
 15769  00168C  0100               	movlb	0	; () banked
 15770  00168E  27A9               	addwf	printf@width& (0+255),f,b
 15771  001690  0100               	movlb	0	; () banked
 15772  001692  519D               	movf	(??_printf+3)& (0+255),w,b
 15773  001694  0100               	movlb	0	; () banked
 15774  001696  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15775                           
 15776                           ; BSR set to: 0
 15777  001698  0100               	movlb	0	; () banked
 15778  00169A  4B8E               	infsnz	printf@f& (0+255),f,b
 15779  00169C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15780                           
 15781                           ; BSR set to: 0
 15782                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15783  00169E  C08E  FFF6         	movff	printf@f,tblptrl
 15784  0016A2  C08F  FFF7         	movff	printf@f+1,tblptrh
 15785  0016A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15786  0016A6  6AF8               	clrf	tblptru,c
 15787  0016A8                     	endif
 15788  0016A8                     	if	0	;tblptru may be non-zero
 15789  0016A8                     	endif
 15790  0016A8  0008               	tblrd		*
 15791  0016AA  50F5               	movf	tablat,w,c
 15792  0016AC  EC8A  F027         	call	_isdigit
 15793  0016B0  A0D8               	btfss	status,0,c
 15794  0016B2  D090               	goto	l6024
 15795  0016B4  D7C2               	goto	l5982
 15796  0016B6                     l5990:
 15797                           
 15798                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15799  0016B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 15800  0016BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15801  0016BE  CFDE F09F          	movff	postinc2,printf@cp
 15802  0016C2  CFDD F0A0          	movff	postdec2,printf@cp+1
 15803  0016C6  0E02               	movlw	2
 15804  0016C8  0100               	movlb	0	; () banked
 15805  0016CA  27A1               	addwf	printf@ap& (0+255),f,b
 15806  0016CC  0E00               	movlw	0
 15807  0016CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;doprnt.c: 740: if(!cp)
 15811  0016D0  0100               	movlb	0	; () banked
 15812  0016D2  519F               	movf	printf@cp& (0+255),w,b
 15813  0016D4  0100               	movlb	0	; () banked
 15814  0016D6  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15815  0016D8  A4D8               	btfss	status,2,c
 15816  0016DA  D006               	goto	l5998
 15817                           
 15818                           ; BSR set to: 0
 15819                           ;doprnt.c: 741: cp = "(null)";
 15820  0016DC  0EB6               	movlw	low STR_126
 15821  0016DE  0100               	movlb	0	; () banked
 15822  0016E0  6F9F               	movwf	printf@cp& (0+255),b
 15823  0016E2  0EFF               	movlw	high STR_126
 15824  0016E4  0100               	movlb	0	; () banked
 15825  0016E6  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15826  0016E8                     l5998:
 15827                           
 15828                           ; BSR set to: 0
 15829                           ;doprnt.c: 745: len = 0;
 15830  0016E8  0E00               	movlw	0
 15831  0016EA  0100               	movlb	0	; () banked
 15832  0016EC  6FA4               	movwf	(printf@len+1)& (0+255),b
 15833  0016EE  0E00               	movlw	0
 15834  0016F0  6FA3               	movwf	printf@len& (0+255),b
 15835                           
 15836                           ;doprnt.c: 746: while(cp[len])
 15837  0016F2  D003               	goto	l6002
 15838  0016F4                     l6000:
 15839                           
 15840                           ;doprnt.c: 747: len++;
 15841  0016F4  0100               	movlb	0	; () banked
 15842  0016F6  4BA3               	infsnz	printf@len& (0+255),f,b
 15843  0016F8  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15844  0016FA                     l6002:
 15845                           
 15846                           ; BSR set to: 0
 15847  0016FA  0100               	movlb	0	; () banked
 15848  0016FC  51A3               	movf	printf@len& (0+255),w,b
 15849  0016FE  0100               	movlb	0	; () banked
 15850  001700  259F               	addwf	printf@cp& (0+255),w,b
 15851  001702  0100               	movlb	0	; () banked
 15852  001704  6F9A               	movwf	??_printf& (0+255),b
 15853  001706  0100               	movlb	0	; () banked
 15854  001708  51A4               	movf	(printf@len+1)& (0+255),w,b
 15855  00170A  0100               	movlb	0	; () banked
 15856  00170C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15857  00170E  0100               	movlb	0	; () banked
 15858  001710  6F9B               	movwf	(??_printf+1)& (0+255),b
 15859  001712  C09A  FFF6         	movff	??_printf,tblptrl
 15860  001716  C09B  FFF7         	movff	??_printf+1,tblptrh
 15861  00171A  0E00               	movlw	low (__mediumconst shr (0+16))
 15862  00171C  6EF8               	movwf	tblptru,c
 15863  00171E  0E0F               	movlw	(high __ramtop+-1)
 15864  001720  64F7               	cpfsgt	tblptrh,c
 15865  001722  D003               	bra	u4527
 15866  001724  0008               	tblrd		*
 15867  001726  50F5               	movf	tablat,w,c
 15868  001728  D005               	bra	u4520
 15869  00172A                     u4527:
 15870  00172A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15871  00172E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15872  001732  50EF               	movf	indf0,w,c
 15873  001734                     u4520:
 15874  001734  0900               	iorlw	0
 15875  001736  A4D8               	btfss	status,2,c
 15876  001738  D7DD               	goto	l6000
 15877                           
 15878                           ;doprnt.c: 757: if(width > len)
 15879  00173A  0100               	movlb	0	; () banked
 15880  00173C  51A9               	movf	printf@width& (0+255),w,b
 15881  00173E  0100               	movlb	0	; () banked
 15882  001740  5DA3               	subwf	printf@len& (0+255),w,b
 15883  001742  0100               	movlb	0	; () banked
 15884  001744  51AA               	movf	(printf@width+1)& (0+255),w,b
 15885  001746  0100               	movlb	0	; () banked
 15886  001748  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15887  00174A  B0D8               	btfsc	status,0,c
 15888  00174C  D009               	goto	l6008
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;doprnt.c: 758: width -= len;
 15892  00174E  0100               	movlb	0	; () banked
 15893  001750  51A3               	movf	printf@len& (0+255),w,b
 15894  001752  0100               	movlb	0	; () banked
 15895  001754  5FA9               	subwf	printf@width& (0+255),f,b
 15896  001756  0100               	movlb	0	; () banked
 15897  001758  51A4               	movf	(printf@len+1)& (0+255),w,b
 15898  00175A  0100               	movlb	0	; () banked
 15899  00175C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15900  00175E  D009               	goto	l6012
 15901  001760                     l6008:
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;doprnt.c: 759: else
 15905                           ;doprnt.c: 760: width = 0;
 15906  001760  0E00               	movlw	0
 15907  001762  0100               	movlb	0	; () banked
 15908  001764  6FAA               	movwf	(printf@width+1)& (0+255),b
 15909  001766  0E00               	movlw	0
 15910  001768  6FA9               	movwf	printf@width& (0+255),b
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;doprnt.c: 764: while(width--)
 15914  00176A  D003               	goto	l6012
 15915  00176C                     l6010:
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;doprnt.c: 765: (putch(' ') );
 15919  00176C  0E20               	movlw	32
 15920  00176E  EC75  F028         	call	_putch
 15921  001772                     l6012:
 15922  001772  0100               	movlb	0	; () banked
 15923  001774  07A9               	decf	printf@width& (0+255),f,b
 15924  001776  A0D8               	btfss	status,0,c
 15925  001778  07AA               	decf	(printf@width+1)& (0+255),f,b
 15926  00177A  0100               	movlb	0	; () banked
 15927  00177C  29A9               	incf	printf@width& (0+255),w,b
 15928  00177E  E1F6               	bnz	l6010
 15929  001780  0100               	movlb	0	; () banked
 15930  001782  29AA               	incf	(printf@width+1)& (0+255),w,b
 15931  001784  B4D8               	btfsc	status,2,c
 15932  001786  D017               	goto	l6018
 15933  001788  D7F1               	goto	l6010
 15934  00178A                     l6014:
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;doprnt.c: 768: (putch(*cp++) );
 15938  00178A  C09F  FFF6         	movff	printf@cp,tblptrl
 15939  00178E  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15940  001792  0E00               	movlw	low (__mediumconst shr (0+16))
 15941  001794  6EF8               	movwf	tblptru,c
 15942  001796  0E0F               	movlw	(high __ramtop+-1)
 15943  001798  64F7               	cpfsgt	tblptrh,c
 15944  00179A  D003               	bra	u4567
 15945  00179C  0008               	tblrd		*
 15946  00179E  50F5               	movf	tablat,w,c
 15947  0017A0  D005               	bra	u4560
 15948  0017A2                     u4567:
 15949  0017A2  CFF6 FFE9          	movff	tblptrl,fsr0l
 15950  0017A6  CFF7 FFEA          	movff	tblptrh,fsr0h
 15951  0017AA  50EF               	movf	indf0,w,c
 15952  0017AC                     u4560:
 15953  0017AC  EC75  F028         	call	_putch
 15954  0017B0  0100               	movlb	0	; () banked
 15955  0017B2  4B9F               	infsnz	printf@cp& (0+255),f,b
 15956  0017B4  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15957  0017B6                     l6018:
 15958                           
 15959                           ; BSR set to: 0
 15960  0017B6  0100               	movlb	0	; () banked
 15961  0017B8  07A3               	decf	printf@len& (0+255),f,b
 15962  0017BA  A0D8               	btfss	status,0,c
 15963  0017BC  07A4               	decf	(printf@len+1)& (0+255),f,b
 15964  0017BE  0100               	movlb	0	; () banked
 15965  0017C0  29A3               	incf	printf@len& (0+255),w,b
 15966  0017C2  E1E3               	bnz	l6014
 15967  0017C4  0100               	movlb	0	; () banked
 15968  0017C6  29A4               	incf	(printf@len+1)& (0+255),w,b
 15969  0017C8  B4D8               	btfsc	status,2,c
 15970  0017CA  D10A               	goto	l6096
 15971  0017CC  D7DE               	goto	l6014
 15972  0017CE                     l6020:
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;doprnt.c: 818: flag |= 0x40;
 15976  0017CE  0100               	movlb	0	; () banked
 15977  0017D0  8DA7               	bsf	printf@flag& (0+255),6,b
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;doprnt.c: 822: }
 15981                           
 15982                           ;doprnt.c: 819: break;
 15983  0017D2  D01D               	goto	l1368
 15984  0017D4                     l6024:
 15985  0017D4  C08E  FFF6         	movff	printf@f,tblptrl
 15986  0017D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 15987  0017DC  0100               	movlb	0	; () banked
 15988  0017DE  4B8E               	infsnz	printf@f& (0+255),f,b
 15989  0017E0  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15990  0017E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15991  0017E2  6AF8               	clrf	tblptru,c
 15992  0017E4                     	endif
 15993  0017E4                     	if	0	;tblptru may be non-zero
 15994  0017E4                     	endif
 15995  0017E4  0008               	tblrd		*
 15996  0017E6  CFF5 F0A8          	movff	tablat,printf@c
 15997  0017EA  0100               	movlb	0	; () banked
 15998  0017EC  51A8               	movf	printf@c& (0+255),w,b
 15999                           
 16000                           ; Switch size 1, requested type "space"
 16001                           ; Number of cases is 5, Range of values is 0 to 117
 16002                           ; switch strategies available:
 16003                           ; Name         Instructions Cycles
 16004                           ; simple_byte           16     9 (average)
 16005                           ;	Chosen strategy is simple_byte
 16006  0017EE  0A00               	xorlw	0	; case 0
 16007  0017F0  B4D8               	btfsc	status,2,c
 16008  0017F2  0012               	return	
 16009  0017F4  0A64               	xorlw	100	; case 100
 16010  0017F6  B4D8               	btfsc	status,2,c
 16011  0017F8  D00A               	goto	l1368
 16012  0017FA  0A0D               	xorlw	13	; case 105
 16013  0017FC  B4D8               	btfsc	status,2,c
 16014  0017FE  D007               	goto	l1368
 16015  001800  0A1A               	xorlw	26	; case 115
 16016  001802  B4D8               	btfsc	status,2,c
 16017  001804  D758               	goto	l5990
 16018  001806  0A06               	xorlw	6	; case 117
 16019  001808  B4D8               	btfsc	status,2,c
 16020  00180A  D7E1               	goto	l6020
 16021  00180C  D0E9               	goto	l6096
 16022  00180E                     l1368:
 16023                           
 16024                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16025  00180E  0100               	movlb	0	; () banked
 16026  001810  BDA7               	btfsc	printf@flag& (0+255),6,b
 16027  001812  D019               	goto	l6036
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;doprnt.c: 1253: {
 16031                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16032  001814  C0A1  FFD9         	movff	printf@ap,fsr2l
 16033  001818  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16034  00181C  CFDE F0A5          	movff	postinc2,printf@val
 16035  001820  CFDD F0A6          	movff	postdec2,printf@val+1
 16036                           
 16037                           ; BSR set to: 0
 16038  001824  0E02               	movlw	2
 16039  001826  0100               	movlb	0	; () banked
 16040  001828  27A1               	addwf	printf@ap& (0+255),f,b
 16041  00182A  0E00               	movlw	0
 16042  00182C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16043                           
 16044                           ; BSR set to: 0
 16045                           ;doprnt.c: 1261: if((int)val < 0) {
 16046  00182E  0100               	movlb	0	; () banked
 16047  001830  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16048  001832  D016               	goto	l6040
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;doprnt.c: 1262: flag |= 0x03;
 16052  001834  0E03               	movlw	3
 16053  001836  0100               	movlb	0	; () banked
 16054  001838  13A7               	iorwf	printf@flag& (0+255),f,b
 16055                           
 16056                           ; BSR set to: 0
 16057                           ;doprnt.c: 1263: val = -val;
 16058  00183A  0100               	movlb	0	; () banked
 16059  00183C  6DA5               	negf	printf@val& (0+255),b
 16060  00183E  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16061  001840  B0D8               	btfsc	status,0,c
 16062  001842  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16063                           
 16064                           ; BSR set to: 0
 16065                           ;doprnt.c: 1264: }
 16066                           ;doprnt.c: 1266: }
 16067  001844  D00D               	goto	l6040
 16068  001846                     l6036:
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;doprnt.c: 1268: else
 16072                           ;doprnt.c: 1273: {
 16073                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16074  001846  C0A1  FFD9         	movff	printf@ap,fsr2l
 16075  00184A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16076  00184E  CFDE F0A5          	movff	postinc2,printf@val
 16077  001852  CFDD F0A6          	movff	postdec2,printf@val+1
 16078                           
 16079                           ; BSR set to: 0
 16080  001856  0E02               	movlw	2
 16081  001858  0100               	movlb	0	; () banked
 16082  00185A  27A1               	addwf	printf@ap& (0+255),f,b
 16083  00185C  0E00               	movlw	0
 16084  00185E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16085  001860                     l6040:
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;doprnt.c: 1287: }
 16089                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16090  001860  0E01               	movlw	1
 16091  001862  0100               	movlb	0	; () banked
 16092  001864  6FA8               	movwf	printf@c& (0+255),b
 16093  001866                     l6042:
 16094                           
 16095                           ; BSR set to: 0
 16096  001866  0E05               	movlw	5
 16097  001868  0100               	movlb	0	; () banked
 16098  00186A  19A8               	xorwf	printf@c& (0+255),w,b
 16099  00186C  B4D8               	btfsc	status,2,c
 16100  00186E  D019               	goto	l6054
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;doprnt.c: 1306: if(val < dpowers[c])
 16104                           
 16105                           ; BSR set to: 0
 16106                           
 16107                           ; BSR set to: 0
 16108  001870  0100               	movlb	0	; () banked
 16109  001872  51A8               	movf	printf@c& (0+255),w,b
 16110  001874  0D02               	mullw	2
 16111  001876  0E00               	movlw	low _dpowers
 16112  001878  24F3               	addwf	prodl,w,c
 16113  00187A  6EF6               	movwf	tblptrl,c
 16114  00187C  0EFB               	movlw	high _dpowers
 16115  00187E  20F4               	addwfc	prodh,w,c
 16116  001880  6EF7               	movwf	tblptrh,c
 16117  001882                     	if	1	;There are 3 active tblptr bytes
 16118  001882  6AF8               	clrf	tblptru,c
 16119  001884  0E00               	movlw	low (__mediumconst shr (0+16))
 16120  001886  22F8               	addwfc	tblptru,f,c
 16121  001888                     	endif
 16122  001888  0009               	tblrd		*+
 16123  00188A  50F5               	movf	tablat,w,c
 16124  00188C  0100               	movlb	0	; () banked
 16125  00188E  5DA5               	subwf	printf@val& (0+255),w,b
 16126  001890  0009               	tblrd		*+
 16127  001892  50F5               	movf	tablat,w,c
 16128  001894  0100               	movlb	0	; () banked
 16129  001896  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16130  001898  A0D8               	btfss	status,0,c
 16131  00189A  D003               	goto	l6054
 16132                           
 16133                           ; BSR set to: 0
 16134                           
 16135                           ; BSR set to: 0
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;doprnt.c: 1307: break;
 16139  00189C  0100               	movlb	0	; () banked
 16140  00189E  2BA8               	incf	printf@c& (0+255),f,b
 16141  0018A0  D7E2               	goto	l6042
 16142  0018A2                     l6054:
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16146  0018A2  0100               	movlb	0	; () banked
 16147  0018A4  51A9               	movf	printf@width& (0+255),w,b
 16148  0018A6  0100               	movlb	0	; () banked
 16149  0018A8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16150  0018AA  B4D8               	btfsc	status,2,c
 16151  0018AC  D00B               	goto	l6060
 16152                           
 16153                           ; BSR set to: 0
 16154  0018AE  C0A7  F09A         	movff	printf@flag,??_printf
 16155  0018B2  0E03               	movlw	3
 16156  0018B4  0100               	movlb	0	; () banked
 16157  0018B6  179A               	andwf	??_printf& (0+255),f,b
 16158  0018B8  B4D8               	btfsc	status,2,c
 16159  0018BA  D004               	goto	l6060
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;doprnt.c: 1346: width--;
 16163  0018BC  0100               	movlb	0	; () banked
 16164  0018BE  07A9               	decf	printf@width& (0+255),f,b
 16165  0018C0  A0D8               	btfss	status,0,c
 16166  0018C2  07AA               	decf	(printf@width+1)& (0+255),f,b
 16167  0018C4                     l6060:
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;doprnt.c: 1381: if(width > c)
 16171  0018C4  0E80               	movlw	128
 16172  0018C6  0100               	movlb	0	; () banked
 16173  0018C8  BFA8               	btfsc	printf@c& (0+255),7,b
 16174  0018CA  0E7F               	movlw	127
 16175  0018CC  0100               	movlb	0	; () banked
 16176  0018CE  6F9A               	movwf	??_printf& (0+255),b
 16177  0018D0  0100               	movlb	0	; () banked
 16178  0018D2  51A9               	movf	printf@width& (0+255),w,b
 16179  0018D4  0100               	movlb	0	; () banked
 16180  0018D6  5DA8               	subwf	printf@c& (0+255),w,b
 16181  0018D8  0100               	movlb	0	; () banked
 16182  0018DA  51AA               	movf	(printf@width+1)& (0+255),w,b
 16183  0018DC  0A80               	xorlw	128
 16184  0018DE  0100               	movlb	0	; () banked
 16185  0018E0  599A               	subwfb	??_printf& (0+255),w,b
 16186  0018E2  B0D8               	btfsc	status,0,c
 16187  0018E4  D00B               	goto	l6064
 16188                           
 16189                           ; BSR set to: 0
 16190                           ;doprnt.c: 1382: width -= c;
 16191  0018E6  0100               	movlb	0	; () banked
 16192  0018E8  51A8               	movf	printf@c& (0+255),w,b
 16193  0018EA  0100               	movlb	0	; () banked
 16194  0018EC  5FA9               	subwf	printf@width& (0+255),f,b
 16195  0018EE  0E00               	movlw	0
 16196  0018F0  0100               	movlb	0	; () banked
 16197  0018F2  BFA8               	btfsc	printf@c& (0+255),7,b
 16198  0018F4  0EFF               	movlw	255
 16199  0018F6  0100               	movlb	0	; () banked
 16200  0018F8  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16201  0018FA  D005               	goto	l6066
 16202  0018FC                     l6064:
 16203                           
 16204                           ; BSR set to: 0
 16205                           ;doprnt.c: 1383: else
 16206                           ;doprnt.c: 1384: width = 0;
 16207  0018FC  0E00               	movlw	0
 16208  0018FE  0100               	movlb	0	; () banked
 16209  001900  6FAA               	movwf	(printf@width+1)& (0+255),b
 16210  001902  0E00               	movlw	0
 16211  001904  6FA9               	movwf	printf@width& (0+255),b
 16212  001906                     l6066:
 16213                           
 16214                           ; BSR set to: 0
 16215                           ;doprnt.c: 1387: if(flag & 0x04) {
 16216  001906  0100               	movlb	0	; () banked
 16217  001908  A5A7               	btfss	printf@flag& (0+255),2,b
 16218  00190A  D018               	goto	l6078
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;doprnt.c: 1392: if(flag & 0x03)
 16222  00190C  C0A7  F09A         	movff	printf@flag,??_printf
 16223  001910  0E03               	movlw	3
 16224  001912  0100               	movlb	0	; () banked
 16225  001914  179A               	andwf	??_printf& (0+255),f,b
 16226  001916  B4D8               	btfsc	status,2,c
 16227  001918  D003               	goto	l6072
 16228                           
 16229                           ; BSR set to: 0
 16230                           ;doprnt.c: 1393: (putch('-') );
 16231  00191A  0E2D               	movlw	45
 16232  00191C  EC75  F028         	call	_putch
 16233  001920                     l6072:
 16234                           
 16235                           ;doprnt.c: 1415: if(width)
 16236  001920  0100               	movlb	0	; () banked
 16237  001922  51A9               	movf	printf@width& (0+255),w,b
 16238  001924  0100               	movlb	0	; () banked
 16239  001926  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16240  001928  B4D8               	btfsc	status,2,c
 16241  00192A  D025               	goto	l6088
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;doprnt.c: 1417: (putch('0') );
 16245                           
 16246                           ; BSR set to: 0
 16247                           
 16248                           ;doprnt.c: 1416: do
 16249  00192C  0E30               	movlw	48
 16250  00192E  EC75  F028         	call	_putch
 16251                           
 16252                           ;doprnt.c: 1418: while(--width);
 16253  001932  0100               	movlb	0	; () banked
 16254  001934  07A9               	decf	printf@width& (0+255),f,b
 16255  001936  A0D8               	btfss	status,0,c
 16256  001938  07AA               	decf	(printf@width+1)& (0+255),f,b
 16257  00193A  D7F2               	goto	l6072
 16258  00193C                     l6078:
 16259                           
 16260                           ; BSR set to: 0
 16261                           ;doprnt.c: 1422: {
 16262                           ;doprnt.c: 1424: if(width
 16263                           ;doprnt.c: 1428: )
 16264  00193C  0100               	movlb	0	; () banked
 16265  00193E  51A9               	movf	printf@width& (0+255),w,b
 16266  001940  0100               	movlb	0	; () banked
 16267  001942  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16268  001944  B4D8               	btfsc	status,2,c
 16269  001946  D00D               	goto	l6084
 16270  001948                     l6080:
 16271                           
 16272                           ; BSR set to: 0
 16273                           ;doprnt.c: 1430: (putch(' ') );
 16274  001948  0E20               	movlw	32
 16275  00194A  EC75  F028         	call	_putch
 16276                           
 16277                           ;doprnt.c: 1431: while(--width);
 16278  00194E  0100               	movlb	0	; () banked
 16279  001950  07A9               	decf	printf@width& (0+255),f,b
 16280  001952  A0D8               	btfss	status,0,c
 16281  001954  07AA               	decf	(printf@width+1)& (0+255),f,b
 16282  001956  0100               	movlb	0	; () banked
 16283  001958  51A9               	movf	printf@width& (0+255),w,b
 16284  00195A  0100               	movlb	0	; () banked
 16285  00195C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16286  00195E  A4D8               	btfss	status,2,c
 16287  001960  D7F3               	goto	l6080
 16288  001962                     l6084:
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;doprnt.c: 1438: if(flag & 0x03)
 16292  001962  C0A7  F09A         	movff	printf@flag,??_printf
 16293  001966  0E03               	movlw	3
 16294  001968  0100               	movlb	0	; () banked
 16295  00196A  179A               	andwf	??_printf& (0+255),f,b
 16296  00196C  B4D8               	btfsc	status,2,c
 16297  00196E  D003               	goto	l6088
 16298                           
 16299                           ; BSR set to: 0
 16300                           ;doprnt.c: 1439: (putch('-') );
 16301  001970  0E2D               	movlw	45
 16302  001972  EC75  F028         	call	_putch
 16303  001976                     l6088:
 16304                           
 16305                           ;doprnt.c: 1469: }
 16306                           ;doprnt.c: 1472: prec = c;
 16307  001976  C0A8  F09E         	movff	printf@c,printf@prec
 16308                           
 16309                           ;doprnt.c: 1474: while(prec--) {
 16310  00197A  D02C               	goto	l6094
 16311  00197C                     l6090:
 16312                           
 16313                           ;doprnt.c: 1478: {
 16314                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16315  00197C  0100               	movlb	0	; () banked
 16316  00197E  519E               	movf	printf@prec& (0+255),w,b
 16317  001980  0D02               	mullw	2
 16318  001982  0E00               	movlw	low _dpowers
 16319  001984  24F3               	addwf	prodl,w,c
 16320  001986  6EF6               	movwf	tblptrl,c
 16321  001988  0EFB               	movlw	high _dpowers
 16322  00198A  20F4               	addwfc	prodh,w,c
 16323  00198C  6EF7               	movwf	tblptrh,c
 16324  00198E                     	if	1	;There are 3 active tblptr bytes
 16325  00198E  6AF8               	clrf	tblptru,c
 16326  001990  0E00               	movlw	low (__mediumconst shr (0+16))
 16327  001992  22F8               	addwfc	tblptru,f,c
 16328  001994                     	endif
 16329  001994  0009               	tblrd		*+
 16330  001996  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16331  00199A  000A               	tblrd		*-
 16332  00199C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16333  0019A0  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16334  0019A4  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16335  0019A8  EC8F  F022         	call	___lwdiv	;wreg free
 16336  0019AC  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16337  0019B0  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16338  0019B4  0E00               	movlw	0
 16339  0019B6  0100               	movlb	0	; () banked
 16340  0019B8  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16341  0019BA  0E0A               	movlw	10
 16342  0019BC  6F89               	movwf	___lwmod@divisor& (0+255),b
 16343  0019BE  ECAC  F023         	call	___lwmod	;wreg free
 16344  0019C2  0100               	movlb	0	; () banked
 16345  0019C4  5187               	movf	?___lwmod& (0+255),w,b
 16346  0019C6  0F30               	addlw	48
 16347  0019C8  0100               	movlb	0	; () banked
 16348  0019CA  6FA8               	movwf	printf@c& (0+255),b
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;doprnt.c: 1523: }
 16352                           ;doprnt.c: 1524: (putch(c) );
 16353  0019CC  0100               	movlb	0	; () banked
 16354  0019CE  51A8               	movf	printf@c& (0+255),w,b
 16355  0019D0  EC75  F028         	call	_putch
 16356  0019D4                     l6094:
 16357  0019D4  0100               	movlb	0	; () banked
 16358  0019D6  079E               	decf	printf@prec& (0+255),f,b
 16359  0019D8  0100               	movlb	0	; () banked
 16360  0019DA  299E               	incf	printf@prec& (0+255),w,b
 16361  0019DC  A4D8               	btfss	status,2,c
 16362  0019DE  D7CE               	goto	l6090
 16363  0019E0                     l6096:
 16364  0019E0  C08E  FFF6         	movff	printf@f,tblptrl
 16365  0019E4  C08F  FFF7         	movff	printf@f+1,tblptrh
 16366  0019E8  0100               	movlb	0	; () banked
 16367  0019EA  4B8E               	infsnz	printf@f& (0+255),f,b
 16368  0019EC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16369  0019EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16370  0019EE  6AF8               	clrf	tblptru,c
 16371  0019F0                     	endif
 16372  0019F0                     	if	0	;tblptru may be non-zero
 16373  0019F0                     	endif
 16374  0019F0  0008               	tblrd		*
 16375  0019F2  CFF5 F0A8          	movff	tablat,printf@c
 16376  0019F6  0100               	movlb	0	; () banked
 16377  0019F8  51A8               	movf	printf@c& (0+255),w,b
 16378  0019FA  B4D8               	btfsc	status,2,c
 16379  0019FC  0012               	return	
 16380  0019FE  D5EB               	goto	l5966
 16381  001A00                     __end_of_printf:
 16382                           	opt stack 0
 16383                           tblptru	equ	0xFF8
 16384                           tblptrh	equ	0xFF7
 16385                           tblptrl	equ	0xFF6
 16386                           tablat	equ	0xFF5
 16387                           prodh	equ	0xFF4
 16388                           prodl	equ	0xFF3
 16389                           intcon	equ	0xFF2
 16390                           intcon2	equ	0xFF1
 16391                           intcon3	equ	0xFF0
 16392                           indf0	equ	0xFEF
 16393                           postinc0	equ	0xFEE
 16394                           fsr0h	equ	0xFEA
 16395                           fsr0l	equ	0xFE9
 16396                           wreg	equ	0xFE8
 16397                           postdec1	equ	0xFE5
 16398                           fsr1l	equ	0xFE1
 16399                           indf2	equ	0xFDF
 16400                           postinc2	equ	0xFDE
 16401                           postdec2	equ	0xFDD
 16402                           fsr2h	equ	0xFDA
 16403                           fsr2l	equ	0xFD9
 16404                           status	equ	0xFD8
 16405                           
 16406 ;; *************** function _putch *****************
 16407 ;; Defined at:
 16408 ;;		line 20 in file "lcd.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  data            1    wreg     unsigned char 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  data            1    2[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;Total ram usage:        1 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    8
 16429 ;; This function calls:
 16430 ;;		_lcdNibble
 16431 ;; This function is called by:
 16432 ;;		_printf
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           	psect	text52
 16437  0050EA                     __ptext52:
 16438                           	opt stack 0
 16439  0050EA                     _putch:
 16440                           	opt stack 18
 16441                           
 16442                           ;incstack = 0
 16443                           ;putch@data stored from wreg
 16444  0050EA  0100               	movlb	0	; () banked
 16445  0050EC  6F82               	movwf	putch@data& (0+255),b
 16446                           
 16447                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16448  0050EE  848C               	bsf	3980,2,c	;volatile
 16449                           
 16450                           ;lcd.c: 22: lcdNibble(data);
 16451  0050F0  0100               	movlb	0	; () banked
 16452  0050F2  5182               	movf	putch@data& (0+255),w,b
 16453  0050F4  EC78  F023         	call	_lcdNibble
 16454  0050F8  0012               	return		;funcret
 16455  0050FA                     __end_of_putch:
 16456                           	opt stack 0
 16457                           tblptru	equ	0xFF8
 16458                           tblptrh	equ	0xFF7
 16459                           tblptrl	equ	0xFF6
 16460                           tablat	equ	0xFF5
 16461                           prodh	equ	0xFF4
 16462                           prodl	equ	0xFF3
 16463                           intcon	equ	0xFF2
 16464                           intcon2	equ	0xFF1
 16465                           intcon3	equ	0xFF0
 16466                           indf0	equ	0xFEF
 16467                           postinc0	equ	0xFEE
 16468                           fsr0h	equ	0xFEA
 16469                           fsr0l	equ	0xFE9
 16470                           wreg	equ	0xFE8
 16471                           postdec1	equ	0xFE5
 16472                           fsr1l	equ	0xFE1
 16473                           indf2	equ	0xFDF
 16474                           postinc2	equ	0xFDE
 16475                           postdec2	equ	0xFDD
 16476                           fsr2h	equ	0xFDA
 16477                           fsr2l	equ	0xFD9
 16478                           status	equ	0xFD8
 16479                           
 16480 ;; *************** function _isdigit *****************
 16481 ;; Defined at:
 16482 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  c               1    wreg     unsigned char 
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  c               1    2[BANK0 ] unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;		None               void
 16489 ;; Registers used:
 16490 ;;		wreg, status,2, status,0
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;Total ram usage:        3 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    7
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_printf
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text53
 16511  004F14                     __ptext53:
 16512                           	opt stack 0
 16513  004F14                     _isdigit:
 16514                           	opt stack 19
 16515                           
 16516                           ;incstack = 0
 16517                           ;isdigit@c stored from wreg
 16518  004F14  0100               	movlb	0	; () banked
 16519  004F16  6F82               	movwf	isdigit@c& (0+255),b
 16520  004F18  0E00               	movlw	0
 16521  004F1A  0100               	movlb	0	; () banked
 16522  004F1C  6F81               	movwf	_isdigit$1978& (0+255),b
 16523                           
 16524                           ; BSR set to: 0
 16525  004F1E  0E3A               	movlw	58
 16526  004F20  0100               	movlb	0	; () banked
 16527  004F22  6182               	cpfslt	isdigit@c& (0+255),b
 16528  004F24  D007               	goto	l5814
 16529                           
 16530                           ; BSR set to: 0
 16531  004F26  0E2F               	movlw	47
 16532  004F28  0100               	movlb	0	; () banked
 16533  004F2A  6582               	cpfsgt	isdigit@c& (0+255),b
 16534  004F2C  D003               	goto	l5814
 16535                           
 16536                           ; BSR set to: 0
 16537  004F2E  0E01               	movlw	1
 16538  004F30  0100               	movlb	0	; () banked
 16539  004F32  6F81               	movwf	_isdigit$1978& (0+255),b
 16540  004F34                     l5814:
 16541                           
 16542                           ; BSR set to: 0
 16543  004F34  C081  F080         	movff	_isdigit$1978,??_isdigit
 16544  004F38  0100               	movlb	0	; () banked
 16545  004F3A  3180               	rrcf	??_isdigit& (0+255),w,b
 16546  004F3C  0012               	return	
 16547  004F3E                     __end_of_isdigit:
 16548                           	opt stack 0
 16549                           tblptru	equ	0xFF8
 16550                           tblptrh	equ	0xFF7
 16551                           tblptrl	equ	0xFF6
 16552                           tablat	equ	0xFF5
 16553                           prodh	equ	0xFF4
 16554                           prodl	equ	0xFF3
 16555                           intcon	equ	0xFF2
 16556                           intcon2	equ	0xFF1
 16557                           intcon3	equ	0xFF0
 16558                           indf0	equ	0xFEF
 16559                           postinc0	equ	0xFEE
 16560                           fsr0h	equ	0xFEA
 16561                           fsr0l	equ	0xFE9
 16562                           wreg	equ	0xFE8
 16563                           postdec1	equ	0xFE5
 16564                           fsr1l	equ	0xFE1
 16565                           indf2	equ	0xFDF
 16566                           postinc2	equ	0xFDE
 16567                           postdec2	equ	0xFDD
 16568                           fsr2h	equ	0xFDA
 16569                           fsr2l	equ	0xFD9
 16570                           status	equ	0xFD8
 16571                           
 16572 ;; *************** function ___wmul *****************
 16573 ;; Defined at:
 16574 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16577 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;  product         2    4[BANK0 ] unsigned int 
 16580 ;; Return value:  Size  Location     Type
 16581 ;;                  2    0[BANK0 ] unsigned int 
 16582 ;; Registers used:
 16583 ;;		wreg, status,2, status,0, prodl, prodh
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16589 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16592 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16593 ;;Total ram usage:        6 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    7
 16596 ;; This function calls:
 16597 ;;		Nothing
 16598 ;; This function is called by:
 16599 ;;		_printf
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           	psect	text54
 16604  004BE8                     __ptext54:
 16605                           	opt stack 0
 16606  004BE8                     ___wmul:
 16607                           	opt stack 19
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;incstack = 0
 16611  004BE8  0100               	movlb	0	; () banked
 16612  004BEA  5180               	movf	___wmul@multiplier& (0+255),w,b
 16613  004BEC  0100               	movlb	0	; () banked
 16614  004BEE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16615  004BF0  CFF3 F084          	movff	prodl,___wmul@product
 16616  004BF4  CFF4 F085          	movff	prodh,___wmul@product+1
 16617  004BF8  0100               	movlb	0	; () banked
 16618  004BFA  5180               	movf	___wmul@multiplier& (0+255),w,b
 16619  004BFC  0100               	movlb	0	; () banked
 16620  004BFE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16621  004C00  50F3               	movf	prodl,w,c
 16622  004C02  0100               	movlb	0	; () banked
 16623  004C04  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16624  004C06  0100               	movlb	0	; () banked
 16625  004C08  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16626  004C0A  0100               	movlb	0	; () banked
 16627  004C0C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16628  004C0E  50F3               	movf	prodl,w,c
 16629  004C10  0100               	movlb	0	; () banked
 16630  004C12  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16631                           
 16632                           ; BSR set to: 0
 16633  004C14  C084  F080         	movff	___wmul@product,?___wmul
 16634  004C18  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16635  004C1C  0012               	return	
 16636  004C1E                     __end_of___wmul:
 16637                           	opt stack 0
 16638                           tblptru	equ	0xFF8
 16639                           tblptrh	equ	0xFF7
 16640                           tblptrl	equ	0xFF6
 16641                           tablat	equ	0xFF5
 16642                           prodh	equ	0xFF4
 16643                           prodl	equ	0xFF3
 16644                           intcon	equ	0xFF2
 16645                           intcon2	equ	0xFF1
 16646                           intcon3	equ	0xFF0
 16647                           indf0	equ	0xFEF
 16648                           postinc0	equ	0xFEE
 16649                           fsr0h	equ	0xFEA
 16650                           fsr0l	equ	0xFE9
 16651                           wreg	equ	0xFE8
 16652                           postdec1	equ	0xFE5
 16653                           fsr1l	equ	0xFE1
 16654                           indf2	equ	0xFDF
 16655                           postinc2	equ	0xFDE
 16656                           postdec2	equ	0xFDD
 16657                           fsr2h	equ	0xFDA
 16658                           fsr2l	equ	0xFD9
 16659                           status	equ	0xFD8
 16660                           
 16661 ;; *************** function ___lwmod *****************
 16662 ;; Defined at:
 16663 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;  dividend        2    7[BANK0 ] unsigned int 
 16666 ;;  divisor         2    9[BANK0 ] unsigned int 
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;  counter         1   11[BANK0 ] unsigned char 
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  2    7[BANK0 ] unsigned int 
 16671 ;; Registers used:
 16672 ;;		wreg, status,2, status,0
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16681 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16682 ;;Total ram usage:        5 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    7
 16685 ;; This function calls:
 16686 ;;		Nothing
 16687 ;; This function is called by:
 16688 ;;		_printf
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           	psect	text55
 16693  004758                     __ptext55:
 16694                           	opt stack 0
 16695  004758                     ___lwmod:
 16696                           	opt stack 19
 16697                           
 16698                           ; BSR set to: 0
 16699                           ;incstack = 0
 16700  004758  0100               	movlb	0	; () banked
 16701  00475A  5189               	movf	___lwmod@divisor& (0+255),w,b
 16702  00475C  0100               	movlb	0	; () banked
 16703  00475E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16704  004760  B4D8               	btfsc	status,2,c
 16705  004762  D026               	goto	l1825
 16706                           
 16707                           ; BSR set to: 0
 16708  004764  0E01               	movlw	1
 16709  004766  0100               	movlb	0	; () banked
 16710  004768  6F8B               	movwf	___lwmod@counter& (0+255),b
 16711  00476A  D006               	goto	l5852
 16712  00476C                     l5850:
 16713                           
 16714                           ; BSR set to: 0
 16715  00476C  0100               	movlb	0	; () banked
 16716  00476E  90D8               	bcf	status,0,c
 16717  004770  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16718  004772  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16719  004774  0100               	movlb	0	; () banked
 16720  004776  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16721  004778                     l5852:
 16722                           
 16723                           ; BSR set to: 0
 16724  004778  0100               	movlb	0	; () banked
 16725  00477A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16726  00477C  D7F7               	goto	l5850
 16727  00477E                     l5854:
 16728                           
 16729                           ; BSR set to: 0
 16730  00477E  0100               	movlb	0	; () banked
 16731  004780  5189               	movf	___lwmod@divisor& (0+255),w,b
 16732  004782  0100               	movlb	0	; () banked
 16733  004784  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16734  004786  0100               	movlb	0	; () banked
 16735  004788  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16736  00478A  0100               	movlb	0	; () banked
 16737  00478C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16738  00478E  A0D8               	btfss	status,0,c
 16739  004790  D008               	goto	l5858
 16740                           
 16741                           ; BSR set to: 0
 16742  004792  0100               	movlb	0	; () banked
 16743  004794  5189               	movf	___lwmod@divisor& (0+255),w,b
 16744  004796  0100               	movlb	0	; () banked
 16745  004798  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16746  00479A  0100               	movlb	0	; () banked
 16747  00479C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16748  00479E  0100               	movlb	0	; () banked
 16749  0047A0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16750  0047A2                     l5858:
 16751                           
 16752                           ; BSR set to: 0
 16753  0047A2  0100               	movlb	0	; () banked
 16754  0047A4  90D8               	bcf	status,0,c
 16755  0047A6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16756  0047A8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16757                           
 16758                           ; BSR set to: 0
 16759  0047AA  0100               	movlb	0	; () banked
 16760  0047AC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16761  0047AE  D7E7               	goto	l5854
 16762  0047B0                     l1825:
 16763                           
 16764                           ; BSR set to: 0
 16765  0047B0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16766  0047B4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16767                           
 16768                           ; BSR set to: 0
 16769  0047B8  0012               	return		;funcret
 16770  0047BA                     __end_of___lwmod:
 16771                           	opt stack 0
 16772                           tblptru	equ	0xFF8
 16773                           tblptrh	equ	0xFF7
 16774                           tblptrl	equ	0xFF6
 16775                           tablat	equ	0xFF5
 16776                           prodh	equ	0xFF4
 16777                           prodl	equ	0xFF3
 16778                           intcon	equ	0xFF2
 16779                           intcon2	equ	0xFF1
 16780                           intcon3	equ	0xFF0
 16781                           indf0	equ	0xFEF
 16782                           postinc0	equ	0xFEE
 16783                           fsr0h	equ	0xFEA
 16784                           fsr0l	equ	0xFE9
 16785                           wreg	equ	0xFE8
 16786                           postdec1	equ	0xFE5
 16787                           fsr1l	equ	0xFE1
 16788                           indf2	equ	0xFDF
 16789                           postinc2	equ	0xFDE
 16790                           postdec2	equ	0xFDD
 16791                           fsr2h	equ	0xFDA
 16792                           fsr2l	equ	0xFD9
 16793                           status	equ	0xFD8
 16794                           
 16795 ;; *************** function ___lwdiv *****************
 16796 ;; Defined at:
 16797 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  dividend        2    0[BANK0 ] unsigned int 
 16800 ;;  divisor         2    2[BANK0 ] unsigned int 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  quotient        2    4[BANK0 ] unsigned int 
 16803 ;;  counter         1    6[BANK0 ] unsigned char 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  2    0[BANK0 ] unsigned int 
 16806 ;; Registers used:
 16807 ;;		wreg, status,2, status,0
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16813 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16816 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;Total ram usage:        7 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    7
 16820 ;; This function calls:
 16821 ;;		Nothing
 16822 ;; This function is called by:
 16823 ;;		_printf
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text56
 16828  00451E                     __ptext56:
 16829                           	opt stack 0
 16830  00451E                     ___lwdiv:
 16831                           	opt stack 19
 16832                           
 16833                           ; BSR set to: 0
 16834                           ;incstack = 0
 16835  00451E  0E00               	movlw	0
 16836  004520  0100               	movlb	0	; () banked
 16837  004522  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16838  004524  0E00               	movlw	0
 16839  004526  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16840                           
 16841                           ; BSR set to: 0
 16842  004528  0100               	movlb	0	; () banked
 16843  00452A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16844  00452C  0100               	movlb	0	; () banked
 16845  00452E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16846  004530  B4D8               	btfsc	status,2,c
 16847  004532  D02C               	goto	l1815
 16848                           
 16849                           ; BSR set to: 0
 16850  004534  0E01               	movlw	1
 16851  004536  0100               	movlb	0	; () banked
 16852  004538  6F86               	movwf	___lwdiv@counter& (0+255),b
 16853  00453A  D006               	goto	l5832
 16854  00453C                     l5830:
 16855                           
 16856                           ; BSR set to: 0
 16857  00453C  0100               	movlb	0	; () banked
 16858  00453E  90D8               	bcf	status,0,c
 16859  004540  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16860  004542  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16861  004544  0100               	movlb	0	; () banked
 16862  004546  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16863  004548                     l5832:
 16864                           
 16865                           ; BSR set to: 0
 16866  004548  0100               	movlb	0	; () banked
 16867  00454A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16868  00454C  D7F7               	goto	l5830
 16869  00454E                     l5834:
 16870                           
 16871                           ; BSR set to: 0
 16872  00454E  0100               	movlb	0	; () banked
 16873  004550  90D8               	bcf	status,0,c
 16874  004552  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16875  004554  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16876                           
 16877                           ; BSR set to: 0
 16878  004556  0100               	movlb	0	; () banked
 16879  004558  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16880  00455A  0100               	movlb	0	; () banked
 16881  00455C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16882  00455E  0100               	movlb	0	; () banked
 16883  004560  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16884  004562  0100               	movlb	0	; () banked
 16885  004564  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16886  004566  A0D8               	btfss	status,0,c
 16887  004568  D00A               	goto	l5842
 16888                           
 16889                           ; BSR set to: 0
 16890  00456A  0100               	movlb	0	; () banked
 16891  00456C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16892  00456E  0100               	movlb	0	; () banked
 16893  004570  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16894  004572  0100               	movlb	0	; () banked
 16895  004574  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16896  004576  0100               	movlb	0	; () banked
 16897  004578  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16898                           
 16899                           ; BSR set to: 0
 16900  00457A  0100               	movlb	0	; () banked
 16901  00457C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16902  00457E                     l5842:
 16903                           
 16904                           ; BSR set to: 0
 16905  00457E  0100               	movlb	0	; () banked
 16906  004580  90D8               	bcf	status,0,c
 16907  004582  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16908  004584  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16909                           
 16910                           ; BSR set to: 0
 16911  004586  0100               	movlb	0	; () banked
 16912  004588  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16913  00458A  D7E1               	goto	l5834
 16914  00458C                     l1815:
 16915                           
 16916                           ; BSR set to: 0
 16917  00458C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16918  004590  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16919                           
 16920                           ; BSR set to: 0
 16921  004594  0012               	return		;funcret
 16922  004596                     __end_of___lwdiv:
 16923                           	opt stack 0
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon2	equ	0xFF1
 16932                           intcon3	equ	0xFF0
 16933                           indf0	equ	0xFEF
 16934                           postinc0	equ	0xFEE
 16935                           fsr0h	equ	0xFEA
 16936                           fsr0l	equ	0xFE9
 16937                           wreg	equ	0xFE8
 16938                           postdec1	equ	0xFE5
 16939                           fsr1l	equ	0xFE1
 16940                           indf2	equ	0xFDF
 16941                           postinc2	equ	0xFDE
 16942                           postdec2	equ	0xFDD
 16943                           fsr2h	equ	0xFDA
 16944                           fsr2l	equ	0xFD9
 16945                           status	equ	0xFD8
 16946                           
 16947 ;; *************** function _lcdInst *****************
 16948 ;; Defined at:
 16949 ;;		line 15 in file "lcd.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;  data            1    wreg     unsigned char 
 16952 ;; Auto vars:     Size  Location     Type
 16953 ;;  data            1    2[BANK0 ] unsigned char 
 16954 ;; Return value:  Size  Location     Type
 16955 ;;                  1    wreg      void 
 16956 ;; Registers used:
 16957 ;;		wreg, status,2, status,0, cstack
 16958 ;; Tracked objects:
 16959 ;;		On entry : 0/0
 16960 ;;		On exit  : 0/0
 16961 ;;		Unchanged: 0/0
 16962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;Total ram usage:        1 bytes
 16968 ;; Hardware stack levels used:    1
 16969 ;; Hardware stack levels required when called:    8
 16970 ;; This function calls:
 16971 ;;		_lcdNibble
 16972 ;; This function is called by:
 16973 ;;		_UI
 16974 ;;		_change_state_to_menu_start
 16975 ;;		_change_state_to_menu_12
 16976 ;;		_change_state_to_menu_22
 16977 ;;		_initLCD
 16978 ;;		_printRTC
 16979 ;;		_Loading
 16980 ;;		_EEPROM_write
 16981 ;;		_Test
 16982 ;;		_algorithmTest
 16983 ;;		_sensorTest
 16984 ;;		_actuatorTest
 16985 ;;		_BothServos
 16986 ;;		_PortTestA5
 16987 ;;		_PusherTest
 16988 ;;		_SpeedTest
 16989 ;;		_BlockerTest
 16990 ;;		_ToggleTestA5
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text57
 16995  0050FA                     __ptext57:
 16996                           	opt stack 0
 16997  0050FA                     _lcdInst:
 16998                           	opt stack 20
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;incstack = 0
 17002                           ;lcdInst@data stored from wreg
 17003  0050FA  0100               	movlb	0	; () banked
 17004  0050FC  6F82               	movwf	lcdInst@data& (0+255),b
 17005                           
 17006                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17007  0050FE  948C               	bcf	3980,2,c	;volatile
 17008                           
 17009                           ;lcd.c: 17: lcdNibble(data);
 17010  005100  0100               	movlb	0	; () banked
 17011  005102  5182               	movf	lcdInst@data& (0+255),w,b
 17012  005104  EC78  F023         	call	_lcdNibble
 17013  005108  0012               	return		;funcret
 17014  00510A                     __end_of_lcdInst:
 17015                           	opt stack 0
 17016                           tblptru	equ	0xFF8
 17017                           tblptrh	equ	0xFF7
 17018                           tblptrl	equ	0xFF6
 17019                           tablat	equ	0xFF5
 17020                           prodh	equ	0xFF4
 17021                           prodl	equ	0xFF3
 17022                           intcon	equ	0xFF2
 17023                           intcon2	equ	0xFF1
 17024                           intcon3	equ	0xFF0
 17025                           indf0	equ	0xFEF
 17026                           postinc0	equ	0xFEE
 17027                           fsr0h	equ	0xFEA
 17028                           fsr0l	equ	0xFE9
 17029                           wreg	equ	0xFE8
 17030                           postdec1	equ	0xFE5
 17031                           fsr1l	equ	0xFE1
 17032                           indf2	equ	0xFDF
 17033                           postinc2	equ	0xFDE
 17034                           postdec2	equ	0xFDD
 17035                           fsr2h	equ	0xFDA
 17036                           fsr2l	equ	0xFD9
 17037                           status	equ	0xFD8
 17038                           
 17039 ;; *************** function _lcdNibble *****************
 17040 ;; Defined at:
 17041 ;;		line 25 in file "lcd.c"
 17042 ;; Parameters:    Size  Location     Type
 17043 ;;  data            1    wreg     unsigned char 
 17044 ;; Auto vars:     Size  Location     Type
 17045 ;;  data            1    1[BANK0 ] unsigned char 
 17046 ;;  temp            1    0[BANK0 ] unsigned char 
 17047 ;; Return value:  Size  Location     Type
 17048 ;;                  1    wreg      void 
 17049 ;; Registers used:
 17050 ;;		wreg, status,2, status,0
 17051 ;; Tracked objects:
 17052 ;;		On entry : 0/0
 17053 ;;		On exit  : 0/0
 17054 ;;		Unchanged: 0/0
 17055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17060 ;;Total ram usage:        2 bytes
 17061 ;; Hardware stack levels used:    1
 17062 ;; Hardware stack levels required when called:    7
 17063 ;; This function calls:
 17064 ;;		Nothing
 17065 ;; This function is called by:
 17066 ;;		_lcdInst
 17067 ;;		_putch
 17068 ;; This function uses a non-reentrant model
 17069 ;;
 17070                           
 17071                           	psect	text58
 17072  0046F0                     __ptext58:
 17073                           	opt stack 0
 17074  0046F0                     _lcdNibble:
 17075                           	opt stack 20
 17076                           
 17077                           ;incstack = 0
 17078                           ;lcdNibble@data stored from wreg
 17079  0046F0  0100               	movlb	0	; () banked
 17080  0046F2  6F81               	movwf	lcdNibble@data& (0+255),b
 17081                           
 17082                           ;lcd.c: 27: char temp = data & 0xF0;
 17083  0046F4  0100               	movlb	0	; () banked
 17084  0046F6  5181               	movf	lcdNibble@data& (0+255),w,b
 17085  0046F8  0BF0               	andlw	240
 17086  0046FA  0100               	movlb	0	; () banked
 17087  0046FC  6F80               	movwf	lcdNibble@temp& (0+255),b
 17088                           
 17089                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17090  0046FE  508C               	movf	3980,w,c	;volatile
 17091  004700  0B0F               	andlw	15
 17092  004702  6E8C               	movwf	3980,c	;volatile
 17093                           
 17094                           ;lcd.c: 29: LATD = temp | LATD;
 17095  004704  0100               	movlb	0	; () banked
 17096  004706  5180               	movf	lcdNibble@temp& (0+255),w,b
 17097  004708  108C               	iorwf	3980,w,c	;volatile
 17098  00470A  6E8C               	movwf	3980,c	;volatile
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17102  00470C  868C               	bsf	3980,3,c	;volatile
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17106  00470E  0E42               	movlw	66
 17107  004710                     u9907:
 17108  004710  2EE8               	decfsz	wreg,f,c
 17109  004712  D7FE               	bra	u9907
 17110  004714  D000               	nop2	
 17111                           
 17112                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17113  004716  968C               	bcf	3980,3,c	;volatile
 17114                           
 17115                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17116  004718  0E42               	movlw	66
 17117  00471A                     u9917:
 17118  00471A  2EE8               	decfsz	wreg,f,c
 17119  00471C  D7FE               	bra	u9917
 17120  00471E  D000               	nop2	
 17121                           
 17122                           ;lcd.c: 36: data = data << 4;
 17123  004720  0100               	movlb	0	; () banked
 17124  004722  3981               	swapf	lcdNibble@data& (0+255),w,b
 17125  004724  0BF0               	andlw	240
 17126  004726  0100               	movlb	0	; () banked
 17127  004728  6F81               	movwf	lcdNibble@data& (0+255),b
 17128                           
 17129                           ;lcd.c: 38: temp = data & 0xF0;
 17130  00472A  0100               	movlb	0	; () banked
 17131  00472C  5181               	movf	lcdNibble@data& (0+255),w,b
 17132  00472E  0BF0               	andlw	240
 17133  004730  0100               	movlb	0	; () banked
 17134  004732  6F80               	movwf	lcdNibble@temp& (0+255),b
 17135                           
 17136                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17137  004734  508C               	movf	3980,w,c	;volatile
 17138  004736  0B0F               	andlw	15
 17139  004738  6E8C               	movwf	3980,c	;volatile
 17140                           
 17141                           ;lcd.c: 40: LATD = temp | LATD;
 17142  00473A  0100               	movlb	0	; () banked
 17143  00473C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17144  00473E  108C               	iorwf	3980,w,c	;volatile
 17145  004740  6E8C               	movwf	3980,c	;volatile
 17146                           
 17147                           ; BSR set to: 0
 17148                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17149  004742  868C               	bsf	3980,3,c	;volatile
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17153  004744  0E42               	movlw	66
 17154  004746                     u9927:
 17155  004746  2EE8               	decfsz	wreg,f,c
 17156  004748  D7FE               	bra	u9927
 17157  00474A  D000               	nop2	
 17158                           
 17159                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17160  00474C  968C               	bcf	3980,3,c	;volatile
 17161                           
 17162                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17163  00474E  0E42               	movlw	66
 17164  004750                     u9937:
 17165  004750  2EE8               	decfsz	wreg,f,c
 17166  004752  D7FE               	bra	u9937
 17167  004754  D000               	nop2	
 17168  004756  0012               	return		;funcret
 17169  004758                     __end_of_lcdNibble:
 17170                           	opt stack 0
 17171                           tblptru	equ	0xFF8
 17172                           tblptrh	equ	0xFF7
 17173                           tblptrl	equ	0xFF6
 17174                           tablat	equ	0xFF5
 17175                           prodh	equ	0xFF4
 17176                           prodl	equ	0xFF3
 17177                           intcon	equ	0xFF2
 17178                           intcon2	equ	0xFF1
 17179                           intcon3	equ	0xFF0
 17180                           indf0	equ	0xFEF
 17181                           postinc0	equ	0xFEE
 17182                           fsr0h	equ	0xFEA
 17183                           fsr0l	equ	0xFE9
 17184                           wreg	equ	0xFE8
 17185                           postdec1	equ	0xFE5
 17186                           fsr1l	equ	0xFE1
 17187                           indf2	equ	0xFDF
 17188                           postinc2	equ	0xFDE
 17189                           postdec2	equ	0xFDD
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _handler *****************
 17195 ;; Defined at:
 17196 ;;		line 16 in file "interruptHandler.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;		None
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;		None
 17201 ;; Return value:  Size  Location     Type
 17202 ;;                  1    wreg      void 
 17203 ;; Registers used:
 17204 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17205 ;; Tracked objects:
 17206 ;;		On entry : 0/0
 17207 ;;		On exit  : 0/0
 17208 ;;		Unchanged: 0/0
 17209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;Total ram usage:       16 bytes
 17215 ;; Hardware stack levels used:    1
 17216 ;; Hardware stack levels required when called:    6
 17217 ;; This function calls:
 17218 ;;		_printSortTimer
 17219 ;;		_updateMenu
 17220 ;; This function is called by:
 17221 ;;		Interrupt level 2
 17222 ;; This function uses a non-reentrant model
 17223 ;;
 17224                           
 17225                           	psect	intcode
 17226  000008                     __pintcode:
 17227                           	opt stack 0
 17228  000008                     _handler:
 17229                           	opt stack 18
 17230                           
 17231                           ;incstack = 0
 17232  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17233  00000A  ED23  F01C         	call	int_func,f	;refresh shadow registers
 17234                           tblptru	equ	0xFF8
 17235                           tblptrh	equ	0xFF7
 17236                           tblptrl	equ	0xFF6
 17237                           tablat	equ	0xFF5
 17238                           prodh	equ	0xFF4
 17239                           prodl	equ	0xFF3
 17240                           intcon	equ	0xFF2
 17241                           intcon2	equ	0xFF1
 17242                           intcon3	equ	0xFF0
 17243                           indf0	equ	0xFEF
 17244                           postinc0	equ	0xFEE
 17245                           fsr0h	equ	0xFEA
 17246                           fsr0l	equ	0xFE9
 17247                           wreg	equ	0xFE8
 17248                           postdec1	equ	0xFE5
 17249                           fsr1l	equ	0xFE1
 17250                           indf2	equ	0xFDF
 17251                           postinc2	equ	0xFDE
 17252                           postdec2	equ	0xFDD
 17253                           fsr2h	equ	0xFDA
 17254                           fsr2l	equ	0xFD9
 17255                           status	equ	0xFD8
 17256                           
 17257                           	psect	intcode_body
 17258  003846                     __pintcode_body:
 17259                           	opt stack 18
 17260  003846                     int_func:
 17261                           	opt stack 18
 17262  003846  0006               	pop		; remove dummy address from shadow register refresh
 17263  003848  CFFA F04D          	movff	pclath,??_handler+2
 17264  00384C  CFFB F04E          	movff	pclatu,??_handler+3
 17265  003850  CFE9 F04F          	movff	fsr0l,??_handler+4
 17266  003854  CFEA F050          	movff	fsr0h,??_handler+5
 17267  003858  CFE1 F051          	movff	fsr1l,??_handler+6
 17268  00385C  CFE2 F052          	movff	fsr1h,??_handler+7
 17269  003860  CFD9 F053          	movff	fsr2l,??_handler+8
 17270  003864  CFDA F054          	movff	fsr2h,??_handler+9
 17271  003868  CFF3 F055          	movff	prodl,??_handler+10
 17272  00386C  CFF4 F056          	movff	prodh,??_handler+11
 17273  003870  CFF6 F057          	movff	tblptrl,??_handler+12
 17274  003874  CFF7 F058          	movff	tblptrh,??_handler+13
 17275  003878  CFF8 F059          	movff	tblptru,??_handler+14
 17276  00387C  CFF5 F05A          	movff	tablat,??_handler+15
 17277                           
 17278                           ;interruptHandler.c: 18: if(INT1IF){
 17279  003880  A0F0               	btfss	intcon3,0,c	;volatile
 17280  003882  D02B               	goto	i2l9026
 17281                           
 17282                           ;interruptHandler.c: 19: INT1IF = 0;
 17283  003884  90F0               	bcf	intcon3,0,c	;volatile
 17284                           
 17285                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17286  003886  0100               	movlb	0	; () banked
 17287  003888  51FC               	movf	_machine_state& (0+255),w,b
 17288  00388A  A4D8               	btfss	status,2,c
 17289  00388C  D01B               	goto	i2l9020
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17293  00388E  3881               	swapf	3969,w,c	;volatile
 17294  003890  0B0F               	andlw	15
 17295  003892  0B0F               	andlw	15
 17296  003894  6E4B               	movwf	??_handler& (0+255),c
 17297  003896  6A4C               	clrf	(??_handler+1)& (0+255),c
 17298  003898  0EEF               	movlw	low _keys
 17299  00389A  244B               	addwf	??_handler,w,c
 17300  00389C  6EF6               	movwf	tblptrl,c
 17301  00389E  0EFA               	movlw	high _keys
 17302  0038A0  204C               	addwfc	??_handler+1,w,c
 17303  0038A2  6EF7               	movwf	tblptrh,c
 17304  0038A4                     	if	1	;There are 3 active tblptr bytes
 17305  0038A4  6AF8               	clrf	tblptru,c
 17306  0038A6  0E00               	movlw	low (__mediumconst shr (0+16))
 17307  0038A8  22F8               	addwfc	tblptru,f,c
 17308  0038AA                     	endif
 17309  0038AA  0008               	tblrd		*
 17310  0038AC  CFF5 F07D          	movff	tablat,_input	;volatile
 17311                           
 17312                           ; BSR set to: 0
 17313                           ;interruptHandler.c: 23: if(input == '*'){
 17314  0038B0  0E2A               	movlw	42
 17315  0038B2  187D               	xorwf	_input,w,c	;volatile
 17316  0038B4  A4D8               	btfss	status,2,c
 17317  0038B6  D004               	goto	i2l9018
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17321  0038B8  0E03               	movlw	3
 17322  0038BA  0100               	movlb	0	; () banked
 17323  0038BC  6FFC               	movwf	_machine_state& (0+255),b
 17324                           
 17325                           ;interruptHandler.c: 25: }
 17326  0038BE  D002               	goto	i2l9020
 17327  0038C0                     i2l9018:
 17328                           
 17329                           ; BSR set to: 0
 17330                           ;interruptHandler.c: 26: else{
 17331                           ;interruptHandler.c: 27: updateMenu();
 17332  0038C0  EC5D  F013         	call	_updateMenu	;wreg free
 17333  0038C4                     i2l9020:
 17334                           
 17335                           ;interruptHandler.c: 28: }
 17336                           ;interruptHandler.c: 29: }
 17337                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17338  0038C4  0100               	movlb	0	; () banked
 17339  0038C6  05FC               	decf	_machine_state& (0+255),w,b
 17340  0038C8  A4D8               	btfss	status,2,c
 17341  0038CA  D007               	goto	i2l9026
 17342                           
 17343                           ; BSR set to: 0
 17344                           ;interruptHandler.c: 31: if(input == '*'){
 17345  0038CC  0E2A               	movlw	42
 17346  0038CE  187D               	xorwf	_input,w,c	;volatile
 17347  0038D0  A4D8               	btfss	status,2,c
 17348  0038D2  D003               	goto	i2l9026
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17352  0038D4  0E02               	movlw	2
 17353  0038D6  0100               	movlb	0	; () banked
 17354  0038D8  6FFC               	movwf	_machine_state& (0+255),b
 17355  0038DA                     i2l9026:
 17356                           
 17357                           ;interruptHandler.c: 33: }
 17358                           ;interruptHandler.c: 34: }
 17359                           ;interruptHandler.c: 35: }
 17360                           ;interruptHandler.c: 38: if(TMR0IF){
 17361  0038DA  A4F2               	btfss	intcon,2,c	;volatile
 17362  0038DC  D00C               	goto	i2l9040
 17363                           
 17364                           ;interruptHandler.c: 39: TMR0IF = 0;
 17365  0038DE  94F2               	bcf	intcon,2,c	;volatile
 17366                           
 17367                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17368  0038E0  0100               	movlb	0	; () banked
 17369  0038E2  05FC               	decf	_machine_state& (0+255),w,b
 17370  0038E4  A4D8               	btfss	status,2,c
 17371  0038E6  D007               	goto	i2l9040
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;interruptHandler.c: 41: printSortTimer();
 17375  0038E8  ECBD  F014         	call	_printSortTimer	;wreg free
 17376                           
 17377                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17378  0038EC  0E85               	movlw	133
 17379  0038EE  6ED7               	movwf	4055,c	;volatile
 17380                           
 17381                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17382  0038F0  0EEE               	movlw	238
 17383  0038F2  6ED6               	movwf	4054,c	;volatile
 17384                           
 17385                           ;interruptHandler.c: 45: TMR0ON = 1;
 17386  0038F4  8ED5               	bsf	4053,7,c	;volatile
 17387  0038F6                     i2l9040:
 17388                           
 17389                           ;interruptHandler.c: 46: }
 17390                           ;interruptHandler.c: 47: }
 17391                           ;interruptHandler.c: 50: if(TMR1IF){
 17392  0038F6  A09E               	btfss	3998,0,c	;volatile
 17393  0038F8  D024               	goto	i2l9064
 17394                           
 17395                           ;interruptHandler.c: 51: TMR1IF = 0;
 17396  0038FA  909E               	bcf	3998,0,c	;volatile
 17397                           
 17398                           ;interruptHandler.c: 52: TMR1ON = 0;
 17399  0038FC  90CD               	bcf	4045,0,c	;volatile
 17400                           
 17401                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17402  0038FE  0100               	movlb	0	; () banked
 17403  003900  05FC               	decf	_machine_state& (0+255),w,b
 17404  003902  A4D8               	btfss	status,2,c
 17405  003904  D01E               	goto	i2l9064
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;interruptHandler.c: 54: if(was_low_1){
 17409  003906  5079               	movf	_was_low_1,w,c	;volatile
 17410  003908  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17411  00390A  B4D8               	btfsc	status,2,c
 17412  00390C  D00A               	goto	i2l921
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17416  00390E  828B               	bsf	3979,1,c	;volatile
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;interruptHandler.c: 56: was_low_1 = 0;
 17420  003910  0E00               	movlw	0
 17421  003912  6E7A               	movwf	_was_low_1+1,c	;volatile
 17422  003914  0E00               	movlw	0
 17423  003916  6E79               	movwf	_was_low_1,c	;volatile
 17424                           
 17425                           ; BSR set to: 0
 17426                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17427  003918  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17431  00391C  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17432                           
 17433                           ;interruptHandler.c: 59: }
 17434  003920  D00F               	goto	i2l9062
 17435  003922                     i2l921:
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;interruptHandler.c: 60: else{
 17439                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17440  003922  928B               	bcf	3979,1,c	;volatile
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;interruptHandler.c: 62: was_low_1 = 1;
 17444  003924  0E00               	movlw	0
 17445  003926  6E7A               	movwf	_was_low_1+1,c	;volatile
 17446  003928  0E01               	movlw	1
 17447  00392A  6E79               	movwf	_was_low_1,c	;volatile
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17451  00392C  0101               	movlb	1	; () banked
 17452  00392E  511C               	movf	_servoTimes& (0+255),w,b
 17453  003930  0800               	sublw	0
 17454  003932  0F20               	addlw	32
 17455  003934  6ECF               	movwf	4047,c	;volatile
 17456                           
 17457                           ; BSR set to: 1
 17458                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17459  003936  0101               	movlb	1	; () banked
 17460  003938  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17461  00393A  0800               	sublw	0
 17462  00393C  0F20               	addlw	32
 17463  00393E  6ECE               	movwf	4046,c	;volatile
 17464  003940                     i2l9062:
 17465                           
 17466                           ;interruptHandler.c: 65: }
 17467                           ;interruptHandler.c: 66: TMR1ON = 1;
 17468  003940  80CD               	bsf	4045,0,c	;volatile
 17469  003942                     i2l9064:
 17470                           
 17471                           ;interruptHandler.c: 67: }
 17472                           ;interruptHandler.c: 68: }
 17473                           ;interruptHandler.c: 70: if(TMR3IF){
 17474  003942  A2A1               	btfss	4001,1,c	;volatile
 17475  003944  D024               	goto	i2l927
 17476                           
 17477                           ;interruptHandler.c: 71: TMR3IF = 0;
 17478  003946  92A1               	bcf	4001,1,c	;volatile
 17479                           
 17480                           ;interruptHandler.c: 72: TMR3ON = 0;
 17481  003948  90B1               	bcf	4017,0,c	;volatile
 17482                           
 17483                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17484  00394A  0100               	movlb	0	; () banked
 17485  00394C  05FC               	decf	_machine_state& (0+255),w,b
 17486  00394E  A4D8               	btfss	status,2,c
 17487  003950  D01E               	goto	i2l927
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;interruptHandler.c: 74: if(was_low_3){
 17491  003952  507B               	movf	_was_low_3,w,c	;volatile
 17492  003954  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17493  003956  B4D8               	btfsc	status,2,c
 17494  003958  D00A               	goto	i2l925
 17495                           
 17496                           ; BSR set to: 0
 17497                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17498  00395A  848B               	bsf	3979,2,c	;volatile
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;interruptHandler.c: 76: was_low_3 = 0;
 17502  00395C  0E00               	movlw	0
 17503  00395E  6E7C               	movwf	_was_low_3+1,c	;volatile
 17504  003960  0E00               	movlw	0
 17505  003962  6E7B               	movwf	_was_low_3,c	;volatile
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17509  003964  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17513  003968  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17514                           
 17515                           ;interruptHandler.c: 79: }
 17516  00396C  D00F               	goto	i2l9086
 17517  00396E                     i2l925:
 17518                           
 17519                           ; BSR set to: 0
 17520                           ;interruptHandler.c: 80: else{
 17521                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17522  00396E  948B               	bcf	3979,2,c	;volatile
 17523                           
 17524                           ; BSR set to: 0
 17525                           ;interruptHandler.c: 82: was_low_3 = 1;
 17526  003970  0E00               	movlw	0
 17527  003972  6E7C               	movwf	_was_low_3+1,c	;volatile
 17528  003974  0E01               	movlw	1
 17529  003976  6E7B               	movwf	_was_low_3,c	;volatile
 17530                           
 17531                           ; BSR set to: 0
 17532                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17533  003978  0101               	movlb	1	; () banked
 17534  00397A  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17535  00397C  0800               	sublw	0
 17536  00397E  0F20               	addlw	32
 17537  003980  6EB3               	movwf	4019,c	;volatile
 17538                           
 17539                           ; BSR set to: 1
 17540                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17541  003982  0101               	movlb	1	; () banked
 17542  003984  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17543  003986  0800               	sublw	0
 17544  003988  0F20               	addlw	32
 17545  00398A  6EB2               	movwf	4018,c	;volatile
 17546  00398C                     i2l9086:
 17547                           
 17548                           ;interruptHandler.c: 85: }
 17549                           ;interruptHandler.c: 86: TMR3ON = 1;
 17550  00398C  80B1               	bsf	4017,0,c	;volatile
 17551  00398E                     i2l927:
 17552  00398E  C05A  FFF5         	movff	??_handler+15,tablat
 17553  003992  C059  FFF8         	movff	??_handler+14,tblptru
 17554  003996  C058  FFF7         	movff	??_handler+13,tblptrh
 17555  00399A  C057  FFF6         	movff	??_handler+12,tblptrl
 17556  00399E  C056  FFF4         	movff	??_handler+11,prodh
 17557  0039A2  C055  FFF3         	movff	??_handler+10,prodl
 17558  0039A6  C054  FFDA         	movff	??_handler+9,fsr2h
 17559  0039AA  C053  FFD9         	movff	??_handler+8,fsr2l
 17560  0039AE  C052  FFE2         	movff	??_handler+7,fsr1h
 17561  0039B2  C051  FFE1         	movff	??_handler+6,fsr1l
 17562  0039B6  C050  FFEA         	movff	??_handler+5,fsr0h
 17563  0039BA  C04F  FFE9         	movff	??_handler+4,fsr0l
 17564  0039BE  C04E  FFFB         	movff	??_handler+3,pclatu
 17565  0039C2  C04D  FFFA         	movff	??_handler+2,pclath
 17566  0039C6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17567  0039C8  0011               	retfie		f
 17568  0039CA                     __end_of_handler:
 17569                           	opt stack 0
 17570                           pclatu	equ	0xFFB
 17571                           pclath	equ	0xFFA
 17572                           tblptru	equ	0xFF8
 17573                           tblptrh	equ	0xFF7
 17574                           tblptrl	equ	0xFF6
 17575                           tablat	equ	0xFF5
 17576                           prodh	equ	0xFF4
 17577                           prodl	equ	0xFF3
 17578                           intcon	equ	0xFF2
 17579                           intcon2	equ	0xFF1
 17580                           intcon3	equ	0xFF0
 17581                           indf0	equ	0xFEF
 17582                           postinc0	equ	0xFEE
 17583                           fsr0h	equ	0xFEA
 17584                           fsr0l	equ	0xFE9
 17585                           wreg	equ	0xFE8
 17586                           postdec1	equ	0xFE5
 17587                           fsr1h	equ	0xFE2
 17588                           fsr1l	equ	0xFE1
 17589                           indf2	equ	0xFDF
 17590                           postinc2	equ	0xFDE
 17591                           postdec2	equ	0xFDD
 17592                           fsr2h	equ	0xFDA
 17593                           fsr2l	equ	0xFD9
 17594                           status	equ	0xFD8
 17595                           
 17596 ;; *************** function _updateMenu *****************
 17597 ;; Defined at:
 17598 ;;		line 213 in file "UI.c"
 17599 ;; Parameters:    Size  Location     Type
 17600 ;;		None
 17601 ;; Auto vars:     Size  Location     Type
 17602 ;;		None
 17603 ;; Return value:  Size  Location     Type
 17604 ;;                  1    wreg      void 
 17605 ;; Registers used:
 17606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17607 ;; Tracked objects:
 17608 ;;		On entry : 0/0
 17609 ;;		On exit  : 0/0
 17610 ;;		Unchanged: 0/0
 17611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;Total ram usage:        2 bytes
 17617 ;; Hardware stack levels used:    1
 17618 ;; Hardware stack levels required when called:    5
 17619 ;; This function calls:
 17620 ;;		_change_state_to_logs_11
 17621 ;;		_change_state_to_logs_12
 17622 ;;		_change_state_to_logs_22
 17623 ;;		_change_state_to_logs_23
 17624 ;;		_change_state_to_logs_33
 17625 ;;		_change_state_to_logs_34
 17626 ;;		_change_state_to_menu_11
 17627 ;;		_change_state_to_menu_23
 17628 ;;		_dispLogs
 17629 ;;		_inputHandler
 17630 ;;		i2_change_state_to_menu_12
 17631 ;;		i2_change_state_to_menu_22
 17632 ;;		i2_change_state_to_menu_start
 17633 ;; This function is called by:
 17634 ;;		_handler
 17635 ;; This function uses a non-reentrant model
 17636 ;;
 17637                           
 17638                           	psect	text60
 17639  0026BA                     __ptext60:
 17640                           	opt stack 0
 17641  0026BA                     _updateMenu:
 17642                           	opt stack 18
 17643                           
 17644                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17645                           
 17646                           ;incstack = 0
 17647  0026BA  0E00               	movlw	0
 17648  0026BC  6E78               	movwf	_up+1,c
 17649  0026BE  0E00               	movlw	0
 17650  0026C0  6E77               	movwf	_up,c
 17651  0026C2  0E00               	movlw	0
 17652  0026C4  6E60               	movwf	_down+1,c
 17653  0026C6  0E00               	movlw	0
 17654  0026C8  6E5F               	movwf	_down,c
 17655  0026CA  0E00               	movlw	0
 17656  0026CC  6E62               	movwf	_enter+1,c
 17657  0026CE  0E00               	movlw	0
 17658  0026D0  6E61               	movwf	_enter,c
 17659  0026D2  0E00               	movlw	0
 17660  0026D4  6E5C               	movwf	_back+1,c
 17661  0026D6  0E00               	movlw	0
 17662  0026D8  6E5B               	movwf	_back,c
 17663                           
 17664                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17665  0026DA  9EF2               	bcf	intcon,7,c	;volatile
 17666                           
 17667                           ;UI.c: 217: if (inputHandler()
 17668                           ;UI.c: 220: ){
 17669  0026DC  EC6E  F01A         	call	_inputHandler	;wreg free
 17670  0026E0  502A               	movf	?_inputHandler,w,c
 17671  0026E2  102B               	iorwf	?_inputHandler+1,w,c
 17672  0026E4  A4D8               	btfss	status,2,c
 17673  0026E6  D112               	goto	i2l8724
 17674  0026E8  D146               	goto	i2l257
 17675  0026EA                     i2l8576:
 17676                           
 17677                           ;UI.c: 224: change_state_to_menu_11();
 17678  0026EA  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 17679                           
 17680                           ;UI.c: 225: break;
 17681  0026EE  D143               	goto	i2l257
 17682  0026F0                     i2l8578:
 17683                           
 17684                           ;UI.c: 228: if(up){
 17685  0026F0  5077               	movf	_up,w,c
 17686  0026F2  1078               	iorwf	_up+1,w,c
 17687  0026F4  B4D8               	btfsc	status,2,c
 17688  0026F6  D003               	goto	i2l8582
 17689                           
 17690                           ;UI.c: 229: change_state_to_menu_23();
 17691  0026F8  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 17692                           
 17693                           ;UI.c: 230: }
 17694  0026FC  D13C               	goto	i2l257
 17695  0026FE                     i2l8582:
 17696                           
 17697                           ;UI.c: 231: else if(down){
 17698  0026FE  505F               	movf	_down,w,c
 17699  002700  1060               	iorwf	_down+1,w,c
 17700  002702  B4D8               	btfsc	status,2,c
 17701  002704  D003               	goto	i2l8586
 17702                           
 17703                           ;UI.c: 232: change_state_to_menu_12();
 17704  002706  EC59  F026         	call	i2_change_state_to_menu_12	;wreg free
 17705                           
 17706                           ;UI.c: 233: }
 17707  00270A  D135               	goto	i2l257
 17708  00270C                     i2l8586:
 17709                           
 17710                           ;UI.c: 234: else if(enter){
 17711  00270C  5061               	movf	_enter,w,c
 17712  00270E  1062               	iorwf	_enter+1,w,c
 17713  002710  B4D8               	btfsc	status,2,c
 17714  002712  D131               	goto	i2l257
 17715                           
 17716                           ;UI.c: 235: change_state_to_menu_start();
 17717  002714  ECB3  F027         	call	i2_change_state_to_menu_start	;wreg free
 17718                           
 17719                           ;UI.c: 236: }
 17720                           ;UI.c: 237: break;
 17721  002718  D12E               	goto	i2l257
 17722  00271A                     i2l8590:
 17723                           
 17724                           ;UI.c: 240: if(up){
 17725  00271A  5077               	movf	_up,w,c
 17726  00271C  1078               	iorwf	_up+1,w,c
 17727  00271E  B4D8               	btfsc	status,2,c
 17728  002720  D003               	goto	i2l8594
 17729                           
 17730                           ;UI.c: 241: change_state_to_menu_11();
 17731  002722  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 17732                           
 17733                           ;UI.c: 242: }
 17734  002726  D127               	goto	i2l257
 17735  002728                     i2l8594:
 17736                           
 17737                           ;UI.c: 243: else if(down){
 17738  002728  505F               	movf	_down,w,c
 17739  00272A  1060               	iorwf	_down+1,w,c
 17740  00272C  B4D8               	btfsc	status,2,c
 17741  00272E  D011               	goto	i2l8610
 17742                           
 17743                           ;UI.c: 244: change_state_to_menu_23();
 17744  002730  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 17745                           
 17746                           ;UI.c: 245: }
 17747  002734  D120               	goto	i2l257
 17748  002736                     i2l8602:
 17749                           
 17750                           ;UI.c: 252: if(up){
 17751  002736  5077               	movf	_up,w,c
 17752  002738  1078               	iorwf	_up+1,w,c
 17753  00273A  B4D8               	btfsc	status,2,c
 17754  00273C  D003               	goto	i2l8606
 17755                           
 17756                           ;UI.c: 253: change_state_to_menu_11();
 17757  00273E  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 17758                           
 17759                           ;UI.c: 254: }
 17760  002742  D119               	goto	i2l257
 17761  002744                     i2l8606:
 17762                           
 17763                           ;UI.c: 255: else if(down){
 17764  002744  505F               	movf	_down,w,c
 17765  002746  1060               	iorwf	_down+1,w,c
 17766  002748  B4D8               	btfsc	status,2,c
 17767  00274A  D003               	goto	i2l8610
 17768                           
 17769                           ;UI.c: 256: change_state_to_menu_23();
 17770  00274C  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 17771                           
 17772                           ;UI.c: 257: }
 17773  002750  D112               	goto	i2l257
 17774  002752                     i2l8610:
 17775                           
 17776                           ;UI.c: 258: else if(enter){
 17777  002752  5061               	movf	_enter,w,c
 17778  002754  1062               	iorwf	_enter+1,w,c
 17779  002756  B4D8               	btfsc	status,2,c
 17780  002758  D10E               	goto	i2l257
 17781                           
 17782                           ;UI.c: 259: machine_state = Sorting_state;
 17783  00275A  0E01               	movlw	1
 17784  00275C  0100               	movlb	0	; () banked
 17785  00275E  6FFC               	movwf	_machine_state& (0+255),b
 17786                           
 17787                           ; BSR set to: 0
 17788                           ;UI.c: 260: }
 17789                           ;UI.c: 261: break;
 17790                           
 17791                           ; BSR set to: 0
 17792                           
 17793                           ; BSR set to: 0
 17794  002760  D10A               	goto	i2l257
 17795  002762                     i2l8614:
 17796                           
 17797                           ;UI.c: 264: if(up){
 17798  002762  5077               	movf	_up,w,c
 17799  002764  1078               	iorwf	_up+1,w,c
 17800  002766  B4D8               	btfsc	status,2,c
 17801  002768  D003               	goto	i2l8618
 17802                           
 17803                           ;UI.c: 265: change_state_to_menu_22();
 17804  00276A  EC41  F026         	call	i2_change_state_to_menu_22	;wreg free
 17805                           
 17806                           ;UI.c: 266: }
 17807  00276E  D103               	goto	i2l257
 17808  002770                     i2l8618:
 17809                           
 17810                           ;UI.c: 267: else if(down){
 17811  002770  505F               	movf	_down,w,c
 17812  002772  1060               	iorwf	_down+1,w,c
 17813  002774  B4D8               	btfsc	status,2,c
 17814  002776  D003               	goto	i2l8622
 17815                           
 17816                           ;UI.c: 268: change_state_to_menu_11();
 17817  002778  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 17818                           
 17819                           ;UI.c: 269: }
 17820  00277C  D0FC               	goto	i2l257
 17821  00277E                     i2l8622:
 17822                           
 17823                           ;UI.c: 270: else if(enter){
 17824  00277E  5061               	movf	_enter,w,c
 17825  002780  1062               	iorwf	_enter+1,w,c
 17826  002782  B4D8               	btfsc	status,2,c
 17827  002784  D0F8               	goto	i2l257
 17828                           
 17829                           ;UI.c: 271: change_state_to_logs_11();
 17830  002786  EC01  F027         	call	_change_state_to_logs_11	;wreg free
 17831                           
 17832                           ;UI.c: 272: }
 17833                           ;UI.c: 273: break;
 17834  00278A  D0F5               	goto	i2l257
 17835  00278C                     i2l8626:
 17836                           
 17837                           ;UI.c: 276: if(up){
 17838  00278C  5077               	movf	_up,w,c
 17839  00278E  1078               	iorwf	_up+1,w,c
 17840  002790  B4D8               	btfsc	status,2,c
 17841  002792  D003               	goto	i2l8630
 17842                           
 17843                           ;UI.c: 277: change_state_to_logs_34();
 17844  002794  ECA1  F026         	call	_change_state_to_logs_34	;wreg free
 17845                           
 17846                           ;UI.c: 278: }
 17847  002798  D0EE               	goto	i2l257
 17848  00279A                     i2l8630:
 17849                           
 17850                           ;UI.c: 279: else if(down){
 17851  00279A  505F               	movf	_down,w,c
 17852  00279C  1060               	iorwf	_down+1,w,c
 17853  00279E  B4D8               	btfsc	status,2,c
 17854  0027A0  D003               	goto	i2l8634
 17855                           
 17856                           ;UI.c: 280: change_state_to_logs_12();
 17857  0027A2  ECE9  F026         	call	_change_state_to_logs_12	;wreg free
 17858                           
 17859                           ;UI.c: 281: }
 17860  0027A6  D0E7               	goto	i2l257
 17861  0027A8                     i2l8634:
 17862                           
 17863                           ;UI.c: 282: else if(enter){
 17864  0027A8  5061               	movf	_enter,w,c
 17865  0027AA  1062               	iorwf	_enter+1,w,c
 17866  0027AC  B4D8               	btfsc	status,2,c
 17867  0027AE  D007               	goto	i2l8638
 17868                           
 17869                           ;UI.c: 283: dispLogs(1);
 17870  0027B0  0E00               	movlw	0
 17871  0027B2  6E13               	movwf	dispLogs@myLog+1,c
 17872  0027B4  0E01               	movlw	1
 17873  0027B6  6E12               	movwf	dispLogs@myLog,c
 17874  0027B8  ECED  F027         	call	_dispLogs	;wreg free
 17875                           
 17876                           ;UI.c: 284: }
 17877  0027BC  D0DC               	goto	i2l257
 17878  0027BE                     i2l8638:
 17879                           
 17880                           ;UI.c: 285: else if(back){
 17881  0027BE  505B               	movf	_back,w,c
 17882  0027C0  105C               	iorwf	_back+1,w,c
 17883  0027C2  B4D8               	btfsc	status,2,c
 17884  0027C4  D0D8               	goto	i2l257
 17885                           
 17886                           ;UI.c: 286: change_state_to_menu_23();
 17887  0027C6  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 17888                           
 17889                           ;UI.c: 287: }
 17890                           ;UI.c: 288: break;
 17891  0027CA  D0D5               	goto	i2l257
 17892  0027CC                     i2l8642:
 17893                           
 17894                           ;UI.c: 291: if(up){
 17895  0027CC  5077               	movf	_up,w,c
 17896  0027CE  1078               	iorwf	_up+1,w,c
 17897  0027D0  B4D8               	btfsc	status,2,c
 17898  0027D2  D003               	goto	i2l8646
 17899                           
 17900                           ;UI.c: 292: change_state_to_logs_11();
 17901  0027D4  EC01  F027         	call	_change_state_to_logs_11	;wreg free
 17902                           
 17903                           ;UI.c: 293: }
 17904  0027D8  D0CE               	goto	i2l257
 17905  0027DA                     i2l8646:
 17906                           
 17907                           ;UI.c: 294: else if(down){
 17908  0027DA  505F               	movf	_down,w,c
 17909  0027DC  1060               	iorwf	_down+1,w,c
 17910  0027DE  B4D8               	btfsc	status,2,c
 17911  0027E0  D003               	goto	i2l8650
 17912                           
 17913                           ;UI.c: 295: change_state_to_logs_23();
 17914  0027E2  EC47  F027         	call	_change_state_to_logs_23	;wreg free
 17915                           
 17916                           ;UI.c: 296: }
 17917  0027E6  D0C7               	goto	i2l257
 17918  0027E8                     i2l8650:
 17919                           
 17920                           ;UI.c: 297: else if(enter){
 17921  0027E8  5061               	movf	_enter,w,c
 17922  0027EA  1062               	iorwf	_enter+1,w,c
 17923  0027EC  B4D8               	btfsc	status,2,c
 17924  0027EE  D007               	goto	i2l8654
 17925                           
 17926                           ;UI.c: 298: dispLogs(2);
 17927  0027F0  0E00               	movlw	0
 17928  0027F2  6E13               	movwf	dispLogs@myLog+1,c
 17929  0027F4  0E02               	movlw	2
 17930  0027F6  6E12               	movwf	dispLogs@myLog,c
 17931  0027F8  ECED  F027         	call	_dispLogs	;wreg free
 17932                           
 17933                           ;UI.c: 299: }
 17934  0027FC  D0BC               	goto	i2l257
 17935  0027FE                     i2l8654:
 17936                           
 17937                           ;UI.c: 300: else if(back){
 17938  0027FE  505B               	movf	_back,w,c
 17939  002800  105C               	iorwf	_back+1,w,c
 17940  002802  B4D8               	btfsc	status,2,c
 17941  002804  D0B8               	goto	i2l257
 17942                           
 17943                           ;UI.c: 301: change_state_to_menu_23();
 17944  002806  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 17945                           
 17946                           ;UI.c: 302: }
 17947                           ;UI.c: 303: break;
 17948  00280A  D0B5               	goto	i2l257
 17949  00280C                     i2l8658:
 17950                           
 17951                           ;UI.c: 306: if(up){
 17952  00280C  5077               	movf	_up,w,c
 17953  00280E  1078               	iorwf	_up+1,w,c
 17954  002810  B4D8               	btfsc	status,2,c
 17955  002812  D003               	goto	i2l8662
 17956                           
 17957                           ;UI.c: 307: change_state_to_logs_11();
 17958  002814  EC01  F027         	call	_change_state_to_logs_11	;wreg free
 17959                           
 17960                           ;UI.c: 308: }
 17961  002818  D0AE               	goto	i2l257
 17962  00281A                     i2l8662:
 17963                           
 17964                           ;UI.c: 309: else if(down){
 17965  00281A  505F               	movf	_down,w,c
 17966  00281C  1060               	iorwf	_down+1,w,c
 17967  00281E  B4D8               	btfsc	status,2,c
 17968  002820  D003               	goto	i2l8666
 17969                           
 17970                           ;UI.c: 310: change_state_to_logs_23();
 17971  002822  EC47  F027         	call	_change_state_to_logs_23	;wreg free
 17972                           
 17973                           ;UI.c: 311: }
 17974  002826  D0A7               	goto	i2l257
 17975  002828                     i2l8666:
 17976                           
 17977                           ;UI.c: 312: else if(enter){
 17978  002828  5061               	movf	_enter,w,c
 17979  00282A  1062               	iorwf	_enter+1,w,c
 17980  00282C  B4D8               	btfsc	status,2,c
 17981  00282E  D007               	goto	i2l8670
 17982                           
 17983                           ;UI.c: 313: dispLogs(2);
 17984  002830  0E00               	movlw	0
 17985  002832  6E13               	movwf	dispLogs@myLog+1,c
 17986  002834  0E02               	movlw	2
 17987  002836  6E12               	movwf	dispLogs@myLog,c
 17988  002838  ECED  F027         	call	_dispLogs	;wreg free
 17989                           
 17990                           ;UI.c: 314: }
 17991  00283C  D09C               	goto	i2l257
 17992  00283E                     i2l8670:
 17993                           
 17994                           ;UI.c: 315: else if(back){
 17995  00283E  505B               	movf	_back,w,c
 17996  002840  105C               	iorwf	_back+1,w,c
 17997  002842  B4D8               	btfsc	status,2,c
 17998  002844  D098               	goto	i2l257
 17999                           
 18000                           ;UI.c: 316: change_state_to_menu_23();
 18001  002846  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 18002                           
 18003                           ;UI.c: 317: }
 18004                           ;UI.c: 318: break;
 18005  00284A  D095               	goto	i2l257
 18006  00284C                     i2l8674:
 18007                           
 18008                           ;UI.c: 321: if(up){
 18009  00284C  5077               	movf	_up,w,c
 18010  00284E  1078               	iorwf	_up+1,w,c
 18011  002850  B4D8               	btfsc	status,2,c
 18012  002852  D003               	goto	i2l8678
 18013                           
 18014                           ;UI.c: 322: change_state_to_logs_22();
 18015  002854  ECD1  F026         	call	_change_state_to_logs_22	;wreg free
 18016                           
 18017                           ;UI.c: 323: }
 18018  002858  D08E               	goto	i2l257
 18019  00285A                     i2l8678:
 18020                           
 18021                           ;UI.c: 324: else if(down){
 18022  00285A  505F               	movf	_down,w,c
 18023  00285C  1060               	iorwf	_down+1,w,c
 18024  00285E  B4D8               	btfsc	status,2,c
 18025  002860  D003               	goto	i2l8682
 18026                           
 18027                           ;UI.c: 325: change_state_to_logs_34();
 18028  002862  ECA1  F026         	call	_change_state_to_logs_34	;wreg free
 18029                           
 18030                           ;UI.c: 326: }
 18031  002866  D087               	goto	i2l257
 18032  002868                     i2l8682:
 18033                           
 18034                           ;UI.c: 327: else if(enter){
 18035  002868  5061               	movf	_enter,w,c
 18036  00286A  1062               	iorwf	_enter+1,w,c
 18037  00286C  B4D8               	btfsc	status,2,c
 18038  00286E  D007               	goto	i2l8686
 18039                           
 18040                           ;UI.c: 328: dispLogs(3);
 18041  002870  0E00               	movlw	0
 18042  002872  6E13               	movwf	dispLogs@myLog+1,c
 18043  002874  0E03               	movlw	3
 18044  002876  6E12               	movwf	dispLogs@myLog,c
 18045  002878  ECED  F027         	call	_dispLogs	;wreg free
 18046                           
 18047                           ;UI.c: 329: }
 18048  00287C  D07C               	goto	i2l257
 18049  00287E                     i2l8686:
 18050                           
 18051                           ;UI.c: 330: else if(back){
 18052  00287E  505B               	movf	_back,w,c
 18053  002880  105C               	iorwf	_back+1,w,c
 18054  002882  B4D8               	btfsc	status,2,c
 18055  002884  D078               	goto	i2l257
 18056                           
 18057                           ;UI.c: 331: change_state_to_menu_23();
 18058  002886  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 18059                           
 18060                           ;UI.c: 332: }
 18061                           ;UI.c: 333: break;
 18062  00288A  D075               	goto	i2l257
 18063  00288C                     i2l8690:
 18064                           
 18065                           ;UI.c: 336: if(up){
 18066  00288C  5077               	movf	_up,w,c
 18067  00288E  1078               	iorwf	_up+1,w,c
 18068  002890  B4D8               	btfsc	status,2,c
 18069  002892  D003               	goto	i2l8694
 18070                           
 18071                           ;UI.c: 337: change_state_to_logs_22();
 18072  002894  ECD1  F026         	call	_change_state_to_logs_22	;wreg free
 18073                           
 18074                           ;UI.c: 338: }
 18075  002898  D06E               	goto	i2l257
 18076  00289A                     i2l8694:
 18077                           
 18078                           ;UI.c: 339: else if(down){
 18079  00289A  505F               	movf	_down,w,c
 18080  00289C  1060               	iorwf	_down+1,w,c
 18081  00289E  B4D8               	btfsc	status,2,c
 18082  0028A0  D003               	goto	i2l8698
 18083                           
 18084                           ;UI.c: 340: change_state_to_logs_34();
 18085  0028A2  ECA1  F026         	call	_change_state_to_logs_34	;wreg free
 18086                           
 18087                           ;UI.c: 341: }
 18088  0028A6  D067               	goto	i2l257
 18089  0028A8                     i2l8698:
 18090                           
 18091                           ;UI.c: 342: else if(enter){
 18092  0028A8  5061               	movf	_enter,w,c
 18093  0028AA  1062               	iorwf	_enter+1,w,c
 18094  0028AC  B4D8               	btfsc	status,2,c
 18095  0028AE  D007               	goto	i2l8702
 18096                           
 18097                           ;UI.c: 343: dispLogs(3);
 18098  0028B0  0E00               	movlw	0
 18099  0028B2  6E13               	movwf	dispLogs@myLog+1,c
 18100  0028B4  0E03               	movlw	3
 18101  0028B6  6E12               	movwf	dispLogs@myLog,c
 18102  0028B8  ECED  F027         	call	_dispLogs	;wreg free
 18103                           
 18104                           ;UI.c: 344: }
 18105  0028BC  D05C               	goto	i2l257
 18106  0028BE                     i2l8702:
 18107                           
 18108                           ;UI.c: 345: else if(back){
 18109  0028BE  505B               	movf	_back,w,c
 18110  0028C0  105C               	iorwf	_back+1,w,c
 18111  0028C2  B4D8               	btfsc	status,2,c
 18112  0028C4  D058               	goto	i2l257
 18113                           
 18114                           ;UI.c: 346: change_state_to_menu_23();
 18115  0028C6  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 18116                           
 18117                           ;UI.c: 347: }
 18118                           ;UI.c: 348: break;
 18119  0028CA  D055               	goto	i2l257
 18120  0028CC                     i2l8706:
 18121                           
 18122                           ;UI.c: 351: if(up){
 18123  0028CC  5077               	movf	_up,w,c
 18124  0028CE  1078               	iorwf	_up+1,w,c
 18125  0028D0  B4D8               	btfsc	status,2,c
 18126  0028D2  D003               	goto	i2l8710
 18127                           
 18128                           ;UI.c: 352: change_state_to_logs_33();
 18129  0028D4  ECB9  F026         	call	_change_state_to_logs_33	;wreg free
 18130                           
 18131                           ;UI.c: 353: }
 18132  0028D8  D04E               	goto	i2l257
 18133  0028DA                     i2l8710:
 18134                           
 18135                           ;UI.c: 354: else if(down){
 18136  0028DA  505F               	movf	_down,w,c
 18137  0028DC  1060               	iorwf	_down+1,w,c
 18138  0028DE  B4D8               	btfsc	status,2,c
 18139  0028E0  D003               	goto	i2l8714
 18140                           
 18141                           ;UI.c: 355: change_state_to_logs_11();
 18142  0028E2  EC01  F027         	call	_change_state_to_logs_11	;wreg free
 18143                           
 18144                           ;UI.c: 356: }
 18145  0028E6  D047               	goto	i2l257
 18146  0028E8                     i2l8714:
 18147                           
 18148                           ;UI.c: 357: else if(enter){
 18149  0028E8  5061               	movf	_enter,w,c
 18150  0028EA  1062               	iorwf	_enter+1,w,c
 18151  0028EC  B4D8               	btfsc	status,2,c
 18152  0028EE  D007               	goto	i2l8718
 18153                           
 18154                           ;UI.c: 358: dispLogs(4);
 18155  0028F0  0E00               	movlw	0
 18156  0028F2  6E13               	movwf	dispLogs@myLog+1,c
 18157  0028F4  0E04               	movlw	4
 18158  0028F6  6E12               	movwf	dispLogs@myLog,c
 18159  0028F8  ECED  F027         	call	_dispLogs	;wreg free
 18160                           
 18161                           ;UI.c: 359: }
 18162  0028FC  D03C               	goto	i2l257
 18163  0028FE                     i2l8718:
 18164                           
 18165                           ;UI.c: 360: else if(back){
 18166  0028FE  505B               	movf	_back,w,c
 18167  002900  105C               	iorwf	_back+1,w,c
 18168  002902  B4D8               	btfsc	status,2,c
 18169  002904  D038               	goto	i2l257
 18170                           
 18171                           ;UI.c: 361: change_state_to_menu_23();
 18172  002906  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 18173                           
 18174                           ;UI.c: 367: }
 18175                           
 18176                           ;UI.c: 366: break;
 18177                           
 18178                           ;UI.c: 365: default:
 18179                           
 18180                           ;UI.c: 362: }
 18181                           ;UI.c: 363: break;
 18182  00290A  D035               	goto	i2l257
 18183  00290C                     i2l8724:
 18184  00290C  C0E6  F043         	movff	_cur_state,??_updateMenu
 18185  002910  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 18186                           
 18187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18188                           ; Switch size 1, requested type "space"
 18189                           ; Number of cases is 3, Range of values is 0 to 4
 18190                           ; switch strategies available:
 18191                           ; Name         Instructions Cycles
 18192                           ; simple_byte           10     6 (average)
 18193                           ;	Chosen strategy is simple_byte
 18194  002914  5044               	movf	??_updateMenu+1,w,c
 18195  002916  0A00               	xorlw	0	; case 0
 18196  002918  B4D8               	btfsc	status,2,c
 18197  00291A  D007               	goto	i2l9428
 18198  00291C  0A03               	xorlw	3	; case 3
 18199  00291E  B4D8               	btfsc	status,2,c
 18200  002920  D015               	goto	i2l9430
 18201  002922  0A07               	xorlw	7	; case 4
 18202  002924  B4D8               	btfsc	status,2,c
 18203  002926  D020               	goto	i2l9432
 18204  002928  D026               	goto	i2l257
 18205  00292A                     i2l9428:
 18206                           
 18207                           ; Switch size 1, requested type "space"
 18208                           ; Number of cases is 5, Range of values is 0 to 23
 18209                           ; switch strategies available:
 18210                           ; Name         Instructions Cycles
 18211                           ; simple_byte           16     9 (average)
 18212                           ;	Chosen strategy is simple_byte
 18213  00292A  5043               	movf	??_updateMenu,w,c
 18214  00292C  0A00               	xorlw	0	; case 0
 18215  00292E  B4D8               	btfsc	status,2,c
 18216  002930  D6DC               	goto	i2l8576
 18217  002932  0A0B               	xorlw	11	; case 11
 18218  002934  B4D8               	btfsc	status,2,c
 18219  002936  D6DC               	goto	i2l8578
 18220  002938  0A07               	xorlw	7	; case 12
 18221  00293A  B4D8               	btfsc	status,2,c
 18222  00293C  D6EE               	goto	i2l8590
 18223  00293E  0A1A               	xorlw	26	; case 22
 18224  002940  B4D8               	btfsc	status,2,c
 18225  002942  D6F9               	goto	i2l8602
 18226  002944  0A01               	xorlw	1	; case 23
 18227  002946  B4D8               	btfsc	status,2,c
 18228  002948  D70C               	goto	i2l8614
 18229  00294A  D015               	goto	i2l257
 18230  00294C                     i2l9430:
 18231                           
 18232                           ; Switch size 1, requested type "space"
 18233                           ; Number of cases is 4, Range of values is 243 to 255
 18234                           ; switch strategies available:
 18235                           ; Name         Instructions Cycles
 18236                           ; simple_byte           13     7 (average)
 18237                           ;	Chosen strategy is simple_byte
 18238  00294C  5043               	movf	??_updateMenu,w,c
 18239  00294E  0AF3               	xorlw	243	; case 243
 18240  002950  B4D8               	btfsc	status,2,c
 18241  002952  D71C               	goto	i2l8626
 18242  002954  0A07               	xorlw	7	; case 244
 18243  002956  B4D8               	btfsc	status,2,c
 18244  002958  D739               	goto	i2l8642
 18245  00295A  0A0A               	xorlw	10	; case 254
 18246  00295C  B4D8               	btfsc	status,2,c
 18247  00295E  D756               	goto	i2l8658
 18248  002960  0A01               	xorlw	1	; case 255
 18249  002962  B4D8               	btfsc	status,2,c
 18250  002964  D773               	goto	i2l8674
 18251  002966  D007               	goto	i2l257
 18252  002968                     i2l9432:
 18253                           
 18254                           ; Switch size 1, requested type "space"
 18255                           ; Number of cases is 2, Range of values is 9 to 10
 18256                           ; switch strategies available:
 18257                           ; Name         Instructions Cycles
 18258                           ; simple_byte            7     4 (average)
 18259                           ;	Chosen strategy is simple_byte
 18260  002968  5043               	movf	??_updateMenu,w,c
 18261  00296A  0A09               	xorlw	9	; case 9
 18262  00296C  B4D8               	btfsc	status,2,c
 18263  00296E  D78E               	goto	i2l8690
 18264  002970  0A03               	xorlw	3	; case 10
 18265  002972  B4D8               	btfsc	status,2,c
 18266  002974  D7AB               	goto	i2l8706
 18267  002976                     i2l257:
 18268                           
 18269                           ;UI.c: 368: }
 18270                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18271  002976  8EF2               	bsf	intcon,7,c	;volatile
 18272  002978  0012               	return		;funcret
 18273  00297A                     __end_of_updateMenu:
 18274                           	opt stack 0
 18275                           pclatu	equ	0xFFB
 18276                           pclath	equ	0xFFA
 18277                           tblptru	equ	0xFF8
 18278                           tblptrh	equ	0xFF7
 18279                           tblptrl	equ	0xFF6
 18280                           tablat	equ	0xFF5
 18281                           prodh	equ	0xFF4
 18282                           prodl	equ	0xFF3
 18283                           intcon	equ	0xFF2
 18284                           intcon2	equ	0xFF1
 18285                           intcon3	equ	0xFF0
 18286                           indf0	equ	0xFEF
 18287                           postinc0	equ	0xFEE
 18288                           fsr0h	equ	0xFEA
 18289                           fsr0l	equ	0xFE9
 18290                           wreg	equ	0xFE8
 18291                           postdec1	equ	0xFE5
 18292                           fsr1h	equ	0xFE2
 18293                           fsr1l	equ	0xFE1
 18294                           indf2	equ	0xFDF
 18295                           postinc2	equ	0xFDE
 18296                           postdec2	equ	0xFDD
 18297                           fsr2h	equ	0xFDA
 18298                           fsr2l	equ	0xFD9
 18299                           status	equ	0xFD8
 18300                           
 18301 ;; *************** function i2_change_state_to_menu_start *****************
 18302 ;; Defined at:
 18303 ;;		line 474 in file "UI.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;		None
 18306 ;; Auto vars:     Size  Location     Type
 18307 ;;		None
 18308 ;; Return value:  Size  Location     Type
 18309 ;;                  1    wreg      void 
 18310 ;; Registers used:
 18311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;Total ram usage:        0 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    4
 18324 ;; This function calls:
 18325 ;;		i2_lcdInst
 18326 ;;		i2_printRTC
 18327 ;;		i2_printf
 18328 ;; This function is called by:
 18329 ;;		_updateMenu
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333                           	psect	text61
 18334  004F66                     __ptext61:
 18335                           	opt stack 0
 18336  004F66                     i2_change_state_to_menu_start:
 18337                           	opt stack 18
 18338                           
 18339                           ;UI.c: 475: cur_state = 0;
 18340                           
 18341                           ;incstack = 0
 18342  004F66  0E00               	movlw	0
 18343  004F68  0100               	movlb	0	; () banked
 18344  004F6A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18345  004F6C  0E00               	movlw	0
 18346  004F6E  6FE6               	movwf	_cur_state& (0+255),b
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;UI.c: 477: lcdInst(0b10000000);;
 18350  004F70  0E80               	movlw	128
 18351  004F72  EC8B  F028         	call	i2_lcdInst
 18352                           
 18353                           ;UI.c: 478: printRTC();
 18354  004F76  EC32  F017         	call	i2_printRTC	;wreg free
 18355                           
 18356                           ;UI.c: 479: lcdInst(0b11000000);;
 18357  004F7A  0EC0               	movlw	192
 18358  004F7C  EC8B  F028         	call	i2_lcdInst
 18359                           
 18360                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18361  004F80  0EF7               	movlw	low STR_30
 18362  004F82  6E0D               	movwf	i2printf@f,c
 18363  004F84  0EFD               	movlw	high STR_30
 18364  004F86  6E0E               	movwf	i2printf@f+1,c
 18365  004F88  ECC2  F00E         	call	i2_printf	;wreg free
 18366  004F8C  0012               	return		;funcret
 18367  004F8E                     __end_ofi2_change_state_to_menu_start:
 18368                           	opt stack 0
 18369                           pclatu	equ	0xFFB
 18370                           pclath	equ	0xFFA
 18371                           tblptru	equ	0xFF8
 18372                           tblptrh	equ	0xFF7
 18373                           tblptrl	equ	0xFF6
 18374                           tablat	equ	0xFF5
 18375                           prodh	equ	0xFF4
 18376                           prodl	equ	0xFF3
 18377                           intcon	equ	0xFF2
 18378                           intcon2	equ	0xFF1
 18379                           intcon3	equ	0xFF0
 18380                           indf0	equ	0xFEF
 18381                           postinc0	equ	0xFEE
 18382                           fsr0h	equ	0xFEA
 18383                           fsr0l	equ	0xFE9
 18384                           wreg	equ	0xFE8
 18385                           postdec1	equ	0xFE5
 18386                           fsr1h	equ	0xFE2
 18387                           fsr1l	equ	0xFE1
 18388                           indf2	equ	0xFDF
 18389                           postinc2	equ	0xFDE
 18390                           postdec2	equ	0xFDD
 18391                           fsr2h	equ	0xFDA
 18392                           fsr2l	equ	0xFD9
 18393                           status	equ	0xFD8
 18394                           
 18395 ;; *************** function i2_printRTC *****************
 18396 ;; Defined at:
 18397 ;;		line 63 in file "RTC.c"
 18398 ;; Parameters:    Size  Location     Type
 18399 ;;		None
 18400 ;; Auto vars:     Size  Location     Type
 18401 ;;  printRTC       14   44[COMRAM] int [7]
 18402 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18403 ;;  printRTC        2   64[COMRAM] int 
 18404 ;;  printRTC        2   58[COMRAM] int 
 18405 ;; Return value:  Size  Location     Type
 18406 ;;                  1    wreg      void 
 18407 ;; Registers used:
 18408 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18409 ;; Tracked objects:
 18410 ;;		On entry : 0/0
 18411 ;;		On exit  : 0/0
 18412 ;;		Unchanged: 0/0
 18413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18415 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18416 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18417 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18418 ;;Total ram usage:       25 bytes
 18419 ;; Hardware stack levels used:    1
 18420 ;; Hardware stack levels required when called:    3
 18421 ;; This function calls:
 18422 ;;		i2_getRTC
 18423 ;;		i2_lcdInst
 18424 ;;		i2_printf
 18425 ;;		i2_strcpy
 18426 ;; This function is called by:
 18427 ;;		i2_change_state_to_menu_start
 18428 ;; This function uses a non-reentrant model
 18429 ;;
 18430                           
 18431                           	psect	text62
 18432  002E64                     __ptext62:
 18433                           	opt stack 0
 18434  002E64                     i2_printRTC:
 18435                           	opt stack 18
 18436                           
 18437                           ;RTC.c: 64: getRTC();
 18438                           
 18439                           ;incstack = 0
 18440  002E64  EC3F  F023         	call	i2_getRTC	;wreg free
 18441                           
 18442                           ;RTC.c: 65: char month[] = "MMM";
 18443  002E68  C13B  F03D         	movff	printRTC@F3219,i2printRTC@month
 18444  002E6C  C13C  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18445  002E70  C13D  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18446  002E74  C13E  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18447                           
 18448                           ;RTC.c: 66: int INT_time[7];
 18449                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18450  002E78  0E00               	movlw	0
 18451  002E7A  6E42               	movwf	i2printRTC@i+1,c
 18452  002E7C  0E00               	movlw	0
 18453  002E7E  6E41               	movwf	i2printRTC@i,c
 18454  002E80  BE42               	btfsc	i2printRTC@i+1,7,c
 18455  002E82  D006               	goto	i2l6680
 18456  002E84  5042               	movf	i2printRTC@i+1,w,c
 18457  002E86  E135               	bnz	i2l606
 18458  002E88  0E07               	movlw	7
 18459  002E8A  5C41               	subwf	i2printRTC@i,w,c
 18460  002E8C  B0D8               	btfsc	status,0,c
 18461  002E8E  D031               	goto	i2l606
 18462  002E90                     i2l6680:
 18463                           
 18464                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18465  002E90  0E24               	movlw	low _time
 18466  002E92  2441               	addwf	i2printRTC@i,w,c
 18467  002E94  6ED9               	movwf	fsr2l,c
 18468  002E96  0E01               	movlw	high _time
 18469  002E98  2042               	addwfc	i2printRTC@i+1,w,c
 18470  002E9A  6EDA               	movwf	fsr2h,c
 18471  002E9C  50DF               	movf	indf2,w,c
 18472  002E9E  6E2A               	movwf	??i2_printRTC& (0+255),c
 18473  002EA0  3A2A               	swapf	??i2_printRTC,f,c
 18474  002EA2  0E0F               	movlw	15
 18475  002EA4  162A               	andwf	??i2_printRTC,f,c
 18476  002EA6  0E0F               	movlw	15
 18477  002EA8  162A               	andwf	??i2_printRTC,f,c
 18478  002EAA  502A               	movf	??i2_printRTC,w,c
 18479  002EAC  0D0A               	mullw	10
 18480  002EAE  0E24               	movlw	low _time
 18481  002EB0  2441               	addwf	i2printRTC@i,w,c
 18482  002EB2  6ED9               	movwf	fsr2l,c
 18483  002EB4  0E01               	movlw	high _time
 18484  002EB6  2042               	addwfc	i2printRTC@i+1,w,c
 18485  002EB8  6EDA               	movwf	fsr2h,c
 18486  002EBA  50DF               	movf	indf2,w,c
 18487  002EBC  0B0F               	andlw	15
 18488  002EBE  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18489  002EC0  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18490  002EC2  50F3               	movf	prodl,w,c
 18491  002EC4  262B               	addwf	??i2_printRTC+1,f,c
 18492  002EC6  50F4               	movf	prodh,w,c
 18493  002EC8  222C               	addwfc	??i2_printRTC+2,f,c
 18494  002ECA  90D8               	bcf	status,0,c
 18495  002ECC  3441               	rlcf	i2printRTC@i,w,c
 18496  002ECE  6ED9               	movwf	fsr2l,c
 18497  002ED0  3442               	rlcf	i2printRTC@i+1,w,c
 18498  002ED2  6EDA               	movwf	fsr2h,c
 18499  002ED4  0E2D               	movlw	low i2printRTC@INT_time
 18500  002ED6  26D9               	addwf	fsr2l,f,c
 18501  002ED8  0E00               	movlw	high i2printRTC@INT_time
 18502  002EDA  22DA               	addwfc	fsr2h,f,c
 18503  002EDC  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18504  002EE0  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18505  002EE4  4A41               	infsnz	i2printRTC@i,f,c
 18506  002EE6  2A42               	incf	i2printRTC@i+1,f,c
 18507  002EE8  BE42               	btfsc	i2printRTC@i+1,7,c
 18508  002EEA  D7D2               	goto	i2l6680
 18509  002EEC  5042               	movf	i2printRTC@i+1,w,c
 18510  002EEE  E101               	bnz	i2u534_40
 18511  002EF0  D7CB               	goto	L13
 18512  002EF2                     i2u534_40:
 18513  002EF2                     i2l606:
 18514                           
 18515                           ;RTC.c: 69: }
 18516                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18517  002EF2  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18518  002EF6  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18519                           
 18520                           ;RTC.c: 71: switch(RTC_month){
 18521  002EFA  D084               	goto	i2l6712
 18522  002EFC                     i2l6686:
 18523                           
 18524                           ;RTC.c: 73: strcpy(month, "JAN");
 18525  002EFC  0E3D               	movlw	low i2printRTC@month
 18526  002EFE  6E01               	movwf	i2strcpy@to,c
 18527  002F00  0E00               	movlw	high i2printRTC@month
 18528  002F02  6E02               	movwf	i2strcpy@to+1,c
 18529  002F04  0EDB               	movlw	low STR_8
 18530  002F06  6E03               	movwf	i2strcpy@from,c
 18531  002F08  0EFF               	movlw	high STR_8
 18532  002F0A  6E04               	movwf	i2strcpy@from+1,c
 18533  002F0C  EC28  F026         	call	i2_strcpy	;wreg free
 18534                           
 18535                           ;RTC.c: 74: break;
 18536  002F10  D0A6               	goto	i2l6714
 18537  002F12                     i2l6688:
 18538                           
 18539                           ;RTC.c: 76: strcpy(month, "FEB");
 18540  002F12  0E3D               	movlw	low i2printRTC@month
 18541  002F14  6E01               	movwf	i2strcpy@to,c
 18542  002F16  0E00               	movlw	high i2printRTC@month
 18543  002F18  6E02               	movwf	i2strcpy@to+1,c
 18544  002F1A  0ECB               	movlw	low STR_9
 18545  002F1C  6E03               	movwf	i2strcpy@from,c
 18546  002F1E  0EFF               	movlw	high STR_9
 18547  002F20  6E04               	movwf	i2strcpy@from+1,c
 18548  002F22  EC28  F026         	call	i2_strcpy	;wreg free
 18549                           
 18550                           ;RTC.c: 77: break;
 18551  002F26  D09B               	goto	i2l6714
 18552  002F28                     i2l6690:
 18553                           
 18554                           ;RTC.c: 79: strcpy(month, "MAR");
 18555  002F28  0E3D               	movlw	low i2printRTC@month
 18556  002F2A  6E01               	movwf	i2strcpy@to,c
 18557  002F2C  0E00               	movlw	high i2printRTC@month
 18558  002F2E  6E02               	movwf	i2strcpy@to+1,c
 18559  002F30  0EE7               	movlw	low STR_10
 18560  002F32  6E03               	movwf	i2strcpy@from,c
 18561  002F34  0EFF               	movlw	high STR_10
 18562  002F36  6E04               	movwf	i2strcpy@from+1,c
 18563  002F38  EC28  F026         	call	i2_strcpy	;wreg free
 18564                           
 18565                           ;RTC.c: 80: break;
 18566  002F3C  D090               	goto	i2l6714
 18567  002F3E                     i2l6692:
 18568                           
 18569                           ;RTC.c: 82: strcpy(month, "APR");
 18570  002F3E  0E3D               	movlw	low i2printRTC@month
 18571  002F40  6E01               	movwf	i2strcpy@to,c
 18572  002F42  0E00               	movlw	high i2printRTC@month
 18573  002F44  6E02               	movwf	i2strcpy@to+1,c
 18574  002F46  0EEB               	movlw	low STR_11
 18575  002F48  6E03               	movwf	i2strcpy@from,c
 18576  002F4A  0EFF               	movlw	high STR_11
 18577  002F4C  6E04               	movwf	i2strcpy@from+1,c
 18578  002F4E  EC28  F026         	call	i2_strcpy	;wreg free
 18579                           
 18580                           ;RTC.c: 83: break;
 18581  002F52  D085               	goto	i2l6714
 18582  002F54                     i2l6694:
 18583                           
 18584                           ;RTC.c: 85: strcpy(month, "MAY");
 18585  002F54  0E3D               	movlw	low i2printRTC@month
 18586  002F56  6E01               	movwf	i2strcpy@to,c
 18587  002F58  0E00               	movlw	high i2printRTC@month
 18588  002F5A  6E02               	movwf	i2strcpy@to+1,c
 18589  002F5C  0EFB               	movlw	low STR_12
 18590  002F5E  6E03               	movwf	i2strcpy@from,c
 18591  002F60  0EFF               	movlw	high STR_12
 18592  002F62  6E04               	movwf	i2strcpy@from+1,c
 18593  002F64  EC28  F026         	call	i2_strcpy	;wreg free
 18594                           
 18595                           ;RTC.c: 86: break;
 18596  002F68  D07A               	goto	i2l6714
 18597  002F6A                     i2l6696:
 18598                           
 18599                           ;RTC.c: 88: strcpy(month, "JUN");
 18600  002F6A  0E3D               	movlw	low i2printRTC@month
 18601  002F6C  6E01               	movwf	i2strcpy@to,c
 18602  002F6E  0E00               	movlw	high i2printRTC@month
 18603  002F70  6E02               	movwf	i2strcpy@to+1,c
 18604  002F72  0EDF               	movlw	low STR_13
 18605  002F74  6E03               	movwf	i2strcpy@from,c
 18606  002F76  0EFF               	movlw	high STR_13
 18607  002F78  6E04               	movwf	i2strcpy@from+1,c
 18608  002F7A  EC28  F026         	call	i2_strcpy	;wreg free
 18609                           
 18610                           ;RTC.c: 89: break;
 18611  002F7E  D06F               	goto	i2l6714
 18612  002F80                     i2l6698:
 18613                           
 18614                           ;RTC.c: 91: strcpy(month, "JUL");
 18615  002F80  0E3D               	movlw	low i2printRTC@month
 18616  002F82  6E01               	movwf	i2strcpy@to,c
 18617  002F84  0E00               	movlw	high i2printRTC@month
 18618  002F86  6E02               	movwf	i2strcpy@to+1,c
 18619  002F88  0ED7               	movlw	low STR_14
 18620  002F8A  6E03               	movwf	i2strcpy@from,c
 18621  002F8C  0EFF               	movlw	high STR_14
 18622  002F8E  6E04               	movwf	i2strcpy@from+1,c
 18623  002F90  EC28  F026         	call	i2_strcpy	;wreg free
 18624                           
 18625                           ;RTC.c: 92: break;
 18626  002F94  D064               	goto	i2l6714
 18627  002F96                     i2l6700:
 18628                           
 18629                           ;RTC.c: 94: strcpy(month, "AUG");
 18630  002F96  0E3D               	movlw	low i2printRTC@month
 18631  002F98  6E01               	movwf	i2strcpy@to,c
 18632  002F9A  0E00               	movlw	high i2printRTC@month
 18633  002F9C  6E02               	movwf	i2strcpy@to+1,c
 18634  002F9E  0ED3               	movlw	low STR_15
 18635  002FA0  6E03               	movwf	i2strcpy@from,c
 18636  002FA2  0EFF               	movlw	high STR_15
 18637  002FA4  6E04               	movwf	i2strcpy@from+1,c
 18638  002FA6  EC28  F026         	call	i2_strcpy	;wreg free
 18639                           
 18640                           ;RTC.c: 95: break;
 18641  002FAA  D059               	goto	i2l6714
 18642  002FAC                     i2l6702:
 18643                           
 18644                           ;RTC.c: 97: strcpy(month, "SEP");
 18645  002FAC  0E3D               	movlw	low i2printRTC@month
 18646  002FAE  6E01               	movwf	i2strcpy@to,c
 18647  002FB0  0E00               	movlw	high i2printRTC@month
 18648  002FB2  6E02               	movwf	i2strcpy@to+1,c
 18649  002FB4  0EE3               	movlw	low STR_16
 18650  002FB6  6E03               	movwf	i2strcpy@from,c
 18651  002FB8  0EFF               	movlw	high STR_16
 18652  002FBA  6E04               	movwf	i2strcpy@from+1,c
 18653  002FBC  EC28  F026         	call	i2_strcpy	;wreg free
 18654                           
 18655                           ;RTC.c: 98: break;
 18656  002FC0  D04E               	goto	i2l6714
 18657  002FC2                     i2l6704:
 18658                           
 18659                           ;RTC.c: 100: strcpy(month, "OCT");
 18660  002FC2  0E3D               	movlw	low i2printRTC@month
 18661  002FC4  6E01               	movwf	i2strcpy@to,c
 18662  002FC6  0E00               	movlw	high i2printRTC@month
 18663  002FC8  6E02               	movwf	i2strcpy@to+1,c
 18664  002FCA  0EF3               	movlw	low STR_17
 18665  002FCC  6E03               	movwf	i2strcpy@from,c
 18666  002FCE  0EFF               	movlw	high STR_17
 18667  002FD0  6E04               	movwf	i2strcpy@from+1,c
 18668  002FD2  EC28  F026         	call	i2_strcpy	;wreg free
 18669                           
 18670                           ;RTC.c: 101: break;
 18671  002FD6  D043               	goto	i2l6714
 18672  002FD8                     i2l6706:
 18673                           
 18674                           ;RTC.c: 103: strcpy(month, "NOV");
 18675  002FD8  0E3D               	movlw	low i2printRTC@month
 18676  002FDA  6E01               	movwf	i2strcpy@to,c
 18677  002FDC  0E00               	movlw	high i2printRTC@month
 18678  002FDE  6E02               	movwf	i2strcpy@to+1,c
 18679  002FE0  0EF7               	movlw	low STR_18
 18680  002FE2  6E03               	movwf	i2strcpy@from,c
 18681  002FE4  0EFF               	movlw	high STR_18
 18682  002FE6  6E04               	movwf	i2strcpy@from+1,c
 18683  002FE8  EC28  F026         	call	i2_strcpy	;wreg free
 18684                           
 18685                           ;RTC.c: 104: break;
 18686  002FEC  D038               	goto	i2l6714
 18687  002FEE                     i2l6708:
 18688                           
 18689                           ;RTC.c: 106: strcpy(month, "DEC");
 18690  002FEE  0E3D               	movlw	low i2printRTC@month
 18691  002FF0  6E01               	movwf	i2strcpy@to,c
 18692  002FF2  0E00               	movlw	high i2printRTC@month
 18693  002FF4  6E02               	movwf	i2strcpy@to+1,c
 18694  002FF6  0ECF               	movlw	low STR_19
 18695  002FF8  6E03               	movwf	i2strcpy@from,c
 18696  002FFA  0EFF               	movlw	high STR_19
 18697  002FFC  6E04               	movwf	i2strcpy@from+1,c
 18698  002FFE  EC28  F026         	call	i2_strcpy	;wreg free
 18699                           
 18700                           ;RTC.c: 108: }
 18701                           
 18702                           ;RTC.c: 107: break;
 18703  003002  D02D               	goto	i2l6714
 18704  003004                     i2l6712:
 18705  003004  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18706  003008  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18707                           
 18708                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18709                           ; Switch size 1, requested type "space"
 18710                           ; Number of cases is 1, Range of values is 0 to 0
 18711                           ; switch strategies available:
 18712                           ; Name         Instructions Cycles
 18713                           ; simple_byte            4     3 (average)
 18714                           ;	Chosen strategy is simple_byte
 18715  00300C  502B               	movf	??i2_printRTC+1,w,c
 18716  00300E  0A00               	xorlw	0	; case 0
 18717  003010  A4D8               	btfss	status,2,c
 18718  003012  D025               	goto	i2l6714
 18719                           
 18720                           ; Switch size 1, requested type "space"
 18721                           ; Number of cases is 12, Range of values is 1 to 12
 18722                           ; switch strategies available:
 18723                           ; Name         Instructions Cycles
 18724                           ; simple_byte           37    19 (average)
 18725                           ;	Chosen strategy is simple_byte
 18726  003014  502A               	movf	??i2_printRTC,w,c
 18727  003016  0A01               	xorlw	1	; case 1
 18728  003018  B4D8               	btfsc	status,2,c
 18729  00301A  D770               	goto	i2l6686
 18730  00301C  0A03               	xorlw	3	; case 2
 18731  00301E  B4D8               	btfsc	status,2,c
 18732  003020  D778               	goto	i2l6688
 18733  003022  0A01               	xorlw	1	; case 3
 18734  003024  B4D8               	btfsc	status,2,c
 18735  003026  D780               	goto	i2l6690
 18736  003028  0A07               	xorlw	7	; case 4
 18737  00302A  B4D8               	btfsc	status,2,c
 18738  00302C  D788               	goto	i2l6692
 18739  00302E  0A01               	xorlw	1	; case 5
 18740  003030  B4D8               	btfsc	status,2,c
 18741  003032  D790               	goto	i2l6694
 18742  003034  0A03               	xorlw	3	; case 6
 18743  003036  B4D8               	btfsc	status,2,c
 18744  003038  D798               	goto	i2l6696
 18745  00303A  0A01               	xorlw	1	; case 7
 18746  00303C  B4D8               	btfsc	status,2,c
 18747  00303E  D7A0               	goto	i2l6698
 18748  003040  0A0F               	xorlw	15	; case 8
 18749  003042  B4D8               	btfsc	status,2,c
 18750  003044  D7A8               	goto	i2l6700
 18751  003046  0A01               	xorlw	1	; case 9
 18752  003048  B4D8               	btfsc	status,2,c
 18753  00304A  D7B0               	goto	i2l6702
 18754  00304C  0A03               	xorlw	3	; case 10
 18755  00304E  B4D8               	btfsc	status,2,c
 18756  003050  D7B8               	goto	i2l6704
 18757  003052  0A01               	xorlw	1	; case 11
 18758  003054  B4D8               	btfsc	status,2,c
 18759  003056  D7C0               	goto	i2l6706
 18760  003058  0A07               	xorlw	7	; case 12
 18761  00305A  B4D8               	btfsc	status,2,c
 18762  00305C  D7C8               	goto	i2l6708
 18763  00305E                     i2l6714:
 18764                           
 18765                           ;RTC.c: 109: lcdInst(0b10000000);;
 18766  00305E  0E80               	movlw	128
 18767  003060  EC8B  F028         	call	i2_lcdInst
 18768                           
 18769                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18770  003064  0E0A               	movlw	low STR_21
 18771  003066  6E0D               	movwf	i2printf@f,c
 18772  003068  0EFB               	movlw	high STR_21
 18773  00306A  6E0E               	movwf	i2printf@f+1,c
 18774  00306C  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18775  003070  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18776  003074  0E3D               	movlw	low i2printRTC@month
 18777  003076  6E11               	movwf	?i2_printf+4,c
 18778  003078  0E00               	movlw	high i2printRTC@month
 18779  00307A  6E12               	movwf	?i2_printf+5,c
 18780  00307C  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18781  003080  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18782  003084  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18783  003088  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18784  00308C  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18785  003090  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18786  003094  ECC2  F00E         	call	i2_printf	;wreg free
 18787  003098  0012               	return		;funcret
 18788  00309A                     __end_ofi2_printRTC:
 18789                           	opt stack 0
 18790                           pclatu	equ	0xFFB
 18791                           pclath	equ	0xFFA
 18792                           tblptru	equ	0xFF8
 18793                           tblptrh	equ	0xFF7
 18794                           tblptrl	equ	0xFF6
 18795                           tablat	equ	0xFF5
 18796                           prodh	equ	0xFF4
 18797                           prodl	equ	0xFF3
 18798                           intcon	equ	0xFF2
 18799                           intcon2	equ	0xFF1
 18800                           intcon3	equ	0xFF0
 18801                           indf0	equ	0xFEF
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           postdec1	equ	0xFE5
 18807                           fsr1h	equ	0xFE2
 18808                           fsr1l	equ	0xFE1
 18809                           indf2	equ	0xFDF
 18810                           postinc2	equ	0xFDE
 18811                           postdec2	equ	0xFDD
 18812                           fsr2h	equ	0xFDA
 18813                           fsr2l	equ	0xFD9
 18814                           status	equ	0xFD8
 18815                           
 18816 ;; *************** function i2_strcpy *****************
 18817 ;; Defined at:
 18818 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18819 ;; Parameters:    Size  Location     Type
 18820 ;;  to              2    0[COMRAM] PTR unsigned char 
 18821 ;;		 -> printRTC@month(4), UI@month(4), 
 18822 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18823 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18824 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18825 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18826 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18827 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18828 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18829 ;;		 -> STR_8(4), 
 18830 ;; Auto vars:     Size  Location     Type
 18831 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18832 ;;		 -> printRTC@month(4), UI@month(4), 
 18833 ;; Return value:  Size  Location     Type
 18834 ;;                  2    0[COMRAM] PTR unsigned char 
 18835 ;; Registers used:
 18836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;Total ram usage:        6 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; This function calls:
 18849 ;;		Nothing
 18850 ;; This function is called by:
 18851 ;;		i2_printRTC
 18852 ;; This function uses a non-reentrant model
 18853 ;;
 18854                           
 18855                           	psect	text63
 18856  004C50                     __ptext63:
 18857                           	opt stack 0
 18858  004C50                     i2_strcpy:
 18859                           	opt stack 20
 18860                           
 18861                           ;incstack = 0
 18862  004C50  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18863  004C54  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18864  004C58  D004               	goto	i2l6338
 18865  004C5A                     i2l6336:
 18866  004C5A  4A05               	infsnz	i2strcpy@cp,f,c
 18867  004C5C  2A06               	incf	i2strcpy@cp+1,f,c
 18868  004C5E  4A03               	infsnz	i2strcpy@from,f,c
 18869  004C60  2A04               	incf	i2strcpy@from+1,f,c
 18870  004C62                     i2l6338:
 18871  004C62  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18872  004C66  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18873  004C6A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18874  004C6A  6AF8               	clrf	tblptru,c
 18875  004C6C                     	endif
 18876  004C6C                     	if	0	;tblptru may be non-zero
 18877  004C6C                     	endif
 18878  004C6C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18879  004C70  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18880  004C74  0008               	tblrd		*
 18881  004C76  CFF5 FFDF          	movff	tablat,indf2
 18882  004C7A  50DF               	movf	indf2,w,c
 18883  004C7C  B4D8               	btfsc	status,2,c
 18884  004C7E  0012               	return	
 18885  004C80  D7EC               	goto	i2l6336
 18886  004C82                     __end_ofi2_strcpy:
 18887                           	opt stack 0
 18888                           pclatu	equ	0xFFB
 18889                           pclath	equ	0xFFA
 18890                           tblptru	equ	0xFF8
 18891                           tblptrh	equ	0xFF7
 18892                           tblptrl	equ	0xFF6
 18893                           tablat	equ	0xFF5
 18894                           prodh	equ	0xFF4
 18895                           prodl	equ	0xFF3
 18896                           intcon	equ	0xFF2
 18897                           intcon2	equ	0xFF1
 18898                           intcon3	equ	0xFF0
 18899                           indf0	equ	0xFEF
 18900                           postinc0	equ	0xFEE
 18901                           fsr0h	equ	0xFEA
 18902                           fsr0l	equ	0xFE9
 18903                           wreg	equ	0xFE8
 18904                           postdec1	equ	0xFE5
 18905                           fsr1h	equ	0xFE2
 18906                           fsr1l	equ	0xFE1
 18907                           indf2	equ	0xFDF
 18908                           postinc2	equ	0xFDE
 18909                           postdec2	equ	0xFDD
 18910                           fsr2h	equ	0xFDA
 18911                           fsr2l	equ	0xFD9
 18912                           status	equ	0xFD8
 18913                           
 18914 ;; *************** function _inputHandler *****************
 18915 ;; Defined at:
 18916 ;;		line 372 in file "UI.c"
 18917 ;; Parameters:    Size  Location     Type
 18918 ;;		None
 18919 ;; Auto vars:     Size  Location     Type
 18920 ;;		None
 18921 ;; Return value:  Size  Location     Type
 18922 ;;                  2   41[COMRAM] int 
 18923 ;; Registers used:
 18924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18925 ;; Tracked objects:
 18926 ;;		On entry : 0/0
 18927 ;;		On exit  : 0/0
 18928 ;;		Unchanged: 0/0
 18929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;Total ram usage:        4 bytes
 18935 ;; Hardware stack levels used:    1
 18936 ;; Hardware stack levels required when called:    4
 18937 ;; This function calls:
 18938 ;;		_change_state_to_logs_11
 18939 ;;		_change_state_to_logs_12
 18940 ;;		_change_state_to_logs_22
 18941 ;;		_change_state_to_logs_23
 18942 ;;		_change_state_to_logs_33
 18943 ;;		_change_state_to_logs_34
 18944 ;;		_change_state_to_menu_11
 18945 ;;		_change_state_to_menu_23
 18946 ;;		i2_change_state_to_menu_12
 18947 ;;		i2_change_state_to_menu_22
 18948 ;; This function is called by:
 18949 ;;		_updateMenu
 18950 ;; This function uses a non-reentrant model
 18951 ;;
 18952                           
 18953                           	psect	text64
 18954  0034DC                     __ptext64:
 18955                           	opt stack 0
 18956  0034DC                     _inputHandler:
 18957                           	opt stack 18
 18958                           
 18959                           ;UI.c: 377: if(firstboot){
 18960                           
 18961                           ;incstack = 0
 18962  0034DC  506D               	movf	_firstboot,w,c
 18963  0034DE  106E               	iorwf	_firstboot+1,w,c
 18964  0034E0  B4D8               	btfsc	status,2,c
 18965  0034E2  D00B               	goto	i2l6782
 18966                           
 18967                           ;UI.c: 378: change_state_to_menu_11();
 18968  0034E4  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 18969                           
 18970                           ;UI.c: 379: firstboot = 0;
 18971  0034E8  0E00               	movlw	0
 18972  0034EA  6E6E               	movwf	_firstboot+1,c
 18973  0034EC  0E00               	movlw	0
 18974  0034EE  6E6D               	movwf	_firstboot,c
 18975                           
 18976                           ;UI.c: 380: return 0;
 18977  0034F0  0E00               	movlw	0
 18978  0034F2  6E2B               	movwf	?_inputHandler+1,c
 18979  0034F4  0E00               	movlw	0
 18980  0034F6  6E2A               	movwf	?_inputHandler,c
 18981  0034F8  0012               	return	
 18982  0034FA                     i2l6782:
 18983                           
 18984                           ;UI.c: 381: }
 18985                           ;UI.c: 382: if (logstate){
 18986  0034FA  0100               	movlb	0	; () banked
 18987  0034FC  51F6               	movf	_logstate& (0+255),w,b
 18988  0034FE  0100               	movlb	0	; () banked
 18989  003500  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18990  003502  B4D8               	btfsc	status,2,c
 18991  003504  D0C7               	goto	i2l6900
 18992                           
 18993                           ; BSR set to: 0
 18994                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18995  003506  0E43               	movlw	67
 18996  003508  187D               	xorwf	_input,w,c	;volatile
 18997  00350A  A4D8               	btfss	status,2,c
 18998  00350C  D012               	goto	i2l6800
 18999                           
 19000                           ; BSR set to: 0
 19001  00350E  B281               	btfsc	3969,1,c	;volatile
 19002  003510  D009               	goto	i2l6792
 19003  003512  D00F               	goto	i2l6800
 19004  003514                     i2l6790:
 19005                           
 19006                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19007  003514  0E68               	movlw	104
 19008  003516  6E2C               	movwf	??_inputHandler& (0+255),c
 19009  003518  0EE4               	movlw	228
 19010  00351A                     i2u994_47:
 19011  00351A  2EE8               	decfsz	wreg,f,c
 19012  00351C  D7FE               	bra	i2u994_47
 19013  00351E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19014  003520  D7FC               	bra	i2u994_47
 19015  003522  D000               	nop2	
 19016  003524                     i2l6792:
 19017  003524  B281               	btfsc	3969,1,c	;volatile
 19018  003526  D7F6               	goto	i2l6790
 19019  003528                     i2l6794:
 19020                           
 19021                           ;UI.c: 387: }
 19022                           ;UI.c: 388: return 0;
 19023  003528  0E00               	movlw	0
 19024  00352A  6E2B               	movwf	?_inputHandler+1,c
 19025  00352C  0E00               	movlw	0
 19026  00352E  6E2A               	movwf	?_inputHandler,c
 19027  003530  0012               	return	
 19028  003532                     i2l6800:
 19029                           
 19030                           ;UI.c: 390: else if (input == 'D'){
 19031  003532  0E44               	movlw	68
 19032  003534  187D               	xorwf	_input,w,c	;volatile
 19033  003536  A4D8               	btfss	status,2,c
 19034  003538  D7F7               	goto	i2l6794
 19035                           
 19036                           ;UI.c: 392: logstate = 0;
 19037  00353A  0E00               	movlw	0
 19038  00353C  0100               	movlb	0	; () banked
 19039  00353E  6FF7               	movwf	(_logstate+1)& (0+255),b
 19040  003540  0E00               	movlw	0
 19041  003542  6FF6               	movwf	_logstate& (0+255),b
 19042                           
 19043                           ;UI.c: 393: switch(cur_state){
 19044  003544  D012               	goto	i2l6818
 19045  003546                     i2l6804:
 19046                           
 19047                           ;UI.c: 395: change_state_to_logs_11();
 19048  003546  EC01  F027         	call	_change_state_to_logs_11	;wreg free
 19049                           
 19050                           ;UI.c: 396: break;
 19051  00354A  D7EE               	goto	i2l6794
 19052  00354C                     i2l6806:
 19053                           
 19054                           ;UI.c: 398: change_state_to_logs_12();
 19055  00354C  ECE9  F026         	call	_change_state_to_logs_12	;wreg free
 19056                           
 19057                           ;UI.c: 399: break;
 19058  003550  D7EB               	goto	i2l6794
 19059  003552                     i2l6808:
 19060                           
 19061                           ;UI.c: 401: change_state_to_logs_22();
 19062  003552  ECD1  F026         	call	_change_state_to_logs_22	;wreg free
 19063                           
 19064                           ;UI.c: 402: break;
 19065  003556  D7E8               	goto	i2l6794
 19066  003558                     i2l6810:
 19067                           
 19068                           ;UI.c: 404: change_state_to_logs_23();
 19069  003558  EC47  F027         	call	_change_state_to_logs_23	;wreg free
 19070                           
 19071                           ;UI.c: 405: break;
 19072  00355C  D7E5               	goto	i2l6794
 19073  00355E                     i2l6812:
 19074                           
 19075                           ;UI.c: 407: change_state_to_logs_33();
 19076  00355E  ECB9  F026         	call	_change_state_to_logs_33	;wreg free
 19077                           
 19078                           ;UI.c: 408: break;
 19079  003562  D7E2               	goto	i2l6794
 19080  003564                     i2l6814:
 19081                           
 19082                           ;UI.c: 410: change_state_to_logs_34();
 19083  003564  ECA1  F026         	call	_change_state_to_logs_34	;wreg free
 19084                           
 19085                           ;UI.c: 412: }
 19086                           
 19087                           ;UI.c: 411: break;
 19088  003568  D7DF               	goto	i2l6794
 19089  00356A                     i2l6818:
 19090  00356A  C0E6  F02C         	movff	_cur_state,??_inputHandler
 19091  00356E  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 19092                           
 19093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19094                           ; Switch size 1, requested type "space"
 19095                           ; Number of cases is 2, Range of values is 3 to 4
 19096                           ; switch strategies available:
 19097                           ; Name         Instructions Cycles
 19098                           ; simple_byte            7     4 (average)
 19099                           ;	Chosen strategy is simple_byte
 19100  003572  502D               	movf	??_inputHandler+1,w,c
 19101  003574  0A03               	xorlw	3	; case 3
 19102  003576  B4D8               	btfsc	status,2,c
 19103  003578  D004               	goto	i2l9436
 19104  00357A  0A07               	xorlw	7	; case 4
 19105  00357C  B4D8               	btfsc	status,2,c
 19106  00357E  D00F               	goto	i2l9438
 19107  003580  D7D3               	goto	i2l6794
 19108  003582                     i2l9436:
 19109                           
 19110                           ; Switch size 1, requested type "space"
 19111                           ; Number of cases is 4, Range of values is 243 to 255
 19112                           ; switch strategies available:
 19113                           ; Name         Instructions Cycles
 19114                           ; simple_byte           13     7 (average)
 19115                           ;	Chosen strategy is simple_byte
 19116  003582  502C               	movf	??_inputHandler,w,c
 19117  003584  0AF3               	xorlw	243	; case 243
 19118  003586  B4D8               	btfsc	status,2,c
 19119  003588  D7DE               	goto	i2l6804
 19120  00358A  0A07               	xorlw	7	; case 244
 19121  00358C  B4D8               	btfsc	status,2,c
 19122  00358E  D7DE               	goto	i2l6806
 19123  003590  0A0A               	xorlw	10	; case 254
 19124  003592  B4D8               	btfsc	status,2,c
 19125  003594  D7DE               	goto	i2l6808
 19126  003596  0A01               	xorlw	1	; case 255
 19127  003598  B4D8               	btfsc	status,2,c
 19128  00359A  D7DE               	goto	i2l6810
 19129  00359C  D7C5               	goto	i2l6794
 19130  00359E                     i2l9438:
 19131                           
 19132                           ; Switch size 1, requested type "space"
 19133                           ; Number of cases is 2, Range of values is 9 to 10
 19134                           ; switch strategies available:
 19135                           ; Name         Instructions Cycles
 19136                           ; simple_byte            7     4 (average)
 19137                           ;	Chosen strategy is simple_byte
 19138  00359E  502C               	movf	??_inputHandler,w,c
 19139  0035A0  0A09               	xorlw	9	; case 9
 19140  0035A2  B4D8               	btfsc	status,2,c
 19141  0035A4  D7DC               	goto	i2l6812
 19142  0035A6  0A03               	xorlw	3	; case 10
 19143  0035A8  B4D8               	btfsc	status,2,c
 19144  0035AA  D7DC               	goto	i2l6814
 19145  0035AC  D7BD               	goto	i2l6794
 19146  0035AE                     i2l6830:
 19147                           
 19148                           ;UI.c: 422: if(cur_state == 11){
 19149  0035AE  0E0B               	movlw	11
 19150  0035B0  0100               	movlb	0	; () banked
 19151  0035B2  19E6               	xorwf	_cur_state& (0+255),w,b
 19152  0035B4  0100               	movlb	0	; () banked
 19153  0035B6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19154  0035B8  A4D8               	btfss	status,2,c
 19155  0035BA  D005               	goto	i2l6838
 19156                           
 19157                           ; BSR set to: 0
 19158                           ;UI.c: 423: return 0;
 19159  0035BC  0E00               	movlw	0
 19160  0035BE  6E2B               	movwf	?_inputHandler+1,c
 19161  0035C0  0E00               	movlw	0
 19162  0035C2  6E2A               	movwf	?_inputHandler,c
 19163                           
 19164                           ; BSR set to: 0
 19165  0035C4  0012               	return	
 19166  0035C6                     i2l6838:
 19167                           
 19168                           ; BSR set to: 0
 19169                           ;UI.c: 425: else{
 19170                           ;UI.c: 426: change_state_to_menu_11();
 19171  0035C6  EC89  F026         	call	_change_state_to_menu_11	;wreg free
 19172                           
 19173                           ;UI.c: 427: }
 19174                           ;UI.c: 428: return 0;
 19175  0035CA  0E00               	movlw	0
 19176  0035CC  6E2B               	movwf	?_inputHandler+1,c
 19177  0035CE  0E00               	movlw	0
 19178  0035D0  6E2A               	movwf	?_inputHandler,c
 19179  0035D2  0012               	return	
 19180  0035D4                     i2l6844:
 19181                           
 19182                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19183  0035D4  0E16               	movlw	22
 19184  0035D6  0100               	movlb	0	; () banked
 19185  0035D8  19E6               	xorwf	_cur_state& (0+255),w,b
 19186  0035DA  0100               	movlb	0	; () banked
 19187  0035DC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19188  0035DE  B4D8               	btfsc	status,2,c
 19189  0035E0  D007               	goto	i2l6848
 19190                           
 19191                           ; BSR set to: 0
 19192  0035E2  0E0C               	movlw	12
 19193  0035E4  0100               	movlb	0	; () banked
 19194  0035E6  19E6               	xorwf	_cur_state& (0+255),w,b
 19195  0035E8  0100               	movlb	0	; () banked
 19196  0035EA  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19197  0035EC  A4D8               	btfss	status,2,c
 19198  0035EE  D005               	goto	i2l6854
 19199  0035F0                     i2l6848:
 19200                           
 19201                           ; BSR set to: 0
 19202                           ;UI.c: 431: return 0;
 19203  0035F0  0E00               	movlw	0
 19204  0035F2  6E2B               	movwf	?_inputHandler+1,c
 19205  0035F4  0E00               	movlw	0
 19206  0035F6  6E2A               	movwf	?_inputHandler,c
 19207                           
 19208                           ; BSR set to: 0
 19209  0035F8  0012               	return	
 19210  0035FA                     i2l6854:
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;UI.c: 433: else if(cur_state == 23){
 19214  0035FA  0E17               	movlw	23
 19215  0035FC  0100               	movlb	0	; () banked
 19216  0035FE  19E6               	xorwf	_cur_state& (0+255),w,b
 19217  003600  0100               	movlb	0	; () banked
 19218  003602  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19219  003604  A4D8               	btfss	status,2,c
 19220  003606  D003               	goto	i2l6858
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;UI.c: 434: change_state_to_menu_22();
 19224  003608  EC41  F026         	call	i2_change_state_to_menu_22	;wreg free
 19225                           
 19226                           ;UI.c: 435: }
 19227  00360C  D002               	goto	i2l6860
 19228  00360E                     i2l6858:
 19229                           
 19230                           ;UI.c: 436: else{
 19231                           ;UI.c: 437: change_state_to_menu_12();
 19232  00360E  EC59  F026         	call	i2_change_state_to_menu_12	;wreg free
 19233  003612                     i2l6860:
 19234                           
 19235                           ;UI.c: 438: }
 19236                           ;UI.c: 439: return 0;
 19237  003612  0E00               	movlw	0
 19238  003614  6E2B               	movwf	?_inputHandler+1,c
 19239  003616  0E00               	movlw	0
 19240  003618  6E2A               	movwf	?_inputHandler,c
 19241  00361A  0012               	return	
 19242  00361C                     i2l6864:
 19243                           
 19244                           ;UI.c: 441: if(cur_state == 23){
 19245  00361C  0E17               	movlw	23
 19246  00361E  0100               	movlb	0	; () banked
 19247  003620  19E6               	xorwf	_cur_state& (0+255),w,b
 19248  003622  0100               	movlb	0	; () banked
 19249  003624  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19250  003626  A4D8               	btfss	status,2,c
 19251  003628  D005               	goto	i2l6872
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;UI.c: 442: return 0;
 19255  00362A  0E00               	movlw	0
 19256  00362C  6E2B               	movwf	?_inputHandler+1,c
 19257  00362E  0E00               	movlw	0
 19258  003630  6E2A               	movwf	?_inputHandler,c
 19259                           
 19260                           ; BSR set to: 0
 19261  003632  0012               	return	
 19262  003634                     i2l6872:
 19263                           
 19264                           ; BSR set to: 0
 19265                           ;UI.c: 444: else{
 19266                           ;UI.c: 445: change_state_to_menu_23();
 19267  003634  EC71  F026         	call	_change_state_to_menu_23	;wreg free
 19268                           
 19269                           ;UI.c: 446: }
 19270                           ;UI.c: 447: return 0;
 19271  003638  0E00               	movlw	0
 19272  00363A  6E2B               	movwf	?_inputHandler+1,c
 19273  00363C  0E00               	movlw	0
 19274  00363E  6E2A               	movwf	?_inputHandler,c
 19275  003640  0012               	return	
 19276  003642                     i2l6878:
 19277                           
 19278                           ;UI.c: 450: up = 1;
 19279  003642  0E00               	movlw	0
 19280  003644  6E78               	movwf	_up+1,c
 19281  003646  0E01               	movlw	1
 19282  003648  6E77               	movwf	_up,c
 19283                           
 19284                           ;UI.c: 451: return 1;
 19285  00364A  0E00               	movlw	0
 19286  00364C  6E2B               	movwf	?_inputHandler+1,c
 19287  00364E  0E01               	movlw	1
 19288  003650  6E2A               	movwf	?_inputHandler,c
 19289  003652  0012               	return	
 19290  003654                     i2l6882:
 19291                           
 19292                           ;UI.c: 453: down = 1;
 19293  003654  0E00               	movlw	0
 19294  003656  6E60               	movwf	_down+1,c
 19295  003658  0E01               	movlw	1
 19296  00365A  6E5F               	movwf	_down,c
 19297                           
 19298                           ;UI.c: 454: return 1;
 19299  00365C  0E00               	movlw	0
 19300  00365E  6E2B               	movwf	?_inputHandler+1,c
 19301  003660  0E01               	movlw	1
 19302  003662  6E2A               	movwf	?_inputHandler,c
 19303  003664  0012               	return	
 19304  003666                     i2l6886:
 19305                           
 19306                           ;UI.c: 456: enter = 1;
 19307  003666  0E00               	movlw	0
 19308  003668  6E62               	movwf	_enter+1,c
 19309  00366A  0E01               	movlw	1
 19310  00366C  6E61               	movwf	_enter,c
 19311                           
 19312                           ;UI.c: 457: return 1;
 19313  00366E  0E00               	movlw	0
 19314  003670  6E2B               	movwf	?_inputHandler+1,c
 19315  003672  0E01               	movlw	1
 19316  003674  6E2A               	movwf	?_inputHandler,c
 19317  003676  0012               	return	
 19318  003678                     i2l6890:
 19319                           
 19320                           ;UI.c: 459: back = 1;
 19321  003678  0E00               	movlw	0
 19322  00367A  6E5C               	movwf	_back+1,c
 19323  00367C  0E01               	movlw	1
 19324  00367E  6E5B               	movwf	_back,c
 19325                           
 19326                           ;UI.c: 460: return 1;
 19327  003680  0E00               	movlw	0
 19328  003682  6E2B               	movwf	?_inputHandler+1,c
 19329  003684  0E01               	movlw	1
 19330  003686  6E2A               	movwf	?_inputHandler,c
 19331  003688  0012               	return	
 19332  00368A                     i2l6894:
 19333                           
 19334                           ;UI.c: 463: return 1;
 19335  00368A  0E00               	movlw	0
 19336  00368C  6E2B               	movwf	?_inputHandler+1,c
 19337  00368E  0E01               	movlw	1
 19338  003690  6E2A               	movwf	?_inputHandler,c
 19339                           
 19340                           ;UI.c: 464: }
 19341  003692  0012               	return	
 19342  003694                     i2l6900:
 19343  003694  507D               	movf	_input,w,c	;volatile
 19344                           
 19345                           ; Switch size 1, requested type "space"
 19346                           ; Number of cases is 7, Range of values is 49 to 68
 19347                           ; switch strategies available:
 19348                           ; Name         Instructions Cycles
 19349                           ; simple_byte           22    12 (average)
 19350                           ;	Chosen strategy is simple_byte
 19351  003696  0A31               	xorlw	49	; case 49
 19352  003698  B4D8               	btfsc	status,2,c
 19353  00369A  D789               	goto	i2l6830
 19354  00369C  0A03               	xorlw	3	; case 50
 19355  00369E  B4D8               	btfsc	status,2,c
 19356  0036A0  D799               	goto	i2l6844
 19357  0036A2  0A01               	xorlw	1	; case 51
 19358  0036A4  B4D8               	btfsc	status,2,c
 19359  0036A6  D7BA               	goto	i2l6864
 19360  0036A8  0A72               	xorlw	114	; case 65
 19361  0036AA  B4D8               	btfsc	status,2,c
 19362  0036AC  D7CA               	goto	i2l6878
 19363  0036AE  0A03               	xorlw	3	; case 66
 19364  0036B0  B4D8               	btfsc	status,2,c
 19365  0036B2  D7D0               	goto	i2l6882
 19366  0036B4  0A01               	xorlw	1	; case 67
 19367  0036B6  B4D8               	btfsc	status,2,c
 19368  0036B8  D7D6               	goto	i2l6886
 19369  0036BA  0A07               	xorlw	7	; case 68
 19370  0036BC  B4D8               	btfsc	status,2,c
 19371  0036BE  D7DC               	goto	i2l6890
 19372  0036C0  D7E4               	goto	i2l6894
 19373  0036C2                     __end_of_inputHandler:
 19374                           	opt stack 0
 19375                           pclatu	equ	0xFFB
 19376                           pclath	equ	0xFFA
 19377                           tblptru	equ	0xFF8
 19378                           tblptrh	equ	0xFF7
 19379                           tblptrl	equ	0xFF6
 19380                           tablat	equ	0xFF5
 19381                           prodh	equ	0xFF4
 19382                           prodl	equ	0xFF3
 19383                           intcon	equ	0xFF2
 19384                           intcon2	equ	0xFF1
 19385                           intcon3	equ	0xFF0
 19386                           indf0	equ	0xFEF
 19387                           postinc0	equ	0xFEE
 19388                           fsr0h	equ	0xFEA
 19389                           fsr0l	equ	0xFE9
 19390                           wreg	equ	0xFE8
 19391                           postdec1	equ	0xFE5
 19392                           fsr1h	equ	0xFE2
 19393                           fsr1l	equ	0xFE1
 19394                           indf2	equ	0xFDF
 19395                           postinc2	equ	0xFDE
 19396                           postdec2	equ	0xFDD
 19397                           fsr2h	equ	0xFDA
 19398                           fsr2l	equ	0xFD9
 19399                           status	equ	0xFD8
 19400                           
 19401 ;; *************** function i2_change_state_to_menu_22 *****************
 19402 ;; Defined at:
 19403 ;;		line 498 in file "UI.c"
 19404 ;; Parameters:    Size  Location     Type
 19405 ;;		None
 19406 ;; Auto vars:     Size  Location     Type
 19407 ;;		None
 19408 ;; Return value:  Size  Location     Type
 19409 ;;                  1    wreg      void 
 19410 ;; Registers used:
 19411 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19412 ;; Tracked objects:
 19413 ;;		On entry : 0/0
 19414 ;;		On exit  : 0/0
 19415 ;;		Unchanged: 0/0
 19416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;Total ram usage:        0 bytes
 19422 ;; Hardware stack levels used:    1
 19423 ;; Hardware stack levels required when called:    3
 19424 ;; This function calls:
 19425 ;;		i2_lcdInst
 19426 ;;		i2_printf
 19427 ;; This function is called by:
 19428 ;;		_updateMenu
 19429 ;;		_inputHandler
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           	psect	text65
 19434  004C82                     __ptext65:
 19435                           	opt stack 0
 19436  004C82                     i2_change_state_to_menu_22:
 19437                           	opt stack 19
 19438                           
 19439                           ;UI.c: 499: cur_state = 22;
 19440                           
 19441                           ;incstack = 0
 19442  004C82  0E00               	movlw	0
 19443  004C84  0100               	movlb	0	; () banked
 19444  004C86  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19445  004C88  0E16               	movlw	22
 19446  004C8A  6FE6               	movwf	_cur_state& (0+255),b
 19447                           
 19448                           ; BSR set to: 0
 19449                           ;UI.c: 501: lcdInst(0b10000000);;
 19450  004C8C  0E80               	movlw	128
 19451  004C8E  EC8B  F028         	call	i2_lcdInst
 19452                           
 19453                           ;UI.c: 502: printf("2. SORT        <");
 19454  004C92  0EC4               	movlw	low STR_34
 19455  004C94  6E0D               	movwf	i2printf@f,c
 19456  004C96  0EFD               	movlw	high STR_34
 19457  004C98  6E0E               	movwf	i2printf@f+1,c
 19458  004C9A  ECC2  F00E         	call	i2_printf	;wreg free
 19459                           
 19460                           ;UI.c: 503: lcdInst(0b11000000);;
 19461  004C9E  0EC0               	movlw	192
 19462  004CA0  EC8B  F028         	call	i2_lcdInst
 19463                           
 19464                           ;UI.c: 504: printf("3. LOGS         ");
 19465  004CA4  0E09               	movlw	low STR_36
 19466  004CA6  6E0D               	movwf	i2printf@f,c
 19467  004CA8  0EFD               	movlw	high STR_36
 19468  004CAA  6E0E               	movwf	i2printf@f+1,c
 19469  004CAC  ECC2  F00E         	call	i2_printf	;wreg free
 19470  004CB0  0012               	return		;funcret
 19471  004CB2                     __end_ofi2_change_state_to_menu_22:
 19472                           	opt stack 0
 19473                           pclatu	equ	0xFFB
 19474                           pclath	equ	0xFFA
 19475                           tblptru	equ	0xFF8
 19476                           tblptrh	equ	0xFF7
 19477                           tblptrl	equ	0xFF6
 19478                           tablat	equ	0xFF5
 19479                           prodh	equ	0xFF4
 19480                           prodl	equ	0xFF3
 19481                           intcon	equ	0xFF2
 19482                           intcon2	equ	0xFF1
 19483                           intcon3	equ	0xFF0
 19484                           indf0	equ	0xFEF
 19485                           postinc0	equ	0xFEE
 19486                           fsr0h	equ	0xFEA
 19487                           fsr0l	equ	0xFE9
 19488                           wreg	equ	0xFE8
 19489                           postdec1	equ	0xFE5
 19490                           fsr1h	equ	0xFE2
 19491                           fsr1l	equ	0xFE1
 19492                           indf2	equ	0xFDF
 19493                           postinc2	equ	0xFDE
 19494                           postdec2	equ	0xFDD
 19495                           fsr2h	equ	0xFDA
 19496                           fsr2l	equ	0xFD9
 19497                           status	equ	0xFD8
 19498                           
 19499 ;; *************** function i2_change_state_to_menu_12 *****************
 19500 ;; Defined at:
 19501 ;;		line 490 in file "UI.c"
 19502 ;; Parameters:    Size  Location     Type
 19503 ;;		None
 19504 ;; Auto vars:     Size  Location     Type
 19505 ;;		None
 19506 ;; Return value:  Size  Location     Type
 19507 ;;                  1    wreg      void 
 19508 ;; Registers used:
 19509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19510 ;; Tracked objects:
 19511 ;;		On entry : 0/0
 19512 ;;		On exit  : 0/0
 19513 ;;		Unchanged: 0/0
 19514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;Total ram usage:        0 bytes
 19520 ;; Hardware stack levels used:    1
 19521 ;; Hardware stack levels required when called:    3
 19522 ;; This function calls:
 19523 ;;		i2_lcdInst
 19524 ;;		i2_printf
 19525 ;; This function is called by:
 19526 ;;		_updateMenu
 19527 ;;		_inputHandler
 19528 ;; This function uses a non-reentrant model
 19529 ;;
 19530                           
 19531                           	psect	text66
 19532  004CB2                     __ptext66:
 19533                           	opt stack 0
 19534  004CB2                     i2_change_state_to_menu_12:
 19535                           	opt stack 19
 19536                           
 19537                           ;UI.c: 491: cur_state = 12;
 19538                           
 19539                           ;incstack = 0
 19540  004CB2  0E00               	movlw	0
 19541  004CB4  0100               	movlb	0	; () banked
 19542  004CB6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19543  004CB8  0E0C               	movlw	12
 19544  004CBA  6FE6               	movwf	_cur_state& (0+255),b
 19545                           
 19546                           ; BSR set to: 0
 19547                           ;UI.c: 493: lcdInst(0b10000000);;
 19548  004CBC  0E80               	movlw	128
 19549  004CBE  EC8B  F028         	call	i2_lcdInst
 19550                           
 19551                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19552  004CC2  0E2B               	movlw	low STR_33
 19553  004CC4  6E0D               	movwf	i2printf@f,c
 19554  004CC6  0EFD               	movlw	high STR_33
 19555  004CC8  6E0E               	movwf	i2printf@f+1,c
 19556  004CCA  ECC2  F00E         	call	i2_printf	;wreg free
 19557                           
 19558                           ;UI.c: 495: lcdInst(0b11000000);;
 19559  004CCE  0EC0               	movlw	192
 19560  004CD0  EC8B  F028         	call	i2_lcdInst
 19561                           
 19562                           ;UI.c: 496: printf("2. SORT        <");
 19563  004CD4  0EC4               	movlw	low STR_34
 19564  004CD6  6E0D               	movwf	i2printf@f,c
 19565  004CD8  0EFD               	movlw	high STR_34
 19566  004CDA  6E0E               	movwf	i2printf@f+1,c
 19567  004CDC  ECC2  F00E         	call	i2_printf	;wreg free
 19568  004CE0  0012               	return		;funcret
 19569  004CE2                     __end_ofi2_change_state_to_menu_12:
 19570                           	opt stack 0
 19571                           pclatu	equ	0xFFB
 19572                           pclath	equ	0xFFA
 19573                           tblptru	equ	0xFF8
 19574                           tblptrh	equ	0xFF7
 19575                           tblptrl	equ	0xFF6
 19576                           tablat	equ	0xFF5
 19577                           prodh	equ	0xFF4
 19578                           prodl	equ	0xFF3
 19579                           intcon	equ	0xFF2
 19580                           intcon2	equ	0xFF1
 19581                           intcon3	equ	0xFF0
 19582                           indf0	equ	0xFEF
 19583                           postinc0	equ	0xFEE
 19584                           fsr0h	equ	0xFEA
 19585                           fsr0l	equ	0xFE9
 19586                           wreg	equ	0xFE8
 19587                           postdec1	equ	0xFE5
 19588                           fsr1h	equ	0xFE2
 19589                           fsr1l	equ	0xFE1
 19590                           indf2	equ	0xFDF
 19591                           postinc2	equ	0xFDE
 19592                           postdec2	equ	0xFDD
 19593                           fsr2h	equ	0xFDA
 19594                           fsr2l	equ	0xFD9
 19595                           status	equ	0xFD8
 19596                           
 19597 ;; *************** function _change_state_to_menu_23 *****************
 19598 ;; Defined at:
 19599 ;;		line 506 in file "UI.c"
 19600 ;; Parameters:    Size  Location     Type
 19601 ;;		None
 19602 ;; Auto vars:     Size  Location     Type
 19603 ;;		None
 19604 ;; Return value:  Size  Location     Type
 19605 ;;                  1    wreg      void 
 19606 ;; Registers used:
 19607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19608 ;; Tracked objects:
 19609 ;;		On entry : 0/0
 19610 ;;		On exit  : 0/0
 19611 ;;		Unchanged: 0/0
 19612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;Total ram usage:        0 bytes
 19618 ;; Hardware stack levels used:    1
 19619 ;; Hardware stack levels required when called:    3
 19620 ;; This function calls:
 19621 ;;		i2_lcdInst
 19622 ;;		i2_printf
 19623 ;; This function is called by:
 19624 ;;		_updateMenu
 19625 ;;		_inputHandler
 19626 ;; This function uses a non-reentrant model
 19627 ;;
 19628                           
 19629                           	psect	text67
 19630  004CE2                     __ptext67:
 19631                           	opt stack 0
 19632  004CE2                     _change_state_to_menu_23:
 19633                           	opt stack 18
 19634                           
 19635                           ;UI.c: 507: cur_state = 23;
 19636                           
 19637                           ;incstack = 0
 19638  004CE2  0E00               	movlw	0
 19639  004CE4  0100               	movlb	0	; () banked
 19640  004CE6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19641  004CE8  0E17               	movlw	23
 19642  004CEA  6FE6               	movwf	_cur_state& (0+255),b
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;UI.c: 509: lcdInst(0b10000000);;
 19646  004CEC  0E80               	movlw	128
 19647  004CEE  EC8B  F028         	call	i2_lcdInst
 19648                           
 19649                           ;UI.c: 510: printf("2. SORT         ");
 19650  004CF2  0E1A               	movlw	low STR_32
 19651  004CF4  6E0D               	movwf	i2printf@f,c
 19652  004CF6  0EFD               	movlw	high STR_32
 19653  004CF8  6E0E               	movwf	i2printf@f+1,c
 19654  004CFA  ECC2  F00E         	call	i2_printf	;wreg free
 19655                           
 19656                           ;UI.c: 511: lcdInst(0b11000000);;
 19657  004CFE  0EC0               	movlw	192
 19658  004D00  EC8B  F028         	call	i2_lcdInst
 19659                           
 19660                           ;UI.c: 512: printf("3. LOGS        <");
 19661  004D04  0EB3               	movlw	low STR_38
 19662  004D06  6E0D               	movwf	i2printf@f,c
 19663  004D08  0EFD               	movlw	high STR_38
 19664  004D0A  6E0E               	movwf	i2printf@f+1,c
 19665  004D0C  ECC2  F00E         	call	i2_printf	;wreg free
 19666  004D10  0012               	return		;funcret
 19667  004D12                     __end_of_change_state_to_menu_23:
 19668                           	opt stack 0
 19669                           pclatu	equ	0xFFB
 19670                           pclath	equ	0xFFA
 19671                           tblptru	equ	0xFF8
 19672                           tblptrh	equ	0xFF7
 19673                           tblptrl	equ	0xFF6
 19674                           tablat	equ	0xFF5
 19675                           prodh	equ	0xFF4
 19676                           prodl	equ	0xFF3
 19677                           intcon	equ	0xFF2
 19678                           intcon2	equ	0xFF1
 19679                           intcon3	equ	0xFF0
 19680                           indf0	equ	0xFEF
 19681                           postinc0	equ	0xFEE
 19682                           fsr0h	equ	0xFEA
 19683                           fsr0l	equ	0xFE9
 19684                           wreg	equ	0xFE8
 19685                           postdec1	equ	0xFE5
 19686                           fsr1h	equ	0xFE2
 19687                           fsr1l	equ	0xFE1
 19688                           indf2	equ	0xFDF
 19689                           postinc2	equ	0xFDE
 19690                           postdec2	equ	0xFDD
 19691                           fsr2h	equ	0xFDA
 19692                           fsr2l	equ	0xFD9
 19693                           status	equ	0xFD8
 19694                           
 19695 ;; *************** function _change_state_to_menu_11 *****************
 19696 ;; Defined at:
 19697 ;;		line 482 in file "UI.c"
 19698 ;; Parameters:    Size  Location     Type
 19699 ;;		None
 19700 ;; Auto vars:     Size  Location     Type
 19701 ;;		None
 19702 ;; Return value:  Size  Location     Type
 19703 ;;                  1    wreg      void 
 19704 ;; Registers used:
 19705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19706 ;; Tracked objects:
 19707 ;;		On entry : 0/0
 19708 ;;		On exit  : 0/0
 19709 ;;		Unchanged: 0/0
 19710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19715 ;;Total ram usage:        0 bytes
 19716 ;; Hardware stack levels used:    1
 19717 ;; Hardware stack levels required when called:    3
 19718 ;; This function calls:
 19719 ;;		i2_lcdInst
 19720 ;;		i2_printf
 19721 ;; This function is called by:
 19722 ;;		_updateMenu
 19723 ;;		_inputHandler
 19724 ;; This function uses a non-reentrant model
 19725 ;;
 19726                           
 19727                           	psect	text68
 19728  004D12                     __ptext68:
 19729                           	opt stack 0
 19730  004D12                     _change_state_to_menu_11:
 19731                           	opt stack 18
 19732                           
 19733                           ;UI.c: 483: cur_state = 11;
 19734                           
 19735                           ;incstack = 0
 19736  004D12  0E00               	movlw	0
 19737  004D14  0100               	movlb	0	; () banked
 19738  004D16  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19739  004D18  0E0B               	movlw	11
 19740  004D1A  6FE6               	movwf	_cur_state& (0+255),b
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;UI.c: 485: lcdInst(0b10000000);;
 19744  004D1C  0E80               	movlw	128
 19745  004D1E  EC8B  F028         	call	i2_lcdInst
 19746                           
 19747                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19748  004D22  0ED5               	movlw	low STR_31
 19749  004D24  6E0D               	movwf	i2printf@f,c
 19750  004D26  0EFD               	movlw	high STR_31
 19751  004D28  6E0E               	movwf	i2printf@f+1,c
 19752  004D2A  ECC2  F00E         	call	i2_printf	;wreg free
 19753                           
 19754                           ;UI.c: 487: lcdInst(0b11000000);;
 19755  004D2E  0EC0               	movlw	192
 19756  004D30  EC8B  F028         	call	i2_lcdInst
 19757                           
 19758                           ;UI.c: 488: printf("2. SORT         ");
 19759  004D34  0E1A               	movlw	low STR_32
 19760  004D36  6E0D               	movwf	i2printf@f,c
 19761  004D38  0EFD               	movlw	high STR_32
 19762  004D3A  6E0E               	movwf	i2printf@f+1,c
 19763  004D3C  ECC2  F00E         	call	i2_printf	;wreg free
 19764  004D40  0012               	return		;funcret
 19765  004D42                     __end_of_change_state_to_menu_11:
 19766                           	opt stack 0
 19767                           pclatu	equ	0xFFB
 19768                           pclath	equ	0xFFA
 19769                           tblptru	equ	0xFF8
 19770                           tblptrh	equ	0xFF7
 19771                           tblptrl	equ	0xFF6
 19772                           tablat	equ	0xFF5
 19773                           prodh	equ	0xFF4
 19774                           prodl	equ	0xFF3
 19775                           intcon	equ	0xFF2
 19776                           intcon2	equ	0xFF1
 19777                           intcon3	equ	0xFF0
 19778                           indf0	equ	0xFEF
 19779                           postinc0	equ	0xFEE
 19780                           fsr0h	equ	0xFEA
 19781                           fsr0l	equ	0xFE9
 19782                           wreg	equ	0xFE8
 19783                           postdec1	equ	0xFE5
 19784                           fsr1h	equ	0xFE2
 19785                           fsr1l	equ	0xFE1
 19786                           indf2	equ	0xFDF
 19787                           postinc2	equ	0xFDE
 19788                           postdec2	equ	0xFDD
 19789                           fsr2h	equ	0xFDA
 19790                           fsr2l	equ	0xFD9
 19791                           status	equ	0xFD8
 19792                           
 19793 ;; *************** function _change_state_to_logs_34 *****************
 19794 ;; Defined at:
 19795 ;;		line 549 in file "UI.c"
 19796 ;; Parameters:    Size  Location     Type
 19797 ;;		None
 19798 ;; Auto vars:     Size  Location     Type
 19799 ;;		None
 19800 ;; Return value:  Size  Location     Type
 19801 ;;                  1    wreg      void 
 19802 ;; Registers used:
 19803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19804 ;; Tracked objects:
 19805 ;;		On entry : 0/0
 19806 ;;		On exit  : 0/0
 19807 ;;		Unchanged: 0/0
 19808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19813 ;;Total ram usage:        0 bytes
 19814 ;; Hardware stack levels used:    1
 19815 ;; Hardware stack levels required when called:    3
 19816 ;; This function calls:
 19817 ;;		i2_lcdInst
 19818 ;;		i2_printf
 19819 ;; This function is called by:
 19820 ;;		_updateMenu
 19821 ;;		_inputHandler
 19822 ;; This function uses a non-reentrant model
 19823 ;;
 19824                           
 19825                           	psect	text69
 19826  004D42                     __ptext69:
 19827                           	opt stack 0
 19828  004D42                     _change_state_to_logs_34:
 19829                           	opt stack 18
 19830                           
 19831                           ;UI.c: 550: cur_state = 1034;
 19832                           
 19833                           ;incstack = 0
 19834  004D42  0E04               	movlw	4
 19835  004D44  0100               	movlb	0	; () banked
 19836  004D46  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19837  004D48  0E0A               	movlw	10
 19838  004D4A  6FE6               	movwf	_cur_state& (0+255),b
 19839                           
 19840                           ; BSR set to: 0
 19841                           ;UI.c: 551: lcdInst(0b10000000);;
 19842  004D4C  0E80               	movlw	128
 19843  004D4E  EC8B  F028         	call	i2_lcdInst
 19844                           
 19845                           ;UI.c: 552: printf("LOG 3           ");
 19846  004D52  0EE7               	movlw	low STR_44
 19847  004D54  6E0D               	movwf	i2printf@f,c
 19848  004D56  0EFC               	movlw	high STR_44
 19849  004D58  6E0E               	movwf	i2printf@f+1,c
 19850  004D5A  ECC2  F00E         	call	i2_printf	;wreg free
 19851                           
 19852                           ;UI.c: 553: lcdInst(0b11000000);;
 19853  004D5E  0EC0               	movlw	192
 19854  004D60  EC8B  F028         	call	i2_lcdInst
 19855                           
 19856                           ;UI.c: 554: printf("LOG 4          <");
 19857  004D64  0EA2               	movlw	low STR_50
 19858  004D66  6E0D               	movwf	i2printf@f,c
 19859  004D68  0EFD               	movlw	high STR_50
 19860  004D6A  6E0E               	movwf	i2printf@f+1,c
 19861  004D6C  ECC2  F00E         	call	i2_printf	;wreg free
 19862  004D70  0012               	return		;funcret
 19863  004D72                     __end_of_change_state_to_logs_34:
 19864                           	opt stack 0
 19865                           pclatu	equ	0xFFB
 19866                           pclath	equ	0xFFA
 19867                           tblptru	equ	0xFF8
 19868                           tblptrh	equ	0xFF7
 19869                           tblptrl	equ	0xFF6
 19870                           tablat	equ	0xFF5
 19871                           prodh	equ	0xFF4
 19872                           prodl	equ	0xFF3
 19873                           intcon	equ	0xFF2
 19874                           intcon2	equ	0xFF1
 19875                           intcon3	equ	0xFF0
 19876                           indf0	equ	0xFEF
 19877                           postinc0	equ	0xFEE
 19878                           fsr0h	equ	0xFEA
 19879                           fsr0l	equ	0xFE9
 19880                           wreg	equ	0xFE8
 19881                           postdec1	equ	0xFE5
 19882                           fsr1h	equ	0xFE2
 19883                           fsr1l	equ	0xFE1
 19884                           indf2	equ	0xFDF
 19885                           postinc2	equ	0xFDE
 19886                           postdec2	equ	0xFDD
 19887                           fsr2h	equ	0xFDA
 19888                           fsr2l	equ	0xFD9
 19889                           status	equ	0xFD8
 19890                           
 19891 ;; *************** function _change_state_to_logs_33 *****************
 19892 ;; Defined at:
 19893 ;;		line 542 in file "UI.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;		None
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;		None
 19898 ;; Return value:  Size  Location     Type
 19899 ;;                  1    wreg      void 
 19900 ;; Registers used:
 19901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;Total ram usage:        0 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; Hardware stack levels required when called:    3
 19914 ;; This function calls:
 19915 ;;		i2_lcdInst
 19916 ;;		i2_printf
 19917 ;; This function is called by:
 19918 ;;		_updateMenu
 19919 ;;		_inputHandler
 19920 ;; This function uses a non-reentrant model
 19921 ;;
 19922                           
 19923                           	psect	text70
 19924  004D72                     __ptext70:
 19925                           	opt stack 0
 19926  004D72                     _change_state_to_logs_33:
 19927                           	opt stack 18
 19928                           
 19929                           ;UI.c: 543: cur_state = 1033;
 19930                           
 19931                           ;incstack = 0
 19932  004D72  0E04               	movlw	4
 19933  004D74  0100               	movlb	0	; () banked
 19934  004D76  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19935  004D78  0E09               	movlw	9
 19936  004D7A  6FE6               	movwf	_cur_state& (0+255),b
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;UI.c: 544: lcdInst(0b10000000);;
 19940  004D7C  0E80               	movlw	128
 19941  004D7E  EC8B  F028         	call	i2_lcdInst
 19942                           
 19943                           ;UI.c: 545: printf("LOG 3          <");
 19944  004D82  0E91               	movlw	low STR_46
 19945  004D84  6E0D               	movwf	i2printf@f,c
 19946  004D86  0EFD               	movlw	high STR_46
 19947  004D88  6E0E               	movwf	i2printf@f+1,c
 19948  004D8A  ECC2  F00E         	call	i2_printf	;wreg free
 19949                           
 19950                           ;UI.c: 546: lcdInst(0b11000000);;
 19951  004D8E  0EC0               	movlw	192
 19952  004D90  EC8B  F028         	call	i2_lcdInst
 19953                           
 19954                           ;UI.c: 547: printf("LOG 4           ");
 19955  004D94  0EF8               	movlw	low STR_48
 19956  004D96  6E0D               	movwf	i2printf@f,c
 19957  004D98  0EFC               	movlw	high STR_48
 19958  004D9A  6E0E               	movwf	i2printf@f+1,c
 19959  004D9C  ECC2  F00E         	call	i2_printf	;wreg free
 19960  004DA0  0012               	return		;funcret
 19961  004DA2                     __end_of_change_state_to_logs_33:
 19962                           	opt stack 0
 19963                           pclatu	equ	0xFFB
 19964                           pclath	equ	0xFFA
 19965                           tblptru	equ	0xFF8
 19966                           tblptrh	equ	0xFF7
 19967                           tblptrl	equ	0xFF6
 19968                           tablat	equ	0xFF5
 19969                           prodh	equ	0xFF4
 19970                           prodl	equ	0xFF3
 19971                           intcon	equ	0xFF2
 19972                           intcon2	equ	0xFF1
 19973                           intcon3	equ	0xFF0
 19974                           indf0	equ	0xFEF
 19975                           postinc0	equ	0xFEE
 19976                           fsr0h	equ	0xFEA
 19977                           fsr0l	equ	0xFE9
 19978                           wreg	equ	0xFE8
 19979                           postdec1	equ	0xFE5
 19980                           fsr1h	equ	0xFE2
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           fsr2h	equ	0xFDA
 19986                           fsr2l	equ	0xFD9
 19987                           status	equ	0xFD8
 19988                           
 19989 ;; *************** function _change_state_to_logs_23 *****************
 19990 ;; Defined at:
 19991 ;;		line 535 in file "UI.c"
 19992 ;; Parameters:    Size  Location     Type
 19993 ;;		None
 19994 ;; Auto vars:     Size  Location     Type
 19995 ;;		None
 19996 ;; Return value:  Size  Location     Type
 19997 ;;                  1    wreg      void 
 19998 ;; Registers used:
 19999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20000 ;; Tracked objects:
 20001 ;;		On entry : 0/0
 20002 ;;		On exit  : 0/0
 20003 ;;		Unchanged: 0/0
 20004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;Total ram usage:        0 bytes
 20010 ;; Hardware stack levels used:    1
 20011 ;; Hardware stack levels required when called:    3
 20012 ;; This function calls:
 20013 ;;		i2_lcdInst
 20014 ;;		i2_printf
 20015 ;; This function is called by:
 20016 ;;		_updateMenu
 20017 ;;		_inputHandler
 20018 ;; This function uses a non-reentrant model
 20019 ;;
 20020                           
 20021                           	psect	text71
 20022  004E8E                     __ptext71:
 20023                           	opt stack 0
 20024  004E8E                     _change_state_to_logs_23:
 20025                           	opt stack 18
 20026                           
 20027                           ;UI.c: 536: cur_state = 1023;
 20028                           
 20029                           ;incstack = 0
 20030  004E8E  0E03               	movlw	3
 20031  004E90  0100               	movlb	0	; () banked
 20032  004E92  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20033  004E94  69E6               	setf	_cur_state& (0+255),b
 20034                           
 20035                           ; BSR set to: 0
 20036                           ;UI.c: 537: lcdInst(0b10000000);;
 20037  004E96  0E80               	movlw	128
 20038  004E98  EC8B  F028         	call	i2_lcdInst
 20039                           
 20040                           ;UI.c: 538: printf("LOG 2           ");
 20041  004E9C  0ED6               	movlw	low STR_40
 20042  004E9E  6E0D               	movwf	i2printf@f,c
 20043  004EA0  0EFC               	movlw	high STR_40
 20044  004EA2  6E0E               	movwf	i2printf@f+1,c
 20045  004EA4  ECC2  F00E         	call	i2_printf	;wreg free
 20046                           
 20047                           ;UI.c: 539: lcdInst(0b11000000);;
 20048  004EA8  0EC0               	movlw	192
 20049  004EAA  EC8B  F028         	call	i2_lcdInst
 20050                           
 20051                           ;UI.c: 540: printf("LOG 3          <");
 20052  004EAE  0E91               	movlw	low STR_46
 20053  004EB0  6E0D               	movwf	i2printf@f,c
 20054  004EB2  0EFD               	movlw	high STR_46
 20055  004EB4  6E0E               	movwf	i2printf@f+1,c
 20056  004EB6  ECC2  F00E         	call	i2_printf	;wreg free
 20057  004EBA  0012               	return		;funcret
 20058  004EBC                     __end_of_change_state_to_logs_23:
 20059                           	opt stack 0
 20060                           pclatu	equ	0xFFB
 20061                           pclath	equ	0xFFA
 20062                           tblptru	equ	0xFF8
 20063                           tblptrh	equ	0xFF7
 20064                           tblptrl	equ	0xFF6
 20065                           tablat	equ	0xFF5
 20066                           prodh	equ	0xFF4
 20067                           prodl	equ	0xFF3
 20068                           intcon	equ	0xFF2
 20069                           intcon2	equ	0xFF1
 20070                           intcon3	equ	0xFF0
 20071                           indf0	equ	0xFEF
 20072                           postinc0	equ	0xFEE
 20073                           fsr0h	equ	0xFEA
 20074                           fsr0l	equ	0xFE9
 20075                           wreg	equ	0xFE8
 20076                           postdec1	equ	0xFE5
 20077                           fsr1h	equ	0xFE2
 20078                           fsr1l	equ	0xFE1
 20079                           indf2	equ	0xFDF
 20080                           postinc2	equ	0xFDE
 20081                           postdec2	equ	0xFDD
 20082                           fsr2h	equ	0xFDA
 20083                           fsr2l	equ	0xFD9
 20084                           status	equ	0xFD8
 20085                           
 20086 ;; *************** function _change_state_to_logs_22 *****************
 20087 ;; Defined at:
 20088 ;;		line 528 in file "UI.c"
 20089 ;; Parameters:    Size  Location     Type
 20090 ;;		None
 20091 ;; Auto vars:     Size  Location     Type
 20092 ;;		None
 20093 ;; Return value:  Size  Location     Type
 20094 ;;                  1    wreg      void 
 20095 ;; Registers used:
 20096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20097 ;; Tracked objects:
 20098 ;;		On entry : 0/0
 20099 ;;		On exit  : 0/0
 20100 ;;		Unchanged: 0/0
 20101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20106 ;;Total ram usage:        0 bytes
 20107 ;; Hardware stack levels used:    1
 20108 ;; Hardware stack levels required when called:    3
 20109 ;; This function calls:
 20110 ;;		i2_lcdInst
 20111 ;;		i2_printf
 20112 ;; This function is called by:
 20113 ;;		_updateMenu
 20114 ;;		_inputHandler
 20115 ;; This function uses a non-reentrant model
 20116 ;;
 20117                           
 20118                           	psect	text72
 20119  004DA2                     __ptext72:
 20120                           	opt stack 0
 20121  004DA2                     _change_state_to_logs_22:
 20122                           	opt stack 18
 20123                           
 20124                           ;UI.c: 529: cur_state = 1022;
 20125                           
 20126                           ;incstack = 0
 20127  004DA2  0E03               	movlw	3
 20128  004DA4  0100               	movlb	0	; () banked
 20129  004DA6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20130  004DA8  0EFE               	movlw	254
 20131  004DAA  6FE6               	movwf	_cur_state& (0+255),b
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;UI.c: 530: lcdInst(0b10000000);;
 20135  004DAC  0E80               	movlw	128
 20136  004DAE  EC8B  F028         	call	i2_lcdInst
 20137                           
 20138                           ;UI.c: 531: printf("LOG 2          <");
 20139  004DB2  0E80               	movlw	low STR_42
 20140  004DB4  6E0D               	movwf	i2printf@f,c
 20141  004DB6  0EFD               	movlw	high STR_42
 20142  004DB8  6E0E               	movwf	i2printf@f+1,c
 20143  004DBA  ECC2  F00E         	call	i2_printf	;wreg free
 20144                           
 20145                           ;UI.c: 532: lcdInst(0b11000000);;
 20146  004DBE  0EC0               	movlw	192
 20147  004DC0  EC8B  F028         	call	i2_lcdInst
 20148                           
 20149                           ;UI.c: 533: printf("LOG 3           ");
 20150  004DC4  0EE7               	movlw	low STR_44
 20151  004DC6  6E0D               	movwf	i2printf@f,c
 20152  004DC8  0EFC               	movlw	high STR_44
 20153  004DCA  6E0E               	movwf	i2printf@f+1,c
 20154  004DCC  ECC2  F00E         	call	i2_printf	;wreg free
 20155  004DD0  0012               	return		;funcret
 20156  004DD2                     __end_of_change_state_to_logs_22:
 20157                           	opt stack 0
 20158                           pclatu	equ	0xFFB
 20159                           pclath	equ	0xFFA
 20160                           tblptru	equ	0xFF8
 20161                           tblptrh	equ	0xFF7
 20162                           tblptrl	equ	0xFF6
 20163                           tablat	equ	0xFF5
 20164                           prodh	equ	0xFF4
 20165                           prodl	equ	0xFF3
 20166                           intcon	equ	0xFF2
 20167                           intcon2	equ	0xFF1
 20168                           intcon3	equ	0xFF0
 20169                           indf0	equ	0xFEF
 20170                           postinc0	equ	0xFEE
 20171                           fsr0h	equ	0xFEA
 20172                           fsr0l	equ	0xFE9
 20173                           wreg	equ	0xFE8
 20174                           postdec1	equ	0xFE5
 20175                           fsr1h	equ	0xFE2
 20176                           fsr1l	equ	0xFE1
 20177                           indf2	equ	0xFDF
 20178                           postinc2	equ	0xFDE
 20179                           postdec2	equ	0xFDD
 20180                           fsr2h	equ	0xFDA
 20181                           fsr2l	equ	0xFD9
 20182                           status	equ	0xFD8
 20183                           
 20184 ;; *************** function _change_state_to_logs_12 *****************
 20185 ;; Defined at:
 20186 ;;		line 521 in file "UI.c"
 20187 ;; Parameters:    Size  Location     Type
 20188 ;;		None
 20189 ;; Auto vars:     Size  Location     Type
 20190 ;;		None
 20191 ;; Return value:  Size  Location     Type
 20192 ;;                  1    wreg      void 
 20193 ;; Registers used:
 20194 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20195 ;; Tracked objects:
 20196 ;;		On entry : 0/0
 20197 ;;		On exit  : 0/0
 20198 ;;		Unchanged: 0/0
 20199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20204 ;;Total ram usage:        0 bytes
 20205 ;; Hardware stack levels used:    1
 20206 ;; Hardware stack levels required when called:    3
 20207 ;; This function calls:
 20208 ;;		i2_lcdInst
 20209 ;;		i2_printf
 20210 ;; This function is called by:
 20211 ;;		_updateMenu
 20212 ;;		_inputHandler
 20213 ;; This function uses a non-reentrant model
 20214 ;;
 20215                           
 20216                           	psect	text73
 20217  004DD2                     __ptext73:
 20218                           	opt stack 0
 20219  004DD2                     _change_state_to_logs_12:
 20220                           	opt stack 18
 20221                           
 20222                           ;UI.c: 522: cur_state = 1012;
 20223                           
 20224                           ;incstack = 0
 20225  004DD2  0E03               	movlw	3
 20226  004DD4  0100               	movlb	0	; () banked
 20227  004DD6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20228  004DD8  0EF4               	movlw	244
 20229  004DDA  6FE6               	movwf	_cur_state& (0+255),b
 20230                           
 20231                           ; BSR set to: 0
 20232                           ;UI.c: 523: lcdInst(0b10000000);;
 20233  004DDC  0E80               	movlw	128
 20234  004DDE  EC8B  F028         	call	i2_lcdInst
 20235                           
 20236                           ;UI.c: 524: printf("LOG 1           ");
 20237  004DE2  0EC5               	movlw	low STR_41
 20238  004DE4  6E0D               	movwf	i2printf@f,c
 20239  004DE6  0EFC               	movlw	high STR_41
 20240  004DE8  6E0E               	movwf	i2printf@f+1,c
 20241  004DEA  ECC2  F00E         	call	i2_printf	;wreg free
 20242                           
 20243                           ;UI.c: 525: lcdInst(0b11000000);;
 20244  004DEE  0EC0               	movlw	192
 20245  004DF0  EC8B  F028         	call	i2_lcdInst
 20246                           
 20247                           ;UI.c: 526: printf("LOG 2          <");
 20248  004DF4  0E80               	movlw	low STR_42
 20249  004DF6  6E0D               	movwf	i2printf@f,c
 20250  004DF8  0EFD               	movlw	high STR_42
 20251  004DFA  6E0E               	movwf	i2printf@f+1,c
 20252  004DFC  ECC2  F00E         	call	i2_printf	;wreg free
 20253  004E00  0012               	return		;funcret
 20254  004E02                     __end_of_change_state_to_logs_12:
 20255                           	opt stack 0
 20256                           pclatu	equ	0xFFB
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           intcon2	equ	0xFF1
 20266                           intcon3	equ	0xFF0
 20267                           indf0	equ	0xFEF
 20268                           postinc0	equ	0xFEE
 20269                           fsr0h	equ	0xFEA
 20270                           fsr0l	equ	0xFE9
 20271                           wreg	equ	0xFE8
 20272                           postdec1	equ	0xFE5
 20273                           fsr1h	equ	0xFE2
 20274                           fsr1l	equ	0xFE1
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           fsr2h	equ	0xFDA
 20279                           fsr2l	equ	0xFD9
 20280                           status	equ	0xFD8
 20281                           
 20282 ;; *************** function _change_state_to_logs_11 *****************
 20283 ;; Defined at:
 20284 ;;		line 514 in file "UI.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;		None
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;		None
 20289 ;; Return value:  Size  Location     Type
 20290 ;;                  1    wreg      void 
 20291 ;; Registers used:
 20292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20293 ;; Tracked objects:
 20294 ;;		On entry : 0/0
 20295 ;;		On exit  : 0/0
 20296 ;;		Unchanged: 0/0
 20297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;Total ram usage:        0 bytes
 20303 ;; Hardware stack levels used:    1
 20304 ;; Hardware stack levels required when called:    3
 20305 ;; This function calls:
 20306 ;;		i2_lcdInst
 20307 ;;		i2_printf
 20308 ;; This function is called by:
 20309 ;;		_updateMenu
 20310 ;;		_inputHandler
 20311 ;; This function uses a non-reentrant model
 20312 ;;
 20313                           
 20314                           	psect	text74
 20315  004E02                     __ptext74:
 20316                           	opt stack 0
 20317  004E02                     _change_state_to_logs_11:
 20318                           	opt stack 18
 20319                           
 20320                           ;UI.c: 515: cur_state = 1011;
 20321                           
 20322                           ;incstack = 0
 20323  004E02  0E03               	movlw	3
 20324  004E04  0100               	movlb	0	; () banked
 20325  004E06  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20326  004E08  0EF3               	movlw	243
 20327  004E0A  6FE6               	movwf	_cur_state& (0+255),b
 20328                           
 20329                           ; BSR set to: 0
 20330                           ;UI.c: 516: lcdInst(0b10000000);;
 20331  004E0C  0E80               	movlw	128
 20332  004E0E  EC8B  F028         	call	i2_lcdInst
 20333                           
 20334                           ;UI.c: 517: printf("LOG 1          <");
 20335  004E12  0E6F               	movlw	low STR_39
 20336  004E14  6E0D               	movwf	i2printf@f,c
 20337  004E16  0EFD               	movlw	high STR_39
 20338  004E18  6E0E               	movwf	i2printf@f+1,c
 20339  004E1A  ECC2  F00E         	call	i2_printf	;wreg free
 20340                           
 20341                           ;UI.c: 518: lcdInst(0b11000000);;
 20342  004E1E  0EC0               	movlw	192
 20343  004E20  EC8B  F028         	call	i2_lcdInst
 20344                           
 20345                           ;UI.c: 519: printf("LOG 2           ");
 20346  004E24  0ED6               	movlw	low STR_40
 20347  004E26  6E0D               	movwf	i2printf@f,c
 20348  004E28  0EFC               	movlw	high STR_40
 20349  004E2A  6E0E               	movwf	i2printf@f+1,c
 20350  004E2C  ECC2  F00E         	call	i2_printf	;wreg free
 20351  004E30  0012               	return		;funcret
 20352  004E32                     __end_of_change_state_to_logs_11:
 20353                           	opt stack 0
 20354                           pclatu	equ	0xFFB
 20355                           pclath	equ	0xFFA
 20356                           tblptru	equ	0xFF8
 20357                           tblptrh	equ	0xFF7
 20358                           tblptrl	equ	0xFF6
 20359                           tablat	equ	0xFF5
 20360                           prodh	equ	0xFF4
 20361                           prodl	equ	0xFF3
 20362                           intcon	equ	0xFF2
 20363                           intcon2	equ	0xFF1
 20364                           intcon3	equ	0xFF0
 20365                           indf0	equ	0xFEF
 20366                           postinc0	equ	0xFEE
 20367                           fsr0h	equ	0xFEA
 20368                           fsr0l	equ	0xFE9
 20369                           wreg	equ	0xFE8
 20370                           postdec1	equ	0xFE5
 20371                           fsr1h	equ	0xFE2
 20372                           fsr1l	equ	0xFE1
 20373                           indf2	equ	0xFDF
 20374                           postinc2	equ	0xFDE
 20375                           postdec2	equ	0xFDD
 20376                           fsr2h	equ	0xFDA
 20377                           fsr2l	equ	0xFD9
 20378                           status	equ	0xFD8
 20379                           
 20380 ;; *************** function _dispLogs *****************
 20381 ;; Defined at:
 20382 ;;		line 467 in file "UI.c"
 20383 ;; Parameters:    Size  Location     Type
 20384 ;;  myLog           2   17[COMRAM] int 
 20385 ;; Auto vars:     Size  Location     Type
 20386 ;;		None
 20387 ;; Return value:  Size  Location     Type
 20388 ;;                  1    wreg      void 
 20389 ;; Registers used:
 20390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20391 ;; Tracked objects:
 20392 ;;		On entry : 0/0
 20393 ;;		On exit  : 0/0
 20394 ;;		Unchanged: 0/0
 20395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20400 ;;Total ram usage:        2 bytes
 20401 ;; Hardware stack levels used:    1
 20402 ;; Hardware stack levels required when called:    2
 20403 ;; This function calls:
 20404 ;;		_retrieveLog
 20405 ;; This function is called by:
 20406 ;;		_updateMenu
 20407 ;; This function uses a non-reentrant model
 20408 ;;
 20409                           
 20410                           	psect	text75
 20411  004FDA                     __ptext75:
 20412                           	opt stack 0
 20413  004FDA                     _dispLogs:
 20414                           	opt stack 20
 20415                           
 20416                           ;UI.c: 468: logstate = 1;
 20417                           
 20418                           ;incstack = 0
 20419  004FDA  0E00               	movlw	0
 20420  004FDC  0100               	movlb	0	; () banked
 20421  004FDE  6FF7               	movwf	(_logstate+1)& (0+255),b
 20422  004FE0  0E01               	movlw	1
 20423  004FE2  6FF6               	movwf	_logstate& (0+255),b
 20424                           
 20425                           ; BSR set to: 0
 20426                           ;UI.c: 469: log = myLog;
 20427  004FE4  C012  F0EC         	movff	dispLogs@myLog,_log
 20428  004FE8  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;UI.c: 470: retrieveLog(myLog - 1);
 20432  004FEC  0EFF               	movlw	255
 20433  004FEE  2412               	addwf	dispLogs@myLog,w,c
 20434  004FF0  6E07               	movwf	retrieveLog@logNum,c
 20435  004FF2  0EFF               	movlw	255
 20436  004FF4  2013               	addwfc	dispLogs@myLog+1,w,c
 20437  004FF6  6E08               	movwf	retrieveLog@logNum+1,c
 20438  004FF8  EC87  F01D         	call	_retrieveLog	;wreg free
 20439  004FFC  0012               	return		;funcret
 20440  004FFE                     __end_of_dispLogs:
 20441                           	opt stack 0
 20442                           pclatu	equ	0xFFB
 20443                           pclath	equ	0xFFA
 20444                           tblptru	equ	0xFF8
 20445                           tblptrh	equ	0xFF7
 20446                           tblptrl	equ	0xFF6
 20447                           tablat	equ	0xFF5
 20448                           prodh	equ	0xFF4
 20449                           prodl	equ	0xFF3
 20450                           intcon	equ	0xFF2
 20451                           intcon2	equ	0xFF1
 20452                           intcon3	equ	0xFF0
 20453                           indf0	equ	0xFEF
 20454                           postinc0	equ	0xFEE
 20455                           fsr0h	equ	0xFEA
 20456                           fsr0l	equ	0xFE9
 20457                           wreg	equ	0xFE8
 20458                           postdec1	equ	0xFE5
 20459                           fsr1h	equ	0xFE2
 20460                           fsr1l	equ	0xFE1
 20461                           indf2	equ	0xFDF
 20462                           postinc2	equ	0xFDE
 20463                           postdec2	equ	0xFDD
 20464                           fsr2h	equ	0xFDA
 20465                           fsr2l	equ	0xFD9
 20466                           status	equ	0xFD8
 20467                           
 20468 ;; *************** function _retrieveLog *****************
 20469 ;; Defined at:
 20470 ;;		line 134 in file "EEPROM.c"
 20471 ;; Parameters:    Size  Location     Type
 20472 ;;  logNum          2    6[COMRAM] int 
 20473 ;; Auto vars:     Size  Location     Type
 20474 ;;  i               2   13[COMRAM] int 
 20475 ;;  addr            2   15[COMRAM] unsigned short 
 20476 ;;  byte3           1   12[COMRAM] unsigned char 
 20477 ;;  byte2           1   11[COMRAM] unsigned char 
 20478 ;;  byte1           1   10[COMRAM] unsigned char 
 20479 ;; Return value:  Size  Location     Type
 20480 ;;                  1    wreg      void 
 20481 ;; Registers used:
 20482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20483 ;; Tracked objects:
 20484 ;;		On entry : 0/0
 20485 ;;		On exit  : 0/0
 20486 ;;		Unchanged: 0/0
 20487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20489 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20491 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20492 ;;Total ram usage:       11 bytes
 20493 ;; Hardware stack levels used:    1
 20494 ;; Hardware stack levels required when called:    1
 20495 ;; This function calls:
 20496 ;;		i2_EEPROM_read
 20497 ;;		i2___wmul
 20498 ;; This function is called by:
 20499 ;;		_dispLogs
 20500 ;; This function uses a non-reentrant model
 20501 ;;
 20502                           
 20503                           	psect	text76
 20504  003B0E                     __ptext76:
 20505                           	opt stack 0
 20506  003B0E                     _retrieveLog:
 20507                           	opt stack 20
 20508                           
 20509                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20510                           
 20511                           ;incstack = 0
 20512  003B0E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20513  003B12  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20514  003B16  0E00               	movlw	0
 20515  003B18  6E04               	movwf	i2___wmul@multiplicand+1,c
 20516  003B1A  0E0B               	movlw	11
 20517  003B1C  6E03               	movwf	i2___wmul@multiplicand,c
 20518  003B1E  ECC7  F027         	call	i2___wmul	;wreg free
 20519  003B22  0E01               	movlw	1
 20520  003B24  2401               	addwf	?i2___wmul,w,c
 20521  003B26  6E10               	movwf	retrieveLog@addr,c
 20522  003B28  0E00               	movlw	0
 20523  003B2A  2002               	addwfc	?i2___wmul+1,w,c
 20524  003B2C  6E11               	movwf	retrieveLog@addr+1,c
 20525                           
 20526                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20527  003B2E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20528  003B32  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20529  003B36  EC57  F028         	call	i2_EEPROM_read	;wreg free
 20530  003B3A  6E0B               	movwf	retrieveLog@byte1,c
 20531                           
 20532                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20533  003B3C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20534  003B40  0E80               	movlw	128
 20535  003B42  1609               	andwf	??_retrieveLog,f,c
 20536  003B44  5009               	movf	??_retrieveLog,w,c
 20537  003B46  0100               	movlb	0	; () banked
 20538  003B48  6FEE               	movwf	_log_completion& (0+255),b
 20539  003B4A  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20543  003B4C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20544  003B50  0E0F               	movlw	15
 20545  003B52  1609               	andwf	??_retrieveLog,f,c
 20546  003B54  5009               	movf	??_retrieveLog,w,c
 20547  003B56  6E73               	movwf	_log_count_total,c
 20548  003B58  6A74               	clrf	_log_count_total+1,c
 20549                           
 20550                           ; BSR set to: 0
 20551                           ;EEPROM.c: 146: addr++;
 20552  003B5A  4A10               	infsnz	retrieveLog@addr,f,c
 20553  003B5C  2A11               	incf	retrieveLog@addr+1,f,c
 20554                           
 20555                           ; BSR set to: 0
 20556                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20557  003B5E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20558  003B62  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20559  003B66  EC57  F028         	call	i2_EEPROM_read	;wreg free
 20560  003B6A  6E0C               	movwf	retrieveLog@byte2,c
 20561                           
 20562                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20563  003B6C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20564  003B70  3A09               	swapf	??_retrieveLog,f,c
 20565  003B72  0E0F               	movlw	15
 20566  003B74  1609               	andwf	??_retrieveLog,f,c
 20567  003B76  0E0F               	movlw	15
 20568  003B78  1609               	andwf	??_retrieveLog,f,c
 20569  003B7A  5009               	movf	??_retrieveLog,w,c
 20570  003B7C  0100               	movlb	0	; () banked
 20571  003B7E  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20572  003B80  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20576  003B82  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20577  003B86  0E0F               	movlw	15
 20578  003B88  1609               	andwf	??_retrieveLog,f,c
 20579  003B8A  5009               	movf	??_retrieveLog,w,c
 20580  003B8C  0100               	movlb	0	; () banked
 20581  003B8E  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20582  003B90  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20583                           
 20584                           ; BSR set to: 0
 20585                           ;EEPROM.c: 152: addr++;
 20586  003B92  4A10               	infsnz	retrieveLog@addr,f,c
 20587  003B94  2A11               	incf	retrieveLog@addr+1,f,c
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20591  003B96  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20592  003B9A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20593  003B9E  EC57  F028         	call	i2_EEPROM_read	;wreg free
 20594  003BA2  6E0D               	movwf	retrieveLog@byte3,c
 20595                           
 20596                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20597  003BA4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20598  003BA8  3A09               	swapf	??_retrieveLog,f,c
 20599  003BAA  0E0F               	movlw	15
 20600  003BAC  1609               	andwf	??_retrieveLog,f,c
 20601  003BAE  0E0F               	movlw	15
 20602  003BB0  1609               	andwf	??_retrieveLog,f,c
 20603  003BB2  5009               	movf	??_retrieveLog,w,c
 20604  003BB4  6E71               	movwf	_log_count_can_w_lab,c
 20605  003BB6  6A72               	clrf	_log_count_can_w_lab+1,c
 20606                           
 20607                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20608  003BB8  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20609  003BBC  0E0F               	movlw	15
 20610  003BBE  1609               	andwf	??_retrieveLog,f,c
 20611  003BC0  5009               	movf	??_retrieveLog,w,c
 20612  003BC2  6E6F               	movwf	_log_count_can_no_lab,c
 20613  003BC4  6A70               	clrf	_log_count_can_no_lab+1,c
 20614                           
 20615                           ;EEPROM.c: 156: addr++;
 20616  003BC6  4A10               	infsnz	retrieveLog@addr,f,c
 20617  003BC8  2A11               	incf	retrieveLog@addr+1,f,c
 20618                           
 20619                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20620  003BCA  0E00               	movlw	0
 20621  003BCC  6E0F               	movwf	retrieveLog@i+1,c
 20622  003BCE  0E00               	movlw	0
 20623  003BD0  6E0E               	movwf	retrieveLog@i,c
 20624  003BD2                     i2l6508:
 20625  003BD2  BE0F               	btfsc	retrieveLog@i+1,7,c
 20626  003BD4  D006               	goto	i2l6512
 20627  003BD6  500F               	movf	retrieveLog@i+1,w,c
 20628  003BD8  E11E               	bnz	i2l6520
 20629  003BDA  0E07               	movlw	7
 20630  003BDC  5C0E               	subwf	retrieveLog@i,w,c
 20631  003BDE  B0D8               	btfsc	status,0,c
 20632  003BE0  D01A               	goto	i2l6520
 20633  003BE2                     i2l6512:
 20634                           
 20635                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20636  003BE2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20637  003BE6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20638  003BEA  EC57  F028         	call	i2_EEPROM_read	;wreg free
 20639  003BEE  6E09               	movwf	??_retrieveLog& (0+255),c
 20640  003BF0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20641  003BF2  90D8               	bcf	status,0,c
 20642  003BF4  340E               	rlcf	retrieveLog@i,w,c
 20643  003BF6  6ED9               	movwf	fsr2l,c
 20644  003BF8  340F               	rlcf	retrieveLog@i+1,w,c
 20645  003BFA  6EDA               	movwf	fsr2h,c
 20646  003BFC  0E00               	movlw	low _log_startTime
 20647  003BFE  26D9               	addwf	fsr2l,f,c
 20648  003C00  0E01               	movlw	high _log_startTime
 20649  003C02  22DA               	addwfc	fsr2h,f,c
 20650  003C04  C009  FFDE         	movff	??_retrieveLog,postinc2
 20651  003C08  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20652                           
 20653                           ;EEPROM.c: 161: addr++;
 20654  003C0C  4A10               	infsnz	retrieveLog@addr,f,c
 20655  003C0E  2A11               	incf	retrieveLog@addr+1,f,c
 20656  003C10  4A0E               	infsnz	retrieveLog@i,f,c
 20657  003C12  2A0F               	incf	retrieveLog@i+1,f,c
 20658  003C14  D7DE               	goto	i2l6508
 20659  003C16                     i2l6520:
 20660                           
 20661                           ;EEPROM.c: 162: }
 20662                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20663  003C16  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20664  003C1A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20665  003C1E  EC57  F028         	call	i2_EEPROM_read	;wreg free
 20666  003C22  6E09               	movwf	??_retrieveLog& (0+255),c
 20667  003C24  5009               	movf	??_retrieveLog,w,c
 20668  003C26  0100               	movlb	0	; () banked
 20669  003C28  6FF4               	movwf	_log_total_time& (0+255),b
 20670  003C2A  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20671                           
 20672                           ; BSR set to: 0
 20673  003C2C  0012               	return		;funcret
 20674  003C2E                     __end_of_retrieveLog:
 20675                           	opt stack 0
 20676                           pclatu	equ	0xFFB
 20677                           pclath	equ	0xFFA
 20678                           tblptru	equ	0xFF8
 20679                           tblptrh	equ	0xFF7
 20680                           tblptrl	equ	0xFF6
 20681                           tablat	equ	0xFF5
 20682                           prodh	equ	0xFF4
 20683                           prodl	equ	0xFF3
 20684                           intcon	equ	0xFF2
 20685                           intcon2	equ	0xFF1
 20686                           intcon3	equ	0xFF0
 20687                           indf0	equ	0xFEF
 20688                           postinc0	equ	0xFEE
 20689                           fsr0h	equ	0xFEA
 20690                           fsr0l	equ	0xFE9
 20691                           wreg	equ	0xFE8
 20692                           postdec1	equ	0xFE5
 20693                           fsr1h	equ	0xFE2
 20694                           fsr1l	equ	0xFE1
 20695                           indf2	equ	0xFDF
 20696                           postinc2	equ	0xFDE
 20697                           postdec2	equ	0xFDD
 20698                           fsr2h	equ	0xFDA
 20699                           fsr2l	equ	0xFD9
 20700                           status	equ	0xFD8
 20701                           
 20702 ;; *************** function i2_EEPROM_read *****************
 20703 ;; Defined at:
 20704 ;;		line 68 in file "EEPROM.c"
 20705 ;; Parameters:    Size  Location     Type
 20706 ;;  address         2    0[COMRAM] unsigned short 
 20707 ;; Auto vars:     Size  Location     Type
 20708 ;;		None
 20709 ;; Return value:  Size  Location     Type
 20710 ;;                  1    wreg      unsigned char 
 20711 ;; Registers used:
 20712 ;;		wreg, status,2
 20713 ;; Tracked objects:
 20714 ;;		On entry : 0/0
 20715 ;;		On exit  : 0/0
 20716 ;;		Unchanged: 0/0
 20717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;Total ram usage:        2 bytes
 20723 ;; Hardware stack levels used:    1
 20724 ;; This function calls:
 20725 ;;		Nothing
 20726 ;; This function is called by:
 20727 ;;		_retrieveLog
 20728 ;; This function uses a non-reentrant model
 20729 ;;
 20730                           
 20731                           	psect	text77
 20732  0050AE                     __ptext77:
 20733                           	opt stack 0
 20734  0050AE                     i2_EEPROM_read:
 20735                           	opt stack 20
 20736                           
 20737                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20738                           
 20739                           ; BSR set to: 0
 20740                           ;incstack = 0
 20741  0050AE  5002               	movf	i2EEPROM_read@address+1,w,c
 20742  0050B0  6EAA               	movwf	4010,c	;volatile
 20743                           
 20744                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20745  0050B2  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20746                           
 20747                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20748  0050B6  9EA6               	bcf	4006,7,c	;volatile
 20749                           
 20750                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20751  0050B8  9CA6               	bcf	4006,6,c	;volatile
 20752                           
 20753                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20754  0050BA  80A6               	bsf	4006,0,c	;volatile
 20755  0050BC                     i2l1003:
 20756  0050BC  B0A6               	btfsc	4006,0,c	;volatile
 20757  0050BE  D7FE               	goto	i2l1003
 20758                           
 20759                           ;EEPROM.c: 81: return EEDATA;
 20760  0050C0  50A8               	movf	4008,w,c	;volatile
 20761  0050C2  0012               	return	
 20762  0050C4                     __end_ofi2_EEPROM_read:
 20763                           	opt stack 0
 20764                           pclatu	equ	0xFFB
 20765                           pclath	equ	0xFFA
 20766                           tblptru	equ	0xFF8
 20767                           tblptrh	equ	0xFF7
 20768                           tblptrl	equ	0xFF6
 20769                           tablat	equ	0xFF5
 20770                           prodh	equ	0xFF4
 20771                           prodl	equ	0xFF3
 20772                           intcon	equ	0xFF2
 20773                           intcon2	equ	0xFF1
 20774                           intcon3	equ	0xFF0
 20775                           indf0	equ	0xFEF
 20776                           postinc0	equ	0xFEE
 20777                           fsr0h	equ	0xFEA
 20778                           fsr0l	equ	0xFE9
 20779                           wreg	equ	0xFE8
 20780                           postdec1	equ	0xFE5
 20781                           fsr1h	equ	0xFE2
 20782                           fsr1l	equ	0xFE1
 20783                           indf2	equ	0xFDF
 20784                           postinc2	equ	0xFDE
 20785                           postdec2	equ	0xFDD
 20786                           fsr2h	equ	0xFDA
 20787                           fsr2l	equ	0xFD9
 20788                           status	equ	0xFD8
 20789                           
 20790 ;; *************** function _printSortTimer *****************
 20791 ;; Defined at:
 20792 ;;		line 434 in file "sort.c"
 20793 ;; Parameters:    Size  Location     Type
 20794 ;;		None
 20795 ;; Auto vars:     Size  Location     Type
 20796 ;;  i               2   70[COMRAM] int 
 20797 ;;  i               2   72[COMRAM] int 
 20798 ;;  curTime        14   44[COMRAM] int [7]
 20799 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20800 ;;  sec             2   64[COMRAM] int 
 20801 ;;  min             2   62[COMRAM] int 
 20802 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20803 ;;  start_sec       2   58[COMRAM] unsigned int 
 20804 ;; Return value:  Size  Location     Type
 20805 ;;                  1    wreg      void 
 20806 ;; Registers used:
 20807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20808 ;; Tracked objects:
 20809 ;;		On entry : 0/0
 20810 ;;		On exit  : 0/0
 20811 ;;		Unchanged: 0/0
 20812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20816 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20817 ;;Total ram usage:       33 bytes
 20818 ;; Hardware stack levels used:    1
 20819 ;; Hardware stack levels required when called:    3
 20820 ;; This function calls:
 20821 ;;		i2___lwdiv
 20822 ;;		i2___lwmod
 20823 ;;		i2___wmul
 20824 ;;		i2_delay_ms
 20825 ;;		i2_getRTC
 20826 ;;		i2_lcdInst
 20827 ;;		i2_printf
 20828 ;; This function is called by:
 20829 ;;		_handler
 20830 ;; This function uses a non-reentrant model
 20831 ;;
 20832                           
 20833                           	psect	text78
 20834  00297A                     __ptext78:
 20835                           	opt stack 0
 20836  00297A                     _printSortTimer:
 20837                           	opt stack 20
 20838                           
 20839                           ;sort.c: 435: getRTC();
 20840                           
 20841                           ;incstack = 0
 20842  00297A  EC3F  F023         	call	i2_getRTC	;wreg free
 20843                           
 20844                           ;sort.c: 436: int curTime[7];
 20845                           ;sort.c: 437: for(int i = 0; i < 7; i++){
 20846  00297E  0E00               	movlw	0
 20847  002980  6E4A               	movwf	printSortTimer@i+1,c
 20848  002982  0E00               	movlw	0
 20849  002984  6E49               	movwf	printSortTimer@i,c
 20850  002986                     i2l8906:
 20851  002986  BE4A               	btfsc	printSortTimer@i+1,7,c
 20852  002988  D006               	goto	i2l8910
 20853  00298A  504A               	movf	printSortTimer@i+1,w,c
 20854  00298C  E131               	bnz	i2l8916
 20855  00298E  0E07               	movlw	7
 20856  002990  5C49               	subwf	printSortTimer@i,w,c
 20857  002992  B0D8               	btfsc	status,0,c
 20858  002994  D02D               	goto	i2l8916
 20859  002996                     i2l8910:
 20860                           
 20861                           ;sort.c: 438: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20862  002996  0E24               	movlw	low _time
 20863  002998  2449               	addwf	printSortTimer@i,w,c
 20864  00299A  6ED9               	movwf	fsr2l,c
 20865  00299C  0E01               	movlw	high _time
 20866  00299E  204A               	addwfc	printSortTimer@i+1,w,c
 20867  0029A0  6EDA               	movwf	fsr2h,c
 20868  0029A2  50DF               	movf	indf2,w,c
 20869  0029A4  6E2A               	movwf	??_printSortTimer& (0+255),c
 20870  0029A6  3A2A               	swapf	??_printSortTimer,f,c
 20871  0029A8  0E0F               	movlw	15
 20872  0029AA  162A               	andwf	??_printSortTimer,f,c
 20873  0029AC  0E0F               	movlw	15
 20874  0029AE  162A               	andwf	??_printSortTimer,f,c
 20875  0029B0  502A               	movf	??_printSortTimer,w,c
 20876  0029B2  0D0A               	mullw	10
 20877  0029B4  0E24               	movlw	low _time
 20878  0029B6  2449               	addwf	printSortTimer@i,w,c
 20879  0029B8  6ED9               	movwf	fsr2l,c
 20880  0029BA  0E01               	movlw	high _time
 20881  0029BC  204A               	addwfc	printSortTimer@i+1,w,c
 20882  0029BE  6EDA               	movwf	fsr2h,c
 20883  0029C0  50DF               	movf	indf2,w,c
 20884  0029C2  0B0F               	andlw	15
 20885  0029C4  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20886  0029C6  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20887  0029C8  50F3               	movf	prodl,w,c
 20888  0029CA  262B               	addwf	??_printSortTimer+1,f,c
 20889  0029CC  50F4               	movf	prodh,w,c
 20890  0029CE  222C               	addwfc	??_printSortTimer+2,f,c
 20891  0029D0  90D8               	bcf	status,0,c
 20892  0029D2  3449               	rlcf	printSortTimer@i,w,c
 20893  0029D4  6ED9               	movwf	fsr2l,c
 20894  0029D6  344A               	rlcf	printSortTimer@i+1,w,c
 20895  0029D8  6EDA               	movwf	fsr2h,c
 20896  0029DA  0E2D               	movlw	low printSortTimer@curTime
 20897  0029DC  26D9               	addwf	fsr2l,f,c
 20898  0029DE  0E00               	movlw	high printSortTimer@curTime
 20899  0029E0  22DA               	addwfc	fsr2h,f,c
 20900  0029E2  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20901  0029E6  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20902  0029EA  4A49               	infsnz	printSortTimer@i,f,c
 20903  0029EC  2A4A               	incf	printSortTimer@i+1,f,c
 20904  0029EE  D7CB               	goto	i2l8906
 20905  0029F0                     i2l8916:
 20906                           
 20907                           ;sort.c: 439: }
 20908                           ;sort.c: 440: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20909  0029F0  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20910  0029F4  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20911  0029F8  0E00               	movlw	0
 20912  0029FA  6E04               	movwf	i2___wmul@multiplicand+1,c
 20913  0029FC  0E3C               	movlw	60
 20914  0029FE  6E03               	movwf	i2___wmul@multiplicand,c
 20915  002A00  ECC7  F027         	call	i2___wmul	;wreg free
 20916  002A04  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20917  002A08  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20918  002A0C  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20919  002A10  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20920  002A14  0E0E               	movlw	14
 20921  002A16  6E04               	movwf	i2___wmul@multiplicand+1,c
 20922  002A18  0E10               	movlw	16
 20923  002A1A  6E03               	movwf	i2___wmul@multiplicand,c
 20924  002A1C  ECC7  F027         	call	i2___wmul	;wreg free
 20925  002A20  5001               	movf	?i2___wmul,w,c
 20926  002A22  262A               	addwf	??_printSortTimer,f,c
 20927  002A24  5002               	movf	?i2___wmul+1,w,c
 20928  002A26  222B               	addwfc	??_printSortTimer+1,f,c
 20929  002A28  0101               	movlb	1	; () banked
 20930  002A2A  510E               	movf	_startTime& (0+255),w,b
 20931  002A2C  242A               	addwf	??_printSortTimer,w,c
 20932  002A2E  6E3B               	movwf	printSortTimer@start_sec,c
 20933  002A30  0101               	movlb	1	; () banked
 20934  002A32  510F               	movf	(_startTime+1)& (0+255),w,b
 20935  002A34  202B               	addwfc	??_printSortTimer+1,w,c
 20936  002A36  6E3C               	movwf	printSortTimer@start_sec+1,c
 20937                           
 20938                           ;sort.c: 441: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20939  002A38  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20940  002A3C  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20941  002A40  0E00               	movlw	0
 20942  002A42  6E04               	movwf	i2___wmul@multiplicand+1,c
 20943  002A44  0E3C               	movlw	60
 20944  002A46  6E03               	movwf	i2___wmul@multiplicand,c
 20945  002A48  ECC7  F027         	call	i2___wmul	;wreg free
 20946  002A4C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20947  002A50  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20948  002A54  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20949  002A58  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20950  002A5C  0E0E               	movlw	14
 20951  002A5E  6E04               	movwf	i2___wmul@multiplicand+1,c
 20952  002A60  0E10               	movlw	16
 20953  002A62  6E03               	movwf	i2___wmul@multiplicand,c
 20954  002A64  ECC7  F027         	call	i2___wmul	;wreg free
 20955  002A68  5001               	movf	?i2___wmul,w,c
 20956  002A6A  262A               	addwf	??_printSortTimer,f,c
 20957  002A6C  5002               	movf	?i2___wmul+1,w,c
 20958  002A6E  222B               	addwfc	??_printSortTimer+1,f,c
 20959  002A70  502D               	movf	printSortTimer@curTime,w,c
 20960  002A72  242A               	addwf	??_printSortTimer,w,c
 20961  002A74  6E3D               	movwf	printSortTimer@cur_sec,c
 20962  002A76  502E               	movf	printSortTimer@curTime+1,w,c
 20963  002A78  202B               	addwfc	??_printSortTimer+1,w,c
 20964  002A7A  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20965                           
 20966                           ;sort.c: 442: unsigned int timeDiff = cur_sec - start_sec;
 20967  002A7C  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20968  002A80  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20969  002A84  1E2A               	comf	??_printSortTimer,f,c
 20970  002A86  1E2B               	comf	??_printSortTimer+1,f,c
 20971  002A88  4A2A               	infsnz	??_printSortTimer,f,c
 20972  002A8A  2A2B               	incf	??_printSortTimer+1,f,c
 20973  002A8C  503D               	movf	printSortTimer@cur_sec,w,c
 20974  002A8E  242A               	addwf	??_printSortTimer,w,c
 20975  002A90  6E45               	movwf	printSortTimer@timeDiff,c
 20976  002A92  503E               	movf	printSortTimer@cur_sec+1,w,c
 20977  002A94  202B               	addwfc	??_printSortTimer+1,w,c
 20978  002A96  6E46               	movwf	printSortTimer@timeDiff+1,c
 20979                           
 20980                           ;sort.c: 444: total_time = timeDiff;
 20981  002A98  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20982  002A9C  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20983                           
 20984                           ;sort.c: 446: if(f_most_recent_sort_time){
 20985  002AA0  5069               	movf	_f_most_recent_sort_time,w,c
 20986  002AA2  106A               	iorwf	_f_most_recent_sort_time+1,w,c
 20987  002AA4  B4D8               	btfsc	status,2,c
 20988  002AA6  D008               	goto	i2l8928
 20989                           
 20990                           ;sort.c: 447: most_recent_sort_time = total_time;
 20991  002AA8  C0F8  F075         	movff	_total_time,_most_recent_sort_time
 20992  002AAC  C0F9  F076         	movff	_total_time+1,_most_recent_sort_time+1
 20993                           
 20994                           ;sort.c: 448: f_most_recent_sort_time = 0;
 20995  002AB0  0E00               	movlw	0
 20996  002AB2  6E6A               	movwf	_f_most_recent_sort_time+1,c
 20997  002AB4  0E00               	movlw	0
 20998  002AB6  6E69               	movwf	_f_most_recent_sort_time,c
 20999  002AB8                     i2l8928:
 21000                           
 21001                           ;sort.c: 449: }
 21002                           ;sort.c: 451: if(total_time - most_recent_sort_time == 20){
 21003  002AB8  C075  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21004  002ABC  C076  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21005  002AC0  1E2A               	comf	??_printSortTimer,f,c
 21006  002AC2  1E2B               	comf	??_printSortTimer+1,f,c
 21007  002AC4  4A2A               	infsnz	??_printSortTimer,f,c
 21008  002AC6  2A2B               	incf	??_printSortTimer+1,f,c
 21009  002AC8  0100               	movlb	0	; () banked
 21010  002ACA  51F8               	movf	_total_time& (0+255),w,b
 21011  002ACC  262A               	addwf	??_printSortTimer,f,c
 21012  002ACE  0100               	movlb	0	; () banked
 21013  002AD0  51F9               	movf	(_total_time+1)& (0+255),w,b
 21014  002AD2  222B               	addwfc	??_printSortTimer+1,f,c
 21015  002AD4  0E14               	movlw	20
 21016  002AD6  182A               	xorwf	??_printSortTimer,w,c
 21017  002AD8  102B               	iorwf	??_printSortTimer+1,w,c
 21018  002ADA  A4D8               	btfss	status,2,c
 21019  002ADC  D033               	goto	i2l8948
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;sort.c: 452: LATAbits.LATA5 = 0;
 21023  002ADE  9A89               	bcf	3977,5,c	;volatile
 21024                           
 21025                           ; BSR set to: 0
 21026                           ;sort.c: 453: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21027  002AE0  0E52               	movlw	82
 21028  002AE2  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21029  002AE4  0E2B               	movlw	43
 21030  002AE6  6E2A               	movwf	??_printSortTimer& (0+255),c
 21031  002AE8  0E00               	movlw	0
 21032  002AEA                     i2u995_47:
 21033  002AEA  2EE8               	decfsz	wreg,f,c
 21034  002AEC  D7FE               	bra	i2u995_47
 21035  002AEE  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21036  002AF0  D7FC               	bra	i2u995_47
 21037  002AF2  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21038  002AF4  D7FA               	bra	i2u995_47
 21039  002AF6  D000               	nop2	
 21040                           
 21041                           ;sort.c: 454: for(int i=0; i<46; i++){
 21042  002AF8  0E00               	movlw	0
 21043  002AFA  6E48               	movwf	printSortTimer@i_1132+1,c
 21044  002AFC  0E00               	movlw	0
 21045  002AFE  6E47               	movwf	printSortTimer@i_1132,c
 21046  002B00  BE48               	btfsc	printSortTimer@i_1132+1,7,c
 21047  002B02  D006               	goto	i2l8940
 21048  002B04  5048               	movf	printSortTimer@i_1132+1,w,c
 21049  002B06  E11D               	bnz	i2l833
 21050  002B08  0E2E               	movlw	46
 21051  002B0A  5C47               	subwf	printSortTimer@i_1132,w,c
 21052  002B0C  B0D8               	btfsc	status,0,c
 21053  002B0E  D019               	goto	i2l833
 21054  002B10                     i2l8940:
 21055                           
 21056                           ;sort.c: 455: LATAbits.LATA5 = !LATAbits.LATA5;
 21057  002B10  BA89               	btfsc	3977,5,c	;volatile
 21058  002B12  D003               	goto	i2u816_40
 21059  002B14  6A2A               	clrf	??_printSortTimer& (0+255),c
 21060  002B16  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21061  002B18  D001               	goto	i2u817_48
 21062  002B1A                     i2u816_40:
 21063  002B1A  6A2A               	clrf	??_printSortTimer& (0+255),c
 21064  002B1C                     i2u817_48:
 21065  002B1C  3A2A               	swapf	??_printSortTimer,f,c
 21066  002B1E  462A               	rlncf	??_printSortTimer,f,c
 21067  002B20  5089               	movf	3977,w,c	;volatile
 21068  002B22  182A               	xorwf	??_printSortTimer,w,c
 21069  002B24  0BDF               	andlw	-33
 21070  002B26  182A               	xorwf	??_printSortTimer,w,c
 21071  002B28  6E89               	movwf	3977,c	;volatile
 21072                           
 21073                           ;sort.c: 456: delay_ms(45-i);
 21074  002B2A  5047               	movf	printSortTimer@i_1132,w,c
 21075  002B2C  0800               	sublw	0
 21076  002B2E  0F2D               	addlw	45
 21077  002B30  EC30  F028         	call	i2_delay_ms
 21078  002B34  4A47               	infsnz	printSortTimer@i_1132,f,c
 21079  002B36  2A48               	incf	printSortTimer@i_1132+1,f,c
 21080  002B38  BE48               	btfsc	printSortTimer@i_1132+1,7,c
 21081  002B3A  D7EA               	goto	i2l8940
 21082  002B3C  5048               	movf	printSortTimer@i_1132+1,w,c
 21083  002B3E  E101               	bnz	i2u818_40
 21084  002B40  D7E3               	goto	L14
 21085  002B42                     i2u818_40:
 21086  002B42                     i2l833:
 21087                           
 21088                           ;sort.c: 457: }
 21089                           ;sort.c: 458: LATAbits.LATA5 = 1;
 21090  002B42  8A89               	bsf	3977,5,c	;volatile
 21091  002B44                     i2l8948:
 21092                           
 21093                           ;sort.c: 459: }
 21094                           ;sort.c: 461: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21095  002B44  C075  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21096  002B48  C076  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21097  002B4C  1E2A               	comf	??_printSortTimer,f,c
 21098  002B4E  1E2B               	comf	??_printSortTimer+1,f,c
 21099  002B50  4A2A               	infsnz	??_printSortTimer,f,c
 21100  002B52  2A2B               	incf	??_printSortTimer+1,f,c
 21101  002B54  0100               	movlb	0	; () banked
 21102  002B56  51F8               	movf	_total_time& (0+255),w,b
 21103  002B58  262A               	addwf	??_printSortTimer,f,c
 21104  002B5A  0100               	movlb	0	; () banked
 21105  002B5C  51F9               	movf	(_total_time+1)& (0+255),w,b
 21106  002B5E  222B               	addwfc	??_printSortTimer+1,f,c
 21107  002B60  0E2A               	movlw	42
 21108  002B62  182A               	xorwf	??_printSortTimer,w,c
 21109  002B64  102B               	iorwf	??_printSortTimer+1,w,c
 21110  002B66  B4D8               	btfsc	status,2,c
 21111  002B68  D007               	goto	i2l8952
 21112                           
 21113                           ; BSR set to: 0
 21114  002B6A  0EB3               	movlw	179
 21115  002B6C  0100               	movlb	0	; () banked
 21116  002B6E  19F8               	xorwf	_total_time& (0+255),w,b
 21117  002B70  0100               	movlb	0	; () banked
 21118  002B72  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21119  002B74  A4D8               	btfss	status,2,c
 21120  002B76  D003               	goto	i2l8954
 21121  002B78                     i2l8952:
 21122                           
 21123                           ; BSR set to: 0
 21124                           ;sort.c: 462: machine_state = DoneSorting_state;
 21125  002B78  0E02               	movlw	2
 21126  002B7A  0100               	movlb	0	; () banked
 21127  002B7C  6FFC               	movwf	_machine_state& (0+255),b
 21128  002B7E                     i2l8954:
 21129                           
 21130                           ; BSR set to: 0
 21131                           ;sort.c: 464: }
 21132                           ;sort.c: 466: int min = (timeDiff % 3600) / 60;
 21133  002B7E  0E0E               	movlw	14
 21134  002B80  6E04               	movwf	i2___lwmod@divisor+1,c
 21135  002B82  0E10               	movlw	16
 21136  002B84  6E03               	movwf	i2___lwmod@divisor,c
 21137  002B86  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21138  002B8A  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21139  002B8E  EC80  F025         	call	i2___lwmod	;wreg free
 21140  002B92  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21141  002B96  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21142  002B9A  0E00               	movlw	0
 21143  002B9C  6E09               	movwf	i2___lwdiv@divisor+1,c
 21144  002B9E  0E3C               	movlw	60
 21145  002BA0  6E08               	movwf	i2___lwdiv@divisor,c
 21146  002BA2  ECC1  F024         	call	i2___lwdiv	;wreg free
 21147  002BA6  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21148  002BAA  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21149                           
 21150                           ;sort.c: 467: int sec = (timeDiff % 3600) % 60;
 21151  002BAE  0E0E               	movlw	14
 21152  002BB0  6E04               	movwf	i2___lwmod@divisor+1,c
 21153  002BB2  0E10               	movlw	16
 21154  002BB4  6E03               	movwf	i2___lwmod@divisor,c
 21155  002BB6  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21156  002BBA  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21157  002BBE  EC80  F025         	call	i2___lwmod	;wreg free
 21158  002BC2  C001  F043         	movff	?i2___lwmod,_printSortTimer$2459
 21159  002BC6  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2459+1
 21160                           
 21161                           ;sort.c: 467: int sec = (timeDiff % 3600) % 60;
 21162  002BCA  C043  F001         	movff	_printSortTimer$2459,i2___lwmod@dividend
 21163  002BCE  C044  F002         	movff	_printSortTimer$2459+1,i2___lwmod@dividend+1
 21164  002BD2  0E00               	movlw	0
 21165  002BD4  6E04               	movwf	i2___lwmod@divisor+1,c
 21166  002BD6  0E3C               	movlw	60
 21167  002BD8  6E03               	movwf	i2___lwmod@divisor,c
 21168  002BDA  EC80  F025         	call	i2___lwmod	;wreg free
 21169  002BDE  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21170  002BE2  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21171                           
 21172                           ;sort.c: 469: lcdInst(0b10000000);;
 21173  002BE6  0E80               	movlw	128
 21174  002BE8  EC8B  F028         	call	i2_lcdInst
 21175                           
 21176                           ;sort.c: 470: printf("SORTING...");
 21177  002BEC  0E7C               	movlw	low STR_64
 21178  002BEE  6E0D               	movwf	i2printf@f,c
 21179  002BF0  0EFF               	movlw	high STR_64
 21180  002BF2  6E0E               	movwf	i2printf@f+1,c
 21181  002BF4  ECC2  F00E         	call	i2_printf	;wreg free
 21182                           
 21183                           ;sort.c: 471: lcdInst(0b11000000);;
 21184  002BF8  0EC0               	movlw	192
 21185  002BFA  EC8B  F028         	call	i2_lcdInst
 21186                           
 21187                           ;sort.c: 472: printf("TIME %d:%02d", min, sec);
 21188  002BFE  0E42               	movlw	low STR_65
 21189  002C00  6E0D               	movwf	i2printf@f,c
 21190  002C02  0EFF               	movlw	high STR_65
 21191  002C04  6E0E               	movwf	i2printf@f+1,c
 21192  002C06  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21193  002C0A  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21194  002C0E  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21195  002C12  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21196  002C16  ECC2  F00E         	call	i2_printf	;wreg free
 21197  002C1A  0012               	return		;funcret
 21198  002C1C                     __end_of_printSortTimer:
 21199                           	opt stack 0
 21200                           pclatu	equ	0xFFB
 21201                           pclath	equ	0xFFA
 21202                           tblptru	equ	0xFF8
 21203                           tblptrh	equ	0xFF7
 21204                           tblptrl	equ	0xFF6
 21205                           tablat	equ	0xFF5
 21206                           prodh	equ	0xFF4
 21207                           prodl	equ	0xFF3
 21208                           intcon	equ	0xFF2
 21209                           intcon2	equ	0xFF1
 21210                           intcon3	equ	0xFF0
 21211                           indf0	equ	0xFEF
 21212                           postinc0	equ	0xFEE
 21213                           fsr0h	equ	0xFEA
 21214                           fsr0l	equ	0xFE9
 21215                           wreg	equ	0xFE8
 21216                           postdec1	equ	0xFE5
 21217                           fsr1h	equ	0xFE2
 21218                           fsr1l	equ	0xFE1
 21219                           indf2	equ	0xFDF
 21220                           postinc2	equ	0xFDE
 21221                           postdec2	equ	0xFDD
 21222                           fsr2h	equ	0xFDA
 21223                           fsr2l	equ	0xFD9
 21224                           status	equ	0xFD8
 21225                           
 21226 ;; *************** function i2_printf *****************
 21227 ;; Defined at:
 21228 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21229 ;; Parameters:    Size  Location     Type
 21230 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21231 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21232 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21233 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21234 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21235 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21236 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21237 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21238 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21239 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21240 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21241 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21242 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21243 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21244 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21245 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21246 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21247 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21248 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21249 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21250 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21251 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21252 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21253 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21254 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21255 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21256 ;; Auto vars:     Size  Location     Type
 21257 ;;  printf          4    0        struct .
 21258 ;;  printf          2   39[COMRAM] int 
 21259 ;;  printf          2   35[COMRAM] unsigned int 
 21260 ;;  printf          2   33[COMRAM] unsigned int 
 21261 ;;  printf          2   31[COMRAM] PTR void [1]
 21262 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21263 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21264 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21265 ;;  printf          1   38[COMRAM] char 
 21266 ;;  printf          1   37[COMRAM] unsigned char 
 21267 ;;  printf          1   28[COMRAM] char 
 21268 ;; Return value:  Size  Location     Type
 21269 ;;                  2   12[COMRAM] int 
 21270 ;; Registers used:
 21271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21272 ;; Tracked objects:
 21273 ;;		On entry : 0/0
 21274 ;;		On exit  : 0/0
 21275 ;;		Unchanged: 0/0
 21276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21277 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21278 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21279 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21280 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21281 ;;Total ram usage:       29 bytes
 21282 ;; Hardware stack levels used:    1
 21283 ;; Hardware stack levels required when called:    2
 21284 ;; This function calls:
 21285 ;;		i2___lwdiv
 21286 ;;		i2___lwmod
 21287 ;;		i2___wmul
 21288 ;;		i2_isdigit
 21289 ;;		i2_putch
 21290 ;; This function is called by:
 21291 ;;		_change_state_to_menu_11
 21292 ;;		_change_state_to_menu_23
 21293 ;;		_change_state_to_logs_11
 21294 ;;		_change_state_to_logs_12
 21295 ;;		_change_state_to_logs_22
 21296 ;;		_change_state_to_logs_23
 21297 ;;		_change_state_to_logs_33
 21298 ;;		_change_state_to_logs_34
 21299 ;;		_printSortTimer
 21300 ;;		i2_change_state_to_menu_start
 21301 ;;		i2_change_state_to_menu_12
 21302 ;;		i2_change_state_to_menu_22
 21303 ;;		i2_printRTC
 21304 ;; This function uses a non-reentrant model
 21305 ;;
 21306                           
 21307                           	psect	text79
 21308  001D84                     __ptext79:
 21309                           	opt stack 0
 21310  001D84                     i2_printf:
 21311                           	opt stack 19
 21312                           
 21313                           ;doprnt.c: 466: va_list ap;
 21314                           ;doprnt.c: 499: signed char c;
 21315                           ;doprnt.c: 501: int width;
 21316                           ;doprnt.c: 506: signed char prec;
 21317                           ;doprnt.c: 508: unsigned char flag;
 21318                           ;doprnt.c: 523: union {
 21319                           ;doprnt.c: 524: unsigned long vd;
 21320                           ;doprnt.c: 525: double integ;
 21321                           ;doprnt.c: 526: } tmpval;
 21322                           ;doprnt.c: 528: unsigned int val;
 21323                           ;doprnt.c: 529: unsigned len;
 21324                           ;doprnt.c: 530: const char * cp;
 21325                           ;doprnt.c: 533: *ap = __va_start();
 21326                           
 21327                           ;incstack = 0
 21328  001D84  0E0F               	movlw	low (?i2_printf+2)
 21329  001D86  6E20               	movwf	i2printf@ap,c
 21330  001D88  0E00               	movlw	high (?i2_printf+2)
 21331  001D8A  6E21               	movwf	i2printf@ap+1,c
 21332                           
 21333                           ;doprnt.c: 536: while(c = *f++) {
 21334  001D8C  D1A4               	goto	i2l6332
 21335  001D8E                     i2l6202:
 21336                           
 21337                           ;doprnt.c: 538: if(c != '%')
 21338  001D8E  0E25               	movlw	37
 21339  001D90  1827               	xorwf	i2printf@c,w,c
 21340  001D92  B4D8               	btfsc	status,2,c
 21341  001D94  D004               	goto	i2l6206
 21342                           
 21343                           ;doprnt.c: 540: {
 21344                           ;doprnt.c: 541: (putch(c) );
 21345  001D96  5027               	movf	i2printf@c,w,c
 21346  001D98  EC85  F028         	call	i2_putch
 21347                           
 21348                           ;doprnt.c: 542: continue;
 21349  001D9C  D19C               	goto	i2l6332
 21350  001D9E                     i2l6206:
 21351                           
 21352                           ;doprnt.c: 543: }
 21353                           ;doprnt.c: 546: width = 0;
 21354  001D9E  0E00               	movlw	0
 21355  001DA0  6E29               	movwf	i2printf@width+1,c
 21356  001DA2  0E00               	movlw	0
 21357  001DA4  6E28               	movwf	i2printf@width,c
 21358                           
 21359                           ;doprnt.c: 548: flag = 0;
 21360  001DA6  0E00               	movlw	0
 21361  001DA8  6E26               	movwf	i2printf@flag,c
 21362                           
 21363                           ;doprnt.c: 551: switch(*f) {
 21364                           
 21365                           ;doprnt.c: 550: for(;;) {
 21366  001DAA  D003               	goto	i2l6212
 21367  001DAC                     i2l6208:
 21368                           
 21369                           ;doprnt.c: 580: flag |= 0x04;
 21370  001DAC  8426               	bsf	i2printf@flag,2,c
 21371                           
 21372                           ;doprnt.c: 581: f++;
 21373  001DAE  4A0D               	infsnz	i2printf@f,f,c
 21374  001DB0  2A0E               	incf	i2printf@f+1,f,c
 21375  001DB2                     i2l6212:
 21376  001DB2  C00D  FFF6         	movff	i2printf@f,tblptrl
 21377  001DB6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21378  001DBA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21379  001DBA  6AF8               	clrf	tblptru,c
 21380  001DBC                     	endif
 21381  001DBC                     	if	0	;tblptru may be non-zero
 21382  001DBC                     	endif
 21383  001DBC  0008               	tblrd		*
 21384  001DBE  50F5               	movf	tablat,w,c
 21385                           
 21386                           ; Switch size 1, requested type "space"
 21387                           ; Number of cases is 1, Range of values is 48 to 48
 21388                           ; switch strategies available:
 21389                           ; Name         Instructions Cycles
 21390                           ; simple_byte            4     3 (average)
 21391                           ;	Chosen strategy is simple_byte
 21392  001DC0  0A30               	xorlw	48	; case 48
 21393  001DC2  B4D8               	btfsc	status,2,c
 21394  001DC4  D7F3               	goto	i2l6208
 21395                           
 21396                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21397                           
 21398                           ;doprnt.c: 586: }
 21399                           
 21400                           ;doprnt.c: 585: break;
 21401  001DC6  C00D  FFF6         	movff	i2printf@f,tblptrl
 21402  001DCA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21403  001DCE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21404  001DCE  6AF8               	clrf	tblptru,c
 21405  001DD0                     	endif
 21406  001DD0                     	if	0	;tblptru may be non-zero
 21407  001DD0                     	endif
 21408  001DD0  0008               	tblrd		*
 21409  001DD2  50F5               	movf	tablat,w,c
 21410  001DD4  EC21  F028         	call	i2_isdigit
 21411  001DD8  A0D8               	btfss	status,0,c
 21412  001DDA  D0A6               	goto	i2l6260
 21413                           
 21414                           ;doprnt.c: 598: width = 0;
 21415  001DDC  0E00               	movlw	0
 21416  001DDE  6E29               	movwf	i2printf@width+1,c
 21417  001DE0  0E00               	movlw	0
 21418  001DE2  6E28               	movwf	i2printf@width,c
 21419  001DE4                     i2l6218:
 21420                           
 21421                           ;doprnt.c: 600: width *= 10;
 21422  001DE4  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21423  001DE8  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21424  001DEC  0E00               	movlw	0
 21425  001DEE  6E04               	movwf	i2___wmul@multiplicand+1,c
 21426  001DF0  0E0A               	movlw	10
 21427  001DF2  6E03               	movwf	i2___wmul@multiplicand,c
 21428  001DF4  ECC7  F027         	call	i2___wmul	;wreg free
 21429  001DF8  C001  F028         	movff	?i2___wmul,i2printf@width
 21430  001DFC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21431                           
 21432                           ;doprnt.c: 601: width += *f++ - '0';
 21433  001E00  0ED0               	movlw	208
 21434  001E02  6E19               	movwf	??i2_printf& (0+255),c
 21435  001E04  0EFF               	movlw	255
 21436  001E06  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21437  001E08  C00D  FFF6         	movff	i2printf@f,tblptrl
 21438  001E0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21439  001E10                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21440  001E10  6AF8               	clrf	tblptru,c
 21441  001E12                     	endif
 21442  001E12                     	if	0	;tblptru may be non-zero
 21443  001E12                     	endif
 21444  001E12  0008               	tblrd		*
 21445  001E14  50F5               	movf	tablat,w,c
 21446  001E16  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21447  001E18  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21448  001E1A  5019               	movf	??i2_printf,w,c
 21449  001E1C  261B               	addwf	??i2_printf+2,f,c
 21450  001E1E  501A               	movf	??i2_printf+1,w,c
 21451  001E20  221C               	addwfc	??i2_printf+3,f,c
 21452  001E22  501B               	movf	??i2_printf+2,w,c
 21453  001E24  2628               	addwf	i2printf@width,f,c
 21454  001E26  501C               	movf	??i2_printf+3,w,c
 21455  001E28  2229               	addwfc	i2printf@width+1,f,c
 21456  001E2A  4A0D               	infsnz	i2printf@f,f,c
 21457  001E2C  2A0E               	incf	i2printf@f+1,f,c
 21458                           
 21459                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21460  001E2E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21461  001E32  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21462  001E36                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21463  001E36  6AF8               	clrf	tblptru,c
 21464  001E38                     	endif
 21465  001E38                     	if	0	;tblptru may be non-zero
 21466  001E38                     	endif
 21467  001E38  0008               	tblrd		*
 21468  001E3A  50F5               	movf	tablat,w,c
 21469  001E3C  EC21  F028         	call	i2_isdigit
 21470  001E40  A0D8               	btfss	status,0,c
 21471  001E42  D072               	goto	i2l6260
 21472  001E44  D7CF               	goto	i2l6218
 21473  001E46                     i2l6226:
 21474                           
 21475                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21476  001E46  C020  FFD9         	movff	i2printf@ap,fsr2l
 21477  001E4A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21478  001E4E  CFDE F01E          	movff	postinc2,i2printf@cp
 21479  001E52  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21480  001E56  0E02               	movlw	2
 21481  001E58  2620               	addwf	i2printf@ap,f,c
 21482  001E5A  0E00               	movlw	0
 21483  001E5C  2221               	addwfc	i2printf@ap+1,f,c
 21484                           
 21485                           ;doprnt.c: 740: if(!cp)
 21486  001E5E  501E               	movf	i2printf@cp,w,c
 21487  001E60  101F               	iorwf	i2printf@cp+1,w,c
 21488  001E62  A4D8               	btfss	status,2,c
 21489  001E64  D004               	goto	i2l6234
 21490                           
 21491                           ;doprnt.c: 741: cp = "(null)";
 21492  001E66  0EB6               	movlw	low STR_126
 21493  001E68  6E1E               	movwf	i2printf@cp,c
 21494  001E6A  0EFF               	movlw	high STR_126
 21495  001E6C  6E1F               	movwf	i2printf@cp+1,c
 21496  001E6E                     i2l6234:
 21497                           
 21498                           ;doprnt.c: 745: len = 0;
 21499  001E6E  0E00               	movlw	0
 21500  001E70  6E23               	movwf	i2printf@len+1,c
 21501  001E72  0E00               	movlw	0
 21502  001E74  6E22               	movwf	i2printf@len,c
 21503                           
 21504                           ;doprnt.c: 746: while(cp[len])
 21505  001E76  D002               	goto	i2l6238
 21506  001E78                     i2l6236:
 21507                           
 21508                           ;doprnt.c: 747: len++;
 21509  001E78  4A22               	infsnz	i2printf@len,f,c
 21510  001E7A  2A23               	incf	i2printf@len+1,f,c
 21511  001E7C                     i2l6238:
 21512  001E7C  5022               	movf	i2printf@len,w,c
 21513  001E7E  241E               	addwf	i2printf@cp,w,c
 21514  001E80  6E19               	movwf	??i2_printf& (0+255),c
 21515  001E82  5023               	movf	i2printf@len+1,w,c
 21516  001E84  201F               	addwfc	i2printf@cp+1,w,c
 21517  001E86  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21518  001E88  C019  FFF6         	movff	??i2_printf,tblptrl
 21519  001E8C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21520  001E90  0E00               	movlw	low (__mediumconst shr (0+16))
 21521  001E92  6EF8               	movwf	tblptru,c
 21522  001E94  0E0F               	movlw	(high __ramtop+-1)
 21523  001E96  64F7               	cpfsgt	tblptrh,c
 21524  001E98  D003               	bra	i2u489_47
 21525  001E9A  0008               	tblrd		*
 21526  001E9C  50F5               	movf	tablat,w,c
 21527  001E9E  D005               	bra	i2u489_40
 21528  001EA0                     i2u489_47:
 21529  001EA0  CFF6 FFE9          	movff	tblptrl,fsr0l
 21530  001EA4  CFF7 FFEA          	movff	tblptrh,fsr0h
 21531  001EA8  50EF               	movf	indf0,w,c
 21532  001EAA                     i2u489_40:
 21533  001EAA  0900               	iorlw	0
 21534  001EAC  A4D8               	btfss	status,2,c
 21535  001EAE  D7E4               	goto	i2l6236
 21536                           
 21537                           ;doprnt.c: 757: if(width > len)
 21538  001EB0  5028               	movf	i2printf@width,w,c
 21539  001EB2  5C22               	subwf	i2printf@len,w,c
 21540  001EB4  5029               	movf	i2printf@width+1,w,c
 21541  001EB6  5823               	subwfb	i2printf@len+1,w,c
 21542  001EB8  B0D8               	btfsc	status,0,c
 21543  001EBA  D005               	goto	i2l6244
 21544                           
 21545                           ;doprnt.c: 758: width -= len;
 21546  001EBC  5022               	movf	i2printf@len,w,c
 21547  001EBE  5E28               	subwf	i2printf@width,f,c
 21548  001EC0  5023               	movf	i2printf@len+1,w,c
 21549  001EC2  5A29               	subwfb	i2printf@width+1,f,c
 21550  001EC4  D008               	goto	i2l6248
 21551  001EC6                     i2l6244:
 21552                           
 21553                           ;doprnt.c: 759: else
 21554                           ;doprnt.c: 760: width = 0;
 21555  001EC6  0E00               	movlw	0
 21556  001EC8  6E29               	movwf	i2printf@width+1,c
 21557  001ECA  0E00               	movlw	0
 21558  001ECC  6E28               	movwf	i2printf@width,c
 21559                           
 21560                           ;doprnt.c: 764: while(width--)
 21561  001ECE  D003               	goto	i2l6248
 21562  001ED0                     i2l6246:
 21563                           
 21564                           ;doprnt.c: 765: (putch(' ') );
 21565  001ED0  0E20               	movlw	32
 21566  001ED2  EC85  F028         	call	i2_putch
 21567  001ED6                     i2l6248:
 21568  001ED6  0628               	decf	i2printf@width,f,c
 21569  001ED8  A0D8               	btfss	status,0,c
 21570  001EDA  0629               	decf	i2printf@width+1,f,c
 21571  001EDC  2828               	incf	i2printf@width,w,c
 21572  001EDE  E1F8               	bnz	i2l6246
 21573  001EE0  2829               	incf	i2printf@width+1,w,c
 21574  001EE2  B4D8               	btfsc	status,2,c
 21575  001EE4  D016               	goto	i2l6254
 21576  001EE6  D7F4               	goto	i2l6246
 21577  001EE8                     i2l6250:
 21578                           
 21579                           ;doprnt.c: 768: (putch(*cp++) );
 21580  001EE8  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21581  001EEC  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21582  001EF0  0E00               	movlw	low (__mediumconst shr (0+16))
 21583  001EF2  6EF8               	movwf	tblptru,c
 21584  001EF4  0E0F               	movlw	(high __ramtop+-1)
 21585  001EF6  64F7               	cpfsgt	tblptrh,c
 21586  001EF8  D003               	bra	i2u493_47
 21587  001EFA  0008               	tblrd		*
 21588  001EFC  50F5               	movf	tablat,w,c
 21589  001EFE  D005               	bra	i2u493_40
 21590  001F00                     i2u493_47:
 21591  001F00  CFF6 FFE9          	movff	tblptrl,fsr0l
 21592  001F04  CFF7 FFEA          	movff	tblptrh,fsr0h
 21593  001F08  50EF               	movf	indf0,w,c
 21594  001F0A                     i2u493_40:
 21595  001F0A  EC85  F028         	call	i2_putch
 21596  001F0E  4A1E               	infsnz	i2printf@cp,f,c
 21597  001F10  2A1F               	incf	i2printf@cp+1,f,c
 21598  001F12                     i2l6254:
 21599  001F12  0622               	decf	i2printf@len,f,c
 21600  001F14  A0D8               	btfss	status,0,c
 21601  001F16  0623               	decf	i2printf@len+1,f,c
 21602  001F18  2822               	incf	i2printf@len,w,c
 21603  001F1A  E1E6               	bnz	i2l6250
 21604  001F1C  2823               	incf	i2printf@len+1,w,c
 21605  001F1E  B4D8               	btfsc	status,2,c
 21606  001F20  D0DA               	goto	i2l6332
 21607  001F22  D7E2               	goto	i2l6250
 21608  001F24                     i2l6256:
 21609                           
 21610                           ;doprnt.c: 818: flag |= 0x40;
 21611  001F24  8C26               	bsf	i2printf@flag,6,c
 21612                           
 21613                           ;doprnt.c: 822: }
 21614                           
 21615                           ;doprnt.c: 819: break;
 21616  001F26  D01B               	goto	i2l1368
 21617  001F28                     i2l6260:
 21618  001F28  C00D  FFF6         	movff	i2printf@f,tblptrl
 21619  001F2C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21620  001F30  4A0D               	infsnz	i2printf@f,f,c
 21621  001F32  2A0E               	incf	i2printf@f+1,f,c
 21622  001F34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21623  001F34  6AF8               	clrf	tblptru,c
 21624  001F36                     	endif
 21625  001F36                     	if	0	;tblptru may be non-zero
 21626  001F36                     	endif
 21627  001F36  0008               	tblrd		*
 21628  001F38  CFF5 F027          	movff	tablat,i2printf@c
 21629  001F3C  5027               	movf	i2printf@c,w,c
 21630                           
 21631                           ; Switch size 1, requested type "space"
 21632                           ; Number of cases is 5, Range of values is 0 to 117
 21633                           ; switch strategies available:
 21634                           ; Name         Instructions Cycles
 21635                           ; simple_byte           16     9 (average)
 21636                           ;	Chosen strategy is simple_byte
 21637  001F3E  0A00               	xorlw	0	; case 0
 21638  001F40  B4D8               	btfsc	status,2,c
 21639  001F42  0012               	return	
 21640  001F44  0A64               	xorlw	100	; case 100
 21641  001F46  B4D8               	btfsc	status,2,c
 21642  001F48  D00A               	goto	i2l1368
 21643  001F4A  0A0D               	xorlw	13	; case 105
 21644  001F4C  B4D8               	btfsc	status,2,c
 21645  001F4E  D007               	goto	i2l1368
 21646  001F50  0A1A               	xorlw	26	; case 115
 21647  001F52  B4D8               	btfsc	status,2,c
 21648  001F54  D778               	goto	i2l6226
 21649  001F56  0A06               	xorlw	6	; case 117
 21650  001F58  B4D8               	btfsc	status,2,c
 21651  001F5A  D7E4               	goto	i2l6256
 21652  001F5C  D0BC               	goto	i2l6332
 21653  001F5E                     i2l1368:
 21654                           
 21655                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21656  001F5E  BC26               	btfsc	i2printf@flag,6,c
 21657  001F60  D015               	goto	i2l6272
 21658                           
 21659                           ;doprnt.c: 1253: {
 21660                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21661  001F62  C020  FFD9         	movff	i2printf@ap,fsr2l
 21662  001F66  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21663  001F6A  CFDE F024          	movff	postinc2,i2printf@val
 21664  001F6E  CFDD F025          	movff	postdec2,i2printf@val+1
 21665  001F72  0E02               	movlw	2
 21666  001F74  2620               	addwf	i2printf@ap,f,c
 21667  001F76  0E00               	movlw	0
 21668  001F78  2221               	addwfc	i2printf@ap+1,f,c
 21669                           
 21670                           ;doprnt.c: 1261: if((int)val < 0) {
 21671  001F7A  AE25               	btfss	i2printf@val+1,7,c
 21672  001F7C  D013               	goto	i2l6276
 21673                           
 21674                           ;doprnt.c: 1262: flag |= 0x03;
 21675  001F7E  0E03               	movlw	3
 21676  001F80  1226               	iorwf	i2printf@flag,f,c
 21677                           
 21678                           ;doprnt.c: 1263: val = -val;
 21679  001F82  6C24               	negf	i2printf@val,c
 21680  001F84  1E25               	comf	i2printf@val+1,f,c
 21681  001F86  B0D8               	btfsc	status,0,c
 21682  001F88  2A25               	incf	i2printf@val+1,f,c
 21683                           
 21684                           ;doprnt.c: 1264: }
 21685                           ;doprnt.c: 1266: }
 21686  001F8A  D00C               	goto	i2l6276
 21687  001F8C                     i2l6272:
 21688                           
 21689                           ;doprnt.c: 1268: else
 21690                           ;doprnt.c: 1273: {
 21691                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21692  001F8C  C020  FFD9         	movff	i2printf@ap,fsr2l
 21693  001F90  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21694  001F94  CFDE F024          	movff	postinc2,i2printf@val
 21695  001F98  CFDD F025          	movff	postdec2,i2printf@val+1
 21696  001F9C  0E02               	movlw	2
 21697  001F9E  2620               	addwf	i2printf@ap,f,c
 21698  001FA0  0E00               	movlw	0
 21699  001FA2  2221               	addwfc	i2printf@ap+1,f,c
 21700  001FA4                     i2l6276:
 21701                           
 21702                           ;doprnt.c: 1287: }
 21703                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21704  001FA4  0E01               	movlw	1
 21705  001FA6  6E27               	movwf	i2printf@c,c
 21706  001FA8                     i2l6278:
 21707  001FA8  0E05               	movlw	5
 21708  001FAA  1827               	xorwf	i2printf@c,w,c
 21709  001FAC  B4D8               	btfsc	status,2,c
 21710  001FAE  D015               	goto	i2l6290
 21711                           
 21712                           ;doprnt.c: 1306: if(val < dpowers[c])
 21713  001FB0  5027               	movf	i2printf@c,w,c
 21714  001FB2  0D02               	mullw	2
 21715  001FB4  0E00               	movlw	low _dpowers
 21716  001FB6  24F3               	addwf	prodl,w,c
 21717  001FB8  6EF6               	movwf	tblptrl,c
 21718  001FBA  0EFB               	movlw	high _dpowers
 21719  001FBC  20F4               	addwfc	prodh,w,c
 21720  001FBE  6EF7               	movwf	tblptrh,c
 21721  001FC0                     	if	1	;There are 3 active tblptr bytes
 21722  001FC0  6AF8               	clrf	tblptru,c
 21723  001FC2  0E00               	movlw	low (__mediumconst shr (0+16))
 21724  001FC4  22F8               	addwfc	tblptru,f,c
 21725  001FC6                     	endif
 21726  001FC6  0009               	tblrd		*+
 21727  001FC8  50F5               	movf	tablat,w,c
 21728  001FCA  5C24               	subwf	i2printf@val,w,c
 21729  001FCC  0009               	tblrd		*+
 21730  001FCE  50F5               	movf	tablat,w,c
 21731  001FD0  5825               	subwfb	i2printf@val+1,w,c
 21732  001FD2  A0D8               	btfss	status,0,c
 21733  001FD4  D002               	goto	i2l6290
 21734                           
 21735                           ;doprnt.c: 1307: break;
 21736  001FD6  2A27               	incf	i2printf@c,f,c
 21737  001FD8  D7E7               	goto	i2l6278
 21738  001FDA                     i2l6290:
 21739                           
 21740                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21741  001FDA  5028               	movf	i2printf@width,w,c
 21742  001FDC  1029               	iorwf	i2printf@width+1,w,c
 21743  001FDE  B4D8               	btfsc	status,2,c
 21744  001FE0  D009               	goto	i2l6296
 21745  001FE2  C026  F019         	movff	i2printf@flag,??i2_printf
 21746  001FE6  0E03               	movlw	3
 21747  001FE8  1619               	andwf	??i2_printf,f,c
 21748  001FEA  B4D8               	btfsc	status,2,c
 21749  001FEC  D003               	goto	i2l6296
 21750                           
 21751                           ;doprnt.c: 1346: width--;
 21752  001FEE  0628               	decf	i2printf@width,f,c
 21753  001FF0  A0D8               	btfss	status,0,c
 21754  001FF2  0629               	decf	i2printf@width+1,f,c
 21755  001FF4                     i2l6296:
 21756                           
 21757                           ;doprnt.c: 1381: if(width > c)
 21758  001FF4  0E80               	movlw	128
 21759  001FF6  BE27               	btfsc	i2printf@c,7,c
 21760  001FF8  0E7F               	movlw	127
 21761  001FFA  6E19               	movwf	??i2_printf& (0+255),c
 21762  001FFC  5028               	movf	i2printf@width,w,c
 21763  001FFE  5C27               	subwf	i2printf@c,w,c
 21764  002000  5029               	movf	i2printf@width+1,w,c
 21765  002002  0A80               	xorlw	128
 21766  002004  5819               	subwfb	??i2_printf& (0+255),w,c
 21767  002006  B0D8               	btfsc	status,0,c
 21768  002008  D007               	goto	i2l6300
 21769                           
 21770                           ;doprnt.c: 1382: width -= c;
 21771  00200A  5027               	movf	i2printf@c,w,c
 21772  00200C  5E28               	subwf	i2printf@width,f,c
 21773  00200E  0E00               	movlw	0
 21774  002010  BE27               	btfsc	i2printf@c,7,c
 21775  002012  0EFF               	movlw	255
 21776  002014  5A29               	subwfb	i2printf@width+1,f,c
 21777  002016  D004               	goto	i2l6302
 21778  002018                     i2l6300:
 21779                           
 21780                           ;doprnt.c: 1383: else
 21781                           ;doprnt.c: 1384: width = 0;
 21782  002018  0E00               	movlw	0
 21783  00201A  6E29               	movwf	i2printf@width+1,c
 21784  00201C  0E00               	movlw	0
 21785  00201E  6E28               	movwf	i2printf@width,c
 21786  002020                     i2l6302:
 21787                           
 21788                           ;doprnt.c: 1387: if(flag & 0x04) {
 21789  002020  A426               	btfss	i2printf@flag,2,c
 21790  002022  D014               	goto	i2l6314
 21791                           
 21792                           ;doprnt.c: 1392: if(flag & 0x03)
 21793  002024  C026  F019         	movff	i2printf@flag,??i2_printf
 21794  002028  0E03               	movlw	3
 21795  00202A  1619               	andwf	??i2_printf,f,c
 21796  00202C  B4D8               	btfsc	status,2,c
 21797  00202E  D003               	goto	i2l6308
 21798                           
 21799                           ;doprnt.c: 1393: (putch('-') );
 21800  002030  0E2D               	movlw	45
 21801  002032  EC85  F028         	call	i2_putch
 21802  002036                     i2l6308:
 21803                           
 21804                           ;doprnt.c: 1415: if(width)
 21805  002036  5028               	movf	i2printf@width,w,c
 21806  002038  1029               	iorwf	i2printf@width+1,w,c
 21807  00203A  B4D8               	btfsc	status,2,c
 21808  00203C  D01E               	goto	i2l6324
 21809                           
 21810                           ;doprnt.c: 1417: (putch('0') );
 21811                           
 21812                           ;doprnt.c: 1416: do
 21813  00203E  0E30               	movlw	48
 21814  002040  EC85  F028         	call	i2_putch
 21815                           
 21816                           ;doprnt.c: 1418: while(--width);
 21817  002044  0628               	decf	i2printf@width,f,c
 21818  002046  A0D8               	btfss	status,0,c
 21819  002048  0629               	decf	i2printf@width+1,f,c
 21820  00204A  D7F5               	goto	i2l6308
 21821  00204C                     i2l6314:
 21822                           
 21823                           ;doprnt.c: 1422: {
 21824                           ;doprnt.c: 1424: if(width
 21825                           ;doprnt.c: 1428: )
 21826  00204C  5028               	movf	i2printf@width,w,c
 21827  00204E  1029               	iorwf	i2printf@width+1,w,c
 21828  002050  B4D8               	btfsc	status,2,c
 21829  002052  D00A               	goto	i2l6320
 21830  002054                     i2l6316:
 21831                           
 21832                           ;doprnt.c: 1430: (putch(' ') );
 21833  002054  0E20               	movlw	32
 21834  002056  EC85  F028         	call	i2_putch
 21835                           
 21836                           ;doprnt.c: 1431: while(--width);
 21837  00205A  0628               	decf	i2printf@width,f,c
 21838  00205C  A0D8               	btfss	status,0,c
 21839  00205E  0629               	decf	i2printf@width+1,f,c
 21840  002060  5028               	movf	i2printf@width,w,c
 21841  002062  1029               	iorwf	i2printf@width+1,w,c
 21842  002064  A4D8               	btfss	status,2,c
 21843  002066  D7F6               	goto	i2l6316
 21844  002068                     i2l6320:
 21845                           
 21846                           ;doprnt.c: 1438: if(flag & 0x03)
 21847  002068  C026  F019         	movff	i2printf@flag,??i2_printf
 21848  00206C  0E03               	movlw	3
 21849  00206E  1619               	andwf	??i2_printf,f,c
 21850  002070  B4D8               	btfsc	status,2,c
 21851  002072  D003               	goto	i2l6324
 21852                           
 21853                           ;doprnt.c: 1439: (putch('-') );
 21854  002074  0E2D               	movlw	45
 21855  002076  EC85  F028         	call	i2_putch
 21856  00207A                     i2l6324:
 21857                           
 21858                           ;doprnt.c: 1469: }
 21859                           ;doprnt.c: 1472: prec = c;
 21860  00207A  C027  F01D         	movff	i2printf@c,i2printf@prec
 21861                           
 21862                           ;doprnt.c: 1474: while(prec--) {
 21863  00207E  D027               	goto	i2l6330
 21864  002080                     i2l6326:
 21865                           
 21866                           ;doprnt.c: 1478: {
 21867                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21868  002080  501D               	movf	i2printf@prec,w,c
 21869  002082  0D02               	mullw	2
 21870  002084  0E00               	movlw	low _dpowers
 21871  002086  24F3               	addwf	prodl,w,c
 21872  002088  6EF6               	movwf	tblptrl,c
 21873  00208A  0EFB               	movlw	high _dpowers
 21874  00208C  20F4               	addwfc	prodh,w,c
 21875  00208E  6EF7               	movwf	tblptrh,c
 21876  002090                     	if	1	;There are 3 active tblptr bytes
 21877  002090  6AF8               	clrf	tblptru,c
 21878  002092  0E00               	movlw	low (__mediumconst shr (0+16))
 21879  002094  22F8               	addwfc	tblptru,f,c
 21880  002096                     	endif
 21881  002096  0009               	tblrd		*+
 21882  002098  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21883  00209C  000A               	tblrd		*-
 21884  00209E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21885  0020A2  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21886  0020A6  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21887  0020AA  ECC1  F024         	call	i2___lwdiv	;wreg free
 21888  0020AE  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21889  0020B2  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21890  0020B6  0E00               	movlw	0
 21891  0020B8  6E04               	movwf	i2___lwmod@divisor+1,c
 21892  0020BA  0E0A               	movlw	10
 21893  0020BC  6E03               	movwf	i2___lwmod@divisor,c
 21894  0020BE  EC80  F025         	call	i2___lwmod	;wreg free
 21895  0020C2  5001               	movf	?i2___lwmod,w,c
 21896  0020C4  0F30               	addlw	48
 21897  0020C6  6E27               	movwf	i2printf@c,c
 21898                           
 21899                           ;doprnt.c: 1523: }
 21900                           ;doprnt.c: 1524: (putch(c) );
 21901  0020C8  5027               	movf	i2printf@c,w,c
 21902  0020CA  EC85  F028         	call	i2_putch
 21903  0020CE                     i2l6330:
 21904  0020CE  061D               	decf	i2printf@prec,f,c
 21905  0020D0  281D               	incf	i2printf@prec,w,c
 21906  0020D2  A4D8               	btfss	status,2,c
 21907  0020D4  D7D5               	goto	i2l6326
 21908  0020D6                     i2l6332:
 21909  0020D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 21910  0020DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21911  0020DE  4A0D               	infsnz	i2printf@f,f,c
 21912  0020E0  2A0E               	incf	i2printf@f+1,f,c
 21913  0020E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21914  0020E2  6AF8               	clrf	tblptru,c
 21915  0020E4                     	endif
 21916  0020E4                     	if	0	;tblptru may be non-zero
 21917  0020E4                     	endif
 21918  0020E4  0008               	tblrd		*
 21919  0020E6  CFF5 F027          	movff	tablat,i2printf@c
 21920  0020EA  5027               	movf	i2printf@c,w,c
 21921  0020EC  B4D8               	btfsc	status,2,c
 21922  0020EE  0012               	return	
 21923  0020F0  D64E               	goto	i2l6202
 21924  0020F2                     __end_ofi2_printf:
 21925                           	opt stack 0
 21926                           pclatu	equ	0xFFB
 21927                           pclath	equ	0xFFA
 21928                           tblptru	equ	0xFF8
 21929                           tblptrh	equ	0xFF7
 21930                           tblptrl	equ	0xFF6
 21931                           tablat	equ	0xFF5
 21932                           prodh	equ	0xFF4
 21933                           prodl	equ	0xFF3
 21934                           intcon	equ	0xFF2
 21935                           intcon2	equ	0xFF1
 21936                           intcon3	equ	0xFF0
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           postdec1	equ	0xFE5
 21943                           fsr1h	equ	0xFE2
 21944                           fsr1l	equ	0xFE1
 21945                           indf2	equ	0xFDF
 21946                           postinc2	equ	0xFDE
 21947                           postdec2	equ	0xFDD
 21948                           fsr2h	equ	0xFDA
 21949                           fsr2l	equ	0xFD9
 21950                           status	equ	0xFD8
 21951                           
 21952 ;; *************** function i2_putch *****************
 21953 ;; Defined at:
 21954 ;;		line 20 in file "lcd.c"
 21955 ;; Parameters:    Size  Location     Type
 21956 ;;  data            1    wreg     unsigned char 
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;  data            1    2[COMRAM] unsigned char 
 21959 ;; Return value:  Size  Location     Type
 21960 ;;                  1    wreg      void 
 21961 ;; Registers used:
 21962 ;;		wreg, status,2, status,0, cstack
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;Total ram usage:        1 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; Hardware stack levels required when called:    1
 21975 ;; This function calls:
 21976 ;;		i2_lcdNibble
 21977 ;; This function is called by:
 21978 ;;		i2_printf
 21979 ;; This function uses a non-reentrant model
 21980 ;;
 21981                           
 21982                           	psect	text80
 21983  00510A                     __ptext80:
 21984                           	opt stack 0
 21985  00510A                     i2_putch:
 21986                           	opt stack 19
 21987                           
 21988                           ;incstack = 0
 21989                           ;i2putch@data stored from wreg
 21990  00510A  6E03               	movwf	i2putch@data,c
 21991                           
 21992                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21993  00510C  848C               	bsf	3980,2,c	;volatile
 21994                           
 21995                           ;lcd.c: 22: lcdNibble(data);
 21996  00510E  5003               	movf	i2putch@data,w,c
 21997  005110  EC96  F024         	call	i2_lcdNibble
 21998  005114  0012               	return		;funcret
 21999  005116                     __end_ofi2_putch:
 22000                           	opt stack 0
 22001                           pclatu	equ	0xFFB
 22002                           pclath	equ	0xFFA
 22003                           tblptru	equ	0xFF8
 22004                           tblptrh	equ	0xFF7
 22005                           tblptrl	equ	0xFF6
 22006                           tablat	equ	0xFF5
 22007                           prodh	equ	0xFF4
 22008                           prodl	equ	0xFF3
 22009                           intcon	equ	0xFF2
 22010                           intcon2	equ	0xFF1
 22011                           intcon3	equ	0xFF0
 22012                           indf0	equ	0xFEF
 22013                           postinc0	equ	0xFEE
 22014                           fsr0h	equ	0xFEA
 22015                           fsr0l	equ	0xFE9
 22016                           wreg	equ	0xFE8
 22017                           postdec1	equ	0xFE5
 22018                           fsr1h	equ	0xFE2
 22019                           fsr1l	equ	0xFE1
 22020                           indf2	equ	0xFDF
 22021                           postinc2	equ	0xFDE
 22022                           postdec2	equ	0xFDD
 22023                           fsr2h	equ	0xFDA
 22024                           fsr2l	equ	0xFD9
 22025                           status	equ	0xFD8
 22026                           
 22027 ;; *************** function i2_isdigit *****************
 22028 ;; Defined at:
 22029 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22030 ;; Parameters:    Size  Location     Type
 22031 ;;  c               1    wreg     unsigned char 
 22032 ;; Auto vars:     Size  Location     Type
 22033 ;;  c               1    2[COMRAM] unsigned char 
 22034 ;; Return value:  Size  Location     Type
 22035 ;;		None               void
 22036 ;; Registers used:
 22037 ;;		wreg, status,2, status,0
 22038 ;; Tracked objects:
 22039 ;;		On entry : 0/0
 22040 ;;		On exit  : 0/0
 22041 ;;		Unchanged: 0/0
 22042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;Total ram usage:        3 bytes
 22048 ;; Hardware stack levels used:    1
 22049 ;; This function calls:
 22050 ;;		Nothing
 22051 ;; This function is called by:
 22052 ;;		i2_printf
 22053 ;; This function uses a non-reentrant model
 22054 ;;
 22055                           
 22056                           	psect	text81
 22057  005042                     __ptext81:
 22058                           	opt stack 0
 22059  005042                     i2_isdigit:
 22060                           	opt stack 20
 22061                           
 22062                           ;incstack = 0
 22063                           ;i2isdigit@c stored from wreg
 22064  005042  6E03               	movwf	i2isdigit@c,c
 22065  005044  0E00               	movlw	0
 22066  005046  6E02               	movwf	i2_isdigit$1978,c
 22067  005048  0E3A               	movlw	58
 22068  00504A  6003               	cpfslt	i2isdigit@c,c
 22069  00504C  D005               	goto	i2l5906
 22070  00504E  0E2F               	movlw	47
 22071  005050  6403               	cpfsgt	i2isdigit@c,c
 22072  005052  D002               	goto	i2l5906
 22073  005054  0E01               	movlw	1
 22074  005056  6E02               	movwf	i2_isdigit$1978,c
 22075  005058                     i2l5906:
 22076  005058  C002  F001         	movff	i2_isdigit$1978,??i2_isdigit
 22077  00505C  3001               	rrcf	??i2_isdigit,w,c
 22078  00505E  0012               	return	
 22079  005060                     __end_ofi2_isdigit:
 22080                           	opt stack 0
 22081                           pclatu	equ	0xFFB
 22082                           pclath	equ	0xFFA
 22083                           tblptru	equ	0xFF8
 22084                           tblptrh	equ	0xFF7
 22085                           tblptrl	equ	0xFF6
 22086                           tablat	equ	0xFF5
 22087                           prodh	equ	0xFF4
 22088                           prodl	equ	0xFF3
 22089                           intcon	equ	0xFF2
 22090                           intcon2	equ	0xFF1
 22091                           intcon3	equ	0xFF0
 22092                           indf0	equ	0xFEF
 22093                           postinc0	equ	0xFEE
 22094                           fsr0h	equ	0xFEA
 22095                           fsr0l	equ	0xFE9
 22096                           wreg	equ	0xFE8
 22097                           postdec1	equ	0xFE5
 22098                           fsr1h	equ	0xFE2
 22099                           fsr1l	equ	0xFE1
 22100                           indf2	equ	0xFDF
 22101                           postinc2	equ	0xFDE
 22102                           postdec2	equ	0xFDD
 22103                           fsr2h	equ	0xFDA
 22104                           fsr2l	equ	0xFD9
 22105                           status	equ	0xFD8
 22106                           
 22107 ;; *************** function i2___wmul *****************
 22108 ;; Defined at:
 22109 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22110 ;; Parameters:    Size  Location     Type
 22111 ;;  multiplier      2    0[COMRAM] unsigned int 
 22112 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22113 ;; Auto vars:     Size  Location     Type
 22114 ;;  __wmul          2    4[COMRAM] unsigned int 
 22115 ;; Return value:  Size  Location     Type
 22116 ;;                  2    0[COMRAM] unsigned int 
 22117 ;; Registers used:
 22118 ;;		wreg, status,2, status,0, prodl, prodh
 22119 ;; Tracked objects:
 22120 ;;		On entry : 0/0
 22121 ;;		On exit  : 0/0
 22122 ;;		Unchanged: 0/0
 22123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22127 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22128 ;;Total ram usage:        6 bytes
 22129 ;; Hardware stack levels used:    1
 22130 ;; This function calls:
 22131 ;;		Nothing
 22132 ;; This function is called by:
 22133 ;;		_printSortTimer
 22134 ;;		_retrieveLog
 22135 ;;		i2_printf
 22136 ;; This function uses a non-reentrant model
 22137 ;;
 22138                           
 22139                           	psect	text82
 22140  004F8E                     __ptext82:
 22141                           	opt stack 0
 22142  004F8E                     i2___wmul:
 22143                           	opt stack 20
 22144                           
 22145                           ;incstack = 0
 22146  004F8E  5001               	movf	i2___wmul@multiplier,w,c
 22147  004F90  0203               	mulwf	i2___wmul@multiplicand,c
 22148  004F92  CFF3 F005          	movff	prodl,i2___wmul@product
 22149  004F96  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22150  004F9A  5001               	movf	i2___wmul@multiplier,w,c
 22151  004F9C  0204               	mulwf	i2___wmul@multiplicand+1,c
 22152  004F9E  50F3               	movf	prodl,w,c
 22153  004FA0  2606               	addwf	i2___wmul@product+1,f,c
 22154  004FA2  5002               	movf	i2___wmul@multiplier+1,w,c
 22155  004FA4  0203               	mulwf	i2___wmul@multiplicand,c
 22156  004FA6  50F3               	movf	prodl,w,c
 22157  004FA8  2606               	addwf	i2___wmul@product+1,f,c
 22158  004FAA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22159  004FAE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22160  004FB2  0012               	return	
 22161  004FB4                     __end_ofi2___wmul:
 22162                           	opt stack 0
 22163                           pclatu	equ	0xFFB
 22164                           pclath	equ	0xFFA
 22165                           tblptru	equ	0xFF8
 22166                           tblptrh	equ	0xFF7
 22167                           tblptrl	equ	0xFF6
 22168                           tablat	equ	0xFF5
 22169                           prodh	equ	0xFF4
 22170                           prodl	equ	0xFF3
 22171                           intcon	equ	0xFF2
 22172                           intcon2	equ	0xFF1
 22173                           intcon3	equ	0xFF0
 22174                           indf0	equ	0xFEF
 22175                           postinc0	equ	0xFEE
 22176                           fsr0h	equ	0xFEA
 22177                           fsr0l	equ	0xFE9
 22178                           wreg	equ	0xFE8
 22179                           postdec1	equ	0xFE5
 22180                           fsr1h	equ	0xFE2
 22181                           fsr1l	equ	0xFE1
 22182                           indf2	equ	0xFDF
 22183                           postinc2	equ	0xFDE
 22184                           postdec2	equ	0xFDD
 22185                           fsr2h	equ	0xFDA
 22186                           fsr2l	equ	0xFD9
 22187                           status	equ	0xFD8
 22188                           
 22189 ;; *************** function i2___lwmod *****************
 22190 ;; Defined at:
 22191 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22192 ;; Parameters:    Size  Location     Type
 22193 ;;  dividend        2    0[COMRAM] unsigned int 
 22194 ;;  divisor         2    2[COMRAM] unsigned int 
 22195 ;; Auto vars:     Size  Location     Type
 22196 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22197 ;; Return value:  Size  Location     Type
 22198 ;;                  2    0[COMRAM] unsigned int 
 22199 ;; Registers used:
 22200 ;;		wreg, status,2, status,0
 22201 ;; Tracked objects:
 22202 ;;		On entry : 0/0
 22203 ;;		On exit  : 0/0
 22204 ;;		Unchanged: 0/0
 22205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22209 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;Total ram usage:        5 bytes
 22211 ;; Hardware stack levels used:    1
 22212 ;; This function calls:
 22213 ;;		Nothing
 22214 ;; This function is called by:
 22215 ;;		_printSortTimer
 22216 ;;		i2_printf
 22217 ;; This function uses a non-reentrant model
 22218 ;;
 22219                           
 22220                           	psect	text83
 22221  004B00                     __ptext83:
 22222                           	opt stack 0
 22223  004B00                     i2___lwmod:
 22224                           	opt stack 20
 22225                           
 22226                           ;incstack = 0
 22227  004B00  5003               	movf	i2___lwmod@divisor,w,c
 22228  004B02  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22229  004B04  B4D8               	btfsc	status,2,c
 22230  004B06  D018               	goto	i2l1825
 22231  004B08  0E01               	movlw	1
 22232  004B0A  6E05               	movwf	i2___lwmod@counter,c
 22233  004B0C  D004               	goto	i2l5938
 22234  004B0E                     i2l5936:
 22235  004B0E  90D8               	bcf	status,0,c
 22236  004B10  3603               	rlcf	i2___lwmod@divisor,f,c
 22237  004B12  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22238  004B14  2A05               	incf	i2___lwmod@counter,f,c
 22239  004B16                     i2l5938:
 22240  004B16  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22241  004B18  D7FA               	goto	i2l5936
 22242  004B1A                     i2l5940:
 22243  004B1A  5003               	movf	i2___lwmod@divisor,w,c
 22244  004B1C  5C01               	subwf	i2___lwmod@dividend,w,c
 22245  004B1E  5004               	movf	i2___lwmod@divisor+1,w,c
 22246  004B20  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22247  004B22  A0D8               	btfss	status,0,c
 22248  004B24  D004               	goto	i2l5944
 22249  004B26  5003               	movf	i2___lwmod@divisor,w,c
 22250  004B28  5E01               	subwf	i2___lwmod@dividend,f,c
 22251  004B2A  5004               	movf	i2___lwmod@divisor+1,w,c
 22252  004B2C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22253  004B2E                     i2l5944:
 22254  004B2E  90D8               	bcf	status,0,c
 22255  004B30  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22256  004B32  3203               	rrcf	i2___lwmod@divisor,f,c
 22257  004B34  2E05               	decfsz	i2___lwmod@counter,f,c
 22258  004B36  D7F1               	goto	i2l5940
 22259  004B38                     i2l1825:
 22260  004B38  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22261  004B3C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22262  004B40  0012               	return		;funcret
 22263  004B42                     __end_ofi2___lwmod:
 22264                           	opt stack 0
 22265                           pclatu	equ	0xFFB
 22266                           pclath	equ	0xFFA
 22267                           tblptru	equ	0xFF8
 22268                           tblptrh	equ	0xFF7
 22269                           tblptrl	equ	0xFF6
 22270                           tablat	equ	0xFF5
 22271                           prodh	equ	0xFF4
 22272                           prodl	equ	0xFF3
 22273                           intcon	equ	0xFF2
 22274                           intcon2	equ	0xFF1
 22275                           intcon3	equ	0xFF0
 22276                           indf0	equ	0xFEF
 22277                           postinc0	equ	0xFEE
 22278                           fsr0h	equ	0xFEA
 22279                           fsr0l	equ	0xFE9
 22280                           wreg	equ	0xFE8
 22281                           postdec1	equ	0xFE5
 22282                           fsr1h	equ	0xFE2
 22283                           fsr1l	equ	0xFE1
 22284                           indf2	equ	0xFDF
 22285                           postinc2	equ	0xFDE
 22286                           postdec2	equ	0xFDD
 22287                           fsr2h	equ	0xFDA
 22288                           fsr2l	equ	0xFD9
 22289                           status	equ	0xFD8
 22290                           
 22291 ;; *************** function i2___lwdiv *****************
 22292 ;; Defined at:
 22293 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22294 ;; Parameters:    Size  Location     Type
 22295 ;;  dividend        2    5[COMRAM] unsigned int 
 22296 ;;  divisor         2    7[COMRAM] unsigned int 
 22297 ;; Auto vars:     Size  Location     Type
 22298 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22299 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22300 ;; Return value:  Size  Location     Type
 22301 ;;                  2    5[COMRAM] unsigned int 
 22302 ;; Registers used:
 22303 ;;		wreg, status,2, status,0
 22304 ;; Tracked objects:
 22305 ;;		On entry : 0/0
 22306 ;;		On exit  : 0/0
 22307 ;;		Unchanged: 0/0
 22308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22310 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22312 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22313 ;;Total ram usage:        7 bytes
 22314 ;; Hardware stack levels used:    1
 22315 ;; This function calls:
 22316 ;;		Nothing
 22317 ;; This function is called by:
 22318 ;;		_printSortTimer
 22319 ;;		i2_printf
 22320 ;; This function uses a non-reentrant model
 22321 ;;
 22322                           
 22323                           	psect	text84
 22324  004982                     __ptext84:
 22325                           	opt stack 0
 22326  004982                     i2___lwdiv:
 22327                           	opt stack 20
 22328                           
 22329                           ;incstack = 0
 22330  004982  0E00               	movlw	0
 22331  004984  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22332  004986  0E00               	movlw	0
 22333  004988  6E0A               	movwf	i2___lwdiv@quotient,c
 22334  00498A  5008               	movf	i2___lwdiv@divisor,w,c
 22335  00498C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22336  00498E  B4D8               	btfsc	status,2,c
 22337  004990  D01C               	goto	i2l1815
 22338  004992  0E01               	movlw	1
 22339  004994  6E0C               	movwf	i2___lwdiv@counter,c
 22340  004996  D004               	goto	i2l5918
 22341  004998                     i2l5916:
 22342  004998  90D8               	bcf	status,0,c
 22343  00499A  3608               	rlcf	i2___lwdiv@divisor,f,c
 22344  00499C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22345  00499E  2A0C               	incf	i2___lwdiv@counter,f,c
 22346  0049A0                     i2l5918:
 22347  0049A0  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22348  0049A2  D7FA               	goto	i2l5916
 22349  0049A4                     i2l5920:
 22350  0049A4  90D8               	bcf	status,0,c
 22351  0049A6  360A               	rlcf	i2___lwdiv@quotient,f,c
 22352  0049A8  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22353  0049AA  5008               	movf	i2___lwdiv@divisor,w,c
 22354  0049AC  5C06               	subwf	i2___lwdiv@dividend,w,c
 22355  0049AE  5009               	movf	i2___lwdiv@divisor+1,w,c
 22356  0049B0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22357  0049B2  A0D8               	btfss	status,0,c
 22358  0049B4  D005               	goto	i2l5928
 22359  0049B6  5008               	movf	i2___lwdiv@divisor,w,c
 22360  0049B8  5E06               	subwf	i2___lwdiv@dividend,f,c
 22361  0049BA  5009               	movf	i2___lwdiv@divisor+1,w,c
 22362  0049BC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22363  0049BE  800A               	bsf	i2___lwdiv@quotient,0,c
 22364  0049C0                     i2l5928:
 22365  0049C0  90D8               	bcf	status,0,c
 22366  0049C2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22367  0049C4  3208               	rrcf	i2___lwdiv@divisor,f,c
 22368  0049C6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22369  0049C8  D7ED               	goto	i2l5920
 22370  0049CA                     i2l1815:
 22371  0049CA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22372  0049CE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22373  0049D2  0012               	return		;funcret
 22374  0049D4                     __end_ofi2___lwdiv:
 22375                           	opt stack 0
 22376                           pclatu	equ	0xFFB
 22377                           pclath	equ	0xFFA
 22378                           tblptru	equ	0xFF8
 22379                           tblptrh	equ	0xFF7
 22380                           tblptrl	equ	0xFF6
 22381                           tablat	equ	0xFF5
 22382                           prodh	equ	0xFF4
 22383                           prodl	equ	0xFF3
 22384                           intcon	equ	0xFF2
 22385                           intcon2	equ	0xFF1
 22386                           intcon3	equ	0xFF0
 22387                           indf0	equ	0xFEF
 22388                           postinc0	equ	0xFEE
 22389                           fsr0h	equ	0xFEA
 22390                           fsr0l	equ	0xFE9
 22391                           wreg	equ	0xFE8
 22392                           postdec1	equ	0xFE5
 22393                           fsr1h	equ	0xFE2
 22394                           fsr1l	equ	0xFE1
 22395                           indf2	equ	0xFDF
 22396                           postinc2	equ	0xFDE
 22397                           postdec2	equ	0xFDD
 22398                           fsr2h	equ	0xFDA
 22399                           fsr2l	equ	0xFD9
 22400                           status	equ	0xFD8
 22401                           
 22402 ;; *************** function i2_lcdInst *****************
 22403 ;; Defined at:
 22404 ;;		line 15 in file "lcd.c"
 22405 ;; Parameters:    Size  Location     Type
 22406 ;;  data            1    wreg     unsigned char 
 22407 ;; Auto vars:     Size  Location     Type
 22408 ;;  data            1    2[COMRAM] unsigned char 
 22409 ;; Return value:  Size  Location     Type
 22410 ;;                  1    wreg      void 
 22411 ;; Registers used:
 22412 ;;		wreg, status,2, status,0, cstack
 22413 ;; Tracked objects:
 22414 ;;		On entry : 0/0
 22415 ;;		On exit  : 0/0
 22416 ;;		Unchanged: 0/0
 22417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22422 ;;Total ram usage:        1 bytes
 22423 ;; Hardware stack levels used:    1
 22424 ;; Hardware stack levels required when called:    1
 22425 ;; This function calls:
 22426 ;;		i2_lcdNibble
 22427 ;; This function is called by:
 22428 ;;		_change_state_to_menu_11
 22429 ;;		_change_state_to_menu_23
 22430 ;;		_change_state_to_logs_11
 22431 ;;		_change_state_to_logs_12
 22432 ;;		_change_state_to_logs_22
 22433 ;;		_change_state_to_logs_23
 22434 ;;		_change_state_to_logs_33
 22435 ;;		_change_state_to_logs_34
 22436 ;;		_printSortTimer
 22437 ;;		i2_change_state_to_menu_start
 22438 ;;		i2_change_state_to_menu_12
 22439 ;;		i2_change_state_to_menu_22
 22440 ;;		i2_printRTC
 22441 ;; This function uses a non-reentrant model
 22442 ;;
 22443                           
 22444                           	psect	text85
 22445  005116                     __ptext85:
 22446                           	opt stack 0
 22447  005116                     i2_lcdInst:
 22448                           	opt stack 19
 22449                           
 22450                           ;incstack = 0
 22451                           ;i2lcdInst@data stored from wreg
 22452  005116  6E03               	movwf	i2lcdInst@data,c
 22453                           
 22454                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22455  005118  948C               	bcf	3980,2,c	;volatile
 22456                           
 22457                           ;lcd.c: 17: lcdNibble(data);
 22458  00511A  5003               	movf	i2lcdInst@data,w,c
 22459  00511C  EC96  F024         	call	i2_lcdNibble
 22460  005120  0012               	return		;funcret
 22461  005122                     __end_ofi2_lcdInst:
 22462                           	opt stack 0
 22463                           pclatu	equ	0xFFB
 22464                           pclath	equ	0xFFA
 22465                           tblptru	equ	0xFF8
 22466                           tblptrh	equ	0xFF7
 22467                           tblptrl	equ	0xFF6
 22468                           tablat	equ	0xFF5
 22469                           prodh	equ	0xFF4
 22470                           prodl	equ	0xFF3
 22471                           intcon	equ	0xFF2
 22472                           intcon2	equ	0xFF1
 22473                           intcon3	equ	0xFF0
 22474                           indf0	equ	0xFEF
 22475                           postinc0	equ	0xFEE
 22476                           fsr0h	equ	0xFEA
 22477                           fsr0l	equ	0xFE9
 22478                           wreg	equ	0xFE8
 22479                           postdec1	equ	0xFE5
 22480                           fsr1h	equ	0xFE2
 22481                           fsr1l	equ	0xFE1
 22482                           indf2	equ	0xFDF
 22483                           postinc2	equ	0xFDE
 22484                           postdec2	equ	0xFDD
 22485                           fsr2h	equ	0xFDA
 22486                           fsr2l	equ	0xFD9
 22487                           status	equ	0xFD8
 22488                           
 22489 ;; *************** function i2_lcdNibble *****************
 22490 ;; Defined at:
 22491 ;;		line 25 in file "lcd.c"
 22492 ;; Parameters:    Size  Location     Type
 22493 ;;  data            1    wreg     unsigned char 
 22494 ;; Auto vars:     Size  Location     Type
 22495 ;;  data            1    1[COMRAM] unsigned char 
 22496 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22497 ;; Return value:  Size  Location     Type
 22498 ;;                  1    wreg      void 
 22499 ;; Registers used:
 22500 ;;		wreg, status,2, status,0
 22501 ;; Tracked objects:
 22502 ;;		On entry : 0/0
 22503 ;;		On exit  : 0/0
 22504 ;;		Unchanged: 0/0
 22505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22509 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22510 ;;Total ram usage:        2 bytes
 22511 ;; Hardware stack levels used:    1
 22512 ;; This function calls:
 22513 ;;		Nothing
 22514 ;; This function is called by:
 22515 ;;		i2_lcdInst
 22516 ;;		i2_putch
 22517 ;; This function uses a non-reentrant model
 22518 ;;
 22519                           
 22520                           	psect	text86
 22521  00492C                     __ptext86:
 22522                           	opt stack 0
 22523  00492C                     i2_lcdNibble:
 22524                           	opt stack 19
 22525                           
 22526                           ;incstack = 0
 22527                           ;i2lcdNibble@data stored from wreg
 22528  00492C  6E02               	movwf	i2lcdNibble@data,c
 22529                           
 22530                           ;lcd.c: 27: char temp = data & 0xF0;
 22531  00492E  5002               	movf	i2lcdNibble@data,w,c
 22532  004930  0BF0               	andlw	240
 22533  004932  6E01               	movwf	i2lcdNibble@temp,c
 22534                           
 22535                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22536  004934  508C               	movf	3980,w,c	;volatile
 22537  004936  0B0F               	andlw	15
 22538  004938  6E8C               	movwf	3980,c	;volatile
 22539                           
 22540                           ;lcd.c: 29: LATD = temp | LATD;
 22541  00493A  5001               	movf	i2lcdNibble@temp,w,c
 22542  00493C  108C               	iorwf	3980,w,c	;volatile
 22543  00493E  6E8C               	movwf	3980,c	;volatile
 22544                           
 22545                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22546  004940  868C               	bsf	3980,3,c	;volatile
 22547                           
 22548                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22549  004942  0E42               	movlw	66
 22550  004944                     i2u996_47:
 22551  004944  2EE8               	decfsz	wreg,f,c
 22552  004946  D7FE               	bra	i2u996_47
 22553  004948  D000               	nop2	
 22554                           
 22555                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22556  00494A  968C               	bcf	3980,3,c	;volatile
 22557                           
 22558                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22559  00494C  0E42               	movlw	66
 22560  00494E                     i2u997_47:
 22561  00494E  2EE8               	decfsz	wreg,f,c
 22562  004950  D7FE               	bra	i2u997_47
 22563  004952  D000               	nop2	
 22564                           
 22565                           ;lcd.c: 36: data = data << 4;
 22566  004954  3802               	swapf	i2lcdNibble@data,w,c
 22567  004956  0BF0               	andlw	240
 22568  004958  6E02               	movwf	i2lcdNibble@data,c
 22569                           
 22570                           ;lcd.c: 38: temp = data & 0xF0;
 22571  00495A  5002               	movf	i2lcdNibble@data,w,c
 22572  00495C  0BF0               	andlw	240
 22573  00495E  6E01               	movwf	i2lcdNibble@temp,c
 22574                           
 22575                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22576  004960  508C               	movf	3980,w,c	;volatile
 22577  004962  0B0F               	andlw	15
 22578  004964  6E8C               	movwf	3980,c	;volatile
 22579                           
 22580                           ;lcd.c: 40: LATD = temp | LATD;
 22581  004966  5001               	movf	i2lcdNibble@temp,w,c
 22582  004968  108C               	iorwf	3980,w,c	;volatile
 22583  00496A  6E8C               	movwf	3980,c	;volatile
 22584                           
 22585                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22586  00496C  868C               	bsf	3980,3,c	;volatile
 22587                           
 22588                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22589  00496E  0E42               	movlw	66
 22590  004970                     i2u998_47:
 22591  004970  2EE8               	decfsz	wreg,f,c
 22592  004972  D7FE               	bra	i2u998_47
 22593  004974  D000               	nop2	
 22594                           
 22595                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22596  004976  968C               	bcf	3980,3,c	;volatile
 22597                           
 22598                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22599  004978  0E42               	movlw	66
 22600  00497A                     i2u999_47:
 22601  00497A  2EE8               	decfsz	wreg,f,c
 22602  00497C  D7FE               	bra	i2u999_47
 22603  00497E  D000               	nop2	
 22604  004980  0012               	return		;funcret
 22605  004982                     __end_ofi2_lcdNibble:
 22606                           	opt stack 0
 22607                           pclatu	equ	0xFFB
 22608                           pclath	equ	0xFFA
 22609                           tblptru	equ	0xFF8
 22610                           tblptrh	equ	0xFF7
 22611                           tblptrl	equ	0xFF6
 22612                           tablat	equ	0xFF5
 22613                           prodh	equ	0xFF4
 22614                           prodl	equ	0xFF3
 22615                           intcon	equ	0xFF2
 22616                           intcon2	equ	0xFF1
 22617                           intcon3	equ	0xFF0
 22618                           indf0	equ	0xFEF
 22619                           postinc0	equ	0xFEE
 22620                           fsr0h	equ	0xFEA
 22621                           fsr0l	equ	0xFE9
 22622                           wreg	equ	0xFE8
 22623                           postdec1	equ	0xFE5
 22624                           fsr1h	equ	0xFE2
 22625                           fsr1l	equ	0xFE1
 22626                           indf2	equ	0xFDF
 22627                           postinc2	equ	0xFDE
 22628                           postdec2	equ	0xFDD
 22629                           fsr2h	equ	0xFDA
 22630                           fsr2l	equ	0xFD9
 22631                           status	equ	0xFD8
 22632                           
 22633 ;; *************** function i2_getRTC *****************
 22634 ;; Defined at:
 22635 ;;		line 44 in file "RTC.c"
 22636 ;; Parameters:    Size  Location     Type
 22637 ;;		None
 22638 ;; Auto vars:     Size  Location     Type
 22639 ;;  getRTC          2    3[COMRAM] int 
 22640 ;; Return value:  Size  Location     Type
 22641 ;;                  1    wreg      void 
 22642 ;; Registers used:
 22643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22644 ;; Tracked objects:
 22645 ;;		On entry : 0/0
 22646 ;;		On exit  : 0/0
 22647 ;;		Unchanged: 0/0
 22648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22653 ;;Total ram usage:        2 bytes
 22654 ;; Hardware stack levels used:    1
 22655 ;; Hardware stack levels required when called:    2
 22656 ;; This function calls:
 22657 ;;		i2_I2C_Master_Read
 22658 ;;		i2_I2C_Master_Start
 22659 ;;		i2_I2C_Master_Stop
 22660 ;;		i2_I2C_Master_Write
 22661 ;; This function is called by:
 22662 ;;		_printSortTimer
 22663 ;;		i2_printRTC
 22664 ;; This function uses a non-reentrant model
 22665 ;;
 22666                           
 22667                           	psect	text87
 22668  00467E                     __ptext87:
 22669                           	opt stack 0
 22670  00467E                     i2_getRTC:
 22671                           	opt stack 18
 22672                           
 22673                           ;RTC.c: 48: I2C_Master_Start();
 22674                           
 22675                           ;incstack = 0
 22676  00467E  ECAB  F028         	call	i2_I2C_Master_Start	;wreg free
 22677                           
 22678                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22679  004682  0E00               	movlw	0
 22680  004684  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22681  004686  0ED0               	movlw	208
 22682  004688  6E02               	movwf	i2I2C_Master_Write@d,c
 22683  00468A  EC96  F028         	call	i2_I2C_Master_Write	;wreg free
 22684                           
 22685                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22686  00468E  0E00               	movlw	0
 22687  004690  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22688  004692  0E00               	movlw	0
 22689  004694  6E02               	movwf	i2I2C_Master_Write@d,c
 22690  004696  EC96  F028         	call	i2_I2C_Master_Write	;wreg free
 22691                           
 22692                           ;RTC.c: 51: I2C_Master_Stop();
 22693  00469A  ECA7  F028         	call	i2_I2C_Master_Stop	;wreg free
 22694                           
 22695                           ;RTC.c: 54: I2C_Master_Start();
 22696  00469E  ECAB  F028         	call	i2_I2C_Master_Start	;wreg free
 22697                           
 22698                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22699  0046A2  0E00               	movlw	0
 22700  0046A4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22701  0046A6  0ED1               	movlw	209
 22702  0046A8  6E02               	movwf	i2I2C_Master_Write@d,c
 22703  0046AA  EC96  F028         	call	i2_I2C_Master_Write	;wreg free
 22704                           
 22705                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22706  0046AE  0E00               	movlw	0
 22707  0046B0  6E05               	movwf	i2getRTC@i+1,c
 22708  0046B2  0E00               	movlw	0
 22709  0046B4  6E04               	movwf	i2getRTC@i,c
 22710  0046B6                     i2l6174:
 22711  0046B6  BE05               	btfsc	i2getRTC@i+1,7,c
 22712  0046B8  D006               	goto	i2l6178
 22713  0046BA  5005               	movf	i2getRTC@i+1,w,c
 22714  0046BC  E111               	bnz	i2l6184
 22715  0046BE  0E06               	movlw	6
 22716  0046C0  5C04               	subwf	i2getRTC@i,w,c
 22717  0046C2  B0D8               	btfsc	status,0,c
 22718  0046C4  D00D               	goto	i2l6184
 22719  0046C6                     i2l6178:
 22720                           
 22721                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22722  0046C6  0E24               	movlw	low _time
 22723  0046C8  2404               	addwf	i2getRTC@i,w,c
 22724  0046CA  6ED9               	movwf	fsr2l,c
 22725  0046CC  0E01               	movlw	high _time
 22726  0046CE  2005               	addwfc	i2getRTC@i+1,w,c
 22727  0046D0  6EDA               	movwf	fsr2h,c
 22728  0046D2  0E01               	movlw	1
 22729  0046D4  ECDA  F027         	call	i2_I2C_Master_Read
 22730  0046D8  6EDF               	movwf	indf2,c
 22731  0046DA  4A04               	infsnz	i2getRTC@i,f,c
 22732  0046DC  2A05               	incf	i2getRTC@i+1,f,c
 22733  0046DE  D7EB               	goto	i2l6174
 22734  0046E0                     i2l6184:
 22735                           
 22736                           ;RTC.c: 58: }
 22737                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22738  0046E0  0E00               	movlw	0
 22739  0046E2  ECDA  F027         	call	i2_I2C_Master_Read
 22740  0046E6  0101               	movlb	1	; () banked
 22741  0046E8  6F2A               	movwf	(_time+6)& (0+255),b
 22742                           
 22743                           ;RTC.c: 60: I2C_Master_Stop();
 22744  0046EA  ECA7  F028         	call	i2_I2C_Master_Stop	;wreg free
 22745  0046EE  0012               	return		;funcret
 22746  0046F0                     __end_ofi2_getRTC:
 22747                           	opt stack 0
 22748                           pclatu	equ	0xFFB
 22749                           pclath	equ	0xFFA
 22750                           tblptru	equ	0xFF8
 22751                           tblptrh	equ	0xFF7
 22752                           tblptrl	equ	0xFF6
 22753                           tablat	equ	0xFF5
 22754                           prodh	equ	0xFF4
 22755                           prodl	equ	0xFF3
 22756                           intcon	equ	0xFF2
 22757                           intcon2	equ	0xFF1
 22758                           intcon3	equ	0xFF0
 22759                           indf0	equ	0xFEF
 22760                           postinc0	equ	0xFEE
 22761                           fsr0h	equ	0xFEA
 22762                           fsr0l	equ	0xFE9
 22763                           wreg	equ	0xFE8
 22764                           postdec1	equ	0xFE5
 22765                           fsr1h	equ	0xFE2
 22766                           fsr1l	equ	0xFE1
 22767                           indf2	equ	0xFDF
 22768                           postinc2	equ	0xFDE
 22769                           postdec2	equ	0xFDD
 22770                           fsr2h	equ	0xFDA
 22771                           fsr2l	equ	0xFD9
 22772                           status	equ	0xFD8
 22773                           
 22774 ;; *************** function i2_I2C_Master_Write *****************
 22775 ;; Defined at:
 22776 ;;		line 49 in file "I2C.c"
 22777 ;; Parameters:    Size  Location     Type
 22778 ;;  d               2    1[COMRAM] unsigned int 
 22779 ;; Auto vars:     Size  Location     Type
 22780 ;;		None
 22781 ;; Return value:  Size  Location     Type
 22782 ;;                  1    wreg      void 
 22783 ;; Registers used:
 22784 ;;		wreg, status,2, status,0, cstack
 22785 ;; Tracked objects:
 22786 ;;		On entry : 0/0
 22787 ;;		On exit  : 0/0
 22788 ;;		Unchanged: 0/0
 22789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22793 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22794 ;;Total ram usage:        2 bytes
 22795 ;; Hardware stack levels used:    1
 22796 ;; Hardware stack levels required when called:    1
 22797 ;; This function calls:
 22798 ;;		i2_I2C_Master_Wait
 22799 ;; This function is called by:
 22800 ;;		i2_getRTC
 22801 ;; This function uses a non-reentrant model
 22802 ;;
 22803                           
 22804                           	psect	text88
 22805  00512C                     __ptext88:
 22806                           	opt stack 0
 22807  00512C                     i2_I2C_Master_Write:
 22808                           	opt stack 18
 22809                           
 22810                           ;I2C.c: 51: I2C_Master_Wait();
 22811                           
 22812                           ;incstack = 0
 22813  00512C  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 22814                           
 22815                           ;I2C.c: 52: SSPBUF = d;
 22816  005130  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22817  005134  0012               	return		;funcret
 22818  005136                     __end_ofi2_I2C_Master_Write:
 22819                           	opt stack 0
 22820                           pclatu	equ	0xFFB
 22821                           pclath	equ	0xFFA
 22822                           tblptru	equ	0xFF8
 22823                           tblptrh	equ	0xFF7
 22824                           tblptrl	equ	0xFF6
 22825                           tablat	equ	0xFF5
 22826                           prodh	equ	0xFF4
 22827                           prodl	equ	0xFF3
 22828                           intcon	equ	0xFF2
 22829                           intcon2	equ	0xFF1
 22830                           intcon3	equ	0xFF0
 22831                           indf0	equ	0xFEF
 22832                           postinc0	equ	0xFEE
 22833                           fsr0h	equ	0xFEA
 22834                           fsr0l	equ	0xFE9
 22835                           wreg	equ	0xFE8
 22836                           postdec1	equ	0xFE5
 22837                           fsr1h	equ	0xFE2
 22838                           fsr1l	equ	0xFE1
 22839                           indf2	equ	0xFDF
 22840                           postinc2	equ	0xFDE
 22841                           postdec2	equ	0xFDD
 22842                           fsr2h	equ	0xFDA
 22843                           fsr2l	equ	0xFD9
 22844                           status	equ	0xFD8
 22845                           
 22846 ;; *************** function i2_I2C_Master_Stop *****************
 22847 ;; Defined at:
 22848 ;;		line 43 in file "I2C.c"
 22849 ;; Parameters:    Size  Location     Type
 22850 ;;		None
 22851 ;; Auto vars:     Size  Location     Type
 22852 ;;		None
 22853 ;; Return value:  Size  Location     Type
 22854 ;;                  1    wreg      void 
 22855 ;; Registers used:
 22856 ;;		wreg, status,2, status,0, cstack
 22857 ;; Tracked objects:
 22858 ;;		On entry : 0/0
 22859 ;;		On exit  : 0/0
 22860 ;;		Unchanged: 0/0
 22861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;Total ram usage:        0 bytes
 22867 ;; Hardware stack levels used:    1
 22868 ;; Hardware stack levels required when called:    1
 22869 ;; This function calls:
 22870 ;;		i2_I2C_Master_Wait
 22871 ;; This function is called by:
 22872 ;;		i2_getRTC
 22873 ;; This function uses a non-reentrant model
 22874 ;;
 22875                           
 22876                           	psect	text89
 22877  00514E                     __ptext89:
 22878                           	opt stack 0
 22879  00514E                     i2_I2C_Master_Stop:
 22880                           	opt stack 18
 22881                           
 22882                           ;I2C.c: 45: I2C_Master_Wait();
 22883                           
 22884                           ;incstack = 0
 22885  00514E  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 22886                           
 22887                           ;I2C.c: 46: PEN = 1;
 22888  005152  84C5               	bsf	4037,2,c	;volatile
 22889  005154  0012               	return		;funcret
 22890  005156                     __end_ofi2_I2C_Master_Stop:
 22891                           	opt stack 0
 22892                           pclatu	equ	0xFFB
 22893                           pclath	equ	0xFFA
 22894                           tblptru	equ	0xFF8
 22895                           tblptrh	equ	0xFF7
 22896                           tblptrl	equ	0xFF6
 22897                           tablat	equ	0xFF5
 22898                           prodh	equ	0xFF4
 22899                           prodl	equ	0xFF3
 22900                           intcon	equ	0xFF2
 22901                           intcon2	equ	0xFF1
 22902                           intcon3	equ	0xFF0
 22903                           indf0	equ	0xFEF
 22904                           postinc0	equ	0xFEE
 22905                           fsr0h	equ	0xFEA
 22906                           fsr0l	equ	0xFE9
 22907                           wreg	equ	0xFE8
 22908                           postdec1	equ	0xFE5
 22909                           fsr1h	equ	0xFE2
 22910                           fsr1l	equ	0xFE1
 22911                           indf2	equ	0xFDF
 22912                           postinc2	equ	0xFDE
 22913                           postdec2	equ	0xFDD
 22914                           fsr2h	equ	0xFDA
 22915                           fsr2l	equ	0xFD9
 22916                           status	equ	0xFD8
 22917                           
 22918 ;; *************** function i2_I2C_Master_Start *****************
 22919 ;; Defined at:
 22920 ;;		line 31 in file "I2C.c"
 22921 ;; Parameters:    Size  Location     Type
 22922 ;;		None
 22923 ;; Auto vars:     Size  Location     Type
 22924 ;;		None
 22925 ;; Return value:  Size  Location     Type
 22926 ;;                  1    wreg      void 
 22927 ;; Registers used:
 22928 ;;		wreg, status,2, status,0, cstack
 22929 ;; Tracked objects:
 22930 ;;		On entry : 0/0
 22931 ;;		On exit  : 0/0
 22932 ;;		Unchanged: 0/0
 22933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22938 ;;Total ram usage:        0 bytes
 22939 ;; Hardware stack levels used:    1
 22940 ;; Hardware stack levels required when called:    1
 22941 ;; This function calls:
 22942 ;;		i2_I2C_Master_Wait
 22943 ;; This function is called by:
 22944 ;;		i2_getRTC
 22945 ;; This function uses a non-reentrant model
 22946 ;;
 22947                           
 22948                           	psect	text90
 22949  005156                     __ptext90:
 22950                           	opt stack 0
 22951  005156                     i2_I2C_Master_Start:
 22952                           	opt stack 18
 22953                           
 22954                           ;I2C.c: 33: I2C_Master_Wait();
 22955                           
 22956                           ;incstack = 0
 22957  005156  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 22958                           
 22959                           ;I2C.c: 34: SEN = 1;
 22960  00515A  80C5               	bsf	4037,0,c	;volatile
 22961  00515C  0012               	return		;funcret
 22962  00515E                     __end_ofi2_I2C_Master_Start:
 22963                           	opt stack 0
 22964                           pclatu	equ	0xFFB
 22965                           pclath	equ	0xFFA
 22966                           tblptru	equ	0xFF8
 22967                           tblptrh	equ	0xFF7
 22968                           tblptrl	equ	0xFF6
 22969                           tablat	equ	0xFF5
 22970                           prodh	equ	0xFF4
 22971                           prodl	equ	0xFF3
 22972                           intcon	equ	0xFF2
 22973                           intcon2	equ	0xFF1
 22974                           intcon3	equ	0xFF0
 22975                           indf0	equ	0xFEF
 22976                           postinc0	equ	0xFEE
 22977                           fsr0h	equ	0xFEA
 22978                           fsr0l	equ	0xFE9
 22979                           wreg	equ	0xFE8
 22980                           postdec1	equ	0xFE5
 22981                           fsr1h	equ	0xFE2
 22982                           fsr1l	equ	0xFE1
 22983                           indf2	equ	0xFDF
 22984                           postinc2	equ	0xFDE
 22985                           postdec2	equ	0xFDD
 22986                           fsr2h	equ	0xFDA
 22987                           fsr2l	equ	0xFD9
 22988                           status	equ	0xFD8
 22989                           
 22990 ;; *************** function i2_I2C_Master_Read *****************
 22991 ;; Defined at:
 22992 ;;		line 55 in file "I2C.c"
 22993 ;; Parameters:    Size  Location     Type
 22994 ;;  a               1    wreg     unsigned char 
 22995 ;; Auto vars:     Size  Location     Type
 22996 ;;  a               1    1[COMRAM] unsigned char 
 22997 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22998 ;; Return value:  Size  Location     Type
 22999 ;;                  1    wreg      unsigned char 
 23000 ;; Registers used:
 23001 ;;		wreg, status,2, status,0, cstack
 23002 ;; Tracked objects:
 23003 ;;		On entry : 0/0
 23004 ;;		On exit  : 0/0
 23005 ;;		Unchanged: 0/0
 23006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;Total ram usage:        2 bytes
 23012 ;; Hardware stack levels used:    1
 23013 ;; Hardware stack levels required when called:    1
 23014 ;; This function calls:
 23015 ;;		i2_I2C_Master_Wait
 23016 ;; This function is called by:
 23017 ;;		i2_getRTC
 23018 ;; This function uses a non-reentrant model
 23019 ;;
 23020                           
 23021                           	psect	text91
 23022  004FB4                     __ptext91:
 23023                           	opt stack 0
 23024  004FB4                     i2_I2C_Master_Read:
 23025                           	opt stack 18
 23026                           
 23027                           ;incstack = 0
 23028                           ;i2I2C_Master_Read@a stored from wreg
 23029  004FB4  6E02               	movwf	i2I2C_Master_Read@a,c
 23030                           
 23031                           ;I2C.c: 57: unsigned char temp;
 23032                           ;I2C.c: 58: I2C_Master_Wait();
 23033  004FB6  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 23034                           
 23035                           ;I2C.c: 59: RCEN = 1;
 23036  004FBA  86C5               	bsf	4037,3,c	;volatile
 23037                           
 23038                           ;I2C.c: 60: I2C_Master_Wait();
 23039  004FBC  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 23040                           
 23041                           ;I2C.c: 61: temp = SSPBUF;
 23042  004FC0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23043                           
 23044                           ;I2C.c: 62: I2C_Master_Wait();
 23045  004FC4  EC6C  F028         	call	i2_I2C_Master_Wait	;wreg free
 23046                           
 23047                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23048  004FC8  5002               	movf	i2I2C_Master_Read@a,w,c
 23049  004FCA  A4D8               	btfss	status,2,c
 23050  004FCC  D002               	goto	i2u434_40
 23051  004FCE  8AC5               	bsf	4037,5,c	;volatile
 23052  004FD0  D001               	goto	i2l5882
 23053  004FD2                     i2u434_40:
 23054  004FD2  9AC5               	bcf	4037,5,c	;volatile
 23055  004FD4                     i2l5882:
 23056                           
 23057                           ;I2C.c: 64: ACKEN = 1;
 23058  004FD4  88C5               	bsf	4037,4,c	;volatile
 23059                           
 23060                           ;I2C.c: 65: return temp;
 23061  004FD6  5003               	movf	i2I2C_Master_Read@temp,w,c
 23062  004FD8  0012               	return	
 23063  004FDA                     __end_ofi2_I2C_Master_Read:
 23064                           	opt stack 0
 23065                           pclatu	equ	0xFFB
 23066                           pclath	equ	0xFFA
 23067                           tblptru	equ	0xFF8
 23068                           tblptrh	equ	0xFF7
 23069                           tblptrl	equ	0xFF6
 23070                           tablat	equ	0xFF5
 23071                           prodh	equ	0xFF4
 23072                           prodl	equ	0xFF3
 23073                           intcon	equ	0xFF2
 23074                           intcon2	equ	0xFF1
 23075                           intcon3	equ	0xFF0
 23076                           indf0	equ	0xFEF
 23077                           postinc0	equ	0xFEE
 23078                           fsr0h	equ	0xFEA
 23079                           fsr0l	equ	0xFE9
 23080                           wreg	equ	0xFE8
 23081                           postdec1	equ	0xFE5
 23082                           fsr1h	equ	0xFE2
 23083                           fsr1l	equ	0xFE1
 23084                           indf2	equ	0xFDF
 23085                           postinc2	equ	0xFDE
 23086                           postdec2	equ	0xFDD
 23087                           fsr2h	equ	0xFDA
 23088                           fsr2l	equ	0xFD9
 23089                           status	equ	0xFD8
 23090                           
 23091 ;; *************** function i2_I2C_Master_Wait *****************
 23092 ;; Defined at:
 23093 ;;		line 26 in file "I2C.c"
 23094 ;; Parameters:    Size  Location     Type
 23095 ;;		None
 23096 ;; Auto vars:     Size  Location     Type
 23097 ;;		None
 23098 ;; Return value:  Size  Location     Type
 23099 ;;                  1    wreg      void 
 23100 ;; Registers used:
 23101 ;;		wreg, status,2, status,0
 23102 ;; Tracked objects:
 23103 ;;		On entry : 0/0
 23104 ;;		On exit  : 0/0
 23105 ;;		Unchanged: 0/0
 23106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23111 ;;Total ram usage:        1 bytes
 23112 ;; Hardware stack levels used:    1
 23113 ;; This function calls:
 23114 ;;		Nothing
 23115 ;; This function is called by:
 23116 ;;		i2_I2C_Master_Start
 23117 ;;		i2_I2C_Master_Stop
 23118 ;;		i2_I2C_Master_Write
 23119 ;;		i2_I2C_Master_Read
 23120 ;; This function uses a non-reentrant model
 23121 ;;
 23122                           
 23123                           	psect	text92
 23124  0050D8                     __ptext92:
 23125                           	opt stack 0
 23126  0050D8                     i2_I2C_Master_Wait:
 23127                           	opt stack 18
 23128  0050D8                     i2l66:
 23129  0050D8  B4C7               	btfsc	4039,2,c	;volatile
 23130  0050DA  D7FE               	goto	i2l66
 23131  0050DC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23132  0050E0  0E1F               	movlw	31
 23133  0050E2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23134  0050E4  B4D8               	btfsc	status,2,c
 23135  0050E6  0012               	return	
 23136  0050E8  D7F7               	goto	i2l66
 23137  0050EA                     __end_ofi2_I2C_Master_Wait:
 23138                           	opt stack 0
 23139                           pclatu	equ	0xFFB
 23140                           pclath	equ	0xFFA
 23141                           tblptru	equ	0xFF8
 23142                           tblptrh	equ	0xFF7
 23143                           tblptrl	equ	0xFF6
 23144                           tablat	equ	0xFF5
 23145                           prodh	equ	0xFF4
 23146                           prodl	equ	0xFF3
 23147                           intcon	equ	0xFF2
 23148                           intcon2	equ	0xFF1
 23149                           intcon3	equ	0xFF0
 23150                           indf0	equ	0xFEF
 23151                           postinc0	equ	0xFEE
 23152                           fsr0h	equ	0xFEA
 23153                           fsr0l	equ	0xFE9
 23154                           wreg	equ	0xFE8
 23155                           postdec1	equ	0xFE5
 23156                           fsr1h	equ	0xFE2
 23157                           fsr1l	equ	0xFE1
 23158                           indf2	equ	0xFDF
 23159                           postinc2	equ	0xFDE
 23160                           postdec2	equ	0xFDD
 23161                           fsr2h	equ	0xFDA
 23162                           fsr2l	equ	0xFD9
 23163                           status	equ	0xFD8
 23164                           
 23165 ;; *************** function i2_delay_ms *****************
 23166 ;; Defined at:
 23167 ;;		line 512 in file "sort.c"
 23168 ;; Parameters:    Size  Location     Type
 23169 ;;  milliseconds    1    wreg     unsigned char 
 23170 ;; Auto vars:     Size  Location     Type
 23171 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23172 ;; Return value:  Size  Location     Type
 23173 ;;                  1    wreg      void 
 23174 ;; Registers used:
 23175 ;;		wreg, status,2, status,0, cstack
 23176 ;; Tracked objects:
 23177 ;;		On entry : 0/0
 23178 ;;		On exit  : 0/0
 23179 ;;		Unchanged: 0/0
 23180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23185 ;;Total ram usage:        2 bytes
 23186 ;; Hardware stack levels used:    1
 23187 ;; This function calls:
 23188 ;;		Nothing
 23189 ;; This function is called by:
 23190 ;;		_printSortTimer
 23191 ;; This function uses a non-reentrant model
 23192 ;;
 23193                           
 23194                           	psect	text93
 23195  005060                     __ptext93:
 23196                           	opt stack 0
 23197  005060                     i2_delay_ms:
 23198                           	opt stack 22
 23199                           
 23200                           ;incstack = 0
 23201                           ;i2delay_ms@milliseconds stored from wreg
 23202  005060  6E02               	movwf	i2delay_ms@milliseconds,c
 23203                           
 23204                           ;sort.c: 513: while(milliseconds > 0)
 23205  005062  D008               	goto	i2l8204
 23206  005064                     i2l8200:
 23207                           
 23208                           ;sort.c: 514: {
 23209                           ;sort.c: 515: milliseconds--;
 23210  005064  0602               	decf	i2delay_ms@milliseconds,f,c
 23211                           
 23212                           ;sort.c: 516: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23213  005066  0E0B               	movlw	11
 23214  005068  6E01               	movwf	??i2_delay_ms& (0+255),c
 23215  00506A  0E48               	movlw	72
 23216  00506C                     i2u1000_47:
 23217  00506C  2EE8               	decfsz	wreg,f,c
 23218  00506E  D7FE               	bra	i2u1000_47
 23219  005070  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23220  005072  D7FC               	bra	i2u1000_47
 23221  005074                     i2l8204:
 23222  005074  5002               	movf	i2delay_ms@milliseconds,w,c
 23223  005076  B4D8               	btfsc	status,2,c
 23224  005078  0012               	return	
 23225  00507A  D7F4               	goto	i2l8200
 23226  00507C                     __end_ofi2_delay_ms:
 23227                           	opt stack 0
 23228                           pclatu	equ	0xFFB
 23229                           pclath	equ	0xFFA
 23230                           tblptru	equ	0xFF8
 23231                           tblptrh	equ	0xFF7
 23232                           tblptrl	equ	0xFF6
 23233                           tablat	equ	0xFF5
 23234                           prodh	equ	0xFF4
 23235                           prodl	equ	0xFF3
 23236                           intcon	equ	0xFF2
 23237                           intcon2	equ	0xFF1
 23238                           intcon3	equ	0xFF0
 23239                           indf0	equ	0xFEF
 23240                           postinc0	equ	0xFEE
 23241                           fsr0h	equ	0xFEA
 23242                           fsr0l	equ	0xFE9
 23243                           wreg	equ	0xFE8
 23244                           postdec1	equ	0xFE5
 23245                           fsr1h	equ	0xFE2
 23246                           fsr1l	equ	0xFE1
 23247                           indf2	equ	0xFDF
 23248                           postinc2	equ	0xFDE
 23249                           postdec2	equ	0xFDD
 23250                           fsr2h	equ	0xFDA
 23251                           fsr2l	equ	0xFD9
 23252                           status	equ	0xFD8
 23253                           pclatu	equ	0xFFB
 23254                           pclath	equ	0xFFA
 23255                           tblptru	equ	0xFF8
 23256                           tblptrh	equ	0xFF7
 23257                           tblptrl	equ	0xFF6
 23258                           tablat	equ	0xFF5
 23259                           prodh	equ	0xFF4
 23260                           prodl	equ	0xFF3
 23261                           intcon	equ	0xFF2
 23262                           intcon2	equ	0xFF1
 23263                           intcon3	equ	0xFF0
 23264                           indf0	equ	0xFEF
 23265                           postinc0	equ	0xFEE
 23266                           fsr0h	equ	0xFEA
 23267                           fsr0l	equ	0xFE9
 23268                           wreg	equ	0xFE8
 23269                           postdec1	equ	0xFE5
 23270                           fsr1h	equ	0xFE2
 23271                           fsr1l	equ	0xFE1
 23272                           indf2	equ	0xFDF
 23273                           postinc2	equ	0xFDE
 23274                           postdec2	equ	0xFDD
 23275                           fsr2h	equ	0xFDA
 23276                           fsr2l	equ	0xFD9
 23277                           status	equ	0xFD8
 23278                           
 23279                           	psect	rparam
 23280  0000                     pclatu	equ	0xFFB
 23281                           pclath	equ	0xFFA
 23282                           tblptru	equ	0xFF8
 23283                           tblptrh	equ	0xFF7
 23284                           tblptrl	equ	0xFF6
 23285                           tablat	equ	0xFF5
 23286                           prodh	equ	0xFF4
 23287                           prodl	equ	0xFF3
 23288                           intcon	equ	0xFF2
 23289                           intcon2	equ	0xFF1
 23290                           intcon3	equ	0xFF0
 23291                           indf0	equ	0xFEF
 23292                           postinc0	equ	0xFEE
 23293                           fsr0h	equ	0xFEA
 23294                           fsr0l	equ	0xFE9
 23295                           wreg	equ	0xFE8
 23296                           postdec1	equ	0xFE5
 23297                           fsr1h	equ	0xFE2
 23298                           fsr1l	equ	0xFE1
 23299                           indf2	equ	0xFDF
 23300                           postinc2	equ	0xFDE
 23301                           postdec2	equ	0xFDD
 23302                           fsr2h	equ	0xFDA
 23303                           fsr2l	equ	0xFD9
 23304                           status	equ	0xFD8
 23305                           
 23306                           	psect	temp
 23307  00007E                     btemp:
 23308                           	opt stack 0
 23309  00007E                     	ds	1
 23310  0000                     int$flags	set	btemp
 23311                           pclatu	equ	0xFFB
 23312                           pclath	equ	0xFFA
 23313                           tblptru	equ	0xFF8
 23314                           tblptrh	equ	0xFF7
 23315                           tblptrl	equ	0xFF6
 23316                           tablat	equ	0xFF5
 23317                           prodh	equ	0xFF4
 23318                           prodl	equ	0xFF3
 23319                           intcon	equ	0xFF2
 23320                           intcon2	equ	0xFF1
 23321                           intcon3	equ	0xFF0
 23322                           indf0	equ	0xFEF
 23323                           postinc0	equ	0xFEE
 23324                           fsr0h	equ	0xFEA
 23325                           fsr0l	equ	0xFE9
 23326                           wreg	equ	0xFE8
 23327                           postdec1	equ	0xFE5
 23328                           fsr1h	equ	0xFE2
 23329                           fsr1l	equ	0xFE1
 23330                           indf2	equ	0xFDF
 23331                           postinc2	equ	0xFDE
 23332                           postdec2	equ	0xFDD
 23333                           fsr2h	equ	0xFDA
 23334                           fsr2l	equ	0xFD9
 23335                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      63
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201753
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23225
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17707
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75734
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3F       7       24.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13C      34        0.0%
DATA                 0      0     13C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 15:04:31 2017

                                    _i 0135                     i2_I2C_Master_Start 5156  
                   i2_I2C_Master_Write 512C                                     l66 50C4  
                                   _ID 309A                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 24A6                                    l491 3F96  
                                  l740 123C                                    l750 12E8  
                                  l761 13F6                                    l753 1322  
                                  l773 14FA                                    l854 45D2  
                                  l790 3206                                    l758 13BC  
                                  l791 3220                                    l775 150C  
                                  l767 15A8                                    l776 1520  
                                  l777 1534                                    l794 32B8  
                                  l778 1548                                    l779 155E  
                                  l990 3D64                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EC  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3846  
                  _log_count_can_w_lab 0071                             i2_delay_ms 5060  
      __end_of_change_state_to_menu_11 4D42        __end_of_change_state_to_menu_12 4BB2  
      __end_of_change_state_to_menu_22 4B7A        __end_of_change_state_to_menu_23 4D12  
         _f_can_coming_to_distribution 0067                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4E32        __end_of_change_state_to_logs_12 4E02  
      __end_of_change_state_to_logs_22 4DD2        __end_of_change_state_to_logs_23 4EBC  
      __end_of_change_state_to_logs_33 4DA2        __end_of_change_state_to_logs_34 4D72  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1003 50A6                                   l1012 3AF8  
                                 l1200 05E8                                   l1104 3C8C  
                                 l1131 3E88                                   l1107 3CAC  
                                 l1212 0782                                   l1140 2154  
                                 l1230 4418                                   l1310 43E8  
                                 l1303 43D8                                   l1240 4448  
                                 l1128 3E84                                   l1217 0858  
                                 l1137 2150                                   l1242 4486  
                                 l1234 4434                                   l1170 0126  
                                 l1251 48BA                                   l1163 007C  
                                 l1332 37E4                                   l1236 4438  
                                 l1333 37FE                                   l1237 443C  
                                 l1173 018C                                   l1238 4440  
                                 l1174 01DA                                   l1166 0080  
                                 l1327 3798                                   l1239 4444  
                                 l1175 0240                                   l1272 2E60  
                                 l1176 028E                                   l1257 48CA  
                                 l1281 2E5A                                   l1275 2DFC  
                                 l1279 2E40                                   l1368 180E  
                                 l1815 458C                                   l6000 16F4  
                                 l1825 47B0                                   l6010 176C  
                                 l6002 16FA                                   l1762 4124  
                                 l6020 17CE                                   l6012 1772  
                                 l6100 4BBC                                   l6014 178A  
                                 l6102 4BC8                                   l6040 1860  
                                 l6008 1760                                   l6024 17D4  
                                 l6112 4364                                   l6042 1866  
                                 l6018 17B6                                   l6060 18C4  
                                 l6036 1846                                   l6108 434E  
                                 l6054 18A2                                   l6118 4384  
                                 l6150 40A8                                   l6080 1948  
                                 l6072 1920                                   l6064 18FC  
                                 l6136 45BE                                   l6152 40B8  
                                 l7104 156A                                   l7112 15B0  
                                 l7024 13A6                                   l7008 133C  
                                 l6090 197C                                   l6066 1906  
                                 l6138 45E8                                   l6162 4112  
                                 l6154 40BE                                   l7210 32E8  
                                 l7202 32BA                                   l7106 15A0  
                                 l7050 1436                                   l7034 13D6  
                                 l7114 15BE                                   l6084 1962  
                                 l8100 3800                                   l7212 3302  
                                 l7220 3364                                   l7036 13E0  
                                 l6094 19D4                                   l6078 193C  
                                 l8102 3810                                   l7230 33E8  
                                 l7214 331C                                   l7046 1410  
                                 l6088 1976                                   l6096 19E0  
                                 l7224 339A                                   l7208 32CE  
                                 l6600 4F5A                                   l7160 31B6  
                                 l7152 318E                                   l9000 3F92  
                                 l8106 3840                                   l8130 4018  
                                 l8122 3FEE                                   l6370 250A  
                                 l7226 33B4                                   l7234 3402  
                                 l7218 3336                                   l7074 14D8  
                                 l7058 1474                                   l8060 3736  
                                 l7316 21A4                                   l8140 404E  
                                 l8132 401E                                   l8116 3FD8  
                                 l6380 25A0                                   l6372 2528  
                                 l6364 24B0                                   l7228 33CE  
                                 l7236 3430                                   l7164 31C6  
                                 l7148 317E                                   l6620 461A  
                                 l6532 415A                                   l7076 14E2  
                                 l9004 3F98                                   l5830 453C  
                                 l5814 4F34                                   l7430 00F0  
                                 l7334 225C                                   l6382 25BE  
                                 l6374 2546                                   l6366 24CE  
                                 l6390 2618                                   l6358 2424  
                                 l8310 0B06                                   l8302 0AE4  
                                 _ADIE 007CEE                                   l5832 4548  
                                 l8080 379A                                   l8064 3766  
                                 l7600 04B8                                   l7352 22EE  
                                 l8128 400C                                   l8144 405C  
                                 l8160 41FC                                   l6384 25DC  
                                 l6376 2564                                   l6368 24EC  
                                 l6392 2676                                   l8320 0B22  
                                 l8240 09B8                                   l6640 4672  
                                 l6624 4630                                   l6528 4144  
                                 l5842 457E                                   l5834 454E  
                                 l5850 476C                                   l8090 37CE  
                                 l8082 37AA                                   l7610 04E0  
                                 l7602 04BE                                   l7522 032C  
                                 l7514 030A                                   l7434 00FA  
                                 l7346 22AC                                   l8170 422C  
                                 l6386 25FA                                   l6378 2582  
                                 l8306 0AEE                                   l8250 09DA  
                                 l8242 09BE                                   l7194 3276  
                                 l6538 41D0                                   l5852 4778  
                                 l5772 4EFC                                   l7540 038E  
                                 l7532 0354                                   l7524 0332  
                                 l7428 00EA                                   l7372 236A  
                                 l7364 233A                                   l8148 4070  
                                 l8172 4232                                   l8180 4264  
                                 l8164 420C                                   l8500 1056  
                                 l8420 0EDE                                   l8340 0B8C  
                                 l8324 0B3A                                   l8316 0B18  
                                 l6732 42DA                                   l6636 465A  
                                 l5854 477E                                   l5774 4F0E  
                                 l7702 06BE                                   l7622 0524  
                                 l7606 04C8                                   l7550 03B6  
                                 l7518 0314                                   l7438 0112  
                                 l8510 1080                                   l8430 0F08  
                                 l8350 0C22                                   l8342 0BAA  
                                 l8254 09F2                                   l8246 09D0  
                                 l6590 3E0E                                   l6574 3DCC  
                                 l6582 3DEE                                   l8088 37C4  
                                 l7712 06E6                                   l7632 054C  
                                 l7544 0398                                   l7528 033C  
                                 l7384 23B2                                   l7376 23A0  
                                 l8184 4278                                   l8176 4256  
                                 l8168 4220                                   l8504 106E  
                                 l8424 0EF6                                   l8416 0ED4  
                                 l8360 0CB8                                   l8352 0C40  
                                 l8344 0BC8                                   l8272 0A5C  
                                 l6728 42C4                                   l5858 47A2  
                                 l5970 15EA                                   l7802 089A  
                                 l7706 06D6                                   l7626 053C  
                                 l7618 051A                                   l7570 041C  
                                 l7554 03C0                                   l8514 108A  
                                 l8434 0F12                                   l8362 0CD6  
                                 l8354 0C5E                                   l8346 0BE6  
                                 l8370 0D76                                   l8282 0A84  
                                 l8274 0A62                                   l8258 0A04  
                                 l6738 4306                                   l6586 3E04  
                                 l6578 3DD6                                   l5972 15FC  
                                 l7812 08C2                                   l7804 08A0  
                                 l7732 075A                                   l7724 0738  
                                 l7716 06FE                                   l7708 06DC  
                                 l7652 05C0                                   l7644 059E  
                                 l7636 0564                                   l7628 0542  
                                 l7580 0444                                   l7548 03B0  
                                 l7388 23E8                                   l5796 4E86  
                                 l8540 110A                                   l8460 0F9A  
                                 l8364 0CF4                                   l8356 0C7C  
                                 l8348 0C04                                   l6596 4F44  
                                 l5990 16B6                                   l5982 163A  
                                 l5966 15D6                                   l7734 0760  
                                 l7654 05C6                                   l7574 0434  
                                 l7566 0412                                   l7558 03D8  
                                 l8550 1134                                   l8518 10A2  
                                 l8470 0FC4                                   l8438 0F2A  
                                 l8382 0DDA                                   l8374 0DB8  
                                 l8358 0C9A                                   l8278 0A6C  
                                 l5976 1606                                   l7904 2DC4  
                                 l7808 08AA                                   l7728 0742  
                                 l7680 0652                                   l7672 0630  
                                 l7648 05A8                                   l7592 0496  
                                 l7584 045C                                   l7576 043A  
                                 l8544 1122                                   l8536 1100  
                                 l8464 0FB2                                   l8456 0F90  
                                 l8392 0DF6                                   l8368 0D12  
                                 l8288 0A92                                   l6944 11FA  
                                 l7930 2E2A                                   l7762 07DC  
                                 l7738 076A                                   l7690 067A  
                                 l7682 0658                                   l7658 05D0  
                                 l8554 113E                                   l8474 0FCE  
                                 l8378 0DC2                                   l8562 1162  
                                 l6970 1280                                   l6954 1244  
                                 l7916 2DE6                                   l7772 0804  
                                 l7676 063A                                   l7596 04A0  
                                 l8396 0E0E                                   l8388 0DEC  
                                 l8820 3A2A                                   l5998 16E8  
                                 l7926 2E16                                   l7854 4410  
                                 l7782 0842                                   l7766 07F4  
                                 l7758 07D2                                   l7686 0662  
                                 l8558 1156                                   l8478 0FE6  
                                 l7944 444C                                   l7792 0872  
                                 l7776 081C                                   l7768 07FA  
                                 l8496 104C                                   l7866 2C4E  
                                 l7794 0878                                   l7698 06B4  
                                 l8818 3A16                                   l6986 12D2  
                                 l7884 2D06                                   l8844 3AB2  
                                 l6996 1302                                   l7886 2D0C  
                                 l7798 0882                                   l6998 130C  
                                 l8880 3CC4                                   l8856 3C2E  
                                 l8890 3CE2                                   l8882 3CCA  
                                 l8874 3CB2                                   l8892 3CE8  
                                 l8884 3CD0                                   l8876 3CB8  
                                 l8980 3F46                                   l8886 3CD6  
                                 l8878 3CBE                                   l8990 3F76  
                                 l8982 3F5C                                   STR_1 FBA3  
                                 l8888 3CDC                                   l8896 3CEE  
                                 STR_2 FF27                                   STR_3 FB91  
                                 l8986 3F6A                                   STR_4 FE4A  
                                 STR_5 FB91                                   l8988 3F70  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 l8998 3F8C                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u4240 4E84                                   u6020 238E  
                                 u5150 24A6                                   u5135 47EA  
                                 u4520 1734                                   u6120 0126  
                                 u4440 4A64                                   u6050 23D6  
                                 u4450 4A66                                   _PEIE 007F96  
                                 u7020 382E                                   u6140 01DA  
                                 u4460 4AB0                                   u6028 2392  
                                 u5500 1206                                   u4461 4AAC  
                                 u4470 4AB2                                   u4527 172A  
                                 u4560 17AC                                   u6160 028E  
                                 u5520 123C                                   u6058 23DA  
                                 u7028 3832                                   u5700 1454  
                                 _RCEN 007E2B                                   u5518 120A  
                                 u4567 17A2                                   u5800 313E  
                                 u6700 2C92                                   u5910 32B8  
                                 u5718 1458                                   u9007 1092  
                                 u6720 2D4E                                   u8080 3AF8  
                                 u5808 3142                                   u9017 10BC  
                                 i2l66 50D8                                   u6730 2D50  
                                 u9107 21FC                                   u9027 1112  
                                 u5908 3286                                   u9117 2250  
                                 u9037 1146                                   u5790 30E8  
                                 u6911 378E                                   u9207 3E9A  
                                 u9127 2270                                   u9047 3C3C  
                                 u8407 12F4                                   u6920 3790  
                                 u9217 002C                                   u9137 229E  
                                 u9057 3C80                                   u8417 1326  
                                 u6850 36F8                                   u6690 2C90  
                                 u5890 3282                                   u9307 026E  
                                 u9227 0070                                   u9147 22E2  
                                 u9067 2100                                   u8507 148E  
                                 u8427 1330                                   u6860 3754  
                                 u5980 21E6                                   u9317 029E  
                                 u9237 0092                                   u9157 2300  
                                 u9077 2144                                   u8517 14C6  
                                 u8437 134A                                   u5990 21E8  
                                 u5798 30EC                                   u9407 052C  
                                 u9327 031C                                   u9247 0102  
                                 u9167 232E                                   u9087 2166  
                                 u8607 154C                                   u8527 14FE  
                                 u8447 1374                                   u6961 37BA  
                                 u9417 0554                                   u9337 0344  
                                 u9257 0136                                   u9177 2348  
                                 u9097 2194                                   u8617 1556  
                                 u8537 1506                                   u8457 13C0  
                                 u8377 118A                                   u6970 37BC  
                                 u6858 36FC                                   u9507 0794  
                                 u9427 05B0                                   u9347 03A0  
                                 u9267 019C                                   u9187 3E34  
                                 u8707 320A                                   u8627 1562  
                                 u8547 1510                                   u8467 13C8  
                                 u8387 12A0                                   u6868 3758  
                                 u9517 07E4                                   u9437 05D8  
                                 u9357 03C8                                   u9277 01BA  
                                 u9197 3E78                                   u8717 3214  
                                 u8637 4C3C                                   u8557 151A  
                                 u8477 13FA                                   u8397 12EC  
                                 u9607 2C2A                                   u9527 080C  
                                 u9447 0642                                   u9367 0424  
                                 u9287 01EA                                   u8807 4AC2  
                                 u8727 323A                                   u8647 4638  
                                 u8567 1524                                   u8487 1404  
                                 u9617 2CA6                                   u9537 085C  
                                 u9457 066A                                   u9377 044C  
                                 u9297 0250                                   u8817 4AF6  
                                 u8737 4F50                                   u8657 30B0  
                                 u8577 152E                                   u8497 141E  
                                 u9707 4884                                   u9627 2CFA  
                                 u9547 0866                                   u9467 06C6  
                                 u9387 04A8                                   u8907 0DCA  
                                 u8827 08E2                                   u8747 338A  
                                 u8667 30CE                                   u8587 1538  
                                 u9717 1A0E                                   u9637 2D64  
                                 u9557 088A                                   u9477 06EE  
                                 u9397 04D0                                   u8917 0DFE  
                                 u8837 09E2                                   u8757 343E  
                                 u8677 3106                                   u8597 1540  
                                 u9807 1C56                                   u9727 1A5A  
                                 u9647 2DB8                                   u9567 08B2  
                                 u9487 074A                                   u8927 0E28  
                                 u8847 0A1E                                   u8767 3470  
                                 u8687 3124                                   u9817 1C8A  
                                 u9737 1AA6                                   u9657 2E00  
                                 u9577 43A2                                   u9497 0772  
                                 u8937 0EE6                                   u8857 0A74  
                                 u8777 3D82                                   u8697 31D6  
                                 u9907 4710                                   u9827 1CBC  
                                 u9747 1ADA                                   u9667 2E08  
                                 u9587 43F2                                   u8947 0F1A  
                                 u8867 0AA0                                   u8787 3DDE  
                                 u9917 471A                                   u9837 1D08  
                                 u9757 1B0C                                   u9677 2E44  
                                 u9597 4406                                   u8957 0F44  
                                 u8877 0AF6                                   u8797 3E16  
                                 u9927 4746                                   u9847 1D3C  
                                 u9767 1B58                                   u9687 2E4E  
                                 u8967 0FA2                                   u8887 0B2A  
                                 u9937 4750                                   u9857 1D6E  
                                 u9777 1B8C                                   u9697 4F04  
                                 u8977 0FD6                                   u8897 0B54  
                                 u9867 4914                                   u9787 1BBE  
                                 u8987 1000                                   u9877 36D0  
                                 u9797 1C0A                                   u8997 105E  
                                 u9887 37E8                                   u9897 37F2  
                                 _RSEN 007E29                            _stopSignals 507C  
                                 _Test 3C2E                                   _back 005B  
                                 _main 3EFC                                   _down 005F  
                                 _keys FAEF                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 4FFE  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 006F  
                      __end_ofi2_putch 5116                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2E64                            i2_lcdNibble 492C  
                      __end_of_Loading 15C8                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E26  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 407A  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 4282                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 4136  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 4596                        __end_of___lwmod 47BA  
                                i2l257 2976                                  i2l606 2EF2  
                                i2l833 2B42                                  i2l921 3922  
                                i2l925 396E                                  i2l927 398E  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A00  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 510A  
                      __end_of_handler 39CA                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4F14                        __end_of_initLCD 4B00  
                       __CFG_EBTRB$OFF 000000                                  _debug 005D  
                           i2isdigit@c 0003                                  _getIR 460C  
                      __end_of_loadRTC 430E                        __end_of_readMAG 4ABA  
                      __end_of_dpowers FB0A                                  _first 006B  
                                _enter 0061                        __end_of_isdigit 4F3E  
                                _input 007D                                  _putch 50EA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4FB4                       __end_ofi2_getRTC 46F0  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 20F2                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4C82  
                          Loading@addr 00B3                       _count_can_no_lab 012B  
                 printSortTimer@i_1132 0047                   __size_of_EEPROM_read 0018  
                      __initialization 49D4                           __end_of_Test 3D42  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3FBC  
                         __end_of_keys FB00                           __end_of_sort 5020  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1713 00B3                            _BlockerTest 36C2  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB37                                 STR_104 FBE8  
                               STR_120 FB5B                                 STR_112 FB49  
                               STR_121 FB49                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FE5A                                 STR_122 FB7F  
                               _ADRESH 000FC4                                 STR_115 FE16  
                               STR_107 FE96                                 STR_123 FB6D  
                               STR_116 FE5A                                 STR_124 FB7F  
                               STR_108 FE78                                 _EEADRH 000FAA  
                               STR_117 FE16                                 STR_125 FB7F  
                               STR_109 FE69                                 STR_126 FFB6  
                               STR_118 FC1B                                 _ADRESL 000FC3  
                               STR_119 FC4E                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4CB2              i2_change_state_to_menu_22 4C82  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1003 50BC  
                               i2l1368 1F5E                                 i2l1815 49CA  
                               i2l1825 4B38                                 i2l6202 1D8E  
                               i2l6300 2018                                 i2l6212 1DB2  
                               i2l6302 2020                                 i2l6206 1D9E  
                               i2l6320 2068                                 i2l6208 1DAC  
                               i2l6330 20CE                                 i2l6314 204C  
                               i2l6250 1EE8                                 i2l6234 1E6E  
                               i2l6226 1E46                                 i2l6218 1DE4  
                               i2l6316 2054                                 i2l6324 207A  
                               i2l6308 2036                                 i2l6244 1EC6  
                               i2l6236 1E78                                 i2l6260 1F28  
                               i2l6332 20D6                                 i2l6174 46B6  
                               i2l6326 2080                                 i2l6254 1F12  
                               i2l6246 1ED0                                 i2l6238 1E7C  
                               i2l8200 5064                                 i2l6184 46E0  
                               i2l6272 1F8C                                 i2l6256 1F24  
                               i2l6248 1ED6                                 i2l6520 3C16  
                               i2l6512 3BE2                                 i2l6336 4C5A  
                               i2l6178 46C6                                 i2l6290 1FDA  
                               i2l6338 4C62                                 i2l8204 5074  
                               i2l6276 1FA4                                 i2l6508 3BD2  
                               i2l6700 2F96                                 i2l9020 38C4  
                               i2l6278 1FA8                                 i2l6702 2FAC  
                               i2l5920 49A4                                 i2l6296 1FF4  
                               i2l6800 3532                                 i2l6704 2FC2  
                               i2l6712 3004                                 i2l9040 38F6  
                               i2l5906 5058                                 i2l6810 3558  
                               i2l6706 2FD8                                 i2l6714 305E  
                               i2l9018 38C0                                 i2l9026 38DA  
                               i2l5916 4998                                 i2l5940 4B1A  
                               i2l6812 355E                                 i2l6804 3546  
                               i2l6900 3694                                 i2l6708 2FEE  
                               i2l5918 49A0                                 i2l6830 35AE  
                               i2l6814 3564                                 i2l6806 354C  
                               i2l9062 3940                                 i2l5928 49C0  
                               i2l5944 4B2E                                 i2l5936 4B0E  
                               i2l6808 3552                                 i2l6680 2E90  
                               i2l9064 3942                                 i2l5882 4FD4  
                               i2l5938 4B16                                 i2l6818 356A  
                               i2l6690 2F28                                 i2l8610 2752  
                               i2l8602 2736                                 i2l6860 3612  
                               i2l6844 35D4                                 i2l6692 2F3E  
                               i2l6854 35FA                                 i2l6838 35C6  
                               i2l6790 3514                                 i2l6782 34FA  
                               i2l6694 2F54                                 i2l6686 2EFC  
                               i2l9430 294C                                 i2l8710 28DA  
                               i2l8702 28BE                                 i2l8630 279A  
                               i2l8622 277E                                 i2l8614 2762  
                               i2l8606 2744                                 i2l9086 398C  
                               i2l6872 3634                                 i2l6864 361C  
                               i2l6848 35F0                                 i2l6792 3524  
                               i2l6696 2F6A                                 i2l6688 2F12  
                               i2l9432 2968                                 i2l6890 3678  
                               i2l6882 3654                                 i2l6858 360E  
                               i2l6794 3528                                 i2l6698 2F80  
                               i2l8714 28E8                                 i2l8706 28CC  
                               i2l8650 27E8                                 i2l8642 27CC  
                               i2l8634 27A8                                 i2l8626 278C  
                               i2l8618 2770                                 i2l9436 3582  
                               i2l9428 292A                                 i2l8724 290C  
                               i2l8910 2996                                 i2l6894 368A  
                               i2l6886 3666                                 i2l6878 3642  
                               i2l9438 359E                                 i2l8718 28FE  
                               i2l8670 283E                                 i2l8662 281A  
                               i2l8654 27FE                                 i2l8646 27DA  
                               i2l8638 27BE                                 i2l8590 271A  
                               i2l8582 26FE                                 i2l8576 26EA  
                               i2l8906 2986                                 i2l8690 288C  
                               i2l8682 2868                                 i2l8674 284C  
                               i2l8666 2828                                 i2l8658 280C  
                               i2l8594 2728                                 i2l8586 270C  
                               i2l8578 26F0                                 i2l8940 2B10  
                               i2l8916 29F0                                 i2l8694 289A  
                               i2l8686 287E                                 i2l8678 285A  
                               i2l8952 2B78                                 i2l8928 2AB8  
                               i2l8954 2B7E                                 i2l8698 28A8  
                               i2l8948 2B44                _f_most_recent_sort_time 0069  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4F66  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 4FFE                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 34DC  
                               ___wmul 4BE8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4C1E  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 430E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5042  
                               _initUI 4E32                                 _readIR 4A22  
                               _logRun 39CA                                 getIR@i 0087  
                               clear_0 49FA                                 clear_1 4A06  
                               clear_2 4A12                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4876  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 15C8                              ??_handler 004B  
              __size_of_initGlobalVars 0082                           ?_retrieveLog 0007  
                               _strcpy 4BB2                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4F8E  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4F66                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 49D4  
                     __end_of_printRTC 26BA                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4B42                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                  __end_of_algorithmTest 3EFC  
                    __end_ofi2_lcdInst 5122                             _PusherTest 2C1C  
                    __end_ofi2_isdigit 5060                             __accesstop 0080  
              __end_of__initialization 4A18                          ?_inputHandler 002A  
                _most_recent_sort_time 0075                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 50AE                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 5160  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5136  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 467E  
                          i2printRTC@i 0041                          _initSortTimer 4136  
          __end_of_updateServoPosition 460C                          __end_of_putch 50FA  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 32C4                             __end_of_UI 1170  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 4EE8  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4EBC  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 012F                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 3D42               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3228 0137  
                    __end_of_SpeedTest 4418                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 449C  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2334 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00E2                                i2_putch 510A  
                            ?_initTime 0080                        _f_loadingNewCan 00EA  
                      i2printRTC@month 003D                  __size_of_Distribution 0218  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4758  
                              _Loading 1170            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 3FBC                                ___awmod 41E0  
                           _initServos 48D2                                ___lldiv 407A  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 451E                                ___lwmod 4758  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 49D4                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 449C  
                              _lcdInst 50FA                                _handler 0008  
                              __ptext0 3EFC                                __ptext1 507C  
                              __ptext2 4FFE                                __ptext3 1170  
                              __ptext4 4136                                __ptext5 449C  
                              __ptext6 4C1E                                __ptext7 460C  
                              __ptext8 4A22                                __ptext9 309A  
                      __size_of_printf 0438                                _readADC 4EE8  
                      __size_of_strcpy 0036                                _initLCD 4ABA  
                              _cur_can 00E4                                _loadRTC 4282  
                              _readMAG 4A6E                                _dpowers FB00  
                   actuatorTest@i_1661 00AE                     actuatorTest@i_1670 00B4  
                   actuatorTest@i_1662 00AF                     actuatorTest@i_1654 00AD  
                   actuatorTest@i_1671 00B5                     actuatorTest@i_1680 00BA  
                   actuatorTest@i_1664 00B0                     actuatorTest@i_1681 00BB  
                   actuatorTest@i_1673 00B6                     actuatorTest@i_1665 00B1  
                   actuatorTest@i_1690 00C0                     actuatorTest@i_1674 00B7  
                   actuatorTest@i_1691 00C1                     actuatorTest@i_1683 00BC  
                   actuatorTest@i_1667 00B2                     actuatorTest@i_1684 00BD  
                   actuatorTest@i_1676 00B8                     actuatorTest@i_1668 00B3  
                   actuatorTest@i_1693 00C2                     actuatorTest@i_1677 00B9  
                   actuatorTest@i_1694 00C3                     actuatorTest@i_1686 00BE  
                   actuatorTest@i_1687 00BF                                _isdigit 4F14  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 32C4  
                       __pintcode_body 3846                   end_of_initialization 4A18  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3846  
                  i2___wmul@multiplier 0001                              i2u1000_47 506C  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 507C  
               __end_of_initGlobalVars 451E                             _sensorTest 20F2  
                  __size_of_PusherTest 0248                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 36C2                           ??_BothServos 00AB  
                __end_of_machineConfig 4876                             _updateMenu 26BA  
                    i2_I2C_Master_Read 4FB4                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 50D8                      i2_I2C_Master_Stop 514E  
                    i2___lwdiv@divisor 0008                        _log_count_total 0073  
                            i2___lwdiv 4982                              i2___lwmod 4B00  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 309A  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5116  
                        Loading@i_1103 00B6                          Loading@i_1104 00B8  
                        Loading@i_1106 00BA                          Loading@i_1107 00BC  
                        Loading@i_1109 00BE                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 001A  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5042  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1D84  
                          PusherTest@i 00B1                    __end_of_EEPROM_read 50AE  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4C1E                         __end_of_getMAG 4C50  
                       __end_of_getRTC 4394                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4E60                         __end_of_readIR 4A6E  
                       __end_of_logRun 3B0E                       i2___wmul@product 0005  
                       __end_of_printf 1A00                           i2printf@flag 0026  
                       __end_of_strcpy 4BE8              __end_ofi2_I2C_Master_Read 4FDA  
            __end_ofi2_I2C_Master_Wait 50EA                           i2printf@prec 001D  
                  start_initialization 49D4              __end_ofi2_I2C_Master_Stop 5156  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1340 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 4394                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 4418  
                          ?_sensorTest 0001                            __pdataBANK1 0137  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1120 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2459 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1978 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1709 00AF  
                      _count_pop_w_tab 0131                            _EEPROM_read 5096  
                   __end_of_PortTestA5 48D2                       _I2C_Master_Start 5146  
                            _f_lastCan 00E8                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5122  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 46F0                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 2E64                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 006D  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3E26  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 022A  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 515E             __end_ofi2_I2C_Master_Write 5136  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 34DC                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u434_40 4FD2  
                             _PIR2bits 000FA1                               i2u534_40 2EF2  
                             i2u493_40 1F0A                               i2u493_47 1F00  
                             i2u816_40 2B1A                               i2u489_40 1EAA  
                             i2u489_47 1EA0                               i2u818_40 2B42  
                             i2u817_48 2B1C                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                               i2u994_47 351A  
                             i2u995_47 2AEA                               i2u996_47 4944  
                     __CFG_WDTPS$32768 000000                               i2u997_47 494E  
                             i2u998_47 4970                               i2u999_47 497A  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4F8E  
                        lcdNibble@data 0081                               i2_getRTC 467E  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1D84  
                             i2_strcpy 4C50                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 49E8  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 50C4  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0458                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 41E0  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4D12             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4B7A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4B42                _change_state_to_menu_23 4CE2  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4E02  
              _change_state_to_logs_12 4DD2                _change_state_to_logs_22 4DA2  
              _change_state_to_logs_23 4E8E                _change_state_to_logs_33 4D72  
              _change_state_to_logs_34 4D42                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 39C2  
                           _EEPROMTest 515E                        _I2C_Master_Init 47BA  
                     __size_of_readADC 002C                        _I2C_Master_Read 4E60  
                     __size_of_initLCD 0046                           _f_ID_receive 0063  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 50C4                        _I2C_Master_Stop 513E  
                     __size_of_isdigit 002A                               _delay_ms 4F3E  
                       _printSortTimer 297A                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3C2E  
                             __ptext10 4F3E                               __ptext11 32C4  
                             __ptext20 4EBC                               __ptext12 481A  
                             __ptext21 5020                               __ptext13 39CA  
                             __ptext30 4E60                               __ptext22 4ABA  
                             __ptext14 3D42                               __ptext31 50C4  
                             __ptext23 08CA                               __ptext15 5096  
                             __ptext40 0012                               __ptext32 4B42  
                             __ptext24 23F0                               __ptext16 4E32  
                             __ptext41 4394                               __ptext33 4B7A  
                             __ptext25 4BB2                               __ptext17 4282  
                             __ptext50 36C2                               __ptext42 2C1C  
                             __ptext34 41E0                               __ptext26 430E  
                             __ptext18 47BA                               __ptext51 15C8  
                             __ptext43 4EE8                               __ptext35 3FBC  
                             __ptext27 5122                               __ptext19 407A  
                             __ptext60 26BA                               __ptext52 50EA  
                             __ptext44 4418                               __ptext36 3C2E  
                             __ptext28 513E                               __ptext61 4F66  
                             __ptext53 4F14                               __ptext45 4876  
                             __ptext37 20F2                               __ptext29 5146  
                             __ptext70 4D72                               __ptext62 2E64  
                             __ptext54 4BE8                               __ptext46 515E  
                             __ptext38 4A6E                               __ptext71 4E8E  
                             __ptext63 4C50                               __ptext55 4758  
                             __ptext47 1A00                               __ptext39 3E26  
                             __ptext80 510A                               __ptext72 4DA2  
                             __ptext64 34DC                               __ptext56 451E  
                             __ptext48 48D2                               __ptext81 5042  
                             __ptext73 4DD2                               __ptext65 4C82  
                             __ptext57 50FA                               __ptext49 4596  
                             __ptext90 5156                               __ptext82 4F8E  
                             __ptext74 4E02                               __ptext66 4CB2  
                             __ptext58 46F0                               __ptext91 4FB4  
                             __ptext83 4B00                               __ptext75 4FDA  
                             __ptext67 4CE2                               __ptext92 50D8  
                             __ptext84 4982                               __ptext76 3B0E  
                             __ptext68 4D12                               __ptext93 5060  
                             __ptext85 5116                               __ptext77 50AE  
                             __ptext69 4D42                               __ptext86 492C  
                             __ptext78 297A                               __ptext87 467E  
                             __ptext79 1D84                               __ptext88 512C  
                             __ptext89 514E                               _dispLogs 4FDA  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1978 0002  
                   __end_of_initServos 492C                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 5020  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4596                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 23F0  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0065  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4CE2      __end_ofi2_change_state_to_menu_22 4CB2  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C1C  
                            putch@data 0082               __end_of_I2C_Master_Start 514E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 512C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 23F0                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5096              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 297A  
              __end_of_I2C_Master_Init 481A                __end_of_I2C_Master_Read 4E8E  
              __end_of_I2C_Master_Wait 50D8                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5146                            lcdInst@data 0082  
                        printRTC@F3219 013B                           retrieveLog@i 000E  
                          _retrieveLog 3B0E                    __end_ofi2_lcdNibble 4982  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0133                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 481A  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
