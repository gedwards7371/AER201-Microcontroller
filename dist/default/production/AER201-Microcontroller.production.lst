

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 05:45:34 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.40
    99                           ; Generated 01/12/2016 GMT
   100                           ; 
   101                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4620 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK1
   134  003316                     __pidataBANK1:
   135                           	opt stack 0
   136                           
   137                           ;initializer for UI@F3220
   138  003316  4D                 	db	77
   139  003317  4D                 	db	77
   140  003318  4D                 	db	77
   141  003319  00                 	db	0
   142                           
   143                           ;initializer for printRTC@F3211
   144  00331A  4D                 	db	77
   145  00331B  4D                 	db	77
   146  00331C  4D                 	db	77
   147  00331D  00                 	db	0
   148                           
   149                           	psect	mediumconst
   150  00FD92                     __pmediumconst:
   151                           	opt stack 0
   152  00FD92  00                 	db	0
   153  00FD93                     _keys:
   154                           	opt stack 0
   155  00FD93  31                 	db	49
   156  00FD94  32                 	db	50
   157  00FD95  33                 	db	51
   158  00FD96  41                 	db	65
   159  00FD97  34                 	db	52
   160  00FD98  35                 	db	53
   161  00FD99  36                 	db	54
   162  00FD9A  42                 	db	66
   163  00FD9B  37                 	db	55
   164  00FD9C  38                 	db	56
   165  00FD9D  39                 	db	57
   166  00FD9E  43                 	db	67
   167  00FD9F  2A                 	db	42
   168  00FDA0  30                 	db	48
   169  00FDA1  23                 	db	35
   170  00FDA2  44                 	db	68
   171  00FDA3  00                 	db	0
   172  00FDA4                     __end_of_keys:
   173                           	opt stack 0
   174  00FDA4                     _dpowers:
   175                           	opt stack 0
   176  00FDA4  0001               	dw	1
   177  00FDA6  000A               	dw	10
   178  00FDA8  0064               	dw	100
   179  00FDAA  03E8               	dw	1000
   180  00FDAC  2710               	dw	10000
   181  00FDAE                     __end_of_dpowers:
   182                           	opt stack 0
   183  0000                     _ADCON0	set	4034
   184  0000                     _ADCON0bits	set	4034
   185  0000                     _ADCON1	set	4033
   186  0000                     _ADRESH	set	4036
   187  0000                     _ADRESL	set	4035
   188  0000                     _CMCONbits	set	4020
   189  0000                     _CVRCON	set	4021
   190  0000                     _EEADR	set	4009
   191  0000                     _EEADRH	set	4010
   192  0000                     _EECON1bits	set	4006
   193  0000                     _EECON2	set	4007
   194  0000                     _EEDATA	set	4008
   195  0000                     _INTCONbits	set	4082
   196  0000                     _LATA	set	3977
   197  0000                     _LATAbits	set	3977
   198  0000                     _LATB	set	3978
   199  0000                     _LATC	set	3979
   200  0000                     _LATCbits	set	3979
   201  0000                     _LATD	set	3980
   202  0000                     _LATDbits	set	3980
   203  0000                     _LATE	set	3981
   204  0000                     _OSCCON	set	4051
   205  0000                     _OSCTUNEbits	set	3995
   206  0000                     _PIR2bits	set	4001
   207  0000                     _PORTAbits	set	3968
   208  0000                     _PORTB	set	3969
   209  0000                     _PORTBbits	set	3969
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _TMR0H	set	4055
   218  0000                     _TMR0L	set	4054
   219  0000                     _TMR1H	set	4047
   220  0000                     _TMR1L	set	4046
   221  0000                     _TMR3H	set	4019
   222  0000                     _TMR3L	set	4018
   223  0000                     _TRISA	set	3986
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISE	set	3990
   228  0000                     _ACKDT	set	32301
   229  0000                     _ACKEN	set	32300
   230  0000                     _ADFM	set	32263
   231  0000                     _ADIE	set	31982
   232  0000                     _ADON	set	32272
   233  0000                     _INT1IE	set	32643
   234  0000                     _INT1IF	set	32640
   235  0000                     _PEIE	set	32662
   236  0000                     _PEN	set	32298
   237  0000                     _RCEN	set	32299
   238  0000                     _RSEN	set	32297
   239  0000                     _SEN	set	32296
   240  0000                     _TMR0IE	set	32661
   241  0000                     _TMR0IF	set	32658
   242  0000                     _TMR0ON	set	32431
   243  0000                     _TMR1IE	set	31976
   244  0000                     _TMR1IF	set	31984
   245  0000                     _TMR1ON	set	32360
   246  0000                     _TMR2IE	set	31977
   247  0000                     _TMR3IE	set	32001
   248  0000                     _TMR3IF	set	32009
   249  0000                     _TMR3ON	set	32136
   250  0000                     _TRISC3	set	31907
   251  0000                     _TRISC4	set	31908
   252  0000                     _VCFG0	set	32268
   253  0000                     _VCFG1	set	32269
   254  0000                     _nRBPU	set	32655
   255  00FDAE                     STR_21:
   256  00FDAE  25                 	db	37
   257  00FDAF  30                 	db	48	;'0'
   258  00FDB0  32                 	db	50	;'2'
   259  00FDB1  64                 	db	100	;'d'
   260  00FDB2  25                 	db	37
   261  00FDB3  73                 	db	115	;'s'
   262  00FDB4  20                 	db	32
   263  00FDB5  7C                 	db	124
   264  00FDB6  20                 	db	32
   265  00FDB7  25                 	db	37
   266  00FDB8  30                 	db	48	;'0'
   267  00FDB9  32                 	db	50	;'2'
   268  00FDBA  64                 	db	100	;'d'
   269  00FDBB  3A                 	db	58	;':'
   270  00FDBC  25                 	db	37
   271  00FDBD  30                 	db	48	;'0'
   272  00FDBE  32                 	db	50	;'2'
   273  00FDBF  64                 	db	100	;'d'
   274  00FDC0  3A                 	db	58	;':'
   275  00FDC1  25                 	db	37
   276  00FDC2  30                 	db	48	;'0'
   277  00FDC3  32                 	db	50	;'2'
   278  00FDC4  64                 	db	100	;'d'
   279  00FDC5  00                 	db	0
   280  00FDC6                     STR_66:
   281  00FDC6  28                 	db	40
   282  00FDC7  64                 	db	100	;'d'
   283  00FDC8  61                 	db	97	;'a'
   284  00FDC9  74                 	db	116	;'t'
   285  00FDCA  61                 	db	97	;'a'
   286  00FDCB  3A                 	db	58	;':'
   287  00FDCC  20                 	db	32
   288  00FDCD  25                 	db	37
   289  00FDCE  75                 	db	117	;'u'
   290  00FDCF  2C                 	db	44
   291  00FDD0  20                 	db	32
   292  00FDD1  61                 	db	97	;'a'
   293  00FDD2  64                 	db	100	;'d'
   294  00FDD3  64                 	db	100	;'d'
   295  00FDD4  72                 	db	114	;'r'
   296  00FDD5  3A                 	db	58	;':'
   297  00FDD6  20                 	db	32
   298  00FDD7  25                 	db	37
   299  00FDD8  75                 	db	117	;'u'
   300  00FDD9  29                 	db	41
   301  00FDDA  00                 	db	0
   302  00FDDB                     STR_27:
   303  00FDDB  4E                 	db	78	;'N'
   304  00FDDC  4F                 	db	79	;'O'
   305  00FDDD  20                 	db	32
   306  00FDDE  4C                 	db	76	;'L'
   307  00FDDF  41                 	db	65	;'A'
   308  00FDE0  42                 	db	66	;'B'
   309  00FDE1  3A                 	db	58	;':'
   310  00FDE2  20                 	db	32
   311  00FDE3  25                 	db	37
   312  00FDE4  64                 	db	100	;'d'
   313  00FDE5  7C                 	db	124
   314  00FDE6  4C                 	db	76	;'L'
   315  00FDE7  41                 	db	65	;'A'
   316  00FDE8  42                 	db	66	;'B'
   317  00FDE9  3A                 	db	58	;':'
   318  00FDEA  20                 	db	32
   319  00FDEB  25                 	db	37
   320  00FDEC  64                 	db	100	;'d'
   321  00FDED  00                 	db	0
   322  00FDEE                     STR_25:
   323  00FDEE  4E                 	db	78	;'N'
   324  00FDEF  4F                 	db	79	;'O'
   325  00FDF0  20                 	db	32
   326  00FDF1  54                 	db	84	;'T'
   327  00FDF2  41                 	db	65	;'A'
   328  00FDF3  42                 	db	66	;'B'
   329  00FDF4  3A                 	db	58	;':'
   330  00FDF5  20                 	db	32
   331  00FDF6  25                 	db	37
   332  00FDF7  64                 	db	100	;'d'
   333  00FDF8  7C                 	db	124
   334  00FDF9  54                 	db	84	;'T'
   335  00FDFA  41                 	db	65	;'A'
   336  00FDFB  42                 	db	66	;'B'
   337  00FDFC  3A                 	db	58	;':'
   338  00FDFD  20                 	db	32
   339  00FDFE  25                 	db	37
   340  00FDFF  64                 	db	100	;'d'
   341  00FE00  00                 	db	0
   342  00FE01                     STR_3:
   343  00FE01  2D                 	db	45
   344  00FE02  2D                 	db	45
   345  00FE03  20                 	db	32
   346  00FE04  4C                 	db	76	;'L'
   347  00FE05  4F                 	db	79	;'O'
   348  00FE06  47                 	db	71	;'G'
   349  00FE07  20                 	db	32
   350  00FE08  25                 	db	37
   351  00FE09  32                 	db	50	;'2'
   352  00FE0A  64                 	db	100	;'d'
   353  00FE0B  20                 	db	32
   354  00FE0C  48                 	db	72	;'H'
   355  00FE0D  45                 	db	69	;'E'
   356  00FE0E  52                 	db	82	;'R'
   357  00FE0F  45                 	db	69	;'E'
   358  00FE10  2D                 	db	45
   359  00FE11  2D                 	db	45
   360  00FE12  00                 	db	0
   361  00FE13                     STR_1:
   362  00FE13  52                 	db	82	;'R'
   363  00FE14  45                 	db	69	;'E'
   364  00FE15  53                 	db	83	;'S'
   365  00FE16  55                 	db	85	;'U'
   366  00FE17  4C                 	db	76	;'L'
   367  00FE18  54                 	db	84	;'T'
   368  00FE19  53                 	db	83	;'S'
   369  00FE1A  20                 	db	32
   370  00FE1B  49                 	db	73	;'I'
   371  00FE1C  4E                 	db	78	;'N'
   372  00FE1D  20                 	db	32
   373  00FE1E  4C                 	db	76	;'L'
   374  00FE1F  4F                 	db	79	;'O'
   375  00FE20  47                 	db	71	;'G'
   376  00FE21  20                 	db	32
   377  00FE22  25                 	db	37
   378  00FE23  64                 	db	100	;'d'
   379  00FE24  00                 	db	0
   380  00FE25                     STR_41:
   381  00FE25  4C                 	db	76	;'L'
   382  00FE26  4F                 	db	79	;'O'
   383  00FE27  47                 	db	71	;'G'
   384  00FE28  20                 	db	32
   385  00FE29  31                 	db	49	;'1'
   386  00FE2A  20                 	db	32
   387  00FE2B  20                 	db	32
   388  00FE2C  20                 	db	32
   389  00FE2D  20                 	db	32
   390  00FE2E  20                 	db	32
   391  00FE2F  20                 	db	32
   392  00FE30  20                 	db	32
   393  00FE31  20                 	db	32
   394  00FE32  20                 	db	32
   395  00FE33  20                 	db	32
   396  00FE34  20                 	db	32
   397  00FE35  00                 	db	0
   398  00FE36                     STR_40:
   399  00FE36  4C                 	db	76	;'L'
   400  00FE37  4F                 	db	79	;'O'
   401  00FE38  47                 	db	71	;'G'
   402  00FE39  20                 	db	32
   403  00FE3A  32                 	db	50	;'2'
   404  00FE3B  20                 	db	32
   405  00FE3C  20                 	db	32
   406  00FE3D  20                 	db	32
   407  00FE3E  20                 	db	32
   408  00FE3F  20                 	db	32
   409  00FE40  20                 	db	32
   410  00FE41  20                 	db	32
   411  00FE42  20                 	db	32
   412  00FE43  20                 	db	32
   413  00FE44  20                 	db	32
   414  00FE45  20                 	db	32
   415  00FE46  00                 	db	0
   416  00FE47                     STR_44:
   417  00FE47  4C                 	db	76	;'L'
   418  00FE48  4F                 	db	79	;'O'
   419  00FE49  47                 	db	71	;'G'
   420  00FE4A  20                 	db	32
   421  00FE4B  33                 	db	51	;'3'
   422  00FE4C  20                 	db	32
   423  00FE4D  20                 	db	32
   424  00FE4E  20                 	db	32
   425  00FE4F  20                 	db	32
   426  00FE50  20                 	db	32
   427  00FE51  20                 	db	32
   428  00FE52  20                 	db	32
   429  00FE53  20                 	db	32
   430  00FE54  20                 	db	32
   431  00FE55  20                 	db	32
   432  00FE56  20                 	db	32
   433  00FE57  00                 	db	0
   434  00FE58                     STR_48:
   435  00FE58  4C                 	db	76	;'L'
   436  00FE59  4F                 	db	79	;'O'
   437  00FE5A  47                 	db	71	;'G'
   438  00FE5B  20                 	db	32
   439  00FE5C  34                 	db	52	;'4'
   440  00FE5D  20                 	db	32
   441  00FE5E  20                 	db	32
   442  00FE5F  20                 	db	32
   443  00FE60  20                 	db	32
   444  00FE61  20                 	db	32
   445  00FE62  20                 	db	32
   446  00FE63  20                 	db	32
   447  00FE64  20                 	db	32
   448  00FE65  20                 	db	32
   449  00FE66  20                 	db	32
   450  00FE67  20                 	db	32
   451  00FE68  00                 	db	0
   452  00FE69                     STR_36:
   453  00FE69  33                 	db	51	;'3'
   454  00FE6A  2E                 	db	46
   455  00FE6B  20                 	db	32
   456  00FE6C  4C                 	db	76	;'L'
   457  00FE6D  4F                 	db	79	;'O'
   458  00FE6E  47                 	db	71	;'G'
   459  00FE6F  53                 	db	83	;'S'
   460  00FE70  20                 	db	32
   461  00FE71  20                 	db	32
   462  00FE72  20                 	db	32
   463  00FE73  20                 	db	32
   464  00FE74  20                 	db	32
   465  00FE75  20                 	db	32
   466  00FE76  20                 	db	32
   467  00FE77  20                 	db	32
   468  00FE78  20                 	db	32
   469  00FE79  00                 	db	0
   470  00FE7A                     STR_32:
   471  00FE7A  32                 	db	50	;'2'
   472  00FE7B  2E                 	db	46
   473  00FE7C  20                 	db	32
   474  00FE7D  53                 	db	83	;'S'
   475  00FE7E  4F                 	db	79	;'O'
   476  00FE7F  52                 	db	82	;'R'
   477  00FE80  54                 	db	84	;'T'
   478  00FE81  20                 	db	32
   479  00FE82  20                 	db	32
   480  00FE83  20                 	db	32
   481  00FE84  20                 	db	32
   482  00FE85  20                 	db	32
   483  00FE86  20                 	db	32
   484  00FE87  20                 	db	32
   485  00FE88  20                 	db	32
   486  00FE89  20                 	db	32
   487  00FE8A  00                 	db	0
   488  00FE8B                     STR_33:
   489  00FE8B  31                 	db	49	;'1'
   490  00FE8C  2E                 	db	46
   491  00FE8D  20                 	db	32
   492  00FE8E  44                 	db	68	;'D'
   493  00FE8F  41                 	db	65	;'A'
   494  00FE90  54                 	db	84	;'T'
   495  00FE91  45                 	db	69	;'E'
   496  00FE92  2F                 	db	47
   497  00FE93  54                 	db	84	;'T'
   498  00FE94  49                 	db	73	;'I'
   499  00FE95  4D                 	db	77	;'M'
   500  00FE96  45                 	db	69	;'E'
   501  00FE97  20                 	db	32
   502  00FE98  20                 	db	32
   503  00FE99  20                 	db	32
   504  00FE9A  20                 	db	32
   505  00FE9B  00                 	db	0
   506  00FE9C                     STR_24:
   507  00FE9C  20                 	db	32
   508  00FE9D  2D                 	db	45
   509  00FE9E  2D                 	db	45
   510  00FE9F  20                 	db	32
   511  00FEA0  50                 	db	80	;'P'
   512  00FEA1  4F                 	db	79	;'O'
   513  00FEA2  50                 	db	80	;'P'
   514  00FEA3  20                 	db	32
   515  00FEA4  20                 	db	32
   516  00FEA5  43                 	db	67	;'C'
   517  00FEA6  41                 	db	65	;'A'
   518  00FEA7  4E                 	db	78	;'N'
   519  00FEA8  20                 	db	32
   520  00FEA9  2D                 	db	45
   521  00FEAA  2D                 	db	45
   522  00FEAB  20                 	db	32
   523  00FEAC  00                 	db	0
   524  00FEAD                     STR_26:
   525  00FEAD  20                 	db	32
   526  00FEAE  2D                 	db	45
   527  00FEAF  2D                 	db	45
   528  00FEB0  20                 	db	32
   529  00FEB1  53                 	db	83	;'S'
   530  00FEB2  4F                 	db	79	;'O'
   531  00FEB3  55                 	db	85	;'U'
   532  00FEB4  50                 	db	80	;'P'
   533  00FEB5  20                 	db	32
   534  00FEB6  43                 	db	67	;'C'
   535  00FEB7  41                 	db	65	;'A'
   536  00FEB8  4E                 	db	78	;'N'
   537  00FEB9  20                 	db	32
   538  00FEBA  2D                 	db	45
   539  00FEBB  2D                 	db	45
   540  00FEBC  20                 	db	32
   541  00FEBD  00                 	db	0
   542  00FEBE                     STR_28:
   543  00FEBE  2D                 	db	45
   544  00FEBF  2D                 	db	45
   545  00FEC0  20                 	db	32
   546  00FEC1  54                 	db	84	;'T'
   547  00FEC2  4F                 	db	79	;'O'
   548  00FEC3  54                 	db	84	;'T'
   549  00FEC4  41                 	db	65	;'A'
   550  00FEC5  4C                 	db	76	;'L'
   551  00FEC6  20                 	db	32
   552  00FEC7  43                 	db	67	;'C'
   553  00FEC8  41                 	db	65	;'A'
   554  00FEC9  4E                 	db	78	;'N'
   555  00FECA  53                 	db	83	;'S'
   556  00FECB  20                 	db	32
   557  00FECC  2D                 	db	45
   558  00FECD  2D                 	db	45
   559  00FECE  00                 	db	0
   560  00FECF                     STR_39:
   561  00FECF  4C                 	db	76	;'L'
   562  00FED0  4F                 	db	79	;'O'
   563  00FED1  47                 	db	71	;'G'
   564  00FED2  20                 	db	32
   565  00FED3  31                 	db	49	;'1'
   566  00FED4  20                 	db	32
   567  00FED5  20                 	db	32
   568  00FED6  20                 	db	32
   569  00FED7  20                 	db	32
   570  00FED8  20                 	db	32
   571  00FED9  20                 	db	32
   572  00FEDA  20                 	db	32
   573  00FEDB  20                 	db	32
   574  00FEDC  20                 	db	32
   575  00FEDD  20                 	db	32
   576  00FEDE  3C                 	db	60	;'<'
   577  00FEDF  00                 	db	0
   578  00FEE0                     STR_42:
   579  00FEE0  4C                 	db	76	;'L'
   580  00FEE1  4F                 	db	79	;'O'
   581  00FEE2  47                 	db	71	;'G'
   582  00FEE3  20                 	db	32
   583  00FEE4  32                 	db	50	;'2'
   584  00FEE5  20                 	db	32
   585  00FEE6  20                 	db	32
   586  00FEE7  20                 	db	32
   587  00FEE8  20                 	db	32
   588  00FEE9  20                 	db	32
   589  00FEEA  20                 	db	32
   590  00FEEB  20                 	db	32
   591  00FEEC  20                 	db	32
   592  00FEED  20                 	db	32
   593  00FEEE  20                 	db	32
   594  00FEEF  3C                 	db	60	;'<'
   595  00FEF0  00                 	db	0
   596  00FEF1                     STR_46:
   597  00FEF1  4C                 	db	76	;'L'
   598  00FEF2  4F                 	db	79	;'O'
   599  00FEF3  47                 	db	71	;'G'
   600  00FEF4  20                 	db	32
   601  00FEF5  33                 	db	51	;'3'
   602  00FEF6  20                 	db	32
   603  00FEF7  20                 	db	32
   604  00FEF8  20                 	db	32
   605  00FEF9  20                 	db	32
   606  00FEFA  20                 	db	32
   607  00FEFB  20                 	db	32
   608  00FEFC  20                 	db	32
   609  00FEFD  20                 	db	32
   610  00FEFE  20                 	db	32
   611  00FEFF  20                 	db	32
   612  00FF00  3C                 	db	60	;'<'
   613  00FF01  00                 	db	0
   614  00FF02                     STR_50:
   615  00FF02  4C                 	db	76	;'L'
   616  00FF03  4F                 	db	79	;'O'
   617  00FF04  47                 	db	71	;'G'
   618  00FF05  20                 	db	32
   619  00FF06  34                 	db	52	;'4'
   620  00FF07  20                 	db	32
   621  00FF08  20                 	db	32
   622  00FF09  20                 	db	32
   623  00FF0A  20                 	db	32
   624  00FF0B  20                 	db	32
   625  00FF0C  20                 	db	32
   626  00FF0D  20                 	db	32
   627  00FF0E  20                 	db	32
   628  00FF0F  20                 	db	32
   629  00FF10  20                 	db	32
   630  00FF11  3C                 	db	60	;'<'
   631  00FF12  00                 	db	0
   632  00FF13                     STR_38:
   633  00FF13  33                 	db	51	;'3'
   634  00FF14  2E                 	db	46
   635  00FF15  20                 	db	32
   636  00FF16  4C                 	db	76	;'L'
   637  00FF17  4F                 	db	79	;'O'
   638  00FF18  47                 	db	71	;'G'
   639  00FF19  53                 	db	83	;'S'
   640  00FF1A  20                 	db	32
   641  00FF1B  20                 	db	32
   642  00FF1C  20                 	db	32
   643  00FF1D  20                 	db	32
   644  00FF1E  20                 	db	32
   645  00FF1F  20                 	db	32
   646  00FF20  20                 	db	32
   647  00FF21  20                 	db	32
   648  00FF22  3C                 	db	60	;'<'
   649  00FF23  00                 	db	0
   650  00FF24                     STR_34:
   651  00FF24  32                 	db	50	;'2'
   652  00FF25  2E                 	db	46
   653  00FF26  20                 	db	32
   654  00FF27  53                 	db	83	;'S'
   655  00FF28  4F                 	db	79	;'O'
   656  00FF29  52                 	db	82	;'R'
   657  00FF2A  54                 	db	84	;'T'
   658  00FF2B  20                 	db	32
   659  00FF2C  20                 	db	32
   660  00FF2D  20                 	db	32
   661  00FF2E  20                 	db	32
   662  00FF2F  20                 	db	32
   663  00FF30  20                 	db	32
   664  00FF31  20                 	db	32
   665  00FF32  20                 	db	32
   666  00FF33  3C                 	db	60	;'<'
   667  00FF34  00                 	db	0
   668  00FF35                     STR_31:
   669  00FF35  31                 	db	49	;'1'
   670  00FF36  2E                 	db	46
   671  00FF37  20                 	db	32
   672  00FF38  44                 	db	68	;'D'
   673  00FF39  41                 	db	65	;'A'
   674  00FF3A  54                 	db	84	;'T'
   675  00FF3B  45                 	db	69	;'E'
   676  00FF3C  2F                 	db	47
   677  00FF3D  54                 	db	84	;'T'
   678  00FF3E  49                 	db	73	;'I'
   679  00FF3F  4D                 	db	77	;'M'
   680  00FF40  45                 	db	69	;'E'
   681  00FF41  20                 	db	32
   682  00FF42  20                 	db	32
   683  00FF43  20                 	db	32
   684  00FF44  3C                 	db	60	;'<'
   685  00FF45  00                 	db	0
   686  00FF46                     STR_6:
   687  00FF46  50                 	db	80	;'P'
   688  00FF47  41                 	db	65	;'A'
   689  00FF48  55                 	db	85	;'U'
   690  00FF49  53                 	db	83	;'S'
   691  00FF4A  45                 	db	69	;'E'
   692  00FF4B  20                 	db	32
   693  00FF4C  3C                 	db	60	;'<'
   694  00FF4D  20                 	db	32
   695  00FF4E  7C                 	db	124
   696  00FF4F  20                 	db	32
   697  00FF50  42                 	db	66	;'B'
   698  00FF51  41                 	db	65	;'A'
   699  00FF52  43                 	db	67	;'C'
   700  00FF53  4B                 	db	75	;'K'
   701  00FF54  20                 	db	32
   702  00FF55  3E                 	db	62	;'>'
   703  00FF56  00                 	db	0
   704  00FF57                     STR_30:
   705  00FF57  50                 	db	80	;'P'
   706  00FF58  55                 	db	85	;'U'
   707  00FF59  53                 	db	83	;'S'
   708  00FF5A  48                 	db	72	;'H'
   709  00FF5B  20                 	db	32
   710  00FF5C  54                 	db	84	;'T'
   711  00FF5D  4F                 	db	79	;'O'
   712  00FF5E  20                 	db	32
   713  00FF5F  43                 	db	67	;'C'
   714  00FF60  4F                 	db	79	;'O'
   715  00FF61  4E                 	db	78	;'N'
   716  00FF62  54                 	db	84	;'T'
   717  00FF63  49                 	db	73	;'I'
   718  00FF64  4E                 	db	78	;'N'
   719  00FF65  55                 	db	85	;'U'
   720  00FF66  45                 	db	69	;'E'
   721  00FF67  00                 	db	0
   722  00FF68                     STR_4:
   723  00FF68  44                 	db	68	;'D'
   724  00FF69  49                 	db	73	;'I'
   725  00FF6A  44                 	db	68	;'D'
   726  00FF6B  4E                 	db	78	;'N'
   727  00FF6C  27                 	db	39
   728  00FF6D  54                 	db	84	;'T'
   729  00FF6E  20                 	db	32
   730  00FF6F  43                 	db	67	;'C'
   731  00FF70  4F                 	db	79	;'O'
   732  00FF71  4D                 	db	77	;'M'
   733  00FF72  50                 	db	80	;'P'
   734  00FF73  4C                 	db	76	;'L'
   735  00FF74  45                 	db	69	;'E'
   736  00FF75  54                 	db	84	;'T'
   737  00FF76  45                 	db	69	;'E'
   738  00FF77  00                 	db	0
   739  00FF78                     STR_23:
   740  00FF78  25                 	db	37
   741  00FF79  64                 	db	100	;'d'
   742  00FF7A  20                 	db	32
   743  00FF7B  4D                 	db	77	;'M'
   744  00FF7C  49                 	db	73	;'I'
   745  00FF7D  4E                 	db	78	;'N'
   746  00FF7E  20                 	db	32
   747  00FF7F  25                 	db	37
   748  00FF80  64                 	db	100	;'d'
   749  00FF81  20                 	db	32
   750  00FF82  53                 	db	83	;'S'
   751  00FF83  45                 	db	69	;'E'
   752  00FF84  43                 	db	67	;'C'
   753  00FF85  00                 	db	0
   754  00FF86                     STR_2:
   755  00FF86  54                 	db	84	;'T'
   756  00FF87  49                 	db	73	;'I'
   757  00FF88  4D                 	db	77	;'M'
   758  00FF89  45                 	db	69	;'E'
   759  00FF8A  3A                 	db	58	;':'
   760  00FF8B  20                 	db	32
   761  00FF8C  25                 	db	37
   762  00FF8D  64                 	db	100	;'d'
   763  00FF8E  3A                 	db	58	;':'
   764  00FF8F  25                 	db	37
   765  00FF90  30                 	db	48	;'0'
   766  00FF91  32                 	db	50	;'2'
   767  00FF92  64                 	db	100	;'d'
   768  00FF93  00                 	db	0
   769  00FF94                     STR_65:
   770  00FF94  54                 	db	84	;'T'
   771  00FF95  49                 	db	73	;'I'
   772  00FF96  4D                 	db	77	;'M'
   773  00FF97  45                 	db	69	;'E'
   774  00FF98  20                 	db	32
   775  00FF99  25                 	db	37
   776  00FF9A  64                 	db	100	;'d'
   777  00FF9B  3A                 	db	58	;':'
   778  00FF9C  25                 	db	37
   779  00FF9D  30                 	db	48	;'0'
   780  00FF9E  32                 	db	50	;'2'
   781  00FF9F  64                 	db	100	;'d'
   782  00FFA0  00                 	db	0
   783  00FFA1                     STR_64:
   784  00FFA1  53                 	db	83	;'S'
   785  00FFA2  4F                 	db	79	;'O'
   786  00FFA3  52                 	db	82	;'R'
   787  00FFA4  54                 	db	84	;'T'
   788  00FFA5  49                 	db	73	;'I'
   789  00FFA6  4E                 	db	78	;'N'
   790  00FFA7  47                 	db	71	;'G'
   791  00FFA8  2E                 	db	46
   792  00FFA9  2E                 	db	46
   793  00FFAA  2E                 	db	46
   794  00FFAB  00                 	db	0
   795  00FFAC                     STR_22:
   796  00FFAC  44                 	db	68	;'D'
   797  00FFAD  55                 	db	85	;'U'
   798  00FFAE  52                 	db	82	;'R'
   799  00FFAF  41                 	db	65	;'A'
   800  00FFB0  54                 	db	84	;'T'
   801  00FFB1  49                 	db	73	;'I'
   802  00FFB2  4F                 	db	79	;'O'
   803  00FFB3  4E                 	db	78	;'N'
   804  00FFB4  3A                 	db	58	;':'
   805  00FFB5  00                 	db	0
   806  00FFB6                     STR_68:
   807  00FFB6  28                 	db	40
   808  00FFB7  6E                 	db	110	;'n'
   809  00FFB8  75                 	db	117	;'u'
   810  00FFB9  6C                 	db	108	;'l'
   811  00FFBA  6C                 	db	108	;'l'
   812  00FFBB  29                 	db	41
   813  00FFBC  00                 	db	0
   814  00FFBD                     STR_67:
   815  00FFBD  46                 	db	70	;'F'
   816  00FFBE  41                 	db	65	;'A'
   817  00FFBF  49                 	db	73	;'I'
   818  00FFC0  4C                 	db	76	;'L'
   819  00FFC1  45                 	db	69	;'E'
   820  00FFC2  44                 	db	68	;'D'
   821  00FFC3  00                 	db	0
   822  00FFC4                     STR_7:
   823  00FFC4  53                 	db	83	;'S'
   824  00FFC5  54                 	db	84	;'T'
   825  00FFC6  41                 	db	65	;'A'
   826  00FFC7  52                 	db	82	;'R'
   827  00FFC8  54                 	db	84	;'T'
   828  00FFC9  3A                 	db	58	;':'
   829  00FFCA  00                 	db	0
   830  00FFCB                     STR_9:
   831  00FFCB  46                 	db	70	;'F'
   832  00FFCC  45                 	db	69	;'E'
   833  00FFCD  42                 	db	66	;'B'
   834  00FFCE  00                 	db	0
   835  00FFCF                     STR_19:
   836  00FFCF  44                 	db	68	;'D'
   837  00FFD0  45                 	db	69	;'E'
   838  00FFD1  43                 	db	67	;'C'
   839  00FFD2  00                 	db	0
   840  00FFD3                     STR_15:
   841  00FFD3  41                 	db	65	;'A'
   842  00FFD4  55                 	db	85	;'U'
   843  00FFD5  47                 	db	71	;'G'
   844  00FFD6  00                 	db	0
   845  00FFD7                     STR_14:
   846  00FFD7  4A                 	db	74	;'J'
   847  00FFD8  55                 	db	85	;'U'
   848  00FFD9  4C                 	db	76	;'L'
   849  00FFDA  00                 	db	0
   850  00FFDB                     STR_8:
   851  00FFDB  4A                 	db	74	;'J'
   852  00FFDC  41                 	db	65	;'A'
   853  00FFDD  4E                 	db	78	;'N'
   854  00FFDE  00                 	db	0
   855  00FFDF                     STR_13:
   856  00FFDF  4A                 	db	74	;'J'
   857  00FFE0  55                 	db	85	;'U'
   858  00FFE1  4E                 	db	78	;'N'
   859  00FFE2  00                 	db	0
   860  00FFE3                     STR_16:
   861  00FFE3  53                 	db	83	;'S'
   862  00FFE4  45                 	db	69	;'E'
   863  00FFE5  50                 	db	80	;'P'
   864  00FFE6  00                 	db	0
   865  00FFE7                     STR_10:
   866  00FFE7  4D                 	db	77	;'M'
   867  00FFE8  41                 	db	65	;'A'
   868  00FFE9  52                 	db	82	;'R'
   869  00FFEA  00                 	db	0
   870  00FFEB                     STR_11:
   871  00FFEB  41                 	db	65	;'A'
   872  00FFEC  50                 	db	80	;'P'
   873  00FFED  52                 	db	82	;'R'
   874  00FFEE  00                 	db	0
   875  00FFEF                     STR_20:
   876  00FFEF  45                 	db	69	;'E'
   877  00FFF0  52                 	db	82	;'R'
   878  00FFF1  52                 	db	82	;'R'
   879  00FFF2  00                 	db	0
   880  00FFF3                     STR_17:
   881  00FFF3  4F                 	db	79	;'O'
   882  00FFF4  43                 	db	67	;'C'
   883  00FFF5  54                 	db	84	;'T'
   884  00FFF6  00                 	db	0
   885  00FFF7                     STR_18:
   886  00FFF7  4E                 	db	78	;'N'
   887  00FFF8  4F                 	db	79	;'O'
   888  00FFF9  56                 	db	86	;'V'
   889  00FFFA  00                 	db	0
   890  00FFFB                     STR_12:
   891  00FFFB  4D                 	db	77	;'M'
   892  00FFFC  41                 	db	65	;'A'
   893  00FFFD  59                 	db	89	;'Y'
   894  00FFFE  00                 	db	0
   895  0000                     
   896                           ; #config settings
   897  00FFFF  00                 	db	0	; dummy byte at the end
   898  0000                     
   899                           	psect	cinit
   900  002C3C                     __pcinit:
   901                           	opt stack 0
   902  002C3C                     start_initialization:
   903                           	opt stack 0
   904  002C3C                     __initialization:
   905                           	opt stack 0
   906                           
   907                           ; Initialize objects allocated to BANK1 (8 bytes)
   908                           ; load TBLPTR registers with __pidataBANK1
   909  002C3C  0E16               	movlw	low __pidataBANK1
   910  002C3E  6EF6               	movwf	tblptrl,c
   911  002C40  0E33               	movlw	high __pidataBANK1
   912  002C42  6EF7               	movwf	tblptrh,c
   913  002C44  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   914  002C46  6EF8               	movwf	tblptru,c
   915  002C48  EE01  F028         	lfsr	0,__pdataBANK1
   916  002C4C  EE10 F008          	lfsr	1,8
   917  002C50                     copy_data0:
   918  002C50  0009               	tblrd		*+
   919  002C52  CFF5 FFEE          	movff	tablat,postinc0
   920  002C56  50E5               	movf	postdec1,w,c
   921  002C58  50E1               	movf	fsr1l,w,c
   922  002C5A  E1FA               	bnz	copy_data0
   923                           
   924                           ; Clear objects allocated to BANK1 (40 bytes)
   925  002C5C  EE01  F000         	lfsr	0,__pbssBANK1
   926  002C60  0E28               	movlw	40
   927  002C62                     clear_0:
   928  002C62  6AEE               	clrf	postinc0,c
   929  002C64  06E8               	decf	wreg,f,c
   930  002C66  E1FD               	bnz	clear_0
   931                           
   932                           ; Clear objects allocated to BANK0 (38 bytes)
   933  002C68  EE00  F0DA         	lfsr	0,__pbssBANK0
   934  002C6C  0E26               	movlw	38
   935  002C6E                     clear_1:
   936  002C6E  6AEE               	clrf	postinc0,c
   937  002C70  06E8               	decf	wreg,f,c
   938  002C72  E1FD               	bnz	clear_1
   939                           
   940                           ; Clear objects allocated to COMRAM (36 bytes)
   941  002C74  EE00  F05B         	lfsr	0,__pbssCOMRAM
   942  002C78  0E24               	movlw	36
   943  002C7A                     clear_2:
   944  002C7A  6AEE               	clrf	postinc0,c
   945  002C7C  06E8               	decf	wreg,f,c
   946  002C7E  E1FD               	bnz	clear_2
   947  002C80                     end_of_initialization:
   948                           	opt stack 0
   949  002C80                     __end_of__initialization:
   950                           	opt stack 0
   951  002C80  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   952  002C82  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   953  002C84  0100               	movlb	0
   954  002C86  EF4E  F013         	goto	_main	;jump to C main() function
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           fsr1l	equ	0xFE1
   963                           
   964                           	psect	bssCOMRAM
   965  00005B                     __pbssCOMRAM:
   966                           	opt stack 0
   967  00005B                     _time:
   968                           	opt stack 0
   969  00005B                     	ds	7
   970  000062                     _IR_signal:
   971                           	opt stack 0
   972  000062                     	ds	2
   973  000064                     _back:
   974                           	opt stack 0
   975  000064                     	ds	2
   976  000066                     _count_can_no_lab:
   977                           	opt stack 0
   978  000066                     	ds	2
   979  000068                     _count_can_w_lab:
   980                           	opt stack 0
   981  000068                     	ds	2
   982  00006A                     _count_pop_no_tab:
   983                           	opt stack 0
   984  00006A                     	ds	2
   985  00006C                     _count_pop_w_tab:
   986                           	opt stack 0
   987  00006C                     	ds	2
   988  00006E                     _cur_can:
   989                           	opt stack 0
   990  00006E                     	ds	2
   991  000070                     _down:
   992                           	opt stack 0
   993  000070                     	ds	2
   994  000072                     _enter:
   995                           	opt stack 0
   996  000072                     	ds	2
   997  000074                     _f_can_coming_to_distribution:
   998                           	opt stack 0
   999  000074                     	ds	2
  1000  000076                     _firstboot:
  1001                           	opt stack 0
  1002  000076                     	ds	2
  1003  000078                     _up:
  1004                           	opt stack 0
  1005  000078                     	ds	2
  1006  00007A                     _was_low_1:
  1007                           	opt stack 0
  1008  00007A                     	ds	2
  1009  00007C                     _was_low_3:
  1010                           	opt stack 0
  1011  00007C                     	ds	2
  1012  00007E                     _input:
  1013                           	opt stack 0
  1014  00007E                     	ds	1
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	bssBANK0
  1025  0000DA                     __pbssBANK0:
  1026                           	opt stack 0
  1027  0000DA                     _MAG_signal:
  1028                           	opt stack 0
  1029  0000DA                     	ds	2
  1030  0000DC                     _cur_state:
  1031                           	opt stack 0
  1032  0000DC                     	ds	2
  1033  0000DE                     _debug:
  1034                           	opt stack 0
  1035  0000DE                     	ds	2
  1036  0000E0                     _f_ID_receive:
  1037                           	opt stack 0
  1038  0000E0                     	ds	2
  1039  0000E2                     _f_can_coming_to_ID:
  1040                           	opt stack 0
  1041  0000E2                     	ds	2
  1042  0000E4                     _f_loadingNewCan:
  1043                           	opt stack 0
  1044  0000E4                     	ds	2
  1045  0000E6                     _first:
  1046                           	opt stack 0
  1047  0000E6                     	ds	2
  1048  0000E8                     _log:
  1049                           	opt stack 0
  1050  0000E8                     	ds	2
  1051  0000EA                     _log_completion:
  1052                           	opt stack 0
  1053  0000EA                     	ds	2
  1054  0000EC                     _log_count_can_no_lab:
  1055                           	opt stack 0
  1056  0000EC                     	ds	2
  1057  0000EE                     _log_count_can_w_lab:
  1058                           	opt stack 0
  1059  0000EE                     	ds	2
  1060  0000F0                     _log_count_pop_no_tab:
  1061                           	opt stack 0
  1062  0000F0                     	ds	2
  1063  0000F2                     _log_count_pop_w_tab:
  1064                           	opt stack 0
  1065  0000F2                     	ds	2
  1066  0000F4                     _log_count_total:
  1067                           	opt stack 0
  1068  0000F4                     	ds	2
  1069  0000F6                     _log_total_time:
  1070                           	opt stack 0
  1071  0000F6                     	ds	2
  1072  0000F8                     _logstate:
  1073                           	opt stack 0
  1074  0000F8                     	ds	2
  1075  0000FA                     _total_time:
  1076                           	opt stack 0
  1077  0000FA                     	ds	2
  1078  0000FC                     _machine_state:
  1079                           	opt stack 0
  1080  0000FC                     	ds	1
  1081  0000FD                     _sel:
  1082                           	opt stack 0
  1083  0000FD                     	ds	1
  1084  0000FE                     _count_total:
  1085                           	opt stack 0
  1086  0000FE                     	ds	2
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096                           	psect	bssBANK1
  1097  000100                     __pbssBANK1:
  1098                           	opt stack 0
  1099  000100                     _log_startTime:
  1100                           	opt stack 0
  1101  000100                     	ds	14
  1102  00010E                     _startTime:
  1103                           	opt stack 0
  1104  00010E                     	ds	14
  1105  00011C                     _servoTimes:
  1106                           	opt stack 0
  1107  00011C                     	ds	8
  1108  000124                     _f_can_distributed:
  1109                           	opt stack 0
  1110  000124                     	ds	2
  1111  000126                     _f_lastCan:
  1112                           	opt stack 0
  1113  000126                     	ds	2
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           
  1123                           	psect	dataBANK1
  1124  000128                     __pdataBANK1:
  1125                           	opt stack 0
  1126  000128                     UI@F3220:
  1127                           	opt stack 0
  1128  000128                     	ds	4
  1129  00012C                     printRTC@F3211:
  1130                           	opt stack 0
  1131  00012C                     	ds	4
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           	psect	cstackBANK0
  1142  000080                     __pcstackBANK0:
  1143                           	opt stack 0
  1144  000080                     ??_isdigit:
  1145  000080                     ??_readADC:
  1146  000080                     ??_I2C_Master_Wait:
  1147  000080                     ?___wmul:
  1148                           	opt stack 0
  1149  000080                     ?___awmod:
  1150                           	opt stack 0
  1151  000080                     ?___lwdiv:
  1152                           	opt stack 0
  1153  000080                     ?___lldiv:
  1154                           	opt stack 0
  1155  000080                     lcdNibble@temp:
  1156                           	opt stack 0
  1157  000080                     initTime@m:
  1158                           	opt stack 0
  1159  000080                     updateServoPosition@time_us:
  1160                           	opt stack 0
  1161  000080                     EEPROM_read@address:
  1162                           	opt stack 0
  1163  000080                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000080                     ___awmod@dividend:
  1166                           	opt stack 0
  1167  000080                     ___lwdiv@dividend:
  1168                           	opt stack 0
  1169  000080                     strcpy@to:
  1170                           	opt stack 0
  1171  000080                     ___lldiv@dividend:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0x0
  1175  000080                     	ds	1
  1176  000081                     readADC@channel:
  1177                           	opt stack 0
  1178  000081                     I2C_Master_Read@a:
  1179                           	opt stack 0
  1180  000081                     lcdNibble@data:
  1181                           	opt stack 0
  1182  000081                     initTime@h:
  1183                           	opt stack 0
  1184  000081                     _isdigit$1645:
  1185                           	opt stack 0
  1186  000081                     I2C_Master_Write@d:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1
  1190  000081                     	ds	1
  1191  000082                     ??_readMAG:
  1192  000082                     I2C_Master_Read@temp:
  1193                           	opt stack 0
  1194  000082                     lcdInst@data:
  1195                           	opt stack 0
  1196  000082                     putch@data:
  1197                           	opt stack 0
  1198  000082                     initTime@w:
  1199                           	opt stack 0
  1200  000082                     isdigit@c:
  1201                           	opt stack 0
  1202  000082                     updateServoPosition@timer:
  1203                           	opt stack 0
  1204  000082                     ___wmul@multiplicand:
  1205                           	opt stack 0
  1206  000082                     ___awmod@divisor:
  1207                           	opt stack 0
  1208  000082                     ___lwdiv@divisor:
  1209                           	opt stack 0
  1210  000082                     strcpy@from:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x2
  1214  000082                     	ds	1
  1215  000083                     ??_initLCD:
  1216  000083                     initTime@DD:
  1217                           	opt stack 0
  1218  000083                     getRTC@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x3
  1222  000083                     	ds	1
  1223  000084                     ??_updateServoPosition:
  1224  000084                     initTime@MM:
  1225                           	opt stack 0
  1226  000084                     ___awmod@counter:
  1227                           	opt stack 0
  1228  000084                     readMAG@res:
  1229                           	opt stack 0
  1230  000084                     ___wmul@product:
  1231                           	opt stack 0
  1232  000084                     ___lwdiv@quotient:
  1233                           	opt stack 0
  1234  000084                     strcpy@cp:
  1235                           	opt stack 0
  1236  000084                     ___lldiv@divisor:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x4
  1240  000084                     	ds	1
  1241  000085                     ??_initSortTimer:
  1242  000085                     initTime@YY:
  1243                           	opt stack 0
  1244  000085                     ___awmod@sign:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x5
  1248  000085                     	ds	1
  1249  000086                     ??_ID:
  1250  000086                     ?___awdiv:
  1251                           	opt stack 0
  1252  000086                     initTime@s:
  1253                           	opt stack 0
  1254  000086                     ___lwdiv@counter:
  1255                           	opt stack 0
  1256  000086                     updateServoPosition@my_time:
  1257                           	opt stack 0
  1258  000086                     ___awdiv@dividend:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x6
  1262  000086                     	ds	1
  1263  000087                     ?___lwmod:
  1264                           	opt stack 0
  1265  000087                     ___lwmod@dividend:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x7
  1269  000087                     	ds	1
  1270  000088                     ??_Distribution:
  1271  000088                     ??_initServos:
  1272  000088                     initSortTimer@i:
  1273                           	opt stack 0
  1274  000088                     ___awdiv@divisor:
  1275                           	opt stack 0
  1276  000088                     ___lldiv@quotient:
  1277                           	opt stack 0
  1278  000088                     ID@sensor_outputs:
  1279                           	opt stack 0
  1280                           
  1281                           ; 6 bytes @ 0x8
  1282  000088                     	ds	1
  1283  000089                     ___lwmod@divisor:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x9
  1287  000089                     	ds	1
  1288  00008A                     ___awdiv@counter:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0xA
  1292  00008A                     	ds	1
  1293  00008B                     ___awdiv@sign:
  1294                           	opt stack 0
  1295  00008B                     ___lwmod@counter:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0xB
  1299  00008B                     	ds	1
  1300  00008C                     ___lldiv@counter:
  1301                           	opt stack 0
  1302  00008C                     ___awdiv@quotient:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0xC
  1306  00008C                     	ds	1
  1307  00008D                     I2C_Master_Init@c:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0xD
  1311  00008D                     	ds	1
  1312  00008E                     ?_printf:
  1313                           	opt stack 0
  1314  00008E                     printf@f:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0xE
  1318  00008E                     	ds	3
  1319  000091                     ??_I2C_Master_Init:
  1320                           
  1321                           ; 1 bytes @ 0x11
  1322  000091                     	ds	4
  1323  000095                     ??_loadRTC:
  1324                           
  1325                           ; 1 bytes @ 0x15
  1326  000095                     	ds	1
  1327  000096                     loadRTC@i:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x16
  1331  000096                     	ds	4
  1332  00009A                     ??_printf:
  1333                           
  1334                           ; 1 bytes @ 0x1A
  1335  00009A                     	ds	4
  1336  00009E                     printf@prec:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x1E
  1340  00009E                     	ds	1
  1341  00009F                     printf@cp:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x1F
  1345  00009F                     	ds	2
  1346  0000A1                     printf@ap:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x21
  1350  0000A1                     	ds	2
  1351  0000A3                     printf@len:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x23
  1355  0000A3                     	ds	2
  1356  0000A5                     printf@val:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x25
  1360  0000A5                     	ds	2
  1361  0000A7                     printf@flag:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x27
  1365  0000A7                     	ds	1
  1366  0000A8                     printf@c:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x28
  1370  0000A8                     	ds	1
  1371  0000A9                     printf@width:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x29
  1375  0000A9                     	ds	2
  1376  0000AB                     ??_printRTC:
  1377  0000AB                     EEPROM_write@address:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x2B
  1381  0000AB                     	ds	2
  1382  0000AD                     EEPROM_write@data:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x2D
  1386  0000AD                     	ds	1
  1387  0000AE                     ??_EEPROM_write:
  1388  0000AE                     printRTC@INT_time:
  1389                           	opt stack 0
  1390                           
  1391                           ; 14 bytes @ 0x2E
  1392  0000AE                     	ds	1
  1393  0000AF                     EEPROM_write@i:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x2F
  1397  0000AF                     	ds	1
  1398  0000B0                     EEPROM_write@i_1306:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x30
  1402  0000B0                     	ds	1
  1403  0000B1                     ??_Loading:
  1404  0000B1                     logRun@num:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x31
  1408  0000B1                     	ds	1
  1409  0000B2                     logRun@byte1:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x32
  1413  0000B2                     	ds	1
  1414  0000B3                     logRun@byte2:
  1415                           	opt stack 0
  1416  0000B3                     Loading@addr:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x33
  1420  0000B3                     	ds	1
  1421  0000B4                     logRun@byte3:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x34
  1425  0000B4                     	ds	1
  1426  0000B5                     Loading@byte1:
  1427                           	opt stack 0
  1428  0000B5                     logRun@byte_i:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x35
  1432  0000B5                     	ds	1
  1433  0000B6                     logRun@byte11:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x36
  1437  0000B6                     	ds	1
  1438  0000B7                     logRun@i:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x37
  1442  0000B7                     	ds	2
  1443  0000B9                     logRun@addr:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x39
  1447  0000B9                     	ds	3
  1448  0000BC                     printRTC@RTC_month:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x3C
  1452  0000BC                     	ds	2
  1453  0000BE                     printRTC@month:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0x3E
  1457  0000BE                     	ds	4
  1458  0000C2                     printRTC@i:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x42
  1462  0000C2                     	ds	2
  1463  0000C4                     ??_UI:
  1464                           
  1465                           ; 1 bytes @ 0x44
  1466  0000C4                     	ds	2
  1467  0000C6                     _UI$2004:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x46
  1471  0000C6                     	ds	2
  1472  0000C8                     UI@i:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x48
  1476  0000C8                     	ds	1
  1477  0000C9                     UI@i_406:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x49
  1481  0000C9                     	ds	1
  1482  0000CA                     UI@i_409:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x4A
  1486  0000CA                     	ds	1
  1487  0000CB                     UI@i_410:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x4B
  1491  0000CB                     	ds	1
  1492  0000CC                     UI@i_428:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x4C
  1496  0000CC                     	ds	1
  1497  0000CD                     UI@i_429:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x4D
  1501  0000CD                     	ds	1
  1502  0000CE                     UI@i_432:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x4E
  1506  0000CE                     	ds	1
  1507  0000CF                     UI@i_433:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x4F
  1511  0000CF                     	ds	1
  1512  0000D0                     UI@i_436:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x50
  1516  0000D0                     	ds	1
  1517  0000D1                     UI@i_437:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x51
  1521  0000D1                     	ds	1
  1522  0000D2                     UI@i_440:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x52
  1526  0000D2                     	ds	1
  1527  0000D3                     UI@i_441:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x53
  1531  0000D3                     	ds	1
  1532  0000D4                     UI@i_444:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x54
  1536  0000D4                     	ds	1
  1537  0000D5                     UI@i_445:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x55
  1541  0000D5                     	ds	1
  1542  0000D6                     UI@month:
  1543                           	opt stack 0
  1544                           
  1545                           ; 4 bytes @ 0x56
  1546  0000D6                     	ds	4
  1547  0000DA                     tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1l	equ	0xFE1
  1555                           
  1556                           ; 1 bytes @ 0x5A
  1557                           
  1558                           	psect	cstackCOMRAM
  1559  000001                     __pcstackCOMRAM:
  1560                           	opt stack 0
  1561  000001                     ??i2_I2C_Master_Wait:
  1562  000001                     ??i2_isdigit:
  1563  000001                     ?i2___wmul:
  1564                           	opt stack 0
  1565  000001                     ?i2___lwmod:
  1566                           	opt stack 0
  1567  000001                     i2lcdNibble@temp:
  1568                           	opt stack 0
  1569  000001                     i2EEPROM_read@address:
  1570                           	opt stack 0
  1571  000001                     i2___wmul@multiplier:
  1572                           	opt stack 0
  1573  000001                     i2___lwmod@dividend:
  1574                           	opt stack 0
  1575  000001                     i2strcpy@to:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x0
  1579  000001                     	ds	1
  1580  000002                     i2I2C_Master_Read@a:
  1581                           	opt stack 0
  1582  000002                     i2lcdNibble@data:
  1583                           	opt stack 0
  1584  000002                     i2_isdigit$1645:
  1585                           	opt stack 0
  1586  000002                     i2I2C_Master_Write@d:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x1
  1590  000002                     	ds	1
  1591  000003                     i2I2C_Master_Read@temp:
  1592                           	opt stack 0
  1593  000003                     i2lcdInst@data:
  1594                           	opt stack 0
  1595  000003                     i2putch@data:
  1596                           	opt stack 0
  1597  000003                     i2isdigit@c:
  1598                           	opt stack 0
  1599  000003                     i2___wmul@multiplicand:
  1600                           	opt stack 0
  1601  000003                     i2___lwmod@divisor:
  1602                           	opt stack 0
  1603  000003                     i2strcpy@from:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0x2
  1607  000003                     	ds	1
  1608  000004                     i2getRTC@i:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x3
  1612  000004                     	ds	1
  1613  000005                     i2___lwmod@counter:
  1614                           	opt stack 0
  1615  000005                     i2___wmul@product:
  1616                           	opt stack 0
  1617  000005                     i2strcpy@cp:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x4
  1621  000005                     	ds	1
  1622  000006                     ?i2___lwdiv:
  1623                           	opt stack 0
  1624  000006                     i2___lwdiv@dividend:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x5
  1628  000006                     	ds	1
  1629  000007                     retrieveLog@logNum:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x6
  1633  000007                     	ds	1
  1634  000008                     i2___lwdiv@divisor:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x7
  1638  000008                     	ds	1
  1639  000009                     ??_retrieveLog:
  1640                           
  1641                           ; 1 bytes @ 0x8
  1642  000009                     	ds	1
  1643  00000A                     i2___lwdiv@quotient:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x9
  1647  00000A                     	ds	1
  1648  00000B                     retrieveLog@byte1:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0xA
  1652  00000B                     	ds	1
  1653  00000C                     retrieveLog@byte2:
  1654                           	opt stack 0
  1655  00000C                     i2___lwdiv@counter:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0xB
  1659  00000C                     	ds	1
  1660  00000D                     ?i2_printf:
  1661                           	opt stack 0
  1662  00000D                     retrieveLog@byte3:
  1663                           	opt stack 0
  1664  00000D                     i2printf@f:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0xC
  1668  00000D                     	ds	1
  1669  00000E                     retrieveLog@i:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0xD
  1673  00000E                     	ds	2
  1674  000010                     retrieveLog@addr:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0xF
  1678  000010                     	ds	2
  1679  000012                     dispLogs@myLog:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x11
  1683  000012                     	ds	2
  1684  000014                     
  1685                           ; 1 bytes @ 0x13
  1686  000014                     	ds	5
  1687  000019                     ??i2_printf:
  1688                           
  1689                           ; 1 bytes @ 0x18
  1690  000019                     	ds	4
  1691  00001D                     i2printf@prec:
  1692                           	opt stack 0
  1693                           
  1694                           ; 1 bytes @ 0x1C
  1695  00001D                     	ds	1
  1696  00001E                     i2printf@cp:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x1D
  1700  00001E                     	ds	2
  1701  000020                     i2printf@ap:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x1F
  1705  000020                     	ds	2
  1706  000022                     i2printf@len:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x21
  1710  000022                     	ds	2
  1711  000024                     i2printf@val:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x23
  1715  000024                     	ds	2
  1716  000026                     i2printf@flag:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x25
  1720  000026                     	ds	1
  1721  000027                     i2printf@c:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x26
  1725  000027                     	ds	1
  1726  000028                     i2printf@width:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x27
  1730  000028                     	ds	2
  1731  00002A                     ??_printSortTimer:
  1732  00002A                     ??i2_printRTC:
  1733  00002A                     ?_inputHandler:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x29
  1737  00002A                     	ds	2
  1738  00002C                     ??_inputHandler:
  1739                           
  1740                           ; 1 bytes @ 0x2B
  1741  00002C                     	ds	1
  1742  00002D                     printSortTimer@hour:
  1743                           	opt stack 0
  1744  00002D                     i2printRTC@INT_time:
  1745                           	opt stack 0
  1746                           
  1747                           ; 14 bytes @ 0x2C
  1748  00002D                     	ds	2
  1749  00002F                     printSortTimer@curTime:
  1750                           	opt stack 0
  1751                           
  1752                           ; 14 bytes @ 0x2E
  1753  00002F                     	ds	12
  1754  00003B                     i2printRTC@RTC_month:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x3A
  1758  00003B                     	ds	2
  1759  00003D                     printSortTimer@start_sec:
  1760                           	opt stack 0
  1761  00003D                     i2printRTC@month:
  1762                           	opt stack 0
  1763                           
  1764                           ; 4 bytes @ 0x3C
  1765  00003D                     	ds	2
  1766  00003F                     printSortTimer@cur_sec:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x3E
  1770  00003F                     	ds	2
  1771  000041                     printSortTimer@min:
  1772                           	opt stack 0
  1773  000041                     i2printRTC@i:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x40
  1777  000041                     	ds	2
  1778  000043                     ??_updateMenu:
  1779  000043                     printSortTimer@sec:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x42
  1783  000043                     	ds	2
  1784  000045                     _printSortTimer$2124:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x44
  1788  000045                     	ds	2
  1789  000047                     printSortTimer@timeDiff:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x46
  1793  000047                     	ds	2
  1794  000049                     printSortTimer@i:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x48
  1798  000049                     	ds	2
  1799  00004B                     ??_handler:
  1800                           
  1801                           ; 1 bytes @ 0x4A
  1802  00004B                     	ds	16
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812 ;;
  1813 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1814 ;;
  1815 ;; *************** function _main *****************
  1816 ;; Defined at:
  1817 ;;		line 17 in file "main.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels required when called:   13
  1837 ;; This function calls:
  1838 ;;		_Test
  1839 ;;		_UI
  1840 ;;		_initLCD
  1841 ;;		_initTime
  1842 ;;		_initUI
  1843 ;;		_logRun
  1844 ;;		_machineConfig
  1845 ;;		_sort
  1846 ;;		_stopSignals
  1847 ;; This function is called by:
  1848 ;;		Startup code after reset
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text0
  1853  00269C                     __ptext0:
  1854                           	opt stack 0
  1855  00269C                     _main:
  1856                           	opt stack 18
  1857                           
  1858                           ;main.c: 18: machineConfig();
  1859                           
  1860                           ;incstack = 0
  1861  00269C  EC9D  F015         	call	_machineConfig	;wreg free
  1862                           
  1863                           ;main.c: 19: initLCD();
  1864  0026A0  EC8F  F016         	call	_initLCD	;wreg free
  1865                           
  1866                           ;main.c: 20: initTime(0x42, 0x44, 0x02, 0x04, 0x01, 0x03, 0x17);
  1867  0026A4  0E44               	movlw	68
  1868  0026A6  0100               	movlb	0	; () banked
  1869  0026A8  6F80               	movwf	initTime@m& (0+255),b
  1870  0026AA  0E02               	movlw	2
  1871  0026AC  0100               	movlb	0	; () banked
  1872  0026AE  6F81               	movwf	initTime@h& (0+255),b
  1873  0026B0  0E04               	movlw	4
  1874  0026B2  0100               	movlb	0	; () banked
  1875  0026B4  6F82               	movwf	initTime@w& (0+255),b
  1876  0026B6  0E01               	movlw	1
  1877  0026B8  0100               	movlb	0	; () banked
  1878  0026BA  6F83               	movwf	initTime@DD& (0+255),b
  1879  0026BC  0E03               	movlw	3
  1880  0026BE  0100               	movlb	0	; () banked
  1881  0026C0  6F84               	movwf	initTime@MM& (0+255),b
  1882  0026C2  0E17               	movlw	23
  1883  0026C4  0100               	movlb	0	; () banked
  1884  0026C6  6F85               	movwf	initTime@YY& (0+255),b
  1885  0026C8  0E42               	movlw	66
  1886  0026CA  EC10  F019         	call	_initTime
  1887                           
  1888                           ;main.c: 21: initUI();
  1889  0026CE  ECDB  F018         	call	_initUI	;wreg free
  1890                           
  1891                           ;main.c: 22: first = 1;
  1892  0026D2  0E00               	movlw	0
  1893  0026D4  0100               	movlb	0	; () banked
  1894  0026D6  6FE7               	movwf	(_first+1)& (0+255),b
  1895  0026D8  0E01               	movlw	1
  1896  0026DA  6FE6               	movwf	_first& (0+255),b
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 28: switch(machine_state){
  1900                           
  1901                           ;main.c: 27: while(1){
  1902  0026DC  D018               	goto	l6114
  1903  0026DE                     l6096:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 30: UI();
  1907  0026DE  EC09  F000         	call	_UI	;wreg free
  1908                           
  1909                           ;main.c: 31: break;
  1910  0026E2  D015               	goto	l6114
  1911  0026E4                     l6098:
  1912                           
  1913                           ;main.c: 33: sort();
  1914  0026E4  ECFF  F018         	call	_sort	;wreg free
  1915                           
  1916                           ;main.c: 34: break;
  1917  0026E8  D012               	goto	l6114
  1918  0026EA                     l6100:
  1919                           
  1920                           ;main.c: 36: stopSignals();
  1921  0026EA  EC3C  F019         	call	_stopSignals	;wreg free
  1922                           
  1923                           ;main.c: 37: logRun();
  1924  0026EE  ECAA  F00E         	call	_logRun	;wreg free
  1925                           
  1926                           ;main.c: 38: first = 1;
  1927  0026F2  0E00               	movlw	0
  1928  0026F4  0100               	movlb	0	; () banked
  1929  0026F6  6FE7               	movwf	(_first+1)& (0+255),b
  1930  0026F8  0E01               	movlw	1
  1931  0026FA  6FE6               	movwf	_first& (0+255),b
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 39: UI();
  1935  0026FC  EC09  F000         	call	_UI	;wreg free
  1936                           
  1937                           ;main.c: 40: break;
  1938  002700  D006               	goto	l6114
  1939  002702                     l6108:
  1940                           
  1941                           ;main.c: 42: Test();
  1942  002702  EC9F  F019         	call	_Test	;wreg free
  1943                           
  1944                           ;main.c: 43: break;
  1945  002706  D003               	goto	l6114
  1946  002708                     l6110:
  1947                           
  1948                           ;main.c: 45: stopSignals();
  1949  002708  EC3C  F019         	call	_stopSignals	;wreg free
  1950  00270C                     l480:
  1951  00270C  D7FF               	goto	l480
  1952  00270E                     l6114:
  1953  00270E  0100               	movlb	0	; () banked
  1954  002710  51FC               	movf	_machine_state& (0+255),w,b
  1955                           
  1956                           ; Switch size 1, requested type "space"
  1957                           ; Number of cases is 5, Range of values is 0 to 4
  1958                           ; switch strategies available:
  1959                           ; Name         Instructions Cycles
  1960                           ; simple_byte           16     9 (average)
  1961                           ;	Chosen strategy is simple_byte
  1962  002712  0A00               	xorlw	0	; case 0
  1963  002714  B4D8               	btfsc	status,2,c
  1964  002716  D7E3               	goto	l6096
  1965  002718  0A01               	xorlw	1	; case 1
  1966  00271A  B4D8               	btfsc	status,2,c
  1967  00271C  D7E3               	goto	l6098
  1968  00271E  0A03               	xorlw	3	; case 2
  1969  002720  B4D8               	btfsc	status,2,c
  1970  002722  D7E3               	goto	l6100
  1971  002724  0A01               	xorlw	1	; case 3
  1972  002726  B4D8               	btfsc	status,2,c
  1973  002728  D7EC               	goto	l6108
  1974  00272A  0A07               	xorlw	7	; case 4
  1975  00272C  B4D8               	btfsc	status,2,c
  1976  00272E  D7EC               	goto	l6110
  1977                           
  1978                           ; BSR set to: 0
  1979                           
  1980                           ; BSR set to: 0
  1981  002730  D7EE               	goto	l6114
  1982  002732                     __end_of_main:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _stopSignals *****************
  1995 ;; Defined at:
  1996 ;;		line 54 in file "main.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    7
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text1
  2025  003278                     __ptext1:
  2026                           	opt stack 0
  2027  003278                     _stopSignals:
  2028                           	opt stack 23
  2029                           
  2030                           ;main.c: 55: LATA = 0x00;
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;incstack = 0
  2034  003278  0E00               	movlw	0
  2035  00327A  6E89               	movwf	3977,c	;volatile
  2036                           
  2037                           ;main.c: 56: LATB = 0x00;
  2038  00327C  0E00               	movlw	0
  2039  00327E  6E8A               	movwf	3978,c	;volatile
  2040                           
  2041                           ;main.c: 57: LATC = 0x00;
  2042  003280  0E00               	movlw	0
  2043  003282  6E8B               	movwf	3979,c	;volatile
  2044                           
  2045                           ;main.c: 58: LATD = 0x00;
  2046  003284  0E00               	movlw	0
  2047  003286  6E8C               	movwf	3980,c	;volatile
  2048                           
  2049                           ;main.c: 59: LATE = 0x00;
  2050  003288  0E00               	movlw	0
  2051  00328A  6E8D               	movwf	3981,c	;volatile
  2052  00328C  0012               	return		;funcret
  2053  00328E                     __end_of_stopSignals:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1l	equ	0xFE1
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _sort *****************
  2066 ;; Defined at:
  2067 ;;		line 55 in file "sort.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:   12
  2088 ;; This function calls:
  2089 ;;		_Distribution
  2090 ;;		_ID
  2091 ;;		_Loading
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text2
  2098  0031FE                     __ptext2:
  2099                           	opt stack 0
  2100  0031FE                     _sort:
  2101                           	opt stack 18
  2102                           
  2103                           ;sort.c: 56: if(machine_state == Sorting_state){
  2104                           
  2105                           ;incstack = 0
  2106  0031FE  0100               	movlb	0	; () banked
  2107  003200  05FC               	decf	_machine_state& (0+255),w,b
  2108  003202  B4D8               	btfsc	status,2,c
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;sort.c: 57: Loading();
  2112  003204  EC02  F011         	call	_Loading	;wreg free
  2113                           
  2114                           ;sort.c: 58: }
  2115                           ;sort.c: 59: if(machine_state == Sorting_state){
  2116  003208  0100               	movlb	0	; () banked
  2117  00320A  05FC               	decf	_machine_state& (0+255),w,b
  2118  00320C  B4D8               	btfsc	status,2,c
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;sort.c: 60: ID();
  2122  00320E  ECE2  F00F         	call	_ID	;wreg free
  2123                           
  2124                           ;sort.c: 61: }
  2125                           ;sort.c: 62: if(machine_state == Sorting_state){
  2126  003212  0100               	movlb	0	; () banked
  2127  003214  05FC               	decf	_machine_state& (0+255),w,b
  2128  003216  A4D8               	btfss	status,2,c
  2129  003218  0012               	return	
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;sort.c: 63: Distribution();
  2133  00321A  EC48  F00F         	call	_Distribution	;wreg free
  2134  00321E  0012               	return	
  2135  003220                     __end_of_sort:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           tblptrh	equ	0xFF7
  2139                           tblptrl	equ	0xFF6
  2140                           tablat	equ	0xFF5
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           postdec1	equ	0xFE5
  2144                           fsr1l	equ	0xFE1
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _Loading *****************
  2148 ;; Defined at:
  2149 ;;		line 67 in file "sort.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  addr            2   51[BANK0 ] unsigned short 
  2154 ;;  byte1           1   53[BANK0 ] unsigned char 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;Total ram usage:        5 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:   11
  2171 ;; This function calls:
  2172 ;;		_EEPROM_read
  2173 ;;		_EEPROM_write
  2174 ;;		_initGlobalVars
  2175 ;;		_initServos
  2176 ;;		_initSortTimer
  2177 ;;		_lcdInst
  2178 ;; This function is called by:
  2179 ;;		_sort
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text3
  2184  002204                     __ptext3:
  2185                           	opt stack 0
  2186  002204                     _Loading:
  2187                           	opt stack 18
  2188                           
  2189                           ;sort.c: 68: if(first){
  2190                           
  2191                           ;incstack = 0
  2192  002204  0100               	movlb	0	; () banked
  2193  002206  51E6               	movf	_first& (0+255),w,b
  2194  002208  0100               	movlb	0	; () banked
  2195  00220A  11E7               	iorwf	(_first+1)& (0+255),w,b
  2196  00220C  B4D8               	btfsc	status,2,c
  2197  00220E  D033               	goto	l5188
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;sort.c: 69: initGlobalVars();
  2201  002210  EC98  F014         	call	_initGlobalVars	;wreg free
  2202                           
  2203                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2204  002214  0E01               	movlw	1
  2205  002216  EC6D  F019         	call	_lcdInst
  2206  00221A  0E68               	movlw	104
  2207  00221C  0100               	movlb	0	; () banked
  2208  00221E  6FB1               	movwf	??_Loading& (0+255),b
  2209  002220  0EE4               	movlw	228
  2210  002222                     u5137:
  2211  002222  2EE8               	decfsz	wreg,f,c
  2212  002224  D7FE               	bra	u5137
  2213  002226  2FB1               	decfsz	??_Loading& (0+255),f,b
  2214  002228  D7FC               	bra	u5137
  2215  00222A  F000               	nop	
  2216                           
  2217                           ;sort.c: 71: initSortTimer();
  2218  00222C  ECA8  F012         	call	_initSortTimer	;wreg free
  2219                           
  2220                           ;sort.c: 76: sel = EEPROM_read(0);
  2221  002230  0E00               	movlw	0
  2222  002232  0100               	movlb	0	; () banked
  2223  002234  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2224  002236  0E00               	movlw	0
  2225  002238  6F80               	movwf	EEPROM_read@address& (0+255),b
  2226  00223A  EC30  F019         	call	_EEPROM_read	;wreg free
  2227  00223E  0100               	movlb	0	; () banked
  2228  002240  6FFD               	movwf	_sel& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2232  002242  0100               	movlb	0	; () banked
  2233  002244  51FD               	movf	_sel& (0+255),w,b
  2234  002246  0D0B               	mullw	11
  2235  002248  0E01               	movlw	1
  2236  00224A  24F3               	addwf	prodl,w,c
  2237  00224C  0100               	movlb	0	; () banked
  2238  00224E  6FB3               	movwf	Loading@addr& (0+255),b
  2239  002250  0E00               	movlw	0
  2240  002252  20F4               	addwfc	prodh,w,c
  2241  002254  0100               	movlb	0	; () banked
  2242  002256  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2246  002258  0E7F               	movlw	127
  2247  00225A  0100               	movlb	0	; () banked
  2248  00225C  6FB5               	movwf	Loading@byte1& (0+255),b
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2252  00225E  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2253  002262  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2254  002266  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2255  00226A  EC77  F011         	call	_EEPROM_write	;wreg free
  2256                           
  2257                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2258  00226E  8A89               	bsf	3977,5,c	;volatile
  2259                           
  2260                           ;sort.c: 85: initServos();
  2261  002270  EC45  F016         	call	_initServos	;wreg free
  2262                           
  2263                           ;sort.c: 86: }
  2264  002274  0012               	return	
  2265  002276                     l5188:
  2266                           
  2267                           ;sort.c: 87: else{
  2268                           ;sort.c: 90: if(!f_loadingNewCan){
  2269  002276  0100               	movlb	0	; () banked
  2270  002278  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  2271  00227A  0100               	movlb	0	; () banked
  2272  00227C  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2273  00227E  A4D8               	btfss	status,2,c
  2274  002280  D016               	goto	l5202
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;sort.c: 94: if(!f_loadingNewCan){
  2278  002282  0100               	movlb	0	; () banked
  2279  002284  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  2280  002286  0100               	movlb	0	; () banked
  2281  002288  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2282  00228A  B4D8               	btfsc	status,2,c
  2283  00228C  0012               	return	
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;sort.c: 98: else{
  2287                           ;sort.c: 99: count_total++;
  2288                           
  2289                           ; BSR set to: 0
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;sort.c: 96: }
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;sort.c: 95: return;
  2296  00228E  0100               	movlb	0	; () banked
  2297  002290  4BFE               	infsnz	_count_total& (0+255),f,b
  2298  002292  2BFF               	incf	(_count_total+1)& (0+255),f,b
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;sort.c: 100: if(count_total == 12){
  2302  002294  0E0C               	movlw	12
  2303  002296  0100               	movlb	0	; () banked
  2304  002298  19FE               	xorwf	_count_total& (0+255),w,b
  2305  00229A  0100               	movlb	0	; () banked
  2306  00229C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  2307  00229E  A4D8               	btfss	status,2,c
  2308  0022A0  0012               	return	
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;sort.c: 101: f_lastCan = 1;
  2312  0022A2  0E00               	movlw	0
  2313  0022A4  0101               	movlb	1	; () banked
  2314  0022A6  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2315  0022A8  0E01               	movlw	1
  2316  0022AA  6F26               	movwf	_f_lastCan& (0+255),b
  2317                           
  2318                           ; BSR set to: 1
  2319                           ;sort.c: 102: }
  2320                           ;sort.c: 103: }
  2321                           ;sort.c: 104: }
  2322                           
  2323                           ; BSR set to: 1
  2324  0022AC  0012               	return	
  2325  0022AE                     l5202:
  2326                           
  2327                           ;sort.c: 107: else if(f_ID_receive){
  2328  0022AE  0100               	movlb	0	; () banked
  2329  0022B0  51E0               	movf	_f_ID_receive& (0+255),w,b
  2330  0022B2  0100               	movlb	0	; () banked
  2331  0022B4  11E1               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2332  0022B6  B4D8               	btfsc	status,2,c
  2333  0022B8  0012               	return	
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;sort.c: 108: f_loadingNewCan = 0;
  2337  0022BA  0E00               	movlw	0
  2338  0022BC  0100               	movlb	0	; () banked
  2339  0022BE  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2340  0022C0  0E00               	movlw	0
  2341  0022C2  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;sort.c: 109: LATAbits.LATA4 = 1;
  2345  0022C4  8889               	bsf	3977,4,c	;volatile
  2346                           
  2347                           ;sort.c: 110: f_can_coming_to_ID = 1;
  2348  0022C6  0E00               	movlw	0
  2349  0022C8  0100               	movlb	0	; () banked
  2350  0022CA  6FE3               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2351  0022CC  0E01               	movlw	1
  2352  0022CE  6FE2               	movwf	_f_can_coming_to_ID& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  2356  0022D0  0E05               	movlw	5
  2357  0022D2  0100               	movlb	0	; () banked
  2358  0022D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  2359  0022D6  0E0F               	movlw	15
  2360  0022D8  0100               	movlb	0	; () banked
  2361  0022DA  6FB1               	movwf	??_Loading& (0+255),b
  2362  0022DC  0EF1               	movlw	241
  2363  0022DE                     u5147:
  2364  0022DE  2EE8               	decfsz	wreg,f,c
  2365  0022E0  D7FE               	bra	u5147
  2366  0022E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  2367  0022E4  D7FC               	bra	u5147
  2368  0022E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  2369  0022E8  D7FA               	bra	u5147
  2370                           
  2371                           ;sort.c: 112: LATAbits.LATA4 = 0;
  2372  0022EA  9889               	bcf	3977,4,c	;volatile
  2373  0022EC  0012               	return	
  2374  0022EE                     __end_of_Loading:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           postdec1	equ	0xFE5
  2385                           fsr1l	equ	0xFE1
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _initSortTimer *****************
  2389 ;; Defined at:
  2390 ;;		line 225 in file "sort.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  i               2    8[BANK0 ] int 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;Total ram usage:        5 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:   10
  2411 ;; This function calls:
  2412 ;;		_getRTC
  2413 ;; This function is called by:
  2414 ;;		_Loading
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text4
  2419  002550                     __ptext4:
  2420                           	opt stack 0
  2421  002550                     _initSortTimer:
  2422                           	opt stack 18
  2423                           
  2424                           ;sort.c: 227: getRTC();
  2425                           
  2426                           ;incstack = 0
  2427  002550  ECDF  F013         	call	_getRTC	;wreg free
  2428                           
  2429                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  2430  002554  0E00               	movlw	0
  2431  002556  0100               	movlb	0	; () banked
  2432  002558  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2433  00255A  0E00               	movlw	0
  2434  00255C  6F88               	movwf	initSortTimer@i& (0+255),b
  2435  00255E                     l4824:
  2436                           
  2437                           ; BSR set to: 0
  2438  00255E  0100               	movlb	0	; () banked
  2439  002560  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2440  002562  D008               	goto	l4828
  2441  002564  0100               	movlb	0	; () banked
  2442  002566  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2443  002568  E140               	bnz	l4834
  2444  00256A  0E07               	movlw	7
  2445  00256C  0100               	movlb	0	; () banked
  2446  00256E  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2447  002570  B0D8               	btfsc	status,0,c
  2448  002572  D03B               	goto	l4834
  2449  002574                     l4828:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2453  002574  0E5B               	movlw	low _time
  2454  002576  0100               	movlb	0	; () banked
  2455  002578  2588               	addwf	initSortTimer@i& (0+255),w,b
  2456  00257A  6ED9               	movwf	fsr2l,c
  2457  00257C  0E00               	movlw	high _time
  2458  00257E  0100               	movlb	0	; () banked
  2459  002580  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2460  002582  6EDA               	movwf	fsr2h,c
  2461  002584  50DF               	movf	indf2,w,c
  2462  002586  0100               	movlb	0	; () banked
  2463  002588  6F85               	movwf	??_initSortTimer& (0+255),b
  2464  00258A  0100               	movlb	0	; () banked
  2465  00258C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2466  00258E  0E0F               	movlw	15
  2467  002590  1785               	andwf	??_initSortTimer& (0+255),f,b
  2468  002592  0E0F               	movlw	15
  2469  002594  0100               	movlb	0	; () banked
  2470  002596  1785               	andwf	??_initSortTimer& (0+255),f,b
  2471  002598  0100               	movlb	0	; () banked
  2472  00259A  5185               	movf	??_initSortTimer& (0+255),w,b
  2473  00259C  0D0A               	mullw	10
  2474  00259E  0E5B               	movlw	low _time
  2475  0025A0  0100               	movlb	0	; () banked
  2476  0025A2  2588               	addwf	initSortTimer@i& (0+255),w,b
  2477  0025A4  6ED9               	movwf	fsr2l,c
  2478  0025A6  0E00               	movlw	high _time
  2479  0025A8  0100               	movlb	0	; () banked
  2480  0025AA  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2481  0025AC  6EDA               	movwf	fsr2h,c
  2482  0025AE  50DF               	movf	indf2,w,c
  2483  0025B0  0B0F               	andlw	15
  2484  0025B2  0100               	movlb	0	; () banked
  2485  0025B4  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2486  0025B6  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2487  0025B8  50F3               	movf	prodl,w,c
  2488  0025BA  0100               	movlb	0	; () banked
  2489  0025BC  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2490  0025BE  50F4               	movf	prodh,w,c
  2491  0025C0  0100               	movlb	0	; () banked
  2492  0025C2  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2493  0025C4  90D8               	bcf	status,0,c
  2494  0025C6  0100               	movlb	0	; () banked
  2495  0025C8  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2496  0025CA  6ED9               	movwf	fsr2l,c
  2497  0025CC  0100               	movlb	0	; () banked
  2498  0025CE  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2499  0025D0  6EDA               	movwf	fsr2h,c
  2500  0025D2  0E0E               	movlw	low _startTime
  2501  0025D4  26D9               	addwf	fsr2l,f,c
  2502  0025D6  0E01               	movlw	high _startTime
  2503  0025D8  22DA               	addwfc	fsr2h,f,c
  2504  0025DA  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2505  0025DE  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2506                           
  2507                           ; BSR set to: 0
  2508  0025E2  0100               	movlb	0	; () banked
  2509  0025E4  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2510  0025E6  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2511  0025E8  D7BA               	goto	l4824
  2512  0025EA                     l4834:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;sort.c: 230: }
  2516                           ;sort.c: 232: T0CON = 0b00010111;
  2517  0025EA  0E17               	movlw	23
  2518  0025EC  6ED5               	movwf	4053,c	;volatile
  2519                           
  2520                           ;sort.c: 241: TMR0H = 0b10000101;
  2521  0025EE  0E85               	movlw	133
  2522  0025F0  6ED7               	movwf	4055,c	;volatile
  2523                           
  2524                           ;sort.c: 242: TMR0L = 0b11101110;
  2525  0025F2  0EEE               	movlw	238
  2526  0025F4  6ED6               	movwf	4054,c	;volatile
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;sort.c: 243: TMR0ON = 1;
  2530  0025F6  8ED5               	bsf	4053,7,c	;volatile
  2531                           
  2532                           ; BSR set to: 0
  2533  0025F8  0012               	return		;funcret
  2534  0025FA                     __end_of_initSortTimer:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           postinc0	equ	0xFEE
  2543                           wreg	equ	0xFE8
  2544                           postdec1	equ	0xFE5
  2545                           fsr1l	equ	0xFE1
  2546                           indf2	equ	0xFDF
  2547                           postinc2	equ	0xFDE
  2548                           postdec2	equ	0xFDD
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _initServos *****************
  2554 ;; Defined at:
  2555 ;;		line 245 in file "sort.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;		None
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, status,2, status,0, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;Total ram usage:        1 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    8
  2576 ;; This function calls:
  2577 ;;		_updateServoPosition
  2578 ;; This function is called by:
  2579 ;;		_Loading
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text5
  2584  002C8A                     __ptext5:
  2585                           	opt stack 0
  2586  002C8A                     _initServos:
  2587                           	opt stack 20
  2588                           
  2589                           ;sort.c: 246: updateServoPosition(2000, 1);
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;incstack = 0
  2593  002C8A  0E07               	movlw	7
  2594  002C8C  0100               	movlb	0	; () banked
  2595  002C8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2596  002C90  0ED0               	movlw	208
  2597  002C92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2598  002C94  0E00               	movlw	0
  2599  002C96  0100               	movlb	0	; () banked
  2600  002C98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2601  002C9A  0E01               	movlw	1
  2602  002C9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2603  002C9E  EC5D  F014         	call	_updateServoPosition	;wreg free
  2604                           
  2605                           ;sort.c: 247: updateServoPosition(1000, 3);
  2606  002CA2  0E03               	movlw	3
  2607  002CA4  0100               	movlb	0	; () banked
  2608  002CA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2609  002CA8  0EE8               	movlw	232
  2610  002CAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2611  002CAC  0E00               	movlw	0
  2612  002CAE  0100               	movlb	0	; () banked
  2613  002CB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2614  002CB2  0E03               	movlw	3
  2615  002CB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2616  002CB6  EC5D  F014         	call	_updateServoPosition	;wreg free
  2617                           
  2618                           ;sort.c: 248: TMR1ON = 1;
  2619  002CBA  80CD               	bsf	4045,0,c	;volatile
  2620                           
  2621                           ;sort.c: 249: _delay((unsigned long)((5)*(32000000/4000.0)));
  2622  002CBC  0E34               	movlw	52
  2623  002CBE  0100               	movlb	0	; () banked
  2624  002CC0  6F88               	movwf	??_initServos& (0+255),b
  2625  002CC2  0EF1               	movlw	241
  2626  002CC4                     u5157:
  2627  002CC4  2EE8               	decfsz	wreg,f,c
  2628  002CC6  D7FE               	bra	u5157
  2629  002CC8  2F88               	decfsz	??_initServos& (0+255),f,b
  2630  002CCA  D7FC               	bra	u5157
  2631  002CCC  D000               	nop2	
  2632                           
  2633                           ;sort.c: 250: TMR3ON = 1;
  2634  002CCE  80B1               	bsf	4017,0,c	;volatile
  2635                           
  2636                           ;sort.c: 251: LATCbits.LATC0 = 0;
  2637  002CD0  908B               	bcf	3979,0,c	;volatile
  2638  002CD2  0012               	return		;funcret
  2639  002CD4                     __end_of_initServos:
  2640                           	opt stack 0
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           postdec1	equ	0xFE5
  2650                           fsr1l	equ	0xFE1
  2651                           indf2	equ	0xFDF
  2652                           postinc2	equ	0xFDE
  2653                           postdec2	equ	0xFDD
  2654                           fsr2h	equ	0xFDA
  2655                           fsr2l	equ	0xFD9
  2656                           status	equ	0xFD8
  2657                           
  2658 ;; *************** function _initGlobalVars *****************
  2659 ;; Defined at:
  2660 ;;		line 206 in file "sort.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;		None
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, status,2
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;Total ram usage:        0 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    7
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_Loading
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text6
  2689  002930                     __ptext6:
  2690                           	opt stack 0
  2691  002930                     _initGlobalVars:
  2692                           	opt stack 21
  2693                           
  2694                           ;sort.c: 208: first = 0;
  2695                           
  2696                           ;incstack = 0
  2697  002930  0E00               	movlw	0
  2698  002932  0100               	movlb	0	; () banked
  2699  002934  6FE7               	movwf	(_first+1)& (0+255),b
  2700  002936  0E00               	movlw	0
  2701  002938  6FE6               	movwf	_first& (0+255),b
  2702                           
  2703                           ;sort.c: 211: f_loadingNewCan = 0;
  2704  00293A  0E00               	movlw	0
  2705  00293C  0100               	movlb	0	; () banked
  2706  00293E  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2707  002940  0E00               	movlw	0
  2708  002942  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  2709                           
  2710                           ;sort.c: 212: f_lastCan = 0;
  2711  002944  0E00               	movlw	0
  2712  002946  0101               	movlb	1	; () banked
  2713  002948  6F27               	movwf	(_f_lastCan+1)& (0+255),b
  2714  00294A  0E00               	movlw	0
  2715  00294C  6F26               	movwf	_f_lastCan& (0+255),b
  2716                           
  2717                           ;sort.c: 213: f_ID_receive = 1;
  2718  00294E  0E00               	movlw	0
  2719  002950  0100               	movlb	0	; () banked
  2720  002952  6FE1               	movwf	(_f_ID_receive+1)& (0+255),b
  2721  002954  0E01               	movlw	1
  2722  002956  6FE0               	movwf	_f_ID_receive& (0+255),b
  2723                           
  2724                           ;sort.c: 214: f_can_coming_to_ID = 0;
  2725  002958  0E00               	movlw	0
  2726  00295A  0100               	movlb	0	; () banked
  2727  00295C  6FE3               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2728  00295E  0E00               	movlw	0
  2729  002960  6FE2               	movwf	_f_can_coming_to_ID& (0+255),b
  2730                           
  2731                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  2732  002962  0E00               	movlw	0
  2733  002964  6E75               	movwf	_f_can_coming_to_distribution+1,c
  2734  002966  0E00               	movlw	0
  2735  002968  6E74               	movwf	_f_can_coming_to_distribution,c
  2736                           
  2737                           ;sort.c: 216: f_can_distributed = 0;
  2738  00296A  0E00               	movlw	0
  2739  00296C  0101               	movlb	1	; () banked
  2740  00296E  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  2741  002970  0E00               	movlw	0
  2742  002972  6F24               	movwf	_f_can_distributed& (0+255),b
  2743                           
  2744                           ;sort.c: 219: count_total = 0;
  2745  002974  0E00               	movlw	0
  2746  002976  0100               	movlb	0	; () banked
  2747  002978  6FFF               	movwf	(_count_total+1)& (0+255),b
  2748  00297A  0E00               	movlw	0
  2749  00297C  6FFE               	movwf	_count_total& (0+255),b
  2750                           
  2751                           ;sort.c: 220: count_pop_no_tab = 0;
  2752  00297E  0E00               	movlw	0
  2753  002980  6E6B               	movwf	_count_pop_no_tab+1,c
  2754  002982  0E00               	movlw	0
  2755  002984  6E6A               	movwf	_count_pop_no_tab,c
  2756                           
  2757                           ;sort.c: 221: count_pop_w_tab = 0;
  2758  002986  0E00               	movlw	0
  2759  002988  6E6D               	movwf	_count_pop_w_tab+1,c
  2760  00298A  0E00               	movlw	0
  2761  00298C  6E6C               	movwf	_count_pop_w_tab,c
  2762                           
  2763                           ;sort.c: 222: count_can_w_lab = 0;
  2764  00298E  0E00               	movlw	0
  2765  002990  6E69               	movwf	_count_can_w_lab+1,c
  2766  002992  0E00               	movlw	0
  2767  002994  6E68               	movwf	_count_can_w_lab,c
  2768                           
  2769                           ;sort.c: 223: count_can_no_lab = 0;
  2770  002996  0E00               	movlw	0
  2771  002998  6E67               	movwf	_count_can_no_lab+1,c
  2772  00299A  0E00               	movlw	0
  2773  00299C  6E66               	movwf	_count_can_no_lab,c
  2774                           
  2775                           ; BSR set to: 0
  2776  00299E  0012               	return		;funcret
  2777  0029A0                     __end_of_initGlobalVars:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           prodh	equ	0xFF4
  2784                           prodl	equ	0xFF3
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           indf2	equ	0xFDF
  2790                           postinc2	equ	0xFDE
  2791                           postdec2	equ	0xFDD
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _ID *****************
  2797 ;; Defined at:
  2798 ;;		line 116 in file "sort.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, status,0, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;Total ram usage:        8 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    9
  2819 ;; This function calls:
  2820 ;;		_readMAG
  2821 ;; This function is called by:
  2822 ;;		_sort
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text7
  2827  001FC4                     __ptext7:
  2828                           	opt stack 0
  2829  001FC4                     _ID:
  2830                           	opt stack 20
  2831                           
  2832                           ;sort.c: 117: if(f_can_coming_to_ID){
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;incstack = 0
  2836  001FC4  0100               	movlb	0	; () banked
  2837  001FC6  51E2               	movf	_f_can_coming_to_ID& (0+255),w,b
  2838  001FC8  0100               	movlb	0	; () banked
  2839  001FCA  11E3               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2840  001FCC  B4D8               	btfsc	status,2,c
  2841  001FCE  0012               	return	
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  2845  001FD0  0E15               	movlw	21
  2846  001FD2  0100               	movlb	0	; () banked
  2847  001FD4  6F87               	movwf	(??_ID+1)& (0+255),b
  2848  001FD6  0E4B               	movlw	75
  2849  001FD8  0100               	movlb	0	; () banked
  2850  001FDA  6F86               	movwf	??_ID& (0+255),b
  2851  001FDC  0EBE               	movlw	190
  2852  001FDE                     u5167:
  2853  001FDE  2EE8               	decfsz	wreg,f,c
  2854  001FE0  D7FE               	bra	u5167
  2855  001FE2  2F86               	decfsz	??_ID& (0+255),f,b
  2856  001FE4  D7FC               	bra	u5167
  2857  001FE6  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2858  001FE8  D7FA               	bra	u5167
  2859  001FEA  F000               	nop	
  2860                           
  2861                           ;sort.c: 124: int sensor_outputs[3];
  2862                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  2863  001FEC  A480               	btfss	3968,2,c	;volatile
  2864  001FEE  D004               	goto	u3850
  2865  001FF0  0100               	movlb	0	; () banked
  2866  001FF2  6B86               	clrf	??_ID& (0+255),b
  2867  001FF4  2B86               	incf	??_ID& (0+255),f,b
  2868  001FF6  D002               	goto	u3858
  2869  001FF8                     u3850:
  2870  001FF8  0100               	movlb	0	; () banked
  2871  001FFA  6B86               	clrf	??_ID& (0+255),b
  2872  001FFC                     u3858:
  2873  001FFC  0100               	movlb	0	; () banked
  2874  001FFE  5186               	movf	??_ID& (0+255),w,b
  2875  002000  0100               	movlb	0	; () banked
  2876  002002  6F88               	movwf	ID@sensor_outputs& (0+255),b
  2877  002004  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;sort.c: 130: if(!sensor_outputs[0]){
  2881  002006  0100               	movlb	0	; () banked
  2882  002008  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2883  00200A  0100               	movlb	0	; () banked
  2884  00200C  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2885  00200E  A4D8               	btfss	status,2,c
  2886  002010  D028               	goto	l5234
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;sort.c: 131: readMAG();
  2890  002012  EC6A  F016         	call	_readMAG	;wreg free
  2891                           
  2892                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  2893  002016  C0DA  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  2894  00201A  C0DB  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  2895                           
  2896                           ;sort.c: 133: if(!sensor_outputs[1]){
  2897  00201E  0100               	movlb	0	; () banked
  2898  002020  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2899  002022  0100               	movlb	0	; () banked
  2900  002024  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2901  002026  A4D8               	btfss	status,2,c
  2902  002028  D01C               	goto	l5234
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;sort.c: 134: LATAbits.LATA3 = 1;
  2906  00202A  8689               	bsf	3977,3,c	;volatile
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  2910  00202C  0E05               	movlw	5
  2911  00202E  0100               	movlb	0	; () banked
  2912  002030  6F87               	movwf	(??_ID+1)& (0+255),b
  2913  002032  0E0F               	movlw	15
  2914  002034  0100               	movlb	0	; () banked
  2915  002036  6F86               	movwf	??_ID& (0+255),b
  2916  002038  0EF1               	movlw	241
  2917  00203A                     u5177:
  2918  00203A  2EE8               	decfsz	wreg,f,c
  2919  00203C  D7FE               	bra	u5177
  2920  00203E  2F86               	decfsz	??_ID& (0+255),f,b
  2921  002040  D7FC               	bra	u5177
  2922  002042  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2923  002044  D7FA               	bra	u5177
  2924                           
  2925                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  2926  002046  A480               	btfss	3968,2,c	;volatile
  2927  002048  D004               	goto	u3880
  2928  00204A  0100               	movlb	0	; () banked
  2929  00204C  6B86               	clrf	??_ID& (0+255),b
  2930  00204E  2B86               	incf	??_ID& (0+255),f,b
  2931  002050  D002               	goto	u3888
  2932  002052                     u3880:
  2933  002052  0100               	movlb	0	; () banked
  2934  002054  6B86               	clrf	??_ID& (0+255),b
  2935  002056                     u3888:
  2936  002056  0100               	movlb	0	; () banked
  2937  002058  5186               	movf	??_ID& (0+255),w,b
  2938  00205A  0100               	movlb	0	; () banked
  2939  00205C  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  2940  00205E  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;sort.c: 138: LATAbits.LATA3 = 0;
  2944  002060  9689               	bcf	3977,3,c	;volatile
  2945  002062                     l5234:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;sort.c: 139: }
  2949                           ;sort.c: 140: }
  2950                           ;sort.c: 143: if(!sensor_outputs[0]){
  2951  002062  0100               	movlb	0	; () banked
  2952  002064  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2953  002066  0100               	movlb	0	; () banked
  2954  002068  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2955  00206A  A4D8               	btfss	status,2,c
  2956  00206C  D01E               	goto	l5252
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;sort.c: 144: if(!sensor_outputs[1]){
  2960  00206E  0100               	movlb	0	; () banked
  2961  002070  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2962  002072  0100               	movlb	0	; () banked
  2963  002074  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2964  002076  A4D8               	btfss	status,2,c
  2965  002078  D012               	goto	l5248
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;sort.c: 145: if(!sensor_outputs[2]){
  2969  00207A  0100               	movlb	0	; () banked
  2970  00207C  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  2971  00207E  0100               	movlb	0	; () banked
  2972  002080  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  2973  002082  A4D8               	btfss	status,2,c
  2974  002084  D006               	goto	l5244
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;sort.c: 146: count_pop_no_tab++;
  2978  002086  4A6A               	infsnz	_count_pop_no_tab,f,c
  2979  002088  2A6B               	incf	_count_pop_no_tab+1,f,c
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;sort.c: 147: cur_can = 0;
  2983  00208A  0E00               	movlw	0
  2984  00208C  6E6F               	movwf	_cur_can+1,c
  2985  00208E  0E00               	movlw	0
  2986  002090  D011               	goto	L3
  2987  002092                     l5244:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;sort.c: 149: else{
  2991                           ;sort.c: 150: count_pop_w_tab++;
  2992  002092  4A6C               	infsnz	_count_pop_w_tab,f,c
  2993  002094  2A6D               	incf	_count_pop_w_tab+1,f,c
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;sort.c: 151: cur_can = 1;
  2997  002096  0E00               	movlw	0
  2998  002098  6E6F               	movwf	_cur_can+1,c
  2999  00209A  0E01               	movlw	1
  3000  00209C  D00B               	goto	L3
  3001  00209E                     l5248:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;sort.c: 154: else{
  3005                           ;sort.c: 155: count_can_w_lab++;
  3006  00209E  4A68               	infsnz	_count_can_w_lab,f,c
  3007  0020A0  2A69               	incf	_count_can_w_lab+1,f,c
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;sort.c: 156: cur_can = 2;
  3011  0020A2  0E00               	movlw	0
  3012  0020A4  6E6F               	movwf	_cur_can+1,c
  3013  0020A6  0E02               	movlw	2
  3014  0020A8  D005               	goto	L3
  3015  0020AA                     l5252:
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;sort.c: 159: else{
  3019                           ;sort.c: 160: count_can_no_lab++;
  3020  0020AA  4A66               	infsnz	_count_can_no_lab,f,c
  3021  0020AC  2A67               	incf	_count_can_no_lab+1,f,c
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;sort.c: 161: cur_can = 3;
  3025  0020AE  0E00               	movlw	0
  3026  0020B0  6E6F               	movwf	_cur_can+1,c
  3027  0020B2  0E03               	movlw	3
  3028  0020B4                     L3:
  3029  0020B4  6E6E               	movwf	_cur_can,c
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;sort.c: 162: }
  3033                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3034                           
  3035                           ; BSR set to: 0
  3036  0020B6  808B               	bsf	3979,0,c	;volatile
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3040  0020B8  0E00               	movlw	0
  3041  0020BA  6E75               	movwf	_f_can_coming_to_distribution+1,c
  3042  0020BC  0E01               	movlw	1
  3043  0020BE  6E74               	movwf	_f_can_coming_to_distribution,c
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3047  0020C0  0E15               	movlw	21
  3048  0020C2  0100               	movlb	0	; () banked
  3049  0020C4  6F87               	movwf	(??_ID+1)& (0+255),b
  3050  0020C6  0E4B               	movlw	75
  3051  0020C8  0100               	movlb	0	; () banked
  3052  0020CA  6F86               	movwf	??_ID& (0+255),b
  3053  0020CC  0EBE               	movlw	190
  3054  0020CE                     u5187:
  3055  0020CE  2EE8               	decfsz	wreg,f,c
  3056  0020D0  D7FE               	bra	u5187
  3057  0020D2  2F86               	decfsz	??_ID& (0+255),f,b
  3058  0020D4  D7FC               	bra	u5187
  3059  0020D6  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3060  0020D8  D7FA               	bra	u5187
  3061  0020DA  F000               	nop	
  3062                           
  3063                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3064  0020DC  908B               	bcf	3979,0,c	;volatile
  3065                           
  3066                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3067  0020DE  0E00               	movlw	0
  3068  0020E0  0100               	movlb	0	; () banked
  3069  0020E2  6FE3               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3070  0020E4  0E00               	movlw	0
  3071  0020E6  6FE2               	movwf	_f_can_coming_to_ID& (0+255),b
  3072  0020E8  0012               	return	
  3073  0020EA                     __end_of_ID:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           postdec1	equ	0xFE5
  3084                           fsr1l	equ	0xFE1
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _readMAG *****************
  3093 ;; Defined at:
  3094 ;;		line 29 in file "ADCFunctionality.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  res             2    4[BANK0 ] int 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;Total ram usage:        4 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    8
  3115 ;; This function calls:
  3116 ;;		_readADC
  3117 ;; This function is called by:
  3118 ;;		_ID
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text8
  3123  002CD4                     __ptext8:
  3124                           	opt stack 0
  3125  002CD4                     _readMAG:
  3126                           	opt stack 20
  3127                           
  3128                           ;ADCFunctionality.c: 30: readADC(1);
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;incstack = 0
  3132  002CD4  0E01               	movlw	1
  3133  002CD6  EC60  F018         	call	_readADC
  3134                           
  3135                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  3136  002CDA  50C3               	movf	4035,w,c	;volatile
  3137  002CDC  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3138  002CE0  0100               	movlb	0	; () banked
  3139  002CE2  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3140  002CE4  C082  F083         	movff	??_readMAG,??_readMAG+1
  3141  002CE8  0100               	movlb	0	; () banked
  3142  002CEA  6B82               	clrf	??_readMAG& (0+255),b
  3143  002CEC  0100               	movlb	0	; () banked
  3144  002CEE  1182               	iorwf	??_readMAG& (0+255),w,b
  3145  002CF0  0100               	movlb	0	; () banked
  3146  002CF2  6F84               	movwf	readMAG@res& (0+255),b
  3147  002CF4  0100               	movlb	0	; () banked
  3148  002CF6  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3149  002CF8  0100               	movlb	0	; () banked
  3150  002CFA  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;ADCFunctionality.c: 32: MAG_signal = (res < 255) ? 1 : 0;
  3154  002CFC  0100               	movlb	0	; () banked
  3155  002CFE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  3156  002D00  D007               	goto	u3481
  3157  002D02  0100               	movlb	0	; () banked
  3158  002D04  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3159  002D06  E106               	bnz	u3480
  3160  002D08  0100               	movlb	0	; () banked
  3161  002D0A  2984               	incf	readMAG@res& (0+255),w,b
  3162  002D0C  B0D8               	btfsc	status,0,c
  3163  002D0E  D002               	goto	u3480
  3164  002D10                     u3481:
  3165  002D10  0E01               	movlw	1
  3166  002D12  D001               	goto	u3490
  3167  002D14                     u3480:
  3168  002D14  0E00               	movlw	0
  3169  002D16                     u3490:
  3170  002D16  0100               	movlb	0	; () banked
  3171  002D18  6FDA               	movwf	_MAG_signal& (0+255),b
  3172  002D1A  6BDB               	clrf	(_MAG_signal+1)& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175  002D1C  0012               	return		;funcret
  3176  002D1E                     __end_of_readMAG:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           fsr2h	equ	0xFDA
  3192                           fsr2l	equ	0xFD9
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _readADC *****************
  3196 ;; Defined at:
  3197 ;;		line 15 in file "ADCFunctionality.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  channel         1    wreg     unsigned char 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  channel         1    1[BANK0 ] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;Total ram usage:        2 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    7
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_readMAG
  3222 ;;		_readIR
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text9
  3227  0030C0                     __ptext9:
  3228                           	opt stack 0
  3229  0030C0                     _readADC:
  3230                           	opt stack 20
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;incstack = 0
  3234                           ;readADC@channel stored from wreg
  3235  0030C0  0100               	movlb	0	; () banked
  3236  0030C2  6F81               	movwf	readADC@channel& (0+255),b
  3237                           
  3238                           ;ADCFunctionality.c: 17: ADCON0 = ((channel <<2));
  3239  0030C4  0100               	movlb	0	; () banked
  3240  0030C6  4581               	rlncf	readADC@channel& (0+255),w,b
  3241  0030C8  46E8               	rlncf	wreg,f,c
  3242  0030CA  0BFC               	andlw	252
  3243  0030CC  6EC2               	movwf	4034,c	;volatile
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;ADCFunctionality.c: 18: ADON = 1;
  3247  0030CE  80C2               	bsf	4034,0,c	;volatile
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  3251  0030D0  82C2               	bsf	4034,1,c	;volatile
  3252                           
  3253                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3254  0030D2  D009               	goto	l4248
  3255  0030D4                     l4246:
  3256  0030D4  0E34               	movlw	52
  3257  0030D6  0100               	movlb	0	; () banked
  3258  0030D8  6F80               	movwf	??_readADC& (0+255),b
  3259  0030DA  0EF1               	movlw	241
  3260  0030DC                     u5197:
  3261  0030DC  2EE8               	decfsz	wreg,f,c
  3262  0030DE  D7FE               	bra	u5197
  3263  0030E0  2F80               	decfsz	??_readADC& (0+255),f,b
  3264  0030E2  D7FC               	bra	u5197
  3265  0030E4  D000               	nop2	
  3266  0030E6                     l4248:
  3267  0030E6  A2C2               	btfss	4034,1,c	;volatile
  3268  0030E8  0012               	return	
  3269  0030EA  D7F4               	goto	l4246
  3270  0030EC                     __end_of_readADC:
  3271                           	opt stack 0
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           fsr2h	equ	0xFDA
  3286                           fsr2l	equ	0xFD9
  3287                           status	equ	0xFD8
  3288                           
  3289 ;; *************** function _Distribution *****************
  3290 ;; Defined at:
  3291 ;;		line 172 in file "sort.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;Total ram usage:        2 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    8
  3312 ;; This function calls:
  3313 ;;		_updateServoPosition
  3314 ;; This function is called by:
  3315 ;;		_sort
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text10
  3320  001E90                     __ptext10:
  3321                           	opt stack 0
  3322  001E90                     _Distribution:
  3323                           	opt stack 21
  3324                           
  3325                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3326                           
  3327                           ;incstack = 0
  3328  001E90  5074               	movf	_f_can_coming_to_distribution,w,c
  3329  001E92  1075               	iorwf	_f_can_coming_to_distribution+1,w,c
  3330  001E94  B4D8               	btfsc	status,2,c
  3331  001E96  0012               	return	
  3332  001E98  D034               	goto	l5280
  3333  001E9A                     l5270:
  3334                           
  3335                           ;sort.c: 178: updateServoPosition(1000, 1);
  3336  001E9A  0E03               	movlw	3
  3337  001E9C  0100               	movlb	0	; () banked
  3338  001E9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3339  001EA0  0EE8               	movlw	232
  3340  001EA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3341  001EA4  0E00               	movlw	0
  3342  001EA6  0100               	movlb	0	; () banked
  3343  001EA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3344  001EAA  0E01               	movlw	1
  3345  001EAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3346  001EAE  EC5D  F014         	call	_updateServoPosition	;wreg free
  3347                           
  3348                           ;sort.c: 179: break;
  3349  001EB2  D03E               	goto	l5282
  3350  001EB4                     l5272:
  3351                           
  3352                           ;sort.c: 181: updateServoPosition(1333, 1);
  3353  001EB4  0E05               	movlw	5
  3354  001EB6  0100               	movlb	0	; () banked
  3355  001EB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3356  001EBA  0E35               	movlw	53
  3357  001EBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3358  001EBE  0E00               	movlw	0
  3359  001EC0  0100               	movlb	0	; () banked
  3360  001EC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3361  001EC4  0E01               	movlw	1
  3362  001EC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3363  001EC8  EC5D  F014         	call	_updateServoPosition	;wreg free
  3364                           
  3365                           ;sort.c: 182: break;
  3366  001ECC  D031               	goto	l5282
  3367  001ECE                     l5274:
  3368                           
  3369                           ;sort.c: 184: updateServoPosition(1666, 1);
  3370  001ECE  0E06               	movlw	6
  3371  001ED0  0100               	movlb	0	; () banked
  3372  001ED2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3373  001ED4  0E82               	movlw	130
  3374  001ED6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3375  001ED8  0E00               	movlw	0
  3376  001EDA  0100               	movlb	0	; () banked
  3377  001EDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3378  001EDE  0E01               	movlw	1
  3379  001EE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3380  001EE2  EC5D  F014         	call	_updateServoPosition	;wreg free
  3381                           
  3382                           ;sort.c: 185: break;
  3383  001EE6  D024               	goto	l5282
  3384  001EE8                     l5276:
  3385                           
  3386                           ;sort.c: 187: updateServoPosition(2000, 1);
  3387  001EE8  0E07               	movlw	7
  3388  001EEA  0100               	movlb	0	; () banked
  3389  001EEC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3390  001EEE  0ED0               	movlw	208
  3391  001EF0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3392  001EF2  0E00               	movlw	0
  3393  001EF4  0100               	movlb	0	; () banked
  3394  001EF6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3395  001EF8  0E01               	movlw	1
  3396  001EFA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3397  001EFC  EC5D  F014         	call	_updateServoPosition	;wreg free
  3398                           
  3399                           ;sort.c: 191: }
  3400                           
  3401                           ;sort.c: 190: break;
  3402                           
  3403                           ;sort.c: 189: default:
  3404                           
  3405                           ;sort.c: 188: break;
  3406  001F00  D017               	goto	l5282
  3407  001F02                     l5280:
  3408  001F02  C06E  F088         	movff	_cur_can,??_Distribution
  3409  001F06  C06F  F089         	movff	_cur_can+1,??_Distribution+1
  3410                           
  3411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3412                           ; Switch size 1, requested type "space"
  3413                           ; Number of cases is 1, Range of values is 0 to 0
  3414                           ; switch strategies available:
  3415                           ; Name         Instructions Cycles
  3416                           ; simple_byte            4     3 (average)
  3417                           ;	Chosen strategy is simple_byte
  3418  001F0A  0100               	movlb	0	; () banked
  3419  001F0C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3420  001F0E  0A00               	xorlw	0	; case 0
  3421  001F10  A4D8               	btfss	status,2,c
  3422  001F12  D00E               	goto	l5282
  3423                           
  3424                           ; BSR set to: 0
  3425                           ; Switch size 1, requested type "space"
  3426                           ; Number of cases is 4, Range of values is 0 to 3
  3427                           ; switch strategies available:
  3428                           ; Name         Instructions Cycles
  3429                           ; simple_byte           13     7 (average)
  3430                           ;	Chosen strategy is simple_byte
  3431  001F14  0100               	movlb	0	; () banked
  3432  001F16  5188               	movf	??_Distribution& (0+255),w,b
  3433  001F18  0A00               	xorlw	0	; case 0
  3434  001F1A  B4D8               	btfsc	status,2,c
  3435  001F1C  D7BE               	goto	l5270
  3436  001F1E  0A01               	xorlw	1	; case 1
  3437  001F20  B4D8               	btfsc	status,2,c
  3438  001F22  D7C8               	goto	l5272
  3439  001F24  0A03               	xorlw	3	; case 2
  3440  001F26  B4D8               	btfsc	status,2,c
  3441  001F28  D7D2               	goto	l5274
  3442  001F2A  0A01               	xorlw	1	; case 3
  3443  001F2C  B4D8               	btfsc	status,2,c
  3444  001F2E  D7DC               	goto	l5276
  3445  001F30                     l5282:
  3446                           
  3447                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  3448  001F30  0E15               	movlw	21
  3449  001F32  0100               	movlb	0	; () banked
  3450  001F34  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3451  001F36  0E4B               	movlw	75
  3452  001F38  0100               	movlb	0	; () banked
  3453  001F3A  6F88               	movwf	??_Distribution& (0+255),b
  3454  001F3C  0EBE               	movlw	190
  3455  001F3E                     u5207:
  3456  001F3E  2EE8               	decfsz	wreg,f,c
  3457  001F40  D7FE               	bra	u5207
  3458  001F42  2F88               	decfsz	??_Distribution& (0+255),f,b
  3459  001F44  D7FC               	bra	u5207
  3460  001F46  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3461  001F48  D7FA               	bra	u5207
  3462  001F4A  F000               	nop	
  3463                           
  3464                           ;sort.c: 195: updateServoPosition(1500, 3);
  3465  001F4C  0E05               	movlw	5
  3466  001F4E  0100               	movlb	0	; () banked
  3467  001F50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3468  001F52  0EDC               	movlw	220
  3469  001F54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3470  001F56  0E00               	movlw	0
  3471  001F58  0100               	movlb	0	; () banked
  3472  001F5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3473  001F5C  0E03               	movlw	3
  3474  001F5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3475  001F60  EC5D  F014         	call	_updateServoPosition	;wreg free
  3476                           
  3477                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  3478  001F64  0E15               	movlw	21
  3479  001F66  0100               	movlb	0	; () banked
  3480  001F68  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3481  001F6A  0E4B               	movlw	75
  3482  001F6C  0100               	movlb	0	; () banked
  3483  001F6E  6F88               	movwf	??_Distribution& (0+255),b
  3484  001F70  0EBE               	movlw	190
  3485  001F72                     u5217:
  3486  001F72  2EE8               	decfsz	wreg,f,c
  3487  001F74  D7FE               	bra	u5217
  3488  001F76  2F88               	decfsz	??_Distribution& (0+255),f,b
  3489  001F78  D7FC               	bra	u5217
  3490  001F7A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3491  001F7C  D7FA               	bra	u5217
  3492  001F7E  F000               	nop	
  3493                           
  3494                           ;sort.c: 199: updateServoPosition(1500, 1);
  3495  001F80  0E05               	movlw	5
  3496  001F82  0100               	movlb	0	; () banked
  3497  001F84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3498  001F86  0EDC               	movlw	220
  3499  001F88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3500  001F8A  0E00               	movlw	0
  3501  001F8C  0100               	movlb	0	; () banked
  3502  001F8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3503  001F90  0E01               	movlw	1
  3504  001F92  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3505  001F94  EC5D  F014         	call	_updateServoPosition	;wreg free
  3506                           
  3507                           ;sort.c: 200: updateServoPosition(1000, 3);
  3508  001F98  0E03               	movlw	3
  3509  001F9A  0100               	movlb	0	; () banked
  3510  001F9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3511  001F9E  0EE8               	movlw	232
  3512  001FA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3513  001FA2  0E00               	movlw	0
  3514  001FA4  0100               	movlb	0	; () banked
  3515  001FA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3516  001FA8  0E03               	movlw	3
  3517  001FAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3518  001FAC  EC5D  F014         	call	_updateServoPosition	;wreg free
  3519                           
  3520                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  3521  001FB0  0E00               	movlw	0
  3522  001FB2  6E75               	movwf	_f_can_coming_to_distribution+1,c
  3523  001FB4  0E00               	movlw	0
  3524  001FB6  6E74               	movwf	_f_can_coming_to_distribution,c
  3525                           
  3526                           ;sort.c: 202: f_can_distributed = 1;
  3527  001FB8  0E00               	movlw	0
  3528  001FBA  0101               	movlb	1	; () banked
  3529  001FBC  6F25               	movwf	(_f_can_distributed+1)& (0+255),b
  3530  001FBE  0E01               	movlw	1
  3531  001FC0  6F24               	movwf	_f_can_distributed& (0+255),b
  3532  001FC2  0012               	return	
  3533  001FC4                     __end_of_Distribution:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _updateServoPosition *****************
  3553 ;; Defined at:
  3554 ;;		line 293 in file "sort.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  time_us         2    0[BANK0 ] int 
  3557 ;;  timer           2    2[BANK0 ] int 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  my_time         2    6[BANK0 ] unsigned int 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:        8 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    7
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_Distribution
  3580 ;;		_initServos
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text11
  3585  0028BA                     __ptext11:
  3586                           	opt stack 0
  3587  0028BA                     _updateServoPosition:
  3588                           	opt stack 20
  3589                           
  3590                           ;sort.c: 294: unsigned int my_time = 65535 - time_us;
  3591                           
  3592                           ;incstack = 0
  3593  0028BA  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  3594  0028BE  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  3595  0028C2  0100               	movlb	0	; () banked
  3596  0028C4  1F84               	comf	??_updateServoPosition& (0+255),f,b
  3597  0028C6  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  3598  0028C8  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  3599  0028CA  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  3600  0028CC  0EFF               	movlw	255
  3601  0028CE  0100               	movlb	0	; () banked
  3602  0028D0  2584               	addwf	??_updateServoPosition& (0+255),w,b
  3603  0028D2  0100               	movlb	0	; () banked
  3604  0028D4  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  3605  0028D6  0EFF               	movlw	255
  3606  0028D8  0100               	movlb	0	; () banked
  3607  0028DA  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  3608  0028DC  0100               	movlb	0	; () banked
  3609  0028DE  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  3610                           
  3611                           ;sort.c: 295: switch(timer){
  3612  0028E0  D015               	goto	l4428
  3613  0028E2                     l4426:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 297: servoTimes[0] = my_time >> 8;
  3617  0028E2  0100               	movlb	0	; () banked
  3618  0028E4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3619  0028E6  0101               	movlb	1	; () banked
  3620  0028E8  6F1C               	movwf	_servoTimes& (0+255),b
  3621  0028EA  6B1D               	clrf	(_servoTimes+1)& (0+255),b
  3622                           
  3623                           ;sort.c: 298: servoTimes[1] = my_time & 0xFF;
  3624  0028EC  0100               	movlb	0	; () banked
  3625  0028EE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3626  0028F0  0101               	movlb	1	; () banked
  3627  0028F2  6F1E               	movwf	(_servoTimes+2)& (0+255),b
  3628  0028F4  6B1F               	clrf	(_servoTimes+3)& (0+255),b
  3629  0028F6                     l776:
  3630                           
  3631                           ;sort.c: 300: servoTimes[2] = my_time >> 8;
  3632  0028F6  0100               	movlb	0	; () banked
  3633  0028F8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3634  0028FA  0101               	movlb	1	; () banked
  3635  0028FC  6F20               	movwf	(_servoTimes+4)& (0+255),b
  3636  0028FE  6B21               	clrf	(_servoTimes+5)& (0+255),b
  3637                           
  3638                           ;sort.c: 301: servoTimes[3] = my_time & 0xFF;
  3639  002900  0100               	movlb	0	; () banked
  3640  002902  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3641  002904  0101               	movlb	1	; () banked
  3642  002906  6F22               	movwf	(_servoTimes+6)& (0+255),b
  3643  002908  6B23               	clrf	(_servoTimes+7)& (0+255),b
  3644                           
  3645                           ;sort.c: 302: }
  3646  00290A  0012               	return	
  3647  00290C                     l4428:
  3648  00290C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  3649  002910  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  3650                           
  3651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3652                           ; Switch size 1, requested type "space"
  3653                           ; Number of cases is 1, Range of values is 0 to 0
  3654                           ; switch strategies available:
  3655                           ; Name         Instructions Cycles
  3656                           ; simple_byte            4     3 (average)
  3657                           ;	Chosen strategy is simple_byte
  3658  002914  0100               	movlb	0	; () banked
  3659  002916  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  3660  002918  0A00               	xorlw	0	; case 0
  3661  00291A  A4D8               	btfss	status,2,c
  3662  00291C  0012               	return	
  3663                           
  3664                           ; BSR set to: 0
  3665                           ; Switch size 1, requested type "space"
  3666                           ; Number of cases is 2, Range of values is 1 to 3
  3667                           ; switch strategies available:
  3668                           ; Name         Instructions Cycles
  3669                           ; simple_byte            7     4 (average)
  3670                           ;	Chosen strategy is simple_byte
  3671  00291E  0100               	movlb	0	; () banked
  3672  002920  5184               	movf	??_updateServoPosition& (0+255),w,b
  3673  002922  0A01               	xorlw	1	; case 1
  3674  002924  B4D8               	btfsc	status,2,c
  3675  002926  D7DD               	goto	l4426
  3676  002928  0A02               	xorlw	2	; case 3
  3677  00292A  A4D8               	btfss	status,2,c
  3678  00292C  0012               	return	
  3679  00292E  D7E3               	goto	l776
  3680  002930                     __end_of_updateServoPosition:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1l	equ	0xFE1
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _machineConfig *****************
  3700 ;; Defined at:
  3701 ;;		line 15 in file "MachineConfig.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    7
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_main
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text12
  3730  002B3A                     __ptext12:
  3731                           	opt stack 0
  3732  002B3A                     _machineConfig:
  3733                           	opt stack 23
  3734                           
  3735                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  3736                           
  3737                           ;incstack = 0
  3738  002B3A  0EF0               	movlw	240
  3739  002B3C  6ED3               	movwf	4051,c	;volatile
  3740                           
  3741                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  3742  002B3E  8C9B               	bsf	3995,6,c	;volatile
  3743                           
  3744                           ;MachineConfig.c: 21: ADCON0 = 0x00;
  3745  002B40  0E00               	movlw	0
  3746  002B42  6EC2               	movwf	4034,c	;volatile
  3747                           
  3748                           ;MachineConfig.c: 22: ADCON1 = 0x0D;
  3749  002B44  0E0D               	movlw	13
  3750  002B46  6EC1               	movwf	4033,c	;volatile
  3751                           
  3752                           ;MachineConfig.c: 25: VCFG1 = 0;
  3753  002B48  9AC1               	bcf	4033,5,c	;volatile
  3754                           
  3755                           ;MachineConfig.c: 26: VCFG0 = 0;
  3756  002B4A  98C1               	bcf	4033,4,c	;volatile
  3757                           
  3758                           ;MachineConfig.c: 27: CVRCON = 0x00;
  3759  002B4C  0E00               	movlw	0
  3760  002B4E  6EB5               	movwf	4021,c	;volatile
  3761                           
  3762                           ;MachineConfig.c: 28: CMCONbits.CIS = 0;
  3763  002B50  96B4               	bcf	4020,3,c	;volatile
  3764                           
  3765                           ;MachineConfig.c: 29: ADFM = 1;
  3766  002B52  8EC0               	bsf	4032,7,c	;volatile
  3767                           
  3768                           ;MachineConfig.c: 30: nRBPU = 0;
  3769  002B54  9EF1               	bcf	intcon2,7,c	;volatile
  3770                           
  3771                           ;MachineConfig.c: 34: TRISA = 0b01000111;
  3772  002B56  0E47               	movlw	71
  3773  002B58  6E92               	movwf	3986,c	;volatile
  3774                           
  3775                           ;MachineConfig.c: 36: TRISB = 0b11110010;
  3776  002B5A  0EF2               	movlw	242
  3777  002B5C  6E93               	movwf	3987,c	;volatile
  3778                           
  3779                           ;MachineConfig.c: 39: TRISC = 0x00;
  3780  002B5E  0E00               	movlw	0
  3781  002B60  6E94               	movwf	3988,c	;volatile
  3782                           
  3783                           ;MachineConfig.c: 43: TRISD = 0x00;
  3784  002B62  0E00               	movlw	0
  3785  002B64  6E95               	movwf	3989,c	;volatile
  3786                           
  3787                           ;MachineConfig.c: 46: TRISE = 0x00;
  3788  002B66  0E00               	movlw	0
  3789  002B68  6E96               	movwf	3990,c	;volatile
  3790                           
  3791                           ;MachineConfig.c: 49: LATA = 0x00;
  3792  002B6A  0E00               	movlw	0
  3793  002B6C  6E89               	movwf	3977,c	;volatile
  3794                           
  3795                           ;MachineConfig.c: 50: LATB = 0x00;
  3796  002B6E  0E00               	movlw	0
  3797  002B70  6E8A               	movwf	3978,c	;volatile
  3798                           
  3799                           ;MachineConfig.c: 51: LATC = 0x00;
  3800  002B72  0E00               	movlw	0
  3801  002B74  6E8B               	movwf	3979,c	;volatile
  3802                           
  3803                           ;MachineConfig.c: 52: LATD = 0x00;
  3804  002B76  0E00               	movlw	0
  3805  002B78  6E8C               	movwf	3980,c	;volatile
  3806                           
  3807                           ;MachineConfig.c: 53: LATE = 0x00;
  3808  002B7A  0E00               	movlw	0
  3809  002B7C  6E8D               	movwf	3981,c	;volatile
  3810                           
  3811                           ;MachineConfig.c: 56: INT1IE = 1;
  3812  002B7E  86F0               	bsf	intcon3,3,c	;volatile
  3813                           
  3814                           ;MachineConfig.c: 58: TMR0IE = 1;
  3815  002B80  8AF2               	bsf	intcon,5,c	;volatile
  3816                           
  3817                           ;MachineConfig.c: 59: TMR1IE = 1;
  3818  002B82  809D               	bsf	3997,0,c	;volatile
  3819                           
  3820                           ;MachineConfig.c: 60: T1CON = 0b10110000;
  3821  002B84  0EB0               	movlw	176
  3822  002B86  6ECD               	movwf	4045,c	;volatile
  3823                           
  3824                           ;MachineConfig.c: 61: TMR2IE = 1;
  3825  002B88  829D               	bsf	3997,1,c	;volatile
  3826                           
  3827                           ;MachineConfig.c: 62: TMR3IE = 1;
  3828  002B8A  82A0               	bsf	4000,1,c	;volatile
  3829                           
  3830                           ;MachineConfig.c: 63: PEIE = 1;
  3831  002B8C  8CF2               	bsf	intcon,6,c	;volatile
  3832                           
  3833                           ;MachineConfig.c: 65: ADIE = 1;
  3834  002B8E  8C9D               	bsf	3997,6,c	;volatile
  3835                           
  3836                           ;MachineConfig.c: 66: (INTCONbits.GIE = 0);
  3837  002B90  9EF2               	bcf	intcon,7,c	;volatile
  3838  002B92  0012               	return		;funcret
  3839  002B94                     __end_of_machineConfig:
  3840                           	opt stack 0
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           intcon2	equ	0xFF1
  3849                           intcon3	equ	0xFF0
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _logRun *****************
  3862 ;; Defined at:
  3863 ;;		line 84 in file "EEPROM.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  byte_i          1   53[BANK0 ] unsigned char 
  3868 ;;  i               2   55[BANK0 ] int 
  3869 ;;  num             1   49[BANK0 ] unsigned char 
  3870 ;;  addr            2   57[BANK0 ] unsigned short 
  3871 ;;  byte11          1   54[BANK0 ] unsigned char 
  3872 ;;  byte3           1   52[BANK0 ] unsigned char 
  3873 ;;  byte2           1   51[BANK0 ] unsigned char 
  3874 ;;  byte1           1   50[BANK0 ] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;Total ram usage:       10 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:   11
  3891 ;; This function calls:
  3892 ;;		_EEPROM_read
  3893 ;;		_EEPROM_write
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text13
  3900  001D54                     __ptext13:
  3901                           	opt stack 0
  3902  001D54                     _logRun:
  3903                           	opt stack 19
  3904                           
  3905                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  3906                           
  3907                           ;incstack = 0
  3908  001D54  0E00               	movlw	0
  3909  001D56  0100               	movlb	0	; () banked
  3910  001D58  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3911  001D5A  0E00               	movlw	0
  3912  001D5C  6F80               	movwf	EEPROM_read@address& (0+255),b
  3913  001D5E  EC30  F019         	call	_EEPROM_read	;wreg free
  3914  001D62  0100               	movlb	0	; () banked
  3915  001D64  6FFD               	movwf	_sel& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  3919  001D66  0100               	movlb	0	; () banked
  3920  001D68  51FD               	movf	_sel& (0+255),w,b
  3921  001D6A  0D0B               	mullw	11
  3922  001D6C  0E01               	movlw	1
  3923  001D6E  24F3               	addwf	prodl,w,c
  3924  001D70  0100               	movlb	0	; () banked
  3925  001D72  6FB9               	movwf	logRun@addr& (0+255),b
  3926  001D74  0E00               	movlw	0
  3927  001D76  20F4               	addwfc	prodh,w,c
  3928  001D78  0100               	movlb	0	; () banked
  3929  001D7A  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;EEPROM.c: 101: if (sel < 3){
  3933  001D7C  0E03               	movlw	3
  3934  001D7E  0100               	movlb	0	; () banked
  3935  001D80  61FD               	cpfslt	_sel& (0+255),b
  3936  001D82  D00E               	goto	l6004
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;EEPROM.c: 102: unsigned char num = sel+1;
  3940  001D84  0100               	movlb	0	; () banked
  3941  001D86  29FD               	incf	_sel& (0+255),w,b
  3942  001D88  0100               	movlb	0	; () banked
  3943  001D8A  6FB1               	movwf	logRun@num& (0+255),b
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;EEPROM.c: 103: EEPROM_write(0, num);
  3947  001D8C  0E00               	movlw	0
  3948  001D8E  0100               	movlb	0	; () banked
  3949  001D90  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3950  001D92  0E00               	movlw	0
  3951  001D94  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3952  001D96  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  3953  001D9A  EC77  F011         	call	_EEPROM_write	;wreg free
  3954                           
  3955                           ;EEPROM.c: 104: }
  3956  001D9E  D00A               	goto	l6006
  3957  001DA0                     l6004:
  3958                           
  3959                           ;EEPROM.c: 105: else{
  3960                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  3961  001DA0  0E00               	movlw	0
  3962  001DA2  0100               	movlb	0	; () banked
  3963  001DA4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  3964  001DA6  0E00               	movlw	0
  3965  001DA8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  3966  001DAA  0E00               	movlw	0
  3967  001DAC  0100               	movlb	0	; () banked
  3968  001DAE  6FAD               	movwf	EEPROM_write@data& (0+255),b
  3969  001DB0  EC77  F011         	call	_EEPROM_write	;wreg free
  3970  001DB4                     l6006:
  3971                           
  3972                           ;EEPROM.c: 107: }
  3973                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  3974  001DB4  0100               	movlb	0	; () banked
  3975  001DB6  51FE               	movf	_count_total& (0+255),w,b
  3976  001DB8  0980               	iorlw	128
  3977  001DBA  0100               	movlb	0	; () banked
  3978  001DBC  6FB2               	movwf	logRun@byte1& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  3982  001DBE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  3983  001DC2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  3984  001DC6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  3985  001DCA  EC77  F011         	call	_EEPROM_write	;wreg free
  3986                           
  3987                           ;EEPROM.c: 112: addr++;
  3988  001DCE  0100               	movlb	0	; () banked
  3989  001DD0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  3990  001DD2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  3994  001DD4  386A               	swapf	_count_pop_no_tab,w,c
  3995  001DD6  0BF0               	andlw	240
  3996  001DD8  106C               	iorwf	_count_pop_w_tab,w,c
  3997  001DDA  0100               	movlb	0	; () banked
  3998  001DDC  6FB3               	movwf	logRun@byte2& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4002  001DDE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4003  001DE2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4004  001DE6  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4005  001DEA  EC77  F011         	call	_EEPROM_write	;wreg free
  4006                           
  4007                           ;EEPROM.c: 117: addr++;
  4008  001DEE  0100               	movlb	0	; () banked
  4009  001DF0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4010  001DF2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4014  001DF4  3868               	swapf	_count_can_w_lab,w,c
  4015  001DF6  0BF0               	andlw	240
  4016  001DF8  1066               	iorwf	_count_can_no_lab,w,c
  4017  001DFA  0100               	movlb	0	; () banked
  4018  001DFC  6FB4               	movwf	logRun@byte3& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4022  001DFE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4023  001E02  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4024  001E06  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4025  001E0A  EC77  F011         	call	_EEPROM_write	;wreg free
  4026                           
  4027                           ;EEPROM.c: 120: addr++;
  4028  001E0E  0100               	movlb	0	; () banked
  4029  001E10  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4030  001E12  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4034  001E14  0E00               	movlw	0
  4035  001E16  0100               	movlb	0	; () banked
  4036  001E18  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4037  001E1A  0E00               	movlw	0
  4038  001E1C  6FB7               	movwf	logRun@i& (0+255),b
  4039                           
  4040                           ; BSR set to: 0
  4041  001E1E  0100               	movlb	0	; () banked
  4042  001E20  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4043  001E22  D008               	goto	l6030
  4044  001E24  0100               	movlb	0	; () banked
  4045  001E26  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4046  001E28  E128               	bnz	l924
  4047  001E2A  0E07               	movlw	7
  4048  001E2C  0100               	movlb	0	; () banked
  4049  001E2E  5DB7               	subwf	logRun@i& (0+255),w,b
  4050  001E30  B0D8               	btfsc	status,0,c
  4051  001E32  D023               	goto	l924
  4052  001E34                     l6030:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4056  001E34  90D8               	bcf	status,0,c
  4057  001E36  0100               	movlb	0	; () banked
  4058  001E38  35B7               	rlcf	logRun@i& (0+255),w,b
  4059  001E3A  6ED9               	movwf	fsr2l,c
  4060  001E3C  0100               	movlb	0	; () banked
  4061  001E3E  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4062  001E40  6EDA               	movwf	fsr2h,c
  4063  001E42  0E0E               	movlw	low _startTime
  4064  001E44  26D9               	addwf	fsr2l,f,c
  4065  001E46  0E01               	movlw	high _startTime
  4066  001E48  22DA               	addwfc	fsr2h,f,c
  4067  001E4A  50DF               	movf	indf2,w,c
  4068  001E4C  0100               	movlb	0	; () banked
  4069  001E4E  6FB5               	movwf	logRun@byte_i& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4073  001E50  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4074  001E54  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4075  001E58  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4076  001E5C  EC77  F011         	call	_EEPROM_write	;wreg free
  4077                           
  4078                           ;EEPROM.c: 126: addr++;
  4079  001E60  0100               	movlb	0	; () banked
  4080  001E62  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4081  001E64  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4082                           
  4083                           ; BSR set to: 0
  4084  001E66  0100               	movlb	0	; () banked
  4085  001E68  4BB7               	infsnz	logRun@i& (0+255),f,b
  4086  001E6A  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4087                           
  4088                           ; BSR set to: 0
  4089  001E6C  0100               	movlb	0	; () banked
  4090  001E6E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4091  001E70  D7E1               	goto	l6030
  4092  001E72  0100               	movlb	0	; () banked
  4093  001E74  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4094  001E76  E101               	bnz	u4970
  4095  001E78  D7D8               	goto	L4
  4096  001E7A                     u4970:
  4097  001E7A                     l924:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;EEPROM.c: 127: }
  4101                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4102  001E7A  C0FA  F0B6         	movff	_total_time,logRun@byte11
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4106  001E7E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4107  001E82  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4108  001E86  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4109  001E8A  EC77  F011         	call	_EEPROM_write	;wreg free
  4110  001E8E  0012               	return		;funcret
  4111  001E90                     __end_of_logRun:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           intcon2	equ	0xFF1
  4121                           intcon3	equ	0xFF0
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           postdec1	equ	0xFE5
  4125                           fsr1l	equ	0xFE1
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _EEPROM_write *****************
  4134 ;; Defined at:
  4135 ;;		line 32 in file "EEPROM.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  address         2   43[BANK0 ] unsigned short 
  4138 ;;  data            1   45[BANK0 ] unsigned char 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  i               1   48[BANK0 ] unsigned char 
  4141 ;;  i               1   47[BANK0 ] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:        6 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:   10
  4158 ;; This function calls:
  4159 ;;		_EEPROM_read
  4160 ;;		_lcdInst
  4161 ;;		_printf
  4162 ;; This function is called by:
  4163 ;;		_Loading
  4164 ;;		_logRun
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text14
  4169  0022EE                     __ptext14:
  4170                           	opt stack 0
  4171  0022EE                     _EEPROM_write:
  4172                           	opt stack 18
  4173                           
  4174                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4175                           
  4176                           ;incstack = 0
  4177  0022EE  84A6               	bsf	4006,2,c	;volatile
  4178                           
  4179                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4180  0022F0  0100               	movlb	0	; () banked
  4181  0022F2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4182  0022F4  6EAA               	movwf	4010,c	;volatile
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4186  0022F6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;EEPROM.c: 39: EEDATA = data;
  4190  0022FA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4194  0022FE  9EA6               	bcf	4006,7,c	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4198  002300  9CA6               	bcf	4006,6,c	;volatile
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4202  002302  9EF2               	bcf	intcon,7,c	;volatile
  4203                           
  4204                           ;EEPROM.c: 45: EECON2 = 0x55;
  4205  002304  0E55               	movlw	85
  4206  002306  6EA7               	movwf	4007,c	;volatile
  4207                           
  4208                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4209  002308  0EAA               	movlw	170
  4210  00230A  6EA7               	movwf	4007,c	;volatile
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4214  00230C  82A6               	bsf	4006,1,c	;volatile
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4218  00230E  8EF2               	bsf	intcon,7,c	;volatile
  4219  002310                     l902:
  4220  002310  A8A1               	btfss	4001,4,c	;volatile
  4221  002312  D7FE               	goto	l902
  4222                           
  4223                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4224  002314  98A1               	bcf	4001,4,c	;volatile
  4225                           
  4226                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4227  002316  94A6               	bcf	4006,2,c	;volatile
  4228                           
  4229                           ;EEPROM.c: 57: if(debug){
  4230  002318  0100               	movlb	0	; () banked
  4231  00231A  51DE               	movf	_debug& (0+255),w,b
  4232  00231C  0100               	movlb	0	; () banked
  4233  00231E  11DF               	iorwf	(_debug+1)& (0+255),w,b
  4234  002320  B4D8               	btfsc	status,2,c
  4235  002322  0012               	return	
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4239  002324  0E01               	movlw	1
  4240  002326  EC6D  F019         	call	_lcdInst
  4241  00232A  0E68               	movlw	104
  4242  00232C  0100               	movlb	0	; () banked
  4243  00232E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4244  002330  0EE4               	movlw	228
  4245  002332                     u5227:
  4246  002332  2EE8               	decfsz	wreg,f,c
  4247  002334  D7FE               	bra	u5227
  4248  002336  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4249  002338  D7FC               	bra	u5227
  4250  00233A  F000               	nop	
  4251                           
  4252                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4253  00233C  0E80               	movlw	128
  4254  00233E  EC6D  F019         	call	_lcdInst
  4255                           
  4256                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4257  002342  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4258  002346  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4259  00234A  EC30  F019         	call	_EEPROM_read	;wreg free
  4260  00234E  0100               	movlb	0	; () banked
  4261  002350  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4262  002352  A4D8               	btfss	status,2,c
  4263  002354  D024               	goto	l4878
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4267  002356  0EC6               	movlw	low STR_66
  4268  002358  0100               	movlb	0	; () banked
  4269  00235A  6F8E               	movwf	printf@f& (0+255),b
  4270  00235C  0EFD               	movlw	high STR_66
  4271  00235E  0100               	movlb	0	; () banked
  4272  002360  6F8F               	movwf	(printf@f+1)& (0+255),b
  4273  002362  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4274  002366  0100               	movlb	0	; () banked
  4275  002368  6B91               	clrf	(?_printf+3)& (0+255),b
  4276  00236A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4277  00236E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4278  002372  EC5C  F004         	call	_printf	;wreg free
  4279                           
  4280                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4281  002376  0E00               	movlw	0
  4282  002378  0100               	movlb	0	; () banked
  4283  00237A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4284  00237C                     l4870:
  4285                           
  4286                           ; BSR set to: 0
  4287  00237C  0E63               	movlw	99
  4288  00237E  0100               	movlb	0	; () banked
  4289  002380  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4290  002382  D001               	goto	l4874
  4291  002384  0012               	return	
  4292  002386                     l4874:
  4293                           
  4294                           ; BSR set to: 0
  4295  002386  0E68               	movlw	104
  4296  002388  0100               	movlb	0	; () banked
  4297  00238A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4298  00238C  0EE4               	movlw	228
  4299  00238E                     u5237:
  4300  00238E  2EE8               	decfsz	wreg,f,c
  4301  002390  D7FE               	bra	u5237
  4302  002392  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4303  002394  D7FC               	bra	u5237
  4304  002396  F000               	nop	
  4305  002398  0100               	movlb	0	; () banked
  4306  00239A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4307  00239C  D7EF               	goto	l4870
  4308  00239E                     l4878:
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4312  00239E  0EBD               	movlw	low STR_67
  4313  0023A0  0100               	movlb	0	; () banked
  4314  0023A2  6F8E               	movwf	printf@f& (0+255),b
  4315  0023A4  0EFF               	movlw	high STR_67
  4316  0023A6  0100               	movlb	0	; () banked
  4317  0023A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  4318  0023AA  EC5C  F004         	call	_printf	;wreg free
  4319  0023AE  0E00               	movlw	0
  4320  0023B0  0100               	movlb	0	; () banked
  4321  0023B2  6FB0               	movwf	EEPROM_write@i_1306& (0+255),b
  4322  0023B4                     l4882:
  4323                           
  4324                           ; BSR set to: 0
  4325  0023B4  0E63               	movlw	99
  4326  0023B6  0100               	movlb	0	; () banked
  4327  0023B8  65B0               	cpfsgt	EEPROM_write@i_1306& (0+255),b
  4328  0023BA  D001               	goto	l4886
  4329  0023BC  0012               	return	
  4330  0023BE                     l4886:
  4331                           
  4332                           ; BSR set to: 0
  4333  0023BE  0E68               	movlw	104
  4334  0023C0  0100               	movlb	0	; () banked
  4335  0023C2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4336  0023C4  0EE4               	movlw	228
  4337  0023C6                     u5247:
  4338  0023C6  2EE8               	decfsz	wreg,f,c
  4339  0023C8  D7FE               	bra	u5247
  4340  0023CA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4341  0023CC  D7FC               	bra	u5247
  4342  0023CE  F000               	nop	
  4343  0023D0  0100               	movlb	0	; () banked
  4344  0023D2  2BB0               	incf	EEPROM_write@i_1306& (0+255),f,b
  4345  0023D4  D7EF               	goto	l4882
  4346  0023D6                     __end_of_EEPROM_write:
  4347                           	opt stack 0
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           intcon2	equ	0xFF1
  4356                           intcon3	equ	0xFF0
  4357                           postinc0	equ	0xFEE
  4358                           wreg	equ	0xFE8
  4359                           postdec1	equ	0xFE5
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _EEPROM_read *****************
  4369 ;; Defined at:
  4370 ;;		line 68 in file "EEPROM.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  address         2    0[BANK0 ] unsigned short 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      unsigned char 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        2 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    7
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_Loading
  4395 ;;		_EEPROM_write
  4396 ;;		_logRun
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text15
  4401  003260                     __ptext15:
  4402                           	opt stack 0
  4403  003260                     _EEPROM_read:
  4404                           	opt stack 20
  4405                           
  4406                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;incstack = 0
  4410  003260  0100               	movlb	0	; () banked
  4411  003262  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4412  003264  6EAA               	movwf	4010,c	;volatile
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4416  003266  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4420  00326A  9EA6               	bcf	4006,7,c	;volatile
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4424  00326C  9CA6               	bcf	4006,6,c	;volatile
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4428  00326E  80A6               	bsf	4006,0,c	;volatile
  4429  003270                     l915:
  4430  003270  B0A6               	btfsc	4006,0,c	;volatile
  4431  003272  D7FE               	goto	l915
  4432                           
  4433                           ;EEPROM.c: 81: return EEDATA;
  4434  003274  50A8               	movf	4008,w,c	;volatile
  4435  003276  0012               	return	
  4436  003278                     __end_of_EEPROM_read:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           intcon2	equ	0xFF1
  4446                           intcon3	equ	0xFF0
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           postdec2	equ	0xFDD
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _initUI *****************
  4459 ;; Defined at:
  4460 ;;		line 62 in file "UI.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:   12
  4481 ;; This function calls:
  4482 ;;		_change_state_to_menu_start
  4483 ;;		_loadRTC
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text16
  4490  0031B6                     __ptext16:
  4491                           	opt stack 0
  4492  0031B6                     _initUI:
  4493                           	opt stack 18
  4494                           
  4495                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4496                           
  4497                           ;incstack = 0
  4498  0031B6  8EF2               	bsf	intcon,7,c	;volatile
  4499                           
  4500                           ;UI.c: 64: machine_state = UI_state;
  4501  0031B8  0E00               	movlw	0
  4502  0031BA  0100               	movlb	0	; () banked
  4503  0031BC  6FFC               	movwf	_machine_state& (0+255),b
  4504                           
  4505                           ;UI.c: 65: logstate = 0;
  4506  0031BE  0E00               	movlw	0
  4507  0031C0  0100               	movlb	0	; () banked
  4508  0031C2  6FF9               	movwf	(_logstate+1)& (0+255),b
  4509  0031C4  0E00               	movlw	0
  4510  0031C6  6FF8               	movwf	_logstate& (0+255),b
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;UI.c: 67: loadRTC();
  4514  0031C8  EC99  F013         	call	_loadRTC	;wreg free
  4515                           
  4516                           ;UI.c: 69: change_state_to_menu_start();
  4517  0031CC  EC76  F018         	call	_change_state_to_menu_start	;wreg free
  4518                           
  4519                           ;UI.c: 70: firstboot = 1;
  4520  0031D0  0E00               	movlw	0
  4521  0031D2  6E77               	movwf	_firstboot+1,c
  4522  0031D4  0E01               	movlw	1
  4523  0031D6  6E76               	movwf	_firstboot,c
  4524  0031D8  0012               	return		;funcret
  4525  0031DA                     __end_of_initUI:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon2	equ	0xFF1
  4535                           intcon3	equ	0xFF0
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _loadRTC *****************
  4548 ;; Defined at:
  4549 ;;		line 28 in file "RTC.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  i               2   22[BANK0 ] int 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        3 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    9
  4570 ;; This function calls:
  4571 ;;		_I2C_Master_Init
  4572 ;;		_I2C_Master_Start
  4573 ;;		_I2C_Master_Stop
  4574 ;;		_I2C_Master_Write
  4575 ;; This function is called by:
  4576 ;;		_initUI
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text17
  4581  002732                     __ptext17:
  4582                           	opt stack 0
  4583  002732                     _loadRTC:
  4584                           	opt stack 20
  4585                           
  4586                           ;RTC.c: 30: I2C_Master_Init(10000);
  4587                           
  4588                           ;incstack = 0
  4589  002732  0E10               	movlw	16
  4590  002734  0100               	movlb	0	; () banked
  4591  002736  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4592  002738  0E27               	movlw	39
  4593  00273A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4594  00273C  0E00               	movlw	0
  4595  00273E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4596  002740  0E00               	movlw	0
  4597  002742  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4598  002744  EC6D  F015         	call	_I2C_Master_Init	;wreg free
  4599                           
  4600                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4601  002748  9EF2               	bcf	intcon,7,c	;volatile
  4602                           
  4603                           ;RTC.c: 34: I2C_Master_Start();
  4604  00274A  EC93  F019         	call	_I2C_Master_Start	;wreg free
  4605                           
  4606                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  4607  00274E  0E00               	movlw	0
  4608  002750  0100               	movlb	0	; () banked
  4609  002752  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4610  002754  0ED0               	movlw	208
  4611  002756  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4612  002758  EC81  F019         	call	_I2C_Master_Write	;wreg free
  4613                           
  4614                           ;RTC.c: 36: I2C_Master_Write(0x00);
  4615  00275C  0E00               	movlw	0
  4616  00275E  0100               	movlb	0	; () banked
  4617  002760  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4618  002762  0E00               	movlw	0
  4619  002764  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4620  002766  EC81  F019         	call	_I2C_Master_Write	;wreg free
  4621                           
  4622                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  4623  00276A  0E00               	movlw	0
  4624  00276C  0100               	movlb	0	; () banked
  4625  00276E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  4626  002770  0E00               	movlw	0
  4627  002772  6F96               	movwf	loadRTC@i& (0+255),b
  4628  002774                     l4978:
  4629                           
  4630                           ; BSR set to: 0
  4631  002774  0100               	movlb	0	; () banked
  4632  002776  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  4633  002778  D008               	goto	l4982
  4634  00277A  0100               	movlb	0	; () banked
  4635  00277C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  4636  00277E  E11B               	bnz	l4988
  4637  002780  0E07               	movlw	7
  4638  002782  0100               	movlb	0	; () banked
  4639  002784  5D96               	subwf	loadRTC@i& (0+255),w,b
  4640  002786  B0D8               	btfsc	status,0,c
  4641  002788  D016               	goto	l4988
  4642  00278A                     l4982:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  4646  00278A  0E5B               	movlw	low _time
  4647  00278C  0100               	movlb	0	; () banked
  4648  00278E  2596               	addwf	loadRTC@i& (0+255),w,b
  4649  002790  6ED9               	movwf	fsr2l,c
  4650  002792  0E00               	movlw	high _time
  4651  002794  0100               	movlb	0	; () banked
  4652  002796  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  4653  002798  6EDA               	movwf	fsr2h,c
  4654  00279A  50DF               	movf	indf2,w,c
  4655  00279C  0100               	movlb	0	; () banked
  4656  00279E  6F95               	movwf	??_loadRTC& (0+255),b
  4657  0027A0  0100               	movlb	0	; () banked
  4658  0027A2  5195               	movf	??_loadRTC& (0+255),w,b
  4659  0027A4  0100               	movlb	0	; () banked
  4660  0027A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4661  0027A8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4662  0027AA  EC81  F019         	call	_I2C_Master_Write	;wreg free
  4663  0027AE  0100               	movlb	0	; () banked
  4664  0027B0  4B96               	infsnz	loadRTC@i& (0+255),f,b
  4665  0027B2  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  4666  0027B4  D7DF               	goto	l4978
  4667  0027B6                     l4988:
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;RTC.c: 39: }
  4671                           ;RTC.c: 40: I2C_Master_Stop();
  4672  0027B6  EC8F  F019         	call	_I2C_Master_Stop	;wreg free
  4673                           
  4674                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  4675  0027BA  8EF2               	bsf	intcon,7,c	;volatile
  4676  0027BC  0012               	return		;funcret
  4677  0027BE                     __end_of_loadRTC:
  4678                           	opt stack 0
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           intcon	equ	0xFF2
  4686                           intcon2	equ	0xFF1
  4687                           intcon3	equ	0xFF0
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postdec1	equ	0xFE5
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _I2C_Master_Init *****************
  4700 ;; Defined at:
  4701 ;;		line 15 in file "I2C.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  c               4   13[BANK0 ] const unsigned long 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;Total ram usage:        8 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    8
  4722 ;; This function calls:
  4723 ;;		___lldiv
  4724 ;; This function is called by:
  4725 ;;		_loadRTC
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text18
  4730  002ADA                     __ptext18:
  4731                           	opt stack 0
  4732  002ADA                     _I2C_Master_Init:
  4733                           	opt stack 20
  4734                           
  4735                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  4736                           
  4737                           ;incstack = 0
  4738  002ADA  0E00               	movlw	0
  4739  002ADC  6EC7               	movwf	4039,c	;volatile
  4740                           
  4741                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  4742  002ADE  0E28               	movlw	40
  4743  002AE0  6EC6               	movwf	4038,c	;volatile
  4744                           
  4745                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  4746  002AE2  0E00               	movlw	0
  4747  002AE4  6EC5               	movwf	4037,c	;volatile
  4748                           
  4749                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  4750  002AE6  0E00               	movlw	0
  4751  002AE8  0100               	movlb	0	; () banked
  4752  002AEA  6F80               	movwf	___lldiv@dividend& (0+255),b
  4753  002AEC  0E48               	movlw	72
  4754  002AEE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4755  002AF0  0EE8               	movlw	232
  4756  002AF2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4757  002AF4  0E01               	movlw	1
  4758  002AF6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4759  002AF8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4760  002AFC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4761  002B00  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4762  002B04  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4763  002B08  0E02               	movlw	2
  4764  002B0A                     u3505:
  4765  002B0A  90D8               	bcf	status,0,c
  4766  002B0C  0100               	movlb	0	; () banked
  4767  002B0E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4768  002B10  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4769  002B12  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4770  002B14  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4771  002B16  2EE8               	decfsz	wreg,f,c
  4772  002B18  D7F8               	goto	u3505
  4773  002B1A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4774  002B1E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4775  002B22  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4776  002B26  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4777  002B2A  EC4A  F012         	call	___lldiv	;wreg free
  4778  002B2E  0100               	movlb	0	; () banked
  4779  002B30  0580               	decf	?___lldiv& (0+255),w,b
  4780  002B32  6EC8               	movwf	4040,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;I2C.c: 22: TRISC3 = 1;
  4784  002B34  8694               	bsf	3988,3,c	;volatile
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;I2C.c: 23: TRISC4 = 1;
  4788  002B36  8894               	bsf	3988,4,c	;volatile
  4789                           
  4790                           ; BSR set to: 0
  4791  002B38  0012               	return		;funcret
  4792  002B3A                     __end_of_I2C_Master_Init:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           intcon2	equ	0xFF1
  4802                           intcon3	equ	0xFF0
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function ___lldiv *****************
  4815 ;; Defined at:
  4816 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  dividend        4    0[BANK0 ] unsigned long 
  4819 ;;  divisor         4    4[BANK0 ] unsigned long 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  quotient        4    8[BANK0 ] unsigned long 
  4822 ;;  counter         1   12[BANK0 ] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  4    0[BANK0 ] unsigned long 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4832 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;Total ram usage:       13 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    7
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_I2C_Master_Init
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text19
  4847  002494                     __ptext19:
  4848                           	opt stack 0
  4849  002494                     ___lldiv:
  4850                           	opt stack 20
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854  002494  0E00               	movlw	0
  4855  002496  0100               	movlb	0	; () banked
  4856  002498  6F88               	movwf	___lldiv@quotient& (0+255),b
  4857  00249A  0E00               	movlw	0
  4858  00249C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4859  00249E  0E00               	movlw	0
  4860  0024A0  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4861  0024A2  0E00               	movlw	0
  4862  0024A4  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4863                           
  4864                           ; BSR set to: 0
  4865  0024A6  0100               	movlb	0	; () banked
  4866  0024A8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4867  0024AA  0100               	movlb	0	; () banked
  4868  0024AC  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4869  0024AE  0100               	movlb	0	; () banked
  4870  0024B0  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4871  0024B2  0100               	movlb	0	; () banked
  4872  0024B4  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4873  0024B6  B4D8               	btfsc	status,2,c
  4874  0024B8  D042               	goto	l1376
  4875                           
  4876                           ; BSR set to: 0
  4877  0024BA  0E01               	movlw	1
  4878  0024BC  0100               	movlb	0	; () banked
  4879  0024BE  6F8C               	movwf	___lldiv@counter& (0+255),b
  4880  0024C0  D008               	goto	l4442
  4881  0024C2                     l4440:
  4882                           
  4883                           ; BSR set to: 0
  4884  0024C2  0100               	movlb	0	; () banked
  4885  0024C4  90D8               	bcf	status,0,c
  4886  0024C6  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4887  0024C8  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4888  0024CA  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4889  0024CC  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4890  0024CE  0100               	movlb	0	; () banked
  4891  0024D0  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4892  0024D2                     l4442:
  4893                           
  4894                           ; BSR set to: 0
  4895  0024D2  0100               	movlb	0	; () banked
  4896  0024D4  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4897  0024D6  D7F5               	goto	l4440
  4898  0024D8                     l4444:
  4899                           
  4900                           ; BSR set to: 0
  4901  0024D8  0100               	movlb	0	; () banked
  4902  0024DA  90D8               	bcf	status,0,c
  4903  0024DC  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4904  0024DE  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4905  0024E0  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4906  0024E2  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4907                           
  4908                           ; BSR set to: 0
  4909  0024E4  0100               	movlb	0	; () banked
  4910  0024E6  5184               	movf	___lldiv@divisor& (0+255),w,b
  4911  0024E8  0100               	movlb	0	; () banked
  4912  0024EA  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4913  0024EC  0100               	movlb	0	; () banked
  4914  0024EE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4915  0024F0  0100               	movlb	0	; () banked
  4916  0024F2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4917  0024F4  0100               	movlb	0	; () banked
  4918  0024F6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4919  0024F8  0100               	movlb	0	; () banked
  4920  0024FA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4921  0024FC  0100               	movlb	0	; () banked
  4922  0024FE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4923  002500  0100               	movlb	0	; () banked
  4924  002502  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4925  002504  A0D8               	btfss	status,0,c
  4926  002506  D012               	goto	l4452
  4927                           
  4928                           ; BSR set to: 0
  4929  002508  0100               	movlb	0	; () banked
  4930  00250A  5184               	movf	___lldiv@divisor& (0+255),w,b
  4931  00250C  0100               	movlb	0	; () banked
  4932  00250E  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4933  002510  0100               	movlb	0	; () banked
  4934  002512  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4935  002514  0100               	movlb	0	; () banked
  4936  002516  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4937  002518  0100               	movlb	0	; () banked
  4938  00251A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4939  00251C  0100               	movlb	0	; () banked
  4940  00251E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4941  002520  0100               	movlb	0	; () banked
  4942  002522  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4943  002524  0100               	movlb	0	; () banked
  4944  002526  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4945                           
  4946                           ; BSR set to: 0
  4947  002528  0100               	movlb	0	; () banked
  4948  00252A  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4949  00252C                     l4452:
  4950                           
  4951                           ; BSR set to: 0
  4952  00252C  0100               	movlb	0	; () banked
  4953  00252E  90D8               	bcf	status,0,c
  4954  002530  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4955  002532  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4956  002534  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4957  002536  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4958                           
  4959                           ; BSR set to: 0
  4960  002538  0100               	movlb	0	; () banked
  4961  00253A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4962  00253C  D7CD               	goto	l4444
  4963  00253E                     l1376:
  4964                           
  4965                           ; BSR set to: 0
  4966  00253E  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4967  002542  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4968  002546  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4969  00254A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4970                           
  4971                           ; BSR set to: 0
  4972  00254E  0012               	return		;funcret
  4973  002550                     __end_of___lldiv:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           intcon2	equ	0xFF1
  4983                           intcon3	equ	0xFF0
  4984                           postinc0	equ	0xFEE
  4985                           wreg	equ	0xFE8
  4986                           postdec1	equ	0xFE5
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           fsr2h	equ	0xFDA
  4992                           fsr2l	equ	0xFD9
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _change_state_to_menu_start *****************
  4996 ;; Defined at:
  4997 ;;		line 472 in file "UI.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;Total ram usage:        0 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:   11
  5018 ;; This function calls:
  5019 ;;		_lcdInst
  5020 ;;		_printRTC
  5021 ;;		_printf
  5022 ;; This function is called by:
  5023 ;;		_initUI
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text20
  5028  0030EC                     __ptext20:
  5029                           	opt stack 0
  5030  0030EC                     _change_state_to_menu_start:
  5031                           	opt stack 18
  5032                           
  5033                           ;UI.c: 473: cur_state = 0;
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;incstack = 0
  5037  0030EC  0E00               	movlw	0
  5038  0030EE  0100               	movlb	0	; () banked
  5039  0030F0  6FDD               	movwf	(_cur_state+1)& (0+255),b
  5040  0030F2  0E00               	movlw	0
  5041  0030F4  6FDC               	movwf	_cur_state& (0+255),b
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;UI.c: 475: lcdInst(0b10000000);;
  5045  0030F6  0E80               	movlw	128
  5046  0030F8  EC6D  F019         	call	_lcdInst
  5047                           
  5048                           ;UI.c: 476: printRTC();
  5049  0030FC  EC2F  F008         	call	_printRTC	;wreg free
  5050                           
  5051                           ;UI.c: 477: lcdInst(0b11000000);;
  5052  003100  0EC0               	movlw	192
  5053  003102  EC6D  F019         	call	_lcdInst
  5054                           
  5055                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5056  003106  0E57               	movlw	low STR_30
  5057  003108  0100               	movlb	0	; () banked
  5058  00310A  6F8E               	movwf	printf@f& (0+255),b
  5059  00310C  0EFF               	movlw	high STR_30
  5060  00310E  0100               	movlb	0	; () banked
  5061  003110  6F8F               	movwf	(printf@f+1)& (0+255),b
  5062  003112  EC5C  F004         	call	_printf	;wreg free
  5063  003116  0012               	return		;funcret
  5064  003118                     __end_of_change_state_to_menu_start:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           intcon2	equ	0xFF1
  5074                           intcon3	equ	0xFF0
  5075                           postinc0	equ	0xFEE
  5076                           wreg	equ	0xFE8
  5077                           postdec1	equ	0xFE5
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _initTime *****************
  5087 ;; Defined at:
  5088 ;;		line 17 in file "RTC.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  s               1    wreg     unsigned char 
  5091 ;;  m               1    0[BANK0 ] unsigned char 
  5092 ;;  h               1    1[BANK0 ] unsigned char 
  5093 ;;  w               1    2[BANK0 ] unsigned char 
  5094 ;;  DD              1    3[BANK0 ] unsigned char 
  5095 ;;  MM              1    4[BANK0 ] unsigned char 
  5096 ;;  YY              1    5[BANK0 ] unsigned char 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  s               1    6[BANK0 ] unsigned char 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5108 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;Total ram usage:        7 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    7
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_main
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text21
  5123  003220                     __ptext21:
  5124                           	opt stack 0
  5125  003220                     _initTime:
  5126                           	opt stack 23
  5127                           
  5128                           ;incstack = 0
  5129                           ;initTime@s stored from wreg
  5130  003220  0100               	movlb	0	; () banked
  5131  003222  6F86               	movwf	initTime@s& (0+255),b
  5132                           
  5133                           ;RTC.c: 19: time[0] = s;
  5134  003224  C086  F05B         	movff	initTime@s,_time
  5135                           
  5136                           ;RTC.c: 20: time[1] = m;
  5137  003228  C080  F05C         	movff	initTime@m,_time+1
  5138                           
  5139                           ;RTC.c: 21: time[2] = h;
  5140  00322C  C081  F05D         	movff	initTime@h,_time+2
  5141                           
  5142                           ;RTC.c: 22: time[3] = w;
  5143  003230  C082  F05E         	movff	initTime@w,_time+3
  5144                           
  5145                           ;RTC.c: 23: time[4] = DD;
  5146  003234  C083  F05F         	movff	initTime@DD,_time+4
  5147                           
  5148                           ;RTC.c: 24: time[5] = MM;
  5149  003238  C084  F060         	movff	initTime@MM,_time+5
  5150                           
  5151                           ;RTC.c: 25: time[6] = YY;
  5152  00323C  C085  F061         	movff	initTime@YY,_time+6
  5153  003240  0012               	return		;funcret
  5154  003242                     __end_of_initTime:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodh	equ	0xFF4
  5161                           prodl	equ	0xFF3
  5162                           intcon	equ	0xFF2
  5163                           intcon2	equ	0xFF1
  5164                           intcon3	equ	0xFF0
  5165                           postinc0	equ	0xFEE
  5166                           wreg	equ	0xFE8
  5167                           postdec1	equ	0xFE5
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _initLCD *****************
  5177 ;; Defined at:
  5178 ;;		line 48 in file "lcd.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;Total ram usage:        1 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    9
  5199 ;; This function calls:
  5200 ;;		_lcdInst
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text22
  5207  002D1E                     __ptext22:
  5208                           	opt stack 0
  5209  002D1E                     _initLCD:
  5210                           	opt stack 21
  5211                           
  5212                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5213                           
  5214                           ;incstack = 0
  5215  002D1E  0E9C               	movlw	156
  5216  002D20  0100               	movlb	0	; () banked
  5217  002D22  6F83               	movwf	??_initLCD& (0+255),b
  5218  002D24  0ED7               	movlw	215
  5219  002D26                     u5257:
  5220  002D26  2EE8               	decfsz	wreg,f,c
  5221  002D28  D7FE               	bra	u5257
  5222  002D2A  2F83               	decfsz	??_initLCD& (0+255),f,b
  5223  002D2C  D7FC               	bra	u5257
  5224                           
  5225                           ;lcd.c: 50: lcdInst(0b00110011);
  5226  002D2E  0E33               	movlw	51
  5227  002D30  EC6D  F019         	call	_lcdInst
  5228                           
  5229                           ;lcd.c: 51: lcdInst(0b00110010);
  5230  002D34  0E32               	movlw	50
  5231  002D36  EC6D  F019         	call	_lcdInst
  5232                           
  5233                           ;lcd.c: 53: lcdInst(0b00101000);
  5234  002D3A  0E28               	movlw	40
  5235  002D3C  EC6D  F019         	call	_lcdInst
  5236                           
  5237                           ;lcd.c: 54: lcdInst(0b00001100);
  5238  002D40  0E0C               	movlw	12
  5239  002D42  EC6D  F019         	call	_lcdInst
  5240                           
  5241                           ;lcd.c: 55: lcdInst(0b00000110);
  5242  002D46  0E06               	movlw	6
  5243  002D48  EC6D  F019         	call	_lcdInst
  5244                           
  5245                           ;lcd.c: 56: lcdInst(0b00000001);
  5246  002D4C  0E01               	movlw	1
  5247  002D4E  EC6D  F019         	call	_lcdInst
  5248                           
  5249                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5250  002D52  0E9C               	movlw	156
  5251  002D54  0100               	movlb	0	; () banked
  5252  002D56  6F83               	movwf	??_initLCD& (0+255),b
  5253  002D58  0ED7               	movlw	215
  5254  002D5A                     u5267:
  5255  002D5A  2EE8               	decfsz	wreg,f,c
  5256  002D5C  D7FE               	bra	u5267
  5257  002D5E  2F83               	decfsz	??_initLCD& (0+255),f,b
  5258  002D60  D7FC               	bra	u5267
  5259  002D62  0012               	return		;funcret
  5260  002D64                     __end_of_initLCD:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           intcon2	equ	0xFF1
  5270                           intcon3	equ	0xFF0
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           postdec1	equ	0xFE5
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function _UI *****************
  5283 ;; Defined at:
  5284 ;;		line 74 in file "UI.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  i               1   73[BANK0 ] unsigned char 
  5289 ;;  i               1   85[BANK0 ] unsigned char 
  5290 ;;  i               1   84[BANK0 ] unsigned char 
  5291 ;;  i               1   83[BANK0 ] unsigned char 
  5292 ;;  i               1   82[BANK0 ] unsigned char 
  5293 ;;  i               1   81[BANK0 ] unsigned char 
  5294 ;;  i               1   80[BANK0 ] unsigned char 
  5295 ;;  i               1   79[BANK0 ] unsigned char 
  5296 ;;  i               1   78[BANK0 ] unsigned char 
  5297 ;;  i               1   77[BANK0 ] unsigned char 
  5298 ;;  i               1   76[BANK0 ] unsigned char 
  5299 ;;  i               1   75[BANK0 ] unsigned char 
  5300 ;;  i               1   74[BANK0 ] unsigned char 
  5301 ;;  month           4   86[BANK0 ] unsigned char [4]
  5302 ;;  i               1   72[BANK0 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;Total ram usage:       22 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:   11
  5319 ;; This function calls:
  5320 ;;		___awdiv
  5321 ;;		___awmod
  5322 ;;		_change_state_to_menu_12
  5323 ;;		_change_state_to_menu_22
  5324 ;;		_lcdInst
  5325 ;;		_printRTC
  5326 ;;		_printf
  5327 ;;		_strcpy
  5328 ;; This function is called by:
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text23
  5334  000012                     __ptext23:
  5335                           	opt stack 0
  5336  000012                     _UI:
  5337                           	opt stack 19
  5338                           
  5339                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5340                           
  5341                           ;incstack = 0
  5342  000012  0E02               	movlw	2
  5343  000014  0100               	movlb	0	; () banked
  5344  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5345  000018  A4D8               	btfss	status,2,c
  5346  00001A  D075               	goto	l5426
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5350  00001C  0E01               	movlw	1
  5351  00001E  EC6D  F019         	call	_lcdInst
  5352  000022  0E68               	movlw	104
  5353  000024  0100               	movlb	0	; () banked
  5354  000026  6FC4               	movwf	??_UI& (0+255),b
  5355  000028  0EE4               	movlw	228
  5356  00002A                     u5277:
  5357  00002A  2EE8               	decfsz	wreg,f,c
  5358  00002C  D7FE               	bra	u5277
  5359  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5360  000030  D7FC               	bra	u5277
  5361  000032  F000               	nop	
  5362                           
  5363                           ;UI.c: 77: lcdInst(0b10000000);;
  5364  000034  0E80               	movlw	128
  5365  000036  EC6D  F019         	call	_lcdInst
  5366                           
  5367                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5368  00003A  0E13               	movlw	low STR_1
  5369  00003C  0100               	movlb	0	; () banked
  5370  00003E  6F8E               	movwf	printf@f& (0+255),b
  5371  000040  0EFE               	movlw	high STR_1
  5372  000042  0100               	movlb	0	; () banked
  5373  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5374  000046  0E01               	movlw	1
  5375  000048  0100               	movlb	0	; () banked
  5376  00004A  25FD               	addwf	_sel& (0+255),w,b
  5377  00004C  0100               	movlb	0	; () banked
  5378  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5379  000050  0100               	movlb	0	; () banked
  5380  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5381  000054  0E00               	movlw	0
  5382  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5383  000058  EC5C  F004         	call	_printf	;wreg free
  5384                           
  5385                           ;UI.c: 79: lcdInst(0b11000000);;
  5386  00005C  0EC0               	movlw	192
  5387  00005E  EC6D  F019         	call	_lcdInst
  5388                           
  5389                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5390  000062  0E0E               	movlw	14
  5391  000064  0100               	movlb	0	; () banked
  5392  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5393  000068  0E10               	movlw	16
  5394  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5395  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  5396  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5397  000074  ECFD  F012         	call	___awmod	;wreg free
  5398  000078  C080  F0C6         	movff	?___awmod,_UI$2004
  5399  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2004+1
  5400                           
  5401                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5402  000080  0E86               	movlw	low STR_2
  5403  000082  0100               	movlb	0	; () banked
  5404  000084  6F8E               	movwf	printf@f& (0+255),b
  5405  000086  0EFF               	movlw	high STR_2
  5406  000088  0100               	movlb	0	; () banked
  5407  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5408  00008C  0E0E               	movlw	14
  5409  00008E  0100               	movlb	0	; () banked
  5410  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5411  000092  0E10               	movlw	16
  5412  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5413  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  5414  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5415  00009E  ECFD  F012         	call	___awmod	;wreg free
  5416  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5417  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5418  0000AA  0E00               	movlw	0
  5419  0000AC  0100               	movlb	0	; () banked
  5420  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5421  0000B0  0E3C               	movlw	60
  5422  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5423  0000B4  ECEB  F011         	call	___awdiv	;wreg free
  5424  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5425  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5426  0000C0  C0C6  F080         	movff	_UI$2004,___awmod@dividend
  5427  0000C4  C0C7  F081         	movff	_UI$2004+1,___awmod@dividend+1
  5428  0000C8  0E00               	movlw	0
  5429  0000CA  0100               	movlb	0	; () banked
  5430  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5431  0000CE  0E3C               	movlw	60
  5432  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5433  0000D2  ECFD  F012         	call	___awmod	;wreg free
  5434  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5435  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5436  0000DE  EC5C  F004         	call	_printf	;wreg free
  5437                           
  5438                           ;UI.c: 81: machine_state = UI_state;
  5439  0000E2  0E00               	movlw	0
  5440  0000E4  0100               	movlb	0	; () banked
  5441  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5442  0000E8                     l179:
  5443  0000E8  A281               	btfss	3969,1,c	;volatile
  5444  0000EA  D7FE               	goto	l179
  5445                           
  5446                           ;UI.c: 84: }
  5447                           ;UI.c: 85: if(cur_state==12){
  5448  0000EC  0E0C               	movlw	12
  5449  0000EE  0100               	movlb	0	; () banked
  5450  0000F0  19DC               	xorwf	_cur_state& (0+255),w,b
  5451  0000F2  0100               	movlb	0	; () banked
  5452  0000F4  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
  5453  0000F6  A4D8               	btfss	status,2,c
  5454  0000F8  D003               	goto	l5424
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;UI.c: 86: change_state_to_menu_12();
  5458  0000FA  ECEF  F016         	call	_change_state_to_menu_12	;wreg free
  5459                           
  5460                           ;UI.c: 87: }
  5461  0000FE  D3D5               	goto	l5746
  5462  000100                     l5424:
  5463                           
  5464                           ;UI.c: 88: else{
  5465                           ;UI.c: 89: change_state_to_menu_22();
  5466  000100  ECD3  F016         	call	_change_state_to_menu_22	;wreg free
  5467                           
  5468                           ;UI.c: 90: }
  5469                           ;UI.c: 91: }
  5470  000104  D3D2               	goto	l5746
  5471  000106                     l5426:
  5472                           
  5473                           ;UI.c: 92: else if(cur_state == 0){
  5474  000106  0100               	movlb	0	; () banked
  5475  000108  51DC               	movf	_cur_state& (0+255),w,b
  5476  00010A  0100               	movlb	0	; () banked
  5477  00010C  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
  5478  00010E  A4D8               	btfss	status,2,c
  5479  000110  D3CC               	goto	l5746
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5483  000112  0E00               	movlw	0
  5484  000114  0100               	movlb	0	; () banked
  5485  000116  6FC8               	movwf	UI@i& (0+255),b
  5486  000118                     l5430:
  5487                           
  5488                           ; BSR set to: 0
  5489  000118  0E63               	movlw	99
  5490  00011A  0100               	movlb	0	; () banked
  5491  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5492  00011E  D001               	goto	l5434
  5493  000120  D00C               	goto	l5438
  5494  000122                     l5434:
  5495                           
  5496                           ; BSR set to: 0
  5497  000122  0E68               	movlw	104
  5498  000124  0100               	movlb	0	; () banked
  5499  000126  6FC4               	movwf	??_UI& (0+255),b
  5500  000128  0EE4               	movlw	228
  5501  00012A                     u5287:
  5502  00012A  2EE8               	decfsz	wreg,f,c
  5503  00012C  D7FE               	bra	u5287
  5504  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5505  000130  D7FC               	bra	u5287
  5506  000132  F000               	nop	
  5507  000134  0100               	movlb	0	; () banked
  5508  000136  2BC8               	incf	UI@i& (0+255),f,b
  5509  000138  D7EF               	goto	l5430
  5510  00013A                     l5438:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;UI.c: 94: if(cur_state == 0){
  5514  00013A  0100               	movlb	0	; () banked
  5515  00013C  51DC               	movf	_cur_state& (0+255),w,b
  5516  00013E  0100               	movlb	0	; () banked
  5517  000140  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
  5518  000142  A4D8               	btfss	status,2,c
  5519  000144  D3B2               	goto	l5746
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;UI.c: 95: printRTC();
  5523  000146  EC2F  F008         	call	_printRTC	;wreg free
  5524                           
  5525                           ;UI.c: 96: }
  5526                           ;UI.c: 97: }
  5527                           ;UI.c: 98: while(logstate){
  5528  00014A  D3AF               	goto	l5746
  5529  00014C                     l5442:
  5530                           
  5531                           ;UI.c: 100: if(!log_completion){
  5532  00014C  0100               	movlb	0	; () banked
  5533  00014E  51EA               	movf	_log_completion& (0+255),w,b
  5534  000150  0100               	movlb	0	; () banked
  5535  000152  11EB               	iorwf	(_log_completion+1)& (0+255),w,b
  5536  000154  A4D8               	btfss	status,2,c
  5537  000156  D041               	goto	l5472
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5541  000158  0E01               	movlw	1
  5542  00015A  EC6D  F019         	call	_lcdInst
  5543  00015E  0E68               	movlw	104
  5544  000160  0100               	movlb	0	; () banked
  5545  000162  6FC4               	movwf	??_UI& (0+255),b
  5546  000164  0EE4               	movlw	228
  5547  000166                     u5297:
  5548  000166  2EE8               	decfsz	wreg,f,c
  5549  000168  D7FE               	bra	u5297
  5550  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  5551  00016C  D7FC               	bra	u5297
  5552  00016E  F000               	nop	
  5553                           
  5554                           ;UI.c: 102: lcdInst(0b10000000);;
  5555  000170  0E80               	movlw	128
  5556  000172  EC6D  F019         	call	_lcdInst
  5557                           
  5558                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  5559  000176  0E01               	movlw	low STR_3
  5560  000178  0100               	movlb	0	; () banked
  5561  00017A  6F8E               	movwf	printf@f& (0+255),b
  5562  00017C  0EFE               	movlw	high STR_3
  5563  00017E  0100               	movlb	0	; () banked
  5564  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  5565  000182  C0E8  F090         	movff	_log,?_printf+2
  5566  000186  C0E9  F091         	movff	_log+1,?_printf+3
  5567  00018A  EC5C  F004         	call	_printf	;wreg free
  5568                           
  5569                           ;UI.c: 104: lcdInst(0b11000000);;
  5570  00018E  0EC0               	movlw	192
  5571  000190  EC6D  F019         	call	_lcdInst
  5572                           
  5573                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  5574  000194  0E68               	movlw	low STR_4
  5575  000196  0100               	movlb	0	; () banked
  5576  000198  6F8E               	movwf	printf@f& (0+255),b
  5577  00019A  0EFF               	movlw	high STR_4
  5578  00019C  0100               	movlb	0	; () banked
  5579  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5580  0001A0  EC5C  F004         	call	_printf	;wreg free
  5581  0001A4                     l5456:
  5582  0001A4  0E00               	movlw	0
  5583  0001A6  0100               	movlb	0	; () banked
  5584  0001A8  6FC9               	movwf	UI@i_406& (0+255),b
  5585  0001AA                     l5458:
  5586                           
  5587                           ; BSR set to: 0
  5588  0001AA  0E63               	movlw	99
  5589  0001AC  0100               	movlb	0	; () banked
  5590  0001AE  65C9               	cpfsgt	UI@i_406& (0+255),b
  5591  0001B0  D001               	goto	l5462
  5592  0001B2  D00C               	goto	l5466
  5593  0001B4                     l5462:
  5594                           
  5595                           ; BSR set to: 0
  5596  0001B4  0E68               	movlw	104
  5597  0001B6  0100               	movlb	0	; () banked
  5598  0001B8  6FC4               	movwf	??_UI& (0+255),b
  5599  0001BA  0EE4               	movlw	228
  5600  0001BC                     u5307:
  5601  0001BC  2EE8               	decfsz	wreg,f,c
  5602  0001BE  D7FE               	bra	u5307
  5603  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  5604  0001C2  D7FC               	bra	u5307
  5605  0001C4  F000               	nop	
  5606  0001C6  0100               	movlb	0	; () banked
  5607  0001C8  2BC9               	incf	UI@i_406& (0+255),f,b
  5608  0001CA  D7EF               	goto	l5458
  5609  0001CC                     l5466:
  5610                           
  5611                           ; BSR set to: 0
  5612  0001CC  0100               	movlb	0	; () banked
  5613  0001CE  51F8               	movf	_logstate& (0+255),w,b
  5614  0001D0  0100               	movlb	0	; () banked
  5615  0001D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  5616  0001D4  B4D8               	btfsc	status,2,c
  5617  0001D6  0012               	return	
  5618  0001D8  D7E5               	goto	l5456
  5619  0001DA                     l5472:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;UI.c: 109: else{
  5623                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5624  0001DA  0E01               	movlw	1
  5625  0001DC  EC6D  F019         	call	_lcdInst
  5626  0001E0  0E68               	movlw	104
  5627  0001E2  0100               	movlb	0	; () banked
  5628  0001E4  6FC4               	movwf	??_UI& (0+255),b
  5629  0001E6  0EE4               	movlw	228
  5630  0001E8                     u5317:
  5631  0001E8  2EE8               	decfsz	wreg,f,c
  5632  0001EA  D7FE               	bra	u5317
  5633  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  5634  0001EE  D7FC               	bra	u5317
  5635  0001F0  F000               	nop	
  5636                           
  5637                           ;UI.c: 111: lcdInst(0b10000000);;
  5638  0001F2  0E80               	movlw	128
  5639  0001F4  EC6D  F019         	call	_lcdInst
  5640                           
  5641                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  5642  0001F8  0E01               	movlw	low STR_3
  5643  0001FA  0100               	movlb	0	; () banked
  5644  0001FC  6F8E               	movwf	printf@f& (0+255),b
  5645  0001FE  0EFE               	movlw	high STR_3
  5646  000200  0100               	movlb	0	; () banked
  5647  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  5648  000204  C0E8  F090         	movff	_log,?_printf+2
  5649  000208  C0E9  F091         	movff	_log+1,?_printf+3
  5650  00020C  EC5C  F004         	call	_printf	;wreg free
  5651                           
  5652                           ;UI.c: 113: lcdInst(0b11000000);;
  5653  000210  0EC0               	movlw	192
  5654  000212  EC6D  F019         	call	_lcdInst
  5655                           
  5656                           ;UI.c: 114: printf("PAUSE < | BACK >");
  5657  000216  0E46               	movlw	low STR_6
  5658  000218  0100               	movlb	0	; () banked
  5659  00021A  6F8E               	movwf	printf@f& (0+255),b
  5660  00021C  0EFF               	movlw	high STR_6
  5661  00021E  0100               	movlb	0	; () banked
  5662  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  5663  000222  EC5C  F004         	call	_printf	;wreg free
  5664                           
  5665                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5666  000226  0E00               	movlw	0
  5667  000228  0100               	movlb	0	; () banked
  5668  00022A  6FCA               	movwf	UI@i_409& (0+255),b
  5669  00022C                     l5486:
  5670                           
  5671                           ; BSR set to: 0
  5672  00022C  0E63               	movlw	99
  5673  00022E  0100               	movlb	0	; () banked
  5674  000230  65CA               	cpfsgt	UI@i_409& (0+255),b
  5675  000232  D001               	goto	l5490
  5676  000234  D00C               	goto	l5494
  5677  000236                     l5490:
  5678                           
  5679                           ; BSR set to: 0
  5680  000236  0E68               	movlw	104
  5681  000238  0100               	movlb	0	; () banked
  5682  00023A  6FC4               	movwf	??_UI& (0+255),b
  5683  00023C  0EE4               	movlw	228
  5684  00023E                     u5327:
  5685  00023E  2EE8               	decfsz	wreg,f,c
  5686  000240  D7FE               	bra	u5327
  5687  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  5688  000244  D7FC               	bra	u5327
  5689  000246  F000               	nop	
  5690  000248  0100               	movlb	0	; () banked
  5691  00024A  2BCA               	incf	UI@i_409& (0+255),f,b
  5692  00024C  D7EF               	goto	l5486
  5693  00024E                     l5494:
  5694                           
  5695                           ; BSR set to: 0
  5696  00024E  0100               	movlb	0	; () banked
  5697  000250  51F8               	movf	_logstate& (0+255),w,b
  5698  000252  0100               	movlb	0	; () banked
  5699  000254  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  5700  000256  B4D8               	btfsc	status,2,c
  5701  000258  0012               	return	
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5705                           
  5706                           ; BSR set to: 0
  5707                           
  5708                           ; BSR set to: 0
  5709  00025A  0E00               	movlw	0
  5710  00025C  0100               	movlb	0	; () banked
  5711  00025E  6FCB               	movwf	UI@i_410& (0+255),b
  5712  000260                     l5500:
  5713                           
  5714                           ; BSR set to: 0
  5715  000260  0E63               	movlw	99
  5716  000262  0100               	movlb	0	; () banked
  5717  000264  65CB               	cpfsgt	UI@i_410& (0+255),b
  5718  000266  D001               	goto	l5504
  5719  000268  D00C               	goto	l5508
  5720  00026A                     l5504:
  5721                           
  5722                           ; BSR set to: 0
  5723  00026A  0E68               	movlw	104
  5724  00026C  0100               	movlb	0	; () banked
  5725  00026E  6FC4               	movwf	??_UI& (0+255),b
  5726  000270  0EE4               	movlw	228
  5727  000272                     u5337:
  5728  000272  2EE8               	decfsz	wreg,f,c
  5729  000274  D7FE               	bra	u5337
  5730  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  5731  000278  D7FC               	bra	u5337
  5732  00027A  F000               	nop	
  5733  00027C  0100               	movlb	0	; () banked
  5734  00027E  2BCB               	incf	UI@i_410& (0+255),f,b
  5735  000280  D7EF               	goto	l5500
  5736  000282                     l5508:
  5737                           
  5738                           ; BSR set to: 0
  5739  000282  0100               	movlb	0	; () banked
  5740  000284  51F8               	movf	_logstate& (0+255),w,b
  5741  000286  0100               	movlb	0	; () banked
  5742  000288  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  5743  00028A  B4D8               	btfsc	status,2,c
  5744  00028C  0012               	return	
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5748                           
  5749                           ; BSR set to: 0
  5750                           
  5751                           ; BSR set to: 0
  5752  00028E  0E01               	movlw	1
  5753  000290  EC6D  F019         	call	_lcdInst
  5754  000294  0E68               	movlw	104
  5755  000296  0100               	movlb	0	; () banked
  5756  000298  6FC4               	movwf	??_UI& (0+255),b
  5757  00029A  0EE4               	movlw	228
  5758  00029C                     u5347:
  5759  00029C  2EE8               	decfsz	wreg,f,c
  5760  00029E  D7FE               	bra	u5347
  5761  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  5762  0002A2  D7FC               	bra	u5347
  5763  0002A4  F000               	nop	
  5764                           
  5765                           ;UI.c: 120: lcdInst(0b10000000);;
  5766  0002A6  0E80               	movlw	128
  5767  0002A8  EC6D  F019         	call	_lcdInst
  5768                           
  5769                           ;UI.c: 121: printf("START:");
  5770  0002AC  0EC4               	movlw	low STR_7
  5771  0002AE  0100               	movlb	0	; () banked
  5772  0002B0  6F8E               	movwf	printf@f& (0+255),b
  5773  0002B2  0EFF               	movlw	high STR_7
  5774  0002B4  0100               	movlb	0	; () banked
  5775  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  5776  0002B8  EC5C  F004         	call	_printf	;wreg free
  5777                           
  5778                           ;UI.c: 122: lcdInst(0b11000000);;
  5779  0002BC  0EC0               	movlw	192
  5780  0002BE  EC6D  F019         	call	_lcdInst
  5781                           
  5782                           ;UI.c: 123: char month[] = "MMM";
  5783  0002C2  C128  F0D6         	movff	UI@F3220,UI@month
  5784  0002C6  C129  F0D7         	movff	UI@F3220+1,UI@month+1
  5785  0002CA  C12A  F0D8         	movff	UI@F3220+2,UI@month+2
  5786  0002CE  C12B  F0D9         	movff	UI@F3220+3,UI@month+3
  5787                           
  5788                           ;UI.c: 124: switch(log_startTime[5]){
  5789  0002D2  D0C3               	goto	l5552
  5790  0002D4                     l5524:
  5791                           
  5792                           ;UI.c: 126: strcpy(month, "JAN");
  5793  0002D4  0ED6               	movlw	low UI@month
  5794  0002D6  0100               	movlb	0	; () banked
  5795  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  5796  0002DA  0E00               	movlw	high UI@month
  5797  0002DC  0100               	movlb	0	; () banked
  5798  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5799  0002E0  0EDB               	movlw	low STR_8
  5800  0002E2  0100               	movlb	0	; () banked
  5801  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  5802  0002E6  0EFF               	movlw	high STR_8
  5803  0002E8  0100               	movlb	0	; () banked
  5804  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5805  0002EC  EC0B  F017         	call	_strcpy	;wreg free
  5806                           
  5807                           ;UI.c: 127: break;
  5808  0002F0  D0E6               	goto	l5554
  5809  0002F2                     l5526:
  5810                           
  5811                           ;UI.c: 129: strcpy(month, "FEB");
  5812  0002F2  0ED6               	movlw	low UI@month
  5813  0002F4  0100               	movlb	0	; () banked
  5814  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  5815  0002F8  0E00               	movlw	high UI@month
  5816  0002FA  0100               	movlb	0	; () banked
  5817  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5818  0002FE  0ECB               	movlw	low STR_9
  5819  000300  0100               	movlb	0	; () banked
  5820  000302  6F82               	movwf	strcpy@from& (0+255),b
  5821  000304  0EFF               	movlw	high STR_9
  5822  000306  0100               	movlb	0	; () banked
  5823  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5824  00030A  EC0B  F017         	call	_strcpy	;wreg free
  5825                           
  5826                           ;UI.c: 130: break;
  5827  00030E  D0D7               	goto	l5554
  5828  000310                     l5528:
  5829                           
  5830                           ;UI.c: 132: strcpy(month, "MAR");
  5831  000310  0ED6               	movlw	low UI@month
  5832  000312  0100               	movlb	0	; () banked
  5833  000314  6F80               	movwf	strcpy@to& (0+255),b
  5834  000316  0E00               	movlw	high UI@month
  5835  000318  0100               	movlb	0	; () banked
  5836  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5837  00031C  0EE7               	movlw	low STR_10
  5838  00031E  0100               	movlb	0	; () banked
  5839  000320  6F82               	movwf	strcpy@from& (0+255),b
  5840  000322  0EFF               	movlw	high STR_10
  5841  000324  0100               	movlb	0	; () banked
  5842  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5843  000328  EC0B  F017         	call	_strcpy	;wreg free
  5844                           
  5845                           ;UI.c: 133: break;
  5846  00032C  D0C8               	goto	l5554
  5847  00032E                     l5530:
  5848                           
  5849                           ;UI.c: 135: strcpy(month, "APR");
  5850  00032E  0ED6               	movlw	low UI@month
  5851  000330  0100               	movlb	0	; () banked
  5852  000332  6F80               	movwf	strcpy@to& (0+255),b
  5853  000334  0E00               	movlw	high UI@month
  5854  000336  0100               	movlb	0	; () banked
  5855  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5856  00033A  0EEB               	movlw	low STR_11
  5857  00033C  0100               	movlb	0	; () banked
  5858  00033E  6F82               	movwf	strcpy@from& (0+255),b
  5859  000340  0EFF               	movlw	high STR_11
  5860  000342  0100               	movlb	0	; () banked
  5861  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5862  000346  EC0B  F017         	call	_strcpy	;wreg free
  5863                           
  5864                           ;UI.c: 136: break;
  5865  00034A  D0B9               	goto	l5554
  5866  00034C                     l5532:
  5867                           
  5868                           ;UI.c: 138: strcpy(month, "MAY");
  5869  00034C  0ED6               	movlw	low UI@month
  5870  00034E  0100               	movlb	0	; () banked
  5871  000350  6F80               	movwf	strcpy@to& (0+255),b
  5872  000352  0E00               	movlw	high UI@month
  5873  000354  0100               	movlb	0	; () banked
  5874  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5875  000358  0EFB               	movlw	low STR_12
  5876  00035A  0100               	movlb	0	; () banked
  5877  00035C  6F82               	movwf	strcpy@from& (0+255),b
  5878  00035E  0EFF               	movlw	high STR_12
  5879  000360  0100               	movlb	0	; () banked
  5880  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5881  000364  EC0B  F017         	call	_strcpy	;wreg free
  5882                           
  5883                           ;UI.c: 139: break;
  5884  000368  D0AA               	goto	l5554
  5885  00036A                     l5534:
  5886                           
  5887                           ;UI.c: 141: strcpy(month, "JUN");
  5888  00036A  0ED6               	movlw	low UI@month
  5889  00036C  0100               	movlb	0	; () banked
  5890  00036E  6F80               	movwf	strcpy@to& (0+255),b
  5891  000370  0E00               	movlw	high UI@month
  5892  000372  0100               	movlb	0	; () banked
  5893  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5894  000376  0EDF               	movlw	low STR_13
  5895  000378  0100               	movlb	0	; () banked
  5896  00037A  6F82               	movwf	strcpy@from& (0+255),b
  5897  00037C  0EFF               	movlw	high STR_13
  5898  00037E  0100               	movlb	0	; () banked
  5899  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5900  000382  EC0B  F017         	call	_strcpy	;wreg free
  5901                           
  5902                           ;UI.c: 142: break;
  5903  000386  D09B               	goto	l5554
  5904  000388                     l5536:
  5905                           
  5906                           ;UI.c: 144: strcpy(month, "JUL");
  5907  000388  0ED6               	movlw	low UI@month
  5908  00038A  0100               	movlb	0	; () banked
  5909  00038C  6F80               	movwf	strcpy@to& (0+255),b
  5910  00038E  0E00               	movlw	high UI@month
  5911  000390  0100               	movlb	0	; () banked
  5912  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5913  000394  0ED7               	movlw	low STR_14
  5914  000396  0100               	movlb	0	; () banked
  5915  000398  6F82               	movwf	strcpy@from& (0+255),b
  5916  00039A  0EFF               	movlw	high STR_14
  5917  00039C  0100               	movlb	0	; () banked
  5918  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5919  0003A0  EC0B  F017         	call	_strcpy	;wreg free
  5920                           
  5921                           ;UI.c: 145: break;
  5922  0003A4  D08C               	goto	l5554
  5923  0003A6                     l5538:
  5924                           
  5925                           ;UI.c: 147: strcpy(month, "AUG");
  5926  0003A6  0ED6               	movlw	low UI@month
  5927  0003A8  0100               	movlb	0	; () banked
  5928  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  5929  0003AC  0E00               	movlw	high UI@month
  5930  0003AE  0100               	movlb	0	; () banked
  5931  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5932  0003B2  0ED3               	movlw	low STR_15
  5933  0003B4  0100               	movlb	0	; () banked
  5934  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  5935  0003B8  0EFF               	movlw	high STR_15
  5936  0003BA  0100               	movlb	0	; () banked
  5937  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5938  0003BE  EC0B  F017         	call	_strcpy	;wreg free
  5939                           
  5940                           ;UI.c: 148: break;
  5941  0003C2  D07D               	goto	l5554
  5942  0003C4                     l5540:
  5943                           
  5944                           ;UI.c: 150: strcpy(month, "SEP");
  5945  0003C4  0ED6               	movlw	low UI@month
  5946  0003C6  0100               	movlb	0	; () banked
  5947  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  5948  0003CA  0E00               	movlw	high UI@month
  5949  0003CC  0100               	movlb	0	; () banked
  5950  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5951  0003D0  0EE3               	movlw	low STR_16
  5952  0003D2  0100               	movlb	0	; () banked
  5953  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  5954  0003D6  0EFF               	movlw	high STR_16
  5955  0003D8  0100               	movlb	0	; () banked
  5956  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5957  0003DC  EC0B  F017         	call	_strcpy	;wreg free
  5958                           
  5959                           ;UI.c: 151: break;
  5960  0003E0  D06E               	goto	l5554
  5961  0003E2                     l5542:
  5962                           
  5963                           ;UI.c: 153: strcpy(month, "OCT");
  5964  0003E2  0ED6               	movlw	low UI@month
  5965  0003E4  0100               	movlb	0	; () banked
  5966  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  5967  0003E8  0E00               	movlw	high UI@month
  5968  0003EA  0100               	movlb	0	; () banked
  5969  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5970  0003EE  0EF3               	movlw	low STR_17
  5971  0003F0  0100               	movlb	0	; () banked
  5972  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  5973  0003F4  0EFF               	movlw	high STR_17
  5974  0003F6  0100               	movlb	0	; () banked
  5975  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5976  0003FA  EC0B  F017         	call	_strcpy	;wreg free
  5977                           
  5978                           ;UI.c: 154: break;
  5979  0003FE  D05F               	goto	l5554
  5980  000400                     l5544:
  5981                           
  5982                           ;UI.c: 156: strcpy(month, "NOV");
  5983  000400  0ED6               	movlw	low UI@month
  5984  000402  0100               	movlb	0	; () banked
  5985  000404  6F80               	movwf	strcpy@to& (0+255),b
  5986  000406  0E00               	movlw	high UI@month
  5987  000408  0100               	movlb	0	; () banked
  5988  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5989  00040C  0EF7               	movlw	low STR_18
  5990  00040E  0100               	movlb	0	; () banked
  5991  000410  6F82               	movwf	strcpy@from& (0+255),b
  5992  000412  0EFF               	movlw	high STR_18
  5993  000414  0100               	movlb	0	; () banked
  5994  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5995  000418  EC0B  F017         	call	_strcpy	;wreg free
  5996                           
  5997                           ;UI.c: 157: break;
  5998  00041C  D050               	goto	l5554
  5999  00041E                     l5546:
  6000                           
  6001                           ;UI.c: 159: strcpy(month, "DEC");
  6002  00041E  0ED6               	movlw	low UI@month
  6003  000420  0100               	movlb	0	; () banked
  6004  000422  6F80               	movwf	strcpy@to& (0+255),b
  6005  000424  0E00               	movlw	high UI@month
  6006  000426  0100               	movlb	0	; () banked
  6007  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6008  00042A  0ECF               	movlw	low STR_19
  6009  00042C  0100               	movlb	0	; () banked
  6010  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6011  000430  0EFF               	movlw	high STR_19
  6012  000432  0100               	movlb	0	; () banked
  6013  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6014  000436  EC0B  F017         	call	_strcpy	;wreg free
  6015                           
  6016                           ;UI.c: 160: break;
  6017  00043A  D041               	goto	l5554
  6018  00043C                     l5548:
  6019                           
  6020                           ;UI.c: 162: strcpy(month, "ERR");
  6021  00043C  0ED6               	movlw	low UI@month
  6022  00043E  0100               	movlb	0	; () banked
  6023  000440  6F80               	movwf	strcpy@to& (0+255),b
  6024  000442  0E00               	movlw	high UI@month
  6025  000444  0100               	movlb	0	; () banked
  6026  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6027  000448  0EEF               	movlw	low STR_20
  6028  00044A  0100               	movlb	0	; () banked
  6029  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6030  00044E  0EFF               	movlw	high STR_20
  6031  000450  0100               	movlb	0	; () banked
  6032  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6033  000454  EC0B  F017         	call	_strcpy	;wreg free
  6034                           
  6035                           ;UI.c: 164: }
  6036                           
  6037                           ;UI.c: 163: break;
  6038  000458  D032               	goto	l5554
  6039  00045A                     l5552:
  6040  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6041  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6042  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6043                           
  6044                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6045                           ; Switch size 1, requested type "space"
  6046                           ; Number of cases is 1, Range of values is 0 to 0
  6047                           ; switch strategies available:
  6048                           ; Name         Instructions Cycles
  6049                           ; simple_byte            4     3 (average)
  6050                           ;	Chosen strategy is simple_byte
  6051  000466  0100               	movlb	0	; () banked
  6052  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6053  00046A  0A00               	xorlw	0	; case 0
  6054  00046C  A4D8               	btfss	status,2,c
  6055  00046E  D7E6               	goto	l5548
  6056                           
  6057                           ; BSR set to: 0
  6058                           ; Switch size 1, requested type "space"
  6059                           ; Number of cases is 12, Range of values is 1 to 12
  6060                           ; switch strategies available:
  6061                           ; Name         Instructions Cycles
  6062                           ; simple_byte           37    19 (average)
  6063                           ;	Chosen strategy is simple_byte
  6064  000470  0100               	movlb	0	; () banked
  6065  000472  51C4               	movf	??_UI& (0+255),w,b
  6066  000474  0A01               	xorlw	1	; case 1
  6067  000476  B4D8               	btfsc	status,2,c
  6068  000478  D72D               	goto	l5524
  6069  00047A  0A03               	xorlw	3	; case 2
  6070  00047C  B4D8               	btfsc	status,2,c
  6071  00047E  D739               	goto	l5526
  6072  000480  0A01               	xorlw	1	; case 3
  6073  000482  B4D8               	btfsc	status,2,c
  6074  000484  D745               	goto	l5528
  6075  000486  0A07               	xorlw	7	; case 4
  6076  000488  B4D8               	btfsc	status,2,c
  6077  00048A  D751               	goto	l5530
  6078  00048C  0A01               	xorlw	1	; case 5
  6079  00048E  B4D8               	btfsc	status,2,c
  6080  000490  D75D               	goto	l5532
  6081  000492  0A03               	xorlw	3	; case 6
  6082  000494  B4D8               	btfsc	status,2,c
  6083  000496  D769               	goto	l5534
  6084  000498  0A01               	xorlw	1	; case 7
  6085  00049A  B4D8               	btfsc	status,2,c
  6086  00049C  D775               	goto	l5536
  6087  00049E  0A0F               	xorlw	15	; case 8
  6088  0004A0  B4D8               	btfsc	status,2,c
  6089  0004A2  D781               	goto	l5538
  6090  0004A4  0A01               	xorlw	1	; case 9
  6091  0004A6  B4D8               	btfsc	status,2,c
  6092  0004A8  D78D               	goto	l5540
  6093  0004AA  0A03               	xorlw	3	; case 10
  6094  0004AC  B4D8               	btfsc	status,2,c
  6095  0004AE  D799               	goto	l5542
  6096  0004B0  0A01               	xorlw	1	; case 11
  6097  0004B2  B4D8               	btfsc	status,2,c
  6098  0004B4  D7A5               	goto	l5544
  6099  0004B6  0A07               	xorlw	7	; case 12
  6100  0004B8  B4D8               	btfsc	status,2,c
  6101  0004BA  D7B1               	goto	l5546
  6102  0004BC  D7BF               	goto	l5548
  6103  0004BE                     l5554:
  6104                           
  6105                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6106  0004BE  0EAE               	movlw	low STR_21
  6107  0004C0  0100               	movlb	0	; () banked
  6108  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6109  0004C4  0EFD               	movlw	high STR_21
  6110  0004C6  0100               	movlb	0	; () banked
  6111  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6112  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6113  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6114  0004D2  0ED6               	movlw	low UI@month
  6115  0004D4  0100               	movlb	0	; () banked
  6116  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6117  0004D8  0E00               	movlw	high UI@month
  6118  0004DA  0100               	movlb	0	; () banked
  6119  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6120  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6121  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6122  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6123  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6124  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6125  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6126  0004F6  EC5C  F004         	call	_printf	;wreg free
  6127                           
  6128                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6129  0004FA  0E00               	movlw	0
  6130  0004FC  0100               	movlb	0	; () banked
  6131  0004FE  6FCC               	movwf	UI@i_428& (0+255),b
  6132  000500                     l5558:
  6133                           
  6134                           ; BSR set to: 0
  6135  000500  0E63               	movlw	99
  6136  000502  0100               	movlb	0	; () banked
  6137  000504  65CC               	cpfsgt	UI@i_428& (0+255),b
  6138  000506  D001               	goto	l5562
  6139  000508  D00C               	goto	l5566
  6140  00050A                     l5562:
  6141                           
  6142                           ; BSR set to: 0
  6143  00050A  0E68               	movlw	104
  6144  00050C  0100               	movlb	0	; () banked
  6145  00050E  6FC4               	movwf	??_UI& (0+255),b
  6146  000510  0EE4               	movlw	228
  6147  000512                     u5357:
  6148  000512  2EE8               	decfsz	wreg,f,c
  6149  000514  D7FE               	bra	u5357
  6150  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6151  000518  D7FC               	bra	u5357
  6152  00051A  F000               	nop	
  6153  00051C  0100               	movlb	0	; () banked
  6154  00051E  2BCC               	incf	UI@i_428& (0+255),f,b
  6155  000520  D7EF               	goto	l5558
  6156  000522                     l5566:
  6157                           
  6158                           ; BSR set to: 0
  6159  000522  0100               	movlb	0	; () banked
  6160  000524  51F8               	movf	_logstate& (0+255),w,b
  6161  000526  0100               	movlb	0	; () banked
  6162  000528  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6163  00052A  B4D8               	btfsc	status,2,c
  6164  00052C  0012               	return	
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6168                           
  6169                           ; BSR set to: 0
  6170                           
  6171                           ; BSR set to: 0
  6172  00052E  0E00               	movlw	0
  6173  000530  0100               	movlb	0	; () banked
  6174  000532  6FCD               	movwf	UI@i_429& (0+255),b
  6175  000534                     l5572:
  6176                           
  6177                           ; BSR set to: 0
  6178  000534  0E63               	movlw	99
  6179  000536  0100               	movlb	0	; () banked
  6180  000538  65CD               	cpfsgt	UI@i_429& (0+255),b
  6181  00053A  D001               	goto	l5576
  6182  00053C  D00C               	goto	l5580
  6183  00053E                     l5576:
  6184                           
  6185                           ; BSR set to: 0
  6186  00053E  0E68               	movlw	104
  6187  000540  0100               	movlb	0	; () banked
  6188  000542  6FC4               	movwf	??_UI& (0+255),b
  6189  000544  0EE4               	movlw	228
  6190  000546                     u5367:
  6191  000546  2EE8               	decfsz	wreg,f,c
  6192  000548  D7FE               	bra	u5367
  6193  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6194  00054C  D7FC               	bra	u5367
  6195  00054E  F000               	nop	
  6196  000550  0100               	movlb	0	; () banked
  6197  000552  2BCD               	incf	UI@i_429& (0+255),f,b
  6198  000554  D7EF               	goto	l5572
  6199  000556                     l5580:
  6200                           
  6201                           ; BSR set to: 0
  6202  000556  0100               	movlb	0	; () banked
  6203  000558  51F8               	movf	_logstate& (0+255),w,b
  6204  00055A  0100               	movlb	0	; () banked
  6205  00055C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6206  00055E  B4D8               	btfsc	status,2,c
  6207  000560  0012               	return	
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6211                           
  6212                           ; BSR set to: 0
  6213                           
  6214                           ; BSR set to: 0
  6215  000562  0E01               	movlw	1
  6216  000564  EC6D  F019         	call	_lcdInst
  6217  000568  0E68               	movlw	104
  6218  00056A  0100               	movlb	0	; () banked
  6219  00056C  6FC4               	movwf	??_UI& (0+255),b
  6220  00056E  0EE4               	movlw	228
  6221  000570                     u5377:
  6222  000570  2EE8               	decfsz	wreg,f,c
  6223  000572  D7FE               	bra	u5377
  6224  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6225  000576  D7FC               	bra	u5377
  6226  000578  F000               	nop	
  6227                           
  6228                           ;UI.c: 171: lcdInst(0b10000000);;
  6229  00057A  0E80               	movlw	128
  6230  00057C  EC6D  F019         	call	_lcdInst
  6231                           
  6232                           ;UI.c: 172: printf("DURATION:");
  6233  000580  0EAC               	movlw	low STR_22
  6234  000582  0100               	movlb	0	; () banked
  6235  000584  6F8E               	movwf	printf@f& (0+255),b
  6236  000586  0EFF               	movlw	high STR_22
  6237  000588  0100               	movlb	0	; () banked
  6238  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6239  00058C  EC5C  F004         	call	_printf	;wreg free
  6240                           
  6241                           ;UI.c: 173: lcdInst(0b11000000);;
  6242  000590  0EC0               	movlw	192
  6243  000592  EC6D  F019         	call	_lcdInst
  6244                           
  6245                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6246  000596  0E0E               	movlw	14
  6247  000598  0100               	movlb	0	; () banked
  6248  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6249  00059C  0E10               	movlw	16
  6250  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6251  0005A0  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6252  0005A4  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6253  0005A8  ECFD  F012         	call	___awmod	;wreg free
  6254  0005AC  C080  F0C6         	movff	?___awmod,_UI$2004
  6255  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2004+1
  6256                           
  6257                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6258  0005B4  0E78               	movlw	low STR_23
  6259  0005B6  0100               	movlb	0	; () banked
  6260  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6261  0005BA  0EFF               	movlw	high STR_23
  6262  0005BC  0100               	movlb	0	; () banked
  6263  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6264  0005C0  0E0E               	movlw	14
  6265  0005C2  0100               	movlb	0	; () banked
  6266  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6267  0005C6  0E10               	movlw	16
  6268  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6269  0005CA  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6270  0005CE  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6271  0005D2  ECFD  F012         	call	___awmod	;wreg free
  6272  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6273  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6274  0005DE  0E00               	movlw	0
  6275  0005E0  0100               	movlb	0	; () banked
  6276  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6277  0005E4  0E3C               	movlw	60
  6278  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6279  0005E8  ECEB  F011         	call	___awdiv	;wreg free
  6280  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6281  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6282  0005F4  C0C6  F080         	movff	_UI$2004,___awmod@dividend
  6283  0005F8  C0C7  F081         	movff	_UI$2004+1,___awmod@dividend+1
  6284  0005FC  0E00               	movlw	0
  6285  0005FE  0100               	movlb	0	; () banked
  6286  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6287  000602  0E3C               	movlw	60
  6288  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6289  000606  ECFD  F012         	call	___awmod	;wreg free
  6290  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6291  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6292  000612  EC5C  F004         	call	_printf	;wreg free
  6293                           
  6294                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6295  000616  0E00               	movlw	0
  6296  000618  0100               	movlb	0	; () banked
  6297  00061A  6FCE               	movwf	UI@i_432& (0+255),b
  6298  00061C                     l5600:
  6299                           
  6300                           ; BSR set to: 0
  6301  00061C  0E63               	movlw	99
  6302  00061E  0100               	movlb	0	; () banked
  6303  000620  65CE               	cpfsgt	UI@i_432& (0+255),b
  6304  000622  D001               	goto	l5604
  6305  000624  D00C               	goto	l5608
  6306  000626                     l5604:
  6307                           
  6308                           ; BSR set to: 0
  6309  000626  0E68               	movlw	104
  6310  000628  0100               	movlb	0	; () banked
  6311  00062A  6FC4               	movwf	??_UI& (0+255),b
  6312  00062C  0EE4               	movlw	228
  6313  00062E                     u5387:
  6314  00062E  2EE8               	decfsz	wreg,f,c
  6315  000630  D7FE               	bra	u5387
  6316  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6317  000634  D7FC               	bra	u5387
  6318  000636  F000               	nop	
  6319  000638  0100               	movlb	0	; () banked
  6320  00063A  2BCE               	incf	UI@i_432& (0+255),f,b
  6321  00063C  D7EF               	goto	l5600
  6322  00063E                     l5608:
  6323                           
  6324                           ; BSR set to: 0
  6325  00063E  0100               	movlb	0	; () banked
  6326  000640  51F8               	movf	_logstate& (0+255),w,b
  6327  000642  0100               	movlb	0	; () banked
  6328  000644  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6329  000646  B4D8               	btfsc	status,2,c
  6330  000648  0012               	return	
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6334                           
  6335                           ; BSR set to: 0
  6336                           
  6337                           ; BSR set to: 0
  6338  00064A  0E00               	movlw	0
  6339  00064C  0100               	movlb	0	; () banked
  6340  00064E  6FCF               	movwf	UI@i_433& (0+255),b
  6341  000650                     l5614:
  6342                           
  6343                           ; BSR set to: 0
  6344  000650  0E63               	movlw	99
  6345  000652  0100               	movlb	0	; () banked
  6346  000654  65CF               	cpfsgt	UI@i_433& (0+255),b
  6347  000656  D001               	goto	l5618
  6348  000658  D00C               	goto	l5622
  6349  00065A                     l5618:
  6350                           
  6351                           ; BSR set to: 0
  6352  00065A  0E68               	movlw	104
  6353  00065C  0100               	movlb	0	; () banked
  6354  00065E  6FC4               	movwf	??_UI& (0+255),b
  6355  000660  0EE4               	movlw	228
  6356  000662                     u5397:
  6357  000662  2EE8               	decfsz	wreg,f,c
  6358  000664  D7FE               	bra	u5397
  6359  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6360  000668  D7FC               	bra	u5397
  6361  00066A  F000               	nop	
  6362  00066C  0100               	movlb	0	; () banked
  6363  00066E  2BCF               	incf	UI@i_433& (0+255),f,b
  6364  000670  D7EF               	goto	l5614
  6365  000672                     l5622:
  6366                           
  6367                           ; BSR set to: 0
  6368  000672  0100               	movlb	0	; () banked
  6369  000674  51F8               	movf	_logstate& (0+255),w,b
  6370  000676  0100               	movlb	0	; () banked
  6371  000678  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6372  00067A  B4D8               	btfsc	status,2,c
  6373  00067C  0012               	return	
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6377                           
  6378                           ; BSR set to: 0
  6379                           
  6380                           ; BSR set to: 0
  6381  00067E  0E01               	movlw	1
  6382  000680  EC6D  F019         	call	_lcdInst
  6383  000684  0E68               	movlw	104
  6384  000686  0100               	movlb	0	; () banked
  6385  000688  6FC4               	movwf	??_UI& (0+255),b
  6386  00068A  0EE4               	movlw	228
  6387  00068C                     u5407:
  6388  00068C  2EE8               	decfsz	wreg,f,c
  6389  00068E  D7FE               	bra	u5407
  6390  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6391  000692  D7FC               	bra	u5407
  6392  000694  F000               	nop	
  6393                           
  6394                           ;UI.c: 180: lcdInst(0b10000000);;
  6395  000696  0E80               	movlw	128
  6396  000698  EC6D  F019         	call	_lcdInst
  6397                           
  6398                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6399  00069C  0E9C               	movlw	low STR_24
  6400  00069E  0100               	movlb	0	; () banked
  6401  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6402  0006A2  0EFE               	movlw	high STR_24
  6403  0006A4  0100               	movlb	0	; () banked
  6404  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6405  0006A8  EC5C  F004         	call	_printf	;wreg free
  6406                           
  6407                           ;UI.c: 182: lcdInst(0b11000000);;
  6408  0006AC  0EC0               	movlw	192
  6409  0006AE  EC6D  F019         	call	_lcdInst
  6410                           
  6411                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6412  0006B2  0EEE               	movlw	low STR_25
  6413  0006B4  0100               	movlb	0	; () banked
  6414  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6415  0006B8  0EFD               	movlw	high STR_25
  6416  0006BA  0100               	movlb	0	; () banked
  6417  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6418  0006BE  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6419  0006C2  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6420  0006C6  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6421  0006CA  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6422  0006CE  EC5C  F004         	call	_printf	;wreg free
  6423                           
  6424                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6425  0006D2  0E00               	movlw	0
  6426  0006D4  0100               	movlb	0	; () banked
  6427  0006D6  6FD0               	movwf	UI@i_436& (0+255),b
  6428  0006D8                     l5640:
  6429                           
  6430                           ; BSR set to: 0
  6431  0006D8  0E63               	movlw	99
  6432  0006DA  0100               	movlb	0	; () banked
  6433  0006DC  65D0               	cpfsgt	UI@i_436& (0+255),b
  6434  0006DE  D001               	goto	l5644
  6435  0006E0  D00C               	goto	l5648
  6436  0006E2                     l5644:
  6437                           
  6438                           ; BSR set to: 0
  6439  0006E2  0E68               	movlw	104
  6440  0006E4  0100               	movlb	0	; () banked
  6441  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6442  0006E8  0EE4               	movlw	228
  6443  0006EA                     u5417:
  6444  0006EA  2EE8               	decfsz	wreg,f,c
  6445  0006EC  D7FE               	bra	u5417
  6446  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6447  0006F0  D7FC               	bra	u5417
  6448  0006F2  F000               	nop	
  6449  0006F4  0100               	movlb	0	; () banked
  6450  0006F6  2BD0               	incf	UI@i_436& (0+255),f,b
  6451  0006F8  D7EF               	goto	l5640
  6452  0006FA                     l5648:
  6453                           
  6454                           ; BSR set to: 0
  6455  0006FA  0100               	movlb	0	; () banked
  6456  0006FC  51F8               	movf	_logstate& (0+255),w,b
  6457  0006FE  0100               	movlb	0	; () banked
  6458  000700  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6459  000702  B4D8               	btfsc	status,2,c
  6460  000704  0012               	return	
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6464                           
  6465                           ; BSR set to: 0
  6466                           
  6467                           ; BSR set to: 0
  6468  000706  0E00               	movlw	0
  6469  000708  0100               	movlb	0	; () banked
  6470  00070A  6FD1               	movwf	UI@i_437& (0+255),b
  6471  00070C                     l5654:
  6472                           
  6473                           ; BSR set to: 0
  6474  00070C  0E63               	movlw	99
  6475  00070E  0100               	movlb	0	; () banked
  6476  000710  65D1               	cpfsgt	UI@i_437& (0+255),b
  6477  000712  D001               	goto	l5658
  6478  000714  D00C               	goto	l5662
  6479  000716                     l5658:
  6480                           
  6481                           ; BSR set to: 0
  6482  000716  0E68               	movlw	104
  6483  000718  0100               	movlb	0	; () banked
  6484  00071A  6FC4               	movwf	??_UI& (0+255),b
  6485  00071C  0EE4               	movlw	228
  6486  00071E                     u5427:
  6487  00071E  2EE8               	decfsz	wreg,f,c
  6488  000720  D7FE               	bra	u5427
  6489  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6490  000724  D7FC               	bra	u5427
  6491  000726  F000               	nop	
  6492  000728  0100               	movlb	0	; () banked
  6493  00072A  2BD1               	incf	UI@i_437& (0+255),f,b
  6494  00072C  D7EF               	goto	l5654
  6495  00072E                     l5662:
  6496                           
  6497                           ; BSR set to: 0
  6498  00072E  0100               	movlb	0	; () banked
  6499  000730  51F8               	movf	_logstate& (0+255),w,b
  6500  000732  0100               	movlb	0	; () banked
  6501  000734  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6502  000736  B4D8               	btfsc	status,2,c
  6503  000738  0012               	return	
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6507                           
  6508                           ; BSR set to: 0
  6509                           
  6510                           ; BSR set to: 0
  6511  00073A  0E01               	movlw	1
  6512  00073C  EC6D  F019         	call	_lcdInst
  6513  000740  0E68               	movlw	104
  6514  000742  0100               	movlb	0	; () banked
  6515  000744  6FC4               	movwf	??_UI& (0+255),b
  6516  000746  0EE4               	movlw	228
  6517  000748                     u5437:
  6518  000748  2EE8               	decfsz	wreg,f,c
  6519  00074A  D7FE               	bra	u5437
  6520  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  6521  00074E  D7FC               	bra	u5437
  6522  000750  F000               	nop	
  6523                           
  6524                           ;UI.c: 189: lcdInst(0b10000000);;
  6525  000752  0E80               	movlw	128
  6526  000754  EC6D  F019         	call	_lcdInst
  6527                           
  6528                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  6529  000758  0EAD               	movlw	low STR_26
  6530  00075A  0100               	movlb	0	; () banked
  6531  00075C  6F8E               	movwf	printf@f& (0+255),b
  6532  00075E  0EFE               	movlw	high STR_26
  6533  000760  0100               	movlb	0	; () banked
  6534  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  6535  000764  EC5C  F004         	call	_printf	;wreg free
  6536                           
  6537                           ;UI.c: 191: lcdInst(0b11000000);;
  6538  000768  0EC0               	movlw	192
  6539  00076A  EC6D  F019         	call	_lcdInst
  6540                           
  6541                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6542  00076E  0EDB               	movlw	low STR_27
  6543  000770  0100               	movlb	0	; () banked
  6544  000772  6F8E               	movwf	printf@f& (0+255),b
  6545  000774  0EFD               	movlw	high STR_27
  6546  000776  0100               	movlb	0	; () banked
  6547  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  6548  00077A  C0EC  F090         	movff	_log_count_can_no_lab,?_printf+2
  6549  00077E  C0ED  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6550  000782  C0EE  F092         	movff	_log_count_can_w_lab,?_printf+4
  6551  000786  C0EF  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6552  00078A  EC5C  F004         	call	_printf	;wreg free
  6553                           
  6554                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6555  00078E  0E00               	movlw	0
  6556  000790  0100               	movlb	0	; () banked
  6557  000792  6FD2               	movwf	UI@i_440& (0+255),b
  6558  000794                     l5680:
  6559                           
  6560                           ; BSR set to: 0
  6561  000794  0E63               	movlw	99
  6562  000796  0100               	movlb	0	; () banked
  6563  000798  65D2               	cpfsgt	UI@i_440& (0+255),b
  6564  00079A  D001               	goto	l5684
  6565  00079C  D00C               	goto	l5688
  6566  00079E                     l5684:
  6567                           
  6568                           ; BSR set to: 0
  6569  00079E  0E68               	movlw	104
  6570  0007A0  0100               	movlb	0	; () banked
  6571  0007A2  6FC4               	movwf	??_UI& (0+255),b
  6572  0007A4  0EE4               	movlw	228
  6573  0007A6                     u5447:
  6574  0007A6  2EE8               	decfsz	wreg,f,c
  6575  0007A8  D7FE               	bra	u5447
  6576  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  6577  0007AC  D7FC               	bra	u5447
  6578  0007AE  F000               	nop	
  6579  0007B0  0100               	movlb	0	; () banked
  6580  0007B2  2BD2               	incf	UI@i_440& (0+255),f,b
  6581  0007B4  D7EF               	goto	l5680
  6582  0007B6                     l5688:
  6583                           
  6584                           ; BSR set to: 0
  6585  0007B6  0100               	movlb	0	; () banked
  6586  0007B8  51F8               	movf	_logstate& (0+255),w,b
  6587  0007BA  0100               	movlb	0	; () banked
  6588  0007BC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6589  0007BE  B4D8               	btfsc	status,2,c
  6590  0007C0  0012               	return	
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  0007C2  0E00               	movlw	0
  6599  0007C4  0100               	movlb	0	; () banked
  6600  0007C6  6FD3               	movwf	UI@i_441& (0+255),b
  6601  0007C8                     l5694:
  6602                           
  6603                           ; BSR set to: 0
  6604  0007C8  0E63               	movlw	99
  6605  0007CA  0100               	movlb	0	; () banked
  6606  0007CC  65D3               	cpfsgt	UI@i_441& (0+255),b
  6607  0007CE  D001               	goto	l5698
  6608  0007D0  D00C               	goto	l5702
  6609  0007D2                     l5698:
  6610                           
  6611                           ; BSR set to: 0
  6612  0007D2  0E68               	movlw	104
  6613  0007D4  0100               	movlb	0	; () banked
  6614  0007D6  6FC4               	movwf	??_UI& (0+255),b
  6615  0007D8  0EE4               	movlw	228
  6616  0007DA                     u5457:
  6617  0007DA  2EE8               	decfsz	wreg,f,c
  6618  0007DC  D7FE               	bra	u5457
  6619  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  6620  0007E0  D7FC               	bra	u5457
  6621  0007E2  F000               	nop	
  6622  0007E4  0100               	movlb	0	; () banked
  6623  0007E6  2BD3               	incf	UI@i_441& (0+255),f,b
  6624  0007E8  D7EF               	goto	l5694
  6625  0007EA                     l5702:
  6626                           
  6627                           ; BSR set to: 0
  6628  0007EA  0100               	movlb	0	; () banked
  6629  0007EC  51F8               	movf	_logstate& (0+255),w,b
  6630  0007EE  0100               	movlb	0	; () banked
  6631  0007F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6632  0007F2  B4D8               	btfsc	status,2,c
  6633  0007F4  0012               	return	
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6637                           
  6638                           ; BSR set to: 0
  6639                           
  6640                           ; BSR set to: 0
  6641  0007F6  0E01               	movlw	1
  6642  0007F8  EC6D  F019         	call	_lcdInst
  6643  0007FC  0E68               	movlw	104
  6644  0007FE  0100               	movlb	0	; () banked
  6645  000800  6FC4               	movwf	??_UI& (0+255),b
  6646  000802  0EE4               	movlw	228
  6647  000804                     u5467:
  6648  000804  2EE8               	decfsz	wreg,f,c
  6649  000806  D7FE               	bra	u5467
  6650  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  6651  00080A  D7FC               	bra	u5467
  6652  00080C  F000               	nop	
  6653                           
  6654                           ;UI.c: 198: lcdInst(0b10000000);;
  6655  00080E  0E80               	movlw	128
  6656  000810  EC6D  F019         	call	_lcdInst
  6657                           
  6658                           ;UI.c: 199: printf("-- TOTAL CANS --");
  6659  000814  0EBE               	movlw	low STR_28
  6660  000816  0100               	movlb	0	; () banked
  6661  000818  6F8E               	movwf	printf@f& (0+255),b
  6662  00081A  0EFE               	movlw	high STR_28
  6663  00081C  0100               	movlb	0	; () banked
  6664  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6665  000820  EC5C  F004         	call	_printf	;wreg free
  6666                           
  6667                           ;UI.c: 200: lcdInst(0b11000000);;
  6668  000824  0EC0               	movlw	192
  6669  000826  EC6D  F019         	call	_lcdInst
  6670                           
  6671                           ;UI.c: 201: printf("%d", log_count_total);
  6672  00082A  0EEB               	movlw	low (STR_27+16)
  6673  00082C  0100               	movlb	0	; () banked
  6674  00082E  6F8E               	movwf	printf@f& (0+255),b
  6675  000830  0EFD               	movlw	high (STR_27+16)
  6676  000832  0100               	movlb	0	; () banked
  6677  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  6678  000836  C0F4  F090         	movff	_log_count_total,?_printf+2
  6679  00083A  C0F5  F091         	movff	_log_count_total+1,?_printf+3
  6680  00083E  EC5C  F004         	call	_printf	;wreg free
  6681                           
  6682                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6683  000842  0E00               	movlw	0
  6684  000844  0100               	movlb	0	; () banked
  6685  000846  6FD4               	movwf	UI@i_444& (0+255),b
  6686  000848                     l5720:
  6687                           
  6688                           ; BSR set to: 0
  6689  000848  0E63               	movlw	99
  6690  00084A  0100               	movlb	0	; () banked
  6691  00084C  65D4               	cpfsgt	UI@i_444& (0+255),b
  6692  00084E  D001               	goto	l5724
  6693  000850  D00C               	goto	l5728
  6694  000852                     l5724:
  6695                           
  6696                           ; BSR set to: 0
  6697  000852  0E68               	movlw	104
  6698  000854  0100               	movlb	0	; () banked
  6699  000856  6FC4               	movwf	??_UI& (0+255),b
  6700  000858  0EE4               	movlw	228
  6701  00085A                     u5477:
  6702  00085A  2EE8               	decfsz	wreg,f,c
  6703  00085C  D7FE               	bra	u5477
  6704  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  6705  000860  D7FC               	bra	u5477
  6706  000862  F000               	nop	
  6707  000864  0100               	movlb	0	; () banked
  6708  000866  2BD4               	incf	UI@i_444& (0+255),f,b
  6709  000868  D7EF               	goto	l5720
  6710  00086A                     l5728:
  6711                           
  6712                           ; BSR set to: 0
  6713  00086A  0100               	movlb	0	; () banked
  6714  00086C  51F8               	movf	_logstate& (0+255),w,b
  6715  00086E  0100               	movlb	0	; () banked
  6716  000870  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6717  000872  B4D8               	btfsc	status,2,c
  6718  000874  0012               	return	
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6722                           
  6723                           ; BSR set to: 0
  6724                           
  6725                           ; BSR set to: 0
  6726  000876  0E00               	movlw	0
  6727  000878  0100               	movlb	0	; () banked
  6728  00087A  6FD5               	movwf	UI@i_445& (0+255),b
  6729  00087C                     l5734:
  6730                           
  6731                           ; BSR set to: 0
  6732  00087C  0E63               	movlw	99
  6733  00087E  0100               	movlb	0	; () banked
  6734  000880  65D5               	cpfsgt	UI@i_445& (0+255),b
  6735  000882  D001               	goto	l5738
  6736  000884  D00C               	goto	l5742
  6737  000886                     l5738:
  6738                           
  6739                           ; BSR set to: 0
  6740  000886  0E68               	movlw	104
  6741  000888  0100               	movlb	0	; () banked
  6742  00088A  6FC4               	movwf	??_UI& (0+255),b
  6743  00088C  0EE4               	movlw	228
  6744  00088E                     u5487:
  6745  00088E  2EE8               	decfsz	wreg,f,c
  6746  000890  D7FE               	bra	u5487
  6747  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  6748  000894  D7FC               	bra	u5487
  6749  000896  F000               	nop	
  6750  000898  0100               	movlb	0	; () banked
  6751  00089A  2BD5               	incf	UI@i_445& (0+255),f,b
  6752  00089C  D7EF               	goto	l5734
  6753  00089E                     l5742:
  6754                           
  6755                           ; BSR set to: 0
  6756  00089E  0100               	movlb	0	; () banked
  6757  0008A0  51F8               	movf	_logstate& (0+255),w,b
  6758  0008A2  0100               	movlb	0	; () banked
  6759  0008A4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6760  0008A6  B4D8               	btfsc	status,2,c
  6761  0008A8  0012               	return	
  6762  0008AA                     l5746:
  6763  0008AA  0100               	movlb	0	; () banked
  6764  0008AC  51F8               	movf	_logstate& (0+255),w,b
  6765  0008AE  0100               	movlb	0	; () banked
  6766  0008B0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6767  0008B2  B4D8               	btfsc	status,2,c
  6768  0008B4  0012               	return	
  6769  0008B6  D44A               	goto	l5442
  6770  0008B8                     __end_of_UI:
  6771                           	opt stack 0
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           intcon2	equ	0xFF1
  6780                           intcon3	equ	0xFF0
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           postdec1	equ	0xFE5
  6784                           fsr1l	equ	0xFE1
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _printRTC *****************
  6793 ;; Defined at:
  6794 ;;		line 63 in file "RTC.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  i               2   66[BANK0 ] int 
  6799 ;;  INT_time       14   46[BANK0 ] int [7]
  6800 ;;  month           4   62[BANK0 ] unsigned char [4]
  6801 ;;  RTC_month       2   60[BANK0 ] int 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:       25 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:   10
  6818 ;; This function calls:
  6819 ;;		_getRTC
  6820 ;;		_lcdInst
  6821 ;;		_printf
  6822 ;;		_strcpy
  6823 ;; This function is called by:
  6824 ;;		_UI
  6825 ;;		_change_state_to_menu_start
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text24
  6830  00105E                     __ptext24:
  6831                           	opt stack 0
  6832  00105E                     _printRTC:
  6833                           	opt stack 18
  6834                           
  6835                           ;RTC.c: 64: getRTC();
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;incstack = 0
  6839  00105E  ECDF  F013         	call	_getRTC	;wreg free
  6840                           
  6841                           ;RTC.c: 65: char month[] = "MMM";
  6842  001062  C12C  F0BE         	movff	printRTC@F3211,printRTC@month
  6843  001066  C12D  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  6844  00106A  C12E  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  6845  00106E  C12F  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  6846                           
  6847                           ;RTC.c: 66: int INT_time[7];
  6848                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  6849  001072  0E00               	movlw	0
  6850  001074  0100               	movlb	0	; () banked
  6851  001076  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  6852  001078  0E00               	movlw	0
  6853  00107A  6FC2               	movwf	printRTC@i& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856  00107C  0100               	movlb	0	; () banked
  6857  00107E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6858  001080  D008               	goto	l4654
  6859  001082  0100               	movlb	0	; () banked
  6860  001084  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6861  001086  E146               	bnz	l597
  6862  001088  0E07               	movlw	7
  6863  00108A  0100               	movlb	0	; () banked
  6864  00108C  5DC2               	subwf	printRTC@i& (0+255),w,b
  6865  00108E  B0D8               	btfsc	status,0,c
  6866  001090  D041               	goto	l597
  6867  001092                     l4654:
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6871  001092  0E5B               	movlw	low _time
  6872  001094  0100               	movlb	0	; () banked
  6873  001096  25C2               	addwf	printRTC@i& (0+255),w,b
  6874  001098  6ED9               	movwf	fsr2l,c
  6875  00109A  0E00               	movlw	high _time
  6876  00109C  0100               	movlb	0	; () banked
  6877  00109E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6878  0010A0  6EDA               	movwf	fsr2h,c
  6879  0010A2  50DF               	movf	indf2,w,c
  6880  0010A4  0100               	movlb	0	; () banked
  6881  0010A6  6FAB               	movwf	??_printRTC& (0+255),b
  6882  0010A8  0100               	movlb	0	; () banked
  6883  0010AA  3BAB               	swapf	??_printRTC& (0+255),f,b
  6884  0010AC  0E0F               	movlw	15
  6885  0010AE  17AB               	andwf	??_printRTC& (0+255),f,b
  6886  0010B0  0E0F               	movlw	15
  6887  0010B2  0100               	movlb	0	; () banked
  6888  0010B4  17AB               	andwf	??_printRTC& (0+255),f,b
  6889  0010B6  0100               	movlb	0	; () banked
  6890  0010B8  51AB               	movf	??_printRTC& (0+255),w,b
  6891  0010BA  0D0A               	mullw	10
  6892  0010BC  0E5B               	movlw	low _time
  6893  0010BE  0100               	movlb	0	; () banked
  6894  0010C0  25C2               	addwf	printRTC@i& (0+255),w,b
  6895  0010C2  6ED9               	movwf	fsr2l,c
  6896  0010C4  0E00               	movlw	high _time
  6897  0010C6  0100               	movlb	0	; () banked
  6898  0010C8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  6899  0010CA  6EDA               	movwf	fsr2h,c
  6900  0010CC  50DF               	movf	indf2,w,c
  6901  0010CE  0B0F               	andlw	15
  6902  0010D0  0100               	movlb	0	; () banked
  6903  0010D2  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  6904  0010D4  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  6905  0010D6  50F3               	movf	prodl,w,c
  6906  0010D8  0100               	movlb	0	; () banked
  6907  0010DA  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  6908  0010DC  50F4               	movf	prodh,w,c
  6909  0010DE  0100               	movlb	0	; () banked
  6910  0010E0  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  6911  0010E2  90D8               	bcf	status,0,c
  6912  0010E4  0100               	movlb	0	; () banked
  6913  0010E6  35C2               	rlcf	printRTC@i& (0+255),w,b
  6914  0010E8  6ED9               	movwf	fsr2l,c
  6915  0010EA  0100               	movlb	0	; () banked
  6916  0010EC  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  6917  0010EE  6EDA               	movwf	fsr2h,c
  6918  0010F0  0EAE               	movlw	low printRTC@INT_time
  6919  0010F2  26D9               	addwf	fsr2l,f,c
  6920  0010F4  0E00               	movlw	high printRTC@INT_time
  6921  0010F6  22DA               	addwfc	fsr2h,f,c
  6922  0010F8  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  6923  0010FC  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  6924                           
  6925                           ; BSR set to: 0
  6926  001100  0100               	movlb	0	; () banked
  6927  001102  4BC2               	infsnz	printRTC@i& (0+255),f,b
  6928  001104  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  6929                           
  6930                           ; BSR set to: 0
  6931  001106  0100               	movlb	0	; () banked
  6932  001108  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  6933  00110A  D7C3               	goto	l4654
  6934  00110C  0100               	movlb	0	; () banked
  6935  00110E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  6936  001110  E101               	bnz	u3520
  6937  001112  D7BA               	goto	L5
  6938  001114                     u3520:
  6939  001114                     l597:
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;RTC.c: 69: }
  6943                           ;RTC.c: 70: int RTC_month = INT_time[5];
  6944  001114  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  6945  001118  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  6946                           
  6947                           ;RTC.c: 71: switch(RTC_month){
  6948  00111C  D0B4               	goto	l4686
  6949  00111E                     l4660:
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;RTC.c: 73: strcpy(month, "JAN");
  6953  00111E  0EBE               	movlw	low printRTC@month
  6954  001120  0100               	movlb	0	; () banked
  6955  001122  6F80               	movwf	strcpy@to& (0+255),b
  6956  001124  0E00               	movlw	high printRTC@month
  6957  001126  0100               	movlb	0	; () banked
  6958  001128  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6959  00112A  0EDB               	movlw	low STR_8
  6960  00112C  0100               	movlb	0	; () banked
  6961  00112E  6F82               	movwf	strcpy@from& (0+255),b
  6962  001130  0EFF               	movlw	high STR_8
  6963  001132  0100               	movlb	0	; () banked
  6964  001134  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6965  001136  EC0B  F017         	call	_strcpy	;wreg free
  6966                           
  6967                           ;RTC.c: 74: break;
  6968  00113A  D0D4               	goto	l4688
  6969  00113C                     l4662:
  6970                           
  6971                           ;RTC.c: 76: strcpy(month, "FEB");
  6972  00113C  0EBE               	movlw	low printRTC@month
  6973  00113E  0100               	movlb	0	; () banked
  6974  001140  6F80               	movwf	strcpy@to& (0+255),b
  6975  001142  0E00               	movlw	high printRTC@month
  6976  001144  0100               	movlb	0	; () banked
  6977  001146  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6978  001148  0ECB               	movlw	low STR_9
  6979  00114A  0100               	movlb	0	; () banked
  6980  00114C  6F82               	movwf	strcpy@from& (0+255),b
  6981  00114E  0EFF               	movlw	high STR_9
  6982  001150  0100               	movlb	0	; () banked
  6983  001152  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6984  001154  EC0B  F017         	call	_strcpy	;wreg free
  6985                           
  6986                           ;RTC.c: 77: break;
  6987  001158  D0C5               	goto	l4688
  6988  00115A                     l4664:
  6989                           
  6990                           ;RTC.c: 79: strcpy(month, "MAR");
  6991  00115A  0EBE               	movlw	low printRTC@month
  6992  00115C  0100               	movlb	0	; () banked
  6993  00115E  6F80               	movwf	strcpy@to& (0+255),b
  6994  001160  0E00               	movlw	high printRTC@month
  6995  001162  0100               	movlb	0	; () banked
  6996  001164  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6997  001166  0EE7               	movlw	low STR_10
  6998  001168  0100               	movlb	0	; () banked
  6999  00116A  6F82               	movwf	strcpy@from& (0+255),b
  7000  00116C  0EFF               	movlw	high STR_10
  7001  00116E  0100               	movlb	0	; () banked
  7002  001170  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7003  001172  EC0B  F017         	call	_strcpy	;wreg free
  7004                           
  7005                           ;RTC.c: 80: break;
  7006  001176  D0B6               	goto	l4688
  7007  001178                     l4666:
  7008                           
  7009                           ;RTC.c: 82: strcpy(month, "APR");
  7010  001178  0EBE               	movlw	low printRTC@month
  7011  00117A  0100               	movlb	0	; () banked
  7012  00117C  6F80               	movwf	strcpy@to& (0+255),b
  7013  00117E  0E00               	movlw	high printRTC@month
  7014  001180  0100               	movlb	0	; () banked
  7015  001182  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7016  001184  0EEB               	movlw	low STR_11
  7017  001186  0100               	movlb	0	; () banked
  7018  001188  6F82               	movwf	strcpy@from& (0+255),b
  7019  00118A  0EFF               	movlw	high STR_11
  7020  00118C  0100               	movlb	0	; () banked
  7021  00118E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7022  001190  EC0B  F017         	call	_strcpy	;wreg free
  7023                           
  7024                           ;RTC.c: 83: break;
  7025  001194  D0A7               	goto	l4688
  7026  001196                     l4668:
  7027                           
  7028                           ;RTC.c: 85: strcpy(month, "MAY");
  7029  001196  0EBE               	movlw	low printRTC@month
  7030  001198  0100               	movlb	0	; () banked
  7031  00119A  6F80               	movwf	strcpy@to& (0+255),b
  7032  00119C  0E00               	movlw	high printRTC@month
  7033  00119E  0100               	movlb	0	; () banked
  7034  0011A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7035  0011A2  0EFB               	movlw	low STR_12
  7036  0011A4  0100               	movlb	0	; () banked
  7037  0011A6  6F82               	movwf	strcpy@from& (0+255),b
  7038  0011A8  0EFF               	movlw	high STR_12
  7039  0011AA  0100               	movlb	0	; () banked
  7040  0011AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7041  0011AE  EC0B  F017         	call	_strcpy	;wreg free
  7042                           
  7043                           ;RTC.c: 86: break;
  7044  0011B2  D098               	goto	l4688
  7045  0011B4                     l4670:
  7046                           
  7047                           ;RTC.c: 88: strcpy(month, "JUN");
  7048  0011B4  0EBE               	movlw	low printRTC@month
  7049  0011B6  0100               	movlb	0	; () banked
  7050  0011B8  6F80               	movwf	strcpy@to& (0+255),b
  7051  0011BA  0E00               	movlw	high printRTC@month
  7052  0011BC  0100               	movlb	0	; () banked
  7053  0011BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7054  0011C0  0EDF               	movlw	low STR_13
  7055  0011C2  0100               	movlb	0	; () banked
  7056  0011C4  6F82               	movwf	strcpy@from& (0+255),b
  7057  0011C6  0EFF               	movlw	high STR_13
  7058  0011C8  0100               	movlb	0	; () banked
  7059  0011CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7060  0011CC  EC0B  F017         	call	_strcpy	;wreg free
  7061                           
  7062                           ;RTC.c: 89: break;
  7063  0011D0  D089               	goto	l4688
  7064  0011D2                     l4672:
  7065                           
  7066                           ;RTC.c: 91: strcpy(month, "JUL");
  7067  0011D2  0EBE               	movlw	low printRTC@month
  7068  0011D4  0100               	movlb	0	; () banked
  7069  0011D6  6F80               	movwf	strcpy@to& (0+255),b
  7070  0011D8  0E00               	movlw	high printRTC@month
  7071  0011DA  0100               	movlb	0	; () banked
  7072  0011DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7073  0011DE  0ED7               	movlw	low STR_14
  7074  0011E0  0100               	movlb	0	; () banked
  7075  0011E2  6F82               	movwf	strcpy@from& (0+255),b
  7076  0011E4  0EFF               	movlw	high STR_14
  7077  0011E6  0100               	movlb	0	; () banked
  7078  0011E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7079  0011EA  EC0B  F017         	call	_strcpy	;wreg free
  7080                           
  7081                           ;RTC.c: 92: break;
  7082  0011EE  D07A               	goto	l4688
  7083  0011F0                     l4674:
  7084                           
  7085                           ;RTC.c: 94: strcpy(month, "AUG");
  7086  0011F0  0EBE               	movlw	low printRTC@month
  7087  0011F2  0100               	movlb	0	; () banked
  7088  0011F4  6F80               	movwf	strcpy@to& (0+255),b
  7089  0011F6  0E00               	movlw	high printRTC@month
  7090  0011F8  0100               	movlb	0	; () banked
  7091  0011FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7092  0011FC  0ED3               	movlw	low STR_15
  7093  0011FE  0100               	movlb	0	; () banked
  7094  001200  6F82               	movwf	strcpy@from& (0+255),b
  7095  001202  0EFF               	movlw	high STR_15
  7096  001204  0100               	movlb	0	; () banked
  7097  001206  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7098  001208  EC0B  F017         	call	_strcpy	;wreg free
  7099                           
  7100                           ;RTC.c: 95: break;
  7101  00120C  D06B               	goto	l4688
  7102  00120E                     l4676:
  7103                           
  7104                           ;RTC.c: 97: strcpy(month, "SEP");
  7105  00120E  0EBE               	movlw	low printRTC@month
  7106  001210  0100               	movlb	0	; () banked
  7107  001212  6F80               	movwf	strcpy@to& (0+255),b
  7108  001214  0E00               	movlw	high printRTC@month
  7109  001216  0100               	movlb	0	; () banked
  7110  001218  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7111  00121A  0EE3               	movlw	low STR_16
  7112  00121C  0100               	movlb	0	; () banked
  7113  00121E  6F82               	movwf	strcpy@from& (0+255),b
  7114  001220  0EFF               	movlw	high STR_16
  7115  001222  0100               	movlb	0	; () banked
  7116  001224  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7117  001226  EC0B  F017         	call	_strcpy	;wreg free
  7118                           
  7119                           ;RTC.c: 98: break;
  7120  00122A  D05C               	goto	l4688
  7121  00122C                     l4678:
  7122                           
  7123                           ;RTC.c: 100: strcpy(month, "OCT");
  7124  00122C  0EBE               	movlw	low printRTC@month
  7125  00122E  0100               	movlb	0	; () banked
  7126  001230  6F80               	movwf	strcpy@to& (0+255),b
  7127  001232  0E00               	movlw	high printRTC@month
  7128  001234  0100               	movlb	0	; () banked
  7129  001236  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7130  001238  0EF3               	movlw	low STR_17
  7131  00123A  0100               	movlb	0	; () banked
  7132  00123C  6F82               	movwf	strcpy@from& (0+255),b
  7133  00123E  0EFF               	movlw	high STR_17
  7134  001240  0100               	movlb	0	; () banked
  7135  001242  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7136  001244  EC0B  F017         	call	_strcpy	;wreg free
  7137                           
  7138                           ;RTC.c: 101: break;
  7139  001248  D04D               	goto	l4688
  7140  00124A                     l4680:
  7141                           
  7142                           ;RTC.c: 103: strcpy(month, "NOV");
  7143  00124A  0EBE               	movlw	low printRTC@month
  7144  00124C  0100               	movlb	0	; () banked
  7145  00124E  6F80               	movwf	strcpy@to& (0+255),b
  7146  001250  0E00               	movlw	high printRTC@month
  7147  001252  0100               	movlb	0	; () banked
  7148  001254  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7149  001256  0EF7               	movlw	low STR_18
  7150  001258  0100               	movlb	0	; () banked
  7151  00125A  6F82               	movwf	strcpy@from& (0+255),b
  7152  00125C  0EFF               	movlw	high STR_18
  7153  00125E  0100               	movlb	0	; () banked
  7154  001260  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7155  001262  EC0B  F017         	call	_strcpy	;wreg free
  7156                           
  7157                           ;RTC.c: 104: break;
  7158  001266  D03E               	goto	l4688
  7159  001268                     l4682:
  7160                           
  7161                           ;RTC.c: 106: strcpy(month, "DEC");
  7162  001268  0EBE               	movlw	low printRTC@month
  7163  00126A  0100               	movlb	0	; () banked
  7164  00126C  6F80               	movwf	strcpy@to& (0+255),b
  7165  00126E  0E00               	movlw	high printRTC@month
  7166  001270  0100               	movlb	0	; () banked
  7167  001272  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7168  001274  0ECF               	movlw	low STR_19
  7169  001276  0100               	movlb	0	; () banked
  7170  001278  6F82               	movwf	strcpy@from& (0+255),b
  7171  00127A  0EFF               	movlw	high STR_19
  7172  00127C  0100               	movlb	0	; () banked
  7173  00127E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7174  001280  EC0B  F017         	call	_strcpy	;wreg free
  7175                           
  7176                           ;RTC.c: 108: }
  7177                           
  7178                           ;RTC.c: 107: break;
  7179  001284  D02F               	goto	l4688
  7180  001286                     l4686:
  7181  001286  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7182  00128A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7183                           
  7184                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7185                           ; Switch size 1, requested type "space"
  7186                           ; Number of cases is 1, Range of values is 0 to 0
  7187                           ; switch strategies available:
  7188                           ; Name         Instructions Cycles
  7189                           ; simple_byte            4     3 (average)
  7190                           ;	Chosen strategy is simple_byte
  7191  00128E  0100               	movlb	0	; () banked
  7192  001290  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7193  001292  0A00               	xorlw	0	; case 0
  7194  001294  A4D8               	btfss	status,2,c
  7195  001296  D026               	goto	l4688
  7196                           
  7197                           ; BSR set to: 0
  7198                           ; Switch size 1, requested type "space"
  7199                           ; Number of cases is 12, Range of values is 1 to 12
  7200                           ; switch strategies available:
  7201                           ; Name         Instructions Cycles
  7202                           ; simple_byte           37    19 (average)
  7203                           ;	Chosen strategy is simple_byte
  7204  001298  0100               	movlb	0	; () banked
  7205  00129A  51AB               	movf	??_printRTC& (0+255),w,b
  7206  00129C  0A01               	xorlw	1	; case 1
  7207  00129E  B4D8               	btfsc	status,2,c
  7208  0012A0  D73E               	goto	l4660
  7209  0012A2  0A03               	xorlw	3	; case 2
  7210  0012A4  B4D8               	btfsc	status,2,c
  7211  0012A6  D74A               	goto	l4662
  7212  0012A8  0A01               	xorlw	1	; case 3
  7213  0012AA  B4D8               	btfsc	status,2,c
  7214  0012AC  D756               	goto	l4664
  7215  0012AE  0A07               	xorlw	7	; case 4
  7216  0012B0  B4D8               	btfsc	status,2,c
  7217  0012B2  D762               	goto	l4666
  7218  0012B4  0A01               	xorlw	1	; case 5
  7219  0012B6  B4D8               	btfsc	status,2,c
  7220  0012B8  D76E               	goto	l4668
  7221  0012BA  0A03               	xorlw	3	; case 6
  7222  0012BC  B4D8               	btfsc	status,2,c
  7223  0012BE  D77A               	goto	l4670
  7224  0012C0  0A01               	xorlw	1	; case 7
  7225  0012C2  B4D8               	btfsc	status,2,c
  7226  0012C4  D786               	goto	l4672
  7227  0012C6  0A0F               	xorlw	15	; case 8
  7228  0012C8  B4D8               	btfsc	status,2,c
  7229  0012CA  D792               	goto	l4674
  7230  0012CC  0A01               	xorlw	1	; case 9
  7231  0012CE  B4D8               	btfsc	status,2,c
  7232  0012D0  D79E               	goto	l4676
  7233  0012D2  0A03               	xorlw	3	; case 10
  7234  0012D4  B4D8               	btfsc	status,2,c
  7235  0012D6  D7AA               	goto	l4678
  7236  0012D8  0A01               	xorlw	1	; case 11
  7237  0012DA  B4D8               	btfsc	status,2,c
  7238  0012DC  D7B6               	goto	l4680
  7239  0012DE  0A07               	xorlw	7	; case 12
  7240  0012E0  B4D8               	btfsc	status,2,c
  7241  0012E2  D7C2               	goto	l4682
  7242  0012E4                     l4688:
  7243                           
  7244                           ;RTC.c: 109: lcdInst(0b10000000);;
  7245  0012E4  0E80               	movlw	128
  7246  0012E6  EC6D  F019         	call	_lcdInst
  7247                           
  7248                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7249  0012EA  0EAE               	movlw	low STR_21
  7250  0012EC  0100               	movlb	0	; () banked
  7251  0012EE  6F8E               	movwf	printf@f& (0+255),b
  7252  0012F0  0EFD               	movlw	high STR_21
  7253  0012F2  0100               	movlb	0	; () banked
  7254  0012F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7255  0012F6  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7256  0012FA  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7257  0012FE  0EBE               	movlw	low printRTC@month
  7258  001300  0100               	movlb	0	; () banked
  7259  001302  6F92               	movwf	(?_printf+4)& (0+255),b
  7260  001304  0E00               	movlw	high printRTC@month
  7261  001306  0100               	movlb	0	; () banked
  7262  001308  6F93               	movwf	(?_printf+5)& (0+255),b
  7263  00130A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7264  00130E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7265  001312  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7266  001316  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7267  00131A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7268  00131E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7269  001322  EC5C  F004         	call	_printf	;wreg free
  7270  001326  0012               	return		;funcret
  7271  001328                     __end_of_printRTC:
  7272                           	opt stack 0
  7273                           tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           intcon	equ	0xFF2
  7280                           intcon2	equ	0xFF1
  7281                           intcon3	equ	0xFF0
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1l	equ	0xFE1
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _strcpy *****************
  7294 ;; Defined at:
  7295 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7298 ;;		 -> printRTC@month(4), UI@month(4), 
  7299 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7300 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7301 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7302 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7303 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7304 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7305 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7306 ;;		 -> STR_8(4), 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7309 ;;		 -> printRTC@month(4), UI@month(4), 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  2    0[BANK0 ] PTR unsigned char 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7319 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;Total ram usage:        6 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    7
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_UI
  7330 ;;		_printRTC
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text25
  7335  002E16                     __ptext25:
  7336                           	opt stack 0
  7337  002E16                     _strcpy:
  7338                           	opt stack 20
  7339                           
  7340                           ;incstack = 0
  7341  002E16  C080  F084         	movff	strcpy@to,strcpy@cp
  7342  002E1A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7343  002E1E  D006               	goto	l4392
  7344  002E20                     l4390:
  7345  002E20  0100               	movlb	0	; () banked
  7346  002E22  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7347  002E24  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7348  002E26  0100               	movlb	0	; () banked
  7349  002E28  4B82               	infsnz	strcpy@from& (0+255),f,b
  7350  002E2A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7351  002E2C                     l4392:
  7352  002E2C  C082  FFF6         	movff	strcpy@from,tblptrl
  7353  002E30  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7354  002E34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7355  002E34  6AF8               	clrf	tblptru,c
  7356  002E36                     	endif
  7357  002E36                     	if	0	;tblptru may be non-zero
  7358  002E36                     	endif
  7359  002E36  C084  FFD9         	movff	strcpy@cp,fsr2l
  7360  002E3A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7361  002E3E  0008               	tblrd		*
  7362  002E40  CFF5 FFDF          	movff	tablat,indf2
  7363  002E44  50DF               	movf	indf2,w,c
  7364  002E46  B4D8               	btfsc	status,2,c
  7365  002E48  0012               	return	
  7366  002E4A  D7EA               	goto	l4390
  7367  002E4C                     __end_of_strcpy:
  7368                           	opt stack 0
  7369                           tblptru	equ	0xFF8
  7370                           tblptrh	equ	0xFF7
  7371                           tblptrl	equ	0xFF6
  7372                           tablat	equ	0xFF5
  7373                           prodh	equ	0xFF4
  7374                           prodl	equ	0xFF3
  7375                           intcon	equ	0xFF2
  7376                           intcon2	equ	0xFF1
  7377                           intcon3	equ	0xFF0
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postdec1	equ	0xFE5
  7381                           fsr1l	equ	0xFE1
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function _getRTC *****************
  7390 ;; Defined at:
  7391 ;;		line 44 in file "RTC.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;		None
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  i               2    3[BANK0 ] int 
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  1    wreg      void 
  7398 ;; Registers used:
  7399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;Total ram usage:        2 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    9
  7412 ;; This function calls:
  7413 ;;		_I2C_Master_Read
  7414 ;;		_I2C_Master_Start
  7415 ;;		_I2C_Master_Stop
  7416 ;;		_I2C_Master_Write
  7417 ;; This function is called by:
  7418 ;;		_printRTC
  7419 ;;		_initSortTimer
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text26
  7424  0027BE                     __ptext26:
  7425                           	opt stack 0
  7426  0027BE                     _getRTC:
  7427                           	opt stack 18
  7428                           
  7429                           ;RTC.c: 48: I2C_Master_Start();
  7430                           
  7431                           ;incstack = 0
  7432  0027BE  EC93  F019         	call	_I2C_Master_Start	;wreg free
  7433                           
  7434                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7435  0027C2  0E00               	movlw	0
  7436  0027C4  0100               	movlb	0	; () banked
  7437  0027C6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7438  0027C8  0ED0               	movlw	208
  7439  0027CA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7440  0027CC  EC81  F019         	call	_I2C_Master_Write	;wreg free
  7441                           
  7442                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7443  0027D0  0E00               	movlw	0
  7444  0027D2  0100               	movlb	0	; () banked
  7445  0027D4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7446  0027D6  0E00               	movlw	0
  7447  0027D8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7448  0027DA  EC81  F019         	call	_I2C_Master_Write	;wreg free
  7449                           
  7450                           ;RTC.c: 51: I2C_Master_Stop();
  7451  0027DE  EC8F  F019         	call	_I2C_Master_Stop	;wreg free
  7452                           
  7453                           ;RTC.c: 54: I2C_Master_Start();
  7454  0027E2  EC93  F019         	call	_I2C_Master_Start	;wreg free
  7455                           
  7456                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7457  0027E6  0E00               	movlw	0
  7458  0027E8  0100               	movlb	0	; () banked
  7459  0027EA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7460  0027EC  0ED1               	movlw	209
  7461  0027EE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7462  0027F0  EC81  F019         	call	_I2C_Master_Write	;wreg free
  7463                           
  7464                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7465  0027F4  0E00               	movlw	0
  7466  0027F6  0100               	movlb	0	; () banked
  7467  0027F8  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7468  0027FA  0E00               	movlw	0
  7469  0027FC  6F83               	movwf	getRTC@i& (0+255),b
  7470  0027FE                     l4398:
  7471                           
  7472                           ; BSR set to: 0
  7473  0027FE  0100               	movlb	0	; () banked
  7474  002800  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7475  002802  D008               	goto	l4402
  7476  002804  0100               	movlb	0	; () banked
  7477  002806  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7478  002808  E115               	bnz	l4408
  7479  00280A  0E06               	movlw	6
  7480  00280C  0100               	movlb	0	; () banked
  7481  00280E  5D83               	subwf	getRTC@i& (0+255),w,b
  7482  002810  B0D8               	btfsc	status,0,c
  7483  002812  D010               	goto	l4408
  7484  002814                     l4402:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7488  002814  0E5B               	movlw	low _time
  7489  002816  0100               	movlb	0	; () banked
  7490  002818  2583               	addwf	getRTC@i& (0+255),w,b
  7491  00281A  6ED9               	movwf	fsr2l,c
  7492  00281C  0E00               	movlw	high _time
  7493  00281E  0100               	movlb	0	; () banked
  7494  002820  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7495  002822  6EDA               	movwf	fsr2h,c
  7496  002824  0E01               	movlw	1
  7497  002826  EC32  F018         	call	_I2C_Master_Read
  7498  00282A  6EDF               	movwf	indf2,c
  7499  00282C  0100               	movlb	0	; () banked
  7500  00282E  4B83               	infsnz	getRTC@i& (0+255),f,b
  7501  002830  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7502  002832  D7E5               	goto	l4398
  7503  002834                     l4408:
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;RTC.c: 58: }
  7507                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7508  002834  0E00               	movlw	0
  7509  002836  EC32  F018         	call	_I2C_Master_Read
  7510  00283A  6E61               	movwf	_time+6,c
  7511                           
  7512                           ;RTC.c: 60: I2C_Master_Stop();
  7513  00283C  EC8F  F019         	call	_I2C_Master_Stop	;wreg free
  7514  002840  0012               	return		;funcret
  7515  002842                     __end_of_getRTC:
  7516                           	opt stack 0
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           intcon2	equ	0xFF1
  7525                           intcon3	equ	0xFF0
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           postdec1	equ	0xFE5
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           postinc2	equ	0xFDE
  7532                           postdec2	equ	0xFDD
  7533                           fsr2h	equ	0xFDA
  7534                           fsr2l	equ	0xFD9
  7535                           status	equ	0xFD8
  7536                           
  7537 ;; *************** function _I2C_Master_Write *****************
  7538 ;; Defined at:
  7539 ;;		line 49 in file "I2C.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;  d               2    1[BANK0 ] unsigned int 
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      void 
  7546 ;; Registers used:
  7547 ;;		wreg, status,2, status,0, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;Total ram usage:        2 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    8
  7560 ;; This function calls:
  7561 ;;		_I2C_Master_Wait
  7562 ;; This function is called by:
  7563 ;;		_loadRTC
  7564 ;;		_getRTC
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text27
  7569  003302                     __ptext27:
  7570                           	opt stack 0
  7571  003302                     _I2C_Master_Write:
  7572                           	opt stack 18
  7573                           
  7574                           ;I2C.c: 51: I2C_Master_Wait();
  7575                           
  7576                           ;incstack = 0
  7577  003302  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7578                           
  7579                           ;I2C.c: 52: SSPBUF = d;
  7580  003306  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7581  00330A  0012               	return		;funcret
  7582  00330C                     __end_of_I2C_Master_Write:
  7583                           	opt stack 0
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           intcon3	equ	0xFF0
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           postdec1	equ	0xFE5
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function _I2C_Master_Stop *****************
  7605 ;; Defined at:
  7606 ;;		line 43 in file "I2C.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      void 
  7613 ;; Registers used:
  7614 ;;		wreg, status,2, status,0, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;Total ram usage:        0 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:    8
  7627 ;; This function calls:
  7628 ;;		_I2C_Master_Wait
  7629 ;; This function is called by:
  7630 ;;		_loadRTC
  7631 ;;		_getRTC
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text28
  7636  00331E                     __ptext28:
  7637                           	opt stack 0
  7638  00331E                     _I2C_Master_Stop:
  7639                           	opt stack 18
  7640                           
  7641                           ;I2C.c: 45: I2C_Master_Wait();
  7642                           
  7643                           ;incstack = 0
  7644  00331E  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7645                           
  7646                           ;I2C.c: 46: PEN = 1;
  7647  003322  84C5               	bsf	4037,2,c	;volatile
  7648  003324  0012               	return		;funcret
  7649  003326                     __end_of_I2C_Master_Stop:
  7650                           	opt stack 0
  7651                           tblptru	equ	0xFF8
  7652                           tblptrh	equ	0xFF7
  7653                           tblptrl	equ	0xFF6
  7654                           tablat	equ	0xFF5
  7655                           prodh	equ	0xFF4
  7656                           prodl	equ	0xFF3
  7657                           intcon	equ	0xFF2
  7658                           intcon2	equ	0xFF1
  7659                           intcon3	equ	0xFF0
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           postdec1	equ	0xFE5
  7663                           fsr1l	equ	0xFE1
  7664                           indf2	equ	0xFDF
  7665                           postinc2	equ	0xFDE
  7666                           postdec2	equ	0xFDD
  7667                           fsr2h	equ	0xFDA
  7668                           fsr2l	equ	0xFD9
  7669                           status	equ	0xFD8
  7670                           
  7671 ;; *************** function _I2C_Master_Start *****************
  7672 ;; Defined at:
  7673 ;;		line 31 in file "I2C.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;		None
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;		None
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0, cstack
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;Total ram usage:        0 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    8
  7694 ;; This function calls:
  7695 ;;		_I2C_Master_Wait
  7696 ;; This function is called by:
  7697 ;;		_loadRTC
  7698 ;;		_getRTC
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           	psect	text29
  7703  003326                     __ptext29:
  7704                           	opt stack 0
  7705  003326                     _I2C_Master_Start:
  7706                           	opt stack 18
  7707                           
  7708                           ;I2C.c: 33: I2C_Master_Wait();
  7709                           
  7710                           ;incstack = 0
  7711  003326  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7712                           
  7713                           ;I2C.c: 34: SEN = 1;
  7714  00332A  80C5               	bsf	4037,0,c	;volatile
  7715  00332C  0012               	return		;funcret
  7716  00332E                     __end_of_I2C_Master_Start:
  7717                           	opt stack 0
  7718                           tblptru	equ	0xFF8
  7719                           tblptrh	equ	0xFF7
  7720                           tblptrl	equ	0xFF6
  7721                           tablat	equ	0xFF5
  7722                           prodh	equ	0xFF4
  7723                           prodl	equ	0xFF3
  7724                           intcon	equ	0xFF2
  7725                           intcon2	equ	0xFF1
  7726                           intcon3	equ	0xFF0
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           postdec1	equ	0xFE5
  7730                           fsr1l	equ	0xFE1
  7731                           indf2	equ	0xFDF
  7732                           postinc2	equ	0xFDE
  7733                           postdec2	equ	0xFDD
  7734                           fsr2h	equ	0xFDA
  7735                           fsr2l	equ	0xFD9
  7736                           status	equ	0xFD8
  7737                           
  7738 ;; *************** function _I2C_Master_Read *****************
  7739 ;; Defined at:
  7740 ;;		line 55 in file "I2C.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  a               1    wreg     unsigned char 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  a               1    1[BANK0 ] unsigned char 
  7745 ;;  temp            1    2[BANK0 ] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        2 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    8
  7762 ;; This function calls:
  7763 ;;		_I2C_Master_Wait
  7764 ;; This function is called by:
  7765 ;;		_getRTC
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text30
  7770  003064                     __ptext30:
  7771                           	opt stack 0
  7772  003064                     _I2C_Master_Read:
  7773                           	opt stack 18
  7774                           
  7775                           ;incstack = 0
  7776                           ;I2C_Master_Read@a stored from wreg
  7777  003064  0100               	movlb	0	; () banked
  7778  003066  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7779                           
  7780                           ;I2C.c: 57: unsigned char temp;
  7781                           ;I2C.c: 58: I2C_Master_Wait();
  7782  003068  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7783                           
  7784                           ;I2C.c: 59: RCEN = 1;
  7785  00306C  86C5               	bsf	4037,3,c	;volatile
  7786                           
  7787                           ;I2C.c: 60: I2C_Master_Wait();
  7788  00306E  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7789                           
  7790                           ;I2C.c: 61: temp = SSPBUF;
  7791  003072  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7792                           
  7793                           ;I2C.c: 62: I2C_Master_Wait();
  7794  003076  EC52  F019         	call	_I2C_Master_Wait	;wreg free
  7795                           
  7796                           ;I2C.c: 63: ACKDT = (a)?0:1;
  7797  00307A  0100               	movlb	0	; () banked
  7798  00307C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7799  00307E  0100               	movlb	0	; () banked
  7800  003080  A4D8               	btfss	status,2,c
  7801  003082  D002               	goto	u2620
  7802  003084  8AC5               	bsf	4037,5,c	;volatile
  7803  003086  D001               	goto	l4088
  7804  003088                     u2620:
  7805  003088  9AC5               	bcf	4037,5,c	;volatile
  7806  00308A                     l4088:
  7807                           
  7808                           ;I2C.c: 64: ACKEN = 1;
  7809  00308A  88C5               	bsf	4037,4,c	;volatile
  7810                           
  7811                           ;I2C.c: 65: return temp;
  7812  00308C  0100               	movlb	0	; () banked
  7813  00308E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7814  003090  0012               	return	
  7815  003092                     __end_of_I2C_Master_Read:
  7816                           	opt stack 0
  7817                           tblptru	equ	0xFF8
  7818                           tblptrh	equ	0xFF7
  7819                           tblptrl	equ	0xFF6
  7820                           tablat	equ	0xFF5
  7821                           prodh	equ	0xFF4
  7822                           prodl	equ	0xFF3
  7823                           intcon	equ	0xFF2
  7824                           intcon2	equ	0xFF1
  7825                           intcon3	equ	0xFF0
  7826                           postinc0	equ	0xFEE
  7827                           wreg	equ	0xFE8
  7828                           postdec1	equ	0xFE5
  7829                           fsr1l	equ	0xFE1
  7830                           indf2	equ	0xFDF
  7831                           postinc2	equ	0xFDE
  7832                           postdec2	equ	0xFDD
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function _I2C_Master_Wait *****************
  7838 ;; Defined at:
  7839 ;;		line 26 in file "I2C.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;Total ram usage:        1 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    7
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_I2C_Master_Start
  7864 ;;		_I2C_Master_Stop
  7865 ;;		_I2C_Master_Write
  7866 ;;		_I2C_Master_Read
  7867 ;;		_I2C_Master_RepeatedStart
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text31
  7872  0032A4                     __ptext31:
  7873                           	opt stack 0
  7874  0032A4                     _I2C_Master_Wait:
  7875                           	opt stack 18
  7876  0032A4                     l68:
  7877  0032A4  B4C7               	btfsc	4039,2,c	;volatile
  7878  0032A6  D7FE               	goto	l68
  7879  0032A8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7880  0032AC  0E1F               	movlw	31
  7881  0032AE  0100               	movlb	0	; () banked
  7882  0032B0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7883  0032B2  B4D8               	btfsc	status,2,c
  7884  0032B4  0012               	return	
  7885  0032B6  D7F6               	goto	l68
  7886  0032B8                     __end_of_I2C_Master_Wait:
  7887                           	opt stack 0
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon	equ	0xFF2
  7895                           intcon2	equ	0xFF1
  7896                           intcon3	equ	0xFF0
  7897                           postinc0	equ	0xFEE
  7898                           wreg	equ	0xFE8
  7899                           postdec1	equ	0xFE5
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _change_state_to_menu_22 *****************
  7909 ;; Defined at:
  7910 ;;		line 496 in file "UI.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;		None
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      void 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;Total ram usage:        0 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:   10
  7931 ;; This function calls:
  7932 ;;		_lcdInst
  7933 ;;		_printf
  7934 ;; This function is called by:
  7935 ;;		_UI
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text32
  7940  002DA6                     __ptext32:
  7941                           	opt stack 0
  7942  002DA6                     _change_state_to_menu_22:
  7943                           	opt stack 19
  7944                           
  7945                           ;UI.c: 497: cur_state = 22;
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;incstack = 0
  7949  002DA6  0E00               	movlw	0
  7950  002DA8  0100               	movlb	0	; () banked
  7951  002DAA  6FDD               	movwf	(_cur_state+1)& (0+255),b
  7952  002DAC  0E16               	movlw	22
  7953  002DAE  6FDC               	movwf	_cur_state& (0+255),b
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;UI.c: 499: lcdInst(0b10000000);;
  7957  002DB0  0E80               	movlw	128
  7958  002DB2  EC6D  F019         	call	_lcdInst
  7959                           
  7960                           ;UI.c: 500: printf("2. SORT        <");
  7961  002DB6  0E24               	movlw	low STR_34
  7962  002DB8  0100               	movlb	0	; () banked
  7963  002DBA  6F8E               	movwf	printf@f& (0+255),b
  7964  002DBC  0EFF               	movlw	high STR_34
  7965  002DBE  0100               	movlb	0	; () banked
  7966  002DC0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7967  002DC2  EC5C  F004         	call	_printf	;wreg free
  7968                           
  7969                           ;UI.c: 501: lcdInst(0b11000000);;
  7970  002DC6  0EC0               	movlw	192
  7971  002DC8  EC6D  F019         	call	_lcdInst
  7972                           
  7973                           ;UI.c: 502: printf("3. LOGS         ");
  7974  002DCC  0E69               	movlw	low STR_36
  7975  002DCE  0100               	movlb	0	; () banked
  7976  002DD0  6F8E               	movwf	printf@f& (0+255),b
  7977  002DD2  0EFE               	movlw	high STR_36
  7978  002DD4  0100               	movlb	0	; () banked
  7979  002DD6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7980  002DD8  EC5C  F004         	call	_printf	;wreg free
  7981  002DDC  0012               	return		;funcret
  7982  002DDE                     __end_of_change_state_to_menu_22:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           intcon	equ	0xFF2
  7991                           intcon2	equ	0xFF1
  7992                           intcon3	equ	0xFF0
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           postdec1	equ	0xFE5
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function _change_state_to_menu_12 *****************
  8005 ;; Defined at:
  8006 ;;		line 488 in file "UI.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;		None
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;		None
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      void 
  8013 ;; Registers used:
  8014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;Total ram usage:        0 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:   10
  8027 ;; This function calls:
  8028 ;;		_lcdInst
  8029 ;;		_printf
  8030 ;; This function is called by:
  8031 ;;		_UI
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text33
  8036  002DDE                     __ptext33:
  8037                           	opt stack 0
  8038  002DDE                     _change_state_to_menu_12:
  8039                           	opt stack 19
  8040                           
  8041                           ;UI.c: 489: cur_state = 12;
  8042                           
  8043                           ;incstack = 0
  8044  002DDE  0E00               	movlw	0
  8045  002DE0  0100               	movlb	0	; () banked
  8046  002DE2  6FDD               	movwf	(_cur_state+1)& (0+255),b
  8047  002DE4  0E0C               	movlw	12
  8048  002DE6  6FDC               	movwf	_cur_state& (0+255),b
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;UI.c: 491: lcdInst(0b10000000);;
  8052  002DE8  0E80               	movlw	128
  8053  002DEA  EC6D  F019         	call	_lcdInst
  8054                           
  8055                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8056  002DEE  0E8B               	movlw	low STR_33
  8057  002DF0  0100               	movlb	0	; () banked
  8058  002DF2  6F8E               	movwf	printf@f& (0+255),b
  8059  002DF4  0EFE               	movlw	high STR_33
  8060  002DF6  0100               	movlb	0	; () banked
  8061  002DF8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8062  002DFA  EC5C  F004         	call	_printf	;wreg free
  8063                           
  8064                           ;UI.c: 493: lcdInst(0b11000000);;
  8065  002DFE  0EC0               	movlw	192
  8066  002E00  EC6D  F019         	call	_lcdInst
  8067                           
  8068                           ;UI.c: 494: printf("2. SORT        <");
  8069  002E04  0E24               	movlw	low STR_34
  8070  002E06  0100               	movlb	0	; () banked
  8071  002E08  6F8E               	movwf	printf@f& (0+255),b
  8072  002E0A  0EFF               	movlw	high STR_34
  8073  002E0C  0100               	movlb	0	; () banked
  8074  002E0E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8075  002E10  EC5C  F004         	call	_printf	;wreg free
  8076  002E14  0012               	return		;funcret
  8077  002E16                     __end_of_change_state_to_menu_12:
  8078                           	opt stack 0
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           intcon2	equ	0xFF1
  8087                           intcon3	equ	0xFF0
  8088                           postinc0	equ	0xFEE
  8089                           wreg	equ	0xFE8
  8090                           postdec1	equ	0xFE5
  8091                           fsr1l	equ	0xFE1
  8092                           indf2	equ	0xFDF
  8093                           postinc2	equ	0xFDE
  8094                           postdec2	equ	0xFDD
  8095                           fsr2h	equ	0xFDA
  8096                           fsr2l	equ	0xFD9
  8097                           status	equ	0xFD8
  8098                           
  8099 ;; *************** function _printf *****************
  8100 ;; Defined at:
  8101 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8104 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
  8105 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
  8106 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
  8107 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
  8108 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
  8109 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
  8110 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
  8111 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
  8112 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
  8113 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
  8114 ;;		 -> STR_2(14), STR_1(18), 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  tmpval          4    0        struct .
  8117 ;;  width           2   41[BANK0 ] int 
  8118 ;;  val             2   37[BANK0 ] unsigned int 
  8119 ;;  len             2   35[BANK0 ] unsigned int 
  8120 ;;  ap              2   33[BANK0 ] PTR void [1]
  8121 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8122 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
  8123 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
  8124 ;;  c               1   40[BANK0 ] char 
  8125 ;;  flag            1   39[BANK0 ] unsigned char 
  8126 ;;  prec            1   30[BANK0 ] char 
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  2   14[BANK0 ] int 
  8129 ;; Registers used:
  8130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8136 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;Total ram usage:       29 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    9
  8143 ;; This function calls:
  8144 ;;		___lwdiv
  8145 ;;		___lwmod
  8146 ;;		___wmul
  8147 ;;		_isdigit
  8148 ;;		_putch
  8149 ;; This function is called by:
  8150 ;;		_UI
  8151 ;;		_change_state_to_menu_start
  8152 ;;		_change_state_to_menu_12
  8153 ;;		_change_state_to_menu_22
  8154 ;;		_printRTC
  8155 ;;		_EEPROM_write
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           	psect	text34
  8160  0008B8                     __ptext34:
  8161                           	opt stack 0
  8162  0008B8                     _printf:
  8163                           	opt stack 18
  8164                           
  8165                           ;doprnt.c: 466: va_list ap;
  8166                           ;doprnt.c: 499: signed char c;
  8167                           ;doprnt.c: 501: int width;
  8168                           ;doprnt.c: 506: signed char prec;
  8169                           ;doprnt.c: 508: unsigned char flag;
  8170                           ;doprnt.c: 523: union {
  8171                           ;doprnt.c: 524: unsigned long vd;
  8172                           ;doprnt.c: 525: double integ;
  8173                           ;doprnt.c: 526: } tmpval;
  8174                           ;doprnt.c: 528: unsigned int val;
  8175                           ;doprnt.c: 529: unsigned len;
  8176                           ;doprnt.c: 530: const char * cp;
  8177                           ;doprnt.c: 533: *ap = __va_start();
  8178                           
  8179                           ;incstack = 0
  8180  0008B8  0E90               	movlw	low (?_printf+2)
  8181  0008BA  0100               	movlb	0	; () banked
  8182  0008BC  6FA1               	movwf	printf@ap& (0+255),b
  8183  0008BE  0E00               	movlw	high (?_printf+2)
  8184  0008C0  0100               	movlb	0	; () banked
  8185  0008C2  6FA2               	movwf	(printf@ap+1)& (0+255),b
  8186                           
  8187                           ;doprnt.c: 536: while(c = *f++) {
  8188  0008C4  D205               	goto	l4386
  8189  0008C6                     l4256:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;doprnt.c: 538: if(c != '%')
  8193  0008C6  0E25               	movlw	37
  8194  0008C8  0100               	movlb	0	; () banked
  8195  0008CA  19A8               	xorwf	printf@c& (0+255),w,b
  8196  0008CC  B4D8               	btfsc	status,2,c
  8197  0008CE  D005               	goto	l4260
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;doprnt.c: 540: {
  8201                           ;doprnt.c: 541: (putch(c) );
  8202  0008D0  0100               	movlb	0	; () banked
  8203  0008D2  51A8               	movf	printf@c& (0+255),w,b
  8204  0008D4  EC65  F019         	call	_putch
  8205                           
  8206                           ;doprnt.c: 542: continue;
  8207  0008D8  D1FB               	goto	l4386
  8208  0008DA                     l4260:
  8209                           
  8210                           ;doprnt.c: 543: }
  8211                           ;doprnt.c: 546: width = 0;
  8212  0008DA  0E00               	movlw	0
  8213  0008DC  0100               	movlb	0	; () banked
  8214  0008DE  6FAA               	movwf	(printf@width+1)& (0+255),b
  8215  0008E0  0E00               	movlw	0
  8216  0008E2  6FA9               	movwf	printf@width& (0+255),b
  8217                           
  8218                           ;doprnt.c: 548: flag = 0;
  8219  0008E4  0E00               	movlw	0
  8220  0008E6  0100               	movlb	0	; () banked
  8221  0008E8  6FA7               	movwf	printf@flag& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;doprnt.c: 551: switch(*f) {
  8225                           
  8226                           ;doprnt.c: 550: for(;;) {
  8227  0008EA  D005               	goto	l4266
  8228  0008EC                     l4262:
  8229                           
  8230                           ;doprnt.c: 580: flag |= 0x04;
  8231  0008EC  0100               	movlb	0	; () banked
  8232  0008EE  85A7               	bsf	printf@flag& (0+255),2,b
  8233                           
  8234                           ;doprnt.c: 581: f++;
  8235  0008F0  0100               	movlb	0	; () banked
  8236  0008F2  4B8E               	infsnz	printf@f& (0+255),f,b
  8237  0008F4  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8238  0008F6                     l4266:
  8239  0008F6  C08E  FFF6         	movff	printf@f,tblptrl
  8240  0008FA  C08F  FFF7         	movff	printf@f+1,tblptrh
  8241  0008FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8242  0008FE  6AF8               	clrf	tblptru,c
  8243  000900                     	endif
  8244  000900                     	if	0	;tblptru may be non-zero
  8245  000900                     	endif
  8246  000900  0008               	tblrd		*
  8247  000902  50F5               	movf	tablat,w,c
  8248                           
  8249                           ; Switch size 1, requested type "space"
  8250                           ; Number of cases is 1, Range of values is 48 to 48
  8251                           ; switch strategies available:
  8252                           ; Name         Instructions Cycles
  8253                           ; simple_byte            4     3 (average)
  8254                           ;	Chosen strategy is simple_byte
  8255  000904  0A30               	xorlw	48	; case 48
  8256  000906  B4D8               	btfsc	status,2,c
  8257  000908  D7F1               	goto	l4262
  8258                           
  8259                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8260                           
  8261                           ;doprnt.c: 586: }
  8262                           
  8263                           ;doprnt.c: 585: break;
  8264  00090A  C08E  FFF6         	movff	printf@f,tblptrl
  8265  00090E  C08F  FFF7         	movff	printf@f+1,tblptrh
  8266  000912                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8267  000912  6AF8               	clrf	tblptru,c
  8268  000914                     	endif
  8269  000914                     	if	0	;tblptru may be non-zero
  8270  000914                     	endif
  8271  000914  0008               	tblrd		*
  8272  000916  50F5               	movf	tablat,w,c
  8273  000918  EC8C  F018         	call	_isdigit
  8274  00091C  A0D8               	btfss	status,0,c
  8275  00091E  D0D2               	goto	l4314
  8276                           
  8277                           ;doprnt.c: 598: width = 0;
  8278  000920  0E00               	movlw	0
  8279  000922  0100               	movlb	0	; () banked
  8280  000924  6FAA               	movwf	(printf@width+1)& (0+255),b
  8281  000926  0E00               	movlw	0
  8282  000928  6FA9               	movwf	printf@width& (0+255),b
  8283  00092A                     l4272:
  8284                           
  8285                           ;doprnt.c: 600: width *= 10;
  8286  00092A  C0A9  F080         	movff	printf@width,___wmul@multiplier
  8287  00092E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  8288  000932  0E00               	movlw	0
  8289  000934  0100               	movlb	0	; () banked
  8290  000936  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8291  000938  0E0A               	movlw	10
  8292  00093A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8293  00093C  EC26  F017         	call	___wmul	;wreg free
  8294  000940  C080  F0A9         	movff	?___wmul,printf@width
  8295  000944  C081  F0AA         	movff	?___wmul+1,printf@width+1
  8296                           
  8297                           ;doprnt.c: 601: width += *f++ - '0';
  8298  000948  0ED0               	movlw	208
  8299  00094A  0100               	movlb	0	; () banked
  8300  00094C  6F9A               	movwf	??_printf& (0+255),b
  8301  00094E  0EFF               	movlw	255
  8302  000950  0100               	movlb	0	; () banked
  8303  000952  6F9B               	movwf	(??_printf+1)& (0+255),b
  8304  000954  C08E  FFF6         	movff	printf@f,tblptrl
  8305  000958  C08F  FFF7         	movff	printf@f+1,tblptrh
  8306  00095C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8307  00095C  6AF8               	clrf	tblptru,c
  8308  00095E                     	endif
  8309  00095E                     	if	0	;tblptru may be non-zero
  8310  00095E                     	endif
  8311  00095E  0008               	tblrd		*
  8312  000960  50F5               	movf	tablat,w,c
  8313  000962  0100               	movlb	0	; () banked
  8314  000964  6F9C               	movwf	(??_printf+2)& (0+255),b
  8315  000966  6B9D               	clrf	(??_printf+3)& (0+255),b
  8316  000968  0100               	movlb	0	; () banked
  8317  00096A  519A               	movf	??_printf& (0+255),w,b
  8318  00096C  0100               	movlb	0	; () banked
  8319  00096E  279C               	addwf	(??_printf+2)& (0+255),f,b
  8320  000970  0100               	movlb	0	; () banked
  8321  000972  519B               	movf	(??_printf+1)& (0+255),w,b
  8322  000974  0100               	movlb	0	; () banked
  8323  000976  239D               	addwfc	(??_printf+3)& (0+255),f,b
  8324  000978  0100               	movlb	0	; () banked
  8325  00097A  519C               	movf	(??_printf+2)& (0+255),w,b
  8326  00097C  0100               	movlb	0	; () banked
  8327  00097E  27A9               	addwf	printf@width& (0+255),f,b
  8328  000980  0100               	movlb	0	; () banked
  8329  000982  519D               	movf	(??_printf+3)& (0+255),w,b
  8330  000984  0100               	movlb	0	; () banked
  8331  000986  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  8332                           
  8333                           ; BSR set to: 0
  8334  000988  0100               	movlb	0	; () banked
  8335  00098A  4B8E               	infsnz	printf@f& (0+255),f,b
  8336  00098C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8340  00098E  C08E  FFF6         	movff	printf@f,tblptrl
  8341  000992  C08F  FFF7         	movff	printf@f+1,tblptrh
  8342  000996                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8343  000996  6AF8               	clrf	tblptru,c
  8344  000998                     	endif
  8345  000998                     	if	0	;tblptru may be non-zero
  8346  000998                     	endif
  8347  000998  0008               	tblrd		*
  8348  00099A  50F5               	movf	tablat,w,c
  8349  00099C  EC8C  F018         	call	_isdigit
  8350  0009A0  A0D8               	btfss	status,0,c
  8351  0009A2  D090               	goto	l4314
  8352  0009A4  D7C2               	goto	l4272
  8353  0009A6                     l4280:
  8354                           
  8355                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8356  0009A6  C0A1  FFD9         	movff	printf@ap,fsr2l
  8357  0009AA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8358  0009AE  CFDE F09F          	movff	postinc2,printf@cp
  8359  0009B2  CFDD F0A0          	movff	postdec2,printf@cp+1
  8360  0009B6  0E02               	movlw	2
  8361  0009B8  0100               	movlb	0	; () banked
  8362  0009BA  27A1               	addwf	printf@ap& (0+255),f,b
  8363  0009BC  0E00               	movlw	0
  8364  0009BE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;doprnt.c: 740: if(!cp)
  8368  0009C0  0100               	movlb	0	; () banked
  8369  0009C2  519F               	movf	printf@cp& (0+255),w,b
  8370  0009C4  0100               	movlb	0	; () banked
  8371  0009C6  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
  8372  0009C8  A4D8               	btfss	status,2,c
  8373  0009CA  D006               	goto	l4288
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;doprnt.c: 741: cp = "(null)";
  8377  0009CC  0EB6               	movlw	low STR_68
  8378  0009CE  0100               	movlb	0	; () banked
  8379  0009D0  6F9F               	movwf	printf@cp& (0+255),b
  8380  0009D2  0EFF               	movlw	high STR_68
  8381  0009D4  0100               	movlb	0	; () banked
  8382  0009D6  6FA0               	movwf	(printf@cp+1)& (0+255),b
  8383  0009D8                     l4288:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;doprnt.c: 745: len = 0;
  8387  0009D8  0E00               	movlw	0
  8388  0009DA  0100               	movlb	0	; () banked
  8389  0009DC  6FA4               	movwf	(printf@len+1)& (0+255),b
  8390  0009DE  0E00               	movlw	0
  8391  0009E0  6FA3               	movwf	printf@len& (0+255),b
  8392                           
  8393                           ;doprnt.c: 746: while(cp[len])
  8394  0009E2  D003               	goto	l4292
  8395  0009E4                     l4290:
  8396                           
  8397                           ;doprnt.c: 747: len++;
  8398  0009E4  0100               	movlb	0	; () banked
  8399  0009E6  4BA3               	infsnz	printf@len& (0+255),f,b
  8400  0009E8  2BA4               	incf	(printf@len+1)& (0+255),f,b
  8401  0009EA                     l4292:
  8402                           
  8403                           ; BSR set to: 0
  8404  0009EA  0100               	movlb	0	; () banked
  8405  0009EC  51A3               	movf	printf@len& (0+255),w,b
  8406  0009EE  0100               	movlb	0	; () banked
  8407  0009F0  259F               	addwf	printf@cp& (0+255),w,b
  8408  0009F2  0100               	movlb	0	; () banked
  8409  0009F4  6F9A               	movwf	??_printf& (0+255),b
  8410  0009F6  0100               	movlb	0	; () banked
  8411  0009F8  51A4               	movf	(printf@len+1)& (0+255),w,b
  8412  0009FA  0100               	movlb	0	; () banked
  8413  0009FC  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
  8414  0009FE  0100               	movlb	0	; () banked
  8415  000A00  6F9B               	movwf	(??_printf+1)& (0+255),b
  8416  000A02  C09A  FFF6         	movff	??_printf,tblptrl
  8417  000A06  C09B  FFF7         	movff	??_printf+1,tblptrh
  8418  000A0A  0E00               	movlw	low (__mediumconst shr (0+16))
  8419  000A0C  6EF8               	movwf	tblptru,c
  8420  000A0E  0E0F               	movlw	(high __ramtop+-1)
  8421  000A10  64F7               	cpfsgt	tblptrh,c
  8422  000A12  D003               	bra	u2877
  8423  000A14  0008               	tblrd		*
  8424  000A16  50F5               	movf	tablat,w,c
  8425  000A18  D005               	bra	u2870
  8426  000A1A                     u2877:
  8427  000A1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8428  000A1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8429  000A22  50EF               	movf	indf0,w,c
  8430  000A24                     u2870:
  8431  000A24  0900               	iorlw	0
  8432  000A26  A4D8               	btfss	status,2,c
  8433  000A28  D7DD               	goto	l4290
  8434                           
  8435                           ;doprnt.c: 757: if(width > len)
  8436  000A2A  0100               	movlb	0	; () banked
  8437  000A2C  51A9               	movf	printf@width& (0+255),w,b
  8438  000A2E  0100               	movlb	0	; () banked
  8439  000A30  5DA3               	subwf	printf@len& (0+255),w,b
  8440  000A32  0100               	movlb	0	; () banked
  8441  000A34  51AA               	movf	(printf@width+1)& (0+255),w,b
  8442  000A36  0100               	movlb	0	; () banked
  8443  000A38  59A4               	subwfb	(printf@len+1)& (0+255),w,b
  8444  000A3A  B0D8               	btfsc	status,0,c
  8445  000A3C  D009               	goto	l4298
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;doprnt.c: 758: width -= len;
  8449  000A3E  0100               	movlb	0	; () banked
  8450  000A40  51A3               	movf	printf@len& (0+255),w,b
  8451  000A42  0100               	movlb	0	; () banked
  8452  000A44  5FA9               	subwf	printf@width& (0+255),f,b
  8453  000A46  0100               	movlb	0	; () banked
  8454  000A48  51A4               	movf	(printf@len+1)& (0+255),w,b
  8455  000A4A  0100               	movlb	0	; () banked
  8456  000A4C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8457  000A4E  D009               	goto	l4302
  8458  000A50                     l4298:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;doprnt.c: 759: else
  8462                           ;doprnt.c: 760: width = 0;
  8463  000A50  0E00               	movlw	0
  8464  000A52  0100               	movlb	0	; () banked
  8465  000A54  6FAA               	movwf	(printf@width+1)& (0+255),b
  8466  000A56  0E00               	movlw	0
  8467  000A58  6FA9               	movwf	printf@width& (0+255),b
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;doprnt.c: 764: while(width--)
  8471  000A5A  D003               	goto	l4302
  8472  000A5C                     l4300:
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;doprnt.c: 765: (putch(' ') );
  8476  000A5C  0E20               	movlw	32
  8477  000A5E  EC65  F019         	call	_putch
  8478  000A62                     l4302:
  8479  000A62  0100               	movlb	0	; () banked
  8480  000A64  07A9               	decf	printf@width& (0+255),f,b
  8481  000A66  A0D8               	btfss	status,0,c
  8482  000A68  07AA               	decf	(printf@width+1)& (0+255),f,b
  8483  000A6A  0100               	movlb	0	; () banked
  8484  000A6C  29A9               	incf	printf@width& (0+255),w,b
  8485  000A6E  E1F6               	bnz	l4300
  8486  000A70  0100               	movlb	0	; () banked
  8487  000A72  29AA               	incf	(printf@width+1)& (0+255),w,b
  8488  000A74  B4D8               	btfsc	status,2,c
  8489  000A76  D017               	goto	l4308
  8490  000A78  D7F1               	goto	l4300
  8491  000A7A                     l4304:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;doprnt.c: 768: (putch(*cp++) );
  8495  000A7A  C09F  FFF6         	movff	printf@cp,tblptrl
  8496  000A7E  C0A0  FFF7         	movff	printf@cp+1,tblptrh
  8497  000A82  0E00               	movlw	low (__mediumconst shr (0+16))
  8498  000A84  6EF8               	movwf	tblptru,c
  8499  000A86  0E0F               	movlw	(high __ramtop+-1)
  8500  000A88  64F7               	cpfsgt	tblptrh,c
  8501  000A8A  D003               	bra	u2917
  8502  000A8C  0008               	tblrd		*
  8503  000A8E  50F5               	movf	tablat,w,c
  8504  000A90  D005               	bra	u2910
  8505  000A92                     u2917:
  8506  000A92  CFF6 FFE9          	movff	tblptrl,fsr0l
  8507  000A96  CFF7 FFEA          	movff	tblptrh,fsr0h
  8508  000A9A  50EF               	movf	indf0,w,c
  8509  000A9C                     u2910:
  8510  000A9C  EC65  F019         	call	_putch
  8511  000AA0  0100               	movlb	0	; () banked
  8512  000AA2  4B9F               	infsnz	printf@cp& (0+255),f,b
  8513  000AA4  2BA0               	incf	(printf@cp+1)& (0+255),f,b
  8514  000AA6                     l4308:
  8515                           
  8516                           ; BSR set to: 0
  8517  000AA6  0100               	movlb	0	; () banked
  8518  000AA8  07A3               	decf	printf@len& (0+255),f,b
  8519  000AAA  A0D8               	btfss	status,0,c
  8520  000AAC  07A4               	decf	(printf@len+1)& (0+255),f,b
  8521  000AAE  0100               	movlb	0	; () banked
  8522  000AB0  29A3               	incf	printf@len& (0+255),w,b
  8523  000AB2  E1E3               	bnz	l4304
  8524  000AB4  0100               	movlb	0	; () banked
  8525  000AB6  29A4               	incf	(printf@len+1)& (0+255),w,b
  8526  000AB8  B4D8               	btfsc	status,2,c
  8527  000ABA  D10A               	goto	l4386
  8528  000ABC  D7DE               	goto	l4304
  8529  000ABE                     l4310:
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;doprnt.c: 818: flag |= 0x40;
  8533  000ABE  0100               	movlb	0	; () banked
  8534  000AC0  8DA7               	bsf	printf@flag& (0+255),6,b
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;doprnt.c: 822: }
  8538                           
  8539                           ;doprnt.c: 819: break;
  8540  000AC2  D01D               	goto	l982
  8541  000AC4                     l4314:
  8542  000AC4  C08E  FFF6         	movff	printf@f,tblptrl
  8543  000AC8  C08F  FFF7         	movff	printf@f+1,tblptrh
  8544  000ACC  0100               	movlb	0	; () banked
  8545  000ACE  4B8E               	infsnz	printf@f& (0+255),f,b
  8546  000AD0  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8547  000AD2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8548  000AD2  6AF8               	clrf	tblptru,c
  8549  000AD4                     	endif
  8550  000AD4                     	if	0	;tblptru may be non-zero
  8551  000AD4                     	endif
  8552  000AD4  0008               	tblrd		*
  8553  000AD6  CFF5 F0A8          	movff	tablat,printf@c
  8554  000ADA  0100               	movlb	0	; () banked
  8555  000ADC  51A8               	movf	printf@c& (0+255),w,b
  8556                           
  8557                           ; Switch size 1, requested type "space"
  8558                           ; Number of cases is 5, Range of values is 0 to 117
  8559                           ; switch strategies available:
  8560                           ; Name         Instructions Cycles
  8561                           ; simple_byte           16     9 (average)
  8562                           ;	Chosen strategy is simple_byte
  8563  000ADE  0A00               	xorlw	0	; case 0
  8564  000AE0  B4D8               	btfsc	status,2,c
  8565  000AE2  0012               	return	
  8566  000AE4  0A64               	xorlw	100	; case 100
  8567  000AE6  B4D8               	btfsc	status,2,c
  8568  000AE8  D00A               	goto	l982
  8569  000AEA  0A0D               	xorlw	13	; case 105
  8570  000AEC  B4D8               	btfsc	status,2,c
  8571  000AEE  D007               	goto	l982
  8572  000AF0  0A1A               	xorlw	26	; case 115
  8573  000AF2  B4D8               	btfsc	status,2,c
  8574  000AF4  D758               	goto	l4280
  8575  000AF6  0A06               	xorlw	6	; case 117
  8576  000AF8  B4D8               	btfsc	status,2,c
  8577  000AFA  D7E1               	goto	l4310
  8578  000AFC  D0E9               	goto	l4386
  8579  000AFE                     l982:
  8580                           
  8581                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8582  000AFE  0100               	movlb	0	; () banked
  8583  000B00  BDA7               	btfsc	printf@flag& (0+255),6,b
  8584  000B02  D019               	goto	l4326
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;doprnt.c: 1253: {
  8588                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8589  000B04  C0A1  FFD9         	movff	printf@ap,fsr2l
  8590  000B08  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8591  000B0C  CFDE F0A5          	movff	postinc2,printf@val
  8592  000B10  CFDD F0A6          	movff	postdec2,printf@val+1
  8593                           
  8594                           ; BSR set to: 0
  8595  000B14  0E02               	movlw	2
  8596  000B16  0100               	movlb	0	; () banked
  8597  000B18  27A1               	addwf	printf@ap& (0+255),f,b
  8598  000B1A  0E00               	movlw	0
  8599  000B1C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;doprnt.c: 1261: if((int)val < 0) {
  8603  000B1E  0100               	movlb	0	; () banked
  8604  000B20  AFA6               	btfss	(printf@val+1)& (0+255),7,b
  8605  000B22  D016               	goto	l4330
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;doprnt.c: 1262: flag |= 0x03;
  8609  000B24  0E03               	movlw	3
  8610  000B26  0100               	movlb	0	; () banked
  8611  000B28  13A7               	iorwf	printf@flag& (0+255),f,b
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;doprnt.c: 1263: val = -val;
  8615  000B2A  0100               	movlb	0	; () banked
  8616  000B2C  6DA5               	negf	printf@val& (0+255),b
  8617  000B2E  1FA6               	comf	(printf@val+1)& (0+255),f,b
  8618  000B30  B0D8               	btfsc	status,0,c
  8619  000B32  2BA6               	incf	(printf@val+1)& (0+255),f,b
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;doprnt.c: 1264: }
  8623                           ;doprnt.c: 1266: }
  8624  000B34  D00D               	goto	l4330
  8625  000B36                     l4326:
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;doprnt.c: 1268: else
  8629                           ;doprnt.c: 1273: {
  8630                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8631  000B36  C0A1  FFD9         	movff	printf@ap,fsr2l
  8632  000B3A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  8633  000B3E  CFDE F0A5          	movff	postinc2,printf@val
  8634  000B42  CFDD F0A6          	movff	postdec2,printf@val+1
  8635                           
  8636                           ; BSR set to: 0
  8637  000B46  0E02               	movlw	2
  8638  000B48  0100               	movlb	0	; () banked
  8639  000B4A  27A1               	addwf	printf@ap& (0+255),f,b
  8640  000B4C  0E00               	movlw	0
  8641  000B4E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  8642  000B50                     l4330:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;doprnt.c: 1287: }
  8646                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8647  000B50  0E01               	movlw	1
  8648  000B52  0100               	movlb	0	; () banked
  8649  000B54  6FA8               	movwf	printf@c& (0+255),b
  8650  000B56                     l4332:
  8651                           
  8652                           ; BSR set to: 0
  8653  000B56  0E05               	movlw	5
  8654  000B58  0100               	movlb	0	; () banked
  8655  000B5A  19A8               	xorwf	printf@c& (0+255),w,b
  8656  000B5C  B4D8               	btfsc	status,2,c
  8657  000B5E  D019               	goto	l4344
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;doprnt.c: 1306: if(val < dpowers[c])
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  000B60  0100               	movlb	0	; () banked
  8666  000B62  51A8               	movf	printf@c& (0+255),w,b
  8667  000B64  0D02               	mullw	2
  8668  000B66  0EA4               	movlw	low _dpowers
  8669  000B68  24F3               	addwf	prodl,w,c
  8670  000B6A  6EF6               	movwf	tblptrl,c
  8671  000B6C  0EFD               	movlw	high _dpowers
  8672  000B6E  20F4               	addwfc	prodh,w,c
  8673  000B70  6EF7               	movwf	tblptrh,c
  8674  000B72                     	if	1	;There are 3 active tblptr bytes
  8675  000B72  6AF8               	clrf	tblptru,c
  8676  000B74  0E00               	movlw	low (__mediumconst shr (0+16))
  8677  000B76  22F8               	addwfc	tblptru,f,c
  8678  000B78                     	endif
  8679  000B78  0009               	tblrd		*+
  8680  000B7A  50F5               	movf	tablat,w,c
  8681  000B7C  0100               	movlb	0	; () banked
  8682  000B7E  5DA5               	subwf	printf@val& (0+255),w,b
  8683  000B80  0009               	tblrd		*+
  8684  000B82  50F5               	movf	tablat,w,c
  8685  000B84  0100               	movlb	0	; () banked
  8686  000B86  59A6               	subwfb	(printf@val+1)& (0+255),w,b
  8687  000B88  A0D8               	btfss	status,0,c
  8688  000B8A  D003               	goto	l4344
  8689                           
  8690                           ; BSR set to: 0
  8691                           
  8692                           ; BSR set to: 0
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;doprnt.c: 1307: break;
  8696  000B8C  0100               	movlb	0	; () banked
  8697  000B8E  2BA8               	incf	printf@c& (0+255),f,b
  8698  000B90  D7E2               	goto	l4332
  8699  000B92                     l4344:
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8703  000B92  0100               	movlb	0	; () banked
  8704  000B94  51A9               	movf	printf@width& (0+255),w,b
  8705  000B96  0100               	movlb	0	; () banked
  8706  000B98  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8707  000B9A  B4D8               	btfsc	status,2,c
  8708  000B9C  D00B               	goto	l4350
  8709                           
  8710                           ; BSR set to: 0
  8711  000B9E  C0A7  F09A         	movff	printf@flag,??_printf
  8712  000BA2  0E03               	movlw	3
  8713  000BA4  0100               	movlb	0	; () banked
  8714  000BA6  179A               	andwf	??_printf& (0+255),f,b
  8715  000BA8  B4D8               	btfsc	status,2,c
  8716  000BAA  D004               	goto	l4350
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;doprnt.c: 1346: width--;
  8720  000BAC  0100               	movlb	0	; () banked
  8721  000BAE  07A9               	decf	printf@width& (0+255),f,b
  8722  000BB0  A0D8               	btfss	status,0,c
  8723  000BB2  07AA               	decf	(printf@width+1)& (0+255),f,b
  8724  000BB4                     l4350:
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;doprnt.c: 1381: if(width > c)
  8728  000BB4  0E80               	movlw	128
  8729  000BB6  0100               	movlb	0	; () banked
  8730  000BB8  BFA8               	btfsc	printf@c& (0+255),7,b
  8731  000BBA  0E7F               	movlw	127
  8732  000BBC  0100               	movlb	0	; () banked
  8733  000BBE  6F9A               	movwf	??_printf& (0+255),b
  8734  000BC0  0100               	movlb	0	; () banked
  8735  000BC2  51A9               	movf	printf@width& (0+255),w,b
  8736  000BC4  0100               	movlb	0	; () banked
  8737  000BC6  5DA8               	subwf	printf@c& (0+255),w,b
  8738  000BC8  0100               	movlb	0	; () banked
  8739  000BCA  51AA               	movf	(printf@width+1)& (0+255),w,b
  8740  000BCC  0A80               	xorlw	128
  8741  000BCE  0100               	movlb	0	; () banked
  8742  000BD0  599A               	subwfb	??_printf& (0+255),w,b
  8743  000BD2  B0D8               	btfsc	status,0,c
  8744  000BD4  D00B               	goto	l4354
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;doprnt.c: 1382: width -= c;
  8748  000BD6  0100               	movlb	0	; () banked
  8749  000BD8  51A8               	movf	printf@c& (0+255),w,b
  8750  000BDA  0100               	movlb	0	; () banked
  8751  000BDC  5FA9               	subwf	printf@width& (0+255),f,b
  8752  000BDE  0E00               	movlw	0
  8753  000BE0  0100               	movlb	0	; () banked
  8754  000BE2  BFA8               	btfsc	printf@c& (0+255),7,b
  8755  000BE4  0EFF               	movlw	255
  8756  000BE6  0100               	movlb	0	; () banked
  8757  000BE8  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  8758  000BEA  D005               	goto	l4356
  8759  000BEC                     l4354:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;doprnt.c: 1383: else
  8763                           ;doprnt.c: 1384: width = 0;
  8764  000BEC  0E00               	movlw	0
  8765  000BEE  0100               	movlb	0	; () banked
  8766  000BF0  6FAA               	movwf	(printf@width+1)& (0+255),b
  8767  000BF2  0E00               	movlw	0
  8768  000BF4  6FA9               	movwf	printf@width& (0+255),b
  8769  000BF6                     l4356:
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;doprnt.c: 1387: if(flag & 0x04) {
  8773  000BF6  0100               	movlb	0	; () banked
  8774  000BF8  A5A7               	btfss	printf@flag& (0+255),2,b
  8775  000BFA  D018               	goto	l4368
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;doprnt.c: 1392: if(flag & 0x03)
  8779  000BFC  C0A7  F09A         	movff	printf@flag,??_printf
  8780  000C00  0E03               	movlw	3
  8781  000C02  0100               	movlb	0	; () banked
  8782  000C04  179A               	andwf	??_printf& (0+255),f,b
  8783  000C06  B4D8               	btfsc	status,2,c
  8784  000C08  D003               	goto	l4362
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;doprnt.c: 1393: (putch('-') );
  8788  000C0A  0E2D               	movlw	45
  8789  000C0C  EC65  F019         	call	_putch
  8790  000C10                     l4362:
  8791                           
  8792                           ;doprnt.c: 1415: if(width)
  8793  000C10  0100               	movlb	0	; () banked
  8794  000C12  51A9               	movf	printf@width& (0+255),w,b
  8795  000C14  0100               	movlb	0	; () banked
  8796  000C16  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8797  000C18  B4D8               	btfsc	status,2,c
  8798  000C1A  D025               	goto	l4378
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;doprnt.c: 1417: (putch('0') );
  8802                           
  8803                           ; BSR set to: 0
  8804                           
  8805                           ;doprnt.c: 1416: do
  8806  000C1C  0E30               	movlw	48
  8807  000C1E  EC65  F019         	call	_putch
  8808                           
  8809                           ;doprnt.c: 1418: while(--width);
  8810  000C22  0100               	movlb	0	; () banked
  8811  000C24  07A9               	decf	printf@width& (0+255),f,b
  8812  000C26  A0D8               	btfss	status,0,c
  8813  000C28  07AA               	decf	(printf@width+1)& (0+255),f,b
  8814  000C2A  D7F2               	goto	l4362
  8815  000C2C                     l4368:
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;doprnt.c: 1422: {
  8819                           ;doprnt.c: 1424: if(width
  8820                           ;doprnt.c: 1428: )
  8821  000C2C  0100               	movlb	0	; () banked
  8822  000C2E  51A9               	movf	printf@width& (0+255),w,b
  8823  000C30  0100               	movlb	0	; () banked
  8824  000C32  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8825  000C34  B4D8               	btfsc	status,2,c
  8826  000C36  D00D               	goto	l4374
  8827  000C38                     l4370:
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;doprnt.c: 1430: (putch(' ') );
  8831  000C38  0E20               	movlw	32
  8832  000C3A  EC65  F019         	call	_putch
  8833                           
  8834                           ;doprnt.c: 1431: while(--width);
  8835  000C3E  0100               	movlb	0	; () banked
  8836  000C40  07A9               	decf	printf@width& (0+255),f,b
  8837  000C42  A0D8               	btfss	status,0,c
  8838  000C44  07AA               	decf	(printf@width+1)& (0+255),f,b
  8839  000C46  0100               	movlb	0	; () banked
  8840  000C48  51A9               	movf	printf@width& (0+255),w,b
  8841  000C4A  0100               	movlb	0	; () banked
  8842  000C4C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  8843  000C4E  A4D8               	btfss	status,2,c
  8844  000C50  D7F3               	goto	l4370
  8845  000C52                     l4374:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;doprnt.c: 1438: if(flag & 0x03)
  8849  000C52  C0A7  F09A         	movff	printf@flag,??_printf
  8850  000C56  0E03               	movlw	3
  8851  000C58  0100               	movlb	0	; () banked
  8852  000C5A  179A               	andwf	??_printf& (0+255),f,b
  8853  000C5C  B4D8               	btfsc	status,2,c
  8854  000C5E  D003               	goto	l4378
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;doprnt.c: 1439: (putch('-') );
  8858  000C60  0E2D               	movlw	45
  8859  000C62  EC65  F019         	call	_putch
  8860  000C66                     l4378:
  8861                           
  8862                           ;doprnt.c: 1469: }
  8863                           ;doprnt.c: 1472: prec = c;
  8864  000C66  C0A8  F09E         	movff	printf@c,printf@prec
  8865                           
  8866                           ;doprnt.c: 1474: while(prec--) {
  8867  000C6A  D02C               	goto	l4384
  8868  000C6C                     l4380:
  8869                           
  8870                           ;doprnt.c: 1478: {
  8871                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8872  000C6C  0100               	movlb	0	; () banked
  8873  000C6E  519E               	movf	printf@prec& (0+255),w,b
  8874  000C70  0D02               	mullw	2
  8875  000C72  0EA4               	movlw	low _dpowers
  8876  000C74  24F3               	addwf	prodl,w,c
  8877  000C76  6EF6               	movwf	tblptrl,c
  8878  000C78  0EFD               	movlw	high _dpowers
  8879  000C7A  20F4               	addwfc	prodh,w,c
  8880  000C7C  6EF7               	movwf	tblptrh,c
  8881  000C7E                     	if	1	;There are 3 active tblptr bytes
  8882  000C7E  6AF8               	clrf	tblptru,c
  8883  000C80  0E00               	movlw	low (__mediumconst shr (0+16))
  8884  000C82  22F8               	addwfc	tblptru,f,c
  8885  000C84                     	endif
  8886  000C84  0009               	tblrd		*+
  8887  000C86  CFF5 F082          	movff	tablat,___lwdiv@divisor
  8888  000C8A  000A               	tblrd		*-
  8889  000C8C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  8890  000C90  C0A5  F080         	movff	printf@val,___lwdiv@dividend
  8891  000C94  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
  8892  000C98  EC21  F014         	call	___lwdiv	;wreg free
  8893  000C9C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  8894  000CA0  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  8895  000CA4  0E00               	movlw	0
  8896  000CA6  0100               	movlb	0	; () banked
  8897  000CA8  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8898  000CAA  0E0A               	movlw	10
  8899  000CAC  6F89               	movwf	___lwmod@divisor& (0+255),b
  8900  000CAE  EC3C  F015         	call	___lwmod	;wreg free
  8901  000CB2  0100               	movlb	0	; () banked
  8902  000CB4  5187               	movf	?___lwmod& (0+255),w,b
  8903  000CB6  0F30               	addlw	48
  8904  000CB8  0100               	movlb	0	; () banked
  8905  000CBA  6FA8               	movwf	printf@c& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;doprnt.c: 1523: }
  8909                           ;doprnt.c: 1524: (putch(c) );
  8910  000CBC  0100               	movlb	0	; () banked
  8911  000CBE  51A8               	movf	printf@c& (0+255),w,b
  8912  000CC0  EC65  F019         	call	_putch
  8913  000CC4                     l4384:
  8914  000CC4  0100               	movlb	0	; () banked
  8915  000CC6  079E               	decf	printf@prec& (0+255),f,b
  8916  000CC8  0100               	movlb	0	; () banked
  8917  000CCA  299E               	incf	printf@prec& (0+255),w,b
  8918  000CCC  A4D8               	btfss	status,2,c
  8919  000CCE  D7CE               	goto	l4380
  8920  000CD0                     l4386:
  8921  000CD0  C08E  FFF6         	movff	printf@f,tblptrl
  8922  000CD4  C08F  FFF7         	movff	printf@f+1,tblptrh
  8923  000CD8  0100               	movlb	0	; () banked
  8924  000CDA  4B8E               	infsnz	printf@f& (0+255),f,b
  8925  000CDC  2B8F               	incf	(printf@f+1)& (0+255),f,b
  8926  000CDE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8927  000CDE  6AF8               	clrf	tblptru,c
  8928  000CE0                     	endif
  8929  000CE0                     	if	0	;tblptru may be non-zero
  8930  000CE0                     	endif
  8931  000CE0  0008               	tblrd		*
  8932  000CE2  CFF5 F0A8          	movff	tablat,printf@c
  8933  000CE6  0100               	movlb	0	; () banked
  8934  000CE8  51A8               	movf	printf@c& (0+255),w,b
  8935  000CEA  B4D8               	btfsc	status,2,c
  8936  000CEC  0012               	return	
  8937  000CEE  D5EB               	goto	l4256
  8938  000CF0                     __end_of_printf:
  8939                           	opt stack 0
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           intcon	equ	0xFF2
  8947                           intcon2	equ	0xFF1
  8948                           intcon3	equ	0xFF0
  8949                           indf0	equ	0xFEF
  8950                           postinc0	equ	0xFEE
  8951                           fsr0h	equ	0xFEA
  8952                           fsr0l	equ	0xFE9
  8953                           wreg	equ	0xFE8
  8954                           postdec1	equ	0xFE5
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function _putch *****************
  8964 ;; Defined at:
  8965 ;;		line 20 in file "lcd.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;  data            1    wreg     unsigned char 
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;  data            1    2[BANK0 ] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  1    wreg      void 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;Total ram usage:        1 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    8
  8986 ;; This function calls:
  8987 ;;		_lcdNibble
  8988 ;; This function is called by:
  8989 ;;		_printf
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text35
  8994  0032CA                     __ptext35:
  8995                           	opt stack 0
  8996  0032CA                     _putch:
  8997                           	opt stack 18
  8998                           
  8999                           ;incstack = 0
  9000                           ;putch@data stored from wreg
  9001  0032CA  0100               	movlb	0	; () banked
  9002  0032CC  6F82               	movwf	putch@data& (0+255),b
  9003                           
  9004                           ;lcd.c: 21: LATDbits.LATD2 = 1;
  9005  0032CE  848C               	bsf	3980,2,c	;volatile
  9006                           
  9007                           ;lcd.c: 22: lcdNibble(data);
  9008  0032D0  0100               	movlb	0	; () banked
  9009  0032D2  5182               	movf	putch@data& (0+255),w,b
  9010  0032D4  EC08  F015         	call	_lcdNibble
  9011  0032D8  0012               	return		;funcret
  9012  0032DA                     __end_of_putch:
  9013                           	opt stack 0
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon	equ	0xFF2
  9021                           intcon2	equ	0xFF1
  9022                           intcon3	equ	0xFF0
  9023                           indf0	equ	0xFEF
  9024                           postinc0	equ	0xFEE
  9025                           fsr0h	equ	0xFEA
  9026                           fsr0l	equ	0xFE9
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _isdigit *****************
  9038 ;; Defined at:
  9039 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  c               1    wreg     unsigned char 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  c               1    2[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;Total ram usage:        3 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    7
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_printf
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text36
  9068  003118                     __ptext36:
  9069                           	opt stack 0
  9070  003118                     _isdigit:
  9071                           	opt stack 19
  9072                           
  9073                           ;incstack = 0
  9074                           ;isdigit@c stored from wreg
  9075  003118  0100               	movlb	0	; () banked
  9076  00311A  6F82               	movwf	isdigit@c& (0+255),b
  9077  00311C  0E00               	movlw	0
  9078  00311E  0100               	movlb	0	; () banked
  9079  003120  6F81               	movwf	_isdigit$1645& (0+255),b
  9080                           
  9081                           ; BSR set to: 0
  9082  003122  0E3A               	movlw	58
  9083  003124  0100               	movlb	0	; () banked
  9084  003126  6182               	cpfslt	isdigit@c& (0+255),b
  9085  003128  D007               	goto	l4106
  9086                           
  9087                           ; BSR set to: 0
  9088  00312A  0E2F               	movlw	47
  9089  00312C  0100               	movlb	0	; () banked
  9090  00312E  6582               	cpfsgt	isdigit@c& (0+255),b
  9091  003130  D003               	goto	l4106
  9092                           
  9093                           ; BSR set to: 0
  9094  003132  0E01               	movlw	1
  9095  003134  0100               	movlb	0	; () banked
  9096  003136  6F81               	movwf	_isdigit$1645& (0+255),b
  9097  003138                     l4106:
  9098                           
  9099                           ; BSR set to: 0
  9100  003138  C081  F080         	movff	_isdigit$1645,??_isdigit
  9101  00313C  0100               	movlb	0	; () banked
  9102  00313E  3180               	rrcf	??_isdigit& (0+255),w,b
  9103  003140  0012               	return	
  9104  003142                     __end_of_isdigit:
  9105                           	opt stack 0
  9106                           tblptru	equ	0xFF8
  9107                           tblptrh	equ	0xFF7
  9108                           tblptrl	equ	0xFF6
  9109                           tablat	equ	0xFF5
  9110                           prodh	equ	0xFF4
  9111                           prodl	equ	0xFF3
  9112                           intcon	equ	0xFF2
  9113                           intcon2	equ	0xFF1
  9114                           intcon3	equ	0xFF0
  9115                           indf0	equ	0xFEF
  9116                           postinc0	equ	0xFEE
  9117                           fsr0h	equ	0xFEA
  9118                           fsr0l	equ	0xFE9
  9119                           wreg	equ	0xFE8
  9120                           postdec1	equ	0xFE5
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function ___wmul *****************
  9130 ;; Defined at:
  9131 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9134 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  product         2    4[BANK0 ] unsigned int 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  2    0[BANK0 ] unsigned int 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, prodl, prodh
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;Total ram usage:        6 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    7
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_printf
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text37
  9161  002E4C                     __ptext37:
  9162                           	opt stack 0
  9163  002E4C                     ___wmul:
  9164                           	opt stack 19
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;incstack = 0
  9168  002E4C  0100               	movlb	0	; () banked
  9169  002E4E  5180               	movf	___wmul@multiplier& (0+255),w,b
  9170  002E50  0100               	movlb	0	; () banked
  9171  002E52  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9172  002E54  CFF3 F084          	movff	prodl,___wmul@product
  9173  002E58  CFF4 F085          	movff	prodh,___wmul@product+1
  9174  002E5C  0100               	movlb	0	; () banked
  9175  002E5E  5180               	movf	___wmul@multiplier& (0+255),w,b
  9176  002E60  0100               	movlb	0	; () banked
  9177  002E62  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9178  002E64  50F3               	movf	prodl,w,c
  9179  002E66  0100               	movlb	0	; () banked
  9180  002E68  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9181  002E6A  0100               	movlb	0	; () banked
  9182  002E6C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9183  002E6E  0100               	movlb	0	; () banked
  9184  002E70  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9185  002E72  50F3               	movf	prodl,w,c
  9186  002E74  0100               	movlb	0	; () banked
  9187  002E76  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9188                           
  9189                           ; BSR set to: 0
  9190  002E78  C084  F080         	movff	___wmul@product,?___wmul
  9191  002E7C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9192  002E80  0012               	return	
  9193  002E82                     __end_of___wmul:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           intcon2	equ	0xFF1
  9203                           intcon3	equ	0xFF0
  9204                           indf0	equ	0xFEF
  9205                           postinc0	equ	0xFEE
  9206                           fsr0h	equ	0xFEA
  9207                           fsr0l	equ	0xFE9
  9208                           wreg	equ	0xFE8
  9209                           postdec1	equ	0xFE5
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           postdec2	equ	0xFDD
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function ___lwmod *****************
  9219 ;; Defined at:
  9220 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  dividend        2    7[BANK0 ] unsigned int 
  9223 ;;  divisor         2    9[BANK0 ] unsigned int 
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;  counter         1   11[BANK0 ] unsigned char 
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  2    7[BANK0 ] unsigned int 
  9228 ;; Registers used:
  9229 ;;		wreg, status,2, status,0
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9235 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;Total ram usage:        5 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:    7
  9242 ;; This function calls:
  9243 ;;		Nothing
  9244 ;; This function is called by:
  9245 ;;		_printf
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text38
  9250  002A78                     __ptext38:
  9251                           	opt stack 0
  9252  002A78                     ___lwmod:
  9253                           	opt stack 19
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;incstack = 0
  9257  002A78  0100               	movlb	0	; () banked
  9258  002A7A  5189               	movf	___lwmod@divisor& (0+255),w,b
  9259  002A7C  0100               	movlb	0	; () banked
  9260  002A7E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9261  002A80  B4D8               	btfsc	status,2,c
  9262  002A82  D026               	goto	l1439
  9263                           
  9264                           ; BSR set to: 0
  9265  002A84  0E01               	movlw	1
  9266  002A86  0100               	movlb	0	; () banked
  9267  002A88  6F8B               	movwf	___lwmod@counter& (0+255),b
  9268  002A8A  D006               	goto	l4144
  9269  002A8C                     l4142:
  9270                           
  9271                           ; BSR set to: 0
  9272  002A8C  0100               	movlb	0	; () banked
  9273  002A8E  90D8               	bcf	status,0,c
  9274  002A90  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  9275  002A92  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9276  002A94  0100               	movlb	0	; () banked
  9277  002A96  2B8B               	incf	___lwmod@counter& (0+255),f,b
  9278  002A98                     l4144:
  9279                           
  9280                           ; BSR set to: 0
  9281  002A98  0100               	movlb	0	; () banked
  9282  002A9A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9283  002A9C  D7F7               	goto	l4142
  9284  002A9E                     l4146:
  9285                           
  9286                           ; BSR set to: 0
  9287  002A9E  0100               	movlb	0	; () banked
  9288  002AA0  5189               	movf	___lwmod@divisor& (0+255),w,b
  9289  002AA2  0100               	movlb	0	; () banked
  9290  002AA4  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  9291  002AA6  0100               	movlb	0	; () banked
  9292  002AA8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9293  002AAA  0100               	movlb	0	; () banked
  9294  002AAC  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9295  002AAE  A0D8               	btfss	status,0,c
  9296  002AB0  D008               	goto	l4150
  9297                           
  9298                           ; BSR set to: 0
  9299  002AB2  0100               	movlb	0	; () banked
  9300  002AB4  5189               	movf	___lwmod@divisor& (0+255),w,b
  9301  002AB6  0100               	movlb	0	; () banked
  9302  002AB8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  9303  002ABA  0100               	movlb	0	; () banked
  9304  002ABC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9305  002ABE  0100               	movlb	0	; () banked
  9306  002AC0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9307  002AC2                     l4150:
  9308                           
  9309                           ; BSR set to: 0
  9310  002AC2  0100               	movlb	0	; () banked
  9311  002AC4  90D8               	bcf	status,0,c
  9312  002AC6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9313  002AC8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  9314                           
  9315                           ; BSR set to: 0
  9316  002ACA  0100               	movlb	0	; () banked
  9317  002ACC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  9318  002ACE  D7E7               	goto	l4146
  9319  002AD0                     l1439:
  9320                           
  9321                           ; BSR set to: 0
  9322  002AD0  C087  F087         	movff	___lwmod@dividend,?___lwmod
  9323  002AD4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  9324                           
  9325                           ; BSR set to: 0
  9326  002AD8  0012               	return		;funcret
  9327  002ADA                     __end_of___lwmod:
  9328                           	opt stack 0
  9329                           tblptru	equ	0xFF8
  9330                           tblptrh	equ	0xFF7
  9331                           tblptrl	equ	0xFF6
  9332                           tablat	equ	0xFF5
  9333                           prodh	equ	0xFF4
  9334                           prodl	equ	0xFF3
  9335                           intcon	equ	0xFF2
  9336                           intcon2	equ	0xFF1
  9337                           intcon3	equ	0xFF0
  9338                           indf0	equ	0xFEF
  9339                           postinc0	equ	0xFEE
  9340                           fsr0h	equ	0xFEA
  9341                           fsr0l	equ	0xFE9
  9342                           wreg	equ	0xFE8
  9343                           postdec1	equ	0xFE5
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           fsr2h	equ	0xFDA
  9349                           fsr2l	equ	0xFD9
  9350                           status	equ	0xFD8
  9351                           
  9352 ;; *************** function ___lwdiv *****************
  9353 ;; Defined at:
  9354 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  dividend        2    0[BANK0 ] unsigned int 
  9357 ;;  divisor         2    2[BANK0 ] unsigned int 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  quotient        2    4[BANK0 ] unsigned int 
  9360 ;;  counter         1    6[BANK0 ] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  2    0[BANK0 ] unsigned int 
  9363 ;; Registers used:
  9364 ;;		wreg, status,2, status,0
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9370 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;Total ram usage:        7 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    7
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_printf
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text39
  9385  002842                     __ptext39:
  9386                           	opt stack 0
  9387  002842                     ___lwdiv:
  9388                           	opt stack 19
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;incstack = 0
  9392  002842  0E00               	movlw	0
  9393  002844  0100               	movlb	0	; () banked
  9394  002846  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9395  002848  0E00               	movlw	0
  9396  00284A  6F84               	movwf	___lwdiv@quotient& (0+255),b
  9397                           
  9398                           ; BSR set to: 0
  9399  00284C  0100               	movlb	0	; () banked
  9400  00284E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9401  002850  0100               	movlb	0	; () banked
  9402  002852  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9403  002854  B4D8               	btfsc	status,2,c
  9404  002856  D02C               	goto	l1429
  9405                           
  9406                           ; BSR set to: 0
  9407  002858  0E01               	movlw	1
  9408  00285A  0100               	movlb	0	; () banked
  9409  00285C  6F86               	movwf	___lwdiv@counter& (0+255),b
  9410  00285E  D006               	goto	l4124
  9411  002860                     l4122:
  9412                           
  9413                           ; BSR set to: 0
  9414  002860  0100               	movlb	0	; () banked
  9415  002862  90D8               	bcf	status,0,c
  9416  002864  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  9417  002866  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9418  002868  0100               	movlb	0	; () banked
  9419  00286A  2B86               	incf	___lwdiv@counter& (0+255),f,b
  9420  00286C                     l4124:
  9421                           
  9422                           ; BSR set to: 0
  9423  00286C  0100               	movlb	0	; () banked
  9424  00286E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9425  002870  D7F7               	goto	l4122
  9426  002872                     l4126:
  9427                           
  9428                           ; BSR set to: 0
  9429  002872  0100               	movlb	0	; () banked
  9430  002874  90D8               	bcf	status,0,c
  9431  002876  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  9432  002878  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9433                           
  9434                           ; BSR set to: 0
  9435  00287A  0100               	movlb	0	; () banked
  9436  00287C  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9437  00287E  0100               	movlb	0	; () banked
  9438  002880  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  9439  002882  0100               	movlb	0	; () banked
  9440  002884  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9441  002886  0100               	movlb	0	; () banked
  9442  002888  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9443  00288A  A0D8               	btfss	status,0,c
  9444  00288C  D00A               	goto	l4134
  9445                           
  9446                           ; BSR set to: 0
  9447  00288E  0100               	movlb	0	; () banked
  9448  002890  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9449  002892  0100               	movlb	0	; () banked
  9450  002894  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  9451  002896  0100               	movlb	0	; () banked
  9452  002898  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9453  00289A  0100               	movlb	0	; () banked
  9454  00289C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9455                           
  9456                           ; BSR set to: 0
  9457  00289E  0100               	movlb	0	; () banked
  9458  0028A0  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  9459  0028A2                     l4134:
  9460                           
  9461                           ; BSR set to: 0
  9462  0028A2  0100               	movlb	0	; () banked
  9463  0028A4  90D8               	bcf	status,0,c
  9464  0028A6  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9465  0028A8  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  9466                           
  9467                           ; BSR set to: 0
  9468  0028AA  0100               	movlb	0	; () banked
  9469  0028AC  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  9470  0028AE  D7E1               	goto	l4126
  9471  0028B0                     l1429:
  9472                           
  9473                           ; BSR set to: 0
  9474  0028B0  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  9475  0028B4  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9476                           
  9477                           ; BSR set to: 0
  9478  0028B8  0012               	return		;funcret
  9479  0028BA                     __end_of___lwdiv:
  9480                           	opt stack 0
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           intcon2	equ	0xFF1
  9489                           intcon3	equ	0xFF0
  9490                           indf0	equ	0xFEF
  9491                           postinc0	equ	0xFEE
  9492                           fsr0h	equ	0xFEA
  9493                           fsr0l	equ	0xFE9
  9494                           wreg	equ	0xFE8
  9495                           postdec1	equ	0xFE5
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           fsr2h	equ	0xFDA
  9501                           fsr2l	equ	0xFD9
  9502                           status	equ	0xFD8
  9503                           
  9504 ;; *************** function _lcdInst *****************
  9505 ;; Defined at:
  9506 ;;		line 15 in file "lcd.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  data            1    wreg     unsigned char 
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;  data            1    2[BANK0 ] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  1    wreg      void 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0, cstack
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;Total ram usage:        1 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    8
  9527 ;; This function calls:
  9528 ;;		_lcdNibble
  9529 ;; This function is called by:
  9530 ;;		_UI
  9531 ;;		_change_state_to_menu_start
  9532 ;;		_change_state_to_menu_12
  9533 ;;		_change_state_to_menu_22
  9534 ;;		_initLCD
  9535 ;;		_printRTC
  9536 ;;		_Loading
  9537 ;;		_EEPROM_write
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text40
  9542  0032DA                     __ptext40:
  9543                           	opt stack 0
  9544  0032DA                     _lcdInst:
  9545                           	opt stack 20
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;incstack = 0
  9549                           ;lcdInst@data stored from wreg
  9550  0032DA  0100               	movlb	0	; () banked
  9551  0032DC  6F82               	movwf	lcdInst@data& (0+255),b
  9552                           
  9553                           ;lcd.c: 16: LATDbits.LATD2 = 0;
  9554  0032DE  948C               	bcf	3980,2,c	;volatile
  9555                           
  9556                           ;lcd.c: 17: lcdNibble(data);
  9557  0032E0  0100               	movlb	0	; () banked
  9558  0032E2  5182               	movf	lcdInst@data& (0+255),w,b
  9559  0032E4  EC08  F015         	call	_lcdNibble
  9560  0032E8  0012               	return		;funcret
  9561  0032EA                     __end_of_lcdInst:
  9562                           	opt stack 0
  9563                           tblptru	equ	0xFF8
  9564                           tblptrh	equ	0xFF7
  9565                           tblptrl	equ	0xFF6
  9566                           tablat	equ	0xFF5
  9567                           prodh	equ	0xFF4
  9568                           prodl	equ	0xFF3
  9569                           intcon	equ	0xFF2
  9570                           intcon2	equ	0xFF1
  9571                           intcon3	equ	0xFF0
  9572                           indf0	equ	0xFEF
  9573                           postinc0	equ	0xFEE
  9574                           fsr0h	equ	0xFEA
  9575                           fsr0l	equ	0xFE9
  9576                           wreg	equ	0xFE8
  9577                           postdec1	equ	0xFE5
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           postdec2	equ	0xFDD
  9582                           fsr2h	equ	0xFDA
  9583                           fsr2l	equ	0xFD9
  9584                           status	equ	0xFD8
  9585                           
  9586 ;; *************** function _lcdNibble *****************
  9587 ;; Defined at:
  9588 ;;		line 25 in file "lcd.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;  data            1    wreg     unsigned char 
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;  data            1    1[BANK0 ] unsigned char 
  9593 ;;  temp            1    0[BANK0 ] unsigned char 
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		wreg, status,2, status,0
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        2 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    7
  9610 ;; This function calls:
  9611 ;;		Nothing
  9612 ;; This function is called by:
  9613 ;;		_lcdInst
  9614 ;;		_putch
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text41
  9619  002A10                     __ptext41:
  9620                           	opt stack 0
  9621  002A10                     _lcdNibble:
  9622                           	opt stack 20
  9623                           
  9624                           ;incstack = 0
  9625                           ;lcdNibble@data stored from wreg
  9626  002A10  0100               	movlb	0	; () banked
  9627  002A12  6F81               	movwf	lcdNibble@data& (0+255),b
  9628                           
  9629                           ;lcd.c: 27: char temp = data & 0xF0;
  9630  002A14  0100               	movlb	0	; () banked
  9631  002A16  5181               	movf	lcdNibble@data& (0+255),w,b
  9632  002A18  0BF0               	andlw	240
  9633  002A1A  0100               	movlb	0	; () banked
  9634  002A1C  6F80               	movwf	lcdNibble@temp& (0+255),b
  9635                           
  9636                           ;lcd.c: 28: LATD = LATD & 0x0F;
  9637  002A1E  508C               	movf	3980,w,c	;volatile
  9638  002A20  0B0F               	andlw	15
  9639  002A22  6E8C               	movwf	3980,c	;volatile
  9640                           
  9641                           ;lcd.c: 29: LATD = temp | LATD;
  9642  002A24  0100               	movlb	0	; () banked
  9643  002A26  5180               	movf	lcdNibble@temp& (0+255),w,b
  9644  002A28  108C               	iorwf	3980,w,c	;volatile
  9645  002A2A  6E8C               	movwf	3980,c	;volatile
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  9649  002A2C  868C               	bsf	3980,3,c	;volatile
  9650                           
  9651                           ; BSR set to: 0
  9652                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9653  002A2E  0E42               	movlw	66
  9654  002A30                     u5497:
  9655  002A30  2EE8               	decfsz	wreg,f,c
  9656  002A32  D7FE               	bra	u5497
  9657  002A34  D000               	nop2	
  9658                           
  9659                           ;lcd.c: 33: LATDbits.LATD3 = 0;
  9660  002A36  968C               	bcf	3980,3,c	;volatile
  9661                           
  9662                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9663  002A38  0E42               	movlw	66
  9664  002A3A                     u5507:
  9665  002A3A  2EE8               	decfsz	wreg,f,c
  9666  002A3C  D7FE               	bra	u5507
  9667  002A3E  D000               	nop2	
  9668                           
  9669                           ;lcd.c: 36: data = data << 4;
  9670  002A40  0100               	movlb	0	; () banked
  9671  002A42  3981               	swapf	lcdNibble@data& (0+255),w,b
  9672  002A44  0BF0               	andlw	240
  9673  002A46  0100               	movlb	0	; () banked
  9674  002A48  6F81               	movwf	lcdNibble@data& (0+255),b
  9675                           
  9676                           ;lcd.c: 38: temp = data & 0xF0;
  9677  002A4A  0100               	movlb	0	; () banked
  9678  002A4C  5181               	movf	lcdNibble@data& (0+255),w,b
  9679  002A4E  0BF0               	andlw	240
  9680  002A50  0100               	movlb	0	; () banked
  9681  002A52  6F80               	movwf	lcdNibble@temp& (0+255),b
  9682                           
  9683                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9684  002A54  508C               	movf	3980,w,c	;volatile
  9685  002A56  0B0F               	andlw	15
  9686  002A58  6E8C               	movwf	3980,c	;volatile
  9687                           
  9688                           ;lcd.c: 40: LATD = temp | LATD;
  9689  002A5A  0100               	movlb	0	; () banked
  9690  002A5C  5180               	movf	lcdNibble@temp& (0+255),w,b
  9691  002A5E  108C               	iorwf	3980,w,c	;volatile
  9692  002A60  6E8C               	movwf	3980,c	;volatile
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;lcd.c: 42: LATDbits.LATD3 = 1;
  9696  002A62  868C               	bsf	3980,3,c	;volatile
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9700  002A64  0E42               	movlw	66
  9701  002A66                     u5517:
  9702  002A66  2EE8               	decfsz	wreg,f,c
  9703  002A68  D7FE               	bra	u5517
  9704  002A6A  D000               	nop2	
  9705                           
  9706                           ;lcd.c: 44: LATDbits.LATD3 = 0;
  9707  002A6C  968C               	bcf	3980,3,c	;volatile
  9708                           
  9709                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
  9710  002A6E  0E42               	movlw	66
  9711  002A70                     u5527:
  9712  002A70  2EE8               	decfsz	wreg,f,c
  9713  002A72  D7FE               	bra	u5527
  9714  002A74  D000               	nop2	
  9715  002A76  0012               	return		;funcret
  9716  002A78                     __end_of_lcdNibble:
  9717                           	opt stack 0
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon	equ	0xFF2
  9725                           intcon2	equ	0xFF1
  9726                           intcon3	equ	0xFF0
  9727                           indf0	equ	0xFEF
  9728                           postinc0	equ	0xFEE
  9729                           fsr0h	equ	0xFEA
  9730                           fsr0l	equ	0xFE9
  9731                           wreg	equ	0xFE8
  9732                           postdec1	equ	0xFE5
  9733                           fsr1l	equ	0xFE1
  9734                           indf2	equ	0xFDF
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function ___awmod *****************
  9742 ;; Defined at:
  9743 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  dividend        2    0[BANK0 ] int 
  9746 ;;  divisor         2    2[BANK0 ] int 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  sign            1    5[BANK0 ] unsigned char 
  9749 ;;  counter         1    4[BANK0 ] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  2    0[BANK0 ] int 
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9763 ;;Total ram usage:        6 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    7
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_UI
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text42
  9774  0025FA                     __ptext42:
  9775                           	opt stack 0
  9776  0025FA                     ___awmod:
  9777                           	opt stack 22
  9778                           
  9779                           ;incstack = 0
  9780  0025FA  0E00               	movlw	0
  9781  0025FC  0100               	movlb	0	; () banked
  9782  0025FE  6F85               	movwf	___awmod@sign& (0+255),b
  9783                           
  9784                           ; BSR set to: 0
  9785  002600  0100               	movlb	0	; () banked
  9786  002602  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9787  002604  D008               	goto	l5348
  9788                           
  9789                           ; BSR set to: 0
  9790  002606  0100               	movlb	0	; () banked
  9791  002608  6D80               	negf	___awmod@dividend& (0+255),b
  9792  00260A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9793  00260C  B0D8               	btfsc	status,0,c
  9794  00260E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9795                           
  9796                           ; BSR set to: 0
  9797  002610  0E01               	movlw	1
  9798  002612  0100               	movlb	0	; () banked
  9799  002614  6F85               	movwf	___awmod@sign& (0+255),b
  9800  002616                     l5348:
  9801                           
  9802                           ; BSR set to: 0
  9803  002616  0100               	movlb	0	; () banked
  9804  002618  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9805  00261A  D005               	goto	l5352
  9806                           
  9807                           ; BSR set to: 0
  9808  00261C  0100               	movlb	0	; () banked
  9809  00261E  6D82               	negf	___awmod@divisor& (0+255),b
  9810  002620  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9811  002622  B0D8               	btfsc	status,0,c
  9812  002624  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9813  002626                     l5352:
  9814                           
  9815                           ; BSR set to: 0
  9816  002626  0100               	movlb	0	; () banked
  9817  002628  5182               	movf	___awmod@divisor& (0+255),w,b
  9818  00262A  0100               	movlb	0	; () banked
  9819  00262C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9820  00262E  B4D8               	btfsc	status,2,c
  9821  002630  D026               	goto	l5368
  9822                           
  9823                           ; BSR set to: 0
  9824  002632  0E01               	movlw	1
  9825  002634  0100               	movlb	0	; () banked
  9826  002636  6F84               	movwf	___awmod@counter& (0+255),b
  9827  002638  D006               	goto	l5358
  9828  00263A                     l5356:
  9829                           
  9830                           ; BSR set to: 0
  9831  00263A  0100               	movlb	0	; () banked
  9832  00263C  90D8               	bcf	status,0,c
  9833  00263E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9834  002640  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9835  002642  0100               	movlb	0	; () banked
  9836  002644  2B84               	incf	___awmod@counter& (0+255),f,b
  9837  002646                     l5358:
  9838                           
  9839                           ; BSR set to: 0
  9840  002646  0100               	movlb	0	; () banked
  9841  002648  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9842  00264A  D7F7               	goto	l5356
  9843  00264C                     l5360:
  9844                           
  9845                           ; BSR set to: 0
  9846  00264C  0100               	movlb	0	; () banked
  9847  00264E  5182               	movf	___awmod@divisor& (0+255),w,b
  9848  002650  0100               	movlb	0	; () banked
  9849  002652  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9850  002654  0100               	movlb	0	; () banked
  9851  002656  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9852  002658  0100               	movlb	0	; () banked
  9853  00265A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9854  00265C  A0D8               	btfss	status,0,c
  9855  00265E  D008               	goto	l5364
  9856                           
  9857                           ; BSR set to: 0
  9858  002660  0100               	movlb	0	; () banked
  9859  002662  5182               	movf	___awmod@divisor& (0+255),w,b
  9860  002664  0100               	movlb	0	; () banked
  9861  002666  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9862  002668  0100               	movlb	0	; () banked
  9863  00266A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9864  00266C  0100               	movlb	0	; () banked
  9865  00266E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9866  002670                     l5364:
  9867                           
  9868                           ; BSR set to: 0
  9869  002670  0100               	movlb	0	; () banked
  9870  002672  90D8               	bcf	status,0,c
  9871  002674  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9872  002676  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9873                           
  9874                           ; BSR set to: 0
  9875  002678  0100               	movlb	0	; () banked
  9876  00267A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9877  00267C  D7E7               	goto	l5360
  9878  00267E                     l5368:
  9879                           
  9880                           ; BSR set to: 0
  9881  00267E  0100               	movlb	0	; () banked
  9882  002680  5185               	movf	___awmod@sign& (0+255),w,b
  9883  002682  0100               	movlb	0	; () banked
  9884  002684  B4D8               	btfsc	status,2,c
  9885  002686  D005               	goto	l5372
  9886                           
  9887                           ; BSR set to: 0
  9888  002688  0100               	movlb	0	; () banked
  9889  00268A  6D80               	negf	___awmod@dividend& (0+255),b
  9890  00268C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9891  00268E  B0D8               	btfsc	status,0,c
  9892  002690  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9893  002692                     l5372:
  9894                           
  9895                           ; BSR set to: 0
  9896  002692  C080  F080         	movff	___awmod@dividend,?___awmod
  9897  002696  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9898  00269A  0012               	return	
  9899  00269C                     __end_of___awmod:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           intcon2	equ	0xFF1
  9909                           intcon3	equ	0xFF0
  9910                           indf0	equ	0xFEF
  9911                           postinc0	equ	0xFEE
  9912                           fsr0h	equ	0xFEA
  9913                           fsr0l	equ	0xFE9
  9914                           wreg	equ	0xFE8
  9915                           postdec1	equ	0xFE5
  9916                           fsr1l	equ	0xFE1
  9917                           indf2	equ	0xFDF
  9918                           postinc2	equ	0xFDE
  9919                           postdec2	equ	0xFDD
  9920                           fsr2h	equ	0xFDA
  9921                           fsr2l	equ	0xFD9
  9922                           status	equ	0xFD8
  9923                           
  9924 ;; *************** function ___awdiv *****************
  9925 ;; Defined at:
  9926 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;  dividend        2    6[BANK0 ] int 
  9929 ;;  divisor         2    8[BANK0 ] int 
  9930 ;; Auto vars:     Size  Location     Type
  9931 ;;  quotient        2   12[BANK0 ] int 
  9932 ;;  sign            1   11[BANK0 ] unsigned char 
  9933 ;;  counter         1   10[BANK0 ] unsigned char 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  2    6[BANK0 ] int 
  9936 ;; Registers used:
  9937 ;;		wreg, status,2, status,0
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;Total ram usage:        8 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    7
  9950 ;; This function calls:
  9951 ;;		Nothing
  9952 ;; This function is called by:
  9953 ;;		_UI
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           	psect	text43
  9958  0023D6                     __ptext43:
  9959                           	opt stack 0
  9960  0023D6                     ___awdiv:
  9961                           	opt stack 22
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;incstack = 0
  9965  0023D6  0E00               	movlw	0
  9966  0023D8  0100               	movlb	0	; () banked
  9967  0023DA  6F8B               	movwf	___awdiv@sign& (0+255),b
  9968                           
  9969                           ; BSR set to: 0
  9970  0023DC  0100               	movlb	0	; () banked
  9971  0023DE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9972  0023E0  D008               	goto	l5304
  9973                           
  9974                           ; BSR set to: 0
  9975  0023E2  0100               	movlb	0	; () banked
  9976  0023E4  6D88               	negf	___awdiv@divisor& (0+255),b
  9977  0023E6  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9978  0023E8  B0D8               	btfsc	status,0,c
  9979  0023EA  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9980                           
  9981                           ; BSR set to: 0
  9982  0023EC  0E01               	movlw	1
  9983  0023EE  0100               	movlb	0	; () banked
  9984  0023F0  6F8B               	movwf	___awdiv@sign& (0+255),b
  9985  0023F2                     l5304:
  9986                           
  9987                           ; BSR set to: 0
  9988  0023F2  0100               	movlb	0	; () banked
  9989  0023F4  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9990  0023F6  D008               	goto	l5310
  9991                           
  9992                           ; BSR set to: 0
  9993  0023F8  0100               	movlb	0	; () banked
  9994  0023FA  6D86               	negf	___awdiv@dividend& (0+255),b
  9995  0023FC  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9996  0023FE  B0D8               	btfsc	status,0,c
  9997  002400  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9998                           
  9999                           ; BSR set to: 0
 10000  002402  0E01               	movlw	1
 10001  002404  0100               	movlb	0	; () banked
 10002  002406  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10003  002408                     l5310:
 10004                           
 10005                           ; BSR set to: 0
 10006  002408  0E00               	movlw	0
 10007  00240A  0100               	movlb	0	; () banked
 10008  00240C  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10009  00240E  0E00               	movlw	0
 10010  002410  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10011                           
 10012                           ; BSR set to: 0
 10013  002412  0100               	movlb	0	; () banked
 10014  002414  5188               	movf	___awdiv@divisor& (0+255),w,b
 10015  002416  0100               	movlb	0	; () banked
 10016  002418  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10017  00241A  B4D8               	btfsc	status,2,c
 10018  00241C  D02C               	goto	l5332
 10019                           
 10020                           ; BSR set to: 0
 10021  00241E  0E01               	movlw	1
 10022  002420  0100               	movlb	0	; () banked
 10023  002422  6F8A               	movwf	___awdiv@counter& (0+255),b
 10024  002424  D006               	goto	l5318
 10025  002426                     l5316:
 10026                           
 10027                           ; BSR set to: 0
 10028  002426  0100               	movlb	0	; () banked
 10029  002428  90D8               	bcf	status,0,c
 10030  00242A  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10031  00242C  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10032  00242E  0100               	movlb	0	; () banked
 10033  002430  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10034  002432                     l5318:
 10035                           
 10036                           ; BSR set to: 0
 10037  002432  0100               	movlb	0	; () banked
 10038  002434  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10039  002436  D7F7               	goto	l5316
 10040  002438                     l5320:
 10041                           
 10042                           ; BSR set to: 0
 10043  002438  0100               	movlb	0	; () banked
 10044  00243A  90D8               	bcf	status,0,c
 10045  00243C  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10046  00243E  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10047                           
 10048                           ; BSR set to: 0
 10049  002440  0100               	movlb	0	; () banked
 10050  002442  5188               	movf	___awdiv@divisor& (0+255),w,b
 10051  002444  0100               	movlb	0	; () banked
 10052  002446  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10053  002448  0100               	movlb	0	; () banked
 10054  00244A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10055  00244C  0100               	movlb	0	; () banked
 10056  00244E  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10057  002450  A0D8               	btfss	status,0,c
 10058  002452  D00A               	goto	l5328
 10059                           
 10060                           ; BSR set to: 0
 10061  002454  0100               	movlb	0	; () banked
 10062  002456  5188               	movf	___awdiv@divisor& (0+255),w,b
 10063  002458  0100               	movlb	0	; () banked
 10064  00245A  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10065  00245C  0100               	movlb	0	; () banked
 10066  00245E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10067  002460  0100               	movlb	0	; () banked
 10068  002462  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10069                           
 10070                           ; BSR set to: 0
 10071  002464  0100               	movlb	0	; () banked
 10072  002466  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10073  002468                     l5328:
 10074                           
 10075                           ; BSR set to: 0
 10076  002468  0100               	movlb	0	; () banked
 10077  00246A  90D8               	bcf	status,0,c
 10078  00246C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10079  00246E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10080                           
 10081                           ; BSR set to: 0
 10082  002470  0100               	movlb	0	; () banked
 10083  002472  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10084  002474  D7E1               	goto	l5320
 10085  002476                     l5332:
 10086                           
 10087                           ; BSR set to: 0
 10088  002476  0100               	movlb	0	; () banked
 10089  002478  518B               	movf	___awdiv@sign& (0+255),w,b
 10090  00247A  0100               	movlb	0	; () banked
 10091  00247C  B4D8               	btfsc	status,2,c
 10092  00247E  D005               	goto	l5336
 10093                           
 10094                           ; BSR set to: 0
 10095  002480  0100               	movlb	0	; () banked
 10096  002482  6D8C               	negf	___awdiv@quotient& (0+255),b
 10097  002484  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10098  002486  B0D8               	btfsc	status,0,c
 10099  002488  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10100  00248A                     l5336:
 10101                           
 10102                           ; BSR set to: 0
 10103  00248A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10104  00248E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10105  002492  0012               	return	
 10106  002494                     __end_of___awdiv:
 10107                           	opt stack 0
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           intcon3	equ	0xFF0
 10117                           indf0	equ	0xFEF
 10118                           postinc0	equ	0xFEE
 10119                           fsr0h	equ	0xFEA
 10120                           fsr0l	equ	0xFE9
 10121                           wreg	equ	0xFE8
 10122                           postdec1	equ	0xFE5
 10123                           fsr1l	equ	0xFE1
 10124                           indf2	equ	0xFDF
 10125                           postinc2	equ	0xFDE
 10126                           postdec2	equ	0xFDD
 10127                           fsr2h	equ	0xFDA
 10128                           fsr2l	equ	0xFD9
 10129                           status	equ	0xFD8
 10130                           
 10131 ;; *************** function _Test *****************
 10132 ;; Defined at:
 10133 ;;		line 29 in file "Test.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  2  453[None  ] int 
 10140 ;; Registers used:
 10141 ;;		None
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;Total ram usage:        0 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    7
 10154 ;; This function calls:
 10155 ;;		Nothing
 10156 ;; This function is called by:
 10157 ;;		_main
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text44
 10162  00333E                     __ptext44:
 10163                           	opt stack 0
 10164  00333E                     _Test:
 10165                           	opt stack 23
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;incstack = 0
 10169  00333E  0012               	return		;funcret
 10170  003340                     __end_of_Test:
 10171                           	opt stack 0
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           intcon3	equ	0xFF0
 10181                           indf0	equ	0xFEF
 10182                           postinc0	equ	0xFEE
 10183                           fsr0h	equ	0xFEA
 10184                           fsr0l	equ	0xFE9
 10185                           wreg	equ	0xFE8
 10186                           postdec1	equ	0xFE5
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           fsr2h	equ	0xFDA
 10192                           fsr2l	equ	0xFD9
 10193                           status	equ	0xFD8
 10194                           
 10195 ;; *************** function _handler *****************
 10196 ;; Defined at:
 10197 ;;		line 16 in file "interruptHandler.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;		None
 10202 ;; Return value:  Size  Location     Type
 10203 ;;                  1    wreg      void 
 10204 ;; Registers used:
 10205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;Total ram usage:       16 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    6
 10218 ;; This function calls:
 10219 ;;		_printSortTimer
 10220 ;;		_updateMenu
 10221 ;; This function is called by:
 10222 ;;		Interrupt level 2
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           	psect	intcode
 10227  000008                     __pintcode:
 10228                           	opt stack 0
 10229  000008                     _handler:
 10230                           	opt stack 18
 10231                           
 10232                           ;incstack = 0
 10233  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10234  00000A  EDFB  F00D         	call	int_func,f	;refresh shadow registers
 10235                           tblptru	equ	0xFF8
 10236                           tblptrh	equ	0xFF7
 10237                           tblptrl	equ	0xFF6
 10238                           tablat	equ	0xFF5
 10239                           prodh	equ	0xFF4
 10240                           prodl	equ	0xFF3
 10241                           intcon	equ	0xFF2
 10242                           intcon2	equ	0xFF1
 10243                           intcon3	equ	0xFF0
 10244                           indf0	equ	0xFEF
 10245                           postinc0	equ	0xFEE
 10246                           fsr0h	equ	0xFEA
 10247                           fsr0l	equ	0xFE9
 10248                           wreg	equ	0xFE8
 10249                           postdec1	equ	0xFE5
 10250                           fsr1l	equ	0xFE1
 10251                           indf2	equ	0xFDF
 10252                           postinc2	equ	0xFDE
 10253                           postdec2	equ	0xFDD
 10254                           fsr2h	equ	0xFDA
 10255                           fsr2l	equ	0xFD9
 10256                           status	equ	0xFD8
 10257                           
 10258                           	psect	intcode_body
 10259  001BF6                     __pintcode_body:
 10260                           	opt stack 18
 10261  001BF6                     int_func:
 10262                           	opt stack 18
 10263  001BF6  0006               	pop		; remove dummy address from shadow register refresh
 10264  001BF8  CFFA F04D          	movff	pclath,??_handler+2
 10265  001BFC  CFFB F04E          	movff	pclatu,??_handler+3
 10266  001C00  CFE9 F04F          	movff	fsr0l,??_handler+4
 10267  001C04  CFEA F050          	movff	fsr0h,??_handler+5
 10268  001C08  CFE1 F051          	movff	fsr1l,??_handler+6
 10269  001C0C  CFE2 F052          	movff	fsr1h,??_handler+7
 10270  001C10  CFD9 F053          	movff	fsr2l,??_handler+8
 10271  001C14  CFDA F054          	movff	fsr2h,??_handler+9
 10272  001C18  CFF3 F055          	movff	prodl,??_handler+10
 10273  001C1C  CFF4 F056          	movff	prodh,??_handler+11
 10274  001C20  CFF6 F057          	movff	tblptrl,??_handler+12
 10275  001C24  CFF7 F058          	movff	tblptrh,??_handler+13
 10276  001C28  CFF8 F059          	movff	tblptru,??_handler+14
 10277  001C2C  CFF5 F05A          	movff	tablat,??_handler+15
 10278                           
 10279                           ;interruptHandler.c: 18: if(INT1IF){
 10280  001C30  A0F0               	btfss	intcon3,0,c	;volatile
 10281  001C32  D018               	goto	i2l6138
 10282                           
 10283                           ;interruptHandler.c: 19: INT1IF = 0;
 10284  001C34  90F0               	bcf	intcon3,0,c	;volatile
 10285                           
 10286                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 10287  001C36  0100               	movlb	0	; () banked
 10288  001C38  51FC               	movf	_machine_state& (0+255),w,b
 10289  001C3A  A4D8               	btfss	status,2,c
 10290  001C3C  D013               	goto	i2l6138
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 10294  001C3E  3881               	swapf	3969,w,c	;volatile
 10295  001C40  0B0F               	andlw	15
 10296  001C42  0B0F               	andlw	15
 10297  001C44  6E4B               	movwf	??_handler& (0+255),c
 10298  001C46  6A4C               	clrf	(??_handler+1)& (0+255),c
 10299  001C48  0E93               	movlw	low _keys
 10300  001C4A  244B               	addwf	??_handler,w,c
 10301  001C4C  6EF6               	movwf	tblptrl,c
 10302  001C4E  0EFD               	movlw	high _keys
 10303  001C50  204C               	addwfc	??_handler+1,w,c
 10304  001C52  6EF7               	movwf	tblptrh,c
 10305  001C54                     	if	1	;There are 3 active tblptr bytes
 10306  001C54  6AF8               	clrf	tblptru,c
 10307  001C56  0E00               	movlw	low (__mediumconst shr (0+16))
 10308  001C58  22F8               	addwfc	tblptru,f,c
 10309  001C5A                     	endif
 10310  001C5A  0008               	tblrd		*
 10311  001C5C  CFF5 F07E          	movff	tablat,_input	;volatile
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;interruptHandler.c: 22: updateMenu();
 10315  001C60  EC94  F009         	call	_updateMenu	;wreg free
 10316  001C64                     i2l6138:
 10317                           
 10318                           ;interruptHandler.c: 23: }
 10319                           ;interruptHandler.c: 24: }
 10320                           ;interruptHandler.c: 27: if(TMR0IF){
 10321  001C64  A4F2               	btfss	intcon,2,c	;volatile
 10322  001C66  D00C               	goto	i2l6152
 10323                           
 10324                           ;interruptHandler.c: 28: TMR0IF = 0;
 10325  001C68  94F2               	bcf	intcon,2,c	;volatile
 10326                           
 10327                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 10328  001C6A  0100               	movlb	0	; () banked
 10329  001C6C  05FC               	decf	_machine_state& (0+255),w,b
 10330  001C6E  A4D8               	btfss	status,2,c
 10331  001C70  D007               	goto	i2l6152
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;interruptHandler.c: 30: printSortTimer();
 10335  001C72  EC0F  F00C         	call	_printSortTimer	;wreg free
 10336                           
 10337                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 10338  001C76  0E85               	movlw	133
 10339  001C78  6ED7               	movwf	4055,c	;volatile
 10340                           
 10341                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 10342  001C7A  0EEE               	movlw	238
 10343  001C7C  6ED6               	movwf	4054,c	;volatile
 10344                           
 10345                           ;interruptHandler.c: 34: TMR0ON = 1;
 10346  001C7E  8ED5               	bsf	4053,7,c	;volatile
 10347  001C80                     i2l6152:
 10348                           
 10349                           ;interruptHandler.c: 35: }
 10350                           ;interruptHandler.c: 36: }
 10351                           ;interruptHandler.c: 39: if(TMR1IF){
 10352  001C80  A09E               	btfss	3998,0,c	;volatile
 10353  001C82  D024               	goto	i2l6176
 10354                           
 10355                           ;interruptHandler.c: 40: TMR1IF = 0;
 10356  001C84  909E               	bcf	3998,0,c	;volatile
 10357                           
 10358                           ;interruptHandler.c: 41: TMR1ON = 0;
 10359  001C86  90CD               	bcf	4045,0,c	;volatile
 10360                           
 10361                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 10362  001C88  0100               	movlb	0	; () banked
 10363  001C8A  05FC               	decf	_machine_state& (0+255),w,b
 10364  001C8C  A4D8               	btfss	status,2,c
 10365  001C8E  D01E               	goto	i2l6176
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;interruptHandler.c: 43: if(was_low_1){
 10369  001C90  507A               	movf	_was_low_1,w,c	;volatile
 10370  001C92  107B               	iorwf	_was_low_1+1,w,c	;volatile
 10371  001C94  B4D8               	btfsc	status,2,c
 10372  001C96  D00A               	goto	i2l833
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 10376  001C98  828B               	bsf	3979,1,c	;volatile
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;interruptHandler.c: 45: was_low_1 = 0;
 10380  001C9A  0E00               	movlw	0
 10381  001C9C  6E7B               	movwf	_was_low_1+1,c	;volatile
 10382  001C9E  0E00               	movlw	0
 10383  001CA0  6E7A               	movwf	_was_low_1,c	;volatile
 10384                           
 10385                           ; BSR set to: 0
 10386                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 10387  001CA2  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 10391  001CA6  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 10392                           
 10393                           ;interruptHandler.c: 48: }
 10394  001CAA  D00F               	goto	i2l6174
 10395  001CAC                     i2l833:
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;interruptHandler.c: 49: else{
 10399                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 10400  001CAC  928B               	bcf	3979,1,c	;volatile
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;interruptHandler.c: 51: was_low_1 = 1;
 10404  001CAE  0E00               	movlw	0
 10405  001CB0  6E7B               	movwf	_was_low_1+1,c	;volatile
 10406  001CB2  0E01               	movlw	1
 10407  001CB4  6E7A               	movwf	_was_low_1,c	;volatile
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 10411  001CB6  0101               	movlb	1	; () banked
 10412  001CB8  511C               	movf	_servoTimes& (0+255),w,b
 10413  001CBA  0800               	sublw	0
 10414  001CBC  0F20               	addlw	32
 10415  001CBE  6ECF               	movwf	4047,c	;volatile
 10416                           
 10417                           ; BSR set to: 1
 10418                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 10419  001CC0  0101               	movlb	1	; () banked
 10420  001CC2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 10421  001CC4  0800               	sublw	0
 10422  001CC6  0F20               	addlw	32
 10423  001CC8  6ECE               	movwf	4046,c	;volatile
 10424  001CCA                     i2l6174:
 10425                           
 10426                           ;interruptHandler.c: 54: }
 10427                           ;interruptHandler.c: 55: TMR1ON = 1;
 10428  001CCA  80CD               	bsf	4045,0,c	;volatile
 10429  001CCC                     i2l6176:
 10430                           
 10431                           ;interruptHandler.c: 56: }
 10432                           ;interruptHandler.c: 57: }
 10433                           ;interruptHandler.c: 59: if(TMR3IF){
 10434  001CCC  A2A1               	btfss	4001,1,c	;volatile
 10435  001CCE  D024               	goto	i2l839
 10436                           
 10437                           ;interruptHandler.c: 60: TMR3IF = 0;
 10438  001CD0  92A1               	bcf	4001,1,c	;volatile
 10439                           
 10440                           ;interruptHandler.c: 61: TMR3ON = 0;
 10441  001CD2  90B1               	bcf	4017,0,c	;volatile
 10442                           
 10443                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 10444  001CD4  0100               	movlb	0	; () banked
 10445  001CD6  05FC               	decf	_machine_state& (0+255),w,b
 10446  001CD8  A4D8               	btfss	status,2,c
 10447  001CDA  D01E               	goto	i2l839
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;interruptHandler.c: 63: if(was_low_3){
 10451  001CDC  507C               	movf	_was_low_3,w,c	;volatile
 10452  001CDE  107D               	iorwf	_was_low_3+1,w,c	;volatile
 10453  001CE0  B4D8               	btfsc	status,2,c
 10454  001CE2  D00A               	goto	i2l837
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 10458  001CE4  848B               	bsf	3979,2,c	;volatile
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;interruptHandler.c: 65: was_low_3 = 0;
 10462  001CE6  0E00               	movlw	0
 10463  001CE8  6E7D               	movwf	_was_low_3+1,c	;volatile
 10464  001CEA  0E00               	movlw	0
 10465  001CEC  6E7C               	movwf	_was_low_3,c	;volatile
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 10469  001CEE  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 10473  001CF2  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 10474                           
 10475                           ;interruptHandler.c: 68: }
 10476  001CF6  D00F               	goto	i2l6198
 10477  001CF8                     i2l837:
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;interruptHandler.c: 69: else{
 10481                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 10482  001CF8  948B               	bcf	3979,2,c	;volatile
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;interruptHandler.c: 71: was_low_3 = 1;
 10486  001CFA  0E00               	movlw	0
 10487  001CFC  6E7D               	movwf	_was_low_3+1,c	;volatile
 10488  001CFE  0E01               	movlw	1
 10489  001D00  6E7C               	movwf	_was_low_3,c	;volatile
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 10493  001D02  0101               	movlb	1	; () banked
 10494  001D04  5120               	movf	(_servoTimes+4)& (0+255),w,b
 10495  001D06  0800               	sublw	0
 10496  001D08  0F20               	addlw	32
 10497  001D0A  6EB3               	movwf	4019,c	;volatile
 10498                           
 10499                           ; BSR set to: 1
 10500                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 10501  001D0C  0101               	movlb	1	; () banked
 10502  001D0E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 10503  001D10  0800               	sublw	0
 10504  001D12  0F20               	addlw	32
 10505  001D14  6EB2               	movwf	4018,c	;volatile
 10506  001D16                     i2l6198:
 10507                           
 10508                           ;interruptHandler.c: 74: }
 10509                           ;interruptHandler.c: 75: TMR3ON = 1;
 10510  001D16  80B1               	bsf	4017,0,c	;volatile
 10511  001D18                     i2l839:
 10512  001D18  C05A  FFF5         	movff	??_handler+15,tablat
 10513  001D1C  C059  FFF8         	movff	??_handler+14,tblptru
 10514  001D20  C058  FFF7         	movff	??_handler+13,tblptrh
 10515  001D24  C057  FFF6         	movff	??_handler+12,tblptrl
 10516  001D28  C056  FFF4         	movff	??_handler+11,prodh
 10517  001D2C  C055  FFF3         	movff	??_handler+10,prodl
 10518  001D30  C054  FFDA         	movff	??_handler+9,fsr2h
 10519  001D34  C053  FFD9         	movff	??_handler+8,fsr2l
 10520  001D38  C052  FFE2         	movff	??_handler+7,fsr1h
 10521  001D3C  C051  FFE1         	movff	??_handler+6,fsr1l
 10522  001D40  C050  FFEA         	movff	??_handler+5,fsr0h
 10523  001D44  C04F  FFE9         	movff	??_handler+4,fsr0l
 10524  001D48  C04E  FFFB         	movff	??_handler+3,pclatu
 10525  001D4C  C04D  FFFA         	movff	??_handler+2,pclath
 10526  001D50  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10527  001D52  0011               	retfie		f
 10528  001D54                     __end_of_handler:
 10529                           	opt stack 0
 10530                           pclatu	equ	0xFFB
 10531                           pclath	equ	0xFFA
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           intcon2	equ	0xFF1
 10540                           intcon3	equ	0xFF0
 10541                           indf0	equ	0xFEF
 10542                           postinc0	equ	0xFEE
 10543                           fsr0h	equ	0xFEA
 10544                           fsr0l	equ	0xFE9
 10545                           wreg	equ	0xFE8
 10546                           postdec1	equ	0xFE5
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _updateMenu *****************
 10557 ;; Defined at:
 10558 ;;		line 211 in file "UI.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;		None
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;		None
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  1    wreg      void 
 10565 ;; Registers used:
 10566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10567 ;; Tracked objects:
 10568 ;;		On entry : 0/0
 10569 ;;		On exit  : 0/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;Total ram usage:        2 bytes
 10577 ;; Hardware stack levels used:    1
 10578 ;; Hardware stack levels required when called:    5
 10579 ;; This function calls:
 10580 ;;		_change_state_to_logs_11
 10581 ;;		_change_state_to_logs_12
 10582 ;;		_change_state_to_logs_22
 10583 ;;		_change_state_to_logs_23
 10584 ;;		_change_state_to_logs_33
 10585 ;;		_change_state_to_logs_34
 10586 ;;		_change_state_to_menu_11
 10587 ;;		_change_state_to_menu_23
 10588 ;;		_dispLogs
 10589 ;;		_inputHandler
 10590 ;;		i2_change_state_to_menu_12
 10591 ;;		i2_change_state_to_menu_22
 10592 ;;		i2_change_state_to_menu_start
 10593 ;; This function is called by:
 10594 ;;		_handler
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text46
 10599  001328                     __ptext46:
 10600                           	opt stack 0
 10601  001328                     _updateMenu:
 10602                           	opt stack 18
 10603                           
 10604                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 10605                           
 10606                           ;incstack = 0
 10607  001328  0E00               	movlw	0
 10608  00132A  6E79               	movwf	_up+1,c
 10609  00132C  0E00               	movlw	0
 10610  00132E  6E78               	movwf	_up,c
 10611  001330  0E00               	movlw	0
 10612  001332  6E71               	movwf	_down+1,c
 10613  001334  0E00               	movlw	0
 10614  001336  6E70               	movwf	_down,c
 10615  001338  0E00               	movlw	0
 10616  00133A  6E73               	movwf	_enter+1,c
 10617  00133C  0E00               	movlw	0
 10618  00133E  6E72               	movwf	_enter,c
 10619  001340  0E00               	movlw	0
 10620  001342  6E65               	movwf	_back+1,c
 10621  001344  0E00               	movlw	0
 10622  001346  6E64               	movwf	_back,c
 10623                           
 10624                           ;UI.c: 213: (INTCONbits.GIE = 0);
 10625  001348  9EF2               	bcf	intcon,7,c	;volatile
 10626                           
 10627                           ;UI.c: 215: if (inputHandler()
 10628                           ;UI.c: 218: ){
 10629  00134A  EC08  F00D         	call	_inputHandler	;wreg free
 10630  00134E  502A               	movf	?_inputHandler,w,c
 10631  001350  102B               	iorwf	?_inputHandler+1,w,c
 10632  001352  A4D8               	btfss	status,2,c
 10633  001354  D112               	goto	i2l5908
 10634  001356  D146               	goto	i2l256
 10635  001358                     i2l5760:
 10636                           
 10637                           ;UI.c: 222: change_state_to_menu_11();
 10638  001358  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 10639                           
 10640                           ;UI.c: 223: break;
 10641  00135C  D143               	goto	i2l256
 10642  00135E                     i2l5762:
 10643                           
 10644                           ;UI.c: 226: if(up){
 10645  00135E  5078               	movf	_up,w,c
 10646  001360  1079               	iorwf	_up+1,w,c
 10647  001362  B4D8               	btfsc	status,2,c
 10648  001364  D003               	goto	i2l5766
 10649                           
 10650                           ;UI.c: 227: change_state_to_menu_23();
 10651  001366  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10652                           
 10653                           ;UI.c: 228: }
 10654  00136A  D13C               	goto	i2l256
 10655  00136C                     i2l5766:
 10656                           
 10657                           ;UI.c: 229: else if(down){
 10658  00136C  5070               	movf	_down,w,c
 10659  00136E  1071               	iorwf	_down+1,w,c
 10660  001370  B4D8               	btfsc	status,2,c
 10661  001372  D003               	goto	i2l5770
 10662                           
 10663                           ;UI.c: 230: change_state_to_menu_12();
 10664  001374  EC72  F017         	call	i2_change_state_to_menu_12	;wreg free
 10665                           
 10666                           ;UI.c: 231: }
 10667  001378  D135               	goto	i2l256
 10668  00137A                     i2l5770:
 10669                           
 10670                           ;UI.c: 232: else if(enter){
 10671  00137A  5072               	movf	_enter,w,c
 10672  00137C  1073               	iorwf	_enter+1,w,c
 10673  00137E  B4D8               	btfsc	status,2,c
 10674  001380  D131               	goto	i2l256
 10675                           
 10676                           ;UI.c: 233: change_state_to_menu_start();
 10677  001382  ECA1  F018         	call	i2_change_state_to_menu_start	;wreg free
 10678                           
 10679                           ;UI.c: 234: }
 10680                           ;UI.c: 235: break;
 10681  001386  D12E               	goto	i2l256
 10682  001388                     i2l5774:
 10683                           
 10684                           ;UI.c: 238: if(up){
 10685  001388  5078               	movf	_up,w,c
 10686  00138A  1079               	iorwf	_up+1,w,c
 10687  00138C  B4D8               	btfsc	status,2,c
 10688  00138E  D003               	goto	i2l5778
 10689                           
 10690                           ;UI.c: 239: change_state_to_menu_11();
 10691  001390  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 10692                           
 10693                           ;UI.c: 240: }
 10694  001394  D127               	goto	i2l256
 10695  001396                     i2l5778:
 10696                           
 10697                           ;UI.c: 241: else if(down){
 10698  001396  5070               	movf	_down,w,c
 10699  001398  1071               	iorwf	_down+1,w,c
 10700  00139A  B4D8               	btfsc	status,2,c
 10701  00139C  D011               	goto	i2l5794
 10702                           
 10703                           ;UI.c: 242: change_state_to_menu_23();
 10704  00139E  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10705                           
 10706                           ;UI.c: 243: }
 10707  0013A2  D120               	goto	i2l256
 10708  0013A4                     i2l5786:
 10709                           
 10710                           ;UI.c: 250: if(up){
 10711  0013A4  5078               	movf	_up,w,c
 10712  0013A6  1079               	iorwf	_up+1,w,c
 10713  0013A8  B4D8               	btfsc	status,2,c
 10714  0013AA  D003               	goto	i2l5790
 10715                           
 10716                           ;UI.c: 251: change_state_to_menu_11();
 10717  0013AC  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 10718                           
 10719                           ;UI.c: 252: }
 10720  0013B0  D119               	goto	i2l256
 10721  0013B2                     i2l5790:
 10722                           
 10723                           ;UI.c: 253: else if(down){
 10724  0013B2  5070               	movf	_down,w,c
 10725  0013B4  1071               	iorwf	_down+1,w,c
 10726  0013B6  B4D8               	btfsc	status,2,c
 10727  0013B8  D003               	goto	i2l5794
 10728                           
 10729                           ;UI.c: 254: change_state_to_menu_23();
 10730  0013BA  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10731                           
 10732                           ;UI.c: 255: }
 10733  0013BE  D112               	goto	i2l256
 10734  0013C0                     i2l5794:
 10735                           
 10736                           ;UI.c: 256: else if(enter){
 10737  0013C0  5072               	movf	_enter,w,c
 10738  0013C2  1073               	iorwf	_enter+1,w,c
 10739  0013C4  B4D8               	btfsc	status,2,c
 10740  0013C6  D10E               	goto	i2l256
 10741                           
 10742                           ;UI.c: 257: machine_state = Sorting_state;
 10743  0013C8  0E01               	movlw	1
 10744  0013CA  0100               	movlb	0	; () banked
 10745  0013CC  6FFC               	movwf	_machine_state& (0+255),b
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;UI.c: 258: }
 10749                           ;UI.c: 259: break;
 10750                           
 10751                           ; BSR set to: 0
 10752                           
 10753                           ; BSR set to: 0
 10754  0013CE  D10A               	goto	i2l256
 10755  0013D0                     i2l5798:
 10756                           
 10757                           ;UI.c: 262: if(up){
 10758  0013D0  5078               	movf	_up,w,c
 10759  0013D2  1079               	iorwf	_up+1,w,c
 10760  0013D4  B4D8               	btfsc	status,2,c
 10761  0013D6  D003               	goto	i2l5802
 10762                           
 10763                           ;UI.c: 263: change_state_to_menu_22();
 10764  0013D8  EC5A  F017         	call	i2_change_state_to_menu_22	;wreg free
 10765                           
 10766                           ;UI.c: 264: }
 10767  0013DC  D103               	goto	i2l256
 10768  0013DE                     i2l5802:
 10769                           
 10770                           ;UI.c: 265: else if(down){
 10771  0013DE  5070               	movf	_down,w,c
 10772  0013E0  1071               	iorwf	_down+1,w,c
 10773  0013E2  B4D8               	btfsc	status,2,c
 10774  0013E4  D003               	goto	i2l5806
 10775                           
 10776                           ;UI.c: 266: change_state_to_menu_11();
 10777  0013E6  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 10778                           
 10779                           ;UI.c: 267: }
 10780  0013EA  D0FC               	goto	i2l256
 10781  0013EC                     i2l5806:
 10782                           
 10783                           ;UI.c: 268: else if(enter){
 10784  0013EC  5072               	movf	_enter,w,c
 10785  0013EE  1073               	iorwf	_enter+1,w,c
 10786  0013F0  B4D8               	btfsc	status,2,c
 10787  0013F2  D0F8               	goto	i2l256
 10788                           
 10789                           ;UI.c: 269: change_state_to_logs_11();
 10790  0013F4  EC1A  F018         	call	_change_state_to_logs_11	;wreg free
 10791                           
 10792                           ;UI.c: 270: }
 10793                           ;UI.c: 271: break;
 10794  0013F8  D0F5               	goto	i2l256
 10795  0013FA                     i2l5810:
 10796                           
 10797                           ;UI.c: 274: if(up){
 10798  0013FA  5078               	movf	_up,w,c
 10799  0013FC  1079               	iorwf	_up+1,w,c
 10800  0013FE  B4D8               	btfsc	status,2,c
 10801  001400  D003               	goto	i2l5814
 10802                           
 10803                           ;UI.c: 275: change_state_to_logs_34();
 10804  001402  ECBA  F017         	call	_change_state_to_logs_34	;wreg free
 10805                           
 10806                           ;UI.c: 276: }
 10807  001406  D0EE               	goto	i2l256
 10808  001408                     i2l5814:
 10809                           
 10810                           ;UI.c: 277: else if(down){
 10811  001408  5070               	movf	_down,w,c
 10812  00140A  1071               	iorwf	_down+1,w,c
 10813  00140C  B4D8               	btfsc	status,2,c
 10814  00140E  D003               	goto	i2l5818
 10815                           
 10816                           ;UI.c: 278: change_state_to_logs_12();
 10817  001410  EC02  F018         	call	_change_state_to_logs_12	;wreg free
 10818                           
 10819                           ;UI.c: 279: }
 10820  001414  D0E7               	goto	i2l256
 10821  001416                     i2l5818:
 10822                           
 10823                           ;UI.c: 280: else if(enter){
 10824  001416  5072               	movf	_enter,w,c
 10825  001418  1073               	iorwf	_enter+1,w,c
 10826  00141A  B4D8               	btfsc	status,2,c
 10827  00141C  D007               	goto	i2l5822
 10828                           
 10829                           ;UI.c: 281: dispLogs(1);
 10830  00141E  0E00               	movlw	0
 10831  001420  6E13               	movwf	dispLogs@myLog+1,c
 10832  001422  0E01               	movlw	1
 10833  001424  6E12               	movwf	dispLogs@myLog,c
 10834  001426  ECED  F018         	call	_dispLogs	;wreg free
 10835                           
 10836                           ;UI.c: 282: }
 10837  00142A  D0DC               	goto	i2l256
 10838  00142C                     i2l5822:
 10839                           
 10840                           ;UI.c: 283: else if(back){
 10841  00142C  5064               	movf	_back,w,c
 10842  00142E  1065               	iorwf	_back+1,w,c
 10843  001430  B4D8               	btfsc	status,2,c
 10844  001432  D0D8               	goto	i2l256
 10845                           
 10846                           ;UI.c: 284: change_state_to_menu_23();
 10847  001434  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10848                           
 10849                           ;UI.c: 285: }
 10850                           ;UI.c: 286: break;
 10851  001438  D0D5               	goto	i2l256
 10852  00143A                     i2l5826:
 10853                           
 10854                           ;UI.c: 289: if(up){
 10855  00143A  5078               	movf	_up,w,c
 10856  00143C  1079               	iorwf	_up+1,w,c
 10857  00143E  B4D8               	btfsc	status,2,c
 10858  001440  D003               	goto	i2l5830
 10859                           
 10860                           ;UI.c: 290: change_state_to_logs_11();
 10861  001442  EC1A  F018         	call	_change_state_to_logs_11	;wreg free
 10862                           
 10863                           ;UI.c: 291: }
 10864  001446  D0CE               	goto	i2l256
 10865  001448                     i2l5830:
 10866                           
 10867                           ;UI.c: 292: else if(down){
 10868  001448  5070               	movf	_down,w,c
 10869  00144A  1071               	iorwf	_down+1,w,c
 10870  00144C  B4D8               	btfsc	status,2,c
 10871  00144E  D003               	goto	i2l5834
 10872                           
 10873                           ;UI.c: 293: change_state_to_logs_23();
 10874  001450  EC49  F018         	call	_change_state_to_logs_23	;wreg free
 10875                           
 10876                           ;UI.c: 294: }
 10877  001454  D0C7               	goto	i2l256
 10878  001456                     i2l5834:
 10879                           
 10880                           ;UI.c: 295: else if(enter){
 10881  001456  5072               	movf	_enter,w,c
 10882  001458  1073               	iorwf	_enter+1,w,c
 10883  00145A  B4D8               	btfsc	status,2,c
 10884  00145C  D007               	goto	i2l5838
 10885                           
 10886                           ;UI.c: 296: dispLogs(2);
 10887  00145E  0E00               	movlw	0
 10888  001460  6E13               	movwf	dispLogs@myLog+1,c
 10889  001462  0E02               	movlw	2
 10890  001464  6E12               	movwf	dispLogs@myLog,c
 10891  001466  ECED  F018         	call	_dispLogs	;wreg free
 10892                           
 10893                           ;UI.c: 297: }
 10894  00146A  D0BC               	goto	i2l256
 10895  00146C                     i2l5838:
 10896                           
 10897                           ;UI.c: 298: else if(back){
 10898  00146C  5064               	movf	_back,w,c
 10899  00146E  1065               	iorwf	_back+1,w,c
 10900  001470  B4D8               	btfsc	status,2,c
 10901  001472  D0B8               	goto	i2l256
 10902                           
 10903                           ;UI.c: 299: change_state_to_menu_23();
 10904  001474  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10905                           
 10906                           ;UI.c: 300: }
 10907                           ;UI.c: 301: break;
 10908  001478  D0B5               	goto	i2l256
 10909  00147A                     i2l5842:
 10910                           
 10911                           ;UI.c: 304: if(up){
 10912  00147A  5078               	movf	_up,w,c
 10913  00147C  1079               	iorwf	_up+1,w,c
 10914  00147E  B4D8               	btfsc	status,2,c
 10915  001480  D003               	goto	i2l5846
 10916                           
 10917                           ;UI.c: 305: change_state_to_logs_11();
 10918  001482  EC1A  F018         	call	_change_state_to_logs_11	;wreg free
 10919                           
 10920                           ;UI.c: 306: }
 10921  001486  D0AE               	goto	i2l256
 10922  001488                     i2l5846:
 10923                           
 10924                           ;UI.c: 307: else if(down){
 10925  001488  5070               	movf	_down,w,c
 10926  00148A  1071               	iorwf	_down+1,w,c
 10927  00148C  B4D8               	btfsc	status,2,c
 10928  00148E  D003               	goto	i2l5850
 10929                           
 10930                           ;UI.c: 308: change_state_to_logs_23();
 10931  001490  EC49  F018         	call	_change_state_to_logs_23	;wreg free
 10932                           
 10933                           ;UI.c: 309: }
 10934  001494  D0A7               	goto	i2l256
 10935  001496                     i2l5850:
 10936                           
 10937                           ;UI.c: 310: else if(enter){
 10938  001496  5072               	movf	_enter,w,c
 10939  001498  1073               	iorwf	_enter+1,w,c
 10940  00149A  B4D8               	btfsc	status,2,c
 10941  00149C  D007               	goto	i2l5854
 10942                           
 10943                           ;UI.c: 311: dispLogs(2);
 10944  00149E  0E00               	movlw	0
 10945  0014A0  6E13               	movwf	dispLogs@myLog+1,c
 10946  0014A2  0E02               	movlw	2
 10947  0014A4  6E12               	movwf	dispLogs@myLog,c
 10948  0014A6  ECED  F018         	call	_dispLogs	;wreg free
 10949                           
 10950                           ;UI.c: 312: }
 10951  0014AA  D09C               	goto	i2l256
 10952  0014AC                     i2l5854:
 10953                           
 10954                           ;UI.c: 313: else if(back){
 10955  0014AC  5064               	movf	_back,w,c
 10956  0014AE  1065               	iorwf	_back+1,w,c
 10957  0014B0  B4D8               	btfsc	status,2,c
 10958  0014B2  D098               	goto	i2l256
 10959                           
 10960                           ;UI.c: 314: change_state_to_menu_23();
 10961  0014B4  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 10962                           
 10963                           ;UI.c: 315: }
 10964                           ;UI.c: 316: break;
 10965  0014B8  D095               	goto	i2l256
 10966  0014BA                     i2l5858:
 10967                           
 10968                           ;UI.c: 319: if(up){
 10969  0014BA  5078               	movf	_up,w,c
 10970  0014BC  1079               	iorwf	_up+1,w,c
 10971  0014BE  B4D8               	btfsc	status,2,c
 10972  0014C0  D003               	goto	i2l5862
 10973                           
 10974                           ;UI.c: 320: change_state_to_logs_22();
 10975  0014C2  ECEA  F017         	call	_change_state_to_logs_22	;wreg free
 10976                           
 10977                           ;UI.c: 321: }
 10978  0014C6  D08E               	goto	i2l256
 10979  0014C8                     i2l5862:
 10980                           
 10981                           ;UI.c: 322: else if(down){
 10982  0014C8  5070               	movf	_down,w,c
 10983  0014CA  1071               	iorwf	_down+1,w,c
 10984  0014CC  B4D8               	btfsc	status,2,c
 10985  0014CE  D003               	goto	i2l5866
 10986                           
 10987                           ;UI.c: 323: change_state_to_logs_34();
 10988  0014D0  ECBA  F017         	call	_change_state_to_logs_34	;wreg free
 10989                           
 10990                           ;UI.c: 324: }
 10991  0014D4  D087               	goto	i2l256
 10992  0014D6                     i2l5866:
 10993                           
 10994                           ;UI.c: 325: else if(enter){
 10995  0014D6  5072               	movf	_enter,w,c
 10996  0014D8  1073               	iorwf	_enter+1,w,c
 10997  0014DA  B4D8               	btfsc	status,2,c
 10998  0014DC  D007               	goto	i2l5870
 10999                           
 11000                           ;UI.c: 326: dispLogs(3);
 11001  0014DE  0E00               	movlw	0
 11002  0014E0  6E13               	movwf	dispLogs@myLog+1,c
 11003  0014E2  0E03               	movlw	3
 11004  0014E4  6E12               	movwf	dispLogs@myLog,c
 11005  0014E6  ECED  F018         	call	_dispLogs	;wreg free
 11006                           
 11007                           ;UI.c: 327: }
 11008  0014EA  D07C               	goto	i2l256
 11009  0014EC                     i2l5870:
 11010                           
 11011                           ;UI.c: 328: else if(back){
 11012  0014EC  5064               	movf	_back,w,c
 11013  0014EE  1065               	iorwf	_back+1,w,c
 11014  0014F0  B4D8               	btfsc	status,2,c
 11015  0014F2  D078               	goto	i2l256
 11016                           
 11017                           ;UI.c: 329: change_state_to_menu_23();
 11018  0014F4  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 11019                           
 11020                           ;UI.c: 330: }
 11021                           ;UI.c: 331: break;
 11022  0014F8  D075               	goto	i2l256
 11023  0014FA                     i2l5874:
 11024                           
 11025                           ;UI.c: 334: if(up){
 11026  0014FA  5078               	movf	_up,w,c
 11027  0014FC  1079               	iorwf	_up+1,w,c
 11028  0014FE  B4D8               	btfsc	status,2,c
 11029  001500  D003               	goto	i2l5878
 11030                           
 11031                           ;UI.c: 335: change_state_to_logs_22();
 11032  001502  ECEA  F017         	call	_change_state_to_logs_22	;wreg free
 11033                           
 11034                           ;UI.c: 336: }
 11035  001506  D06E               	goto	i2l256
 11036  001508                     i2l5878:
 11037                           
 11038                           ;UI.c: 337: else if(down){
 11039  001508  5070               	movf	_down,w,c
 11040  00150A  1071               	iorwf	_down+1,w,c
 11041  00150C  B4D8               	btfsc	status,2,c
 11042  00150E  D003               	goto	i2l5882
 11043                           
 11044                           ;UI.c: 338: change_state_to_logs_34();
 11045  001510  ECBA  F017         	call	_change_state_to_logs_34	;wreg free
 11046                           
 11047                           ;UI.c: 339: }
 11048  001514  D067               	goto	i2l256
 11049  001516                     i2l5882:
 11050                           
 11051                           ;UI.c: 340: else if(enter){
 11052  001516  5072               	movf	_enter,w,c
 11053  001518  1073               	iorwf	_enter+1,w,c
 11054  00151A  B4D8               	btfsc	status,2,c
 11055  00151C  D007               	goto	i2l5886
 11056                           
 11057                           ;UI.c: 341: dispLogs(3);
 11058  00151E  0E00               	movlw	0
 11059  001520  6E13               	movwf	dispLogs@myLog+1,c
 11060  001522  0E03               	movlw	3
 11061  001524  6E12               	movwf	dispLogs@myLog,c
 11062  001526  ECED  F018         	call	_dispLogs	;wreg free
 11063                           
 11064                           ;UI.c: 342: }
 11065  00152A  D05C               	goto	i2l256
 11066  00152C                     i2l5886:
 11067                           
 11068                           ;UI.c: 343: else if(back){
 11069  00152C  5064               	movf	_back,w,c
 11070  00152E  1065               	iorwf	_back+1,w,c
 11071  001530  B4D8               	btfsc	status,2,c
 11072  001532  D058               	goto	i2l256
 11073                           
 11074                           ;UI.c: 344: change_state_to_menu_23();
 11075  001534  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 11076                           
 11077                           ;UI.c: 345: }
 11078                           ;UI.c: 346: break;
 11079  001538  D055               	goto	i2l256
 11080  00153A                     i2l5890:
 11081                           
 11082                           ;UI.c: 349: if(up){
 11083  00153A  5078               	movf	_up,w,c
 11084  00153C  1079               	iorwf	_up+1,w,c
 11085  00153E  B4D8               	btfsc	status,2,c
 11086  001540  D003               	goto	i2l5894
 11087                           
 11088                           ;UI.c: 350: change_state_to_logs_33();
 11089  001542  ECD2  F017         	call	_change_state_to_logs_33	;wreg free
 11090                           
 11091                           ;UI.c: 351: }
 11092  001546  D04E               	goto	i2l256
 11093  001548                     i2l5894:
 11094                           
 11095                           ;UI.c: 352: else if(down){
 11096  001548  5070               	movf	_down,w,c
 11097  00154A  1071               	iorwf	_down+1,w,c
 11098  00154C  B4D8               	btfsc	status,2,c
 11099  00154E  D003               	goto	i2l5898
 11100                           
 11101                           ;UI.c: 353: change_state_to_logs_11();
 11102  001550  EC1A  F018         	call	_change_state_to_logs_11	;wreg free
 11103                           
 11104                           ;UI.c: 354: }
 11105  001554  D047               	goto	i2l256
 11106  001556                     i2l5898:
 11107                           
 11108                           ;UI.c: 355: else if(enter){
 11109  001556  5072               	movf	_enter,w,c
 11110  001558  1073               	iorwf	_enter+1,w,c
 11111  00155A  B4D8               	btfsc	status,2,c
 11112  00155C  D007               	goto	i2l5902
 11113                           
 11114                           ;UI.c: 356: dispLogs(4);
 11115  00155E  0E00               	movlw	0
 11116  001560  6E13               	movwf	dispLogs@myLog+1,c
 11117  001562  0E04               	movlw	4
 11118  001564  6E12               	movwf	dispLogs@myLog,c
 11119  001566  ECED  F018         	call	_dispLogs	;wreg free
 11120                           
 11121                           ;UI.c: 357: }
 11122  00156A  D03C               	goto	i2l256
 11123  00156C                     i2l5902:
 11124                           
 11125                           ;UI.c: 358: else if(back){
 11126  00156C  5064               	movf	_back,w,c
 11127  00156E  1065               	iorwf	_back+1,w,c
 11128  001570  B4D8               	btfsc	status,2,c
 11129  001572  D038               	goto	i2l256
 11130                           
 11131                           ;UI.c: 359: change_state_to_menu_23();
 11132  001574  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 11133                           
 11134                           ;UI.c: 365: }
 11135                           
 11136                           ;UI.c: 364: break;
 11137                           
 11138                           ;UI.c: 363: default:
 11139                           
 11140                           ;UI.c: 360: }
 11141                           ;UI.c: 361: break;
 11142  001578  D035               	goto	i2l256
 11143  00157A                     i2l5908:
 11144  00157A  C0DC  F043         	movff	_cur_state,??_updateMenu
 11145  00157E  C0DD  F044         	movff	_cur_state+1,??_updateMenu+1
 11146                           
 11147                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 11148                           ; Switch size 1, requested type "space"
 11149                           ; Number of cases is 3, Range of values is 0 to 4
 11150                           ; switch strategies available:
 11151                           ; Name         Instructions Cycles
 11152                           ; simple_byte           10     6 (average)
 11153                           ;	Chosen strategy is simple_byte
 11154  001582  5044               	movf	??_updateMenu+1,w,c
 11155  001584  0A00               	xorlw	0	; case 0
 11156  001586  B4D8               	btfsc	status,2,c
 11157  001588  D007               	goto	i2l6408
 11158  00158A  0A03               	xorlw	3	; case 3
 11159  00158C  B4D8               	btfsc	status,2,c
 11160  00158E  D015               	goto	i2l6410
 11161  001590  0A07               	xorlw	7	; case 4
 11162  001592  B4D8               	btfsc	status,2,c
 11163  001594  D020               	goto	i2l6412
 11164  001596  D026               	goto	i2l256
 11165  001598                     i2l6408:
 11166                           
 11167                           ; Switch size 1, requested type "space"
 11168                           ; Number of cases is 5, Range of values is 0 to 23
 11169                           ; switch strategies available:
 11170                           ; Name         Instructions Cycles
 11171                           ; simple_byte           16     9 (average)
 11172                           ;	Chosen strategy is simple_byte
 11173  001598  5043               	movf	??_updateMenu,w,c
 11174  00159A  0A00               	xorlw	0	; case 0
 11175  00159C  B4D8               	btfsc	status,2,c
 11176  00159E  D6DC               	goto	i2l5760
 11177  0015A0  0A0B               	xorlw	11	; case 11
 11178  0015A2  B4D8               	btfsc	status,2,c
 11179  0015A4  D6DC               	goto	i2l5762
 11180  0015A6  0A07               	xorlw	7	; case 12
 11181  0015A8  B4D8               	btfsc	status,2,c
 11182  0015AA  D6EE               	goto	i2l5774
 11183  0015AC  0A1A               	xorlw	26	; case 22
 11184  0015AE  B4D8               	btfsc	status,2,c
 11185  0015B0  D6F9               	goto	i2l5786
 11186  0015B2  0A01               	xorlw	1	; case 23
 11187  0015B4  B4D8               	btfsc	status,2,c
 11188  0015B6  D70C               	goto	i2l5798
 11189  0015B8  D015               	goto	i2l256
 11190  0015BA                     i2l6410:
 11191                           
 11192                           ; Switch size 1, requested type "space"
 11193                           ; Number of cases is 4, Range of values is 243 to 255
 11194                           ; switch strategies available:
 11195                           ; Name         Instructions Cycles
 11196                           ; simple_byte           13     7 (average)
 11197                           ;	Chosen strategy is simple_byte
 11198  0015BA  5043               	movf	??_updateMenu,w,c
 11199  0015BC  0AF3               	xorlw	243	; case 243
 11200  0015BE  B4D8               	btfsc	status,2,c
 11201  0015C0  D71C               	goto	i2l5810
 11202  0015C2  0A07               	xorlw	7	; case 244
 11203  0015C4  B4D8               	btfsc	status,2,c
 11204  0015C6  D739               	goto	i2l5826
 11205  0015C8  0A0A               	xorlw	10	; case 254
 11206  0015CA  B4D8               	btfsc	status,2,c
 11207  0015CC  D756               	goto	i2l5842
 11208  0015CE  0A01               	xorlw	1	; case 255
 11209  0015D0  B4D8               	btfsc	status,2,c
 11210  0015D2  D773               	goto	i2l5858
 11211  0015D4  D007               	goto	i2l256
 11212  0015D6                     i2l6412:
 11213                           
 11214                           ; Switch size 1, requested type "space"
 11215                           ; Number of cases is 2, Range of values is 9 to 10
 11216                           ; switch strategies available:
 11217                           ; Name         Instructions Cycles
 11218                           ; simple_byte            7     4 (average)
 11219                           ;	Chosen strategy is simple_byte
 11220  0015D6  5043               	movf	??_updateMenu,w,c
 11221  0015D8  0A09               	xorlw	9	; case 9
 11222  0015DA  B4D8               	btfsc	status,2,c
 11223  0015DC  D78E               	goto	i2l5874
 11224  0015DE  0A03               	xorlw	3	; case 10
 11225  0015E0  B4D8               	btfsc	status,2,c
 11226  0015E2  D7AB               	goto	i2l5890
 11227  0015E4                     i2l256:
 11228                           
 11229                           ;UI.c: 366: }
 11230                           ;UI.c: 367: (INTCONbits.GIE = 1);
 11231  0015E4  8EF2               	bsf	intcon,7,c	;volatile
 11232  0015E6  0012               	return		;funcret
 11233  0015E8                     __end_of_updateMenu:
 11234                           	opt stack 0
 11235                           pclatu	equ	0xFFB
 11236                           pclath	equ	0xFFA
 11237                           tblptru	equ	0xFF8
 11238                           tblptrh	equ	0xFF7
 11239                           tblptrl	equ	0xFF6
 11240                           tablat	equ	0xFF5
 11241                           prodh	equ	0xFF4
 11242                           prodl	equ	0xFF3
 11243                           intcon	equ	0xFF2
 11244                           intcon2	equ	0xFF1
 11245                           intcon3	equ	0xFF0
 11246                           indf0	equ	0xFEF
 11247                           postinc0	equ	0xFEE
 11248                           fsr0h	equ	0xFEA
 11249                           fsr0l	equ	0xFE9
 11250                           wreg	equ	0xFE8
 11251                           postdec1	equ	0xFE5
 11252                           fsr1h	equ	0xFE2
 11253                           fsr1l	equ	0xFE1
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function i2_change_state_to_menu_start *****************
 11262 ;; Defined at:
 11263 ;;		line 472 in file "UI.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;                  1    wreg      void 
 11270 ;; Registers used:
 11271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;Total ram usage:        0 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    4
 11284 ;; This function calls:
 11285 ;;		i2_lcdInst
 11286 ;;		i2_printRTC
 11287 ;;		i2_printf
 11288 ;; This function is called by:
 11289 ;;		_updateMenu
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text47
 11294  003142                     __ptext47:
 11295                           	opt stack 0
 11296  003142                     i2_change_state_to_menu_start:
 11297                           	opt stack 18
 11298                           
 11299                           ;UI.c: 473: cur_state = 0;
 11300                           
 11301                           ;incstack = 0
 11302  003142  0E00               	movlw	0
 11303  003144  0100               	movlb	0	; () banked
 11304  003146  6FDD               	movwf	(_cur_state+1)& (0+255),b
 11305  003148  0E00               	movlw	0
 11306  00314A  6FDC               	movwf	_cur_state& (0+255),b
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;UI.c: 475: lcdInst(0b10000000);;
 11310  00314C  0E80               	movlw	128
 11311  00314E  EC7B  F019         	call	i2_lcdInst
 11312                           
 11313                           ;UI.c: 476: printRTC();
 11314  003152  ECF4  F00A         	call	i2_printRTC	;wreg free
 11315                           
 11316                           ;UI.c: 477: lcdInst(0b11000000);;
 11317  003156  0EC0               	movlw	192
 11318  003158  EC7B  F019         	call	i2_lcdInst
 11319                           
 11320                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 11321  00315C  0E57               	movlw	low STR_30
 11322  00315E  6E0D               	movwf	i2printf@f,c
 11323  003160  0EFF               	movlw	high STR_30
 11324  003162  6E0E               	movwf	i2printf@f+1,c
 11325  003164  EC78  F006         	call	i2_printf	;wreg free
 11326  003168  0012               	return		;funcret
 11327  00316A                     __end_ofi2_change_state_to_menu_start:
 11328                           	opt stack 0
 11329                           pclatu	equ	0xFFB
 11330                           pclath	equ	0xFFA
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           intcon2	equ	0xFF1
 11339                           intcon3	equ	0xFF0
 11340                           indf0	equ	0xFEF
 11341                           postinc0	equ	0xFEE
 11342                           fsr0h	equ	0xFEA
 11343                           fsr0l	equ	0xFE9
 11344                           wreg	equ	0xFE8
 11345                           postdec1	equ	0xFE5
 11346                           fsr1h	equ	0xFE2
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function i2_printRTC *****************
 11356 ;; Defined at:
 11357 ;;		line 63 in file "RTC.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  printRTC       14   44[COMRAM] int [7]
 11362 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 11363 ;;  printRTC        2   64[COMRAM] int 
 11364 ;;  printRTC        2   58[COMRAM] int 
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;Total ram usage:       25 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    3
 11381 ;; This function calls:
 11382 ;;		i2_getRTC
 11383 ;;		i2_lcdInst
 11384 ;;		i2_printf
 11385 ;;		i2_strcpy
 11386 ;; This function is called by:
 11387 ;;		i2_change_state_to_menu_start
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text48
 11392  0015E8                     __ptext48:
 11393                           	opt stack 0
 11394  0015E8                     i2_printRTC:
 11395                           	opt stack 18
 11396                           
 11397                           ;RTC.c: 64: getRTC();
 11398                           
 11399                           ;incstack = 0
 11400  0015E8  ECD0  F014         	call	i2_getRTC	;wreg free
 11401                           
 11402                           ;RTC.c: 65: char month[] = "MMM";
 11403  0015EC  C12C  F03D         	movff	printRTC@F3211,i2printRTC@month
 11404  0015F0  C12D  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 11405  0015F4  C12E  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 11406  0015F8  C12F  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 11407                           
 11408                           ;RTC.c: 66: int INT_time[7];
 11409                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 11410  0015FC  0E00               	movlw	0
 11411  0015FE  6E42               	movwf	i2printRTC@i+1,c
 11412  001600  0E00               	movlw	0
 11413  001602  6E41               	movwf	i2printRTC@i,c
 11414  001604  BE42               	btfsc	i2printRTC@i+1,7,c
 11415  001606  D006               	goto	i2l4930
 11416  001608  5042               	movf	i2printRTC@i+1,w,c
 11417  00160A  E135               	bnz	i2l597
 11418  00160C  0E07               	movlw	7
 11419  00160E  5C41               	subwf	i2printRTC@i,w,c
 11420  001610  B0D8               	btfsc	status,0,c
 11421  001612  D031               	goto	i2l597
 11422  001614                     i2l4930:
 11423                           
 11424                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11425  001614  0E5B               	movlw	low _time
 11426  001616  2441               	addwf	i2printRTC@i,w,c
 11427  001618  6ED9               	movwf	fsr2l,c
 11428  00161A  0E00               	movlw	high _time
 11429  00161C  2042               	addwfc	i2printRTC@i+1,w,c
 11430  00161E  6EDA               	movwf	fsr2h,c
 11431  001620  50DF               	movf	indf2,w,c
 11432  001622  6E2A               	movwf	??i2_printRTC& (0+255),c
 11433  001624  3A2A               	swapf	??i2_printRTC,f,c
 11434  001626  0E0F               	movlw	15
 11435  001628  162A               	andwf	??i2_printRTC,f,c
 11436  00162A  0E0F               	movlw	15
 11437  00162C  162A               	andwf	??i2_printRTC,f,c
 11438  00162E  502A               	movf	??i2_printRTC,w,c
 11439  001630  0D0A               	mullw	10
 11440  001632  0E5B               	movlw	low _time
 11441  001634  2441               	addwf	i2printRTC@i,w,c
 11442  001636  6ED9               	movwf	fsr2l,c
 11443  001638  0E00               	movlw	high _time
 11444  00163A  2042               	addwfc	i2printRTC@i+1,w,c
 11445  00163C  6EDA               	movwf	fsr2h,c
 11446  00163E  50DF               	movf	indf2,w,c
 11447  001640  0B0F               	andlw	15
 11448  001642  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 11449  001644  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 11450  001646  50F3               	movf	prodl,w,c
 11451  001648  262B               	addwf	??i2_printRTC+1,f,c
 11452  00164A  50F4               	movf	prodh,w,c
 11453  00164C  222C               	addwfc	??i2_printRTC+2,f,c
 11454  00164E  90D8               	bcf	status,0,c
 11455  001650  3441               	rlcf	i2printRTC@i,w,c
 11456  001652  6ED9               	movwf	fsr2l,c
 11457  001654  3442               	rlcf	i2printRTC@i+1,w,c
 11458  001656  6EDA               	movwf	fsr2h,c
 11459  001658  0E2D               	movlw	low i2printRTC@INT_time
 11460  00165A  26D9               	addwf	fsr2l,f,c
 11461  00165C  0E00               	movlw	high i2printRTC@INT_time
 11462  00165E  22DA               	addwfc	fsr2h,f,c
 11463  001660  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 11464  001664  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 11465  001668  4A41               	infsnz	i2printRTC@i,f,c
 11466  00166A  2A42               	incf	i2printRTC@i+1,f,c
 11467  00166C  BE42               	btfsc	i2printRTC@i+1,7,c
 11468  00166E  D7D2               	goto	i2l4930
 11469  001670  5042               	movf	i2printRTC@i+1,w,c
 11470  001672  E101               	bnz	i2u365_40
 11471  001674  D7CB               	goto	L6
 11472  001676                     i2u365_40:
 11473  001676                     i2l597:
 11474                           
 11475                           ;RTC.c: 69: }
 11476                           ;RTC.c: 70: int RTC_month = INT_time[5];
 11477  001676  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 11478  00167A  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 11479                           
 11480                           ;RTC.c: 71: switch(RTC_month){
 11481  00167E  D084               	goto	i2l4962
 11482  001680                     i2l4936:
 11483                           
 11484                           ;RTC.c: 73: strcpy(month, "JAN");
 11485  001680  0E3D               	movlw	low i2printRTC@month
 11486  001682  6E01               	movwf	i2strcpy@to,c
 11487  001684  0E00               	movlw	high i2printRTC@month
 11488  001686  6E02               	movwf	i2strcpy@to+1,c
 11489  001688  0EDB               	movlw	low STR_8
 11490  00168A  6E03               	movwf	i2strcpy@from,c
 11491  00168C  0EFF               	movlw	high STR_8
 11492  00168E  6E04               	movwf	i2strcpy@from+1,c
 11493  001690  EC41  F017         	call	i2_strcpy	;wreg free
 11494                           
 11495                           ;RTC.c: 74: break;
 11496  001694  D0A6               	goto	i2l4964
 11497  001696                     i2l4938:
 11498                           
 11499                           ;RTC.c: 76: strcpy(month, "FEB");
 11500  001696  0E3D               	movlw	low i2printRTC@month
 11501  001698  6E01               	movwf	i2strcpy@to,c
 11502  00169A  0E00               	movlw	high i2printRTC@month
 11503  00169C  6E02               	movwf	i2strcpy@to+1,c
 11504  00169E  0ECB               	movlw	low STR_9
 11505  0016A0  6E03               	movwf	i2strcpy@from,c
 11506  0016A2  0EFF               	movlw	high STR_9
 11507  0016A4  6E04               	movwf	i2strcpy@from+1,c
 11508  0016A6  EC41  F017         	call	i2_strcpy	;wreg free
 11509                           
 11510                           ;RTC.c: 77: break;
 11511  0016AA  D09B               	goto	i2l4964
 11512  0016AC                     i2l4940:
 11513                           
 11514                           ;RTC.c: 79: strcpy(month, "MAR");
 11515  0016AC  0E3D               	movlw	low i2printRTC@month
 11516  0016AE  6E01               	movwf	i2strcpy@to,c
 11517  0016B0  0E00               	movlw	high i2printRTC@month
 11518  0016B2  6E02               	movwf	i2strcpy@to+1,c
 11519  0016B4  0EE7               	movlw	low STR_10
 11520  0016B6  6E03               	movwf	i2strcpy@from,c
 11521  0016B8  0EFF               	movlw	high STR_10
 11522  0016BA  6E04               	movwf	i2strcpy@from+1,c
 11523  0016BC  EC41  F017         	call	i2_strcpy	;wreg free
 11524                           
 11525                           ;RTC.c: 80: break;
 11526  0016C0  D090               	goto	i2l4964
 11527  0016C2                     i2l4942:
 11528                           
 11529                           ;RTC.c: 82: strcpy(month, "APR");
 11530  0016C2  0E3D               	movlw	low i2printRTC@month
 11531  0016C4  6E01               	movwf	i2strcpy@to,c
 11532  0016C6  0E00               	movlw	high i2printRTC@month
 11533  0016C8  6E02               	movwf	i2strcpy@to+1,c
 11534  0016CA  0EEB               	movlw	low STR_11
 11535  0016CC  6E03               	movwf	i2strcpy@from,c
 11536  0016CE  0EFF               	movlw	high STR_11
 11537  0016D0  6E04               	movwf	i2strcpy@from+1,c
 11538  0016D2  EC41  F017         	call	i2_strcpy	;wreg free
 11539                           
 11540                           ;RTC.c: 83: break;
 11541  0016D6  D085               	goto	i2l4964
 11542  0016D8                     i2l4944:
 11543                           
 11544                           ;RTC.c: 85: strcpy(month, "MAY");
 11545  0016D8  0E3D               	movlw	low i2printRTC@month
 11546  0016DA  6E01               	movwf	i2strcpy@to,c
 11547  0016DC  0E00               	movlw	high i2printRTC@month
 11548  0016DE  6E02               	movwf	i2strcpy@to+1,c
 11549  0016E0  0EFB               	movlw	low STR_12
 11550  0016E2  6E03               	movwf	i2strcpy@from,c
 11551  0016E4  0EFF               	movlw	high STR_12
 11552  0016E6  6E04               	movwf	i2strcpy@from+1,c
 11553  0016E8  EC41  F017         	call	i2_strcpy	;wreg free
 11554                           
 11555                           ;RTC.c: 86: break;
 11556  0016EC  D07A               	goto	i2l4964
 11557  0016EE                     i2l4946:
 11558                           
 11559                           ;RTC.c: 88: strcpy(month, "JUN");
 11560  0016EE  0E3D               	movlw	low i2printRTC@month
 11561  0016F0  6E01               	movwf	i2strcpy@to,c
 11562  0016F2  0E00               	movlw	high i2printRTC@month
 11563  0016F4  6E02               	movwf	i2strcpy@to+1,c
 11564  0016F6  0EDF               	movlw	low STR_13
 11565  0016F8  6E03               	movwf	i2strcpy@from,c
 11566  0016FA  0EFF               	movlw	high STR_13
 11567  0016FC  6E04               	movwf	i2strcpy@from+1,c
 11568  0016FE  EC41  F017         	call	i2_strcpy	;wreg free
 11569                           
 11570                           ;RTC.c: 89: break;
 11571  001702  D06F               	goto	i2l4964
 11572  001704                     i2l4948:
 11573                           
 11574                           ;RTC.c: 91: strcpy(month, "JUL");
 11575  001704  0E3D               	movlw	low i2printRTC@month
 11576  001706  6E01               	movwf	i2strcpy@to,c
 11577  001708  0E00               	movlw	high i2printRTC@month
 11578  00170A  6E02               	movwf	i2strcpy@to+1,c
 11579  00170C  0ED7               	movlw	low STR_14
 11580  00170E  6E03               	movwf	i2strcpy@from,c
 11581  001710  0EFF               	movlw	high STR_14
 11582  001712  6E04               	movwf	i2strcpy@from+1,c
 11583  001714  EC41  F017         	call	i2_strcpy	;wreg free
 11584                           
 11585                           ;RTC.c: 92: break;
 11586  001718  D064               	goto	i2l4964
 11587  00171A                     i2l4950:
 11588                           
 11589                           ;RTC.c: 94: strcpy(month, "AUG");
 11590  00171A  0E3D               	movlw	low i2printRTC@month
 11591  00171C  6E01               	movwf	i2strcpy@to,c
 11592  00171E  0E00               	movlw	high i2printRTC@month
 11593  001720  6E02               	movwf	i2strcpy@to+1,c
 11594  001722  0ED3               	movlw	low STR_15
 11595  001724  6E03               	movwf	i2strcpy@from,c
 11596  001726  0EFF               	movlw	high STR_15
 11597  001728  6E04               	movwf	i2strcpy@from+1,c
 11598  00172A  EC41  F017         	call	i2_strcpy	;wreg free
 11599                           
 11600                           ;RTC.c: 95: break;
 11601  00172E  D059               	goto	i2l4964
 11602  001730                     i2l4952:
 11603                           
 11604                           ;RTC.c: 97: strcpy(month, "SEP");
 11605  001730  0E3D               	movlw	low i2printRTC@month
 11606  001732  6E01               	movwf	i2strcpy@to,c
 11607  001734  0E00               	movlw	high i2printRTC@month
 11608  001736  6E02               	movwf	i2strcpy@to+1,c
 11609  001738  0EE3               	movlw	low STR_16
 11610  00173A  6E03               	movwf	i2strcpy@from,c
 11611  00173C  0EFF               	movlw	high STR_16
 11612  00173E  6E04               	movwf	i2strcpy@from+1,c
 11613  001740  EC41  F017         	call	i2_strcpy	;wreg free
 11614                           
 11615                           ;RTC.c: 98: break;
 11616  001744  D04E               	goto	i2l4964
 11617  001746                     i2l4954:
 11618                           
 11619                           ;RTC.c: 100: strcpy(month, "OCT");
 11620  001746  0E3D               	movlw	low i2printRTC@month
 11621  001748  6E01               	movwf	i2strcpy@to,c
 11622  00174A  0E00               	movlw	high i2printRTC@month
 11623  00174C  6E02               	movwf	i2strcpy@to+1,c
 11624  00174E  0EF3               	movlw	low STR_17
 11625  001750  6E03               	movwf	i2strcpy@from,c
 11626  001752  0EFF               	movlw	high STR_17
 11627  001754  6E04               	movwf	i2strcpy@from+1,c
 11628  001756  EC41  F017         	call	i2_strcpy	;wreg free
 11629                           
 11630                           ;RTC.c: 101: break;
 11631  00175A  D043               	goto	i2l4964
 11632  00175C                     i2l4956:
 11633                           
 11634                           ;RTC.c: 103: strcpy(month, "NOV");
 11635  00175C  0E3D               	movlw	low i2printRTC@month
 11636  00175E  6E01               	movwf	i2strcpy@to,c
 11637  001760  0E00               	movlw	high i2printRTC@month
 11638  001762  6E02               	movwf	i2strcpy@to+1,c
 11639  001764  0EF7               	movlw	low STR_18
 11640  001766  6E03               	movwf	i2strcpy@from,c
 11641  001768  0EFF               	movlw	high STR_18
 11642  00176A  6E04               	movwf	i2strcpy@from+1,c
 11643  00176C  EC41  F017         	call	i2_strcpy	;wreg free
 11644                           
 11645                           ;RTC.c: 104: break;
 11646  001770  D038               	goto	i2l4964
 11647  001772                     i2l4958:
 11648                           
 11649                           ;RTC.c: 106: strcpy(month, "DEC");
 11650  001772  0E3D               	movlw	low i2printRTC@month
 11651  001774  6E01               	movwf	i2strcpy@to,c
 11652  001776  0E00               	movlw	high i2printRTC@month
 11653  001778  6E02               	movwf	i2strcpy@to+1,c
 11654  00177A  0ECF               	movlw	low STR_19
 11655  00177C  6E03               	movwf	i2strcpy@from,c
 11656  00177E  0EFF               	movlw	high STR_19
 11657  001780  6E04               	movwf	i2strcpy@from+1,c
 11658  001782  EC41  F017         	call	i2_strcpy	;wreg free
 11659                           
 11660                           ;RTC.c: 108: }
 11661                           
 11662                           ;RTC.c: 107: break;
 11663  001786  D02D               	goto	i2l4964
 11664  001788                     i2l4962:
 11665  001788  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 11666  00178C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 11667                           
 11668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11669                           ; Switch size 1, requested type "space"
 11670                           ; Number of cases is 1, Range of values is 0 to 0
 11671                           ; switch strategies available:
 11672                           ; Name         Instructions Cycles
 11673                           ; simple_byte            4     3 (average)
 11674                           ;	Chosen strategy is simple_byte
 11675  001790  502B               	movf	??i2_printRTC+1,w,c
 11676  001792  0A00               	xorlw	0	; case 0
 11677  001794  A4D8               	btfss	status,2,c
 11678  001796  D025               	goto	i2l4964
 11679                           
 11680                           ; Switch size 1, requested type "space"
 11681                           ; Number of cases is 12, Range of values is 1 to 12
 11682                           ; switch strategies available:
 11683                           ; Name         Instructions Cycles
 11684                           ; simple_byte           37    19 (average)
 11685                           ;	Chosen strategy is simple_byte
 11686  001798  502A               	movf	??i2_printRTC,w,c
 11687  00179A  0A01               	xorlw	1	; case 1
 11688  00179C  B4D8               	btfsc	status,2,c
 11689  00179E  D770               	goto	i2l4936
 11690  0017A0  0A03               	xorlw	3	; case 2
 11691  0017A2  B4D8               	btfsc	status,2,c
 11692  0017A4  D778               	goto	i2l4938
 11693  0017A6  0A01               	xorlw	1	; case 3
 11694  0017A8  B4D8               	btfsc	status,2,c
 11695  0017AA  D780               	goto	i2l4940
 11696  0017AC  0A07               	xorlw	7	; case 4
 11697  0017AE  B4D8               	btfsc	status,2,c
 11698  0017B0  D788               	goto	i2l4942
 11699  0017B2  0A01               	xorlw	1	; case 5
 11700  0017B4  B4D8               	btfsc	status,2,c
 11701  0017B6  D790               	goto	i2l4944
 11702  0017B8  0A03               	xorlw	3	; case 6
 11703  0017BA  B4D8               	btfsc	status,2,c
 11704  0017BC  D798               	goto	i2l4946
 11705  0017BE  0A01               	xorlw	1	; case 7
 11706  0017C0  B4D8               	btfsc	status,2,c
 11707  0017C2  D7A0               	goto	i2l4948
 11708  0017C4  0A0F               	xorlw	15	; case 8
 11709  0017C6  B4D8               	btfsc	status,2,c
 11710  0017C8  D7A8               	goto	i2l4950
 11711  0017CA  0A01               	xorlw	1	; case 9
 11712  0017CC  B4D8               	btfsc	status,2,c
 11713  0017CE  D7B0               	goto	i2l4952
 11714  0017D0  0A03               	xorlw	3	; case 10
 11715  0017D2  B4D8               	btfsc	status,2,c
 11716  0017D4  D7B8               	goto	i2l4954
 11717  0017D6  0A01               	xorlw	1	; case 11
 11718  0017D8  B4D8               	btfsc	status,2,c
 11719  0017DA  D7C0               	goto	i2l4956
 11720  0017DC  0A07               	xorlw	7	; case 12
 11721  0017DE  B4D8               	btfsc	status,2,c
 11722  0017E0  D7C8               	goto	i2l4958
 11723  0017E2                     i2l4964:
 11724                           
 11725                           ;RTC.c: 109: lcdInst(0b10000000);;
 11726  0017E2  0E80               	movlw	128
 11727  0017E4  EC7B  F019         	call	i2_lcdInst
 11728                           
 11729                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11730  0017E8  0EAE               	movlw	low STR_21
 11731  0017EA  6E0D               	movwf	i2printf@f,c
 11732  0017EC  0EFD               	movlw	high STR_21
 11733  0017EE  6E0E               	movwf	i2printf@f+1,c
 11734  0017F0  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 11735  0017F4  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 11736  0017F8  0E3D               	movlw	low i2printRTC@month
 11737  0017FA  6E11               	movwf	?i2_printf+4,c
 11738  0017FC  0E00               	movlw	high i2printRTC@month
 11739  0017FE  6E12               	movwf	?i2_printf+5,c
 11740  001800  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 11741  001804  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 11742  001808  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 11743  00180C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 11744  001810  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 11745  001814  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 11746  001818  EC78  F006         	call	i2_printf	;wreg free
 11747  00181C  0012               	return		;funcret
 11748  00181E                     __end_ofi2_printRTC:
 11749                           	opt stack 0
 11750                           pclatu	equ	0xFFB
 11751                           pclath	equ	0xFFA
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           intcon2	equ	0xFF1
 11760                           intcon3	equ	0xFF0
 11761                           indf0	equ	0xFEF
 11762                           postinc0	equ	0xFEE
 11763                           fsr0h	equ	0xFEA
 11764                           fsr0l	equ	0xFE9
 11765                           wreg	equ	0xFE8
 11766                           postdec1	equ	0xFE5
 11767                           fsr1h	equ	0xFE2
 11768                           fsr1l	equ	0xFE1
 11769                           indf2	equ	0xFDF
 11770                           postinc2	equ	0xFDE
 11771                           postdec2	equ	0xFDD
 11772                           fsr2h	equ	0xFDA
 11773                           fsr2l	equ	0xFD9
 11774                           status	equ	0xFD8
 11775                           
 11776 ;; *************** function i2_strcpy *****************
 11777 ;; Defined at:
 11778 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11779 ;; Parameters:    Size  Location     Type
 11780 ;;  to              2    0[COMRAM] PTR unsigned char 
 11781 ;;		 -> printRTC@month(4), UI@month(4), 
 11782 ;;  from            2    2[COMRAM] PTR const unsigned char 
 11783 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11784 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11785 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11786 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11787 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11788 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11789 ;;		 -> STR_8(4), 
 11790 ;; Auto vars:     Size  Location     Type
 11791 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 11792 ;;		 -> printRTC@month(4), UI@month(4), 
 11793 ;; Return value:  Size  Location     Type
 11794 ;;                  2    0[COMRAM] PTR unsigned char 
 11795 ;; Registers used:
 11796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;Total ram usage:        6 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; This function calls:
 11809 ;;		Nothing
 11810 ;; This function is called by:
 11811 ;;		i2_printRTC
 11812 ;; This function uses a non-reentrant model
 11813 ;;
 11814                           
 11815                           	psect	text49
 11816  002E82                     __ptext49:
 11817                           	opt stack 0
 11818  002E82                     i2_strcpy:
 11819                           	opt stack 20
 11820                           
 11821                           ;incstack = 0
 11822  002E82  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 11823  002E86  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 11824  002E8A  D004               	goto	i2l4628
 11825  002E8C                     i2l4626:
 11826  002E8C  4A05               	infsnz	i2strcpy@cp,f,c
 11827  002E8E  2A06               	incf	i2strcpy@cp+1,f,c
 11828  002E90  4A03               	infsnz	i2strcpy@from,f,c
 11829  002E92  2A04               	incf	i2strcpy@from+1,f,c
 11830  002E94                     i2l4628:
 11831  002E94  C003  FFF6         	movff	i2strcpy@from,tblptrl
 11832  002E98  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 11833  002E9C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11834  002E9C  6AF8               	clrf	tblptru,c
 11835  002E9E                     	endif
 11836  002E9E                     	if	0	;tblptru may be non-zero
 11837  002E9E                     	endif
 11838  002E9E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 11839  002EA2  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 11840  002EA6  0008               	tblrd		*
 11841  002EA8  CFF5 FFDF          	movff	tablat,indf2
 11842  002EAC  50DF               	movf	indf2,w,c
 11843  002EAE  B4D8               	btfsc	status,2,c
 11844  002EB0  0012               	return	
 11845  002EB2  D7EC               	goto	i2l4626
 11846  002EB4                     __end_ofi2_strcpy:
 11847                           	opt stack 0
 11848                           pclatu	equ	0xFFB
 11849                           pclath	equ	0xFFA
 11850                           tblptru	equ	0xFF8
 11851                           tblptrh	equ	0xFF7
 11852                           tblptrl	equ	0xFF6
 11853                           tablat	equ	0xFF5
 11854                           prodh	equ	0xFF4
 11855                           prodl	equ	0xFF3
 11856                           intcon	equ	0xFF2
 11857                           intcon2	equ	0xFF1
 11858                           intcon3	equ	0xFF0
 11859                           indf0	equ	0xFEF
 11860                           postinc0	equ	0xFEE
 11861                           fsr0h	equ	0xFEA
 11862                           fsr0l	equ	0xFE9
 11863                           wreg	equ	0xFE8
 11864                           postdec1	equ	0xFE5
 11865                           fsr1h	equ	0xFE2
 11866                           fsr1l	equ	0xFE1
 11867                           indf2	equ	0xFDF
 11868                           postinc2	equ	0xFDE
 11869                           postdec2	equ	0xFDD
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function _inputHandler *****************
 11875 ;; Defined at:
 11876 ;;		line 370 in file "UI.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;		None
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;		None
 11881 ;; Return value:  Size  Location     Type
 11882 ;;                  2   41[COMRAM] int 
 11883 ;; Registers used:
 11884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;Total ram usage:        4 bytes
 11895 ;; Hardware stack levels used:    1
 11896 ;; Hardware stack levels required when called:    4
 11897 ;; This function calls:
 11898 ;;		_change_state_to_logs_11
 11899 ;;		_change_state_to_logs_12
 11900 ;;		_change_state_to_logs_22
 11901 ;;		_change_state_to_logs_23
 11902 ;;		_change_state_to_logs_33
 11903 ;;		_change_state_to_logs_34
 11904 ;;		_change_state_to_menu_11
 11905 ;;		_change_state_to_menu_23
 11906 ;;		i2_change_state_to_menu_12
 11907 ;;		i2_change_state_to_menu_22
 11908 ;; This function is called by:
 11909 ;;		_updateMenu
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text50
 11914  001A10                     __ptext50:
 11915                           	opt stack 0
 11916  001A10                     _inputHandler:
 11917                           	opt stack 18
 11918                           
 11919                           ;UI.c: 375: if(firstboot){
 11920                           
 11921                           ;incstack = 0
 11922  001A10  5076               	movf	_firstboot,w,c
 11923  001A12  1077               	iorwf	_firstboot+1,w,c
 11924  001A14  B4D8               	btfsc	status,2,c
 11925  001A16  D00B               	goto	i2l5032
 11926                           
 11927                           ;UI.c: 376: change_state_to_menu_11();
 11928  001A18  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 11929                           
 11930                           ;UI.c: 377: firstboot = 0;
 11931  001A1C  0E00               	movlw	0
 11932  001A1E  6E77               	movwf	_firstboot+1,c
 11933  001A20  0E00               	movlw	0
 11934  001A22  6E76               	movwf	_firstboot,c
 11935                           
 11936                           ;UI.c: 378: return 0;
 11937  001A24  0E00               	movlw	0
 11938  001A26  6E2B               	movwf	?_inputHandler+1,c
 11939  001A28  0E00               	movlw	0
 11940  001A2A  6E2A               	movwf	?_inputHandler,c
 11941  001A2C  0012               	return	
 11942  001A2E                     i2l5032:
 11943                           
 11944                           ;UI.c: 379: }
 11945                           ;UI.c: 380: if (logstate){
 11946  001A2E  0100               	movlb	0	; () banked
 11947  001A30  51F8               	movf	_logstate& (0+255),w,b
 11948  001A32  0100               	movlb	0	; () banked
 11949  001A34  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 11950  001A36  B4D8               	btfsc	status,2,c
 11951  001A38  D0C7               	goto	i2l5150
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 11955  001A3A  0E43               	movlw	67
 11956  001A3C  187E               	xorwf	_input,w,c	;volatile
 11957  001A3E  A4D8               	btfss	status,2,c
 11958  001A40  D012               	goto	i2l5050
 11959                           
 11960                           ; BSR set to: 0
 11961  001A42  B281               	btfsc	3969,1,c	;volatile
 11962  001A44  D009               	goto	i2l5042
 11963  001A46  D00F               	goto	i2l5050
 11964  001A48                     i2l5040:
 11965                           
 11966                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 11967  001A48  0E68               	movlw	104
 11968  001A4A  6E2C               	movwf	??_inputHandler& (0+255),c
 11969  001A4C  0EE4               	movlw	228
 11970  001A4E                     i2u553_47:
 11971  001A4E  2EE8               	decfsz	wreg,f,c
 11972  001A50  D7FE               	bra	i2u553_47
 11973  001A52  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 11974  001A54  D7FC               	bra	i2u553_47
 11975  001A56  D000               	nop2	
 11976  001A58                     i2l5042:
 11977  001A58  B281               	btfsc	3969,1,c	;volatile
 11978  001A5A  D7F6               	goto	i2l5040
 11979  001A5C                     i2l5044:
 11980                           
 11981                           ;UI.c: 385: }
 11982                           ;UI.c: 386: return 0;
 11983  001A5C  0E00               	movlw	0
 11984  001A5E  6E2B               	movwf	?_inputHandler+1,c
 11985  001A60  0E00               	movlw	0
 11986  001A62  6E2A               	movwf	?_inputHandler,c
 11987  001A64  0012               	return	
 11988  001A66                     i2l5050:
 11989                           
 11990                           ;UI.c: 388: else if (input == 'D'){
 11991  001A66  0E44               	movlw	68
 11992  001A68  187E               	xorwf	_input,w,c	;volatile
 11993  001A6A  A4D8               	btfss	status,2,c
 11994  001A6C  D7F7               	goto	i2l5044
 11995                           
 11996                           ;UI.c: 390: logstate = 0;
 11997  001A6E  0E00               	movlw	0
 11998  001A70  0100               	movlb	0	; () banked
 11999  001A72  6FF9               	movwf	(_logstate+1)& (0+255),b
 12000  001A74  0E00               	movlw	0
 12001  001A76  6FF8               	movwf	_logstate& (0+255),b
 12002                           
 12003                           ;UI.c: 391: switch(cur_state){
 12004  001A78  D012               	goto	i2l5068
 12005  001A7A                     i2l5054:
 12006                           
 12007                           ;UI.c: 393: change_state_to_logs_11();
 12008  001A7A  EC1A  F018         	call	_change_state_to_logs_11	;wreg free
 12009                           
 12010                           ;UI.c: 394: break;
 12011  001A7E  D7EE               	goto	i2l5044
 12012  001A80                     i2l5056:
 12013                           
 12014                           ;UI.c: 396: change_state_to_logs_12();
 12015  001A80  EC02  F018         	call	_change_state_to_logs_12	;wreg free
 12016                           
 12017                           ;UI.c: 397: break;
 12018  001A84  D7EB               	goto	i2l5044
 12019  001A86                     i2l5058:
 12020                           
 12021                           ;UI.c: 399: change_state_to_logs_22();
 12022  001A86  ECEA  F017         	call	_change_state_to_logs_22	;wreg free
 12023                           
 12024                           ;UI.c: 400: break;
 12025  001A8A  D7E8               	goto	i2l5044
 12026  001A8C                     i2l5060:
 12027                           
 12028                           ;UI.c: 402: change_state_to_logs_23();
 12029  001A8C  EC49  F018         	call	_change_state_to_logs_23	;wreg free
 12030                           
 12031                           ;UI.c: 403: break;
 12032  001A90  D7E5               	goto	i2l5044
 12033  001A92                     i2l5062:
 12034                           
 12035                           ;UI.c: 405: change_state_to_logs_33();
 12036  001A92  ECD2  F017         	call	_change_state_to_logs_33	;wreg free
 12037                           
 12038                           ;UI.c: 406: break;
 12039  001A96  D7E2               	goto	i2l5044
 12040  001A98                     i2l5064:
 12041                           
 12042                           ;UI.c: 408: change_state_to_logs_34();
 12043  001A98  ECBA  F017         	call	_change_state_to_logs_34	;wreg free
 12044                           
 12045                           ;UI.c: 410: }
 12046                           
 12047                           ;UI.c: 409: break;
 12048  001A9C  D7DF               	goto	i2l5044
 12049  001A9E                     i2l5068:
 12050  001A9E  C0DC  F02C         	movff	_cur_state,??_inputHandler
 12051  001AA2  C0DD  F02D         	movff	_cur_state+1,??_inputHandler+1
 12052                           
 12053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12054                           ; Switch size 1, requested type "space"
 12055                           ; Number of cases is 2, Range of values is 3 to 4
 12056                           ; switch strategies available:
 12057                           ; Name         Instructions Cycles
 12058                           ; simple_byte            7     4 (average)
 12059                           ;	Chosen strategy is simple_byte
 12060  001AA6  502D               	movf	??_inputHandler+1,w,c
 12061  001AA8  0A03               	xorlw	3	; case 3
 12062  001AAA  B4D8               	btfsc	status,2,c
 12063  001AAC  D004               	goto	i2l6416
 12064  001AAE  0A07               	xorlw	7	; case 4
 12065  001AB0  B4D8               	btfsc	status,2,c
 12066  001AB2  D00F               	goto	i2l6418
 12067  001AB4  D7D3               	goto	i2l5044
 12068  001AB6                     i2l6416:
 12069                           
 12070                           ; Switch size 1, requested type "space"
 12071                           ; Number of cases is 4, Range of values is 243 to 255
 12072                           ; switch strategies available:
 12073                           ; Name         Instructions Cycles
 12074                           ; simple_byte           13     7 (average)
 12075                           ;	Chosen strategy is simple_byte
 12076  001AB6  502C               	movf	??_inputHandler,w,c
 12077  001AB8  0AF3               	xorlw	243	; case 243
 12078  001ABA  B4D8               	btfsc	status,2,c
 12079  001ABC  D7DE               	goto	i2l5054
 12080  001ABE  0A07               	xorlw	7	; case 244
 12081  001AC0  B4D8               	btfsc	status,2,c
 12082  001AC2  D7DE               	goto	i2l5056
 12083  001AC4  0A0A               	xorlw	10	; case 254
 12084  001AC6  B4D8               	btfsc	status,2,c
 12085  001AC8  D7DE               	goto	i2l5058
 12086  001ACA  0A01               	xorlw	1	; case 255
 12087  001ACC  B4D8               	btfsc	status,2,c
 12088  001ACE  D7DE               	goto	i2l5060
 12089  001AD0  D7C5               	goto	i2l5044
 12090  001AD2                     i2l6418:
 12091                           
 12092                           ; Switch size 1, requested type "space"
 12093                           ; Number of cases is 2, Range of values is 9 to 10
 12094                           ; switch strategies available:
 12095                           ; Name         Instructions Cycles
 12096                           ; simple_byte            7     4 (average)
 12097                           ;	Chosen strategy is simple_byte
 12098  001AD2  502C               	movf	??_inputHandler,w,c
 12099  001AD4  0A09               	xorlw	9	; case 9
 12100  001AD6  B4D8               	btfsc	status,2,c
 12101  001AD8  D7DC               	goto	i2l5062
 12102  001ADA  0A03               	xorlw	3	; case 10
 12103  001ADC  B4D8               	btfsc	status,2,c
 12104  001ADE  D7DC               	goto	i2l5064
 12105  001AE0  D7BD               	goto	i2l5044
 12106  001AE2                     i2l5080:
 12107                           
 12108                           ;UI.c: 420: if(cur_state == 11){
 12109  001AE2  0E0B               	movlw	11
 12110  001AE4  0100               	movlb	0	; () banked
 12111  001AE6  19DC               	xorwf	_cur_state& (0+255),w,b
 12112  001AE8  0100               	movlb	0	; () banked
 12113  001AEA  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
 12114  001AEC  A4D8               	btfss	status,2,c
 12115  001AEE  D005               	goto	i2l5088
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;UI.c: 421: return 0;
 12119  001AF0  0E00               	movlw	0
 12120  001AF2  6E2B               	movwf	?_inputHandler+1,c
 12121  001AF4  0E00               	movlw	0
 12122  001AF6  6E2A               	movwf	?_inputHandler,c
 12123                           
 12124                           ; BSR set to: 0
 12125  001AF8  0012               	return	
 12126  001AFA                     i2l5088:
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;UI.c: 423: else{
 12130                           ;UI.c: 424: change_state_to_menu_11();
 12131  001AFA  ECA2  F017         	call	_change_state_to_menu_11	;wreg free
 12132                           
 12133                           ;UI.c: 425: }
 12134                           ;UI.c: 426: return 0;
 12135  001AFE  0E00               	movlw	0
 12136  001B00  6E2B               	movwf	?_inputHandler+1,c
 12137  001B02  0E00               	movlw	0
 12138  001B04  6E2A               	movwf	?_inputHandler,c
 12139  001B06  0012               	return	
 12140  001B08                     i2l5094:
 12141                           
 12142                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 12143  001B08  0E16               	movlw	22
 12144  001B0A  0100               	movlb	0	; () banked
 12145  001B0C  19DC               	xorwf	_cur_state& (0+255),w,b
 12146  001B0E  0100               	movlb	0	; () banked
 12147  001B10  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
 12148  001B12  B4D8               	btfsc	status,2,c
 12149  001B14  D007               	goto	i2l5098
 12150                           
 12151                           ; BSR set to: 0
 12152  001B16  0E0C               	movlw	12
 12153  001B18  0100               	movlb	0	; () banked
 12154  001B1A  19DC               	xorwf	_cur_state& (0+255),w,b
 12155  001B1C  0100               	movlb	0	; () banked
 12156  001B1E  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
 12157  001B20  A4D8               	btfss	status,2,c
 12158  001B22  D005               	goto	i2l5104
 12159  001B24                     i2l5098:
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;UI.c: 429: return 0;
 12163  001B24  0E00               	movlw	0
 12164  001B26  6E2B               	movwf	?_inputHandler+1,c
 12165  001B28  0E00               	movlw	0
 12166  001B2A  6E2A               	movwf	?_inputHandler,c
 12167                           
 12168                           ; BSR set to: 0
 12169  001B2C  0012               	return	
 12170  001B2E                     i2l5104:
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;UI.c: 431: else if(cur_state == 23){
 12174  001B2E  0E17               	movlw	23
 12175  001B30  0100               	movlb	0	; () banked
 12176  001B32  19DC               	xorwf	_cur_state& (0+255),w,b
 12177  001B34  0100               	movlb	0	; () banked
 12178  001B36  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
 12179  001B38  A4D8               	btfss	status,2,c
 12180  001B3A  D003               	goto	i2l5108
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;UI.c: 432: change_state_to_menu_22();
 12184  001B3C  EC5A  F017         	call	i2_change_state_to_menu_22	;wreg free
 12185                           
 12186                           ;UI.c: 433: }
 12187  001B40  D002               	goto	i2l5110
 12188  001B42                     i2l5108:
 12189                           
 12190                           ;UI.c: 434: else{
 12191                           ;UI.c: 435: change_state_to_menu_12();
 12192  001B42  EC72  F017         	call	i2_change_state_to_menu_12	;wreg free
 12193  001B46                     i2l5110:
 12194                           
 12195                           ;UI.c: 436: }
 12196                           ;UI.c: 437: return 0;
 12197  001B46  0E00               	movlw	0
 12198  001B48  6E2B               	movwf	?_inputHandler+1,c
 12199  001B4A  0E00               	movlw	0
 12200  001B4C  6E2A               	movwf	?_inputHandler,c
 12201  001B4E  0012               	return	
 12202  001B50                     i2l5114:
 12203                           
 12204                           ;UI.c: 439: if(cur_state == 23){
 12205  001B50  0E17               	movlw	23
 12206  001B52  0100               	movlb	0	; () banked
 12207  001B54  19DC               	xorwf	_cur_state& (0+255),w,b
 12208  001B56  0100               	movlb	0	; () banked
 12209  001B58  11DD               	iorwf	(_cur_state+1)& (0+255),w,b
 12210  001B5A  A4D8               	btfss	status,2,c
 12211  001B5C  D005               	goto	i2l5122
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;UI.c: 440: return 0;
 12215  001B5E  0E00               	movlw	0
 12216  001B60  6E2B               	movwf	?_inputHandler+1,c
 12217  001B62  0E00               	movlw	0
 12218  001B64  6E2A               	movwf	?_inputHandler,c
 12219                           
 12220                           ; BSR set to: 0
 12221  001B66  0012               	return	
 12222  001B68                     i2l5122:
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;UI.c: 442: else{
 12226                           ;UI.c: 443: change_state_to_menu_23();
 12227  001B68  EC8A  F017         	call	_change_state_to_menu_23	;wreg free
 12228                           
 12229                           ;UI.c: 444: }
 12230                           ;UI.c: 445: return 0;
 12231  001B6C  0E00               	movlw	0
 12232  001B6E  6E2B               	movwf	?_inputHandler+1,c
 12233  001B70  0E00               	movlw	0
 12234  001B72  6E2A               	movwf	?_inputHandler,c
 12235  001B74  0012               	return	
 12236  001B76                     i2l5128:
 12237                           
 12238                           ;UI.c: 448: up = 1;
 12239  001B76  0E00               	movlw	0
 12240  001B78  6E79               	movwf	_up+1,c
 12241  001B7A  0E01               	movlw	1
 12242  001B7C  6E78               	movwf	_up,c
 12243                           
 12244                           ;UI.c: 449: return 1;
 12245  001B7E  0E00               	movlw	0
 12246  001B80  6E2B               	movwf	?_inputHandler+1,c
 12247  001B82  0E01               	movlw	1
 12248  001B84  6E2A               	movwf	?_inputHandler,c
 12249  001B86  0012               	return	
 12250  001B88                     i2l5132:
 12251                           
 12252                           ;UI.c: 451: down = 1;
 12253  001B88  0E00               	movlw	0
 12254  001B8A  6E71               	movwf	_down+1,c
 12255  001B8C  0E01               	movlw	1
 12256  001B8E  6E70               	movwf	_down,c
 12257                           
 12258                           ;UI.c: 452: return 1;
 12259  001B90  0E00               	movlw	0
 12260  001B92  6E2B               	movwf	?_inputHandler+1,c
 12261  001B94  0E01               	movlw	1
 12262  001B96  6E2A               	movwf	?_inputHandler,c
 12263  001B98  0012               	return	
 12264  001B9A                     i2l5136:
 12265                           
 12266                           ;UI.c: 454: enter = 1;
 12267  001B9A  0E00               	movlw	0
 12268  001B9C  6E73               	movwf	_enter+1,c
 12269  001B9E  0E01               	movlw	1
 12270  001BA0  6E72               	movwf	_enter,c
 12271                           
 12272                           ;UI.c: 455: return 1;
 12273  001BA2  0E00               	movlw	0
 12274  001BA4  6E2B               	movwf	?_inputHandler+1,c
 12275  001BA6  0E01               	movlw	1
 12276  001BA8  6E2A               	movwf	?_inputHandler,c
 12277  001BAA  0012               	return	
 12278  001BAC                     i2l5140:
 12279                           
 12280                           ;UI.c: 457: back = 1;
 12281  001BAC  0E00               	movlw	0
 12282  001BAE  6E65               	movwf	_back+1,c
 12283  001BB0  0E01               	movlw	1
 12284  001BB2  6E64               	movwf	_back,c
 12285                           
 12286                           ;UI.c: 458: return 1;
 12287  001BB4  0E00               	movlw	0
 12288  001BB6  6E2B               	movwf	?_inputHandler+1,c
 12289  001BB8  0E01               	movlw	1
 12290  001BBA  6E2A               	movwf	?_inputHandler,c
 12291  001BBC  0012               	return	
 12292  001BBE                     i2l5144:
 12293                           
 12294                           ;UI.c: 461: return 1;
 12295  001BBE  0E00               	movlw	0
 12296  001BC0  6E2B               	movwf	?_inputHandler+1,c
 12297  001BC2  0E01               	movlw	1
 12298  001BC4  6E2A               	movwf	?_inputHandler,c
 12299                           
 12300                           ;UI.c: 462: }
 12301  001BC6  0012               	return	
 12302  001BC8                     i2l5150:
 12303  001BC8  507E               	movf	_input,w,c	;volatile
 12304                           
 12305                           ; Switch size 1, requested type "space"
 12306                           ; Number of cases is 7, Range of values is 49 to 68
 12307                           ; switch strategies available:
 12308                           ; Name         Instructions Cycles
 12309                           ; simple_byte           22    12 (average)
 12310                           ;	Chosen strategy is simple_byte
 12311  001BCA  0A31               	xorlw	49	; case 49
 12312  001BCC  B4D8               	btfsc	status,2,c
 12313  001BCE  D789               	goto	i2l5080
 12314  001BD0  0A03               	xorlw	3	; case 50
 12315  001BD2  B4D8               	btfsc	status,2,c
 12316  001BD4  D799               	goto	i2l5094
 12317  001BD6  0A01               	xorlw	1	; case 51
 12318  001BD8  B4D8               	btfsc	status,2,c
 12319  001BDA  D7BA               	goto	i2l5114
 12320  001BDC  0A72               	xorlw	114	; case 65
 12321  001BDE  B4D8               	btfsc	status,2,c
 12322  001BE0  D7CA               	goto	i2l5128
 12323  001BE2  0A03               	xorlw	3	; case 66
 12324  001BE4  B4D8               	btfsc	status,2,c
 12325  001BE6  D7D0               	goto	i2l5132
 12326  001BE8  0A01               	xorlw	1	; case 67
 12327  001BEA  B4D8               	btfsc	status,2,c
 12328  001BEC  D7D6               	goto	i2l5136
 12329  001BEE  0A07               	xorlw	7	; case 68
 12330  001BF0  B4D8               	btfsc	status,2,c
 12331  001BF2  D7DC               	goto	i2l5140
 12332  001BF4  D7E4               	goto	i2l5144
 12333  001BF6                     __end_of_inputHandler:
 12334                           	opt stack 0
 12335                           pclatu	equ	0xFFB
 12336                           pclath	equ	0xFFA
 12337                           tblptru	equ	0xFF8
 12338                           tblptrh	equ	0xFF7
 12339                           tblptrl	equ	0xFF6
 12340                           tablat	equ	0xFF5
 12341                           prodh	equ	0xFF4
 12342                           prodl	equ	0xFF3
 12343                           intcon	equ	0xFF2
 12344                           intcon2	equ	0xFF1
 12345                           intcon3	equ	0xFF0
 12346                           indf0	equ	0xFEF
 12347                           postinc0	equ	0xFEE
 12348                           fsr0h	equ	0xFEA
 12349                           fsr0l	equ	0xFE9
 12350                           wreg	equ	0xFE8
 12351                           postdec1	equ	0xFE5
 12352                           fsr1h	equ	0xFE2
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function i2_change_state_to_menu_22 *****************
 12362 ;; Defined at:
 12363 ;;		line 496 in file "UI.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;		None
 12368 ;; Return value:  Size  Location     Type
 12369 ;;                  1    wreg      void 
 12370 ;; Registers used:
 12371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12381 ;;Total ram usage:        0 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    3
 12384 ;; This function calls:
 12385 ;;		i2_lcdInst
 12386 ;;		i2_printf
 12387 ;; This function is called by:
 12388 ;;		_updateMenu
 12389 ;;		_inputHandler
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           	psect	text51
 12394  002EB4                     __ptext51:
 12395                           	opt stack 0
 12396  002EB4                     i2_change_state_to_menu_22:
 12397                           	opt stack 19
 12398                           
 12399                           ;UI.c: 497: cur_state = 22;
 12400                           
 12401                           ;incstack = 0
 12402  002EB4  0E00               	movlw	0
 12403  002EB6  0100               	movlb	0	; () banked
 12404  002EB8  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12405  002EBA  0E16               	movlw	22
 12406  002EBC  6FDC               	movwf	_cur_state& (0+255),b
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;UI.c: 499: lcdInst(0b10000000);;
 12410  002EBE  0E80               	movlw	128
 12411  002EC0  EC7B  F019         	call	i2_lcdInst
 12412                           
 12413                           ;UI.c: 500: printf("2. SORT        <");
 12414  002EC4  0E24               	movlw	low STR_34
 12415  002EC6  6E0D               	movwf	i2printf@f,c
 12416  002EC8  0EFF               	movlw	high STR_34
 12417  002ECA  6E0E               	movwf	i2printf@f+1,c
 12418  002ECC  EC78  F006         	call	i2_printf	;wreg free
 12419                           
 12420                           ;UI.c: 501: lcdInst(0b11000000);;
 12421  002ED0  0EC0               	movlw	192
 12422  002ED2  EC7B  F019         	call	i2_lcdInst
 12423                           
 12424                           ;UI.c: 502: printf("3. LOGS         ");
 12425  002ED6  0E69               	movlw	low STR_36
 12426  002ED8  6E0D               	movwf	i2printf@f,c
 12427  002EDA  0EFE               	movlw	high STR_36
 12428  002EDC  6E0E               	movwf	i2printf@f+1,c
 12429  002EDE  EC78  F006         	call	i2_printf	;wreg free
 12430  002EE2  0012               	return		;funcret
 12431  002EE4                     __end_ofi2_change_state_to_menu_22:
 12432                           	opt stack 0
 12433                           pclatu	equ	0xFFB
 12434                           pclath	equ	0xFFA
 12435                           tblptru	equ	0xFF8
 12436                           tblptrh	equ	0xFF7
 12437                           tblptrl	equ	0xFF6
 12438                           tablat	equ	0xFF5
 12439                           prodh	equ	0xFF4
 12440                           prodl	equ	0xFF3
 12441                           intcon	equ	0xFF2
 12442                           intcon2	equ	0xFF1
 12443                           intcon3	equ	0xFF0
 12444                           indf0	equ	0xFEF
 12445                           postinc0	equ	0xFEE
 12446                           fsr0h	equ	0xFEA
 12447                           fsr0l	equ	0xFE9
 12448                           wreg	equ	0xFE8
 12449                           postdec1	equ	0xFE5
 12450                           fsr1h	equ	0xFE2
 12451                           fsr1l	equ	0xFE1
 12452                           indf2	equ	0xFDF
 12453                           postinc2	equ	0xFDE
 12454                           postdec2	equ	0xFDD
 12455                           fsr2h	equ	0xFDA
 12456                           fsr2l	equ	0xFD9
 12457                           status	equ	0xFD8
 12458                           
 12459 ;; *************** function i2_change_state_to_menu_12 *****************
 12460 ;; Defined at:
 12461 ;;		line 488 in file "UI.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;		None
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;		None
 12466 ;; Return value:  Size  Location     Type
 12467 ;;                  1    wreg      void 
 12468 ;; Registers used:
 12469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;Total ram usage:        0 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    3
 12482 ;; This function calls:
 12483 ;;		i2_lcdInst
 12484 ;;		i2_printf
 12485 ;; This function is called by:
 12486 ;;		_updateMenu
 12487 ;;		_inputHandler
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text52
 12492  002EE4                     __ptext52:
 12493                           	opt stack 0
 12494  002EE4                     i2_change_state_to_menu_12:
 12495                           	opt stack 19
 12496                           
 12497                           ;UI.c: 489: cur_state = 12;
 12498                           
 12499                           ;incstack = 0
 12500  002EE4  0E00               	movlw	0
 12501  002EE6  0100               	movlb	0	; () banked
 12502  002EE8  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12503  002EEA  0E0C               	movlw	12
 12504  002EEC  6FDC               	movwf	_cur_state& (0+255),b
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;UI.c: 491: lcdInst(0b10000000);;
 12508  002EEE  0E80               	movlw	128
 12509  002EF0  EC7B  F019         	call	i2_lcdInst
 12510                           
 12511                           ;UI.c: 492: printf("1. DATE/TIME    ");
 12512  002EF4  0E8B               	movlw	low STR_33
 12513  002EF6  6E0D               	movwf	i2printf@f,c
 12514  002EF8  0EFE               	movlw	high STR_33
 12515  002EFA  6E0E               	movwf	i2printf@f+1,c
 12516  002EFC  EC78  F006         	call	i2_printf	;wreg free
 12517                           
 12518                           ;UI.c: 493: lcdInst(0b11000000);;
 12519  002F00  0EC0               	movlw	192
 12520  002F02  EC7B  F019         	call	i2_lcdInst
 12521                           
 12522                           ;UI.c: 494: printf("2. SORT        <");
 12523  002F06  0E24               	movlw	low STR_34
 12524  002F08  6E0D               	movwf	i2printf@f,c
 12525  002F0A  0EFF               	movlw	high STR_34
 12526  002F0C  6E0E               	movwf	i2printf@f+1,c
 12527  002F0E  EC78  F006         	call	i2_printf	;wreg free
 12528  002F12  0012               	return		;funcret
 12529  002F14                     __end_ofi2_change_state_to_menu_12:
 12530                           	opt stack 0
 12531                           pclatu	equ	0xFFB
 12532                           pclath	equ	0xFFA
 12533                           tblptru	equ	0xFF8
 12534                           tblptrh	equ	0xFF7
 12535                           tblptrl	equ	0xFF6
 12536                           tablat	equ	0xFF5
 12537                           prodh	equ	0xFF4
 12538                           prodl	equ	0xFF3
 12539                           intcon	equ	0xFF2
 12540                           intcon2	equ	0xFF1
 12541                           intcon3	equ	0xFF0
 12542                           indf0	equ	0xFEF
 12543                           postinc0	equ	0xFEE
 12544                           fsr0h	equ	0xFEA
 12545                           fsr0l	equ	0xFE9
 12546                           wreg	equ	0xFE8
 12547                           postdec1	equ	0xFE5
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _change_state_to_menu_23 *****************
 12558 ;; Defined at:
 12559 ;;		line 504 in file "UI.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;		None
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;		None
 12564 ;; Return value:  Size  Location     Type
 12565 ;;                  1    wreg      void 
 12566 ;; Registers used:
 12567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;Total ram usage:        0 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:    3
 12580 ;; This function calls:
 12581 ;;		i2_lcdInst
 12582 ;;		i2_printf
 12583 ;; This function is called by:
 12584 ;;		_updateMenu
 12585 ;;		_inputHandler
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           	psect	text53
 12590  002F14                     __ptext53:
 12591                           	opt stack 0
 12592  002F14                     _change_state_to_menu_23:
 12593                           	opt stack 18
 12594                           
 12595                           ;UI.c: 505: cur_state = 23;
 12596                           
 12597                           ;incstack = 0
 12598  002F14  0E00               	movlw	0
 12599  002F16  0100               	movlb	0	; () banked
 12600  002F18  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12601  002F1A  0E17               	movlw	23
 12602  002F1C  6FDC               	movwf	_cur_state& (0+255),b
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;UI.c: 507: lcdInst(0b10000000);;
 12606  002F1E  0E80               	movlw	128
 12607  002F20  EC7B  F019         	call	i2_lcdInst
 12608                           
 12609                           ;UI.c: 508: printf("2. SORT         ");
 12610  002F24  0E7A               	movlw	low STR_32
 12611  002F26  6E0D               	movwf	i2printf@f,c
 12612  002F28  0EFE               	movlw	high STR_32
 12613  002F2A  6E0E               	movwf	i2printf@f+1,c
 12614  002F2C  EC78  F006         	call	i2_printf	;wreg free
 12615                           
 12616                           ;UI.c: 509: lcdInst(0b11000000);;
 12617  002F30  0EC0               	movlw	192
 12618  002F32  EC7B  F019         	call	i2_lcdInst
 12619                           
 12620                           ;UI.c: 510: printf("3. LOGS        <");
 12621  002F36  0E13               	movlw	low STR_38
 12622  002F38  6E0D               	movwf	i2printf@f,c
 12623  002F3A  0EFF               	movlw	high STR_38
 12624  002F3C  6E0E               	movwf	i2printf@f+1,c
 12625  002F3E  EC78  F006         	call	i2_printf	;wreg free
 12626  002F42  0012               	return		;funcret
 12627  002F44                     __end_of_change_state_to_menu_23:
 12628                           	opt stack 0
 12629                           pclatu	equ	0xFFB
 12630                           pclath	equ	0xFFA
 12631                           tblptru	equ	0xFF8
 12632                           tblptrh	equ	0xFF7
 12633                           tblptrl	equ	0xFF6
 12634                           tablat	equ	0xFF5
 12635                           prodh	equ	0xFF4
 12636                           prodl	equ	0xFF3
 12637                           intcon	equ	0xFF2
 12638                           intcon2	equ	0xFF1
 12639                           intcon3	equ	0xFF0
 12640                           indf0	equ	0xFEF
 12641                           postinc0	equ	0xFEE
 12642                           fsr0h	equ	0xFEA
 12643                           fsr0l	equ	0xFE9
 12644                           wreg	equ	0xFE8
 12645                           postdec1	equ	0xFE5
 12646                           fsr1h	equ	0xFE2
 12647                           fsr1l	equ	0xFE1
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           fsr2h	equ	0xFDA
 12652                           fsr2l	equ	0xFD9
 12653                           status	equ	0xFD8
 12654                           
 12655 ;; *************** function _change_state_to_menu_11 *****************
 12656 ;; Defined at:
 12657 ;;		line 480 in file "UI.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;		None
 12660 ;; Auto vars:     Size  Location     Type
 12661 ;;		None
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  1    wreg      void 
 12664 ;; Registers used:
 12665 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;Total ram usage:        0 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:    3
 12678 ;; This function calls:
 12679 ;;		i2_lcdInst
 12680 ;;		i2_printf
 12681 ;; This function is called by:
 12682 ;;		_updateMenu
 12683 ;;		_inputHandler
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           	psect	text54
 12688  002F44                     __ptext54:
 12689                           	opt stack 0
 12690  002F44                     _change_state_to_menu_11:
 12691                           	opt stack 18
 12692                           
 12693                           ;UI.c: 481: cur_state = 11;
 12694                           
 12695                           ;incstack = 0
 12696  002F44  0E00               	movlw	0
 12697  002F46  0100               	movlb	0	; () banked
 12698  002F48  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12699  002F4A  0E0B               	movlw	11
 12700  002F4C  6FDC               	movwf	_cur_state& (0+255),b
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;UI.c: 483: lcdInst(0b10000000);;
 12704  002F4E  0E80               	movlw	128
 12705  002F50  EC7B  F019         	call	i2_lcdInst
 12706                           
 12707                           ;UI.c: 484: printf("1. DATE/TIME   <");
 12708  002F54  0E35               	movlw	low STR_31
 12709  002F56  6E0D               	movwf	i2printf@f,c
 12710  002F58  0EFF               	movlw	high STR_31
 12711  002F5A  6E0E               	movwf	i2printf@f+1,c
 12712  002F5C  EC78  F006         	call	i2_printf	;wreg free
 12713                           
 12714                           ;UI.c: 485: lcdInst(0b11000000);;
 12715  002F60  0EC0               	movlw	192
 12716  002F62  EC7B  F019         	call	i2_lcdInst
 12717                           
 12718                           ;UI.c: 486: printf("2. SORT         ");
 12719  002F66  0E7A               	movlw	low STR_32
 12720  002F68  6E0D               	movwf	i2printf@f,c
 12721  002F6A  0EFE               	movlw	high STR_32
 12722  002F6C  6E0E               	movwf	i2printf@f+1,c
 12723  002F6E  EC78  F006         	call	i2_printf	;wreg free
 12724  002F72  0012               	return		;funcret
 12725  002F74                     __end_of_change_state_to_menu_11:
 12726                           	opt stack 0
 12727                           pclatu	equ	0xFFB
 12728                           pclath	equ	0xFFA
 12729                           tblptru	equ	0xFF8
 12730                           tblptrh	equ	0xFF7
 12731                           tblptrl	equ	0xFF6
 12732                           tablat	equ	0xFF5
 12733                           prodh	equ	0xFF4
 12734                           prodl	equ	0xFF3
 12735                           intcon	equ	0xFF2
 12736                           intcon2	equ	0xFF1
 12737                           intcon3	equ	0xFF0
 12738                           indf0	equ	0xFEF
 12739                           postinc0	equ	0xFEE
 12740                           fsr0h	equ	0xFEA
 12741                           fsr0l	equ	0xFE9
 12742                           wreg	equ	0xFE8
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           fsr2h	equ	0xFDA
 12750                           fsr2l	equ	0xFD9
 12751                           status	equ	0xFD8
 12752                           
 12753 ;; *************** function _change_state_to_logs_34 *****************
 12754 ;; Defined at:
 12755 ;;		line 547 in file "UI.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;Total ram usage:        0 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    3
 12776 ;; This function calls:
 12777 ;;		i2_lcdInst
 12778 ;;		i2_printf
 12779 ;; This function is called by:
 12780 ;;		_updateMenu
 12781 ;;		_inputHandler
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           	psect	text55
 12786  002F74                     __ptext55:
 12787                           	opt stack 0
 12788  002F74                     _change_state_to_logs_34:
 12789                           	opt stack 18
 12790                           
 12791                           ;UI.c: 548: cur_state = 1034;
 12792                           
 12793                           ;incstack = 0
 12794  002F74  0E04               	movlw	4
 12795  002F76  0100               	movlb	0	; () banked
 12796  002F78  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12797  002F7A  0E0A               	movlw	10
 12798  002F7C  6FDC               	movwf	_cur_state& (0+255),b
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;UI.c: 549: lcdInst(0b10000000);;
 12802  002F7E  0E80               	movlw	128
 12803  002F80  EC7B  F019         	call	i2_lcdInst
 12804                           
 12805                           ;UI.c: 550: printf("LOG 3           ");
 12806  002F84  0E47               	movlw	low STR_44
 12807  002F86  6E0D               	movwf	i2printf@f,c
 12808  002F88  0EFE               	movlw	high STR_44
 12809  002F8A  6E0E               	movwf	i2printf@f+1,c
 12810  002F8C  EC78  F006         	call	i2_printf	;wreg free
 12811                           
 12812                           ;UI.c: 551: lcdInst(0b11000000);;
 12813  002F90  0EC0               	movlw	192
 12814  002F92  EC7B  F019         	call	i2_lcdInst
 12815                           
 12816                           ;UI.c: 552: printf("LOG 4          <");
 12817  002F96  0E02               	movlw	low STR_50
 12818  002F98  6E0D               	movwf	i2printf@f,c
 12819  002F9A  0EFF               	movlw	high STR_50
 12820  002F9C  6E0E               	movwf	i2printf@f+1,c
 12821  002F9E  EC78  F006         	call	i2_printf	;wreg free
 12822  002FA2  0012               	return		;funcret
 12823  002FA4                     __end_of_change_state_to_logs_34:
 12824                           	opt stack 0
 12825                           pclatu	equ	0xFFB
 12826                           pclath	equ	0xFFA
 12827                           tblptru	equ	0xFF8
 12828                           tblptrh	equ	0xFF7
 12829                           tblptrl	equ	0xFF6
 12830                           tablat	equ	0xFF5
 12831                           prodh	equ	0xFF4
 12832                           prodl	equ	0xFF3
 12833                           intcon	equ	0xFF2
 12834                           intcon2	equ	0xFF1
 12835                           intcon3	equ	0xFF0
 12836                           indf0	equ	0xFEF
 12837                           postinc0	equ	0xFEE
 12838                           fsr0h	equ	0xFEA
 12839                           fsr0l	equ	0xFE9
 12840                           wreg	equ	0xFE8
 12841                           postdec1	equ	0xFE5
 12842                           fsr1h	equ	0xFE2
 12843                           fsr1l	equ	0xFE1
 12844                           indf2	equ	0xFDF
 12845                           postinc2	equ	0xFDE
 12846                           postdec2	equ	0xFDD
 12847                           fsr2h	equ	0xFDA
 12848                           fsr2l	equ	0xFD9
 12849                           status	equ	0xFD8
 12850                           
 12851 ;; *************** function _change_state_to_logs_33 *****************
 12852 ;; Defined at:
 12853 ;;		line 540 in file "UI.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;		None
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      void 
 12860 ;; Registers used:
 12861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;Total ram usage:        0 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    3
 12874 ;; This function calls:
 12875 ;;		i2_lcdInst
 12876 ;;		i2_printf
 12877 ;; This function is called by:
 12878 ;;		_updateMenu
 12879 ;;		_inputHandler
 12880 ;; This function uses a non-reentrant model
 12881 ;;
 12882                           
 12883                           	psect	text56
 12884  002FA4                     __ptext56:
 12885                           	opt stack 0
 12886  002FA4                     _change_state_to_logs_33:
 12887                           	opt stack 18
 12888                           
 12889                           ;UI.c: 541: cur_state = 1033;
 12890                           
 12891                           ;incstack = 0
 12892  002FA4  0E04               	movlw	4
 12893  002FA6  0100               	movlb	0	; () banked
 12894  002FA8  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12895  002FAA  0E09               	movlw	9
 12896  002FAC  6FDC               	movwf	_cur_state& (0+255),b
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;UI.c: 542: lcdInst(0b10000000);;
 12900  002FAE  0E80               	movlw	128
 12901  002FB0  EC7B  F019         	call	i2_lcdInst
 12902                           
 12903                           ;UI.c: 543: printf("LOG 3          <");
 12904  002FB4  0EF1               	movlw	low STR_46
 12905  002FB6  6E0D               	movwf	i2printf@f,c
 12906  002FB8  0EFE               	movlw	high STR_46
 12907  002FBA  6E0E               	movwf	i2printf@f+1,c
 12908  002FBC  EC78  F006         	call	i2_printf	;wreg free
 12909                           
 12910                           ;UI.c: 544: lcdInst(0b11000000);;
 12911  002FC0  0EC0               	movlw	192
 12912  002FC2  EC7B  F019         	call	i2_lcdInst
 12913                           
 12914                           ;UI.c: 545: printf("LOG 4           ");
 12915  002FC6  0E58               	movlw	low STR_48
 12916  002FC8  6E0D               	movwf	i2printf@f,c
 12917  002FCA  0EFE               	movlw	high STR_48
 12918  002FCC  6E0E               	movwf	i2printf@f+1,c
 12919  002FCE  EC78  F006         	call	i2_printf	;wreg free
 12920  002FD2  0012               	return		;funcret
 12921  002FD4                     __end_of_change_state_to_logs_33:
 12922                           	opt stack 0
 12923                           pclatu	equ	0xFFB
 12924                           pclath	equ	0xFFA
 12925                           tblptru	equ	0xFF8
 12926                           tblptrh	equ	0xFF7
 12927                           tblptrl	equ	0xFF6
 12928                           tablat	equ	0xFF5
 12929                           prodh	equ	0xFF4
 12930                           prodl	equ	0xFF3
 12931                           intcon	equ	0xFF2
 12932                           intcon2	equ	0xFF1
 12933                           intcon3	equ	0xFF0
 12934                           indf0	equ	0xFEF
 12935                           postinc0	equ	0xFEE
 12936                           fsr0h	equ	0xFEA
 12937                           fsr0l	equ	0xFE9
 12938                           wreg	equ	0xFE8
 12939                           postdec1	equ	0xFE5
 12940                           fsr1h	equ	0xFE2
 12941                           fsr1l	equ	0xFE1
 12942                           indf2	equ	0xFDF
 12943                           postinc2	equ	0xFDE
 12944                           postdec2	equ	0xFDD
 12945                           fsr2h	equ	0xFDA
 12946                           fsr2l	equ	0xFD9
 12947                           status	equ	0xFD8
 12948                           
 12949 ;; *************** function _change_state_to_logs_23 *****************
 12950 ;; Defined at:
 12951 ;;		line 533 in file "UI.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;		None
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:        0 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:    3
 12972 ;; This function calls:
 12973 ;;		i2_lcdInst
 12974 ;;		i2_printf
 12975 ;; This function is called by:
 12976 ;;		_updateMenu
 12977 ;;		_inputHandler
 12978 ;; This function uses a non-reentrant model
 12979 ;;
 12980                           
 12981                           	psect	text57
 12982  003092                     __ptext57:
 12983                           	opt stack 0
 12984  003092                     _change_state_to_logs_23:
 12985                           	opt stack 18
 12986                           
 12987                           ;UI.c: 534: cur_state = 1023;
 12988                           
 12989                           ;incstack = 0
 12990  003092  0E03               	movlw	3
 12991  003094  0100               	movlb	0	; () banked
 12992  003096  6FDD               	movwf	(_cur_state+1)& (0+255),b
 12993  003098  69DC               	setf	_cur_state& (0+255),b
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;UI.c: 535: lcdInst(0b10000000);;
 12997  00309A  0E80               	movlw	128
 12998  00309C  EC7B  F019         	call	i2_lcdInst
 12999                           
 13000                           ;UI.c: 536: printf("LOG 2           ");
 13001  0030A0  0E36               	movlw	low STR_40
 13002  0030A2  6E0D               	movwf	i2printf@f,c
 13003  0030A4  0EFE               	movlw	high STR_40
 13004  0030A6  6E0E               	movwf	i2printf@f+1,c
 13005  0030A8  EC78  F006         	call	i2_printf	;wreg free
 13006                           
 13007                           ;UI.c: 537: lcdInst(0b11000000);;
 13008  0030AC  0EC0               	movlw	192
 13009  0030AE  EC7B  F019         	call	i2_lcdInst
 13010                           
 13011                           ;UI.c: 538: printf("LOG 3          <");
 13012  0030B2  0EF1               	movlw	low STR_46
 13013  0030B4  6E0D               	movwf	i2printf@f,c
 13014  0030B6  0EFE               	movlw	high STR_46
 13015  0030B8  6E0E               	movwf	i2printf@f+1,c
 13016  0030BA  EC78  F006         	call	i2_printf	;wreg free
 13017  0030BE  0012               	return		;funcret
 13018  0030C0                     __end_of_change_state_to_logs_23:
 13019                           	opt stack 0
 13020                           pclatu	equ	0xFFB
 13021                           pclath	equ	0xFFA
 13022                           tblptru	equ	0xFF8
 13023                           tblptrh	equ	0xFF7
 13024                           tblptrl	equ	0xFF6
 13025                           tablat	equ	0xFF5
 13026                           prodh	equ	0xFF4
 13027                           prodl	equ	0xFF3
 13028                           intcon	equ	0xFF2
 13029                           intcon2	equ	0xFF1
 13030                           intcon3	equ	0xFF0
 13031                           indf0	equ	0xFEF
 13032                           postinc0	equ	0xFEE
 13033                           fsr0h	equ	0xFEA
 13034                           fsr0l	equ	0xFE9
 13035                           wreg	equ	0xFE8
 13036                           postdec1	equ	0xFE5
 13037                           fsr1h	equ	0xFE2
 13038                           fsr1l	equ	0xFE1
 13039                           indf2	equ	0xFDF
 13040                           postinc2	equ	0xFDE
 13041                           postdec2	equ	0xFDD
 13042                           fsr2h	equ	0xFDA
 13043                           fsr2l	equ	0xFD9
 13044                           status	equ	0xFD8
 13045                           
 13046 ;; *************** function _change_state_to_logs_22 *****************
 13047 ;; Defined at:
 13048 ;;		line 526 in file "UI.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;Total ram usage:        0 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    3
 13069 ;; This function calls:
 13070 ;;		i2_lcdInst
 13071 ;;		i2_printf
 13072 ;; This function is called by:
 13073 ;;		_updateMenu
 13074 ;;		_inputHandler
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           	psect	text58
 13079  002FD4                     __ptext58:
 13080                           	opt stack 0
 13081  002FD4                     _change_state_to_logs_22:
 13082                           	opt stack 18
 13083                           
 13084                           ;UI.c: 527: cur_state = 1022;
 13085                           
 13086                           ;incstack = 0
 13087  002FD4  0E03               	movlw	3
 13088  002FD6  0100               	movlb	0	; () banked
 13089  002FD8  6FDD               	movwf	(_cur_state+1)& (0+255),b
 13090  002FDA  0EFE               	movlw	254
 13091  002FDC  6FDC               	movwf	_cur_state& (0+255),b
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;UI.c: 528: lcdInst(0b10000000);;
 13095  002FDE  0E80               	movlw	128
 13096  002FE0  EC7B  F019         	call	i2_lcdInst
 13097                           
 13098                           ;UI.c: 529: printf("LOG 2          <");
 13099  002FE4  0EE0               	movlw	low STR_42
 13100  002FE6  6E0D               	movwf	i2printf@f,c
 13101  002FE8  0EFE               	movlw	high STR_42
 13102  002FEA  6E0E               	movwf	i2printf@f+1,c
 13103  002FEC  EC78  F006         	call	i2_printf	;wreg free
 13104                           
 13105                           ;UI.c: 530: lcdInst(0b11000000);;
 13106  002FF0  0EC0               	movlw	192
 13107  002FF2  EC7B  F019         	call	i2_lcdInst
 13108                           
 13109                           ;UI.c: 531: printf("LOG 3           ");
 13110  002FF6  0E47               	movlw	low STR_44
 13111  002FF8  6E0D               	movwf	i2printf@f,c
 13112  002FFA  0EFE               	movlw	high STR_44
 13113  002FFC  6E0E               	movwf	i2printf@f+1,c
 13114  002FFE  EC78  F006         	call	i2_printf	;wreg free
 13115  003002  0012               	return		;funcret
 13116  003004                     __end_of_change_state_to_logs_22:
 13117                           	opt stack 0
 13118                           pclatu	equ	0xFFB
 13119                           pclath	equ	0xFFA
 13120                           tblptru	equ	0xFF8
 13121                           tblptrh	equ	0xFF7
 13122                           tblptrl	equ	0xFF6
 13123                           tablat	equ	0xFF5
 13124                           prodh	equ	0xFF4
 13125                           prodl	equ	0xFF3
 13126                           intcon	equ	0xFF2
 13127                           intcon2	equ	0xFF1
 13128                           intcon3	equ	0xFF0
 13129                           indf0	equ	0xFEF
 13130                           postinc0	equ	0xFEE
 13131                           fsr0h	equ	0xFEA
 13132                           fsr0l	equ	0xFE9
 13133                           wreg	equ	0xFE8
 13134                           postdec1	equ	0xFE5
 13135                           fsr1h	equ	0xFE2
 13136                           fsr1l	equ	0xFE1
 13137                           indf2	equ	0xFDF
 13138                           postinc2	equ	0xFDE
 13139                           postdec2	equ	0xFDD
 13140                           fsr2h	equ	0xFDA
 13141                           fsr2l	equ	0xFD9
 13142                           status	equ	0xFD8
 13143                           
 13144 ;; *************** function _change_state_to_logs_12 *****************
 13145 ;; Defined at:
 13146 ;;		line 519 in file "UI.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;		None
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;		None
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13164 ;;Total ram usage:        0 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:    3
 13167 ;; This function calls:
 13168 ;;		i2_lcdInst
 13169 ;;		i2_printf
 13170 ;; This function is called by:
 13171 ;;		_updateMenu
 13172 ;;		_inputHandler
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           	psect	text59
 13177  003004                     __ptext59:
 13178                           	opt stack 0
 13179  003004                     _change_state_to_logs_12:
 13180                           	opt stack 18
 13181                           
 13182                           ;UI.c: 520: cur_state = 1012;
 13183                           
 13184                           ;incstack = 0
 13185  003004  0E03               	movlw	3
 13186  003006  0100               	movlb	0	; () banked
 13187  003008  6FDD               	movwf	(_cur_state+1)& (0+255),b
 13188  00300A  0EF4               	movlw	244
 13189  00300C  6FDC               	movwf	_cur_state& (0+255),b
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;UI.c: 521: lcdInst(0b10000000);;
 13193  00300E  0E80               	movlw	128
 13194  003010  EC7B  F019         	call	i2_lcdInst
 13195                           
 13196                           ;UI.c: 522: printf("LOG 1           ");
 13197  003014  0E25               	movlw	low STR_41
 13198  003016  6E0D               	movwf	i2printf@f,c
 13199  003018  0EFE               	movlw	high STR_41
 13200  00301A  6E0E               	movwf	i2printf@f+1,c
 13201  00301C  EC78  F006         	call	i2_printf	;wreg free
 13202                           
 13203                           ;UI.c: 523: lcdInst(0b11000000);;
 13204  003020  0EC0               	movlw	192
 13205  003022  EC7B  F019         	call	i2_lcdInst
 13206                           
 13207                           ;UI.c: 524: printf("LOG 2          <");
 13208  003026  0EE0               	movlw	low STR_42
 13209  003028  6E0D               	movwf	i2printf@f,c
 13210  00302A  0EFE               	movlw	high STR_42
 13211  00302C  6E0E               	movwf	i2printf@f+1,c
 13212  00302E  EC78  F006         	call	i2_printf	;wreg free
 13213  003032  0012               	return		;funcret
 13214  003034                     __end_of_change_state_to_logs_12:
 13215                           	opt stack 0
 13216                           pclatu	equ	0xFFB
 13217                           pclath	equ	0xFFA
 13218                           tblptru	equ	0xFF8
 13219                           tblptrh	equ	0xFF7
 13220                           tblptrl	equ	0xFF6
 13221                           tablat	equ	0xFF5
 13222                           prodh	equ	0xFF4
 13223                           prodl	equ	0xFF3
 13224                           intcon	equ	0xFF2
 13225                           intcon2	equ	0xFF1
 13226                           intcon3	equ	0xFF0
 13227                           indf0	equ	0xFEF
 13228                           postinc0	equ	0xFEE
 13229                           fsr0h	equ	0xFEA
 13230                           fsr0l	equ	0xFE9
 13231                           wreg	equ	0xFE8
 13232                           postdec1	equ	0xFE5
 13233                           fsr1h	equ	0xFE2
 13234                           fsr1l	equ	0xFE1
 13235                           indf2	equ	0xFDF
 13236                           postinc2	equ	0xFDE
 13237                           postdec2	equ	0xFDD
 13238                           fsr2h	equ	0xFDA
 13239                           fsr2l	equ	0xFD9
 13240                           status	equ	0xFD8
 13241                           
 13242 ;; *************** function _change_state_to_logs_11 *****************
 13243 ;; Defined at:
 13244 ;;		line 512 in file "UI.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;                  1    wreg      void 
 13251 ;; Registers used:
 13252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    3
 13265 ;; This function calls:
 13266 ;;		i2_lcdInst
 13267 ;;		i2_printf
 13268 ;; This function is called by:
 13269 ;;		_updateMenu
 13270 ;;		_inputHandler
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           	psect	text60
 13275  003034                     __ptext60:
 13276                           	opt stack 0
 13277  003034                     _change_state_to_logs_11:
 13278                           	opt stack 18
 13279                           
 13280                           ;UI.c: 513: cur_state = 1011;
 13281                           
 13282                           ;incstack = 0
 13283  003034  0E03               	movlw	3
 13284  003036  0100               	movlb	0	; () banked
 13285  003038  6FDD               	movwf	(_cur_state+1)& (0+255),b
 13286  00303A  0EF3               	movlw	243
 13287  00303C  6FDC               	movwf	_cur_state& (0+255),b
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;UI.c: 514: lcdInst(0b10000000);;
 13291  00303E  0E80               	movlw	128
 13292  003040  EC7B  F019         	call	i2_lcdInst
 13293                           
 13294                           ;UI.c: 515: printf("LOG 1          <");
 13295  003044  0ECF               	movlw	low STR_39
 13296  003046  6E0D               	movwf	i2printf@f,c
 13297  003048  0EFE               	movlw	high STR_39
 13298  00304A  6E0E               	movwf	i2printf@f+1,c
 13299  00304C  EC78  F006         	call	i2_printf	;wreg free
 13300                           
 13301                           ;UI.c: 516: lcdInst(0b11000000);;
 13302  003050  0EC0               	movlw	192
 13303  003052  EC7B  F019         	call	i2_lcdInst
 13304                           
 13305                           ;UI.c: 517: printf("LOG 2           ");
 13306  003056  0E36               	movlw	low STR_40
 13307  003058  6E0D               	movwf	i2printf@f,c
 13308  00305A  0EFE               	movlw	high STR_40
 13309  00305C  6E0E               	movwf	i2printf@f+1,c
 13310  00305E  EC78  F006         	call	i2_printf	;wreg free
 13311  003062  0012               	return		;funcret
 13312  003064                     __end_of_change_state_to_logs_11:
 13313                           	opt stack 0
 13314                           pclatu	equ	0xFFB
 13315                           pclath	equ	0xFFA
 13316                           tblptru	equ	0xFF8
 13317                           tblptrh	equ	0xFF7
 13318                           tblptrl	equ	0xFF6
 13319                           tablat	equ	0xFF5
 13320                           prodh	equ	0xFF4
 13321                           prodl	equ	0xFF3
 13322                           intcon	equ	0xFF2
 13323                           intcon2	equ	0xFF1
 13324                           intcon3	equ	0xFF0
 13325                           indf0	equ	0xFEF
 13326                           postinc0	equ	0xFEE
 13327                           fsr0h	equ	0xFEA
 13328                           fsr0l	equ	0xFE9
 13329                           wreg	equ	0xFE8
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function _dispLogs *****************
 13341 ;; Defined at:
 13342 ;;		line 465 in file "UI.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  myLog           2   17[COMRAM] int 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;		None
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  1    wreg      void 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;Total ram usage:        2 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    2
 13363 ;; This function calls:
 13364 ;;		_retrieveLog
 13365 ;; This function is called by:
 13366 ;;		_updateMenu
 13367 ;; This function uses a non-reentrant model
 13368 ;;
 13369                           
 13370                           	psect	text61
 13371  0031DA                     __ptext61:
 13372                           	opt stack 0
 13373  0031DA                     _dispLogs:
 13374                           	opt stack 20
 13375                           
 13376                           ;UI.c: 466: logstate = 1;
 13377                           
 13378                           ;incstack = 0
 13379  0031DA  0E00               	movlw	0
 13380  0031DC  0100               	movlb	0	; () banked
 13381  0031DE  6FF9               	movwf	(_logstate+1)& (0+255),b
 13382  0031E0  0E01               	movlw	1
 13383  0031E2  6FF8               	movwf	_logstate& (0+255),b
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;UI.c: 467: log = myLog;
 13387  0031E4  C012  F0E8         	movff	dispLogs@myLog,_log
 13388  0031E8  C013  F0E9         	movff	dispLogs@myLog+1,_log+1
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;UI.c: 468: retrieveLog(myLog - 1);
 13392  0031EC  0EFF               	movlw	255
 13393  0031EE  2412               	addwf	dispLogs@myLog,w,c
 13394  0031F0  6E07               	movwf	retrieveLog@logNum,c
 13395  0031F2  0EFF               	movlw	255
 13396  0031F4  2013               	addwfc	dispLogs@myLog+1,w,c
 13397  0031F6  6E08               	movwf	retrieveLog@logNum+1,c
 13398  0031F8  EC75  F010         	call	_retrieveLog	;wreg free
 13399  0031FC  0012               	return		;funcret
 13400  0031FE                     __end_of_dispLogs:
 13401                           	opt stack 0
 13402                           pclatu	equ	0xFFB
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           intcon2	equ	0xFF1
 13412                           intcon3	equ	0xFF0
 13413                           indf0	equ	0xFEF
 13414                           postinc0	equ	0xFEE
 13415                           fsr0h	equ	0xFEA
 13416                           fsr0l	equ	0xFE9
 13417                           wreg	equ	0xFE8
 13418                           postdec1	equ	0xFE5
 13419                           fsr1h	equ	0xFE2
 13420                           fsr1l	equ	0xFE1
 13421                           indf2	equ	0xFDF
 13422                           postinc2	equ	0xFDE
 13423                           postdec2	equ	0xFDD
 13424                           fsr2h	equ	0xFDA
 13425                           fsr2l	equ	0xFD9
 13426                           status	equ	0xFD8
 13427                           
 13428 ;; *************** function _retrieveLog *****************
 13429 ;; Defined at:
 13430 ;;		line 134 in file "EEPROM.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;  logNum          2    6[COMRAM] int 
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;  i               2   13[COMRAM] int 
 13435 ;;  addr            2   15[COMRAM] unsigned short 
 13436 ;;  byte3           1   12[COMRAM] unsigned char 
 13437 ;;  byte2           1   11[COMRAM] unsigned char 
 13438 ;;  byte1           1   10[COMRAM] unsigned char 
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13448 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13449 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;Total ram usage:       11 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    1
 13455 ;; This function calls:
 13456 ;;		i2_EEPROM_read
 13457 ;;		i2___wmul
 13458 ;; This function is called by:
 13459 ;;		_dispLogs
 13460 ;; This function uses a non-reentrant model
 13461 ;;
 13462                           
 13463                           	psect	text62
 13464  0020EA                     __ptext62:
 13465                           	opt stack 0
 13466  0020EA                     _retrieveLog:
 13467                           	opt stack 20
 13468                           
 13469                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 13470                           
 13471                           ;incstack = 0
 13472  0020EA  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 13473  0020EE  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 13474  0020F2  0E00               	movlw	0
 13475  0020F4  6E04               	movwf	i2___wmul@multiplicand+1,c
 13476  0020F6  0E0B               	movlw	11
 13477  0020F8  6E03               	movwf	i2___wmul@multiplicand,c
 13478  0020FA  ECB5  F018         	call	i2___wmul	;wreg free
 13479  0020FE  0E01               	movlw	1
 13480  002100  2401               	addwf	?i2___wmul,w,c
 13481  002102  6E10               	movwf	retrieveLog@addr,c
 13482  002104  0E00               	movlw	0
 13483  002106  2002               	addwfc	?i2___wmul+1,w,c
 13484  002108  6E11               	movwf	retrieveLog@addr+1,c
 13485                           
 13486                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 13487  00210A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13488  00210E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13489  002112  EC47  F019         	call	i2_EEPROM_read	;wreg free
 13490  002116  6E0B               	movwf	retrieveLog@byte1,c
 13491                           
 13492                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 13493  002118  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13494  00211C  0E80               	movlw	128
 13495  00211E  1609               	andwf	??_retrieveLog,f,c
 13496  002120  5009               	movf	??_retrieveLog,w,c
 13497  002122  0100               	movlb	0	; () banked
 13498  002124  6FEA               	movwf	_log_completion& (0+255),b
 13499  002126  6BEB               	clrf	(_log_completion+1)& (0+255),b
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 13503  002128  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 13504  00212C  0E0F               	movlw	15
 13505  00212E  1609               	andwf	??_retrieveLog,f,c
 13506  002130  5009               	movf	??_retrieveLog,w,c
 13507  002132  0100               	movlb	0	; () banked
 13508  002134  6FF4               	movwf	_log_count_total& (0+255),b
 13509  002136  6BF5               	clrf	(_log_count_total+1)& (0+255),b
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;EEPROM.c: 146: addr++;
 13513  002138  4A10               	infsnz	retrieveLog@addr,f,c
 13514  00213A  2A11               	incf	retrieveLog@addr+1,f,c
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 13518  00213C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13519  002140  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13520  002144  EC47  F019         	call	i2_EEPROM_read	;wreg free
 13521  002148  6E0C               	movwf	retrieveLog@byte2,c
 13522                           
 13523                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 13524  00214A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13525  00214E  0EF0               	movlw	240
 13526  002150  1609               	andwf	??_retrieveLog,f,c
 13527  002152  5009               	movf	??_retrieveLog,w,c
 13528  002154  0100               	movlb	0	; () banked
 13529  002156  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 13530  002158  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 13534  00215A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 13535  00215E  0E0F               	movlw	15
 13536  002160  1609               	andwf	??_retrieveLog,f,c
 13537  002162  5009               	movf	??_retrieveLog,w,c
 13538  002164  0100               	movlb	0	; () banked
 13539  002166  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 13540  002168  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;EEPROM.c: 152: addr++;
 13544  00216A  4A10               	infsnz	retrieveLog@addr,f,c
 13545  00216C  2A11               	incf	retrieveLog@addr+1,f,c
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 13549  00216E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13550  002172  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13551  002176  EC47  F019         	call	i2_EEPROM_read	;wreg free
 13552  00217A  6E0D               	movwf	retrieveLog@byte3,c
 13553                           
 13554                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 13555  00217C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13556  002180  0EF0               	movlw	240
 13557  002182  1609               	andwf	??_retrieveLog,f,c
 13558  002184  5009               	movf	??_retrieveLog,w,c
 13559  002186  0100               	movlb	0	; () banked
 13560  002188  6FEE               	movwf	_log_count_can_w_lab& (0+255),b
 13561  00218A  6BEF               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 13565  00218C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 13566  002190  0E0F               	movlw	15
 13567  002192  1609               	andwf	??_retrieveLog,f,c
 13568  002194  5009               	movf	??_retrieveLog,w,c
 13569  002196  0100               	movlb	0	; () banked
 13570  002198  6FEC               	movwf	_log_count_can_no_lab& (0+255),b
 13571  00219A  6BED               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;EEPROM.c: 156: addr++;
 13575  00219C  4A10               	infsnz	retrieveLog@addr,f,c
 13576  00219E  2A11               	incf	retrieveLog@addr+1,f,c
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 13580  0021A0  0E00               	movlw	0
 13581  0021A2  6E0F               	movwf	retrieveLog@i+1,c
 13582  0021A4  0E00               	movlw	0
 13583  0021A6  6E0E               	movwf	retrieveLog@i,c
 13584  0021A8                     i2l4804:
 13585                           
 13586                           ; BSR set to: 0
 13587  0021A8  BE0F               	btfsc	retrieveLog@i+1,7,c
 13588  0021AA  D006               	goto	i2l4808
 13589  0021AC  500F               	movf	retrieveLog@i+1,w,c
 13590  0021AE  E11E               	bnz	i2l4816
 13591  0021B0  0E07               	movlw	7
 13592  0021B2  5C0E               	subwf	retrieveLog@i,w,c
 13593  0021B4  B0D8               	btfsc	status,0,c
 13594  0021B6  D01A               	goto	i2l4816
 13595  0021B8                     i2l4808:
 13596                           
 13597                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 13598  0021B8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13599  0021BC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13600  0021C0  EC47  F019         	call	i2_EEPROM_read	;wreg free
 13601  0021C4  6E09               	movwf	??_retrieveLog& (0+255),c
 13602  0021C6  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 13603  0021C8  90D8               	bcf	status,0,c
 13604  0021CA  340E               	rlcf	retrieveLog@i,w,c
 13605  0021CC  6ED9               	movwf	fsr2l,c
 13606  0021CE  340F               	rlcf	retrieveLog@i+1,w,c
 13607  0021D0  6EDA               	movwf	fsr2h,c
 13608  0021D2  0E00               	movlw	low _log_startTime
 13609  0021D4  26D9               	addwf	fsr2l,f,c
 13610  0021D6  0E01               	movlw	high _log_startTime
 13611  0021D8  22DA               	addwfc	fsr2h,f,c
 13612  0021DA  C009  FFDE         	movff	??_retrieveLog,postinc2
 13613  0021DE  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 13614                           
 13615                           ;EEPROM.c: 161: addr++;
 13616  0021E2  4A10               	infsnz	retrieveLog@addr,f,c
 13617  0021E4  2A11               	incf	retrieveLog@addr+1,f,c
 13618  0021E6  4A0E               	infsnz	retrieveLog@i,f,c
 13619  0021E8  2A0F               	incf	retrieveLog@i+1,f,c
 13620  0021EA  D7DE               	goto	i2l4804
 13621  0021EC                     i2l4816:
 13622                           
 13623                           ;EEPROM.c: 162: }
 13624                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 13625  0021EC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 13626  0021F0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 13627  0021F4  EC47  F019         	call	i2_EEPROM_read	;wreg free
 13628  0021F8  6E09               	movwf	??_retrieveLog& (0+255),c
 13629  0021FA  5009               	movf	??_retrieveLog,w,c
 13630  0021FC  0100               	movlb	0	; () banked
 13631  0021FE  6FF6               	movwf	_log_total_time& (0+255),b
 13632  002200  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 13633                           
 13634                           ; BSR set to: 0
 13635  002202  0012               	return		;funcret
 13636  002204                     __end_of_retrieveLog:
 13637                           	opt stack 0
 13638                           pclatu	equ	0xFFB
 13639                           pclath	equ	0xFFA
 13640                           tblptru	equ	0xFF8
 13641                           tblptrh	equ	0xFF7
 13642                           tblptrl	equ	0xFF6
 13643                           tablat	equ	0xFF5
 13644                           prodh	equ	0xFF4
 13645                           prodl	equ	0xFF3
 13646                           intcon	equ	0xFF2
 13647                           intcon2	equ	0xFF1
 13648                           intcon3	equ	0xFF0
 13649                           indf0	equ	0xFEF
 13650                           postinc0	equ	0xFEE
 13651                           fsr0h	equ	0xFEA
 13652                           fsr0l	equ	0xFE9
 13653                           wreg	equ	0xFE8
 13654                           postdec1	equ	0xFE5
 13655                           fsr1h	equ	0xFE2
 13656                           fsr1l	equ	0xFE1
 13657                           indf2	equ	0xFDF
 13658                           postinc2	equ	0xFDE
 13659                           postdec2	equ	0xFDD
 13660                           fsr2h	equ	0xFDA
 13661                           fsr2l	equ	0xFD9
 13662                           status	equ	0xFD8
 13663                           
 13664 ;; *************** function i2_EEPROM_read *****************
 13665 ;; Defined at:
 13666 ;;		line 68 in file "EEPROM.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  address         2    0[COMRAM] unsigned short 
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;		None
 13671 ;; Return value:  Size  Location     Type
 13672 ;;                  1    wreg      unsigned char 
 13673 ;; Registers used:
 13674 ;;		wreg, status,2
 13675 ;; Tracked objects:
 13676 ;;		On entry : 0/0
 13677 ;;		On exit  : 0/0
 13678 ;;		Unchanged: 0/0
 13679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13680 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;Total ram usage:        2 bytes
 13685 ;; Hardware stack levels used:    1
 13686 ;; This function calls:
 13687 ;;		Nothing
 13688 ;; This function is called by:
 13689 ;;		_retrieveLog
 13690 ;; This function uses a non-reentrant model
 13691 ;;
 13692                           
 13693                           	psect	text63
 13694  00328E                     __ptext63:
 13695                           	opt stack 0
 13696  00328E                     i2_EEPROM_read:
 13697                           	opt stack 20
 13698                           
 13699                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;incstack = 0
 13703  00328E  5002               	movf	i2EEPROM_read@address+1,w,c
 13704  003290  6EAA               	movwf	4010,c	;volatile
 13705                           
 13706                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 13707  003292  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 13708                           
 13709                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 13710  003296  9EA6               	bcf	4006,7,c	;volatile
 13711                           
 13712                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 13713  003298  9CA6               	bcf	4006,6,c	;volatile
 13714                           
 13715                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 13716  00329A  80A6               	bsf	4006,0,c	;volatile
 13717  00329C                     i2l915:
 13718  00329C  B0A6               	btfsc	4006,0,c	;volatile
 13719  00329E  D7FE               	goto	i2l915
 13720                           
 13721                           ;EEPROM.c: 81: return EEDATA;
 13722  0032A0  50A8               	movf	4008,w,c	;volatile
 13723  0032A2  0012               	return	
 13724  0032A4                     __end_ofi2_EEPROM_read:
 13725                           	opt stack 0
 13726                           pclatu	equ	0xFFB
 13727                           pclath	equ	0xFFA
 13728                           tblptru	equ	0xFF8
 13729                           tblptrh	equ	0xFF7
 13730                           tblptrl	equ	0xFF6
 13731                           tablat	equ	0xFF5
 13732                           prodh	equ	0xFF4
 13733                           prodl	equ	0xFF3
 13734                           intcon	equ	0xFF2
 13735                           intcon2	equ	0xFF1
 13736                           intcon3	equ	0xFF0
 13737                           indf0	equ	0xFEF
 13738                           postinc0	equ	0xFEE
 13739                           fsr0h	equ	0xFEA
 13740                           fsr0l	equ	0xFE9
 13741                           wreg	equ	0xFE8
 13742                           postdec1	equ	0xFE5
 13743                           fsr1h	equ	0xFE2
 13744                           fsr1l	equ	0xFE1
 13745                           indf2	equ	0xFDF
 13746                           postinc2	equ	0xFDE
 13747                           postdec2	equ	0xFDD
 13748                           fsr2h	equ	0xFDA
 13749                           fsr2l	equ	0xFD9
 13750                           status	equ	0xFD8
 13751                           
 13752 ;; *************** function _printSortTimer *****************
 13753 ;; Defined at:
 13754 ;;		line 253 in file "sort.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;		None
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;  i               2   72[COMRAM] int 
 13759 ;;  curTime        14   46[COMRAM] int [7]
 13760 ;;  timeDiff        2   70[COMRAM] unsigned int 
 13761 ;;  sec             2   66[COMRAM] int 
 13762 ;;  min             2   64[COMRAM] int 
 13763 ;;  cur_sec         2   62[COMRAM] unsigned int 
 13764 ;;  start_sec       2   60[COMRAM] unsigned int 
 13765 ;;  hour            2   44[COMRAM] int 
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  1    wreg      void 
 13768 ;; Registers used:
 13769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;Total ram usage:       33 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; Hardware stack levels required when called:    3
 13782 ;; This function calls:
 13783 ;;		i2___lwdiv
 13784 ;;		i2___lwmod
 13785 ;;		i2___wmul
 13786 ;;		i2_getRTC
 13787 ;;		i2_lcdInst
 13788 ;;		i2_printf
 13789 ;; This function is called by:
 13790 ;;		_handler
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           	psect	text64
 13795  00181E                     __ptext64:
 13796                           	opt stack 0
 13797  00181E                     _printSortTimer:
 13798                           	opt stack 20
 13799                           
 13800                           ;sort.c: 254: getRTC();
 13801                           
 13802                           ;incstack = 0
 13803  00181E  ECD0  F014         	call	i2_getRTC	;wreg free
 13804                           
 13805                           ;sort.c: 255: int curTime[7];
 13806                           ;sort.c: 256: for(int i = 0; i < 7; i++){
 13807  001822  0E00               	movlw	0
 13808  001824  6E4A               	movwf	printSortTimer@i+1,c
 13809  001826  0E00               	movlw	0
 13810  001828  6E49               	movwf	printSortTimer@i,c
 13811  00182A                     i2l6046:
 13812  00182A  BE4A               	btfsc	printSortTimer@i+1,7,c
 13813  00182C  D006               	goto	i2l6050
 13814  00182E  504A               	movf	printSortTimer@i+1,w,c
 13815  001830  E131               	bnz	i2l6056
 13816  001832  0E07               	movlw	7
 13817  001834  5C49               	subwf	printSortTimer@i,w,c
 13818  001836  B0D8               	btfsc	status,0,c
 13819  001838  D02D               	goto	i2l6056
 13820  00183A                     i2l6050:
 13821                           
 13822                           ;sort.c: 257: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 13823  00183A  0E5B               	movlw	low _time
 13824  00183C  2449               	addwf	printSortTimer@i,w,c
 13825  00183E  6ED9               	movwf	fsr2l,c
 13826  001840  0E00               	movlw	high _time
 13827  001842  204A               	addwfc	printSortTimer@i+1,w,c
 13828  001844  6EDA               	movwf	fsr2h,c
 13829  001846  50DF               	movf	indf2,w,c
 13830  001848  6E2A               	movwf	??_printSortTimer& (0+255),c
 13831  00184A  3A2A               	swapf	??_printSortTimer,f,c
 13832  00184C  0E0F               	movlw	15
 13833  00184E  162A               	andwf	??_printSortTimer,f,c
 13834  001850  0E0F               	movlw	15
 13835  001852  162A               	andwf	??_printSortTimer,f,c
 13836  001854  502A               	movf	??_printSortTimer,w,c
 13837  001856  0D0A               	mullw	10
 13838  001858  0E5B               	movlw	low _time
 13839  00185A  2449               	addwf	printSortTimer@i,w,c
 13840  00185C  6ED9               	movwf	fsr2l,c
 13841  00185E  0E00               	movlw	high _time
 13842  001860  204A               	addwfc	printSortTimer@i+1,w,c
 13843  001862  6EDA               	movwf	fsr2h,c
 13844  001864  50DF               	movf	indf2,w,c
 13845  001866  0B0F               	andlw	15
 13846  001868  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 13847  00186A  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 13848  00186C  50F3               	movf	prodl,w,c
 13849  00186E  262B               	addwf	??_printSortTimer+1,f,c
 13850  001870  50F4               	movf	prodh,w,c
 13851  001872  222C               	addwfc	??_printSortTimer+2,f,c
 13852  001874  90D8               	bcf	status,0,c
 13853  001876  3449               	rlcf	printSortTimer@i,w,c
 13854  001878  6ED9               	movwf	fsr2l,c
 13855  00187A  344A               	rlcf	printSortTimer@i+1,w,c
 13856  00187C  6EDA               	movwf	fsr2h,c
 13857  00187E  0E2F               	movlw	low printSortTimer@curTime
 13858  001880  26D9               	addwf	fsr2l,f,c
 13859  001882  0E00               	movlw	high printSortTimer@curTime
 13860  001884  22DA               	addwfc	fsr2h,f,c
 13861  001886  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 13862  00188A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 13863  00188E  4A49               	infsnz	printSortTimer@i,f,c
 13864  001890  2A4A               	incf	printSortTimer@i+1,f,c
 13865  001892  D7CB               	goto	i2l6046
 13866  001894                     i2l6056:
 13867                           
 13868                           ;sort.c: 258: }
 13869                           ;sort.c: 259: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 13870  001894  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 13871  001898  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 13872  00189C  0E00               	movlw	0
 13873  00189E  6E04               	movwf	i2___wmul@multiplicand+1,c
 13874  0018A0  0E3C               	movlw	60
 13875  0018A2  6E03               	movwf	i2___wmul@multiplicand,c
 13876  0018A4  ECB5  F018         	call	i2___wmul	;wreg free
 13877  0018A8  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13878  0018AC  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13879  0018B0  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 13880  0018B4  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 13881  0018B8  0E0E               	movlw	14
 13882  0018BA  6E04               	movwf	i2___wmul@multiplicand+1,c
 13883  0018BC  0E10               	movlw	16
 13884  0018BE  6E03               	movwf	i2___wmul@multiplicand,c
 13885  0018C0  ECB5  F018         	call	i2___wmul	;wreg free
 13886  0018C4  5001               	movf	?i2___wmul,w,c
 13887  0018C6  262A               	addwf	??_printSortTimer,f,c
 13888  0018C8  5002               	movf	?i2___wmul+1,w,c
 13889  0018CA  222B               	addwfc	??_printSortTimer+1,f,c
 13890  0018CC  0101               	movlb	1	; () banked
 13891  0018CE  510E               	movf	_startTime& (0+255),w,b
 13892  0018D0  242A               	addwf	??_printSortTimer,w,c
 13893  0018D2  6E3D               	movwf	printSortTimer@start_sec,c
 13894  0018D4  0101               	movlb	1	; () banked
 13895  0018D6  510F               	movf	(_startTime+1)& (0+255),w,b
 13896  0018D8  202B               	addwfc	??_printSortTimer+1,w,c
 13897  0018DA  6E3E               	movwf	printSortTimer@start_sec+1,c
 13898                           
 13899                           ;sort.c: 260: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 13900  0018DC  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 13901  0018E0  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 13902  0018E4  0E00               	movlw	0
 13903  0018E6  6E04               	movwf	i2___wmul@multiplicand+1,c
 13904  0018E8  0E3C               	movlw	60
 13905  0018EA  6E03               	movwf	i2___wmul@multiplicand,c
 13906  0018EC  ECB5  F018         	call	i2___wmul	;wreg free
 13907  0018F0  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 13908  0018F4  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 13909  0018F8  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 13910  0018FC  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 13911  001900  0E0E               	movlw	14
 13912  001902  6E04               	movwf	i2___wmul@multiplicand+1,c
 13913  001904  0E10               	movlw	16
 13914  001906  6E03               	movwf	i2___wmul@multiplicand,c
 13915  001908  ECB5  F018         	call	i2___wmul	;wreg free
 13916  00190C  5001               	movf	?i2___wmul,w,c
 13917  00190E  262A               	addwf	??_printSortTimer,f,c
 13918  001910  5002               	movf	?i2___wmul+1,w,c
 13919  001912  222B               	addwfc	??_printSortTimer+1,f,c
 13920  001914  502F               	movf	printSortTimer@curTime,w,c
 13921  001916  242A               	addwf	??_printSortTimer,w,c
 13922  001918  6E3F               	movwf	printSortTimer@cur_sec,c
 13923  00191A  5030               	movf	printSortTimer@curTime+1,w,c
 13924  00191C  202B               	addwfc	??_printSortTimer+1,w,c
 13925  00191E  6E40               	movwf	printSortTimer@cur_sec+1,c
 13926                           
 13927                           ;sort.c: 261: unsigned int timeDiff = cur_sec - start_sec;
 13928  001920  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 13929  001924  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 13930  001928  1E2A               	comf	??_printSortTimer,f,c
 13931  00192A  1E2B               	comf	??_printSortTimer+1,f,c
 13932  00192C  4A2A               	infsnz	??_printSortTimer,f,c
 13933  00192E  2A2B               	incf	??_printSortTimer+1,f,c
 13934  001930  503F               	movf	printSortTimer@cur_sec,w,c
 13935  001932  242A               	addwf	??_printSortTimer,w,c
 13936  001934  6E47               	movwf	printSortTimer@timeDiff,c
 13937  001936  5040               	movf	printSortTimer@cur_sec+1,w,c
 13938  001938  202B               	addwfc	??_printSortTimer+1,w,c
 13939  00193A  6E48               	movwf	printSortTimer@timeDiff+1,c
 13940                           
 13941                           ;sort.c: 263: total_time = timeDiff;
 13942  00193C  C047  F0FA         	movff	printSortTimer@timeDiff,_total_time
 13943  001940  C048  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 13944                           
 13945                           ;sort.c: 265: if(timeDiff >= 10){
 13946  001944  5048               	movf	printSortTimer@timeDiff+1,w,c
 13947  001946  E104               	bnz	i2u500_40
 13948  001948  0E0A               	movlw	10
 13949  00194A  5C47               	subwf	printSortTimer@timeDiff,w,c
 13950  00194C  A0D8               	btfss	status,0,c
 13951  00194E  D003               	goto	i2l6066
 13952  001950                     i2u500_40:
 13953                           
 13954                           ;sort.c: 266: machine_state = DoneSorting_state;
 13955  001950  0E02               	movlw	2
 13956  001952  0100               	movlb	0	; () banked
 13957  001954  6FFC               	movwf	_machine_state& (0+255),b
 13958  001956                     i2l6066:
 13959                           
 13960                           ;sort.c: 268: }
 13961                           ;sort.c: 270: int hour = timeDiff / 3600;
 13962  001956  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 13963  00195A  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 13964  00195E  0E0E               	movlw	14
 13965  001960  6E09               	movwf	i2___lwdiv@divisor+1,c
 13966  001962  0E10               	movlw	16
 13967  001964  6E08               	movwf	i2___lwdiv@divisor,c
 13968  001966  ECF5  F015         	call	i2___lwdiv	;wreg free
 13969  00196A  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 13970  00196E  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 13971                           
 13972                           ;sort.c: 271: int min = (timeDiff % 3600) / 60;
 13973  001972  0E0E               	movlw	14
 13974  001974  6E04               	movwf	i2___lwmod@divisor+1,c
 13975  001976  0E10               	movlw	16
 13976  001978  6E03               	movwf	i2___lwmod@divisor,c
 13977  00197A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13978  00197E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13979  001982  ECB2  F016         	call	i2___lwmod	;wreg free
 13980  001986  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 13981  00198A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 13982  00198E  0E00               	movlw	0
 13983  001990  6E09               	movwf	i2___lwdiv@divisor+1,c
 13984  001992  0E3C               	movlw	60
 13985  001994  6E08               	movwf	i2___lwdiv@divisor,c
 13986  001996  ECF5  F015         	call	i2___lwdiv	;wreg free
 13987  00199A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 13988  00199E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 13989                           
 13990                           ;sort.c: 272: int sec = (timeDiff % 3600) % 60;
 13991  0019A2  0E0E               	movlw	14
 13992  0019A4  6E04               	movwf	i2___lwmod@divisor+1,c
 13993  0019A6  0E10               	movlw	16
 13994  0019A8  6E03               	movwf	i2___lwmod@divisor,c
 13995  0019AA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 13996  0019AE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 13997  0019B2  ECB2  F016         	call	i2___lwmod	;wreg free
 13998  0019B6  C001  F045         	movff	?i2___lwmod,_printSortTimer$2124
 13999  0019BA  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2124+1
 14000                           
 14001                           ;sort.c: 272: int sec = (timeDiff % 3600) % 60;
 14002  0019BE  C045  F001         	movff	_printSortTimer$2124,i2___lwmod@dividend
 14003  0019C2  C046  F002         	movff	_printSortTimer$2124+1,i2___lwmod@dividend+1
 14004  0019C6  0E00               	movlw	0
 14005  0019C8  6E04               	movwf	i2___lwmod@divisor+1,c
 14006  0019CA  0E3C               	movlw	60
 14007  0019CC  6E03               	movwf	i2___lwmod@divisor,c
 14008  0019CE  ECB2  F016         	call	i2___lwmod	;wreg free
 14009  0019D2  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 14010  0019D6  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 14011                           
 14012                           ;sort.c: 274: lcdInst(0b10000000);;
 14013  0019DA  0E80               	movlw	128
 14014  0019DC  EC7B  F019         	call	i2_lcdInst
 14015                           
 14016                           ;sort.c: 275: printf("SORTING...");
 14017  0019E0  0EA1               	movlw	low STR_64
 14018  0019E2  6E0D               	movwf	i2printf@f,c
 14019  0019E4  0EFF               	movlw	high STR_64
 14020  0019E6  6E0E               	movwf	i2printf@f+1,c
 14021  0019E8  EC78  F006         	call	i2_printf	;wreg free
 14022                           
 14023                           ;sort.c: 276: lcdInst(0b11000000);;
 14024  0019EC  0EC0               	movlw	192
 14025  0019EE  EC7B  F019         	call	i2_lcdInst
 14026                           
 14027                           ;sort.c: 277: printf("TIME %d:%02d", min, sec);
 14028  0019F2  0E94               	movlw	low STR_65
 14029  0019F4  6E0D               	movwf	i2printf@f,c
 14030  0019F6  0EFF               	movlw	high STR_65
 14031  0019F8  6E0E               	movwf	i2printf@f+1,c
 14032  0019FA  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 14033  0019FE  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 14034  001A02  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 14035  001A06  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 14036  001A0A  EC78  F006         	call	i2_printf	;wreg free
 14037  001A0E  0012               	return		;funcret
 14038  001A10                     __end_of_printSortTimer:
 14039                           	opt stack 0
 14040                           pclatu	equ	0xFFB
 14041                           pclath	equ	0xFFA
 14042                           tblptru	equ	0xFF8
 14043                           tblptrh	equ	0xFF7
 14044                           tblptrl	equ	0xFF6
 14045                           tablat	equ	0xFF5
 14046                           prodh	equ	0xFF4
 14047                           prodl	equ	0xFF3
 14048                           intcon	equ	0xFF2
 14049                           intcon2	equ	0xFF1
 14050                           intcon3	equ	0xFF0
 14051                           indf0	equ	0xFEF
 14052                           postinc0	equ	0xFEE
 14053                           fsr0h	equ	0xFEA
 14054                           fsr0l	equ	0xFE9
 14055                           wreg	equ	0xFE8
 14056                           postdec1	equ	0xFE5
 14057                           fsr1h	equ	0xFE2
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           fsr2h	equ	0xFDA
 14063                           fsr2l	equ	0xFD9
 14064                           status	equ	0xFD8
 14065                           
 14066 ;; *************** function i2_printf *****************
 14067 ;; Defined at:
 14068 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;  f               2   12[COMRAM] PTR const unsigned char 
 14071 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14072 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14073 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14074 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14075 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14076 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14077 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14078 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 14079 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14080 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14081 ;;		 -> STR_2(14), STR_1(18), 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  printf          4    0        struct .
 14084 ;;  printf          2   39[COMRAM] int 
 14085 ;;  printf          2   35[COMRAM] unsigned int 
 14086 ;;  printf          2   33[COMRAM] unsigned int 
 14087 ;;  printf          2   31[COMRAM] PTR void [1]
 14088 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14089 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 14090 ;;		 -> STR_68(7), count_total(2), printRTC@month(4), UI@month(4), 
 14091 ;;  printf          1   38[COMRAM] char 
 14092 ;;  printf          1   37[COMRAM] unsigned char 
 14093 ;;  printf          1   28[COMRAM] char 
 14094 ;; Return value:  Size  Location     Type
 14095 ;;                  2   12[COMRAM] int 
 14096 ;; Registers used:
 14097 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14098 ;; Tracked objects:
 14099 ;;		On entry : 0/0
 14100 ;;		On exit  : 0/0
 14101 ;;		Unchanged: 0/0
 14102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14103 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14106 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14107 ;;Total ram usage:       29 bytes
 14108 ;; Hardware stack levels used:    1
 14109 ;; Hardware stack levels required when called:    2
 14110 ;; This function calls:
 14111 ;;		i2___lwdiv
 14112 ;;		i2___lwmod
 14113 ;;		i2___wmul
 14114 ;;		i2_isdigit
 14115 ;;		i2_putch
 14116 ;; This function is called by:
 14117 ;;		_change_state_to_menu_11
 14118 ;;		_change_state_to_menu_23
 14119 ;;		_change_state_to_logs_11
 14120 ;;		_change_state_to_logs_12
 14121 ;;		_change_state_to_logs_22
 14122 ;;		_change_state_to_logs_23
 14123 ;;		_change_state_to_logs_33
 14124 ;;		_change_state_to_logs_34
 14125 ;;		_printSortTimer
 14126 ;;		i2_change_state_to_menu_start
 14127 ;;		i2_change_state_to_menu_12
 14128 ;;		i2_change_state_to_menu_22
 14129 ;;		i2_printRTC
 14130 ;; This function uses a non-reentrant model
 14131 ;;
 14132                           
 14133                           	psect	text65
 14134  000CF0                     __ptext65:
 14135                           	opt stack 0
 14136  000CF0                     i2_printf:
 14137                           	opt stack 19
 14138                           
 14139                           ;doprnt.c: 466: va_list ap;
 14140                           ;doprnt.c: 499: signed char c;
 14141                           ;doprnt.c: 501: int width;
 14142                           ;doprnt.c: 506: signed char prec;
 14143                           ;doprnt.c: 508: unsigned char flag;
 14144                           ;doprnt.c: 523: union {
 14145                           ;doprnt.c: 524: unsigned long vd;
 14146                           ;doprnt.c: 525: double integ;
 14147                           ;doprnt.c: 526: } tmpval;
 14148                           ;doprnt.c: 528: unsigned int val;
 14149                           ;doprnt.c: 529: unsigned len;
 14150                           ;doprnt.c: 530: const char * cp;
 14151                           ;doprnt.c: 533: *ap = __va_start();
 14152                           
 14153                           ;incstack = 0
 14154  000CF0  0E0F               	movlw	low (?i2_printf+2)
 14155  000CF2  6E20               	movwf	i2printf@ap,c
 14156  000CF4  0E00               	movlw	high (?i2_printf+2)
 14157  000CF6  6E21               	movwf	i2printf@ap+1,c
 14158                           
 14159                           ;doprnt.c: 536: while(c = *f++) {
 14160  000CF8  D1A4               	goto	i2l4622
 14161  000CFA                     i2l4492:
 14162                           
 14163                           ;doprnt.c: 538: if(c != '%')
 14164  000CFA  0E25               	movlw	37
 14165  000CFC  1827               	xorwf	i2printf@c,w,c
 14166  000CFE  B4D8               	btfsc	status,2,c
 14167  000D00  D004               	goto	i2l4496
 14168                           
 14169                           ;doprnt.c: 540: {
 14170                           ;doprnt.c: 541: (putch(c) );
 14171  000D02  5027               	movf	i2printf@c,w,c
 14172  000D04  EC75  F019         	call	i2_putch
 14173                           
 14174                           ;doprnt.c: 542: continue;
 14175  000D08  D19C               	goto	i2l4622
 14176  000D0A                     i2l4496:
 14177                           
 14178                           ;doprnt.c: 543: }
 14179                           ;doprnt.c: 546: width = 0;
 14180  000D0A  0E00               	movlw	0
 14181  000D0C  6E29               	movwf	i2printf@width+1,c
 14182  000D0E  0E00               	movlw	0
 14183  000D10  6E28               	movwf	i2printf@width,c
 14184                           
 14185                           ;doprnt.c: 548: flag = 0;
 14186  000D12  0E00               	movlw	0
 14187  000D14  6E26               	movwf	i2printf@flag,c
 14188                           
 14189                           ;doprnt.c: 551: switch(*f) {
 14190                           
 14191                           ;doprnt.c: 550: for(;;) {
 14192  000D16  D003               	goto	i2l4502
 14193  000D18                     i2l4498:
 14194                           
 14195                           ;doprnt.c: 580: flag |= 0x04;
 14196  000D18  8426               	bsf	i2printf@flag,2,c
 14197                           
 14198                           ;doprnt.c: 581: f++;
 14199  000D1A  4A0D               	infsnz	i2printf@f,f,c
 14200  000D1C  2A0E               	incf	i2printf@f+1,f,c
 14201  000D1E                     i2l4502:
 14202  000D1E  C00D  FFF6         	movff	i2printf@f,tblptrl
 14203  000D22  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14204  000D26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14205  000D26  6AF8               	clrf	tblptru,c
 14206  000D28                     	endif
 14207  000D28                     	if	0	;tblptru may be non-zero
 14208  000D28                     	endif
 14209  000D28  0008               	tblrd		*
 14210  000D2A  50F5               	movf	tablat,w,c
 14211                           
 14212                           ; Switch size 1, requested type "space"
 14213                           ; Number of cases is 1, Range of values is 48 to 48
 14214                           ; switch strategies available:
 14215                           ; Name         Instructions Cycles
 14216                           ; simple_byte            4     3 (average)
 14217                           ;	Chosen strategy is simple_byte
 14218  000D2C  0A30               	xorlw	48	; case 48
 14219  000D2E  B4D8               	btfsc	status,2,c
 14220  000D30  D7F3               	goto	i2l4498
 14221                           
 14222                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14223                           
 14224                           ;doprnt.c: 586: }
 14225                           
 14226                           ;doprnt.c: 585: break;
 14227  000D32  C00D  FFF6         	movff	i2printf@f,tblptrl
 14228  000D36  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14229  000D3A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14230  000D3A  6AF8               	clrf	tblptru,c
 14231  000D3C                     	endif
 14232  000D3C                     	if	0	;tblptru may be non-zero
 14233  000D3C                     	endif
 14234  000D3C  0008               	tblrd		*
 14235  000D3E  50F5               	movf	tablat,w,c
 14236  000D40  EC21  F019         	call	i2_isdigit
 14237  000D44  A0D8               	btfss	status,0,c
 14238  000D46  D0A6               	goto	i2l4550
 14239                           
 14240                           ;doprnt.c: 598: width = 0;
 14241  000D48  0E00               	movlw	0
 14242  000D4A  6E29               	movwf	i2printf@width+1,c
 14243  000D4C  0E00               	movlw	0
 14244  000D4E  6E28               	movwf	i2printf@width,c
 14245  000D50                     i2l4508:
 14246                           
 14247                           ;doprnt.c: 600: width *= 10;
 14248  000D50  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 14249  000D54  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14250  000D58  0E00               	movlw	0
 14251  000D5A  6E04               	movwf	i2___wmul@multiplicand+1,c
 14252  000D5C  0E0A               	movlw	10
 14253  000D5E  6E03               	movwf	i2___wmul@multiplicand,c
 14254  000D60  ECB5  F018         	call	i2___wmul	;wreg free
 14255  000D64  C001  F028         	movff	?i2___wmul,i2printf@width
 14256  000D68  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 14257                           
 14258                           ;doprnt.c: 601: width += *f++ - '0';
 14259  000D6C  0ED0               	movlw	208
 14260  000D6E  6E19               	movwf	??i2_printf& (0+255),c
 14261  000D70  0EFF               	movlw	255
 14262  000D72  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14263  000D74  C00D  FFF6         	movff	i2printf@f,tblptrl
 14264  000D78  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14265  000D7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14266  000D7C  6AF8               	clrf	tblptru,c
 14267  000D7E                     	endif
 14268  000D7E                     	if	0	;tblptru may be non-zero
 14269  000D7E                     	endif
 14270  000D7E  0008               	tblrd		*
 14271  000D80  50F5               	movf	tablat,w,c
 14272  000D82  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 14273  000D84  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 14274  000D86  5019               	movf	??i2_printf,w,c
 14275  000D88  261B               	addwf	??i2_printf+2,f,c
 14276  000D8A  501A               	movf	??i2_printf+1,w,c
 14277  000D8C  221C               	addwfc	??i2_printf+3,f,c
 14278  000D8E  501B               	movf	??i2_printf+2,w,c
 14279  000D90  2628               	addwf	i2printf@width,f,c
 14280  000D92  501C               	movf	??i2_printf+3,w,c
 14281  000D94  2229               	addwfc	i2printf@width+1,f,c
 14282  000D96  4A0D               	infsnz	i2printf@f,f,c
 14283  000D98  2A0E               	incf	i2printf@f+1,f,c
 14284                           
 14285                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14286  000D9A  C00D  FFF6         	movff	i2printf@f,tblptrl
 14287  000D9E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14288  000DA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14289  000DA2  6AF8               	clrf	tblptru,c
 14290  000DA4                     	endif
 14291  000DA4                     	if	0	;tblptru may be non-zero
 14292  000DA4                     	endif
 14293  000DA4  0008               	tblrd		*
 14294  000DA6  50F5               	movf	tablat,w,c
 14295  000DA8  EC21  F019         	call	i2_isdigit
 14296  000DAC  A0D8               	btfss	status,0,c
 14297  000DAE  D072               	goto	i2l4550
 14298  000DB0  D7CF               	goto	i2l4508
 14299  000DB2                     i2l4516:
 14300                           
 14301                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14302  000DB2  C020  FFD9         	movff	i2printf@ap,fsr2l
 14303  000DB6  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14304  000DBA  CFDE F01E          	movff	postinc2,i2printf@cp
 14305  000DBE  CFDD F01F          	movff	postdec2,i2printf@cp+1
 14306  000DC2  0E02               	movlw	2
 14307  000DC4  2620               	addwf	i2printf@ap,f,c
 14308  000DC6  0E00               	movlw	0
 14309  000DC8  2221               	addwfc	i2printf@ap+1,f,c
 14310                           
 14311                           ;doprnt.c: 740: if(!cp)
 14312  000DCA  501E               	movf	i2printf@cp,w,c
 14313  000DCC  101F               	iorwf	i2printf@cp+1,w,c
 14314  000DCE  A4D8               	btfss	status,2,c
 14315  000DD0  D004               	goto	i2l4524
 14316                           
 14317                           ;doprnt.c: 741: cp = "(null)";
 14318  000DD2  0EB6               	movlw	low STR_68
 14319  000DD4  6E1E               	movwf	i2printf@cp,c
 14320  000DD6  0EFF               	movlw	high STR_68
 14321  000DD8  6E1F               	movwf	i2printf@cp+1,c
 14322  000DDA                     i2l4524:
 14323                           
 14324                           ;doprnt.c: 745: len = 0;
 14325  000DDA  0E00               	movlw	0
 14326  000DDC  6E23               	movwf	i2printf@len+1,c
 14327  000DDE  0E00               	movlw	0
 14328  000DE0  6E22               	movwf	i2printf@len,c
 14329                           
 14330                           ;doprnt.c: 746: while(cp[len])
 14331  000DE2  D002               	goto	i2l4528
 14332  000DE4                     i2l4526:
 14333                           
 14334                           ;doprnt.c: 747: len++;
 14335  000DE4  4A22               	infsnz	i2printf@len,f,c
 14336  000DE6  2A23               	incf	i2printf@len+1,f,c
 14337  000DE8                     i2l4528:
 14338  000DE8  5022               	movf	i2printf@len,w,c
 14339  000DEA  241E               	addwf	i2printf@cp,w,c
 14340  000DEC  6E19               	movwf	??i2_printf& (0+255),c
 14341  000DEE  5023               	movf	i2printf@len+1,w,c
 14342  000DF0  201F               	addwfc	i2printf@cp+1,w,c
 14343  000DF2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 14344  000DF4  C019  FFF6         	movff	??i2_printf,tblptrl
 14345  000DF8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 14346  000DFC  0E00               	movlw	low (__mediumconst shr (0+16))
 14347  000DFE  6EF8               	movwf	tblptru,c
 14348  000E00  0E0F               	movlw	(high __ramtop+-1)
 14349  000E02  64F7               	cpfsgt	tblptrh,c
 14350  000E04  D003               	bra	i2u324_47
 14351  000E06  0008               	tblrd		*
 14352  000E08  50F5               	movf	tablat,w,c
 14353  000E0A  D005               	bra	i2u324_40
 14354  000E0C                     i2u324_47:
 14355  000E0C  CFF6 FFE9          	movff	tblptrl,fsr0l
 14356  000E10  CFF7 FFEA          	movff	tblptrh,fsr0h
 14357  000E14  50EF               	movf	indf0,w,c
 14358  000E16                     i2u324_40:
 14359  000E16  0900               	iorlw	0
 14360  000E18  A4D8               	btfss	status,2,c
 14361  000E1A  D7E4               	goto	i2l4526
 14362                           
 14363                           ;doprnt.c: 757: if(width > len)
 14364  000E1C  5028               	movf	i2printf@width,w,c
 14365  000E1E  5C22               	subwf	i2printf@len,w,c
 14366  000E20  5029               	movf	i2printf@width+1,w,c
 14367  000E22  5823               	subwfb	i2printf@len+1,w,c
 14368  000E24  B0D8               	btfsc	status,0,c
 14369  000E26  D005               	goto	i2l4534
 14370                           
 14371                           ;doprnt.c: 758: width -= len;
 14372  000E28  5022               	movf	i2printf@len,w,c
 14373  000E2A  5E28               	subwf	i2printf@width,f,c
 14374  000E2C  5023               	movf	i2printf@len+1,w,c
 14375  000E2E  5A29               	subwfb	i2printf@width+1,f,c
 14376  000E30  D008               	goto	i2l4538
 14377  000E32                     i2l4534:
 14378                           
 14379                           ;doprnt.c: 759: else
 14380                           ;doprnt.c: 760: width = 0;
 14381  000E32  0E00               	movlw	0
 14382  000E34  6E29               	movwf	i2printf@width+1,c
 14383  000E36  0E00               	movlw	0
 14384  000E38  6E28               	movwf	i2printf@width,c
 14385                           
 14386                           ;doprnt.c: 764: while(width--)
 14387  000E3A  D003               	goto	i2l4538
 14388  000E3C                     i2l4536:
 14389                           
 14390                           ;doprnt.c: 765: (putch(' ') );
 14391  000E3C  0E20               	movlw	32
 14392  000E3E  EC75  F019         	call	i2_putch
 14393  000E42                     i2l4538:
 14394  000E42  0628               	decf	i2printf@width,f,c
 14395  000E44  A0D8               	btfss	status,0,c
 14396  000E46  0629               	decf	i2printf@width+1,f,c
 14397  000E48  2828               	incf	i2printf@width,w,c
 14398  000E4A  E1F8               	bnz	i2l4536
 14399  000E4C  2829               	incf	i2printf@width+1,w,c
 14400  000E4E  B4D8               	btfsc	status,2,c
 14401  000E50  D016               	goto	i2l4544
 14402  000E52  D7F4               	goto	i2l4536
 14403  000E54                     i2l4540:
 14404                           
 14405                           ;doprnt.c: 768: (putch(*cp++) );
 14406  000E54  C01E  FFF6         	movff	i2printf@cp,tblptrl
 14407  000E58  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 14408  000E5C  0E00               	movlw	low (__mediumconst shr (0+16))
 14409  000E5E  6EF8               	movwf	tblptru,c
 14410  000E60  0E0F               	movlw	(high __ramtop+-1)
 14411  000E62  64F7               	cpfsgt	tblptrh,c
 14412  000E64  D003               	bra	i2u328_47
 14413  000E66  0008               	tblrd		*
 14414  000E68  50F5               	movf	tablat,w,c
 14415  000E6A  D005               	bra	i2u328_40
 14416  000E6C                     i2u328_47:
 14417  000E6C  CFF6 FFE9          	movff	tblptrl,fsr0l
 14418  000E70  CFF7 FFEA          	movff	tblptrh,fsr0h
 14419  000E74  50EF               	movf	indf0,w,c
 14420  000E76                     i2u328_40:
 14421  000E76  EC75  F019         	call	i2_putch
 14422  000E7A  4A1E               	infsnz	i2printf@cp,f,c
 14423  000E7C  2A1F               	incf	i2printf@cp+1,f,c
 14424  000E7E                     i2l4544:
 14425  000E7E  0622               	decf	i2printf@len,f,c
 14426  000E80  A0D8               	btfss	status,0,c
 14427  000E82  0623               	decf	i2printf@len+1,f,c
 14428  000E84  2822               	incf	i2printf@len,w,c
 14429  000E86  E1E6               	bnz	i2l4540
 14430  000E88  2823               	incf	i2printf@len+1,w,c
 14431  000E8A  B4D8               	btfsc	status,2,c
 14432  000E8C  D0DA               	goto	i2l4622
 14433  000E8E  D7E2               	goto	i2l4540
 14434  000E90                     i2l4546:
 14435                           
 14436                           ;doprnt.c: 818: flag |= 0x40;
 14437  000E90  8C26               	bsf	i2printf@flag,6,c
 14438                           
 14439                           ;doprnt.c: 822: }
 14440                           
 14441                           ;doprnt.c: 819: break;
 14442  000E92  D01B               	goto	i2l982
 14443  000E94                     i2l4550:
 14444  000E94  C00D  FFF6         	movff	i2printf@f,tblptrl
 14445  000E98  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14446  000E9C  4A0D               	infsnz	i2printf@f,f,c
 14447  000E9E  2A0E               	incf	i2printf@f+1,f,c
 14448  000EA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14449  000EA0  6AF8               	clrf	tblptru,c
 14450  000EA2                     	endif
 14451  000EA2                     	if	0	;tblptru may be non-zero
 14452  000EA2                     	endif
 14453  000EA2  0008               	tblrd		*
 14454  000EA4  CFF5 F027          	movff	tablat,i2printf@c
 14455  000EA8  5027               	movf	i2printf@c,w,c
 14456                           
 14457                           ; Switch size 1, requested type "space"
 14458                           ; Number of cases is 5, Range of values is 0 to 117
 14459                           ; switch strategies available:
 14460                           ; Name         Instructions Cycles
 14461                           ; simple_byte           16     9 (average)
 14462                           ;	Chosen strategy is simple_byte
 14463  000EAA  0A00               	xorlw	0	; case 0
 14464  000EAC  B4D8               	btfsc	status,2,c
 14465  000EAE  0012               	return	
 14466  000EB0  0A64               	xorlw	100	; case 100
 14467  000EB2  B4D8               	btfsc	status,2,c
 14468  000EB4  D00A               	goto	i2l982
 14469  000EB6  0A0D               	xorlw	13	; case 105
 14470  000EB8  B4D8               	btfsc	status,2,c
 14471  000EBA  D007               	goto	i2l982
 14472  000EBC  0A1A               	xorlw	26	; case 115
 14473  000EBE  B4D8               	btfsc	status,2,c
 14474  000EC0  D778               	goto	i2l4516
 14475  000EC2  0A06               	xorlw	6	; case 117
 14476  000EC4  B4D8               	btfsc	status,2,c
 14477  000EC6  D7E4               	goto	i2l4546
 14478  000EC8  D0BC               	goto	i2l4622
 14479  000ECA                     i2l982:
 14480                           
 14481                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14482  000ECA  BC26               	btfsc	i2printf@flag,6,c
 14483  000ECC  D015               	goto	i2l4562
 14484                           
 14485                           ;doprnt.c: 1253: {
 14486                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14487  000ECE  C020  FFD9         	movff	i2printf@ap,fsr2l
 14488  000ED2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14489  000ED6  CFDE F024          	movff	postinc2,i2printf@val
 14490  000EDA  CFDD F025          	movff	postdec2,i2printf@val+1
 14491  000EDE  0E02               	movlw	2
 14492  000EE0  2620               	addwf	i2printf@ap,f,c
 14493  000EE2  0E00               	movlw	0
 14494  000EE4  2221               	addwfc	i2printf@ap+1,f,c
 14495                           
 14496                           ;doprnt.c: 1261: if((int)val < 0) {
 14497  000EE6  AE25               	btfss	i2printf@val+1,7,c
 14498  000EE8  D013               	goto	i2l4566
 14499                           
 14500                           ;doprnt.c: 1262: flag |= 0x03;
 14501  000EEA  0E03               	movlw	3
 14502  000EEC  1226               	iorwf	i2printf@flag,f,c
 14503                           
 14504                           ;doprnt.c: 1263: val = -val;
 14505  000EEE  6C24               	negf	i2printf@val,c
 14506  000EF0  1E25               	comf	i2printf@val+1,f,c
 14507  000EF2  B0D8               	btfsc	status,0,c
 14508  000EF4  2A25               	incf	i2printf@val+1,f,c
 14509                           
 14510                           ;doprnt.c: 1264: }
 14511                           ;doprnt.c: 1266: }
 14512  000EF6  D00C               	goto	i2l4566
 14513  000EF8                     i2l4562:
 14514                           
 14515                           ;doprnt.c: 1268: else
 14516                           ;doprnt.c: 1273: {
 14517                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14518  000EF8  C020  FFD9         	movff	i2printf@ap,fsr2l
 14519  000EFC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 14520  000F00  CFDE F024          	movff	postinc2,i2printf@val
 14521  000F04  CFDD F025          	movff	postdec2,i2printf@val+1
 14522  000F08  0E02               	movlw	2
 14523  000F0A  2620               	addwf	i2printf@ap,f,c
 14524  000F0C  0E00               	movlw	0
 14525  000F0E  2221               	addwfc	i2printf@ap+1,f,c
 14526  000F10                     i2l4566:
 14527                           
 14528                           ;doprnt.c: 1287: }
 14529                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14530  000F10  0E01               	movlw	1
 14531  000F12  6E27               	movwf	i2printf@c,c
 14532  000F14                     i2l4568:
 14533  000F14  0E05               	movlw	5
 14534  000F16  1827               	xorwf	i2printf@c,w,c
 14535  000F18  B4D8               	btfsc	status,2,c
 14536  000F1A  D015               	goto	i2l4580
 14537                           
 14538                           ;doprnt.c: 1306: if(val < dpowers[c])
 14539  000F1C  5027               	movf	i2printf@c,w,c
 14540  000F1E  0D02               	mullw	2
 14541  000F20  0EA4               	movlw	low _dpowers
 14542  000F22  24F3               	addwf	prodl,w,c
 14543  000F24  6EF6               	movwf	tblptrl,c
 14544  000F26  0EFD               	movlw	high _dpowers
 14545  000F28  20F4               	addwfc	prodh,w,c
 14546  000F2A  6EF7               	movwf	tblptrh,c
 14547  000F2C                     	if	1	;There are 3 active tblptr bytes
 14548  000F2C  6AF8               	clrf	tblptru,c
 14549  000F2E  0E00               	movlw	low (__mediumconst shr (0+16))
 14550  000F30  22F8               	addwfc	tblptru,f,c
 14551  000F32                     	endif
 14552  000F32  0009               	tblrd		*+
 14553  000F34  50F5               	movf	tablat,w,c
 14554  000F36  5C24               	subwf	i2printf@val,w,c
 14555  000F38  0009               	tblrd		*+
 14556  000F3A  50F5               	movf	tablat,w,c
 14557  000F3C  5825               	subwfb	i2printf@val+1,w,c
 14558  000F3E  A0D8               	btfss	status,0,c
 14559  000F40  D002               	goto	i2l4580
 14560                           
 14561                           ;doprnt.c: 1307: break;
 14562  000F42  2A27               	incf	i2printf@c,f,c
 14563  000F44  D7E7               	goto	i2l4568
 14564  000F46                     i2l4580:
 14565                           
 14566                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14567  000F46  5028               	movf	i2printf@width,w,c
 14568  000F48  1029               	iorwf	i2printf@width+1,w,c
 14569  000F4A  B4D8               	btfsc	status,2,c
 14570  000F4C  D009               	goto	i2l4586
 14571  000F4E  C026  F019         	movff	i2printf@flag,??i2_printf
 14572  000F52  0E03               	movlw	3
 14573  000F54  1619               	andwf	??i2_printf,f,c
 14574  000F56  B4D8               	btfsc	status,2,c
 14575  000F58  D003               	goto	i2l4586
 14576                           
 14577                           ;doprnt.c: 1346: width--;
 14578  000F5A  0628               	decf	i2printf@width,f,c
 14579  000F5C  A0D8               	btfss	status,0,c
 14580  000F5E  0629               	decf	i2printf@width+1,f,c
 14581  000F60                     i2l4586:
 14582                           
 14583                           ;doprnt.c: 1381: if(width > c)
 14584  000F60  0E80               	movlw	128
 14585  000F62  BE27               	btfsc	i2printf@c,7,c
 14586  000F64  0E7F               	movlw	127
 14587  000F66  6E19               	movwf	??i2_printf& (0+255),c
 14588  000F68  5028               	movf	i2printf@width,w,c
 14589  000F6A  5C27               	subwf	i2printf@c,w,c
 14590  000F6C  5029               	movf	i2printf@width+1,w,c
 14591  000F6E  0A80               	xorlw	128
 14592  000F70  5819               	subwfb	??i2_printf& (0+255),w,c
 14593  000F72  B0D8               	btfsc	status,0,c
 14594  000F74  D007               	goto	i2l4590
 14595                           
 14596                           ;doprnt.c: 1382: width -= c;
 14597  000F76  5027               	movf	i2printf@c,w,c
 14598  000F78  5E28               	subwf	i2printf@width,f,c
 14599  000F7A  0E00               	movlw	0
 14600  000F7C  BE27               	btfsc	i2printf@c,7,c
 14601  000F7E  0EFF               	movlw	255
 14602  000F80  5A29               	subwfb	i2printf@width+1,f,c
 14603  000F82  D004               	goto	i2l4592
 14604  000F84                     i2l4590:
 14605                           
 14606                           ;doprnt.c: 1383: else
 14607                           ;doprnt.c: 1384: width = 0;
 14608  000F84  0E00               	movlw	0
 14609  000F86  6E29               	movwf	i2printf@width+1,c
 14610  000F88  0E00               	movlw	0
 14611  000F8A  6E28               	movwf	i2printf@width,c
 14612  000F8C                     i2l4592:
 14613                           
 14614                           ;doprnt.c: 1387: if(flag & 0x04) {
 14615  000F8C  A426               	btfss	i2printf@flag,2,c
 14616  000F8E  D014               	goto	i2l4604
 14617                           
 14618                           ;doprnt.c: 1392: if(flag & 0x03)
 14619  000F90  C026  F019         	movff	i2printf@flag,??i2_printf
 14620  000F94  0E03               	movlw	3
 14621  000F96  1619               	andwf	??i2_printf,f,c
 14622  000F98  B4D8               	btfsc	status,2,c
 14623  000F9A  D003               	goto	i2l4598
 14624                           
 14625                           ;doprnt.c: 1393: (putch('-') );
 14626  000F9C  0E2D               	movlw	45
 14627  000F9E  EC75  F019         	call	i2_putch
 14628  000FA2                     i2l4598:
 14629                           
 14630                           ;doprnt.c: 1415: if(width)
 14631  000FA2  5028               	movf	i2printf@width,w,c
 14632  000FA4  1029               	iorwf	i2printf@width+1,w,c
 14633  000FA6  B4D8               	btfsc	status,2,c
 14634  000FA8  D01E               	goto	i2l4614
 14635                           
 14636                           ;doprnt.c: 1417: (putch('0') );
 14637                           
 14638                           ;doprnt.c: 1416: do
 14639  000FAA  0E30               	movlw	48
 14640  000FAC  EC75  F019         	call	i2_putch
 14641                           
 14642                           ;doprnt.c: 1418: while(--width);
 14643  000FB0  0628               	decf	i2printf@width,f,c
 14644  000FB2  A0D8               	btfss	status,0,c
 14645  000FB4  0629               	decf	i2printf@width+1,f,c
 14646  000FB6  D7F5               	goto	i2l4598
 14647  000FB8                     i2l4604:
 14648                           
 14649                           ;doprnt.c: 1422: {
 14650                           ;doprnt.c: 1424: if(width
 14651                           ;doprnt.c: 1428: )
 14652  000FB8  5028               	movf	i2printf@width,w,c
 14653  000FBA  1029               	iorwf	i2printf@width+1,w,c
 14654  000FBC  B4D8               	btfsc	status,2,c
 14655  000FBE  D00A               	goto	i2l4610
 14656  000FC0                     i2l4606:
 14657                           
 14658                           ;doprnt.c: 1430: (putch(' ') );
 14659  000FC0  0E20               	movlw	32
 14660  000FC2  EC75  F019         	call	i2_putch
 14661                           
 14662                           ;doprnt.c: 1431: while(--width);
 14663  000FC6  0628               	decf	i2printf@width,f,c
 14664  000FC8  A0D8               	btfss	status,0,c
 14665  000FCA  0629               	decf	i2printf@width+1,f,c
 14666  000FCC  5028               	movf	i2printf@width,w,c
 14667  000FCE  1029               	iorwf	i2printf@width+1,w,c
 14668  000FD0  A4D8               	btfss	status,2,c
 14669  000FD2  D7F6               	goto	i2l4606
 14670  000FD4                     i2l4610:
 14671                           
 14672                           ;doprnt.c: 1438: if(flag & 0x03)
 14673  000FD4  C026  F019         	movff	i2printf@flag,??i2_printf
 14674  000FD8  0E03               	movlw	3
 14675  000FDA  1619               	andwf	??i2_printf,f,c
 14676  000FDC  B4D8               	btfsc	status,2,c
 14677  000FDE  D003               	goto	i2l4614
 14678                           
 14679                           ;doprnt.c: 1439: (putch('-') );
 14680  000FE0  0E2D               	movlw	45
 14681  000FE2  EC75  F019         	call	i2_putch
 14682  000FE6                     i2l4614:
 14683                           
 14684                           ;doprnt.c: 1469: }
 14685                           ;doprnt.c: 1472: prec = c;
 14686  000FE6  C027  F01D         	movff	i2printf@c,i2printf@prec
 14687                           
 14688                           ;doprnt.c: 1474: while(prec--) {
 14689  000FEA  D027               	goto	i2l4620
 14690  000FEC                     i2l4616:
 14691                           
 14692                           ;doprnt.c: 1478: {
 14693                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14694  000FEC  501D               	movf	i2printf@prec,w,c
 14695  000FEE  0D02               	mullw	2
 14696  000FF0  0EA4               	movlw	low _dpowers
 14697  000FF2  24F3               	addwf	prodl,w,c
 14698  000FF4  6EF6               	movwf	tblptrl,c
 14699  000FF6  0EFD               	movlw	high _dpowers
 14700  000FF8  20F4               	addwfc	prodh,w,c
 14701  000FFA  6EF7               	movwf	tblptrh,c
 14702  000FFC                     	if	1	;There are 3 active tblptr bytes
 14703  000FFC  6AF8               	clrf	tblptru,c
 14704  000FFE  0E00               	movlw	low (__mediumconst shr (0+16))
 14705  001000  22F8               	addwfc	tblptru,f,c
 14706  001002                     	endif
 14707  001002  0009               	tblrd		*+
 14708  001004  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 14709  001008  000A               	tblrd		*-
 14710  00100A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 14711  00100E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 14712  001012  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14713  001016  ECF5  F015         	call	i2___lwdiv	;wreg free
 14714  00101A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 14715  00101E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 14716  001022  0E00               	movlw	0
 14717  001024  6E04               	movwf	i2___lwmod@divisor+1,c
 14718  001026  0E0A               	movlw	10
 14719  001028  6E03               	movwf	i2___lwmod@divisor,c
 14720  00102A  ECB2  F016         	call	i2___lwmod	;wreg free
 14721  00102E  5001               	movf	?i2___lwmod,w,c
 14722  001030  0F30               	addlw	48
 14723  001032  6E27               	movwf	i2printf@c,c
 14724                           
 14725                           ;doprnt.c: 1523: }
 14726                           ;doprnt.c: 1524: (putch(c) );
 14727  001034  5027               	movf	i2printf@c,w,c
 14728  001036  EC75  F019         	call	i2_putch
 14729  00103A                     i2l4620:
 14730  00103A  061D               	decf	i2printf@prec,f,c
 14731  00103C  281D               	incf	i2printf@prec,w,c
 14732  00103E  A4D8               	btfss	status,2,c
 14733  001040  D7D5               	goto	i2l4616
 14734  001042                     i2l4622:
 14735  001042  C00D  FFF6         	movff	i2printf@f,tblptrl
 14736  001046  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14737  00104A  4A0D               	infsnz	i2printf@f,f,c
 14738  00104C  2A0E               	incf	i2printf@f+1,f,c
 14739  00104E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14740  00104E  6AF8               	clrf	tblptru,c
 14741  001050                     	endif
 14742  001050                     	if	0	;tblptru may be non-zero
 14743  001050                     	endif
 14744  001050  0008               	tblrd		*
 14745  001052  CFF5 F027          	movff	tablat,i2printf@c
 14746  001056  5027               	movf	i2printf@c,w,c
 14747  001058  B4D8               	btfsc	status,2,c
 14748  00105A  0012               	return	
 14749  00105C  D64E               	goto	i2l4492
 14750  00105E                     __end_ofi2_printf:
 14751                           	opt stack 0
 14752                           pclatu	equ	0xFFB
 14753                           pclath	equ	0xFFA
 14754                           tblptru	equ	0xFF8
 14755                           tblptrh	equ	0xFF7
 14756                           tblptrl	equ	0xFF6
 14757                           tablat	equ	0xFF5
 14758                           prodh	equ	0xFF4
 14759                           prodl	equ	0xFF3
 14760                           intcon	equ	0xFF2
 14761                           intcon2	equ	0xFF1
 14762                           intcon3	equ	0xFF0
 14763                           indf0	equ	0xFEF
 14764                           postinc0	equ	0xFEE
 14765                           fsr0h	equ	0xFEA
 14766                           fsr0l	equ	0xFE9
 14767                           wreg	equ	0xFE8
 14768                           postdec1	equ	0xFE5
 14769                           fsr1h	equ	0xFE2
 14770                           fsr1l	equ	0xFE1
 14771                           indf2	equ	0xFDF
 14772                           postinc2	equ	0xFDE
 14773                           postdec2	equ	0xFDD
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function i2_putch *****************
 14779 ;; Defined at:
 14780 ;;		line 20 in file "lcd.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  data            1    wreg     unsigned char 
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;  data            1    2[COMRAM] unsigned char 
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  1    wreg      void 
 14787 ;; Registers used:
 14788 ;;		wreg, status,2, status,0, cstack
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;Total ram usage:        1 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    1
 14801 ;; This function calls:
 14802 ;;		i2_lcdNibble
 14803 ;; This function is called by:
 14804 ;;		i2_printf
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text66
 14809  0032EA                     __ptext66:
 14810                           	opt stack 0
 14811  0032EA                     i2_putch:
 14812                           	opt stack 19
 14813                           
 14814                           ;incstack = 0
 14815                           ;i2putch@data stored from wreg
 14816  0032EA  6E03               	movwf	i2putch@data,c
 14817                           
 14818                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14819  0032EC  848C               	bsf	3980,2,c	;volatile
 14820                           
 14821                           ;lcd.c: 22: lcdNibble(data);
 14822  0032EE  5003               	movf	i2putch@data,w,c
 14823  0032F0  ECCA  F015         	call	i2_lcdNibble
 14824  0032F4  0012               	return		;funcret
 14825  0032F6                     __end_ofi2_putch:
 14826                           	opt stack 0
 14827                           pclatu	equ	0xFFB
 14828                           pclath	equ	0xFFA
 14829                           tblptru	equ	0xFF8
 14830                           tblptrh	equ	0xFF7
 14831                           tblptrl	equ	0xFF6
 14832                           tablat	equ	0xFF5
 14833                           prodh	equ	0xFF4
 14834                           prodl	equ	0xFF3
 14835                           intcon	equ	0xFF2
 14836                           intcon2	equ	0xFF1
 14837                           intcon3	equ	0xFF0
 14838                           indf0	equ	0xFEF
 14839                           postinc0	equ	0xFEE
 14840                           fsr0h	equ	0xFEA
 14841                           fsr0l	equ	0xFE9
 14842                           wreg	equ	0xFE8
 14843                           postdec1	equ	0xFE5
 14844                           fsr1h	equ	0xFE2
 14845                           fsr1l	equ	0xFE1
 14846                           indf2	equ	0xFDF
 14847                           postinc2	equ	0xFDE
 14848                           postdec2	equ	0xFDD
 14849                           fsr2h	equ	0xFDA
 14850                           fsr2l	equ	0xFD9
 14851                           status	equ	0xFD8
 14852                           
 14853 ;; *************** function i2_isdigit *****************
 14854 ;; Defined at:
 14855 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14856 ;; Parameters:    Size  Location     Type
 14857 ;;  c               1    wreg     unsigned char 
 14858 ;; Auto vars:     Size  Location     Type
 14859 ;;  c               1    2[COMRAM] unsigned char 
 14860 ;; Return value:  Size  Location     Type
 14861 ;;		None               void
 14862 ;; Registers used:
 14863 ;;		wreg, status,2, status,0
 14864 ;; Tracked objects:
 14865 ;;		On entry : 0/0
 14866 ;;		On exit  : 0/0
 14867 ;;		Unchanged: 0/0
 14868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14872 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14873 ;;Total ram usage:        3 bytes
 14874 ;; Hardware stack levels used:    1
 14875 ;; This function calls:
 14876 ;;		Nothing
 14877 ;; This function is called by:
 14878 ;;		i2_printf
 14879 ;; This function uses a non-reentrant model
 14880 ;;
 14881                           
 14882                           	psect	text67
 14883  003242                     __ptext67:
 14884                           	opt stack 0
 14885  003242                     i2_isdigit:
 14886                           	opt stack 20
 14887                           
 14888                           ;incstack = 0
 14889                           ;i2isdigit@c stored from wreg
 14890  003242  6E03               	movwf	i2isdigit@c,c
 14891  003244  0E00               	movlw	0
 14892  003246  6E02               	movwf	i2_isdigit$1645,c
 14893  003248  0E3A               	movlw	58
 14894  00324A  6003               	cpfslt	i2isdigit@c,c
 14895  00324C  D005               	goto	i2l4198
 14896  00324E  0E2F               	movlw	47
 14897  003250  6403               	cpfsgt	i2isdigit@c,c
 14898  003252  D002               	goto	i2l4198
 14899  003254  0E01               	movlw	1
 14900  003256  6E02               	movwf	i2_isdigit$1645,c
 14901  003258                     i2l4198:
 14902  003258  C002  F001         	movff	i2_isdigit$1645,??i2_isdigit
 14903  00325C  3001               	rrcf	??i2_isdigit,w,c
 14904  00325E  0012               	return	
 14905  003260                     __end_ofi2_isdigit:
 14906                           	opt stack 0
 14907                           pclatu	equ	0xFFB
 14908                           pclath	equ	0xFFA
 14909                           tblptru	equ	0xFF8
 14910                           tblptrh	equ	0xFF7
 14911                           tblptrl	equ	0xFF6
 14912                           tablat	equ	0xFF5
 14913                           prodh	equ	0xFF4
 14914                           prodl	equ	0xFF3
 14915                           intcon	equ	0xFF2
 14916                           intcon2	equ	0xFF1
 14917                           intcon3	equ	0xFF0
 14918                           indf0	equ	0xFEF
 14919                           postinc0	equ	0xFEE
 14920                           fsr0h	equ	0xFEA
 14921                           fsr0l	equ	0xFE9
 14922                           wreg	equ	0xFE8
 14923                           postdec1	equ	0xFE5
 14924                           fsr1h	equ	0xFE2
 14925                           fsr1l	equ	0xFE1
 14926                           indf2	equ	0xFDF
 14927                           postinc2	equ	0xFDE
 14928                           postdec2	equ	0xFDD
 14929                           fsr2h	equ	0xFDA
 14930                           fsr2l	equ	0xFD9
 14931                           status	equ	0xFD8
 14932                           
 14933 ;; *************** function i2___wmul *****************
 14934 ;; Defined at:
 14935 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14936 ;; Parameters:    Size  Location     Type
 14937 ;;  multiplier      2    0[COMRAM] unsigned int 
 14938 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14939 ;; Auto vars:     Size  Location     Type
 14940 ;;  __wmul          2    4[COMRAM] unsigned int 
 14941 ;; Return value:  Size  Location     Type
 14942 ;;                  2    0[COMRAM] unsigned int 
 14943 ;; Registers used:
 14944 ;;		wreg, status,2, status,0, prodl, prodh
 14945 ;; Tracked objects:
 14946 ;;		On entry : 0/0
 14947 ;;		On exit  : 0/0
 14948 ;;		Unchanged: 0/0
 14949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;Total ram usage:        6 bytes
 14955 ;; Hardware stack levels used:    1
 14956 ;; This function calls:
 14957 ;;		Nothing
 14958 ;; This function is called by:
 14959 ;;		_printSortTimer
 14960 ;;		_retrieveLog
 14961 ;;		i2_printf
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text68
 14966  00316A                     __ptext68:
 14967                           	opt stack 0
 14968  00316A                     i2___wmul:
 14969                           	opt stack 20
 14970                           
 14971                           ;incstack = 0
 14972  00316A  5001               	movf	i2___wmul@multiplier,w,c
 14973  00316C  0203               	mulwf	i2___wmul@multiplicand,c
 14974  00316E  CFF3 F005          	movff	prodl,i2___wmul@product
 14975  003172  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14976  003176  5001               	movf	i2___wmul@multiplier,w,c
 14977  003178  0204               	mulwf	i2___wmul@multiplicand+1,c
 14978  00317A  50F3               	movf	prodl,w,c
 14979  00317C  2606               	addwf	i2___wmul@product+1,f,c
 14980  00317E  5002               	movf	i2___wmul@multiplier+1,w,c
 14981  003180  0203               	mulwf	i2___wmul@multiplicand,c
 14982  003182  50F3               	movf	prodl,w,c
 14983  003184  2606               	addwf	i2___wmul@product+1,f,c
 14984  003186  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14985  00318A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14986  00318E  0012               	return	
 14987  003190                     __end_ofi2___wmul:
 14988                           	opt stack 0
 14989                           pclatu	equ	0xFFB
 14990                           pclath	equ	0xFFA
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           intcon2	equ	0xFF1
 14999                           intcon3	equ	0xFF0
 15000                           indf0	equ	0xFEF
 15001                           postinc0	equ	0xFEE
 15002                           fsr0h	equ	0xFEA
 15003                           fsr0l	equ	0xFE9
 15004                           wreg	equ	0xFE8
 15005                           postdec1	equ	0xFE5
 15006                           fsr1h	equ	0xFE2
 15007                           fsr1l	equ	0xFE1
 15008                           indf2	equ	0xFDF
 15009                           postinc2	equ	0xFDE
 15010                           postdec2	equ	0xFDD
 15011                           fsr2h	equ	0xFDA
 15012                           fsr2l	equ	0xFD9
 15013                           status	equ	0xFD8
 15014                           
 15015 ;; *************** function i2___lwmod *****************
 15016 ;; Defined at:
 15017 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15018 ;; Parameters:    Size  Location     Type
 15019 ;;  dividend        2    0[COMRAM] unsigned int 
 15020 ;;  divisor         2    2[COMRAM] unsigned int 
 15021 ;; Auto vars:     Size  Location     Type
 15022 ;;  __lwmod         1    4[COMRAM] unsigned char 
 15023 ;; Return value:  Size  Location     Type
 15024 ;;                  2    0[COMRAM] unsigned int 
 15025 ;; Registers used:
 15026 ;;		wreg, status,2, status,0
 15027 ;; Tracked objects:
 15028 ;;		On entry : 0/0
 15029 ;;		On exit  : 0/0
 15030 ;;		Unchanged: 0/0
 15031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;Total ram usage:        5 bytes
 15037 ;; Hardware stack levels used:    1
 15038 ;; This function calls:
 15039 ;;		Nothing
 15040 ;; This function is called by:
 15041 ;;		_printSortTimer
 15042 ;;		i2_printf
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           	psect	text69
 15047  002D64                     __ptext69:
 15048                           	opt stack 0
 15049  002D64                     i2___lwmod:
 15050                           	opt stack 20
 15051                           
 15052                           ;incstack = 0
 15053  002D64  5003               	movf	i2___lwmod@divisor,w,c
 15054  002D66  1004               	iorwf	i2___lwmod@divisor+1,w,c
 15055  002D68  B4D8               	btfsc	status,2,c
 15056  002D6A  D018               	goto	i2l1439
 15057  002D6C  0E01               	movlw	1
 15058  002D6E  6E05               	movwf	i2___lwmod@counter,c
 15059  002D70  D004               	goto	i2l4230
 15060  002D72                     i2l4228:
 15061  002D72  90D8               	bcf	status,0,c
 15062  002D74  3603               	rlcf	i2___lwmod@divisor,f,c
 15063  002D76  3604               	rlcf	i2___lwmod@divisor+1,f,c
 15064  002D78  2A05               	incf	i2___lwmod@counter,f,c
 15065  002D7A                     i2l4230:
 15066  002D7A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 15067  002D7C  D7FA               	goto	i2l4228
 15068  002D7E                     i2l4232:
 15069  002D7E  5003               	movf	i2___lwmod@divisor,w,c
 15070  002D80  5C01               	subwf	i2___lwmod@dividend,w,c
 15071  002D82  5004               	movf	i2___lwmod@divisor+1,w,c
 15072  002D84  5802               	subwfb	i2___lwmod@dividend+1,w,c
 15073  002D86  A0D8               	btfss	status,0,c
 15074  002D88  D004               	goto	i2l4236
 15075  002D8A  5003               	movf	i2___lwmod@divisor,w,c
 15076  002D8C  5E01               	subwf	i2___lwmod@dividend,f,c
 15077  002D8E  5004               	movf	i2___lwmod@divisor+1,w,c
 15078  002D90  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15079  002D92                     i2l4236:
 15080  002D92  90D8               	bcf	status,0,c
 15081  002D94  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15082  002D96  3203               	rrcf	i2___lwmod@divisor,f,c
 15083  002D98  2E05               	decfsz	i2___lwmod@counter,f,c
 15084  002D9A  D7F1               	goto	i2l4232
 15085  002D9C                     i2l1439:
 15086  002D9C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15087  002DA0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15088  002DA4  0012               	return		;funcret
 15089  002DA6                     __end_ofi2___lwmod:
 15090                           	opt stack 0
 15091                           pclatu	equ	0xFFB
 15092                           pclath	equ	0xFFA
 15093                           tblptru	equ	0xFF8
 15094                           tblptrh	equ	0xFF7
 15095                           tblptrl	equ	0xFF6
 15096                           tablat	equ	0xFF5
 15097                           prodh	equ	0xFF4
 15098                           prodl	equ	0xFF3
 15099                           intcon	equ	0xFF2
 15100                           intcon2	equ	0xFF1
 15101                           intcon3	equ	0xFF0
 15102                           indf0	equ	0xFEF
 15103                           postinc0	equ	0xFEE
 15104                           fsr0h	equ	0xFEA
 15105                           fsr0l	equ	0xFE9
 15106                           wreg	equ	0xFE8
 15107                           postdec1	equ	0xFE5
 15108                           fsr1h	equ	0xFE2
 15109                           fsr1l	equ	0xFE1
 15110                           indf2	equ	0xFDF
 15111                           postinc2	equ	0xFDE
 15112                           postdec2	equ	0xFDD
 15113                           fsr2h	equ	0xFDA
 15114                           fsr2l	equ	0xFD9
 15115                           status	equ	0xFD8
 15116                           
 15117 ;; *************** function i2___lwdiv *****************
 15118 ;; Defined at:
 15119 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;  dividend        2    5[COMRAM] unsigned int 
 15122 ;;  divisor         2    7[COMRAM] unsigned int 
 15123 ;; Auto vars:     Size  Location     Type
 15124 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 15125 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  2    5[COMRAM] unsigned int 
 15128 ;; Registers used:
 15129 ;;		wreg, status,2, status,0
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15136 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15138 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;Total ram usage:        7 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; This function calls:
 15142 ;;		Nothing
 15143 ;; This function is called by:
 15144 ;;		_printSortTimer
 15145 ;;		i2_printf
 15146 ;; This function uses a non-reentrant model
 15147 ;;
 15148                           
 15149                           	psect	text70
 15150  002BEA                     __ptext70:
 15151                           	opt stack 0
 15152  002BEA                     i2___lwdiv:
 15153                           	opt stack 20
 15154                           
 15155                           ;incstack = 0
 15156  002BEA  0E00               	movlw	0
 15157  002BEC  6E0B               	movwf	i2___lwdiv@quotient+1,c
 15158  002BEE  0E00               	movlw	0
 15159  002BF0  6E0A               	movwf	i2___lwdiv@quotient,c
 15160  002BF2  5008               	movf	i2___lwdiv@divisor,w,c
 15161  002BF4  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 15162  002BF6  B4D8               	btfsc	status,2,c
 15163  002BF8  D01C               	goto	i2l1429
 15164  002BFA  0E01               	movlw	1
 15165  002BFC  6E0C               	movwf	i2___lwdiv@counter,c
 15166  002BFE  D004               	goto	i2l4210
 15167  002C00                     i2l4208:
 15168  002C00  90D8               	bcf	status,0,c
 15169  002C02  3608               	rlcf	i2___lwdiv@divisor,f,c
 15170  002C04  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 15171  002C06  2A0C               	incf	i2___lwdiv@counter,f,c
 15172  002C08                     i2l4210:
 15173  002C08  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 15174  002C0A  D7FA               	goto	i2l4208
 15175  002C0C                     i2l4212:
 15176  002C0C  90D8               	bcf	status,0,c
 15177  002C0E  360A               	rlcf	i2___lwdiv@quotient,f,c
 15178  002C10  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 15179  002C12  5008               	movf	i2___lwdiv@divisor,w,c
 15180  002C14  5C06               	subwf	i2___lwdiv@dividend,w,c
 15181  002C16  5009               	movf	i2___lwdiv@divisor+1,w,c
 15182  002C18  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 15183  002C1A  A0D8               	btfss	status,0,c
 15184  002C1C  D005               	goto	i2l4220
 15185  002C1E  5008               	movf	i2___lwdiv@divisor,w,c
 15186  002C20  5E06               	subwf	i2___lwdiv@dividend,f,c
 15187  002C22  5009               	movf	i2___lwdiv@divisor+1,w,c
 15188  002C24  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 15189  002C26  800A               	bsf	i2___lwdiv@quotient,0,c
 15190  002C28                     i2l4220:
 15191  002C28  90D8               	bcf	status,0,c
 15192  002C2A  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 15193  002C2C  3208               	rrcf	i2___lwdiv@divisor,f,c
 15194  002C2E  2E0C               	decfsz	i2___lwdiv@counter,f,c
 15195  002C30  D7ED               	goto	i2l4212
 15196  002C32                     i2l1429:
 15197  002C32  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 15198  002C36  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 15199  002C3A  0012               	return		;funcret
 15200  002C3C                     __end_ofi2___lwdiv:
 15201                           	opt stack 0
 15202                           pclatu	equ	0xFFB
 15203                           pclath	equ	0xFFA
 15204                           tblptru	equ	0xFF8
 15205                           tblptrh	equ	0xFF7
 15206                           tblptrl	equ	0xFF6
 15207                           tablat	equ	0xFF5
 15208                           prodh	equ	0xFF4
 15209                           prodl	equ	0xFF3
 15210                           intcon	equ	0xFF2
 15211                           intcon2	equ	0xFF1
 15212                           intcon3	equ	0xFF0
 15213                           indf0	equ	0xFEF
 15214                           postinc0	equ	0xFEE
 15215                           fsr0h	equ	0xFEA
 15216                           fsr0l	equ	0xFE9
 15217                           wreg	equ	0xFE8
 15218                           postdec1	equ	0xFE5
 15219                           fsr1h	equ	0xFE2
 15220                           fsr1l	equ	0xFE1
 15221                           indf2	equ	0xFDF
 15222                           postinc2	equ	0xFDE
 15223                           postdec2	equ	0xFDD
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function i2_lcdInst *****************
 15229 ;; Defined at:
 15230 ;;		line 15 in file "lcd.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  data            1    wreg     unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  data            1    2[COMRAM] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, status,0, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15248 ;;Total ram usage:        1 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    1
 15251 ;; This function calls:
 15252 ;;		i2_lcdNibble
 15253 ;; This function is called by:
 15254 ;;		_change_state_to_menu_11
 15255 ;;		_change_state_to_menu_23
 15256 ;;		_change_state_to_logs_11
 15257 ;;		_change_state_to_logs_12
 15258 ;;		_change_state_to_logs_22
 15259 ;;		_change_state_to_logs_23
 15260 ;;		_change_state_to_logs_33
 15261 ;;		_change_state_to_logs_34
 15262 ;;		_printSortTimer
 15263 ;;		i2_change_state_to_menu_start
 15264 ;;		i2_change_state_to_menu_12
 15265 ;;		i2_change_state_to_menu_22
 15266 ;;		i2_printRTC
 15267 ;; This function uses a non-reentrant model
 15268 ;;
 15269                           
 15270                           	psect	text71
 15271  0032F6                     __ptext71:
 15272                           	opt stack 0
 15273  0032F6                     i2_lcdInst:
 15274                           	opt stack 19
 15275                           
 15276                           ;incstack = 0
 15277                           ;i2lcdInst@data stored from wreg
 15278  0032F6  6E03               	movwf	i2lcdInst@data,c
 15279                           
 15280                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15281  0032F8  948C               	bcf	3980,2,c	;volatile
 15282                           
 15283                           ;lcd.c: 17: lcdNibble(data);
 15284  0032FA  5003               	movf	i2lcdInst@data,w,c
 15285  0032FC  ECCA  F015         	call	i2_lcdNibble
 15286  003300  0012               	return		;funcret
 15287  003302                     __end_ofi2_lcdInst:
 15288                           	opt stack 0
 15289                           pclatu	equ	0xFFB
 15290                           pclath	equ	0xFFA
 15291                           tblptru	equ	0xFF8
 15292                           tblptrh	equ	0xFF7
 15293                           tblptrl	equ	0xFF6
 15294                           tablat	equ	0xFF5
 15295                           prodh	equ	0xFF4
 15296                           prodl	equ	0xFF3
 15297                           intcon	equ	0xFF2
 15298                           intcon2	equ	0xFF1
 15299                           intcon3	equ	0xFF0
 15300                           indf0	equ	0xFEF
 15301                           postinc0	equ	0xFEE
 15302                           fsr0h	equ	0xFEA
 15303                           fsr0l	equ	0xFE9
 15304                           wreg	equ	0xFE8
 15305                           postdec1	equ	0xFE5
 15306                           fsr1h	equ	0xFE2
 15307                           fsr1l	equ	0xFE1
 15308                           indf2	equ	0xFDF
 15309                           postinc2	equ	0xFDE
 15310                           postdec2	equ	0xFDD
 15311                           fsr2h	equ	0xFDA
 15312                           fsr2l	equ	0xFD9
 15313                           status	equ	0xFD8
 15314                           
 15315 ;; *************** function i2_lcdNibble *****************
 15316 ;; Defined at:
 15317 ;;		line 25 in file "lcd.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;  data            1    wreg     unsigned char 
 15320 ;; Auto vars:     Size  Location     Type
 15321 ;;  data            1    1[COMRAM] unsigned char 
 15322 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 15323 ;; Return value:  Size  Location     Type
 15324 ;;                  1    wreg      void 
 15325 ;; Registers used:
 15326 ;;		wreg, status,2, status,0
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15336 ;;Total ram usage:        2 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		i2_lcdInst
 15342 ;;		i2_putch
 15343 ;; This function uses a non-reentrant model
 15344 ;;
 15345                           
 15346                           	psect	text72
 15347  002B94                     __ptext72:
 15348                           	opt stack 0
 15349  002B94                     i2_lcdNibble:
 15350                           	opt stack 19
 15351                           
 15352                           ;incstack = 0
 15353                           ;i2lcdNibble@data stored from wreg
 15354  002B94  6E02               	movwf	i2lcdNibble@data,c
 15355                           
 15356                           ;lcd.c: 27: char temp = data & 0xF0;
 15357  002B96  5002               	movf	i2lcdNibble@data,w,c
 15358  002B98  0BF0               	andlw	240
 15359  002B9A  6E01               	movwf	i2lcdNibble@temp,c
 15360                           
 15361                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15362  002B9C  508C               	movf	3980,w,c	;volatile
 15363  002B9E  0B0F               	andlw	15
 15364  002BA0  6E8C               	movwf	3980,c	;volatile
 15365                           
 15366                           ;lcd.c: 29: LATD = temp | LATD;
 15367  002BA2  5001               	movf	i2lcdNibble@temp,w,c
 15368  002BA4  108C               	iorwf	3980,w,c	;volatile
 15369  002BA6  6E8C               	movwf	3980,c	;volatile
 15370                           
 15371                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15372  002BA8  868C               	bsf	3980,3,c	;volatile
 15373                           
 15374                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15375  002BAA  0E42               	movlw	66
 15376  002BAC                     i2u554_47:
 15377  002BAC  2EE8               	decfsz	wreg,f,c
 15378  002BAE  D7FE               	bra	i2u554_47
 15379  002BB0  D000               	nop2	
 15380                           
 15381                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15382  002BB2  968C               	bcf	3980,3,c	;volatile
 15383                           
 15384                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15385  002BB4  0E42               	movlw	66
 15386  002BB6                     i2u555_47:
 15387  002BB6  2EE8               	decfsz	wreg,f,c
 15388  002BB8  D7FE               	bra	i2u555_47
 15389  002BBA  D000               	nop2	
 15390                           
 15391                           ;lcd.c: 36: data = data << 4;
 15392  002BBC  3802               	swapf	i2lcdNibble@data,w,c
 15393  002BBE  0BF0               	andlw	240
 15394  002BC0  6E02               	movwf	i2lcdNibble@data,c
 15395                           
 15396                           ;lcd.c: 38: temp = data & 0xF0;
 15397  002BC2  5002               	movf	i2lcdNibble@data,w,c
 15398  002BC4  0BF0               	andlw	240
 15399  002BC6  6E01               	movwf	i2lcdNibble@temp,c
 15400                           
 15401                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15402  002BC8  508C               	movf	3980,w,c	;volatile
 15403  002BCA  0B0F               	andlw	15
 15404  002BCC  6E8C               	movwf	3980,c	;volatile
 15405                           
 15406                           ;lcd.c: 40: LATD = temp | LATD;
 15407  002BCE  5001               	movf	i2lcdNibble@temp,w,c
 15408  002BD0  108C               	iorwf	3980,w,c	;volatile
 15409  002BD2  6E8C               	movwf	3980,c	;volatile
 15410                           
 15411                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15412  002BD4  868C               	bsf	3980,3,c	;volatile
 15413                           
 15414                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15415  002BD6  0E42               	movlw	66
 15416  002BD8                     i2u556_47:
 15417  002BD8  2EE8               	decfsz	wreg,f,c
 15418  002BDA  D7FE               	bra	i2u556_47
 15419  002BDC  D000               	nop2	
 15420                           
 15421                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15422  002BDE  968C               	bcf	3980,3,c	;volatile
 15423                           
 15424                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15425  002BE0  0E42               	movlw	66
 15426  002BE2                     i2u557_47:
 15427  002BE2  2EE8               	decfsz	wreg,f,c
 15428  002BE4  D7FE               	bra	i2u557_47
 15429  002BE6  D000               	nop2	
 15430  002BE8  0012               	return		;funcret
 15431  002BEA                     __end_ofi2_lcdNibble:
 15432                           	opt stack 0
 15433                           pclatu	equ	0xFFB
 15434                           pclath	equ	0xFFA
 15435                           tblptru	equ	0xFF8
 15436                           tblptrh	equ	0xFF7
 15437                           tblptrl	equ	0xFF6
 15438                           tablat	equ	0xFF5
 15439                           prodh	equ	0xFF4
 15440                           prodl	equ	0xFF3
 15441                           intcon	equ	0xFF2
 15442                           intcon2	equ	0xFF1
 15443                           intcon3	equ	0xFF0
 15444                           indf0	equ	0xFEF
 15445                           postinc0	equ	0xFEE
 15446                           fsr0h	equ	0xFEA
 15447                           fsr0l	equ	0xFE9
 15448                           wreg	equ	0xFE8
 15449                           postdec1	equ	0xFE5
 15450                           fsr1h	equ	0xFE2
 15451                           fsr1l	equ	0xFE1
 15452                           indf2	equ	0xFDF
 15453                           postinc2	equ	0xFDE
 15454                           postdec2	equ	0xFDD
 15455                           fsr2h	equ	0xFDA
 15456                           fsr2l	equ	0xFD9
 15457                           status	equ	0xFD8
 15458                           
 15459 ;; *************** function i2_getRTC *****************
 15460 ;; Defined at:
 15461 ;;		line 44 in file "RTC.c"
 15462 ;; Parameters:    Size  Location     Type
 15463 ;;		None
 15464 ;; Auto vars:     Size  Location     Type
 15465 ;;  getRTC          2    3[COMRAM] int 
 15466 ;; Return value:  Size  Location     Type
 15467 ;;                  1    wreg      void 
 15468 ;; Registers used:
 15469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15470 ;; Tracked objects:
 15471 ;;		On entry : 0/0
 15472 ;;		On exit  : 0/0
 15473 ;;		Unchanged: 0/0
 15474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15479 ;;Total ram usage:        2 bytes
 15480 ;; Hardware stack levels used:    1
 15481 ;; Hardware stack levels required when called:    2
 15482 ;; This function calls:
 15483 ;;		i2_I2C_Master_Read
 15484 ;;		i2_I2C_Master_Start
 15485 ;;		i2_I2C_Master_Stop
 15486 ;;		i2_I2C_Master_Write
 15487 ;; This function is called by:
 15488 ;;		_printSortTimer
 15489 ;;		i2_printRTC
 15490 ;; This function uses a non-reentrant model
 15491 ;;
 15492                           
 15493                           	psect	text73
 15494  0029A0                     __ptext73:
 15495                           	opt stack 0
 15496  0029A0                     i2_getRTC:
 15497                           	opt stack 18
 15498                           
 15499                           ;RTC.c: 48: I2C_Master_Start();
 15500                           
 15501                           ;incstack = 0
 15502  0029A0  EC9B  F019         	call	i2_I2C_Master_Start	;wreg free
 15503                           
 15504                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 15505  0029A4  0E00               	movlw	0
 15506  0029A6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15507  0029A8  0ED0               	movlw	208
 15508  0029AA  6E02               	movwf	i2I2C_Master_Write@d,c
 15509  0029AC  EC86  F019         	call	i2_I2C_Master_Write	;wreg free
 15510                           
 15511                           ;RTC.c: 50: I2C_Master_Write(0x00);
 15512  0029B0  0E00               	movlw	0
 15513  0029B2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15514  0029B4  0E00               	movlw	0
 15515  0029B6  6E02               	movwf	i2I2C_Master_Write@d,c
 15516  0029B8  EC86  F019         	call	i2_I2C_Master_Write	;wreg free
 15517                           
 15518                           ;RTC.c: 51: I2C_Master_Stop();
 15519  0029BC  EC97  F019         	call	i2_I2C_Master_Stop	;wreg free
 15520                           
 15521                           ;RTC.c: 54: I2C_Master_Start();
 15522  0029C0  EC9B  F019         	call	i2_I2C_Master_Start	;wreg free
 15523                           
 15524                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 15525  0029C4  0E00               	movlw	0
 15526  0029C6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 15527  0029C8  0ED1               	movlw	209
 15528  0029CA  6E02               	movwf	i2I2C_Master_Write@d,c
 15529  0029CC  EC86  F019         	call	i2_I2C_Master_Write	;wreg free
 15530                           
 15531                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 15532  0029D0  0E00               	movlw	0
 15533  0029D2  6E05               	movwf	i2getRTC@i+1,c
 15534  0029D4  0E00               	movlw	0
 15535  0029D6  6E04               	movwf	i2getRTC@i,c
 15536  0029D8                     i2l4464:
 15537  0029D8  BE05               	btfsc	i2getRTC@i+1,7,c
 15538  0029DA  D006               	goto	i2l4468
 15539  0029DC  5005               	movf	i2getRTC@i+1,w,c
 15540  0029DE  E111               	bnz	i2l4474
 15541  0029E0  0E06               	movlw	6
 15542  0029E2  5C04               	subwf	i2getRTC@i,w,c
 15543  0029E4  B0D8               	btfsc	status,0,c
 15544  0029E6  D00D               	goto	i2l4474
 15545  0029E8                     i2l4468:
 15546                           
 15547                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 15548  0029E8  0E5B               	movlw	low _time
 15549  0029EA  2404               	addwf	i2getRTC@i,w,c
 15550  0029EC  6ED9               	movwf	fsr2l,c
 15551  0029EE  0E00               	movlw	high _time
 15552  0029F0  2005               	addwfc	i2getRTC@i+1,w,c
 15553  0029F2  6EDA               	movwf	fsr2h,c
 15554  0029F4  0E01               	movlw	1
 15555  0029F6  ECC8  F018         	call	i2_I2C_Master_Read
 15556  0029FA  6EDF               	movwf	indf2,c
 15557  0029FC  4A04               	infsnz	i2getRTC@i,f,c
 15558  0029FE  2A05               	incf	i2getRTC@i+1,f,c
 15559  002A00  D7EB               	goto	i2l4464
 15560  002A02                     i2l4474:
 15561                           
 15562                           ;RTC.c: 58: }
 15563                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 15564  002A02  0E00               	movlw	0
 15565  002A04  ECC8  F018         	call	i2_I2C_Master_Read
 15566  002A08  6E61               	movwf	_time+6,c
 15567                           
 15568                           ;RTC.c: 60: I2C_Master_Stop();
 15569  002A0A  EC97  F019         	call	i2_I2C_Master_Stop	;wreg free
 15570  002A0E  0012               	return		;funcret
 15571  002A10                     __end_ofi2_getRTC:
 15572                           	opt stack 0
 15573                           pclatu	equ	0xFFB
 15574                           pclath	equ	0xFFA
 15575                           tblptru	equ	0xFF8
 15576                           tblptrh	equ	0xFF7
 15577                           tblptrl	equ	0xFF6
 15578                           tablat	equ	0xFF5
 15579                           prodh	equ	0xFF4
 15580                           prodl	equ	0xFF3
 15581                           intcon	equ	0xFF2
 15582                           intcon2	equ	0xFF1
 15583                           intcon3	equ	0xFF0
 15584                           indf0	equ	0xFEF
 15585                           postinc0	equ	0xFEE
 15586                           fsr0h	equ	0xFEA
 15587                           fsr0l	equ	0xFE9
 15588                           wreg	equ	0xFE8
 15589                           postdec1	equ	0xFE5
 15590                           fsr1h	equ	0xFE2
 15591                           fsr1l	equ	0xFE1
 15592                           indf2	equ	0xFDF
 15593                           postinc2	equ	0xFDE
 15594                           postdec2	equ	0xFDD
 15595                           fsr2h	equ	0xFDA
 15596                           fsr2l	equ	0xFD9
 15597                           status	equ	0xFD8
 15598                           
 15599 ;; *************** function i2_I2C_Master_Write *****************
 15600 ;; Defined at:
 15601 ;;		line 49 in file "I2C.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  d               2    1[COMRAM] unsigned int 
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;		None
 15606 ;; Return value:  Size  Location     Type
 15607 ;;                  1    wreg      void 
 15608 ;; Registers used:
 15609 ;;		wreg, status,2, status,0, cstack
 15610 ;; Tracked objects:
 15611 ;;		On entry : 0/0
 15612 ;;		On exit  : 0/0
 15613 ;;		Unchanged: 0/0
 15614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;Total ram usage:        2 bytes
 15620 ;; Hardware stack levels used:    1
 15621 ;; Hardware stack levels required when called:    1
 15622 ;; This function calls:
 15623 ;;		i2_I2C_Master_Wait
 15624 ;; This function is called by:
 15625 ;;		i2_getRTC
 15626 ;; This function uses a non-reentrant model
 15627 ;;
 15628                           
 15629                           	psect	text74
 15630  00330C                     __ptext74:
 15631                           	opt stack 0
 15632  00330C                     i2_I2C_Master_Write:
 15633                           	opt stack 18
 15634                           
 15635                           ;I2C.c: 51: I2C_Master_Wait();
 15636                           
 15637                           ;incstack = 0
 15638  00330C  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15639                           
 15640                           ;I2C.c: 52: SSPBUF = d;
 15641  003310  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 15642  003314  0012               	return		;funcret
 15643  003316                     __end_ofi2_I2C_Master_Write:
 15644                           	opt stack 0
 15645                           pclatu	equ	0xFFB
 15646                           pclath	equ	0xFFA
 15647                           tblptru	equ	0xFF8
 15648                           tblptrh	equ	0xFF7
 15649                           tblptrl	equ	0xFF6
 15650                           tablat	equ	0xFF5
 15651                           prodh	equ	0xFF4
 15652                           prodl	equ	0xFF3
 15653                           intcon	equ	0xFF2
 15654                           intcon2	equ	0xFF1
 15655                           intcon3	equ	0xFF0
 15656                           indf0	equ	0xFEF
 15657                           postinc0	equ	0xFEE
 15658                           fsr0h	equ	0xFEA
 15659                           fsr0l	equ	0xFE9
 15660                           wreg	equ	0xFE8
 15661                           postdec1	equ	0xFE5
 15662                           fsr1h	equ	0xFE2
 15663                           fsr1l	equ	0xFE1
 15664                           indf2	equ	0xFDF
 15665                           postinc2	equ	0xFDE
 15666                           postdec2	equ	0xFDD
 15667                           fsr2h	equ	0xFDA
 15668                           fsr2l	equ	0xFD9
 15669                           status	equ	0xFD8
 15670                           
 15671 ;; *************** function i2_I2C_Master_Stop *****************
 15672 ;; Defined at:
 15673 ;;		line 43 in file "I2C.c"
 15674 ;; Parameters:    Size  Location     Type
 15675 ;;		None
 15676 ;; Auto vars:     Size  Location     Type
 15677 ;;		None
 15678 ;; Return value:  Size  Location     Type
 15679 ;;                  1    wreg      void 
 15680 ;; Registers used:
 15681 ;;		wreg, status,2, status,0, cstack
 15682 ;; Tracked objects:
 15683 ;;		On entry : 0/0
 15684 ;;		On exit  : 0/0
 15685 ;;		Unchanged: 0/0
 15686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15691 ;;Total ram usage:        0 bytes
 15692 ;; Hardware stack levels used:    1
 15693 ;; Hardware stack levels required when called:    1
 15694 ;; This function calls:
 15695 ;;		i2_I2C_Master_Wait
 15696 ;; This function is called by:
 15697 ;;		i2_getRTC
 15698 ;; This function uses a non-reentrant model
 15699 ;;
 15700                           
 15701                           	psect	text75
 15702  00332E                     __ptext75:
 15703                           	opt stack 0
 15704  00332E                     i2_I2C_Master_Stop:
 15705                           	opt stack 18
 15706                           
 15707                           ;I2C.c: 45: I2C_Master_Wait();
 15708                           
 15709                           ;incstack = 0
 15710  00332E  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15711                           
 15712                           ;I2C.c: 46: PEN = 1;
 15713  003332  84C5               	bsf	4037,2,c	;volatile
 15714  003334  0012               	return		;funcret
 15715  003336                     __end_ofi2_I2C_Master_Stop:
 15716                           	opt stack 0
 15717                           pclatu	equ	0xFFB
 15718                           pclath	equ	0xFFA
 15719                           tblptru	equ	0xFF8
 15720                           tblptrh	equ	0xFF7
 15721                           tblptrl	equ	0xFF6
 15722                           tablat	equ	0xFF5
 15723                           prodh	equ	0xFF4
 15724                           prodl	equ	0xFF3
 15725                           intcon	equ	0xFF2
 15726                           intcon2	equ	0xFF1
 15727                           intcon3	equ	0xFF0
 15728                           indf0	equ	0xFEF
 15729                           postinc0	equ	0xFEE
 15730                           fsr0h	equ	0xFEA
 15731                           fsr0l	equ	0xFE9
 15732                           wreg	equ	0xFE8
 15733                           postdec1	equ	0xFE5
 15734                           fsr1h	equ	0xFE2
 15735                           fsr1l	equ	0xFE1
 15736                           indf2	equ	0xFDF
 15737                           postinc2	equ	0xFDE
 15738                           postdec2	equ	0xFDD
 15739                           fsr2h	equ	0xFDA
 15740                           fsr2l	equ	0xFD9
 15741                           status	equ	0xFD8
 15742                           
 15743 ;; *************** function i2_I2C_Master_Start *****************
 15744 ;; Defined at:
 15745 ;;		line 31 in file "I2C.c"
 15746 ;; Parameters:    Size  Location     Type
 15747 ;;		None
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;		None
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  1    wreg      void 
 15752 ;; Registers used:
 15753 ;;		wreg, status,2, status,0, cstack
 15754 ;; Tracked objects:
 15755 ;;		On entry : 0/0
 15756 ;;		On exit  : 0/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;Total ram usage:        0 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; Hardware stack levels required when called:    1
 15766 ;; This function calls:
 15767 ;;		i2_I2C_Master_Wait
 15768 ;; This function is called by:
 15769 ;;		i2_getRTC
 15770 ;; This function uses a non-reentrant model
 15771 ;;
 15772                           
 15773                           	psect	text76
 15774  003336                     __ptext76:
 15775                           	opt stack 0
 15776  003336                     i2_I2C_Master_Start:
 15777                           	opt stack 18
 15778                           
 15779                           ;I2C.c: 33: I2C_Master_Wait();
 15780                           
 15781                           ;incstack = 0
 15782  003336  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15783                           
 15784                           ;I2C.c: 34: SEN = 1;
 15785  00333A  80C5               	bsf	4037,0,c	;volatile
 15786  00333C  0012               	return		;funcret
 15787  00333E                     __end_ofi2_I2C_Master_Start:
 15788                           	opt stack 0
 15789                           pclatu	equ	0xFFB
 15790                           pclath	equ	0xFFA
 15791                           tblptru	equ	0xFF8
 15792                           tblptrh	equ	0xFF7
 15793                           tblptrl	equ	0xFF6
 15794                           tablat	equ	0xFF5
 15795                           prodh	equ	0xFF4
 15796                           prodl	equ	0xFF3
 15797                           intcon	equ	0xFF2
 15798                           intcon2	equ	0xFF1
 15799                           intcon3	equ	0xFF0
 15800                           indf0	equ	0xFEF
 15801                           postinc0	equ	0xFEE
 15802                           fsr0h	equ	0xFEA
 15803                           fsr0l	equ	0xFE9
 15804                           wreg	equ	0xFE8
 15805                           postdec1	equ	0xFE5
 15806                           fsr1h	equ	0xFE2
 15807                           fsr1l	equ	0xFE1
 15808                           indf2	equ	0xFDF
 15809                           postinc2	equ	0xFDE
 15810                           postdec2	equ	0xFDD
 15811                           fsr2h	equ	0xFDA
 15812                           fsr2l	equ	0xFD9
 15813                           status	equ	0xFD8
 15814                           
 15815 ;; *************** function i2_I2C_Master_Read *****************
 15816 ;; Defined at:
 15817 ;;		line 55 in file "I2C.c"
 15818 ;; Parameters:    Size  Location     Type
 15819 ;;  a               1    wreg     unsigned char 
 15820 ;; Auto vars:     Size  Location     Type
 15821 ;;  a               1    1[COMRAM] unsigned char 
 15822 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 15823 ;; Return value:  Size  Location     Type
 15824 ;;                  1    wreg      unsigned char 
 15825 ;; Registers used:
 15826 ;;		wreg, status,2, status,0, cstack
 15827 ;; Tracked objects:
 15828 ;;		On entry : 0/0
 15829 ;;		On exit  : 0/0
 15830 ;;		Unchanged: 0/0
 15831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;Total ram usage:        2 bytes
 15837 ;; Hardware stack levels used:    1
 15838 ;; Hardware stack levels required when called:    1
 15839 ;; This function calls:
 15840 ;;		i2_I2C_Master_Wait
 15841 ;; This function is called by:
 15842 ;;		i2_getRTC
 15843 ;; This function uses a non-reentrant model
 15844 ;;
 15845                           
 15846                           	psect	text77
 15847  003190                     __ptext77:
 15848                           	opt stack 0
 15849  003190                     i2_I2C_Master_Read:
 15850                           	opt stack 18
 15851                           
 15852                           ;incstack = 0
 15853                           ;i2I2C_Master_Read@a stored from wreg
 15854  003190  6E02               	movwf	i2I2C_Master_Read@a,c
 15855                           
 15856                           ;I2C.c: 57: unsigned char temp;
 15857                           ;I2C.c: 58: I2C_Master_Wait();
 15858  003192  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15859                           
 15860                           ;I2C.c: 59: RCEN = 1;
 15861  003196  86C5               	bsf	4037,3,c	;volatile
 15862                           
 15863                           ;I2C.c: 60: I2C_Master_Wait();
 15864  003198  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15865                           
 15866                           ;I2C.c: 61: temp = SSPBUF;
 15867  00319C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 15868                           
 15869                           ;I2C.c: 62: I2C_Master_Wait();
 15870  0031A0  EC5C  F019         	call	i2_I2C_Master_Wait	;wreg free
 15871                           
 15872                           ;I2C.c: 63: ACKDT = (a)?0:1;
 15873  0031A4  5002               	movf	i2I2C_Master_Read@a,w,c
 15874  0031A6  A4D8               	btfss	status,2,c
 15875  0031A8  D002               	goto	i2u272_40
 15876  0031AA  8AC5               	bsf	4037,5,c	;volatile
 15877  0031AC  D001               	goto	i2l4174
 15878  0031AE                     i2u272_40:
 15879  0031AE  9AC5               	bcf	4037,5,c	;volatile
 15880  0031B0                     i2l4174:
 15881                           
 15882                           ;I2C.c: 64: ACKEN = 1;
 15883  0031B0  88C5               	bsf	4037,4,c	;volatile
 15884                           
 15885                           ;I2C.c: 65: return temp;
 15886  0031B2  5003               	movf	i2I2C_Master_Read@temp,w,c
 15887  0031B4  0012               	return	
 15888  0031B6                     __end_ofi2_I2C_Master_Read:
 15889                           	opt stack 0
 15890                           pclatu	equ	0xFFB
 15891                           pclath	equ	0xFFA
 15892                           tblptru	equ	0xFF8
 15893                           tblptrh	equ	0xFF7
 15894                           tblptrl	equ	0xFF6
 15895                           tablat	equ	0xFF5
 15896                           prodh	equ	0xFF4
 15897                           prodl	equ	0xFF3
 15898                           intcon	equ	0xFF2
 15899                           intcon2	equ	0xFF1
 15900                           intcon3	equ	0xFF0
 15901                           indf0	equ	0xFEF
 15902                           postinc0	equ	0xFEE
 15903                           fsr0h	equ	0xFEA
 15904                           fsr0l	equ	0xFE9
 15905                           wreg	equ	0xFE8
 15906                           postdec1	equ	0xFE5
 15907                           fsr1h	equ	0xFE2
 15908                           fsr1l	equ	0xFE1
 15909                           indf2	equ	0xFDF
 15910                           postinc2	equ	0xFDE
 15911                           postdec2	equ	0xFDD
 15912                           fsr2h	equ	0xFDA
 15913                           fsr2l	equ	0xFD9
 15914                           status	equ	0xFD8
 15915                           
 15916 ;; *************** function i2_I2C_Master_Wait *****************
 15917 ;; Defined at:
 15918 ;;		line 26 in file "I2C.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;		None
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;		None
 15923 ;; Return value:  Size  Location     Type
 15924 ;;                  1    wreg      void 
 15925 ;; Registers used:
 15926 ;;		wreg, status,2, status,0
 15927 ;; Tracked objects:
 15928 ;;		On entry : 0/0
 15929 ;;		On exit  : 0/0
 15930 ;;		Unchanged: 0/0
 15931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;Total ram usage:        1 bytes
 15937 ;; Hardware stack levels used:    1
 15938 ;; This function calls:
 15939 ;;		Nothing
 15940 ;; This function is called by:
 15941 ;;		i2_I2C_Master_Start
 15942 ;;		i2_I2C_Master_Stop
 15943 ;;		i2_I2C_Master_Write
 15944 ;;		i2_I2C_Master_Read
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           	psect	text78
 15949  0032B8                     __ptext78:
 15950                           	opt stack 0
 15951  0032B8                     i2_I2C_Master_Wait:
 15952                           	opt stack 18
 15953  0032B8                     i2l68:
 15954  0032B8  B4C7               	btfsc	4039,2,c	;volatile
 15955  0032BA  D7FE               	goto	i2l68
 15956  0032BC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 15957  0032C0  0E1F               	movlw	31
 15958  0032C2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 15959  0032C4  B4D8               	btfsc	status,2,c
 15960  0032C6  0012               	return	
 15961  0032C8  D7F7               	goto	i2l68
 15962  0032CA                     __end_ofi2_I2C_Master_Wait:
 15963                           	opt stack 0
 15964                           pclatu	equ	0xFFB
 15965                           pclath	equ	0xFFA
 15966                           tblptru	equ	0xFF8
 15967                           tblptrh	equ	0xFF7
 15968                           tblptrl	equ	0xFF6
 15969                           tablat	equ	0xFF5
 15970                           prodh	equ	0xFF4
 15971                           prodl	equ	0xFF3
 15972                           intcon	equ	0xFF2
 15973                           intcon2	equ	0xFF1
 15974                           intcon3	equ	0xFF0
 15975                           indf0	equ	0xFEF
 15976                           postinc0	equ	0xFEE
 15977                           fsr0h	equ	0xFEA
 15978                           fsr0l	equ	0xFE9
 15979                           wreg	equ	0xFE8
 15980                           postdec1	equ	0xFE5
 15981                           fsr1h	equ	0xFE2
 15982                           fsr1l	equ	0xFE1
 15983                           indf2	equ	0xFDF
 15984                           postinc2	equ	0xFDE
 15985                           postdec2	equ	0xFDD
 15986                           fsr2h	equ	0xFDA
 15987                           fsr2l	equ	0xFD9
 15988                           status	equ	0xFD8
 15989                           pclatu	equ	0xFFB
 15990                           pclath	equ	0xFFA
 15991                           tblptru	equ	0xFF8
 15992                           tblptrh	equ	0xFF7
 15993                           tblptrl	equ	0xFF6
 15994                           tablat	equ	0xFF5
 15995                           prodh	equ	0xFF4
 15996                           prodl	equ	0xFF3
 15997                           intcon	equ	0xFF2
 15998                           intcon2	equ	0xFF1
 15999                           intcon3	equ	0xFF0
 16000                           indf0	equ	0xFEF
 16001                           postinc0	equ	0xFEE
 16002                           fsr0h	equ	0xFEA
 16003                           fsr0l	equ	0xFE9
 16004                           wreg	equ	0xFE8
 16005                           postdec1	equ	0xFE5
 16006                           fsr1h	equ	0xFE2
 16007                           fsr1l	equ	0xFE1
 16008                           indf2	equ	0xFDF
 16009                           postinc2	equ	0xFDE
 16010                           postdec2	equ	0xFDD
 16011                           fsr2h	equ	0xFDA
 16012                           fsr2l	equ	0xFD9
 16013                           status	equ	0xFD8
 16014                           
 16015                           	psect	rparam
 16016  0000                     pclatu	equ	0xFFB
 16017                           pclath	equ	0xFFA
 16018                           tblptru	equ	0xFF8
 16019                           tblptrh	equ	0xFF7
 16020                           tblptrl	equ	0xFF6
 16021                           tablat	equ	0xFF5
 16022                           prodh	equ	0xFF4
 16023                           prodl	equ	0xFF3
 16024                           intcon	equ	0xFF2
 16025                           intcon2	equ	0xFF1
 16026                           intcon3	equ	0xFF0
 16027                           indf0	equ	0xFEF
 16028                           postinc0	equ	0xFEE
 16029                           fsr0h	equ	0xFEA
 16030                           fsr0l	equ	0xFE9
 16031                           wreg	equ	0xFE8
 16032                           postdec1	equ	0xFE5
 16033                           fsr1h	equ	0xFE2
 16034                           fsr1l	equ	0xFE1
 16035                           indf2	equ	0xFDF
 16036                           postinc2	equ	0xFDE
 16037                           postdec2	equ	0xFDD
 16038                           fsr2h	equ	0xFDA
 16039                           fsr2l	equ	0xFD9
 16040                           status	equ	0xFD8
 16041                           
 16042                           	psect	temp
 16043  00007F                     btemp:
 16044                           	opt stack 0
 16045  00007F                     	ds	1
 16046  0000                     int$flags	set	btemp
 16047                           pclatu	equ	0xFFB
 16048                           pclath	equ	0xFFA
 16049                           tblptru	equ	0xFF8
 16050                           tblptrh	equ	0xFF7
 16051                           tblptrl	equ	0xFF6
 16052                           tablat	equ	0xFF5
 16053                           prodh	equ	0xFF4
 16054                           prodl	equ	0xFF3
 16055                           intcon	equ	0xFF2
 16056                           intcon2	equ	0xFF1
 16057                           intcon3	equ	0xFF0
 16058                           indf0	equ	0xFEF
 16059                           postinc0	equ	0xFEE
 16060                           fsr0h	equ	0xFEA
 16061                           fsr0l	equ	0xFE9
 16062                           wreg	equ	0xFE8
 16063                           postdec1	equ	0xFE5
 16064                           fsr1h	equ	0xFE2
 16065                           fsr1l	equ	0xFE1
 16066                           indf2	equ	0xFDF
 16067                           postinc2	equ	0xFDE
 16068                           postdec2	equ	0xFDD
 16069                           fsr2h	equ	0xFDA
 16070                           fsr2l	equ	0xFD9
 16071                           status	equ	0xFD8


Data Sizes:
    Strings     593
    Constant    27
    Data        8
    BSS         114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     126
    BANK0           128     90     128
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   66017
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   10918
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0    9426
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    1285
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    1285
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    1285
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0    7650
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    6903
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   15632
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   14782
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   31144
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    9575
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    5207
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    5072
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      30       7       18.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12E      34        0.0%
DATA                 0      0     12E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 05:45:34 2017

                   i2_I2C_Master_Start 3336                     i2_I2C_Master_Write 330C  
                                   _ID 1FC4                                     l68 32A4  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0078                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l179 00E8                                    l480 270C  
                                  l902 2310                                    l915 3270  
                                  l924 1E7A                                    l597 1114  
                                  l776 28F6                                    l982 0AFE  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E8  
                                  _sel 00FD                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EE        __end_of_change_state_to_menu_11 2F74  
      __end_of_change_state_to_menu_12 2E16        __end_of_change_state_to_menu_22 2DDE  
      __end_of_change_state_to_menu_23 2F44           _f_can_coming_to_distribution 0074  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 3064  
      __end_of_change_state_to_logs_12 3034        __end_of_change_state_to_logs_22 3004  
      __end_of_change_state_to_logs_23 30C0        __end_of_change_state_to_logs_33 2FD4  
      __end_of_change_state_to_logs_34 2FA4                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1429 28B0  
                                 l1439 2AD0                                   l1376 253E  
                                 l4122 2860                                   l4106 3138  
                                 l4124 286C                                   l4300 0A5C  
                                 l4134 28A2                                   l4126 2872  
                                 l4150 2AC2                                   l4142 2A8C  
                                 l4310 0ABE                                   l4302 0A62  
                                 l4144 2A98                                   l4304 0A7A  
                                 l4146 2A9E                                   l4330 0B50  
                                 l4314 0AC4                                   l4402 2814  
                                 l5202 22AE                                   l4332 0B56  
                                 l4308 0AA6                                   l4260 08DA  
                                 l6004 1DA0                                   l6100 26EA  
                                 l5310 2408                                   l4350 0BB4  
                                 l4326 0B36                                   l4262 08EC  
                                 l6030 1E34                                   l6006 1DB4  
                                 l4246 30D4                                   l6110 2708  
                                 l5320 2438                                   l5304 23F2  
                                 l4344 0B92                                   l4280 09A6  
                                 l4272 092A                                   l4256 08C6  
                                 l4088 308A                                   l4408 2834  
                                 l4440 24C2                                   l4248 30E6  
                                 l4370 0C38                                   l4362 0C10  
                                 l4354 0BEC                                   l4290 09E4  
                                 l4266 08F6                                   l4442 24D2  
                                 l4426 28E2                                   l5234 2062  
                                 l6114 270E                                   l5316 2426  
                                 l5332 2476                                   l4380 0C6C  
                                 l4356 0BF6                                   l4292 09EA  
                                 l5500 0260                                   l4452 252C  
                                 l4444 24D8                                   l4428 290C  
                                 l5244 2092                                   l5252 20AA  
                                 l6108 2702                                   l5318 2432  
                                 l4374 0C52                                   l4390 2E20  
                                 l5430 0118                                   l5270 1E9A  
                                 l5336 248A                                   l5328 2468  
                                 l5360 264C                                   l5352 2626  
                                 l4384 0CC4                                   l4368 0C2C  
                                 l4288 09D8                                   l4392 2E2C  
                                 l5600 061C                                   l5504 026A  
                                 l5424 0100                                   l5272 1EB4  
                                 l5280 1F02                                   l5248 209E  
                                 l4378 0C66                                   l4298 0A50  
                                 l4386 0CD0                                   l5530 032E  
                                 l5442 014C                                   l5434 0122  
                                 l5426 0106                                   l5274 1ECE  
                                 l5282 1F30                                   l5372 2692  
                                 l5364 2670                                   l5356 263A  
                                 l5348 2616                                   l4660 111E  
                                 l5604 0626                                   l5540 03C4  
                                 l5532 034C                                   l5524 02D4  
                                 l5508 0282                                   l5276 1EE8  
                                 l5188 2276                                   l5358 2646  
                                 l4398 27FE                                   l4670 11B4  
                                 l4662 113C                                   l4654 1092  
                                 l5702 07EA                                   l5622 0672  
                                 l5614 0650                                   l5542 03E2  
                                 l5534 036A                                   l5526 02F2  
                                 l5462 01B4                                   l5438 013A  
                                 l5368 267E                                   l4680 124A  
                                 l4672 11D2                                   l4664 115A  
                                 l5720 0848                                   l5640 06D8  
                                 l5608 063E                                   l5544 0400  
                                 l5536 0388                                   l5528 0310  
                                 l5552 045A                                   l5456 01A4  
                                 l5472 01DA                                   l4824 255E  
                                 l6096 26DE                                   l4682 1268  
                                 l4674 11F0                                   l4666 1178  
                                 l5618 065A                                   l5562 050A  
                                 l5546 041E                                   l5538 03A6  
                                 l5554 04BE                                   l5490 0236  
                                 l5466 01CC                                   l5458 01AA  
                                 l4834 25EA                                   l6098 26E4  
                                 l4676 120E                                   l4668 1196  
                                 l5724 0852                                   l5644 06E2  
                                 l5580 0556                                   l5572 0534  
                                 l5548 043C                                   l4828 2574  
                                 l4678 122C                                   l4686 1286  
                                 l5742 089E                                   l5734 087C  
                                 l5662 072E                                   l5654 070C  
                                 l5566 0522                                   l5558 0500  
                                 l5494 024E                                   l5486 022C  
                                 l4870 237C                                   _ADIE 007CEE  
                                 l4688 12E4                                   l5728 086A  
                                 l5680 0794                                   l5648 06FA  
                                 l5576 053E                                   _ADFM 007E07  
                                 l5738 0886                                   l5658 0716  
                                 l5746 08AA                                   l4882 23B4  
                                 l4874 2386                                   l5684 079E  
                                 l5694 07C8                                   l4982 278A  
                                 l4886 23BE                                   l4878 239E  
                                 l5688 07B6                                   l5698 07D2  
                                 l4978 2774                                   l4988 27B6  
                                 _ADON 007E10                                   STR_1 FE13  
                                 STR_2 FF86                                   STR_3 FE01  
                                 STR_4 FF68                                   STR_5 FE01  
                                 STR_6 FF46                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u2620 3088  
                                 u3520 1114                                   u3505 2B0A  
                                 u2910 0A9C                                   u5207 1F3E  
                                 u3480 2D14                                   u5217 1F72  
                                 u3481 2D10                                   u5137 2222  
                                 u3490 2D16                                   u5307 01BC  
                                 u5227 2332                                   u5147 22DE  
                                 _PEIE 007F96                                   u2917 0A92  
                                 u5317 01E8                                   u5237 238E  
                                 u5157 2CC4                                   u2870 0A24  
                                 u5407 068C                                   u5327 023E  
                                 u5247 23C6                                   u5167 1FDE  
                                 u5417 06EA                                   u5337 0272  
                                 u5257 2D26                                   u5177 203A  
                                 u3850 1FF8                                   u5507 2A3A  
                                 u5427 071E                                   u5347 029C  
                                 u5267 2D5A                                   u5187 20CE  
                                 _RCEN 007E2B                                   u5517 2A66  
                                 u2877 0A1A                                   u5437 0748  
                                 u5357 0512                                   u5277 002A  
                                 u5197 30DC                                   u5527 2A70  
                                 u5447 07A6                                   u5367 0546  
                                 u5287 012A                                   u3880 2052  
                                 u5457 07DA                                   u5377 0570  
                                 u5297 0166                                   u3858 1FFC  
                                 u5467 0804                                   u5387 062E  
                                 u5477 085A                                   u5397 0662  
                                 u5487 088E                                   u3888 2056  
                                 u5497 2A30                                   u4970 1E7A  
                                 i2l68 32B8                                   _RSEN 007E29  
                          _stopSignals 3278                                   _Test 333E  
                                 _back 0064                                   _main 269C  
                                 _down 0070                                   _keys FD93  
                                 _time 005B                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 31FE                                   btemp 007F  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EC                        __end_ofi2_putch 32F6  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 15E8                            i2_lcdNibble 2B94  
                      __end_of_Loading 22EE                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 23D6                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 2494                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FDAE  
                                STR_14 FFD7                                  STR_22 FFAC  
                                STR_30 FF57                                  STR_15 FFD3  
                                STR_23 FF78                                  STR_31 FF35  
                                STR_16 FFE3                                  STR_24 FE9C  
                                STR_32 FE7A                                  STR_40 FE36  
                                STR_17 FFF3                                  STR_33 FE8B  
                                STR_41 FE25                                  STR_25 FDEE  
                                STR_18 FFF7                                  STR_34 FF24  
                                STR_50 FF02                                  STR_42 FEE0  
                                STR_26 FEAD                                  STR_43 FEE0  
                                STR_35 FF24                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FDDB  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FEBE                                  STR_36 FE69  
                                STR_44 FE47                        __end_of___awmod 269C  
                                STR_45 FE36                                  STR_37 FE7A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FDEB                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_38 FF13  
                                STR_46 FEF1                                  STR_47 FEF1  
                                STR_55 FFFB                                  STR_63 FDAE  
                                STR_39 FECF                                  STR_56 FFDF  
                                STR_64 FFA1                                  STR_48 FE58  
                                STR_49 FE47                                  STR_57 FFD7  
                                STR_65 FF94                                  STR_58 FFD3  
                                STR_66 FDC6                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_68 FFB6  
                                ?_sort 0001                        __end_of___lldiv 2550  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                        __end_of___lwdiv 28BA  
                      __end_of___lwmod 2ADA                                  i2l256 15E4  
                                i2l833 1CAC                                  i2l915 329C  
                                i2l597 1676                                  i2l837 1CF8  
                                i2l839 1D18                        ___awdiv@counter 008A  
                                i2l982 0ECA                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 32EA                        __end_of_handler 1D54  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 30EC  
                      __end_of_initLCD 2D64                         __CFG_EBTRB$OFF 000000  
                                _debug 00DE                             i2isdigit@c 0003  
                      __end_of_loadRTC 27BE                        __end_of_readMAG 2D1E  
                      __end_of_dpowers FDAE                                  _first 00E6  
                                _enter 0072                        __end_of_isdigit 3142  
                                _input 007E                                  _putch 32CA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 3190                       __end_ofi2_getRTC 2A10  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 105E                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 2EB4  
                          Loading@addr 00B3                       _count_can_no_lab 0066  
                 __size_of_EEPROM_read 0018                        __initialization 2C3C  
                         __end_of_Test 3340                     __size_ofi2_lcdInst 000C  
                         __end_of_main 2732                           __end_of_keys FDA4  
                         __end_of_sort 3220                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 0080    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B6                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESH 000FC4                                 _EEADRH 000FAA  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 2EE4              i2_change_state_to_menu_22 2EB4  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1429 2C32  
                               i2l1439 2D9C                                 i2l4210 2C08  
                               i2l4220 2C28                                 i2l4212 2C0C  
                               i2l4230 2D7A                                 i2l5110 1B46  
                               i2l4208 2C00                                 i2l4232 2D7E  
                               i2l5104 1B2E                                 i2l5040 1A48  
                               i2l5032 1A2E                                 i2l5122 1B68  
                               i2l5114 1B50                                 i2l5042 1A58  
                               i2l5050 1A66                                 i2l4236 2D92  
                               i2l4228 2D72                                 i2l5140 1BAC  
                               i2l5132 1B88                                 i2l5108 1B42  
                               i2l5060 1A8C                                 i2l5044 1A5C  
                               i2l4174 31B0                                 i2l4502 0D1E  
                               i2l5062 1A92                                 i2l5054 1A7A  
                               i2l5150 1BC8                                 i2l5144 1BBE  
                               i2l5136 1B9A                                 i2l5128 1B76  
                               i2l5080 1AE2                                 i2l5064 1A98  
                               i2l5056 1A80                                 i2l4610 0FD4  
                               i2l6050 183A                                 i2l5058 1A86  
                               i2l4620 103A                                 i2l4604 0FB8  
                               i2l4540 0E54                                 i2l4524 0DDA  
                               i2l4516 0DB2                                 i2l4508 0D50  
                               i2l5068 1A9E                                 i2l4198 3258  
                               i2l4606 0FC0                                 i2l4614 0FE6  
                               i2l4534 0E32                                 i2l4526 0DE4  
                               i2l4550 0E94                                 i2l4622 1042  
                               i2l6046 182A                                 i2l5094 1B08  
                               i2l4464 29D8                                 i2l4616 0FEC  
                               i2l4544 0E7E                                 i2l4536 0E3C  
                               i2l4528 0DE8                                 i2l6056 1894  
                               i2l5088 1AFA                                 i2l6152 1C80  
                               i2l4474 2A02                                 i2l4562 0EF8  
                               i2l4546 0E90                                 i2l4538 0E42  
                               i2l6066 1956                                 i2l5098 1B24  
                               i2l4626 2E8C                                 i2l6410 15BA  
                               i2l6138 1C64                                 i2l4468 29E8  
                               i2l4580 0F46                                 i2l4492 0CFA  
                               i2l4804 21A8                                 i2l4628 2E94  
                               i2l6412 15D6                                 i2l4590 0F84  
                               i2l4566 0F10                                 i2l6174 1CCA  
                               i2l4592 0F8C                                 i2l4568 0F14  
                               i2l4496 0D0A                                 i2l4816 21EC  
                               i2l4808 21B8                                 i2l6416 1AB6  
                               i2l6408 1598                                 i2l6176 1CCC  
                               i2l4586 0F60                                 i2l4498 0D18  
                               i2l6418 1AD2                                 i2l4930 1614  
                               i2l5810 13FA                                 i2l5802 13DE  
                               i2l4940 16AC                                 i2l4598 0FA2  
                               i2l4950 171A                                 i2l4942 16C2  
                               i2l5902 156C                                 i2l5830 1448  
                               i2l5822 142C                                 i2l5814 1408  
                               i2l5806 13EC                                 i2l6198 1D16  
                               i2l4952 1730                                 i2l4944 16D8  
                               i2l4936 1680                                 i2l5760 1358  
                               i2l4954 1746                                 i2l4946 16EE  
                               i2l4938 1696                                 i2l4962 1788  
                               i2l5850 1496                                 i2l5842 147A  
                               i2l5834 1456                                 i2l5826 143A  
                               i2l5818 1416                                 i2l5770 137A  
                               i2l5762 135E                                 i2l4956 175C  
                               i2l4948 1704                                 i2l4964 17E2  
                               i2l5908 157A                                 i2l4958 1772  
                               i2l5870 14EC                                 i2l5862 14C8  
                               i2l5854 14AC                                 i2l5846 1488  
                               i2l5838 146C                                 i2l5790 13B2  
                               i2l5774 1388                                 i2l5766 136C  
                               i2l5890 153A                                 i2l5882 1516  
                               i2l5874 14FA                                 i2l5866 14D6  
                               i2l5858 14BA                                 i2l5794 13C0  
                               i2l5786 13A4                                 i2l5778 1396  
                               i2l5894 1548                                 i2l5886 152C  
                               i2l5878 1508                                 i2l5798 13D0  
                               i2l5898 1556                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 31FE                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 1FC4  
                               ___wmul 2E4C                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 27BE  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 3242                                 _initUI 31B6  
                               _logRun 1D54                                 clear_0 2C62  
                               clear_1 2C6E                                 clear_2 2C7A  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 08B8                              ??_handler 004B  
              __size_of_initGlobalVars 0070                           ?_retrieveLog 0007  
                               _strcpy 2E16                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 316A  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 3142  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 2C3C  
                     __end_of_printRTC 1328                           __mediumconst FD92  
                    __end_ofi2___lwmod 2DA6                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                      __end_ofi2_lcdInst 3302  
                    __end_ofi2_isdigit 3260                             __accesstop 0080  
              __end_of__initialization 2C80                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                        i2_EEPROM_read 328E                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 3316  
                          i2printRTC@i 0041                          _initSortTimer 2550  
          __end_of_updateServoPosition 2930                          __end_of_putch 32DA  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 20EA                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 3118          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 30EC                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 006A                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 22EE  
                              UI@F3220 0128               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_410 00CB                                UI@i_406 00C9  
                              UI@i_440 00D2                                UI@i_432 00CE  
                              UI@i_441 00D3                                UI@i_433 00CF  
                              UI@i_409 00CA                                UI@i_444 00D4  
                              UI@i_436 00D0                                UI@i_428 00CC  
                              UI@i_445 00D5                                UI@i_437 00D1  
                              UI@i_429 00CD                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                              ?_printf 008E                                _UI$2004 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 32EA  
                            ?_initTime 0080                        _f_loadingNewCan 00E4  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2A78  
                              _Loading 2204            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 23D6                                ___awmod 25FA  
                           _initServos 2C8A                                ___lldiv 2494  
                      __size_of___wmul 0036                                ___lwdiv 2842  
                              ___lwmod 2A78                        __size_of_getRTC 0084  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                                __pcinit 2C3C  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 2930                                _lcdInst 32DA  
                              _handler 0008                                __ptext0 269C  
                              __ptext1 3278                                __ptext2 31FE  
                              __ptext3 2204                                __ptext4 2550  
                              __ptext5 2C8A                                __ptext6 2930  
                              __ptext7 1FC4                                __ptext8 2CD4  
                              __ptext9 30C0                        __size_of_printf 0438  
                              _readADC 30C0                        __size_of_strcpy 0036  
                              _initLCD 2D1E                                _cur_can 006E  
                              _loadRTC 2732                                _readMAG 2CD4  
                              _dpowers FDA4                                _isdigit 3118  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 1E90  
                       __pintcode_body 1BF6                   end_of_initialization 2C80  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 1BF6  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 29A0  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1BF6  
                __end_of_machineConfig 2B94                             _updateMenu 1328  
                    i2_I2C_Master_Read 3190                              _IR_signal 0062  
                    i2_I2C_Master_Wait 32B8                      i2_I2C_Master_Stop 332E  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F4  
                            i2___lwdiv 2BEA                              i2___lwmod 2D64  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 181E  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 32F6                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 3242  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 3278  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 2E82                         __end_of_getRTC 2842  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 31DA  
                       __end_of_logRun 1E90                       i2___wmul@product 0005  
                       __end_of_printf 0CF0                           i2printf@flag 0026  
                       __end_of_strcpy 2E4C              __end_ofi2_I2C_Master_Read 31B6  
            __end_ofi2_I2C_Master_Wait 32CA                           i2printf@prec 001D  
                  start_initialization 2C3C              __end_ofi2_I2C_Master_Stop 3336  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0068            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0070                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1306 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK1 0128  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_logRun 00B1                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2124 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1645 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 004A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 006C  
                          _EEPROM_read 3260                       _I2C_Master_Start 3326  
                            _f_lastCan 0126                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 3302  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FD92                              _lcdNibble 2A10  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0076  
                            _cur_state 00DC                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0126  
                          __size_of_UI 08A6             __end_ofi2_I2C_Master_Start 333E  
           __end_ofi2_I2C_Master_Write 3316                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1A10                            ??i2_isdigit 0001  
                             i2u324_40 0E16                               i2u500_40 1950  
                             i2u324_47 0E0C                               i2u272_40 31AE  
                             i2u328_40 0E76                               i2u328_47 0E6C  
                             _PIR2bits 000FA1                               i2u365_40 1676  
                             i2u553_47 1A4E                               i2u554_47 2BAC  
                             i2u555_47 2BB6                               i2u556_47 2BD8  
                             i2u557_47 2BE2                    __size_of_updateMenu 02C0  
                       _log_completion 00EA                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 007A  
                            _was_low_3 007C                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 316A  
                        lcdNibble@data 0081                               i2_getRTC 29A0  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0CF0  
                             i2_strcpy 2E82                    I2C_Master_Read@temp 0082  
                            copy_data0 2C50                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 32A4  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 00EA  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                  __end_of_initSortTimer 25FA  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 2F44  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 2DDE  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 2DA6  
              _change_state_to_menu_23 2F14                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 3034                _change_state_to_logs_12 3004  
              _change_state_to_logs_22 2FD4                _change_state_to_logs_23 3092  
              _change_state_to_logs_33 2FA4                _change_state_to_logs_34 2F74  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1D4C                        _I2C_Master_Init 2ADA  
                     __size_of_readADC 002C                        _I2C_Master_Read 3064  
                     __size_of_initLCD 0046                           _f_ID_receive 00E0  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004A  
                      _I2C_Master_Wait 32A4                        _I2C_Master_Stop 331E  
                     __size_of_isdigit 002A                         _printSortTimer 181E  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 2204                               __ptext10 1E90  
                             __ptext11 28BA                               __ptext20 30EC  
                             __ptext12 2B3A                               __ptext21 3220  
                             __ptext13 1D54                               __ptext30 3064  
                             __ptext22 2D1E                               __ptext14 22EE  
                             __ptext31 32A4                               __ptext23 0012  
                             __ptext15 3260                               __ptext40 32DA  
                             __ptext32 2DA6                               __ptext24 105E  
                             __ptext16 31B6                               __ptext41 2A10  
                             __ptext33 2DDE                               __ptext25 2E16  
                             __ptext17 2732                               __ptext50 1A10  
                             __ptext42 25FA                               __ptext34 08B8  
                             __ptext26 27BE                               __ptext18 2ADA  
                             __ptext51 2EB4                               __ptext43 23D6  
                             __ptext35 32CA                               __ptext27 3302  
                             __ptext19 2494                               __ptext60 3034  
                             __ptext52 2EE4                               __ptext44 333E  
                             __ptext36 3118                               __ptext28 331E  
                             __ptext61 31DA                               __ptext53 2F14  
                             __ptext37 2E4C                               __ptext29 3326  
                             __ptext70 2BEA                               __ptext62 20EA  
                             __ptext54 2F44                               __ptext46 1328  
                             __ptext38 2A78                               __ptext71 32F6  
                             __ptext63 328E                               __ptext55 2F74  
                             __ptext47 3142                               __ptext39 2842  
                             __ptext72 2B94                               __ptext64 181E  
                             __ptext56 2FA4                               __ptext48 15E8  
                             __ptext73 29A0                               __ptext65 0CF0  
                             __ptext57 3092                               __ptext49 2E82  
                             __ptext74 330C                               __ptext66 32EA  
                             __ptext58 2FD4                               __ptext75 332E  
                             __ptext67 3242                               __ptext59 3004  
                             __ptext76 3336                               __ptext68 316A  
                             __ptext77 3190                               __ptext69 2D64  
                             __ptext78 32B8                               _dispLogs 31DA  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1645 0002                     __end_of_initServos 2CD4  
                        __size_of_Test 0002                          ?_EEPROM_write 00AB  
                             _initTime 3220                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 28BA  
               __size_of_machineConfig 005A                          ??i2_lcdNibble 0001  
                             _printRTC 105E                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007F  
                       _log_total_time 00F6                     _f_can_coming_to_ID 00E2  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 2F14      __end_ofi2_change_state_to_menu_22 2EE4  
                             loadRTC@i 0096                 __end_of_printSortTimer 1A10  
                            putch@data 0082               __end_of_I2C_Master_Start 332E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 330C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                             _MAG_signal 00DA  
                             isdigit@c 0082                               intlevel2 0000  
                       ??_EEPROM_write 00AE                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 328E              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 15E8  
              __end_of_I2C_Master_Init 2B3A                __end_of_I2C_Master_Read 3092  
              __end_of_I2C_Master_Wait 32B8                __end_of_I2C_Master_Stop 3326  
                        printRTC@F3211 012C                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 20EA  
                  __end_ofi2_lcdNibble 2BEA                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 0124                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2B3A  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
