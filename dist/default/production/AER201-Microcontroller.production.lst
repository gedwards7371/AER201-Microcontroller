

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 04 23:10:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  005316                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3235
   155  005316  4D                 	db	77
   156  005317  4D                 	db	77
   157  005318  4D                 	db	77
   158  005319  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  00531A  4D                 	db	77
   162  00531B  4D                 	db	77
   163  00531C  4D                 	db	77
   164  00531D  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FAEE                     __pmediumconst:
   168                           	opt stack 0
   169  00FAEE  00                 	db	0
   170  00FAEF                     _keys:
   171                           	opt stack 0
   172  00FAEF  31                 	db	49
   173  00FAF0  32                 	db	50
   174  00FAF1  33                 	db	51
   175  00FAF2  41                 	db	65
   176  00FAF3  34                 	db	52
   177  00FAF4  35                 	db	53
   178  00FAF5  36                 	db	54
   179  00FAF6  42                 	db	66
   180  00FAF7  37                 	db	55
   181  00FAF8  38                 	db	56
   182  00FAF9  39                 	db	57
   183  00FAFA  43                 	db	67
   184  00FAFB  2A                 	db	42
   185  00FAFC  30                 	db	48
   186  00FAFD  23                 	db	35
   187  00FAFE  44                 	db	68
   188  00FAFF  00                 	db	0
   189  00FB00                     __end_of_keys:
   190                           	opt stack 0
   191  00FB00                     _dpowers:
   192                           	opt stack 0
   193  00FB00  0001               	dw	1
   194  00FB02  000A               	dw	10
   195  00FB04  0064               	dw	100
   196  00FB06  03E8               	dw	1000
   197  00FB08  2710               	dw	10000
   198  00FB0A                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _LATEbits	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FB0A                     STR_21:
   273  00FB0A  25                 	db	37
   274  00FB0B  30                 	db	48	;'0'
   275  00FB0C  32                 	db	50	;'2'
   276  00FB0D  64                 	db	100	;'d'
   277  00FB0E  25                 	db	37
   278  00FB0F  73                 	db	115	;'s'
   279  00FB10  20                 	db	32
   280  00FB11  7C                 	db	124
   281  00FB12  20                 	db	32
   282  00FB13  25                 	db	37
   283  00FB14  30                 	db	48	;'0'
   284  00FB15  32                 	db	50	;'2'
   285  00FB16  64                 	db	100	;'d'
   286  00FB17  3A                 	db	58	;':'
   287  00FB18  25                 	db	37
   288  00FB19  30                 	db	48	;'0'
   289  00FB1A  32                 	db	50	;'2'
   290  00FB1B  64                 	db	100	;'d'
   291  00FB1C  3A                 	db	58	;':'
   292  00FB1D  25                 	db	37
   293  00FB1E  30                 	db	48	;'0'
   294  00FB1F  32                 	db	50	;'2'
   295  00FB20  64                 	db	100	;'d'
   296  00FB21  00                 	db	0
   297  00FB22                     STR_66:
   298  00FB22  28                 	db	40
   299  00FB23  64                 	db	100	;'d'
   300  00FB24  61                 	db	97	;'a'
   301  00FB25  74                 	db	116	;'t'
   302  00FB26  61                 	db	97	;'a'
   303  00FB27  3A                 	db	58	;':'
   304  00FB28  20                 	db	32
   305  00FB29  25                 	db	37
   306  00FB2A  75                 	db	117	;'u'
   307  00FB2B  2C                 	db	44
   308  00FB2C  20                 	db	32
   309  00FB2D  61                 	db	97	;'a'
   310  00FB2E  64                 	db	100	;'d'
   311  00FB2F  64                 	db	100	;'d'
   312  00FB30  72                 	db	114	;'r'
   313  00FB31  3A                 	db	58	;':'
   314  00FB32  20                 	db	32
   315  00FB33  25                 	db	37
   316  00FB34  75                 	db	117	;'u'
   317  00FB35  29                 	db	41
   318  00FB36  00                 	db	0
   319  00FB37                     STR_111:
   320  00FB37  44                 	db	68	;'D'
   321  00FB38  20                 	db	32
   322  00FB39  57                 	db	87	;'W'
   323  00FB3A  49                 	db	73	;'I'
   324  00FB3B  4C                 	db	76	;'L'
   325  00FB3C  4C                 	db	76	;'L'
   326  00FB3D  20                 	db	32
   327  00FB3E  52                 	db	82	;'R'
   328  00FB3F  45                 	db	69	;'E'
   329  00FB40  54                 	db	84	;'T'
   330  00FB41  55                 	db	85	;'U'
   331  00FB42  52                 	db	82	;'R'
   332  00FB43  4E                 	db	78	;'N'
   333  00FB44  20                 	db	32
   334  00FB45  20                 	db	32
   335  00FB46  20                 	db	32
   336  00FB47  20                 	db	32
   337  00FB48  00                 	db	0
   338  00FB49                     STR_112:
   339  00FB49  4F                 	db	79	;'O'
   340  00FB4A  54                 	db	84	;'T'
   341  00FB4B  48                 	db	72	;'H'
   342  00FB4C  45                 	db	69	;'E'
   343  00FB4D  52                 	db	82	;'R'
   344  00FB4E  20                 	db	32
   345  00FB4F  53                 	db	83	;'S'
   346  00FB50  45                 	db	69	;'E'
   347  00FB51  54                 	db	84	;'T'
   348  00FB52  53                 	db	83	;'S'
   349  00FB53  20                 	db	32
   350  00FB54  52                 	db	82	;'R'
   351  00FB55  41                 	db	65	;'A'
   352  00FB56  35                 	db	53	;'5'
   353  00FB57  20                 	db	32
   354  00FB58  20                 	db	32
   355  00FB59  20                 	db	32
   356  00FB5A  00                 	db	0
   357  00FB5B                     STR_120:
   358  00FB5B  53                 	db	83	;'S'
   359  00FB5C  3A                 	db	58	;':'
   360  00FB5D  20                 	db	32
   361  00FB5E  44                 	db	68	;'D'
   362  00FB5F  20                 	db	32
   363  00FB60  57                 	db	87	;'W'
   364  00FB61  49                 	db	73	;'I'
   365  00FB62  4C                 	db	76	;'L'
   366  00FB63  4C                 	db	76	;'L'
   367  00FB64  20                 	db	32
   368  00FB65  52                 	db	82	;'R'
   369  00FB66  45                 	db	69	;'E'
   370  00FB67  54                 	db	84	;'T'
   371  00FB68  55                 	db	85	;'U'
   372  00FB69  52                 	db	82	;'R'
   373  00FB6A  4E                 	db	78	;'N'
   374  00FB6B  20                 	db	32
   375  00FB6C  00                 	db	0
   376  00FB6D                     STR_123:
   377  00FB6D  4F                 	db	79	;'O'
   378  00FB6E  54                 	db	84	;'T'
   379  00FB6F  48                 	db	72	;'H'
   380  00FB70  45                 	db	69	;'E'
   381  00FB71  52                 	db	82	;'R'
   382  00FB72  3A                 	db	58	;':'
   383  00FB73  20                 	db	32
   384  00FB74  43                 	db	67	;'C'
   385  00FB75  41                 	db	65	;'A'
   386  00FB76  4D                 	db	77	;'M'
   387  00FB77  20                 	db	32
   388  00FB78  54                 	db	84	;'T'
   389  00FB79  4F                 	db	79	;'O'
   390  00FB7A  47                 	db	71	;'G'
   391  00FB7B  47                 	db	71	;'G'
   392  00FB7C  4C                 	db	76	;'L'
   393  00FB7D  45                 	db	69	;'E'
   394  00FB7E  00                 	db	0
   395  00FB7F                     STR_122:
   396  00FB7F  44                 	db	68	;'D'
   397  00FB80  3A                 	db	58	;':'
   398  00FB81  20                 	db	32
   399  00FB82  52                 	db	82	;'R'
   400  00FB83  45                 	db	69	;'E'
   401  00FB84  54                 	db	84	;'T'
   402  00FB85  7C                 	db	124
   403  00FB86  32                 	db	50	;'2'
   404  00FB87  3A                 	db	58	;':'
   405  00FB88  20                 	db	32
   406  00FB89  43                 	db	67	;'C'
   407  00FB8A  4F                 	db	79	;'O'
   408  00FB8B  4E                 	db	78	;'N'
   409  00FB8C  44                 	db	68	;'D'
   410  00FB8D  20                 	db	32
   411  00FB8E  25                 	db	37
   412  00FB8F  64                 	db	100	;'d'
   413  00FB90  00                 	db	0
   414  00FB91                     STR_3:
   415  00FB91  2D                 	db	45
   416  00FB92  2D                 	db	45
   417  00FB93  20                 	db	32
   418  00FB94  4C                 	db	76	;'L'
   419  00FB95  4F                 	db	79	;'O'
   420  00FB96  47                 	db	71	;'G'
   421  00FB97  20                 	db	32
   422  00FB98  25                 	db	37
   423  00FB99  32                 	db	50	;'2'
   424  00FB9A  64                 	db	100	;'d'
   425  00FB9B  20                 	db	32
   426  00FB9C  48                 	db	72	;'H'
   427  00FB9D  45                 	db	69	;'E'
   428  00FB9E  52                 	db	82	;'R'
   429  00FB9F  45                 	db	69	;'E'
   430  00FBA0  2D                 	db	45
   431  00FBA1  2D                 	db	45
   432  00FBA2  00                 	db	0
   433  00FBA3                     STR_1:
   434  00FBA3  52                 	db	82	;'R'
   435  00FBA4  45                 	db	69	;'E'
   436  00FBA5  53                 	db	83	;'S'
   437  00FBA6  55                 	db	85	;'U'
   438  00FBA7  4C                 	db	76	;'L'
   439  00FBA8  54                 	db	84	;'T'
   440  00FBA9  53                 	db	83	;'S'
   441  00FBAA  20                 	db	32
   442  00FBAB  49                 	db	73	;'I'
   443  00FBAC  4E                 	db	78	;'N'
   444  00FBAD  20                 	db	32
   445  00FBAE  4C                 	db	76	;'L'
   446  00FBAF  4F                 	db	79	;'O'
   447  00FBB0  47                 	db	71	;'G'
   448  00FBB1  20                 	db	32
   449  00FBB2  25                 	db	37
   450  00FBB3  64                 	db	100	;'d'
   451  00FBB4  00                 	db	0
   452  00FBB5                     STR_102:
   453  00FBB5  4D                 	db	77	;'M'
   454  00FBB6  49                 	db	73	;'I'
   455  00FBB7  44                 	db	68	;'D'
   456  00FBB8  20                 	db	32
   457  00FBB9  2D                 	db	45
   458  00FBBA  2D                 	db	45
   459  00FBBB  20                 	db	32
   460  00FBBC  32                 	db	50	;'2'
   461  00FBBD  73                 	db	115	;'s'
   462  00FBBE  20                 	db	32
   463  00FBBF  20                 	db	32
   464  00FBC0  20                 	db	32
   465  00FBC1  20                 	db	32
   466  00FBC2  20                 	db	32
   467  00FBC3  20                 	db	32
   468  00FBC4  20                 	db	32
   469  00FBC5  00                 	db	0
   470  00FBC6                     STR_105:
   471  00FBC6  44                 	db	68	;'D'
   472  00FBC7  52                 	db	82	;'R'
   473  00FBC8  4F                 	db	79	;'O'
   474  00FBC9  50                 	db	80	;'P'
   475  00FBCA  20                 	db	32
   476  00FBCB  2D                 	db	45
   477  00FBCC  2D                 	db	45
   478  00FBCD  20                 	db	32
   479  00FBCE  32                 	db	50	;'2'
   480  00FBCF  73                 	db	115	;'s'
   481  00FBD0  20                 	db	32
   482  00FBD1  20                 	db	32
   483  00FBD2  20                 	db	32
   484  00FBD3  20                 	db	32
   485  00FBD4  20                 	db	32
   486  00FBD5  20                 	db	32
   487  00FBD6  00                 	db	0
   488  00FBD7                     STR_99:
   489  00FBD7  4C                 	db	76	;'L'
   490  00FBD8  45                 	db	69	;'E'
   491  00FBD9  46                 	db	70	;'F'
   492  00FBDA  54                 	db	84	;'T'
   493  00FBDB  20                 	db	32
   494  00FBDC  2D                 	db	45
   495  00FBDD  2D                 	db	45
   496  00FBDE  20                 	db	32
   497  00FBDF  32                 	db	50	;'2'
   498  00FBE0  73                 	db	115	;'s'
   499  00FBE1  20                 	db	32
   500  00FBE2  20                 	db	32
   501  00FBE3  20                 	db	32
   502  00FBE4  20                 	db	32
   503  00FBE5  20                 	db	32
   504  00FBE6  20                 	db	32
   505  00FBE7  00                 	db	0
   506  00FBE8                     STR_104:
   507  00FBE8  4C                 	db	76	;'L'
   508  00FBE9  45                 	db	69	;'E'
   509  00FBEA  56                 	db	86	;'V'
   510  00FBEB  45                 	db	69	;'E'
   511  00FBEC  4C                 	db	76	;'L'
   512  00FBED  20                 	db	32
   513  00FBEE  2D                 	db	45
   514  00FBEF  2D                 	db	45
   515  00FBF0  20                 	db	32
   516  00FBF1  32                 	db	50	;'2'
   517  00FBF2  73                 	db	115	;'s'
   518  00FBF3  20                 	db	32
   519  00FBF4  20                 	db	32
   520  00FBF5  20                 	db	32
   521  00FBF6  20                 	db	32
   522  00FBF7  20                 	db	32
   523  00FBF8  00                 	db	0
   524  00FBF9                     STR_98:
   525  00FBF9  52                 	db	82	;'R'
   526  00FBFA  49                 	db	73	;'I'
   527  00FBFB  47                 	db	71	;'G'
   528  00FBFC  48                 	db	72	;'H'
   529  00FBFD  54                 	db	84	;'T'
   530  00FBFE  20                 	db	32
   531  00FBFF  2D                 	db	45
   532  00FC00  2D                 	db	45
   533  00FC01  20                 	db	32
   534  00FC02  32                 	db	50	;'2'
   535  00FC03  73                 	db	115	;'s'
   536  00FC04  20                 	db	32
   537  00FC05  20                 	db	32
   538  00FC06  20                 	db	32
   539  00FC07  20                 	db	32
   540  00FC08  20                 	db	32
   541  00FC09  00                 	db	0
   542  00FC0A                     STR_97:
   543  00FC0A  4D                 	db	77	;'M'
   544  00FC0B  49                 	db	73	;'I'
   545  00FC0C  44                 	db	68	;'D'
   546  00FC0D  44                 	db	68	;'D'
   547  00FC0E  4C                 	db	76	;'L'
   548  00FC0F  45                 	db	69	;'E'
   549  00FC10  20                 	db	32
   550  00FC11  2D                 	db	45
   551  00FC12  2D                 	db	45
   552  00FC13  20                 	db	32
   553  00FC14  32                 	db	50	;'2'
   554  00FC15  73                 	db	115	;'s'
   555  00FC16  20                 	db	32
   556  00FC17  20                 	db	32
   557  00FC18  20                 	db	32
   558  00FC19  20                 	db	32
   559  00FC1A  00                 	db	0
   560  00FC1B  44                 	db	68	;'D'
   561  00FC1C  20                 	db	32
   562  00FC1D  57                 	db	87	;'W'
   563  00FC1E  49                 	db	73	;'I'
   564  00FC1F  4C                 	db	76	;'L'
   565  00FC20  4C                 	db	76	;'L'
   566  00FC21  20                 	db	32
   567  00FC22  52                 	db	82	;'R'
   568  00FC23  45                 	db	69	;'E'
   569  00FC24  54                 	db	84	;'T'
   570  00FC25  55                 	db	85	;'U'
   571  00FC26  52                 	db	82	;'R'
   572  00FC27  4E                 	db	78	;'N'
   573  00FC28  20                 	db	32
   574  00FC29  20                 	db	32
   575  00FC2A  20                 	db	32
   576  00FC2B  00                 	db	0
   577  00FC2C                     STR_100:
   578  00FC2C  4D                 	db	77	;'M'
   579  00FC2D  49                 	db	73	;'I'
   580  00FC2E  44                 	db	68	;'D'
   581  00FC2F  2D                 	db	45
   582  00FC30  4C                 	db	76	;'L'
   583  00FC31  45                 	db	69	;'E'
   584  00FC32  46                 	db	70	;'F'
   585  00FC33  54                 	db	84	;'T'
   586  00FC34  20                 	db	32
   587  00FC35  2D                 	db	45
   588  00FC36  2D                 	db	45
   589  00FC37  20                 	db	32
   590  00FC38  32                 	db	50	;'2'
   591  00FC39  73                 	db	115	;'s'
   592  00FC3A  20                 	db	32
   593  00FC3B  20                 	db	32
   594  00FC3C  00                 	db	0
   595  00FC3D                     STR_101:
   596  00FC3D  4D                 	db	77	;'M'
   597  00FC3E  49                 	db	73	;'I'
   598  00FC3F  44                 	db	68	;'D'
   599  00FC40  2D                 	db	45
   600  00FC41  52                 	db	82	;'R'
   601  00FC42  49                 	db	73	;'I'
   602  00FC43  47                 	db	71	;'G'
   603  00FC44  48                 	db	72	;'H'
   604  00FC45  54                 	db	84	;'T'
   605  00FC46  20                 	db	32
   606  00FC47  2D                 	db	45
   607  00FC48  2D                 	db	45
   608  00FC49  20                 	db	32
   609  00FC4A  32                 	db	50	;'2'
   610  00FC4B  73                 	db	115	;'s'
   611  00FC4C  20                 	db	32
   612  00FC4D  00                 	db	0
   613  00FC4E  45                 	db	69	;'E'
   614  00FC4F  4C                 	db	76	;'L'
   615  00FC50  53                 	db	83	;'S'
   616  00FC51  45                 	db	69	;'E'
   617  00FC52  20                 	db	32
   618  00FC53  54                 	db	84	;'T'
   619  00FC54  4F                 	db	79	;'O'
   620  00FC55  47                 	db	71	;'G'
   621  00FC56  47                 	db	71	;'G'
   622  00FC57  4C                 	db	76	;'L'
   623  00FC58  45                 	db	69	;'E'
   624  00FC59  53                 	db	83	;'S'
   625  00FC5A  20                 	db	32
   626  00FC5B  52                 	db	82	;'R'
   627  00FC5C  41                 	db	65	;'A'
   628  00FC5D  35                 	db	53	;'5'
   629  00FC5E  00                 	db	0
   630  00FC5F                     STR_72:
   631  00FC5F  41                 	db	65	;'A'
   632  00FC60  4C                 	db	76	;'L'
   633  00FC61  47                 	db	71	;'G'
   634  00FC62  31                 	db	49	;'1'
   635  00FC63  3A                 	db	58	;':'
   636  00FC64  20                 	db	32
   637  00FC65  39                 	db	57	;'9'
   638  00FC66  20                 	db	32
   639  00FC67  50                 	db	80	;'P'
   640  00FC68  4F                 	db	79	;'O'
   641  00FC69  50                 	db	80	;'P'
   642  00FC6A  4E                 	db	78	;'N'
   643  00FC6B  4F                 	db	79	;'O'
   644  00FC6C  54                 	db	84	;'T'
   645  00FC6D  41                 	db	65	;'A'
   646  00FC6E  42                 	db	66	;'B'
   647  00FC6F  00                 	db	0
   648  00FC70                     STR_92:
   649  00FC70  54                 	db	84	;'T'
   650  00FC71  53                 	db	83	;'S'
   651  00FC72  54                 	db	84	;'T'
   652  00FC73  3A                 	db	58	;':'
   653  00FC74  20                 	db	32
   654  00FC75  43                 	db	67	;'C'
   655  00FC76  4F                 	db	79	;'O'
   656  00FC77  4E                 	db	78	;'N'
   657  00FC78  44                 	db	68	;'D'
   658  00FC79  20                 	db	32
   659  00FC7A  53                 	db	83	;'S'
   660  00FC7B  4F                 	db	79	;'O'
   661  00FC7C  4C                 	db	76	;'L'
   662  00FC7D  4E                 	db	78	;'N'
   663  00FC7E  27                 	db	39
   664  00FC7F  44                 	db	68	;'D'
   665  00FC80  00                 	db	0
   666  00FC81                     STR_94:
   667  00FC81  54                 	db	84	;'T'
   668  00FC82  53                 	db	83	;'S'
   669  00FC83  54                 	db	84	;'T'
   670  00FC84  3A                 	db	58	;':'
   671  00FC85  20                 	db	32
   672  00FC86  50                 	db	80	;'P'
   673  00FC87  55                 	db	85	;'U'
   674  00FC88  53                 	db	83	;'S'
   675  00FC89  48                 	db	72	;'H'
   676  00FC8A  20                 	db	32
   677  00FC8B  53                 	db	83	;'S'
   678  00FC8C  4F                 	db	79	;'O'
   679  00FC8D  4C                 	db	76	;'L'
   680  00FC8E  4E                 	db	78	;'N'
   681  00FC8F  27                 	db	39
   682  00FC90  44                 	db	68	;'D'
   683  00FC91  00                 	db	0
   684  00FC92                     STR_68:
   685  00FC92  32                 	db	50	;'2'
   686  00FC93  2E                 	db	46
   687  00FC94  53                 	db	83	;'S'
   688  00FC95  4E                 	db	78	;'N'
   689  00FC96  52                 	db	82	;'R'
   690  00FC97  7C                 	db	124
   691  00FC98  34                 	db	52	;'4'
   692  00FC99  2E                 	db	46
   693  00FC9A  48                 	db	72	;'H'
   694  00FC9B  49                 	db	73	;'I'
   695  00FC9C  7C                 	db	124
   696  00FC9D  35                 	db	53	;'5'
   697  00FC9E  2E                 	db	46
   698  00FC9F  4D                 	db	77	;'M'
   699  00FCA0  45                 	db	69	;'E'
   700  00FCA1  44                 	db	68	;'D'
   701  00FCA2  00                 	db	0
   702  00FCA3                     STR_69:
   703  00FCA3  42                 	db	66	;'B'
   704  00FCA4  2E                 	db	46
   705  00FCA5  50                 	db	80	;'P'
   706  00FCA6  53                 	db	83	;'S'
   707  00FCA7  48                 	db	72	;'H'
   708  00FCA8  7C                 	db	124
   709  00FCA9  38                 	db	56	;'8'
   710  00FCAA  2E                 	db	46
   711  00FCAB  53                 	db	83	;'S'
   712  00FCAC  56                 	db	86	;'V'
   713  00FCAD  7C                 	db	124
   714  00FCAE  39                 	db	57	;'9'
   715  00FCAF  2E                 	db	46
   716  00FCB0  42                 	db	66	;'B'
   717  00FCB1  4C                 	db	76	;'L'
   718  00FCB2  4B                 	db	75	;'K'
   719  00FCB3  00                 	db	0
   720  00FCB4                     STR_110:
   721  00FCB4  54                 	db	84	;'T'
   722  00FCB5  53                 	db	83	;'S'
   723  00FCB6  54                 	db	84	;'T'
   724  00FCB7  3A                 	db	58	;':'
   725  00FCB8  20                 	db	32
   726  00FCB9  42                 	db	66	;'B'
   727  00FCBA  4F                 	db	79	;'O'
   728  00FCBB  54                 	db	84	;'T'
   729  00FCBC  48                 	db	72	;'H'
   730  00FCBD  20                 	db	32
   731  00FCBE  53                 	db	83	;'S'
   732  00FCBF  45                 	db	69	;'E'
   733  00FCC0  52                 	db	82	;'R'
   734  00FCC1  56                 	db	86	;'V'
   735  00FCC2  4F                 	db	79	;'O'
   736  00FCC3  53                 	db	83	;'S'
   737  00FCC4  00                 	db	0
   738  00FCC5                     STR_41:
   739  00FCC5  4C                 	db	76	;'L'
   740  00FCC6  4F                 	db	79	;'O'
   741  00FCC7  47                 	db	71	;'G'
   742  00FCC8  20                 	db	32
   743  00FCC9  31                 	db	49	;'1'
   744  00FCCA  20                 	db	32
   745  00FCCB  20                 	db	32
   746  00FCCC  20                 	db	32
   747  00FCCD  20                 	db	32
   748  00FCCE  20                 	db	32
   749  00FCCF  20                 	db	32
   750  00FCD0  20                 	db	32
   751  00FCD1  20                 	db	32
   752  00FCD2  20                 	db	32
   753  00FCD3  20                 	db	32
   754  00FCD4  20                 	db	32
   755  00FCD5  00                 	db	0
   756  00FCD6                     STR_40:
   757  00FCD6  4C                 	db	76	;'L'
   758  00FCD7  4F                 	db	79	;'O'
   759  00FCD8  47                 	db	71	;'G'
   760  00FCD9  20                 	db	32
   761  00FCDA  32                 	db	50	;'2'
   762  00FCDB  20                 	db	32
   763  00FCDC  20                 	db	32
   764  00FCDD  20                 	db	32
   765  00FCDE  20                 	db	32
   766  00FCDF  20                 	db	32
   767  00FCE0  20                 	db	32
   768  00FCE1  20                 	db	32
   769  00FCE2  20                 	db	32
   770  00FCE3  20                 	db	32
   771  00FCE4  20                 	db	32
   772  00FCE5  20                 	db	32
   773  00FCE6  00                 	db	0
   774  00FCE7                     STR_44:
   775  00FCE7  4C                 	db	76	;'L'
   776  00FCE8  4F                 	db	79	;'O'
   777  00FCE9  47                 	db	71	;'G'
   778  00FCEA  20                 	db	32
   779  00FCEB  33                 	db	51	;'3'
   780  00FCEC  20                 	db	32
   781  00FCED  20                 	db	32
   782  00FCEE  20                 	db	32
   783  00FCEF  20                 	db	32
   784  00FCF0  20                 	db	32
   785  00FCF1  20                 	db	32
   786  00FCF2  20                 	db	32
   787  00FCF3  20                 	db	32
   788  00FCF4  20                 	db	32
   789  00FCF5  20                 	db	32
   790  00FCF6  20                 	db	32
   791  00FCF7  00                 	db	0
   792  00FCF8                     STR_48:
   793  00FCF8  4C                 	db	76	;'L'
   794  00FCF9  4F                 	db	79	;'O'
   795  00FCFA  47                 	db	71	;'G'
   796  00FCFB  20                 	db	32
   797  00FCFC  34                 	db	52	;'4'
   798  00FCFD  20                 	db	32
   799  00FCFE  20                 	db	32
   800  00FCFF  20                 	db	32
   801  00FD00  20                 	db	32
   802  00FD01  20                 	db	32
   803  00FD02  20                 	db	32
   804  00FD03  20                 	db	32
   805  00FD04  20                 	db	32
   806  00FD05  20                 	db	32
   807  00FD06  20                 	db	32
   808  00FD07  20                 	db	32
   809  00FD08  00                 	db	0
   810  00FD09                     STR_36:
   811  00FD09  33                 	db	51	;'3'
   812  00FD0A  2E                 	db	46
   813  00FD0B  20                 	db	32
   814  00FD0C  4C                 	db	76	;'L'
   815  00FD0D  4F                 	db	79	;'O'
   816  00FD0E  47                 	db	71	;'G'
   817  00FD0F  53                 	db	83	;'S'
   818  00FD10  20                 	db	32
   819  00FD11  20                 	db	32
   820  00FD12  20                 	db	32
   821  00FD13  20                 	db	32
   822  00FD14  20                 	db	32
   823  00FD15  20                 	db	32
   824  00FD16  20                 	db	32
   825  00FD17  20                 	db	32
   826  00FD18  20                 	db	32
   827  00FD19  00                 	db	0
   828  00FD1A                     STR_32:
   829  00FD1A  32                 	db	50	;'2'
   830  00FD1B  2E                 	db	46
   831  00FD1C  20                 	db	32
   832  00FD1D  53                 	db	83	;'S'
   833  00FD1E  4F                 	db	79	;'O'
   834  00FD1F  52                 	db	82	;'R'
   835  00FD20  54                 	db	84	;'T'
   836  00FD21  20                 	db	32
   837  00FD22  20                 	db	32
   838  00FD23  20                 	db	32
   839  00FD24  20                 	db	32
   840  00FD25  20                 	db	32
   841  00FD26  20                 	db	32
   842  00FD27  20                 	db	32
   843  00FD28  20                 	db	32
   844  00FD29  20                 	db	32
   845  00FD2A  00                 	db	0
   846  00FD2B                     STR_33:
   847  00FD2B  31                 	db	49	;'1'
   848  00FD2C  2E                 	db	46
   849  00FD2D  20                 	db	32
   850  00FD2E  44                 	db	68	;'D'
   851  00FD2F  41                 	db	65	;'A'
   852  00FD30  54                 	db	84	;'T'
   853  00FD31  45                 	db	69	;'E'
   854  00FD32  2F                 	db	47
   855  00FD33  54                 	db	84	;'T'
   856  00FD34  49                 	db	73	;'I'
   857  00FD35  4D                 	db	77	;'M'
   858  00FD36  45                 	db	69	;'E'
   859  00FD37  20                 	db	32
   860  00FD38  20                 	db	32
   861  00FD39  20                 	db	32
   862  00FD3A  20                 	db	32
   863  00FD3B  00                 	db	0
   864  00FD3C                     STR_24:
   865  00FD3C  20                 	db	32
   866  00FD3D  2D                 	db	45
   867  00FD3E  2D                 	db	45
   868  00FD3F  20                 	db	32
   869  00FD40  50                 	db	80	;'P'
   870  00FD41  4F                 	db	79	;'O'
   871  00FD42  50                 	db	80	;'P'
   872  00FD43  20                 	db	32
   873  00FD44  20                 	db	32
   874  00FD45  43                 	db	67	;'C'
   875  00FD46  41                 	db	65	;'A'
   876  00FD47  4E                 	db	78	;'N'
   877  00FD48  20                 	db	32
   878  00FD49  2D                 	db	45
   879  00FD4A  2D                 	db	45
   880  00FD4B  20                 	db	32
   881  00FD4C  00                 	db	0
   882  00FD4D                     STR_26:
   883  00FD4D  20                 	db	32
   884  00FD4E  2D                 	db	45
   885  00FD4F  2D                 	db	45
   886  00FD50  20                 	db	32
   887  00FD51  53                 	db	83	;'S'
   888  00FD52  4F                 	db	79	;'O'
   889  00FD53  55                 	db	85	;'U'
   890  00FD54  50                 	db	80	;'P'
   891  00FD55  20                 	db	32
   892  00FD56  43                 	db	67	;'C'
   893  00FD57  41                 	db	65	;'A'
   894  00FD58  4E                 	db	78	;'N'
   895  00FD59  20                 	db	32
   896  00FD5A  2D                 	db	45
   897  00FD5B  2D                 	db	45
   898  00FD5C  20                 	db	32
   899  00FD5D  00                 	db	0
   900  00FD5E                     STR_28:
   901  00FD5E  2D                 	db	45
   902  00FD5F  2D                 	db	45
   903  00FD60  20                 	db	32
   904  00FD61  54                 	db	84	;'T'
   905  00FD62  4F                 	db	79	;'O'
   906  00FD63  54                 	db	84	;'T'
   907  00FD64  41                 	db	65	;'A'
   908  00FD65  4C                 	db	76	;'L'
   909  00FD66  20                 	db	32
   910  00FD67  43                 	db	67	;'C'
   911  00FD68  41                 	db	65	;'A'
   912  00FD69  4E                 	db	78	;'N'
   913  00FD6A  53                 	db	83	;'S'
   914  00FD6B  20                 	db	32
   915  00FD6C  2D                 	db	45
   916  00FD6D  2D                 	db	45
   917  00FD6E  00                 	db	0
   918  00FD6F                     STR_39:
   919  00FD6F  4C                 	db	76	;'L'
   920  00FD70  4F                 	db	79	;'O'
   921  00FD71  47                 	db	71	;'G'
   922  00FD72  20                 	db	32
   923  00FD73  31                 	db	49	;'1'
   924  00FD74  20                 	db	32
   925  00FD75  20                 	db	32
   926  00FD76  20                 	db	32
   927  00FD77  20                 	db	32
   928  00FD78  20                 	db	32
   929  00FD79  20                 	db	32
   930  00FD7A  20                 	db	32
   931  00FD7B  20                 	db	32
   932  00FD7C  20                 	db	32
   933  00FD7D  20                 	db	32
   934  00FD7E  3C                 	db	60	;'<'
   935  00FD7F  00                 	db	0
   936  00FD80                     STR_42:
   937  00FD80  4C                 	db	76	;'L'
   938  00FD81  4F                 	db	79	;'O'
   939  00FD82  47                 	db	71	;'G'
   940  00FD83  20                 	db	32
   941  00FD84  32                 	db	50	;'2'
   942  00FD85  20                 	db	32
   943  00FD86  20                 	db	32
   944  00FD87  20                 	db	32
   945  00FD88  20                 	db	32
   946  00FD89  20                 	db	32
   947  00FD8A  20                 	db	32
   948  00FD8B  20                 	db	32
   949  00FD8C  20                 	db	32
   950  00FD8D  20                 	db	32
   951  00FD8E  20                 	db	32
   952  00FD8F  3C                 	db	60	;'<'
   953  00FD90  00                 	db	0
   954  00FD91                     STR_46:
   955  00FD91  4C                 	db	76	;'L'
   956  00FD92  4F                 	db	79	;'O'
   957  00FD93  47                 	db	71	;'G'
   958  00FD94  20                 	db	32
   959  00FD95  33                 	db	51	;'3'
   960  00FD96  20                 	db	32
   961  00FD97  20                 	db	32
   962  00FD98  20                 	db	32
   963  00FD99  20                 	db	32
   964  00FD9A  20                 	db	32
   965  00FD9B  20                 	db	32
   966  00FD9C  20                 	db	32
   967  00FD9D  20                 	db	32
   968  00FD9E  20                 	db	32
   969  00FD9F  20                 	db	32
   970  00FDA0  3C                 	db	60	;'<'
   971  00FDA1  00                 	db	0
   972  00FDA2                     STR_50:
   973  00FDA2  4C                 	db	76	;'L'
   974  00FDA3  4F                 	db	79	;'O'
   975  00FDA4  47                 	db	71	;'G'
   976  00FDA5  20                 	db	32
   977  00FDA6  34                 	db	52	;'4'
   978  00FDA7  20                 	db	32
   979  00FDA8  20                 	db	32
   980  00FDA9  20                 	db	32
   981  00FDAA  20                 	db	32
   982  00FDAB  20                 	db	32
   983  00FDAC  20                 	db	32
   984  00FDAD  20                 	db	32
   985  00FDAE  20                 	db	32
   986  00FDAF  20                 	db	32
   987  00FDB0  20                 	db	32
   988  00FDB1  3C                 	db	60	;'<'
   989  00FDB2  00                 	db	0
   990  00FDB3                     STR_38:
   991  00FDB3  33                 	db	51	;'3'
   992  00FDB4  2E                 	db	46
   993  00FDB5  20                 	db	32
   994  00FDB6  4C                 	db	76	;'L'
   995  00FDB7  4F                 	db	79	;'O'
   996  00FDB8  47                 	db	71	;'G'
   997  00FDB9  53                 	db	83	;'S'
   998  00FDBA  20                 	db	32
   999  00FDBB  20                 	db	32
  1000  00FDBC  20                 	db	32
  1001  00FDBD  20                 	db	32
  1002  00FDBE  20                 	db	32
  1003  00FDBF  20                 	db	32
  1004  00FDC0  20                 	db	32
  1005  00FDC1  20                 	db	32
  1006  00FDC2  3C                 	db	60	;'<'
  1007  00FDC3  00                 	db	0
  1008  00FDC4                     STR_34:
  1009  00FDC4  32                 	db	50	;'2'
  1010  00FDC5  2E                 	db	46
  1011  00FDC6  20                 	db	32
  1012  00FDC7  53                 	db	83	;'S'
  1013  00FDC8  4F                 	db	79	;'O'
  1014  00FDC9  52                 	db	82	;'R'
  1015  00FDCA  54                 	db	84	;'T'
  1016  00FDCB  20                 	db	32
  1017  00FDCC  20                 	db	32
  1018  00FDCD  20                 	db	32
  1019  00FDCE  20                 	db	32
  1020  00FDCF  20                 	db	32
  1021  00FDD0  20                 	db	32
  1022  00FDD1  20                 	db	32
  1023  00FDD2  20                 	db	32
  1024  00FDD3  3C                 	db	60	;'<'
  1025  00FDD4  00                 	db	0
  1026  00FDD5                     STR_31:
  1027  00FDD5  31                 	db	49	;'1'
  1028  00FDD6  2E                 	db	46
  1029  00FDD7  20                 	db	32
  1030  00FDD8  44                 	db	68	;'D'
  1031  00FDD9  41                 	db	65	;'A'
  1032  00FDDA  54                 	db	84	;'T'
  1033  00FDDB  45                 	db	69	;'E'
  1034  00FDDC  2F                 	db	47
  1035  00FDDD  54                 	db	84	;'T'
  1036  00FDDE  49                 	db	73	;'I'
  1037  00FDDF  4D                 	db	77	;'M'
  1038  00FDE0  45                 	db	69	;'E'
  1039  00FDE1  20                 	db	32
  1040  00FDE2  20                 	db	32
  1041  00FDE3  20                 	db	32
  1042  00FDE4  3C                 	db	60	;'<'
  1043  00FDE5  00                 	db	0
  1044  00FDE6                     STR_6:
  1045  00FDE6  50                 	db	80	;'P'
  1046  00FDE7  41                 	db	65	;'A'
  1047  00FDE8  55                 	db	85	;'U'
  1048  00FDE9  53                 	db	83	;'S'
  1049  00FDEA  45                 	db	69	;'E'
  1050  00FDEB  20                 	db	32
  1051  00FDEC  3C                 	db	60	;'<'
  1052  00FDED  20                 	db	32
  1053  00FDEE  7C                 	db	124
  1054  00FDEF  20                 	db	32
  1055  00FDF0  42                 	db	66	;'B'
  1056  00FDF1  41                 	db	65	;'A'
  1057  00FDF2  43                 	db	67	;'C'
  1058  00FDF3  4B                 	db	75	;'K'
  1059  00FDF4  20                 	db	32
  1060  00FDF5  3E                 	db	62	;'>'
  1061  00FDF6  00                 	db	0
  1062  00FDF7                     STR_30:
  1063  00FDF7  50                 	db	80	;'P'
  1064  00FDF8  55                 	db	85	;'U'
  1065  00FDF9  53                 	db	83	;'S'
  1066  00FDFA  48                 	db	72	;'H'
  1067  00FDFB  20                 	db	32
  1068  00FDFC  54                 	db	84	;'T'
  1069  00FDFD  4F                 	db	79	;'O'
  1070  00FDFE  20                 	db	32
  1071  00FDFF  43                 	db	67	;'C'
  1072  00FE00  4F                 	db	79	;'O'
  1073  00FE01  4E                 	db	78	;'N'
  1074  00FE02  54                 	db	84	;'T'
  1075  00FE03  49                 	db	73	;'I'
  1076  00FE04  4E                 	db	78	;'N'
  1077  00FE05  55                 	db	85	;'U'
  1078  00FE06  45                 	db	69	;'E'
  1079  00FE07  00                 	db	0
  1080  00FE08                     STR_27:
  1081  00FE08  4E                 	db	78	;'N'
  1082  00FE09  4C                 	db	76	;'L'
  1083  00FE0A  41                 	db	65	;'A'
  1084  00FE0B  42                 	db	66	;'B'
  1085  00FE0C  3A                 	db	58	;':'
  1086  00FE0D  20                 	db	32
  1087  00FE0E  25                 	db	37
  1088  00FE0F  64                 	db	100	;'d'
  1089  00FE10  7C                 	db	124
  1090  00FE11  4C                 	db	76	;'L'
  1091  00FE12  41                 	db	65	;'A'
  1092  00FE13  42                 	db	66	;'B'
  1093  00FE14  3A                 	db	58	;':'
  1094  00FE15  20                 	db	32
  1095  00FE16  25                 	db	37
  1096  00FE17  64                 	db	100	;'d'
  1097  00FE18  00                 	db	0
  1098  00FE19                     STR_25:
  1099  00FE19  4E                 	db	78	;'N'
  1100  00FE1A  54                 	db	84	;'T'
  1101  00FE1B  41                 	db	65	;'A'
  1102  00FE1C  42                 	db	66	;'B'
  1103  00FE1D  3A                 	db	58	;':'
  1104  00FE1E  20                 	db	32
  1105  00FE1F  25                 	db	37
  1106  00FE20  64                 	db	100	;'d'
  1107  00FE21  7C                 	db	124
  1108  00FE22  54                 	db	84	;'T'
  1109  00FE23  41                 	db	65	;'A'
  1110  00FE24  42                 	db	66	;'B'
  1111  00FE25  3A                 	db	58	;':'
  1112  00FE26  20                 	db	32
  1113  00FE27  25                 	db	37
  1114  00FE28  64                 	db	100	;'d'
  1115  00FE29  00                 	db	0
  1116  00FE2A                     STR_83:
  1117  00FE2A  4D                 	db	77	;'M'
  1118  00FE2B  41                 	db	65	;'A'
  1119  00FE2C  47                 	db	71	;'G'
  1120  00FE2D  5F                 	db	95	;'_'
  1121  00FE2E  73                 	db	115	;'s'
  1122  00FE2F  69                 	db	105	;'i'
  1123  00FE30  67                 	db	103	;'g'
  1124  00FE31  6E                 	db	110	;'n'
  1125  00FE32  61                 	db	97	;'a'
  1126  00FE33  6C                 	db	108	;'l'
  1127  00FE34  3A                 	db	58	;':'
  1128  00FE35  20                 	db	32
  1129  00FE36  25                 	db	37
  1130  00FE37  64                 	db	100	;'d'
  1131  00FE38  20                 	db	32
  1132  00FE39  00                 	db	0
  1133  00FE3A                     STR_103:
  1134  00FE3A  54                 	db	84	;'T'
  1135  00FE3B  53                 	db	83	;'S'
  1136  00FE3C  54                 	db	84	;'T'
  1137  00FE3D  3A                 	db	58	;':'
  1138  00FE3E  20                 	db	32
  1139  00FE3F  54                 	db	84	;'T'
  1140  00FE40  49                 	db	73	;'I'
  1141  00FE41  4C                 	db	76	;'L'
  1142  00FE42  54                 	db	84	;'T'
  1143  00FE43  20                 	db	32
  1144  00FE44  53                 	db	83	;'S'
  1145  00FE45  45                 	db	69	;'E'
  1146  00FE46  52                 	db	82	;'R'
  1147  00FE47  56                 	db	86	;'V'
  1148  00FE48  4F                 	db	79	;'O'
  1149  00FE49  00                 	db	0
  1150  00FE4A                     STR_4:
  1151  00FE4A  44                 	db	68	;'D'
  1152  00FE4B  49                 	db	73	;'I'
  1153  00FE4C  44                 	db	68	;'D'
  1154  00FE4D  4E                 	db	78	;'N'
  1155  00FE4E  27                 	db	39
  1156  00FE4F  54                 	db	84	;'T'
  1157  00FE50  20                 	db	32
  1158  00FE51  43                 	db	67	;'C'
  1159  00FE52  4F                 	db	79	;'O'
  1160  00FE53  4D                 	db	77	;'M'
  1161  00FE54  50                 	db	80	;'P'
  1162  00FE55  4C                 	db	76	;'L'
  1163  00FE56  45                 	db	69	;'E'
  1164  00FE57  54                 	db	84	;'T'
  1165  00FE58  45                 	db	69	;'E'
  1166  00FE59  00                 	db	0
  1167  00FE5A                     STR_80:
  1168  00FE5A  49                 	db	73	;'I'
  1169  00FE5B  52                 	db	82	;'R'
  1170  00FE5C  5F                 	db	95	;'_'
  1171  00FE5D  73                 	db	115	;'s'
  1172  00FE5E  69                 	db	105	;'i'
  1173  00FE5F  67                 	db	103	;'g'
  1174  00FE60  6E                 	db	110	;'n'
  1175  00FE61  61                 	db	97	;'a'
  1176  00FE62  6C                 	db	108	;'l'
  1177  00FE63  3A                 	db	58	;':'
  1178  00FE64  20                 	db	32
  1179  00FE65  25                 	db	37
  1180  00FE66  64                 	db	100	;'d'
  1181  00FE67  20                 	db	32
  1182  00FE68  00                 	db	0
  1183  00FE69                     STR_109:
  1184  00FE69  43                 	db	67	;'C'
  1185  00FE6A  41                 	db	65	;'A'
  1186  00FE6B  4D                 	db	77	;'M'
  1187  00FE6C  20                 	db	32
  1188  00FE6D  44                 	db	68	;'D'
  1189  00FE6E  57                 	db	87	;'W'
  1190  00FE6F  4E                 	db	78	;'N'
  1191  00FE70  20                 	db	32
  1192  00FE71  7C                 	db	124
  1193  00FE72  52                 	db	82	;'R'
  1194  00FE73  43                 	db	67	;'C'
  1195  00FE74  30                 	db	48	;'0'
  1196  00FE75  3D                 	db	61	;'='
  1197  00FE76  30                 	db	48	;'0'
  1198  00FE77  00                 	db	0
  1199  00FE78                     STR_108:
  1200  00FE78  43                 	db	67	;'C'
  1201  00FE79  41                 	db	65	;'A'
  1202  00FE7A  4D                 	db	77	;'M'
  1203  00FE7B  20                 	db	32
  1204  00FE7C  55                 	db	85	;'U'
  1205  00FE7D  50                 	db	80	;'P'
  1206  00FE7E  20                 	db	32
  1207  00FE7F  20                 	db	32
  1208  00FE80  7C                 	db	124
  1209  00FE81  52                 	db	82	;'R'
  1210  00FE82  43                 	db	67	;'C'
  1211  00FE83  30                 	db	48	;'0'
  1212  00FE84  3D                 	db	61	;'='
  1213  00FE85  31                 	db	49	;'1'
  1214  00FE86  00                 	db	0
  1215  00FE87                     STR_82:
  1216  00FE87  54                 	db	84	;'T'
  1217  00FE88  53                 	db	83	;'S'
  1218  00FE89  54                 	db	84	;'T'
  1219  00FE8A  3A                 	db	58	;':'
  1220  00FE8B  20                 	db	32
  1221  00FE8C  4D                 	db	77	;'M'
  1222  00FE8D  41                 	db	65	;'A'
  1223  00FE8E  47                 	db	71	;'G'
  1224  00FE8F  4E                 	db	78	;'N'
  1225  00FE90  45                 	db	69	;'E'
  1226  00FE91  54                 	db	84	;'T'
  1227  00FE92  49                 	db	73	;'I'
  1228  00FE93  53                 	db	83	;'S'
  1229  00FE94  4D                 	db	77	;'M'
  1230  00FE95  00                 	db	0
  1231  00FE96                     STR_107:
  1232  00FE96  54                 	db	84	;'T'
  1233  00FE97  53                 	db	83	;'S'
  1234  00FE98  54                 	db	84	;'T'
  1235  00FE99  3A                 	db	58	;':'
  1236  00FE9A  20                 	db	32
  1237  00FE9B  43                 	db	67	;'C'
  1238  00FE9C  41                 	db	65	;'A'
  1239  00FE9D  4D                 	db	77	;'M'
  1240  00FE9E  20                 	db	32
  1241  00FE9F  53                 	db	83	;'S'
  1242  00FEA0  45                 	db	69	;'E'
  1243  00FEA1  52                 	db	82	;'R'
  1244  00FEA2  56                 	db	86	;'V'
  1245  00FEA3  4F                 	db	79	;'O'
  1246  00FEA4  00                 	db	0
  1247  00FEA5                     STR_96:
  1248  00FEA5  54                 	db	84	;'T'
  1249  00FEA6  53                 	db	83	;'S'
  1250  00FEA7  54                 	db	84	;'T'
  1251  00FEA8  3A                 	db	58	;':'
  1252  00FEA9  20                 	db	32
  1253  00FEAA  50                 	db	80	;'P'
  1254  00FEAB  41                 	db	65	;'A'
  1255  00FEAC  4E                 	db	78	;'N'
  1256  00FEAD  20                 	db	32
  1257  00FEAE  53                 	db	83	;'S'
  1258  00FEAF  45                 	db	69	;'E'
  1259  00FEB0  52                 	db	82	;'R'
  1260  00FEB1  56                 	db	86	;'V'
  1261  00FEB2  4F                 	db	79	;'O'
  1262  00FEB3  00                 	db	0
  1263  00FEB4                     STR_75:
  1264  00FEB4  41                 	db	65	;'A'
  1265  00FEB5  4C                 	db	76	;'L'
  1266  00FEB6  47                 	db	71	;'G'
  1267  00FEB7  34                 	db	52	;'4'
  1268  00FEB8  3A                 	db	58	;':'
  1269  00FEB9  20                 	db	32
  1270  00FEBA  41                 	db	65	;'A'
  1271  00FEBB  4C                 	db	76	;'L'
  1272  00FEBC  4C                 	db	76	;'L'
  1273  00FEBD  20                 	db	32
  1274  00FEBE  43                 	db	67	;'C'
  1275  00FEBF  41                 	db	65	;'A'
  1276  00FEC0  4E                 	db	78	;'N'
  1277  00FEC1  53                 	db	83	;'S'
  1278  00FEC2  00                 	db	0
  1279  00FEC3                     STR_90:
  1280  00FEC3  54                 	db	84	;'T'
  1281  00FEC4  53                 	db	83	;'S'
  1282  00FEC5  54                 	db	84	;'T'
  1283  00FEC6  3A                 	db	58	;':'
  1284  00FEC7  20                 	db	32
  1285  00FEC8  44                 	db	68	;'D'
  1286  00FEC9  43                 	db	67	;'C'
  1287  00FECA  20                 	db	32
  1288  00FECB  4D                 	db	77	;'M'
  1289  00FECC  4F                 	db	79	;'O'
  1290  00FECD  54                 	db	84	;'T'
  1291  00FECE  4F                 	db	79	;'O'
  1292  00FECF  52                 	db	82	;'R'
  1293  00FED0  53                 	db	83	;'S'
  1294  00FED1  00                 	db	0
  1295  00FED2                     STR_70:
  1296  00FED2  41                 	db	65	;'A'
  1297  00FED3  4C                 	db	76	;'L'
  1298  00FED4  47                 	db	71	;'G'
  1299  00FED5  4F                 	db	79	;'O'
  1300  00FED6  52                 	db	82	;'R'
  1301  00FED7  49                 	db	73	;'I'
  1302  00FED8  54                 	db	84	;'T'
  1303  00FED9  48                 	db	72	;'H'
  1304  00FEDA  4D                 	db	77	;'M'
  1305  00FEDB  20                 	db	32
  1306  00FEDC  54                 	db	84	;'T'
  1307  00FEDD  45                 	db	69	;'E'
  1308  00FEDE  53                 	db	83	;'S'
  1309  00FEDF  54                 	db	84	;'T'
  1310  00FEE0  00                 	db	0
  1311  00FEE1                     STR_91:
  1312  00FEE1  50                 	db	80	;'P'
  1313  00FEE2  49                 	db	73	;'I'
  1314  00FEE3  4E                 	db	78	;'N'
  1315  00FEE4  20                 	db	32
  1316  00FEE5  52                 	db	82	;'R'
  1317  00FEE6  41                 	db	65	;'A'
  1318  00FEE7  35                 	db	53	;'5'
  1319  00FEE8  20                 	db	32
  1320  00FEE9  48                 	db	72	;'H'
  1321  00FEEA  49                 	db	73	;'I'
  1322  00FEEB  47                 	db	71	;'G'
  1323  00FEEC  48                 	db	72	;'H'
  1324  00FEED  2E                 	db	46
  1325  00FEEE  00                 	db	0
  1326  00FEEF                     STR_73:
  1327  00FEEF  41                 	db	65	;'A'
  1328  00FEF0  4C                 	db	76	;'L'
  1329  00FEF1  47                 	db	71	;'G'
  1330  00FEF2  32                 	db	50	;'2'
  1331  00FEF3  3A                 	db	58	;':'
  1332  00FEF4  20                 	db	32
  1333  00FEF5  31                 	db	49	;'1'
  1334  00FEF6  32                 	db	50	;'2'
  1335  00FEF7  20                 	db	32
  1336  00FEF8  43                 	db	67	;'C'
  1337  00FEF9  41                 	db	65	;'A'
  1338  00FEFA  4E                 	db	78	;'N'
  1339  00FEFB  53                 	db	83	;'S'
  1340  00FEFC  00                 	db	0
  1341  00FEFD                     STR_76:
  1342  00FEFD  41                 	db	65	;'A'
  1343  00FEFE  4C                 	db	76	;'L'
  1344  00FEFF  47                 	db	71	;'G'
  1345  00FF00  35                 	db	53	;'5'
  1346  00FF01  3A                 	db	58	;':'
  1347  00FF02  20                 	db	32
  1348  00FF03  4E                 	db	78	;'N'
  1349  00FF04  4F                 	db	79	;'O'
  1350  00FF05  20                 	db	32
  1351  00FF06  43                 	db	67	;'C'
  1352  00FF07  41                 	db	65	;'A'
  1353  00FF08  4E                 	db	78	;'N'
  1354  00FF09  53                 	db	83	;'S'
  1355  00FF0A  00                 	db	0
  1356  00FF0B                     STR_71:
  1357  00FF0B  50                 	db	80	;'P'
  1358  00FF0C  55                 	db	85	;'U'
  1359  00FF0D  53                 	db	83	;'S'
  1360  00FF0E  48                 	db	72	;'H'
  1361  00FF0F  20                 	db	32
  1362  00FF10  54                 	db	84	;'T'
  1363  00FF11  4F                 	db	79	;'O'
  1364  00FF12  20                 	db	32
  1365  00FF13  53                 	db	83	;'S'
  1366  00FF14  54                 	db	84	;'T'
  1367  00FF15  41                 	db	65	;'A'
  1368  00FF16  52                 	db	82	;'R'
  1369  00FF17  54                 	db	84	;'T'
  1370  00FF18  00                 	db	0
  1371  00FF19                     STR_23:
  1372  00FF19  25                 	db	37
  1373  00FF1A  64                 	db	100	;'d'
  1374  00FF1B  20                 	db	32
  1375  00FF1C  4D                 	db	77	;'M'
  1376  00FF1D  49                 	db	73	;'I'
  1377  00FF1E  4E                 	db	78	;'N'
  1378  00FF1F  20                 	db	32
  1379  00FF20  25                 	db	37
  1380  00FF21  64                 	db	100	;'d'
  1381  00FF22  20                 	db	32
  1382  00FF23  53                 	db	83	;'S'
  1383  00FF24  45                 	db	69	;'E'
  1384  00FF25  43                 	db	67	;'C'
  1385  00FF26  00                 	db	0
  1386  00FF27                     STR_2:
  1387  00FF27  54                 	db	84	;'T'
  1388  00FF28  49                 	db	73	;'I'
  1389  00FF29  4D                 	db	77	;'M'
  1390  00FF2A  45                 	db	69	;'E'
  1391  00FF2B  3A                 	db	58	;':'
  1392  00FF2C  20                 	db	32
  1393  00FF2D  25                 	db	37
  1394  00FF2E  64                 	db	100	;'d'
  1395  00FF2F  3A                 	db	58	;':'
  1396  00FF30  25                 	db	37
  1397  00FF31  30                 	db	48	;'0'
  1398  00FF32  32                 	db	50	;'2'
  1399  00FF33  64                 	db	100	;'d'
  1400  00FF34  00                 	db	0
  1401  00FF35                     STR_79:
  1402  00FF35  54                 	db	84	;'T'
  1403  00FF36  53                 	db	83	;'S'
  1404  00FF37  54                 	db	84	;'T'
  1405  00FF38  3A                 	db	58	;':'
  1406  00FF39  20                 	db	32
  1407  00FF3A  49                 	db	73	;'I'
  1408  00FF3B  52                 	db	82	;'R'
  1409  00FF3C  20                 	db	32
  1410  00FF3D  53                 	db	83	;'S'
  1411  00FF3E  4E                 	db	78	;'N'
  1412  00FF3F  53                 	db	83	;'S'
  1413  00FF40  52                 	db	82	;'R'
  1414  00FF41  00                 	db	0
  1415  00FF42                     STR_65:
  1416  00FF42  54                 	db	84	;'T'
  1417  00FF43  49                 	db	73	;'I'
  1418  00FF44  4D                 	db	77	;'M'
  1419  00FF45  45                 	db	69	;'E'
  1420  00FF46  20                 	db	32
  1421  00FF47  25                 	db	37
  1422  00FF48  64                 	db	100	;'d'
  1423  00FF49  3A                 	db	58	;':'
  1424  00FF4A  25                 	db	37
  1425  00FF4B  30                 	db	48	;'0'
  1426  00FF4C  32                 	db	50	;'2'
  1427  00FF4D  64                 	db	100	;'d'
  1428  00FF4E  00                 	db	0
  1429  00FF4F                     STR_74:
  1430  00FF4F  41                 	db	65	;'A'
  1431  00FF50  4C                 	db	76	;'L'
  1432  00FF51  47                 	db	71	;'G'
  1433  00FF52  33                 	db	51	;'3'
  1434  00FF53  3A                 	db	58	;':'
  1435  00FF54  20                 	db	32
  1436  00FF55  31                 	db	49	;'1'
  1437  00FF56  20                 	db	32
  1438  00FF57  43                 	db	67	;'C'
  1439  00FF58  41                 	db	65	;'A'
  1440  00FF59  4E                 	db	78	;'N'
  1441  00FF5A  00                 	db	0
  1442  00FF5B                     STR_93:
  1443  00FF5B  50                 	db	80	;'P'
  1444  00FF5C  49                 	db	73	;'I'
  1445  00FF5D  4E                 	db	78	;'N'
  1446  00FF5E  20                 	db	32
  1447  00FF5F  52                 	db	82	;'R'
  1448  00FF60  41                 	db	65	;'A'
  1449  00FF61  33                 	db	51	;'3'
  1450  00FF62  2E                 	db	46
  1451  00FF63  2E                 	db	46
  1452  00FF64  2E                 	db	46
  1453  00FF65  00                 	db	0
  1454  00FF66                     STR_95:
  1455  00FF66  50                 	db	80	;'P'
  1456  00FF67  49                 	db	73	;'I'
  1457  00FF68  4E                 	db	78	;'N'
  1458  00FF69  20                 	db	32
  1459  00FF6A  52                 	db	82	;'R'
  1460  00FF6B  41                 	db	65	;'A'
  1461  00FF6C  34                 	db	52	;'4'
  1462  00FF6D  2E                 	db	46
  1463  00FF6E  2E                 	db	46
  1464  00FF6F  2E                 	db	46
  1465  00FF70  00                 	db	0
  1466  00FF71                     STR_113:
  1467  00FF71  50                 	db	80	;'P'
  1468  00FF72  55                 	db	85	;'U'
  1469  00FF73  53                 	db	83	;'S'
  1470  00FF74  48                 	db	72	;'H'
  1471  00FF75  45                 	db	69	;'E'
  1472  00FF76  52                 	db	82	;'R'
  1473  00FF77  20                 	db	32
  1474  00FF78  54                 	db	84	;'T'
  1475  00FF79  53                 	db	83	;'S'
  1476  00FF7A  54                 	db	84	;'T'
  1477  00FF7B  00                 	db	0
  1478  00FF7C                     STR_64:
  1479  00FF7C  53                 	db	83	;'S'
  1480  00FF7D  4F                 	db	79	;'O'
  1481  00FF7E  52                 	db	82	;'R'
  1482  00FF7F  54                 	db	84	;'T'
  1483  00FF80  49                 	db	73	;'I'
  1484  00FF81  4E                 	db	78	;'N'
  1485  00FF82  47                 	db	71	;'G'
  1486  00FF83  2E                 	db	46
  1487  00FF84  2E                 	db	46
  1488  00FF85  2E                 	db	46
  1489  00FF86  00                 	db	0
  1490  00FF87                     STR_84:
  1491  00FF87  54                 	db	84	;'T'
  1492  00FF88  53                 	db	83	;'S'
  1493  00FF89  54                 	db	84	;'T'
  1494  00FF8A  3A                 	db	58	;':'
  1495  00FF8B  20                 	db	32
  1496  00FF8C  43                 	db	67	;'C'
  1497  00FF8D  4F                 	db	79	;'O'
  1498  00FF8E  4E                 	db	78	;'N'
  1499  00FF8F  44                 	db	68	;'D'
  1500  00FF90  00                 	db	0
  1501  00FF91                     STR_88:
  1502  00FF91  41                 	db	65	;'A'
  1503  00FF92  43                 	db	67	;'C'
  1504  00FF93  54                 	db	84	;'T'
  1505  00FF94  55                 	db	85	;'U'
  1506  00FF95  41                 	db	65	;'A'
  1507  00FF96  54                 	db	84	;'T'
  1508  00FF97  4F                 	db	79	;'O'
  1509  00FF98  52                 	db	82	;'R'
  1510  00FF99  53                 	db	83	;'S'
  1511  00FF9A  00                 	db	0
  1512  00FF9B                     STR_22:
  1513  00FF9B  44                 	db	68	;'D'
  1514  00FF9C  55                 	db	85	;'U'
  1515  00FF9D  52                 	db	82	;'R'
  1516  00FF9E  41                 	db	65	;'A'
  1517  00FF9F  54                 	db	84	;'T'
  1518  00FFA0  49                 	db	73	;'I'
  1519  00FFA1  4F                 	db	79	;'O'
  1520  00FFA2  4E                 	db	78	;'N'
  1521  00FFA3  3A                 	db	58	;':'
  1522  00FFA4  00                 	db	0
  1523  00FFA5                     STR_86:
  1524  00FFA5  43                 	db	67	;'C'
  1525  00FFA6  4F                 	db	79	;'O'
  1526  00FFA7  4E                 	db	78	;'N'
  1527  00FFA8  44                 	db	68	;'D'
  1528  00FFA9  3A                 	db	58	;':'
  1529  00FFAA  20                 	db	32
  1530  00FFAB  25                 	db	37
  1531  00FFAC  64                 	db	100	;'d'
  1532  00FFAD  00                 	db	0
  1533  00FFAE                     STR_77:
  1534  00FFAE  53                 	db	83	;'S'
  1535  00FFAF  45                 	db	69	;'E'
  1536  00FFB0  4E                 	db	78	;'N'
  1537  00FFB1  53                 	db	83	;'S'
  1538  00FFB2  4F                 	db	79	;'O'
  1539  00FFB3  52                 	db	82	;'R'
  1540  00FFB4  53                 	db	83	;'S'
  1541  00FFB5  00                 	db	0
  1542  00FFB6                     STR_126:
  1543  00FFB6  28                 	db	40
  1544  00FFB7  6E                 	db	110	;'n'
  1545  00FFB8  75                 	db	117	;'u'
  1546  00FFB9  6C                 	db	108	;'l'
  1547  00FFBA  6C                 	db	108	;'l'
  1548  00FFBB  29                 	db	41
  1549  00FFBC  00                 	db	0
  1550  00FFBD                     STR_67:
  1551  00FFBD  46                 	db	70	;'F'
  1552  00FFBE  41                 	db	65	;'A'
  1553  00FFBF  49                 	db	73	;'I'
  1554  00FFC0  4C                 	db	76	;'L'
  1555  00FFC1  45                 	db	69	;'E'
  1556  00FFC2  44                 	db	68	;'D'
  1557  00FFC3  00                 	db	0
  1558  00FFC4                     STR_7:
  1559  00FFC4  53                 	db	83	;'S'
  1560  00FFC5  54                 	db	84	;'T'
  1561  00FFC6  41                 	db	65	;'A'
  1562  00FFC7  52                 	db	82	;'R'
  1563  00FFC8  54                 	db	84	;'T'
  1564  00FFC9  3A                 	db	58	;':'
  1565  00FFCA  00                 	db	0
  1566  00FFCB                     STR_9:
  1567  00FFCB  46                 	db	70	;'F'
  1568  00FFCC  45                 	db	69	;'E'
  1569  00FFCD  42                 	db	66	;'B'
  1570  00FFCE  00                 	db	0
  1571  00FFCF                     STR_19:
  1572  00FFCF  44                 	db	68	;'D'
  1573  00FFD0  45                 	db	69	;'E'
  1574  00FFD1  43                 	db	67	;'C'
  1575  00FFD2  00                 	db	0
  1576  00FFD3                     STR_15:
  1577  00FFD3  41                 	db	65	;'A'
  1578  00FFD4  55                 	db	85	;'U'
  1579  00FFD5  47                 	db	71	;'G'
  1580  00FFD6  00                 	db	0
  1581  00FFD7                     STR_14:
  1582  00FFD7  4A                 	db	74	;'J'
  1583  00FFD8  55                 	db	85	;'U'
  1584  00FFD9  4C                 	db	76	;'L'
  1585  00FFDA  00                 	db	0
  1586  00FFDB                     STR_8:
  1587  00FFDB  4A                 	db	74	;'J'
  1588  00FFDC  41                 	db	65	;'A'
  1589  00FFDD  4E                 	db	78	;'N'
  1590  00FFDE  00                 	db	0
  1591  00FFDF                     STR_13:
  1592  00FFDF  4A                 	db	74	;'J'
  1593  00FFE0  55                 	db	85	;'U'
  1594  00FFE1  4E                 	db	78	;'N'
  1595  00FFE2  00                 	db	0
  1596  00FFE3                     STR_16:
  1597  00FFE3  53                 	db	83	;'S'
  1598  00FFE4  45                 	db	69	;'E'
  1599  00FFE5  50                 	db	80	;'P'
  1600  00FFE6  00                 	db	0
  1601  00FFE7                     STR_10:
  1602  00FFE7  4D                 	db	77	;'M'
  1603  00FFE8  41                 	db	65	;'A'
  1604  00FFE9  52                 	db	82	;'R'
  1605  00FFEA  00                 	db	0
  1606  00FFEB                     STR_11:
  1607  00FFEB  41                 	db	65	;'A'
  1608  00FFEC  50                 	db	80	;'P'
  1609  00FFED  52                 	db	82	;'R'
  1610  00FFEE  00                 	db	0
  1611  00FFEF                     STR_20:
  1612  00FFEF  45                 	db	69	;'E'
  1613  00FFF0  52                 	db	82	;'R'
  1614  00FFF1  52                 	db	82	;'R'
  1615  00FFF2  00                 	db	0
  1616  00FFF3                     STR_17:
  1617  00FFF3  4F                 	db	79	;'O'
  1618  00FFF4  43                 	db	67	;'C'
  1619  00FFF5  54                 	db	84	;'T'
  1620  00FFF6  00                 	db	0
  1621  00FFF7                     STR_18:
  1622  00FFF7  4E                 	db	78	;'N'
  1623  00FFF8  4F                 	db	79	;'O'
  1624  00FFF9  56                 	db	86	;'V'
  1625  00FFFA  00                 	db	0
  1626  00FFFB                     STR_12:
  1627  00FFFB  4D                 	db	77	;'M'
  1628  00FFFC  41                 	db	65	;'A'
  1629  00FFFD  59                 	db	89	;'Y'
  1630  00FFFE  00                 	db	0
  1631  0000                     
  1632                           ; #config settings
  1633  00FFFF  00                 	db	0	; dummy byte at the end
  1634  0000                     
  1635                           	psect	cinit
  1636  004BB2                     __pcinit:
  1637                           	opt stack 0
  1638  004BB2                     start_initialization:
  1639                           	opt stack 0
  1640  004BB2                     __initialization:
  1641                           	opt stack 0
  1642                           
  1643                           ; Initialize objects allocated to BANK1 (8 bytes)
  1644                           ; load TBLPTR registers with __pidataBANK1
  1645  004BB2  0E16               	movlw	low __pidataBANK1
  1646  004BB4  6EF6               	movwf	tblptrl,c
  1647  004BB6  0E53               	movlw	high __pidataBANK1
  1648  004BB8  6EF7               	movwf	tblptrh,c
  1649  004BBA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1650  004BBC  6EF8               	movwf	tblptru,c
  1651  004BBE  EE01  F041         	lfsr	0,__pdataBANK1
  1652  004BC2  EE10 F008          	lfsr	1,8
  1653  004BC6                     copy_data0:
  1654  004BC6  0009               	tblrd		*+
  1655  004BC8  CFF5 FFEE          	movff	tablat,postinc0
  1656  004BCC  50E5               	movf	postdec1,w,c
  1657  004BCE  50E1               	movf	fsr1l,w,c
  1658  004BD0  E1FA               	bnz	copy_data0
  1659                           
  1660                           ; Clear objects allocated to BANK1 (65 bytes)
  1661  004BD2  EE01  F000         	lfsr	0,__pbssBANK1
  1662  004BD6  0E41               	movlw	65
  1663  004BD8                     clear_0:
  1664  004BD8  6AEE               	clrf	postinc0,c
  1665  004BDA  06E8               	decf	wreg,f,c
  1666  004BDC  E1FD               	bnz	clear_0
  1667                           
  1668                           ; Clear objects allocated to BANK0 (38 bytes)
  1669  004BDE  EE00  F0DA         	lfsr	0,__pbssBANK0
  1670  004BE2  0E26               	movlw	38
  1671  004BE4                     clear_1:
  1672  004BE4  6AEE               	clrf	postinc0,c
  1673  004BE6  06E8               	decf	wreg,f,c
  1674  004BE8  E1FD               	bnz	clear_1
  1675                           
  1676                           ; Clear objects allocated to COMRAM (35 bytes)
  1677  004BEA  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1678  004BEE  0E23               	movlw	35
  1679  004BF0                     clear_2:
  1680  004BF0  6AEE               	clrf	postinc0,c
  1681  004BF2  06E8               	decf	wreg,f,c
  1682  004BF4  E1FD               	bnz	clear_2
  1683  004BF6                     end_of_initialization:
  1684                           	opt stack 0
  1685  004BF6                     __end_of__initialization:
  1686                           	opt stack 0
  1687  004BF6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1688  004BF8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1689  004BFA  0100               	movlb	0
  1690  004BFC  EF16  F020         	goto	_main	;jump to C main() function
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700                           	psect	bssCOMRAM
  1701  00005B                     __pbssCOMRAM:
  1702                           	opt stack 0
  1703  00005B                     _back:
  1704                           	opt stack 0
  1705  00005B                     	ds	2
  1706  00005D                     _down:
  1707                           	opt stack 0
  1708  00005D                     	ds	2
  1709  00005F                     _enter:
  1710                           	opt stack 0
  1711  00005F                     	ds	2
  1712  000061                     _f_panning_to_bin:
  1713                           	opt stack 0
  1714  000061                     	ds	2
  1715  000063                     _log_completion:
  1716                           	opt stack 0
  1717  000063                     	ds	2
  1718  000065                     _log_count_can_no_lab:
  1719                           	opt stack 0
  1720  000065                     	ds	2
  1721  000067                     _log_count_can_w_lab:
  1722                           	opt stack 0
  1723  000067                     	ds	2
  1724  000069                     _log_count_pop_no_tab:
  1725                           	opt stack 0
  1726  000069                     	ds	2
  1727  00006B                     _log_count_pop_w_tab:
  1728                           	opt stack 0
  1729  00006B                     	ds	2
  1730  00006D                     _most_recent_sort_time:
  1731                           	opt stack 0
  1732  00006D                     	ds	2
  1733  00006F                     _pan_servo_state:
  1734                           	opt stack 0
  1735  00006F                     	ds	2
  1736  000071                     _servo_timer_counter:
  1737                           	opt stack 0
  1738  000071                     	ds	2
  1739  000073                     _servo_timer_target:
  1740                           	opt stack 0
  1741  000073                     	ds	2
  1742  000075                     _tilt_servo_state:
  1743                           	opt stack 0
  1744  000075                     	ds	2
  1745  000077                     _up:
  1746                           	opt stack 0
  1747  000077                     	ds	2
  1748  000079                     _was_low_1:
  1749                           	opt stack 0
  1750  000079                     	ds	2
  1751  00007B                     _was_low_3:
  1752                           	opt stack 0
  1753  00007B                     	ds	2
  1754  00007D                     _input:
  1755                           	opt stack 0
  1756  00007D                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	bssBANK0
  1767  0000DA                     __pbssBANK0:
  1768                           	opt stack 0
  1769  0000DA                     _servoTimes:
  1770                           	opt stack 0
  1771  0000DA                     	ds	8
  1772  0000E2                     _sensor_outputs:
  1773                           	opt stack 0
  1774  0000E2                     	ds	4
  1775  0000E6                     _IR_signal:
  1776                           	opt stack 0
  1777  0000E6                     	ds	2
  1778  0000E8                     _MAG_signal:
  1779                           	opt stack 0
  1780  0000E8                     	ds	2
  1781  0000EA                     _RTCflag:
  1782                           	opt stack 0
  1783  0000EA                     	ds	2
  1784  0000EC                     _cur_state:
  1785                           	opt stack 0
  1786  0000EC                     	ds	2
  1787  0000EE                     _f_lastCan:
  1788                           	opt stack 0
  1789  0000EE                     	ds	2
  1790  0000F0                     _f_loadingNewCan:
  1791                           	opt stack 0
  1792  0000F0                     	ds	2
  1793  0000F2                     _log:
  1794                           	opt stack 0
  1795  0000F2                     	ds	2
  1796  0000F4                     _log_total_time:
  1797                           	opt stack 0
  1798  0000F4                     	ds	2
  1799  0000F6                     _logstate:
  1800                           	opt stack 0
  1801  0000F6                     	ds	2
  1802  0000F8                     _total_time:
  1803                           	opt stack 0
  1804  0000F8                     	ds	2
  1805  0000FA                     _var:
  1806                           	opt stack 0
  1807  0000FA                     	ds	2
  1808  0000FC                     _machine_state:
  1809                           	opt stack 0
  1810  0000FC                     	ds	1
  1811  0000FD                     _sel:
  1812                           	opt stack 0
  1813  0000FD                     	ds	1
  1814  0000FE                     _count_total:
  1815                           	opt stack 0
  1816  0000FE                     	ds	2
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           
  1826                           	psect	bssBANK1
  1827  000100                     __pbssBANK1:
  1828                           	opt stack 0
  1829  000100                     _log_startTime:
  1830                           	opt stack 0
  1831  000100                     	ds	14
  1832  00010E                     _startTime:
  1833                           	opt stack 0
  1834  00010E                     	ds	14
  1835  00011C                     _time:
  1836                           	opt stack 0
  1837  00011C                     	ds	7
  1838  000123                     _count_can_no_lab:
  1839                           	opt stack 0
  1840  000123                     	ds	2
  1841  000125                     _count_can_w_lab:
  1842                           	opt stack 0
  1843  000125                     	ds	2
  1844  000127                     _count_pop_no_tab:
  1845                           	opt stack 0
  1846  000127                     	ds	2
  1847  000129                     _count_pop_w_tab:
  1848                           	opt stack 0
  1849  000129                     	ds	2
  1850  00012B                     _cur_can:
  1851                           	opt stack 0
  1852  00012B                     	ds	2
  1853  00012D                     _debug:
  1854                           	opt stack 0
  1855  00012D                     	ds	2
  1856  00012F                     _f_ID_receive:
  1857                           	opt stack 0
  1858  00012F                     	ds	2
  1859  000131                     _f_can_coming_to_ID:
  1860                           	opt stack 0
  1861  000131                     	ds	2
  1862  000133                     _f_can_coming_to_distribution:
  1863                           	opt stack 0
  1864  000133                     	ds	2
  1865  000135                     _f_can_distributed:
  1866                           	opt stack 0
  1867  000135                     	ds	2
  1868  000137                     _f_most_recent_sort_time:
  1869                           	opt stack 0
  1870  000137                     	ds	2
  1871  000139                     _first:
  1872                           	opt stack 0
  1873  000139                     	ds	2
  1874  00013B                     _firstboot:
  1875                           	opt stack 0
  1876  00013B                     	ds	2
  1877  00013D                     _i:
  1878                           	opt stack 0
  1879  00013D                     	ds	2
  1880  00013F                     _log_count_total:
  1881                           	opt stack 0
  1882  00013F                     	ds	2
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892                           	psect	dataBANK1
  1893  000141                     __pdataBANK1:
  1894                           	opt stack 0
  1895  000141                     UI@F3235:
  1896                           	opt stack 0
  1897  000141                     	ds	4
  1898  000145                     printRTC@F3226:
  1899                           	opt stack 0
  1900  000145                     	ds	4
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	cstackBANK0
  1911  000080                     __pcstackBANK0:
  1912                           	opt stack 0
  1913  000080                     ??_delay_ms:
  1914  000080                     ??_PortTests:
  1915  000080                     ??_isdigit:
  1916  000080                     ??_readADC:
  1917  000080                     ??_I2C_Master_Wait:
  1918  000080                     ?___wmul:
  1919                           	opt stack 0
  1920  000080                     ?___awmod:
  1921                           	opt stack 0
  1922  000080                     ?___lwdiv:
  1923                           	opt stack 0
  1924  000080                     ?___lldiv:
  1925                           	opt stack 0
  1926  000080                     lcdNibble@temp:
  1927                           	opt stack 0
  1928  000080                     initTime@m:
  1929                           	opt stack 0
  1930  000080                     updateServoPosition@time_us:
  1931                           	opt stack 0
  1932  000080                     EEPROM_read@address:
  1933                           	opt stack 0
  1934  000080                     ___wmul@multiplier:
  1935                           	opt stack 0
  1936  000080                     ___awmod@dividend:
  1937                           	opt stack 0
  1938  000080                     ___lwdiv@dividend:
  1939                           	opt stack 0
  1940  000080                     strcpy@to:
  1941                           	opt stack 0
  1942  000080                     ___lldiv@dividend:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x0
  1946  000080                     	ds	1
  1947  000081                     readADC@channel:
  1948                           	opt stack 0
  1949  000081                     I2C_Master_Read@a:
  1950                           	opt stack 0
  1951  000081                     lcdNibble@data:
  1952                           	opt stack 0
  1953  000081                     initTime@h:
  1954                           	opt stack 0
  1955  000081                     delay_ms@milliseconds:
  1956                           	opt stack 0
  1957  000081                     _isdigit$2058:
  1958                           	opt stack 0
  1959  000081                     I2C_Master_Write@d:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x1
  1963  000081                     	ds	1
  1964  000082                     ??_ID:
  1965  000082                     ??_readIR:
  1966  000082                     ??_readMAG:
  1967  000082                     I2C_Master_Read@temp:
  1968                           	opt stack 0
  1969  000082                     lcdInst@data:
  1970                           	opt stack 0
  1971  000082                     putch@data:
  1972                           	opt stack 0
  1973  000082                     initTime@w:
  1974                           	opt stack 0
  1975  000082                     isdigit@c:
  1976                           	opt stack 0
  1977  000082                     updateServoPosition@timer:
  1978                           	opt stack 0
  1979  000082                     ___wmul@multiplicand:
  1980                           	opt stack 0
  1981  000082                     ___awmod@divisor:
  1982                           	opt stack 0
  1983  000082                     ___lwdiv@divisor:
  1984                           	opt stack 0
  1985  000082                     strcpy@from:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x2
  1989  000082                     	ds	1
  1990  000083                     ??_initLCD:
  1991  000083                     initTime@DD:
  1992                           	opt stack 0
  1993  000083                     getRTC@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x3
  1997  000083                     	ds	1
  1998  000084                     ??_updateServoPosition:
  1999  000084                     initTime@MM:
  2000                           	opt stack 0
  2001  000084                     ___awmod@counter:
  2002                           	opt stack 0
  2003  000084                     readIR@res:
  2004                           	opt stack 0
  2005  000084                     readMAG@res:
  2006                           	opt stack 0
  2007  000084                     ID@i:
  2008                           	opt stack 0
  2009  000084                     ___wmul@product:
  2010                           	opt stack 0
  2011  000084                     ___lwdiv@quotient:
  2012                           	opt stack 0
  2013  000084                     strcpy@cp:
  2014                           	opt stack 0
  2015  000084                     ___lldiv@divisor:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x4
  2019  000084                     	ds	1
  2020  000085                     ??_initSortTimer:
  2021  000085                     initTime@YY:
  2022                           	opt stack 0
  2023  000085                     ___awmod@sign:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  000085                     	ds	1
  2028  000086                     ??_getIR:
  2029  000086                     ??_getMAG:
  2030  000086                     ?___awdiv:
  2031                           	opt stack 0
  2032  000086                     initTime@s:
  2033                           	opt stack 0
  2034  000086                     ___lwdiv@counter:
  2035                           	opt stack 0
  2036  000086                     ID@i_1173:
  2037                           	opt stack 0
  2038  000086                     updateServoPosition@my_time:
  2039                           	opt stack 0
  2040  000086                     ___awdiv@dividend:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x6
  2044  000086                     	ds	1
  2045  000087                     ?___lwmod:
  2046                           	opt stack 0
  2047  000087                     getIR@i:
  2048                           	opt stack 0
  2049  000087                     ___lwmod@dividend:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x7
  2053  000087                     	ds	1
  2054  000088                     ??_Distribution:
  2055  000088                     ??_initServos:
  2056  000088                     ID@i_1174:
  2057                           	opt stack 0
  2058  000088                     initSortTimer@i:
  2059                           	opt stack 0
  2060  000088                     ___awdiv@divisor:
  2061                           	opt stack 0
  2062  000088                     ___lldiv@quotient:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0x8
  2066  000088                     	ds	1
  2067  000089                     ___lwmod@divisor:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x9
  2071  000089                     	ds	1
  2072  00008A                     ___awdiv@counter:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0xA
  2076  00008A                     	ds	1
  2077  00008B                     ___awdiv@sign:
  2078                           	opt stack 0
  2079  00008B                     ___lwmod@counter:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0xB
  2083  00008B                     	ds	1
  2084  00008C                     ___lldiv@counter:
  2085                           	opt stack 0
  2086  00008C                     ___awdiv@quotient:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0xC
  2090  00008C                     	ds	1
  2091  00008D                     I2C_Master_Init@c:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0xD
  2095  00008D                     	ds	1
  2096  00008E                     ?_printf:
  2097                           	opt stack 0
  2098  00008E                     printf@f:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0xE
  2102  00008E                     	ds	3
  2103  000091                     ??_I2C_Master_Init:
  2104                           
  2105                           ; 1 bytes @ 0x11
  2106  000091                     	ds	4
  2107  000095                     ??_loadRTC:
  2108                           
  2109                           ; 1 bytes @ 0x15
  2110  000095                     	ds	1
  2111  000096                     loadRTC@i:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x16
  2115  000096                     	ds	4
  2116  00009A                     ??_printf:
  2117                           
  2118                           ; 1 bytes @ 0x1A
  2119  00009A                     	ds	4
  2120  00009E                     printf@prec:
  2121                           	opt stack 0
  2122                           
  2123                           ; 1 bytes @ 0x1E
  2124  00009E                     	ds	1
  2125  00009F                     printf@cp:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x1F
  2129  00009F                     	ds	2
  2130  0000A1                     printf@ap:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x21
  2134  0000A1                     	ds	2
  2135  0000A3                     printf@len:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x23
  2139  0000A3                     	ds	2
  2140  0000A5                     printf@val:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x25
  2144  0000A5                     	ds	2
  2145  0000A7                     printf@flag:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x27
  2149  0000A7                     	ds	1
  2150  0000A8                     printf@c:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x28
  2154  0000A8                     	ds	1
  2155  0000A9                     printf@width:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x29
  2159  0000A9                     	ds	2
  2160  0000AB                     ??_printRTC:
  2161  0000AB                     ??_algorithmTest:
  2162  0000AB                     ??_sensorTest:
  2163  0000AB                     ??_actuatorTest:
  2164  0000AB                     ??_PortTestA5:
  2165  0000AB                     ??_SpeedTest:
  2166  0000AB                     ??_PusherTest:
  2167  0000AB                     ??_BothServos:
  2168  0000AB                     ??_BlockerTest:
  2169  0000AB                     EEPROM_write@address:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x2B
  2173  0000AB                     	ds	1
  2174  0000AC                     BlockerTest@i:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x2C
  2178  0000AC                     	ds	1
  2179  0000AD                     EEPROM_write@data:
  2180                           	opt stack 0
  2181  0000AD                     actuatorTest@i_1734:
  2182                           	opt stack 0
  2183  0000AD                     sensorTest@res:
  2184                           	opt stack 0
  2185  0000AD                     PusherTest@res:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2D
  2189  0000AD                     	ds	1
  2190  0000AE                     ??_EEPROM_write:
  2191  0000AE                     actuatorTest@i_1741:
  2192                           	opt stack 0
  2193  0000AE                     BlockerTest@cam_flag:
  2194                           	opt stack 0
  2195  0000AE                     printRTC@INT_time:
  2196                           	opt stack 0
  2197                           
  2198                           ; 14 bytes @ 0x2E
  2199  0000AE                     	ds	1
  2200  0000AF                     EEPROM_write@i:
  2201                           	opt stack 0
  2202  0000AF                     actuatorTest@i_1742:
  2203                           	opt stack 0
  2204  0000AF                     PusherTest@res_1789:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x2F
  2208  0000AF                     	ds	1
  2209  0000B0                     EEPROM_write@i_1398:
  2210                           	opt stack 0
  2211  0000B0                     actuatorTest@i_1744:
  2212                           	opt stack 0
  2213  0000B0                     BlockerTest@cond_flag:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x30
  2217  0000B0                     	ds	1
  2218  0000B1                     ??_Loading:
  2219  0000B1                     logRun@num:
  2220                           	opt stack 0
  2221  0000B1                     actuatorTest@i_1745:
  2222                           	opt stack 0
  2223  0000B1                     PusherTest@i:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x31
  2227  0000B1                     	ds	1
  2228  0000B2                     logRun@byte1:
  2229                           	opt stack 0
  2230  0000B2                     actuatorTest@i_1747:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x32
  2234  0000B2                     	ds	1
  2235  0000B3                     logRun@byte2:
  2236                           	opt stack 0
  2237  0000B3                     actuatorTest@i_1748:
  2238                           	opt stack 0
  2239  0000B3                     Loading@addr:
  2240                           	opt stack 0
  2241  0000B3                     PusherTest@i_1793:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x33
  2245  0000B3                     	ds	1
  2246  0000B4                     logRun@byte3:
  2247                           	opt stack 0
  2248  0000B4                     actuatorTest@i_1750:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x34
  2252  0000B4                     	ds	1
  2253  0000B5                     Loading@byte1:
  2254                           	opt stack 0
  2255  0000B5                     logRun@byte_i:
  2256                           	opt stack 0
  2257  0000B5                     actuatorTest@i_1751:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x35
  2261  0000B5                     	ds	1
  2262  0000B6                     logRun@byte11:
  2263                           	opt stack 0
  2264  0000B6                     actuatorTest@i_1753:
  2265                           	opt stack 0
  2266  0000B6                     Loading@i_1148:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x36
  2270  0000B6                     	ds	1
  2271  0000B7                     actuatorTest@i_1754:
  2272                           	opt stack 0
  2273  0000B7                     logRun@i:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x37
  2277  0000B7                     	ds	1
  2278  0000B8                     actuatorTest@i_1756:
  2279                           	opt stack 0
  2280  0000B8                     Loading@i_1157:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x38
  2284  0000B8                     	ds	1
  2285  0000B9                     actuatorTest@i_1757:
  2286                           	opt stack 0
  2287  0000B9                     logRun@addr:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x39
  2291  0000B9                     	ds	1
  2292  0000BA                     actuatorTest@i_1760:
  2293                           	opt stack 0
  2294  0000BA                     Loading@i_1159:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x3A
  2298  0000BA                     	ds	1
  2299  0000BB                     actuatorTest@i_1761:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x3B
  2303  0000BB                     	ds	1
  2304  0000BC                     actuatorTest@i_1763:
  2305                           	opt stack 0
  2306  0000BC                     printRTC@RTC_month:
  2307                           	opt stack 0
  2308  0000BC                     Loading@i_1160:
  2309                           	opt stack 0
  2310                           
  2311                           ; 2 bytes @ 0x3C
  2312  0000BC                     	ds	1
  2313  0000BD                     actuatorTest@i_1764:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x3D
  2317  0000BD                     	ds	1
  2318  0000BE                     actuatorTest@i_1766:
  2319                           	opt stack 0
  2320  0000BE                     Loading@i_1162:
  2321                           	opt stack 0
  2322  0000BE                     printRTC@month:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x3E
  2326  0000BE                     	ds	1
  2327  0000BF                     actuatorTest@i_1767:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x3F
  2331  0000BF                     	ds	1
  2332  0000C0                     actuatorTest@i_1770:
  2333                           	opt stack 0
  2334  0000C0                     Loading@j:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x40
  2338  0000C0                     	ds	1
  2339  0000C1                     actuatorTest@i_1771:
  2340                           	opt stack 0
  2341                           
  2342                           ; 1 bytes @ 0x41
  2343  0000C1                     	ds	1
  2344  0000C2                     actuatorTest@i_1773:
  2345                           	opt stack 0
  2346  0000C2                     printRTC@i:
  2347                           	opt stack 0
  2348  0000C2                     Loading@i:
  2349                           	opt stack 0
  2350                           
  2351                           ; 2 bytes @ 0x42
  2352  0000C2                     	ds	1
  2353  0000C3                     actuatorTest@i_1774:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x43
  2357  0000C3                     	ds	1
  2358  0000C4                     ??_UI:
  2359  0000C4                     actuatorTest@i:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x44
  2363  0000C4                     	ds	2
  2364  0000C6                     ??_Test:
  2365  0000C6                     _UI$2416:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x46
  2369  0000C6                     	ds	2
  2370  0000C8                     UI@i:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x48
  2374  0000C8                     	ds	1
  2375  0000C9                     UI@i_409:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x49
  2379  0000C9                     	ds	1
  2380  0000CA                     UI@i_412:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4A
  2384  0000CA                     	ds	1
  2385  0000CB                     UI@i_413:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x4B
  2389  0000CB                     	ds	1
  2390  0000CC                     UI@i_431:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x4C
  2394  0000CC                     	ds	1
  2395  0000CD                     UI@i_432:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x4D
  2399  0000CD                     	ds	1
  2400  0000CE                     UI@i_435:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x4E
  2404  0000CE                     	ds	1
  2405  0000CF                     UI@i_436:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x4F
  2409  0000CF                     	ds	1
  2410  0000D0                     UI@i_439:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x50
  2414  0000D0                     	ds	1
  2415  0000D1                     UI@i_440:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x51
  2419  0000D1                     	ds	1
  2420  0000D2                     UI@i_443:
  2421                           	opt stack 0
  2422                           
  2423                           ; 1 bytes @ 0x52
  2424  0000D2                     	ds	1
  2425  0000D3                     UI@i_444:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x53
  2429  0000D3                     	ds	1
  2430  0000D4                     UI@i_447:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x54
  2434  0000D4                     	ds	1
  2435  0000D5                     UI@i_448:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x55
  2439  0000D5                     	ds	1
  2440  0000D6                     UI@month:
  2441                           	opt stack 0
  2442                           
  2443                           ; 4 bytes @ 0x56
  2444  0000D6                     	ds	4
  2445  0000DA                     tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           
  2454                           ; 1 bytes @ 0x5A
  2455                           
  2456                           	psect	cstackCOMRAM
  2457  000001                     __pcstackCOMRAM:
  2458                           	opt stack 0
  2459  000001                     ??i2_I2C_Master_Wait:
  2460  000001                     ??i2_delay_ms:
  2461  000001                     ??i2_isdigit:
  2462  000001                     ?i2___wmul:
  2463                           	opt stack 0
  2464  000001                     ?i2___lwmod:
  2465                           	opt stack 0
  2466  000001                     i2lcdNibble@temp:
  2467                           	opt stack 0
  2468  000001                     i2updateServoPosition@time_us:
  2469                           	opt stack 0
  2470  000001                     i2EEPROM_read@address:
  2471                           	opt stack 0
  2472  000001                     i2___wmul@multiplier:
  2473                           	opt stack 0
  2474  000001                     i2___lwmod@dividend:
  2475                           	opt stack 0
  2476  000001                     i2strcpy@to:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x0
  2480  000001                     	ds	1
  2481  000002                     i2I2C_Master_Read@a:
  2482                           	opt stack 0
  2483  000002                     i2lcdNibble@data:
  2484                           	opt stack 0
  2485  000002                     i2delay_ms@milliseconds:
  2486                           	opt stack 0
  2487  000002                     i2_isdigit$2058:
  2488                           	opt stack 0
  2489  000002                     i2I2C_Master_Write@d:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x1
  2493  000002                     	ds	1
  2494  000003                     i2I2C_Master_Read@temp:
  2495                           	opt stack 0
  2496  000003                     i2lcdInst@data:
  2497                           	opt stack 0
  2498  000003                     i2putch@data:
  2499                           	opt stack 0
  2500  000003                     i2isdigit@c:
  2501                           	opt stack 0
  2502  000003                     i2updateServoPosition@timer:
  2503                           	opt stack 0
  2504  000003                     i2___wmul@multiplicand:
  2505                           	opt stack 0
  2506  000003                     i2___lwmod@divisor:
  2507                           	opt stack 0
  2508  000003                     i2strcpy@from:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x2
  2512  000003                     	ds	1
  2513  000004                     i2getRTC@i:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x3
  2517  000004                     	ds	1
  2518  000005                     ??i2_updateServoPosition:
  2519  000005                     i2___lwmod@counter:
  2520                           	opt stack 0
  2521  000005                     i2___wmul@product:
  2522                           	opt stack 0
  2523  000005                     i2strcpy@cp:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x4
  2527  000005                     	ds	1
  2528  000006                     ?i2___lwdiv:
  2529                           	opt stack 0
  2530  000006                     i2___lwdiv@dividend:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x5
  2534  000006                     	ds	1
  2535  000007                     retrieveLog@logNum:
  2536                           	opt stack 0
  2537  000007                     i2updateServoPosition@my_time:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x6
  2541  000007                     	ds	1
  2542  000008                     i2___lwdiv@divisor:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x7
  2546  000008                     	ds	1
  2547  000009                     ??_retrieveLog:
  2548  000009                     ??_updateServoStates:
  2549                           
  2550                           ; 1 bytes @ 0x8
  2551  000009                     	ds	1
  2552  00000A                     i2___lwdiv@quotient:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x9
  2556  00000A                     	ds	1
  2557  00000B                     retrieveLog@byte1:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0xA
  2561  00000B                     	ds	1
  2562  00000C                     retrieveLog@byte2:
  2563                           	opt stack 0
  2564  00000C                     i2___lwdiv@counter:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0xB
  2568  00000C                     	ds	1
  2569  00000D                     ?i2_printf:
  2570                           	opt stack 0
  2571  00000D                     retrieveLog@byte3:
  2572                           	opt stack 0
  2573  00000D                     i2printf@f:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0xC
  2577  00000D                     	ds	1
  2578  00000E                     retrieveLog@i:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0xD
  2582  00000E                     	ds	2
  2583  000010                     retrieveLog@addr:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0xF
  2587  000010                     	ds	2
  2588  000012                     dispLogs@myLog:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x11
  2592  000012                     	ds	2
  2593  000014                     
  2594                           ; 1 bytes @ 0x13
  2595  000014                     	ds	5
  2596  000019                     ??i2_printf:
  2597                           
  2598                           ; 1 bytes @ 0x18
  2599  000019                     	ds	4
  2600  00001D                     i2printf@prec:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x1C
  2604  00001D                     	ds	1
  2605  00001E                     i2printf@cp:
  2606                           	opt stack 0
  2607                           
  2608                           ; 2 bytes @ 0x1D
  2609  00001E                     	ds	2
  2610  000020                     i2printf@ap:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x1F
  2614  000020                     	ds	2
  2615  000022                     i2printf@len:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x21
  2619  000022                     	ds	2
  2620  000024                     i2printf@val:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x23
  2624  000024                     	ds	2
  2625  000026                     i2printf@flag:
  2626                           	opt stack 0
  2627                           
  2628                           ; 1 bytes @ 0x25
  2629  000026                     	ds	1
  2630  000027                     i2printf@c:
  2631                           	opt stack 0
  2632                           
  2633                           ; 1 bytes @ 0x26
  2634  000027                     	ds	1
  2635  000028                     i2printf@width:
  2636                           	opt stack 0
  2637                           
  2638                           ; 2 bytes @ 0x27
  2639  000028                     	ds	2
  2640  00002A                     ??_printSortTimer:
  2641  00002A                     ??i2_printRTC:
  2642  00002A                     ?_inputHandler:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x29
  2646  00002A                     	ds	2
  2647  00002C                     ??_inputHandler:
  2648                           
  2649                           ; 1 bytes @ 0x2B
  2650  00002C                     	ds	1
  2651  00002D                     printSortTimer@curTime:
  2652                           	opt stack 0
  2653  00002D                     i2printRTC@INT_time:
  2654                           	opt stack 0
  2655                           
  2656                           ; 14 bytes @ 0x2C
  2657  00002D                     	ds	14
  2658  00003B                     printSortTimer@start_sec:
  2659                           	opt stack 0
  2660  00003B                     i2printRTC@RTC_month:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x3A
  2664  00003B                     	ds	2
  2665  00003D                     printSortTimer@cur_sec:
  2666                           	opt stack 0
  2667  00003D                     i2printRTC@month:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0x3C
  2671  00003D                     	ds	2
  2672  00003F                     printSortTimer@min:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x3E
  2676  00003F                     	ds	2
  2677  000041                     printSortTimer@sec:
  2678                           	opt stack 0
  2679  000041                     i2printRTC@i:
  2680                           	opt stack 0
  2681                           
  2682                           ; 2 bytes @ 0x40
  2683  000041                     	ds	2
  2684  000043                     ??_updateMenu:
  2685  000043                     _printSortTimer$2548:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x42
  2689  000043                     	ds	2
  2690  000045                     printSortTimer@timeDiff:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x44
  2694  000045                     	ds	2
  2695  000047                     printSortTimer@i_1186:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x46
  2699  000047                     	ds	2
  2700  000049                     printSortTimer@i:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x48
  2704  000049                     	ds	2
  2705  00004B                     ??_handler:
  2706                           
  2707                           ; 1 bytes @ 0x4A
  2708  00004B                     	ds	16
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1l	equ	0xFE1
  2717                           
  2718 ;;
  2719 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2720 ;;
  2721 ;; *************** function _main *****************
  2722 ;; Defined at:
  2723 ;;		line 19 in file "main.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels required when called:   13
  2743 ;; This function calls:
  2744 ;;		_I2C_Master_Init
  2745 ;;		_Test
  2746 ;;		_UI
  2747 ;;		_initLCD
  2748 ;;		_initTime
  2749 ;;		_initUI
  2750 ;;		_logRun
  2751 ;;		_machineConfig
  2752 ;;		_sort
  2753 ;;		_stopSignals
  2754 ;; This function is called by:
  2755 ;;		Startup code after reset
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text0
  2760  00402C                     __ptext0:
  2761                           	opt stack 0
  2762  00402C                     _main:
  2763                           	opt stack 18
  2764                           
  2765                           ;main.c: 20: machineConfig();
  2766                           
  2767                           ;incstack = 0
  2768  00402C  ECFC  F024         	call	_machineConfig	;wreg free
  2769                           
  2770                           ;main.c: 21: initLCD();
  2771  004030  EC4C  F026         	call	_initLCD	;wreg free
  2772                           
  2773                           ;main.c: 24: RTCflag = 0;
  2774  004034  0E00               	movlw	0
  2775  004036  0100               	movlb	0	; () banked
  2776  004038  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2777  00403A  0E00               	movlw	0
  2778  00403C  6FEA               	movwf	_RTCflag& (0+255),b
  2779                           
  2780                           ;main.c: 25: if(RTCflag){
  2781  00403E  0100               	movlb	0	; () banked
  2782  004040  51EA               	movf	_RTCflag& (0+255),w,b
  2783  004042  0100               	movlb	0	; () banked
  2784  004044  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2785  004046  B4D8               	btfsc	status,2,c
  2786  004048  D016               	goto	l9374
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2790  00404A  0E20               	movlw	32
  2791  00404C  0100               	movlb	0	; () banked
  2792  00404E  6F80               	movwf	initTime@m& (0+255),b
  2793  004050  0E15               	movlw	21
  2794  004052  0100               	movlb	0	; () banked
  2795  004054  6F81               	movwf	initTime@h& (0+255),b
  2796  004056  0E04               	movlw	4
  2797  004058  0100               	movlb	0	; () banked
  2798  00405A  6F82               	movwf	initTime@w& (0+255),b
  2799  00405C  0E15               	movlw	21
  2800  00405E  0100               	movlb	0	; () banked
  2801  004060  6F83               	movwf	initTime@DD& (0+255),b
  2802  004062  0E03               	movlw	3
  2803  004064  0100               	movlb	0	; () banked
  2804  004066  6F84               	movwf	initTime@MM& (0+255),b
  2805  004068  0E17               	movlw	23
  2806  00406A  0100               	movlb	0	; () banked
  2807  00406C  6F85               	movwf	initTime@YY& (0+255),b
  2808  00406E  0E42               	movlw	66
  2809  004070  EC00  F029         	call	_initTime
  2810                           
  2811                           ;main.c: 27: }
  2812  004074  D00B               	goto	l9376
  2813  004076                     l9374:
  2814                           
  2815                           ;main.c: 28: else{
  2816                           ;main.c: 29: I2C_Master_Init(10000);
  2817  004076  0E10               	movlw	16
  2818  004078  0100               	movlb	0	; () banked
  2819  00407A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2820  00407C  0E27               	movlw	39
  2821  00407E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2822  004080  0E00               	movlw	0
  2823  004082  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2824  004084  0E00               	movlw	0
  2825  004086  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2826  004088  ECCC  F024         	call	_I2C_Master_Init	;wreg free
  2827  00408C                     l9376:
  2828                           
  2829                           ;main.c: 30: }
  2830                           ;main.c: 32: initUI();
  2831  00408C  EC30  F027         	call	_initUI	;wreg free
  2832                           
  2833                           ;main.c: 33: first = 1;
  2834  004090  0E00               	movlw	0
  2835  004092  0101               	movlb	1	; () banked
  2836  004094  6F3A               	movwf	(_first+1)& (0+255),b
  2837  004096  0E01               	movlw	1
  2838  004098  6F39               	movwf	_first& (0+255),b
  2839                           
  2840                           ; BSR set to: 1
  2841                           ;main.c: 44: switch(machine_state){
  2842                           
  2843                           ;main.c: 43: while(1){
  2844  00409A  D018               	goto	l9398
  2845  00409C                     l9380:
  2846                           
  2847                           ;main.c: 46: UI();
  2848  00409C  EC65  F004         	call	_UI	;wreg free
  2849                           
  2850                           ;main.c: 47: break;
  2851  0040A0  D015               	goto	l9398
  2852  0040A2                     l9382:
  2853                           
  2854                           ;main.c: 49: sort();
  2855  0040A2  ECEF  F028         	call	_sort	;wreg free
  2856                           
  2857                           ;main.c: 50: break;
  2858  0040A6  D012               	goto	l9398
  2859  0040A8                     l9384:
  2860                           
  2861                           ;main.c: 52: stopSignals();
  2862  0040A8  EC2E  F029         	call	_stopSignals	;wreg free
  2863                           
  2864                           ;main.c: 53: logRun();
  2865  0040AC  EC0C  F01D         	call	_logRun	;wreg free
  2866                           
  2867                           ;main.c: 54: first = 1;
  2868  0040B0  0E00               	movlw	0
  2869  0040B2  0101               	movlb	1	; () banked
  2870  0040B4  6F3A               	movwf	(_first+1)& (0+255),b
  2871  0040B6  0E01               	movlw	1
  2872  0040B8  6F39               	movwf	_first& (0+255),b
  2873                           
  2874                           ; BSR set to: 1
  2875                           ;main.c: 55: UI();
  2876  0040BA  EC65  F004         	call	_UI	;wreg free
  2877                           
  2878                           ;main.c: 56: break;
  2879  0040BE  D006               	goto	l9398
  2880  0040C0                     l9392:
  2881                           
  2882                           ;main.c: 58: Test();
  2883  0040C0  EC3C  F01E         	call	_Test	;wreg free
  2884                           
  2885                           ;main.c: 59: break;
  2886  0040C4  D003               	goto	l9398
  2887  0040C6                     l9394:
  2888                           
  2889                           ;main.c: 61: stopSignals();
  2890  0040C6  EC2E  F029         	call	_stopSignals	;wreg free
  2891  0040CA                     l491:
  2892  0040CA  D7FF               	goto	l491
  2893  0040CC                     l9398:
  2894  0040CC  0100               	movlb	0	; () banked
  2895  0040CE  51FC               	movf	_machine_state& (0+255),w,b
  2896                           
  2897                           ; Switch size 1, requested type "space"
  2898                           ; Number of cases is 5, Range of values is 0 to 4
  2899                           ; switch strategies available:
  2900                           ; Name         Instructions Cycles
  2901                           ; simple_byte           16     9 (average)
  2902                           ;	Chosen strategy is simple_byte
  2903  0040D0  0A00               	xorlw	0	; case 0
  2904  0040D2  B4D8               	btfsc	status,2,c
  2905  0040D4  D7E3               	goto	l9380
  2906  0040D6  0A01               	xorlw	1	; case 1
  2907  0040D8  B4D8               	btfsc	status,2,c
  2908  0040DA  D7E3               	goto	l9382
  2909  0040DC  0A03               	xorlw	3	; case 2
  2910  0040DE  B4D8               	btfsc	status,2,c
  2911  0040E0  D7E3               	goto	l9384
  2912  0040E2  0A01               	xorlw	1	; case 3
  2913  0040E4  B4D8               	btfsc	status,2,c
  2914  0040E6  D7EC               	goto	l9392
  2915  0040E8  0A07               	xorlw	7	; case 4
  2916  0040EA  B4D8               	btfsc	status,2,c
  2917  0040EC  D7EC               	goto	l9394
  2918                           
  2919                           ; BSR set to: 0
  2920                           
  2921                           ; BSR set to: 0
  2922  0040EE  D7EE               	goto	l9398
  2923  0040F0                     __end_of_main:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1l	equ	0xFE1
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _stopSignals *****************
  2936 ;; Defined at:
  2937 ;;		line 70 in file "main.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    7
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text1
  2966  00525C                     __ptext1:
  2967                           	opt stack 0
  2968  00525C                     _stopSignals:
  2969                           	opt stack 23
  2970                           
  2971                           ;main.c: 71: LATA = 0x00;
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;incstack = 0
  2975  00525C  0E00               	movlw	0
  2976  00525E  6E89               	movwf	3977,c	;volatile
  2977                           
  2978                           ;main.c: 72: LATB = 0x00;
  2979  005260  0E00               	movlw	0
  2980  005262  6E8A               	movwf	3978,c	;volatile
  2981                           
  2982                           ;main.c: 73: LATC = 0x00;
  2983  005264  0E00               	movlw	0
  2984  005266  6E8B               	movwf	3979,c	;volatile
  2985                           
  2986                           ;main.c: 74: LATD = 0x00;
  2987  005268  0E00               	movlw	0
  2988  00526A  6E8C               	movwf	3980,c	;volatile
  2989                           
  2990                           ;main.c: 75: LATE = 0x00;
  2991  00526C  0E00               	movlw	0
  2992  00526E  6E8D               	movwf	3981,c	;volatile
  2993                           
  2994                           ;main.c: 76: TMR1ON = 0;
  2995  005270  90CD               	bcf	4045,0,c	;volatile
  2996                           
  2997                           ;main.c: 77: TMR3ON = 0;
  2998  005272  90B1               	bcf	4017,0,c	;volatile
  2999  005274  0012               	return		;funcret
  3000  005276                     __end_of_stopSignals:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _sort *****************
  3013 ;; Defined at:
  3014 ;;		line 63 in file "sort.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:   12
  3035 ;; This function calls:
  3036 ;;		_Distribution
  3037 ;;		_ID
  3038 ;;		_Loading
  3039 ;; This function is called by:
  3040 ;;		_main
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text2
  3045  0051DE                     __ptext2:
  3046                           	opt stack 0
  3047  0051DE                     _sort:
  3048                           	opt stack 18
  3049                           
  3050                           ;sort.c: 64: if(machine_state == Sorting_state){
  3051                           
  3052                           ;incstack = 0
  3053  0051DE  0100               	movlb	0	; () banked
  3054  0051E0  05FC               	decf	_machine_state& (0+255),w,b
  3055  0051E2  B4D8               	btfsc	status,2,c
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;sort.c: 65: Loading();
  3059  0051E4  ECB6  F008         	call	_Loading	;wreg free
  3060                           
  3061                           ;sort.c: 66: }
  3062                           ;sort.c: 67: if(machine_state == Sorting_state){
  3063  0051E8  0100               	movlb	0	; () banked
  3064  0051EA  05FC               	decf	_machine_state& (0+255),w,b
  3065  0051EC  B4D8               	btfsc	status,2,c
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 68: ID();
  3069  0051EE  EC35  F016         	call	_ID	;wreg free
  3070                           
  3071                           ;sort.c: 69: }
  3072                           ;sort.c: 70: if(machine_state == Sorting_state){
  3073  0051F2  0100               	movlb	0	; () banked
  3074  0051F4  05FC               	decf	_machine_state& (0+255),w,b
  3075  0051F6  A4D8               	btfss	status,2,c
  3076  0051F8  0012               	return	
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;sort.c: 71: Distribution();
  3080  0051FA  EC3A  F01F         	call	_Distribution	;wreg free
  3081  0051FE  0012               	return	
  3082  005200                     __end_of_sort:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _Loading *****************
  3095 ;; Defined at:
  3096 ;;		line 75 in file "sort.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  i               2   62[BANK0 ] int 
  3101 ;;  i               2   60[BANK0 ] int 
  3102 ;;  i               2   58[BANK0 ] int 
  3103 ;;  i               2   56[BANK0 ] int 
  3104 ;;  i               2   54[BANK0 ] int 
  3105 ;;  j               2   64[BANK0 ] int 
  3106 ;;  i               2   66[BANK0 ] int 
  3107 ;;  addr            2   51[BANK0 ] unsigned short 
  3108 ;;  byte1           1   53[BANK0 ] unsigned char 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:       19 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:   11
  3125 ;; This function calls:
  3126 ;;		_EEPROM_read
  3127 ;;		_EEPROM_write
  3128 ;;		_delay_ms
  3129 ;;		_getIR
  3130 ;;		_getMAG
  3131 ;;		_initGlobalVars
  3132 ;;		_initServos
  3133 ;;		_initSortTimer
  3134 ;;		_lcdInst
  3135 ;;		_readIR
  3136 ;; This function is called by:
  3137 ;;		_sort
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text3
  3142  00116C                     __ptext3:
  3143                           	opt stack 0
  3144  00116C                     _Loading:
  3145                           	opt stack 18
  3146                           
  3147                           ;sort.c: 76: if(first){
  3148                           
  3149                           ;incstack = 0
  3150  00116C  0101               	movlb	1	; () banked
  3151  00116E  5139               	movf	_first& (0+255),w,b
  3152  001170  0101               	movlb	1	; () banked
  3153  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3154  001174  B4D8               	btfsc	status,2,c
  3155  001176  D066               	goto	l7242
  3156                           
  3157                           ; BSR set to: 1
  3158                           ;sort.c: 77: initGlobalVars();
  3159  001178  EC35  F021         	call	_initGlobalVars	;wreg free
  3160                           
  3161                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3162  00117C  0E01               	movlw	1
  3163  00117E  EC6D  F029         	call	_lcdInst
  3164  001182  0E68               	movlw	104
  3165  001184  0100               	movlb	0	; () banked
  3166  001186  6FB1               	movwf	??_Loading& (0+255),b
  3167  001188  0EE4               	movlw	228
  3168  00118A                     u8557:
  3169  00118A  2EE8               	decfsz	wreg,f,c
  3170  00118C  D7FE               	bra	u8557
  3171  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3172  001190  D7FC               	bra	u8557
  3173  001192  F000               	nop	
  3174                           
  3175                           ;sort.c: 79: initSortTimer();
  3176  001194  EC8B  F021         	call	_initSortTimer	;wreg free
  3177                           
  3178                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3179  001198  8A8B               	bsf	3979,5,c	;volatile
  3180                           
  3181                           ;sort.c: 85: sel = EEPROM_read(0);
  3182  00119A  0E00               	movlw	0
  3183  00119C  0100               	movlb	0	; () banked
  3184  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3185  0011A0  0E00               	movlw	0
  3186  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3187  0011A4  EC3B  F029         	call	_EEPROM_read	;wreg free
  3188  0011A8  0100               	movlb	0	; () banked
  3189  0011AA  6FFD               	movwf	_sel& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3193  0011AC  0100               	movlb	0	; () banked
  3194  0011AE  51FD               	movf	_sel& (0+255),w,b
  3195  0011B0  0D0B               	mullw	11
  3196  0011B2  0E01               	movlw	1
  3197  0011B4  24F3               	addwf	prodl,w,c
  3198  0011B6  0100               	movlb	0	; () banked
  3199  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3200  0011BA  0E00               	movlw	0
  3201  0011BC  20F4               	addwfc	prodh,w,c
  3202  0011BE  0100               	movlb	0	; () banked
  3203  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3207  0011C2  0E7F               	movlw	127
  3208  0011C4  0100               	movlb	0	; () banked
  3209  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3213  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3214  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3215  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3216  0011D4  ECC6  F01E         	call	_EEPROM_write	;wreg free
  3217                           
  3218                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3219  0011D8  948A               	bcf	3978,2,c	;volatile
  3220                           
  3221                           ;sort.c: 93: for(int i=0; i<46; i++){
  3222  0011DA  0E00               	movlw	0
  3223  0011DC  0100               	movlb	0	; () banked
  3224  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3225  0011E0  0E00               	movlw	0
  3226  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229  0011E4  0100               	movlb	0	; () banked
  3230  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3231  0011E8  D008               	goto	l7232
  3232  0011EA  0100               	movlb	0	; () banked
  3233  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3234  0011EE  E126               	bnz	l752
  3235  0011F0  0E2E               	movlw	46
  3236  0011F2  0100               	movlb	0	; () banked
  3237  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3238  0011F6  B0D8               	btfsc	status,0,c
  3239  0011F8  D021               	goto	l752
  3240  0011FA                     l7232:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3244  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3245  0011FC  D004               	goto	u5590
  3246  0011FE  0100               	movlb	0	; () banked
  3247  001200  6BB1               	clrf	??_Loading& (0+255),b
  3248  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3249  001204  D002               	goto	u5608
  3250  001206                     u5590:
  3251  001206  0100               	movlb	0	; () banked
  3252  001208  6BB1               	clrf	??_Loading& (0+255),b
  3253  00120A                     u5608:
  3254  00120A  0100               	movlb	0	; () banked
  3255  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3256  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3257  001210  508A               	movf	3978,w,c	;volatile
  3258  001212  0100               	movlb	0	; () banked
  3259  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3260  001216  0BFB               	andlw	-5
  3261  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3262  00121A  6E8A               	movwf	3978,c	;volatile
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 95: delay_ms(45-i);
  3266  00121C  0100               	movlb	0	; () banked
  3267  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3268  001220  0800               	sublw	0
  3269  001222  0F2D               	addlw	45
  3270  001224  EC8F  F028         	call	_delay_ms
  3271  001228  0100               	movlb	0	; () banked
  3272  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3273  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3274                           
  3275                           ; BSR set to: 0
  3276  00122E  0100               	movlb	0	; () banked
  3277  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3278  001232  D7E3               	goto	l7232
  3279  001234  0100               	movlb	0	; () banked
  3280  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3281  001238  E101               	bnz	u5610
  3282  00123A  D7DA               	goto	L1
  3283  00123C                     u5610:
  3284  00123C                     l752:
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;sort.c: 96: }
  3288                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3289  00123C  848A               	bsf	3978,2,c	;volatile
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 100: initServos();
  3293  00123E  EC58  F025         	call	_initServos	;wreg free
  3294                           
  3295                           ;sort.c: 101: }
  3296  001242  0012               	return	
  3297  001244                     l7242:
  3298                           
  3299                           ;sort.c: 102: else{
  3300                           ;sort.c: 105: if(!f_loadingNewCan){
  3301  001244  0100               	movlb	0	; () banked
  3302  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3303  001248  0100               	movlb	0	; () banked
  3304  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3305  00124C  A4D8               	btfss	status,2,c
  3306  00124E  D018               	goto	l7258
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;sort.c: 107: getIR();
  3310  001250  ECBD  F023         	call	_getIR	;wreg free
  3311                           
  3312                           ;sort.c: 109: if(!f_loadingNewCan){
  3313  001254  0100               	movlb	0	; () banked
  3314  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3315  001258  0100               	movlb	0	; () banked
  3316  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3317  00125C  B4D8               	btfsc	status,2,c
  3318  00125E  0012               	return	
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 113: else{
  3322                           ;sort.c: 114: count_total++;
  3323                           
  3324                           ; BSR set to: 0
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;sort.c: 111: }
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 110: return;
  3331  001260  0100               	movlb	0	; () banked
  3332  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3333  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 115: if(count_total == 12){
  3337  001266  0E0C               	movlw	12
  3338  001268  0100               	movlb	0	; () banked
  3339  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3340  00126C  0100               	movlb	0	; () banked
  3341  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3342  001270  A4D8               	btfss	status,2,c
  3343  001272  0012               	return	
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 116: f_lastCan = 1;
  3347  001274  0E00               	movlw	0
  3348  001276  0100               	movlb	0	; () banked
  3349  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3350  00127A  0E01               	movlw	1
  3351  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;sort.c: 117: }
  3355                           ;sort.c: 118: }
  3356                           ;sort.c: 119: }
  3357                           
  3358                           ; BSR set to: 0
  3359  00127E  0012               	return	
  3360  001280                     l7258:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 122: else if(f_ID_receive){
  3364  001280  0101               	movlb	1	; () banked
  3365  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3366  001284  0101               	movlb	1	; () banked
  3367  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3368  001288  B4D8               	btfsc	status,2,c
  3369  00128A  0012               	return	
  3370                           
  3371                           ; BSR set to: 1
  3372                           ;sort.c: 123: f_most_recent_sort_time = 1;
  3373  00128C  0E00               	movlw	0
  3374  00128E  0101               	movlb	1	; () banked
  3375  001290  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3376  001292  0E01               	movlw	1
  3377  001294  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3378                           
  3379                           ;sort.c: 124: f_loadingNewCan = 0;
  3380  001296  0E00               	movlw	0
  3381  001298  0100               	movlb	0	; () banked
  3382  00129A  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3383  00129C  0E00               	movlw	0
  3384  00129E  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 125: _delay((unsigned long)((750)*(32000000/4000.0)));
  3388  0012A0  0E1F               	movlw	31
  3389  0012A2  0100               	movlb	0	; () banked
  3390  0012A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3391  0012A6  0E71               	movlw	113
  3392  0012A8  0100               	movlb	0	; () banked
  3393  0012AA  6FB1               	movwf	??_Loading& (0+255),b
  3394  0012AC  0E1E               	movlw	30
  3395  0012AE                     u8567:
  3396  0012AE  2EE8               	decfsz	wreg,f,c
  3397  0012B0  D7FE               	bra	u8567
  3398  0012B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3399  0012B4  D7FC               	bra	u8567
  3400  0012B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3401  0012B8  D7FA               	bra	u8567
  3402  0012BA  F000               	nop	
  3403                           
  3404                           ;sort.c: 126: LATBbits.LATB2 = 0;
  3405  0012BC  948A               	bcf	3978,2,c	;volatile
  3406                           
  3407                           ;sort.c: 130: getMAG();
  3408  0012BE  ECFE  F026         	call	_getMAG	;wreg free
  3409                           
  3410                           ;sort.c: 131: sensor_outputs[0] = MAG_signal;
  3411  0012C2  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3412  0012C6  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3413                           
  3414                           ;sort.c: 133: if(sensor_outputs[0]){
  3415  0012CA  0100               	movlb	0	; () banked
  3416  0012CC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3417  0012CE  0100               	movlb	0	; () banked
  3418  0012D0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3419  0012D2  B4D8               	btfsc	status,2,c
  3420  0012D4  D01D               	goto	l7284
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;sort.c: 134: for(int i = 0; i<2500; i++){
  3424  0012D6  0E00               	movlw	0
  3425  0012D8  0100               	movlb	0	; () banked
  3426  0012DA  6FB7               	movwf	(Loading@i_1148+1)& (0+255),b
  3427  0012DC  0E00               	movlw	0
  3428  0012DE  6FB6               	movwf	Loading@i_1148& (0+255),b
  3429  0012E0                     l7274:
  3430                           
  3431                           ; BSR set to: 0
  3432  0012E0  0100               	movlb	0	; () banked
  3433  0012E2  BFB7               	btfsc	(Loading@i_1148+1)& (0+255),7,b
  3434  0012E4  D008               	goto	l762
  3435  0012E6  0EC4               	movlw	196
  3436  0012E8  0100               	movlb	0	; () banked
  3437  0012EA  5DB6               	subwf	Loading@i_1148& (0+255),w,b
  3438  0012EC  0E09               	movlw	9
  3439  0012EE  0100               	movlb	0	; () banked
  3440  0012F0  59B7               	subwfb	(Loading@i_1148+1)& (0+255),w,b
  3441  0012F2  B0D8               	btfsc	status,0,c
  3442  0012F4  D02A               	goto	l7296
  3443  0012F6                     l762:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sort.c: 135: LATAbits.LATA4 = 1;
  3447  0012F6  8889               	bsf	3977,4,c	;volatile
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;sort.c: 136: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3451  0012F8  0EC8               	movlw	200
  3452  0012FA                     u8577:
  3453  0012FA  2EE8               	decfsz	wreg,f,c
  3454  0012FC  D7FE               	bra	u8577
  3455                           
  3456                           ;sort.c: 137: LATAbits.LATA4 = 0;
  3457  0012FE  9889               	bcf	3977,4,c	;volatile
  3458                           
  3459                           ;sort.c: 138: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3460  001300  0E42               	movlw	66
  3461  001302                     u8587:
  3462  001302  2EE8               	decfsz	wreg,f,c
  3463  001304  D7FE               	bra	u8587
  3464  001306  D000               	nop2	
  3465  001308  0100               	movlb	0	; () banked
  3466  00130A  4BB6               	infsnz	Loading@i_1148& (0+255),f,b
  3467  00130C  2BB7               	incf	(Loading@i_1148+1)& (0+255),f,b
  3468  00130E  D7E8               	goto	l7274
  3469  001310                     l7284:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 141: else{
  3473                           ;sort.c: 142: for(int i = 0; i<2500; i++){
  3474  001310  0E00               	movlw	0
  3475  001312  0100               	movlb	0	; () banked
  3476  001314  6FB9               	movwf	(Loading@i_1157+1)& (0+255),b
  3477  001316  0E00               	movlw	0
  3478  001318  6FB8               	movwf	Loading@i_1157& (0+255),b
  3479  00131A                     l7286:
  3480                           
  3481                           ; BSR set to: 0
  3482  00131A  0100               	movlb	0	; () banked
  3483  00131C  BFB9               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3484  00131E  D008               	goto	l765
  3485  001320  0EC4               	movlw	196
  3486  001322  0100               	movlb	0	; () banked
  3487  001324  5DB8               	subwf	Loading@i_1157& (0+255),w,b
  3488  001326  0E09               	movlw	9
  3489  001328  0100               	movlb	0	; () banked
  3490  00132A  59B9               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3491  00132C  B0D8               	btfsc	status,0,c
  3492  00132E  D00D               	goto	l7296
  3493  001330                     l765:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 143: LATAbits.LATA4 = 1;
  3497  001330  8889               	bsf	3977,4,c	;volatile
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;sort.c: 144: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3501  001332  0E9A               	movlw	154
  3502  001334                     u8597:
  3503  001334  2EE8               	decfsz	wreg,f,c
  3504  001336  D7FE               	bra	u8597
  3505  001338  D000               	nop2	
  3506                           
  3507                           ;sort.c: 145: LATAbits.LATA4 = 0;
  3508  00133A  9889               	bcf	3977,4,c	;volatile
  3509                           
  3510                           ;sort.c: 146: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3511  00133C  0E70               	movlw	112
  3512  00133E                     u8607:
  3513  00133E  2EE8               	decfsz	wreg,f,c
  3514  001340  D7FE               	bra	u8607
  3515  001342  0100               	movlb	0	; () banked
  3516  001344  4BB8               	infsnz	Loading@i_1157& (0+255),f,b
  3517  001346  2BB9               	incf	(Loading@i_1157+1)& (0+255),f,b
  3518  001348  D7E8               	goto	l7286
  3519  00134A                     l7296:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;sort.c: 147: }
  3523                           ;sort.c: 148: }
  3524                           ;sort.c: 150: _delay((unsigned long)((350)*(32000000/4000.0)));
  3525  00134A  0E0F               	movlw	15
  3526  00134C  0100               	movlb	0	; () banked
  3527  00134E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3528  001350  0E35               	movlw	53
  3529  001352  0100               	movlb	0	; () banked
  3530  001354  6FB1               	movwf	??_Loading& (0+255),b
  3531  001356  0E51               	movlw	81
  3532  001358                     u8617:
  3533  001358  2EE8               	decfsz	wreg,f,c
  3534  00135A  D7FE               	bra	u8617
  3535  00135C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3536  00135E  D7FC               	bra	u8617
  3537  001360  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3538  001362  D7FA               	bra	u8617
  3539                           
  3540                           ;sort.c: 152: readIR();
  3541  001364  EC00  F026         	call	_readIR	;wreg free
  3542                           
  3543                           ;sort.c: 153: if(IR_signal==1){
  3544  001368  0100               	movlb	0	; () banked
  3545  00136A  05E6               	decf	_IR_signal& (0+255),w,b
  3546  00136C  0100               	movlb	0	; () banked
  3547  00136E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3548  001370  A4D8               	btfss	status,2,c
  3549  001372  D148               	goto	l7414
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;sort.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  3553  001374  0E05               	movlw	5
  3554  001376  0100               	movlb	0	; () banked
  3555  001378  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3556  00137A  0E0F               	movlw	15
  3557  00137C  0100               	movlb	0	; () banked
  3558  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3559  001380  0EF1               	movlw	241
  3560  001382                     u8627:
  3561  001382  2EE8               	decfsz	wreg,f,c
  3562  001384  D7FE               	bra	u8627
  3563  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3564  001388  D7FC               	bra	u8627
  3565  00138A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3566  00138C  D7FA               	bra	u8627
  3567                           
  3568                           ;sort.c: 155: readIR();
  3569  00138E  EC00  F026         	call	_readIR	;wreg free
  3570                           
  3571                           ;sort.c: 156: if(IR_signal==1){
  3572  001392  0100               	movlb	0	; () banked
  3573  001394  05E6               	decf	_IR_signal& (0+255),w,b
  3574  001396  0100               	movlb	0	; () banked
  3575  001398  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3576  00139A  A4D8               	btfss	status,2,c
  3577  00139C  D040               	goto	l7334
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;sort.c: 157: if(sensor_outputs[0]){
  3581  00139E  0100               	movlb	0	; () banked
  3582  0013A0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3583  0013A2  0100               	movlb	0	; () banked
  3584  0013A4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3585  0013A6  B4D8               	btfsc	status,2,c
  3586  0013A8  D01D               	goto	l7322
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3590  0013AA  0E00               	movlw	0
  3591  0013AC  0100               	movlb	0	; () banked
  3592  0013AE  6FBB               	movwf	(Loading@i_1159+1)& (0+255),b
  3593  0013B0  0E00               	movlw	0
  3594  0013B2  6FBA               	movwf	Loading@i_1159& (0+255),b
  3595  0013B4                     l7312:
  3596                           
  3597                           ; BSR set to: 0
  3598  0013B4  0100               	movlb	0	; () banked
  3599  0013B6  BFBB               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3600  0013B8  D008               	goto	l770
  3601  0013BA  0EC4               	movlw	196
  3602  0013BC  0100               	movlb	0	; () banked
  3603  0013BE  5DBA               	subwf	Loading@i_1159& (0+255),w,b
  3604  0013C0  0E09               	movlw	9
  3605  0013C2  0100               	movlb	0	; () banked
  3606  0013C4  59BB               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3607  0013C6  B0D8               	btfsc	status,0,c
  3608  0013C8  D02A               	goto	l7334
  3609  0013CA                     l770:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3613  0013CA  8889               	bsf	3977,4,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 160: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3617  0013CC  0EC8               	movlw	200
  3618  0013CE                     u8637:
  3619  0013CE  2EE8               	decfsz	wreg,f,c
  3620  0013D0  D7FE               	bra	u8637
  3621                           
  3622                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3623  0013D2  9889               	bcf	3977,4,c	;volatile
  3624                           
  3625                           ;sort.c: 162: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3626  0013D4  0E42               	movlw	66
  3627  0013D6                     u8647:
  3628  0013D6  2EE8               	decfsz	wreg,f,c
  3629  0013D8  D7FE               	bra	u8647
  3630  0013DA  D000               	nop2	
  3631  0013DC  0100               	movlb	0	; () banked
  3632  0013DE  4BBA               	infsnz	Loading@i_1159& (0+255),f,b
  3633  0013E0  2BBB               	incf	(Loading@i_1159+1)& (0+255),f,b
  3634  0013E2  D7E8               	goto	l7312
  3635  0013E4                     l7322:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 165: else{
  3639                           ;sort.c: 166: for(int i = 0; i<2500; i++){
  3640  0013E4  0E00               	movlw	0
  3641  0013E6  0100               	movlb	0	; () banked
  3642  0013E8  6FBD               	movwf	(Loading@i_1160+1)& (0+255),b
  3643  0013EA  0E00               	movlw	0
  3644  0013EC  6FBC               	movwf	Loading@i_1160& (0+255),b
  3645  0013EE                     l7324:
  3646                           
  3647                           ; BSR set to: 0
  3648  0013EE  0100               	movlb	0	; () banked
  3649  0013F0  BFBD               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3650  0013F2  D008               	goto	l773
  3651  0013F4  0EC4               	movlw	196
  3652  0013F6  0100               	movlb	0	; () banked
  3653  0013F8  5DBC               	subwf	Loading@i_1160& (0+255),w,b
  3654  0013FA  0E09               	movlw	9
  3655  0013FC  0100               	movlb	0	; () banked
  3656  0013FE  59BD               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3657  001400  B0D8               	btfsc	status,0,c
  3658  001402  D00D               	goto	l7334
  3659  001404                     l773:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 167: LATAbits.LATA4 = 1;
  3663  001404  8889               	bsf	3977,4,c	;volatile
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 168: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3667  001406  0E9A               	movlw	154
  3668  001408                     u8657:
  3669  001408  2EE8               	decfsz	wreg,f,c
  3670  00140A  D7FE               	bra	u8657
  3671  00140C  D000               	nop2	
  3672                           
  3673                           ;sort.c: 169: LATAbits.LATA4 = 0;
  3674  00140E  9889               	bcf	3977,4,c	;volatile
  3675                           
  3676                           ;sort.c: 170: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3677  001410  0E70               	movlw	112
  3678  001412                     u8667:
  3679  001412  2EE8               	decfsz	wreg,f,c
  3680  001414  D7FE               	bra	u8667
  3681  001416  0100               	movlb	0	; () banked
  3682  001418  4BBC               	infsnz	Loading@i_1160& (0+255),f,b
  3683  00141A  2BBD               	incf	(Loading@i_1160+1)& (0+255),f,b
  3684  00141C  D7E8               	goto	l7324
  3685  00141E                     l7334:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 171: }
  3689                           ;sort.c: 172: }
  3690                           ;sort.c: 173: }
  3691                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3692  00141E  0E0F               	movlw	15
  3693  001420  0100               	movlb	0	; () banked
  3694  001422  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3695  001424  0E35               	movlw	53
  3696  001426  0100               	movlb	0	; () banked
  3697  001428  6FB1               	movwf	??_Loading& (0+255),b
  3698  00142A  0E51               	movlw	81
  3699  00142C                     u8677:
  3700  00142C  2EE8               	decfsz	wreg,f,c
  3701  00142E  D7FE               	bra	u8677
  3702  001430  2FB1               	decfsz	??_Loading& (0+255),f,b
  3703  001432  D7FC               	bra	u8677
  3704  001434  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3705  001436  D7FA               	bra	u8677
  3706                           
  3707                           ;sort.c: 177: int j = 1;
  3708  001438  0E00               	movlw	0
  3709  00143A  0100               	movlb	0	; () banked
  3710  00143C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3711  00143E  0E01               	movlw	1
  3712  001440  6FC0               	movwf	Loading@j& (0+255),b
  3713                           
  3714                           ;sort.c: 178: while(IR_signal == 1){
  3715  001442  D0D9               	goto	l7412
  3716  001444                     l7338:
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 179: readIR();
  3720  001444  EC00  F026         	call	_readIR	;wreg free
  3721                           
  3722                           ;sort.c: 180: if(j == 10){
  3723  001448  0E0A               	movlw	10
  3724  00144A  0100               	movlb	0	; () banked
  3725  00144C  19C0               	xorwf	Loading@j& (0+255),w,b
  3726  00144E  0100               	movlb	0	; () banked
  3727  001450  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3728  001452  A4D8               	btfss	status,2,c
  3729  001454  D016               	goto	l7346
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;sort.c: 181: LATBbits.LATB2 = !LATBbits.LATB2;
  3733  001456  B48A               	btfsc	3978,2,c	;volatile
  3734  001458  D004               	goto	u5790
  3735  00145A  0100               	movlb	0	; () banked
  3736  00145C  6BB1               	clrf	??_Loading& (0+255),b
  3737  00145E  2BB1               	incf	??_Loading& (0+255),f,b
  3738  001460  D002               	goto	u5808
  3739  001462                     u5790:
  3740  001462  0100               	movlb	0	; () banked
  3741  001464  6BB1               	clrf	??_Loading& (0+255),b
  3742  001466                     u5808:
  3743  001466  0100               	movlb	0	; () banked
  3744  001468  47B1               	rlncf	??_Loading& (0+255),f,b
  3745  00146A  47B1               	rlncf	??_Loading& (0+255),f,b
  3746  00146C  508A               	movf	3978,w,c	;volatile
  3747  00146E  0100               	movlb	0	; () banked
  3748  001470  19B1               	xorwf	??_Loading& (0+255),w,b
  3749  001472  0BFB               	andlw	-5
  3750  001474  19B1               	xorwf	??_Loading& (0+255),w,b
  3751  001476  6E8A               	movwf	3978,c	;volatile
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;sort.c: 182: j = 0;
  3755  001478  0E00               	movlw	0
  3756  00147A  0100               	movlb	0	; () banked
  3757  00147C  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3758  00147E  0E00               	movlw	0
  3759  001480  6FC0               	movwf	Loading@j& (0+255),b
  3760  001482                     l7346:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;sort.c: 183: }
  3764                           ;sort.c: 184: if(IR_signal==1){
  3765  001482  0100               	movlb	0	; () banked
  3766  001484  05E6               	decf	_IR_signal& (0+255),w,b
  3767  001486  0100               	movlb	0	; () banked
  3768  001488  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3769  00148A  A4D8               	btfss	status,2,c
  3770  00148C  D098               	goto	l7400
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;sort.c: 185: _delay((unsigned long)((350)*(32000000/4000.0)));
  3774  00148E  0E0F               	movlw	15
  3775  001490  0100               	movlb	0	; () banked
  3776  001492  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3777  001494  0E35               	movlw	53
  3778  001496  0100               	movlb	0	; () banked
  3779  001498  6FB1               	movwf	??_Loading& (0+255),b
  3780  00149A  0E51               	movlw	81
  3781  00149C                     u8687:
  3782  00149C  2EE8               	decfsz	wreg,f,c
  3783  00149E  D7FE               	bra	u8687
  3784  0014A0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3785  0014A2  D7FC               	bra	u8687
  3786  0014A4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3787  0014A6  D7FA               	bra	u8687
  3788                           
  3789                           ;sort.c: 186: readIR();
  3790  0014A8  EC00  F026         	call	_readIR	;wreg free
  3791                           
  3792                           ;sort.c: 187: if(IR_signal==1){
  3793  0014AC  0100               	movlb	0	; () banked
  3794  0014AE  05E6               	decf	_IR_signal& (0+255),w,b
  3795  0014B0  0100               	movlb	0	; () banked
  3796  0014B2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3797  0014B4  A4D8               	btfss	status,2,c
  3798  0014B6  D07F               	goto	l779
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;sort.c: 188: if(sensor_outputs[0]){
  3802  0014B8  0100               	movlb	0	; () banked
  3803  0014BA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3804  0014BC  0100               	movlb	0	; () banked
  3805  0014BE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3806  0014C0  B4D8               	btfsc	status,2,c
  3807  0014C2  D011               	goto	l7362
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;sort.c: 189: LATAbits.LATA4 = 1;
  3811  0014C4  8889               	bsf	3977,4,c	;volatile
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;sort.c: 190: _delay((unsigned long)((250)*(32000000/4000.0)));
  3815  0014C6  0E0B               	movlw	11
  3816  0014C8  0100               	movlb	0	; () banked
  3817  0014CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3818  0014CC  0E26               	movlw	38
  3819  0014CE  0100               	movlb	0	; () banked
  3820  0014D0  6FB1               	movwf	??_Loading& (0+255),b
  3821  0014D2  0E5D               	movlw	93
  3822  0014D4                     u8697:
  3823  0014D4  2EE8               	decfsz	wreg,f,c
  3824  0014D6  D7FE               	bra	u8697
  3825  0014D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3826  0014DA  D7FC               	bra	u8697
  3827  0014DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3828  0014DE  D7FA               	bra	u8697
  3829  0014E0  D000               	nop2	
  3830                           
  3831                           ;sort.c: 191: LATAbits.LATA4 = 0;
  3832  0014E2  9889               	bcf	3977,4,c	;volatile
  3833                           
  3834                           ;sort.c: 192: }
  3835  0014E4  D068               	goto	l779
  3836  0014E6                     l7362:
  3837                           
  3838                           ;sort.c: 193: else{
  3839                           ;sort.c: 194: for(int i = 0; i<2500; i++){
  3840  0014E6  0E00               	movlw	0
  3841  0014E8  0100               	movlb	0	; () banked
  3842  0014EA  6FBF               	movwf	(Loading@i_1162+1)& (0+255),b
  3843  0014EC  0E00               	movlw	0
  3844  0014EE  6FBE               	movwf	Loading@i_1162& (0+255),b
  3845  0014F0                     l7364:
  3846                           
  3847                           ; BSR set to: 0
  3848  0014F0  0100               	movlb	0	; () banked
  3849  0014F2  BFBF               	btfsc	(Loading@i_1162+1)& (0+255),7,b
  3850  0014F4  D041               	goto	l7392
  3851  0014F6  0EC4               	movlw	196
  3852  0014F8  0100               	movlb	0	; () banked
  3853  0014FA  5DBE               	subwf	Loading@i_1162& (0+255),w,b
  3854  0014FC  0E09               	movlw	9
  3855  0014FE  0100               	movlb	0	; () banked
  3856  001500  59BF               	subwfb	(Loading@i_1162+1)& (0+255),w,b
  3857  001502  B0D8               	btfsc	status,0,c
  3858  001504  D058               	goto	l779
  3859  001506  D038               	goto	l7392
  3860  001508                     l785:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;sort.c: 197: LATAbits.LATA4 = 1;
  3864  001508  8889               	bsf	3977,4,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;sort.c: 198: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3868  00150A  0EC8               	movlw	200
  3869  00150C                     u8707:
  3870  00150C  2EE8               	decfsz	wreg,f,c
  3871  00150E  D7FE               	bra	u8707
  3872                           
  3873                           ;sort.c: 199: LATAbits.LATA4 = 0;
  3874  001510  9889               	bcf	3977,4,c	;volatile
  3875                           
  3876                           ;sort.c: 200: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3877  001512  0E42               	movlw	66
  3878  001514                     u8717:
  3879  001514  2EE8               	decfsz	wreg,f,c
  3880  001516  D7FE               	bra	u8717
  3881  001518  D01C               	goto	L2
  3882  00151A                     l787:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 203: LATAbits.LATA4 = 1;
  3886  00151A  8889               	bsf	3977,4,c	;volatile
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 204: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3890  00151C  0ED5               	movlw	213
  3891  00151E                     u8727:
  3892  00151E  2EE8               	decfsz	wreg,f,c
  3893  001520  D7FE               	bra	u8727
  3894  001522  F000               	nop	
  3895                           
  3896                           ;sort.c: 205: LATAbits.LATA4 = 0;
  3897  001524  9889               	bcf	3977,4,c	;volatile
  3898                           
  3899                           ;sort.c: 206: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3900  001526  0E35               	movlw	53
  3901  001528                     u8737:
  3902  001528  2EE8               	decfsz	wreg,f,c
  3903  00152A  D7FE               	bra	u8737
  3904  00152C  D01D               	goto	L3
  3905  00152E                     l788:
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;sort.c: 209: LATAbits.LATA4 = 1;
  3909  00152E  8889               	bsf	3977,4,c	;volatile
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;sort.c: 210: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3913  001530  0EE2               	movlw	226
  3914  001532                     u8747:
  3915  001532  2EE8               	decfsz	wreg,f,c
  3916  001534  D7FE               	bra	u8747
  3917  001536  D000               	nop2	
  3918                           
  3919                           ;sort.c: 211: LATAbits.LATA4 = 0;
  3920  001538  9889               	bcf	3977,4,c	;volatile
  3921                           
  3922                           ;sort.c: 212: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3923  00153A  0E28               	movlw	40
  3924  00153C                     u8757:
  3925  00153C  2EE8               	decfsz	wreg,f,c
  3926  00153E  D7FE               	bra	u8757
  3927                           
  3928                           ;sort.c: 213: break;
  3929  001540  D036               	goto	l7394
  3930  001542                     l789:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 215: LATAbits.LATA4 = 1;
  3934  001542  8889               	bsf	3977,4,c	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;sort.c: 216: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3938  001544  0EF0               	movlw	240
  3939  001546                     u8767:
  3940  001546  2EE8               	decfsz	wreg,f,c
  3941  001548  D7FE               	bra	u8767
  3942                           
  3943                           ;sort.c: 217: LATAbits.LATA4 = 0;
  3944  00154A  9889               	bcf	3977,4,c	;volatile
  3945                           
  3946                           ;sort.c: 218: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3947  00154C  0E1A               	movlw	26
  3948  00154E                     u8777:
  3949  00154E  2EE8               	decfsz	wreg,f,c
  3950  001550  D7FE               	bra	u8777
  3951  001552                     L2:
  3952  001552  D000               	nop2	
  3953                           
  3954                           ;sort.c: 219: break;
  3955  001554  D02C               	goto	l7394
  3956  001556                     l790:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 221: LATAbits.LATA4 = 1;
  3960  001556  8889               	bsf	3977,4,c	;volatile
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;sort.c: 222: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3964  001558  0EFD               	movlw	253
  3965  00155A                     u8787:
  3966  00155A  2EE8               	decfsz	wreg,f,c
  3967  00155C  D7FE               	bra	u8787
  3968  00155E  F000               	nop	
  3969                           
  3970                           ;sort.c: 223: LATAbits.LATA4 = 0;
  3971  001560  9889               	bcf	3977,4,c	;volatile
  3972                           
  3973                           ;sort.c: 224: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3974  001562  0E0D               	movlw	13
  3975  001564                     u8797:
  3976  001564  2EE8               	decfsz	wreg,f,c
  3977  001566  D7FE               	bra	u8797
  3978  001568                     L3:
  3979  001568  F000               	nop	
  3980                           
  3981                           ;sort.c: 225: break;
  3982  00156A  D021               	goto	l7394
  3983  00156C                     l791:
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;sort.c: 227: LATAbits.LATA4 = 1;
  3987  00156C  8889               	bsf	3977,4,c	;volatile
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;sort.c: 228: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3991  00156E  0EA0               	movlw	160
  3992  001570                     u8807:
  3993  001570  D000               	nop2	
  3994  001572  2EE8               	decfsz	wreg,f,c
  3995  001574  D7FD               	bra	u8807
  3996                           
  3997                           ;sort.c: 230: }
  3998                           
  3999                           ;sort.c: 229: break;
  4000  001576  D01B               	goto	l7394
  4001  001578                     l7392:
  4002  001578  C0C0  F0B1         	movff	Loading@j,??_Loading
  4003  00157C  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4004                           
  4005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4006                           ; Switch size 1, requested type "space"
  4007                           ; Number of cases is 1, Range of values is 0 to 0
  4008                           ; switch strategies available:
  4009                           ; Name         Instructions Cycles
  4010                           ; simple_byte            4     3 (average)
  4011                           ;	Chosen strategy is simple_byte
  4012  001580  0100               	movlb	0	; () banked
  4013  001582  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4014  001584  0A00               	xorlw	0	; case 0
  4015  001586  A4D8               	btfss	status,2,c
  4016  001588  D7F1               	goto	l791
  4017                           
  4018                           ; BSR set to: 0
  4019                           ; Switch size 1, requested type "space"
  4020                           ; Number of cases is 5, Range of values is 1 to 5
  4021                           ; switch strategies available:
  4022                           ; Name         Instructions Cycles
  4023                           ; simple_byte           16     9 (average)
  4024                           ;	Chosen strategy is simple_byte
  4025  00158A  0100               	movlb	0	; () banked
  4026  00158C  51B1               	movf	??_Loading& (0+255),w,b
  4027  00158E  0A01               	xorlw	1	; case 1
  4028  001590  B4D8               	btfsc	status,2,c
  4029  001592  D7BA               	goto	l785
  4030  001594  0A03               	xorlw	3	; case 2
  4031  001596  B4D8               	btfsc	status,2,c
  4032  001598  D7C0               	goto	l787
  4033  00159A  0A01               	xorlw	1	; case 3
  4034  00159C  B4D8               	btfsc	status,2,c
  4035  00159E  D7C7               	goto	l788
  4036  0015A0  0A07               	xorlw	7	; case 4
  4037  0015A2  B4D8               	btfsc	status,2,c
  4038  0015A4  D7CE               	goto	l789
  4039  0015A6  0A01               	xorlw	1	; case 5
  4040  0015A8  B4D8               	btfsc	status,2,c
  4041  0015AA  D7D5               	goto	l790
  4042  0015AC  D7DF               	goto	l791
  4043  0015AE                     l7394:
  4044  0015AE  0100               	movlb	0	; () banked
  4045  0015B0  4BBE               	infsnz	Loading@i_1162& (0+255),f,b
  4046  0015B2  2BBF               	incf	(Loading@i_1162+1)& (0+255),f,b
  4047  0015B4  D79D               	goto	l7364
  4048  0015B6                     l779:
  4049                           
  4050                           ;sort.c: 231: }
  4051                           ;sort.c: 232: }
  4052                           ;sort.c: 233: }
  4053                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4054  0015B6  9889               	bcf	3977,4,c	;volatile
  4055                           
  4056                           ;sort.c: 235: j++;
  4057  0015B8  0100               	movlb	0	; () banked
  4058  0015BA  4BC0               	infsnz	Loading@j& (0+255),f,b
  4059  0015BC  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4060  0015BE                     l7400:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;sort.c: 236: }
  4064                           ;sort.c: 238: if(!IR_signal){
  4065  0015BE  0100               	movlb	0	; () banked
  4066  0015C0  51E6               	movf	_IR_signal& (0+255),w,b
  4067  0015C2  0100               	movlb	0	; () banked
  4068  0015C4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4069  0015C6  A4D8               	btfss	status,2,c
  4070  0015C8  D016               	goto	l7412
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 239: _delay((unsigned long)((500)*(32000000/4000.0)));
  4074  0015CA  0E15               	movlw	21
  4075  0015CC  0100               	movlb	0	; () banked
  4076  0015CE  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4077  0015D0  0E4B               	movlw	75
  4078  0015D2  0100               	movlb	0	; () banked
  4079  0015D4  6FB1               	movwf	??_Loading& (0+255),b
  4080  0015D6  0EBE               	movlw	190
  4081  0015D8                     u8817:
  4082  0015D8  2EE8               	decfsz	wreg,f,c
  4083  0015DA  D7FE               	bra	u8817
  4084  0015DC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4085  0015DE  D7FC               	bra	u8817
  4086  0015E0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4087  0015E2  D7FA               	bra	u8817
  4088  0015E4  F000               	nop	
  4089                           
  4090                           ;sort.c: 240: readIR();
  4091  0015E6  EC00  F026         	call	_readIR	;wreg free
  4092                           
  4093                           ;sort.c: 241: if(IR_signal==1){
  4094  0015EA  0100               	movlb	0	; () banked
  4095  0015EC  05E6               	decf	_IR_signal& (0+255),w,b
  4096  0015EE  0100               	movlb	0	; () banked
  4097  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4098  0015F2  A4D8               	btfss	status,2,c
  4099  0015F4  D006               	goto	l795
  4100  0015F6                     l7412:
  4101                           
  4102                           ; BSR set to: 0
  4103  0015F6  0100               	movlb	0	; () banked
  4104  0015F8  05E6               	decf	_IR_signal& (0+255),w,b
  4105  0015FA  0100               	movlb	0	; () banked
  4106  0015FC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4107  0015FE  B4D8               	btfsc	status,2,c
  4108  001600  D721               	goto	l7338
  4109  001602                     l795:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;sort.c: 246: }
  4113                           ;sort.c: 247: }
  4114                           ;sort.c: 248: }
  4115                           ;sort.c: 249: LATBbits.LATB2 = 0;
  4116  001602  948A               	bcf	3978,2,c	;volatile
  4117  001604                     l7414:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;sort.c: 250: }
  4121                           ;sort.c: 251: f_can_coming_to_ID = 1;
  4122  001604  0E00               	movlw	0
  4123  001606  0101               	movlb	1	; () banked
  4124  001608  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4125  00160A  0E01               	movlw	1
  4126  00160C  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4127                           
  4128                           ; BSR set to: 1
  4129                           
  4130                           ; BSR set to: 1
  4131  00160E  0012               	return	
  4132  001610                     __end_of_Loading:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1l	equ	0xFE1
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _initSortTimer *****************
  4147 ;; Defined at:
  4148 ;;		line 408 in file "sort.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;  i               2    8[BANK0 ] int 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:        5 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:   10
  4169 ;; This function calls:
  4170 ;;		_getRTC
  4171 ;; This function is called by:
  4172 ;;		_Loading
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text4
  4177  004316                     __ptext4:
  4178                           	opt stack 0
  4179  004316                     _initSortTimer:
  4180                           	opt stack 18
  4181                           
  4182                           ;sort.c: 410: getRTC();
  4183                           
  4184                           ;incstack = 0
  4185  004316  EC77  F022         	call	_getRTC	;wreg free
  4186                           
  4187                           ;sort.c: 411: for(int i = 0; i < 7; i++){
  4188  00431A  0E00               	movlw	0
  4189  00431C  0100               	movlb	0	; () banked
  4190  00431E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4191  004320  0E00               	movlw	0
  4192  004322  6F88               	movwf	initSortTimer@i& (0+255),b
  4193  004324                     l6816:
  4194                           
  4195                           ; BSR set to: 0
  4196  004324  0100               	movlb	0	; () banked
  4197  004326  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4198  004328  D008               	goto	l6820
  4199  00432A  0100               	movlb	0	; () banked
  4200  00432C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4201  00432E  E140               	bnz	l6826
  4202  004330  0E07               	movlw	7
  4203  004332  0100               	movlb	0	; () banked
  4204  004334  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4205  004336  B0D8               	btfsc	status,0,c
  4206  004338  D03B               	goto	l6826
  4207  00433A                     l6820:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;sort.c: 412: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4211  00433A  0E1C               	movlw	low _time
  4212  00433C  0100               	movlb	0	; () banked
  4213  00433E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4214  004340  6ED9               	movwf	fsr2l,c
  4215  004342  0E01               	movlw	high _time
  4216  004344  0100               	movlb	0	; () banked
  4217  004346  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4218  004348  6EDA               	movwf	fsr2h,c
  4219  00434A  50DF               	movf	indf2,w,c
  4220  00434C  0100               	movlb	0	; () banked
  4221  00434E  6F85               	movwf	??_initSortTimer& (0+255),b
  4222  004350  0100               	movlb	0	; () banked
  4223  004352  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4224  004354  0E0F               	movlw	15
  4225  004356  1785               	andwf	??_initSortTimer& (0+255),f,b
  4226  004358  0E0F               	movlw	15
  4227  00435A  0100               	movlb	0	; () banked
  4228  00435C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4229  00435E  0100               	movlb	0	; () banked
  4230  004360  5185               	movf	??_initSortTimer& (0+255),w,b
  4231  004362  0D0A               	mullw	10
  4232  004364  0E1C               	movlw	low _time
  4233  004366  0100               	movlb	0	; () banked
  4234  004368  2588               	addwf	initSortTimer@i& (0+255),w,b
  4235  00436A  6ED9               	movwf	fsr2l,c
  4236  00436C  0E01               	movlw	high _time
  4237  00436E  0100               	movlb	0	; () banked
  4238  004370  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4239  004372  6EDA               	movwf	fsr2h,c
  4240  004374  50DF               	movf	indf2,w,c
  4241  004376  0B0F               	andlw	15
  4242  004378  0100               	movlb	0	; () banked
  4243  00437A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4244  00437C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4245  00437E  50F3               	movf	prodl,w,c
  4246  004380  0100               	movlb	0	; () banked
  4247  004382  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4248  004384  50F4               	movf	prodh,w,c
  4249  004386  0100               	movlb	0	; () banked
  4250  004388  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4251  00438A  90D8               	bcf	status,0,c
  4252  00438C  0100               	movlb	0	; () banked
  4253  00438E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4254  004390  6ED9               	movwf	fsr2l,c
  4255  004392  0100               	movlb	0	; () banked
  4256  004394  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4257  004396  6EDA               	movwf	fsr2h,c
  4258  004398  0E0E               	movlw	low _startTime
  4259  00439A  26D9               	addwf	fsr2l,f,c
  4260  00439C  0E01               	movlw	high _startTime
  4261  00439E  22DA               	addwfc	fsr2h,f,c
  4262  0043A0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4263  0043A4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4264                           
  4265                           ; BSR set to: 0
  4266  0043A8  0100               	movlb	0	; () banked
  4267  0043AA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4268  0043AC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4269  0043AE  D7BA               	goto	l6816
  4270  0043B0                     l6826:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;sort.c: 413: }
  4274                           ;sort.c: 415: T0CON = 0b00010111;
  4275  0043B0  0E17               	movlw	23
  4276  0043B2  6ED5               	movwf	4053,c	;volatile
  4277                           
  4278                           ;sort.c: 424: TMR0H = 0b10000101;
  4279  0043B4  0E85               	movlw	133
  4280  0043B6  6ED7               	movwf	4055,c	;volatile
  4281                           
  4282                           ;sort.c: 425: TMR0L = 0b11101110;
  4283  0043B8  0EEE               	movlw	238
  4284  0043BA  6ED6               	movwf	4054,c	;volatile
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 426: TMR0ON = 1;
  4288  0043BC  8ED5               	bsf	4053,7,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291  0043BE  0012               	return		;funcret
  4292  0043C0                     __end_of_initSortTimer:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _initGlobalVars *****************
  4312 ;; Defined at:
  4313 ;;		line 378 in file "sort.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    7
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_Loading
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text5
  4342  00426A                     __ptext5:
  4343                           	opt stack 0
  4344  00426A                     _initGlobalVars:
  4345                           	opt stack 21
  4346                           
  4347                           ;sort.c: 380: first = 0;
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;incstack = 0
  4351  00426A  0E00               	movlw	0
  4352  00426C  0101               	movlb	1	; () banked
  4353  00426E  6F3A               	movwf	(_first+1)& (0+255),b
  4354  004270  0E00               	movlw	0
  4355  004272  6F39               	movwf	_first& (0+255),b
  4356                           
  4357                           ;sort.c: 383: f_loadingNewCan = 0;
  4358  004274  0E00               	movlw	0
  4359  004276  0100               	movlb	0	; () banked
  4360  004278  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4361  00427A  0E00               	movlw	0
  4362  00427C  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4363                           
  4364                           ;sort.c: 384: f_lastCan = 0;
  4365  00427E  0E00               	movlw	0
  4366  004280  0100               	movlb	0	; () banked
  4367  004282  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4368  004284  0E00               	movlw	0
  4369  004286  6FEE               	movwf	_f_lastCan& (0+255),b
  4370                           
  4371                           ;sort.c: 385: f_ID_receive = 1;
  4372  004288  0E00               	movlw	0
  4373  00428A  0101               	movlb	1	; () banked
  4374  00428C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4375  00428E  0E01               	movlw	1
  4376  004290  6F2F               	movwf	_f_ID_receive& (0+255),b
  4377                           
  4378                           ;sort.c: 386: f_can_coming_to_ID = 0;
  4379  004292  0E00               	movlw	0
  4380  004294  0101               	movlb	1	; () banked
  4381  004296  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4382  004298  0E00               	movlw	0
  4383  00429A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4384                           
  4385                           ;sort.c: 387: f_can_coming_to_distribution = 0;
  4386  00429C  0E00               	movlw	0
  4387  00429E  0101               	movlb	1	; () banked
  4388  0042A0  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4389  0042A2  0E00               	movlw	0
  4390  0042A4  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4391                           
  4392                           ;sort.c: 388: f_can_distributed = 1;
  4393  0042A6  0E00               	movlw	0
  4394  0042A8  0101               	movlb	1	; () banked
  4395  0042AA  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4396  0042AC  0E01               	movlw	1
  4397  0042AE  6F35               	movwf	_f_can_distributed& (0+255),b
  4398                           
  4399                           ;sort.c: 389: f_most_recent_sort_time = 0;
  4400  0042B0  0E00               	movlw	0
  4401  0042B2  0101               	movlb	1	; () banked
  4402  0042B4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4403  0042B6  0E00               	movlw	0
  4404  0042B8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4405                           
  4406                           ;sort.c: 392: count_total = 0;
  4407  0042BA  0E00               	movlw	0
  4408  0042BC  0100               	movlb	0	; () banked
  4409  0042BE  6FFF               	movwf	(_count_total+1)& (0+255),b
  4410  0042C0  0E00               	movlw	0
  4411  0042C2  6FFE               	movwf	_count_total& (0+255),b
  4412                           
  4413                           ;sort.c: 393: count_pop_no_tab = 0;
  4414  0042C4  0E00               	movlw	0
  4415  0042C6  0101               	movlb	1	; () banked
  4416  0042C8  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4417  0042CA  0E00               	movlw	0
  4418  0042CC  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4419                           
  4420                           ;sort.c: 394: count_pop_w_tab = 0;
  4421  0042CE  0E00               	movlw	0
  4422  0042D0  0101               	movlb	1	; () banked
  4423  0042D2  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4424  0042D4  0E00               	movlw	0
  4425  0042D6  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4426                           
  4427                           ;sort.c: 395: count_can_w_lab = 0;
  4428  0042D8  0E00               	movlw	0
  4429  0042DA  0101               	movlb	1	; () banked
  4430  0042DC  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4431  0042DE  0E00               	movlw	0
  4432  0042E0  6F25               	movwf	_count_can_w_lab& (0+255),b
  4433                           
  4434                           ;sort.c: 396: count_can_no_lab = 0;
  4435  0042E2  0E00               	movlw	0
  4436  0042E4  0101               	movlb	1	; () banked
  4437  0042E6  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4438  0042E8  0E00               	movlw	0
  4439  0042EA  6F23               	movwf	_count_can_no_lab& (0+255),b
  4440                           
  4441                           ;sort.c: 399: most_recent_sort_time = 999;
  4442  0042EC  0E03               	movlw	3
  4443  0042EE  6E6E               	movwf	_most_recent_sort_time+1,c
  4444  0042F0  0EE7               	movlw	231
  4445  0042F2  6E6D               	movwf	_most_recent_sort_time,c
  4446                           
  4447                           ;sort.c: 402: servo_timer_counter = 0;
  4448  0042F4  0E00               	movlw	0
  4449  0042F6  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4450  0042F8  0E00               	movlw	0
  4451  0042FA  6E71               	movwf	_servo_timer_counter,c	;volatile
  4452                           
  4453                           ;sort.c: 403: servo_timer_target = 9999;
  4454  0042FC  0E27               	movlw	39
  4455  0042FE  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4456  004300  0E0F               	movlw	15
  4457  004302  6E73               	movwf	_servo_timer_target,c	;volatile
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;sort.c: 404: pan_servo_state = -1;
  4461  004304  686F               	setf	_pan_servo_state,c	;volatile
  4462  004306  6870               	setf	_pan_servo_state+1,c	;volatile
  4463                           
  4464                           ; BSR set to: 1
  4465                           ;sort.c: 405: tilt_servo_state = -1;
  4466  004308  6875               	setf	_tilt_servo_state,c	;volatile
  4467  00430A  6876               	setf	_tilt_servo_state+1,c	;volatile
  4468                           
  4469                           ;sort.c: 406: f_panning_to_bin = 0;
  4470  00430C  0E00               	movlw	0
  4471  00430E  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4472  004310  0E00               	movlw	0
  4473  004312  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4474                           
  4475                           ; BSR set to: 1
  4476  004314  0012               	return		;funcret
  4477  004316                     __end_of_initGlobalVars:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           postinc0	equ	0xFEE
  4486                           wreg	equ	0xFE8
  4487                           postdec1	equ	0xFE5
  4488                           fsr1l	equ	0xFE1
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _getMAG *****************
  4497 ;; Defined at:
  4498 ;;		line 496 in file "sort.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;Total ram usage:        2 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    9
  4519 ;; This function calls:
  4520 ;;		_readMAG
  4521 ;; This function is called by:
  4522 ;;		_Loading
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text6
  4527  004DFC                     __ptext6:
  4528                           	opt stack 0
  4529  004DFC                     _getMAG:
  4530                           	opt stack 19
  4531                           
  4532                           ;sort.c: 497: readMAG();
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;incstack = 0
  4536  004DFC  EC26  F026         	call	_readMAG	;wreg free
  4537                           
  4538                           ;sort.c: 499: if(MAG_signal==1){
  4539  004E00  0100               	movlb	0	; () banked
  4540  004E02  05E8               	decf	_MAG_signal& (0+255),w,b
  4541  004E04  0100               	movlb	0	; () banked
  4542  004E06  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4543  004E08  A4D8               	btfss	status,2,c
  4544  004E0A  0012               	return	
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000.0)));
  4548  004E0C  0E15               	movlw	21
  4549  004E0E  0100               	movlb	0	; () banked
  4550  004E10  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4551  004E12  0E4B               	movlw	75
  4552  004E14  0100               	movlb	0	; () banked
  4553  004E16  6F86               	movwf	??_getMAG& (0+255),b
  4554  004E18  0EBE               	movlw	190
  4555  004E1A                     u8827:
  4556  004E1A  2EE8               	decfsz	wreg,f,c
  4557  004E1C  D7FE               	bra	u8827
  4558  004E1E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4559  004E20  D7FC               	bra	u8827
  4560  004E22  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4561  004E24  D7FA               	bra	u8827
  4562  004E26  F000               	nop	
  4563                           
  4564                           ;sort.c: 501: readMAG();
  4565  004E28  EC26  F026         	call	_readMAG	;wreg free
  4566  004E2C  0012               	return	
  4567  004E2E                     __end_of_getMAG:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           postdec1	equ	0xFE5
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function _getIR *****************
  4587 ;; Defined at:
  4588 ;;		line 480 in file "sort.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  i               2    7[BANK0 ] int 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        3 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    9
  4609 ;; This function calls:
  4610 ;;		_readIR
  4611 ;; This function is called by:
  4612 ;;		_Loading
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text7
  4617  00477A                     __ptext7:
  4618                           	opt stack 0
  4619  00477A                     _getIR:
  4620                           	opt stack 19
  4621                           
  4622                           ;sort.c: 481: readIR();
  4623                           
  4624                           ;incstack = 0
  4625  00477A  EC00  F026         	call	_readIR	;wreg free
  4626                           
  4627                           ;sort.c: 482: for(int i = 0; i < 150; i++){
  4628  00477E  0E00               	movlw	0
  4629  004780  0100               	movlb	0	; () banked
  4630  004782  6F88               	movwf	(getIR@i+1)& (0+255),b
  4631  004784  0E00               	movlw	0
  4632  004786  6F87               	movwf	getIR@i& (0+255),b
  4633  004788                     l6908:
  4634                           
  4635                           ; BSR set to: 0
  4636  004788  0100               	movlb	0	; () banked
  4637  00478A  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4638  00478C  D008               	goto	l6912
  4639  00478E  0100               	movlb	0	; () banked
  4640  004790  5188               	movf	(getIR@i+1)& (0+255),w,b
  4641  004792  E11A               	bnz	l6924
  4642  004794  0E96               	movlw	150
  4643  004796  0100               	movlb	0	; () banked
  4644  004798  5D87               	subwf	getIR@i& (0+255),w,b
  4645  00479A  B0D8               	btfsc	status,0,c
  4646  00479C  D015               	goto	l6924
  4647  00479E                     l6912:
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4651  00479E  0E06               	movlw	6
  4652  0047A0  0100               	movlb	0	; () banked
  4653  0047A2  6F86               	movwf	??_getIR& (0+255),b
  4654  0047A4  0E30               	movlw	48
  4655  0047A6                     u8837:
  4656  0047A6  2EE8               	decfsz	wreg,f,c
  4657  0047A8  D7FE               	bra	u8837
  4658  0047AA  2F86               	decfsz	??_getIR& (0+255),f,b
  4659  0047AC  D7FC               	bra	u8837
  4660  0047AE  F000               	nop	
  4661                           
  4662                           ;sort.c: 484: readIR();
  4663  0047B0  EC00  F026         	call	_readIR	;wreg free
  4664                           
  4665                           ;sort.c: 485: if(!IR_signal){
  4666  0047B4  0100               	movlb	0	; () banked
  4667  0047B6  51E6               	movf	_IR_signal& (0+255),w,b
  4668  0047B8  0100               	movlb	0	; () banked
  4669  0047BA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4670  0047BC  B4D8               	btfsc	status,2,c
  4671  0047BE  D004               	goto	l6924
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;sort.c: 486: break;
  4679  0047C0  0100               	movlb	0	; () banked
  4680  0047C2  4B87               	infsnz	getIR@i& (0+255),f,b
  4681  0047C4  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4682  0047C6  D7E0               	goto	l6908
  4683  0047C8                     l6924:
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;sort.c: 487: }
  4687                           ;sort.c: 488: }
  4688                           ;sort.c: 489: if(IR_signal==1){
  4689  0047C8  0100               	movlb	0	; () banked
  4690  0047CA  05E6               	decf	_IR_signal& (0+255),w,b
  4691  0047CC  0100               	movlb	0	; () banked
  4692  0047CE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4693  0047D0  A4D8               	btfss	status,2,c
  4694  0047D2  D006               	goto	l6928
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;sort.c: 490: f_loadingNewCan = 1;
  4698  0047D4  0E00               	movlw	0
  4699  0047D6  0100               	movlb	0	; () banked
  4700  0047D8  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4701  0047DA  0E01               	movlw	1
  4702  0047DC  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4703                           
  4704                           ;sort.c: 491: }
  4705  0047DE  0012               	return	
  4706  0047E0                     l6928:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;sort.c: 492: else{
  4710                           ;sort.c: 493: f_loadingNewCan = 0;
  4711  0047E0  0E00               	movlw	0
  4712  0047E2  0100               	movlb	0	; () banked
  4713  0047E4  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4714  0047E6  0E00               	movlw	0
  4715  0047E8  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4716  0047EA  0012               	return	
  4717  0047EC                     __end_of_getIR:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postdec1	equ	0xFE5
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _readIR *****************
  4737 ;; Defined at:
  4738 ;;		line 23 in file "ADCFunctionality.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  res             2    4[BANK0 ] int 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    8
  4759 ;; This function calls:
  4760 ;;		_readADC
  4761 ;; This function is called by:
  4762 ;;		_Loading
  4763 ;;		_getIR
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text8
  4768  004C00                     __ptext8:
  4769                           	opt stack 0
  4770  004C00                     _readIR:
  4771                           	opt stack 20
  4772                           
  4773                           ;ADCFunctionality.c: 24: readADC(0);
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;incstack = 0
  4777  004C00  0E00               	movlw	0
  4778  004C02  EC64  F028         	call	_readADC
  4779                           
  4780                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4781  004C06  50C3               	movf	4035,w,c	;volatile
  4782  004C08  CFC4 F082          	movff	4036,??_readIR	;volatile
  4783  004C0C  0100               	movlb	0	; () banked
  4784  004C0E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4785  004C10  C082  F083         	movff	??_readIR,??_readIR+1
  4786  004C14  0100               	movlb	0	; () banked
  4787  004C16  6B82               	clrf	??_readIR& (0+255),b
  4788  004C18  0100               	movlb	0	; () banked
  4789  004C1A  1182               	iorwf	??_readIR& (0+255),w,b
  4790  004C1C  0100               	movlb	0	; () banked
  4791  004C1E  6F84               	movwf	readIR@res& (0+255),b
  4792  004C20  0100               	movlb	0	; () banked
  4793  004C22  5183               	movf	(??_readIR+1)& (0+255),w,b
  4794  004C24  0100               	movlb	0	; () banked
  4795  004C26  6F85               	movwf	(readIR@res+1)& (0+255),b
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4799  004C28  0100               	movlb	0	; () banked
  4800  004C2A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4801  004C2C  D00A               	goto	u4530
  4802  004C2E  0E21               	movlw	33
  4803  004C30  0100               	movlb	0	; () banked
  4804  004C32  5D84               	subwf	readIR@res& (0+255),w,b
  4805  004C34  0E03               	movlw	3
  4806  004C36  0100               	movlb	0	; () banked
  4807  004C38  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4808  004C3A  A0D8               	btfss	status,0,c
  4809  004C3C  D002               	goto	u4530
  4810  004C3E  0E01               	movlw	1
  4811  004C40  D001               	goto	u4540
  4812  004C42                     u4530:
  4813  004C42  0E00               	movlw	0
  4814  004C44                     u4540:
  4815  004C44  0100               	movlb	0	; () banked
  4816  004C46  6FE6               	movwf	_IR_signal& (0+255),b
  4817  004C48  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820  004C4A  0012               	return		;funcret
  4821  004C4C                     __end_of_readIR:
  4822                           	opt stack 0
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           postdec1	equ	0xFE5
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _ID *****************
  4841 ;; Defined at:
  4842 ;;		line 255 in file "sort.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;		None
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  i               2    8[BANK0 ] int 
  4847 ;;  i               2    6[BANK0 ] int 
  4848 ;;  i               2    4[BANK0 ] int 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        8 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    8
  4865 ;; This function calls:
  4866 ;;		_delay_ms
  4867 ;; This function is called by:
  4868 ;;		_sort
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text9
  4873  002C6A                     __ptext9:
  4874                           	opt stack 0
  4875  002C6A                     _ID:
  4876                           	opt stack 21
  4877                           
  4878                           ;sort.c: 256: if(f_can_coming_to_ID){
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;incstack = 0
  4882  002C6A  0101               	movlb	1	; () banked
  4883  002C6C  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4884  002C6E  0101               	movlb	1	; () banked
  4885  002C70  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4886  002C72  B4D8               	btfsc	status,2,c
  4887  002C74  0012               	return	
  4888                           
  4889                           ; BSR set to: 1
  4890                           ;sort.c: 258: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4891  002C76  0E29               	movlw	41
  4892  002C78  0100               	movlb	0	; () banked
  4893  002C7A  6F83               	movwf	(??_ID+1)& (0+255),b
  4894  002C7C  0E96               	movlw	150
  4895  002C7E  0100               	movlb	0	; () banked
  4896  002C80  6F82               	movwf	??_ID& (0+255),b
  4897  002C82  0E7F               	movlw	127
  4898  002C84                     u8847:
  4899  002C84  2EE8               	decfsz	wreg,f,c
  4900  002C86  D7FE               	bra	u8847
  4901  002C88  2F82               	decfsz	??_ID& (0+255),f,b
  4902  002C8A  D7FC               	bra	u8847
  4903  002C8C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4904  002C8E  D7FA               	bra	u8847
  4905                           
  4906                           ;sort.c: 260: LATAbits.LATA3 = 1;
  4907  002C90  8689               	bsf	3977,3,c	;volatile
  4908                           
  4909                           ;sort.c: 261: _delay((unsigned long)((600)*(32000000/4000.0)));
  4910  002C92  0E19               	movlw	25
  4911  002C94  0100               	movlb	0	; () banked
  4912  002C96  6F83               	movwf	(??_ID+1)& (0+255),b
  4913  002C98  0E5A               	movlw	90
  4914  002C9A  0100               	movlb	0	; () banked
  4915  002C9C  6F82               	movwf	??_ID& (0+255),b
  4916  002C9E  0EB1               	movlw	177
  4917  002CA0                     u8857:
  4918  002CA0  2EE8               	decfsz	wreg,f,c
  4919  002CA2  D7FE               	bra	u8857
  4920  002CA4  2F82               	decfsz	??_ID& (0+255),f,b
  4921  002CA6  D7FC               	bra	u8857
  4922  002CA8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4923  002CAA  D7FA               	bra	u8857
  4924  002CAC  D000               	nop2	
  4925                           
  4926                           ;sort.c: 262: sensor_outputs[1] = PORTAbits.RA2;
  4927  002CAE  A480               	btfss	3968,2,c	;volatile
  4928  002CB0  D004               	goto	u5900
  4929  002CB2  0100               	movlb	0	; () banked
  4930  002CB4  6B82               	clrf	??_ID& (0+255),b
  4931  002CB6  2B82               	incf	??_ID& (0+255),f,b
  4932  002CB8  D002               	goto	u5908
  4933  002CBA                     u5900:
  4934  002CBA  0100               	movlb	0	; () banked
  4935  002CBC  6B82               	clrf	??_ID& (0+255),b
  4936  002CBE                     u5908:
  4937  002CBE  0100               	movlb	0	; () banked
  4938  002CC0  5182               	movf	??_ID& (0+255),w,b
  4939  002CC2  0100               	movlb	0	; () banked
  4940  002CC4  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4941  002CC6  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;sort.c: 263: LATAbits.LATA3 = 0;
  4945  002CC8  9689               	bcf	3977,3,c	;volatile
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;sort.c: 265: _delay((unsigned long)((200)*(32000000/4000.0)));
  4949  002CCA  0E09               	movlw	9
  4950  002CCC  0100               	movlb	0	; () banked
  4951  002CCE  6F83               	movwf	(??_ID+1)& (0+255),b
  4952  002CD0  0E1E               	movlw	30
  4953  002CD2  0100               	movlb	0	; () banked
  4954  002CD4  6F82               	movwf	??_ID& (0+255),b
  4955  002CD6  0EE4               	movlw	228
  4956  002CD8                     u8867:
  4957  002CD8  2EE8               	decfsz	wreg,f,c
  4958  002CDA  D7FE               	bra	u8867
  4959  002CDC  2F82               	decfsz	??_ID& (0+255),f,b
  4960  002CDE  D7FC               	bra	u8867
  4961  002CE0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4962  002CE2  D7FA               	bra	u8867
  4963  002CE4  F000               	nop	
  4964                           
  4965                           ;sort.c: 266: LATAbits.LATA3 = 1;
  4966  002CE6  8689               	bsf	3977,3,c	;volatile
  4967                           
  4968                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  4969  002CE8  0E19               	movlw	25
  4970  002CEA  0100               	movlb	0	; () banked
  4971  002CEC  6F83               	movwf	(??_ID+1)& (0+255),b
  4972  002CEE  0E5A               	movlw	90
  4973  002CF0  0100               	movlb	0	; () banked
  4974  002CF2  6F82               	movwf	??_ID& (0+255),b
  4975  002CF4  0EB1               	movlw	177
  4976  002CF6                     u8877:
  4977  002CF6  2EE8               	decfsz	wreg,f,c
  4978  002CF8  D7FE               	bra	u8877
  4979  002CFA  2F82               	decfsz	??_ID& (0+255),f,b
  4980  002CFC  D7FC               	bra	u8877
  4981  002CFE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4982  002D00  D7FA               	bra	u8877
  4983  002D02  D000               	nop2	
  4984                           
  4985                           ;sort.c: 268: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4986  002D04  A480               	btfss	3968,2,c	;volatile
  4987  002D06  D004               	goto	u5910
  4988  002D08  0100               	movlb	0	; () banked
  4989  002D0A  6B82               	clrf	??_ID& (0+255),b
  4990  002D0C  2B82               	incf	??_ID& (0+255),f,b
  4991  002D0E  D002               	goto	u5918
  4992  002D10                     u5910:
  4993  002D10  0100               	movlb	0	; () banked
  4994  002D12  6B82               	clrf	??_ID& (0+255),b
  4995  002D14                     u5918:
  4996  002D14  0100               	movlb	0	; () banked
  4997  002D16  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4998  002D18  0100               	movlb	0	; () banked
  4999  002D1A  1182               	iorwf	??_ID& (0+255),w,b
  5000  002D1C  0100               	movlb	0	; () banked
  5001  002D1E  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5002  002D20  0100               	movlb	0	; () banked
  5003  002D22  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5004  002D24  0100               	movlb	0	; () banked
  5005  002D26  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;sort.c: 276: if(!sensor_outputs[0]){
  5009  002D28  0100               	movlb	0	; () banked
  5010  002D2A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5011  002D2C  0100               	movlb	0	; () banked
  5012  002D2E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5013  002D30  A4D8               	btfss	status,2,c
  5014  002D32  D016               	goto	l7452
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;sort.c: 277: if(!sensor_outputs[1]){
  5018  002D34  0100               	movlb	0	; () banked
  5019  002D36  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5020  002D38  0100               	movlb	0	; () banked
  5021  002D3A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5022  002D3C  A4D8               	btfss	status,2,c
  5023  002D3E  D008               	goto	l7448
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;sort.c: 278: count_pop_no_tab++;
  5027  002D40  0101               	movlb	1	; () banked
  5028  002D42  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5029  002D44  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 1
  5032                           ;sort.c: 279: cur_can = 0;
  5033  002D46  0E00               	movlw	0
  5034  002D48  0101               	movlb	1	; () banked
  5035  002D4A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5036  002D4C  0E00               	movlw	0
  5037  002D4E  D007               	goto	L4
  5038  002D50                     l7448:
  5039                           
  5040                           ;sort.c: 281: else{
  5041                           ;sort.c: 282: count_pop_w_tab++;
  5042  002D50  0101               	movlb	1	; () banked
  5043  002D52  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5044  002D54  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5045                           
  5046                           ; BSR set to: 1
  5047                           ;sort.c: 283: cur_can = 1;
  5048  002D56  0E00               	movlw	0
  5049  002D58  0101               	movlb	1	; () banked
  5050  002D5A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5051  002D5C  0E01               	movlw	1
  5052  002D5E                     L4:
  5053  002D5E  6F2B               	movwf	_cur_can& (0+255),b
  5054  002D60                     l7452:
  5055                           
  5056                           ;sort.c: 284: }
  5057                           ;sort.c: 285: }
  5058                           ;sort.c: 286: if(sensor_outputs[0]){
  5059  002D60  0100               	movlb	0	; () banked
  5060  002D62  51E2               	movf	_sensor_outputs& (0+255),w,b
  5061  002D64  0100               	movlb	0	; () banked
  5062  002D66  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5063  002D68  B4D8               	btfsc	status,2,c
  5064  002D6A  D016               	goto	l7464
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;sort.c: 287: if(!sensor_outputs[1]){
  5068  002D6C  0100               	movlb	0	; () banked
  5069  002D6E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5070  002D70  0100               	movlb	0	; () banked
  5071  002D72  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5072  002D74  A4D8               	btfss	status,2,c
  5073  002D76  D008               	goto	l7460
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;sort.c: 288: count_can_w_lab++;
  5077  002D78  0101               	movlb	1	; () banked
  5078  002D7A  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5079  002D7C  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;sort.c: 289: cur_can = 2;
  5083  002D7E  0E00               	movlw	0
  5084  002D80  0101               	movlb	1	; () banked
  5085  002D82  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5086  002D84  0E02               	movlw	2
  5087  002D86  D007               	goto	L5
  5088  002D88                     l7460:
  5089                           
  5090                           ;sort.c: 291: else{
  5091                           ;sort.c: 292: count_can_no_lab++;
  5092  002D88  0101               	movlb	1	; () banked
  5093  002D8A  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5094  002D8C  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5095                           
  5096                           ; BSR set to: 1
  5097                           ;sort.c: 293: cur_can = 3;
  5098  002D8E  0E00               	movlw	0
  5099  002D90  0101               	movlb	1	; () banked
  5100  002D92  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5101  002D94  0E03               	movlw	3
  5102  002D96                     L5:
  5103  002D96  6F2B               	movwf	_cur_can& (0+255),b
  5104  002D98                     l7464:
  5105                           
  5106                           ;sort.c: 294: }
  5107                           ;sort.c: 295: }
  5108                           ;sort.c: 296: LATAbits.LATA3 = 0;
  5109  002D98  9689               	bcf	3977,3,c	;volatile
  5110  002D9A                     l7466:
  5111  002D9A  0101               	movlb	1	; () banked
  5112  002D9C  5135               	movf	_f_can_distributed& (0+255),w,b
  5113  002D9E  0101               	movlb	1	; () banked
  5114  002DA0  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5115  002DA2  B4D8               	btfsc	status,2,c
  5116  002DA4  D7FA               	goto	l7466
  5117                           
  5118                           ; BSR set to: 1
  5119                           ;sort.c: 300: if(sensor_outputs[0]){
  5120                           
  5121                           ; BSR set to: 1
  5122  002DA6  0100               	movlb	0	; () banked
  5123  002DA8  51E2               	movf	_sensor_outputs& (0+255),w,b
  5124  002DAA  0100               	movlb	0	; () banked
  5125  002DAC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5126  002DAE  B4D8               	btfsc	status,2,c
  5127  002DB0  D020               	goto	l7484
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;sort.c: 302: LATAbits.LATA3 = 1;
  5131  002DB2  8689               	bsf	3977,3,c	;volatile
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;sort.c: 305: for(int i=0;i<10000;i++)
  5135  002DB4  0E00               	movlw	0
  5136  002DB6  0100               	movlb	0	; () banked
  5137  002DB8  6F85               	movwf	(ID@i+1)& (0+255),b
  5138  002DBA  0E00               	movlw	0
  5139  002DBC  6F84               	movwf	ID@i& (0+255),b
  5140  002DBE                     l7474:
  5141                           
  5142                           ; BSR set to: 0
  5143  002DBE  0100               	movlb	0	; () banked
  5144  002DC0  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5145  002DC2  D008               	goto	l809
  5146  002DC4  0E10               	movlw	16
  5147  002DC6  0100               	movlb	0	; () banked
  5148  002DC8  5D84               	subwf	ID@i& (0+255),w,b
  5149  002DCA  0E27               	movlw	39
  5150  002DCC  0100               	movlb	0	; () banked
  5151  002DCE  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5152  002DD0  B0D8               	btfsc	status,0,c
  5153  002DD2  D00D               	goto	l810
  5154  002DD4                     l809:
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;sort.c: 306: {
  5158                           ;sort.c: 307: LATCbits.LATC0 = 1;
  5159  002DD4  808B               	bsf	3979,0,c	;volatile
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;sort.c: 308: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5163  002DD6  0E1A               	movlw	26
  5164  002DD8                     u8887:
  5165  002DD8  2EE8               	decfsz	wreg,f,c
  5166  002DDA  D7FE               	bra	u8887
  5167  002DDC  D000               	nop2	
  5168                           
  5169                           ;sort.c: 309: LATCbits.LATC0 = 0;
  5170  002DDE  908B               	bcf	3979,0,c	;volatile
  5171                           
  5172                           ;sort.c: 310: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5173  002DE0  0EF0               	movlw	240
  5174  002DE2                     u8897:
  5175  002DE2  2EE8               	decfsz	wreg,f,c
  5176  002DE4  D7FE               	bra	u8897
  5177  002DE6  0100               	movlb	0	; () banked
  5178  002DE8  4B84               	infsnz	ID@i& (0+255),f,b
  5179  002DEA  2B85               	incf	(ID@i+1)& (0+255),f,b
  5180  002DEC  D7E8               	goto	l7474
  5181  002DEE                     l810:
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;sort.c: 311: }
  5185                           ;sort.c: 313: LATAbits.LATA3 = 0;
  5186  002DEE  9689               	bcf	3977,3,c	;volatile
  5187                           
  5188                           ;sort.c: 316: }
  5189  002DF0  D01D               	goto	l811
  5190  002DF2                     l7484:
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;sort.c: 317: else{
  5194                           ;sort.c: 319: for(int i=0;i<10000;i++)
  5195  002DF2  0E00               	movlw	0
  5196  002DF4  0100               	movlb	0	; () banked
  5197  002DF6  6F87               	movwf	(ID@i_1173+1)& (0+255),b
  5198  002DF8  0E00               	movlw	0
  5199  002DFA  6F86               	movwf	ID@i_1173& (0+255),b
  5200  002DFC                     l7486:
  5201                           
  5202                           ; BSR set to: 0
  5203  002DFC  0100               	movlb	0	; () banked
  5204  002DFE  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5205  002E00  D008               	goto	l812
  5206  002E02  0E10               	movlw	16
  5207  002E04  0100               	movlb	0	; () banked
  5208  002E06  5D86               	subwf	ID@i_1173& (0+255),w,b
  5209  002E08  0E27               	movlw	39
  5210  002E0A  0100               	movlb	0	; () banked
  5211  002E0C  5987               	subwfb	(ID@i_1173+1)& (0+255),w,b
  5212  002E0E  B0D8               	btfsc	status,0,c
  5213  002E10  D00D               	goto	l811
  5214  002E12                     l812:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;sort.c: 320: {
  5218                           ;sort.c: 321: LATCbits.LATC0 = 1;
  5219  002E12  808B               	bsf	3979,0,c	;volatile
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;sort.c: 322: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5223  002E14  0E1A               	movlw	26
  5224  002E16                     u8907:
  5225  002E16  2EE8               	decfsz	wreg,f,c
  5226  002E18  D7FE               	bra	u8907
  5227  002E1A  D000               	nop2	
  5228                           
  5229                           ;sort.c: 323: LATCbits.LATC0 = 0;
  5230  002E1C  908B               	bcf	3979,0,c	;volatile
  5231                           
  5232                           ;sort.c: 324: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5233  002E1E  0EF0               	movlw	240
  5234  002E20                     u8917:
  5235  002E20  2EE8               	decfsz	wreg,f,c
  5236  002E22  D7FE               	bra	u8917
  5237  002E24  0100               	movlb	0	; () banked
  5238  002E26  4B86               	infsnz	ID@i_1173& (0+255),f,b
  5239  002E28  2B87               	incf	(ID@i_1173+1)& (0+255),f,b
  5240  002E2A  D7E8               	goto	l7486
  5241  002E2C                     l811:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;sort.c: 325: }
  5245                           ;sort.c: 326: }
  5246                           ;sort.c: 328: LATCbits.LATC0 = 0;
  5247  002E2C  908B               	bcf	3979,0,c	;volatile
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;sort.c: 330: f_can_coming_to_distribution = 1;
  5251  002E2E  0E00               	movlw	0
  5252  002E30  0101               	movlb	1	; () banked
  5253  002E32  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5254  002E34  0E01               	movlw	1
  5255  002E36  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5256                           
  5257                           ; BSR set to: 1
  5258                           ;sort.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
  5259  002E38  0E1F               	movlw	31
  5260  002E3A  0100               	movlb	0	; () banked
  5261  002E3C  6F83               	movwf	(??_ID+1)& (0+255),b
  5262  002E3E  0E71               	movlw	113
  5263  002E40  0100               	movlb	0	; () banked
  5264  002E42  6F82               	movwf	??_ID& (0+255),b
  5265  002E44  0E1E               	movlw	30
  5266  002E46                     u8927:
  5267  002E46  2EE8               	decfsz	wreg,f,c
  5268  002E48  D7FE               	bra	u8927
  5269  002E4A  2F82               	decfsz	??_ID& (0+255),f,b
  5270  002E4C  D7FC               	bra	u8927
  5271  002E4E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5272  002E50  D7FA               	bra	u8927
  5273  002E52  F000               	nop	
  5274                           
  5275                           ;sort.c: 332: LATCbits.LATC0 = 1;
  5276  002E54  808B               	bsf	3979,0,c	;volatile
  5277                           
  5278                           ;sort.c: 335: if(!f_lastCan){
  5279  002E56  0100               	movlb	0	; () banked
  5280  002E58  51EE               	movf	_f_lastCan& (0+255),w,b
  5281  002E5A  0100               	movlb	0	; () banked
  5282  002E5C  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5283  002E5E  A4D8               	btfss	status,2,c
  5284  002E60  D032               	goto	l7518
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;sort.c: 336: for(int i=0; i<46; i++){
  5288  002E62  0E00               	movlw	0
  5289  002E64  0100               	movlb	0	; () banked
  5290  002E66  6F89               	movwf	(ID@i_1174+1)& (0+255),b
  5291  002E68  0E00               	movlw	0
  5292  002E6A  6F88               	movwf	ID@i_1174& (0+255),b
  5293                           
  5294                           ; BSR set to: 0
  5295  002E6C  0100               	movlb	0	; () banked
  5296  002E6E  BF89               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5297  002E70  D008               	goto	l7510
  5298  002E72  0100               	movlb	0	; () banked
  5299  002E74  5189               	movf	(ID@i_1174+1)& (0+255),w,b
  5300  002E76  E126               	bnz	l816
  5301  002E78  0E2E               	movlw	46
  5302  002E7A  0100               	movlb	0	; () banked
  5303  002E7C  5D88               	subwf	ID@i_1174& (0+255),w,b
  5304  002E7E  B0D8               	btfsc	status,0,c
  5305  002E80  D021               	goto	l816
  5306  002E82                     l7510:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;sort.c: 337: LATBbits.LATB2 = !LATBbits.LATB2;
  5310  002E82  B48A               	btfsc	3978,2,c	;volatile
  5311  002E84  D004               	goto	u6040
  5312  002E86  0100               	movlb	0	; () banked
  5313  002E88  6B82               	clrf	??_ID& (0+255),b
  5314  002E8A  2B82               	incf	??_ID& (0+255),f,b
  5315  002E8C  D002               	goto	u6058
  5316  002E8E                     u6040:
  5317  002E8E  0100               	movlb	0	; () banked
  5318  002E90  6B82               	clrf	??_ID& (0+255),b
  5319  002E92                     u6058:
  5320  002E92  0100               	movlb	0	; () banked
  5321  002E94  4782               	rlncf	??_ID& (0+255),f,b
  5322  002E96  4782               	rlncf	??_ID& (0+255),f,b
  5323  002E98  508A               	movf	3978,w,c	;volatile
  5324  002E9A  0100               	movlb	0	; () banked
  5325  002E9C  1982               	xorwf	??_ID& (0+255),w,b
  5326  002E9E  0BFB               	andlw	-5
  5327  002EA0  1982               	xorwf	??_ID& (0+255),w,b
  5328  002EA2  6E8A               	movwf	3978,c	;volatile
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;sort.c: 338: delay_ms(45-i);
  5332  002EA4  0100               	movlb	0	; () banked
  5333  002EA6  5188               	movf	ID@i_1174& (0+255),w,b
  5334  002EA8  0800               	sublw	0
  5335  002EAA  0F2D               	addlw	45
  5336  002EAC  EC8F  F028         	call	_delay_ms
  5337  002EB0  0100               	movlb	0	; () banked
  5338  002EB2  4B88               	infsnz	ID@i_1174& (0+255),f,b
  5339  002EB4  2B89               	incf	(ID@i_1174+1)& (0+255),f,b
  5340                           
  5341                           ; BSR set to: 0
  5342  002EB6  0100               	movlb	0	; () banked
  5343  002EB8  BF89               	btfsc	(ID@i_1174+1)& (0+255),7,b
  5344  002EBA  D7E3               	goto	l7510
  5345  002EBC  0100               	movlb	0	; () banked
  5346  002EBE  5189               	movf	(ID@i_1174+1)& (0+255),w,b
  5347  002EC0  E101               	bnz	u6060
  5348  002EC2  D7DA               	goto	L6
  5349  002EC4                     u6060:
  5350  002EC4                     l816:
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;sort.c: 339: }
  5354                           ;sort.c: 340: LATBbits.LATB2 = 1;
  5355  002EC4  848A               	bsf	3978,2,c	;volatile
  5356  002EC6                     l7518:
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;sort.c: 341: }
  5360                           ;sort.c: 343: f_can_coming_to_ID = 0;
  5361  002EC6  0E00               	movlw	0
  5362  002EC8  0101               	movlb	1	; () banked
  5363  002ECA  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5364  002ECC  0E00               	movlw	0
  5365  002ECE  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5366  002ED0  0012               	return	
  5367  002ED2                     __end_of_ID:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postdec1	equ	0xFE5
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _delay_ms *****************
  5387 ;; Defined at:
  5388 ;;		line 590 in file "sort.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  milliseconds    1    wreg     unsigned char 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  1    wreg      void 
  5395 ;; Registers used:
  5396 ;;		wreg, status,2, status,0, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        2 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    7
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_Loading
  5413 ;;		_ID
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text10
  5418  00511E                     __ptext10:
  5419                           	opt stack 0
  5420  00511E                     _delay_ms:
  5421                           	opt stack 21
  5422                           
  5423                           ; BSR set to: 1
  5424                           ;incstack = 0
  5425                           ;delay_ms@milliseconds stored from wreg
  5426  00511E  0100               	movlb	0	; () banked
  5427  005120  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5428                           
  5429                           ;sort.c: 591: while(milliseconds > 0)
  5430  005122  D00B               	goto	l6888
  5431  005124                     l6884:
  5432                           
  5433                           ;sort.c: 592: {
  5434                           ;sort.c: 593: milliseconds--;
  5435  005124  0100               	movlb	0	; () banked
  5436  005126  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5440  005128  0E0B               	movlw	11
  5441  00512A  0100               	movlb	0	; () banked
  5442  00512C  6F80               	movwf	??_delay_ms& (0+255),b
  5443  00512E  0E47               	movlw	71
  5444  005130                     u8937:
  5445  005130  2EE8               	decfsz	wreg,f,c
  5446  005132  D7FE               	bra	u8937
  5447  005134  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5448  005136  D7FC               	bra	u8937
  5449  005138  D000               	nop2	
  5450  00513A                     l6888:
  5451  00513A  0100               	movlb	0	; () banked
  5452  00513C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5453  00513E  0100               	movlb	0	; () banked
  5454  005140  B4D8               	btfsc	status,2,c
  5455  005142  0012               	return	
  5456  005144  D7EF               	goto	l6884
  5457  005146                     __end_of_delay_ms:
  5458                           	opt stack 0
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           prodh	equ	0xFF4
  5464                           prodl	equ	0xFF3
  5465                           postinc0	equ	0xFEE
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _Distribution *****************
  5477 ;; Defined at:
  5478 ;;		line 346 in file "sort.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;Total ram usage:        2 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    8
  5499 ;; This function calls:
  5500 ;;		_updateServoPosition
  5501 ;; This function is called by:
  5502 ;;		_sort
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text11
  5507  003E74                     __ptext11:
  5508                           	opt stack 0
  5509  003E74                     _Distribution:
  5510                           	opt stack 21
  5511                           
  5512                           ;sort.c: 347: if(f_can_coming_to_distribution){
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;incstack = 0
  5516  003E74  0101               	movlb	1	; () banked
  5517  003E76  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5518  003E78  0101               	movlb	1	; () banked
  5519  003E7A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5520  003E7C  B4D8               	btfsc	status,2,c
  5521  003E7E  0012               	return	
  5522                           
  5523                           ; BSR set to: 1
  5524                           ;sort.c: 348: f_can_distributed = 0;
  5525  003E80  0E00               	movlw	0
  5526  003E82  0101               	movlb	1	; () banked
  5527  003E84  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5528  003E86  0E00               	movlw	0
  5529  003E88  6F35               	movwf	_f_can_distributed& (0+255),b
  5530                           
  5531                           ;sort.c: 355: switch(cur_can){
  5532  003E8A  D034               	goto	l7534
  5533  003E8C                     l7524:
  5534                           
  5535                           ;sort.c: 357: updateServoPosition(500, 1);
  5536  003E8C  0E01               	movlw	1
  5537  003E8E  0100               	movlb	0	; () banked
  5538  003E90  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5539  003E92  0EF4               	movlw	244
  5540  003E94  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5541  003E96  0E00               	movlw	0
  5542  003E98  0100               	movlb	0	; () banked
  5543  003E9A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5544  003E9C  0E01               	movlw	1
  5545  003E9E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5546  003EA0  ECBA  F022         	call	_updateServoPosition	;wreg free
  5547                           
  5548                           ;sort.c: 358: break;
  5549  003EA4  D03E               	goto	l7536
  5550  003EA6                     l7526:
  5551                           
  5552                           ;sort.c: 360: updateServoPosition(850, 1);
  5553  003EA6  0E03               	movlw	3
  5554  003EA8  0100               	movlb	0	; () banked
  5555  003EAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5556  003EAC  0E52               	movlw	82
  5557  003EAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5558  003EB0  0E00               	movlw	0
  5559  003EB2  0100               	movlb	0	; () banked
  5560  003EB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5561  003EB6  0E01               	movlw	1
  5562  003EB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5563  003EBA  ECBA  F022         	call	_updateServoPosition	;wreg free
  5564                           
  5565                           ;sort.c: 361: break;
  5566  003EBE  D031               	goto	l7536
  5567  003EC0                     l7528:
  5568                           
  5569                           ;sort.c: 363: updateServoPosition(1670, 1);
  5570  003EC0  0E06               	movlw	6
  5571  003EC2  0100               	movlb	0	; () banked
  5572  003EC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5573  003EC6  0E86               	movlw	134
  5574  003EC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5575  003ECA  0E00               	movlw	0
  5576  003ECC  0100               	movlb	0	; () banked
  5577  003ECE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5578  003ED0  0E01               	movlw	1
  5579  003ED2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5580  003ED4  ECBA  F022         	call	_updateServoPosition	;wreg free
  5581                           
  5582                           ;sort.c: 364: break;
  5583  003ED8  D024               	goto	l7536
  5584  003EDA                     l7530:
  5585                           
  5586                           ;sort.c: 366: updateServoPosition(2400, 1);
  5587  003EDA  0E09               	movlw	9
  5588  003EDC  0100               	movlb	0	; () banked
  5589  003EDE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5590  003EE0  0E60               	movlw	96
  5591  003EE2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5592  003EE4  0E00               	movlw	0
  5593  003EE6  0100               	movlb	0	; () banked
  5594  003EE8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5595  003EEA  0E01               	movlw	1
  5596  003EEC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5597  003EEE  ECBA  F022         	call	_updateServoPosition	;wreg free
  5598                           
  5599                           ;sort.c: 370: }
  5600                           
  5601                           ;sort.c: 369: break;
  5602                           
  5603                           ;sort.c: 368: default:
  5604                           
  5605                           ;sort.c: 367: break;
  5606  003EF2  D017               	goto	l7536
  5607  003EF4                     l7534:
  5608  003EF4  C12B  F088         	movff	_cur_can,??_Distribution
  5609  003EF8  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5610                           
  5611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5612                           ; Switch size 1, requested type "space"
  5613                           ; Number of cases is 1, Range of values is 0 to 0
  5614                           ; switch strategies available:
  5615                           ; Name         Instructions Cycles
  5616                           ; simple_byte            4     3 (average)
  5617                           ;	Chosen strategy is simple_byte
  5618  003EFC  0100               	movlb	0	; () banked
  5619  003EFE  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5620  003F00  0A00               	xorlw	0	; case 0
  5621  003F02  A4D8               	btfss	status,2,c
  5622  003F04  D00E               	goto	l7536
  5623                           
  5624                           ; BSR set to: 0
  5625                           ; Switch size 1, requested type "space"
  5626                           ; Number of cases is 4, Range of values is 0 to 3
  5627                           ; switch strategies available:
  5628                           ; Name         Instructions Cycles
  5629                           ; simple_byte           13     7 (average)
  5630                           ;	Chosen strategy is simple_byte
  5631  003F06  0100               	movlb	0	; () banked
  5632  003F08  5188               	movf	??_Distribution& (0+255),w,b
  5633  003F0A  0A00               	xorlw	0	; case 0
  5634  003F0C  B4D8               	btfsc	status,2,c
  5635  003F0E  D7BE               	goto	l7524
  5636  003F10  0A01               	xorlw	1	; case 1
  5637  003F12  B4D8               	btfsc	status,2,c
  5638  003F14  D7C8               	goto	l7526
  5639  003F16  0A03               	xorlw	3	; case 2
  5640  003F18  B4D8               	btfsc	status,2,c
  5641  003F1A  D7D2               	goto	l7528
  5642  003F1C  0A01               	xorlw	1	; case 3
  5643  003F1E  B4D8               	btfsc	status,2,c
  5644  003F20  D7DC               	goto	l7530
  5645  003F22                     l7536:
  5646                           
  5647                           ;sort.c: 371: updateServoPosition(1050, 3);
  5648  003F22  0E04               	movlw	4
  5649  003F24  0100               	movlb	0	; () banked
  5650  003F26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5651  003F28  0E1A               	movlw	26
  5652  003F2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5653  003F2C  0E00               	movlw	0
  5654  003F2E  0100               	movlb	0	; () banked
  5655  003F30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5656  003F32  0E03               	movlw	3
  5657  003F34  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5658  003F36  ECBA  F022         	call	_updateServoPosition	;wreg free
  5659                           
  5660                           ;sort.c: 372: servo_timer_target = 750;
  5661  003F3A  0E02               	movlw	2
  5662  003F3C  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5663  003F3E  0EEE               	movlw	238
  5664  003F40  6E73               	movwf	_servo_timer_target,c	;volatile
  5665                           
  5666                           ;sort.c: 373: f_panning_to_bin = 1;
  5667  003F42  0E00               	movlw	0
  5668  003F44  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5669  003F46  0E01               	movlw	1
  5670  003F48  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5671                           
  5672                           ;sort.c: 374: f_can_coming_to_distribution = 0;
  5673  003F4A  0E00               	movlw	0
  5674  003F4C  0101               	movlb	1	; () banked
  5675  003F4E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5676  003F50  0E00               	movlw	0
  5677  003F52  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5678  003F54  0012               	return	
  5679  003F56                     __end_of_Distribution:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1l	equ	0xFE1
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _machineConfig *****************
  5699 ;; Defined at:
  5700 ;;		line 15 in file "MachineConfig.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      void 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    7
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text12
  5729  0049F8                     __ptext12:
  5730                           	opt stack 0
  5731  0049F8                     _machineConfig:
  5732                           	opt stack 23
  5733                           
  5734                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5735                           
  5736                           ; BSR set to: 1
  5737                           ;incstack = 0
  5738  0049F8  0EF0               	movlw	240
  5739  0049FA  6ED3               	movwf	4051,c	;volatile
  5740                           
  5741                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5742  0049FC  8C9B               	bsf	3995,6,c	;volatile
  5743                           
  5744                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5745  0049FE  0E07               	movlw	7
  5746  004A00  6E92               	movwf	3986,c	;volatile
  5747                           
  5748                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5749  004A02  0EF2               	movlw	242
  5750  004A04  6E93               	movwf	3987,c	;volatile
  5751                           
  5752                           ;MachineConfig.c: 27: TRISC = 0x00;
  5753  004A06  0E00               	movlw	0
  5754  004A08  6E94               	movwf	3988,c	;volatile
  5755                           
  5756                           ;MachineConfig.c: 31: TRISD = 0x00;
  5757  004A0A  0E00               	movlw	0
  5758  004A0C  6E95               	movwf	3989,c	;volatile
  5759                           
  5760                           ;MachineConfig.c: 34: TRISE = 0x00;
  5761  004A0E  0E00               	movlw	0
  5762  004A10  6E96               	movwf	3990,c	;volatile
  5763                           
  5764                           ;MachineConfig.c: 37: LATA = 0x00;
  5765  004A12  0E00               	movlw	0
  5766  004A14  6E89               	movwf	3977,c	;volatile
  5767                           
  5768                           ;MachineConfig.c: 38: LATB = 0x00;
  5769  004A16  0E00               	movlw	0
  5770  004A18  6E8A               	movwf	3978,c	;volatile
  5771                           
  5772                           ;MachineConfig.c: 39: LATC = 0x00;
  5773  004A1A  0E00               	movlw	0
  5774  004A1C  6E8B               	movwf	3979,c	;volatile
  5775                           
  5776                           ;MachineConfig.c: 40: LATD = 0x00;
  5777  004A1E  0E00               	movlw	0
  5778  004A20  6E8C               	movwf	3980,c	;volatile
  5779                           
  5780                           ;MachineConfig.c: 41: LATE = 0x00;
  5781  004A22  0E00               	movlw	0
  5782  004A24  6E8D               	movwf	3981,c	;volatile
  5783                           
  5784                           ;MachineConfig.c: 43: nRBPU = 0;
  5785  004A26  9EF1               	bcf	intcon2,7,c	;volatile
  5786                           
  5787                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5788  004A28  0E00               	movlw	0
  5789  004A2A  6EC2               	movwf	4034,c	;volatile
  5790                           
  5791                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5792  004A2C  0E0D               	movlw	13
  5793  004A2E  6EC1               	movwf	4033,c	;volatile
  5794                           
  5795                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5796  004A30  0E00               	movlw	0
  5797  004A32  6EB5               	movwf	4021,c	;volatile
  5798                           
  5799                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5800  004A34  96B4               	bcf	4020,3,c	;volatile
  5801                           
  5802                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5803  004A36  0EB1               	movlw	177
  5804  004A38  6EC0               	movwf	4032,c	;volatile
  5805                           
  5806                           ;MachineConfig.c: 55: INT1IE = 1;
  5807  004A3A  86F0               	bsf	intcon3,3,c	;volatile
  5808                           
  5809                           ;MachineConfig.c: 57: TMR0IE = 1;
  5810  004A3C  8AF2               	bsf	intcon,5,c	;volatile
  5811                           
  5812                           ;MachineConfig.c: 58: TMR1IE = 1;
  5813  004A3E  809D               	bsf	3997,0,c	;volatile
  5814                           
  5815                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5816  004A40  0EB0               	movlw	176
  5817  004A42  6ECD               	movwf	4045,c	;volatile
  5818                           
  5819                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5820  004A44  0EB0               	movlw	176
  5821  004A46  6EB1               	movwf	4017,c	;volatile
  5822                           
  5823                           ;MachineConfig.c: 61: TMR2IE = 1;
  5824  004A48  829D               	bsf	3997,1,c	;volatile
  5825                           
  5826                           ;MachineConfig.c: 62: TMR3IE = 1;
  5827  004A4A  82A0               	bsf	4000,1,c	;volatile
  5828                           
  5829                           ;MachineConfig.c: 63: PEIE = 1;
  5830  004A4C  8CF2               	bsf	intcon,6,c	;volatile
  5831                           
  5832                           ;MachineConfig.c: 64: ADIE = 0;
  5833  004A4E  9C9D               	bcf	3997,6,c	;volatile
  5834                           
  5835                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5836  004A50  9EF2               	bcf	intcon,7,c	;volatile
  5837  004A52  0012               	return		;funcret
  5838  004A54                     __end_of_machineConfig:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           intcon2	equ	0xFF1
  5848                           intcon3	equ	0xFF0
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function _logRun *****************
  5861 ;; Defined at:
  5862 ;;		line 84 in file "EEPROM.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5867 ;;  i               2   55[BANK0 ] int 
  5868 ;;  num             1   49[BANK0 ] unsigned char 
  5869 ;;  addr            2   57[BANK0 ] unsigned short 
  5870 ;;  byte11          1   54[BANK0 ] unsigned char 
  5871 ;;  byte3           1   52[BANK0 ] unsigned char 
  5872 ;;  byte2           1   51[BANK0 ] unsigned char 
  5873 ;;  byte1           1   50[BANK0 ] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:       10 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:   11
  5890 ;; This function calls:
  5891 ;;		_EEPROM_read
  5892 ;;		_EEPROM_write
  5893 ;; This function is called by:
  5894 ;;		_main
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text13
  5899  003A18                     __ptext13:
  5900                           	opt stack 0
  5901  003A18                     _logRun:
  5902                           	opt stack 19
  5903                           
  5904                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5905                           
  5906                           ;incstack = 0
  5907  003A18  0E00               	movlw	0
  5908  003A1A  0100               	movlb	0	; () banked
  5909  003A1C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5910  003A1E  0E00               	movlw	0
  5911  003A20  6F80               	movwf	EEPROM_read@address& (0+255),b
  5912  003A22  EC3B  F029         	call	_EEPROM_read	;wreg free
  5913  003A26  0100               	movlb	0	; () banked
  5914  003A28  6FFD               	movwf	_sel& (0+255),b
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5918  003A2A  0100               	movlb	0	; () banked
  5919  003A2C  51FD               	movf	_sel& (0+255),w,b
  5920  003A2E  0D0B               	mullw	11
  5921  003A30  0E01               	movlw	1
  5922  003A32  24F3               	addwf	prodl,w,c
  5923  003A34  0100               	movlb	0	; () banked
  5924  003A36  6FB9               	movwf	logRun@addr& (0+255),b
  5925  003A38  0E00               	movlw	0
  5926  003A3A  20F4               	addwfc	prodh,w,c
  5927  003A3C  0100               	movlb	0	; () banked
  5928  003A3E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;EEPROM.c: 101: if (sel < 3){
  5932  003A40  0E03               	movlw	3
  5933  003A42  0100               	movlb	0	; () banked
  5934  003A44  61FD               	cpfslt	_sel& (0+255),b
  5935  003A46  D00E               	goto	l9120
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5939  003A48  0100               	movlb	0	; () banked
  5940  003A4A  29FD               	incf	_sel& (0+255),w,b
  5941  003A4C  0100               	movlb	0	; () banked
  5942  003A4E  6FB1               	movwf	logRun@num& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5946  003A50  0E00               	movlw	0
  5947  003A52  0100               	movlb	0	; () banked
  5948  003A54  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5949  003A56  0E00               	movlw	0
  5950  003A58  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5951  003A5A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5952  003A5E  ECC6  F01E         	call	_EEPROM_write	;wreg free
  5953                           
  5954                           ;EEPROM.c: 104: }
  5955  003A62  D00A               	goto	l9122
  5956  003A64                     l9120:
  5957                           
  5958                           ;EEPROM.c: 105: else{
  5959                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5960  003A64  0E00               	movlw	0
  5961  003A66  0100               	movlb	0	; () banked
  5962  003A68  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5963  003A6A  0E00               	movlw	0
  5964  003A6C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5965  003A6E  0E00               	movlw	0
  5966  003A70  0100               	movlb	0	; () banked
  5967  003A72  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5968  003A74  ECC6  F01E         	call	_EEPROM_write	;wreg free
  5969  003A78                     l9122:
  5970                           
  5971                           ;EEPROM.c: 107: }
  5972                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5973  003A78  0100               	movlb	0	; () banked
  5974  003A7A  51FE               	movf	_count_total& (0+255),w,b
  5975  003A7C  0980               	iorlw	128
  5976  003A7E  0100               	movlb	0	; () banked
  5977  003A80  6FB2               	movwf	logRun@byte1& (0+255),b
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5981  003A82  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5982  003A86  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5983  003A8A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5984  003A8E  ECC6  F01E         	call	_EEPROM_write	;wreg free
  5985                           
  5986                           ;EEPROM.c: 112: addr++;
  5987  003A92  0100               	movlb	0	; () banked
  5988  003A94  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5989  003A96  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5993  003A98  0101               	movlb	1	; () banked
  5994  003A9A  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  5995  003A9C  0BF0               	andlw	240
  5996  003A9E  0101               	movlb	1	; () banked
  5997  003AA0  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  5998  003AA2  0100               	movlb	0	; () banked
  5999  003AA4  6FB3               	movwf	logRun@byte2& (0+255),b
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6003  003AA6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6004  003AAA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6005  003AAE  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6006  003AB2  ECC6  F01E         	call	_EEPROM_write	;wreg free
  6007                           
  6008                           ;EEPROM.c: 117: addr++;
  6009  003AB6  0100               	movlb	0	; () banked
  6010  003AB8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6011  003ABA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6015  003ABC  0101               	movlb	1	; () banked
  6016  003ABE  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6017  003AC0  0BF0               	andlw	240
  6018  003AC2  0101               	movlb	1	; () banked
  6019  003AC4  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6020  003AC6  0100               	movlb	0	; () banked
  6021  003AC8  6FB4               	movwf	logRun@byte3& (0+255),b
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6025  003ACA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6026  003ACE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6027  003AD2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6028  003AD6  ECC6  F01E         	call	_EEPROM_write	;wreg free
  6029                           
  6030                           ;EEPROM.c: 120: addr++;
  6031  003ADA  0100               	movlb	0	; () banked
  6032  003ADC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6033  003ADE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6037  003AE0  0E00               	movlw	0
  6038  003AE2  0100               	movlb	0	; () banked
  6039  003AE4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6040  003AE6  0E00               	movlw	0
  6041  003AE8  6FB7               	movwf	logRun@i& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044  003AEA  0100               	movlb	0	; () banked
  6045  003AEC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6046  003AEE  D008               	goto	l9146
  6047  003AF0  0100               	movlb	0	; () banked
  6048  003AF2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6049  003AF4  E128               	bnz	l1052
  6050  003AF6  0E07               	movlw	7
  6051  003AF8  0100               	movlb	0	; () banked
  6052  003AFA  5DB7               	subwf	logRun@i& (0+255),w,b
  6053  003AFC  B0D8               	btfsc	status,0,c
  6054  003AFE  D023               	goto	l1052
  6055  003B00                     l9146:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6059  003B00  90D8               	bcf	status,0,c
  6060  003B02  0100               	movlb	0	; () banked
  6061  003B04  35B7               	rlcf	logRun@i& (0+255),w,b
  6062  003B06  6ED9               	movwf	fsr2l,c
  6063  003B08  0100               	movlb	0	; () banked
  6064  003B0A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6065  003B0C  6EDA               	movwf	fsr2h,c
  6066  003B0E  0E0E               	movlw	low _startTime
  6067  003B10  26D9               	addwf	fsr2l,f,c
  6068  003B12  0E01               	movlw	high _startTime
  6069  003B14  22DA               	addwfc	fsr2h,f,c
  6070  003B16  50DF               	movf	indf2,w,c
  6071  003B18  0100               	movlb	0	; () banked
  6072  003B1A  6FB5               	movwf	logRun@byte_i& (0+255),b
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6076  003B1C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6077  003B20  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6078  003B24  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6079  003B28  ECC6  F01E         	call	_EEPROM_write	;wreg free
  6080                           
  6081                           ;EEPROM.c: 126: addr++;
  6082  003B2C  0100               	movlb	0	; () banked
  6083  003B2E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6084  003B30  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6085                           
  6086                           ; BSR set to: 0
  6087  003B32  0100               	movlb	0	; () banked
  6088  003B34  4BB7               	infsnz	logRun@i& (0+255),f,b
  6089  003B36  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6090                           
  6091                           ; BSR set to: 0
  6092  003B38  0100               	movlb	0	; () banked
  6093  003B3A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6094  003B3C  D7E1               	goto	l9146
  6095  003B3E  0100               	movlb	0	; () banked
  6096  003B40  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6097  003B42  E101               	bnz	u8220
  6098  003B44  D7D8               	goto	L7
  6099  003B46                     u8220:
  6100  003B46                     l1052:
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;EEPROM.c: 127: }
  6104                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6105  003B46  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6109  003B4A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6110  003B4E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6111  003B52  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6112  003B56  ECC6  F01E         	call	_EEPROM_write	;wreg free
  6113  003B5A  0012               	return		;funcret
  6114  003B5C                     __end_of_logRun:
  6115                           	opt stack 0
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           intcon	equ	0xFF2
  6123                           intcon2	equ	0xFF1
  6124                           intcon3	equ	0xFF0
  6125                           postinc0	equ	0xFEE
  6126                           wreg	equ	0xFE8
  6127                           postdec1	equ	0xFE5
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           postdec2	equ	0xFDD
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function _EEPROM_write *****************
  6137 ;; Defined at:
  6138 ;;		line 32 in file "EEPROM.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  address         2   43[BANK0 ] unsigned short 
  6141 ;;  data            1   45[BANK0 ] unsigned char 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  i               1   48[BANK0 ] unsigned char 
  6144 ;;  i               1   47[BANK0 ] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6154 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;Total ram usage:        6 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:   10
  6161 ;; This function calls:
  6162 ;;		_EEPROM_read
  6163 ;;		_lcdInst
  6164 ;;		_printf
  6165 ;; This function is called by:
  6166 ;;		_Loading
  6167 ;;		_logRun
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text14
  6172  003D8C                     __ptext14:
  6173                           	opt stack 0
  6174  003D8C                     _EEPROM_write:
  6175                           	opt stack 18
  6176                           
  6177                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6178                           
  6179                           ;incstack = 0
  6180  003D8C  84A6               	bsf	4006,2,c	;volatile
  6181                           
  6182                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6183  003D8E  0100               	movlb	0	; () banked
  6184  003D90  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6185  003D92  6EAA               	movwf	4010,c	;volatile
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6189  003D94  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;EEPROM.c: 39: EEDATA = data;
  6193  003D98  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6197  003D9C  9EA6               	bcf	4006,7,c	;volatile
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6201  003D9E  9CA6               	bcf	4006,6,c	;volatile
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6205  003DA0  9EF2               	bcf	intcon,7,c	;volatile
  6206                           
  6207                           ;EEPROM.c: 45: EECON2 = 0x55;
  6208  003DA2  0E55               	movlw	85
  6209  003DA4  6EA7               	movwf	4007,c	;volatile
  6210                           
  6211                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6212  003DA6  0EAA               	movlw	170
  6213  003DA8  6EA7               	movwf	4007,c	;volatile
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6217  003DAA  82A6               	bsf	4006,1,c	;volatile
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6221  003DAC  8EF2               	bsf	intcon,7,c	;volatile
  6222  003DAE                     l1030:
  6223  003DAE  A8A1               	btfss	4001,4,c	;volatile
  6224  003DB0  D7FE               	goto	l1030
  6225                           
  6226                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6227  003DB2  98A1               	bcf	4001,4,c	;volatile
  6228                           
  6229                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6230  003DB4  94A6               	bcf	4006,2,c	;volatile
  6231                           
  6232                           ;EEPROM.c: 57: if(debug){
  6233  003DB6  0101               	movlb	1	; () banked
  6234  003DB8  512D               	movf	_debug& (0+255),w,b
  6235  003DBA  0101               	movlb	1	; () banked
  6236  003DBC  112E               	iorwf	(_debug+1)& (0+255),w,b
  6237  003DBE  B4D8               	btfsc	status,2,c
  6238  003DC0  0012               	return	
  6239                           
  6240                           ; BSR set to: 1
  6241                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6242  003DC2  0E01               	movlw	1
  6243  003DC4  EC6D  F029         	call	_lcdInst
  6244  003DC8  0E68               	movlw	104
  6245  003DCA  0100               	movlb	0	; () banked
  6246  003DCC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6247  003DCE  0EE4               	movlw	228
  6248  003DD0                     u8947:
  6249  003DD0  2EE8               	decfsz	wreg,f,c
  6250  003DD2  D7FE               	bra	u8947
  6251  003DD4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6252  003DD6  D7FC               	bra	u8947
  6253  003DD8  F000               	nop	
  6254                           
  6255                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6256  003DDA  0E80               	movlw	128
  6257  003DDC  EC6D  F029         	call	_lcdInst
  6258                           
  6259                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6260  003DE0  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6261  003DE4  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6262  003DE8  EC3B  F029         	call	_EEPROM_read	;wreg free
  6263  003DEC  0100               	movlb	0	; () banked
  6264  003DEE  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6265  003DF0  A4D8               	btfss	status,2,c
  6266  003DF2  D024               	goto	l6870
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6270  003DF4  0E22               	movlw	low STR_66
  6271  003DF6  0100               	movlb	0	; () banked
  6272  003DF8  6F8E               	movwf	printf@f& (0+255),b
  6273  003DFA  0EFB               	movlw	high STR_66
  6274  003DFC  0100               	movlb	0	; () banked
  6275  003DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6276  003E00  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6277  003E04  0100               	movlb	0	; () banked
  6278  003E06  6B91               	clrf	(?_printf+3)& (0+255),b
  6279  003E08  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6280  003E0C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6281  003E10  EC08  F00B         	call	_printf	;wreg free
  6282                           
  6283                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6284  003E14  0E00               	movlw	0
  6285  003E16  0100               	movlb	0	; () banked
  6286  003E18  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6287  003E1A                     l6862:
  6288                           
  6289                           ; BSR set to: 0
  6290  003E1A  0E63               	movlw	99
  6291  003E1C  0100               	movlb	0	; () banked
  6292  003E1E  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6293  003E20  D001               	goto	l6866
  6294  003E22  0012               	return	
  6295  003E24                     l6866:
  6296                           
  6297                           ; BSR set to: 0
  6298  003E24  0E68               	movlw	104
  6299  003E26  0100               	movlb	0	; () banked
  6300  003E28  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6301  003E2A  0EE4               	movlw	228
  6302  003E2C                     u8957:
  6303  003E2C  2EE8               	decfsz	wreg,f,c
  6304  003E2E  D7FE               	bra	u8957
  6305  003E30  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6306  003E32  D7FC               	bra	u8957
  6307  003E34  F000               	nop	
  6308  003E36  0100               	movlb	0	; () banked
  6309  003E38  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6310  003E3A  D7EF               	goto	l6862
  6311  003E3C                     l6870:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6315  003E3C  0EBD               	movlw	low STR_67
  6316  003E3E  0100               	movlb	0	; () banked
  6317  003E40  6F8E               	movwf	printf@f& (0+255),b
  6318  003E42  0EFF               	movlw	high STR_67
  6319  003E44  0100               	movlb	0	; () banked
  6320  003E46  6F8F               	movwf	(printf@f+1)& (0+255),b
  6321  003E48  EC08  F00B         	call	_printf	;wreg free
  6322  003E4C  0E00               	movlw	0
  6323  003E4E  0100               	movlb	0	; () banked
  6324  003E50  6FB0               	movwf	EEPROM_write@i_1398& (0+255),b
  6325  003E52                     l6874:
  6326                           
  6327                           ; BSR set to: 0
  6328  003E52  0E63               	movlw	99
  6329  003E54  0100               	movlb	0	; () banked
  6330  003E56  65B0               	cpfsgt	EEPROM_write@i_1398& (0+255),b
  6331  003E58  D001               	goto	l6878
  6332  003E5A  0012               	return	
  6333  003E5C                     l6878:
  6334                           
  6335                           ; BSR set to: 0
  6336  003E5C  0E68               	movlw	104
  6337  003E5E  0100               	movlb	0	; () banked
  6338  003E60  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6339  003E62  0EE4               	movlw	228
  6340  003E64                     u8967:
  6341  003E64  2EE8               	decfsz	wreg,f,c
  6342  003E66  D7FE               	bra	u8967
  6343  003E68  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6344  003E6A  D7FC               	bra	u8967
  6345  003E6C  F000               	nop	
  6346  003E6E  0100               	movlb	0	; () banked
  6347  003E70  2BB0               	incf	EEPROM_write@i_1398& (0+255),f,b
  6348  003E72  D7EF               	goto	l6874
  6349  003E74                     __end_of_EEPROM_write:
  6350                           	opt stack 0
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           prodh	equ	0xFF4
  6356                           prodl	equ	0xFF3
  6357                           intcon	equ	0xFF2
  6358                           intcon2	equ	0xFF1
  6359                           intcon3	equ	0xFF0
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           postdec1	equ	0xFE5
  6363                           fsr1l	equ	0xFE1
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _EEPROM_read *****************
  6372 ;; Defined at:
  6373 ;;		line 68 in file "EEPROM.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  address         2    0[BANK0 ] unsigned short 
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      unsigned char 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;Total ram usage:        2 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    7
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_Loading
  6398 ;;		_EEPROM_write
  6399 ;;		_logRun
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text15
  6404  005276                     __ptext15:
  6405                           	opt stack 0
  6406  005276                     _EEPROM_read:
  6407                           	opt stack 20
  6408                           
  6409                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6410                           
  6411                           ;incstack = 0
  6412  005276  0100               	movlb	0	; () banked
  6413  005278  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6414  00527A  6EAA               	movwf	4010,c	;volatile
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6418  00527C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6422  005280  9EA6               	bcf	4006,7,c	;volatile
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6426  005282  9CA6               	bcf	4006,6,c	;volatile
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6430  005284  80A6               	bsf	4006,0,c	;volatile
  6431  005286                     l1043:
  6432  005286  B0A6               	btfsc	4006,0,c	;volatile
  6433  005288  D7FE               	goto	l1043
  6434                           
  6435                           ;EEPROM.c: 81: return EEDATA;
  6436  00528A  50A8               	movf	4008,w,c	;volatile
  6437  00528C  0012               	return	
  6438  00528E                     __end_of_EEPROM_read:
  6439                           	opt stack 0
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           intcon2	equ	0xFF1
  6448                           intcon3	equ	0xFF0
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           postdec1	equ	0xFE5
  6452                           fsr1l	equ	0xFE1
  6453                           indf2	equ	0xFDF
  6454                           postinc2	equ	0xFDE
  6455                           postdec2	equ	0xFDD
  6456                           fsr2h	equ	0xFDA
  6457                           fsr2l	equ	0xFD9
  6458                           status	equ	0xFD8
  6459                           
  6460 ;; *************** function _initUI *****************
  6461 ;; Defined at:
  6462 ;;		line 62 in file "UI.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;		None
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;		None
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      void 
  6469 ;; Registers used:
  6470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;Total ram usage:        0 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:   12
  6483 ;; This function calls:
  6484 ;;		_change_state_to_menu_start
  6485 ;;		_loadRTC
  6486 ;; This function is called by:
  6487 ;;		_main
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text16
  6492  004E60                     __ptext16:
  6493                           	opt stack 0
  6494  004E60                     _initUI:
  6495                           	opt stack 18
  6496                           
  6497                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6498                           
  6499                           ;incstack = 0
  6500  004E60  8EF2               	bsf	intcon,7,c	;volatile
  6501                           
  6502                           ;UI.c: 64: machine_state = UI_state;
  6503  004E62  0E00               	movlw	0
  6504  004E64  0100               	movlb	0	; () banked
  6505  004E66  6FFC               	movwf	_machine_state& (0+255),b
  6506                           
  6507                           ;UI.c: 65: logstate = 0;
  6508  004E68  0E00               	movlw	0
  6509  004E6A  0100               	movlb	0	; () banked
  6510  004E6C  6FF7               	movwf	(_logstate+1)& (0+255),b
  6511  004E6E  0E00               	movlw	0
  6512  004E70  6FF6               	movwf	_logstate& (0+255),b
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;UI.c: 67: if(RTCflag){
  6516  004E72  0100               	movlb	0	; () banked
  6517  004E74  51EA               	movf	_RTCflag& (0+255),w,b
  6518  004E76  0100               	movlb	0	; () banked
  6519  004E78  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6520  004E7A  A4D8               	btfss	status,2,c
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;UI.c: 68: loadRTC();
  6524  004E7C  EC31  F022         	call	_loadRTC	;wreg free
  6525                           
  6526                           ;UI.c: 69: }
  6527                           ;UI.c: 71: change_state_to_menu_start();
  6528  004E80  EC4E  F028         	call	_change_state_to_menu_start	;wreg free
  6529                           
  6530                           ;UI.c: 72: firstboot = 1;
  6531  004E84  0E00               	movlw	0
  6532  004E86  0101               	movlb	1	; () banked
  6533  004E88  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6534  004E8A  0E01               	movlw	1
  6535  004E8C  6F3B               	movwf	_firstboot& (0+255),b
  6536                           
  6537                           ; BSR set to: 1
  6538  004E8E  0012               	return		;funcret
  6539  004E90                     __end_of_initUI:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           intcon2	equ	0xFF1
  6549                           intcon3	equ	0xFF0
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           postdec1	equ	0xFE5
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function _loadRTC *****************
  6562 ;; Defined at:
  6563 ;;		line 28 in file "RTC.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  i               2   22[BANK0 ] int 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:        3 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    9
  6584 ;; This function calls:
  6585 ;;		_I2C_Master_Init
  6586 ;;		_I2C_Master_Start
  6587 ;;		_I2C_Master_Stop
  6588 ;;		_I2C_Master_Write
  6589 ;; This function is called by:
  6590 ;;		_initUI
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text17
  6595  004462                     __ptext17:
  6596                           	opt stack 0
  6597  004462                     _loadRTC:
  6598                           	opt stack 20
  6599                           
  6600                           ;RTC.c: 30: I2C_Master_Init(10000);
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;incstack = 0
  6604  004462  0E10               	movlw	16
  6605  004464  0100               	movlb	0	; () banked
  6606  004466  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6607  004468  0E27               	movlw	39
  6608  00446A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6609  00446C  0E00               	movlw	0
  6610  00446E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6611  004470  0E00               	movlw	0
  6612  004472  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6613  004474  ECCC  F024         	call	_I2C_Master_Init	;wreg free
  6614                           
  6615                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6616  004478  9EF2               	bcf	intcon,7,c	;volatile
  6617                           
  6618                           ;RTC.c: 34: I2C_Master_Start();
  6619  00447A  EC93  F029         	call	_I2C_Master_Start	;wreg free
  6620                           
  6621                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6622  00447E  0E00               	movlw	0
  6623  004480  0100               	movlb	0	; () banked
  6624  004482  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6625  004484  0ED0               	movlw	208
  6626  004486  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6627  004488  EC81  F029         	call	_I2C_Master_Write	;wreg free
  6628                           
  6629                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6630  00448C  0E00               	movlw	0
  6631  00448E  0100               	movlb	0	; () banked
  6632  004490  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6633  004492  0E00               	movlw	0
  6634  004494  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6635  004496  EC81  F029         	call	_I2C_Master_Write	;wreg free
  6636                           
  6637                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6638  00449A  0E00               	movlw	0
  6639  00449C  0100               	movlb	0	; () banked
  6640  00449E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6641  0044A0  0E00               	movlw	0
  6642  0044A2  6F96               	movwf	loadRTC@i& (0+255),b
  6643  0044A4                     l7016:
  6644                           
  6645                           ; BSR set to: 0
  6646  0044A4  0100               	movlb	0	; () banked
  6647  0044A6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6648  0044A8  D008               	goto	l7020
  6649  0044AA  0100               	movlb	0	; () banked
  6650  0044AC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6651  0044AE  E11B               	bnz	l7026
  6652  0044B0  0E07               	movlw	7
  6653  0044B2  0100               	movlb	0	; () banked
  6654  0044B4  5D96               	subwf	loadRTC@i& (0+255),w,b
  6655  0044B6  B0D8               	btfsc	status,0,c
  6656  0044B8  D016               	goto	l7026
  6657  0044BA                     l7020:
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6661  0044BA  0E1C               	movlw	low _time
  6662  0044BC  0100               	movlb	0	; () banked
  6663  0044BE  2596               	addwf	loadRTC@i& (0+255),w,b
  6664  0044C0  6ED9               	movwf	fsr2l,c
  6665  0044C2  0E01               	movlw	high _time
  6666  0044C4  0100               	movlb	0	; () banked
  6667  0044C6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6668  0044C8  6EDA               	movwf	fsr2h,c
  6669  0044CA  50DF               	movf	indf2,w,c
  6670  0044CC  0100               	movlb	0	; () banked
  6671  0044CE  6F95               	movwf	??_loadRTC& (0+255),b
  6672  0044D0  0100               	movlb	0	; () banked
  6673  0044D2  5195               	movf	??_loadRTC& (0+255),w,b
  6674  0044D4  0100               	movlb	0	; () banked
  6675  0044D6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6676  0044D8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6677  0044DA  EC81  F029         	call	_I2C_Master_Write	;wreg free
  6678  0044DE  0100               	movlb	0	; () banked
  6679  0044E0  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6680  0044E2  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6681  0044E4  D7DF               	goto	l7016
  6682  0044E6                     l7026:
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;RTC.c: 39: }
  6686                           ;RTC.c: 40: I2C_Master_Stop();
  6687  0044E6  EC8F  F029         	call	_I2C_Master_Stop	;wreg free
  6688                           
  6689                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6690  0044EA  8EF2               	bsf	intcon,7,c	;volatile
  6691  0044EC  0012               	return		;funcret
  6692  0044EE                     __end_of_loadRTC:
  6693                           	opt stack 0
  6694                           tblptru	equ	0xFF8
  6695                           tblptrh	equ	0xFF7
  6696                           tblptrl	equ	0xFF6
  6697                           tablat	equ	0xFF5
  6698                           prodh	equ	0xFF4
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           intcon2	equ	0xFF1
  6702                           intcon3	equ	0xFF0
  6703                           postinc0	equ	0xFEE
  6704                           wreg	equ	0xFE8
  6705                           postdec1	equ	0xFE5
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function _I2C_Master_Init *****************
  6715 ;; Defined at:
  6716 ;;		line 15 in file "I2C.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  c               4   13[BANK0 ] const unsigned long 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;Total ram usage:        8 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    8
  6737 ;; This function calls:
  6738 ;;		___lldiv
  6739 ;; This function is called by:
  6740 ;;		_main
  6741 ;;		_loadRTC
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text18
  6746  004998                     __ptext18:
  6747                           	opt stack 0
  6748  004998                     _I2C_Master_Init:
  6749                           	opt stack 20
  6750                           
  6751                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6752                           
  6753                           ;incstack = 0
  6754  004998  0E00               	movlw	0
  6755  00499A  6EC7               	movwf	4039,c	;volatile
  6756                           
  6757                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6758  00499C  0E28               	movlw	40
  6759  00499E  6EC6               	movwf	4038,c	;volatile
  6760                           
  6761                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6762  0049A0  0E00               	movlw	0
  6763  0049A2  6EC5               	movwf	4037,c	;volatile
  6764                           
  6765                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6766  0049A4  0E00               	movlw	0
  6767  0049A6  0100               	movlb	0	; () banked
  6768  0049A8  6F80               	movwf	___lldiv@dividend& (0+255),b
  6769  0049AA  0E48               	movlw	72
  6770  0049AC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6771  0049AE  0EE8               	movlw	232
  6772  0049B0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6773  0049B2  0E01               	movlw	1
  6774  0049B4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6775  0049B6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6776  0049BA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6777  0049BE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6778  0049C2  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6779  0049C6  0E02               	movlw	2
  6780  0049C8                     u5225:
  6781  0049C8  90D8               	bcf	status,0,c
  6782  0049CA  0100               	movlb	0	; () banked
  6783  0049CC  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6784  0049CE  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6785  0049D0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6786  0049D2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6787  0049D4  2EE8               	decfsz	wreg,f,c
  6788  0049D6  D7F8               	goto	u5225
  6789  0049D8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6790  0049DC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6791  0049E0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6792  0049E4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6793  0049E8  ECD7  F020         	call	___lldiv	;wreg free
  6794  0049EC  0100               	movlb	0	; () banked
  6795  0049EE  0580               	decf	?___lldiv& (0+255),w,b
  6796  0049F0  6EC8               	movwf	4040,c	;volatile
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;I2C.c: 22: TRISC3 = 1;
  6800  0049F2  8694               	bsf	3988,3,c	;volatile
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;I2C.c: 23: TRISC4 = 1;
  6804  0049F4  8894               	bsf	3988,4,c	;volatile
  6805                           
  6806                           ; BSR set to: 0
  6807  0049F6  0012               	return		;funcret
  6808  0049F8                     __end_of_I2C_Master_Init:
  6809                           	opt stack 0
  6810                           tblptru	equ	0xFF8
  6811                           tblptrh	equ	0xFF7
  6812                           tblptrl	equ	0xFF6
  6813                           tablat	equ	0xFF5
  6814                           prodh	equ	0xFF4
  6815                           prodl	equ	0xFF3
  6816                           intcon	equ	0xFF2
  6817                           intcon2	equ	0xFF1
  6818                           intcon3	equ	0xFF0
  6819                           postinc0	equ	0xFEE
  6820                           wreg	equ	0xFE8
  6821                           postdec1	equ	0xFE5
  6822                           fsr1l	equ	0xFE1
  6823                           indf2	equ	0xFDF
  6824                           postinc2	equ	0xFDE
  6825                           postdec2	equ	0xFDD
  6826                           fsr2h	equ	0xFDA
  6827                           fsr2l	equ	0xFD9
  6828                           status	equ	0xFD8
  6829                           
  6830 ;; *************** function ___lldiv *****************
  6831 ;; Defined at:
  6832 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  dividend        4    0[BANK0 ] unsigned long 
  6835 ;;  divisor         4    4[BANK0 ] unsigned long 
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;  quotient        4    8[BANK0 ] unsigned long 
  6838 ;;  counter         1   12[BANK0 ] unsigned char 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  4    0[BANK0 ] unsigned long 
  6841 ;; Registers used:
  6842 ;;		wreg, status,2, status,0
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6848 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;Total ram usage:       13 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    7
  6855 ;; This function calls:
  6856 ;;		Nothing
  6857 ;; This function is called by:
  6858 ;;		_I2C_Master_Init
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text19
  6863  0041AE                     __ptext19:
  6864                           	opt stack 0
  6865  0041AE                     ___lldiv:
  6866                           	opt stack 20
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;incstack = 0
  6870  0041AE  0E00               	movlw	0
  6871  0041B0  0100               	movlb	0	; () banked
  6872  0041B2  6F88               	movwf	___lldiv@quotient& (0+255),b
  6873  0041B4  0E00               	movlw	0
  6874  0041B6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6875  0041B8  0E00               	movlw	0
  6876  0041BA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6877  0041BC  0E00               	movlw	0
  6878  0041BE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6879                           
  6880                           ; BSR set to: 0
  6881  0041C0  0100               	movlb	0	; () banked
  6882  0041C2  5184               	movf	___lldiv@divisor& (0+255),w,b
  6883  0041C4  0100               	movlb	0	; () banked
  6884  0041C6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6885  0041C8  0100               	movlb	0	; () banked
  6886  0041CA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6887  0041CC  0100               	movlb	0	; () banked
  6888  0041CE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6889  0041D0  B4D8               	btfsc	status,2,c
  6890  0041D2  D042               	goto	l1804
  6891                           
  6892                           ; BSR set to: 0
  6893  0041D4  0E01               	movlw	1
  6894  0041D6  0100               	movlb	0	; () banked
  6895  0041D8  6F8C               	movwf	___lldiv@counter& (0+255),b
  6896  0041DA  D008               	goto	l6436
  6897  0041DC                     l6434:
  6898                           
  6899                           ; BSR set to: 0
  6900  0041DC  0100               	movlb	0	; () banked
  6901  0041DE  90D8               	bcf	status,0,c
  6902  0041E0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6903  0041E2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6904  0041E4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6905  0041E6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6906  0041E8  0100               	movlb	0	; () banked
  6907  0041EA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6908  0041EC                     l6436:
  6909                           
  6910                           ; BSR set to: 0
  6911  0041EC  0100               	movlb	0	; () banked
  6912  0041EE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6913  0041F0  D7F5               	goto	l6434
  6914  0041F2                     l6438:
  6915                           
  6916                           ; BSR set to: 0
  6917  0041F2  0100               	movlb	0	; () banked
  6918  0041F4  90D8               	bcf	status,0,c
  6919  0041F6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6920  0041F8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6921  0041FA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6922  0041FC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6923                           
  6924                           ; BSR set to: 0
  6925  0041FE  0100               	movlb	0	; () banked
  6926  004200  5184               	movf	___lldiv@divisor& (0+255),w,b
  6927  004202  0100               	movlb	0	; () banked
  6928  004204  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6929  004206  0100               	movlb	0	; () banked
  6930  004208  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6931  00420A  0100               	movlb	0	; () banked
  6932  00420C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6933  00420E  0100               	movlb	0	; () banked
  6934  004210  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6935  004212  0100               	movlb	0	; () banked
  6936  004214  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6937  004216  0100               	movlb	0	; () banked
  6938  004218  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6939  00421A  0100               	movlb	0	; () banked
  6940  00421C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6941  00421E  A0D8               	btfss	status,0,c
  6942  004220  D012               	goto	l6446
  6943                           
  6944                           ; BSR set to: 0
  6945  004222  0100               	movlb	0	; () banked
  6946  004224  5184               	movf	___lldiv@divisor& (0+255),w,b
  6947  004226  0100               	movlb	0	; () banked
  6948  004228  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6949  00422A  0100               	movlb	0	; () banked
  6950  00422C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6951  00422E  0100               	movlb	0	; () banked
  6952  004230  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6953  004232  0100               	movlb	0	; () banked
  6954  004234  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6955  004236  0100               	movlb	0	; () banked
  6956  004238  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6957  00423A  0100               	movlb	0	; () banked
  6958  00423C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6959  00423E  0100               	movlb	0	; () banked
  6960  004240  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 0
  6963  004242  0100               	movlb	0	; () banked
  6964  004244  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6965  004246                     l6446:
  6966                           
  6967                           ; BSR set to: 0
  6968  004246  0100               	movlb	0	; () banked
  6969  004248  90D8               	bcf	status,0,c
  6970  00424A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6971  00424C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6972  00424E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6973  004250  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6974                           
  6975                           ; BSR set to: 0
  6976  004252  0100               	movlb	0	; () banked
  6977  004254  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6978  004256  D7CD               	goto	l6438
  6979  004258                     l1804:
  6980                           
  6981                           ; BSR set to: 0
  6982  004258  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6983  00425C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6984  004260  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6985  004264  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6986                           
  6987                           ; BSR set to: 0
  6988  004268  0012               	return		;funcret
  6989  00426A                     __end_of___lldiv:
  6990                           	opt stack 0
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           intcon2	equ	0xFF1
  6999                           intcon3	equ	0xFF0
  7000                           postinc0	equ	0xFEE
  7001                           wreg	equ	0xFE8
  7002                           postdec1	equ	0xFE5
  7003                           fsr1l	equ	0xFE1
  7004                           indf2	equ	0xFDF
  7005                           postinc2	equ	0xFDE
  7006                           postdec2	equ	0xFDD
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function _change_state_to_menu_start *****************
  7012 ;; Defined at:
  7013 ;;		line 474 in file "UI.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:   11
  7034 ;; This function calls:
  7035 ;;		_lcdInst
  7036 ;;		_printRTC
  7037 ;;		_printf
  7038 ;; This function is called by:
  7039 ;;		_initUI
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text20
  7044  00509C                     __ptext20:
  7045                           	opt stack 0
  7046  00509C                     _change_state_to_menu_start:
  7047                           	opt stack 18
  7048                           
  7049                           ;UI.c: 475: cur_state = 0;
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;incstack = 0
  7053  00509C  0E00               	movlw	0
  7054  00509E  0100               	movlb	0	; () banked
  7055  0050A0  6FED               	movwf	(_cur_state+1)& (0+255),b
  7056  0050A2  0E00               	movlw	0
  7057  0050A4  6FEC               	movwf	_cur_state& (0+255),b
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;UI.c: 477: lcdInst(0b10000000);;
  7061  0050A6  0E80               	movlw	128
  7062  0050A8  EC6D  F029         	call	_lcdInst
  7063                           
  7064                           ;UI.c: 478: printRTC();
  7065  0050AC  EC1C  F012         	call	_printRTC	;wreg free
  7066                           
  7067                           ;UI.c: 479: lcdInst(0b11000000);;
  7068  0050B0  0EC0               	movlw	192
  7069  0050B2  EC6D  F029         	call	_lcdInst
  7070                           
  7071                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7072  0050B6  0EF7               	movlw	low STR_30
  7073  0050B8  0100               	movlb	0	; () banked
  7074  0050BA  6F8E               	movwf	printf@f& (0+255),b
  7075  0050BC  0EFD               	movlw	high STR_30
  7076  0050BE  0100               	movlb	0	; () banked
  7077  0050C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7078  0050C2  EC08  F00B         	call	_printf	;wreg free
  7079  0050C6  0012               	return		;funcret
  7080  0050C8                     __end_of_change_state_to_menu_start:
  7081                           	opt stack 0
  7082                           tblptru	equ	0xFF8
  7083                           tblptrh	equ	0xFF7
  7084                           tblptrl	equ	0xFF6
  7085                           tablat	equ	0xFF5
  7086                           prodh	equ	0xFF4
  7087                           prodl	equ	0xFF3
  7088                           intcon	equ	0xFF2
  7089                           intcon2	equ	0xFF1
  7090                           intcon3	equ	0xFF0
  7091                           postinc0	equ	0xFEE
  7092                           wreg	equ	0xFE8
  7093                           postdec1	equ	0xFE5
  7094                           fsr1l	equ	0xFE1
  7095                           indf2	equ	0xFDF
  7096                           postinc2	equ	0xFDE
  7097                           postdec2	equ	0xFDD
  7098                           fsr2h	equ	0xFDA
  7099                           fsr2l	equ	0xFD9
  7100                           status	equ	0xFD8
  7101                           
  7102 ;; *************** function _initTime *****************
  7103 ;; Defined at:
  7104 ;;		line 17 in file "RTC.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  s               1    wreg     unsigned char 
  7107 ;;  m               1    0[BANK0 ] unsigned char 
  7108 ;;  h               1    1[BANK0 ] unsigned char 
  7109 ;;  w               1    2[BANK0 ] unsigned char 
  7110 ;;  DD              1    3[BANK0 ] unsigned char 
  7111 ;;  MM              1    4[BANK0 ] unsigned char 
  7112 ;;  YY              1    5[BANK0 ] unsigned char 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  s               1    6[BANK0 ] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7124 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;Total ram usage:        7 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    7
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text21
  7139  005200                     __ptext21:
  7140                           	opt stack 0
  7141  005200                     _initTime:
  7142                           	opt stack 23
  7143                           
  7144                           ;incstack = 0
  7145                           ;initTime@s stored from wreg
  7146  005200  0100               	movlb	0	; () banked
  7147  005202  6F86               	movwf	initTime@s& (0+255),b
  7148                           
  7149                           ;RTC.c: 19: time[0] = s;
  7150  005204  C086  F11C         	movff	initTime@s,_time
  7151                           
  7152                           ;RTC.c: 20: time[1] = m;
  7153  005208  C080  F11D         	movff	initTime@m,_time+1
  7154                           
  7155                           ;RTC.c: 21: time[2] = h;
  7156  00520C  C081  F11E         	movff	initTime@h,_time+2
  7157                           
  7158                           ;RTC.c: 22: time[3] = w;
  7159  005210  C082  F11F         	movff	initTime@w,_time+3
  7160                           
  7161                           ;RTC.c: 23: time[4] = DD;
  7162  005214  C083  F120         	movff	initTime@DD,_time+4
  7163                           
  7164                           ;RTC.c: 24: time[5] = MM;
  7165  005218  C084  F121         	movff	initTime@MM,_time+5
  7166                           
  7167                           ;RTC.c: 25: time[6] = YY;
  7168  00521C  C085  F122         	movff	initTime@YY,_time+6
  7169  005220  0012               	return		;funcret
  7170  005222                     __end_of_initTime:
  7171                           	opt stack 0
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           intcon2	equ	0xFF1
  7180                           intcon3	equ	0xFF0
  7181                           postinc0	equ	0xFEE
  7182                           wreg	equ	0xFE8
  7183                           postdec1	equ	0xFE5
  7184                           fsr1l	equ	0xFE1
  7185                           indf2	equ	0xFDF
  7186                           postinc2	equ	0xFDE
  7187                           postdec2	equ	0xFDD
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8
  7191                           
  7192 ;; *************** function _initLCD *****************
  7193 ;; Defined at:
  7194 ;;		line 48 in file "lcd.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;		None
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, status,2, status,0, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;Total ram usage:        1 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    9
  7215 ;; This function calls:
  7216 ;;		_lcdInst
  7217 ;; This function is called by:
  7218 ;;		_main
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           	psect	text22
  7223  004C98                     __ptext22:
  7224                           	opt stack 0
  7225  004C98                     _initLCD:
  7226                           	opt stack 21
  7227                           
  7228                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7229                           
  7230                           ;incstack = 0
  7231  004C98  0E9C               	movlw	156
  7232  004C9A  0100               	movlb	0	; () banked
  7233  004C9C  6F83               	movwf	??_initLCD& (0+255),b
  7234  004C9E  0ED7               	movlw	215
  7235  004CA0                     u8977:
  7236  004CA0  2EE8               	decfsz	wreg,f,c
  7237  004CA2  D7FE               	bra	u8977
  7238  004CA4  2F83               	decfsz	??_initLCD& (0+255),f,b
  7239  004CA6  D7FC               	bra	u8977
  7240                           
  7241                           ;lcd.c: 50: lcdInst(0b00110011);
  7242  004CA8  0E33               	movlw	51
  7243  004CAA  EC6D  F029         	call	_lcdInst
  7244                           
  7245                           ;lcd.c: 51: lcdInst(0b00110010);
  7246  004CAE  0E32               	movlw	50
  7247  004CB0  EC6D  F029         	call	_lcdInst
  7248                           
  7249                           ;lcd.c: 53: lcdInst(0b00101000);
  7250  004CB4  0E28               	movlw	40
  7251  004CB6  EC6D  F029         	call	_lcdInst
  7252                           
  7253                           ;lcd.c: 54: lcdInst(0b00001100);
  7254  004CBA  0E0C               	movlw	12
  7255  004CBC  EC6D  F029         	call	_lcdInst
  7256                           
  7257                           ;lcd.c: 55: lcdInst(0b00000110);
  7258  004CC0  0E06               	movlw	6
  7259  004CC2  EC6D  F029         	call	_lcdInst
  7260                           
  7261                           ;lcd.c: 56: lcdInst(0b00000001);
  7262  004CC6  0E01               	movlw	1
  7263  004CC8  EC6D  F029         	call	_lcdInst
  7264                           
  7265                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7266  004CCC  0E9C               	movlw	156
  7267  004CCE  0100               	movlb	0	; () banked
  7268  004CD0  6F83               	movwf	??_initLCD& (0+255),b
  7269  004CD2  0ED7               	movlw	215
  7270  004CD4                     u8987:
  7271  004CD4  2EE8               	decfsz	wreg,f,c
  7272  004CD6  D7FE               	bra	u8987
  7273  004CD8  2F83               	decfsz	??_initLCD& (0+255),f,b
  7274  004CDA  D7FC               	bra	u8987
  7275  004CDC  0012               	return		;funcret
  7276  004CDE                     __end_of_initLCD:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           intcon3	equ	0xFF0
  7287                           postinc0	equ	0xFEE
  7288                           wreg	equ	0xFE8
  7289                           postdec1	equ	0xFE5
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _UI *****************
  7299 ;; Defined at:
  7300 ;;		line 76 in file "UI.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  i               1   73[BANK0 ] unsigned char 
  7305 ;;  i               1   85[BANK0 ] unsigned char 
  7306 ;;  i               1   84[BANK0 ] unsigned char 
  7307 ;;  i               1   83[BANK0 ] unsigned char 
  7308 ;;  i               1   82[BANK0 ] unsigned char 
  7309 ;;  i               1   81[BANK0 ] unsigned char 
  7310 ;;  i               1   80[BANK0 ] unsigned char 
  7311 ;;  i               1   79[BANK0 ] unsigned char 
  7312 ;;  i               1   78[BANK0 ] unsigned char 
  7313 ;;  i               1   77[BANK0 ] unsigned char 
  7314 ;;  i               1   76[BANK0 ] unsigned char 
  7315 ;;  i               1   75[BANK0 ] unsigned char 
  7316 ;;  i               1   74[BANK0 ] unsigned char 
  7317 ;;  month           4   86[BANK0 ] unsigned char [4]
  7318 ;;  i               1   72[BANK0 ] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;Total ram usage:       22 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:   11
  7335 ;; This function calls:
  7336 ;;		___awdiv
  7337 ;;		___awmod
  7338 ;;		_change_state_to_menu_12
  7339 ;;		_change_state_to_menu_22
  7340 ;;		_lcdInst
  7341 ;;		_printRTC
  7342 ;;		_printf
  7343 ;;		_strcpy
  7344 ;; This function is called by:
  7345 ;;		_main
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text23
  7350  0008CA                     __ptext23:
  7351                           	opt stack 0
  7352  0008CA                     _UI:
  7353                           	opt stack 19
  7354                           
  7355                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7356                           
  7357                           ;incstack = 0
  7358  0008CA  0E02               	movlw	2
  7359  0008CC  0100               	movlb	0	; () banked
  7360  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7361  0008D0  A4D8               	btfss	status,2,c
  7362  0008D2  D075               	goto	l8544
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7366  0008D4  0E01               	movlw	1
  7367  0008D6  EC6D  F029         	call	_lcdInst
  7368  0008DA  0E68               	movlw	104
  7369  0008DC  0100               	movlb	0	; () banked
  7370  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7371  0008E0  0EE4               	movlw	228
  7372  0008E2                     u8997:
  7373  0008E2  2EE8               	decfsz	wreg,f,c
  7374  0008E4  D7FE               	bra	u8997
  7375  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7376  0008E8  D7FC               	bra	u8997
  7377  0008EA  F000               	nop	
  7378                           
  7379                           ;UI.c: 79: lcdInst(0b10000000);;
  7380  0008EC  0E80               	movlw	128
  7381  0008EE  EC6D  F029         	call	_lcdInst
  7382                           
  7383                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7384  0008F2  0EA3               	movlw	low STR_1
  7385  0008F4  0100               	movlb	0	; () banked
  7386  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7387  0008F8  0EFB               	movlw	high STR_1
  7388  0008FA  0100               	movlb	0	; () banked
  7389  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7390  0008FE  0E01               	movlw	1
  7391  000900  0100               	movlb	0	; () banked
  7392  000902  25FD               	addwf	_sel& (0+255),w,b
  7393  000904  0100               	movlb	0	; () banked
  7394  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7395  000908  0100               	movlb	0	; () banked
  7396  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7397  00090C  0E00               	movlw	0
  7398  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7399  000910  EC08  F00B         	call	_printf	;wreg free
  7400                           
  7401                           ;UI.c: 81: lcdInst(0b11000000);;
  7402  000914  0EC0               	movlw	192
  7403  000916  EC6D  F029         	call	_lcdInst
  7404                           
  7405                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7406  00091A  0E0E               	movlw	14
  7407  00091C  0100               	movlb	0	; () banked
  7408  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7409  000920  0E10               	movlw	16
  7410  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7411  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7412  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7413  00092C  ECE0  F021         	call	___awmod	;wreg free
  7414  000930  C080  F0C6         	movff	?___awmod,_UI$2416
  7415  000934  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  7416                           
  7417                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7418  000938  0E27               	movlw	low STR_2
  7419  00093A  0100               	movlb	0	; () banked
  7420  00093C  6F8E               	movwf	printf@f& (0+255),b
  7421  00093E  0EFF               	movlw	high STR_2
  7422  000940  0100               	movlb	0	; () banked
  7423  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7424  000944  0E0E               	movlw	14
  7425  000946  0100               	movlb	0	; () banked
  7426  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7427  00094A  0E10               	movlw	16
  7428  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7429  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7430  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7431  000956  ECE0  F021         	call	___awmod	;wreg free
  7432  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7433  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7434  000962  0E00               	movlw	0
  7435  000964  0100               	movlb	0	; () banked
  7436  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7437  000968  0E3C               	movlw	60
  7438  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7439  00096C  EC78  F020         	call	___awdiv	;wreg free
  7440  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7441  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7442  000978  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  7443  00097C  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  7444  000980  0E00               	movlw	0
  7445  000982  0100               	movlb	0	; () banked
  7446  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7447  000986  0E3C               	movlw	60
  7448  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7449  00098A  ECE0  F021         	call	___awmod	;wreg free
  7450  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7451  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7452  000996  EC08  F00B         	call	_printf	;wreg free
  7453                           
  7454                           ;UI.c: 83: machine_state = UI_state;
  7455  00099A  0E00               	movlw	0
  7456  00099C  0100               	movlb	0	; () banked
  7457  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7458  0009A0                     l180:
  7459  0009A0  A281               	btfss	3969,1,c	;volatile
  7460  0009A2  D7FE               	goto	l180
  7461                           
  7462                           ;UI.c: 86: }
  7463                           ;UI.c: 87: if(cur_state==12){
  7464  0009A4  0E0C               	movlw	12
  7465  0009A6  0100               	movlb	0	; () banked
  7466  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7467  0009AA  0100               	movlb	0	; () banked
  7468  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7469  0009AE  A4D8               	btfss	status,2,c
  7470  0009B0  D003               	goto	l8542
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;UI.c: 88: change_state_to_menu_12();
  7474  0009B2  ECAC  F026         	call	_change_state_to_menu_12	;wreg free
  7475                           
  7476                           ;UI.c: 89: }
  7477  0009B6  D3D3               	goto	l8864
  7478  0009B8                     l8542:
  7479                           
  7480                           ;UI.c: 90: else{
  7481                           ;UI.c: 91: change_state_to_menu_22();
  7482  0009B8  EC90  F026         	call	_change_state_to_menu_22	;wreg free
  7483                           
  7484                           ;UI.c: 92: }
  7485                           ;UI.c: 93: }
  7486  0009BC  D3D0               	goto	l8864
  7487  0009BE                     l8544:
  7488                           
  7489                           ;UI.c: 94: else if(cur_state == 0){
  7490  0009BE  0100               	movlb	0	; () banked
  7491  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7492  0009C2  0100               	movlb	0	; () banked
  7493  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7494  0009C6  A4D8               	btfss	status,2,c
  7495  0009C8  D3CA               	goto	l8864
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7499  0009CA  0E00               	movlw	0
  7500  0009CC  0100               	movlb	0	; () banked
  7501  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7502  0009D0                     l8548:
  7503                           
  7504                           ; BSR set to: 0
  7505  0009D0  0E63               	movlw	99
  7506  0009D2  0100               	movlb	0	; () banked
  7507  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7508  0009D6  D001               	goto	l8552
  7509  0009D8  D00C               	goto	l8556
  7510  0009DA                     l8552:
  7511                           
  7512                           ; BSR set to: 0
  7513  0009DA  0E68               	movlw	104
  7514  0009DC  0100               	movlb	0	; () banked
  7515  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7516  0009E0  0EE4               	movlw	228
  7517  0009E2                     u9007:
  7518  0009E2  2EE8               	decfsz	wreg,f,c
  7519  0009E4  D7FE               	bra	u9007
  7520  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7521  0009E8  D7FC               	bra	u9007
  7522  0009EA  F000               	nop	
  7523  0009EC  0100               	movlb	0	; () banked
  7524  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7525  0009F0  D7EF               	goto	l8548
  7526  0009F2                     l8556:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;UI.c: 96: if(cur_state == 0){
  7530  0009F2  0100               	movlb	0	; () banked
  7531  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7532  0009F6  0100               	movlb	0	; () banked
  7533  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7534  0009FA  A4D8               	btfss	status,2,c
  7535  0009FC  D3B0               	goto	l8864
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;UI.c: 97: printRTC();
  7539  0009FE  EC1C  F012         	call	_printRTC	;wreg free
  7540                           
  7541                           ;UI.c: 98: }
  7542                           ;UI.c: 99: }
  7543                           ;UI.c: 100: while(logstate){
  7544  000A02  D3AD               	goto	l8864
  7545  000A04                     l8560:
  7546                           
  7547                           ;UI.c: 102: if(!log_completion){
  7548  000A04  5063               	movf	_log_completion,w,c
  7549  000A06  1064               	iorwf	_log_completion+1,w,c
  7550  000A08  A4D8               	btfss	status,2,c
  7551  000A0A  D041               	goto	l8590
  7552                           
  7553                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7554  000A0C  0E01               	movlw	1
  7555  000A0E  EC6D  F029         	call	_lcdInst
  7556  000A12  0E68               	movlw	104
  7557  000A14  0100               	movlb	0	; () banked
  7558  000A16  6FC4               	movwf	??_UI& (0+255),b
  7559  000A18  0EE4               	movlw	228
  7560  000A1A                     u9017:
  7561  000A1A  2EE8               	decfsz	wreg,f,c
  7562  000A1C  D7FE               	bra	u9017
  7563  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7564  000A20  D7FC               	bra	u9017
  7565  000A22  F000               	nop	
  7566                           
  7567                           ;UI.c: 104: lcdInst(0b10000000);;
  7568  000A24  0E80               	movlw	128
  7569  000A26  EC6D  F029         	call	_lcdInst
  7570                           
  7571                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7572  000A2A  0E91               	movlw	low STR_3
  7573  000A2C  0100               	movlb	0	; () banked
  7574  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7575  000A30  0EFB               	movlw	high STR_3
  7576  000A32  0100               	movlb	0	; () banked
  7577  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7578  000A36  C0F2  F090         	movff	_log,?_printf+2
  7579  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7580  000A3E  EC08  F00B         	call	_printf	;wreg free
  7581                           
  7582                           ;UI.c: 106: lcdInst(0b11000000);;
  7583  000A42  0EC0               	movlw	192
  7584  000A44  EC6D  F029         	call	_lcdInst
  7585                           
  7586                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7587  000A48  0E4A               	movlw	low STR_4
  7588  000A4A  0100               	movlb	0	; () banked
  7589  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7590  000A4E  0EFE               	movlw	high STR_4
  7591  000A50  0100               	movlb	0	; () banked
  7592  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7593  000A54  EC08  F00B         	call	_printf	;wreg free
  7594  000A58                     l8574:
  7595  000A58  0E00               	movlw	0
  7596  000A5A  0100               	movlb	0	; () banked
  7597  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7598  000A5E                     l8576:
  7599                           
  7600                           ; BSR set to: 0
  7601  000A5E  0E63               	movlw	99
  7602  000A60  0100               	movlb	0	; () banked
  7603  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7604  000A64  D001               	goto	l8580
  7605  000A66  D00C               	goto	l8584
  7606  000A68                     l8580:
  7607                           
  7608                           ; BSR set to: 0
  7609  000A68  0E68               	movlw	104
  7610  000A6A  0100               	movlb	0	; () banked
  7611  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7612  000A6E  0EE4               	movlw	228
  7613  000A70                     u9027:
  7614  000A70  2EE8               	decfsz	wreg,f,c
  7615  000A72  D7FE               	bra	u9027
  7616  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7617  000A76  D7FC               	bra	u9027
  7618  000A78  F000               	nop	
  7619  000A7A  0100               	movlb	0	; () banked
  7620  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7621  000A7E  D7EF               	goto	l8576
  7622  000A80                     l8584:
  7623                           
  7624                           ; BSR set to: 0
  7625  000A80  0100               	movlb	0	; () banked
  7626  000A82  51F6               	movf	_logstate& (0+255),w,b
  7627  000A84  0100               	movlb	0	; () banked
  7628  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7629  000A88  B4D8               	btfsc	status,2,c
  7630  000A8A  0012               	return	
  7631  000A8C  D7E5               	goto	l8574
  7632  000A8E                     l8590:
  7633                           
  7634                           ;UI.c: 111: else{
  7635                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7636  000A8E  0E01               	movlw	1
  7637  000A90  EC6D  F029         	call	_lcdInst
  7638  000A94  0E68               	movlw	104
  7639  000A96  0100               	movlb	0	; () banked
  7640  000A98  6FC4               	movwf	??_UI& (0+255),b
  7641  000A9A  0EE4               	movlw	228
  7642  000A9C                     u9037:
  7643  000A9C  2EE8               	decfsz	wreg,f,c
  7644  000A9E  D7FE               	bra	u9037
  7645  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7646  000AA2  D7FC               	bra	u9037
  7647  000AA4  F000               	nop	
  7648                           
  7649                           ;UI.c: 113: lcdInst(0b10000000);;
  7650  000AA6  0E80               	movlw	128
  7651  000AA8  EC6D  F029         	call	_lcdInst
  7652                           
  7653                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7654  000AAC  0E91               	movlw	low STR_3
  7655  000AAE  0100               	movlb	0	; () banked
  7656  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7657  000AB2  0EFB               	movlw	high STR_3
  7658  000AB4  0100               	movlb	0	; () banked
  7659  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7660  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7661  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7662  000AC0  EC08  F00B         	call	_printf	;wreg free
  7663                           
  7664                           ;UI.c: 115: lcdInst(0b11000000);;
  7665  000AC4  0EC0               	movlw	192
  7666  000AC6  EC6D  F029         	call	_lcdInst
  7667                           
  7668                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7669  000ACA  0EE6               	movlw	low STR_6
  7670  000ACC  0100               	movlb	0	; () banked
  7671  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7672  000AD0  0EFD               	movlw	high STR_6
  7673  000AD2  0100               	movlb	0	; () banked
  7674  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7675  000AD6  EC08  F00B         	call	_printf	;wreg free
  7676                           
  7677                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7678  000ADA  0E00               	movlw	0
  7679  000ADC  0100               	movlb	0	; () banked
  7680  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7681  000AE0                     l8604:
  7682                           
  7683                           ; BSR set to: 0
  7684  000AE0  0E63               	movlw	99
  7685  000AE2  0100               	movlb	0	; () banked
  7686  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7687  000AE6  D001               	goto	l8608
  7688  000AE8  D00C               	goto	l8612
  7689  000AEA                     l8608:
  7690                           
  7691                           ; BSR set to: 0
  7692  000AEA  0E68               	movlw	104
  7693  000AEC  0100               	movlb	0	; () banked
  7694  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7695  000AF0  0EE4               	movlw	228
  7696  000AF2                     u9047:
  7697  000AF2  2EE8               	decfsz	wreg,f,c
  7698  000AF4  D7FE               	bra	u9047
  7699  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7700  000AF8  D7FC               	bra	u9047
  7701  000AFA  F000               	nop	
  7702  000AFC  0100               	movlb	0	; () banked
  7703  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7704  000B00  D7EF               	goto	l8604
  7705  000B02                     l8612:
  7706                           
  7707                           ; BSR set to: 0
  7708  000B02  0100               	movlb	0	; () banked
  7709  000B04  51F6               	movf	_logstate& (0+255),w,b
  7710  000B06  0100               	movlb	0	; () banked
  7711  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7712  000B0A  B4D8               	btfsc	status,2,c
  7713  000B0C  0012               	return	
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7717                           
  7718                           ; BSR set to: 0
  7719                           
  7720                           ; BSR set to: 0
  7721  000B0E  0E00               	movlw	0
  7722  000B10  0100               	movlb	0	; () banked
  7723  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7724  000B14                     l8618:
  7725                           
  7726                           ; BSR set to: 0
  7727  000B14  0E63               	movlw	99
  7728  000B16  0100               	movlb	0	; () banked
  7729  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7730  000B1A  D001               	goto	l8622
  7731  000B1C  D00C               	goto	l8626
  7732  000B1E                     l8622:
  7733                           
  7734                           ; BSR set to: 0
  7735  000B1E  0E68               	movlw	104
  7736  000B20  0100               	movlb	0	; () banked
  7737  000B22  6FC4               	movwf	??_UI& (0+255),b
  7738  000B24  0EE4               	movlw	228
  7739  000B26                     u9057:
  7740  000B26  2EE8               	decfsz	wreg,f,c
  7741  000B28  D7FE               	bra	u9057
  7742  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7743  000B2C  D7FC               	bra	u9057
  7744  000B2E  F000               	nop	
  7745  000B30  0100               	movlb	0	; () banked
  7746  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7747  000B34  D7EF               	goto	l8618
  7748  000B36                     l8626:
  7749                           
  7750                           ; BSR set to: 0
  7751  000B36  0100               	movlb	0	; () banked
  7752  000B38  51F6               	movf	_logstate& (0+255),w,b
  7753  000B3A  0100               	movlb	0	; () banked
  7754  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7755  000B3E  B4D8               	btfsc	status,2,c
  7756  000B40  0012               	return	
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7760                           
  7761                           ; BSR set to: 0
  7762                           
  7763                           ; BSR set to: 0
  7764  000B42  0E01               	movlw	1
  7765  000B44  EC6D  F029         	call	_lcdInst
  7766  000B48  0E68               	movlw	104
  7767  000B4A  0100               	movlb	0	; () banked
  7768  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7769  000B4E  0EE4               	movlw	228
  7770  000B50                     u9067:
  7771  000B50  2EE8               	decfsz	wreg,f,c
  7772  000B52  D7FE               	bra	u9067
  7773  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7774  000B56  D7FC               	bra	u9067
  7775  000B58  F000               	nop	
  7776                           
  7777                           ;UI.c: 122: lcdInst(0b10000000);;
  7778  000B5A  0E80               	movlw	128
  7779  000B5C  EC6D  F029         	call	_lcdInst
  7780                           
  7781                           ;UI.c: 123: printf("START:");
  7782  000B60  0EC4               	movlw	low STR_7
  7783  000B62  0100               	movlb	0	; () banked
  7784  000B64  6F8E               	movwf	printf@f& (0+255),b
  7785  000B66  0EFF               	movlw	high STR_7
  7786  000B68  0100               	movlb	0	; () banked
  7787  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7788  000B6C  EC08  F00B         	call	_printf	;wreg free
  7789                           
  7790                           ;UI.c: 124: lcdInst(0b11000000);;
  7791  000B70  0EC0               	movlw	192
  7792  000B72  EC6D  F029         	call	_lcdInst
  7793                           
  7794                           ;UI.c: 125: char month[] = "MMM";
  7795  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7796  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7797  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7798  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7799                           
  7800                           ;UI.c: 126: switch(log_startTime[5]){
  7801  000B86  D0C3               	goto	l8670
  7802  000B88                     l8642:
  7803                           
  7804                           ;UI.c: 128: strcpy(month, "JAN");
  7805  000B88  0ED6               	movlw	low UI@month
  7806  000B8A  0100               	movlb	0	; () banked
  7807  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7808  000B8E  0E00               	movlw	high UI@month
  7809  000B90  0100               	movlb	0	; () banked
  7810  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7811  000B94  0EDB               	movlw	low STR_8
  7812  000B96  0100               	movlb	0	; () banked
  7813  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7814  000B9A  0EFF               	movlw	high STR_8
  7815  000B9C  0100               	movlb	0	; () banked
  7816  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7817  000BA0  ECC8  F026         	call	_strcpy	;wreg free
  7818                           
  7819                           ;UI.c: 129: break;
  7820  000BA4  D0E6               	goto	l8672
  7821  000BA6                     l8644:
  7822                           
  7823                           ;UI.c: 131: strcpy(month, "FEB");
  7824  000BA6  0ED6               	movlw	low UI@month
  7825  000BA8  0100               	movlb	0	; () banked
  7826  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7827  000BAC  0E00               	movlw	high UI@month
  7828  000BAE  0100               	movlb	0	; () banked
  7829  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7830  000BB2  0ECB               	movlw	low STR_9
  7831  000BB4  0100               	movlb	0	; () banked
  7832  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7833  000BB8  0EFF               	movlw	high STR_9
  7834  000BBA  0100               	movlb	0	; () banked
  7835  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7836  000BBE  ECC8  F026         	call	_strcpy	;wreg free
  7837                           
  7838                           ;UI.c: 132: break;
  7839  000BC2  D0D7               	goto	l8672
  7840  000BC4                     l8646:
  7841                           
  7842                           ;UI.c: 134: strcpy(month, "MAR");
  7843  000BC4  0ED6               	movlw	low UI@month
  7844  000BC6  0100               	movlb	0	; () banked
  7845  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7846  000BCA  0E00               	movlw	high UI@month
  7847  000BCC  0100               	movlb	0	; () banked
  7848  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7849  000BD0  0EE7               	movlw	low STR_10
  7850  000BD2  0100               	movlb	0	; () banked
  7851  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7852  000BD6  0EFF               	movlw	high STR_10
  7853  000BD8  0100               	movlb	0	; () banked
  7854  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7855  000BDC  ECC8  F026         	call	_strcpy	;wreg free
  7856                           
  7857                           ;UI.c: 135: break;
  7858  000BE0  D0C8               	goto	l8672
  7859  000BE2                     l8648:
  7860                           
  7861                           ;UI.c: 137: strcpy(month, "APR");
  7862  000BE2  0ED6               	movlw	low UI@month
  7863  000BE4  0100               	movlb	0	; () banked
  7864  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7865  000BE8  0E00               	movlw	high UI@month
  7866  000BEA  0100               	movlb	0	; () banked
  7867  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7868  000BEE  0EEB               	movlw	low STR_11
  7869  000BF0  0100               	movlb	0	; () banked
  7870  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7871  000BF4  0EFF               	movlw	high STR_11
  7872  000BF6  0100               	movlb	0	; () banked
  7873  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7874  000BFA  ECC8  F026         	call	_strcpy	;wreg free
  7875                           
  7876                           ;UI.c: 138: break;
  7877  000BFE  D0B9               	goto	l8672
  7878  000C00                     l8650:
  7879                           
  7880                           ;UI.c: 140: strcpy(month, "MAY");
  7881  000C00  0ED6               	movlw	low UI@month
  7882  000C02  0100               	movlb	0	; () banked
  7883  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7884  000C06  0E00               	movlw	high UI@month
  7885  000C08  0100               	movlb	0	; () banked
  7886  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7887  000C0C  0EFB               	movlw	low STR_12
  7888  000C0E  0100               	movlb	0	; () banked
  7889  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7890  000C12  0EFF               	movlw	high STR_12
  7891  000C14  0100               	movlb	0	; () banked
  7892  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7893  000C18  ECC8  F026         	call	_strcpy	;wreg free
  7894                           
  7895                           ;UI.c: 141: break;
  7896  000C1C  D0AA               	goto	l8672
  7897  000C1E                     l8652:
  7898                           
  7899                           ;UI.c: 143: strcpy(month, "JUN");
  7900  000C1E  0ED6               	movlw	low UI@month
  7901  000C20  0100               	movlb	0	; () banked
  7902  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7903  000C24  0E00               	movlw	high UI@month
  7904  000C26  0100               	movlb	0	; () banked
  7905  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7906  000C2A  0EDF               	movlw	low STR_13
  7907  000C2C  0100               	movlb	0	; () banked
  7908  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7909  000C30  0EFF               	movlw	high STR_13
  7910  000C32  0100               	movlb	0	; () banked
  7911  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7912  000C36  ECC8  F026         	call	_strcpy	;wreg free
  7913                           
  7914                           ;UI.c: 144: break;
  7915  000C3A  D09B               	goto	l8672
  7916  000C3C                     l8654:
  7917                           
  7918                           ;UI.c: 146: strcpy(month, "JUL");
  7919  000C3C  0ED6               	movlw	low UI@month
  7920  000C3E  0100               	movlb	0	; () banked
  7921  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7922  000C42  0E00               	movlw	high UI@month
  7923  000C44  0100               	movlb	0	; () banked
  7924  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7925  000C48  0ED7               	movlw	low STR_14
  7926  000C4A  0100               	movlb	0	; () banked
  7927  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7928  000C4E  0EFF               	movlw	high STR_14
  7929  000C50  0100               	movlb	0	; () banked
  7930  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7931  000C54  ECC8  F026         	call	_strcpy	;wreg free
  7932                           
  7933                           ;UI.c: 147: break;
  7934  000C58  D08C               	goto	l8672
  7935  000C5A                     l8656:
  7936                           
  7937                           ;UI.c: 149: strcpy(month, "AUG");
  7938  000C5A  0ED6               	movlw	low UI@month
  7939  000C5C  0100               	movlb	0	; () banked
  7940  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7941  000C60  0E00               	movlw	high UI@month
  7942  000C62  0100               	movlb	0	; () banked
  7943  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7944  000C66  0ED3               	movlw	low STR_15
  7945  000C68  0100               	movlb	0	; () banked
  7946  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7947  000C6C  0EFF               	movlw	high STR_15
  7948  000C6E  0100               	movlb	0	; () banked
  7949  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7950  000C72  ECC8  F026         	call	_strcpy	;wreg free
  7951                           
  7952                           ;UI.c: 150: break;
  7953  000C76  D07D               	goto	l8672
  7954  000C78                     l8658:
  7955                           
  7956                           ;UI.c: 152: strcpy(month, "SEP");
  7957  000C78  0ED6               	movlw	low UI@month
  7958  000C7A  0100               	movlb	0	; () banked
  7959  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7960  000C7E  0E00               	movlw	high UI@month
  7961  000C80  0100               	movlb	0	; () banked
  7962  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7963  000C84  0EE3               	movlw	low STR_16
  7964  000C86  0100               	movlb	0	; () banked
  7965  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7966  000C8A  0EFF               	movlw	high STR_16
  7967  000C8C  0100               	movlb	0	; () banked
  7968  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7969  000C90  ECC8  F026         	call	_strcpy	;wreg free
  7970                           
  7971                           ;UI.c: 153: break;
  7972  000C94  D06E               	goto	l8672
  7973  000C96                     l8660:
  7974                           
  7975                           ;UI.c: 155: strcpy(month, "OCT");
  7976  000C96  0ED6               	movlw	low UI@month
  7977  000C98  0100               	movlb	0	; () banked
  7978  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  7979  000C9C  0E00               	movlw	high UI@month
  7980  000C9E  0100               	movlb	0	; () banked
  7981  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7982  000CA2  0EF3               	movlw	low STR_17
  7983  000CA4  0100               	movlb	0	; () banked
  7984  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  7985  000CA8  0EFF               	movlw	high STR_17
  7986  000CAA  0100               	movlb	0	; () banked
  7987  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7988  000CAE  ECC8  F026         	call	_strcpy	;wreg free
  7989                           
  7990                           ;UI.c: 156: break;
  7991  000CB2  D05F               	goto	l8672
  7992  000CB4                     l8662:
  7993                           
  7994                           ;UI.c: 158: strcpy(month, "NOV");
  7995  000CB4  0ED6               	movlw	low UI@month
  7996  000CB6  0100               	movlb	0	; () banked
  7997  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  7998  000CBA  0E00               	movlw	high UI@month
  7999  000CBC  0100               	movlb	0	; () banked
  8000  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8001  000CC0  0EF7               	movlw	low STR_18
  8002  000CC2  0100               	movlb	0	; () banked
  8003  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  8004  000CC6  0EFF               	movlw	high STR_18
  8005  000CC8  0100               	movlb	0	; () banked
  8006  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8007  000CCC  ECC8  F026         	call	_strcpy	;wreg free
  8008                           
  8009                           ;UI.c: 159: break;
  8010  000CD0  D050               	goto	l8672
  8011  000CD2                     l8664:
  8012                           
  8013                           ;UI.c: 161: strcpy(month, "DEC");
  8014  000CD2  0ED6               	movlw	low UI@month
  8015  000CD4  0100               	movlb	0	; () banked
  8016  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  8017  000CD8  0E00               	movlw	high UI@month
  8018  000CDA  0100               	movlb	0	; () banked
  8019  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8020  000CDE  0ECF               	movlw	low STR_19
  8021  000CE0  0100               	movlb	0	; () banked
  8022  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  8023  000CE4  0EFF               	movlw	high STR_19
  8024  000CE6  0100               	movlb	0	; () banked
  8025  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8026  000CEA  ECC8  F026         	call	_strcpy	;wreg free
  8027                           
  8028                           ;UI.c: 162: break;
  8029  000CEE  D041               	goto	l8672
  8030  000CF0                     l8666:
  8031                           
  8032                           ;UI.c: 164: strcpy(month, "ERR");
  8033  000CF0  0ED6               	movlw	low UI@month
  8034  000CF2  0100               	movlb	0	; () banked
  8035  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  8036  000CF6  0E00               	movlw	high UI@month
  8037  000CF8  0100               	movlb	0	; () banked
  8038  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8039  000CFC  0EEF               	movlw	low STR_20
  8040  000CFE  0100               	movlb	0	; () banked
  8041  000D00  6F82               	movwf	strcpy@from& (0+255),b
  8042  000D02  0EFF               	movlw	high STR_20
  8043  000D04  0100               	movlb	0	; () banked
  8044  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8045  000D08  ECC8  F026         	call	_strcpy	;wreg free
  8046                           
  8047                           ;UI.c: 166: }
  8048                           
  8049                           ;UI.c: 165: break;
  8050  000D0C  D032               	goto	l8672
  8051  000D0E                     l8670:
  8052  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  8053  000D12  CFDE F0C4          	movff	postinc2,??_UI
  8054  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  8055                           
  8056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8057                           ; Switch size 1, requested type "space"
  8058                           ; Number of cases is 1, Range of values is 0 to 0
  8059                           ; switch strategies available:
  8060                           ; Name         Instructions Cycles
  8061                           ; simple_byte            4     3 (average)
  8062                           ;	Chosen strategy is simple_byte
  8063  000D1A  0100               	movlb	0	; () banked
  8064  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  8065  000D1E  0A00               	xorlw	0	; case 0
  8066  000D20  A4D8               	btfss	status,2,c
  8067  000D22  D7E6               	goto	l8666
  8068                           
  8069                           ; BSR set to: 0
  8070                           ; Switch size 1, requested type "space"
  8071                           ; Number of cases is 12, Range of values is 1 to 12
  8072                           ; switch strategies available:
  8073                           ; Name         Instructions Cycles
  8074                           ; simple_byte           37    19 (average)
  8075                           ;	Chosen strategy is simple_byte
  8076  000D24  0100               	movlb	0	; () banked
  8077  000D26  51C4               	movf	??_UI& (0+255),w,b
  8078  000D28  0A01               	xorlw	1	; case 1
  8079  000D2A  B4D8               	btfsc	status,2,c
  8080  000D2C  D72D               	goto	l8642
  8081  000D2E  0A03               	xorlw	3	; case 2
  8082  000D30  B4D8               	btfsc	status,2,c
  8083  000D32  D739               	goto	l8644
  8084  000D34  0A01               	xorlw	1	; case 3
  8085  000D36  B4D8               	btfsc	status,2,c
  8086  000D38  D745               	goto	l8646
  8087  000D3A  0A07               	xorlw	7	; case 4
  8088  000D3C  B4D8               	btfsc	status,2,c
  8089  000D3E  D751               	goto	l8648
  8090  000D40  0A01               	xorlw	1	; case 5
  8091  000D42  B4D8               	btfsc	status,2,c
  8092  000D44  D75D               	goto	l8650
  8093  000D46  0A03               	xorlw	3	; case 6
  8094  000D48  B4D8               	btfsc	status,2,c
  8095  000D4A  D769               	goto	l8652
  8096  000D4C  0A01               	xorlw	1	; case 7
  8097  000D4E  B4D8               	btfsc	status,2,c
  8098  000D50  D775               	goto	l8654
  8099  000D52  0A0F               	xorlw	15	; case 8
  8100  000D54  B4D8               	btfsc	status,2,c
  8101  000D56  D781               	goto	l8656
  8102  000D58  0A01               	xorlw	1	; case 9
  8103  000D5A  B4D8               	btfsc	status,2,c
  8104  000D5C  D78D               	goto	l8658
  8105  000D5E  0A03               	xorlw	3	; case 10
  8106  000D60  B4D8               	btfsc	status,2,c
  8107  000D62  D799               	goto	l8660
  8108  000D64  0A01               	xorlw	1	; case 11
  8109  000D66  B4D8               	btfsc	status,2,c
  8110  000D68  D7A5               	goto	l8662
  8111  000D6A  0A07               	xorlw	7	; case 12
  8112  000D6C  B4D8               	btfsc	status,2,c
  8113  000D6E  D7B1               	goto	l8664
  8114  000D70  D7BF               	goto	l8666
  8115  000D72                     l8672:
  8116                           
  8117                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8118  000D72  0E0A               	movlw	low STR_21
  8119  000D74  0100               	movlb	0	; () banked
  8120  000D76  6F8E               	movwf	printf@f& (0+255),b
  8121  000D78  0EFB               	movlw	high STR_21
  8122  000D7A  0100               	movlb	0	; () banked
  8123  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8124  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8125  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8126  000D86  0ED6               	movlw	low UI@month
  8127  000D88  0100               	movlb	0	; () banked
  8128  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8129  000D8C  0E00               	movlw	high UI@month
  8130  000D8E  0100               	movlb	0	; () banked
  8131  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8132  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8133  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8134  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8135  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8136  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8137  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8138  000DAA  EC08  F00B         	call	_printf	;wreg free
  8139                           
  8140                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8141  000DAE  0E00               	movlw	0
  8142  000DB0  0100               	movlb	0	; () banked
  8143  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8144  000DB4                     l8676:
  8145                           
  8146                           ; BSR set to: 0
  8147  000DB4  0E63               	movlw	99
  8148  000DB6  0100               	movlb	0	; () banked
  8149  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8150  000DBA  D001               	goto	l8680
  8151  000DBC  D00C               	goto	l8684
  8152  000DBE                     l8680:
  8153                           
  8154                           ; BSR set to: 0
  8155  000DBE  0E68               	movlw	104
  8156  000DC0  0100               	movlb	0	; () banked
  8157  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8158  000DC4  0EE4               	movlw	228
  8159  000DC6                     u9077:
  8160  000DC6  2EE8               	decfsz	wreg,f,c
  8161  000DC8  D7FE               	bra	u9077
  8162  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8163  000DCC  D7FC               	bra	u9077
  8164  000DCE  F000               	nop	
  8165  000DD0  0100               	movlb	0	; () banked
  8166  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8167  000DD4  D7EF               	goto	l8676
  8168  000DD6                     l8684:
  8169                           
  8170                           ; BSR set to: 0
  8171  000DD6  0100               	movlb	0	; () banked
  8172  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8173  000DDA  0100               	movlb	0	; () banked
  8174  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8175  000DDE  B4D8               	btfsc	status,2,c
  8176  000DE0  0012               	return	
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8180                           
  8181                           ; BSR set to: 0
  8182                           
  8183                           ; BSR set to: 0
  8184  000DE2  0E00               	movlw	0
  8185  000DE4  0100               	movlb	0	; () banked
  8186  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8187  000DE8                     l8690:
  8188                           
  8189                           ; BSR set to: 0
  8190  000DE8  0E63               	movlw	99
  8191  000DEA  0100               	movlb	0	; () banked
  8192  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8193  000DEE  D001               	goto	l8694
  8194  000DF0  D00C               	goto	l8698
  8195  000DF2                     l8694:
  8196                           
  8197                           ; BSR set to: 0
  8198  000DF2  0E68               	movlw	104
  8199  000DF4  0100               	movlb	0	; () banked
  8200  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8201  000DF8  0EE4               	movlw	228
  8202  000DFA                     u9087:
  8203  000DFA  2EE8               	decfsz	wreg,f,c
  8204  000DFC  D7FE               	bra	u9087
  8205  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8206  000E00  D7FC               	bra	u9087
  8207  000E02  F000               	nop	
  8208  000E04  0100               	movlb	0	; () banked
  8209  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8210  000E08  D7EF               	goto	l8690
  8211  000E0A                     l8698:
  8212                           
  8213                           ; BSR set to: 0
  8214  000E0A  0100               	movlb	0	; () banked
  8215  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8216  000E0E  0100               	movlb	0	; () banked
  8217  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8218  000E12  B4D8               	btfsc	status,2,c
  8219  000E14  0012               	return	
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8223                           
  8224                           ; BSR set to: 0
  8225                           
  8226                           ; BSR set to: 0
  8227  000E16  0E01               	movlw	1
  8228  000E18  EC6D  F029         	call	_lcdInst
  8229  000E1C  0E68               	movlw	104
  8230  000E1E  0100               	movlb	0	; () banked
  8231  000E20  6FC4               	movwf	??_UI& (0+255),b
  8232  000E22  0EE4               	movlw	228
  8233  000E24                     u9097:
  8234  000E24  2EE8               	decfsz	wreg,f,c
  8235  000E26  D7FE               	bra	u9097
  8236  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8237  000E2A  D7FC               	bra	u9097
  8238  000E2C  F000               	nop	
  8239                           
  8240                           ;UI.c: 173: lcdInst(0b10000000);;
  8241  000E2E  0E80               	movlw	128
  8242  000E30  EC6D  F029         	call	_lcdInst
  8243                           
  8244                           ;UI.c: 174: printf("DURATION:");
  8245  000E34  0E9B               	movlw	low STR_22
  8246  000E36  0100               	movlb	0	; () banked
  8247  000E38  6F8E               	movwf	printf@f& (0+255),b
  8248  000E3A  0EFF               	movlw	high STR_22
  8249  000E3C  0100               	movlb	0	; () banked
  8250  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8251  000E40  EC08  F00B         	call	_printf	;wreg free
  8252                           
  8253                           ;UI.c: 175: lcdInst(0b11000000);;
  8254  000E44  0EC0               	movlw	192
  8255  000E46  EC6D  F029         	call	_lcdInst
  8256                           
  8257                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8258  000E4A  0E0E               	movlw	14
  8259  000E4C  0100               	movlb	0	; () banked
  8260  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8261  000E50  0E10               	movlw	16
  8262  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8263  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8264  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8265  000E5C  ECE0  F021         	call	___awmod	;wreg free
  8266  000E60  C080  F0C6         	movff	?___awmod,_UI$2416
  8267  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  8268                           
  8269                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8270  000E68  0E19               	movlw	low STR_23
  8271  000E6A  0100               	movlb	0	; () banked
  8272  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8273  000E6E  0EFF               	movlw	high STR_23
  8274  000E70  0100               	movlb	0	; () banked
  8275  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8276  000E74  0E0E               	movlw	14
  8277  000E76  0100               	movlb	0	; () banked
  8278  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8279  000E7A  0E10               	movlw	16
  8280  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8281  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8282  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8283  000E86  ECE0  F021         	call	___awmod	;wreg free
  8284  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8285  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8286  000E92  0E00               	movlw	0
  8287  000E94  0100               	movlb	0	; () banked
  8288  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8289  000E98  0E3C               	movlw	60
  8290  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8291  000E9C  EC78  F020         	call	___awdiv	;wreg free
  8292  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8293  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8294  000EA8  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  8295  000EAC  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  8296  000EB0  0E00               	movlw	0
  8297  000EB2  0100               	movlb	0	; () banked
  8298  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8299  000EB6  0E3C               	movlw	60
  8300  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8301  000EBA  ECE0  F021         	call	___awmod	;wreg free
  8302  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8303  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8304  000EC6  EC08  F00B         	call	_printf	;wreg free
  8305                           
  8306                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8307  000ECA  0E00               	movlw	0
  8308  000ECC  0100               	movlb	0	; () banked
  8309  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8310  000ED0                     l8718:
  8311                           
  8312                           ; BSR set to: 0
  8313  000ED0  0E63               	movlw	99
  8314  000ED2  0100               	movlb	0	; () banked
  8315  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8316  000ED6  D001               	goto	l8722
  8317  000ED8  D00C               	goto	l8726
  8318  000EDA                     l8722:
  8319                           
  8320                           ; BSR set to: 0
  8321  000EDA  0E68               	movlw	104
  8322  000EDC  0100               	movlb	0	; () banked
  8323  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8324  000EE0  0EE4               	movlw	228
  8325  000EE2                     u9107:
  8326  000EE2  2EE8               	decfsz	wreg,f,c
  8327  000EE4  D7FE               	bra	u9107
  8328  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8329  000EE8  D7FC               	bra	u9107
  8330  000EEA  F000               	nop	
  8331  000EEC  0100               	movlb	0	; () banked
  8332  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8333  000EF0  D7EF               	goto	l8718
  8334  000EF2                     l8726:
  8335                           
  8336                           ; BSR set to: 0
  8337  000EF2  0100               	movlb	0	; () banked
  8338  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8339  000EF6  0100               	movlb	0	; () banked
  8340  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8341  000EFA  B4D8               	btfsc	status,2,c
  8342  000EFC  0012               	return	
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8346                           
  8347                           ; BSR set to: 0
  8348                           
  8349                           ; BSR set to: 0
  8350  000EFE  0E00               	movlw	0
  8351  000F00  0100               	movlb	0	; () banked
  8352  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8353  000F04                     l8732:
  8354                           
  8355                           ; BSR set to: 0
  8356  000F04  0E63               	movlw	99
  8357  000F06  0100               	movlb	0	; () banked
  8358  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8359  000F0A  D001               	goto	l8736
  8360  000F0C  D00C               	goto	l8740
  8361  000F0E                     l8736:
  8362                           
  8363                           ; BSR set to: 0
  8364  000F0E  0E68               	movlw	104
  8365  000F10  0100               	movlb	0	; () banked
  8366  000F12  6FC4               	movwf	??_UI& (0+255),b
  8367  000F14  0EE4               	movlw	228
  8368  000F16                     u9117:
  8369  000F16  2EE8               	decfsz	wreg,f,c
  8370  000F18  D7FE               	bra	u9117
  8371  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8372  000F1C  D7FC               	bra	u9117
  8373  000F1E  F000               	nop	
  8374  000F20  0100               	movlb	0	; () banked
  8375  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8376  000F24  D7EF               	goto	l8732
  8377  000F26                     l8740:
  8378                           
  8379                           ; BSR set to: 0
  8380  000F26  0100               	movlb	0	; () banked
  8381  000F28  51F6               	movf	_logstate& (0+255),w,b
  8382  000F2A  0100               	movlb	0	; () banked
  8383  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8384  000F2E  B4D8               	btfsc	status,2,c
  8385  000F30  0012               	return	
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8389                           
  8390                           ; BSR set to: 0
  8391                           
  8392                           ; BSR set to: 0
  8393  000F32  0E01               	movlw	1
  8394  000F34  EC6D  F029         	call	_lcdInst
  8395  000F38  0E68               	movlw	104
  8396  000F3A  0100               	movlb	0	; () banked
  8397  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8398  000F3E  0EE4               	movlw	228
  8399  000F40                     u9127:
  8400  000F40  2EE8               	decfsz	wreg,f,c
  8401  000F42  D7FE               	bra	u9127
  8402  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8403  000F46  D7FC               	bra	u9127
  8404  000F48  F000               	nop	
  8405                           
  8406                           ;UI.c: 182: lcdInst(0b10000000);;
  8407  000F4A  0E80               	movlw	128
  8408  000F4C  EC6D  F029         	call	_lcdInst
  8409                           
  8410                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8411  000F50  0E3C               	movlw	low STR_24
  8412  000F52  0100               	movlb	0	; () banked
  8413  000F54  6F8E               	movwf	printf@f& (0+255),b
  8414  000F56  0EFD               	movlw	high STR_24
  8415  000F58  0100               	movlb	0	; () banked
  8416  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8417  000F5C  EC08  F00B         	call	_printf	;wreg free
  8418                           
  8419                           ;UI.c: 184: lcdInst(0b11000000);;
  8420  000F60  0EC0               	movlw	192
  8421  000F62  EC6D  F029         	call	_lcdInst
  8422                           
  8423                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8424  000F66  0E19               	movlw	low STR_25
  8425  000F68  0100               	movlb	0	; () banked
  8426  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8427  000F6C  0EFE               	movlw	high STR_25
  8428  000F6E  0100               	movlb	0	; () banked
  8429  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8430  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8431  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8432  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8433  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8434  000F82  EC08  F00B         	call	_printf	;wreg free
  8435                           
  8436                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8437  000F86  0E00               	movlw	0
  8438  000F88  0100               	movlb	0	; () banked
  8439  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8440  000F8C                     l8758:
  8441                           
  8442                           ; BSR set to: 0
  8443  000F8C  0E63               	movlw	99
  8444  000F8E  0100               	movlb	0	; () banked
  8445  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8446  000F92  D001               	goto	l8762
  8447  000F94  D00C               	goto	l8766
  8448  000F96                     l8762:
  8449                           
  8450                           ; BSR set to: 0
  8451  000F96  0E68               	movlw	104
  8452  000F98  0100               	movlb	0	; () banked
  8453  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8454  000F9C  0EE4               	movlw	228
  8455  000F9E                     u9137:
  8456  000F9E  2EE8               	decfsz	wreg,f,c
  8457  000FA0  D7FE               	bra	u9137
  8458  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8459  000FA4  D7FC               	bra	u9137
  8460  000FA6  F000               	nop	
  8461  000FA8  0100               	movlb	0	; () banked
  8462  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8463  000FAC  D7EF               	goto	l8758
  8464  000FAE                     l8766:
  8465                           
  8466                           ; BSR set to: 0
  8467  000FAE  0100               	movlb	0	; () banked
  8468  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8469  000FB2  0100               	movlb	0	; () banked
  8470  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8471  000FB6  B4D8               	btfsc	status,2,c
  8472  000FB8  0012               	return	
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8476                           
  8477                           ; BSR set to: 0
  8478                           
  8479                           ; BSR set to: 0
  8480  000FBA  0E00               	movlw	0
  8481  000FBC  0100               	movlb	0	; () banked
  8482  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8483  000FC0                     l8772:
  8484                           
  8485                           ; BSR set to: 0
  8486  000FC0  0E63               	movlw	99
  8487  000FC2  0100               	movlb	0	; () banked
  8488  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8489  000FC6  D001               	goto	l8776
  8490  000FC8  D00C               	goto	l8780
  8491  000FCA                     l8776:
  8492                           
  8493                           ; BSR set to: 0
  8494  000FCA  0E68               	movlw	104
  8495  000FCC  0100               	movlb	0	; () banked
  8496  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8497  000FD0  0EE4               	movlw	228
  8498  000FD2                     u9147:
  8499  000FD2  2EE8               	decfsz	wreg,f,c
  8500  000FD4  D7FE               	bra	u9147
  8501  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8502  000FD8  D7FC               	bra	u9147
  8503  000FDA  F000               	nop	
  8504  000FDC  0100               	movlb	0	; () banked
  8505  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8506  000FE0  D7EF               	goto	l8772
  8507  000FE2                     l8780:
  8508                           
  8509                           ; BSR set to: 0
  8510  000FE2  0100               	movlb	0	; () banked
  8511  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8512  000FE6  0100               	movlb	0	; () banked
  8513  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8514  000FEA  B4D8               	btfsc	status,2,c
  8515  000FEC  0012               	return	
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8519                           
  8520                           ; BSR set to: 0
  8521                           
  8522                           ; BSR set to: 0
  8523  000FEE  0E01               	movlw	1
  8524  000FF0  EC6D  F029         	call	_lcdInst
  8525  000FF4  0E68               	movlw	104
  8526  000FF6  0100               	movlb	0	; () banked
  8527  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8528  000FFA  0EE4               	movlw	228
  8529  000FFC                     u9157:
  8530  000FFC  2EE8               	decfsz	wreg,f,c
  8531  000FFE  D7FE               	bra	u9157
  8532  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8533  001002  D7FC               	bra	u9157
  8534  001004  F000               	nop	
  8535                           
  8536                           ;UI.c: 191: lcdInst(0b10000000);;
  8537  001006  0E80               	movlw	128
  8538  001008  EC6D  F029         	call	_lcdInst
  8539                           
  8540                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8541  00100C  0E4D               	movlw	low STR_26
  8542  00100E  0100               	movlb	0	; () banked
  8543  001010  6F8E               	movwf	printf@f& (0+255),b
  8544  001012  0EFD               	movlw	high STR_26
  8545  001014  0100               	movlb	0	; () banked
  8546  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8547  001018  EC08  F00B         	call	_printf	;wreg free
  8548                           
  8549                           ;UI.c: 193: lcdInst(0b11000000);;
  8550  00101C  0EC0               	movlw	192
  8551  00101E  EC6D  F029         	call	_lcdInst
  8552                           
  8553                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8554  001022  0E08               	movlw	low STR_27
  8555  001024  0100               	movlb	0	; () banked
  8556  001026  6F8E               	movwf	printf@f& (0+255),b
  8557  001028  0EFE               	movlw	high STR_27
  8558  00102A  0100               	movlb	0	; () banked
  8559  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8560  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8561  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8562  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8563  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8564  00103E  EC08  F00B         	call	_printf	;wreg free
  8565                           
  8566                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8567  001042  0E00               	movlw	0
  8568  001044  0100               	movlb	0	; () banked
  8569  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8570  001048                     l8798:
  8571                           
  8572                           ; BSR set to: 0
  8573  001048  0E63               	movlw	99
  8574  00104A  0100               	movlb	0	; () banked
  8575  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8576  00104E  D001               	goto	l8802
  8577  001050  D00C               	goto	l8806
  8578  001052                     l8802:
  8579                           
  8580                           ; BSR set to: 0
  8581  001052  0E68               	movlw	104
  8582  001054  0100               	movlb	0	; () banked
  8583  001056  6FC4               	movwf	??_UI& (0+255),b
  8584  001058  0EE4               	movlw	228
  8585  00105A                     u9167:
  8586  00105A  2EE8               	decfsz	wreg,f,c
  8587  00105C  D7FE               	bra	u9167
  8588  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8589  001060  D7FC               	bra	u9167
  8590  001062  F000               	nop	
  8591  001064  0100               	movlb	0	; () banked
  8592  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8593  001068  D7EF               	goto	l8798
  8594  00106A                     l8806:
  8595                           
  8596                           ; BSR set to: 0
  8597  00106A  0100               	movlb	0	; () banked
  8598  00106C  51F6               	movf	_logstate& (0+255),w,b
  8599  00106E  0100               	movlb	0	; () banked
  8600  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8601  001072  B4D8               	btfsc	status,2,c
  8602  001074  0012               	return	
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8606                           
  8607                           ; BSR set to: 0
  8608                           
  8609                           ; BSR set to: 0
  8610  001076  0E00               	movlw	0
  8611  001078  0100               	movlb	0	; () banked
  8612  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8613  00107C                     l8812:
  8614                           
  8615                           ; BSR set to: 0
  8616  00107C  0E63               	movlw	99
  8617  00107E  0100               	movlb	0	; () banked
  8618  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8619  001082  D001               	goto	l8816
  8620  001084  D00C               	goto	l8820
  8621  001086                     l8816:
  8622                           
  8623                           ; BSR set to: 0
  8624  001086  0E68               	movlw	104
  8625  001088  0100               	movlb	0	; () banked
  8626  00108A  6FC4               	movwf	??_UI& (0+255),b
  8627  00108C  0EE4               	movlw	228
  8628  00108E                     u9177:
  8629  00108E  2EE8               	decfsz	wreg,f,c
  8630  001090  D7FE               	bra	u9177
  8631  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8632  001094  D7FC               	bra	u9177
  8633  001096  F000               	nop	
  8634  001098  0100               	movlb	0	; () banked
  8635  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8636  00109C  D7EF               	goto	l8812
  8637  00109E                     l8820:
  8638                           
  8639                           ; BSR set to: 0
  8640  00109E  0100               	movlb	0	; () banked
  8641  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8642  0010A2  0100               	movlb	0	; () banked
  8643  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8644  0010A6  B4D8               	btfsc	status,2,c
  8645  0010A8  0012               	return	
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8649                           
  8650                           ; BSR set to: 0
  8651                           
  8652                           ; BSR set to: 0
  8653  0010AA  0E01               	movlw	1
  8654  0010AC  EC6D  F029         	call	_lcdInst
  8655  0010B0  0E68               	movlw	104
  8656  0010B2  0100               	movlb	0	; () banked
  8657  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8658  0010B6  0EE4               	movlw	228
  8659  0010B8                     u9187:
  8660  0010B8  2EE8               	decfsz	wreg,f,c
  8661  0010BA  D7FE               	bra	u9187
  8662  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8663  0010BE  D7FC               	bra	u9187
  8664  0010C0  F000               	nop	
  8665                           
  8666                           ;UI.c: 200: lcdInst(0b10000000);;
  8667  0010C2  0E80               	movlw	128
  8668  0010C4  EC6D  F029         	call	_lcdInst
  8669                           
  8670                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8671  0010C8  0E5E               	movlw	low STR_28
  8672  0010CA  0100               	movlb	0	; () banked
  8673  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8674  0010CE  0EFD               	movlw	high STR_28
  8675  0010D0  0100               	movlb	0	; () banked
  8676  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8677  0010D4  EC08  F00B         	call	_printf	;wreg free
  8678                           
  8679                           ;UI.c: 202: lcdInst(0b11000000);;
  8680  0010D8  0EC0               	movlw	192
  8681  0010DA  EC6D  F029         	call	_lcdInst
  8682                           
  8683                           ;UI.c: 203: printf("%d", log_count_total);
  8684  0010DE  0E16               	movlw	low (STR_27+14)
  8685  0010E0  0100               	movlb	0	; () banked
  8686  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8687  0010E4  0EFE               	movlw	high (STR_27+14)
  8688  0010E6  0100               	movlb	0	; () banked
  8689  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8690  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8691  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8692  0010F2  EC08  F00B         	call	_printf	;wreg free
  8693                           
  8694                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8695  0010F6  0E00               	movlw	0
  8696  0010F8  0100               	movlb	0	; () banked
  8697  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8698  0010FC                     l8838:
  8699                           
  8700                           ; BSR set to: 0
  8701  0010FC  0E63               	movlw	99
  8702  0010FE  0100               	movlb	0	; () banked
  8703  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8704  001102  D001               	goto	l8842
  8705  001104  D00C               	goto	l8846
  8706  001106                     l8842:
  8707                           
  8708                           ; BSR set to: 0
  8709  001106  0E68               	movlw	104
  8710  001108  0100               	movlb	0	; () banked
  8711  00110A  6FC4               	movwf	??_UI& (0+255),b
  8712  00110C  0EE4               	movlw	228
  8713  00110E                     u9197:
  8714  00110E  2EE8               	decfsz	wreg,f,c
  8715  001110  D7FE               	bra	u9197
  8716  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8717  001114  D7FC               	bra	u9197
  8718  001116  F000               	nop	
  8719  001118  0100               	movlb	0	; () banked
  8720  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8721  00111C  D7EF               	goto	l8838
  8722  00111E                     l8846:
  8723                           
  8724                           ; BSR set to: 0
  8725  00111E  0100               	movlb	0	; () banked
  8726  001120  51F6               	movf	_logstate& (0+255),w,b
  8727  001122  0100               	movlb	0	; () banked
  8728  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8729  001126  B4D8               	btfsc	status,2,c
  8730  001128  0012               	return	
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8734                           
  8735                           ; BSR set to: 0
  8736                           
  8737                           ; BSR set to: 0
  8738  00112A  0E00               	movlw	0
  8739  00112C  0100               	movlb	0	; () banked
  8740  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8741  001130                     l8852:
  8742                           
  8743                           ; BSR set to: 0
  8744  001130  0E63               	movlw	99
  8745  001132  0100               	movlb	0	; () banked
  8746  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8747  001136  D001               	goto	l8856
  8748  001138  D00C               	goto	l8860
  8749  00113A                     l8856:
  8750                           
  8751                           ; BSR set to: 0
  8752  00113A  0E68               	movlw	104
  8753  00113C  0100               	movlb	0	; () banked
  8754  00113E  6FC4               	movwf	??_UI& (0+255),b
  8755  001140  0EE4               	movlw	228
  8756  001142                     u9207:
  8757  001142  2EE8               	decfsz	wreg,f,c
  8758  001144  D7FE               	bra	u9207
  8759  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8760  001148  D7FC               	bra	u9207
  8761  00114A  F000               	nop	
  8762  00114C  0100               	movlb	0	; () banked
  8763  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8764  001150  D7EF               	goto	l8852
  8765  001152                     l8860:
  8766                           
  8767                           ; BSR set to: 0
  8768  001152  0100               	movlb	0	; () banked
  8769  001154  51F6               	movf	_logstate& (0+255),w,b
  8770  001156  0100               	movlb	0	; () banked
  8771  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8772  00115A  B4D8               	btfsc	status,2,c
  8773  00115C  0012               	return	
  8774  00115E                     l8864:
  8775  00115E  0100               	movlb	0	; () banked
  8776  001160  51F6               	movf	_logstate& (0+255),w,b
  8777  001162  0100               	movlb	0	; () banked
  8778  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8779  001166  B4D8               	btfsc	status,2,c
  8780  001168  0012               	return	
  8781  00116A  D44C               	goto	l8560
  8782  00116C                     __end_of_UI:
  8783                           	opt stack 0
  8784                           tblptru	equ	0xFF8
  8785                           tblptrh	equ	0xFF7
  8786                           tblptrl	equ	0xFF6
  8787                           tablat	equ	0xFF5
  8788                           prodh	equ	0xFF4
  8789                           prodl	equ	0xFF3
  8790                           intcon	equ	0xFF2
  8791                           intcon2	equ	0xFF1
  8792                           intcon3	equ	0xFF0
  8793                           postinc0	equ	0xFEE
  8794                           wreg	equ	0xFE8
  8795                           postdec1	equ	0xFE5
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function _printRTC *****************
  8805 ;; Defined at:
  8806 ;;		line 63 in file "RTC.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  i               2   66[BANK0 ] int 
  8811 ;;  INT_time       14   46[BANK0 ] int [7]
  8812 ;;  month           4   62[BANK0 ] unsigned char [4]
  8813 ;;  RTC_month       2   60[BANK0 ] int 
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  1    wreg      void 
  8816 ;; Registers used:
  8817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;Total ram usage:       25 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:   10
  8830 ;; This function calls:
  8831 ;;		_getRTC
  8832 ;;		_lcdInst
  8833 ;;		_printf
  8834 ;;		_strcpy
  8835 ;; This function is called by:
  8836 ;;		_UI
  8837 ;;		_change_state_to_menu_start
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           	psect	text24
  8842  002438                     __ptext24:
  8843                           	opt stack 0
  8844  002438                     _printRTC:
  8845                           	opt stack 18
  8846                           
  8847                           ;RTC.c: 64: getRTC();
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;incstack = 0
  8851  002438  EC77  F022         	call	_getRTC	;wreg free
  8852                           
  8853                           ;RTC.c: 65: char month[] = "MMM";
  8854  00243C  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8855  002440  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8856  002444  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8857  002448  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8858                           
  8859                           ;RTC.c: 66: int INT_time[7];
  8860                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8861  00244C  0E00               	movlw	0
  8862  00244E  0100               	movlb	0	; () banked
  8863  002450  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8864  002452  0E00               	movlw	0
  8865  002454  6FC2               	movwf	printRTC@i& (0+255),b
  8866                           
  8867                           ; BSR set to: 0
  8868  002456  0100               	movlb	0	; () banked
  8869  002458  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8870  00245A  D008               	goto	l6642
  8871  00245C  0100               	movlb	0	; () banked
  8872  00245E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8873  002460  E146               	bnz	l606
  8874  002462  0E07               	movlw	7
  8875  002464  0100               	movlb	0	; () banked
  8876  002466  5DC2               	subwf	printRTC@i& (0+255),w,b
  8877  002468  B0D8               	btfsc	status,0,c
  8878  00246A  D041               	goto	l606
  8879  00246C                     l6642:
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8883  00246C  0E1C               	movlw	low _time
  8884  00246E  0100               	movlb	0	; () banked
  8885  002470  25C2               	addwf	printRTC@i& (0+255),w,b
  8886  002472  6ED9               	movwf	fsr2l,c
  8887  002474  0E01               	movlw	high _time
  8888  002476  0100               	movlb	0	; () banked
  8889  002478  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8890  00247A  6EDA               	movwf	fsr2h,c
  8891  00247C  50DF               	movf	indf2,w,c
  8892  00247E  0100               	movlb	0	; () banked
  8893  002480  6FAB               	movwf	??_printRTC& (0+255),b
  8894  002482  0100               	movlb	0	; () banked
  8895  002484  3BAB               	swapf	??_printRTC& (0+255),f,b
  8896  002486  0E0F               	movlw	15
  8897  002488  17AB               	andwf	??_printRTC& (0+255),f,b
  8898  00248A  0E0F               	movlw	15
  8899  00248C  0100               	movlb	0	; () banked
  8900  00248E  17AB               	andwf	??_printRTC& (0+255),f,b
  8901  002490  0100               	movlb	0	; () banked
  8902  002492  51AB               	movf	??_printRTC& (0+255),w,b
  8903  002494  0D0A               	mullw	10
  8904  002496  0E1C               	movlw	low _time
  8905  002498  0100               	movlb	0	; () banked
  8906  00249A  25C2               	addwf	printRTC@i& (0+255),w,b
  8907  00249C  6ED9               	movwf	fsr2l,c
  8908  00249E  0E01               	movlw	high _time
  8909  0024A0  0100               	movlb	0	; () banked
  8910  0024A2  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8911  0024A4  6EDA               	movwf	fsr2h,c
  8912  0024A6  50DF               	movf	indf2,w,c
  8913  0024A8  0B0F               	andlw	15
  8914  0024AA  0100               	movlb	0	; () banked
  8915  0024AC  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8916  0024AE  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8917  0024B0  50F3               	movf	prodl,w,c
  8918  0024B2  0100               	movlb	0	; () banked
  8919  0024B4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8920  0024B6  50F4               	movf	prodh,w,c
  8921  0024B8  0100               	movlb	0	; () banked
  8922  0024BA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8923  0024BC  90D8               	bcf	status,0,c
  8924  0024BE  0100               	movlb	0	; () banked
  8925  0024C0  35C2               	rlcf	printRTC@i& (0+255),w,b
  8926  0024C2  6ED9               	movwf	fsr2l,c
  8927  0024C4  0100               	movlb	0	; () banked
  8928  0024C6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8929  0024C8  6EDA               	movwf	fsr2h,c
  8930  0024CA  0EAE               	movlw	low printRTC@INT_time
  8931  0024CC  26D9               	addwf	fsr2l,f,c
  8932  0024CE  0E00               	movlw	high printRTC@INT_time
  8933  0024D0  22DA               	addwfc	fsr2h,f,c
  8934  0024D2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8935  0024D6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8936                           
  8937                           ; BSR set to: 0
  8938  0024DA  0100               	movlb	0	; () banked
  8939  0024DC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8940  0024DE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8941                           
  8942                           ; BSR set to: 0
  8943  0024E0  0100               	movlb	0	; () banked
  8944  0024E2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8945  0024E4  D7C3               	goto	l6642
  8946  0024E6  0100               	movlb	0	; () banked
  8947  0024E8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8948  0024EA  E101               	bnz	u5240
  8949  0024EC  D7BA               	goto	L8
  8950  0024EE                     u5240:
  8951  0024EE                     l606:
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;RTC.c: 69: }
  8955                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8956  0024EE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8957  0024F2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8958                           
  8959                           ;RTC.c: 71: switch(RTC_month){
  8960  0024F6  D0B4               	goto	l6674
  8961  0024F8                     l6648:
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;RTC.c: 73: strcpy(month, "JAN");
  8965  0024F8  0EBE               	movlw	low printRTC@month
  8966  0024FA  0100               	movlb	0	; () banked
  8967  0024FC  6F80               	movwf	strcpy@to& (0+255),b
  8968  0024FE  0E00               	movlw	high printRTC@month
  8969  002500  0100               	movlb	0	; () banked
  8970  002502  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8971  002504  0EDB               	movlw	low STR_8
  8972  002506  0100               	movlb	0	; () banked
  8973  002508  6F82               	movwf	strcpy@from& (0+255),b
  8974  00250A  0EFF               	movlw	high STR_8
  8975  00250C  0100               	movlb	0	; () banked
  8976  00250E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8977  002510  ECC8  F026         	call	_strcpy	;wreg free
  8978                           
  8979                           ;RTC.c: 74: break;
  8980  002514  D0D4               	goto	l6676
  8981  002516                     l6650:
  8982                           
  8983                           ;RTC.c: 76: strcpy(month, "FEB");
  8984  002516  0EBE               	movlw	low printRTC@month
  8985  002518  0100               	movlb	0	; () banked
  8986  00251A  6F80               	movwf	strcpy@to& (0+255),b
  8987  00251C  0E00               	movlw	high printRTC@month
  8988  00251E  0100               	movlb	0	; () banked
  8989  002520  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8990  002522  0ECB               	movlw	low STR_9
  8991  002524  0100               	movlb	0	; () banked
  8992  002526  6F82               	movwf	strcpy@from& (0+255),b
  8993  002528  0EFF               	movlw	high STR_9
  8994  00252A  0100               	movlb	0	; () banked
  8995  00252C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8996  00252E  ECC8  F026         	call	_strcpy	;wreg free
  8997                           
  8998                           ;RTC.c: 77: break;
  8999  002532  D0C5               	goto	l6676
  9000  002534                     l6652:
  9001                           
  9002                           ;RTC.c: 79: strcpy(month, "MAR");
  9003  002534  0EBE               	movlw	low printRTC@month
  9004  002536  0100               	movlb	0	; () banked
  9005  002538  6F80               	movwf	strcpy@to& (0+255),b
  9006  00253A  0E00               	movlw	high printRTC@month
  9007  00253C  0100               	movlb	0	; () banked
  9008  00253E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9009  002540  0EE7               	movlw	low STR_10
  9010  002542  0100               	movlb	0	; () banked
  9011  002544  6F82               	movwf	strcpy@from& (0+255),b
  9012  002546  0EFF               	movlw	high STR_10
  9013  002548  0100               	movlb	0	; () banked
  9014  00254A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9015  00254C  ECC8  F026         	call	_strcpy	;wreg free
  9016                           
  9017                           ;RTC.c: 80: break;
  9018  002550  D0B6               	goto	l6676
  9019  002552                     l6654:
  9020                           
  9021                           ;RTC.c: 82: strcpy(month, "APR");
  9022  002552  0EBE               	movlw	low printRTC@month
  9023  002554  0100               	movlb	0	; () banked
  9024  002556  6F80               	movwf	strcpy@to& (0+255),b
  9025  002558  0E00               	movlw	high printRTC@month
  9026  00255A  0100               	movlb	0	; () banked
  9027  00255C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9028  00255E  0EEB               	movlw	low STR_11
  9029  002560  0100               	movlb	0	; () banked
  9030  002562  6F82               	movwf	strcpy@from& (0+255),b
  9031  002564  0EFF               	movlw	high STR_11
  9032  002566  0100               	movlb	0	; () banked
  9033  002568  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9034  00256A  ECC8  F026         	call	_strcpy	;wreg free
  9035                           
  9036                           ;RTC.c: 83: break;
  9037  00256E  D0A7               	goto	l6676
  9038  002570                     l6656:
  9039                           
  9040                           ;RTC.c: 85: strcpy(month, "MAY");
  9041  002570  0EBE               	movlw	low printRTC@month
  9042  002572  0100               	movlb	0	; () banked
  9043  002574  6F80               	movwf	strcpy@to& (0+255),b
  9044  002576  0E00               	movlw	high printRTC@month
  9045  002578  0100               	movlb	0	; () banked
  9046  00257A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9047  00257C  0EFB               	movlw	low STR_12
  9048  00257E  0100               	movlb	0	; () banked
  9049  002580  6F82               	movwf	strcpy@from& (0+255),b
  9050  002582  0EFF               	movlw	high STR_12
  9051  002584  0100               	movlb	0	; () banked
  9052  002586  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9053  002588  ECC8  F026         	call	_strcpy	;wreg free
  9054                           
  9055                           ;RTC.c: 86: break;
  9056  00258C  D098               	goto	l6676
  9057  00258E                     l6658:
  9058                           
  9059                           ;RTC.c: 88: strcpy(month, "JUN");
  9060  00258E  0EBE               	movlw	low printRTC@month
  9061  002590  0100               	movlb	0	; () banked
  9062  002592  6F80               	movwf	strcpy@to& (0+255),b
  9063  002594  0E00               	movlw	high printRTC@month
  9064  002596  0100               	movlb	0	; () banked
  9065  002598  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9066  00259A  0EDF               	movlw	low STR_13
  9067  00259C  0100               	movlb	0	; () banked
  9068  00259E  6F82               	movwf	strcpy@from& (0+255),b
  9069  0025A0  0EFF               	movlw	high STR_13
  9070  0025A2  0100               	movlb	0	; () banked
  9071  0025A4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9072  0025A6  ECC8  F026         	call	_strcpy	;wreg free
  9073                           
  9074                           ;RTC.c: 89: break;
  9075  0025AA  D089               	goto	l6676
  9076  0025AC                     l6660:
  9077                           
  9078                           ;RTC.c: 91: strcpy(month, "JUL");
  9079  0025AC  0EBE               	movlw	low printRTC@month
  9080  0025AE  0100               	movlb	0	; () banked
  9081  0025B0  6F80               	movwf	strcpy@to& (0+255),b
  9082  0025B2  0E00               	movlw	high printRTC@month
  9083  0025B4  0100               	movlb	0	; () banked
  9084  0025B6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9085  0025B8  0ED7               	movlw	low STR_14
  9086  0025BA  0100               	movlb	0	; () banked
  9087  0025BC  6F82               	movwf	strcpy@from& (0+255),b
  9088  0025BE  0EFF               	movlw	high STR_14
  9089  0025C0  0100               	movlb	0	; () banked
  9090  0025C2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9091  0025C4  ECC8  F026         	call	_strcpy	;wreg free
  9092                           
  9093                           ;RTC.c: 92: break;
  9094  0025C8  D07A               	goto	l6676
  9095  0025CA                     l6662:
  9096                           
  9097                           ;RTC.c: 94: strcpy(month, "AUG");
  9098  0025CA  0EBE               	movlw	low printRTC@month
  9099  0025CC  0100               	movlb	0	; () banked
  9100  0025CE  6F80               	movwf	strcpy@to& (0+255),b
  9101  0025D0  0E00               	movlw	high printRTC@month
  9102  0025D2  0100               	movlb	0	; () banked
  9103  0025D4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9104  0025D6  0ED3               	movlw	low STR_15
  9105  0025D8  0100               	movlb	0	; () banked
  9106  0025DA  6F82               	movwf	strcpy@from& (0+255),b
  9107  0025DC  0EFF               	movlw	high STR_15
  9108  0025DE  0100               	movlb	0	; () banked
  9109  0025E0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9110  0025E2  ECC8  F026         	call	_strcpy	;wreg free
  9111                           
  9112                           ;RTC.c: 95: break;
  9113  0025E6  D06B               	goto	l6676
  9114  0025E8                     l6664:
  9115                           
  9116                           ;RTC.c: 97: strcpy(month, "SEP");
  9117  0025E8  0EBE               	movlw	low printRTC@month
  9118  0025EA  0100               	movlb	0	; () banked
  9119  0025EC  6F80               	movwf	strcpy@to& (0+255),b
  9120  0025EE  0E00               	movlw	high printRTC@month
  9121  0025F0  0100               	movlb	0	; () banked
  9122  0025F2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9123  0025F4  0EE3               	movlw	low STR_16
  9124  0025F6  0100               	movlb	0	; () banked
  9125  0025F8  6F82               	movwf	strcpy@from& (0+255),b
  9126  0025FA  0EFF               	movlw	high STR_16
  9127  0025FC  0100               	movlb	0	; () banked
  9128  0025FE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9129  002600  ECC8  F026         	call	_strcpy	;wreg free
  9130                           
  9131                           ;RTC.c: 98: break;
  9132  002604  D05C               	goto	l6676
  9133  002606                     l6666:
  9134                           
  9135                           ;RTC.c: 100: strcpy(month, "OCT");
  9136  002606  0EBE               	movlw	low printRTC@month
  9137  002608  0100               	movlb	0	; () banked
  9138  00260A  6F80               	movwf	strcpy@to& (0+255),b
  9139  00260C  0E00               	movlw	high printRTC@month
  9140  00260E  0100               	movlb	0	; () banked
  9141  002610  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9142  002612  0EF3               	movlw	low STR_17
  9143  002614  0100               	movlb	0	; () banked
  9144  002616  6F82               	movwf	strcpy@from& (0+255),b
  9145  002618  0EFF               	movlw	high STR_17
  9146  00261A  0100               	movlb	0	; () banked
  9147  00261C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9148  00261E  ECC8  F026         	call	_strcpy	;wreg free
  9149                           
  9150                           ;RTC.c: 101: break;
  9151  002622  D04D               	goto	l6676
  9152  002624                     l6668:
  9153                           
  9154                           ;RTC.c: 103: strcpy(month, "NOV");
  9155  002624  0EBE               	movlw	low printRTC@month
  9156  002626  0100               	movlb	0	; () banked
  9157  002628  6F80               	movwf	strcpy@to& (0+255),b
  9158  00262A  0E00               	movlw	high printRTC@month
  9159  00262C  0100               	movlb	0	; () banked
  9160  00262E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9161  002630  0EF7               	movlw	low STR_18
  9162  002632  0100               	movlb	0	; () banked
  9163  002634  6F82               	movwf	strcpy@from& (0+255),b
  9164  002636  0EFF               	movlw	high STR_18
  9165  002638  0100               	movlb	0	; () banked
  9166  00263A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9167  00263C  ECC8  F026         	call	_strcpy	;wreg free
  9168                           
  9169                           ;RTC.c: 104: break;
  9170  002640  D03E               	goto	l6676
  9171  002642                     l6670:
  9172                           
  9173                           ;RTC.c: 106: strcpy(month, "DEC");
  9174  002642  0EBE               	movlw	low printRTC@month
  9175  002644  0100               	movlb	0	; () banked
  9176  002646  6F80               	movwf	strcpy@to& (0+255),b
  9177  002648  0E00               	movlw	high printRTC@month
  9178  00264A  0100               	movlb	0	; () banked
  9179  00264C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9180  00264E  0ECF               	movlw	low STR_19
  9181  002650  0100               	movlb	0	; () banked
  9182  002652  6F82               	movwf	strcpy@from& (0+255),b
  9183  002654  0EFF               	movlw	high STR_19
  9184  002656  0100               	movlb	0	; () banked
  9185  002658  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9186  00265A  ECC8  F026         	call	_strcpy	;wreg free
  9187                           
  9188                           ;RTC.c: 108: }
  9189                           
  9190                           ;RTC.c: 107: break;
  9191  00265E  D02F               	goto	l6676
  9192  002660                     l6674:
  9193  002660  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9194  002664  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9195                           
  9196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9197                           ; Switch size 1, requested type "space"
  9198                           ; Number of cases is 1, Range of values is 0 to 0
  9199                           ; switch strategies available:
  9200                           ; Name         Instructions Cycles
  9201                           ; simple_byte            4     3 (average)
  9202                           ;	Chosen strategy is simple_byte
  9203  002668  0100               	movlb	0	; () banked
  9204  00266A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9205  00266C  0A00               	xorlw	0	; case 0
  9206  00266E  A4D8               	btfss	status,2,c
  9207  002670  D026               	goto	l6676
  9208                           
  9209                           ; BSR set to: 0
  9210                           ; Switch size 1, requested type "space"
  9211                           ; Number of cases is 12, Range of values is 1 to 12
  9212                           ; switch strategies available:
  9213                           ; Name         Instructions Cycles
  9214                           ; simple_byte           37    19 (average)
  9215                           ;	Chosen strategy is simple_byte
  9216  002672  0100               	movlb	0	; () banked
  9217  002674  51AB               	movf	??_printRTC& (0+255),w,b
  9218  002676  0A01               	xorlw	1	; case 1
  9219  002678  B4D8               	btfsc	status,2,c
  9220  00267A  D73E               	goto	l6648
  9221  00267C  0A03               	xorlw	3	; case 2
  9222  00267E  B4D8               	btfsc	status,2,c
  9223  002680  D74A               	goto	l6650
  9224  002682  0A01               	xorlw	1	; case 3
  9225  002684  B4D8               	btfsc	status,2,c
  9226  002686  D756               	goto	l6652
  9227  002688  0A07               	xorlw	7	; case 4
  9228  00268A  B4D8               	btfsc	status,2,c
  9229  00268C  D762               	goto	l6654
  9230  00268E  0A01               	xorlw	1	; case 5
  9231  002690  B4D8               	btfsc	status,2,c
  9232  002692  D76E               	goto	l6656
  9233  002694  0A03               	xorlw	3	; case 6
  9234  002696  B4D8               	btfsc	status,2,c
  9235  002698  D77A               	goto	l6658
  9236  00269A  0A01               	xorlw	1	; case 7
  9237  00269C  B4D8               	btfsc	status,2,c
  9238  00269E  D786               	goto	l6660
  9239  0026A0  0A0F               	xorlw	15	; case 8
  9240  0026A2  B4D8               	btfsc	status,2,c
  9241  0026A4  D792               	goto	l6662
  9242  0026A6  0A01               	xorlw	1	; case 9
  9243  0026A8  B4D8               	btfsc	status,2,c
  9244  0026AA  D79E               	goto	l6664
  9245  0026AC  0A03               	xorlw	3	; case 10
  9246  0026AE  B4D8               	btfsc	status,2,c
  9247  0026B0  D7AA               	goto	l6666
  9248  0026B2  0A01               	xorlw	1	; case 11
  9249  0026B4  B4D8               	btfsc	status,2,c
  9250  0026B6  D7B6               	goto	l6668
  9251  0026B8  0A07               	xorlw	7	; case 12
  9252  0026BA  B4D8               	btfsc	status,2,c
  9253  0026BC  D7C2               	goto	l6670
  9254  0026BE                     l6676:
  9255                           
  9256                           ;RTC.c: 109: lcdInst(0b10000000);;
  9257  0026BE  0E80               	movlw	128
  9258  0026C0  EC6D  F029         	call	_lcdInst
  9259                           
  9260                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9261  0026C4  0E0A               	movlw	low STR_21
  9262  0026C6  0100               	movlb	0	; () banked
  9263  0026C8  6F8E               	movwf	printf@f& (0+255),b
  9264  0026CA  0EFB               	movlw	high STR_21
  9265  0026CC  0100               	movlb	0	; () banked
  9266  0026CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9267  0026D0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9268  0026D4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9269  0026D8  0EBE               	movlw	low printRTC@month
  9270  0026DA  0100               	movlb	0	; () banked
  9271  0026DC  6F92               	movwf	(?_printf+4)& (0+255),b
  9272  0026DE  0E00               	movlw	high printRTC@month
  9273  0026E0  0100               	movlb	0	; () banked
  9274  0026E2  6F93               	movwf	(?_printf+5)& (0+255),b
  9275  0026E4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9276  0026E8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9277  0026EC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9278  0026F0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9279  0026F4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9280  0026F8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9281  0026FC  EC08  F00B         	call	_printf	;wreg free
  9282  002700  0012               	return		;funcret
  9283  002702                     __end_of_printRTC:
  9284                           	opt stack 0
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           intcon	equ	0xFF2
  9292                           intcon2	equ	0xFF1
  9293                           intcon3	equ	0xFF0
  9294                           postinc0	equ	0xFEE
  9295                           wreg	equ	0xFE8
  9296                           postdec1	equ	0xFE5
  9297                           fsr1l	equ	0xFE1
  9298                           indf2	equ	0xFDF
  9299                           postinc2	equ	0xFDE
  9300                           postdec2	equ	0xFDD
  9301                           fsr2h	equ	0xFDA
  9302                           fsr2l	equ	0xFD9
  9303                           status	equ	0xFD8
  9304                           
  9305 ;; *************** function _strcpy *****************
  9306 ;; Defined at:
  9307 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9310 ;;		 -> printRTC@month(4), UI@month(4), 
  9311 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9312 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9313 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9314 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9315 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9316 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9317 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9318 ;;		 -> STR_8(4), 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9321 ;;		 -> printRTC@month(4), UI@month(4), 
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  2    0[BANK0 ] PTR unsigned char 
  9324 ;; Registers used:
  9325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;Total ram usage:        6 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:    7
  9338 ;; This function calls:
  9339 ;;		Nothing
  9340 ;; This function is called by:
  9341 ;;		_UI
  9342 ;;		_printRTC
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           	psect	text25
  9347  004D90                     __ptext25:
  9348                           	opt stack 0
  9349  004D90                     _strcpy:
  9350                           	opt stack 20
  9351                           
  9352                           ;incstack = 0
  9353  004D90  C080  F084         	movff	strcpy@to,strcpy@cp
  9354  004D94  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9355  004D98  D006               	goto	l6382
  9356  004D9A                     l6380:
  9357  004D9A  0100               	movlb	0	; () banked
  9358  004D9C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9359  004D9E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9360  004DA0  0100               	movlb	0	; () banked
  9361  004DA2  4B82               	infsnz	strcpy@from& (0+255),f,b
  9362  004DA4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9363  004DA6                     l6382:
  9364  004DA6  C082  FFF6         	movff	strcpy@from,tblptrl
  9365  004DAA  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9366  004DAE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9367  004DAE  6AF8               	clrf	tblptru,c
  9368  004DB0                     	endif
  9369  004DB0                     	if	0	;tblptru may be non-zero
  9370  004DB0                     	endif
  9371  004DB0  C084  FFD9         	movff	strcpy@cp,fsr2l
  9372  004DB4  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9373  004DB8  0008               	tblrd		*
  9374  004DBA  CFF5 FFDF          	movff	tablat,indf2
  9375  004DBE  50DF               	movf	indf2,w,c
  9376  004DC0  B4D8               	btfsc	status,2,c
  9377  004DC2  0012               	return	
  9378  004DC4  D7EA               	goto	l6380
  9379  004DC6                     __end_of_strcpy:
  9380                           	opt stack 0
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           intcon	equ	0xFF2
  9388                           intcon2	equ	0xFF1
  9389                           intcon3	equ	0xFF0
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1l	equ	0xFE1
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           postdec2	equ	0xFDD
  9397                           fsr2h	equ	0xFDA
  9398                           fsr2l	equ	0xFD9
  9399                           status	equ	0xFD8
  9400                           
  9401 ;; *************** function _getRTC *****************
  9402 ;; Defined at:
  9403 ;;		line 44 in file "RTC.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;  i               2    3[BANK0 ] int 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;Total ram usage:        2 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    9
  9424 ;; This function calls:
  9425 ;;		_I2C_Master_Read
  9426 ;;		_I2C_Master_Start
  9427 ;;		_I2C_Master_Stop
  9428 ;;		_I2C_Master_Write
  9429 ;; This function is called by:
  9430 ;;		_printRTC
  9431 ;;		_initSortTimer
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           	psect	text26
  9436  0044EE                     __ptext26:
  9437                           	opt stack 0
  9438  0044EE                     _getRTC:
  9439                           	opt stack 18
  9440                           
  9441                           ;RTC.c: 48: I2C_Master_Start();
  9442                           
  9443                           ;incstack = 0
  9444  0044EE  EC93  F029         	call	_I2C_Master_Start	;wreg free
  9445                           
  9446                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9447  0044F2  0E00               	movlw	0
  9448  0044F4  0100               	movlb	0	; () banked
  9449  0044F6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9450  0044F8  0ED0               	movlw	208
  9451  0044FA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9452  0044FC  EC81  F029         	call	_I2C_Master_Write	;wreg free
  9453                           
  9454                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9455  004500  0E00               	movlw	0
  9456  004502  0100               	movlb	0	; () banked
  9457  004504  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9458  004506  0E00               	movlw	0
  9459  004508  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9460  00450A  EC81  F029         	call	_I2C_Master_Write	;wreg free
  9461                           
  9462                           ;RTC.c: 51: I2C_Master_Stop();
  9463  00450E  EC8F  F029         	call	_I2C_Master_Stop	;wreg free
  9464                           
  9465                           ;RTC.c: 54: I2C_Master_Start();
  9466  004512  EC93  F029         	call	_I2C_Master_Start	;wreg free
  9467                           
  9468                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9469  004516  0E00               	movlw	0
  9470  004518  0100               	movlb	0	; () banked
  9471  00451A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9472  00451C  0ED1               	movlw	209
  9473  00451E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9474  004520  EC81  F029         	call	_I2C_Master_Write	;wreg free
  9475                           
  9476                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9477  004524  0E00               	movlw	0
  9478  004526  0100               	movlb	0	; () banked
  9479  004528  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9480  00452A  0E00               	movlw	0
  9481  00452C  6F83               	movwf	getRTC@i& (0+255),b
  9482  00452E                     l6388:
  9483                           
  9484                           ; BSR set to: 0
  9485  00452E  0100               	movlb	0	; () banked
  9486  004530  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9487  004532  D008               	goto	l6392
  9488  004534  0100               	movlb	0	; () banked
  9489  004536  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9490  004538  E115               	bnz	l6398
  9491  00453A  0E06               	movlw	6
  9492  00453C  0100               	movlb	0	; () banked
  9493  00453E  5D83               	subwf	getRTC@i& (0+255),w,b
  9494  004540  B0D8               	btfsc	status,0,c
  9495  004542  D010               	goto	l6398
  9496  004544                     l6392:
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9500  004544  0E1C               	movlw	low _time
  9501  004546  0100               	movlb	0	; () banked
  9502  004548  2583               	addwf	getRTC@i& (0+255),w,b
  9503  00454A  6ED9               	movwf	fsr2l,c
  9504  00454C  0E01               	movlw	high _time
  9505  00454E  0100               	movlb	0	; () banked
  9506  004550  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9507  004552  6EDA               	movwf	fsr2h,c
  9508  004554  0E01               	movlw	1
  9509  004556  EC20  F028         	call	_I2C_Master_Read
  9510  00455A  6EDF               	movwf	indf2,c
  9511  00455C  0100               	movlb	0	; () banked
  9512  00455E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9513  004560  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9514  004562  D7E5               	goto	l6388
  9515  004564                     l6398:
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;RTC.c: 58: }
  9519                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9520  004564  0E00               	movlw	0
  9521  004566  EC20  F028         	call	_I2C_Master_Read
  9522  00456A  0101               	movlb	1	; () banked
  9523  00456C  6F22               	movwf	(_time+6)& (0+255),b
  9524                           
  9525                           ;RTC.c: 60: I2C_Master_Stop();
  9526  00456E  EC8F  F029         	call	_I2C_Master_Stop	;wreg free
  9527  004572  0012               	return		;funcret
  9528  004574                     __end_of_getRTC:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           prodh	equ	0xFF4
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           intcon3	equ	0xFF0
  9539                           postinc0	equ	0xFEE
  9540                           wreg	equ	0xFE8
  9541                           postdec1	equ	0xFE5
  9542                           fsr1l	equ	0xFE1
  9543                           indf2	equ	0xFDF
  9544                           postinc2	equ	0xFDE
  9545                           postdec2	equ	0xFDD
  9546                           fsr2h	equ	0xFDA
  9547                           fsr2l	equ	0xFD9
  9548                           status	equ	0xFD8
  9549                           
  9550 ;; *************** function _I2C_Master_Write *****************
  9551 ;; Defined at:
  9552 ;;		line 49 in file "I2C.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;  d               2    1[BANK0 ] unsigned int 
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;		None
  9557 ;; Return value:  Size  Location     Type
  9558 ;;                  1    wreg      void 
  9559 ;; Registers used:
  9560 ;;		wreg, status,2, status,0, cstack
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9566 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;Total ram usage:        2 bytes
  9571 ;; Hardware stack levels used:    1
  9572 ;; Hardware stack levels required when called:    8
  9573 ;; This function calls:
  9574 ;;		_I2C_Master_Wait
  9575 ;; This function is called by:
  9576 ;;		_loadRTC
  9577 ;;		_getRTC
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           	psect	text27
  9582  005302                     __ptext27:
  9583                           	opt stack 0
  9584  005302                     _I2C_Master_Write:
  9585                           	opt stack 18
  9586                           
  9587                           ;I2C.c: 51: I2C_Master_Wait();
  9588                           
  9589                           ;incstack = 0
  9590  005302  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9591                           
  9592                           ;I2C.c: 52: SSPBUF = d;
  9593  005306  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9594  00530A  0012               	return		;funcret
  9595  00530C                     __end_of_I2C_Master_Write:
  9596                           	opt stack 0
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           intcon2	equ	0xFF1
  9605                           intcon3	equ	0xFF0
  9606                           postinc0	equ	0xFEE
  9607                           wreg	equ	0xFE8
  9608                           postdec1	equ	0xFE5
  9609                           fsr1l	equ	0xFE1
  9610                           indf2	equ	0xFDF
  9611                           postinc2	equ	0xFDE
  9612                           postdec2	equ	0xFDD
  9613                           fsr2h	equ	0xFDA
  9614                           fsr2l	equ	0xFD9
  9615                           status	equ	0xFD8
  9616                           
  9617 ;; *************** function _I2C_Master_Stop *****************
  9618 ;; Defined at:
  9619 ;;		line 43 in file "I2C.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;		None
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;		None
  9624 ;; Return value:  Size  Location     Type
  9625 ;;                  1    wreg      void 
  9626 ;; Registers used:
  9627 ;;		wreg, status,2, status,0, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;Total ram usage:        0 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    8
  9640 ;; This function calls:
  9641 ;;		_I2C_Master_Wait
  9642 ;; This function is called by:
  9643 ;;		_loadRTC
  9644 ;;		_getRTC
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text28
  9649  00531E                     __ptext28:
  9650                           	opt stack 0
  9651  00531E                     _I2C_Master_Stop:
  9652                           	opt stack 18
  9653                           
  9654                           ;I2C.c: 45: I2C_Master_Wait();
  9655                           
  9656                           ;incstack = 0
  9657  00531E  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9658                           
  9659                           ;I2C.c: 46: PEN = 1;
  9660  005322  84C5               	bsf	4037,2,c	;volatile
  9661  005324  0012               	return		;funcret
  9662  005326                     __end_of_I2C_Master_Stop:
  9663                           	opt stack 0
  9664                           tblptru	equ	0xFF8
  9665                           tblptrh	equ	0xFF7
  9666                           tblptrl	equ	0xFF6
  9667                           tablat	equ	0xFF5
  9668                           prodh	equ	0xFF4
  9669                           prodl	equ	0xFF3
  9670                           intcon	equ	0xFF2
  9671                           intcon2	equ	0xFF1
  9672                           intcon3	equ	0xFF0
  9673                           postinc0	equ	0xFEE
  9674                           wreg	equ	0xFE8
  9675                           postdec1	equ	0xFE5
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function _I2C_Master_Start *****************
  9685 ;; Defined at:
  9686 ;;		line 31 in file "I2C.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;		None
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      void 
  9693 ;; Registers used:
  9694 ;;		wreg, status,2, status,0, cstack
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;Total ram usage:        0 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    8
  9707 ;; This function calls:
  9708 ;;		_I2C_Master_Wait
  9709 ;; This function is called by:
  9710 ;;		_loadRTC
  9711 ;;		_getRTC
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text29
  9716  005326                     __ptext29:
  9717                           	opt stack 0
  9718  005326                     _I2C_Master_Start:
  9719                           	opt stack 18
  9720                           
  9721                           ;I2C.c: 33: I2C_Master_Wait();
  9722                           
  9723                           ;incstack = 0
  9724  005326  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9725                           
  9726                           ;I2C.c: 34: SEN = 1;
  9727  00532A  80C5               	bsf	4037,0,c	;volatile
  9728  00532C  0012               	return		;funcret
  9729  00532E                     __end_of_I2C_Master_Start:
  9730                           	opt stack 0
  9731                           tblptru	equ	0xFF8
  9732                           tblptrh	equ	0xFF7
  9733                           tblptrl	equ	0xFF6
  9734                           tablat	equ	0xFF5
  9735                           prodh	equ	0xFF4
  9736                           prodl	equ	0xFF3
  9737                           intcon	equ	0xFF2
  9738                           intcon2	equ	0xFF1
  9739                           intcon3	equ	0xFF0
  9740                           postinc0	equ	0xFEE
  9741                           wreg	equ	0xFE8
  9742                           postdec1	equ	0xFE5
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function _I2C_Master_Read *****************
  9752 ;; Defined at:
  9753 ;;		line 55 in file "I2C.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  a               1    wreg     unsigned char 
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  a               1    1[BANK0 ] unsigned char 
  9758 ;;  temp            1    2[BANK0 ] unsigned char 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      unsigned char 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0, cstack
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;Total ram usage:        2 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    8
  9775 ;; This function calls:
  9776 ;;		_I2C_Master_Wait
  9777 ;; This function is called by:
  9778 ;;		_getRTC
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text30
  9783  005040                     __ptext30:
  9784                           	opt stack 0
  9785  005040                     _I2C_Master_Read:
  9786                           	opt stack 18
  9787                           
  9788                           ;incstack = 0
  9789                           ;I2C_Master_Read@a stored from wreg
  9790  005040  0100               	movlb	0	; () banked
  9791  005042  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9792                           
  9793                           ;I2C.c: 57: unsigned char temp;
  9794                           ;I2C.c: 58: I2C_Master_Wait();
  9795  005044  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9796                           
  9797                           ;I2C.c: 59: RCEN = 1;
  9798  005048  86C5               	bsf	4037,3,c	;volatile
  9799                           
  9800                           ;I2C.c: 60: I2C_Master_Wait();
  9801  00504A  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9802                           
  9803                           ;I2C.c: 61: temp = SSPBUF;
  9804  00504E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9805                           
  9806                           ;I2C.c: 62: I2C_Master_Wait();
  9807  005052  EC52  F029         	call	_I2C_Master_Wait	;wreg free
  9808                           
  9809                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9810  005056  0100               	movlb	0	; () banked
  9811  005058  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9812  00505A  0100               	movlb	0	; () banked
  9813  00505C  A4D8               	btfss	status,2,c
  9814  00505E  D002               	goto	u4330
  9815  005060  8AC5               	bsf	4037,5,c	;volatile
  9816  005062  D001               	goto	l6076
  9817  005064                     u4330:
  9818  005064  9AC5               	bcf	4037,5,c	;volatile
  9819  005066                     l6076:
  9820                           
  9821                           ;I2C.c: 64: ACKEN = 1;
  9822  005066  88C5               	bsf	4037,4,c	;volatile
  9823                           
  9824                           ;I2C.c: 65: return temp;
  9825  005068  0100               	movlb	0	; () banked
  9826  00506A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9827  00506C  0012               	return	
  9828  00506E                     __end_of_I2C_Master_Read:
  9829                           	opt stack 0
  9830                           tblptru	equ	0xFF8
  9831                           tblptrh	equ	0xFF7
  9832                           tblptrl	equ	0xFF6
  9833                           tablat	equ	0xFF5
  9834                           prodh	equ	0xFF4
  9835                           prodl	equ	0xFF3
  9836                           intcon	equ	0xFF2
  9837                           intcon2	equ	0xFF1
  9838                           intcon3	equ	0xFF0
  9839                           postinc0	equ	0xFEE
  9840                           wreg	equ	0xFE8
  9841                           postdec1	equ	0xFE5
  9842                           fsr1l	equ	0xFE1
  9843                           indf2	equ	0xFDF
  9844                           postinc2	equ	0xFDE
  9845                           postdec2	equ	0xFDD
  9846                           fsr2h	equ	0xFDA
  9847                           fsr2l	equ	0xFD9
  9848                           status	equ	0xFD8
  9849                           
  9850 ;; *************** function _I2C_Master_Wait *****************
  9851 ;; Defined at:
  9852 ;;		line 26 in file "I2C.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;		None
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  1    wreg      void 
  9859 ;; Registers used:
  9860 ;;		wreg, status,2, status,0
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;Total ram usage:        1 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    7
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		_I2C_Master_Start
  9877 ;;		_I2C_Master_Stop
  9878 ;;		_I2C_Master_Write
  9879 ;;		_I2C_Master_Read
  9880 ;;		_I2C_Master_RepeatedStart
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text31
  9885  0052A4                     __ptext31:
  9886                           	opt stack 0
  9887  0052A4                     _I2C_Master_Wait:
  9888                           	opt stack 18
  9889  0052A4                     l66:
  9890  0052A4  B4C7               	btfsc	4039,2,c	;volatile
  9891  0052A6  D7FE               	goto	l66
  9892  0052A8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9893  0052AC  0E1F               	movlw	31
  9894  0052AE  0100               	movlb	0	; () banked
  9895  0052B0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9896  0052B2  B4D8               	btfsc	status,2,c
  9897  0052B4  0012               	return	
  9898  0052B6  D7F6               	goto	l66
  9899  0052B8                     __end_of_I2C_Master_Wait:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           intcon2	equ	0xFF1
  9909                           intcon3	equ	0xFF0
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           postdec1	equ	0xFE5
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _change_state_to_menu_22 *****************
  9922 ;; Defined at:
  9923 ;;		line 498 in file "UI.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      void 
  9930 ;; Registers used:
  9931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:   10
  9944 ;; This function calls:
  9945 ;;		_lcdInst
  9946 ;;		_printf
  9947 ;; This function is called by:
  9948 ;;		_UI
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text32
  9953  004D20                     __ptext32:
  9954                           	opt stack 0
  9955  004D20                     _change_state_to_menu_22:
  9956                           	opt stack 19
  9957                           
  9958                           ;UI.c: 499: cur_state = 22;
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;incstack = 0
  9962  004D20  0E00               	movlw	0
  9963  004D22  0100               	movlb	0	; () banked
  9964  004D24  6FED               	movwf	(_cur_state+1)& (0+255),b
  9965  004D26  0E16               	movlw	22
  9966  004D28  6FEC               	movwf	_cur_state& (0+255),b
  9967                           
  9968                           ; BSR set to: 0
  9969                           ;UI.c: 501: lcdInst(0b10000000);;
  9970  004D2A  0E80               	movlw	128
  9971  004D2C  EC6D  F029         	call	_lcdInst
  9972                           
  9973                           ;UI.c: 502: printf("2. SORT        <");
  9974  004D30  0EC4               	movlw	low STR_34
  9975  004D32  0100               	movlb	0	; () banked
  9976  004D34  6F8E               	movwf	printf@f& (0+255),b
  9977  004D36  0EFD               	movlw	high STR_34
  9978  004D38  0100               	movlb	0	; () banked
  9979  004D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9980  004D3C  EC08  F00B         	call	_printf	;wreg free
  9981                           
  9982                           ;UI.c: 503: lcdInst(0b11000000);;
  9983  004D40  0EC0               	movlw	192
  9984  004D42  EC6D  F029         	call	_lcdInst
  9985                           
  9986                           ;UI.c: 504: printf("3. LOGS         ");
  9987  004D46  0E09               	movlw	low STR_36
  9988  004D48  0100               	movlb	0	; () banked
  9989  004D4A  6F8E               	movwf	printf@f& (0+255),b
  9990  004D4C  0EFD               	movlw	high STR_36
  9991  004D4E  0100               	movlb	0	; () banked
  9992  004D50  6F8F               	movwf	(printf@f+1)& (0+255),b
  9993  004D52  EC08  F00B         	call	_printf	;wreg free
  9994  004D56  0012               	return		;funcret
  9995  004D58                     __end_of_change_state_to_menu_22:
  9996                           	opt stack 0
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           intcon	equ	0xFF2
 10004                           intcon2	equ	0xFF1
 10005                           intcon3	equ	0xFF0
 10006                           postinc0	equ	0xFEE
 10007                           wreg	equ	0xFE8
 10008                           postdec1	equ	0xFE5
 10009                           fsr1l	equ	0xFE1
 10010                           indf2	equ	0xFDF
 10011                           postinc2	equ	0xFDE
 10012                           postdec2	equ	0xFDD
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function _change_state_to_menu_12 *****************
 10018 ;; Defined at:
 10019 ;;		line 490 in file "UI.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      void 
 10026 ;; Registers used:
 10027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;Total ram usage:        0 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:   10
 10040 ;; This function calls:
 10041 ;;		_lcdInst
 10042 ;;		_printf
 10043 ;; This function is called by:
 10044 ;;		_UI
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           	psect	text33
 10049  004D58                     __ptext33:
 10050                           	opt stack 0
 10051  004D58                     _change_state_to_menu_12:
 10052                           	opt stack 19
 10053                           
 10054                           ;UI.c: 491: cur_state = 12;
 10055                           
 10056                           ;incstack = 0
 10057  004D58  0E00               	movlw	0
 10058  004D5A  0100               	movlb	0	; () banked
 10059  004D5C  6FED               	movwf	(_cur_state+1)& (0+255),b
 10060  004D5E  0E0C               	movlw	12
 10061  004D60  6FEC               	movwf	_cur_state& (0+255),b
 10062                           
 10063                           ; BSR set to: 0
 10064                           ;UI.c: 493: lcdInst(0b10000000);;
 10065  004D62  0E80               	movlw	128
 10066  004D64  EC6D  F029         	call	_lcdInst
 10067                           
 10068                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10069  004D68  0E2B               	movlw	low STR_33
 10070  004D6A  0100               	movlb	0	; () banked
 10071  004D6C  6F8E               	movwf	printf@f& (0+255),b
 10072  004D6E  0EFD               	movlw	high STR_33
 10073  004D70  0100               	movlb	0	; () banked
 10074  004D72  6F8F               	movwf	(printf@f+1)& (0+255),b
 10075  004D74  EC08  F00B         	call	_printf	;wreg free
 10076                           
 10077                           ;UI.c: 495: lcdInst(0b11000000);;
 10078  004D78  0EC0               	movlw	192
 10079  004D7A  EC6D  F029         	call	_lcdInst
 10080                           
 10081                           ;UI.c: 496: printf("2. SORT        <");
 10082  004D7E  0EC4               	movlw	low STR_34
 10083  004D80  0100               	movlb	0	; () banked
 10084  004D82  6F8E               	movwf	printf@f& (0+255),b
 10085  004D84  0EFD               	movlw	high STR_34
 10086  004D86  0100               	movlb	0	; () banked
 10087  004D88  6F8F               	movwf	(printf@f+1)& (0+255),b
 10088  004D8A  EC08  F00B         	call	_printf	;wreg free
 10089  004D8E  0012               	return		;funcret
 10090  004D90                     __end_of_change_state_to_menu_12:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           intcon2	equ	0xFF1
 10100                           intcon3	equ	0xFF0
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           postdec1	equ	0xFE5
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function ___awmod *****************
 10113 ;; Defined at:
 10114 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  dividend        2    0[BANK0 ] int 
 10117 ;;  divisor         2    2[BANK0 ] int 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;  sign            1    5[BANK0 ] unsigned char 
 10120 ;;  counter         1    4[BANK0 ] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  2    0[BANK0 ] int 
 10123 ;; Registers used:
 10124 ;;		wreg, status,2, status,0
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;Total ram usage:        6 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    7
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_UI
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text34
 10145  0043C0                     __ptext34:
 10146                           	opt stack 0
 10147  0043C0                     ___awmod:
 10148                           	opt stack 22
 10149                           
 10150                           ;incstack = 0
 10151  0043C0  0E00               	movlw	0
 10152  0043C2  0100               	movlb	0	; () banked
 10153  0043C4  6F85               	movwf	___awmod@sign& (0+255),b
 10154                           
 10155                           ; BSR set to: 0
 10156  0043C6  0100               	movlb	0	; () banked
 10157  0043C8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10158  0043CA  D008               	goto	l8448
 10159                           
 10160                           ; BSR set to: 0
 10161  0043CC  0100               	movlb	0	; () banked
 10162  0043CE  6D80               	negf	___awmod@dividend& (0+255),b
 10163  0043D0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10164  0043D2  B0D8               	btfsc	status,0,c
 10165  0043D4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10166                           
 10167                           ; BSR set to: 0
 10168  0043D6  0E01               	movlw	1
 10169  0043D8  0100               	movlb	0	; () banked
 10170  0043DA  6F85               	movwf	___awmod@sign& (0+255),b
 10171  0043DC                     l8448:
 10172                           
 10173                           ; BSR set to: 0
 10174  0043DC  0100               	movlb	0	; () banked
 10175  0043DE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10176  0043E0  D005               	goto	l8452
 10177                           
 10178                           ; BSR set to: 0
 10179  0043E2  0100               	movlb	0	; () banked
 10180  0043E4  6D82               	negf	___awmod@divisor& (0+255),b
 10181  0043E6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10182  0043E8  B0D8               	btfsc	status,0,c
 10183  0043EA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10184  0043EC                     l8452:
 10185                           
 10186                           ; BSR set to: 0
 10187  0043EC  0100               	movlb	0	; () banked
 10188  0043EE  5182               	movf	___awmod@divisor& (0+255),w,b
 10189  0043F0  0100               	movlb	0	; () banked
 10190  0043F2  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10191  0043F4  B4D8               	btfsc	status,2,c
 10192  0043F6  D026               	goto	l8468
 10193                           
 10194                           ; BSR set to: 0
 10195  0043F8  0E01               	movlw	1
 10196  0043FA  0100               	movlb	0	; () banked
 10197  0043FC  6F84               	movwf	___awmod@counter& (0+255),b
 10198  0043FE  D006               	goto	l8458
 10199  004400                     l8456:
 10200                           
 10201                           ; BSR set to: 0
 10202  004400  0100               	movlb	0	; () banked
 10203  004402  90D8               	bcf	status,0,c
 10204  004404  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10205  004406  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10206  004408  0100               	movlb	0	; () banked
 10207  00440A  2B84               	incf	___awmod@counter& (0+255),f,b
 10208  00440C                     l8458:
 10209                           
 10210                           ; BSR set to: 0
 10211  00440C  0100               	movlb	0	; () banked
 10212  00440E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10213  004410  D7F7               	goto	l8456
 10214  004412                     l8460:
 10215                           
 10216                           ; BSR set to: 0
 10217  004412  0100               	movlb	0	; () banked
 10218  004414  5182               	movf	___awmod@divisor& (0+255),w,b
 10219  004416  0100               	movlb	0	; () banked
 10220  004418  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10221  00441A  0100               	movlb	0	; () banked
 10222  00441C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10223  00441E  0100               	movlb	0	; () banked
 10224  004420  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10225  004422  A0D8               	btfss	status,0,c
 10226  004424  D008               	goto	l8464
 10227                           
 10228                           ; BSR set to: 0
 10229  004426  0100               	movlb	0	; () banked
 10230  004428  5182               	movf	___awmod@divisor& (0+255),w,b
 10231  00442A  0100               	movlb	0	; () banked
 10232  00442C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10233  00442E  0100               	movlb	0	; () banked
 10234  004430  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10235  004432  0100               	movlb	0	; () banked
 10236  004434  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10237  004436                     l8464:
 10238                           
 10239                           ; BSR set to: 0
 10240  004436  0100               	movlb	0	; () banked
 10241  004438  90D8               	bcf	status,0,c
 10242  00443A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10243  00443C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10244                           
 10245                           ; BSR set to: 0
 10246  00443E  0100               	movlb	0	; () banked
 10247  004440  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10248  004442  D7E7               	goto	l8460
 10249  004444                     l8468:
 10250                           
 10251                           ; BSR set to: 0
 10252  004444  0100               	movlb	0	; () banked
 10253  004446  5185               	movf	___awmod@sign& (0+255),w,b
 10254  004448  0100               	movlb	0	; () banked
 10255  00444A  B4D8               	btfsc	status,2,c
 10256  00444C  D005               	goto	l8472
 10257                           
 10258                           ; BSR set to: 0
 10259  00444E  0100               	movlb	0	; () banked
 10260  004450  6D80               	negf	___awmod@dividend& (0+255),b
 10261  004452  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10262  004454  B0D8               	btfsc	status,0,c
 10263  004456  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10264  004458                     l8472:
 10265                           
 10266                           ; BSR set to: 0
 10267  004458  C080  F080         	movff	___awmod@dividend,?___awmod
 10268  00445C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10269  004460  0012               	return	
 10270  004462                     __end_of___awmod:
 10271                           	opt stack 0
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           intcon2	equ	0xFF1
 10280                           intcon3	equ	0xFF0
 10281                           postinc0	equ	0xFEE
 10282                           wreg	equ	0xFE8
 10283                           postdec1	equ	0xFE5
 10284                           fsr1l	equ	0xFE1
 10285                           indf2	equ	0xFDF
 10286                           postinc2	equ	0xFDE
 10287                           postdec2	equ	0xFDD
 10288                           fsr2h	equ	0xFDA
 10289                           fsr2l	equ	0xFD9
 10290                           status	equ	0xFD8
 10291                           
 10292 ;; *************** function ___awdiv *****************
 10293 ;; Defined at:
 10294 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;  dividend        2    6[BANK0 ] int 
 10297 ;;  divisor         2    8[BANK0 ] int 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  quotient        2   12[BANK0 ] int 
 10300 ;;  sign            1   11[BANK0 ] unsigned char 
 10301 ;;  counter         1   10[BANK0 ] unsigned char 
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  2    6[BANK0 ] int 
 10304 ;; Registers used:
 10305 ;;		wreg, status,2, status,0
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;Total ram usage:        8 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    7
 10318 ;; This function calls:
 10319 ;;		Nothing
 10320 ;; This function is called by:
 10321 ;;		_UI
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text35
 10326  0040F0                     __ptext35:
 10327                           	opt stack 0
 10328  0040F0                     ___awdiv:
 10329                           	opt stack 22
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;incstack = 0
 10333  0040F0  0E00               	movlw	0
 10334  0040F2  0100               	movlb	0	; () banked
 10335  0040F4  6F8B               	movwf	___awdiv@sign& (0+255),b
 10336                           
 10337                           ; BSR set to: 0
 10338  0040F6  0100               	movlb	0	; () banked
 10339  0040F8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10340  0040FA  D008               	goto	l8404
 10341                           
 10342                           ; BSR set to: 0
 10343  0040FC  0100               	movlb	0	; () banked
 10344  0040FE  6D88               	negf	___awdiv@divisor& (0+255),b
 10345  004100  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10346  004102  B0D8               	btfsc	status,0,c
 10347  004104  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10348                           
 10349                           ; BSR set to: 0
 10350  004106  0E01               	movlw	1
 10351  004108  0100               	movlb	0	; () banked
 10352  00410A  6F8B               	movwf	___awdiv@sign& (0+255),b
 10353  00410C                     l8404:
 10354                           
 10355                           ; BSR set to: 0
 10356  00410C  0100               	movlb	0	; () banked
 10357  00410E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10358  004110  D008               	goto	l8410
 10359                           
 10360                           ; BSR set to: 0
 10361  004112  0100               	movlb	0	; () banked
 10362  004114  6D86               	negf	___awdiv@dividend& (0+255),b
 10363  004116  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10364  004118  B0D8               	btfsc	status,0,c
 10365  00411A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10366                           
 10367                           ; BSR set to: 0
 10368  00411C  0E01               	movlw	1
 10369  00411E  0100               	movlb	0	; () banked
 10370  004120  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10371  004122                     l8410:
 10372                           
 10373                           ; BSR set to: 0
 10374  004122  0E00               	movlw	0
 10375  004124  0100               	movlb	0	; () banked
 10376  004126  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10377  004128  0E00               	movlw	0
 10378  00412A  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10379                           
 10380                           ; BSR set to: 0
 10381  00412C  0100               	movlb	0	; () banked
 10382  00412E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10383  004130  0100               	movlb	0	; () banked
 10384  004132  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10385  004134  B4D8               	btfsc	status,2,c
 10386  004136  D02C               	goto	l8432
 10387                           
 10388                           ; BSR set to: 0
 10389  004138  0E01               	movlw	1
 10390  00413A  0100               	movlb	0	; () banked
 10391  00413C  6F8A               	movwf	___awdiv@counter& (0+255),b
 10392  00413E  D006               	goto	l8418
 10393  004140                     l8416:
 10394                           
 10395                           ; BSR set to: 0
 10396  004140  0100               	movlb	0	; () banked
 10397  004142  90D8               	bcf	status,0,c
 10398  004144  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10399  004146  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10400  004148  0100               	movlb	0	; () banked
 10401  00414A  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10402  00414C                     l8418:
 10403                           
 10404                           ; BSR set to: 0
 10405  00414C  0100               	movlb	0	; () banked
 10406  00414E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10407  004150  D7F7               	goto	l8416
 10408  004152                     l8420:
 10409                           
 10410                           ; BSR set to: 0
 10411  004152  0100               	movlb	0	; () banked
 10412  004154  90D8               	bcf	status,0,c
 10413  004156  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10414  004158  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10415                           
 10416                           ; BSR set to: 0
 10417  00415A  0100               	movlb	0	; () banked
 10418  00415C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10419  00415E  0100               	movlb	0	; () banked
 10420  004160  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10421  004162  0100               	movlb	0	; () banked
 10422  004164  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10423  004166  0100               	movlb	0	; () banked
 10424  004168  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10425  00416A  A0D8               	btfss	status,0,c
 10426  00416C  D00A               	goto	l8428
 10427                           
 10428                           ; BSR set to: 0
 10429  00416E  0100               	movlb	0	; () banked
 10430  004170  5188               	movf	___awdiv@divisor& (0+255),w,b
 10431  004172  0100               	movlb	0	; () banked
 10432  004174  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10433  004176  0100               	movlb	0	; () banked
 10434  004178  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10435  00417A  0100               	movlb	0	; () banked
 10436  00417C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10437                           
 10438                           ; BSR set to: 0
 10439  00417E  0100               	movlb	0	; () banked
 10440  004180  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10441  004182                     l8428:
 10442                           
 10443                           ; BSR set to: 0
 10444  004182  0100               	movlb	0	; () banked
 10445  004184  90D8               	bcf	status,0,c
 10446  004186  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10447  004188  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10448                           
 10449                           ; BSR set to: 0
 10450  00418A  0100               	movlb	0	; () banked
 10451  00418C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10452  00418E  D7E1               	goto	l8420
 10453  004190                     l8432:
 10454                           
 10455                           ; BSR set to: 0
 10456  004190  0100               	movlb	0	; () banked
 10457  004192  518B               	movf	___awdiv@sign& (0+255),w,b
 10458  004194  0100               	movlb	0	; () banked
 10459  004196  B4D8               	btfsc	status,2,c
 10460  004198  D005               	goto	l8436
 10461                           
 10462                           ; BSR set to: 0
 10463  00419A  0100               	movlb	0	; () banked
 10464  00419C  6D8C               	negf	___awdiv@quotient& (0+255),b
 10465  00419E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10466  0041A0  B0D8               	btfsc	status,0,c
 10467  0041A2  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10468  0041A4                     l8436:
 10469                           
 10470                           ; BSR set to: 0
 10471  0041A4  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10472  0041A8  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10473  0041AC  0012               	return	
 10474  0041AE                     __end_of___awdiv:
 10475                           	opt stack 0
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           intcon2	equ	0xFF1
 10484                           intcon3	equ	0xFF0
 10485                           postinc0	equ	0xFEE
 10486                           wreg	equ	0xFE8
 10487                           postdec1	equ	0xFE5
 10488                           fsr1l	equ	0xFE1
 10489                           indf2	equ	0xFDF
 10490                           postinc2	equ	0xFDE
 10491                           postdec2	equ	0xFDD
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function _Test *****************
 10497 ;; Defined at:
 10498 ;;		line 30 in file "Test.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;		None
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;Total ram usage:        2 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:   11
 10519 ;; This function calls:
 10520 ;;		_BlockerTest
 10521 ;;		_BothServos
 10522 ;;		_EEPROMTest
 10523 ;;		_PortTestA5
 10524 ;;		_PortTests
 10525 ;;		_PusherTest
 10526 ;;		_SpeedTest
 10527 ;;		_actuatorTest
 10528 ;;		_algorithmTest
 10529 ;;		_lcdInst
 10530 ;;		_printf
 10531 ;;		_sensorTest
 10532 ;; This function is called by:
 10533 ;;		_main
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           	psect	text36
 10538  003C78                     __ptext36:
 10539                           	opt stack 0
 10540  003C78                     _Test:
 10541                           	opt stack 19
 10542  003C78                     
 10543                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10544  003C78  0E01               	movlw	1
 10545  003C7A  EC6D  F029         	call	_lcdInst
 10546  003C7E  0E68               	movlw	104
 10547  003C80  0100               	movlb	0	; () banked
 10548  003C82  6FC6               	movwf	??_Test& (0+255),b
 10549  003C84  0EE4               	movlw	228
 10550  003C86                     u9217:
 10551  003C86  2EE8               	decfsz	wreg,f,c
 10552  003C88  D7FE               	bra	u9217
 10553  003C8A  2FC6               	decfsz	??_Test& (0+255),f,b
 10554  003C8C  D7FC               	bra	u9217
 10555  003C8E  F000               	nop	
 10556  003C90  0E80               	movlw	128
 10557  003C92  EC6D  F029         	call	_lcdInst
 10558                           
 10559                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10560  003C96  0E92               	movlw	low STR_68
 10561  003C98  0100               	movlb	0	; () banked
 10562  003C9A  6F8E               	movwf	printf@f& (0+255),b
 10563  003C9C  0EFC               	movlw	high STR_68
 10564  003C9E  0100               	movlb	0	; () banked
 10565  003CA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10566  003CA2  EC08  F00B         	call	_printf	;wreg free
 10567                           
 10568                           ;Test.c: 35: lcdInst(0b11000000);;
 10569  003CA6  0EC0               	movlw	192
 10570  003CA8  EC6D  F029         	call	_lcdInst
 10571                           
 10572                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10573  003CAC  0EA3               	movlw	low STR_69
 10574  003CAE  0100               	movlb	0	; () banked
 10575  003CB0  6F8E               	movwf	printf@f& (0+255),b
 10576  003CB2  0EFC               	movlw	high STR_69
 10577  003CB4  0100               	movlb	0	; () banked
 10578  003CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10579  003CB8  EC08  F00B         	call	_printf	;wreg free
 10580                           
 10581                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10582  003CBC  0E05               	movlw	5
 10583  003CBE  0100               	movlb	0	; () banked
 10584  003CC0  6FC7               	movwf	(??_Test+1)& (0+255),b
 10585  003CC2  0E0F               	movlw	15
 10586  003CC4  0100               	movlb	0	; () banked
 10587  003CC6  6FC6               	movwf	??_Test& (0+255),b
 10588  003CC8  0EF1               	movlw	241
 10589  003CCA                     u9227:
 10590  003CCA  2EE8               	decfsz	wreg,f,c
 10591  003CCC  D7FE               	bra	u9227
 10592  003CCE  2FC6               	decfsz	??_Test& (0+255),f,b
 10593  003CD0  D7FC               	bra	u9227
 10594  003CD2  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10595  003CD4  D7FA               	bra	u9227
 10596  003CD6                     l1146:
 10597  003CD6  A281               	btfss	3969,1,c	;volatile
 10598  003CD8  D7FE               	goto	l1146
 10599                           
 10600                           ;Test.c: 39: var = PORTB >> 4;
 10601  003CDA  CF81 F0C6          	movff	3969,??_Test	;volatile
 10602  003CDE  0100               	movlb	0	; () banked
 10603  003CE0  3BC6               	swapf	??_Test& (0+255),f,b
 10604  003CE2  0E0F               	movlw	15
 10605  003CE4  17C6               	andwf	??_Test& (0+255),f,b
 10606  003CE6  0100               	movlb	0	; () banked
 10607  003CE8  51C6               	movf	??_Test& (0+255),w,b
 10608  003CEA  0100               	movlb	0	; () banked
 10609  003CEC  6FFA               	movwf	_var& (0+255),b
 10610  003CEE  6BFB               	clrf	(_var+1)& (0+255),b
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;Test.c: 40: var++;
 10614  003CF0  0100               	movlb	0	; () banked
 10615  003CF2  4BFA               	infsnz	_var& (0+255),f,b
 10616  003CF4  2BFB               	incf	(_var+1)& (0+255),f,b
 10617  003CF6                     l1149:
 10618  003CF6  A281               	btfss	3969,1,c	;volatile
 10619  003CF8  D01F               	goto	l9198
 10620  003CFA  D7FD               	goto	l1149
 10621  003CFC                     l9176:
 10622                           
 10623                           ;Test.c: 44: algorithmTest();
 10624  003CFC  ECAB  F01F         	call	_algorithmTest	;wreg free
 10625                           
 10626                           ;Test.c: 45: break;
 10627  003D00  D7BB               	goto	l9158
 10628  003D02                     l9178:
 10629                           
 10630                           ;Test.c: 47: sensorTest();
 10631  003D02  EC9D  F010         	call	_sensorTest	;wreg free
 10632                           
 10633                           ;Test.c: 48: break;
 10634  003D06  D7B8               	goto	l9158
 10635  003D08                     l9180:
 10636                           
 10637                           ;Test.c: 50: actuatorTest();
 10638  003D08  EC09  F000         	call	_actuatorTest	;wreg free
 10639                           
 10640                           ;Test.c: 51: break;
 10641  003D0C  D7B5               	goto	l9158
 10642  003D0E                     l9182:
 10643                           
 10644                           ;Test.c: 53: PortTestA5();
 10645  003D0E  EC2A  F025         	call	_PortTestA5	;wreg free
 10646                           
 10647                           ;Test.c: 54: break;
 10648  003D12  D7B2               	goto	l9158
 10649  003D14                     l9184:
 10650                           
 10651                           ;Test.c: 57: SpeedTest();
 10652  003D14  ECFD  F022         	call	_SpeedTest	;wreg free
 10653                           
 10654                           ;Test.c: 58: break;
 10655  003D18  D7AF               	goto	l9158
 10656  003D1A                     l9186:
 10657                           
 10658                           ;Test.c: 60: EEPROMTest();
 10659  003D1A  EC9F  F029         	call	_EEPROMTest	;wreg free
 10660                           
 10661                           ;Test.c: 61: break;
 10662  003D1E  D7AC               	goto	l9158
 10663  003D20                     l9188:
 10664                           
 10665                           ;Test.c: 63: PusherTest();
 10666  003D20  EC69  F017         	call	_PusherTest	;wreg free
 10667                           
 10668                           ;Test.c: 64: break;
 10669  003D24  D7A9               	goto	l9158
 10670  003D26                     l9190:
 10671                           
 10672                           ;Test.c: 66: PortTests();
 10673  003D26  EC3F  F023         	call	_PortTests	;wreg free
 10674                           
 10675                           ;Test.c: 67: break;
 10676  003D2A  D7A6               	goto	l9158
 10677  003D2C                     l9192:
 10678                           
 10679                           ;Test.c: 69: BothServos();
 10680  003D2C  EC24  F00D         	call	_BothServos	;wreg free
 10681                           
 10682                           ;Test.c: 70: break;
 10683  003D30  D7A3               	goto	l9158
 10684  003D32                     l9194:
 10685                           
 10686                           ;Test.c: 72: BlockerTest();
 10687  003D32  EC4A  F01C         	call	_BlockerTest	;wreg free
 10688                           
 10689                           ;Test.c: 76: }
 10690                           
 10691                           ;Test.c: 75: break;
 10692                           
 10693                           ;Test.c: 74: default:
 10694                           
 10695                           ;Test.c: 73: break;
 10696  003D36  D7A0               	goto	l9158
 10697  003D38                     l9198:
 10698  003D38  C0FA  F0C6         	movff	_var,??_Test
 10699  003D3C  C0FB  F0C7         	movff	_var+1,??_Test+1
 10700                           
 10701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10702                           ; Switch size 1, requested type "space"
 10703                           ; Number of cases is 1, Range of values is 0 to 0
 10704                           ; switch strategies available:
 10705                           ; Name         Instructions Cycles
 10706                           ; simple_byte            4     3 (average)
 10707                           ;	Chosen strategy is simple_byte
 10708  003D40  0100               	movlb	0	; () banked
 10709  003D42  51C7               	movf	(??_Test+1)& (0+255),w,b
 10710  003D44  0A00               	xorlw	0	; case 0
 10711  003D46  A4D8               	btfss	status,2,c
 10712  003D48  D797               	goto	l9158
 10713                           
 10714                           ; BSR set to: 0
 10715                           ; Switch size 1, requested type "space"
 10716                           ; Number of cases is 10, Range of values is 1 to 11
 10717                           ; switch strategies available:
 10718                           ; Name         Instructions Cycles
 10719                           ; simple_byte           31    16 (average)
 10720                           ;	Chosen strategy is simple_byte
 10721  003D4A  0100               	movlb	0	; () banked
 10722  003D4C  51C6               	movf	??_Test& (0+255),w,b
 10723  003D4E  0A01               	xorlw	1	; case 1
 10724  003D50  B4D8               	btfsc	status,2,c
 10725  003D52  D7D4               	goto	l9176
 10726  003D54  0A03               	xorlw	3	; case 2
 10727  003D56  B4D8               	btfsc	status,2,c
 10728  003D58  D7D4               	goto	l9178
 10729  003D5A  0A01               	xorlw	1	; case 3
 10730  003D5C  B4D8               	btfsc	status,2,c
 10731  003D5E  D7D4               	goto	l9180
 10732  003D60  0A06               	xorlw	6	; case 5
 10733  003D62  B4D8               	btfsc	status,2,c
 10734  003D64  D7D4               	goto	l9182
 10735  003D66  0A03               	xorlw	3	; case 6
 10736  003D68  B4D8               	btfsc	status,2,c
 10737  003D6A  D7D4               	goto	l9184
 10738  003D6C  0A01               	xorlw	1	; case 7
 10739  003D6E  B4D8               	btfsc	status,2,c
 10740  003D70  D7D4               	goto	l9186
 10741  003D72  0A0F               	xorlw	15	; case 8
 10742  003D74  B4D8               	btfsc	status,2,c
 10743  003D76  D7D4               	goto	l9188
 10744  003D78  0A01               	xorlw	1	; case 9
 10745  003D7A  B4D8               	btfsc	status,2,c
 10746  003D7C  D7D4               	goto	l9190
 10747  003D7E  0A03               	xorlw	3	; case 10
 10748  003D80  B4D8               	btfsc	status,2,c
 10749  003D82  D7D4               	goto	l9192
 10750  003D84  0A01               	xorlw	1	; case 11
 10751  003D86  B4D8               	btfsc	status,2,c
 10752  003D88  D7D4               	goto	l9194
 10753                           
 10754                           ; BSR set to: 0
 10755                           
 10756                           ; BSR set to: 0
 10757  003D8A  D776               	goto	l9158
 10758  003D8C                     __end_of_Test:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           intcon2	equ	0xFF1
 10768                           intcon3	equ	0xFF0
 10769                           postinc0	equ	0xFEE
 10770                           wreg	equ	0xFE8
 10771                           postdec1	equ	0xFE5
 10772                           fsr1l	equ	0xFE1
 10773                           indf2	equ	0xFDF
 10774                           postinc2	equ	0xFDE
 10775                           postdec2	equ	0xFDD
 10776                           fsr2h	equ	0xFDA
 10777                           fsr2l	equ	0xFD9
 10778                           status	equ	0xFD8
 10779                           
 10780 ;; *************** function _sensorTest *****************
 10781 ;; Defined at:
 10782 ;;		line 124 in file "Test.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;		None
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  res             2   45[BANK0 ] int 
 10787 ;; Return value:  Size  Location     Type
 10788 ;;                  1    wreg      void 
 10789 ;; Registers used:
 10790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/0
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;Total ram usage:        4 bytes
 10801 ;; Hardware stack levels used:    1
 10802 ;; Hardware stack levels required when called:   10
 10803 ;; This function calls:
 10804 ;;		_lcdInst
 10805 ;;		_printf
 10806 ;;		_readADC
 10807 ;;		_readMAG
 10808 ;; This function is called by:
 10809 ;;		_Test
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text37
 10814  00213A                     __ptext37:
 10815                           	opt stack 0
 10816  00213A                     _sensorTest:
 10817                           	opt stack 19
 10818                           
 10819                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;incstack = 0
 10823  00213A  0E01               	movlw	1
 10824  00213C  EC6D  F029         	call	_lcdInst
 10825  002140  0E68               	movlw	104
 10826  002142  0100               	movlb	0	; () banked
 10827  002144  6FAB               	movwf	??_sensorTest& (0+255),b
 10828  002146  0EE4               	movlw	228
 10829  002148                     u9237:
 10830  002148  2EE8               	decfsz	wreg,f,c
 10831  00214A  D7FE               	bra	u9237
 10832  00214C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10833  00214E  D7FC               	bra	u9237
 10834  002150  F000               	nop	
 10835  002152  0E80               	movlw	128
 10836  002154  EC6D  F029         	call	_lcdInst
 10837                           
 10838                           ;Test.c: 127: printf("SENSORS");
 10839  002158  0EAE               	movlw	low STR_77
 10840  00215A  0100               	movlb	0	; () banked
 10841  00215C  6F8E               	movwf	printf@f& (0+255),b
 10842  00215E  0EFF               	movlw	high STR_77
 10843  002160  0100               	movlb	0	; () banked
 10844  002162  6F8F               	movwf	(printf@f+1)& (0+255),b
 10845  002164  EC08  F00B         	call	_printf	;wreg free
 10846                           
 10847                           ;Test.c: 128: lcdInst(0b11000000);;
 10848  002168  0EC0               	movlw	192
 10849  00216A  EC6D  F029         	call	_lcdInst
 10850                           
 10851                           ;Test.c: 129: printf("PUSH TO START");
 10852  00216E  0E0B               	movlw	low STR_71
 10853  002170  0100               	movlb	0	; () banked
 10854  002172  6F8E               	movwf	printf@f& (0+255),b
 10855  002174  0EFF               	movlw	high STR_71
 10856  002176  0100               	movlb	0	; () banked
 10857  002178  6F8F               	movwf	(printf@f+1)& (0+255),b
 10858  00217A  EC08  F00B         	call	_printf	;wreg free
 10859                           
 10860                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10861  00217E  0E05               	movlw	5
 10862  002180  0100               	movlb	0	; () banked
 10863  002182  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10864  002184  0E0F               	movlw	15
 10865  002186  0100               	movlb	0	; () banked
 10866  002188  6FAB               	movwf	??_sensorTest& (0+255),b
 10867  00218A  0EF1               	movlw	241
 10868  00218C                     u9247:
 10869  00218C  2EE8               	decfsz	wreg,f,c
 10870  00218E  D7FE               	bra	u9247
 10871  002190  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10872  002192  D7FC               	bra	u9247
 10873  002194  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10874  002196  D7FA               	bra	u9247
 10875  002198                     l1179:
 10876  002198  A281               	btfss	3969,1,c	;volatile
 10877  00219A  D7FE               	goto	l1179
 10878  00219C                     l1182:
 10879  00219C  B281               	btfsc	3969,1,c	;volatile
 10880  00219E  D7FE               	goto	l1182
 10881                           
 10882                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10883  0021A0  0E01               	movlw	1
 10884  0021A2  EC6D  F029         	call	_lcdInst
 10885  0021A6  0E68               	movlw	104
 10886  0021A8  0100               	movlb	0	; () banked
 10887  0021AA  6FAB               	movwf	??_sensorTest& (0+255),b
 10888  0021AC  0EE4               	movlw	228
 10889  0021AE                     u9257:
 10890  0021AE  2EE8               	decfsz	wreg,f,c
 10891  0021B0  D7FE               	bra	u9257
 10892  0021B2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10893  0021B4  D7FC               	bra	u9257
 10894  0021B6  F000               	nop	
 10895  0021B8  0E80               	movlw	128
 10896  0021BA  EC6D  F029         	call	_lcdInst
 10897                           
 10898                           ;Test.c: 138: printf("TST: IR SNSR");
 10899  0021BE  0E35               	movlw	low STR_79
 10900  0021C0  0100               	movlb	0	; () banked
 10901  0021C2  6F8E               	movwf	printf@f& (0+255),b
 10902  0021C4  0EFF               	movlw	high STR_79
 10903  0021C6  0100               	movlb	0	; () banked
 10904  0021C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10905  0021CA  EC08  F00B         	call	_printf	;wreg free
 10906                           
 10907                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10908  0021CE  0E05               	movlw	5
 10909  0021D0  0100               	movlb	0	; () banked
 10910  0021D2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10911  0021D4  0E0F               	movlw	15
 10912  0021D6  0100               	movlb	0	; () banked
 10913  0021D8  6FAB               	movwf	??_sensorTest& (0+255),b
 10914  0021DA  0EF1               	movlw	241
 10915  0021DC                     u9267:
 10916  0021DC  2EE8               	decfsz	wreg,f,c
 10917  0021DE  D7FE               	bra	u9267
 10918  0021E0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10919  0021E2  D7FC               	bra	u9267
 10920  0021E4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10921  0021E6  D7FA               	bra	u9267
 10922                           
 10923                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10924  0021E8  8A8B               	bsf	3979,5,c	;volatile
 10925                           
 10926                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10927  0021EA  D05C               	goto	l7622
 10928  0021EC                     l7604:
 10929                           
 10930                           ;Test.c: 143: readADC(0);
 10931  0021EC  0E00               	movlw	0
 10932  0021EE  EC64  F028         	call	_readADC
 10933                           
 10934                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10935  0021F2  50C3               	movf	4035,w,c	;volatile
 10936  0021F4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10937  0021F8  0100               	movlb	0	; () banked
 10938  0021FA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10939  0021FC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10940  002200  0100               	movlb	0	; () banked
 10941  002202  6BAB               	clrf	??_sensorTest& (0+255),b
 10942  002204  0100               	movlb	0	; () banked
 10943  002206  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10944  002208  0100               	movlb	0	; () banked
 10945  00220A  6FAD               	movwf	sensorTest@res& (0+255),b
 10946  00220C  0100               	movlb	0	; () banked
 10947  00220E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10948  002210  0100               	movlb	0	; () banked
 10949  002212  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10953  002214  0100               	movlb	0	; () banked
 10954  002216  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10955  002218  D00A               	goto	u6120
 10956  00221A  0E21               	movlw	33
 10957  00221C  0100               	movlb	0	; () banked
 10958  00221E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10959  002220  0E03               	movlw	3
 10960  002222  0100               	movlb	0	; () banked
 10961  002224  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10962  002226  A0D8               	btfss	status,0,c
 10963  002228  D002               	goto	u6120
 10964  00222A  0E01               	movlw	1
 10965  00222C  D001               	goto	u6130
 10966  00222E                     u6120:
 10967  00222E  0E00               	movlw	0
 10968  002230                     u6130:
 10969  002230  0100               	movlb	0	; () banked
 10970  002232  6FE6               	movwf	_IR_signal& (0+255),b
 10971  002234  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 10972                           
 10973                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10974  002236  0E01               	movlw	1
 10975  002238  EC6D  F029         	call	_lcdInst
 10976  00223C  0E68               	movlw	104
 10977  00223E  0100               	movlb	0	; () banked
 10978  002240  6FAB               	movwf	??_sensorTest& (0+255),b
 10979  002242  0EE4               	movlw	228
 10980  002244                     u9277:
 10981  002244  2EE8               	decfsz	wreg,f,c
 10982  002246  D7FE               	bra	u9277
 10983  002248  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10984  00224A  D7FC               	bra	u9277
 10985  00224C  F000               	nop	
 10986  00224E  0E80               	movlw	128
 10987  002250  EC6D  F029         	call	_lcdInst
 10988                           
 10989                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10990  002254  0E5A               	movlw	low STR_80
 10991  002256  0100               	movlb	0	; () banked
 10992  002258  6F8E               	movwf	printf@f& (0+255),b
 10993  00225A  0EFE               	movlw	high STR_80
 10994  00225C  0100               	movlb	0	; () banked
 10995  00225E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10996  002260  C0E6  F090         	movff	_IR_signal,?_printf+2
 10997  002264  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 10998  002268  EC08  F00B         	call	_printf	;wreg free
 10999                           
 11000                           ;Test.c: 149: lcdInst(0b11000000);;
 11001  00226C  0EC0               	movlw	192
 11002  00226E  EC6D  F029         	call	_lcdInst
 11003                           
 11004                           ;Test.c: 150: printf("%d", res);
 11005  002272  0E16               	movlw	low (STR_27+14)
 11006  002274  0100               	movlb	0	; () banked
 11007  002276  6F8E               	movwf	printf@f& (0+255),b
 11008  002278  0EFE               	movlw	high (STR_27+14)
 11009  00227A  0100               	movlb	0	; () banked
 11010  00227C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11011  00227E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11012  002282  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11013  002286  EC08  F00B         	call	_printf	;wreg free
 11014                           
 11015                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11016  00228A  0E05               	movlw	5
 11017  00228C  0100               	movlb	0	; () banked
 11018  00228E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11019  002290  0E0F               	movlw	15
 11020  002292  0100               	movlb	0	; () banked
 11021  002294  6FAB               	movwf	??_sensorTest& (0+255),b
 11022  002296  0EF1               	movlw	241
 11023  002298                     u9287:
 11024  002298  2EE8               	decfsz	wreg,f,c
 11025  00229A  D7FE               	bra	u9287
 11026  00229C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11027  00229E  D7FC               	bra	u9287
 11028  0022A0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11029  0022A2  D7FA               	bra	u9287
 11030  0022A4                     l7622:
 11031  0022A4  A281               	btfss	3969,1,c	;volatile
 11032  0022A6  D7A2               	goto	l7604
 11033                           
 11034                           ;Test.c: 152: }
 11035                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11036  0022A8  9A8B               	bcf	3979,5,c	;volatile
 11037                           
 11038                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11039  0022AA  0E01               	movlw	1
 11040  0022AC  EC6D  F029         	call	_lcdInst
 11041  0022B0  0E68               	movlw	104
 11042  0022B2  0100               	movlb	0	; () banked
 11043  0022B4  6FAB               	movwf	??_sensorTest& (0+255),b
 11044  0022B6  0EE4               	movlw	228
 11045  0022B8                     u9297:
 11046  0022B8  2EE8               	decfsz	wreg,f,c
 11047  0022BA  D7FE               	bra	u9297
 11048  0022BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11049  0022BE  D7FC               	bra	u9297
 11050  0022C0  F000               	nop	
 11051  0022C2  0E80               	movlw	128
 11052  0022C4  EC6D  F029         	call	_lcdInst
 11053                           
 11054                           ;Test.c: 162: printf("TST: MAGNETISM");
 11055  0022C8  0E87               	movlw	low STR_82
 11056  0022CA  0100               	movlb	0	; () banked
 11057  0022CC  6F8E               	movwf	printf@f& (0+255),b
 11058  0022CE  0EFE               	movlw	high STR_82
 11059  0022D0  0100               	movlb	0	; () banked
 11060  0022D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11061  0022D4  EC08  F00B         	call	_printf	;wreg free
 11062                           
 11063                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11064  0022D8  0E05               	movlw	5
 11065  0022DA  0100               	movlb	0	; () banked
 11066  0022DC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11067  0022DE  0E0F               	movlw	15
 11068  0022E0  0100               	movlb	0	; () banked
 11069  0022E2  6FAB               	movwf	??_sensorTest& (0+255),b
 11070  0022E4  0EF1               	movlw	241
 11071  0022E6                     u9307:
 11072  0022E6  2EE8               	decfsz	wreg,f,c
 11073  0022E8  D7FE               	bra	u9307
 11074  0022EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11075  0022EC  D7FC               	bra	u9307
 11076  0022EE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11077  0022F0  D7FA               	bra	u9307
 11078                           
 11079                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11080  0022F2  D021               	goto	l7640
 11081  0022F4                     l7634:
 11082                           
 11083                           ;Test.c: 165: readMAG();
 11084  0022F4  EC26  F026         	call	_readMAG	;wreg free
 11085                           
 11086                           ;Test.c: 166: lcdInst(0b10000000);;
 11087  0022F8  0E80               	movlw	128
 11088  0022FA  EC6D  F029         	call	_lcdInst
 11089                           
 11090                           ;Test.c: 167: lcdInst(0b11000000);;
 11091  0022FE  0EC0               	movlw	192
 11092  002300  EC6D  F029         	call	_lcdInst
 11093                           
 11094                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11095  002304  0E2A               	movlw	low STR_83
 11096  002306  0100               	movlb	0	; () banked
 11097  002308  6F8E               	movwf	printf@f& (0+255),b
 11098  00230A  0EFE               	movlw	high STR_83
 11099  00230C  0100               	movlb	0	; () banked
 11100  00230E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11101  002310  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11102  002314  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11103  002318  EC08  F00B         	call	_printf	;wreg free
 11104                           
 11105                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11106  00231C  0E05               	movlw	5
 11107  00231E  0100               	movlb	0	; () banked
 11108  002320  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11109  002322  0E0F               	movlw	15
 11110  002324  0100               	movlb	0	; () banked
 11111  002326  6FAB               	movwf	??_sensorTest& (0+255),b
 11112  002328  0EF1               	movlw	241
 11113  00232A                     u9317:
 11114  00232A  2EE8               	decfsz	wreg,f,c
 11115  00232C  D7FE               	bra	u9317
 11116  00232E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11117  002330  D7FC               	bra	u9317
 11118  002332  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11119  002334  D7FA               	bra	u9317
 11120  002336                     l7640:
 11121  002336  A281               	btfss	3969,1,c	;volatile
 11122  002338  D7DD               	goto	l7634
 11123                           
 11124                           ;Test.c: 170: }
 11125                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11126  00233A  0E01               	movlw	1
 11127  00233C  EC6D  F029         	call	_lcdInst
 11128  002340  0E68               	movlw	104
 11129  002342  0100               	movlb	0	; () banked
 11130  002344  6FAB               	movwf	??_sensorTest& (0+255),b
 11131  002346  0EE4               	movlw	228
 11132  002348                     u9327:
 11133  002348  2EE8               	decfsz	wreg,f,c
 11134  00234A  D7FE               	bra	u9327
 11135  00234C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11136  00234E  D7FC               	bra	u9327
 11137  002350  F000               	nop	
 11138  002352  0E80               	movlw	128
 11139  002354  EC6D  F029         	call	_lcdInst
 11140                           
 11141                           ;Test.c: 176: printf("TST: COND");
 11142  002358  0E87               	movlw	low STR_84
 11143  00235A  0100               	movlb	0	; () banked
 11144  00235C  6F8E               	movwf	printf@f& (0+255),b
 11145  00235E  0EFF               	movlw	high STR_84
 11146  002360  0100               	movlb	0	; () banked
 11147  002362  6F8F               	movwf	(printf@f+1)& (0+255),b
 11148  002364  EC08  F00B         	call	_printf	;wreg free
 11149                           
 11150                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11151  002368  0E05               	movlw	5
 11152  00236A  0100               	movlb	0	; () banked
 11153  00236C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11154  00236E  0E0F               	movlw	15
 11155  002370  0100               	movlb	0	; () banked
 11156  002372  6FAB               	movwf	??_sensorTest& (0+255),b
 11157  002374  0EF1               	movlw	241
 11158  002376                     u9337:
 11159  002376  2EE8               	decfsz	wreg,f,c
 11160  002378  D7FE               	bra	u9337
 11161  00237A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11162  00237C  D7FC               	bra	u9337
 11163  00237E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11164  002380  D7FA               	bra	u9337
 11165  002382                     l7652:
 11166                           
 11167                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11168  002382  0E01               	movlw	1
 11169  002384  EC6D  F029         	call	_lcdInst
 11170  002388  0E68               	movlw	104
 11171  00238A  0100               	movlb	0	; () banked
 11172  00238C  6FAB               	movwf	??_sensorTest& (0+255),b
 11173  00238E  0EE4               	movlw	228
 11174  002390                     u9347:
 11175  002390  2EE8               	decfsz	wreg,f,c
 11176  002392  D7FE               	bra	u9347
 11177  002394  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11178  002396  D7FC               	bra	u9347
 11179  002398  F000               	nop	
 11180  00239A  0E80               	movlw	128
 11181  00239C  EC6D  F029         	call	_lcdInst
 11182                           
 11183                           ;Test.c: 180: printf("TST: COND");
 11184  0023A0  0E87               	movlw	low STR_84
 11185  0023A2  0100               	movlb	0	; () banked
 11186  0023A4  6F8E               	movwf	printf@f& (0+255),b
 11187  0023A6  0EFF               	movlw	high STR_84
 11188  0023A8  0100               	movlb	0	; () banked
 11189  0023AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11190  0023AC  EC08  F00B         	call	_printf	;wreg free
 11191                           
 11192                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11193  0023B0  D01B               	goto	l7664
 11194  0023B2                     l7660:
 11195                           
 11196                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11197  0023B2  0E80               	movlw	128
 11198  0023B4  EC6D  F029         	call	_lcdInst
 11199  0023B8  0EC0               	movlw	192
 11200  0023BA  EC6D  F029         	call	_lcdInst
 11201                           
 11202                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11203  0023BE  0EA5               	movlw	low STR_86
 11204  0023C0  0100               	movlb	0	; () banked
 11205  0023C2  6F8E               	movwf	printf@f& (0+255),b
 11206  0023C4  0EFF               	movlw	high STR_86
 11207  0023C6  0100               	movlb	0	; () banked
 11208  0023C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11209  0023CA  A480               	btfss	3968,2,c	;volatile
 11210  0023CC  D004               	goto	u6160
 11211  0023CE  0100               	movlb	0	; () banked
 11212  0023D0  6BAB               	clrf	??_sensorTest& (0+255),b
 11213  0023D2  2BAB               	incf	??_sensorTest& (0+255),f,b
 11214  0023D4  D002               	goto	u6168
 11215  0023D6                     u6160:
 11216  0023D6  0100               	movlb	0	; () banked
 11217  0023D8  6BAB               	clrf	??_sensorTest& (0+255),b
 11218  0023DA                     u6168:
 11219  0023DA  0100               	movlb	0	; () banked
 11220  0023DC  51AB               	movf	??_sensorTest& (0+255),w,b
 11221  0023DE  0100               	movlb	0	; () banked
 11222  0023E0  6F90               	movwf	(?_printf+2)& (0+255),b
 11223  0023E2  6B91               	clrf	(?_printf+3)& (0+255),b
 11224  0023E4  EC08  F00B         	call	_printf	;wreg free
 11225  0023E8                     l7664:
 11226  0023E8  A281               	btfss	3969,1,c	;volatile
 11227  0023EA  D7E3               	goto	l7660
 11228                           
 11229                           ;Test.c: 187: }
 11230                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11231  0023EC  3881               	swapf	3969,w,c	;volatile
 11232  0023EE  0B0F               	andlw	15
 11233  0023F0  0A0F               	xorlw	15
 11234  0023F2  B4D8               	btfsc	status,2,c
 11235  0023F4  0012               	return	
 11236                           
 11237                           ;Test.c: 191: else{
 11238                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11239                           
 11240                           ;Test.c: 190: }
 11241                           
 11242                           ;Test.c: 189: break;
 11243  0023F6  8689               	bsf	3977,3,c	;volatile
 11244                           
 11245                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11246  0023F8  D01B               	goto	l7676
 11247  0023FA                     l7672:
 11248                           
 11249                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11250  0023FA  0E80               	movlw	128
 11251  0023FC  EC6D  F029         	call	_lcdInst
 11252  002400  0EC0               	movlw	192
 11253  002402  EC6D  F029         	call	_lcdInst
 11254                           
 11255                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11256  002406  0EA5               	movlw	low STR_86
 11257  002408  0100               	movlb	0	; () banked
 11258  00240A  6F8E               	movwf	printf@f& (0+255),b
 11259  00240C  0EFF               	movlw	high STR_86
 11260  00240E  0100               	movlb	0	; () banked
 11261  002410  6F8F               	movwf	(printf@f+1)& (0+255),b
 11262  002412  A480               	btfss	3968,2,c	;volatile
 11263  002414  D004               	goto	u6190
 11264  002416  0100               	movlb	0	; () banked
 11265  002418  6BAB               	clrf	??_sensorTest& (0+255),b
 11266  00241A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11267  00241C  D002               	goto	u6198
 11268  00241E                     u6190:
 11269  00241E  0100               	movlb	0	; () banked
 11270  002420  6BAB               	clrf	??_sensorTest& (0+255),b
 11271  002422                     u6198:
 11272  002422  0100               	movlb	0	; () banked
 11273  002424  51AB               	movf	??_sensorTest& (0+255),w,b
 11274  002426  0100               	movlb	0	; () banked
 11275  002428  6F90               	movwf	(?_printf+2)& (0+255),b
 11276  00242A  6B91               	clrf	(?_printf+3)& (0+255),b
 11277  00242C  EC08  F00B         	call	_printf	;wreg free
 11278  002430                     l7676:
 11279  002430  B281               	btfsc	3969,1,c	;volatile
 11280  002432  D7E3               	goto	l7672
 11281                           
 11282                           ;Test.c: 197: }
 11283                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11284  002434  9689               	bcf	3977,3,c	;volatile
 11285  002436  D7A5               	goto	l7652
 11286  002438                     __end_of_sensorTest:
 11287                           	opt stack 0
 11288                           tblptru	equ	0xFF8
 11289                           tblptrh	equ	0xFF7
 11290                           tblptrl	equ	0xFF6
 11291                           tablat	equ	0xFF5
 11292                           prodh	equ	0xFF4
 11293                           prodl	equ	0xFF3
 11294                           intcon	equ	0xFF2
 11295                           intcon2	equ	0xFF1
 11296                           intcon3	equ	0xFF0
 11297                           postinc0	equ	0xFEE
 11298                           wreg	equ	0xFE8
 11299                           postdec1	equ	0xFE5
 11300                           fsr1l	equ	0xFE1
 11301                           indf2	equ	0xFDF
 11302                           postinc2	equ	0xFDE
 11303                           postdec2	equ	0xFDD
 11304                           fsr2h	equ	0xFDA
 11305                           fsr2l	equ	0xFD9
 11306                           status	equ	0xFD8
 11307                           
 11308 ;; *************** function _readMAG *****************
 11309 ;; Defined at:
 11310 ;;		line 29 in file "ADCFunctionality.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;		None
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;  res             2    4[BANK0 ] int 
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      void 
 11317 ;; Registers used:
 11318 ;;		wreg, status,2, status,0, cstack
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/0
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11327 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11328 ;;Total ram usage:        4 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    8
 11331 ;; This function calls:
 11332 ;;		_readADC
 11333 ;; This function is called by:
 11334 ;;		_getMAG
 11335 ;;		_sensorTest
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           	psect	text38
 11340  004C4C                     __ptext38:
 11341                           	opt stack 0
 11342  004C4C                     _readMAG:
 11343                           	opt stack 19
 11344                           
 11345                           ;ADCFunctionality.c: 30: readADC(1);
 11346                           
 11347                           ;incstack = 0
 11348  004C4C  0E01               	movlw	1
 11349  004C4E  EC64  F028         	call	_readADC
 11350                           
 11351                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11352  004C52  50C3               	movf	4035,w,c	;volatile
 11353  004C54  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11354  004C58  0100               	movlb	0	; () banked
 11355  004C5A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11356  004C5C  C082  F083         	movff	??_readMAG,??_readMAG+1
 11357  004C60  0100               	movlb	0	; () banked
 11358  004C62  6B82               	clrf	??_readMAG& (0+255),b
 11359  004C64  0100               	movlb	0	; () banked
 11360  004C66  1182               	iorwf	??_readMAG& (0+255),w,b
 11361  004C68  0100               	movlb	0	; () banked
 11362  004C6A  6F84               	movwf	readMAG@res& (0+255),b
 11363  004C6C  0100               	movlb	0	; () banked
 11364  004C6E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11365  004C70  0100               	movlb	0	; () banked
 11366  004C72  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11370  004C74  0100               	movlb	0	; () banked
 11371  004C76  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11372  004C78  D008               	goto	u4551
 11373  004C7A  0100               	movlb	0	; () banked
 11374  004C7C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11375  004C7E  E107               	bnz	u4550
 11376  004C80  0E96               	movlw	150
 11377  004C82  0100               	movlb	0	; () banked
 11378  004C84  5D84               	subwf	readMAG@res& (0+255),w,b
 11379  004C86  B0D8               	btfsc	status,0,c
 11380  004C88  D002               	goto	u4550
 11381  004C8A                     u4551:
 11382  004C8A  0E01               	movlw	1
 11383  004C8C  D001               	goto	u4560
 11384  004C8E                     u4550:
 11385  004C8E  0E00               	movlw	0
 11386  004C90                     u4560:
 11387  004C90  0100               	movlb	0	; () banked
 11388  004C92  6FE8               	movwf	_MAG_signal& (0+255),b
 11389  004C94  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11390                           
 11391                           ; BSR set to: 0
 11392  004C96  0012               	return		;funcret
 11393  004C98                     __end_of_readMAG:
 11394                           	opt stack 0
 11395                           tblptru	equ	0xFF8
 11396                           tblptrh	equ	0xFF7
 11397                           tblptrl	equ	0xFF6
 11398                           tablat	equ	0xFF5
 11399                           prodh	equ	0xFF4
 11400                           prodl	equ	0xFF3
 11401                           intcon	equ	0xFF2
 11402                           intcon2	equ	0xFF1
 11403                           intcon3	equ	0xFF0
 11404                           postinc0	equ	0xFEE
 11405                           wreg	equ	0xFE8
 11406                           postdec1	equ	0xFE5
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           fsr2h	equ	0xFDA
 11412                           fsr2l	equ	0xFD9
 11413                           status	equ	0xFD8
 11414                           
 11415 ;; *************** function _algorithmTest *****************
 11416 ;; Defined at:
 11417 ;;		line 80 in file "Test.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;		None
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;		None
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  1    wreg      void 
 11424 ;; Registers used:
 11425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11435 ;;Total ram usage:        2 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; Hardware stack levels required when called:   10
 11438 ;; This function calls:
 11439 ;;		_lcdInst
 11440 ;;		_printf
 11441 ;; This function is called by:
 11442 ;;		_Test
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           	psect	text39
 11447  003F56                     __ptext39:
 11448                           	opt stack 0
 11449  003F56                     _algorithmTest:
 11450                           	opt stack 19
 11451                           
 11452                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;incstack = 0
 11456  003F56  0E01               	movlw	1
 11457  003F58  EC6D  F029         	call	_lcdInst
 11458  003F5C  0E68               	movlw	104
 11459  003F5E  0100               	movlb	0	; () banked
 11460  003F60  6FAB               	movwf	??_algorithmTest& (0+255),b
 11461  003F62  0EE4               	movlw	228
 11462  003F64                     u9357:
 11463  003F64  2EE8               	decfsz	wreg,f,c
 11464  003F66  D7FE               	bra	u9357
 11465  003F68  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11466  003F6A  D7FC               	bra	u9357
 11467  003F6C  F000               	nop	
 11468  003F6E  0E80               	movlw	128
 11469  003F70  EC6D  F029         	call	_lcdInst
 11470                           
 11471                           ;Test.c: 83: printf("ALGORITHM TEST");
 11472  003F74  0ED2               	movlw	low STR_70
 11473  003F76  0100               	movlb	0	; () banked
 11474  003F78  6F8E               	movwf	printf@f& (0+255),b
 11475  003F7A  0EFE               	movlw	high STR_70
 11476  003F7C  0100               	movlb	0	; () banked
 11477  003F7E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11478  003F80  EC08  F00B         	call	_printf	;wreg free
 11479                           
 11480                           ;Test.c: 84: lcdInst(0b11000000);;
 11481  003F84  0EC0               	movlw	192
 11482  003F86  EC6D  F029         	call	_lcdInst
 11483                           
 11484                           ;Test.c: 85: printf("PUSH TO START");
 11485  003F8A  0E0B               	movlw	low STR_71
 11486  003F8C  0100               	movlb	0	; () banked
 11487  003F8E  6F8E               	movwf	printf@f& (0+255),b
 11488  003F90  0EFF               	movlw	high STR_71
 11489  003F92  0100               	movlb	0	; () banked
 11490  003F94  6F8F               	movwf	(printf@f+1)& (0+255),b
 11491  003F96  EC08  F00B         	call	_printf	;wreg free
 11492                           
 11493                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11494  003F9A  0E05               	movlw	5
 11495  003F9C  0100               	movlb	0	; () banked
 11496  003F9E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11497  003FA0  0E0F               	movlw	15
 11498  003FA2  0100               	movlb	0	; () banked
 11499  003FA4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11500  003FA6  0EF1               	movlw	241
 11501  003FA8                     u9367:
 11502  003FA8  2EE8               	decfsz	wreg,f,c
 11503  003FAA  D7FE               	bra	u9367
 11504  003FAC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11505  003FAE  D7FC               	bra	u9367
 11506  003FB0  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11507  003FB2  D7FA               	bra	u9367
 11508  003FB4                     l1170:
 11509  003FB4  A281               	btfss	3969,1,c	;volatile
 11510  003FB6  D7FE               	goto	l1170
 11511  003FB8                     l1173:
 11512  003FB8  B281               	btfsc	3969,1,c	;volatile
 11513  003FBA  D7FE               	goto	l1173
 11514                           
 11515                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11516  003FBC  0E01               	movlw	1
 11517  003FBE  EC6D  F029         	call	_lcdInst
 11518  003FC2  0E68               	movlw	104
 11519  003FC4  0100               	movlb	0	; () banked
 11520  003FC6  6FAB               	movwf	??_algorithmTest& (0+255),b
 11521  003FC8  0EE4               	movlw	228
 11522  003FCA                     u9377:
 11523  003FCA  2EE8               	decfsz	wreg,f,c
 11524  003FCC  D7FE               	bra	u9377
 11525  003FCE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11526  003FD0  D7FC               	bra	u9377
 11527  003FD2  F000               	nop	
 11528  003FD4  0E80               	movlw	128
 11529  003FD6  EC6D  F029         	call	_lcdInst
 11530                           
 11531                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11532  003FDA  0E5F               	movlw	low STR_72
 11533  003FDC  0100               	movlb	0	; () banked
 11534  003FDE  6F8E               	movwf	printf@f& (0+255),b
 11535  003FE0  0EFC               	movlw	high STR_72
 11536  003FE2  0100               	movlb	0	; () banked
 11537  003FE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11538  003FE6  EC08  F00B         	call	_printf	;wreg free
 11539                           
 11540                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11541  003FEA  0EEF               	movlw	low STR_73
 11542  003FEC  0100               	movlb	0	; () banked
 11543  003FEE  6F8E               	movwf	printf@f& (0+255),b
 11544  003FF0  0EFE               	movlw	high STR_73
 11545  003FF2  0100               	movlb	0	; () banked
 11546  003FF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11547  003FF6  EC08  F00B         	call	_printf	;wreg free
 11548                           
 11549                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11550  003FFA  0E4F               	movlw	low STR_74
 11551  003FFC  0100               	movlb	0	; () banked
 11552  003FFE  6F8E               	movwf	printf@f& (0+255),b
 11553  004000  0EFF               	movlw	high STR_74
 11554  004002  0100               	movlb	0	; () banked
 11555  004004  6F8F               	movwf	(printf@f+1)& (0+255),b
 11556  004006  EC08  F00B         	call	_printf	;wreg free
 11557                           
 11558                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11559  00400A  0EB4               	movlw	low STR_75
 11560  00400C  0100               	movlb	0	; () banked
 11561  00400E  6F8E               	movwf	printf@f& (0+255),b
 11562  004010  0EFE               	movlw	high STR_75
 11563  004012  0100               	movlb	0	; () banked
 11564  004014  6F8F               	movwf	(printf@f+1)& (0+255),b
 11565  004016  EC08  F00B         	call	_printf	;wreg free
 11566                           
 11567                           ;Test.c: 121: printf("ALG5: NO CANS");
 11568  00401A  0EFD               	movlw	low STR_76
 11569  00401C  0100               	movlb	0	; () banked
 11570  00401E  6F8E               	movwf	printf@f& (0+255),b
 11571  004020  0EFE               	movlw	high STR_76
 11572  004022  0100               	movlb	0	; () banked
 11573  004024  6F8F               	movwf	(printf@f+1)& (0+255),b
 11574  004026  EC08  F00B         	call	_printf	;wreg free
 11575  00402A  0012               	return		;funcret
 11576  00402C                     __end_of_algorithmTest:
 11577                           	opt stack 0
 11578                           tblptru	equ	0xFF8
 11579                           tblptrh	equ	0xFF7
 11580                           tblptrl	equ	0xFF6
 11581                           tablat	equ	0xFF5
 11582                           prodh	equ	0xFF4
 11583                           prodl	equ	0xFF3
 11584                           intcon	equ	0xFF2
 11585                           intcon2	equ	0xFF1
 11586                           intcon3	equ	0xFF0
 11587                           postinc0	equ	0xFEE
 11588                           wreg	equ	0xFE8
 11589                           postdec1	equ	0xFE5
 11590                           fsr1l	equ	0xFE1
 11591                           indf2	equ	0xFDF
 11592                           postinc2	equ	0xFDE
 11593                           postdec2	equ	0xFDD
 11594                           fsr2h	equ	0xFDA
 11595                           fsr2l	equ	0xFD9
 11596                           status	equ	0xFD8
 11597                           
 11598 ;; *************** function _actuatorTest *****************
 11599 ;; Defined at:
 11600 ;;		line 203 in file "Test.c"
 11601 ;; Parameters:    Size  Location     Type
 11602 ;;		None
 11603 ;; Auto vars:     Size  Location     Type
 11604 ;;  i               1   45[BANK0 ] unsigned char 
 11605 ;;  i               1   67[BANK0 ] unsigned char 
 11606 ;;  i               1   66[BANK0 ] unsigned char 
 11607 ;;  i               1   65[BANK0 ] unsigned char 
 11608 ;;  i               1   64[BANK0 ] unsigned char 
 11609 ;;  i               1   63[BANK0 ] unsigned char 
 11610 ;;  i               1   62[BANK0 ] unsigned char 
 11611 ;;  i               1   61[BANK0 ] unsigned char 
 11612 ;;  i               1   60[BANK0 ] unsigned char 
 11613 ;;  i               1   59[BANK0 ] unsigned char 
 11614 ;;  i               1   58[BANK0 ] unsigned char 
 11615 ;;  i               1   57[BANK0 ] unsigned char 
 11616 ;;  i               1   56[BANK0 ] unsigned char 
 11617 ;;  i               1   55[BANK0 ] unsigned char 
 11618 ;;  i               1   54[BANK0 ] unsigned char 
 11619 ;;  i               1   53[BANK0 ] unsigned char 
 11620 ;;  i               1   52[BANK0 ] unsigned char 
 11621 ;;  i               1   51[BANK0 ] unsigned char 
 11622 ;;  i               1   50[BANK0 ] unsigned char 
 11623 ;;  i               1   49[BANK0 ] unsigned char 
 11624 ;;  i               1   48[BANK0 ] unsigned char 
 11625 ;;  i               1   47[BANK0 ] unsigned char 
 11626 ;;  i               1   46[BANK0 ] unsigned char 
 11627 ;;  i               2   68[BANK0 ] int 
 11628 ;; Return value:  Size  Location     Type
 11629 ;;                  1    wreg      void 
 11630 ;; Registers used:
 11631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11632 ;; Tracked objects:
 11633 ;;		On entry : 0/0
 11634 ;;		On exit  : 0/0
 11635 ;;		Unchanged: 0/0
 11636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11638 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11639 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;Total ram usage:       27 bytes
 11642 ;; Hardware stack levels used:    1
 11643 ;; Hardware stack levels required when called:   10
 11644 ;; This function calls:
 11645 ;;		_lcdInst
 11646 ;;		_printf
 11647 ;;		_updateServoPosition
 11648 ;; This function is called by:
 11649 ;;		_Test
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           	psect	text40
 11654  000012                     __ptext40:
 11655                           	opt stack 0
 11656  000012                     _actuatorTest:
 11657                           	opt stack 19
 11658                           
 11659                           ;Test.c: 205: int i = 0;
 11660                           
 11661                           ;incstack = 0
 11662  000012  0E00               	movlw	0
 11663  000014  0100               	movlb	0	; () banked
 11664  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11665  000018  0E00               	movlw	0
 11666  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11670  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11674  00001E  0E01               	movlw	1
 11675  000020  EC6D  F029         	call	_lcdInst
 11676  000024  0E68               	movlw	104
 11677  000026  0100               	movlb	0	; () banked
 11678  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11679  00002A  0EE4               	movlw	228
 11680  00002C                     u9387:
 11681  00002C  2EE8               	decfsz	wreg,f,c
 11682  00002E  D7FE               	bra	u9387
 11683  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11684  000032  D7FC               	bra	u9387
 11685  000034  F000               	nop	
 11686  000036  0E80               	movlw	128
 11687  000038  EC6D  F029         	call	_lcdInst
 11688                           
 11689                           ;Test.c: 209: printf("ACTUATORS");
 11690  00003C  0E91               	movlw	low STR_88
 11691  00003E  0100               	movlb	0	; () banked
 11692  000040  6F8E               	movwf	printf@f& (0+255),b
 11693  000042  0EFF               	movlw	high STR_88
 11694  000044  0100               	movlb	0	; () banked
 11695  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11696  000048  EC08  F00B         	call	_printf	;wreg free
 11697                           
 11698                           ;Test.c: 210: lcdInst(0b11000000);;
 11699  00004C  0EC0               	movlw	192
 11700  00004E  EC6D  F029         	call	_lcdInst
 11701                           
 11702                           ;Test.c: 211: printf("PUSH TO START");
 11703  000052  0E0B               	movlw	low STR_71
 11704  000054  0100               	movlb	0	; () banked
 11705  000056  6F8E               	movwf	printf@f& (0+255),b
 11706  000058  0EFF               	movlw	high STR_71
 11707  00005A  0100               	movlb	0	; () banked
 11708  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11709  00005E  EC08  F00B         	call	_printf	;wreg free
 11710                           
 11711                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11712  000062  0E05               	movlw	5
 11713  000064  0100               	movlb	0	; () banked
 11714  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11715  000068  0E0F               	movlw	15
 11716  00006A  0100               	movlb	0	; () banked
 11717  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11718  00006E  0EF1               	movlw	241
 11719  000070                     u9397:
 11720  000070  2EE8               	decfsz	wreg,f,c
 11721  000072  D7FE               	bra	u9397
 11722  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11723  000076  D7FC               	bra	u9397
 11724  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11725  00007A  D7FA               	bra	u9397
 11726  00007C                     l1205:
 11727  00007C  A281               	btfss	3969,1,c	;volatile
 11728  00007E  D7FE               	goto	l1205
 11729  000080                     l1208:
 11730  000080  B281               	btfsc	3969,1,c	;volatile
 11731  000082  D7FE               	goto	l1208
 11732                           
 11733                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11734  000084  0E01               	movlw	1
 11735  000086  EC6D  F029         	call	_lcdInst
 11736  00008A  0E68               	movlw	104
 11737  00008C  0100               	movlb	0	; () banked
 11738  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11739  000090  0EE4               	movlw	228
 11740  000092                     u9407:
 11741  000092  2EE8               	decfsz	wreg,f,c
 11742  000094  D7FE               	bra	u9407
 11743  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11744  000098  D7FC               	bra	u9407
 11745  00009A  F000               	nop	
 11746  00009C  0E80               	movlw	128
 11747  00009E  EC6D  F029         	call	_lcdInst
 11748                           
 11749                           ;Test.c: 220: printf("TST: DC MOTORS");
 11750  0000A2  0EC3               	movlw	low STR_90
 11751  0000A4  0100               	movlb	0	; () banked
 11752  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11753  0000A8  0EFE               	movlw	high STR_90
 11754  0000AA  0100               	movlb	0	; () banked
 11755  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11756  0000AE  EC08  F00B         	call	_printf	;wreg free
 11757                           
 11758                           ;Test.c: 221: lcdInst(0b11000000);;
 11759  0000B2  0EC0               	movlw	192
 11760  0000B4  EC6D  F029         	call	_lcdInst
 11761                           
 11762                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11763  0000B8  0EE1               	movlw	low STR_91
 11764  0000BA  0100               	movlb	0	; () banked
 11765  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11766  0000BE  0EFE               	movlw	high STR_91
 11767  0000C0  0100               	movlb	0	; () banked
 11768  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11769  0000C4  EC08  F00B         	call	_printf	;wreg free
 11770                           
 11771                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11772  0000C8  848A               	bsf	3978,2,c	;volatile
 11773                           
 11774                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11775  0000CA  0E00               	movlw	0
 11776  0000CC  0100               	movlb	0	; () banked
 11777  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11778  0000D0  0E00               	movlw	0
 11779  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11780                           
 11781                           ; BSR set to: 0
 11782  0000D4  0100               	movlb	0	; () banked
 11783  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11784  0000D8  D008               	goto	l7716
 11785  0000DA  0100               	movlb	0	; () banked
 11786  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11787  0000DE  E123               	bnz	l1212
 11788  0000E0  0E05               	movlw	5
 11789  0000E2  0100               	movlb	0	; () banked
 11790  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11791  0000E6  B0D8               	btfsc	status,0,c
 11792  0000E8  D01E               	goto	l1212
 11793  0000EA                     l7716:
 11794                           
 11795                           ; BSR set to: 0
 11796  0000EA  0E00               	movlw	0
 11797  0000EC  0100               	movlb	0	; () banked
 11798  0000EE  6FAD               	movwf	actuatorTest@i_1734& (0+255),b
 11799  0000F0                     l7718:
 11800                           
 11801                           ; BSR set to: 0
 11802  0000F0  0E63               	movlw	99
 11803  0000F2  0100               	movlb	0	; () banked
 11804  0000F4  65AD               	cpfsgt	actuatorTest@i_1734& (0+255),b
 11805  0000F6  D001               	goto	l7722
 11806  0000F8  D00C               	goto	l7726
 11807  0000FA                     l7722:
 11808                           
 11809                           ; BSR set to: 0
 11810  0000FA  0E68               	movlw	104
 11811  0000FC  0100               	movlb	0	; () banked
 11812  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11813  000100  0EE4               	movlw	228
 11814  000102                     u9417:
 11815  000102  2EE8               	decfsz	wreg,f,c
 11816  000104  D7FE               	bra	u9417
 11817  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11818  000108  D7FC               	bra	u9417
 11819  00010A  F000               	nop	
 11820  00010C  0100               	movlb	0	; () banked
 11821  00010E  2BAD               	incf	actuatorTest@i_1734& (0+255),f,b
 11822  000110  D7EF               	goto	l7718
 11823  000112                     l7726:
 11824                           
 11825                           ; BSR set to: 0
 11826  000112  0100               	movlb	0	; () banked
 11827  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11828  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11829                           
 11830                           ; BSR set to: 0
 11831  000118  0100               	movlb	0	; () banked
 11832  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11833  00011C  D7E6               	goto	l7716
 11834  00011E  0100               	movlb	0	; () banked
 11835  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11836  000122  E101               	bnz	u6260
 11837  000124  D7DD               	goto	L9
 11838  000126                     u6260:
 11839  000126                     l1212:
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11843  000126  948A               	bcf	3978,2,c	;volatile
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11847  000128  0E01               	movlw	1
 11848  00012A  EC6D  F029         	call	_lcdInst
 11849  00012E  0E68               	movlw	104
 11850  000130  0100               	movlb	0	; () banked
 11851  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11852  000134  0EE4               	movlw	228
 11853  000136                     u9427:
 11854  000136  2EE8               	decfsz	wreg,f,c
 11855  000138  D7FE               	bra	u9427
 11856  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11857  00013C  D7FC               	bra	u9427
 11858  00013E  F000               	nop	
 11859  000140  0E80               	movlw	128
 11860  000142  EC6D  F029         	call	_lcdInst
 11861                           
 11862                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11863  000146  0E70               	movlw	low STR_92
 11864  000148  0100               	movlb	0	; () banked
 11865  00014A  6F8E               	movwf	printf@f& (0+255),b
 11866  00014C  0EFC               	movlw	high STR_92
 11867  00014E  0100               	movlb	0	; () banked
 11868  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11869  000152  EC08  F00B         	call	_printf	;wreg free
 11870                           
 11871                           ;Test.c: 233: lcdInst(0b11000000);;
 11872  000156  0EC0               	movlw	192
 11873  000158  EC6D  F029         	call	_lcdInst
 11874                           
 11875                           ;Test.c: 234: printf("PIN RA3...");
 11876  00015C  0E5B               	movlw	low STR_93
 11877  00015E  0100               	movlb	0	; () banked
 11878  000160  6F8E               	movwf	printf@f& (0+255),b
 11879  000162  0EFF               	movlw	high STR_93
 11880  000164  0100               	movlb	0	; () banked
 11881  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11882  000168  EC08  F00B         	call	_printf	;wreg free
 11883                           
 11884                           ;Test.c: 235: for(i=0;i<5;i++){
 11885  00016C  0E00               	movlw	0
 11886  00016E  0100               	movlb	0	; () banked
 11887  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11888  000172  0E00               	movlw	0
 11889  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11890                           
 11891                           ; BSR set to: 0
 11892  000176  0100               	movlb	0	; () banked
 11893  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11894  00017A  D008               	goto	l1215
 11895  00017C  0100               	movlb	0	; () banked
 11896  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11897  000180  E12C               	bnz	l1216
 11898  000182  0E05               	movlw	5
 11899  000184  0100               	movlb	0	; () banked
 11900  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11901  000188  B0D8               	btfsc	status,0,c
 11902  00018A  D027               	goto	l1216
 11903  00018C                     l1215:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11907  00018C  8689               	bsf	3977,3,c	;volatile
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11911  00018E  0E0D               	movlw	13
 11912  000190  0100               	movlb	0	; () banked
 11913  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11914  000194  0E2D               	movlw	45
 11915  000196  0100               	movlb	0	; () banked
 11916  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11917  00019A  0ED7               	movlw	215
 11918  00019C                     u9437:
 11919  00019C  2EE8               	decfsz	wreg,f,c
 11920  00019E  D7FE               	bra	u9437
 11921  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11922  0001A2  D7FC               	bra	u9437
 11923  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11924  0001A6  D7FA               	bra	u9437
 11925  0001A8  D000               	nop2	
 11926                           
 11927                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11928  0001AA  9689               	bcf	3977,3,c	;volatile
 11929                           
 11930                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11931  0001AC  0E1D               	movlw	29
 11932  0001AE  0100               	movlb	0	; () banked
 11933  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11934  0001B2  0E69               	movlw	105
 11935  0001B4  0100               	movlb	0	; () banked
 11936  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11937  0001B8  0EA5               	movlw	165
 11938  0001BA                     u9447:
 11939  0001BA  2EE8               	decfsz	wreg,f,c
 11940  0001BC  D7FE               	bra	u9447
 11941  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11942  0001C0  D7FC               	bra	u9447
 11943  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11944  0001C4  D7FA               	bra	u9447
 11945  0001C6  0100               	movlb	0	; () banked
 11946  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11947  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11948  0001CC  0100               	movlb	0	; () banked
 11949  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11950  0001D0  D7DD               	goto	l1215
 11951  0001D2  0100               	movlb	0	; () banked
 11952  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11953  0001D6  E101               	bnz	u6280
 11954  0001D8  D7D4               	goto	L10
 11955  0001DA                     u6280:
 11956  0001DA                     l1216:
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;Test.c: 240: }
 11960                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11961  0001DA  9689               	bcf	3977,3,c	;volatile
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11965  0001DC  0E01               	movlw	1
 11966  0001DE  EC6D  F029         	call	_lcdInst
 11967  0001E2  0E68               	movlw	104
 11968  0001E4  0100               	movlb	0	; () banked
 11969  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11970  0001E8  0EE4               	movlw	228
 11971  0001EA                     u9457:
 11972  0001EA  2EE8               	decfsz	wreg,f,c
 11973  0001EC  D7FE               	bra	u9457
 11974  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11975  0001F0  D7FC               	bra	u9457
 11976  0001F2  F000               	nop	
 11977  0001F4  0E80               	movlw	128
 11978  0001F6  EC6D  F029         	call	_lcdInst
 11979                           
 11980                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11981  0001FA  0E81               	movlw	low STR_94
 11982  0001FC  0100               	movlb	0	; () banked
 11983  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11984  000200  0EFC               	movlw	high STR_94
 11985  000202  0100               	movlb	0	; () banked
 11986  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11987  000206  EC08  F00B         	call	_printf	;wreg free
 11988                           
 11989                           ;Test.c: 249: lcdInst(0b11000000);;
 11990  00020A  0EC0               	movlw	192
 11991  00020C  EC6D  F029         	call	_lcdInst
 11992                           
 11993                           ;Test.c: 250: printf("PIN RA4...");
 11994  000210  0E66               	movlw	low STR_95
 11995  000212  0100               	movlb	0	; () banked
 11996  000214  6F8E               	movwf	printf@f& (0+255),b
 11997  000216  0EFF               	movlw	high STR_95
 11998  000218  0100               	movlb	0	; () banked
 11999  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12000  00021C  EC08  F00B         	call	_printf	;wreg free
 12001                           
 12002                           ;Test.c: 251: for(i=0;i<5;i++){
 12003  000220  0E00               	movlw	0
 12004  000222  0100               	movlb	0	; () banked
 12005  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12006  000226  0E00               	movlw	0
 12007  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12008                           
 12009                           ; BSR set to: 0
 12010  00022A  0100               	movlb	0	; () banked
 12011  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12012  00022E  D008               	goto	l1217
 12013  000230  0100               	movlb	0	; () banked
 12014  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12015  000234  E12C               	bnz	l1218
 12016  000236  0E05               	movlw	5
 12017  000238  0100               	movlb	0	; () banked
 12018  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12019  00023C  B0D8               	btfsc	status,0,c
 12020  00023E  D027               	goto	l1218
 12021  000240                     l1217:
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12025  000240  8889               	bsf	3977,4,c	;volatile
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12029  000242  0E0D               	movlw	13
 12030  000244  0100               	movlb	0	; () banked
 12031  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12032  000248  0E2D               	movlw	45
 12033  00024A  0100               	movlb	0	; () banked
 12034  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12035  00024E  0ED7               	movlw	215
 12036  000250                     u9467:
 12037  000250  2EE8               	decfsz	wreg,f,c
 12038  000252  D7FE               	bra	u9467
 12039  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12040  000256  D7FC               	bra	u9467
 12041  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12042  00025A  D7FA               	bra	u9467
 12043  00025C  D000               	nop2	
 12044                           
 12045                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12046  00025E  9889               	bcf	3977,4,c	;volatile
 12047                           
 12048                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12049  000260  0E1D               	movlw	29
 12050  000262  0100               	movlb	0	; () banked
 12051  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12052  000266  0E69               	movlw	105
 12053  000268  0100               	movlb	0	; () banked
 12054  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12055  00026C  0EA5               	movlw	165
 12056  00026E                     u9477:
 12057  00026E  2EE8               	decfsz	wreg,f,c
 12058  000270  D7FE               	bra	u9477
 12059  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12060  000274  D7FC               	bra	u9477
 12061  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12062  000278  D7FA               	bra	u9477
 12063  00027A  0100               	movlb	0	; () banked
 12064  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12065  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12066  000280  0100               	movlb	0	; () banked
 12067  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12068  000284  D7DD               	goto	l1217
 12069  000286  0100               	movlb	0	; () banked
 12070  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12071  00028A  E101               	bnz	u6300
 12072  00028C  D7D4               	goto	L11
 12073  00028E                     u6300:
 12074  00028E                     l1218:
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;Test.c: 256: }
 12078                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12079  00028E  9889               	bcf	3977,4,c	;volatile
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12083  000290  0E01               	movlw	1
 12084  000292  EC6D  F029         	call	_lcdInst
 12085  000296  0E68               	movlw	104
 12086  000298  0100               	movlb	0	; () banked
 12087  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12088  00029C  0EE4               	movlw	228
 12089  00029E                     u9487:
 12090  00029E  2EE8               	decfsz	wreg,f,c
 12091  0002A0  D7FE               	bra	u9487
 12092  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12093  0002A4  D7FC               	bra	u9487
 12094  0002A6  F000               	nop	
 12095  0002A8  0E80               	movlw	128
 12096  0002AA  EC6D  F029         	call	_lcdInst
 12097                           
 12098                           ;Test.c: 261: machine_state = Sorting_state;
 12099  0002AE  0E01               	movlw	1
 12100  0002B0  0100               	movlb	0	; () banked
 12101  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;Test.c: 262: was_low_1 = 0;
 12105  0002B4  0E00               	movlw	0
 12106  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12107  0002B8  0E00               	movlw	0
 12108  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;Test.c: 263: was_low_1 = 0;
 12112  0002BC  0E00               	movlw	0
 12113  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12114  0002C0  0E00               	movlw	0
 12115  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;Test.c: 270: printf("TST: PAN SERVO");
 12119  0002C4  0EA5               	movlw	low STR_96
 12120  0002C6  0100               	movlb	0	; () banked
 12121  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12122  0002CA  0EFE               	movlw	high STR_96
 12123  0002CC  0100               	movlb	0	; () banked
 12124  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12125  0002D0  EC08  F00B         	call	_printf	;wreg free
 12126                           
 12127                           ;Test.c: 271: lcdInst(0b11000000);;
 12128  0002D4  0EC0               	movlw	192
 12129  0002D6  EC6D  F029         	call	_lcdInst
 12130                           
 12131                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12132  0002DA  0E0A               	movlw	low STR_97
 12133  0002DC  0100               	movlb	0	; () banked
 12134  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12135  0002E0  0EFC               	movlw	high STR_97
 12136  0002E2  0100               	movlb	0	; () banked
 12137  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12138  0002E6  EC08  F00B         	call	_printf	;wreg free
 12139                           
 12140                           ;Test.c: 273: updateServoPosition(1200, 1);
 12141  0002EA  0E04               	movlw	4
 12142  0002EC  0100               	movlb	0	; () banked
 12143  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12144  0002F0  0EB0               	movlw	176
 12145  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12146  0002F4  0E00               	movlw	0
 12147  0002F6  0100               	movlb	0	; () banked
 12148  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12149  0002FA  0E01               	movlw	1
 12150  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12151  0002FE  ECBA  F022         	call	_updateServoPosition	;wreg free
 12152                           
 12153                           ;Test.c: 274: TMR1ON = 1;
 12154  000302  80CD               	bsf	4045,0,c	;volatile
 12155                           
 12156                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12157  000304  0E00               	movlw	0
 12158  000306  0100               	movlb	0	; () banked
 12159  000308  6FAE               	movwf	actuatorTest@i_1741& (0+255),b
 12160  00030A                     l7802:
 12161                           
 12162                           ; BSR set to: 0
 12163  00030A  0E63               	movlw	99
 12164  00030C  0100               	movlb	0	; () banked
 12165  00030E  65AE               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12166  000310  D001               	goto	l7806
 12167  000312  D00C               	goto	l7810
 12168  000314                     l7806:
 12169                           
 12170                           ; BSR set to: 0
 12171  000314  0E68               	movlw	104
 12172  000316  0100               	movlb	0	; () banked
 12173  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12174  00031A  0EE4               	movlw	228
 12175  00031C                     u9497:
 12176  00031C  2EE8               	decfsz	wreg,f,c
 12177  00031E  D7FE               	bra	u9497
 12178  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12179  000322  D7FC               	bra	u9497
 12180  000324  F000               	nop	
 12181  000326  0100               	movlb	0	; () banked
 12182  000328  2BAE               	incf	actuatorTest@i_1741& (0+255),f,b
 12183  00032A  D7EF               	goto	l7802
 12184  00032C                     l7810:
 12185                           
 12186                           ; BSR set to: 0
 12187  00032C  0E00               	movlw	0
 12188  00032E  0100               	movlb	0	; () banked
 12189  000330  6FAF               	movwf	actuatorTest@i_1742& (0+255),b
 12190  000332                     l7812:
 12191                           
 12192                           ; BSR set to: 0
 12193  000332  0E63               	movlw	99
 12194  000334  0100               	movlb	0	; () banked
 12195  000336  65AF               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12196  000338  D001               	goto	l7816
 12197  00033A  D00C               	goto	l7820
 12198  00033C                     l7816:
 12199                           
 12200                           ; BSR set to: 0
 12201  00033C  0E68               	movlw	104
 12202  00033E  0100               	movlb	0	; () banked
 12203  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12204  000342  0EE4               	movlw	228
 12205  000344                     u9507:
 12206  000344  2EE8               	decfsz	wreg,f,c
 12207  000346  D7FE               	bra	u9507
 12208  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12209  00034A  D7FC               	bra	u9507
 12210  00034C  F000               	nop	
 12211  00034E  0100               	movlb	0	; () banked
 12212  000350  2BAF               	incf	actuatorTest@i_1742& (0+255),f,b
 12213  000352  D7EF               	goto	l7812
 12214  000354                     l7820:
 12215                           
 12216                           ; BSR set to: 0
 12217                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12218  000354  0E80               	movlw	128
 12219  000356  EC6D  F029         	call	_lcdInst
 12220  00035A  0EC0               	movlw	192
 12221  00035C  EC6D  F029         	call	_lcdInst
 12222                           
 12223                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12224  000360  0EF9               	movlw	low STR_98
 12225  000362  0100               	movlb	0	; () banked
 12226  000364  6F8E               	movwf	printf@f& (0+255),b
 12227  000366  0EFB               	movlw	high STR_98
 12228  000368  0100               	movlb	0	; () banked
 12229  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12230  00036C  EC08  F00B         	call	_printf	;wreg free
 12231                           
 12232                           ;Test.c: 279: updateServoPosition(500, 1);
 12233  000370  0E01               	movlw	1
 12234  000372  0100               	movlb	0	; () banked
 12235  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12236  000376  0EF4               	movlw	244
 12237  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12238  00037A  0E00               	movlw	0
 12239  00037C  0100               	movlb	0	; () banked
 12240  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12241  000380  0E01               	movlw	1
 12242  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12243  000384  ECBA  F022         	call	_updateServoPosition	;wreg free
 12244                           
 12245                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12246  000388  0E00               	movlw	0
 12247  00038A  0100               	movlb	0	; () banked
 12248  00038C  6FB0               	movwf	actuatorTest@i_1744& (0+255),b
 12249  00038E                     l7828:
 12250                           
 12251                           ; BSR set to: 0
 12252  00038E  0E63               	movlw	99
 12253  000390  0100               	movlb	0	; () banked
 12254  000392  65B0               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12255  000394  D001               	goto	l7832
 12256  000396  D00C               	goto	l7836
 12257  000398                     l7832:
 12258                           
 12259                           ; BSR set to: 0
 12260  000398  0E68               	movlw	104
 12261  00039A  0100               	movlb	0	; () banked
 12262  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12263  00039E  0EE4               	movlw	228
 12264  0003A0                     u9517:
 12265  0003A0  2EE8               	decfsz	wreg,f,c
 12266  0003A2  D7FE               	bra	u9517
 12267  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12268  0003A6  D7FC               	bra	u9517
 12269  0003A8  F000               	nop	
 12270  0003AA  0100               	movlb	0	; () banked
 12271  0003AC  2BB0               	incf	actuatorTest@i_1744& (0+255),f,b
 12272  0003AE  D7EF               	goto	l7828
 12273  0003B0                     l7836:
 12274                           
 12275                           ; BSR set to: 0
 12276  0003B0  0E00               	movlw	0
 12277  0003B2  0100               	movlb	0	; () banked
 12278  0003B4  6FB1               	movwf	actuatorTest@i_1745& (0+255),b
 12279  0003B6                     l7838:
 12280                           
 12281                           ; BSR set to: 0
 12282  0003B6  0E63               	movlw	99
 12283  0003B8  0100               	movlb	0	; () banked
 12284  0003BA  65B1               	cpfsgt	actuatorTest@i_1745& (0+255),b
 12285  0003BC  D001               	goto	l7842
 12286  0003BE  D00C               	goto	l7846
 12287  0003C0                     l7842:
 12288                           
 12289                           ; BSR set to: 0
 12290  0003C0  0E68               	movlw	104
 12291  0003C2  0100               	movlb	0	; () banked
 12292  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12293  0003C6  0EE4               	movlw	228
 12294  0003C8                     u9527:
 12295  0003C8  2EE8               	decfsz	wreg,f,c
 12296  0003CA  D7FE               	bra	u9527
 12297  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12298  0003CE  D7FC               	bra	u9527
 12299  0003D0  F000               	nop	
 12300  0003D2  0100               	movlb	0	; () banked
 12301  0003D4  2BB1               	incf	actuatorTest@i_1745& (0+255),f,b
 12302  0003D6  D7EF               	goto	l7838
 12303  0003D8                     l7846:
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12307  0003D8  0E80               	movlw	128
 12308  0003DA  EC6D  F029         	call	_lcdInst
 12309  0003DE  0EC0               	movlw	192
 12310  0003E0  EC6D  F029         	call	_lcdInst
 12311                           
 12312                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12313  0003E4  0ED7               	movlw	low STR_99
 12314  0003E6  0100               	movlb	0	; () banked
 12315  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12316  0003EA  0EFB               	movlw	high STR_99
 12317  0003EC  0100               	movlb	0	; () banked
 12318  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12319  0003F0  EC08  F00B         	call	_printf	;wreg free
 12320                           
 12321                           ;Test.c: 284: updateServoPosition(2400, 1);
 12322  0003F4  0E09               	movlw	9
 12323  0003F6  0100               	movlb	0	; () banked
 12324  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12325  0003FA  0E60               	movlw	96
 12326  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12327  0003FE  0E00               	movlw	0
 12328  000400  0100               	movlb	0	; () banked
 12329  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12330  000404  0E01               	movlw	1
 12331  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12332  000408  ECBA  F022         	call	_updateServoPosition	;wreg free
 12333                           
 12334                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12335  00040C  0E00               	movlw	0
 12336  00040E  0100               	movlb	0	; () banked
 12337  000410  6FB2               	movwf	actuatorTest@i_1747& (0+255),b
 12338  000412                     l7854:
 12339                           
 12340                           ; BSR set to: 0
 12341  000412  0E63               	movlw	99
 12342  000414  0100               	movlb	0	; () banked
 12343  000416  65B2               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12344  000418  D001               	goto	l7858
 12345  00041A  D00C               	goto	l7862
 12346  00041C                     l7858:
 12347                           
 12348                           ; BSR set to: 0
 12349  00041C  0E68               	movlw	104
 12350  00041E  0100               	movlb	0	; () banked
 12351  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12352  000422  0EE4               	movlw	228
 12353  000424                     u9537:
 12354  000424  2EE8               	decfsz	wreg,f,c
 12355  000426  D7FE               	bra	u9537
 12356  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12357  00042A  D7FC               	bra	u9537
 12358  00042C  F000               	nop	
 12359  00042E  0100               	movlb	0	; () banked
 12360  000430  2BB2               	incf	actuatorTest@i_1747& (0+255),f,b
 12361  000432  D7EF               	goto	l7854
 12362  000434                     l7862:
 12363                           
 12364                           ; BSR set to: 0
 12365  000434  0E00               	movlw	0
 12366  000436  0100               	movlb	0	; () banked
 12367  000438  6FB3               	movwf	actuatorTest@i_1748& (0+255),b
 12368  00043A                     l7864:
 12369                           
 12370                           ; BSR set to: 0
 12371  00043A  0E63               	movlw	99
 12372  00043C  0100               	movlb	0	; () banked
 12373  00043E  65B3               	cpfsgt	actuatorTest@i_1748& (0+255),b
 12374  000440  D001               	goto	l7868
 12375  000442  D00C               	goto	l7872
 12376  000444                     l7868:
 12377                           
 12378                           ; BSR set to: 0
 12379  000444  0E68               	movlw	104
 12380  000446  0100               	movlb	0	; () banked
 12381  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12382  00044A  0EE4               	movlw	228
 12383  00044C                     u9547:
 12384  00044C  2EE8               	decfsz	wreg,f,c
 12385  00044E  D7FE               	bra	u9547
 12386  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12387  000452  D7FC               	bra	u9547
 12388  000454  F000               	nop	
 12389  000456  0100               	movlb	0	; () banked
 12390  000458  2BB3               	incf	actuatorTest@i_1748& (0+255),f,b
 12391  00045A  D7EF               	goto	l7864
 12392  00045C                     l7872:
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12396  00045C  0E80               	movlw	128
 12397  00045E  EC6D  F029         	call	_lcdInst
 12398  000462  0EC0               	movlw	192
 12399  000464  EC6D  F029         	call	_lcdInst
 12400                           
 12401                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12402  000468  0E2C               	movlw	low STR_100
 12403  00046A  0100               	movlb	0	; () banked
 12404  00046C  6F8E               	movwf	printf@f& (0+255),b
 12405  00046E  0EFC               	movlw	high STR_100
 12406  000470  0100               	movlb	0	; () banked
 12407  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12408  000474  EC08  F00B         	call	_printf	;wreg free
 12409                           
 12410                           ;Test.c: 289: updateServoPosition(1670, 1);
 12411  000478  0E06               	movlw	6
 12412  00047A  0100               	movlb	0	; () banked
 12413  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12414  00047E  0E86               	movlw	134
 12415  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12416  000482  0E00               	movlw	0
 12417  000484  0100               	movlb	0	; () banked
 12418  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12419  000488  0E01               	movlw	1
 12420  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12421  00048C  ECBA  F022         	call	_updateServoPosition	;wreg free
 12422                           
 12423                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12424  000490  0E00               	movlw	0
 12425  000492  0100               	movlb	0	; () banked
 12426  000494  6FB4               	movwf	actuatorTest@i_1750& (0+255),b
 12427  000496                     l7880:
 12428                           
 12429                           ; BSR set to: 0
 12430  000496  0E63               	movlw	99
 12431  000498  0100               	movlb	0	; () banked
 12432  00049A  65B4               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12433  00049C  D001               	goto	l7884
 12434  00049E  D00C               	goto	l7888
 12435  0004A0                     l7884:
 12436                           
 12437                           ; BSR set to: 0
 12438  0004A0  0E68               	movlw	104
 12439  0004A2  0100               	movlb	0	; () banked
 12440  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12441  0004A6  0EE4               	movlw	228
 12442  0004A8                     u9557:
 12443  0004A8  2EE8               	decfsz	wreg,f,c
 12444  0004AA  D7FE               	bra	u9557
 12445  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12446  0004AE  D7FC               	bra	u9557
 12447  0004B0  F000               	nop	
 12448  0004B2  0100               	movlb	0	; () banked
 12449  0004B4  2BB4               	incf	actuatorTest@i_1750& (0+255),f,b
 12450  0004B6  D7EF               	goto	l7880
 12451  0004B8                     l7888:
 12452                           
 12453                           ; BSR set to: 0
 12454  0004B8  0E00               	movlw	0
 12455  0004BA  0100               	movlb	0	; () banked
 12456  0004BC  6FB5               	movwf	actuatorTest@i_1751& (0+255),b
 12457  0004BE                     l7890:
 12458                           
 12459                           ; BSR set to: 0
 12460  0004BE  0E63               	movlw	99
 12461  0004C0  0100               	movlb	0	; () banked
 12462  0004C2  65B5               	cpfsgt	actuatorTest@i_1751& (0+255),b
 12463  0004C4  D001               	goto	l7894
 12464  0004C6  D00C               	goto	l7898
 12465  0004C8                     l7894:
 12466                           
 12467                           ; BSR set to: 0
 12468  0004C8  0E68               	movlw	104
 12469  0004CA  0100               	movlb	0	; () banked
 12470  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12471  0004CE  0EE4               	movlw	228
 12472  0004D0                     u9567:
 12473  0004D0  2EE8               	decfsz	wreg,f,c
 12474  0004D2  D7FE               	bra	u9567
 12475  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12476  0004D6  D7FC               	bra	u9567
 12477  0004D8  F000               	nop	
 12478  0004DA  0100               	movlb	0	; () banked
 12479  0004DC  2BB5               	incf	actuatorTest@i_1751& (0+255),f,b
 12480  0004DE  D7EF               	goto	l7890
 12481  0004E0                     l7898:
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12485  0004E0  0E80               	movlw	128
 12486  0004E2  EC6D  F029         	call	_lcdInst
 12487  0004E6  0EC0               	movlw	192
 12488  0004E8  EC6D  F029         	call	_lcdInst
 12489                           
 12490                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12491  0004EC  0E3D               	movlw	low STR_101
 12492  0004EE  0100               	movlb	0	; () banked
 12493  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12494  0004F2  0EFC               	movlw	high STR_101
 12495  0004F4  0100               	movlb	0	; () banked
 12496  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12497  0004F8  EC08  F00B         	call	_printf	;wreg free
 12498                           
 12499                           ;Test.c: 294: updateServoPosition(850, 1);
 12500  0004FC  0E03               	movlw	3
 12501  0004FE  0100               	movlb	0	; () banked
 12502  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12503  000502  0E52               	movlw	82
 12504  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12505  000506  0E00               	movlw	0
 12506  000508  0100               	movlb	0	; () banked
 12507  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12508  00050C  0E01               	movlw	1
 12509  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12510  000510  ECBA  F022         	call	_updateServoPosition	;wreg free
 12511                           
 12512                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12513  000514  0E00               	movlw	0
 12514  000516  0100               	movlb	0	; () banked
 12515  000518  6FB6               	movwf	actuatorTest@i_1753& (0+255),b
 12516  00051A                     l7906:
 12517                           
 12518                           ; BSR set to: 0
 12519  00051A  0E63               	movlw	99
 12520  00051C  0100               	movlb	0	; () banked
 12521  00051E  65B6               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12522  000520  D001               	goto	l7910
 12523  000522  D00C               	goto	l7914
 12524  000524                     l7910:
 12525                           
 12526                           ; BSR set to: 0
 12527  000524  0E68               	movlw	104
 12528  000526  0100               	movlb	0	; () banked
 12529  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12530  00052A  0EE4               	movlw	228
 12531  00052C                     u9577:
 12532  00052C  2EE8               	decfsz	wreg,f,c
 12533  00052E  D7FE               	bra	u9577
 12534  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12535  000532  D7FC               	bra	u9577
 12536  000534  F000               	nop	
 12537  000536  0100               	movlb	0	; () banked
 12538  000538  2BB6               	incf	actuatorTest@i_1753& (0+255),f,b
 12539  00053A  D7EF               	goto	l7906
 12540  00053C                     l7914:
 12541                           
 12542                           ; BSR set to: 0
 12543  00053C  0E00               	movlw	0
 12544  00053E  0100               	movlb	0	; () banked
 12545  000540  6FB7               	movwf	actuatorTest@i_1754& (0+255),b
 12546  000542                     l7916:
 12547                           
 12548                           ; BSR set to: 0
 12549  000542  0E63               	movlw	99
 12550  000544  0100               	movlb	0	; () banked
 12551  000546  65B7               	cpfsgt	actuatorTest@i_1754& (0+255),b
 12552  000548  D001               	goto	l7920
 12553  00054A  D00C               	goto	l7924
 12554  00054C                     l7920:
 12555                           
 12556                           ; BSR set to: 0
 12557  00054C  0E68               	movlw	104
 12558  00054E  0100               	movlb	0	; () banked
 12559  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12560  000552  0EE4               	movlw	228
 12561  000554                     u9587:
 12562  000554  2EE8               	decfsz	wreg,f,c
 12563  000556  D7FE               	bra	u9587
 12564  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12565  00055A  D7FC               	bra	u9587
 12566  00055C  F000               	nop	
 12567  00055E  0100               	movlb	0	; () banked
 12568  000560  2BB7               	incf	actuatorTest@i_1754& (0+255),f,b
 12569  000562  D7EF               	goto	l7916
 12570  000564                     l7924:
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12574  000564  0E80               	movlw	128
 12575  000566  EC6D  F029         	call	_lcdInst
 12576  00056A  0EC0               	movlw	192
 12577  00056C  EC6D  F029         	call	_lcdInst
 12578                           
 12579                           ;Test.c: 298: printf("MID -- 2s       ");
 12580  000570  0EB5               	movlw	low STR_102
 12581  000572  0100               	movlb	0	; () banked
 12582  000574  6F8E               	movwf	printf@f& (0+255),b
 12583  000576  0EFB               	movlw	high STR_102
 12584  000578  0100               	movlb	0	; () banked
 12585  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12586  00057C  EC08  F00B         	call	_printf	;wreg free
 12587                           
 12588                           ;Test.c: 299: updateServoPosition(1200, 1);
 12589  000580  0E04               	movlw	4
 12590  000582  0100               	movlb	0	; () banked
 12591  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12592  000586  0EB0               	movlw	176
 12593  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12594  00058A  0E00               	movlw	0
 12595  00058C  0100               	movlb	0	; () banked
 12596  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12597  000590  0E01               	movlw	1
 12598  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12599  000594  ECBA  F022         	call	_updateServoPosition	;wreg free
 12600                           
 12601                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12602  000598  0E00               	movlw	0
 12603  00059A  0100               	movlb	0	; () banked
 12604  00059C  6FB8               	movwf	actuatorTest@i_1756& (0+255),b
 12605  00059E                     l7932:
 12606                           
 12607                           ; BSR set to: 0
 12608  00059E  0E63               	movlw	99
 12609  0005A0  0100               	movlb	0	; () banked
 12610  0005A2  65B8               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12611  0005A4  D001               	goto	l7936
 12612  0005A6  D00C               	goto	l7940
 12613  0005A8                     l7936:
 12614                           
 12615                           ; BSR set to: 0
 12616  0005A8  0E68               	movlw	104
 12617  0005AA  0100               	movlb	0	; () banked
 12618  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12619  0005AE  0EE4               	movlw	228
 12620  0005B0                     u9597:
 12621  0005B0  2EE8               	decfsz	wreg,f,c
 12622  0005B2  D7FE               	bra	u9597
 12623  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12624  0005B6  D7FC               	bra	u9597
 12625  0005B8  F000               	nop	
 12626  0005BA  0100               	movlb	0	; () banked
 12627  0005BC  2BB8               	incf	actuatorTest@i_1756& (0+255),f,b
 12628  0005BE  D7EF               	goto	l7932
 12629  0005C0                     l7940:
 12630                           
 12631                           ; BSR set to: 0
 12632  0005C0  0E00               	movlw	0
 12633  0005C2  0100               	movlb	0	; () banked
 12634  0005C4  6FB9               	movwf	actuatorTest@i_1757& (0+255),b
 12635  0005C6                     l7942:
 12636                           
 12637                           ; BSR set to: 0
 12638  0005C6  0E63               	movlw	99
 12639  0005C8  0100               	movlb	0	; () banked
 12640  0005CA  65B9               	cpfsgt	actuatorTest@i_1757& (0+255),b
 12641  0005CC  D001               	goto	l7946
 12642  0005CE  D00C               	goto	l1242
 12643  0005D0                     l7946:
 12644                           
 12645                           ; BSR set to: 0
 12646  0005D0  0E68               	movlw	104
 12647  0005D2  0100               	movlb	0	; () banked
 12648  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12649  0005D6  0EE4               	movlw	228
 12650  0005D8                     u9607:
 12651  0005D8  2EE8               	decfsz	wreg,f,c
 12652  0005DA  D7FE               	bra	u9607
 12653  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12654  0005DE  D7FC               	bra	u9607
 12655  0005E0  F000               	nop	
 12656  0005E2  0100               	movlb	0	; () banked
 12657  0005E4  2BB9               	incf	actuatorTest@i_1757& (0+255),f,b
 12658  0005E6  D7EF               	goto	l7942
 12659  0005E8                     l1242:
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;Test.c: 301: TMR1ON = 0;
 12663  0005E8  90CD               	bcf	4045,0,c	;volatile
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;Test.c: 308: printf("TST: TILT SERVO");
 12667  0005EA  0E3A               	movlw	low STR_103
 12668  0005EC  0100               	movlb	0	; () banked
 12669  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12670  0005F0  0EFE               	movlw	high STR_103
 12671  0005F2  0100               	movlb	0	; () banked
 12672  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12673  0005F6  EC08  F00B         	call	_printf	;wreg free
 12674                           
 12675                           ;Test.c: 309: lcdInst(0b11000000);;
 12676  0005FA  0EC0               	movlw	192
 12677  0005FC  EC6D  F029         	call	_lcdInst
 12678                           
 12679                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12680  000600  0EE8               	movlw	low STR_104
 12681  000602  0100               	movlb	0	; () banked
 12682  000604  6F8E               	movwf	printf@f& (0+255),b
 12683  000606  0EFB               	movlw	high STR_104
 12684  000608  0100               	movlb	0	; () banked
 12685  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12686  00060C  EC08  F00B         	call	_printf	;wreg free
 12687                           
 12688                           ;Test.c: 311: updateServoPosition(1050, 3);
 12689  000610  0E04               	movlw	4
 12690  000612  0100               	movlb	0	; () banked
 12691  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12692  000616  0E1A               	movlw	26
 12693  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12694  00061A  0E00               	movlw	0
 12695  00061C  0100               	movlb	0	; () banked
 12696  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12697  000620  0E03               	movlw	3
 12698  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12699  000624  ECBA  F022         	call	_updateServoPosition	;wreg free
 12700                           
 12701                           ;Test.c: 312: TMR3ON = 1;
 12702  000628  80B1               	bsf	4017,0,c	;volatile
 12703                           
 12704                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12705  00062A  0E00               	movlw	0
 12706  00062C  0100               	movlb	0	; () banked
 12707  00062E  6FBA               	movwf	actuatorTest@i_1760& (0+255),b
 12708  000630                     l7960:
 12709                           
 12710                           ; BSR set to: 0
 12711  000630  0E63               	movlw	99
 12712  000632  0100               	movlb	0	; () banked
 12713  000634  65BA               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12714  000636  D001               	goto	l7964
 12715  000638  D00C               	goto	l7968
 12716  00063A                     l7964:
 12717                           
 12718                           ; BSR set to: 0
 12719  00063A  0E68               	movlw	104
 12720  00063C  0100               	movlb	0	; () banked
 12721  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12722  000640  0EE4               	movlw	228
 12723  000642                     u9617:
 12724  000642  2EE8               	decfsz	wreg,f,c
 12725  000644  D7FE               	bra	u9617
 12726  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12727  000648  D7FC               	bra	u9617
 12728  00064A  F000               	nop	
 12729  00064C  0100               	movlb	0	; () banked
 12730  00064E  2BBA               	incf	actuatorTest@i_1760& (0+255),f,b
 12731  000650  D7EF               	goto	l7960
 12732  000652                     l7968:
 12733                           
 12734                           ; BSR set to: 0
 12735  000652  0E00               	movlw	0
 12736  000654  0100               	movlb	0	; () banked
 12737  000656  6FBB               	movwf	actuatorTest@i_1761& (0+255),b
 12738  000658                     l7970:
 12739                           
 12740                           ; BSR set to: 0
 12741  000658  0E63               	movlw	99
 12742  00065A  0100               	movlb	0	; () banked
 12743  00065C  65BB               	cpfsgt	actuatorTest@i_1761& (0+255),b
 12744  00065E  D001               	goto	l7974
 12745  000660  D00C               	goto	l7978
 12746  000662                     l7974:
 12747                           
 12748                           ; BSR set to: 0
 12749  000662  0E68               	movlw	104
 12750  000664  0100               	movlb	0	; () banked
 12751  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12752  000668  0EE4               	movlw	228
 12753  00066A                     u9627:
 12754  00066A  2EE8               	decfsz	wreg,f,c
 12755  00066C  D7FE               	bra	u9627
 12756  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12757  000670  D7FC               	bra	u9627
 12758  000672  F000               	nop	
 12759  000674  0100               	movlb	0	; () banked
 12760  000676  2BBB               	incf	actuatorTest@i_1761& (0+255),f,b
 12761  000678  D7EF               	goto	l7970
 12762  00067A                     l7978:
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12766  00067A  0E80               	movlw	128
 12767  00067C  EC6D  F029         	call	_lcdInst
 12768  000680  0EC0               	movlw	192
 12769  000682  EC6D  F029         	call	_lcdInst
 12770                           
 12771                           ;Test.c: 316: printf("DROP -- 2s      ");
 12772  000686  0EC6               	movlw	low STR_105
 12773  000688  0100               	movlb	0	; () banked
 12774  00068A  6F8E               	movwf	printf@f& (0+255),b
 12775  00068C  0EFB               	movlw	high STR_105
 12776  00068E  0100               	movlb	0	; () banked
 12777  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12778  000692  EC08  F00B         	call	_printf	;wreg free
 12779                           
 12780                           ;Test.c: 317: updateServoPosition(1260, 3);
 12781  000696  0E04               	movlw	4
 12782  000698  0100               	movlb	0	; () banked
 12783  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12784  00069C  0EEC               	movlw	236
 12785  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12786  0006A0  0E00               	movlw	0
 12787  0006A2  0100               	movlb	0	; () banked
 12788  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12789  0006A6  0E03               	movlw	3
 12790  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12791  0006AA  ECBA  F022         	call	_updateServoPosition	;wreg free
 12792                           
 12793                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12794  0006AE  0E00               	movlw	0
 12795  0006B0  0100               	movlb	0	; () banked
 12796  0006B2  6FBC               	movwf	actuatorTest@i_1763& (0+255),b
 12797  0006B4                     l7986:
 12798                           
 12799                           ; BSR set to: 0
 12800  0006B4  0E63               	movlw	99
 12801  0006B6  0100               	movlb	0	; () banked
 12802  0006B8  65BC               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12803  0006BA  D001               	goto	l7990
 12804  0006BC  D00C               	goto	l7994
 12805  0006BE                     l7990:
 12806                           
 12807                           ; BSR set to: 0
 12808  0006BE  0E68               	movlw	104
 12809  0006C0  0100               	movlb	0	; () banked
 12810  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12811  0006C4  0EE4               	movlw	228
 12812  0006C6                     u9637:
 12813  0006C6  2EE8               	decfsz	wreg,f,c
 12814  0006C8  D7FE               	bra	u9637
 12815  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12816  0006CC  D7FC               	bra	u9637
 12817  0006CE  F000               	nop	
 12818  0006D0  0100               	movlb	0	; () banked
 12819  0006D2  2BBC               	incf	actuatorTest@i_1763& (0+255),f,b
 12820  0006D4  D7EF               	goto	l7986
 12821  0006D6                     l7994:
 12822                           
 12823                           ; BSR set to: 0
 12824  0006D6  0E00               	movlw	0
 12825  0006D8  0100               	movlb	0	; () banked
 12826  0006DA  6FBD               	movwf	actuatorTest@i_1764& (0+255),b
 12827  0006DC                     l7996:
 12828                           
 12829                           ; BSR set to: 0
 12830  0006DC  0E63               	movlw	99
 12831  0006DE  0100               	movlb	0	; () banked
 12832  0006E0  65BD               	cpfsgt	actuatorTest@i_1764& (0+255),b
 12833  0006E2  D001               	goto	l8000
 12834  0006E4  D00C               	goto	l8004
 12835  0006E6                     l8000:
 12836                           
 12837                           ; BSR set to: 0
 12838  0006E6  0E68               	movlw	104
 12839  0006E8  0100               	movlb	0	; () banked
 12840  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12841  0006EC  0EE4               	movlw	228
 12842  0006EE                     u9647:
 12843  0006EE  2EE8               	decfsz	wreg,f,c
 12844  0006F0  D7FE               	bra	u9647
 12845  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12846  0006F4  D7FC               	bra	u9647
 12847  0006F6  F000               	nop	
 12848  0006F8  0100               	movlb	0	; () banked
 12849  0006FA  2BBD               	incf	actuatorTest@i_1764& (0+255),f,b
 12850  0006FC  D7EF               	goto	l7996
 12851  0006FE                     l8004:
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12855  0006FE  0E80               	movlw	128
 12856  000700  EC6D  F029         	call	_lcdInst
 12857  000704  0EC0               	movlw	192
 12858  000706  EC6D  F029         	call	_lcdInst
 12859                           
 12860                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12861  00070A  0EE8               	movlw	low STR_104
 12862  00070C  0100               	movlb	0	; () banked
 12863  00070E  6F8E               	movwf	printf@f& (0+255),b
 12864  000710  0EFB               	movlw	high STR_104
 12865  000712  0100               	movlb	0	; () banked
 12866  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12867  000716  EC08  F00B         	call	_printf	;wreg free
 12868                           
 12869                           ;Test.c: 322: updateServoPosition(1050, 3);
 12870  00071A  0E04               	movlw	4
 12871  00071C  0100               	movlb	0	; () banked
 12872  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12873  000720  0E1A               	movlw	26
 12874  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12875  000724  0E00               	movlw	0
 12876  000726  0100               	movlb	0	; () banked
 12877  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12878  00072A  0E03               	movlw	3
 12879  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12880  00072E  ECBA  F022         	call	_updateServoPosition	;wreg free
 12881                           
 12882                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12883  000732  0E00               	movlw	0
 12884  000734  0100               	movlb	0	; () banked
 12885  000736  6FBE               	movwf	actuatorTest@i_1766& (0+255),b
 12886  000738                     l8012:
 12887                           
 12888                           ; BSR set to: 0
 12889  000738  0E63               	movlw	99
 12890  00073A  0100               	movlb	0	; () banked
 12891  00073C  65BE               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12892  00073E  D001               	goto	l8016
 12893  000740  D00C               	goto	l8020
 12894  000742                     l8016:
 12895                           
 12896                           ; BSR set to: 0
 12897  000742  0E68               	movlw	104
 12898  000744  0100               	movlb	0	; () banked
 12899  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12900  000748  0EE4               	movlw	228
 12901  00074A                     u9657:
 12902  00074A  2EE8               	decfsz	wreg,f,c
 12903  00074C  D7FE               	bra	u9657
 12904  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12905  000750  D7FC               	bra	u9657
 12906  000752  F000               	nop	
 12907  000754  0100               	movlb	0	; () banked
 12908  000756  2BBE               	incf	actuatorTest@i_1766& (0+255),f,b
 12909  000758  D7EF               	goto	l8012
 12910  00075A                     l8020:
 12911                           
 12912                           ; BSR set to: 0
 12913  00075A  0E00               	movlw	0
 12914  00075C  0100               	movlb	0	; () banked
 12915  00075E  6FBF               	movwf	actuatorTest@i_1767& (0+255),b
 12916  000760                     l8022:
 12917                           
 12918                           ; BSR set to: 0
 12919  000760  0E63               	movlw	99
 12920  000762  0100               	movlb	0	; () banked
 12921  000764  65BF               	cpfsgt	actuatorTest@i_1767& (0+255),b
 12922  000766  D001               	goto	l8026
 12923  000768  D00C               	goto	l1254
 12924  00076A                     l8026:
 12925                           
 12926                           ; BSR set to: 0
 12927  00076A  0E68               	movlw	104
 12928  00076C  0100               	movlb	0	; () banked
 12929  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12930  000770  0EE4               	movlw	228
 12931  000772                     u9667:
 12932  000772  2EE8               	decfsz	wreg,f,c
 12933  000774  D7FE               	bra	u9667
 12934  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12935  000778  D7FC               	bra	u9667
 12936  00077A  F000               	nop	
 12937  00077C  0100               	movlb	0	; () banked
 12938  00077E  2BBF               	incf	actuatorTest@i_1767& (0+255),f,b
 12939  000780  D7EF               	goto	l8022
 12940  000782                     l1254:
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;Test.c: 324: TMR3ON = 0;
 12944  000782  90B1               	bcf	4017,0,c	;volatile
 12945                           
 12946                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12947  000784  9EF2               	bcf	intcon,7,c	;volatile
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12951  000786  0E01               	movlw	1
 12952  000788  EC6D  F029         	call	_lcdInst
 12953  00078C  0E68               	movlw	104
 12954  00078E  0100               	movlb	0	; () banked
 12955  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12956  000792  0EE4               	movlw	228
 12957  000794                     u9677:
 12958  000794  2EE8               	decfsz	wreg,f,c
 12959  000796  D7FE               	bra	u9677
 12960  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12961  00079A  D7FC               	bra	u9677
 12962  00079C  F000               	nop	
 12963  00079E  0E80               	movlw	128
 12964  0007A0  EC6D  F029         	call	_lcdInst
 12965                           
 12966                           ;Test.c: 331: printf("TST: CAM SERVO");
 12967  0007A4  0E96               	movlw	low STR_107
 12968  0007A6  0100               	movlb	0	; () banked
 12969  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12970  0007AA  0EFE               	movlw	high STR_107
 12971  0007AC  0100               	movlb	0	; () banked
 12972  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12973  0007B0  EC08  F00B         	call	_printf	;wreg free
 12974                           
 12975                           ;Test.c: 332: lcdInst(0b11000000);;
 12976  0007B4  0EC0               	movlw	192
 12977  0007B6  EC6D  F029         	call	_lcdInst
 12978                           
 12979                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12980  0007BA  0E78               	movlw	low STR_108
 12981  0007BC  0100               	movlb	0	; () banked
 12982  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12983  0007C0  0EFE               	movlw	high STR_108
 12984  0007C2  0100               	movlb	0	; () banked
 12985  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12986  0007C6  EC08  F00B         	call	_printf	;wreg free
 12987                           
 12988                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12989  0007CA  808B               	bsf	3979,0,c	;volatile
 12990                           
 12991                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12992  0007CC  0E00               	movlw	0
 12993  0007CE  0100               	movlb	0	; () banked
 12994  0007D0  6FC0               	movwf	actuatorTest@i_1770& (0+255),b
 12995  0007D2                     l8046:
 12996                           
 12997                           ; BSR set to: 0
 12998  0007D2  0E63               	movlw	99
 12999  0007D4  0100               	movlb	0	; () banked
 13000  0007D6  65C0               	cpfsgt	actuatorTest@i_1770& (0+255),b
 13001  0007D8  D001               	goto	l8050
 13002  0007DA  D00C               	goto	l8054
 13003  0007DC                     l8050:
 13004                           
 13005                           ; BSR set to: 0
 13006  0007DC  0E68               	movlw	104
 13007  0007DE  0100               	movlb	0	; () banked
 13008  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13009  0007E2  0EE4               	movlw	228
 13010  0007E4                     u9687:
 13011  0007E4  2EE8               	decfsz	wreg,f,c
 13012  0007E6  D7FE               	bra	u9687
 13013  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13014  0007EA  D7FC               	bra	u9687
 13015  0007EC  F000               	nop	
 13016  0007EE  0100               	movlb	0	; () banked
 13017  0007F0  2BC0               	incf	actuatorTest@i_1770& (0+255),f,b
 13018  0007F2  D7EF               	goto	l8046
 13019  0007F4                     l8054:
 13020                           
 13021                           ; BSR set to: 0
 13022  0007F4  0E00               	movlw	0
 13023  0007F6  0100               	movlb	0	; () banked
 13024  0007F8  6FC1               	movwf	actuatorTest@i_1771& (0+255),b
 13025  0007FA                     l8056:
 13026                           
 13027                           ; BSR set to: 0
 13028  0007FA  0E63               	movlw	99
 13029  0007FC  0100               	movlb	0	; () banked
 13030  0007FE  65C1               	cpfsgt	actuatorTest@i_1771& (0+255),b
 13031  000800  D001               	goto	l8060
 13032  000802  D00C               	goto	l8064
 13033  000804                     l8060:
 13034                           
 13035                           ; BSR set to: 0
 13036  000804  0E68               	movlw	104
 13037  000806  0100               	movlb	0	; () banked
 13038  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13039  00080A  0EE4               	movlw	228
 13040  00080C                     u9697:
 13041  00080C  2EE8               	decfsz	wreg,f,c
 13042  00080E  D7FE               	bra	u9697
 13043  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13044  000812  D7FC               	bra	u9697
 13045  000814  F000               	nop	
 13046  000816  0100               	movlb	0	; () banked
 13047  000818  2BC1               	incf	actuatorTest@i_1771& (0+255),f,b
 13048  00081A  D7EF               	goto	l8056
 13049  00081C                     l8064:
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13053  00081C  0E80               	movlw	128
 13054  00081E  EC6D  F029         	call	_lcdInst
 13055  000822  0EC0               	movlw	192
 13056  000824  EC6D  F029         	call	_lcdInst
 13057                           
 13058                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13059  000828  0E69               	movlw	low STR_109
 13060  00082A  0100               	movlb	0	; () banked
 13061  00082C  6F8E               	movwf	printf@f& (0+255),b
 13062  00082E  0EFE               	movlw	high STR_109
 13063  000830  0100               	movlb	0	; () banked
 13064  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13065  000834  EC08  F00B         	call	_printf	;wreg free
 13066                           
 13067                           ;Test.c: 340: for(i=0;i<10000;i++)
 13068  000838  0E00               	movlw	0
 13069  00083A  0100               	movlb	0	; () banked
 13070  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13071  00083E  0E00               	movlw	0
 13072  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13073  000842                     l8070:
 13074                           
 13075                           ; BSR set to: 0
 13076  000842  0100               	movlb	0	; () banked
 13077  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13078  000846  D008               	goto	l1259
 13079  000848  0E10               	movlw	16
 13080  00084A  0100               	movlb	0	; () banked
 13081  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13082  00084E  0E27               	movlw	39
 13083  000850  0100               	movlb	0	; () banked
 13084  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13085  000854  B0D8               	btfsc	status,0,c
 13086  000856  D00D               	goto	l8080
 13087  000858                     l1259:
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;Test.c: 341: {
 13091                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13092  000858  808B               	bsf	3979,0,c	;volatile
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13096  00085A  0E1A               	movlw	26
 13097  00085C                     u9707:
 13098  00085C  2EE8               	decfsz	wreg,f,c
 13099  00085E  D7FE               	bra	u9707
 13100  000860  D000               	nop2	
 13101                           
 13102                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13103  000862  908B               	bcf	3979,0,c	;volatile
 13104                           
 13105                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13106  000864  0EF0               	movlw	240
 13107  000866                     u9717:
 13108  000866  2EE8               	decfsz	wreg,f,c
 13109  000868  D7FE               	bra	u9717
 13110  00086A  0100               	movlb	0	; () banked
 13111  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13112  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13113  000870  D7E8               	goto	l8070
 13114  000872                     l8080:
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;Test.c: 346: }
 13118                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13119  000872  0E00               	movlw	0
 13120  000874  0100               	movlb	0	; () banked
 13121  000876  6FC2               	movwf	actuatorTest@i_1773& (0+255),b
 13122  000878                     l8082:
 13123                           
 13124                           ; BSR set to: 0
 13125  000878  0E63               	movlw	99
 13126  00087A  0100               	movlb	0	; () banked
 13127  00087C  65C2               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13128  00087E  D001               	goto	l8086
 13129  000880  D00C               	goto	l8090
 13130  000882                     l8086:
 13131                           
 13132                           ; BSR set to: 0
 13133  000882  0E68               	movlw	104
 13134  000884  0100               	movlb	0	; () banked
 13135  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13136  000888  0EE4               	movlw	228
 13137  00088A                     u9727:
 13138  00088A  2EE8               	decfsz	wreg,f,c
 13139  00088C  D7FE               	bra	u9727
 13140  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13141  000890  D7FC               	bra	u9727
 13142  000892  F000               	nop	
 13143  000894  0100               	movlb	0	; () banked
 13144  000896  2BC2               	incf	actuatorTest@i_1773& (0+255),f,b
 13145  000898  D7EF               	goto	l8082
 13146  00089A                     l8090:
 13147                           
 13148                           ; BSR set to: 0
 13149  00089A  0E00               	movlw	0
 13150  00089C  0100               	movlb	0	; () banked
 13151  00089E  6FC3               	movwf	actuatorTest@i_1774& (0+255),b
 13152  0008A0                     l8092:
 13153                           
 13154                           ; BSR set to: 0
 13155  0008A0  0E63               	movlw	99
 13156  0008A2  0100               	movlb	0	; () banked
 13157  0008A4  65C3               	cpfsgt	actuatorTest@i_1774& (0+255),b
 13158  0008A6  D001               	goto	l8096
 13159  0008A8  D00C               	goto	l8100
 13160  0008AA                     l8096:
 13161                           
 13162                           ; BSR set to: 0
 13163  0008AA  0E68               	movlw	104
 13164  0008AC  0100               	movlb	0	; () banked
 13165  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13166  0008B0  0EE4               	movlw	228
 13167  0008B2                     u9737:
 13168  0008B2  2EE8               	decfsz	wreg,f,c
 13169  0008B4  D7FE               	bra	u9737
 13170  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13171  0008B8  D7FC               	bra	u9737
 13172  0008BA  F000               	nop	
 13173  0008BC  0100               	movlb	0	; () banked
 13174  0008BE  2BC3               	incf	actuatorTest@i_1774& (0+255),f,b
 13175  0008C0  D7EF               	goto	l8092
 13176  0008C2                     l8100:
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;Test.c: 349: machine_state = Testing_state;
 13180  0008C2  0E03               	movlw	3
 13181  0008C4  0100               	movlb	0	; () banked
 13182  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13183                           
 13184                           ; BSR set to: 0
 13185  0008C8  0012               	return		;funcret
 13186  0008CA                     __end_of_actuatorTest:
 13187                           	opt stack 0
 13188                           tblptru	equ	0xFF8
 13189                           tblptrh	equ	0xFF7
 13190                           tblptrl	equ	0xFF6
 13191                           tablat	equ	0xFF5
 13192                           prodh	equ	0xFF4
 13193                           prodl	equ	0xFF3
 13194                           intcon	equ	0xFF2
 13195                           intcon2	equ	0xFF1
 13196                           intcon3	equ	0xFF0
 13197                           postinc0	equ	0xFEE
 13198                           wreg	equ	0xFE8
 13199                           postdec1	equ	0xFE5
 13200                           fsr1l	equ	0xFE1
 13201                           indf2	equ	0xFDF
 13202                           postinc2	equ	0xFDE
 13203                           postdec2	equ	0xFDD
 13204                           fsr2h	equ	0xFDA
 13205                           fsr2l	equ	0xFD9
 13206                           status	equ	0xFD8
 13207                           
 13208 ;; *************** function _SpeedTest *****************
 13209 ;; Defined at:
 13210 ;;		line 549 in file "Test.c"
 13211 ;; Parameters:    Size  Location     Type
 13212 ;;		None
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;		None
 13215 ;; Return value:  Size  Location     Type
 13216 ;;                  1    wreg      void 
 13217 ;; Registers used:
 13218 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13219 ;; Tracked objects:
 13220 ;;		On entry : 0/0
 13221 ;;		On exit  : 0/0
 13222 ;;		Unchanged: 0/0
 13223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13228 ;;Total ram usage:        1 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:   10
 13231 ;; This function calls:
 13232 ;;		_lcdInst
 13233 ;;		_printf
 13234 ;; This function is called by:
 13235 ;;		_Test
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text41
 13240  0045FA                     __ptext41:
 13241                           	opt stack 0
 13242  0045FA                     _SpeedTest:
 13243                           	opt stack 19
 13244                           
 13245                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13246                           
 13247                           ; BSR set to: 0
 13248                           ;incstack = 0
 13249  0045FA  0E01               	movlw	1
 13250  0045FC  EC6D  F029         	call	_lcdInst
 13251  004600  0E68               	movlw	104
 13252  004602  0100               	movlb	0	; () banked
 13253  004604  6FAB               	movwf	??_SpeedTest& (0+255),b
 13254  004606  0EE4               	movlw	228
 13255  004608                     u9747:
 13256  004608  2EE8               	decfsz	wreg,f,c
 13257  00460A  D7FE               	bra	u9747
 13258  00460C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13259  00460E  D7FC               	bra	u9747
 13260  004610  F000               	nop	
 13261  004612  0E80               	movlw	128
 13262  004614  EC6D  F029         	call	_lcdInst
 13263                           
 13264                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13265  004618  0E5B               	movlw	low STR_120
 13266  00461A  0100               	movlb	0	; () banked
 13267  00461C  6F8E               	movwf	printf@f& (0+255),b
 13268  00461E  0EFB               	movlw	high STR_120
 13269  004620  0100               	movlb	0	; () banked
 13270  004622  6F8F               	movwf	(printf@f+1)& (0+255),b
 13271  004624  EC08  F00B         	call	_printf	;wreg free
 13272                           
 13273                           ;Test.c: 553: lcdInst(0b11000000);;
 13274  004628  0EC0               	movlw	192
 13275  00462A  EC6D  F029         	call	_lcdInst
 13276                           
 13277                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13278  00462E  0E49               	movlw	low STR_112
 13279  004630  0100               	movlb	0	; () banked
 13280  004632  6F8E               	movwf	printf@f& (0+255),b
 13281  004634  0EFB               	movlw	high STR_112
 13282  004636  0100               	movlb	0	; () banked
 13283  004638  6F8F               	movwf	(printf@f+1)& (0+255),b
 13284  00463A  EC08  F00B         	call	_printf	;wreg free
 13285  00463E                     l1345:
 13286  00463E  A281               	btfss	3969,1,c	;volatile
 13287  004640  D7FE               	goto	l1345
 13288                           
 13289                           ;Test.c: 559: }
 13290                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13291  004642  3881               	swapf	3969,w,c	;volatile
 13292  004644  0B0F               	andlw	15
 13293  004646  0A0F               	xorlw	15
 13294  004648  B4D8               	btfsc	status,2,c
 13295  00464A  0012               	return	
 13296  00464C  D014               	goto	l8142
 13297  00464E                     l1352:
 13298                           
 13299                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13300  00464E  8A89               	bsf	3977,5,c	;volatile
 13301                           
 13302                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13303  004650  0E34               	movlw	52
 13304  004652  0100               	movlb	0	; () banked
 13305  004654  6FAB               	movwf	??_SpeedTest& (0+255),b
 13306  004656  0EF1               	movlw	241
 13307  004658                     u9757:
 13308  004658  2EE8               	decfsz	wreg,f,c
 13309  00465A  D7FE               	bra	u9757
 13310  00465C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13311  00465E  D7FC               	bra	u9757
 13312  004660  D000               	nop2	
 13313                           
 13314                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13315  004662  9A89               	bcf	3977,5,c	;volatile
 13316                           
 13317                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13318  004664  0E34               	movlw	52
 13319  004666  0100               	movlb	0	; () banked
 13320  004668  6FAB               	movwf	??_SpeedTest& (0+255),b
 13321  00466A  0EF1               	movlw	241
 13322  00466C                     u9767:
 13323  00466C  2EE8               	decfsz	wreg,f,c
 13324  00466E  D7FE               	bra	u9767
 13325  004670  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13326  004672  D7FC               	bra	u9767
 13327  004674  D000               	nop2	
 13328  004676                     l8142:
 13329  004676  B281               	btfsc	3969,1,c	;volatile
 13330  004678  D7EA               	goto	l1352
 13331                           
 13332                           ;Test.c: 571: }
 13333                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13334  00467A  9A89               	bcf	3977,5,c	;volatile
 13335  00467C  D7E0               	goto	l1345
 13336  00467E                     __end_of_SpeedTest:
 13337                           	opt stack 0
 13338                           tblptru	equ	0xFF8
 13339                           tblptrh	equ	0xFF7
 13340                           tblptrl	equ	0xFF6
 13341                           tablat	equ	0xFF5
 13342                           prodh	equ	0xFF4
 13343                           prodl	equ	0xFF3
 13344                           intcon	equ	0xFF2
 13345                           intcon2	equ	0xFF1
 13346                           intcon3	equ	0xFF0
 13347                           postinc0	equ	0xFEE
 13348                           wreg	equ	0xFE8
 13349                           postdec1	equ	0xFE5
 13350                           fsr1l	equ	0xFE1
 13351                           indf2	equ	0xFDF
 13352                           postinc2	equ	0xFDE
 13353                           postdec2	equ	0xFDD
 13354                           fsr2h	equ	0xFDA
 13355                           fsr2l	equ	0xFD9
 13356                           status	equ	0xFD8
 13357                           
 13358 ;; *************** function _PusherTest *****************
 13359 ;; Defined at:
 13360 ;;		line 467 in file "Test.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;		None
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;  i               2   51[BANK0 ] int 
 13365 ;;  i               2   49[BANK0 ] int 
 13366 ;;  res             2   47[BANK0 ] int 
 13367 ;;  res             2   45[BANK0 ] int 
 13368 ;; Return value:  Size  Location     Type
 13369 ;;                  1    wreg      void 
 13370 ;; Registers used:
 13371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;Total ram usage:       10 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:   10
 13384 ;; This function calls:
 13385 ;;		_lcdInst
 13386 ;;		_printf
 13387 ;;		_readADC
 13388 ;; This function is called by:
 13389 ;;		_Test
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           	psect	text42
 13394  002ED2                     __ptext42:
 13395                           	opt stack 0
 13396  002ED2                     _PusherTest:
 13397                           	opt stack 19
 13398                           
 13399                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13400                           
 13401                           ;incstack = 0
 13402  002ED2  0E01               	movlw	1
 13403  002ED4  EC6D  F029         	call	_lcdInst
 13404  002ED8  0E68               	movlw	104
 13405  002EDA  0100               	movlb	0	; () banked
 13406  002EDC  6FAB               	movwf	??_PusherTest& (0+255),b
 13407  002EDE  0EE4               	movlw	228
 13408  002EE0                     u9777:
 13409  002EE0  2EE8               	decfsz	wreg,f,c
 13410  002EE2  D7FE               	bra	u9777
 13411  002EE4  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13412  002EE6  D7FC               	bra	u9777
 13413  002EE8  F000               	nop	
 13414  002EEA  0E80               	movlw	128
 13415  002EEC  EC6D  F029         	call	_lcdInst
 13416                           
 13417                           ;Test.c: 469: printf("PUSHER TST");
 13418  002EF0  0E71               	movlw	low STR_113
 13419  002EF2  0100               	movlb	0	; () banked
 13420  002EF4  6F8E               	movwf	printf@f& (0+255),b
 13421  002EF6  0EFF               	movlw	high STR_113
 13422  002EF8  0100               	movlb	0	; () banked
 13423  002EFA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13424  002EFC  EC08  F00B         	call	_printf	;wreg free
 13425                           
 13426                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13427  002F00  8A8B               	bsf	3979,5,c	;volatile
 13428                           
 13429                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13430  002F02  D05C               	goto	l8172
 13431  002F04                     l8154:
 13432                           
 13433                           ;Test.c: 473: readADC(0);
 13434  002F04  0E00               	movlw	0
 13435  002F06  EC64  F028         	call	_readADC
 13436                           
 13437                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13438  002F0A  50C3               	movf	4035,w,c	;volatile
 13439  002F0C  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13440  002F10  0100               	movlb	0	; () banked
 13441  002F12  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13442  002F14  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13443  002F18  0100               	movlb	0	; () banked
 13444  002F1A  6BAB               	clrf	??_PusherTest& (0+255),b
 13445  002F1C  0100               	movlb	0	; () banked
 13446  002F1E  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13447  002F20  0100               	movlb	0	; () banked
 13448  002F22  6FAD               	movwf	PusherTest@res& (0+255),b
 13449  002F24  0100               	movlb	0	; () banked
 13450  002F26  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13451  002F28  0100               	movlb	0	; () banked
 13452  002F2A  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13453                           
 13454                           ; BSR set to: 0
 13455                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13456  002F2C  0100               	movlb	0	; () banked
 13457  002F2E  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13458  002F30  D00A               	goto	u6830
 13459  002F32  0E21               	movlw	33
 13460  002F34  0100               	movlb	0	; () banked
 13461  002F36  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13462  002F38  0E03               	movlw	3
 13463  002F3A  0100               	movlb	0	; () banked
 13464  002F3C  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13465  002F3E  A0D8               	btfss	status,0,c
 13466  002F40  D002               	goto	u6830
 13467  002F42  0E01               	movlw	1
 13468  002F44  D001               	goto	u6840
 13469  002F46                     u6830:
 13470  002F46  0E00               	movlw	0
 13471  002F48                     u6840:
 13472  002F48  0100               	movlb	0	; () banked
 13473  002F4A  6FE6               	movwf	_IR_signal& (0+255),b
 13474  002F4C  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13475                           
 13476                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13477  002F4E  0E01               	movlw	1
 13478  002F50  EC6D  F029         	call	_lcdInst
 13479  002F54  0E68               	movlw	104
 13480  002F56  0100               	movlb	0	; () banked
 13481  002F58  6FAB               	movwf	??_PusherTest& (0+255),b
 13482  002F5A  0EE4               	movlw	228
 13483  002F5C                     u9787:
 13484  002F5C  2EE8               	decfsz	wreg,f,c
 13485  002F5E  D7FE               	bra	u9787
 13486  002F60  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13487  002F62  D7FC               	bra	u9787
 13488  002F64  F000               	nop	
 13489  002F66  0E80               	movlw	128
 13490  002F68  EC6D  F029         	call	_lcdInst
 13491                           
 13492                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13493  002F6C  0E5A               	movlw	low STR_80
 13494  002F6E  0100               	movlb	0	; () banked
 13495  002F70  6F8E               	movwf	printf@f& (0+255),b
 13496  002F72  0EFE               	movlw	high STR_80
 13497  002F74  0100               	movlb	0	; () banked
 13498  002F76  6F8F               	movwf	(printf@f+1)& (0+255),b
 13499  002F78  C0E6  F090         	movff	_IR_signal,?_printf+2
 13500  002F7C  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13501  002F80  EC08  F00B         	call	_printf	;wreg free
 13502                           
 13503                           ;Test.c: 479: lcdInst(0b11000000);;
 13504  002F84  0EC0               	movlw	192
 13505  002F86  EC6D  F029         	call	_lcdInst
 13506                           
 13507                           ;Test.c: 480: printf("%d", res);
 13508  002F8A  0E16               	movlw	low (STR_27+14)
 13509  002F8C  0100               	movlb	0	; () banked
 13510  002F8E  6F8E               	movwf	printf@f& (0+255),b
 13511  002F90  0EFE               	movlw	high (STR_27+14)
 13512  002F92  0100               	movlb	0	; () banked
 13513  002F94  6F8F               	movwf	(printf@f+1)& (0+255),b
 13514  002F96  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13515  002F9A  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13516  002F9E  EC08  F00B         	call	_printf	;wreg free
 13517                           
 13518                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13519  002FA2  0E05               	movlw	5
 13520  002FA4  0100               	movlb	0	; () banked
 13521  002FA6  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13522  002FA8  0E0F               	movlw	15
 13523  002FAA  0100               	movlb	0	; () banked
 13524  002FAC  6FAB               	movwf	??_PusherTest& (0+255),b
 13525  002FAE  0EF1               	movlw	241
 13526  002FB0                     u9797:
 13527  002FB0  2EE8               	decfsz	wreg,f,c
 13528  002FB2  D7FE               	bra	u9797
 13529  002FB4  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13530  002FB6  D7FC               	bra	u9797
 13531  002FB8  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13532  002FBA  D7FA               	bra	u9797
 13533  002FBC                     l8172:
 13534  002FBC  B281               	btfsc	3969,1,c	;volatile
 13535  002FBE  D05D               	goto	l8192
 13536  002FC0  D7A1               	goto	l8154
 13537  002FC2                     l8174:
 13538                           
 13539                           ;Test.c: 487: readADC(0);
 13540  002FC2  0E00               	movlw	0
 13541  002FC4  EC64  F028         	call	_readADC
 13542                           
 13543                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13544  002FC8  50C3               	movf	4035,w,c	;volatile
 13545  002FCA  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13546  002FCE  0100               	movlb	0	; () banked
 13547  002FD0  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13548  002FD2  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13549  002FD6  0100               	movlb	0	; () banked
 13550  002FD8  6BAB               	clrf	??_PusherTest& (0+255),b
 13551  002FDA  0100               	movlb	0	; () banked
 13552  002FDC  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13553  002FDE  0100               	movlb	0	; () banked
 13554  002FE0  6FAF               	movwf	PusherTest@res_1789& (0+255),b
 13555  002FE2  0100               	movlb	0	; () banked
 13556  002FE4  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13557  002FE6  0100               	movlb	0	; () banked
 13558  002FE8  6FB0               	movwf	(PusherTest@res_1789+1)& (0+255),b
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13562  002FEA  0100               	movlb	0	; () banked
 13563  002FEC  BFB0               	btfsc	(PusherTest@res_1789+1)& (0+255),7,b
 13564  002FEE  D00A               	goto	u6860
 13565  002FF0  0E21               	movlw	33
 13566  002FF2  0100               	movlb	0	; () banked
 13567  002FF4  5DAF               	subwf	PusherTest@res_1789& (0+255),w,b
 13568  002FF6  0E03               	movlw	3
 13569  002FF8  0100               	movlb	0	; () banked
 13570  002FFA  59B0               	subwfb	(PusherTest@res_1789+1)& (0+255),w,b
 13571  002FFC  A0D8               	btfss	status,0,c
 13572  002FFE  D002               	goto	u6860
 13573  003000  0E01               	movlw	1
 13574  003002  D001               	goto	u6870
 13575  003004                     u6860:
 13576  003004  0E00               	movlw	0
 13577  003006                     u6870:
 13578  003006  0100               	movlb	0	; () banked
 13579  003008  6FE6               	movwf	_IR_signal& (0+255),b
 13580  00300A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13581                           
 13582                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13583  00300C  0E01               	movlw	1
 13584  00300E  EC6D  F029         	call	_lcdInst
 13585  003012  0E68               	movlw	104
 13586  003014  0100               	movlb	0	; () banked
 13587  003016  6FAB               	movwf	??_PusherTest& (0+255),b
 13588  003018  0EE4               	movlw	228
 13589  00301A                     u9807:
 13590  00301A  2EE8               	decfsz	wreg,f,c
 13591  00301C  D7FE               	bra	u9807
 13592  00301E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13593  003020  D7FC               	bra	u9807
 13594  003022  F000               	nop	
 13595  003024  0E80               	movlw	128
 13596  003026  EC6D  F029         	call	_lcdInst
 13597                           
 13598                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13599  00302A  0E5A               	movlw	low STR_80
 13600  00302C  0100               	movlb	0	; () banked
 13601  00302E  6F8E               	movwf	printf@f& (0+255),b
 13602  003030  0EFE               	movlw	high STR_80
 13603  003032  0100               	movlb	0	; () banked
 13604  003034  6F8F               	movwf	(printf@f+1)& (0+255),b
 13605  003036  C0E6  F090         	movff	_IR_signal,?_printf+2
 13606  00303A  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13607  00303E  EC08  F00B         	call	_printf	;wreg free
 13608                           
 13609                           ;Test.c: 492: lcdInst(0b11000000);;
 13610  003042  0EC0               	movlw	192
 13611  003044  EC6D  F029         	call	_lcdInst
 13612                           
 13613                           ;Test.c: 493: printf("%d", res);
 13614  003048  0E16               	movlw	low (STR_27+14)
 13615  00304A  0100               	movlb	0	; () banked
 13616  00304C  6F8E               	movwf	printf@f& (0+255),b
 13617  00304E  0EFE               	movlw	high (STR_27+14)
 13618  003050  0100               	movlb	0	; () banked
 13619  003052  6F8F               	movwf	(printf@f+1)& (0+255),b
 13620  003054  C0AF  F090         	movff	PusherTest@res_1789,?_printf+2
 13621  003058  C0B0  F091         	movff	PusherTest@res_1789+1,?_printf+3
 13622  00305C  EC08  F00B         	call	_printf	;wreg free
 13623                           
 13624                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13625  003060  0E05               	movlw	5
 13626  003062  0100               	movlb	0	; () banked
 13627  003064  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13628  003066  0E0F               	movlw	15
 13629  003068  0100               	movlb	0	; () banked
 13630  00306A  6FAB               	movwf	??_PusherTest& (0+255),b
 13631  00306C  0EF1               	movlw	241
 13632  00306E                     u9817:
 13633  00306E  2EE8               	decfsz	wreg,f,c
 13634  003070  D7FE               	bra	u9817
 13635  003072  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13636  003074  D7FC               	bra	u9817
 13637  003076  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13638  003078  D7FA               	bra	u9817
 13639  00307A                     l8192:
 13640  00307A  A281               	btfss	3969,1,c	;volatile
 13641  00307C  D7A2               	goto	l8174
 13642                           
 13643                           ;Test.c: 495: }
 13644                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13645  00307E  3881               	swapf	3969,w,c	;volatile
 13646  003080  0B0F               	andlw	15
 13647  003082  0A0F               	xorlw	15
 13648  003084  B4D8               	btfsc	status,2,c
 13649  003086  D047               	goto	l1314
 13650                           
 13651                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13652                           
 13653                           ;Test.c: 498: }
 13654                           
 13655                           ;Test.c: 497: break;
 13656  003088  3881               	swapf	3969,w,c	;volatile
 13657  00308A  0B0F               	andlw	15
 13658  00308C  0A05               	xorlw	5
 13659  00308E  A4D8               	btfss	status,2,c
 13660  003090  D01D               	goto	l8214
 13661                           
 13662                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13663  003092  0E00               	movlw	0
 13664  003094  0100               	movlb	0	; () banked
 13665  003096  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13666  003098  0E00               	movlw	0
 13667  00309A  6FB1               	movwf	PusherTest@i& (0+255),b
 13668  00309C                     l8204:
 13669                           
 13670                           ; BSR set to: 0
 13671  00309C  0100               	movlb	0	; () banked
 13672  00309E  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13673  0030A0  D008               	goto	l1317
 13674  0030A2  0EB8               	movlw	184
 13675  0030A4  0100               	movlb	0	; () banked
 13676  0030A6  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13677  0030A8  0E0B               	movlw	11
 13678  0030AA  0100               	movlb	0	; () banked
 13679  0030AC  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13680  0030AE  B0D8               	btfsc	status,0,c
 13681  0030B0  D02F               	goto	l1323
 13682  0030B2                     l1317:
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13686  0030B2  8889               	bsf	3977,4,c	;volatile
 13687                           
 13688                           ; BSR set to: 0
 13689                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13690  0030B4  0EC8               	movlw	200
 13691  0030B6                     u9827:
 13692  0030B6  2EE8               	decfsz	wreg,f,c
 13693  0030B8  D7FE               	bra	u9827
 13694                           
 13695                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13696  0030BA  9889               	bcf	3977,4,c	;volatile
 13697                           
 13698                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13699  0030BC  0E42               	movlw	66
 13700  0030BE                     u9837:
 13701  0030BE  2EE8               	decfsz	wreg,f,c
 13702  0030C0  D7FE               	bra	u9837
 13703  0030C2  D000               	nop2	
 13704  0030C4  0100               	movlb	0	; () banked
 13705  0030C6  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13706  0030C8  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13707  0030CA  D7E8               	goto	l8204
 13708  0030CC                     l8214:
 13709                           
 13710                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13711  0030CC  3881               	swapf	3969,w,c	;volatile
 13712  0030CE  0B0F               	andlw	15
 13713  0030D0  0A06               	xorlw	6
 13714  0030D2  A4D8               	btfss	status,2,c
 13715  0030D4  D01D               	goto	l1323
 13716                           
 13717                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13718  0030D6  0E00               	movlw	0
 13719  0030D8  0100               	movlb	0	; () banked
 13720  0030DA  6FB4               	movwf	(PusherTest@i_1793+1)& (0+255),b
 13721  0030DC  0E00               	movlw	0
 13722  0030DE  6FB3               	movwf	PusherTest@i_1793& (0+255),b
 13723  0030E0                     l8218:
 13724                           
 13725                           ; BSR set to: 0
 13726  0030E0  0100               	movlb	0	; () banked
 13727  0030E2  BFB4               	btfsc	(PusherTest@i_1793+1)& (0+255),7,b
 13728  0030E4  D008               	goto	l1321
 13729  0030E6  0EB8               	movlw	184
 13730  0030E8  0100               	movlb	0	; () banked
 13731  0030EA  5DB3               	subwf	PusherTest@i_1793& (0+255),w,b
 13732  0030EC  0E0B               	movlw	11
 13733  0030EE  0100               	movlb	0	; () banked
 13734  0030F0  59B4               	subwfb	(PusherTest@i_1793+1)& (0+255),w,b
 13735  0030F2  B0D8               	btfsc	status,0,c
 13736  0030F4  D00D               	goto	l1323
 13737  0030F6                     l1321:
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13741  0030F6  8889               	bsf	3977,4,c	;volatile
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13745  0030F8  0E9A               	movlw	154
 13746  0030FA                     u9847:
 13747  0030FA  2EE8               	decfsz	wreg,f,c
 13748  0030FC  D7FE               	bra	u9847
 13749  0030FE  D000               	nop2	
 13750                           
 13751                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13752  003100  9889               	bcf	3977,4,c	;volatile
 13753                           
 13754                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13755  003102  0E70               	movlw	112
 13756  003104                     u9857:
 13757  003104  2EE8               	decfsz	wreg,f,c
 13758  003106  D7FE               	bra	u9857
 13759  003108  0100               	movlb	0	; () banked
 13760  00310A  4BB3               	infsnz	PusherTest@i_1793& (0+255),f,b
 13761  00310C  2BB4               	incf	(PusherTest@i_1793+1)& (0+255),f,b
 13762  00310E  D7E8               	goto	l8218
 13763  003110                     l1323:
 13764  003110  A281               	btfss	3969,1,c	;volatile
 13765  003112  D7B3               	goto	l8192
 13766  003114  D7FD               	goto	l1323
 13767  003116                     l1314:
 13768                           
 13769                           ;Test.c: 519: }
 13770                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13771  003116  9A8B               	bcf	3979,5,c	;volatile
 13772  003118  0012               	return		;funcret
 13773  00311A                     __end_of_PusherTest:
 13774                           	opt stack 0
 13775                           tblptru	equ	0xFF8
 13776                           tblptrh	equ	0xFF7
 13777                           tblptrl	equ	0xFF6
 13778                           tablat	equ	0xFF5
 13779                           prodh	equ	0xFF4
 13780                           prodl	equ	0xFF3
 13781                           intcon	equ	0xFF2
 13782                           intcon2	equ	0xFF1
 13783                           intcon3	equ	0xFF0
 13784                           postinc0	equ	0xFEE
 13785                           wreg	equ	0xFE8
 13786                           postdec1	equ	0xFE5
 13787                           fsr1l	equ	0xFE1
 13788                           indf2	equ	0xFDF
 13789                           postinc2	equ	0xFDE
 13790                           postdec2	equ	0xFDD
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function _readADC *****************
 13796 ;; Defined at:
 13797 ;;		line 15 in file "ADCFunctionality.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  channel         1    wreg     unsigned char 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  channel         1    1[BANK0 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  1    wreg      void 
 13804 ;; Registers used:
 13805 ;;		wreg, status,2, status,0, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;Total ram usage:        2 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    7
 13818 ;; This function calls:
 13819 ;;		Nothing
 13820 ;; This function is called by:
 13821 ;;		_readIR
 13822 ;;		_readMAG
 13823 ;;		_sensorTest
 13824 ;;		_PusherTest
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           	psect	text43
 13829  0050C8                     __ptext43:
 13830                           	opt stack 0
 13831  0050C8                     _readADC:
 13832                           	opt stack 20
 13833                           
 13834                           ;incstack = 0
 13835                           ;readADC@channel stored from wreg
 13836  0050C8  0100               	movlb	0	; () banked
 13837  0050CA  6F81               	movwf	readADC@channel& (0+255),b
 13838                           
 13839                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13840  0050CC  0100               	movlb	0	; () banked
 13841  0050CE  4581               	rlncf	readADC@channel& (0+255),w,b
 13842  0050D0  46E8               	rlncf	wreg,f,c
 13843  0050D2  0BFC               	andlw	252
 13844  0050D4  6EC2               	movwf	4034,c	;volatile
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13848  0050D6  80C2               	bsf	4034,0,c	;volatile
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13852  0050D8  82C2               	bsf	4034,1,c	;volatile
 13853                           
 13854                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13855  0050DA  D009               	goto	l6054
 13856  0050DC                     l6052:
 13857  0050DC  0E34               	movlw	52
 13858  0050DE  0100               	movlb	0	; () banked
 13859  0050E0  6F80               	movwf	??_readADC& (0+255),b
 13860  0050E2  0EF1               	movlw	241
 13861  0050E4                     u9867:
 13862  0050E4  2EE8               	decfsz	wreg,f,c
 13863  0050E6  D7FE               	bra	u9867
 13864  0050E8  2F80               	decfsz	??_readADC& (0+255),f,b
 13865  0050EA  D7FC               	bra	u9867
 13866  0050EC  D000               	nop2	
 13867  0050EE                     l6054:
 13868  0050EE  A2C2               	btfss	4034,1,c	;volatile
 13869  0050F0  0012               	return	
 13870  0050F2  D7F4               	goto	l6052
 13871  0050F4                     __end_of_readADC:
 13872                           	opt stack 0
 13873                           tblptru	equ	0xFF8
 13874                           tblptrh	equ	0xFF7
 13875                           tblptrl	equ	0xFF6
 13876                           tablat	equ	0xFF5
 13877                           prodh	equ	0xFF4
 13878                           prodl	equ	0xFF3
 13879                           intcon	equ	0xFF2
 13880                           intcon2	equ	0xFF1
 13881                           intcon3	equ	0xFF0
 13882                           postinc0	equ	0xFEE
 13883                           wreg	equ	0xFE8
 13884                           postdec1	equ	0xFE5
 13885                           fsr1l	equ	0xFE1
 13886                           indf2	equ	0xFDF
 13887                           postinc2	equ	0xFDE
 13888                           postdec2	equ	0xFDD
 13889                           fsr2h	equ	0xFDA
 13890                           fsr2l	equ	0xFD9
 13891                           status	equ	0xFD8
 13892                           
 13893 ;; *************** function _PortTests *****************
 13894 ;; Defined at:
 13895 ;;		line 409 in file "Test.c"
 13896 ;; Parameters:    Size  Location     Type
 13897 ;;		None
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;		None
 13900 ;; Return value:  Size  Location     Type
 13901 ;;                  1    wreg      void 
 13902 ;; Registers used:
 13903 ;;		wreg, status,2, status,0
 13904 ;; Tracked objects:
 13905 ;;		On entry : 0/0
 13906 ;;		On exit  : 0/0
 13907 ;;		Unchanged: 0/0
 13908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13913 ;;Total ram usage:        2 bytes
 13914 ;; Hardware stack levels used:    1
 13915 ;; Hardware stack levels required when called:    7
 13916 ;; This function calls:
 13917 ;;		Nothing
 13918 ;; This function is called by:
 13919 ;;		_Test
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           	psect	text44
 13924  00467E                     __ptext44:
 13925                           	opt stack 0
 13926  00467E                     _PortTests:
 13927                           	opt stack 22
 13928  00467E                     l1272:
 13929  00467E  A281               	btfss	3969,1,c	;volatile
 13930  004680  D7FE               	goto	l1272
 13931                           
 13932                           ;Test.c: 413: var = PORTB >> 4;
 13933  004682  CF81 F080          	movff	3969,??_PortTests	;volatile
 13934  004686  0100               	movlb	0	; () banked
 13935  004688  3B80               	swapf	??_PortTests& (0+255),f,b
 13936  00468A  0E0F               	movlw	15
 13937  00468C  1780               	andwf	??_PortTests& (0+255),f,b
 13938  00468E  0100               	movlb	0	; () banked
 13939  004690  5180               	movf	??_PortTests& (0+255),w,b
 13940  004692  0100               	movlb	0	; () banked
 13941  004694  6FFA               	movwf	_var& (0+255),b
 13942  004696  6BFB               	clrf	(_var+1)& (0+255),b
 13943                           
 13944                           ;Test.c: 414: switch(var){
 13945  004698  D00C               	goto	l8232
 13946  00469A                     l1276:
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13950  00469A  808D               	bsf	3981,0,c	;volatile
 13951                           
 13952                           ;Test.c: 417: break;
 13953  00469C  D027               	goto	l1284
 13954  00469E                     l1278:
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13958  00469E  828D               	bsf	3981,1,c	;volatile
 13959                           
 13960                           ;Test.c: 420: break;
 13961  0046A0  D025               	goto	l1284
 13962  0046A2                     l1279:
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13966  0046A2  808C               	bsf	3980,0,c	;volatile
 13967                           
 13968                           ;Test.c: 423: break;
 13969  0046A4  D023               	goto	l1284
 13970  0046A6                     l1280:
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13974  0046A6  8689               	bsf	3977,3,c	;volatile
 13975                           
 13976                           ;Test.c: 426: break;
 13977  0046A8  D021               	goto	l1284
 13978  0046AA                     l1281:
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13982  0046AA  8889               	bsf	3977,4,c	;volatile
 13983                           
 13984                           ;Test.c: 429: break;
 13985  0046AC  D01F               	goto	l1284
 13986  0046AE                     l1282:
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13990  0046AE  8A89               	bsf	3977,5,c	;volatile
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;Test.c: 435: }
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;Test.c: 434: break;
 13997                           
 13998                           ;Test.c: 433: default:
 13999                           
 14000                           ;Test.c: 432: break;
 14001  0046B0  D01D               	goto	l1284
 14002  0046B2                     l8232:
 14003                           
 14004                           ; BSR set to: 0
 14005  0046B2  C0FA  F080         	movff	_var,??_PortTests
 14006  0046B6  C0FB  F081         	movff	_var+1,??_PortTests+1
 14007                           
 14008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14009                           ; Switch size 1, requested type "space"
 14010                           ; Number of cases is 1, Range of values is 0 to 0
 14011                           ; switch strategies available:
 14012                           ; Name         Instructions Cycles
 14013                           ; simple_byte            4     3 (average)
 14014                           ;	Chosen strategy is simple_byte
 14015  0046BA  0100               	movlb	0	; () banked
 14016  0046BC  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14017  0046BE  0A00               	xorlw	0	; case 0
 14018  0046C0  A4D8               	btfss	status,2,c
 14019  0046C2  D014               	goto	l1284
 14020                           
 14021                           ; BSR set to: 0
 14022                           ; Switch size 1, requested type "space"
 14023                           ; Number of cases is 6, Range of values is 0 to 5
 14024                           ; switch strategies available:
 14025                           ; Name         Instructions Cycles
 14026                           ; simple_byte           19    10 (average)
 14027                           ;	Chosen strategy is simple_byte
 14028  0046C4  0100               	movlb	0	; () banked
 14029  0046C6  5180               	movf	??_PortTests& (0+255),w,b
 14030  0046C8  0A00               	xorlw	0	; case 0
 14031  0046CA  B4D8               	btfsc	status,2,c
 14032  0046CC  D7E6               	goto	l1276
 14033  0046CE  0A01               	xorlw	1	; case 1
 14034  0046D0  B4D8               	btfsc	status,2,c
 14035  0046D2  D7E5               	goto	l1278
 14036  0046D4  0A03               	xorlw	3	; case 2
 14037  0046D6  B4D8               	btfsc	status,2,c
 14038  0046D8  D7E4               	goto	l1279
 14039  0046DA  0A01               	xorlw	1	; case 3
 14040  0046DC  B4D8               	btfsc	status,2,c
 14041  0046DE  D7E3               	goto	l1280
 14042  0046E0  0A07               	xorlw	7	; case 4
 14043  0046E2  B4D8               	btfsc	status,2,c
 14044  0046E4  D7E2               	goto	l1281
 14045  0046E6  0A01               	xorlw	1	; case 5
 14046  0046E8  B4D8               	btfsc	status,2,c
 14047  0046EA  D7E1               	goto	l1282
 14048  0046EC                     l1284:
 14049  0046EC  B281               	btfsc	3969,1,c	;volatile
 14050  0046EE  D7FE               	goto	l1284
 14051                           
 14052                           ;Test.c: 437: __nop();
 14053  0046F0  F000               	nop	
 14054                           
 14055                           ;Test.c: 438: __nop();
 14056  0046F2  F000               	nop	
 14057                           
 14058                           ;Test.c: 439: LATA = 0x00;
 14059  0046F4  0E00               	movlw	0
 14060  0046F6  6E89               	movwf	3977,c	;volatile
 14061                           
 14062                           ;Test.c: 440: LATE = 0x00;
 14063  0046F8  0E00               	movlw	0
 14064  0046FA  6E8D               	movwf	3981,c	;volatile
 14065                           
 14066                           ;Test.c: 441: LATD = 0x00; }
 14067  0046FC  0E00               	movlw	0
 14068  0046FE  6E8C               	movwf	3980,c	;volatile
 14069  004700  D7BE               	goto	l1272
 14070  004702                     __end_of_PortTests:
 14071                           	opt stack 0
 14072                           tblptru	equ	0xFF8
 14073                           tblptrh	equ	0xFF7
 14074                           tblptrl	equ	0xFF6
 14075                           tablat	equ	0xFF5
 14076                           prodh	equ	0xFF4
 14077                           prodl	equ	0xFF3
 14078                           intcon	equ	0xFF2
 14079                           intcon2	equ	0xFF1
 14080                           intcon3	equ	0xFF0
 14081                           postinc0	equ	0xFEE
 14082                           wreg	equ	0xFE8
 14083                           postdec1	equ	0xFE5
 14084                           fsr1l	equ	0xFE1
 14085                           indf2	equ	0xFDF
 14086                           postinc2	equ	0xFDE
 14087                           postdec2	equ	0xFDD
 14088                           fsr2h	equ	0xFDA
 14089                           fsr2l	equ	0xFD9
 14090                           status	equ	0xFD8
 14091                           
 14092 ;; *************** function _PortTestA5 *****************
 14093 ;; Defined at:
 14094 ;;		line 444 in file "Test.c"
 14095 ;; Parameters:    Size  Location     Type
 14096 ;;		None
 14097 ;; Auto vars:     Size  Location     Type
 14098 ;;		None
 14099 ;; Return value:  Size  Location     Type
 14100 ;;                  1    wreg      void 
 14101 ;; Registers used:
 14102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14103 ;; Tracked objects:
 14104 ;;		On entry : 0/0
 14105 ;;		On exit  : 0/0
 14106 ;;		Unchanged: 0/0
 14107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;Total ram usage:        1 bytes
 14113 ;; Hardware stack levels used:    1
 14114 ;; Hardware stack levels required when called:   10
 14115 ;; This function calls:
 14116 ;;		_lcdInst
 14117 ;;		_printf
 14118 ;; This function is called by:
 14119 ;;		_Test
 14120 ;; This function uses a non-reentrant model
 14121 ;;
 14122                           
 14123                           	psect	text45
 14124  004A54                     __ptext45:
 14125                           	opt stack 0
 14126  004A54                     _PortTestA5:
 14127                           	opt stack 19
 14128                           
 14129                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14130                           
 14131                           ;incstack = 0
 14132  004A54  0E01               	movlw	1
 14133  004A56  EC6D  F029         	call	_lcdInst
 14134  004A5A  0E68               	movlw	104
 14135  004A5C  0100               	movlb	0	; () banked
 14136  004A5E  6FAB               	movwf	??_PortTestA5& (0+255),b
 14137  004A60  0EE4               	movlw	228
 14138  004A62                     u9877:
 14139  004A62  2EE8               	decfsz	wreg,f,c
 14140  004A64  D7FE               	bra	u9877
 14141  004A66  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14142  004A68  D7FC               	bra	u9877
 14143  004A6A  F000               	nop	
 14144  004A6C  0E80               	movlw	128
 14145  004A6E  EC6D  F029         	call	_lcdInst
 14146                           
 14147                           ;Test.c: 446: printf("D WILL RETURN    ");
 14148  004A72  0E37               	movlw	low STR_111
 14149  004A74  0100               	movlb	0	; () banked
 14150  004A76  6F8E               	movwf	printf@f& (0+255),b
 14151  004A78  0EFB               	movlw	high STR_111
 14152  004A7A  0100               	movlb	0	; () banked
 14153  004A7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14154  004A7E  EC08  F00B         	call	_printf	;wreg free
 14155                           
 14156                           ;Test.c: 447: lcdInst(0b11000000);;
 14157  004A82  0EC0               	movlw	192
 14158  004A84  EC6D  F029         	call	_lcdInst
 14159                           
 14160                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14161  004A88  0E49               	movlw	low STR_112
 14162  004A8A  0100               	movlb	0	; () banked
 14163  004A8C  6F8E               	movwf	printf@f& (0+255),b
 14164  004A8E  0EFB               	movlw	high STR_112
 14165  004A90  0100               	movlb	0	; () banked
 14166  004A92  6F8F               	movwf	(printf@f+1)& (0+255),b
 14167  004A94  EC08  F00B         	call	_printf	;wreg free
 14168  004A98                     l1293:
 14169  004A98  A281               	btfss	3969,1,c	;volatile
 14170  004A9A  D7FE               	goto	l1293
 14171                           
 14172                           ;Test.c: 453: }
 14173                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14174  004A9C  3881               	swapf	3969,w,c	;volatile
 14175  004A9E  0B0F               	andlw	15
 14176  004AA0  0A0F               	xorlw	15
 14177  004AA2  B4D8               	btfsc	status,2,c
 14178  004AA4  0012               	return	
 14179                           
 14180                           ;Test.c: 457: else{
 14181                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14182                           
 14183                           ;Test.c: 456: }
 14184                           
 14185                           ;Test.c: 455: break;
 14186  004AA6  848A               	bsf	3978,2,c	;volatile
 14187  004AA8                     l1299:
 14188  004AA8  B281               	btfsc	3969,1,c	;volatile
 14189  004AAA  D7FE               	goto	l1299
 14190                           
 14191                           ;Test.c: 461: }
 14192                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14193  004AAC  948A               	bcf	3978,2,c	;volatile
 14194  004AAE  D7F4               	goto	l1293
 14195  004AB0                     __end_of_PortTestA5:
 14196                           	opt stack 0
 14197                           tblptru	equ	0xFF8
 14198                           tblptrh	equ	0xFF7
 14199                           tblptrl	equ	0xFF6
 14200                           tablat	equ	0xFF5
 14201                           prodh	equ	0xFF4
 14202                           prodl	equ	0xFF3
 14203                           intcon	equ	0xFF2
 14204                           intcon2	equ	0xFF1
 14205                           intcon3	equ	0xFF0
 14206                           postinc0	equ	0xFEE
 14207                           wreg	equ	0xFE8
 14208                           postdec1	equ	0xFE5
 14209                           fsr1l	equ	0xFE1
 14210                           indf2	equ	0xFDF
 14211                           postinc2	equ	0xFDE
 14212                           postdec2	equ	0xFDD
 14213                           fsr2h	equ	0xFDA
 14214                           fsr2l	equ	0xFD9
 14215                           status	equ	0xFD8
 14216                           
 14217 ;; *************** function _EEPROMTest *****************
 14218 ;; Defined at:
 14219 ;;		line 577 in file "Test.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;		None
 14222 ;; Auto vars:     Size  Location     Type
 14223 ;;		None
 14224 ;; Return value:  Size  Location     Type
 14225 ;;                  1    wreg      void 
 14226 ;; Registers used:
 14227 ;;		None
 14228 ;; Tracked objects:
 14229 ;;		On entry : 0/0
 14230 ;;		On exit  : 0/0
 14231 ;;		Unchanged: 0/0
 14232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14237 ;;Total ram usage:        0 bytes
 14238 ;; Hardware stack levels used:    1
 14239 ;; Hardware stack levels required when called:    7
 14240 ;; This function calls:
 14241 ;;		Nothing
 14242 ;; This function is called by:
 14243 ;;		_Test
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           	psect	text46
 14248  00533E                     __ptext46:
 14249                           	opt stack 0
 14250  00533E                     _EEPROMTest:
 14251                           	opt stack 22
 14252                           
 14253                           ;incstack = 0
 14254  00533E  0012               	return		;funcret
 14255  005340                     __end_of_EEPROMTest:
 14256                           	opt stack 0
 14257                           tblptru	equ	0xFF8
 14258                           tblptrh	equ	0xFF7
 14259                           tblptrl	equ	0xFF6
 14260                           tablat	equ	0xFF5
 14261                           prodh	equ	0xFF4
 14262                           prodl	equ	0xFF3
 14263                           intcon	equ	0xFF2
 14264                           intcon2	equ	0xFF1
 14265                           intcon3	equ	0xFF0
 14266                           postinc0	equ	0xFEE
 14267                           wreg	equ	0xFE8
 14268                           postdec1	equ	0xFE5
 14269                           fsr1l	equ	0xFE1
 14270                           indf2	equ	0xFDF
 14271                           postinc2	equ	0xFDE
 14272                           postdec2	equ	0xFDD
 14273                           fsr2h	equ	0xFDA
 14274                           fsr2l	equ	0xFD9
 14275                           status	equ	0xFD8
 14276                           
 14277 ;; *************** function _BothServos *****************
 14278 ;; Defined at:
 14279 ;;		line 352 in file "Test.c"
 14280 ;; Parameters:    Size  Location     Type
 14281 ;;		None
 14282 ;; Auto vars:     Size  Location     Type
 14283 ;;		None
 14284 ;; Return value:  Size  Location     Type
 14285 ;;                  1    wreg      void 
 14286 ;; Registers used:
 14287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14288 ;; Tracked objects:
 14289 ;;		On entry : 0/0
 14290 ;;		On exit  : 0/0
 14291 ;;		Unchanged: 0/0
 14292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14297 ;;Total ram usage:        2 bytes
 14298 ;; Hardware stack levels used:    1
 14299 ;; Hardware stack levels required when called:   10
 14300 ;; This function calls:
 14301 ;;		_initServos
 14302 ;;		_lcdInst
 14303 ;;		_printf
 14304 ;;		_updateServoPosition
 14305 ;; This function is called by:
 14306 ;;		_Test
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text47
 14311  001A48                     __ptext47:
 14312                           	opt stack 0
 14313  001A48                     _BothServos:
 14314                           	opt stack 19
 14315                           
 14316                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14317                           
 14318                           ;incstack = 0
 14319  001A48  0E01               	movlw	1
 14320  001A4A  EC6D  F029         	call	_lcdInst
 14321  001A4E  0E68               	movlw	104
 14322  001A50  0100               	movlb	0	; () banked
 14323  001A52  6FAB               	movwf	??_BothServos& (0+255),b
 14324  001A54  0EE4               	movlw	228
 14325  001A56                     u9887:
 14326  001A56  2EE8               	decfsz	wreg,f,c
 14327  001A58  D7FE               	bra	u9887
 14328  001A5A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14329  001A5C  D7FC               	bra	u9887
 14330  001A5E  F000               	nop	
 14331  001A60  0E80               	movlw	128
 14332  001A62  EC6D  F029         	call	_lcdInst
 14333                           
 14334                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14335  001A66  0EB4               	movlw	low STR_110
 14336  001A68  0100               	movlb	0	; () banked
 14337  001A6A  6F8E               	movwf	printf@f& (0+255),b
 14338  001A6C  0EFC               	movlw	high STR_110
 14339  001A6E  0100               	movlb	0	; () banked
 14340  001A70  6F8F               	movwf	(printf@f+1)& (0+255),b
 14341  001A72  EC08  F00B         	call	_printf	;wreg free
 14342                           
 14343                           ;Test.c: 355: TMR1ON = 1;
 14344  001A76  80CD               	bsf	4045,0,c	;volatile
 14345                           
 14346                           ;Test.c: 356: TMR3ON = 1;
 14347  001A78  80B1               	bsf	4017,0,c	;volatile
 14348                           
 14349                           ;Test.c: 357: machine_state = Sorting_state;
 14350  001A7A  0E01               	movlw	1
 14351  001A7C  0100               	movlb	0	; () banked
 14352  001A7E  6FFC               	movwf	_machine_state& (0+255),b
 14353                           
 14354                           ; BSR set to: 0
 14355                           ;Test.c: 358: was_low_1 = 0;
 14356  001A80  0E00               	movlw	0
 14357  001A82  6E7A               	movwf	_was_low_1+1,c	;volatile
 14358  001A84  0E00               	movlw	0
 14359  001A86  6E79               	movwf	_was_low_1,c	;volatile
 14360                           
 14361                           ; BSR set to: 0
 14362                           ;Test.c: 359: was_low_3 = 0;
 14363  001A88  0E00               	movlw	0
 14364  001A8A  6E7C               	movwf	_was_low_3+1,c	;volatile
 14365  001A8C  0E00               	movlw	0
 14366  001A8E  6E7B               	movwf	_was_low_3,c	;volatile
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;Test.c: 365: initServos();
 14370  001A90  EC58  F025         	call	_initServos	;wreg free
 14371                           
 14372                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14373  001A94  0E3D               	movlw	61
 14374  001A96  0100               	movlb	0	; () banked
 14375  001A98  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14376  001A9A  0EE1               	movlw	225
 14377  001A9C  0100               	movlb	0	; () banked
 14378  001A9E  6FAB               	movwf	??_BothServos& (0+255),b
 14379  001AA0  0E3F               	movlw	63
 14380  001AA2                     u9897:
 14381  001AA2  2EE8               	decfsz	wreg,f,c
 14382  001AA4  D7FE               	bra	u9897
 14383  001AA6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14384  001AA8  D7FC               	bra	u9897
 14385  001AAA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14386  001AAC  D7FA               	bra	u9897
 14387  001AAE  D000               	nop2	
 14388                           
 14389                           ;Test.c: 368: updateServoPosition(500, 1);
 14390  001AB0  0E01               	movlw	1
 14391  001AB2  0100               	movlb	0	; () banked
 14392  001AB4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14393  001AB6  0EF4               	movlw	244
 14394  001AB8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14395  001ABA  0E00               	movlw	0
 14396  001ABC  0100               	movlb	0	; () banked
 14397  001ABE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14398  001AC0  0E01               	movlw	1
 14399  001AC2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14400  001AC4  ECBA  F022         	call	_updateServoPosition	;wreg free
 14401                           
 14402                           ;Test.c: 369: updateServoPosition(1050, 3);
 14403  001AC8  0E04               	movlw	4
 14404  001ACA  0100               	movlb	0	; () banked
 14405  001ACC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14406  001ACE  0E1A               	movlw	26
 14407  001AD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14408  001AD2  0E00               	movlw	0
 14409  001AD4  0100               	movlb	0	; () banked
 14410  001AD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14411  001AD8  0E03               	movlw	3
 14412  001ADA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14413  001ADC  ECBA  F022         	call	_updateServoPosition	;wreg free
 14414                           
 14415                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14416  001AE0  0E1F               	movlw	31
 14417  001AE2  0100               	movlb	0	; () banked
 14418  001AE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14419  001AE6  0E71               	movlw	113
 14420  001AE8  0100               	movlb	0	; () banked
 14421  001AEA  6FAB               	movwf	??_BothServos& (0+255),b
 14422  001AEC  0E1E               	movlw	30
 14423  001AEE                     u9907:
 14424  001AEE  2EE8               	decfsz	wreg,f,c
 14425  001AF0  D7FE               	bra	u9907
 14426  001AF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14427  001AF4  D7FC               	bra	u9907
 14428  001AF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14429  001AF8  D7FA               	bra	u9907
 14430  001AFA  F000               	nop	
 14431                           
 14432                           ;Test.c: 371: updateServoPosition(1260, 3);
 14433  001AFC  0E04               	movlw	4
 14434  001AFE  0100               	movlb	0	; () banked
 14435  001B00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14436  001B02  0EEC               	movlw	236
 14437  001B04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14438  001B06  0E00               	movlw	0
 14439  001B08  0100               	movlb	0	; () banked
 14440  001B0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14441  001B0C  0E03               	movlw	3
 14442  001B0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14443  001B10  ECBA  F022         	call	_updateServoPosition	;wreg free
 14444                           
 14445                           ;Test.c: 372: _delay((unsigned long)((700)*(32000000/4000.0)));
 14446  001B14  0E1D               	movlw	29
 14447  001B16  0100               	movlb	0	; () banked
 14448  001B18  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14449  001B1A  0E69               	movlw	105
 14450  001B1C  0100               	movlb	0	; () banked
 14451  001B1E  6FAB               	movwf	??_BothServos& (0+255),b
 14452  001B20  0EA5               	movlw	165
 14453  001B22                     u9917:
 14454  001B22  2EE8               	decfsz	wreg,f,c
 14455  001B24  D7FE               	bra	u9917
 14456  001B26  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14457  001B28  D7FC               	bra	u9917
 14458  001B2A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14459  001B2C  D7FA               	bra	u9917
 14460                           
 14461                           ;Test.c: 373: updateServoPosition(1050, 3);
 14462  001B2E  0E04               	movlw	4
 14463  001B30  0100               	movlb	0	; () banked
 14464  001B32  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14465  001B34  0E1A               	movlw	26
 14466  001B36  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14467  001B38  0E00               	movlw	0
 14468  001B3A  0100               	movlb	0	; () banked
 14469  001B3C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14470  001B3E  0E03               	movlw	3
 14471  001B40  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14472  001B42  ECBA  F022         	call	_updateServoPosition	;wreg free
 14473                           
 14474                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14475  001B46  0E1F               	movlw	31
 14476  001B48  0100               	movlb	0	; () banked
 14477  001B4A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14478  001B4C  0E71               	movlw	113
 14479  001B4E  0100               	movlb	0	; () banked
 14480  001B50  6FAB               	movwf	??_BothServos& (0+255),b
 14481  001B52  0E1E               	movlw	30
 14482  001B54                     u9927:
 14483  001B54  2EE8               	decfsz	wreg,f,c
 14484  001B56  D7FE               	bra	u9927
 14485  001B58  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14486  001B5A  D7FC               	bra	u9927
 14487  001B5C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14488  001B5E  D7FA               	bra	u9927
 14489  001B60  F000               	nop	
 14490                           
 14491                           ;Test.c: 376: updateServoPosition(850, 1);
 14492  001B62  0E03               	movlw	3
 14493  001B64  0100               	movlb	0	; () banked
 14494  001B66  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14495  001B68  0E52               	movlw	82
 14496  001B6A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14497  001B6C  0E00               	movlw	0
 14498  001B6E  0100               	movlb	0	; () banked
 14499  001B70  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14500  001B72  0E01               	movlw	1
 14501  001B74  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14502  001B76  ECBA  F022         	call	_updateServoPosition	;wreg free
 14503                           
 14504                           ;Test.c: 377: updateServoPosition(1050, 3);
 14505  001B7A  0E04               	movlw	4
 14506  001B7C  0100               	movlb	0	; () banked
 14507  001B7E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14508  001B80  0E1A               	movlw	26
 14509  001B82  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14510  001B84  0E00               	movlw	0
 14511  001B86  0100               	movlb	0	; () banked
 14512  001B88  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14513  001B8A  0E03               	movlw	3
 14514  001B8C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14515  001B8E  ECBA  F022         	call	_updateServoPosition	;wreg free
 14516                           
 14517                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14518  001B92  0E1F               	movlw	31
 14519  001B94  0100               	movlb	0	; () banked
 14520  001B96  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14521  001B98  0E71               	movlw	113
 14522  001B9A  0100               	movlb	0	; () banked
 14523  001B9C  6FAB               	movwf	??_BothServos& (0+255),b
 14524  001B9E  0E1E               	movlw	30
 14525  001BA0                     u9937:
 14526  001BA0  2EE8               	decfsz	wreg,f,c
 14527  001BA2  D7FE               	bra	u9937
 14528  001BA4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14529  001BA6  D7FC               	bra	u9937
 14530  001BA8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14531  001BAA  D7FA               	bra	u9937
 14532  001BAC  F000               	nop	
 14533                           
 14534                           ;Test.c: 379: updateServoPosition(1260, 3);
 14535  001BAE  0E04               	movlw	4
 14536  001BB0  0100               	movlb	0	; () banked
 14537  001BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14538  001BB4  0EEC               	movlw	236
 14539  001BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14540  001BB8  0E00               	movlw	0
 14541  001BBA  0100               	movlb	0	; () banked
 14542  001BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14543  001BBE  0E03               	movlw	3
 14544  001BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14545  001BC2  ECBA  F022         	call	_updateServoPosition	;wreg free
 14546                           
 14547                           ;Test.c: 380: _delay((unsigned long)((700)*(32000000/4000.0)));
 14548  001BC6  0E1D               	movlw	29
 14549  001BC8  0100               	movlb	0	; () banked
 14550  001BCA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14551  001BCC  0E69               	movlw	105
 14552  001BCE  0100               	movlb	0	; () banked
 14553  001BD0  6FAB               	movwf	??_BothServos& (0+255),b
 14554  001BD2  0EA5               	movlw	165
 14555  001BD4                     u9947:
 14556  001BD4  2EE8               	decfsz	wreg,f,c
 14557  001BD6  D7FE               	bra	u9947
 14558  001BD8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14559  001BDA  D7FC               	bra	u9947
 14560  001BDC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14561  001BDE  D7FA               	bra	u9947
 14562                           
 14563                           ;Test.c: 381: updateServoPosition(1050, 3);
 14564  001BE0  0E04               	movlw	4
 14565  001BE2  0100               	movlb	0	; () banked
 14566  001BE4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14567  001BE6  0E1A               	movlw	26
 14568  001BE8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14569  001BEA  0E00               	movlw	0
 14570  001BEC  0100               	movlb	0	; () banked
 14571  001BEE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14572  001BF0  0E03               	movlw	3
 14573  001BF2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14574  001BF4  ECBA  F022         	call	_updateServoPosition	;wreg free
 14575                           
 14576                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14577  001BF8  0E1F               	movlw	31
 14578  001BFA  0100               	movlb	0	; () banked
 14579  001BFC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14580  001BFE  0E71               	movlw	113
 14581  001C00  0100               	movlb	0	; () banked
 14582  001C02  6FAB               	movwf	??_BothServos& (0+255),b
 14583  001C04  0E1E               	movlw	30
 14584  001C06                     u9957:
 14585  001C06  2EE8               	decfsz	wreg,f,c
 14586  001C08  D7FE               	bra	u9957
 14587  001C0A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14588  001C0C  D7FC               	bra	u9957
 14589  001C0E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14590  001C10  D7FA               	bra	u9957
 14591  001C12  F000               	nop	
 14592                           
 14593                           ;Test.c: 384: updateServoPosition(1200, 1);
 14594  001C14  0E04               	movlw	4
 14595  001C16  0100               	movlb	0	; () banked
 14596  001C18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14597  001C1A  0EB0               	movlw	176
 14598  001C1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14599  001C1E  0E00               	movlw	0
 14600  001C20  0100               	movlb	0	; () banked
 14601  001C22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14602  001C24  0E01               	movlw	1
 14603  001C26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14604  001C28  ECBA  F022         	call	_updateServoPosition	;wreg free
 14605                           
 14606                           ;Test.c: 385: updateServoPosition(1050, 3);
 14607  001C2C  0E04               	movlw	4
 14608  001C2E  0100               	movlb	0	; () banked
 14609  001C30  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14610  001C32  0E1A               	movlw	26
 14611  001C34  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14612  001C36  0E00               	movlw	0
 14613  001C38  0100               	movlb	0	; () banked
 14614  001C3A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14615  001C3C  0E03               	movlw	3
 14616  001C3E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14617  001C40  ECBA  F022         	call	_updateServoPosition	;wreg free
 14618                           
 14619                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14620  001C44  0E3D               	movlw	61
 14621  001C46  0100               	movlb	0	; () banked
 14622  001C48  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14623  001C4A  0EE1               	movlw	225
 14624  001C4C  0100               	movlb	0	; () banked
 14625  001C4E  6FAB               	movwf	??_BothServos& (0+255),b
 14626  001C50  0E3F               	movlw	63
 14627  001C52                     u9967:
 14628  001C52  2EE8               	decfsz	wreg,f,c
 14629  001C54  D7FE               	bra	u9967
 14630  001C56  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14631  001C58  D7FC               	bra	u9967
 14632  001C5A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14633  001C5C  D7FA               	bra	u9967
 14634  001C5E  D000               	nop2	
 14635                           
 14636                           ;Test.c: 388: updateServoPosition(1670, 1);
 14637  001C60  0E06               	movlw	6
 14638  001C62  0100               	movlb	0	; () banked
 14639  001C64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14640  001C66  0E86               	movlw	134
 14641  001C68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14642  001C6A  0E00               	movlw	0
 14643  001C6C  0100               	movlb	0	; () banked
 14644  001C6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14645  001C70  0E01               	movlw	1
 14646  001C72  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14647  001C74  ECBA  F022         	call	_updateServoPosition	;wreg free
 14648                           
 14649                           ;Test.c: 389: updateServoPosition(1050, 3);
 14650  001C78  0E04               	movlw	4
 14651  001C7A  0100               	movlb	0	; () banked
 14652  001C7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14653  001C7E  0E1A               	movlw	26
 14654  001C80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14655  001C82  0E00               	movlw	0
 14656  001C84  0100               	movlb	0	; () banked
 14657  001C86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14658  001C88  0E03               	movlw	3
 14659  001C8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14660  001C8C  ECBA  F022         	call	_updateServoPosition	;wreg free
 14661                           
 14662                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14663  001C90  0E1F               	movlw	31
 14664  001C92  0100               	movlb	0	; () banked
 14665  001C94  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14666  001C96  0E71               	movlw	113
 14667  001C98  0100               	movlb	0	; () banked
 14668  001C9A  6FAB               	movwf	??_BothServos& (0+255),b
 14669  001C9C  0E1E               	movlw	30
 14670  001C9E                     u9977:
 14671  001C9E  2EE8               	decfsz	wreg,f,c
 14672  001CA0  D7FE               	bra	u9977
 14673  001CA2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14674  001CA4  D7FC               	bra	u9977
 14675  001CA6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14676  001CA8  D7FA               	bra	u9977
 14677  001CAA  F000               	nop	
 14678                           
 14679                           ;Test.c: 391: updateServoPosition(1390, 3);
 14680  001CAC  0E05               	movlw	5
 14681  001CAE  0100               	movlb	0	; () banked
 14682  001CB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14683  001CB2  0E6E               	movlw	110
 14684  001CB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14685  001CB6  0E00               	movlw	0
 14686  001CB8  0100               	movlb	0	; () banked
 14687  001CBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14688  001CBC  0E03               	movlw	3
 14689  001CBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14690  001CC0  ECBA  F022         	call	_updateServoPosition	;wreg free
 14691                           
 14692                           ;Test.c: 392: _delay((unsigned long)((700)*(32000000/4000.0)));
 14693  001CC4  0E1D               	movlw	29
 14694  001CC6  0100               	movlb	0	; () banked
 14695  001CC8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14696  001CCA  0E69               	movlw	105
 14697  001CCC  0100               	movlb	0	; () banked
 14698  001CCE  6FAB               	movwf	??_BothServos& (0+255),b
 14699  001CD0  0EA5               	movlw	165
 14700  001CD2                     u9987:
 14701  001CD2  2EE8               	decfsz	wreg,f,c
 14702  001CD4  D7FE               	bra	u9987
 14703  001CD6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14704  001CD8  D7FC               	bra	u9987
 14705  001CDA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14706  001CDC  D7FA               	bra	u9987
 14707                           
 14708                           ;Test.c: 393: updateServoPosition(1050, 3);
 14709  001CDE  0E04               	movlw	4
 14710  001CE0  0100               	movlb	0	; () banked
 14711  001CE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14712  001CE4  0E1A               	movlw	26
 14713  001CE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14714  001CE8  0E00               	movlw	0
 14715  001CEA  0100               	movlb	0	; () banked
 14716  001CEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14717  001CEE  0E03               	movlw	3
 14718  001CF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14719  001CF2  ECBA  F022         	call	_updateServoPosition	;wreg free
 14720                           
 14721                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14722  001CF6  0E1F               	movlw	31
 14723  001CF8  0100               	movlb	0	; () banked
 14724  001CFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14725  001CFC  0E71               	movlw	113
 14726  001CFE  0100               	movlb	0	; () banked
 14727  001D00  6FAB               	movwf	??_BothServos& (0+255),b
 14728  001D02  0E1E               	movlw	30
 14729  001D04                     u9997:
 14730  001D04  2EE8               	decfsz	wreg,f,c
 14731  001D06  D7FE               	bra	u9997
 14732  001D08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14733  001D0A  D7FC               	bra	u9997
 14734  001D0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14735  001D0E  D7FA               	bra	u9997
 14736  001D10  F000               	nop	
 14737                           
 14738                           ;Test.c: 396: updateServoPosition(2400, 1);
 14739  001D12  0E09               	movlw	9
 14740  001D14  0100               	movlb	0	; () banked
 14741  001D16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14742  001D18  0E60               	movlw	96
 14743  001D1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14744  001D1C  0E00               	movlw	0
 14745  001D1E  0100               	movlb	0	; () banked
 14746  001D20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14747  001D22  0E01               	movlw	1
 14748  001D24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14749  001D26  ECBA  F022         	call	_updateServoPosition	;wreg free
 14750                           
 14751                           ;Test.c: 397: updateServoPosition(1050, 3);
 14752  001D2A  0E04               	movlw	4
 14753  001D2C  0100               	movlb	0	; () banked
 14754  001D2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14755  001D30  0E1A               	movlw	26
 14756  001D32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14757  001D34  0E00               	movlw	0
 14758  001D36  0100               	movlb	0	; () banked
 14759  001D38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14760  001D3A  0E03               	movlw	3
 14761  001D3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14762  001D3E  ECBA  F022         	call	_updateServoPosition	;wreg free
 14763                           
 14764                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14765  001D42  0E1F               	movlw	31
 14766  001D44  0100               	movlb	0	; () banked
 14767  001D46  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14768  001D48  0E71               	movlw	113
 14769  001D4A  0100               	movlb	0	; () banked
 14770  001D4C  6FAB               	movwf	??_BothServos& (0+255),b
 14771  001D4E  0E1E               	movlw	30
 14772  001D50                     u10007:
 14773  001D50  2EE8               	decfsz	wreg,f,c
 14774  001D52  D7FE               	bra	u10007
 14775  001D54  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14776  001D56  D7FC               	bra	u10007
 14777  001D58  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14778  001D5A  D7FA               	bra	u10007
 14779  001D5C  F000               	nop	
 14780                           
 14781                           ;Test.c: 399: updateServoPosition(1390, 3);
 14782  001D5E  0E05               	movlw	5
 14783  001D60  0100               	movlb	0	; () banked
 14784  001D62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14785  001D64  0E6E               	movlw	110
 14786  001D66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14787  001D68  0E00               	movlw	0
 14788  001D6A  0100               	movlb	0	; () banked
 14789  001D6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14790  001D6E  0E03               	movlw	3
 14791  001D70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14792  001D72  ECBA  F022         	call	_updateServoPosition	;wreg free
 14793                           
 14794                           ;Test.c: 400: _delay((unsigned long)((700)*(32000000/4000.0)));
 14795  001D76  0E1D               	movlw	29
 14796  001D78  0100               	movlb	0	; () banked
 14797  001D7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14798  001D7C  0E69               	movlw	105
 14799  001D7E  0100               	movlb	0	; () banked
 14800  001D80  6FAB               	movwf	??_BothServos& (0+255),b
 14801  001D82  0EA5               	movlw	165
 14802  001D84                     u10017:
 14803  001D84  2EE8               	decfsz	wreg,f,c
 14804  001D86  D7FE               	bra	u10017
 14805  001D88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14806  001D8A  D7FC               	bra	u10017
 14807  001D8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14808  001D8E  D7FA               	bra	u10017
 14809                           
 14810                           ;Test.c: 401: updateServoPosition(1050, 3);
 14811  001D90  0E04               	movlw	4
 14812  001D92  0100               	movlb	0	; () banked
 14813  001D94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14814  001D96  0E1A               	movlw	26
 14815  001D98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14816  001D9A  0E00               	movlw	0
 14817  001D9C  0100               	movlb	0	; () banked
 14818  001D9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14819  001DA0  0E03               	movlw	3
 14820  001DA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14821  001DA4  ECBA  F022         	call	_updateServoPosition	;wreg free
 14822                           
 14823                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14824  001DA8  0E1F               	movlw	31
 14825  001DAA  0100               	movlb	0	; () banked
 14826  001DAC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14827  001DAE  0E71               	movlw	113
 14828  001DB0  0100               	movlb	0	; () banked
 14829  001DB2  6FAB               	movwf	??_BothServos& (0+255),b
 14830  001DB4  0E1E               	movlw	30
 14831  001DB6                     u10027:
 14832  001DB6  2EE8               	decfsz	wreg,f,c
 14833  001DB8  D7FE               	bra	u10027
 14834  001DBA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14835  001DBC  D7FC               	bra	u10027
 14836  001DBE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14837  001DC0  D7FA               	bra	u10027
 14838  001DC2  F000               	nop	
 14839                           
 14840                           ;Test.c: 404: TMR1ON = 0;
 14841  001DC4  90CD               	bcf	4045,0,c	;volatile
 14842                           
 14843                           ;Test.c: 405: TMR3ON = 0;
 14844  001DC6  90B1               	bcf	4017,0,c	;volatile
 14845                           
 14846                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14847  001DC8  9EF2               	bcf	intcon,7,c	;volatile
 14848  001DCA  0012               	return		;funcret
 14849  001DCC                     __end_of_BothServos:
 14850                           	opt stack 0
 14851                           tblptru	equ	0xFF8
 14852                           tblptrh	equ	0xFF7
 14853                           tblptrl	equ	0xFF6
 14854                           tablat	equ	0xFF5
 14855                           prodh	equ	0xFF4
 14856                           prodl	equ	0xFF3
 14857                           intcon	equ	0xFF2
 14858                           intcon2	equ	0xFF1
 14859                           intcon3	equ	0xFF0
 14860                           postinc0	equ	0xFEE
 14861                           wreg	equ	0xFE8
 14862                           postdec1	equ	0xFE5
 14863                           fsr1l	equ	0xFE1
 14864                           indf2	equ	0xFDF
 14865                           postinc2	equ	0xFDE
 14866                           postdec2	equ	0xFDD
 14867                           fsr2h	equ	0xFDA
 14868                           fsr2l	equ	0xFD9
 14869                           status	equ	0xFD8
 14870                           
 14871 ;; *************** function _initServos *****************
 14872 ;; Defined at:
 14873 ;;		line 428 in file "sort.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;		None
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;		None
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg, status,2, status,0, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14891 ;;Total ram usage:        1 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    8
 14894 ;; This function calls:
 14895 ;;		_updateServoPosition
 14896 ;; This function is called by:
 14897 ;;		_Loading
 14898 ;;		_BothServos
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           	psect	text48
 14903  004AB0                     __ptext48:
 14904                           	opt stack 0
 14905  004AB0                     _initServos:
 14906                           	opt stack 20
 14907                           
 14908                           ;sort.c: 429: updateServoPosition(1200, 1);
 14909                           
 14910                           ;incstack = 0
 14911  004AB0  0E04               	movlw	4
 14912  004AB2  0100               	movlb	0	; () banked
 14913  004AB4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14914  004AB6  0EB0               	movlw	176
 14915  004AB8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14916  004ABA  0E00               	movlw	0
 14917  004ABC  0100               	movlb	0	; () banked
 14918  004ABE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14919  004AC0  0E01               	movlw	1
 14920  004AC2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14921  004AC4  ECBA  F022         	call	_updateServoPosition	;wreg free
 14922                           
 14923                           ;sort.c: 430: updateServoPosition(1050, 3);
 14924  004AC8  0E04               	movlw	4
 14925  004ACA  0100               	movlb	0	; () banked
 14926  004ACC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14927  004ACE  0E1A               	movlw	26
 14928  004AD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14929  004AD2  0E00               	movlw	0
 14930  004AD4  0100               	movlb	0	; () banked
 14931  004AD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14932  004AD8  0E03               	movlw	3
 14933  004ADA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14934  004ADC  ECBA  F022         	call	_updateServoPosition	;wreg free
 14935                           
 14936                           ;sort.c: 431: TMR1ON = 1;
 14937  004AE0  80CD               	bsf	4045,0,c	;volatile
 14938                           
 14939                           ;sort.c: 432: was_low_1 = 0;
 14940  004AE2  0E00               	movlw	0
 14941  004AE4  6E7A               	movwf	_was_low_1+1,c	;volatile
 14942  004AE6  0E00               	movlw	0
 14943  004AE8  6E79               	movwf	_was_low_1,c	;volatile
 14944                           
 14945                           ;sort.c: 433: _delay((unsigned long)((5)*(32000000/4000.0)));
 14946  004AEA  0E34               	movlw	52
 14947  004AEC  0100               	movlb	0	; () banked
 14948  004AEE  6F88               	movwf	??_initServos& (0+255),b
 14949  004AF0  0EF1               	movlw	241
 14950  004AF2                     u10037:
 14951  004AF2  2EE8               	decfsz	wreg,f,c
 14952  004AF4  D7FE               	bra	u10037
 14953  004AF6  2F88               	decfsz	??_initServos& (0+255),f,b
 14954  004AF8  D7FC               	bra	u10037
 14955  004AFA  D000               	nop2	
 14956                           
 14957                           ;sort.c: 434: TMR3ON = 1;
 14958  004AFC  80B1               	bsf	4017,0,c	;volatile
 14959                           
 14960                           ;sort.c: 435: was_low_3 = 0;
 14961  004AFE  0E00               	movlw	0
 14962  004B00  6E7C               	movwf	_was_low_3+1,c	;volatile
 14963  004B02  0E00               	movlw	0
 14964  004B04  6E7B               	movwf	_was_low_3,c	;volatile
 14965                           
 14966                           ;sort.c: 437: LATCbits.LATC0 = 1;
 14967  004B06  808B               	bsf	3979,0,c	;volatile
 14968  004B08  0012               	return		;funcret
 14969  004B0A                     __end_of_initServos:
 14970                           	opt stack 0
 14971                           tblptru	equ	0xFF8
 14972                           tblptrh	equ	0xFF7
 14973                           tblptrl	equ	0xFF6
 14974                           tablat	equ	0xFF5
 14975                           prodh	equ	0xFF4
 14976                           prodl	equ	0xFF3
 14977                           intcon	equ	0xFF2
 14978                           intcon2	equ	0xFF1
 14979                           intcon3	equ	0xFF0
 14980                           postinc0	equ	0xFEE
 14981                           wreg	equ	0xFE8
 14982                           postdec1	equ	0xFE5
 14983                           fsr1l	equ	0xFE1
 14984                           indf2	equ	0xFDF
 14985                           postinc2	equ	0xFDE
 14986                           postdec2	equ	0xFDD
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function _updateServoPosition *****************
 14992 ;; Defined at:
 14993 ;;		line 505 in file "sort.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  time_us         2    0[BANK0 ] int 
 14996 ;;  timer           2    2[BANK0 ] int 
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;  my_time         2    6[BANK0 ] unsigned int 
 14999 ;; Return value:  Size  Location     Type
 15000 ;;                  1    wreg      void 
 15001 ;; Registers used:
 15002 ;;		wreg, status,2, status,0
 15003 ;; Tracked objects:
 15004 ;;		On entry : 0/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15012 ;;Total ram usage:        8 bytes
 15013 ;; Hardware stack levels used:    1
 15014 ;; Hardware stack levels required when called:    7
 15015 ;; This function calls:
 15016 ;;		Nothing
 15017 ;; This function is called by:
 15018 ;;		_Distribution
 15019 ;;		_initServos
 15020 ;;		_actuatorTest
 15021 ;;		_BothServos
 15022 ;; This function uses a non-reentrant model
 15023 ;;
 15024                           
 15025                           	psect	text49
 15026  004574                     __ptext49:
 15027                           	opt stack 0
 15028  004574                     _updateServoPosition:
 15029                           	opt stack 20
 15030                           
 15031                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 15032                           
 15033                           ;incstack = 0
 15034  004574  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15035  004578  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15036  00457C  0100               	movlb	0	; () banked
 15037  00457E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15038  004580  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15039  004582  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15040  004584  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15041  004586  0EFF               	movlw	255
 15042  004588  0100               	movlb	0	; () banked
 15043  00458A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15044  00458C  0100               	movlb	0	; () banked
 15045  00458E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15046  004590  0EFF               	movlw	255
 15047  004592  0100               	movlb	0	; () banked
 15048  004594  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15049  004596  0100               	movlb	0	; () banked
 15050  004598  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15051                           
 15052                           ;sort.c: 507: switch(timer){
 15053  00459A  D01D               	goto	l6422
 15054  00459C                     l6416:
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 15058  00459C  0100               	movlb	0	; () banked
 15059  00459E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15060  0045A0  0100               	movlb	0	; () banked
 15061  0045A2  6FDA               	movwf	_servoTimes& (0+255),b
 15062  0045A4  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15063                           
 15064                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 15065  0045A6  0100               	movlb	0	; () banked
 15066  0045A8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15067  0045AA  0100               	movlb	0	; () banked
 15068  0045AC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15069  0045AE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15070                           
 15071                           ; BSR set to: 0
 15072                           ;sort.c: 512: pan_servo_state = time_us;
 15073  0045B0  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15074  0045B4  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15075  0045B8                     l868:
 15076                           
 15077                           ; BSR set to: 0
 15078                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 15079  0045B8  0100               	movlb	0	; () banked
 15080  0045BA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15081  0045BC  0100               	movlb	0	; () banked
 15082  0045BE  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15083  0045C0  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15084                           
 15085                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 15086  0045C2  0100               	movlb	0	; () banked
 15087  0045C4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15088  0045C6  0100               	movlb	0	; () banked
 15089  0045C8  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15090  0045CA  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;sort.c: 517: tilt_servo_state = time_us;
 15094  0045CC  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15095  0045D0  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15096                           
 15097                           ;sort.c: 518: }
 15098  0045D4  0012               	return	
 15099  0045D6                     l6422:
 15100                           
 15101                           ; BSR set to: 0
 15102  0045D6  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15103  0045DA  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15104                           
 15105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15106                           ; Switch size 1, requested type "space"
 15107                           ; Number of cases is 1, Range of values is 0 to 0
 15108                           ; switch strategies available:
 15109                           ; Name         Instructions Cycles
 15110                           ; simple_byte            4     3 (average)
 15111                           ;	Chosen strategy is simple_byte
 15112  0045DE  0100               	movlb	0	; () banked
 15113  0045E0  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15114  0045E2  0A00               	xorlw	0	; case 0
 15115  0045E4  A4D8               	btfss	status,2,c
 15116  0045E6  0012               	return	
 15117                           
 15118                           ; BSR set to: 0
 15119                           ; Switch size 1, requested type "space"
 15120                           ; Number of cases is 2, Range of values is 1 to 3
 15121                           ; switch strategies available:
 15122                           ; Name         Instructions Cycles
 15123                           ; simple_byte            7     4 (average)
 15124                           ;	Chosen strategy is simple_byte
 15125  0045E8  0100               	movlb	0	; () banked
 15126  0045EA  5184               	movf	??_updateServoPosition& (0+255),w,b
 15127  0045EC  0A01               	xorlw	1	; case 1
 15128  0045EE  B4D8               	btfsc	status,2,c
 15129  0045F0  D7D5               	goto	l6416
 15130  0045F2  0A02               	xorlw	2	; case 3
 15131  0045F4  A4D8               	btfss	status,2,c
 15132  0045F6  0012               	return	
 15133  0045F8  D7DF               	goto	l868
 15134  0045FA                     __end_of_updateServoPosition:
 15135                           	opt stack 0
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           intcon	equ	0xFF2
 15143                           intcon2	equ	0xFF1
 15144                           intcon3	equ	0xFF0
 15145                           postinc0	equ	0xFEE
 15146                           wreg	equ	0xFE8
 15147                           postdec1	equ	0xFE5
 15148                           fsr1l	equ	0xFE1
 15149                           indf2	equ	0xFDF
 15150                           postinc2	equ	0xFDE
 15151                           postdec2	equ	0xFDD
 15152                           fsr2h	equ	0xFDA
 15153                           fsr2l	equ	0xFD9
 15154                           status	equ	0xFD8
 15155                           
 15156 ;; *************** function _BlockerTest *****************
 15157 ;; Defined at:
 15158 ;;		line 589 in file "Test.c"
 15159 ;; Parameters:    Size  Location     Type
 15160 ;;		None
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;  i               2   44[BANK0 ] int 
 15163 ;;  cond_flag       2   48[BANK0 ] int 
 15164 ;;  cam_flag        2   46[BANK0 ] int 
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      void 
 15167 ;; Registers used:
 15168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;Total ram usage:        7 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:   10
 15181 ;; This function calls:
 15182 ;;		_lcdInst
 15183 ;;		_printf
 15184 ;; This function is called by:
 15185 ;;		_Test
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           	psect	text50
 15190  003894                     __ptext50:
 15191                           	opt stack 0
 15192  003894                     _BlockerTest:
 15193                           	opt stack 19
 15194                           
 15195                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15196                           
 15197                           ; BSR set to: 0
 15198                           ;incstack = 0
 15199  003894  0E01               	movlw	1
 15200  003896  EC6D  F029         	call	_lcdInst
 15201  00389A  0E68               	movlw	104
 15202  00389C  0100               	movlb	0	; () banked
 15203  00389E  6FAB               	movwf	??_BlockerTest& (0+255),b
 15204  0038A0  0EE4               	movlw	228
 15205  0038A2                     u10047:
 15206  0038A2  2EE8               	decfsz	wreg,f,c
 15207  0038A4  D7FE               	bra	u10047
 15208  0038A6  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15209  0038A8  D7FC               	bra	u10047
 15210  0038AA  F000               	nop	
 15211  0038AC  0E80               	movlw	128
 15212  0038AE  EC6D  F029         	call	_lcdInst
 15213                           
 15214                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15215  0038B2  0E7F               	movlw	low STR_122
 15216  0038B4  0100               	movlb	0	; () banked
 15217  0038B6  6F8E               	movwf	printf@f& (0+255),b
 15218  0038B8  0EFB               	movlw	high STR_122
 15219  0038BA  0100               	movlb	0	; () banked
 15220  0038BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15221  0038BE  A480               	btfss	3968,2,c	;volatile
 15222  0038C0  D004               	goto	u6990
 15223  0038C2  0100               	movlb	0	; () banked
 15224  0038C4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15225  0038C6  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15226  0038C8  D002               	goto	u6998
 15227  0038CA                     u6990:
 15228  0038CA  0100               	movlb	0	; () banked
 15229  0038CC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15230  0038CE                     u6998:
 15231  0038CE  0100               	movlb	0	; () banked
 15232  0038D0  51AB               	movf	??_BlockerTest& (0+255),w,b
 15233  0038D2  0100               	movlb	0	; () banked
 15234  0038D4  6F90               	movwf	(?_printf+2)& (0+255),b
 15235  0038D6  6B91               	clrf	(?_printf+3)& (0+255),b
 15236  0038D8  EC08  F00B         	call	_printf	;wreg free
 15237                           
 15238                           ;Test.c: 592: lcdInst(0b11000000);;
 15239  0038DC  0EC0               	movlw	192
 15240  0038DE  EC6D  F029         	call	_lcdInst
 15241                           
 15242                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15243  0038E2  0E6D               	movlw	low STR_123
 15244  0038E4  0100               	movlb	0	; () banked
 15245  0038E6  6F8E               	movwf	printf@f& (0+255),b
 15246  0038E8  0EFB               	movlw	high STR_123
 15247  0038EA  0100               	movlb	0	; () banked
 15248  0038EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15249  0038EE  EC08  F00B         	call	_printf	;wreg free
 15250                           
 15251                           ;Test.c: 594: int cam_flag = 1;
 15252  0038F2  0E00               	movlw	0
 15253  0038F4  0100               	movlb	0	; () banked
 15254  0038F6  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15255  0038F8  0E01               	movlw	1
 15256  0038FA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15257                           
 15258                           ; BSR set to: 0
 15259                           ;Test.c: 595: int cond_flag = 0;
 15260  0038FC  0E00               	movlw	0
 15261  0038FE  0100               	movlb	0	; () banked
 15262  003900  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15263  003902  0E00               	movlw	0
 15264  003904  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15268                           
 15269                           ;Test.c: 596: while(1){
 15270  003906  D018               	goto	l8352
 15271  003908                     l8348:
 15272                           
 15273                           ;Test.c: 598: lcdInst(0b10000000);;
 15274  003908  0E80               	movlw	128
 15275  00390A  EC6D  F029         	call	_lcdInst
 15276                           
 15277                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15278  00390E  0E7F               	movlw	low STR_122
 15279  003910  0100               	movlb	0	; () banked
 15280  003912  6F8E               	movwf	printf@f& (0+255),b
 15281  003914  0EFB               	movlw	high STR_122
 15282  003916  0100               	movlb	0	; () banked
 15283  003918  6F8F               	movwf	(printf@f+1)& (0+255),b
 15284  00391A  A480               	btfss	3968,2,c	;volatile
 15285  00391C  D004               	goto	u7000
 15286  00391E  0100               	movlb	0	; () banked
 15287  003920  6BAB               	clrf	??_BlockerTest& (0+255),b
 15288  003922  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15289  003924  D002               	goto	u7008
 15290  003926                     u7000:
 15291  003926  0100               	movlb	0	; () banked
 15292  003928  6BAB               	clrf	??_BlockerTest& (0+255),b
 15293  00392A                     u7008:
 15294  00392A  0100               	movlb	0	; () banked
 15295  00392C  51AB               	movf	??_BlockerTest& (0+255),w,b
 15296  00392E  0100               	movlb	0	; () banked
 15297  003930  6F90               	movwf	(?_printf+2)& (0+255),b
 15298  003932  6B91               	clrf	(?_printf+3)& (0+255),b
 15299  003934  EC08  F00B         	call	_printf	;wreg free
 15300  003938                     l8352:
 15301  003938  A281               	btfss	3969,1,c	;volatile
 15302  00393A  D7E6               	goto	l8348
 15303                           
 15304                           ;Test.c: 600: }
 15305                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15306  00393C  3881               	swapf	3969,w,c	;volatile
 15307  00393E  0B0F               	andlw	15
 15308  003940  0A0F               	xorlw	15
 15309  003942  B4D8               	btfsc	status,2,c
 15310  003944  0012               	return	
 15311                           
 15312                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15313                           
 15314                           ;Test.c: 603: }
 15315                           
 15316                           ;Test.c: 602: break;
 15317  003946  3881               	swapf	3969,w,c	;volatile
 15318  003948  0B0F               	andlw	15
 15319  00394A  06E8               	decf	wreg,f,c
 15320  00394C  A4D8               	btfss	status,2,c
 15321  00394E  D016               	goto	l8370
 15322                           
 15323                           ;Test.c: 605: if(cond_flag){
 15324  003950  0100               	movlb	0	; () banked
 15325  003952  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15326  003954  0100               	movlb	0	; () banked
 15327  003956  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15328  003958  B4D8               	btfsc	status,2,c
 15329  00395A  D007               	goto	l1369
 15330                           
 15331                           ; BSR set to: 0
 15332                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15333  00395C  8689               	bsf	3977,3,c	;volatile
 15334  00395E  D006               	goto	l8368
 15335  003960                     u7051:
 15336  003960  0E01               	movlw	1
 15337  003962                     u7060:
 15338  003962  0100               	movlb	0	; () banked
 15339  003964  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15340  003966  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15341                           
 15342                           ;Test.c: 608: }
 15343  003968  D054               	goto	l8394
 15344  00396A                     l1369:
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;Test.c: 609: else{
 15348                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15349  00396A  9689               	bcf	3977,3,c	;volatile
 15350  00396C                     l8368:
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;Test.c: 611: cond_flag = !cond_flag;
 15354  00396C  0100               	movlb	0	; () banked
 15355  00396E  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15356  003970  0100               	movlb	0	; () banked
 15357  003972  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15358  003974  B4D8               	btfsc	status,2,c
 15359  003976  D7F4               	goto	u7051
 15360  003978  0E00               	movlw	0
 15361  00397A  D7F3               	goto	u7060
 15362  00397C                     l8370:
 15363                           
 15364                           ;Test.c: 614: else{
 15365                           ;Test.c: 615: if(cam_flag){
 15366  00397C  0100               	movlb	0	; () banked
 15367  00397E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15368  003980  0100               	movlb	0	; () banked
 15369  003982  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15370  003984  B4D8               	btfsc	status,2,c
 15371  003986  D007               	goto	l8376
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15375  003988  808B               	bsf	3979,0,c	;volatile
 15376  00398A  D023               	goto	l8388
 15377  00398C                     u7101:
 15378  00398C  0E01               	movlw	1
 15379  00398E                     u7110:
 15380  00398E  0100               	movlb	0	; () banked
 15381  003990  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15382  003992  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15383                           
 15384                           ;Test.c: 618: }
 15385  003994  D03E               	goto	l8394
 15386  003996                     l8376:
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;Test.c: 619: else{
 15390                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15391  003996  0E00               	movlw	0
 15392  003998  0100               	movlb	0	; () banked
 15393  00399A  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15394  00399C  0E00               	movlw	0
 15395  00399E  6FAC               	movwf	BlockerTest@i& (0+255),b
 15396  0039A0                     l8378:
 15397                           
 15398                           ; BSR set to: 0
 15399  0039A0  0100               	movlb	0	; () banked
 15400  0039A2  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15401  0039A4  D008               	goto	l1374
 15402  0039A6  0E88               	movlw	136
 15403  0039A8  0100               	movlb	0	; () banked
 15404  0039AA  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15405  0039AC  0E13               	movlw	19
 15406  0039AE  0100               	movlb	0	; () banked
 15407  0039B0  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15408  0039B2  B0D8               	btfsc	status,0,c
 15409  0039B4  D00D               	goto	l1375
 15410  0039B6                     l1374:
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;Test.c: 621: {
 15414                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15415  0039B6  808B               	bsf	3979,0,c	;volatile
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15419  0039B8  0E1A               	movlw	26
 15420  0039BA                     u10057:
 15421  0039BA  2EE8               	decfsz	wreg,f,c
 15422  0039BC  D7FE               	bra	u10057
 15423  0039BE  D000               	nop2	
 15424                           
 15425                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15426  0039C0  908B               	bcf	3979,0,c	;volatile
 15427                           
 15428                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15429  0039C2  0EF0               	movlw	240
 15430  0039C4                     u10067:
 15431  0039C4  2EE8               	decfsz	wreg,f,c
 15432  0039C6  D7FE               	bra	u10067
 15433  0039C8  0100               	movlb	0	; () banked
 15434  0039CA  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15435  0039CC  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15436  0039CE  D7E8               	goto	l8378
 15437  0039D0                     l1375:
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;Test.c: 626: }
 15441                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15442  0039D0  908B               	bcf	3979,0,c	;volatile
 15443  0039D2                     l8388:
 15444                           
 15445                           ; BSR set to: 0
 15446                           ;Test.c: 628: cam_flag = !cam_flag;
 15447  0039D2  0100               	movlb	0	; () banked
 15448  0039D4  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15449  0039D6  0100               	movlb	0	; () banked
 15450  0039D8  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15451  0039DA  B4D8               	btfsc	status,2,c
 15452  0039DC  D7D7               	goto	u7101
 15453  0039DE  0E00               	movlw	0
 15454  0039E0  D7D6               	goto	u7110
 15455  0039E2                     l8390:
 15456                           
 15457                           ;Test.c: 633: lcdInst(0b10000000);;
 15458  0039E2  0E80               	movlw	128
 15459  0039E4  EC6D  F029         	call	_lcdInst
 15460                           
 15461                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15462  0039E8  0E7F               	movlw	low STR_122
 15463  0039EA  0100               	movlb	0	; () banked
 15464  0039EC  6F8E               	movwf	printf@f& (0+255),b
 15465  0039EE  0EFB               	movlw	high STR_122
 15466  0039F0  0100               	movlb	0	; () banked
 15467  0039F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15468  0039F4  A480               	btfss	3968,2,c	;volatile
 15469  0039F6  D004               	goto	u7160
 15470  0039F8  0100               	movlb	0	; () banked
 15471  0039FA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15472  0039FC  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15473  0039FE  D002               	goto	u7168
 15474  003A00                     u7160:
 15475  003A00  0100               	movlb	0	; () banked
 15476  003A02  6BAB               	clrf	??_BlockerTest& (0+255),b
 15477  003A04                     u7168:
 15478  003A04  0100               	movlb	0	; () banked
 15479  003A06  51AB               	movf	??_BlockerTest& (0+255),w,b
 15480  003A08  0100               	movlb	0	; () banked
 15481  003A0A  6F90               	movwf	(?_printf+2)& (0+255),b
 15482  003A0C  6B91               	clrf	(?_printf+3)& (0+255),b
 15483  003A0E  EC08  F00B         	call	_printf	;wreg free
 15484  003A12                     l8394:
 15485  003A12  A281               	btfss	3969,1,c	;volatile
 15486  003A14  D791               	goto	l8352
 15487  003A16  D7E5               	goto	l8390
 15488  003A18                     __end_of_BlockerTest:
 15489                           	opt stack 0
 15490                           tblptru	equ	0xFF8
 15491                           tblptrh	equ	0xFF7
 15492                           tblptrl	equ	0xFF6
 15493                           tablat	equ	0xFF5
 15494                           prodh	equ	0xFF4
 15495                           prodl	equ	0xFF3
 15496                           intcon	equ	0xFF2
 15497                           intcon2	equ	0xFF1
 15498                           intcon3	equ	0xFF0
 15499                           postinc0	equ	0xFEE
 15500                           wreg	equ	0xFE8
 15501                           postdec1	equ	0xFE5
 15502                           fsr1l	equ	0xFE1
 15503                           indf2	equ	0xFDF
 15504                           postinc2	equ	0xFDE
 15505                           postdec2	equ	0xFDD
 15506                           fsr2h	equ	0xFDA
 15507                           fsr2l	equ	0xFD9
 15508                           status	equ	0xFD8
 15509                           
 15510 ;; *************** function _printf *****************
 15511 ;; Defined at:
 15512 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15513 ;; Parameters:    Size  Location     Type
 15514 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15515 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15516 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15517 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15518 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15519 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15520 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15521 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15522 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15523 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15524 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15525 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15526 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15527 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15528 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15529 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15530 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15531 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15532 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15533 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15534 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15535 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15536 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15537 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15538 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15539 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;  tmpval          4    0        struct .
 15542 ;;  width           2   41[BANK0 ] int 
 15543 ;;  val             2   37[BANK0 ] unsigned int 
 15544 ;;  len             2   35[BANK0 ] unsigned int 
 15545 ;;  ap              2   33[BANK0 ] PTR void [1]
 15546 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15547 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15548 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15549 ;;  c               1   40[BANK0 ] char 
 15550 ;;  flag            1   39[BANK0 ] unsigned char 
 15551 ;;  prec            1   30[BANK0 ] char 
 15552 ;; Return value:  Size  Location     Type
 15553 ;;                  2   14[BANK0 ] int 
 15554 ;; Registers used:
 15555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15556 ;; Tracked objects:
 15557 ;;		On entry : 0/0
 15558 ;;		On exit  : 0/0
 15559 ;;		Unchanged: 0/0
 15560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15561 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15563 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;Total ram usage:       29 bytes
 15566 ;; Hardware stack levels used:    1
 15567 ;; Hardware stack levels required when called:    9
 15568 ;; This function calls:
 15569 ;;		___lwdiv
 15570 ;;		___lwmod
 15571 ;;		___wmul
 15572 ;;		_isdigit
 15573 ;;		_putch
 15574 ;; This function is called by:
 15575 ;;		_UI
 15576 ;;		_change_state_to_menu_start
 15577 ;;		_change_state_to_menu_12
 15578 ;;		_change_state_to_menu_22
 15579 ;;		_printRTC
 15580 ;;		_EEPROM_write
 15581 ;;		_Test
 15582 ;;		_algorithmTest
 15583 ;;		_sensorTest
 15584 ;;		_actuatorTest
 15585 ;;		_BothServos
 15586 ;;		_PortTestA5
 15587 ;;		_PusherTest
 15588 ;;		_SpeedTest
 15589 ;;		_BlockerTest
 15590 ;;		_ToggleTestA5
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594                           	psect	text51
 15595  001610                     __ptext51:
 15596                           	opt stack 0
 15597  001610                     _printf:
 15598                           	opt stack 18
 15599                           
 15600                           ;doprnt.c: 466: va_list ap;
 15601                           ;doprnt.c: 499: signed char c;
 15602                           ;doprnt.c: 501: int width;
 15603                           ;doprnt.c: 506: signed char prec;
 15604                           ;doprnt.c: 508: unsigned char flag;
 15605                           ;doprnt.c: 523: union {
 15606                           ;doprnt.c: 524: unsigned long vd;
 15607                           ;doprnt.c: 525: double integ;
 15608                           ;doprnt.c: 526: } tmpval;
 15609                           ;doprnt.c: 528: unsigned int val;
 15610                           ;doprnt.c: 529: unsigned len;
 15611                           ;doprnt.c: 530: const char * cp;
 15612                           ;doprnt.c: 533: *ap = __va_start();
 15613                           
 15614                           ;incstack = 0
 15615  001610  0E90               	movlw	low (?_printf+2)
 15616  001612  0100               	movlb	0	; () banked
 15617  001614  6FA1               	movwf	printf@ap& (0+255),b
 15618  001616  0E00               	movlw	high (?_printf+2)
 15619  001618  0100               	movlb	0	; () banked
 15620  00161A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15621                           
 15622                           ;doprnt.c: 536: while(c = *f++) {
 15623  00161C  D205               	goto	l6376
 15624  00161E                     l6246:
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;doprnt.c: 538: if(c != '%')
 15628  00161E  0E25               	movlw	37
 15629  001620  0100               	movlb	0	; () banked
 15630  001622  19A8               	xorwf	printf@c& (0+255),w,b
 15631  001624  B4D8               	btfsc	status,2,c
 15632  001626  D005               	goto	l6250
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;doprnt.c: 540: {
 15636                           ;doprnt.c: 541: (putch(c) );
 15637  001628  0100               	movlb	0	; () banked
 15638  00162A  51A8               	movf	printf@c& (0+255),w,b
 15639  00162C  EC65  F029         	call	_putch
 15640                           
 15641                           ;doprnt.c: 542: continue;
 15642  001630  D1FB               	goto	l6376
 15643  001632                     l6250:
 15644                           
 15645                           ;doprnt.c: 543: }
 15646                           ;doprnt.c: 546: width = 0;
 15647  001632  0E00               	movlw	0
 15648  001634  0100               	movlb	0	; () banked
 15649  001636  6FAA               	movwf	(printf@width+1)& (0+255),b
 15650  001638  0E00               	movlw	0
 15651  00163A  6FA9               	movwf	printf@width& (0+255),b
 15652                           
 15653                           ;doprnt.c: 548: flag = 0;
 15654  00163C  0E00               	movlw	0
 15655  00163E  0100               	movlb	0	; () banked
 15656  001640  6FA7               	movwf	printf@flag& (0+255),b
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;doprnt.c: 551: switch(*f) {
 15660                           
 15661                           ;doprnt.c: 550: for(;;) {
 15662  001642  D005               	goto	l6256
 15663  001644                     l6252:
 15664                           
 15665                           ;doprnt.c: 580: flag |= 0x04;
 15666  001644  0100               	movlb	0	; () banked
 15667  001646  85A7               	bsf	printf@flag& (0+255),2,b
 15668                           
 15669                           ;doprnt.c: 581: f++;
 15670  001648  0100               	movlb	0	; () banked
 15671  00164A  4B8E               	infsnz	printf@f& (0+255),f,b
 15672  00164C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15673  00164E                     l6256:
 15674  00164E  C08E  FFF6         	movff	printf@f,tblptrl
 15675  001652  C08F  FFF7         	movff	printf@f+1,tblptrh
 15676  001656                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15677  001656  6AF8               	clrf	tblptru,c
 15678  001658                     	endif
 15679  001658                     	if	0	;tblptru may be non-zero
 15680  001658                     	endif
 15681  001658  0008               	tblrd		*
 15682  00165A  50F5               	movf	tablat,w,c
 15683                           
 15684                           ; Switch size 1, requested type "space"
 15685                           ; Number of cases is 1, Range of values is 48 to 48
 15686                           ; switch strategies available:
 15687                           ; Name         Instructions Cycles
 15688                           ; simple_byte            4     3 (average)
 15689                           ;	Chosen strategy is simple_byte
 15690  00165C  0A30               	xorlw	48	; case 48
 15691  00165E  B4D8               	btfsc	status,2,c
 15692  001660  D7F1               	goto	l6252
 15693                           
 15694                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15695                           
 15696                           ;doprnt.c: 586: }
 15697                           
 15698                           ;doprnt.c: 585: break;
 15699  001662  C08E  FFF6         	movff	printf@f,tblptrl
 15700  001666  C08F  FFF7         	movff	printf@f+1,tblptrh
 15701  00166A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15702  00166A  6AF8               	clrf	tblptru,c
 15703  00166C                     	endif
 15704  00166C                     	if	0	;tblptru may be non-zero
 15705  00166C                     	endif
 15706  00166C  0008               	tblrd		*
 15707  00166E  50F5               	movf	tablat,w,c
 15708  001670  EC7A  F028         	call	_isdigit
 15709  001674  A0D8               	btfss	status,0,c
 15710  001676  D0D2               	goto	l6304
 15711                           
 15712                           ;doprnt.c: 598: width = 0;
 15713  001678  0E00               	movlw	0
 15714  00167A  0100               	movlb	0	; () banked
 15715  00167C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15716  00167E  0E00               	movlw	0
 15717  001680  6FA9               	movwf	printf@width& (0+255),b
 15718  001682                     l6262:
 15719                           
 15720                           ;doprnt.c: 600: width *= 10;
 15721  001682  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15722  001686  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15723  00168A  0E00               	movlw	0
 15724  00168C  0100               	movlb	0	; () banked
 15725  00168E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15726  001690  0E0A               	movlw	10
 15727  001692  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15728  001694  ECE3  F026         	call	___wmul	;wreg free
 15729  001698  C080  F0A9         	movff	?___wmul,printf@width
 15730  00169C  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15731                           
 15732                           ;doprnt.c: 601: width += *f++ - '0';
 15733  0016A0  0ED0               	movlw	208
 15734  0016A2  0100               	movlb	0	; () banked
 15735  0016A4  6F9A               	movwf	??_printf& (0+255),b
 15736  0016A6  0EFF               	movlw	255
 15737  0016A8  0100               	movlb	0	; () banked
 15738  0016AA  6F9B               	movwf	(??_printf+1)& (0+255),b
 15739  0016AC  C08E  FFF6         	movff	printf@f,tblptrl
 15740  0016B0  C08F  FFF7         	movff	printf@f+1,tblptrh
 15741  0016B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15742  0016B4  6AF8               	clrf	tblptru,c
 15743  0016B6                     	endif
 15744  0016B6                     	if	0	;tblptru may be non-zero
 15745  0016B6                     	endif
 15746  0016B6  0008               	tblrd		*
 15747  0016B8  50F5               	movf	tablat,w,c
 15748  0016BA  0100               	movlb	0	; () banked
 15749  0016BC  6F9C               	movwf	(??_printf+2)& (0+255),b
 15750  0016BE  6B9D               	clrf	(??_printf+3)& (0+255),b
 15751  0016C0  0100               	movlb	0	; () banked
 15752  0016C2  519A               	movf	??_printf& (0+255),w,b
 15753  0016C4  0100               	movlb	0	; () banked
 15754  0016C6  279C               	addwf	(??_printf+2)& (0+255),f,b
 15755  0016C8  0100               	movlb	0	; () banked
 15756  0016CA  519B               	movf	(??_printf+1)& (0+255),w,b
 15757  0016CC  0100               	movlb	0	; () banked
 15758  0016CE  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15759  0016D0  0100               	movlb	0	; () banked
 15760  0016D2  519C               	movf	(??_printf+2)& (0+255),w,b
 15761  0016D4  0100               	movlb	0	; () banked
 15762  0016D6  27A9               	addwf	printf@width& (0+255),f,b
 15763  0016D8  0100               	movlb	0	; () banked
 15764  0016DA  519D               	movf	(??_printf+3)& (0+255),w,b
 15765  0016DC  0100               	movlb	0	; () banked
 15766  0016DE  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15767                           
 15768                           ; BSR set to: 0
 15769  0016E0  0100               	movlb	0	; () banked
 15770  0016E2  4B8E               	infsnz	printf@f& (0+255),f,b
 15771  0016E4  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15772                           
 15773                           ; BSR set to: 0
 15774                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15775  0016E6  C08E  FFF6         	movff	printf@f,tblptrl
 15776  0016EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 15777  0016EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15778  0016EE  6AF8               	clrf	tblptru,c
 15779  0016F0                     	endif
 15780  0016F0                     	if	0	;tblptru may be non-zero
 15781  0016F0                     	endif
 15782  0016F0  0008               	tblrd		*
 15783  0016F2  50F5               	movf	tablat,w,c
 15784  0016F4  EC7A  F028         	call	_isdigit
 15785  0016F8  A0D8               	btfss	status,0,c
 15786  0016FA  D090               	goto	l6304
 15787  0016FC  D7C2               	goto	l6262
 15788  0016FE                     l6270:
 15789                           
 15790                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15791  0016FE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15792  001702  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15793  001706  CFDE F09F          	movff	postinc2,printf@cp
 15794  00170A  CFDD F0A0          	movff	postdec2,printf@cp+1
 15795  00170E  0E02               	movlw	2
 15796  001710  0100               	movlb	0	; () banked
 15797  001712  27A1               	addwf	printf@ap& (0+255),f,b
 15798  001714  0E00               	movlw	0
 15799  001716  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15800                           
 15801                           ; BSR set to: 0
 15802                           ;doprnt.c: 740: if(!cp)
 15803  001718  0100               	movlb	0	; () banked
 15804  00171A  519F               	movf	printf@cp& (0+255),w,b
 15805  00171C  0100               	movlb	0	; () banked
 15806  00171E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15807  001720  A4D8               	btfss	status,2,c
 15808  001722  D006               	goto	l6278
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;doprnt.c: 741: cp = "(null)";
 15812  001724  0EB6               	movlw	low STR_126
 15813  001726  0100               	movlb	0	; () banked
 15814  001728  6F9F               	movwf	printf@cp& (0+255),b
 15815  00172A  0EFF               	movlw	high STR_126
 15816  00172C  0100               	movlb	0	; () banked
 15817  00172E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15818  001730                     l6278:
 15819                           
 15820                           ; BSR set to: 0
 15821                           ;doprnt.c: 745: len = 0;
 15822  001730  0E00               	movlw	0
 15823  001732  0100               	movlb	0	; () banked
 15824  001734  6FA4               	movwf	(printf@len+1)& (0+255),b
 15825  001736  0E00               	movlw	0
 15826  001738  6FA3               	movwf	printf@len& (0+255),b
 15827                           
 15828                           ;doprnt.c: 746: while(cp[len])
 15829  00173A  D003               	goto	l6282
 15830  00173C                     l6280:
 15831                           
 15832                           ;doprnt.c: 747: len++;
 15833  00173C  0100               	movlb	0	; () banked
 15834  00173E  4BA3               	infsnz	printf@len& (0+255),f,b
 15835  001740  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15836  001742                     l6282:
 15837                           
 15838                           ; BSR set to: 0
 15839  001742  0100               	movlb	0	; () banked
 15840  001744  51A3               	movf	printf@len& (0+255),w,b
 15841  001746  0100               	movlb	0	; () banked
 15842  001748  259F               	addwf	printf@cp& (0+255),w,b
 15843  00174A  0100               	movlb	0	; () banked
 15844  00174C  6F9A               	movwf	??_printf& (0+255),b
 15845  00174E  0100               	movlb	0	; () banked
 15846  001750  51A4               	movf	(printf@len+1)& (0+255),w,b
 15847  001752  0100               	movlb	0	; () banked
 15848  001754  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15849  001756  0100               	movlb	0	; () banked
 15850  001758  6F9B               	movwf	(??_printf+1)& (0+255),b
 15851  00175A  C09A  FFF6         	movff	??_printf,tblptrl
 15852  00175E  C09B  FFF7         	movff	??_printf+1,tblptrh
 15853  001762  0E00               	movlw	low (__mediumconst shr (0+16))
 15854  001764  6EF8               	movwf	tblptru,c
 15855  001766  0E0F               	movlw	(high __ramtop+-1)
 15856  001768  64F7               	cpfsgt	tblptrh,c
 15857  00176A  D003               	bra	u4617
 15858  00176C  0008               	tblrd		*
 15859  00176E  50F5               	movf	tablat,w,c
 15860  001770  D005               	bra	u4610
 15861  001772                     u4617:
 15862  001772  CFF6 FFE9          	movff	tblptrl,fsr0l
 15863  001776  CFF7 FFEA          	movff	tblptrh,fsr0h
 15864  00177A  50EF               	movf	indf0,w,c
 15865  00177C                     u4610:
 15866  00177C  0900               	iorlw	0
 15867  00177E  A4D8               	btfss	status,2,c
 15868  001780  D7DD               	goto	l6280
 15869                           
 15870                           ;doprnt.c: 757: if(width > len)
 15871  001782  0100               	movlb	0	; () banked
 15872  001784  51A9               	movf	printf@width& (0+255),w,b
 15873  001786  0100               	movlb	0	; () banked
 15874  001788  5DA3               	subwf	printf@len& (0+255),w,b
 15875  00178A  0100               	movlb	0	; () banked
 15876  00178C  51AA               	movf	(printf@width+1)& (0+255),w,b
 15877  00178E  0100               	movlb	0	; () banked
 15878  001790  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15879  001792  B0D8               	btfsc	status,0,c
 15880  001794  D009               	goto	l6288
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;doprnt.c: 758: width -= len;
 15884  001796  0100               	movlb	0	; () banked
 15885  001798  51A3               	movf	printf@len& (0+255),w,b
 15886  00179A  0100               	movlb	0	; () banked
 15887  00179C  5FA9               	subwf	printf@width& (0+255),f,b
 15888  00179E  0100               	movlb	0	; () banked
 15889  0017A0  51A4               	movf	(printf@len+1)& (0+255),w,b
 15890  0017A2  0100               	movlb	0	; () banked
 15891  0017A4  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15892  0017A6  D009               	goto	l6292
 15893  0017A8                     l6288:
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;doprnt.c: 759: else
 15897                           ;doprnt.c: 760: width = 0;
 15898  0017A8  0E00               	movlw	0
 15899  0017AA  0100               	movlb	0	; () banked
 15900  0017AC  6FAA               	movwf	(printf@width+1)& (0+255),b
 15901  0017AE  0E00               	movlw	0
 15902  0017B0  6FA9               	movwf	printf@width& (0+255),b
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;doprnt.c: 764: while(width--)
 15906  0017B2  D003               	goto	l6292
 15907  0017B4                     l6290:
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;doprnt.c: 765: (putch(' ') );
 15911  0017B4  0E20               	movlw	32
 15912  0017B6  EC65  F029         	call	_putch
 15913  0017BA                     l6292:
 15914  0017BA  0100               	movlb	0	; () banked
 15915  0017BC  07A9               	decf	printf@width& (0+255),f,b
 15916  0017BE  A0D8               	btfss	status,0,c
 15917  0017C0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15918  0017C2  0100               	movlb	0	; () banked
 15919  0017C4  29A9               	incf	printf@width& (0+255),w,b
 15920  0017C6  E1F6               	bnz	l6290
 15921  0017C8  0100               	movlb	0	; () banked
 15922  0017CA  29AA               	incf	(printf@width+1)& (0+255),w,b
 15923  0017CC  B4D8               	btfsc	status,2,c
 15924  0017CE  D017               	goto	l6298
 15925  0017D0  D7F1               	goto	l6290
 15926  0017D2                     l6294:
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;doprnt.c: 768: (putch(*cp++) );
 15930  0017D2  C09F  FFF6         	movff	printf@cp,tblptrl
 15931  0017D6  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15932  0017DA  0E00               	movlw	low (__mediumconst shr (0+16))
 15933  0017DC  6EF8               	movwf	tblptru,c
 15934  0017DE  0E0F               	movlw	(high __ramtop+-1)
 15935  0017E0  64F7               	cpfsgt	tblptrh,c
 15936  0017E2  D003               	bra	u4657
 15937  0017E4  0008               	tblrd		*
 15938  0017E6  50F5               	movf	tablat,w,c
 15939  0017E8  D005               	bra	u4650
 15940  0017EA                     u4657:
 15941  0017EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 15942  0017EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 15943  0017F2  50EF               	movf	indf0,w,c
 15944  0017F4                     u4650:
 15945  0017F4  EC65  F029         	call	_putch
 15946  0017F8  0100               	movlb	0	; () banked
 15947  0017FA  4B9F               	infsnz	printf@cp& (0+255),f,b
 15948  0017FC  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15949  0017FE                     l6298:
 15950                           
 15951                           ; BSR set to: 0
 15952  0017FE  0100               	movlb	0	; () banked
 15953  001800  07A3               	decf	printf@len& (0+255),f,b
 15954  001802  A0D8               	btfss	status,0,c
 15955  001804  07A4               	decf	(printf@len+1)& (0+255),f,b
 15956  001806  0100               	movlb	0	; () banked
 15957  001808  29A3               	incf	printf@len& (0+255),w,b
 15958  00180A  E1E3               	bnz	l6294
 15959  00180C  0100               	movlb	0	; () banked
 15960  00180E  29A4               	incf	(printf@len+1)& (0+255),w,b
 15961  001810  B4D8               	btfsc	status,2,c
 15962  001812  D10A               	goto	l6376
 15963  001814  D7DE               	goto	l6294
 15964  001816                     l6300:
 15965                           
 15966                           ; BSR set to: 0
 15967                           ;doprnt.c: 818: flag |= 0x40;
 15968  001816  0100               	movlb	0	; () banked
 15969  001818  8DA7               	bsf	printf@flag& (0+255),6,b
 15970                           
 15971                           ; BSR set to: 0
 15972                           ;doprnt.c: 822: }
 15973                           
 15974                           ;doprnt.c: 819: break;
 15975  00181A  D01D               	goto	l1410
 15976  00181C                     l6304:
 15977  00181C  C08E  FFF6         	movff	printf@f,tblptrl
 15978  001820  C08F  FFF7         	movff	printf@f+1,tblptrh
 15979  001824  0100               	movlb	0	; () banked
 15980  001826  4B8E               	infsnz	printf@f& (0+255),f,b
 15981  001828  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15982  00182A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15983  00182A  6AF8               	clrf	tblptru,c
 15984  00182C                     	endif
 15985  00182C                     	if	0	;tblptru may be non-zero
 15986  00182C                     	endif
 15987  00182C  0008               	tblrd		*
 15988  00182E  CFF5 F0A8          	movff	tablat,printf@c
 15989  001832  0100               	movlb	0	; () banked
 15990  001834  51A8               	movf	printf@c& (0+255),w,b
 15991                           
 15992                           ; Switch size 1, requested type "space"
 15993                           ; Number of cases is 5, Range of values is 0 to 117
 15994                           ; switch strategies available:
 15995                           ; Name         Instructions Cycles
 15996                           ; simple_byte           16     9 (average)
 15997                           ;	Chosen strategy is simple_byte
 15998  001836  0A00               	xorlw	0	; case 0
 15999  001838  B4D8               	btfsc	status,2,c
 16000  00183A  0012               	return	
 16001  00183C  0A64               	xorlw	100	; case 100
 16002  00183E  B4D8               	btfsc	status,2,c
 16003  001840  D00A               	goto	l1410
 16004  001842  0A0D               	xorlw	13	; case 105
 16005  001844  B4D8               	btfsc	status,2,c
 16006  001846  D007               	goto	l1410
 16007  001848  0A1A               	xorlw	26	; case 115
 16008  00184A  B4D8               	btfsc	status,2,c
 16009  00184C  D758               	goto	l6270
 16010  00184E  0A06               	xorlw	6	; case 117
 16011  001850  B4D8               	btfsc	status,2,c
 16012  001852  D7E1               	goto	l6300
 16013  001854  D0E9               	goto	l6376
 16014  001856                     l1410:
 16015                           
 16016                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16017  001856  0100               	movlb	0	; () banked
 16018  001858  BDA7               	btfsc	printf@flag& (0+255),6,b
 16019  00185A  D019               	goto	l6316
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;doprnt.c: 1253: {
 16023                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16024  00185C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16025  001860  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16026  001864  CFDE F0A5          	movff	postinc2,printf@val
 16027  001868  CFDD F0A6          	movff	postdec2,printf@val+1
 16028                           
 16029                           ; BSR set to: 0
 16030  00186C  0E02               	movlw	2
 16031  00186E  0100               	movlb	0	; () banked
 16032  001870  27A1               	addwf	printf@ap& (0+255),f,b
 16033  001872  0E00               	movlw	0
 16034  001874  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;doprnt.c: 1261: if((int)val < 0) {
 16038  001876  0100               	movlb	0	; () banked
 16039  001878  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16040  00187A  D016               	goto	l6320
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;doprnt.c: 1262: flag |= 0x03;
 16044  00187C  0E03               	movlw	3
 16045  00187E  0100               	movlb	0	; () banked
 16046  001880  13A7               	iorwf	printf@flag& (0+255),f,b
 16047                           
 16048                           ; BSR set to: 0
 16049                           ;doprnt.c: 1263: val = -val;
 16050  001882  0100               	movlb	0	; () banked
 16051  001884  6DA5               	negf	printf@val& (0+255),b
 16052  001886  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16053  001888  B0D8               	btfsc	status,0,c
 16054  00188A  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16055                           
 16056                           ; BSR set to: 0
 16057                           ;doprnt.c: 1264: }
 16058                           ;doprnt.c: 1266: }
 16059  00188C  D00D               	goto	l6320
 16060  00188E                     l6316:
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;doprnt.c: 1268: else
 16064                           ;doprnt.c: 1273: {
 16065                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16066  00188E  C0A1  FFD9         	movff	printf@ap,fsr2l
 16067  001892  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16068  001896  CFDE F0A5          	movff	postinc2,printf@val
 16069  00189A  CFDD F0A6          	movff	postdec2,printf@val+1
 16070                           
 16071                           ; BSR set to: 0
 16072  00189E  0E02               	movlw	2
 16073  0018A0  0100               	movlb	0	; () banked
 16074  0018A2  27A1               	addwf	printf@ap& (0+255),f,b
 16075  0018A4  0E00               	movlw	0
 16076  0018A6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16077  0018A8                     l6320:
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;doprnt.c: 1287: }
 16081                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16082  0018A8  0E01               	movlw	1
 16083  0018AA  0100               	movlb	0	; () banked
 16084  0018AC  6FA8               	movwf	printf@c& (0+255),b
 16085  0018AE                     l6322:
 16086                           
 16087                           ; BSR set to: 0
 16088  0018AE  0E05               	movlw	5
 16089  0018B0  0100               	movlb	0	; () banked
 16090  0018B2  19A8               	xorwf	printf@c& (0+255),w,b
 16091  0018B4  B4D8               	btfsc	status,2,c
 16092  0018B6  D019               	goto	l6334
 16093                           
 16094                           ; BSR set to: 0
 16095                           ;doprnt.c: 1306: if(val < dpowers[c])
 16096                           
 16097                           ; BSR set to: 0
 16098                           
 16099                           ; BSR set to: 0
 16100  0018B8  0100               	movlb	0	; () banked
 16101  0018BA  51A8               	movf	printf@c& (0+255),w,b
 16102  0018BC  0D02               	mullw	2
 16103  0018BE  0E00               	movlw	low _dpowers
 16104  0018C0  24F3               	addwf	prodl,w,c
 16105  0018C2  6EF6               	movwf	tblptrl,c
 16106  0018C4  0EFB               	movlw	high _dpowers
 16107  0018C6  20F4               	addwfc	prodh,w,c
 16108  0018C8  6EF7               	movwf	tblptrh,c
 16109  0018CA                     	if	1	;There are 3 active tblptr bytes
 16110  0018CA  6AF8               	clrf	tblptru,c
 16111  0018CC  0E00               	movlw	low (__mediumconst shr (0+16))
 16112  0018CE  22F8               	addwfc	tblptru,f,c
 16113  0018D0                     	endif
 16114  0018D0  0009               	tblrd		*+
 16115  0018D2  50F5               	movf	tablat,w,c
 16116  0018D4  0100               	movlb	0	; () banked
 16117  0018D6  5DA5               	subwf	printf@val& (0+255),w,b
 16118  0018D8  0009               	tblrd		*+
 16119  0018DA  50F5               	movf	tablat,w,c
 16120  0018DC  0100               	movlb	0	; () banked
 16121  0018DE  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16122  0018E0  A0D8               	btfss	status,0,c
 16123  0018E2  D003               	goto	l6334
 16124                           
 16125                           ; BSR set to: 0
 16126                           
 16127                           ; BSR set to: 0
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;doprnt.c: 1307: break;
 16131  0018E4  0100               	movlb	0	; () banked
 16132  0018E6  2BA8               	incf	printf@c& (0+255),f,b
 16133  0018E8  D7E2               	goto	l6322
 16134  0018EA                     l6334:
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16138  0018EA  0100               	movlb	0	; () banked
 16139  0018EC  51A9               	movf	printf@width& (0+255),w,b
 16140  0018EE  0100               	movlb	0	; () banked
 16141  0018F0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16142  0018F2  B4D8               	btfsc	status,2,c
 16143  0018F4  D00B               	goto	l6340
 16144                           
 16145                           ; BSR set to: 0
 16146  0018F6  C0A7  F09A         	movff	printf@flag,??_printf
 16147  0018FA  0E03               	movlw	3
 16148  0018FC  0100               	movlb	0	; () banked
 16149  0018FE  179A               	andwf	??_printf& (0+255),f,b
 16150  001900  B4D8               	btfsc	status,2,c
 16151  001902  D004               	goto	l6340
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;doprnt.c: 1346: width--;
 16155  001904  0100               	movlb	0	; () banked
 16156  001906  07A9               	decf	printf@width& (0+255),f,b
 16157  001908  A0D8               	btfss	status,0,c
 16158  00190A  07AA               	decf	(printf@width+1)& (0+255),f,b
 16159  00190C                     l6340:
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;doprnt.c: 1381: if(width > c)
 16163  00190C  0E80               	movlw	128
 16164  00190E  0100               	movlb	0	; () banked
 16165  001910  BFA8               	btfsc	printf@c& (0+255),7,b
 16166  001912  0E7F               	movlw	127
 16167  001914  0100               	movlb	0	; () banked
 16168  001916  6F9A               	movwf	??_printf& (0+255),b
 16169  001918  0100               	movlb	0	; () banked
 16170  00191A  51A9               	movf	printf@width& (0+255),w,b
 16171  00191C  0100               	movlb	0	; () banked
 16172  00191E  5DA8               	subwf	printf@c& (0+255),w,b
 16173  001920  0100               	movlb	0	; () banked
 16174  001922  51AA               	movf	(printf@width+1)& (0+255),w,b
 16175  001924  0A80               	xorlw	128
 16176  001926  0100               	movlb	0	; () banked
 16177  001928  599A               	subwfb	??_printf& (0+255),w,b
 16178  00192A  B0D8               	btfsc	status,0,c
 16179  00192C  D00B               	goto	l6344
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;doprnt.c: 1382: width -= c;
 16183  00192E  0100               	movlb	0	; () banked
 16184  001930  51A8               	movf	printf@c& (0+255),w,b
 16185  001932  0100               	movlb	0	; () banked
 16186  001934  5FA9               	subwf	printf@width& (0+255),f,b
 16187  001936  0E00               	movlw	0
 16188  001938  0100               	movlb	0	; () banked
 16189  00193A  BFA8               	btfsc	printf@c& (0+255),7,b
 16190  00193C  0EFF               	movlw	255
 16191  00193E  0100               	movlb	0	; () banked
 16192  001940  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16193  001942  D005               	goto	l6346
 16194  001944                     l6344:
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;doprnt.c: 1383: else
 16198                           ;doprnt.c: 1384: width = 0;
 16199  001944  0E00               	movlw	0
 16200  001946  0100               	movlb	0	; () banked
 16201  001948  6FAA               	movwf	(printf@width+1)& (0+255),b
 16202  00194A  0E00               	movlw	0
 16203  00194C  6FA9               	movwf	printf@width& (0+255),b
 16204  00194E                     l6346:
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;doprnt.c: 1387: if(flag & 0x04) {
 16208  00194E  0100               	movlb	0	; () banked
 16209  001950  A5A7               	btfss	printf@flag& (0+255),2,b
 16210  001952  D018               	goto	l6358
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;doprnt.c: 1392: if(flag & 0x03)
 16214  001954  C0A7  F09A         	movff	printf@flag,??_printf
 16215  001958  0E03               	movlw	3
 16216  00195A  0100               	movlb	0	; () banked
 16217  00195C  179A               	andwf	??_printf& (0+255),f,b
 16218  00195E  B4D8               	btfsc	status,2,c
 16219  001960  D003               	goto	l6352
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;doprnt.c: 1393: (putch('-') );
 16223  001962  0E2D               	movlw	45
 16224  001964  EC65  F029         	call	_putch
 16225  001968                     l6352:
 16226                           
 16227                           ;doprnt.c: 1415: if(width)
 16228  001968  0100               	movlb	0	; () banked
 16229  00196A  51A9               	movf	printf@width& (0+255),w,b
 16230  00196C  0100               	movlb	0	; () banked
 16231  00196E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16232  001970  B4D8               	btfsc	status,2,c
 16233  001972  D025               	goto	l6368
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;doprnt.c: 1417: (putch('0') );
 16237                           
 16238                           ; BSR set to: 0
 16239                           
 16240                           ;doprnt.c: 1416: do
 16241  001974  0E30               	movlw	48
 16242  001976  EC65  F029         	call	_putch
 16243                           
 16244                           ;doprnt.c: 1418: while(--width);
 16245  00197A  0100               	movlb	0	; () banked
 16246  00197C  07A9               	decf	printf@width& (0+255),f,b
 16247  00197E  A0D8               	btfss	status,0,c
 16248  001980  07AA               	decf	(printf@width+1)& (0+255),f,b
 16249  001982  D7F2               	goto	l6352
 16250  001984                     l6358:
 16251                           
 16252                           ; BSR set to: 0
 16253                           ;doprnt.c: 1422: {
 16254                           ;doprnt.c: 1424: if(width
 16255                           ;doprnt.c: 1428: )
 16256  001984  0100               	movlb	0	; () banked
 16257  001986  51A9               	movf	printf@width& (0+255),w,b
 16258  001988  0100               	movlb	0	; () banked
 16259  00198A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16260  00198C  B4D8               	btfsc	status,2,c
 16261  00198E  D00D               	goto	l6364
 16262  001990                     l6360:
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;doprnt.c: 1430: (putch(' ') );
 16266  001990  0E20               	movlw	32
 16267  001992  EC65  F029         	call	_putch
 16268                           
 16269                           ;doprnt.c: 1431: while(--width);
 16270  001996  0100               	movlb	0	; () banked
 16271  001998  07A9               	decf	printf@width& (0+255),f,b
 16272  00199A  A0D8               	btfss	status,0,c
 16273  00199C  07AA               	decf	(printf@width+1)& (0+255),f,b
 16274  00199E  0100               	movlb	0	; () banked
 16275  0019A0  51A9               	movf	printf@width& (0+255),w,b
 16276  0019A2  0100               	movlb	0	; () banked
 16277  0019A4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16278  0019A6  A4D8               	btfss	status,2,c
 16279  0019A8  D7F3               	goto	l6360
 16280  0019AA                     l6364:
 16281                           
 16282                           ; BSR set to: 0
 16283                           ;doprnt.c: 1438: if(flag & 0x03)
 16284  0019AA  C0A7  F09A         	movff	printf@flag,??_printf
 16285  0019AE  0E03               	movlw	3
 16286  0019B0  0100               	movlb	0	; () banked
 16287  0019B2  179A               	andwf	??_printf& (0+255),f,b
 16288  0019B4  B4D8               	btfsc	status,2,c
 16289  0019B6  D003               	goto	l6368
 16290                           
 16291                           ; BSR set to: 0
 16292                           ;doprnt.c: 1439: (putch('-') );
 16293  0019B8  0E2D               	movlw	45
 16294  0019BA  EC65  F029         	call	_putch
 16295  0019BE                     l6368:
 16296                           
 16297                           ;doprnt.c: 1469: }
 16298                           ;doprnt.c: 1472: prec = c;
 16299  0019BE  C0A8  F09E         	movff	printf@c,printf@prec
 16300                           
 16301                           ;doprnt.c: 1474: while(prec--) {
 16302  0019C2  D02C               	goto	l6374
 16303  0019C4                     l6370:
 16304                           
 16305                           ;doprnt.c: 1478: {
 16306                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16307  0019C4  0100               	movlb	0	; () banked
 16308  0019C6  519E               	movf	printf@prec& (0+255),w,b
 16309  0019C8  0D02               	mullw	2
 16310  0019CA  0E00               	movlw	low _dpowers
 16311  0019CC  24F3               	addwf	prodl,w,c
 16312  0019CE  6EF6               	movwf	tblptrl,c
 16313  0019D0  0EFB               	movlw	high _dpowers
 16314  0019D2  20F4               	addwfc	prodh,w,c
 16315  0019D4  6EF7               	movwf	tblptrh,c
 16316  0019D6                     	if	1	;There are 3 active tblptr bytes
 16317  0019D6  6AF8               	clrf	tblptru,c
 16318  0019D8  0E00               	movlw	low (__mediumconst shr (0+16))
 16319  0019DA  22F8               	addwfc	tblptru,f,c
 16320  0019DC                     	endif
 16321  0019DC  0009               	tblrd		*+
 16322  0019DE  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16323  0019E2  000A               	tblrd		*-
 16324  0019E4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16325  0019E8  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16326  0019EC  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16327  0019F0  EC81  F023         	call	___lwdiv	;wreg free
 16328  0019F4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16329  0019F8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16330  0019FC  0E00               	movlw	0
 16331  0019FE  0100               	movlb	0	; () banked
 16332  001A00  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16333  001A02  0E0A               	movlw	10
 16334  001A04  6F89               	movwf	___lwmod@divisor& (0+255),b
 16335  001A06  EC9B  F024         	call	___lwmod	;wreg free
 16336  001A0A  0100               	movlb	0	; () banked
 16337  001A0C  5187               	movf	?___lwmod& (0+255),w,b
 16338  001A0E  0F30               	addlw	48
 16339  001A10  0100               	movlb	0	; () banked
 16340  001A12  6FA8               	movwf	printf@c& (0+255),b
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;doprnt.c: 1523: }
 16344                           ;doprnt.c: 1524: (putch(c) );
 16345  001A14  0100               	movlb	0	; () banked
 16346  001A16  51A8               	movf	printf@c& (0+255),w,b
 16347  001A18  EC65  F029         	call	_putch
 16348  001A1C                     l6374:
 16349  001A1C  0100               	movlb	0	; () banked
 16350  001A1E  079E               	decf	printf@prec& (0+255),f,b
 16351  001A20  0100               	movlb	0	; () banked
 16352  001A22  299E               	incf	printf@prec& (0+255),w,b
 16353  001A24  A4D8               	btfss	status,2,c
 16354  001A26  D7CE               	goto	l6370
 16355  001A28                     l6376:
 16356  001A28  C08E  FFF6         	movff	printf@f,tblptrl
 16357  001A2C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16358  001A30  0100               	movlb	0	; () banked
 16359  001A32  4B8E               	infsnz	printf@f& (0+255),f,b
 16360  001A34  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16361  001A36                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16362  001A36  6AF8               	clrf	tblptru,c
 16363  001A38                     	endif
 16364  001A38                     	if	0	;tblptru may be non-zero
 16365  001A38                     	endif
 16366  001A38  0008               	tblrd		*
 16367  001A3A  CFF5 F0A8          	movff	tablat,printf@c
 16368  001A3E  0100               	movlb	0	; () banked
 16369  001A40  51A8               	movf	printf@c& (0+255),w,b
 16370  001A42  B4D8               	btfsc	status,2,c
 16371  001A44  0012               	return	
 16372  001A46  D5EB               	goto	l6246
 16373  001A48                     __end_of_printf:
 16374                           	opt stack 0
 16375                           tblptru	equ	0xFF8
 16376                           tblptrh	equ	0xFF7
 16377                           tblptrl	equ	0xFF6
 16378                           tablat	equ	0xFF5
 16379                           prodh	equ	0xFF4
 16380                           prodl	equ	0xFF3
 16381                           intcon	equ	0xFF2
 16382                           intcon2	equ	0xFF1
 16383                           intcon3	equ	0xFF0
 16384                           indf0	equ	0xFEF
 16385                           postinc0	equ	0xFEE
 16386                           fsr0h	equ	0xFEA
 16387                           fsr0l	equ	0xFE9
 16388                           wreg	equ	0xFE8
 16389                           postdec1	equ	0xFE5
 16390                           fsr1l	equ	0xFE1
 16391                           indf2	equ	0xFDF
 16392                           postinc2	equ	0xFDE
 16393                           postdec2	equ	0xFDD
 16394                           fsr2h	equ	0xFDA
 16395                           fsr2l	equ	0xFD9
 16396                           status	equ	0xFD8
 16397                           
 16398 ;; *************** function _putch *****************
 16399 ;; Defined at:
 16400 ;;		line 20 in file "lcd.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  data            1    wreg     unsigned char 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  data            1    2[BANK0 ] unsigned char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;                  1    wreg      void 
 16407 ;; Registers used:
 16408 ;;		wreg, status,2, status,0, cstack
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;Total ram usage:        1 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; Hardware stack levels required when called:    8
 16421 ;; This function calls:
 16422 ;;		_lcdNibble
 16423 ;; This function is called by:
 16424 ;;		_printf
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           	psect	text52
 16429  0052CA                     __ptext52:
 16430                           	opt stack 0
 16431  0052CA                     _putch:
 16432                           	opt stack 18
 16433                           
 16434                           ;incstack = 0
 16435                           ;putch@data stored from wreg
 16436  0052CA  0100               	movlb	0	; () banked
 16437  0052CC  6F82               	movwf	putch@data& (0+255),b
 16438                           
 16439                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16440  0052CE  848C               	bsf	3980,2,c	;volatile
 16441                           
 16442                           ;lcd.c: 22: lcdNibble(data);
 16443  0052D0  0100               	movlb	0	; () banked
 16444  0052D2  5182               	movf	putch@data& (0+255),w,b
 16445  0052D4  EC67  F024         	call	_lcdNibble
 16446  0052D8  0012               	return		;funcret
 16447  0052DA                     __end_of_putch:
 16448                           	opt stack 0
 16449                           tblptru	equ	0xFF8
 16450                           tblptrh	equ	0xFF7
 16451                           tblptrl	equ	0xFF6
 16452                           tablat	equ	0xFF5
 16453                           prodh	equ	0xFF4
 16454                           prodl	equ	0xFF3
 16455                           intcon	equ	0xFF2
 16456                           intcon2	equ	0xFF1
 16457                           intcon3	equ	0xFF0
 16458                           indf0	equ	0xFEF
 16459                           postinc0	equ	0xFEE
 16460                           fsr0h	equ	0xFEA
 16461                           fsr0l	equ	0xFE9
 16462                           wreg	equ	0xFE8
 16463                           postdec1	equ	0xFE5
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           postdec2	equ	0xFDD
 16468                           fsr2h	equ	0xFDA
 16469                           fsr2l	equ	0xFD9
 16470                           status	equ	0xFD8
 16471                           
 16472 ;; *************** function _isdigit *****************
 16473 ;; Defined at:
 16474 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16475 ;; Parameters:    Size  Location     Type
 16476 ;;  c               1    wreg     unsigned char 
 16477 ;; Auto vars:     Size  Location     Type
 16478 ;;  c               1    2[BANK0 ] unsigned char 
 16479 ;; Return value:  Size  Location     Type
 16480 ;;		None               void
 16481 ;; Registers used:
 16482 ;;		wreg, status,2, status,0
 16483 ;; Tracked objects:
 16484 ;;		On entry : 0/0
 16485 ;;		On exit  : 0/0
 16486 ;;		Unchanged: 0/0
 16487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;Total ram usage:        3 bytes
 16493 ;; Hardware stack levels used:    1
 16494 ;; Hardware stack levels required when called:    7
 16495 ;; This function calls:
 16496 ;;		Nothing
 16497 ;; This function is called by:
 16498 ;;		_printf
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text53
 16503  0050F4                     __ptext53:
 16504                           	opt stack 0
 16505  0050F4                     _isdigit:
 16506                           	opt stack 19
 16507                           
 16508                           ;incstack = 0
 16509                           ;isdigit@c stored from wreg
 16510  0050F4  0100               	movlb	0	; () banked
 16511  0050F6  6F82               	movwf	isdigit@c& (0+255),b
 16512  0050F8  0E00               	movlw	0
 16513  0050FA  0100               	movlb	0	; () banked
 16514  0050FC  6F81               	movwf	_isdigit$2058& (0+255),b
 16515                           
 16516                           ; BSR set to: 0
 16517  0050FE  0E3A               	movlw	58
 16518  005100  0100               	movlb	0	; () banked
 16519  005102  6182               	cpfslt	isdigit@c& (0+255),b
 16520  005104  D007               	goto	l6094
 16521                           
 16522                           ; BSR set to: 0
 16523  005106  0E2F               	movlw	47
 16524  005108  0100               	movlb	0	; () banked
 16525  00510A  6582               	cpfsgt	isdigit@c& (0+255),b
 16526  00510C  D003               	goto	l6094
 16527                           
 16528                           ; BSR set to: 0
 16529  00510E  0E01               	movlw	1
 16530  005110  0100               	movlb	0	; () banked
 16531  005112  6F81               	movwf	_isdigit$2058& (0+255),b
 16532  005114                     l6094:
 16533                           
 16534                           ; BSR set to: 0
 16535  005114  C081  F080         	movff	_isdigit$2058,??_isdigit
 16536  005118  0100               	movlb	0	; () banked
 16537  00511A  3180               	rrcf	??_isdigit& (0+255),w,b
 16538  00511C  0012               	return	
 16539  00511E                     __end_of_isdigit:
 16540                           	opt stack 0
 16541                           tblptru	equ	0xFF8
 16542                           tblptrh	equ	0xFF7
 16543                           tblptrl	equ	0xFF6
 16544                           tablat	equ	0xFF5
 16545                           prodh	equ	0xFF4
 16546                           prodl	equ	0xFF3
 16547                           intcon	equ	0xFF2
 16548                           intcon2	equ	0xFF1
 16549                           intcon3	equ	0xFF0
 16550                           indf0	equ	0xFEF
 16551                           postinc0	equ	0xFEE
 16552                           fsr0h	equ	0xFEA
 16553                           fsr0l	equ	0xFE9
 16554                           wreg	equ	0xFE8
 16555                           postdec1	equ	0xFE5
 16556                           fsr1l	equ	0xFE1
 16557                           indf2	equ	0xFDF
 16558                           postinc2	equ	0xFDE
 16559                           postdec2	equ	0xFDD
 16560                           fsr2h	equ	0xFDA
 16561                           fsr2l	equ	0xFD9
 16562                           status	equ	0xFD8
 16563                           
 16564 ;; *************** function ___wmul *****************
 16565 ;; Defined at:
 16566 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16567 ;; Parameters:    Size  Location     Type
 16568 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16569 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;  product         2    4[BANK0 ] unsigned int 
 16572 ;; Return value:  Size  Location     Type
 16573 ;;                  2    0[BANK0 ] unsigned int 
 16574 ;; Registers used:
 16575 ;;		wreg, status,2, status,0, prodl, prodh
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;Total ram usage:        6 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; Hardware stack levels required when called:    7
 16588 ;; This function calls:
 16589 ;;		Nothing
 16590 ;; This function is called by:
 16591 ;;		_printf
 16592 ;; This function uses a non-reentrant model
 16593 ;;
 16594                           
 16595                           	psect	text54
 16596  004DC6                     __ptext54:
 16597                           	opt stack 0
 16598  004DC6                     ___wmul:
 16599                           	opt stack 19
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;incstack = 0
 16603  004DC6  0100               	movlb	0	; () banked
 16604  004DC8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16605  004DCA  0100               	movlb	0	; () banked
 16606  004DCC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16607  004DCE  CFF3 F084          	movff	prodl,___wmul@product
 16608  004DD2  CFF4 F085          	movff	prodh,___wmul@product+1
 16609  004DD6  0100               	movlb	0	; () banked
 16610  004DD8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16611  004DDA  0100               	movlb	0	; () banked
 16612  004DDC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16613  004DDE  50F3               	movf	prodl,w,c
 16614  004DE0  0100               	movlb	0	; () banked
 16615  004DE2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16616  004DE4  0100               	movlb	0	; () banked
 16617  004DE6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16618  004DE8  0100               	movlb	0	; () banked
 16619  004DEA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16620  004DEC  50F3               	movf	prodl,w,c
 16621  004DEE  0100               	movlb	0	; () banked
 16622  004DF0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16623                           
 16624                           ; BSR set to: 0
 16625  004DF2  C084  F080         	movff	___wmul@product,?___wmul
 16626  004DF6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16627  004DFA  0012               	return	
 16628  004DFC                     __end_of___wmul:
 16629                           	opt stack 0
 16630                           tblptru	equ	0xFF8
 16631                           tblptrh	equ	0xFF7
 16632                           tblptrl	equ	0xFF6
 16633                           tablat	equ	0xFF5
 16634                           prodh	equ	0xFF4
 16635                           prodl	equ	0xFF3
 16636                           intcon	equ	0xFF2
 16637                           intcon2	equ	0xFF1
 16638                           intcon3	equ	0xFF0
 16639                           indf0	equ	0xFEF
 16640                           postinc0	equ	0xFEE
 16641                           fsr0h	equ	0xFEA
 16642                           fsr0l	equ	0xFE9
 16643                           wreg	equ	0xFE8
 16644                           postdec1	equ	0xFE5
 16645                           fsr1l	equ	0xFE1
 16646                           indf2	equ	0xFDF
 16647                           postinc2	equ	0xFDE
 16648                           postdec2	equ	0xFDD
 16649                           fsr2h	equ	0xFDA
 16650                           fsr2l	equ	0xFD9
 16651                           status	equ	0xFD8
 16652                           
 16653 ;; *************** function ___lwmod *****************
 16654 ;; Defined at:
 16655 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  dividend        2    7[BANK0 ] unsigned int 
 16658 ;;  divisor         2    9[BANK0 ] unsigned int 
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;  counter         1   11[BANK0 ] unsigned char 
 16661 ;; Return value:  Size  Location     Type
 16662 ;;                  2    7[BANK0 ] unsigned int 
 16663 ;; Registers used:
 16664 ;;		wreg, status,2, status,0
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16674 ;;Total ram usage:        5 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    7
 16677 ;; This function calls:
 16678 ;;		Nothing
 16679 ;; This function is called by:
 16680 ;;		_printf
 16681 ;; This function uses a non-reentrant model
 16682 ;;
 16683                           
 16684                           	psect	text55
 16685  004936                     __ptext55:
 16686                           	opt stack 0
 16687  004936                     ___lwmod:
 16688                           	opt stack 19
 16689                           
 16690                           ; BSR set to: 0
 16691                           ;incstack = 0
 16692  004936  0100               	movlb	0	; () banked
 16693  004938  5189               	movf	___lwmod@divisor& (0+255),w,b
 16694  00493A  0100               	movlb	0	; () banked
 16695  00493C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16696  00493E  B4D8               	btfsc	status,2,c
 16697  004940  D026               	goto	l1867
 16698                           
 16699                           ; BSR set to: 0
 16700  004942  0E01               	movlw	1
 16701  004944  0100               	movlb	0	; () banked
 16702  004946  6F8B               	movwf	___lwmod@counter& (0+255),b
 16703  004948  D006               	goto	l6132
 16704  00494A                     l6130:
 16705                           
 16706                           ; BSR set to: 0
 16707  00494A  0100               	movlb	0	; () banked
 16708  00494C  90D8               	bcf	status,0,c
 16709  00494E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16710  004950  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16711  004952  0100               	movlb	0	; () banked
 16712  004954  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16713  004956                     l6132:
 16714                           
 16715                           ; BSR set to: 0
 16716  004956  0100               	movlb	0	; () banked
 16717  004958  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16718  00495A  D7F7               	goto	l6130
 16719  00495C                     l6134:
 16720                           
 16721                           ; BSR set to: 0
 16722  00495C  0100               	movlb	0	; () banked
 16723  00495E  5189               	movf	___lwmod@divisor& (0+255),w,b
 16724  004960  0100               	movlb	0	; () banked
 16725  004962  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16726  004964  0100               	movlb	0	; () banked
 16727  004966  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16728  004968  0100               	movlb	0	; () banked
 16729  00496A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16730  00496C  A0D8               	btfss	status,0,c
 16731  00496E  D008               	goto	l6138
 16732                           
 16733                           ; BSR set to: 0
 16734  004970  0100               	movlb	0	; () banked
 16735  004972  5189               	movf	___lwmod@divisor& (0+255),w,b
 16736  004974  0100               	movlb	0	; () banked
 16737  004976  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16738  004978  0100               	movlb	0	; () banked
 16739  00497A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16740  00497C  0100               	movlb	0	; () banked
 16741  00497E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16742  004980                     l6138:
 16743                           
 16744                           ; BSR set to: 0
 16745  004980  0100               	movlb	0	; () banked
 16746  004982  90D8               	bcf	status,0,c
 16747  004984  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16748  004986  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16749                           
 16750                           ; BSR set to: 0
 16751  004988  0100               	movlb	0	; () banked
 16752  00498A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16753  00498C  D7E7               	goto	l6134
 16754  00498E                     l1867:
 16755                           
 16756                           ; BSR set to: 0
 16757  00498E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16758  004992  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16759                           
 16760                           ; BSR set to: 0
 16761  004996  0012               	return		;funcret
 16762  004998                     __end_of___lwmod:
 16763                           	opt stack 0
 16764                           tblptru	equ	0xFF8
 16765                           tblptrh	equ	0xFF7
 16766                           tblptrl	equ	0xFF6
 16767                           tablat	equ	0xFF5
 16768                           prodh	equ	0xFF4
 16769                           prodl	equ	0xFF3
 16770                           intcon	equ	0xFF2
 16771                           intcon2	equ	0xFF1
 16772                           intcon3	equ	0xFF0
 16773                           indf0	equ	0xFEF
 16774                           postinc0	equ	0xFEE
 16775                           fsr0h	equ	0xFEA
 16776                           fsr0l	equ	0xFE9
 16777                           wreg	equ	0xFE8
 16778                           postdec1	equ	0xFE5
 16779                           fsr1l	equ	0xFE1
 16780                           indf2	equ	0xFDF
 16781                           postinc2	equ	0xFDE
 16782                           postdec2	equ	0xFDD
 16783                           fsr2h	equ	0xFDA
 16784                           fsr2l	equ	0xFD9
 16785                           status	equ	0xFD8
 16786                           
 16787 ;; *************** function ___lwdiv *****************
 16788 ;; Defined at:
 16789 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;  dividend        2    0[BANK0 ] unsigned int 
 16792 ;;  divisor         2    2[BANK0 ] unsigned int 
 16793 ;; Auto vars:     Size  Location     Type
 16794 ;;  quotient        2    4[BANK0 ] unsigned int 
 16795 ;;  counter         1    6[BANK0 ] unsigned char 
 16796 ;; Return value:  Size  Location     Type
 16797 ;;                  2    0[BANK0 ] unsigned int 
 16798 ;; Registers used:
 16799 ;;		wreg, status,2, status,0
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16805 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;Total ram usage:        7 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; Hardware stack levels required when called:    7
 16812 ;; This function calls:
 16813 ;;		Nothing
 16814 ;; This function is called by:
 16815 ;;		_printf
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           	psect	text56
 16820  004702                     __ptext56:
 16821                           	opt stack 0
 16822  004702                     ___lwdiv:
 16823                           	opt stack 19
 16824                           
 16825                           ; BSR set to: 0
 16826                           ;incstack = 0
 16827  004702  0E00               	movlw	0
 16828  004704  0100               	movlb	0	; () banked
 16829  004706  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16830  004708  0E00               	movlw	0
 16831  00470A  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16832                           
 16833                           ; BSR set to: 0
 16834  00470C  0100               	movlb	0	; () banked
 16835  00470E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16836  004710  0100               	movlb	0	; () banked
 16837  004712  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16838  004714  B4D8               	btfsc	status,2,c
 16839  004716  D02C               	goto	l1857
 16840                           
 16841                           ; BSR set to: 0
 16842  004718  0E01               	movlw	1
 16843  00471A  0100               	movlb	0	; () banked
 16844  00471C  6F86               	movwf	___lwdiv@counter& (0+255),b
 16845  00471E  D006               	goto	l6112
 16846  004720                     l6110:
 16847                           
 16848                           ; BSR set to: 0
 16849  004720  0100               	movlb	0	; () banked
 16850  004722  90D8               	bcf	status,0,c
 16851  004724  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16852  004726  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16853  004728  0100               	movlb	0	; () banked
 16854  00472A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16855  00472C                     l6112:
 16856                           
 16857                           ; BSR set to: 0
 16858  00472C  0100               	movlb	0	; () banked
 16859  00472E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16860  004730  D7F7               	goto	l6110
 16861  004732                     l6114:
 16862                           
 16863                           ; BSR set to: 0
 16864  004732  0100               	movlb	0	; () banked
 16865  004734  90D8               	bcf	status,0,c
 16866  004736  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16867  004738  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16868                           
 16869                           ; BSR set to: 0
 16870  00473A  0100               	movlb	0	; () banked
 16871  00473C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16872  00473E  0100               	movlb	0	; () banked
 16873  004740  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16874  004742  0100               	movlb	0	; () banked
 16875  004744  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16876  004746  0100               	movlb	0	; () banked
 16877  004748  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16878  00474A  A0D8               	btfss	status,0,c
 16879  00474C  D00A               	goto	l6122
 16880                           
 16881                           ; BSR set to: 0
 16882  00474E  0100               	movlb	0	; () banked
 16883  004750  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16884  004752  0100               	movlb	0	; () banked
 16885  004754  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16886  004756  0100               	movlb	0	; () banked
 16887  004758  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16888  00475A  0100               	movlb	0	; () banked
 16889  00475C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16890                           
 16891                           ; BSR set to: 0
 16892  00475E  0100               	movlb	0	; () banked
 16893  004760  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16894  004762                     l6122:
 16895                           
 16896                           ; BSR set to: 0
 16897  004762  0100               	movlb	0	; () banked
 16898  004764  90D8               	bcf	status,0,c
 16899  004766  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16900  004768  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16901                           
 16902                           ; BSR set to: 0
 16903  00476A  0100               	movlb	0	; () banked
 16904  00476C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16905  00476E  D7E1               	goto	l6114
 16906  004770                     l1857:
 16907                           
 16908                           ; BSR set to: 0
 16909  004770  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16910  004774  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16911                           
 16912                           ; BSR set to: 0
 16913  004778  0012               	return		;funcret
 16914  00477A                     __end_of___lwdiv:
 16915                           	opt stack 0
 16916                           tblptru	equ	0xFF8
 16917                           tblptrh	equ	0xFF7
 16918                           tblptrl	equ	0xFF6
 16919                           tablat	equ	0xFF5
 16920                           prodh	equ	0xFF4
 16921                           prodl	equ	0xFF3
 16922                           intcon	equ	0xFF2
 16923                           intcon2	equ	0xFF1
 16924                           intcon3	equ	0xFF0
 16925                           indf0	equ	0xFEF
 16926                           postinc0	equ	0xFEE
 16927                           fsr0h	equ	0xFEA
 16928                           fsr0l	equ	0xFE9
 16929                           wreg	equ	0xFE8
 16930                           postdec1	equ	0xFE5
 16931                           fsr1l	equ	0xFE1
 16932                           indf2	equ	0xFDF
 16933                           postinc2	equ	0xFDE
 16934                           postdec2	equ	0xFDD
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939 ;; *************** function _lcdInst *****************
 16940 ;; Defined at:
 16941 ;;		line 15 in file "lcd.c"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;  data            1    wreg     unsigned char 
 16944 ;; Auto vars:     Size  Location     Type
 16945 ;;  data            1    2[BANK0 ] unsigned char 
 16946 ;; Return value:  Size  Location     Type
 16947 ;;                  1    wreg      void 
 16948 ;; Registers used:
 16949 ;;		wreg, status,2, status,0, cstack
 16950 ;; Tracked objects:
 16951 ;;		On entry : 0/0
 16952 ;;		On exit  : 0/0
 16953 ;;		Unchanged: 0/0
 16954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;Total ram usage:        1 bytes
 16960 ;; Hardware stack levels used:    1
 16961 ;; Hardware stack levels required when called:    8
 16962 ;; This function calls:
 16963 ;;		_lcdNibble
 16964 ;; This function is called by:
 16965 ;;		_UI
 16966 ;;		_change_state_to_menu_start
 16967 ;;		_change_state_to_menu_12
 16968 ;;		_change_state_to_menu_22
 16969 ;;		_initLCD
 16970 ;;		_printRTC
 16971 ;;		_Loading
 16972 ;;		_EEPROM_write
 16973 ;;		_Test
 16974 ;;		_algorithmTest
 16975 ;;		_sensorTest
 16976 ;;		_actuatorTest
 16977 ;;		_BothServos
 16978 ;;		_PortTestA5
 16979 ;;		_PusherTest
 16980 ;;		_SpeedTest
 16981 ;;		_BlockerTest
 16982 ;;		_ToggleTestA5
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           	psect	text57
 16987  0052DA                     __ptext57:
 16988                           	opt stack 0
 16989  0052DA                     _lcdInst:
 16990                           	opt stack 20
 16991                           
 16992                           ; BSR set to: 0
 16993                           ;incstack = 0
 16994                           ;lcdInst@data stored from wreg
 16995  0052DA  0100               	movlb	0	; () banked
 16996  0052DC  6F82               	movwf	lcdInst@data& (0+255),b
 16997                           
 16998                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16999  0052DE  948C               	bcf	3980,2,c	;volatile
 17000                           
 17001                           ;lcd.c: 17: lcdNibble(data);
 17002  0052E0  0100               	movlb	0	; () banked
 17003  0052E2  5182               	movf	lcdInst@data& (0+255),w,b
 17004  0052E4  EC67  F024         	call	_lcdNibble
 17005  0052E8  0012               	return		;funcret
 17006  0052EA                     __end_of_lcdInst:
 17007                           	opt stack 0
 17008                           tblptru	equ	0xFF8
 17009                           tblptrh	equ	0xFF7
 17010                           tblptrl	equ	0xFF6
 17011                           tablat	equ	0xFF5
 17012                           prodh	equ	0xFF4
 17013                           prodl	equ	0xFF3
 17014                           intcon	equ	0xFF2
 17015                           intcon2	equ	0xFF1
 17016                           intcon3	equ	0xFF0
 17017                           indf0	equ	0xFEF
 17018                           postinc0	equ	0xFEE
 17019                           fsr0h	equ	0xFEA
 17020                           fsr0l	equ	0xFE9
 17021                           wreg	equ	0xFE8
 17022                           postdec1	equ	0xFE5
 17023                           fsr1l	equ	0xFE1
 17024                           indf2	equ	0xFDF
 17025                           postinc2	equ	0xFDE
 17026                           postdec2	equ	0xFDD
 17027                           fsr2h	equ	0xFDA
 17028                           fsr2l	equ	0xFD9
 17029                           status	equ	0xFD8
 17030                           
 17031 ;; *************** function _lcdNibble *****************
 17032 ;; Defined at:
 17033 ;;		line 25 in file "lcd.c"
 17034 ;; Parameters:    Size  Location     Type
 17035 ;;  data            1    wreg     unsigned char 
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;  data            1    1[BANK0 ] unsigned char 
 17038 ;;  temp            1    0[BANK0 ] unsigned char 
 17039 ;; Return value:  Size  Location     Type
 17040 ;;                  1    wreg      void 
 17041 ;; Registers used:
 17042 ;;		wreg, status,2, status,0
 17043 ;; Tracked objects:
 17044 ;;		On entry : 0/0
 17045 ;;		On exit  : 0/0
 17046 ;;		Unchanged: 0/0
 17047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17052 ;;Total ram usage:        2 bytes
 17053 ;; Hardware stack levels used:    1
 17054 ;; Hardware stack levels required when called:    7
 17055 ;; This function calls:
 17056 ;;		Nothing
 17057 ;; This function is called by:
 17058 ;;		_lcdInst
 17059 ;;		_putch
 17060 ;; This function uses a non-reentrant model
 17061 ;;
 17062                           
 17063                           	psect	text58
 17064  0048CE                     __ptext58:
 17065                           	opt stack 0
 17066  0048CE                     _lcdNibble:
 17067                           	opt stack 20
 17068                           
 17069                           ;incstack = 0
 17070                           ;lcdNibble@data stored from wreg
 17071  0048CE  0100               	movlb	0	; () banked
 17072  0048D0  6F81               	movwf	lcdNibble@data& (0+255),b
 17073                           
 17074                           ;lcd.c: 27: char temp = data & 0xF0;
 17075  0048D2  0100               	movlb	0	; () banked
 17076  0048D4  5181               	movf	lcdNibble@data& (0+255),w,b
 17077  0048D6  0BF0               	andlw	240
 17078  0048D8  0100               	movlb	0	; () banked
 17079  0048DA  6F80               	movwf	lcdNibble@temp& (0+255),b
 17080                           
 17081                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17082  0048DC  508C               	movf	3980,w,c	;volatile
 17083  0048DE  0B0F               	andlw	15
 17084  0048E0  6E8C               	movwf	3980,c	;volatile
 17085                           
 17086                           ;lcd.c: 29: LATD = temp | LATD;
 17087  0048E2  0100               	movlb	0	; () banked
 17088  0048E4  5180               	movf	lcdNibble@temp& (0+255),w,b
 17089  0048E6  108C               	iorwf	3980,w,c	;volatile
 17090  0048E8  6E8C               	movwf	3980,c	;volatile
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17094  0048EA  868C               	bsf	3980,3,c	;volatile
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17098  0048EC  0E42               	movlw	66
 17099  0048EE                     u10077:
 17100  0048EE  2EE8               	decfsz	wreg,f,c
 17101  0048F0  D7FE               	bra	u10077
 17102  0048F2  D000               	nop2	
 17103                           
 17104                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17105  0048F4  968C               	bcf	3980,3,c	;volatile
 17106                           
 17107                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17108  0048F6  0E42               	movlw	66
 17109  0048F8                     u10087:
 17110  0048F8  2EE8               	decfsz	wreg,f,c
 17111  0048FA  D7FE               	bra	u10087
 17112  0048FC  D000               	nop2	
 17113                           
 17114                           ;lcd.c: 36: data = data << 4;
 17115  0048FE  0100               	movlb	0	; () banked
 17116  004900  3981               	swapf	lcdNibble@data& (0+255),w,b
 17117  004902  0BF0               	andlw	240
 17118  004904  0100               	movlb	0	; () banked
 17119  004906  6F81               	movwf	lcdNibble@data& (0+255),b
 17120                           
 17121                           ;lcd.c: 38: temp = data & 0xF0;
 17122  004908  0100               	movlb	0	; () banked
 17123  00490A  5181               	movf	lcdNibble@data& (0+255),w,b
 17124  00490C  0BF0               	andlw	240
 17125  00490E  0100               	movlb	0	; () banked
 17126  004910  6F80               	movwf	lcdNibble@temp& (0+255),b
 17127                           
 17128                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17129  004912  508C               	movf	3980,w,c	;volatile
 17130  004914  0B0F               	andlw	15
 17131  004916  6E8C               	movwf	3980,c	;volatile
 17132                           
 17133                           ;lcd.c: 40: LATD = temp | LATD;
 17134  004918  0100               	movlb	0	; () banked
 17135  00491A  5180               	movf	lcdNibble@temp& (0+255),w,b
 17136  00491C  108C               	iorwf	3980,w,c	;volatile
 17137  00491E  6E8C               	movwf	3980,c	;volatile
 17138                           
 17139                           ; BSR set to: 0
 17140                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17141  004920  868C               	bsf	3980,3,c	;volatile
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17145  004922  0E42               	movlw	66
 17146  004924                     u10097:
 17147  004924  2EE8               	decfsz	wreg,f,c
 17148  004926  D7FE               	bra	u10097
 17149  004928  D000               	nop2	
 17150                           
 17151                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17152  00492A  968C               	bcf	3980,3,c	;volatile
 17153                           
 17154                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17155  00492C  0E42               	movlw	66
 17156  00492E                     u10107:
 17157  00492E  2EE8               	decfsz	wreg,f,c
 17158  004930  D7FE               	bra	u10107
 17159  004932  D000               	nop2	
 17160  004934  0012               	return		;funcret
 17161  004936                     __end_of_lcdNibble:
 17162                           	opt stack 0
 17163                           tblptru	equ	0xFF8
 17164                           tblptrh	equ	0xFF7
 17165                           tblptrl	equ	0xFF6
 17166                           tablat	equ	0xFF5
 17167                           prodh	equ	0xFF4
 17168                           prodl	equ	0xFF3
 17169                           intcon	equ	0xFF2
 17170                           intcon2	equ	0xFF1
 17171                           intcon3	equ	0xFF0
 17172                           indf0	equ	0xFEF
 17173                           postinc0	equ	0xFEE
 17174                           fsr0h	equ	0xFEA
 17175                           fsr0l	equ	0xFE9
 17176                           wreg	equ	0xFE8
 17177                           postdec1	equ	0xFE5
 17178                           fsr1l	equ	0xFE1
 17179                           indf2	equ	0xFDF
 17180                           postinc2	equ	0xFDE
 17181                           postdec2	equ	0xFDD
 17182                           fsr2h	equ	0xFDA
 17183                           fsr2l	equ	0xFD9
 17184                           status	equ	0xFD8
 17185                           
 17186 ;; *************** function _handler *****************
 17187 ;; Defined at:
 17188 ;;		line 16 in file "interruptHandler.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;		None
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;		None
 17193 ;; Return value:  Size  Location     Type
 17194 ;;                  1    wreg      void 
 17195 ;; Registers used:
 17196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17197 ;; Tracked objects:
 17198 ;;		On entry : 0/0
 17199 ;;		On exit  : 0/0
 17200 ;;		Unchanged: 0/0
 17201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;Total ram usage:       16 bytes
 17207 ;; Hardware stack levels used:    1
 17208 ;; Hardware stack levels required when called:    6
 17209 ;; This function calls:
 17210 ;;		_printSortTimer
 17211 ;;		_updateMenu
 17212 ;;		_updateServoStates
 17213 ;; This function is called by:
 17214 ;;		Interrupt level 2
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	intcode
 17219  000008                     __pintcode:
 17220                           	opt stack 0
 17221  000008                     _handler:
 17222                           	opt stack 18
 17223                           
 17224                           ;incstack = 0
 17225  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17226  00000A  ED82  F01B         	call	int_func,f	;refresh shadow registers
 17227                           tblptru	equ	0xFF8
 17228                           tblptrh	equ	0xFF7
 17229                           tblptrl	equ	0xFF6
 17230                           tablat	equ	0xFF5
 17231                           prodh	equ	0xFF4
 17232                           prodl	equ	0xFF3
 17233                           intcon	equ	0xFF2
 17234                           intcon2	equ	0xFF1
 17235                           intcon3	equ	0xFF0
 17236                           indf0	equ	0xFEF
 17237                           postinc0	equ	0xFEE
 17238                           fsr0h	equ	0xFEA
 17239                           fsr0l	equ	0xFE9
 17240                           wreg	equ	0xFE8
 17241                           postdec1	equ	0xFE5
 17242                           fsr1l	equ	0xFE1
 17243                           indf2	equ	0xFDF
 17244                           postinc2	equ	0xFDE
 17245                           postdec2	equ	0xFDD
 17246                           fsr2h	equ	0xFDA
 17247                           fsr2l	equ	0xFD9
 17248                           status	equ	0xFD8
 17249                           
 17250                           	psect	intcode_body
 17251  003704                     __pintcode_body:
 17252                           	opt stack 18
 17253  003704                     int_func:
 17254                           	opt stack 18
 17255  003704  0006               	pop		; remove dummy address from shadow register refresh
 17256  003706  CFFA F04D          	movff	pclath,??_handler+2
 17257  00370A  CFFB F04E          	movff	pclatu,??_handler+3
 17258  00370E  CFE9 F04F          	movff	fsr0l,??_handler+4
 17259  003712  CFEA F050          	movff	fsr0h,??_handler+5
 17260  003716  CFE1 F051          	movff	fsr1l,??_handler+6
 17261  00371A  CFE2 F052          	movff	fsr1h,??_handler+7
 17262  00371E  CFD9 F053          	movff	fsr2l,??_handler+8
 17263  003722  CFDA F054          	movff	fsr2h,??_handler+9
 17264  003726  CFF3 F055          	movff	prodl,??_handler+10
 17265  00372A  CFF4 F056          	movff	prodh,??_handler+11
 17266  00372E  CFF6 F057          	movff	tblptrl,??_handler+12
 17267  003732  CFF7 F058          	movff	tblptrh,??_handler+13
 17268  003736  CFF8 F059          	movff	tblptru,??_handler+14
 17269  00373A  CFF5 F05A          	movff	tablat,??_handler+15
 17270                           
 17271                           ;interruptHandler.c: 18: if(INT1IF){
 17272  00373E  A0F0               	btfss	intcon3,0,c	;volatile
 17273  003740  D02B               	goto	i2l9420
 17274                           
 17275                           ;interruptHandler.c: 19: INT1IF = 0;
 17276  003742  90F0               	bcf	intcon3,0,c	;volatile
 17277                           
 17278                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17279  003744  0100               	movlb	0	; () banked
 17280  003746  51FC               	movf	_machine_state& (0+255),w,b
 17281  003748  A4D8               	btfss	status,2,c
 17282  00374A  D01B               	goto	i2l9414
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17286  00374C  3881               	swapf	3969,w,c	;volatile
 17287  00374E  0B0F               	andlw	15
 17288  003750  0B0F               	andlw	15
 17289  003752  6E4B               	movwf	??_handler& (0+255),c
 17290  003754  6A4C               	clrf	(??_handler+1)& (0+255),c
 17291  003756  0EEF               	movlw	low _keys
 17292  003758  244B               	addwf	??_handler,w,c
 17293  00375A  6EF6               	movwf	tblptrl,c
 17294  00375C  0EFA               	movlw	high _keys
 17295  00375E  204C               	addwfc	??_handler+1,w,c
 17296  003760  6EF7               	movwf	tblptrh,c
 17297  003762                     	if	1	;There are 3 active tblptr bytes
 17298  003762  6AF8               	clrf	tblptru,c
 17299  003764  0E00               	movlw	low (__mediumconst shr (0+16))
 17300  003766  22F8               	addwfc	tblptru,f,c
 17301  003768                     	endif
 17302  003768  0008               	tblrd		*
 17303  00376A  CFF5 F07D          	movff	tablat,_input	;volatile
 17304                           
 17305                           ; BSR set to: 0
 17306                           ;interruptHandler.c: 23: if(input == '*'){
 17307  00376E  0E2A               	movlw	42
 17308  003770  187D               	xorwf	_input,w,c	;volatile
 17309  003772  A4D8               	btfss	status,2,c
 17310  003774  D004               	goto	i2l9412
 17311                           
 17312                           ; BSR set to: 0
 17313                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17314  003776  0E03               	movlw	3
 17315  003778  0100               	movlb	0	; () banked
 17316  00377A  6FFC               	movwf	_machine_state& (0+255),b
 17317                           
 17318                           ;interruptHandler.c: 25: }
 17319  00377C  D002               	goto	i2l9414
 17320  00377E                     i2l9412:
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;interruptHandler.c: 26: else{
 17324                           ;interruptHandler.c: 27: updateMenu();
 17325  00377E  EC81  F013         	call	_updateMenu	;wreg free
 17326  003782                     i2l9414:
 17327                           
 17328                           ;interruptHandler.c: 28: }
 17329                           ;interruptHandler.c: 29: }
 17330                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17331  003782  0100               	movlb	0	; () banked
 17332  003784  05FC               	decf	_machine_state& (0+255),w,b
 17333  003786  A4D8               	btfss	status,2,c
 17334  003788  D007               	goto	i2l9420
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;interruptHandler.c: 31: if(input == '*'){
 17338  00378A  0E2A               	movlw	42
 17339  00378C  187D               	xorwf	_input,w,c	;volatile
 17340  00378E  A4D8               	btfss	status,2,c
 17341  003790  D003               	goto	i2l9420
 17342                           
 17343                           ; BSR set to: 0
 17344                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17345  003792  0E02               	movlw	2
 17346  003794  0100               	movlb	0	; () banked
 17347  003796  6FFC               	movwf	_machine_state& (0+255),b
 17348  003798                     i2l9420:
 17349                           
 17350                           ;interruptHandler.c: 33: }
 17351                           ;interruptHandler.c: 34: }
 17352                           ;interruptHandler.c: 35: }
 17353                           ;interruptHandler.c: 38: if(TMR0IF){
 17354  003798  A4F2               	btfss	intcon,2,c	;volatile
 17355  00379A  D00C               	goto	i2l9434
 17356                           
 17357                           ;interruptHandler.c: 39: TMR0IF = 0;
 17358  00379C  94F2               	bcf	intcon,2,c	;volatile
 17359                           
 17360                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17361  00379E  0100               	movlb	0	; () banked
 17362  0037A0  05FC               	decf	_machine_state& (0+255),w,b
 17363  0037A2  A4D8               	btfss	status,2,c
 17364  0037A4  D007               	goto	i2l9434
 17365                           
 17366                           ; BSR set to: 0
 17367                           ;interruptHandler.c: 41: printSortTimer();
 17368  0037A6  ECE1  F014         	call	_printSortTimer	;wreg free
 17369                           
 17370                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17371  0037AA  0E85               	movlw	133
 17372  0037AC  6ED7               	movwf	4055,c	;volatile
 17373                           
 17374                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17375  0037AE  0EEE               	movlw	238
 17376  0037B0  6ED6               	movwf	4054,c	;volatile
 17377                           
 17378                           ;interruptHandler.c: 45: TMR0ON = 1;
 17379  0037B2  8ED5               	bsf	4053,7,c	;volatile
 17380  0037B4                     i2l9434:
 17381                           
 17382                           ;interruptHandler.c: 46: }
 17383                           ;interruptHandler.c: 47: }
 17384                           ;interruptHandler.c: 50: if(TMR1IF){
 17385  0037B4  A09E               	btfss	3998,0,c	;volatile
 17386  0037B6  D02A               	goto	i2l9462
 17387                           
 17388                           ;interruptHandler.c: 51: TMR1IF = 0;
 17389  0037B8  909E               	bcf	3998,0,c	;volatile
 17390                           
 17391                           ;interruptHandler.c: 52: TMR1ON = 0;
 17392  0037BA  90CD               	bcf	4045,0,c	;volatile
 17393                           
 17394                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17395  0037BC  0100               	movlb	0	; () banked
 17396  0037BE  05FC               	decf	_machine_state& (0+255),w,b
 17397  0037C0  A4D8               	btfss	status,2,c
 17398  0037C2  D024               	goto	i2l9462
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;interruptHandler.c: 54: if(was_low_1){
 17402  0037C4  5079               	movf	_was_low_1,w,c	;volatile
 17403  0037C6  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17404  0037C8  B4D8               	btfsc	status,2,c
 17405  0037CA  D00A               	goto	i2l961
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17409  0037CC  828B               	bsf	3979,1,c	;volatile
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;interruptHandler.c: 56: was_low_1 = 0;
 17413  0037CE  0E00               	movlw	0
 17414  0037D0  6E7A               	movwf	_was_low_1+1,c	;volatile
 17415  0037D2  0E00               	movlw	0
 17416  0037D4  6E79               	movwf	_was_low_1,c	;volatile
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17420  0037D6  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17424  0037DA  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17425                           
 17426                           ;interruptHandler.c: 59: }
 17427  0037DE  D00F               	goto	i2l9456
 17428  0037E0                     i2l961:
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;interruptHandler.c: 60: else{
 17432                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17433  0037E0  928B               	bcf	3979,1,c	;volatile
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;interruptHandler.c: 62: was_low_1 = 1;
 17437  0037E2  0E00               	movlw	0
 17438  0037E4  6E7A               	movwf	_was_low_1+1,c	;volatile
 17439  0037E6  0E01               	movlw	1
 17440  0037E8  6E79               	movwf	_was_low_1,c	;volatile
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17444  0037EA  0100               	movlb	0	; () banked
 17445  0037EC  51DA               	movf	_servoTimes& (0+255),w,b
 17446  0037EE  0800               	sublw	0
 17447  0037F0  0F20               	addlw	32
 17448  0037F2  6ECF               	movwf	4047,c	;volatile
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17452  0037F4  0100               	movlb	0	; () banked
 17453  0037F6  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17454  0037F8  0800               	sublw	0
 17455  0037FA  0F20               	addlw	32
 17456  0037FC  6ECE               	movwf	4046,c	;volatile
 17457  0037FE                     i2l9456:
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;interruptHandler.c: 65: }
 17461                           ;interruptHandler.c: 66: TMR1ON = 1;
 17462  0037FE  80CD               	bsf	4045,0,c	;volatile
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17466  003800  0E0A               	movlw	10
 17467  003802  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17468  003804  0E00               	movlw	0
 17469  003806  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;interruptHandler.c: 69: updateServoStates();
 17473  003808  EC9E  F01A         	call	_updateServoStates	;wreg free
 17474  00380C                     i2l9462:
 17475                           
 17476                           ;interruptHandler.c: 70: }
 17477                           ;interruptHandler.c: 71: }
 17478                           ;interruptHandler.c: 73: if(TMR3IF){
 17479  00380C  A2A1               	btfss	4001,1,c	;volatile
 17480  00380E  D024               	goto	i2l967
 17481                           
 17482                           ;interruptHandler.c: 74: TMR3IF = 0;
 17483  003810  92A1               	bcf	4001,1,c	;volatile
 17484                           
 17485                           ;interruptHandler.c: 75: TMR3ON = 0;
 17486  003812  90B1               	bcf	4017,0,c	;volatile
 17487                           
 17488                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17489  003814  0100               	movlb	0	; () banked
 17490  003816  05FC               	decf	_machine_state& (0+255),w,b
 17491  003818  A4D8               	btfss	status,2,c
 17492  00381A  D01E               	goto	i2l967
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;interruptHandler.c: 77: if(was_low_3){
 17496  00381C  507B               	movf	_was_low_3,w,c	;volatile
 17497  00381E  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17498  003820  B4D8               	btfsc	status,2,c
 17499  003822  D00A               	goto	i2l965
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17503  003824  848B               	bsf	3979,2,c	;volatile
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;interruptHandler.c: 79: was_low_3 = 0;
 17507  003826  0E00               	movlw	0
 17508  003828  6E7C               	movwf	_was_low_3+1,c	;volatile
 17509  00382A  0E00               	movlw	0
 17510  00382C  6E7B               	movwf	_was_low_3,c	;volatile
 17511                           
 17512                           ; BSR set to: 0
 17513                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17514  00382E  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17518  003832  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17519                           
 17520                           ;interruptHandler.c: 82: }
 17521  003836  D00F               	goto	i2l9484
 17522  003838                     i2l965:
 17523                           
 17524                           ; BSR set to: 0
 17525                           ;interruptHandler.c: 83: else{
 17526                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17527  003838  948B               	bcf	3979,2,c	;volatile
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;interruptHandler.c: 85: was_low_3 = 1;
 17531  00383A  0E00               	movlw	0
 17532  00383C  6E7C               	movwf	_was_low_3+1,c	;volatile
 17533  00383E  0E01               	movlw	1
 17534  003840  6E7B               	movwf	_was_low_3,c	;volatile
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17538  003842  0100               	movlb	0	; () banked
 17539  003844  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17540  003846  0800               	sublw	0
 17541  003848  0F20               	addlw	32
 17542  00384A  6EB3               	movwf	4019,c	;volatile
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17546  00384C  0100               	movlb	0	; () banked
 17547  00384E  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17548  003850  0800               	sublw	0
 17549  003852  0F20               	addlw	32
 17550  003854  6EB2               	movwf	4018,c	;volatile
 17551  003856                     i2l9484:
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;interruptHandler.c: 88: }
 17555                           ;interruptHandler.c: 89: TMR3ON = 1;
 17556  003856  80B1               	bsf	4017,0,c	;volatile
 17557  003858                     i2l967:
 17558  003858  C05A  FFF5         	movff	??_handler+15,tablat
 17559  00385C  C059  FFF8         	movff	??_handler+14,tblptru
 17560  003860  C058  FFF7         	movff	??_handler+13,tblptrh
 17561  003864  C057  FFF6         	movff	??_handler+12,tblptrl
 17562  003868  C056  FFF4         	movff	??_handler+11,prodh
 17563  00386C  C055  FFF3         	movff	??_handler+10,prodl
 17564  003870  C054  FFDA         	movff	??_handler+9,fsr2h
 17565  003874  C053  FFD9         	movff	??_handler+8,fsr2l
 17566  003878  C052  FFE2         	movff	??_handler+7,fsr1h
 17567  00387C  C051  FFE1         	movff	??_handler+6,fsr1l
 17568  003880  C050  FFEA         	movff	??_handler+5,fsr0h
 17569  003884  C04F  FFE9         	movff	??_handler+4,fsr0l
 17570  003888  C04E  FFFB         	movff	??_handler+3,pclatu
 17571  00388C  C04D  FFFA         	movff	??_handler+2,pclath
 17572  003890  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17573  003892  0011               	retfie		f
 17574  003894                     __end_of_handler:
 17575                           	opt stack 0
 17576                           pclatu	equ	0xFFB
 17577                           pclath	equ	0xFFA
 17578                           tblptru	equ	0xFF8
 17579                           tblptrh	equ	0xFF7
 17580                           tblptrl	equ	0xFF6
 17581                           tablat	equ	0xFF5
 17582                           prodh	equ	0xFF4
 17583                           prodl	equ	0xFF3
 17584                           intcon	equ	0xFF2
 17585                           intcon2	equ	0xFF1
 17586                           intcon3	equ	0xFF0
 17587                           indf0	equ	0xFEF
 17588                           postinc0	equ	0xFEE
 17589                           fsr0h	equ	0xFEA
 17590                           fsr0l	equ	0xFE9
 17591                           wreg	equ	0xFE8
 17592                           postdec1	equ	0xFE5
 17593                           fsr1h	equ	0xFE2
 17594                           fsr1l	equ	0xFE1
 17595                           indf2	equ	0xFDF
 17596                           postinc2	equ	0xFDE
 17597                           postdec2	equ	0xFDD
 17598                           fsr2h	equ	0xFDA
 17599                           fsr2l	equ	0xFD9
 17600                           status	equ	0xFD8
 17601                           
 17602 ;; *************** function _updateServoStates *****************
 17603 ;; Defined at:
 17604 ;;		line 520 in file "sort.c"
 17605 ;; Parameters:    Size  Location     Type
 17606 ;;		None
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;		None
 17609 ;; Return value:  Size  Location     Type
 17610 ;;                  1    wreg      void 
 17611 ;; Registers used:
 17612 ;;		wreg, status,2, status,0, cstack
 17613 ;; Tracked objects:
 17614 ;;		On entry : 0/0
 17615 ;;		On exit  : 0/0
 17616 ;;		Unchanged: 0/0
 17617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17622 ;;Total ram usage:        2 bytes
 17623 ;; Hardware stack levels used:    1
 17624 ;; Hardware stack levels required when called:    1
 17625 ;; This function calls:
 17626 ;;		i2_updateServoPosition
 17627 ;; This function is called by:
 17628 ;;		_handler
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           	psect	text60
 17633  00353C                     __ptext60:
 17634                           	opt stack 0
 17635  00353C                     _updateServoStates:
 17636                           	opt stack 22
 17637                           
 17638                           ;sort.c: 522: if(servo_timer_counter >= servo_timer_target){
 17639                           
 17640                           ;incstack = 0
 17641  00353C  5073               	movf	_servo_timer_target,w,c	;volatile
 17642  00353E  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17643  003540  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17644  003542  0A80               	xorlw	128
 17645  003544  6E09               	movwf	??_updateServoStates& (0+255),c
 17646  003546  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17647  003548  0A80               	xorlw	128
 17648  00354A  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17649  00354C  A0D8               	btfss	status,0,c
 17650  00354E  0012               	return	
 17651                           
 17652                           ;sort.c: 524: if(f_panning_to_bin){
 17653  003550  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17654  003552  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17655  003554  A4D8               	btfss	status,2,c
 17656  003556  D036               	goto	i2l9302
 17657  003558  D05F               	goto	i2l9306
 17658  00355A                     i2l9276:
 17659                           
 17660                           ;sort.c: 528: updateServoPosition(1260, 3);
 17661  00355A  0E04               	movlw	4
 17662  00355C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17663  00355E  0EEC               	movlw	236
 17664  003560  6E01               	movwf	i2updateServoPosition@time_us,c
 17665  003562  0E00               	movlw	0
 17666  003564  6E04               	movwf	i2updateServoPosition@timer+1,c
 17667  003566  0E03               	movlw	3
 17668  003568  6E03               	movwf	i2updateServoPosition@timer,c
 17669  00356A  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17670  00356E  D025               	goto	i2l9296
 17671  003570                     i2l9280:
 17672                           
 17673                           ;sort.c: 530: servo_timer_target = 700;
 17674  003570  0E02               	movlw	2
 17675  003572  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17676  003574  0EBC               	movlw	188
 17677  003576  6E73               	movwf	_servo_timer_target,c	;volatile
 17678                           
 17679                           ;sort.c: 531: break;
 17680  003578  D04A               	goto	i2l9304
 17681  00357A                     i2l9282:
 17682                           
 17683                           ;sort.c: 533: updateServoPosition(1260, 3);
 17684  00357A  0E04               	movlw	4
 17685  00357C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17686  00357E  0EEC               	movlw	236
 17687  003580  6E01               	movwf	i2updateServoPosition@time_us,c
 17688  003582  0E00               	movlw	0
 17689  003584  6E04               	movwf	i2updateServoPosition@timer+1,c
 17690  003586  0E03               	movlw	3
 17691  003588  6E03               	movwf	i2updateServoPosition@timer,c
 17692  00358A  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17693  00358E  D015               	goto	i2l9296
 17694  003590                     i2l9288:
 17695                           
 17696                           ;sort.c: 539: updateServoPosition(1390, 3);
 17697  003590  0E05               	movlw	5
 17698  003592  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17699  003594  0E6E               	movlw	110
 17700  003596  6E01               	movwf	i2updateServoPosition@time_us,c
 17701  003598  0E00               	movlw	0
 17702  00359A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17703  00359C  0E03               	movlw	3
 17704  00359E  6E03               	movwf	i2updateServoPosition@timer,c
 17705  0035A0  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17706  0035A4  D00A               	goto	i2l9296
 17707  0035A6                     i2l9294:
 17708                           
 17709                           ;sort.c: 544: updateServoPosition(1390, 3);
 17710  0035A6  0E05               	movlw	5
 17711  0035A8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17712  0035AA  0E6E               	movlw	110
 17713  0035AC  6E01               	movwf	i2updateServoPosition@time_us,c
 17714  0035AE  0E00               	movlw	0
 17715  0035B0  6E04               	movwf	i2updateServoPosition@timer+1,c
 17716  0035B2  0E03               	movlw	3
 17717  0035B4  6E03               	movwf	i2updateServoPosition@timer,c
 17718  0035B6  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17719  0035BA                     i2l9296:
 17720                           
 17721                           ;sort.c: 545: servo_timer_counter = 0;
 17722  0035BA  0E00               	movlw	0
 17723  0035BC  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17724  0035BE  0E00               	movlw	0
 17725  0035C0  6E71               	movwf	_servo_timer_counter,c	;volatile
 17726  0035C2  D7D6               	goto	i2l9280
 17727  0035C4                     i2l9302:
 17728  0035C4  C06F  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17729  0035C8  C070  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17730                           
 17731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17732                           ; Switch size 1, requested type "space"
 17733                           ; Number of cases is 4, Range of values is 1 to 9
 17734                           ; switch strategies available:
 17735                           ; Name         Instructions Cycles
 17736                           ; simple_byte           13     7 (average)
 17737                           ;	Chosen strategy is simple_byte
 17738  0035CC  500A               	movf	??_updateServoStates+1,w,c
 17739  0035CE  0A01               	xorlw	1	; case 1
 17740  0035D0  B4D8               	btfsc	status,2,c
 17741  0035D2  D00A               	goto	i2l9944
 17742  0035D4  0A02               	xorlw	2	; case 3
 17743  0035D6  B4D8               	btfsc	status,2,c
 17744  0035D8  D00C               	goto	i2l9946
 17745  0035DA  0A05               	xorlw	5	; case 6
 17746  0035DC  B4D8               	btfsc	status,2,c
 17747  0035DE  D00E               	goto	i2l9948
 17748  0035E0  0A0F               	xorlw	15	; case 9
 17749  0035E2  B4D8               	btfsc	status,2,c
 17750  0035E4  D010               	goto	i2l9950
 17751  0035E6  D013               	goto	i2l9304
 17752  0035E8                     i2l9944:
 17753                           
 17754                           ; Switch size 1, requested type "space"
 17755                           ; Number of cases is 1, Range of values is 244 to 244
 17756                           ; switch strategies available:
 17757                           ; Name         Instructions Cycles
 17758                           ; simple_byte            4     3 (average)
 17759                           ;	Chosen strategy is simple_byte
 17760  0035E8  5009               	movf	??_updateServoStates,w,c
 17761  0035EA  0AF4               	xorlw	244	; case 244
 17762  0035EC  B4D8               	btfsc	status,2,c
 17763  0035EE  D7B5               	goto	i2l9276
 17764  0035F0  D00E               	goto	i2l9304
 17765  0035F2                     i2l9946:
 17766                           
 17767                           ; Switch size 1, requested type "space"
 17768                           ; Number of cases is 1, Range of values is 82 to 82
 17769                           ; switch strategies available:
 17770                           ; Name         Instructions Cycles
 17771                           ; simple_byte            4     3 (average)
 17772                           ;	Chosen strategy is simple_byte
 17773  0035F2  5009               	movf	??_updateServoStates,w,c
 17774  0035F4  0A52               	xorlw	82	; case 82
 17775  0035F6  B4D8               	btfsc	status,2,c
 17776  0035F8  D7C0               	goto	i2l9282
 17777  0035FA  D009               	goto	i2l9304
 17778  0035FC                     i2l9948:
 17779                           
 17780                           ; Switch size 1, requested type "space"
 17781                           ; Number of cases is 1, Range of values is 134 to 134
 17782                           ; switch strategies available:
 17783                           ; Name         Instructions Cycles
 17784                           ; simple_byte            4     3 (average)
 17785                           ;	Chosen strategy is simple_byte
 17786  0035FC  5009               	movf	??_updateServoStates,w,c
 17787  0035FE  0A86               	xorlw	134	; case 134
 17788  003600  B4D8               	btfsc	status,2,c
 17789  003602  D7C6               	goto	i2l9288
 17790  003604  D004               	goto	i2l9304
 17791  003606                     i2l9950:
 17792                           
 17793                           ; Switch size 1, requested type "space"
 17794                           ; Number of cases is 1, Range of values is 96 to 96
 17795                           ; switch strategies available:
 17796                           ; Name         Instructions Cycles
 17797                           ; simple_byte            4     3 (average)
 17798                           ;	Chosen strategy is simple_byte
 17799  003606  5009               	movf	??_updateServoStates,w,c
 17800  003608  0A60               	xorlw	96	; case 96
 17801  00360A  B4D8               	btfsc	status,2,c
 17802  00360C  D7CC               	goto	i2l9294
 17803  00360E                     i2l9304:
 17804                           
 17805                           ;sort.c: 551: f_panning_to_bin = 0;
 17806  00360E  0E00               	movlw	0
 17807  003610  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17808  003612  0E00               	movlw	0
 17809  003614  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17810                           
 17811                           ;sort.c: 552: }
 17812  003616  0012               	return	
 17813  003618                     i2l9306:
 17814                           
 17815                           ;sort.c: 553: else if(pan_servo_state == 1200){
 17816  003618  0EB0               	movlw	176
 17817  00361A  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17818  00361C  E15A               	bnz	i2l9336
 17819  00361E  0E04               	movlw	4
 17820  003620  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17821  003622  A4D8               	btfss	status,2,c
 17822  003624  D056               	goto	i2l9336
 17823                           
 17824                           ;sort.c: 555: servo_timer_counter = 0;
 17825  003626  0E00               	movlw	0
 17826  003628  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17827  00362A  0E00               	movlw	0
 17828  00362C  6E71               	movwf	_servo_timer_counter,c	;volatile
 17829                           
 17830                           ;sort.c: 556: }
 17831  00362E  0012               	return	
 17832  003630                     i2l9310:
 17833                           
 17834                           ;sort.c: 561: updateServoPosition(1050, 3);
 17835  003630  0E04               	movlw	4
 17836  003632  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17837  003634  0E1A               	movlw	26
 17838  003636  6E01               	movwf	i2updateServoPosition@time_us,c
 17839  003638  0E00               	movlw	0
 17840  00363A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17841  00363C  0E03               	movlw	3
 17842  00363E  6E03               	movwf	i2updateServoPosition@timer,c
 17843  003640  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17844                           
 17845                           ;sort.c: 562: servo_timer_counter = 0;
 17846  003644  0E00               	movlw	0
 17847  003646  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17848  003648  0E00               	movlw	0
 17849  00364A  6E71               	movwf	_servo_timer_counter,c	;volatile
 17850                           
 17851                           ;sort.c: 563: servo_timer_target = 750;
 17852  00364C  0E02               	movlw	2
 17853  00364E  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17854  003650  0EEE               	movlw	238
 17855  003652  6E73               	movwf	_servo_timer_target,c	;volatile
 17856                           
 17857                           ;sort.c: 564: break;
 17858  003654  0012               	return	
 17859  003656                     i2l9316:
 17860                           
 17861                           ;sort.c: 566: updateServoPosition(1050, 3);
 17862  003656  0E04               	movlw	4
 17863  003658  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17864  00365A  0E1A               	movlw	26
 17865  00365C  6E01               	movwf	i2updateServoPosition@time_us,c
 17866  00365E  0E00               	movlw	0
 17867  003660  6E04               	movwf	i2updateServoPosition@timer+1,c
 17868  003662  0E03               	movlw	3
 17869  003664  6E03               	movwf	i2updateServoPosition@timer,c
 17870  003666  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17871                           
 17872                           ;sort.c: 567: servo_timer_counter = 0;
 17873  00366A  0E00               	movlw	0
 17874  00366C  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17875  00366E  0E00               	movlw	0
 17876  003670  6E71               	movwf	_servo_timer_counter,c	;volatile
 17877                           
 17878                           ;sort.c: 568: servo_timer_target = 750;
 17879  003672  0E02               	movlw	2
 17880  003674  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17881  003676  0EEE               	movlw	238
 17882  003678  6E73               	movwf	_servo_timer_target,c	;volatile
 17883                           
 17884                           ;sort.c: 569: break;
 17885  00367A  0012               	return	
 17886  00367C                     i2l9322:
 17887                           
 17888                           ;sort.c: 572: updateServoPosition(1200, 1);
 17889  00367C  0E04               	movlw	4
 17890  00367E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17891  003680  0EB0               	movlw	176
 17892  003682  6E01               	movwf	i2updateServoPosition@time_us,c
 17893  003684  0E00               	movlw	0
 17894  003686  6E04               	movwf	i2updateServoPosition@timer+1,c
 17895  003688  0E01               	movlw	1
 17896  00368A  6E03               	movwf	i2updateServoPosition@timer,c
 17897  00368C  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17898                           
 17899                           ;sort.c: 573: updateServoPosition(1050, 3);
 17900  003690  0E04               	movlw	4
 17901  003692  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17902  003694  0E1A               	movlw	26
 17903  003696  6E01               	movwf	i2updateServoPosition@time_us,c
 17904  003698  0E00               	movlw	0
 17905  00369A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17906  00369C  0E03               	movlw	3
 17907  00369E  6E03               	movwf	i2updateServoPosition@timer,c
 17908  0036A0  EC2F  F024         	call	i2_updateServoPosition	;wreg free
 17909                           
 17910                           ;sort.c: 574: servo_timer_counter = 0;
 17911  0036A4  0E00               	movlw	0
 17912  0036A6  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17913  0036A8  0E00               	movlw	0
 17914  0036AA  6E71               	movwf	_servo_timer_counter,c	;volatile
 17915                           
 17916                           ;sort.c: 575: servo_timer_target = 9999;
 17917  0036AC  0E27               	movlw	39
 17918  0036AE  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17919  0036B0  0E0F               	movlw	15
 17920  0036B2  6E73               	movwf	_servo_timer_target,c	;volatile
 17921                           
 17922                           ;sort.c: 577: f_can_distributed = 1;
 17923  0036B4  0E00               	movlw	0
 17924  0036B6  0101               	movlb	1	; () banked
 17925  0036B8  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 17926  0036BA  0E01               	movlw	1
 17927  0036BC  6F35               	movwf	_f_can_distributed& (0+255),b
 17928                           
 17929                           ; BSR set to: 1
 17930                           ;sort.c: 578: if(f_lastCan == 1){
 17931  0036BE  0100               	movlb	0	; () banked
 17932  0036C0  05EE               	decf	_f_lastCan& (0+255),w,b
 17933  0036C2  0100               	movlb	0	; () banked
 17934  0036C4  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 17935  0036C6  A4D8               	btfss	status,2,c
 17936  0036C8  0012               	return	
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;sort.c: 579: machine_state = DoneSorting_state;
 17940  0036CA  0E02               	movlw	2
 17941  0036CC  0100               	movlb	0	; () banked
 17942  0036CE  6FFC               	movwf	_machine_state& (0+255),b
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;sort.c: 585: }
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;sort.c: 584: break;
 17949                           
 17950                           ;sort.c: 583: default:
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;sort.c: 580: }
 17954                           ;sort.c: 581: break;
 17955  0036D0  0012               	return	
 17956  0036D2                     i2l9336:
 17957  0036D2  C075  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 17958  0036D6  C076  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 17959                           
 17960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17961                           ; Switch size 1, requested type "space"
 17962                           ; Number of cases is 2, Range of values is 4 to 5
 17963                           ; switch strategies available:
 17964                           ; Name         Instructions Cycles
 17965                           ; simple_byte            7     4 (average)
 17966                           ;	Chosen strategy is simple_byte
 17967  0036DA  500A               	movf	??_updateServoStates+1,w,c
 17968  0036DC  0A04               	xorlw	4	; case 4
 17969  0036DE  B4D8               	btfsc	status,2,c
 17970  0036E0  D004               	goto	i2l9952
 17971  0036E2  0A01               	xorlw	1	; case 5
 17972  0036E4  A4D8               	btfss	status,2,c
 17973  0036E6  0012               	return	
 17974  0036E8  D008               	goto	i2l9954
 17975  0036EA                     i2l9952:
 17976                           
 17977                           ; Switch size 1, requested type "space"
 17978                           ; Number of cases is 2, Range of values is 26 to 236
 17979                           ; switch strategies available:
 17980                           ; Name         Instructions Cycles
 17981                           ; simple_byte            7     4 (average)
 17982                           ;	Chosen strategy is simple_byte
 17983  0036EA  5009               	movf	??_updateServoStates,w,c
 17984  0036EC  0A1A               	xorlw	26	; case 26
 17985  0036EE  B4D8               	btfsc	status,2,c
 17986  0036F0  D7C5               	goto	i2l9322
 17987  0036F2  0AF6               	xorlw	246	; case 236
 17988  0036F4  A4D8               	btfss	status,2,c
 17989  0036F6  0012               	return	
 17990  0036F8  D79B               	goto	i2l9310
 17991  0036FA                     i2l9954:
 17992                           
 17993                           ; Switch size 1, requested type "space"
 17994                           ; Number of cases is 1, Range of values is 110 to 110
 17995                           ; switch strategies available:
 17996                           ; Name         Instructions Cycles
 17997                           ; simple_byte            4     3 (average)
 17998                           ;	Chosen strategy is simple_byte
 17999  0036FA  5009               	movf	??_updateServoStates,w,c
 18000  0036FC  0A6E               	xorlw	110	; case 110
 18001  0036FE  A4D8               	btfss	status,2,c
 18002  003700  0012               	return	
 18003  003702  D7A9               	goto	i2l9316
 18004  003704                     __end_of_updateServoStates:
 18005                           	opt stack 0
 18006                           pclatu	equ	0xFFB
 18007                           pclath	equ	0xFFA
 18008                           tblptru	equ	0xFF8
 18009                           tblptrh	equ	0xFF7
 18010                           tblptrl	equ	0xFF6
 18011                           tablat	equ	0xFF5
 18012                           prodh	equ	0xFF4
 18013                           prodl	equ	0xFF3
 18014                           intcon	equ	0xFF2
 18015                           intcon2	equ	0xFF1
 18016                           intcon3	equ	0xFF0
 18017                           indf0	equ	0xFEF
 18018                           postinc0	equ	0xFEE
 18019                           fsr0h	equ	0xFEA
 18020                           fsr0l	equ	0xFE9
 18021                           wreg	equ	0xFE8
 18022                           postdec1	equ	0xFE5
 18023                           fsr1h	equ	0xFE2
 18024                           fsr1l	equ	0xFE1
 18025                           indf2	equ	0xFDF
 18026                           postinc2	equ	0xFDE
 18027                           postdec2	equ	0xFDD
 18028                           fsr2h	equ	0xFDA
 18029                           fsr2l	equ	0xFD9
 18030                           status	equ	0xFD8
 18031                           
 18032 ;; *************** function i2_updateServoPosition *****************
 18033 ;; Defined at:
 18034 ;;		line 505 in file "sort.c"
 18035 ;; Parameters:    Size  Location     Type
 18036 ;;  time_us         2    0[COMRAM] int 
 18037 ;;  timer           2    2[COMRAM] int 
 18038 ;; Auto vars:     Size  Location     Type
 18039 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18040 ;; Return value:  Size  Location     Type
 18041 ;;                  1    wreg      void 
 18042 ;; Registers used:
 18043 ;;		wreg, status,2, status,0
 18044 ;; Tracked objects:
 18045 ;;		On entry : 0/0
 18046 ;;		On exit  : 0/0
 18047 ;;		Unchanged: 0/0
 18048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18051 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18053 ;;Total ram usage:        8 bytes
 18054 ;; Hardware stack levels used:    1
 18055 ;; This function calls:
 18056 ;;		Nothing
 18057 ;; This function is called by:
 18058 ;;		_updateServoStates
 18059 ;; This function uses a non-reentrant model
 18060 ;;
 18061                           
 18062                           	psect	text61
 18063  00485E                     __ptext61:
 18064                           	opt stack 0
 18065  00485E                     i2_updateServoPosition:
 18066                           	opt stack 22
 18067                           
 18068                           ;sort.c: 506: unsigned int my_time = 65535 - time_us;
 18069                           
 18070                           ;incstack = 0
 18071  00485E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18072  004862  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18073  004866  1E05               	comf	??i2_updateServoPosition,f,c
 18074  004868  1E06               	comf	??i2_updateServoPosition+1,f,c
 18075  00486A  4A05               	infsnz	??i2_updateServoPosition,f,c
 18076  00486C  2A06               	incf	??i2_updateServoPosition+1,f,c
 18077  00486E  0EFF               	movlw	255
 18078  004870  2405               	addwf	??i2_updateServoPosition,w,c
 18079  004872  6E07               	movwf	i2updateServoPosition@my_time,c
 18080  004874  0EFF               	movlw	255
 18081  004876  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18082  004878  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18083                           
 18084                           ;sort.c: 507: switch(timer){
 18085  00487A  D019               	goto	i2l8494
 18086  00487C                     i2l8488:
 18087                           
 18088                           ;sort.c: 509: servoTimes[0] = my_time >> 8;
 18089  00487C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18090  00487E  0100               	movlb	0	; () banked
 18091  004880  6FDA               	movwf	_servoTimes& (0+255),b
 18092  004882  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18093                           
 18094                           ;sort.c: 510: servoTimes[1] = my_time & 0xFF;
 18095  004884  5007               	movf	i2updateServoPosition@my_time,w,c
 18096  004886  0100               	movlb	0	; () banked
 18097  004888  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18098  00488A  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;sort.c: 512: pan_servo_state = time_us;
 18102  00488C  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18103  004890  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18104  004894                     i2l868:
 18105                           
 18106                           ;sort.c: 514: servoTimes[2] = my_time >> 8;
 18107  004894  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18108  004896  0100               	movlb	0	; () banked
 18109  004898  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18110  00489A  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18111                           
 18112                           ;sort.c: 515: servoTimes[3] = my_time & 0xFF;
 18113  00489C  5007               	movf	i2updateServoPosition@my_time,w,c
 18114  00489E  0100               	movlb	0	; () banked
 18115  0048A0  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18116  0048A2  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18117                           
 18118                           ; BSR set to: 0
 18119                           ;sort.c: 517: tilt_servo_state = time_us;
 18120  0048A4  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18121  0048A8  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18122                           
 18123                           ;sort.c: 518: }
 18124  0048AC  0012               	return	
 18125  0048AE                     i2l8494:
 18126  0048AE  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18127  0048B2  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18128                           
 18129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18130                           ; Switch size 1, requested type "space"
 18131                           ; Number of cases is 1, Range of values is 0 to 0
 18132                           ; switch strategies available:
 18133                           ; Name         Instructions Cycles
 18134                           ; simple_byte            4     3 (average)
 18135                           ;	Chosen strategy is simple_byte
 18136  0048B6  5006               	movf	??i2_updateServoPosition+1,w,c
 18137  0048B8  0A00               	xorlw	0	; case 0
 18138  0048BA  A4D8               	btfss	status,2,c
 18139  0048BC  0012               	return	
 18140                           
 18141                           ; Switch size 1, requested type "space"
 18142                           ; Number of cases is 2, Range of values is 1 to 3
 18143                           ; switch strategies available:
 18144                           ; Name         Instructions Cycles
 18145                           ; simple_byte            7     4 (average)
 18146                           ;	Chosen strategy is simple_byte
 18147  0048BE  5005               	movf	??i2_updateServoPosition,w,c
 18148  0048C0  0A01               	xorlw	1	; case 1
 18149  0048C2  B4D8               	btfsc	status,2,c
 18150  0048C4  D7DB               	goto	i2l8488
 18151  0048C6  0A02               	xorlw	2	; case 3
 18152  0048C8  A4D8               	btfss	status,2,c
 18153  0048CA  0012               	return	
 18154  0048CC  D7E3               	goto	i2l868
 18155  0048CE                     __end_ofi2_updateServoPosition:
 18156                           	opt stack 0
 18157                           pclatu	equ	0xFFB
 18158                           pclath	equ	0xFFA
 18159                           tblptru	equ	0xFF8
 18160                           tblptrh	equ	0xFF7
 18161                           tblptrl	equ	0xFF6
 18162                           tablat	equ	0xFF5
 18163                           prodh	equ	0xFF4
 18164                           prodl	equ	0xFF3
 18165                           intcon	equ	0xFF2
 18166                           intcon2	equ	0xFF1
 18167                           intcon3	equ	0xFF0
 18168                           indf0	equ	0xFEF
 18169                           postinc0	equ	0xFEE
 18170                           fsr0h	equ	0xFEA
 18171                           fsr0l	equ	0xFE9
 18172                           wreg	equ	0xFE8
 18173                           postdec1	equ	0xFE5
 18174                           fsr1h	equ	0xFE2
 18175                           fsr1l	equ	0xFE1
 18176                           indf2	equ	0xFDF
 18177                           postinc2	equ	0xFDE
 18178                           postdec2	equ	0xFDD
 18179                           fsr2h	equ	0xFDA
 18180                           fsr2l	equ	0xFD9
 18181                           status	equ	0xFD8
 18182                           
 18183 ;; *************** function _updateMenu *****************
 18184 ;; Defined at:
 18185 ;;		line 213 in file "UI.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;		None
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;		None
 18190 ;; Return value:  Size  Location     Type
 18191 ;;                  1    wreg      void 
 18192 ;; Registers used:
 18193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18203 ;;Total ram usage:        2 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    5
 18206 ;; This function calls:
 18207 ;;		_change_state_to_logs_11
 18208 ;;		_change_state_to_logs_12
 18209 ;;		_change_state_to_logs_22
 18210 ;;		_change_state_to_logs_23
 18211 ;;		_change_state_to_logs_33
 18212 ;;		_change_state_to_logs_34
 18213 ;;		_change_state_to_menu_11
 18214 ;;		_change_state_to_menu_23
 18215 ;;		_dispLogs
 18216 ;;		_inputHandler
 18217 ;;		i2_change_state_to_menu_12
 18218 ;;		i2_change_state_to_menu_22
 18219 ;;		i2_change_state_to_menu_start
 18220 ;; This function is called by:
 18221 ;;		_handler
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           	psect	text62
 18226  002702                     __ptext62:
 18227                           	opt stack 0
 18228  002702                     _updateMenu:
 18229                           	opt stack 18
 18230                           
 18231                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18232                           
 18233                           ;incstack = 0
 18234  002702  0E00               	movlw	0
 18235  002704  6E78               	movwf	_up+1,c
 18236  002706  0E00               	movlw	0
 18237  002708  6E77               	movwf	_up,c
 18238  00270A  0E00               	movlw	0
 18239  00270C  6E5E               	movwf	_down+1,c
 18240  00270E  0E00               	movlw	0
 18241  002710  6E5D               	movwf	_down,c
 18242  002712  0E00               	movlw	0
 18243  002714  6E60               	movwf	_enter+1,c
 18244  002716  0E00               	movlw	0
 18245  002718  6E5F               	movwf	_enter,c
 18246  00271A  0E00               	movlw	0
 18247  00271C  6E5C               	movwf	_back+1,c
 18248  00271E  0E00               	movlw	0
 18249  002720  6E5B               	movwf	_back,c
 18250                           
 18251                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18252  002722  9EF2               	bcf	intcon,7,c	;volatile
 18253                           
 18254                           ;UI.c: 217: if (inputHandler()
 18255                           ;UI.c: 220: ){
 18256  002724  ECA8  F019         	call	_inputHandler	;wreg free
 18257  002728  502A               	movf	?_inputHandler,w,c
 18258  00272A  102B               	iorwf	?_inputHandler+1,w,c
 18259  00272C  A4D8               	btfss	status,2,c
 18260  00272E  D112               	goto	i2l9026
 18261  002730  D146               	goto	i2l257
 18262  002732                     i2l8878:
 18263                           
 18264                           ;UI.c: 224: change_state_to_menu_11();
 18265  002732  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 18266                           
 18267                           ;UI.c: 225: break;
 18268  002736  D143               	goto	i2l257
 18269  002738                     i2l8880:
 18270                           
 18271                           ;UI.c: 228: if(up){
 18272  002738  5077               	movf	_up,w,c
 18273  00273A  1078               	iorwf	_up+1,w,c
 18274  00273C  B4D8               	btfsc	status,2,c
 18275  00273E  D003               	goto	i2l8884
 18276                           
 18277                           ;UI.c: 229: change_state_to_menu_23();
 18278  002740  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18279                           
 18280                           ;UI.c: 230: }
 18281  002744  D13C               	goto	i2l257
 18282  002746                     i2l8884:
 18283                           
 18284                           ;UI.c: 231: else if(down){
 18285  002746  505D               	movf	_down,w,c
 18286  002748  105E               	iorwf	_down+1,w,c
 18287  00274A  B4D8               	btfsc	status,2,c
 18288  00274C  D003               	goto	i2l8888
 18289                           
 18290                           ;UI.c: 232: change_state_to_menu_12();
 18291  00274E  EC60  F027         	call	i2_change_state_to_menu_12	;wreg free
 18292                           
 18293                           ;UI.c: 233: }
 18294  002752  D135               	goto	i2l257
 18295  002754                     i2l8888:
 18296                           
 18297                           ;UI.c: 234: else if(enter){
 18298  002754  505F               	movf	_enter,w,c
 18299  002756  1060               	iorwf	_enter+1,w,c
 18300  002758  B4D8               	btfsc	status,2,c
 18301  00275A  D131               	goto	i2l257
 18302                           
 18303                           ;UI.c: 235: change_state_to_menu_start();
 18304  00275C  ECA3  F028         	call	i2_change_state_to_menu_start	;wreg free
 18305                           
 18306                           ;UI.c: 236: }
 18307                           ;UI.c: 237: break;
 18308  002760  D12E               	goto	i2l257
 18309  002762                     i2l8892:
 18310                           
 18311                           ;UI.c: 240: if(up){
 18312  002762  5077               	movf	_up,w,c
 18313  002764  1078               	iorwf	_up+1,w,c
 18314  002766  B4D8               	btfsc	status,2,c
 18315  002768  D003               	goto	i2l8896
 18316                           
 18317                           ;UI.c: 241: change_state_to_menu_11();
 18318  00276A  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 18319                           
 18320                           ;UI.c: 242: }
 18321  00276E  D127               	goto	i2l257
 18322  002770                     i2l8896:
 18323                           
 18324                           ;UI.c: 243: else if(down){
 18325  002770  505D               	movf	_down,w,c
 18326  002772  105E               	iorwf	_down+1,w,c
 18327  002774  B4D8               	btfsc	status,2,c
 18328  002776  D011               	goto	i2l8912
 18329                           
 18330                           ;UI.c: 244: change_state_to_menu_23();
 18331  002778  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18332                           
 18333                           ;UI.c: 245: }
 18334  00277C  D120               	goto	i2l257
 18335  00277E                     i2l8904:
 18336                           
 18337                           ;UI.c: 252: if(up){
 18338  00277E  5077               	movf	_up,w,c
 18339  002780  1078               	iorwf	_up+1,w,c
 18340  002782  B4D8               	btfsc	status,2,c
 18341  002784  D003               	goto	i2l8908
 18342                           
 18343                           ;UI.c: 253: change_state_to_menu_11();
 18344  002786  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 18345                           
 18346                           ;UI.c: 254: }
 18347  00278A  D119               	goto	i2l257
 18348  00278C                     i2l8908:
 18349                           
 18350                           ;UI.c: 255: else if(down){
 18351  00278C  505D               	movf	_down,w,c
 18352  00278E  105E               	iorwf	_down+1,w,c
 18353  002790  B4D8               	btfsc	status,2,c
 18354  002792  D003               	goto	i2l8912
 18355                           
 18356                           ;UI.c: 256: change_state_to_menu_23();
 18357  002794  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18358                           
 18359                           ;UI.c: 257: }
 18360  002798  D112               	goto	i2l257
 18361  00279A                     i2l8912:
 18362                           
 18363                           ;UI.c: 258: else if(enter){
 18364  00279A  505F               	movf	_enter,w,c
 18365  00279C  1060               	iorwf	_enter+1,w,c
 18366  00279E  B4D8               	btfsc	status,2,c
 18367  0027A0  D10E               	goto	i2l257
 18368                           
 18369                           ;UI.c: 259: machine_state = Sorting_state;
 18370  0027A2  0E01               	movlw	1
 18371  0027A4  0100               	movlb	0	; () banked
 18372  0027A6  6FFC               	movwf	_machine_state& (0+255),b
 18373                           
 18374                           ; BSR set to: 0
 18375                           ;UI.c: 260: }
 18376                           ;UI.c: 261: break;
 18377                           
 18378                           ; BSR set to: 0
 18379                           
 18380                           ; BSR set to: 0
 18381  0027A8  D10A               	goto	i2l257
 18382  0027AA                     i2l8916:
 18383                           
 18384                           ;UI.c: 264: if(up){
 18385  0027AA  5077               	movf	_up,w,c
 18386  0027AC  1078               	iorwf	_up+1,w,c
 18387  0027AE  B4D8               	btfsc	status,2,c
 18388  0027B0  D003               	goto	i2l8920
 18389                           
 18390                           ;UI.c: 265: change_state_to_menu_22();
 18391  0027B2  EC48  F027         	call	i2_change_state_to_menu_22	;wreg free
 18392                           
 18393                           ;UI.c: 266: }
 18394  0027B6  D103               	goto	i2l257
 18395  0027B8                     i2l8920:
 18396                           
 18397                           ;UI.c: 267: else if(down){
 18398  0027B8  505D               	movf	_down,w,c
 18399  0027BA  105E               	iorwf	_down+1,w,c
 18400  0027BC  B4D8               	btfsc	status,2,c
 18401  0027BE  D003               	goto	i2l8924
 18402                           
 18403                           ;UI.c: 268: change_state_to_menu_11();
 18404  0027C0  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 18405                           
 18406                           ;UI.c: 269: }
 18407  0027C4  D0FC               	goto	i2l257
 18408  0027C6                     i2l8924:
 18409                           
 18410                           ;UI.c: 270: else if(enter){
 18411  0027C6  505F               	movf	_enter,w,c
 18412  0027C8  1060               	iorwf	_enter+1,w,c
 18413  0027CA  B4D8               	btfsc	status,2,c
 18414  0027CC  D0F8               	goto	i2l257
 18415                           
 18416                           ;UI.c: 271: change_state_to_logs_11();
 18417  0027CE  EC08  F028         	call	_change_state_to_logs_11	;wreg free
 18418                           
 18419                           ;UI.c: 272: }
 18420                           ;UI.c: 273: break;
 18421  0027D2  D0F5               	goto	i2l257
 18422  0027D4                     i2l8928:
 18423                           
 18424                           ;UI.c: 276: if(up){
 18425  0027D4  5077               	movf	_up,w,c
 18426  0027D6  1078               	iorwf	_up+1,w,c
 18427  0027D8  B4D8               	btfsc	status,2,c
 18428  0027DA  D003               	goto	i2l8932
 18429                           
 18430                           ;UI.c: 277: change_state_to_logs_34();
 18431  0027DC  ECA8  F027         	call	_change_state_to_logs_34	;wreg free
 18432                           
 18433                           ;UI.c: 278: }
 18434  0027E0  D0EE               	goto	i2l257
 18435  0027E2                     i2l8932:
 18436                           
 18437                           ;UI.c: 279: else if(down){
 18438  0027E2  505D               	movf	_down,w,c
 18439  0027E4  105E               	iorwf	_down+1,w,c
 18440  0027E6  B4D8               	btfsc	status,2,c
 18441  0027E8  D003               	goto	i2l8936
 18442                           
 18443                           ;UI.c: 280: change_state_to_logs_12();
 18444  0027EA  ECF0  F027         	call	_change_state_to_logs_12	;wreg free
 18445                           
 18446                           ;UI.c: 281: }
 18447  0027EE  D0E7               	goto	i2l257
 18448  0027F0                     i2l8936:
 18449                           
 18450                           ;UI.c: 282: else if(enter){
 18451  0027F0  505F               	movf	_enter,w,c
 18452  0027F2  1060               	iorwf	_enter+1,w,c
 18453  0027F4  B4D8               	btfsc	status,2,c
 18454  0027F6  D007               	goto	i2l8940
 18455                           
 18456                           ;UI.c: 283: dispLogs(1);
 18457  0027F8  0E00               	movlw	0
 18458  0027FA  6E13               	movwf	dispLogs@myLog+1,c
 18459  0027FC  0E01               	movlw	1
 18460  0027FE  6E12               	movwf	dispLogs@myLog,c
 18461  002800  ECDD  F028         	call	_dispLogs	;wreg free
 18462                           
 18463                           ;UI.c: 284: }
 18464  002804  D0DC               	goto	i2l257
 18465  002806                     i2l8940:
 18466                           
 18467                           ;UI.c: 285: else if(back){
 18468  002806  505B               	movf	_back,w,c
 18469  002808  105C               	iorwf	_back+1,w,c
 18470  00280A  B4D8               	btfsc	status,2,c
 18471  00280C  D0D8               	goto	i2l257
 18472                           
 18473                           ;UI.c: 286: change_state_to_menu_23();
 18474  00280E  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18475                           
 18476                           ;UI.c: 287: }
 18477                           ;UI.c: 288: break;
 18478  002812  D0D5               	goto	i2l257
 18479  002814                     i2l8944:
 18480                           
 18481                           ;UI.c: 291: if(up){
 18482  002814  5077               	movf	_up,w,c
 18483  002816  1078               	iorwf	_up+1,w,c
 18484  002818  B4D8               	btfsc	status,2,c
 18485  00281A  D003               	goto	i2l8948
 18486                           
 18487                           ;UI.c: 292: change_state_to_logs_11();
 18488  00281C  EC08  F028         	call	_change_state_to_logs_11	;wreg free
 18489                           
 18490                           ;UI.c: 293: }
 18491  002820  D0CE               	goto	i2l257
 18492  002822                     i2l8948:
 18493                           
 18494                           ;UI.c: 294: else if(down){
 18495  002822  505D               	movf	_down,w,c
 18496  002824  105E               	iorwf	_down+1,w,c
 18497  002826  B4D8               	btfsc	status,2,c
 18498  002828  D003               	goto	i2l8952
 18499                           
 18500                           ;UI.c: 295: change_state_to_logs_23();
 18501  00282A  EC37  F028         	call	_change_state_to_logs_23	;wreg free
 18502                           
 18503                           ;UI.c: 296: }
 18504  00282E  D0C7               	goto	i2l257
 18505  002830                     i2l8952:
 18506                           
 18507                           ;UI.c: 297: else if(enter){
 18508  002830  505F               	movf	_enter,w,c
 18509  002832  1060               	iorwf	_enter+1,w,c
 18510  002834  B4D8               	btfsc	status,2,c
 18511  002836  D007               	goto	i2l8956
 18512                           
 18513                           ;UI.c: 298: dispLogs(2);
 18514  002838  0E00               	movlw	0
 18515  00283A  6E13               	movwf	dispLogs@myLog+1,c
 18516  00283C  0E02               	movlw	2
 18517  00283E  6E12               	movwf	dispLogs@myLog,c
 18518  002840  ECDD  F028         	call	_dispLogs	;wreg free
 18519                           
 18520                           ;UI.c: 299: }
 18521  002844  D0BC               	goto	i2l257
 18522  002846                     i2l8956:
 18523                           
 18524                           ;UI.c: 300: else if(back){
 18525  002846  505B               	movf	_back,w,c
 18526  002848  105C               	iorwf	_back+1,w,c
 18527  00284A  B4D8               	btfsc	status,2,c
 18528  00284C  D0B8               	goto	i2l257
 18529                           
 18530                           ;UI.c: 301: change_state_to_menu_23();
 18531  00284E  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18532                           
 18533                           ;UI.c: 302: }
 18534                           ;UI.c: 303: break;
 18535  002852  D0B5               	goto	i2l257
 18536  002854                     i2l8960:
 18537                           
 18538                           ;UI.c: 306: if(up){
 18539  002854  5077               	movf	_up,w,c
 18540  002856  1078               	iorwf	_up+1,w,c
 18541  002858  B4D8               	btfsc	status,2,c
 18542  00285A  D003               	goto	i2l8964
 18543                           
 18544                           ;UI.c: 307: change_state_to_logs_11();
 18545  00285C  EC08  F028         	call	_change_state_to_logs_11	;wreg free
 18546                           
 18547                           ;UI.c: 308: }
 18548  002860  D0AE               	goto	i2l257
 18549  002862                     i2l8964:
 18550                           
 18551                           ;UI.c: 309: else if(down){
 18552  002862  505D               	movf	_down,w,c
 18553  002864  105E               	iorwf	_down+1,w,c
 18554  002866  B4D8               	btfsc	status,2,c
 18555  002868  D003               	goto	i2l8968
 18556                           
 18557                           ;UI.c: 310: change_state_to_logs_23();
 18558  00286A  EC37  F028         	call	_change_state_to_logs_23	;wreg free
 18559                           
 18560                           ;UI.c: 311: }
 18561  00286E  D0A7               	goto	i2l257
 18562  002870                     i2l8968:
 18563                           
 18564                           ;UI.c: 312: else if(enter){
 18565  002870  505F               	movf	_enter,w,c
 18566  002872  1060               	iorwf	_enter+1,w,c
 18567  002874  B4D8               	btfsc	status,2,c
 18568  002876  D007               	goto	i2l8972
 18569                           
 18570                           ;UI.c: 313: dispLogs(2);
 18571  002878  0E00               	movlw	0
 18572  00287A  6E13               	movwf	dispLogs@myLog+1,c
 18573  00287C  0E02               	movlw	2
 18574  00287E  6E12               	movwf	dispLogs@myLog,c
 18575  002880  ECDD  F028         	call	_dispLogs	;wreg free
 18576                           
 18577                           ;UI.c: 314: }
 18578  002884  D09C               	goto	i2l257
 18579  002886                     i2l8972:
 18580                           
 18581                           ;UI.c: 315: else if(back){
 18582  002886  505B               	movf	_back,w,c
 18583  002888  105C               	iorwf	_back+1,w,c
 18584  00288A  B4D8               	btfsc	status,2,c
 18585  00288C  D098               	goto	i2l257
 18586                           
 18587                           ;UI.c: 316: change_state_to_menu_23();
 18588  00288E  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18589                           
 18590                           ;UI.c: 317: }
 18591                           ;UI.c: 318: break;
 18592  002892  D095               	goto	i2l257
 18593  002894                     i2l8976:
 18594                           
 18595                           ;UI.c: 321: if(up){
 18596  002894  5077               	movf	_up,w,c
 18597  002896  1078               	iorwf	_up+1,w,c
 18598  002898  B4D8               	btfsc	status,2,c
 18599  00289A  D003               	goto	i2l8980
 18600                           
 18601                           ;UI.c: 322: change_state_to_logs_22();
 18602  00289C  ECD8  F027         	call	_change_state_to_logs_22	;wreg free
 18603                           
 18604                           ;UI.c: 323: }
 18605  0028A0  D08E               	goto	i2l257
 18606  0028A2                     i2l8980:
 18607                           
 18608                           ;UI.c: 324: else if(down){
 18609  0028A2  505D               	movf	_down,w,c
 18610  0028A4  105E               	iorwf	_down+1,w,c
 18611  0028A6  B4D8               	btfsc	status,2,c
 18612  0028A8  D003               	goto	i2l8984
 18613                           
 18614                           ;UI.c: 325: change_state_to_logs_34();
 18615  0028AA  ECA8  F027         	call	_change_state_to_logs_34	;wreg free
 18616                           
 18617                           ;UI.c: 326: }
 18618  0028AE  D087               	goto	i2l257
 18619  0028B0                     i2l8984:
 18620                           
 18621                           ;UI.c: 327: else if(enter){
 18622  0028B0  505F               	movf	_enter,w,c
 18623  0028B2  1060               	iorwf	_enter+1,w,c
 18624  0028B4  B4D8               	btfsc	status,2,c
 18625  0028B6  D007               	goto	i2l8988
 18626                           
 18627                           ;UI.c: 328: dispLogs(3);
 18628  0028B8  0E00               	movlw	0
 18629  0028BA  6E13               	movwf	dispLogs@myLog+1,c
 18630  0028BC  0E03               	movlw	3
 18631  0028BE  6E12               	movwf	dispLogs@myLog,c
 18632  0028C0  ECDD  F028         	call	_dispLogs	;wreg free
 18633                           
 18634                           ;UI.c: 329: }
 18635  0028C4  D07C               	goto	i2l257
 18636  0028C6                     i2l8988:
 18637                           
 18638                           ;UI.c: 330: else if(back){
 18639  0028C6  505B               	movf	_back,w,c
 18640  0028C8  105C               	iorwf	_back+1,w,c
 18641  0028CA  B4D8               	btfsc	status,2,c
 18642  0028CC  D078               	goto	i2l257
 18643                           
 18644                           ;UI.c: 331: change_state_to_menu_23();
 18645  0028CE  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18646                           
 18647                           ;UI.c: 332: }
 18648                           ;UI.c: 333: break;
 18649  0028D2  D075               	goto	i2l257
 18650  0028D4                     i2l8992:
 18651                           
 18652                           ;UI.c: 336: if(up){
 18653  0028D4  5077               	movf	_up,w,c
 18654  0028D6  1078               	iorwf	_up+1,w,c
 18655  0028D8  B4D8               	btfsc	status,2,c
 18656  0028DA  D003               	goto	i2l8996
 18657                           
 18658                           ;UI.c: 337: change_state_to_logs_22();
 18659  0028DC  ECD8  F027         	call	_change_state_to_logs_22	;wreg free
 18660                           
 18661                           ;UI.c: 338: }
 18662  0028E0  D06E               	goto	i2l257
 18663  0028E2                     i2l8996:
 18664                           
 18665                           ;UI.c: 339: else if(down){
 18666  0028E2  505D               	movf	_down,w,c
 18667  0028E4  105E               	iorwf	_down+1,w,c
 18668  0028E6  B4D8               	btfsc	status,2,c
 18669  0028E8  D003               	goto	i2l9000
 18670                           
 18671                           ;UI.c: 340: change_state_to_logs_34();
 18672  0028EA  ECA8  F027         	call	_change_state_to_logs_34	;wreg free
 18673                           
 18674                           ;UI.c: 341: }
 18675  0028EE  D067               	goto	i2l257
 18676  0028F0                     i2l9000:
 18677                           
 18678                           ;UI.c: 342: else if(enter){
 18679  0028F0  505F               	movf	_enter,w,c
 18680  0028F2  1060               	iorwf	_enter+1,w,c
 18681  0028F4  B4D8               	btfsc	status,2,c
 18682  0028F6  D007               	goto	i2l9004
 18683                           
 18684                           ;UI.c: 343: dispLogs(3);
 18685  0028F8  0E00               	movlw	0
 18686  0028FA  6E13               	movwf	dispLogs@myLog+1,c
 18687  0028FC  0E03               	movlw	3
 18688  0028FE  6E12               	movwf	dispLogs@myLog,c
 18689  002900  ECDD  F028         	call	_dispLogs	;wreg free
 18690                           
 18691                           ;UI.c: 344: }
 18692  002904  D05C               	goto	i2l257
 18693  002906                     i2l9004:
 18694                           
 18695                           ;UI.c: 345: else if(back){
 18696  002906  505B               	movf	_back,w,c
 18697  002908  105C               	iorwf	_back+1,w,c
 18698  00290A  B4D8               	btfsc	status,2,c
 18699  00290C  D058               	goto	i2l257
 18700                           
 18701                           ;UI.c: 346: change_state_to_menu_23();
 18702  00290E  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18703                           
 18704                           ;UI.c: 347: }
 18705                           ;UI.c: 348: break;
 18706  002912  D055               	goto	i2l257
 18707  002914                     i2l9008:
 18708                           
 18709                           ;UI.c: 351: if(up){
 18710  002914  5077               	movf	_up,w,c
 18711  002916  1078               	iorwf	_up+1,w,c
 18712  002918  B4D8               	btfsc	status,2,c
 18713  00291A  D003               	goto	i2l9012
 18714                           
 18715                           ;UI.c: 352: change_state_to_logs_33();
 18716  00291C  ECC0  F027         	call	_change_state_to_logs_33	;wreg free
 18717                           
 18718                           ;UI.c: 353: }
 18719  002920  D04E               	goto	i2l257
 18720  002922                     i2l9012:
 18721                           
 18722                           ;UI.c: 354: else if(down){
 18723  002922  505D               	movf	_down,w,c
 18724  002924  105E               	iorwf	_down+1,w,c
 18725  002926  B4D8               	btfsc	status,2,c
 18726  002928  D003               	goto	i2l9016
 18727                           
 18728                           ;UI.c: 355: change_state_to_logs_11();
 18729  00292A  EC08  F028         	call	_change_state_to_logs_11	;wreg free
 18730                           
 18731                           ;UI.c: 356: }
 18732  00292E  D047               	goto	i2l257
 18733  002930                     i2l9016:
 18734                           
 18735                           ;UI.c: 357: else if(enter){
 18736  002930  505F               	movf	_enter,w,c
 18737  002932  1060               	iorwf	_enter+1,w,c
 18738  002934  B4D8               	btfsc	status,2,c
 18739  002936  D007               	goto	i2l9020
 18740                           
 18741                           ;UI.c: 358: dispLogs(4);
 18742  002938  0E00               	movlw	0
 18743  00293A  6E13               	movwf	dispLogs@myLog+1,c
 18744  00293C  0E04               	movlw	4
 18745  00293E  6E12               	movwf	dispLogs@myLog,c
 18746  002940  ECDD  F028         	call	_dispLogs	;wreg free
 18747                           
 18748                           ;UI.c: 359: }
 18749  002944  D03C               	goto	i2l257
 18750  002946                     i2l9020:
 18751                           
 18752                           ;UI.c: 360: else if(back){
 18753  002946  505B               	movf	_back,w,c
 18754  002948  105C               	iorwf	_back+1,w,c
 18755  00294A  B4D8               	btfsc	status,2,c
 18756  00294C  D038               	goto	i2l257
 18757                           
 18758                           ;UI.c: 361: change_state_to_menu_23();
 18759  00294E  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 18760                           
 18761                           ;UI.c: 367: }
 18762                           
 18763                           ;UI.c: 366: break;
 18764                           
 18765                           ;UI.c: 365: default:
 18766                           
 18767                           ;UI.c: 362: }
 18768                           ;UI.c: 363: break;
 18769  002952  D035               	goto	i2l257
 18770  002954                     i2l9026:
 18771  002954  C0EC  F043         	movff	_cur_state,??_updateMenu
 18772  002958  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18773                           
 18774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18775                           ; Switch size 1, requested type "space"
 18776                           ; Number of cases is 3, Range of values is 0 to 4
 18777                           ; switch strategies available:
 18778                           ; Name         Instructions Cycles
 18779                           ; simple_byte           10     6 (average)
 18780                           ;	Chosen strategy is simple_byte
 18781  00295C  5044               	movf	??_updateMenu+1,w,c
 18782  00295E  0A00               	xorlw	0	; case 0
 18783  002960  B4D8               	btfsc	status,2,c
 18784  002962  D007               	goto	i2l9958
 18785  002964  0A03               	xorlw	3	; case 3
 18786  002966  B4D8               	btfsc	status,2,c
 18787  002968  D015               	goto	i2l9960
 18788  00296A  0A07               	xorlw	7	; case 4
 18789  00296C  B4D8               	btfsc	status,2,c
 18790  00296E  D020               	goto	i2l9962
 18791  002970  D026               	goto	i2l257
 18792  002972                     i2l9958:
 18793                           
 18794                           ; Switch size 1, requested type "space"
 18795                           ; Number of cases is 5, Range of values is 0 to 23
 18796                           ; switch strategies available:
 18797                           ; Name         Instructions Cycles
 18798                           ; simple_byte           16     9 (average)
 18799                           ;	Chosen strategy is simple_byte
 18800  002972  5043               	movf	??_updateMenu,w,c
 18801  002974  0A00               	xorlw	0	; case 0
 18802  002976  B4D8               	btfsc	status,2,c
 18803  002978  D6DC               	goto	i2l8878
 18804  00297A  0A0B               	xorlw	11	; case 11
 18805  00297C  B4D8               	btfsc	status,2,c
 18806  00297E  D6DC               	goto	i2l8880
 18807  002980  0A07               	xorlw	7	; case 12
 18808  002982  B4D8               	btfsc	status,2,c
 18809  002984  D6EE               	goto	i2l8892
 18810  002986  0A1A               	xorlw	26	; case 22
 18811  002988  B4D8               	btfsc	status,2,c
 18812  00298A  D6F9               	goto	i2l8904
 18813  00298C  0A01               	xorlw	1	; case 23
 18814  00298E  B4D8               	btfsc	status,2,c
 18815  002990  D70C               	goto	i2l8916
 18816  002992  D015               	goto	i2l257
 18817  002994                     i2l9960:
 18818                           
 18819                           ; Switch size 1, requested type "space"
 18820                           ; Number of cases is 4, Range of values is 243 to 255
 18821                           ; switch strategies available:
 18822                           ; Name         Instructions Cycles
 18823                           ; simple_byte           13     7 (average)
 18824                           ;	Chosen strategy is simple_byte
 18825  002994  5043               	movf	??_updateMenu,w,c
 18826  002996  0AF3               	xorlw	243	; case 243
 18827  002998  B4D8               	btfsc	status,2,c
 18828  00299A  D71C               	goto	i2l8928
 18829  00299C  0A07               	xorlw	7	; case 244
 18830  00299E  B4D8               	btfsc	status,2,c
 18831  0029A0  D739               	goto	i2l8944
 18832  0029A2  0A0A               	xorlw	10	; case 254
 18833  0029A4  B4D8               	btfsc	status,2,c
 18834  0029A6  D756               	goto	i2l8960
 18835  0029A8  0A01               	xorlw	1	; case 255
 18836  0029AA  B4D8               	btfsc	status,2,c
 18837  0029AC  D773               	goto	i2l8976
 18838  0029AE  D007               	goto	i2l257
 18839  0029B0                     i2l9962:
 18840                           
 18841                           ; Switch size 1, requested type "space"
 18842                           ; Number of cases is 2, Range of values is 9 to 10
 18843                           ; switch strategies available:
 18844                           ; Name         Instructions Cycles
 18845                           ; simple_byte            7     4 (average)
 18846                           ;	Chosen strategy is simple_byte
 18847  0029B0  5043               	movf	??_updateMenu,w,c
 18848  0029B2  0A09               	xorlw	9	; case 9
 18849  0029B4  B4D8               	btfsc	status,2,c
 18850  0029B6  D78E               	goto	i2l8992
 18851  0029B8  0A03               	xorlw	3	; case 10
 18852  0029BA  B4D8               	btfsc	status,2,c
 18853  0029BC  D7AB               	goto	i2l9008
 18854  0029BE                     i2l257:
 18855                           
 18856                           ;UI.c: 368: }
 18857                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18858  0029BE  8EF2               	bsf	intcon,7,c	;volatile
 18859  0029C0  0012               	return		;funcret
 18860  0029C2                     __end_of_updateMenu:
 18861                           	opt stack 0
 18862                           pclatu	equ	0xFFB
 18863                           pclath	equ	0xFFA
 18864                           tblptru	equ	0xFF8
 18865                           tblptrh	equ	0xFF7
 18866                           tblptrl	equ	0xFF6
 18867                           tablat	equ	0xFF5
 18868                           prodh	equ	0xFF4
 18869                           prodl	equ	0xFF3
 18870                           intcon	equ	0xFF2
 18871                           intcon2	equ	0xFF1
 18872                           intcon3	equ	0xFF0
 18873                           indf0	equ	0xFEF
 18874                           postinc0	equ	0xFEE
 18875                           fsr0h	equ	0xFEA
 18876                           fsr0l	equ	0xFE9
 18877                           wreg	equ	0xFE8
 18878                           postdec1	equ	0xFE5
 18879                           fsr1h	equ	0xFE2
 18880                           fsr1l	equ	0xFE1
 18881                           indf2	equ	0xFDF
 18882                           postinc2	equ	0xFDE
 18883                           postdec2	equ	0xFDD
 18884                           fsr2h	equ	0xFDA
 18885                           fsr2l	equ	0xFD9
 18886                           status	equ	0xFD8
 18887                           
 18888 ;; *************** function i2_change_state_to_menu_start *****************
 18889 ;; Defined at:
 18890 ;;		line 474 in file "UI.c"
 18891 ;; Parameters:    Size  Location     Type
 18892 ;;		None
 18893 ;; Auto vars:     Size  Location     Type
 18894 ;;		None
 18895 ;; Return value:  Size  Location     Type
 18896 ;;                  1    wreg      void 
 18897 ;; Registers used:
 18898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18899 ;; Tracked objects:
 18900 ;;		On entry : 0/0
 18901 ;;		On exit  : 0/0
 18902 ;;		Unchanged: 0/0
 18903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18908 ;;Total ram usage:        0 bytes
 18909 ;; Hardware stack levels used:    1
 18910 ;; Hardware stack levels required when called:    4
 18911 ;; This function calls:
 18912 ;;		i2_lcdInst
 18913 ;;		i2_printRTC
 18914 ;;		i2_printf
 18915 ;; This function is called by:
 18916 ;;		_updateMenu
 18917 ;; This function uses a non-reentrant model
 18918 ;;
 18919                           
 18920                           	psect	text63
 18921  005146                     __ptext63:
 18922                           	opt stack 0
 18923  005146                     i2_change_state_to_menu_start:
 18924                           	opt stack 18
 18925                           
 18926                           ;UI.c: 475: cur_state = 0;
 18927                           
 18928                           ;incstack = 0
 18929  005146  0E00               	movlw	0
 18930  005148  0100               	movlb	0	; () banked
 18931  00514A  6FED               	movwf	(_cur_state+1)& (0+255),b
 18932  00514C  0E00               	movlw	0
 18933  00514E  6FEC               	movwf	_cur_state& (0+255),b
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;UI.c: 477: lcdInst(0b10000000);;
 18937  005150  0E80               	movlw	128
 18938  005152  EC7B  F029         	call	i2_lcdInst
 18939                           
 18940                           ;UI.c: 478: printRTC();
 18941  005156  EC8D  F018         	call	i2_printRTC	;wreg free
 18942                           
 18943                           ;UI.c: 479: lcdInst(0b11000000);;
 18944  00515A  0EC0               	movlw	192
 18945  00515C  EC7B  F029         	call	i2_lcdInst
 18946                           
 18947                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18948  005160  0EF7               	movlw	low STR_30
 18949  005162  6E0D               	movwf	i2printf@f,c
 18950  005164  0EFD               	movlw	high STR_30
 18951  005166  6E0E               	movwf	i2printf@f+1,c
 18952  005168  ECE6  F00E         	call	i2_printf	;wreg free
 18953  00516C  0012               	return		;funcret
 18954  00516E                     __end_ofi2_change_state_to_menu_start:
 18955                           	opt stack 0
 18956                           pclatu	equ	0xFFB
 18957                           pclath	equ	0xFFA
 18958                           tblptru	equ	0xFF8
 18959                           tblptrh	equ	0xFF7
 18960                           tblptrl	equ	0xFF6
 18961                           tablat	equ	0xFF5
 18962                           prodh	equ	0xFF4
 18963                           prodl	equ	0xFF3
 18964                           intcon	equ	0xFF2
 18965                           intcon2	equ	0xFF1
 18966                           intcon3	equ	0xFF0
 18967                           indf0	equ	0xFEF
 18968                           postinc0	equ	0xFEE
 18969                           fsr0h	equ	0xFEA
 18970                           fsr0l	equ	0xFE9
 18971                           wreg	equ	0xFE8
 18972                           postdec1	equ	0xFE5
 18973                           fsr1h	equ	0xFE2
 18974                           fsr1l	equ	0xFE1
 18975                           indf2	equ	0xFDF
 18976                           postinc2	equ	0xFDE
 18977                           postdec2	equ	0xFDD
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function i2_printRTC *****************
 18983 ;; Defined at:
 18984 ;;		line 63 in file "RTC.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;		None
 18987 ;; Auto vars:     Size  Location     Type
 18988 ;;  printRTC       14   44[COMRAM] int [7]
 18989 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18990 ;;  printRTC        2   64[COMRAM] int 
 18991 ;;  printRTC        2   58[COMRAM] int 
 18992 ;; Return value:  Size  Location     Type
 18993 ;;                  1    wreg      void 
 18994 ;; Registers used:
 18995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18996 ;; Tracked objects:
 18997 ;;		On entry : 0/0
 18998 ;;		On exit  : 0/0
 18999 ;;		Unchanged: 0/0
 19000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19005 ;;Total ram usage:       25 bytes
 19006 ;; Hardware stack levels used:    1
 19007 ;; Hardware stack levels required when called:    3
 19008 ;; This function calls:
 19009 ;;		i2_getRTC
 19010 ;;		i2_lcdInst
 19011 ;;		i2_printf
 19012 ;;		i2_strcpy
 19013 ;; This function is called by:
 19014 ;;		i2_change_state_to_menu_start
 19015 ;; This function uses a non-reentrant model
 19016 ;;
 19017                           
 19018                           	psect	text64
 19019  00311A                     __ptext64:
 19020                           	opt stack 0
 19021  00311A                     i2_printRTC:
 19022                           	opt stack 18
 19023                           
 19024                           ;RTC.c: 64: getRTC();
 19025                           
 19026                           ;incstack = 0
 19027  00311A  ECF6  F023         	call	i2_getRTC	;wreg free
 19028                           
 19029                           ;RTC.c: 65: char month[] = "MMM";
 19030  00311E  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 19031  003122  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 19032  003126  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 19033  00312A  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 19034                           
 19035                           ;RTC.c: 66: int INT_time[7];
 19036                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19037  00312E  0E00               	movlw	0
 19038  003130  6E42               	movwf	i2printRTC@i+1,c
 19039  003132  0E00               	movlw	0
 19040  003134  6E41               	movwf	i2printRTC@i,c
 19041  003136  BE42               	btfsc	i2printRTC@i+1,7,c
 19042  003138  D006               	goto	i2l6968
 19043  00313A  5042               	movf	i2printRTC@i+1,w,c
 19044  00313C  E135               	bnz	i2l606
 19045  00313E  0E07               	movlw	7
 19046  003140  5C41               	subwf	i2printRTC@i,w,c
 19047  003142  B0D8               	btfsc	status,0,c
 19048  003144  D031               	goto	i2l606
 19049  003146                     i2l6968:
 19050                           
 19051                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19052  003146  0E1C               	movlw	low _time
 19053  003148  2441               	addwf	i2printRTC@i,w,c
 19054  00314A  6ED9               	movwf	fsr2l,c
 19055  00314C  0E01               	movlw	high _time
 19056  00314E  2042               	addwfc	i2printRTC@i+1,w,c
 19057  003150  6EDA               	movwf	fsr2h,c
 19058  003152  50DF               	movf	indf2,w,c
 19059  003154  6E2A               	movwf	??i2_printRTC& (0+255),c
 19060  003156  3A2A               	swapf	??i2_printRTC,f,c
 19061  003158  0E0F               	movlw	15
 19062  00315A  162A               	andwf	??i2_printRTC,f,c
 19063  00315C  0E0F               	movlw	15
 19064  00315E  162A               	andwf	??i2_printRTC,f,c
 19065  003160  502A               	movf	??i2_printRTC,w,c
 19066  003162  0D0A               	mullw	10
 19067  003164  0E1C               	movlw	low _time
 19068  003166  2441               	addwf	i2printRTC@i,w,c
 19069  003168  6ED9               	movwf	fsr2l,c
 19070  00316A  0E01               	movlw	high _time
 19071  00316C  2042               	addwfc	i2printRTC@i+1,w,c
 19072  00316E  6EDA               	movwf	fsr2h,c
 19073  003170  50DF               	movf	indf2,w,c
 19074  003172  0B0F               	andlw	15
 19075  003174  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19076  003176  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19077  003178  50F3               	movf	prodl,w,c
 19078  00317A  262B               	addwf	??i2_printRTC+1,f,c
 19079  00317C  50F4               	movf	prodh,w,c
 19080  00317E  222C               	addwfc	??i2_printRTC+2,f,c
 19081  003180  90D8               	bcf	status,0,c
 19082  003182  3441               	rlcf	i2printRTC@i,w,c
 19083  003184  6ED9               	movwf	fsr2l,c
 19084  003186  3442               	rlcf	i2printRTC@i+1,w,c
 19085  003188  6EDA               	movwf	fsr2h,c
 19086  00318A  0E2D               	movlw	low i2printRTC@INT_time
 19087  00318C  26D9               	addwf	fsr2l,f,c
 19088  00318E  0E00               	movlw	high i2printRTC@INT_time
 19089  003190  22DA               	addwfc	fsr2h,f,c
 19090  003192  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19091  003196  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19092  00319A  4A41               	infsnz	i2printRTC@i,f,c
 19093  00319C  2A42               	incf	i2printRTC@i+1,f,c
 19094  00319E  BE42               	btfsc	i2printRTC@i+1,7,c
 19095  0031A0  D7D2               	goto	i2l6968
 19096  0031A2  5042               	movf	i2printRTC@i+1,w,c
 19097  0031A4  E101               	bnz	i2u543_40
 19098  0031A6  D7CB               	goto	L12
 19099  0031A8                     i2u543_40:
 19100  0031A8                     i2l606:
 19101                           
 19102                           ;RTC.c: 69: }
 19103                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19104  0031A8  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19105  0031AC  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19106                           
 19107                           ;RTC.c: 71: switch(RTC_month){
 19108  0031B0  D084               	goto	i2l7000
 19109  0031B2                     i2l6974:
 19110                           
 19111                           ;RTC.c: 73: strcpy(month, "JAN");
 19112  0031B2  0E3D               	movlw	low i2printRTC@month
 19113  0031B4  6E01               	movwf	i2strcpy@to,c
 19114  0031B6  0E00               	movlw	high i2printRTC@month
 19115  0031B8  6E02               	movwf	i2strcpy@to+1,c
 19116  0031BA  0EDB               	movlw	low STR_8
 19117  0031BC  6E03               	movwf	i2strcpy@from,c
 19118  0031BE  0EFF               	movlw	high STR_8
 19119  0031C0  6E04               	movwf	i2strcpy@from+1,c
 19120  0031C2  EC17  F027         	call	i2_strcpy	;wreg free
 19121                           
 19122                           ;RTC.c: 74: break;
 19123  0031C6  D0A6               	goto	i2l7002
 19124  0031C8                     i2l6976:
 19125                           
 19126                           ;RTC.c: 76: strcpy(month, "FEB");
 19127  0031C8  0E3D               	movlw	low i2printRTC@month
 19128  0031CA  6E01               	movwf	i2strcpy@to,c
 19129  0031CC  0E00               	movlw	high i2printRTC@month
 19130  0031CE  6E02               	movwf	i2strcpy@to+1,c
 19131  0031D0  0ECB               	movlw	low STR_9
 19132  0031D2  6E03               	movwf	i2strcpy@from,c
 19133  0031D4  0EFF               	movlw	high STR_9
 19134  0031D6  6E04               	movwf	i2strcpy@from+1,c
 19135  0031D8  EC17  F027         	call	i2_strcpy	;wreg free
 19136                           
 19137                           ;RTC.c: 77: break;
 19138  0031DC  D09B               	goto	i2l7002
 19139  0031DE                     i2l6978:
 19140                           
 19141                           ;RTC.c: 79: strcpy(month, "MAR");
 19142  0031DE  0E3D               	movlw	low i2printRTC@month
 19143  0031E0  6E01               	movwf	i2strcpy@to,c
 19144  0031E2  0E00               	movlw	high i2printRTC@month
 19145  0031E4  6E02               	movwf	i2strcpy@to+1,c
 19146  0031E6  0EE7               	movlw	low STR_10
 19147  0031E8  6E03               	movwf	i2strcpy@from,c
 19148  0031EA  0EFF               	movlw	high STR_10
 19149  0031EC  6E04               	movwf	i2strcpy@from+1,c
 19150  0031EE  EC17  F027         	call	i2_strcpy	;wreg free
 19151                           
 19152                           ;RTC.c: 80: break;
 19153  0031F2  D090               	goto	i2l7002
 19154  0031F4                     i2l6980:
 19155                           
 19156                           ;RTC.c: 82: strcpy(month, "APR");
 19157  0031F4  0E3D               	movlw	low i2printRTC@month
 19158  0031F6  6E01               	movwf	i2strcpy@to,c
 19159  0031F8  0E00               	movlw	high i2printRTC@month
 19160  0031FA  6E02               	movwf	i2strcpy@to+1,c
 19161  0031FC  0EEB               	movlw	low STR_11
 19162  0031FE  6E03               	movwf	i2strcpy@from,c
 19163  003200  0EFF               	movlw	high STR_11
 19164  003202  6E04               	movwf	i2strcpy@from+1,c
 19165  003204  EC17  F027         	call	i2_strcpy	;wreg free
 19166                           
 19167                           ;RTC.c: 83: break;
 19168  003208  D085               	goto	i2l7002
 19169  00320A                     i2l6982:
 19170                           
 19171                           ;RTC.c: 85: strcpy(month, "MAY");
 19172  00320A  0E3D               	movlw	low i2printRTC@month
 19173  00320C  6E01               	movwf	i2strcpy@to,c
 19174  00320E  0E00               	movlw	high i2printRTC@month
 19175  003210  6E02               	movwf	i2strcpy@to+1,c
 19176  003212  0EFB               	movlw	low STR_12
 19177  003214  6E03               	movwf	i2strcpy@from,c
 19178  003216  0EFF               	movlw	high STR_12
 19179  003218  6E04               	movwf	i2strcpy@from+1,c
 19180  00321A  EC17  F027         	call	i2_strcpy	;wreg free
 19181                           
 19182                           ;RTC.c: 86: break;
 19183  00321E  D07A               	goto	i2l7002
 19184  003220                     i2l6984:
 19185                           
 19186                           ;RTC.c: 88: strcpy(month, "JUN");
 19187  003220  0E3D               	movlw	low i2printRTC@month
 19188  003222  6E01               	movwf	i2strcpy@to,c
 19189  003224  0E00               	movlw	high i2printRTC@month
 19190  003226  6E02               	movwf	i2strcpy@to+1,c
 19191  003228  0EDF               	movlw	low STR_13
 19192  00322A  6E03               	movwf	i2strcpy@from,c
 19193  00322C  0EFF               	movlw	high STR_13
 19194  00322E  6E04               	movwf	i2strcpy@from+1,c
 19195  003230  EC17  F027         	call	i2_strcpy	;wreg free
 19196                           
 19197                           ;RTC.c: 89: break;
 19198  003234  D06F               	goto	i2l7002
 19199  003236                     i2l6986:
 19200                           
 19201                           ;RTC.c: 91: strcpy(month, "JUL");
 19202  003236  0E3D               	movlw	low i2printRTC@month
 19203  003238  6E01               	movwf	i2strcpy@to,c
 19204  00323A  0E00               	movlw	high i2printRTC@month
 19205  00323C  6E02               	movwf	i2strcpy@to+1,c
 19206  00323E  0ED7               	movlw	low STR_14
 19207  003240  6E03               	movwf	i2strcpy@from,c
 19208  003242  0EFF               	movlw	high STR_14
 19209  003244  6E04               	movwf	i2strcpy@from+1,c
 19210  003246  EC17  F027         	call	i2_strcpy	;wreg free
 19211                           
 19212                           ;RTC.c: 92: break;
 19213  00324A  D064               	goto	i2l7002
 19214  00324C                     i2l6988:
 19215                           
 19216                           ;RTC.c: 94: strcpy(month, "AUG");
 19217  00324C  0E3D               	movlw	low i2printRTC@month
 19218  00324E  6E01               	movwf	i2strcpy@to,c
 19219  003250  0E00               	movlw	high i2printRTC@month
 19220  003252  6E02               	movwf	i2strcpy@to+1,c
 19221  003254  0ED3               	movlw	low STR_15
 19222  003256  6E03               	movwf	i2strcpy@from,c
 19223  003258  0EFF               	movlw	high STR_15
 19224  00325A  6E04               	movwf	i2strcpy@from+1,c
 19225  00325C  EC17  F027         	call	i2_strcpy	;wreg free
 19226                           
 19227                           ;RTC.c: 95: break;
 19228  003260  D059               	goto	i2l7002
 19229  003262                     i2l6990:
 19230                           
 19231                           ;RTC.c: 97: strcpy(month, "SEP");
 19232  003262  0E3D               	movlw	low i2printRTC@month
 19233  003264  6E01               	movwf	i2strcpy@to,c
 19234  003266  0E00               	movlw	high i2printRTC@month
 19235  003268  6E02               	movwf	i2strcpy@to+1,c
 19236  00326A  0EE3               	movlw	low STR_16
 19237  00326C  6E03               	movwf	i2strcpy@from,c
 19238  00326E  0EFF               	movlw	high STR_16
 19239  003270  6E04               	movwf	i2strcpy@from+1,c
 19240  003272  EC17  F027         	call	i2_strcpy	;wreg free
 19241                           
 19242                           ;RTC.c: 98: break;
 19243  003276  D04E               	goto	i2l7002
 19244  003278                     i2l6992:
 19245                           
 19246                           ;RTC.c: 100: strcpy(month, "OCT");
 19247  003278  0E3D               	movlw	low i2printRTC@month
 19248  00327A  6E01               	movwf	i2strcpy@to,c
 19249  00327C  0E00               	movlw	high i2printRTC@month
 19250  00327E  6E02               	movwf	i2strcpy@to+1,c
 19251  003280  0EF3               	movlw	low STR_17
 19252  003282  6E03               	movwf	i2strcpy@from,c
 19253  003284  0EFF               	movlw	high STR_17
 19254  003286  6E04               	movwf	i2strcpy@from+1,c
 19255  003288  EC17  F027         	call	i2_strcpy	;wreg free
 19256                           
 19257                           ;RTC.c: 101: break;
 19258  00328C  D043               	goto	i2l7002
 19259  00328E                     i2l6994:
 19260                           
 19261                           ;RTC.c: 103: strcpy(month, "NOV");
 19262  00328E  0E3D               	movlw	low i2printRTC@month
 19263  003290  6E01               	movwf	i2strcpy@to,c
 19264  003292  0E00               	movlw	high i2printRTC@month
 19265  003294  6E02               	movwf	i2strcpy@to+1,c
 19266  003296  0EF7               	movlw	low STR_18
 19267  003298  6E03               	movwf	i2strcpy@from,c
 19268  00329A  0EFF               	movlw	high STR_18
 19269  00329C  6E04               	movwf	i2strcpy@from+1,c
 19270  00329E  EC17  F027         	call	i2_strcpy	;wreg free
 19271                           
 19272                           ;RTC.c: 104: break;
 19273  0032A2  D038               	goto	i2l7002
 19274  0032A4                     i2l6996:
 19275                           
 19276                           ;RTC.c: 106: strcpy(month, "DEC");
 19277  0032A4  0E3D               	movlw	low i2printRTC@month
 19278  0032A6  6E01               	movwf	i2strcpy@to,c
 19279  0032A8  0E00               	movlw	high i2printRTC@month
 19280  0032AA  6E02               	movwf	i2strcpy@to+1,c
 19281  0032AC  0ECF               	movlw	low STR_19
 19282  0032AE  6E03               	movwf	i2strcpy@from,c
 19283  0032B0  0EFF               	movlw	high STR_19
 19284  0032B2  6E04               	movwf	i2strcpy@from+1,c
 19285  0032B4  EC17  F027         	call	i2_strcpy	;wreg free
 19286                           
 19287                           ;RTC.c: 108: }
 19288                           
 19289                           ;RTC.c: 107: break;
 19290  0032B8  D02D               	goto	i2l7002
 19291  0032BA                     i2l7000:
 19292  0032BA  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19293  0032BE  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19294                           
 19295                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19296                           ; Switch size 1, requested type "space"
 19297                           ; Number of cases is 1, Range of values is 0 to 0
 19298                           ; switch strategies available:
 19299                           ; Name         Instructions Cycles
 19300                           ; simple_byte            4     3 (average)
 19301                           ;	Chosen strategy is simple_byte
 19302  0032C2  502B               	movf	??i2_printRTC+1,w,c
 19303  0032C4  0A00               	xorlw	0	; case 0
 19304  0032C6  A4D8               	btfss	status,2,c
 19305  0032C8  D025               	goto	i2l7002
 19306                           
 19307                           ; Switch size 1, requested type "space"
 19308                           ; Number of cases is 12, Range of values is 1 to 12
 19309                           ; switch strategies available:
 19310                           ; Name         Instructions Cycles
 19311                           ; simple_byte           37    19 (average)
 19312                           ;	Chosen strategy is simple_byte
 19313  0032CA  502A               	movf	??i2_printRTC,w,c
 19314  0032CC  0A01               	xorlw	1	; case 1
 19315  0032CE  B4D8               	btfsc	status,2,c
 19316  0032D0  D770               	goto	i2l6974
 19317  0032D2  0A03               	xorlw	3	; case 2
 19318  0032D4  B4D8               	btfsc	status,2,c
 19319  0032D6  D778               	goto	i2l6976
 19320  0032D8  0A01               	xorlw	1	; case 3
 19321  0032DA  B4D8               	btfsc	status,2,c
 19322  0032DC  D780               	goto	i2l6978
 19323  0032DE  0A07               	xorlw	7	; case 4
 19324  0032E0  B4D8               	btfsc	status,2,c
 19325  0032E2  D788               	goto	i2l6980
 19326  0032E4  0A01               	xorlw	1	; case 5
 19327  0032E6  B4D8               	btfsc	status,2,c
 19328  0032E8  D790               	goto	i2l6982
 19329  0032EA  0A03               	xorlw	3	; case 6
 19330  0032EC  B4D8               	btfsc	status,2,c
 19331  0032EE  D798               	goto	i2l6984
 19332  0032F0  0A01               	xorlw	1	; case 7
 19333  0032F2  B4D8               	btfsc	status,2,c
 19334  0032F4  D7A0               	goto	i2l6986
 19335  0032F6  0A0F               	xorlw	15	; case 8
 19336  0032F8  B4D8               	btfsc	status,2,c
 19337  0032FA  D7A8               	goto	i2l6988
 19338  0032FC  0A01               	xorlw	1	; case 9
 19339  0032FE  B4D8               	btfsc	status,2,c
 19340  003300  D7B0               	goto	i2l6990
 19341  003302  0A03               	xorlw	3	; case 10
 19342  003304  B4D8               	btfsc	status,2,c
 19343  003306  D7B8               	goto	i2l6992
 19344  003308  0A01               	xorlw	1	; case 11
 19345  00330A  B4D8               	btfsc	status,2,c
 19346  00330C  D7C0               	goto	i2l6994
 19347  00330E  0A07               	xorlw	7	; case 12
 19348  003310  B4D8               	btfsc	status,2,c
 19349  003312  D7C8               	goto	i2l6996
 19350  003314                     i2l7002:
 19351                           
 19352                           ;RTC.c: 109: lcdInst(0b10000000);;
 19353  003314  0E80               	movlw	128
 19354  003316  EC7B  F029         	call	i2_lcdInst
 19355                           
 19356                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19357  00331A  0E0A               	movlw	low STR_21
 19358  00331C  6E0D               	movwf	i2printf@f,c
 19359  00331E  0EFB               	movlw	high STR_21
 19360  003320  6E0E               	movwf	i2printf@f+1,c
 19361  003322  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19362  003326  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19363  00332A  0E3D               	movlw	low i2printRTC@month
 19364  00332C  6E11               	movwf	?i2_printf+4,c
 19365  00332E  0E00               	movlw	high i2printRTC@month
 19366  003330  6E12               	movwf	?i2_printf+5,c
 19367  003332  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19368  003336  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19369  00333A  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19370  00333E  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19371  003342  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19372  003346  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19373  00334A  ECE6  F00E         	call	i2_printf	;wreg free
 19374  00334E  0012               	return		;funcret
 19375  003350                     __end_ofi2_printRTC:
 19376                           	opt stack 0
 19377                           pclatu	equ	0xFFB
 19378                           pclath	equ	0xFFA
 19379                           tblptru	equ	0xFF8
 19380                           tblptrh	equ	0xFF7
 19381                           tblptrl	equ	0xFF6
 19382                           tablat	equ	0xFF5
 19383                           prodh	equ	0xFF4
 19384                           prodl	equ	0xFF3
 19385                           intcon	equ	0xFF2
 19386                           intcon2	equ	0xFF1
 19387                           intcon3	equ	0xFF0
 19388                           indf0	equ	0xFEF
 19389                           postinc0	equ	0xFEE
 19390                           fsr0h	equ	0xFEA
 19391                           fsr0l	equ	0xFE9
 19392                           wreg	equ	0xFE8
 19393                           postdec1	equ	0xFE5
 19394                           fsr1h	equ	0xFE2
 19395                           fsr1l	equ	0xFE1
 19396                           indf2	equ	0xFDF
 19397                           postinc2	equ	0xFDE
 19398                           postdec2	equ	0xFDD
 19399                           fsr2h	equ	0xFDA
 19400                           fsr2l	equ	0xFD9
 19401                           status	equ	0xFD8
 19402                           
 19403 ;; *************** function i2_strcpy *****************
 19404 ;; Defined at:
 19405 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;  to              2    0[COMRAM] PTR unsigned char 
 19408 ;;		 -> printRTC@month(4), UI@month(4), 
 19409 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19410 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19411 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19412 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19413 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19414 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19415 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19416 ;;		 -> STR_8(4), 
 19417 ;; Auto vars:     Size  Location     Type
 19418 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19419 ;;		 -> printRTC@month(4), UI@month(4), 
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  2    0[COMRAM] PTR unsigned char 
 19422 ;; Registers used:
 19423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;Total ram usage:        6 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; This function calls:
 19436 ;;		Nothing
 19437 ;; This function is called by:
 19438 ;;		i2_printRTC
 19439 ;; This function uses a non-reentrant model
 19440 ;;
 19441                           
 19442                           	psect	text65
 19443  004E2E                     __ptext65:
 19444                           	opt stack 0
 19445  004E2E                     i2_strcpy:
 19446                           	opt stack 20
 19447                           
 19448                           ;incstack = 0
 19449  004E2E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19450  004E32  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19451  004E36  D004               	goto	i2l6622
 19452  004E38                     i2l6620:
 19453  004E38  4A05               	infsnz	i2strcpy@cp,f,c
 19454  004E3A  2A06               	incf	i2strcpy@cp+1,f,c
 19455  004E3C  4A03               	infsnz	i2strcpy@from,f,c
 19456  004E3E  2A04               	incf	i2strcpy@from+1,f,c
 19457  004E40                     i2l6622:
 19458  004E40  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19459  004E44  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19460  004E48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19461  004E48  6AF8               	clrf	tblptru,c
 19462  004E4A                     	endif
 19463  004E4A                     	if	0	;tblptru may be non-zero
 19464  004E4A                     	endif
 19465  004E4A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19466  004E4E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19467  004E52  0008               	tblrd		*
 19468  004E54  CFF5 FFDF          	movff	tablat,indf2
 19469  004E58  50DF               	movf	indf2,w,c
 19470  004E5A  B4D8               	btfsc	status,2,c
 19471  004E5C  0012               	return	
 19472  004E5E  D7EC               	goto	i2l6620
 19473  004E60                     __end_ofi2_strcpy:
 19474                           	opt stack 0
 19475                           pclatu	equ	0xFFB
 19476                           pclath	equ	0xFFA
 19477                           tblptru	equ	0xFF8
 19478                           tblptrh	equ	0xFF7
 19479                           tblptrl	equ	0xFF6
 19480                           tablat	equ	0xFF5
 19481                           prodh	equ	0xFF4
 19482                           prodl	equ	0xFF3
 19483                           intcon	equ	0xFF2
 19484                           intcon2	equ	0xFF1
 19485                           intcon3	equ	0xFF0
 19486                           indf0	equ	0xFEF
 19487                           postinc0	equ	0xFEE
 19488                           fsr0h	equ	0xFEA
 19489                           fsr0l	equ	0xFE9
 19490                           wreg	equ	0xFE8
 19491                           postdec1	equ	0xFE5
 19492                           fsr1h	equ	0xFE2
 19493                           fsr1l	equ	0xFE1
 19494                           indf2	equ	0xFDF
 19495                           postinc2	equ	0xFDE
 19496                           postdec2	equ	0xFDD
 19497                           fsr2h	equ	0xFDA
 19498                           fsr2l	equ	0xFD9
 19499                           status	equ	0xFD8
 19500                           
 19501 ;; *************** function _inputHandler *****************
 19502 ;; Defined at:
 19503 ;;		line 372 in file "UI.c"
 19504 ;; Parameters:    Size  Location     Type
 19505 ;;		None
 19506 ;; Auto vars:     Size  Location     Type
 19507 ;;		None
 19508 ;; Return value:  Size  Location     Type
 19509 ;;                  2   41[COMRAM] int 
 19510 ;; Registers used:
 19511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19512 ;; Tracked objects:
 19513 ;;		On entry : 0/0
 19514 ;;		On exit  : 0/0
 19515 ;;		Unchanged: 0/0
 19516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19520 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19521 ;;Total ram usage:        4 bytes
 19522 ;; Hardware stack levels used:    1
 19523 ;; Hardware stack levels required when called:    4
 19524 ;; This function calls:
 19525 ;;		_change_state_to_logs_11
 19526 ;;		_change_state_to_logs_12
 19527 ;;		_change_state_to_logs_22
 19528 ;;		_change_state_to_logs_23
 19529 ;;		_change_state_to_logs_33
 19530 ;;		_change_state_to_logs_34
 19531 ;;		_change_state_to_menu_11
 19532 ;;		_change_state_to_menu_23
 19533 ;;		i2_change_state_to_menu_12
 19534 ;;		i2_change_state_to_menu_22
 19535 ;; This function is called by:
 19536 ;;		_updateMenu
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           	psect	text66
 19541  003350                     __ptext66:
 19542                           	opt stack 0
 19543  003350                     _inputHandler:
 19544                           	opt stack 18
 19545                           
 19546                           ;UI.c: 377: if(firstboot){
 19547                           
 19548                           ;incstack = 0
 19549  003350  0101               	movlb	1	; () banked
 19550  003352  513B               	movf	_firstboot& (0+255),w,b
 19551  003354  0101               	movlb	1	; () banked
 19552  003356  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19553  003358  B4D8               	btfsc	status,2,c
 19554  00335A  D00C               	goto	i2l7070
 19555                           
 19556                           ; BSR set to: 1
 19557                           ;UI.c: 378: change_state_to_menu_11();
 19558  00335C  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 19559                           
 19560                           ;UI.c: 379: firstboot = 0;
 19561  003360  0E00               	movlw	0
 19562  003362  0101               	movlb	1	; () banked
 19563  003364  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19564  003366  0E00               	movlw	0
 19565  003368  6F3B               	movwf	_firstboot& (0+255),b
 19566                           
 19567                           ; BSR set to: 1
 19568                           ;UI.c: 380: return 0;
 19569  00336A  0E00               	movlw	0
 19570  00336C  6E2B               	movwf	?_inputHandler+1,c
 19571  00336E  0E00               	movlw	0
 19572  003370  6E2A               	movwf	?_inputHandler,c
 19573                           
 19574                           ; BSR set to: 1
 19575  003372  0012               	return	
 19576  003374                     i2l7070:
 19577                           
 19578                           ; BSR set to: 1
 19579                           ;UI.c: 381: }
 19580                           ;UI.c: 382: if (logstate){
 19581  003374  0100               	movlb	0	; () banked
 19582  003376  51F6               	movf	_logstate& (0+255),w,b
 19583  003378  0100               	movlb	0	; () banked
 19584  00337A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19585  00337C  B4D8               	btfsc	status,2,c
 19586  00337E  D0C7               	goto	i2l7188
 19587                           
 19588                           ; BSR set to: 0
 19589                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19590  003380  0E43               	movlw	67
 19591  003382  187D               	xorwf	_input,w,c	;volatile
 19592  003384  A4D8               	btfss	status,2,c
 19593  003386  D012               	goto	i2l7088
 19594                           
 19595                           ; BSR set to: 0
 19596  003388  B281               	btfsc	3969,1,c	;volatile
 19597  00338A  D009               	goto	i2l7080
 19598  00338C  D00F               	goto	i2l7088
 19599  00338E                     i2l7078:
 19600                           
 19601                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19602  00338E  0E68               	movlw	104
 19603  003390  6E2C               	movwf	??_inputHandler& (0+255),c
 19604  003392  0EE4               	movlw	228
 19605  003394                     i2u1011_47:
 19606  003394  2EE8               	decfsz	wreg,f,c
 19607  003396  D7FE               	bra	i2u1011_47
 19608  003398  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19609  00339A  D7FC               	bra	i2u1011_47
 19610  00339C  D000               	nop2	
 19611  00339E                     i2l7080:
 19612  00339E  B281               	btfsc	3969,1,c	;volatile
 19613  0033A0  D7F6               	goto	i2l7078
 19614  0033A2                     i2l7082:
 19615                           
 19616                           ;UI.c: 387: }
 19617                           ;UI.c: 388: return 0;
 19618  0033A2  0E00               	movlw	0
 19619  0033A4  6E2B               	movwf	?_inputHandler+1,c
 19620  0033A6  0E00               	movlw	0
 19621  0033A8  6E2A               	movwf	?_inputHandler,c
 19622  0033AA  0012               	return	
 19623  0033AC                     i2l7088:
 19624                           
 19625                           ;UI.c: 390: else if (input == 'D'){
 19626  0033AC  0E44               	movlw	68
 19627  0033AE  187D               	xorwf	_input,w,c	;volatile
 19628  0033B0  A4D8               	btfss	status,2,c
 19629  0033B2  D7F7               	goto	i2l7082
 19630                           
 19631                           ;UI.c: 392: logstate = 0;
 19632  0033B4  0E00               	movlw	0
 19633  0033B6  0100               	movlb	0	; () banked
 19634  0033B8  6FF7               	movwf	(_logstate+1)& (0+255),b
 19635  0033BA  0E00               	movlw	0
 19636  0033BC  6FF6               	movwf	_logstate& (0+255),b
 19637                           
 19638                           ;UI.c: 393: switch(cur_state){
 19639  0033BE  D012               	goto	i2l7106
 19640  0033C0                     i2l7092:
 19641                           
 19642                           ;UI.c: 395: change_state_to_logs_11();
 19643  0033C0  EC08  F028         	call	_change_state_to_logs_11	;wreg free
 19644                           
 19645                           ;UI.c: 396: break;
 19646  0033C4  D7EE               	goto	i2l7082
 19647  0033C6                     i2l7094:
 19648                           
 19649                           ;UI.c: 398: change_state_to_logs_12();
 19650  0033C6  ECF0  F027         	call	_change_state_to_logs_12	;wreg free
 19651                           
 19652                           ;UI.c: 399: break;
 19653  0033CA  D7EB               	goto	i2l7082
 19654  0033CC                     i2l7096:
 19655                           
 19656                           ;UI.c: 401: change_state_to_logs_22();
 19657  0033CC  ECD8  F027         	call	_change_state_to_logs_22	;wreg free
 19658                           
 19659                           ;UI.c: 402: break;
 19660  0033D0  D7E8               	goto	i2l7082
 19661  0033D2                     i2l7098:
 19662                           
 19663                           ;UI.c: 404: change_state_to_logs_23();
 19664  0033D2  EC37  F028         	call	_change_state_to_logs_23	;wreg free
 19665                           
 19666                           ;UI.c: 405: break;
 19667  0033D6  D7E5               	goto	i2l7082
 19668  0033D8                     i2l7100:
 19669                           
 19670                           ;UI.c: 407: change_state_to_logs_33();
 19671  0033D8  ECC0  F027         	call	_change_state_to_logs_33	;wreg free
 19672                           
 19673                           ;UI.c: 408: break;
 19674  0033DC  D7E2               	goto	i2l7082
 19675  0033DE                     i2l7102:
 19676                           
 19677                           ;UI.c: 410: change_state_to_logs_34();
 19678  0033DE  ECA8  F027         	call	_change_state_to_logs_34	;wreg free
 19679                           
 19680                           ;UI.c: 412: }
 19681                           
 19682                           ;UI.c: 411: break;
 19683  0033E2  D7DF               	goto	i2l7082
 19684  0033E4                     i2l7106:
 19685  0033E4  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19686  0033E8  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19687                           
 19688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19689                           ; Switch size 1, requested type "space"
 19690                           ; Number of cases is 2, Range of values is 3 to 4
 19691                           ; switch strategies available:
 19692                           ; Name         Instructions Cycles
 19693                           ; simple_byte            7     4 (average)
 19694                           ;	Chosen strategy is simple_byte
 19695  0033EC  502D               	movf	??_inputHandler+1,w,c
 19696  0033EE  0A03               	xorlw	3	; case 3
 19697  0033F0  B4D8               	btfsc	status,2,c
 19698  0033F2  D004               	goto	i2l9966
 19699  0033F4  0A07               	xorlw	7	; case 4
 19700  0033F6  B4D8               	btfsc	status,2,c
 19701  0033F8  D00F               	goto	i2l9968
 19702  0033FA  D7D3               	goto	i2l7082
 19703  0033FC                     i2l9966:
 19704                           
 19705                           ; Switch size 1, requested type "space"
 19706                           ; Number of cases is 4, Range of values is 243 to 255
 19707                           ; switch strategies available:
 19708                           ; Name         Instructions Cycles
 19709                           ; simple_byte           13     7 (average)
 19710                           ;	Chosen strategy is simple_byte
 19711  0033FC  502C               	movf	??_inputHandler,w,c
 19712  0033FE  0AF3               	xorlw	243	; case 243
 19713  003400  B4D8               	btfsc	status,2,c
 19714  003402  D7DE               	goto	i2l7092
 19715  003404  0A07               	xorlw	7	; case 244
 19716  003406  B4D8               	btfsc	status,2,c
 19717  003408  D7DE               	goto	i2l7094
 19718  00340A  0A0A               	xorlw	10	; case 254
 19719  00340C  B4D8               	btfsc	status,2,c
 19720  00340E  D7DE               	goto	i2l7096
 19721  003410  0A01               	xorlw	1	; case 255
 19722  003412  B4D8               	btfsc	status,2,c
 19723  003414  D7DE               	goto	i2l7098
 19724  003416  D7C5               	goto	i2l7082
 19725  003418                     i2l9968:
 19726                           
 19727                           ; Switch size 1, requested type "space"
 19728                           ; Number of cases is 2, Range of values is 9 to 10
 19729                           ; switch strategies available:
 19730                           ; Name         Instructions Cycles
 19731                           ; simple_byte            7     4 (average)
 19732                           ;	Chosen strategy is simple_byte
 19733  003418  502C               	movf	??_inputHandler,w,c
 19734  00341A  0A09               	xorlw	9	; case 9
 19735  00341C  B4D8               	btfsc	status,2,c
 19736  00341E  D7DC               	goto	i2l7100
 19737  003420  0A03               	xorlw	3	; case 10
 19738  003422  B4D8               	btfsc	status,2,c
 19739  003424  D7DC               	goto	i2l7102
 19740  003426  D7BD               	goto	i2l7082
 19741  003428                     i2l7118:
 19742                           
 19743                           ;UI.c: 422: if(cur_state == 11){
 19744  003428  0E0B               	movlw	11
 19745  00342A  0100               	movlb	0	; () banked
 19746  00342C  19EC               	xorwf	_cur_state& (0+255),w,b
 19747  00342E  0100               	movlb	0	; () banked
 19748  003430  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19749  003432  A4D8               	btfss	status,2,c
 19750  003434  D005               	goto	i2l7126
 19751                           
 19752                           ; BSR set to: 0
 19753                           ;UI.c: 423: return 0;
 19754  003436  0E00               	movlw	0
 19755  003438  6E2B               	movwf	?_inputHandler+1,c
 19756  00343A  0E00               	movlw	0
 19757  00343C  6E2A               	movwf	?_inputHandler,c
 19758                           
 19759                           ; BSR set to: 0
 19760  00343E  0012               	return	
 19761  003440                     i2l7126:
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;UI.c: 425: else{
 19765                           ;UI.c: 426: change_state_to_menu_11();
 19766  003440  EC90  F027         	call	_change_state_to_menu_11	;wreg free
 19767                           
 19768                           ;UI.c: 427: }
 19769                           ;UI.c: 428: return 0;
 19770  003444  0E00               	movlw	0
 19771  003446  6E2B               	movwf	?_inputHandler+1,c
 19772  003448  0E00               	movlw	0
 19773  00344A  6E2A               	movwf	?_inputHandler,c
 19774  00344C  0012               	return	
 19775  00344E                     i2l7132:
 19776                           
 19777                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19778  00344E  0E16               	movlw	22
 19779  003450  0100               	movlb	0	; () banked
 19780  003452  19EC               	xorwf	_cur_state& (0+255),w,b
 19781  003454  0100               	movlb	0	; () banked
 19782  003456  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19783  003458  B4D8               	btfsc	status,2,c
 19784  00345A  D007               	goto	i2l7136
 19785                           
 19786                           ; BSR set to: 0
 19787  00345C  0E0C               	movlw	12
 19788  00345E  0100               	movlb	0	; () banked
 19789  003460  19EC               	xorwf	_cur_state& (0+255),w,b
 19790  003462  0100               	movlb	0	; () banked
 19791  003464  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19792  003466  A4D8               	btfss	status,2,c
 19793  003468  D005               	goto	i2l7142
 19794  00346A                     i2l7136:
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;UI.c: 431: return 0;
 19798  00346A  0E00               	movlw	0
 19799  00346C  6E2B               	movwf	?_inputHandler+1,c
 19800  00346E  0E00               	movlw	0
 19801  003470  6E2A               	movwf	?_inputHandler,c
 19802                           
 19803                           ; BSR set to: 0
 19804  003472  0012               	return	
 19805  003474                     i2l7142:
 19806                           
 19807                           ; BSR set to: 0
 19808                           ;UI.c: 433: else if(cur_state == 23){
 19809  003474  0E17               	movlw	23
 19810  003476  0100               	movlb	0	; () banked
 19811  003478  19EC               	xorwf	_cur_state& (0+255),w,b
 19812  00347A  0100               	movlb	0	; () banked
 19813  00347C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19814  00347E  A4D8               	btfss	status,2,c
 19815  003480  D003               	goto	i2l7146
 19816                           
 19817                           ; BSR set to: 0
 19818                           ;UI.c: 434: change_state_to_menu_22();
 19819  003482  EC48  F027         	call	i2_change_state_to_menu_22	;wreg free
 19820                           
 19821                           ;UI.c: 435: }
 19822  003486  D002               	goto	i2l7148
 19823  003488                     i2l7146:
 19824                           
 19825                           ;UI.c: 436: else{
 19826                           ;UI.c: 437: change_state_to_menu_12();
 19827  003488  EC60  F027         	call	i2_change_state_to_menu_12	;wreg free
 19828  00348C                     i2l7148:
 19829                           
 19830                           ;UI.c: 438: }
 19831                           ;UI.c: 439: return 0;
 19832  00348C  0E00               	movlw	0
 19833  00348E  6E2B               	movwf	?_inputHandler+1,c
 19834  003490  0E00               	movlw	0
 19835  003492  6E2A               	movwf	?_inputHandler,c
 19836  003494  0012               	return	
 19837  003496                     i2l7152:
 19838                           
 19839                           ;UI.c: 441: if(cur_state == 23){
 19840  003496  0E17               	movlw	23
 19841  003498  0100               	movlb	0	; () banked
 19842  00349A  19EC               	xorwf	_cur_state& (0+255),w,b
 19843  00349C  0100               	movlb	0	; () banked
 19844  00349E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19845  0034A0  A4D8               	btfss	status,2,c
 19846  0034A2  D005               	goto	i2l7160
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;UI.c: 442: return 0;
 19850  0034A4  0E00               	movlw	0
 19851  0034A6  6E2B               	movwf	?_inputHandler+1,c
 19852  0034A8  0E00               	movlw	0
 19853  0034AA  6E2A               	movwf	?_inputHandler,c
 19854                           
 19855                           ; BSR set to: 0
 19856  0034AC  0012               	return	
 19857  0034AE                     i2l7160:
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;UI.c: 444: else{
 19861                           ;UI.c: 445: change_state_to_menu_23();
 19862  0034AE  EC78  F027         	call	_change_state_to_menu_23	;wreg free
 19863                           
 19864                           ;UI.c: 446: }
 19865                           ;UI.c: 447: return 0;
 19866  0034B2  0E00               	movlw	0
 19867  0034B4  6E2B               	movwf	?_inputHandler+1,c
 19868  0034B6  0E00               	movlw	0
 19869  0034B8  6E2A               	movwf	?_inputHandler,c
 19870  0034BA  0012               	return	
 19871  0034BC                     i2l7166:
 19872                           
 19873                           ;UI.c: 450: up = 1;
 19874  0034BC  0E00               	movlw	0
 19875  0034BE  6E78               	movwf	_up+1,c
 19876  0034C0  0E01               	movlw	1
 19877  0034C2  6E77               	movwf	_up,c
 19878                           
 19879                           ;UI.c: 451: return 1;
 19880  0034C4  0E00               	movlw	0
 19881  0034C6  6E2B               	movwf	?_inputHandler+1,c
 19882  0034C8  0E01               	movlw	1
 19883  0034CA  6E2A               	movwf	?_inputHandler,c
 19884  0034CC  0012               	return	
 19885  0034CE                     i2l7170:
 19886                           
 19887                           ;UI.c: 453: down = 1;
 19888  0034CE  0E00               	movlw	0
 19889  0034D0  6E5E               	movwf	_down+1,c
 19890  0034D2  0E01               	movlw	1
 19891  0034D4  6E5D               	movwf	_down,c
 19892                           
 19893                           ;UI.c: 454: return 1;
 19894  0034D6  0E00               	movlw	0
 19895  0034D8  6E2B               	movwf	?_inputHandler+1,c
 19896  0034DA  0E01               	movlw	1
 19897  0034DC  6E2A               	movwf	?_inputHandler,c
 19898  0034DE  0012               	return	
 19899  0034E0                     i2l7174:
 19900                           
 19901                           ;UI.c: 456: enter = 1;
 19902  0034E0  0E00               	movlw	0
 19903  0034E2  6E60               	movwf	_enter+1,c
 19904  0034E4  0E01               	movlw	1
 19905  0034E6  6E5F               	movwf	_enter,c
 19906                           
 19907                           ;UI.c: 457: return 1;
 19908  0034E8  0E00               	movlw	0
 19909  0034EA  6E2B               	movwf	?_inputHandler+1,c
 19910  0034EC  0E01               	movlw	1
 19911  0034EE  6E2A               	movwf	?_inputHandler,c
 19912  0034F0  0012               	return	
 19913  0034F2                     i2l7178:
 19914                           
 19915                           ;UI.c: 459: back = 1;
 19916  0034F2  0E00               	movlw	0
 19917  0034F4  6E5C               	movwf	_back+1,c
 19918  0034F6  0E01               	movlw	1
 19919  0034F8  6E5B               	movwf	_back,c
 19920                           
 19921                           ;UI.c: 460: return 1;
 19922  0034FA  0E00               	movlw	0
 19923  0034FC  6E2B               	movwf	?_inputHandler+1,c
 19924  0034FE  0E01               	movlw	1
 19925  003500  6E2A               	movwf	?_inputHandler,c
 19926  003502  0012               	return	
 19927  003504                     i2l7182:
 19928                           
 19929                           ;UI.c: 463: return 1;
 19930  003504  0E00               	movlw	0
 19931  003506  6E2B               	movwf	?_inputHandler+1,c
 19932  003508  0E01               	movlw	1
 19933  00350A  6E2A               	movwf	?_inputHandler,c
 19934                           
 19935                           ;UI.c: 464: }
 19936  00350C  0012               	return	
 19937  00350E                     i2l7188:
 19938  00350E  507D               	movf	_input,w,c	;volatile
 19939                           
 19940                           ; Switch size 1, requested type "space"
 19941                           ; Number of cases is 7, Range of values is 49 to 68
 19942                           ; switch strategies available:
 19943                           ; Name         Instructions Cycles
 19944                           ; simple_byte           22    12 (average)
 19945                           ;	Chosen strategy is simple_byte
 19946  003510  0A31               	xorlw	49	; case 49
 19947  003512  B4D8               	btfsc	status,2,c
 19948  003514  D789               	goto	i2l7118
 19949  003516  0A03               	xorlw	3	; case 50
 19950  003518  B4D8               	btfsc	status,2,c
 19951  00351A  D799               	goto	i2l7132
 19952  00351C  0A01               	xorlw	1	; case 51
 19953  00351E  B4D8               	btfsc	status,2,c
 19954  003520  D7BA               	goto	i2l7152
 19955  003522  0A72               	xorlw	114	; case 65
 19956  003524  B4D8               	btfsc	status,2,c
 19957  003526  D7CA               	goto	i2l7166
 19958  003528  0A03               	xorlw	3	; case 66
 19959  00352A  B4D8               	btfsc	status,2,c
 19960  00352C  D7D0               	goto	i2l7170
 19961  00352E  0A01               	xorlw	1	; case 67
 19962  003530  B4D8               	btfsc	status,2,c
 19963  003532  D7D6               	goto	i2l7174
 19964  003534  0A07               	xorlw	7	; case 68
 19965  003536  B4D8               	btfsc	status,2,c
 19966  003538  D7DC               	goto	i2l7178
 19967  00353A  D7E4               	goto	i2l7182
 19968  00353C                     __end_of_inputHandler:
 19969                           	opt stack 0
 19970                           pclatu	equ	0xFFB
 19971                           pclath	equ	0xFFA
 19972                           tblptru	equ	0xFF8
 19973                           tblptrh	equ	0xFF7
 19974                           tblptrl	equ	0xFF6
 19975                           tablat	equ	0xFF5
 19976                           prodh	equ	0xFF4
 19977                           prodl	equ	0xFF3
 19978                           intcon	equ	0xFF2
 19979                           intcon2	equ	0xFF1
 19980                           intcon3	equ	0xFF0
 19981                           indf0	equ	0xFEF
 19982                           postinc0	equ	0xFEE
 19983                           fsr0h	equ	0xFEA
 19984                           fsr0l	equ	0xFE9
 19985                           wreg	equ	0xFE8
 19986                           postdec1	equ	0xFE5
 19987                           fsr1h	equ	0xFE2
 19988                           fsr1l	equ	0xFE1
 19989                           indf2	equ	0xFDF
 19990                           postinc2	equ	0xFDE
 19991                           postdec2	equ	0xFDD
 19992                           fsr2h	equ	0xFDA
 19993                           fsr2l	equ	0xFD9
 19994                           status	equ	0xFD8
 19995                           
 19996 ;; *************** function i2_change_state_to_menu_22 *****************
 19997 ;; Defined at:
 19998 ;;		line 498 in file "UI.c"
 19999 ;; Parameters:    Size  Location     Type
 20000 ;;		None
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;		None
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20016 ;;Total ram usage:        0 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; Hardware stack levels required when called:    3
 20019 ;; This function calls:
 20020 ;;		i2_lcdInst
 20021 ;;		i2_printf
 20022 ;; This function is called by:
 20023 ;;		_updateMenu
 20024 ;;		_inputHandler
 20025 ;; This function uses a non-reentrant model
 20026 ;;
 20027                           
 20028                           	psect	text67
 20029  004E90                     __ptext67:
 20030                           	opt stack 0
 20031  004E90                     i2_change_state_to_menu_22:
 20032                           	opt stack 19
 20033                           
 20034                           ;UI.c: 499: cur_state = 22;
 20035                           
 20036                           ;incstack = 0
 20037  004E90  0E00               	movlw	0
 20038  004E92  0100               	movlb	0	; () banked
 20039  004E94  6FED               	movwf	(_cur_state+1)& (0+255),b
 20040  004E96  0E16               	movlw	22
 20041  004E98  6FEC               	movwf	_cur_state& (0+255),b
 20042                           
 20043                           ; BSR set to: 0
 20044                           ;UI.c: 501: lcdInst(0b10000000);;
 20045  004E9A  0E80               	movlw	128
 20046  004E9C  EC7B  F029         	call	i2_lcdInst
 20047                           
 20048                           ;UI.c: 502: printf("2. SORT        <");
 20049  004EA0  0EC4               	movlw	low STR_34
 20050  004EA2  6E0D               	movwf	i2printf@f,c
 20051  004EA4  0EFD               	movlw	high STR_34
 20052  004EA6  6E0E               	movwf	i2printf@f+1,c
 20053  004EA8  ECE6  F00E         	call	i2_printf	;wreg free
 20054                           
 20055                           ;UI.c: 503: lcdInst(0b11000000);;
 20056  004EAC  0EC0               	movlw	192
 20057  004EAE  EC7B  F029         	call	i2_lcdInst
 20058                           
 20059                           ;UI.c: 504: printf("3. LOGS         ");
 20060  004EB2  0E09               	movlw	low STR_36
 20061  004EB4  6E0D               	movwf	i2printf@f,c
 20062  004EB6  0EFD               	movlw	high STR_36
 20063  004EB8  6E0E               	movwf	i2printf@f+1,c
 20064  004EBA  ECE6  F00E         	call	i2_printf	;wreg free
 20065  004EBE  0012               	return		;funcret
 20066  004EC0                     __end_ofi2_change_state_to_menu_22:
 20067                           	opt stack 0
 20068                           pclatu	equ	0xFFB
 20069                           pclath	equ	0xFFA
 20070                           tblptru	equ	0xFF8
 20071                           tblptrh	equ	0xFF7
 20072                           tblptrl	equ	0xFF6
 20073                           tablat	equ	0xFF5
 20074                           prodh	equ	0xFF4
 20075                           prodl	equ	0xFF3
 20076                           intcon	equ	0xFF2
 20077                           intcon2	equ	0xFF1
 20078                           intcon3	equ	0xFF0
 20079                           indf0	equ	0xFEF
 20080                           postinc0	equ	0xFEE
 20081                           fsr0h	equ	0xFEA
 20082                           fsr0l	equ	0xFE9
 20083                           wreg	equ	0xFE8
 20084                           postdec1	equ	0xFE5
 20085                           fsr1h	equ	0xFE2
 20086                           fsr1l	equ	0xFE1
 20087                           indf2	equ	0xFDF
 20088                           postinc2	equ	0xFDE
 20089                           postdec2	equ	0xFDD
 20090                           fsr2h	equ	0xFDA
 20091                           fsr2l	equ	0xFD9
 20092                           status	equ	0xFD8
 20093                           
 20094 ;; *************** function i2_change_state_to_menu_12 *****************
 20095 ;; Defined at:
 20096 ;;		line 490 in file "UI.c"
 20097 ;; Parameters:    Size  Location     Type
 20098 ;;		None
 20099 ;; Auto vars:     Size  Location     Type
 20100 ;;		None
 20101 ;; Return value:  Size  Location     Type
 20102 ;;                  1    wreg      void 
 20103 ;; Registers used:
 20104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20105 ;; Tracked objects:
 20106 ;;		On entry : 0/0
 20107 ;;		On exit  : 0/0
 20108 ;;		Unchanged: 0/0
 20109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20114 ;;Total ram usage:        0 bytes
 20115 ;; Hardware stack levels used:    1
 20116 ;; Hardware stack levels required when called:    3
 20117 ;; This function calls:
 20118 ;;		i2_lcdInst
 20119 ;;		i2_printf
 20120 ;; This function is called by:
 20121 ;;		_updateMenu
 20122 ;;		_inputHandler
 20123 ;; This function uses a non-reentrant model
 20124 ;;
 20125                           
 20126                           	psect	text68
 20127  004EC0                     __ptext68:
 20128                           	opt stack 0
 20129  004EC0                     i2_change_state_to_menu_12:
 20130                           	opt stack 19
 20131                           
 20132                           ;UI.c: 491: cur_state = 12;
 20133                           
 20134                           ;incstack = 0
 20135  004EC0  0E00               	movlw	0
 20136  004EC2  0100               	movlb	0	; () banked
 20137  004EC4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20138  004EC6  0E0C               	movlw	12
 20139  004EC8  6FEC               	movwf	_cur_state& (0+255),b
 20140                           
 20141                           ; BSR set to: 0
 20142                           ;UI.c: 493: lcdInst(0b10000000);;
 20143  004ECA  0E80               	movlw	128
 20144  004ECC  EC7B  F029         	call	i2_lcdInst
 20145                           
 20146                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20147  004ED0  0E2B               	movlw	low STR_33
 20148  004ED2  6E0D               	movwf	i2printf@f,c
 20149  004ED4  0EFD               	movlw	high STR_33
 20150  004ED6  6E0E               	movwf	i2printf@f+1,c
 20151  004ED8  ECE6  F00E         	call	i2_printf	;wreg free
 20152                           
 20153                           ;UI.c: 495: lcdInst(0b11000000);;
 20154  004EDC  0EC0               	movlw	192
 20155  004EDE  EC7B  F029         	call	i2_lcdInst
 20156                           
 20157                           ;UI.c: 496: printf("2. SORT        <");
 20158  004EE2  0EC4               	movlw	low STR_34
 20159  004EE4  6E0D               	movwf	i2printf@f,c
 20160  004EE6  0EFD               	movlw	high STR_34
 20161  004EE8  6E0E               	movwf	i2printf@f+1,c
 20162  004EEA  ECE6  F00E         	call	i2_printf	;wreg free
 20163  004EEE  0012               	return		;funcret
 20164  004EF0                     __end_ofi2_change_state_to_menu_12:
 20165                           	opt stack 0
 20166                           pclatu	equ	0xFFB
 20167                           pclath	equ	0xFFA
 20168                           tblptru	equ	0xFF8
 20169                           tblptrh	equ	0xFF7
 20170                           tblptrl	equ	0xFF6
 20171                           tablat	equ	0xFF5
 20172                           prodh	equ	0xFF4
 20173                           prodl	equ	0xFF3
 20174                           intcon	equ	0xFF2
 20175                           intcon2	equ	0xFF1
 20176                           intcon3	equ	0xFF0
 20177                           indf0	equ	0xFEF
 20178                           postinc0	equ	0xFEE
 20179                           fsr0h	equ	0xFEA
 20180                           fsr0l	equ	0xFE9
 20181                           wreg	equ	0xFE8
 20182                           postdec1	equ	0xFE5
 20183                           fsr1h	equ	0xFE2
 20184                           fsr1l	equ	0xFE1
 20185                           indf2	equ	0xFDF
 20186                           postinc2	equ	0xFDE
 20187                           postdec2	equ	0xFDD
 20188                           fsr2h	equ	0xFDA
 20189                           fsr2l	equ	0xFD9
 20190                           status	equ	0xFD8
 20191                           
 20192 ;; *************** function _change_state_to_menu_23 *****************
 20193 ;; Defined at:
 20194 ;;		line 506 in file "UI.c"
 20195 ;; Parameters:    Size  Location     Type
 20196 ;;		None
 20197 ;; Auto vars:     Size  Location     Type
 20198 ;;		None
 20199 ;; Return value:  Size  Location     Type
 20200 ;;                  1    wreg      void 
 20201 ;; Registers used:
 20202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20203 ;; Tracked objects:
 20204 ;;		On entry : 0/0
 20205 ;;		On exit  : 0/0
 20206 ;;		Unchanged: 0/0
 20207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20212 ;;Total ram usage:        0 bytes
 20213 ;; Hardware stack levels used:    1
 20214 ;; Hardware stack levels required when called:    3
 20215 ;; This function calls:
 20216 ;;		i2_lcdInst
 20217 ;;		i2_printf
 20218 ;; This function is called by:
 20219 ;;		_updateMenu
 20220 ;;		_inputHandler
 20221 ;; This function uses a non-reentrant model
 20222 ;;
 20223                           
 20224                           	psect	text69
 20225  004EF0                     __ptext69:
 20226                           	opt stack 0
 20227  004EF0                     _change_state_to_menu_23:
 20228                           	opt stack 18
 20229                           
 20230                           ;UI.c: 507: cur_state = 23;
 20231                           
 20232                           ;incstack = 0
 20233  004EF0  0E00               	movlw	0
 20234  004EF2  0100               	movlb	0	; () banked
 20235  004EF4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20236  004EF6  0E17               	movlw	23
 20237  004EF8  6FEC               	movwf	_cur_state& (0+255),b
 20238                           
 20239                           ; BSR set to: 0
 20240                           ;UI.c: 509: lcdInst(0b10000000);;
 20241  004EFA  0E80               	movlw	128
 20242  004EFC  EC7B  F029         	call	i2_lcdInst
 20243                           
 20244                           ;UI.c: 510: printf("2. SORT         ");
 20245  004F00  0E1A               	movlw	low STR_32
 20246  004F02  6E0D               	movwf	i2printf@f,c
 20247  004F04  0EFD               	movlw	high STR_32
 20248  004F06  6E0E               	movwf	i2printf@f+1,c
 20249  004F08  ECE6  F00E         	call	i2_printf	;wreg free
 20250                           
 20251                           ;UI.c: 511: lcdInst(0b11000000);;
 20252  004F0C  0EC0               	movlw	192
 20253  004F0E  EC7B  F029         	call	i2_lcdInst
 20254                           
 20255                           ;UI.c: 512: printf("3. LOGS        <");
 20256  004F12  0EB3               	movlw	low STR_38
 20257  004F14  6E0D               	movwf	i2printf@f,c
 20258  004F16  0EFD               	movlw	high STR_38
 20259  004F18  6E0E               	movwf	i2printf@f+1,c
 20260  004F1A  ECE6  F00E         	call	i2_printf	;wreg free
 20261  004F1E  0012               	return		;funcret
 20262  004F20                     __end_of_change_state_to_menu_23:
 20263                           	opt stack 0
 20264                           pclatu	equ	0xFFB
 20265                           pclath	equ	0xFFA
 20266                           tblptru	equ	0xFF8
 20267                           tblptrh	equ	0xFF7
 20268                           tblptrl	equ	0xFF6
 20269                           tablat	equ	0xFF5
 20270                           prodh	equ	0xFF4
 20271                           prodl	equ	0xFF3
 20272                           intcon	equ	0xFF2
 20273                           intcon2	equ	0xFF1
 20274                           intcon3	equ	0xFF0
 20275                           indf0	equ	0xFEF
 20276                           postinc0	equ	0xFEE
 20277                           fsr0h	equ	0xFEA
 20278                           fsr0l	equ	0xFE9
 20279                           wreg	equ	0xFE8
 20280                           postdec1	equ	0xFE5
 20281                           fsr1h	equ	0xFE2
 20282                           fsr1l	equ	0xFE1
 20283                           indf2	equ	0xFDF
 20284                           postinc2	equ	0xFDE
 20285                           postdec2	equ	0xFDD
 20286                           fsr2h	equ	0xFDA
 20287                           fsr2l	equ	0xFD9
 20288                           status	equ	0xFD8
 20289                           
 20290 ;; *************** function _change_state_to_menu_11 *****************
 20291 ;; Defined at:
 20292 ;;		line 482 in file "UI.c"
 20293 ;; Parameters:    Size  Location     Type
 20294 ;;		None
 20295 ;; Auto vars:     Size  Location     Type
 20296 ;;		None
 20297 ;; Return value:  Size  Location     Type
 20298 ;;                  1    wreg      void 
 20299 ;; Registers used:
 20300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20301 ;; Tracked objects:
 20302 ;;		On entry : 0/0
 20303 ;;		On exit  : 0/0
 20304 ;;		Unchanged: 0/0
 20305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20310 ;;Total ram usage:        0 bytes
 20311 ;; Hardware stack levels used:    1
 20312 ;; Hardware stack levels required when called:    3
 20313 ;; This function calls:
 20314 ;;		i2_lcdInst
 20315 ;;		i2_printf
 20316 ;; This function is called by:
 20317 ;;		_updateMenu
 20318 ;;		_inputHandler
 20319 ;; This function uses a non-reentrant model
 20320 ;;
 20321                           
 20322                           	psect	text70
 20323  004F20                     __ptext70:
 20324                           	opt stack 0
 20325  004F20                     _change_state_to_menu_11:
 20326                           	opt stack 18
 20327                           
 20328                           ;UI.c: 483: cur_state = 11;
 20329                           
 20330                           ;incstack = 0
 20331  004F20  0E00               	movlw	0
 20332  004F22  0100               	movlb	0	; () banked
 20333  004F24  6FED               	movwf	(_cur_state+1)& (0+255),b
 20334  004F26  0E0B               	movlw	11
 20335  004F28  6FEC               	movwf	_cur_state& (0+255),b
 20336                           
 20337                           ; BSR set to: 0
 20338                           ;UI.c: 485: lcdInst(0b10000000);;
 20339  004F2A  0E80               	movlw	128
 20340  004F2C  EC7B  F029         	call	i2_lcdInst
 20341                           
 20342                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20343  004F30  0ED5               	movlw	low STR_31
 20344  004F32  6E0D               	movwf	i2printf@f,c
 20345  004F34  0EFD               	movlw	high STR_31
 20346  004F36  6E0E               	movwf	i2printf@f+1,c
 20347  004F38  ECE6  F00E         	call	i2_printf	;wreg free
 20348                           
 20349                           ;UI.c: 487: lcdInst(0b11000000);;
 20350  004F3C  0EC0               	movlw	192
 20351  004F3E  EC7B  F029         	call	i2_lcdInst
 20352                           
 20353                           ;UI.c: 488: printf("2. SORT         ");
 20354  004F42  0E1A               	movlw	low STR_32
 20355  004F44  6E0D               	movwf	i2printf@f,c
 20356  004F46  0EFD               	movlw	high STR_32
 20357  004F48  6E0E               	movwf	i2printf@f+1,c
 20358  004F4A  ECE6  F00E         	call	i2_printf	;wreg free
 20359  004F4E  0012               	return		;funcret
 20360  004F50                     __end_of_change_state_to_menu_11:
 20361                           	opt stack 0
 20362                           pclatu	equ	0xFFB
 20363                           pclath	equ	0xFFA
 20364                           tblptru	equ	0xFF8
 20365                           tblptrh	equ	0xFF7
 20366                           tblptrl	equ	0xFF6
 20367                           tablat	equ	0xFF5
 20368                           prodh	equ	0xFF4
 20369                           prodl	equ	0xFF3
 20370                           intcon	equ	0xFF2
 20371                           intcon2	equ	0xFF1
 20372                           intcon3	equ	0xFF0
 20373                           indf0	equ	0xFEF
 20374                           postinc0	equ	0xFEE
 20375                           fsr0h	equ	0xFEA
 20376                           fsr0l	equ	0xFE9
 20377                           wreg	equ	0xFE8
 20378                           postdec1	equ	0xFE5
 20379                           fsr1h	equ	0xFE2
 20380                           fsr1l	equ	0xFE1
 20381                           indf2	equ	0xFDF
 20382                           postinc2	equ	0xFDE
 20383                           postdec2	equ	0xFDD
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function _change_state_to_logs_34 *****************
 20389 ;; Defined at:
 20390 ;;		line 549 in file "UI.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;		None
 20393 ;; Auto vars:     Size  Location     Type
 20394 ;;		None
 20395 ;; Return value:  Size  Location     Type
 20396 ;;                  1    wreg      void 
 20397 ;; Registers used:
 20398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20399 ;; Tracked objects:
 20400 ;;		On entry : 0/0
 20401 ;;		On exit  : 0/0
 20402 ;;		Unchanged: 0/0
 20403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20408 ;;Total ram usage:        0 bytes
 20409 ;; Hardware stack levels used:    1
 20410 ;; Hardware stack levels required when called:    3
 20411 ;; This function calls:
 20412 ;;		i2_lcdInst
 20413 ;;		i2_printf
 20414 ;; This function is called by:
 20415 ;;		_updateMenu
 20416 ;;		_inputHandler
 20417 ;; This function uses a non-reentrant model
 20418 ;;
 20419                           
 20420                           	psect	text71
 20421  004F50                     __ptext71:
 20422                           	opt stack 0
 20423  004F50                     _change_state_to_logs_34:
 20424                           	opt stack 18
 20425                           
 20426                           ;UI.c: 550: cur_state = 1034;
 20427                           
 20428                           ;incstack = 0
 20429  004F50  0E04               	movlw	4
 20430  004F52  0100               	movlb	0	; () banked
 20431  004F54  6FED               	movwf	(_cur_state+1)& (0+255),b
 20432  004F56  0E0A               	movlw	10
 20433  004F58  6FEC               	movwf	_cur_state& (0+255),b
 20434                           
 20435                           ; BSR set to: 0
 20436                           ;UI.c: 551: lcdInst(0b10000000);;
 20437  004F5A  0E80               	movlw	128
 20438  004F5C  EC7B  F029         	call	i2_lcdInst
 20439                           
 20440                           ;UI.c: 552: printf("LOG 3           ");
 20441  004F60  0EE7               	movlw	low STR_44
 20442  004F62  6E0D               	movwf	i2printf@f,c
 20443  004F64  0EFC               	movlw	high STR_44
 20444  004F66  6E0E               	movwf	i2printf@f+1,c
 20445  004F68  ECE6  F00E         	call	i2_printf	;wreg free
 20446                           
 20447                           ;UI.c: 553: lcdInst(0b11000000);;
 20448  004F6C  0EC0               	movlw	192
 20449  004F6E  EC7B  F029         	call	i2_lcdInst
 20450                           
 20451                           ;UI.c: 554: printf("LOG 4          <");
 20452  004F72  0EA2               	movlw	low STR_50
 20453  004F74  6E0D               	movwf	i2printf@f,c
 20454  004F76  0EFD               	movlw	high STR_50
 20455  004F78  6E0E               	movwf	i2printf@f+1,c
 20456  004F7A  ECE6  F00E         	call	i2_printf	;wreg free
 20457  004F7E  0012               	return		;funcret
 20458  004F80                     __end_of_change_state_to_logs_34:
 20459                           	opt stack 0
 20460                           pclatu	equ	0xFFB
 20461                           pclath	equ	0xFFA
 20462                           tblptru	equ	0xFF8
 20463                           tblptrh	equ	0xFF7
 20464                           tblptrl	equ	0xFF6
 20465                           tablat	equ	0xFF5
 20466                           prodh	equ	0xFF4
 20467                           prodl	equ	0xFF3
 20468                           intcon	equ	0xFF2
 20469                           intcon2	equ	0xFF1
 20470                           intcon3	equ	0xFF0
 20471                           indf0	equ	0xFEF
 20472                           postinc0	equ	0xFEE
 20473                           fsr0h	equ	0xFEA
 20474                           fsr0l	equ	0xFE9
 20475                           wreg	equ	0xFE8
 20476                           postdec1	equ	0xFE5
 20477                           fsr1h	equ	0xFE2
 20478                           fsr1l	equ	0xFE1
 20479                           indf2	equ	0xFDF
 20480                           postinc2	equ	0xFDE
 20481                           postdec2	equ	0xFDD
 20482                           fsr2h	equ	0xFDA
 20483                           fsr2l	equ	0xFD9
 20484                           status	equ	0xFD8
 20485                           
 20486 ;; *************** function _change_state_to_logs_33 *****************
 20487 ;; Defined at:
 20488 ;;		line 542 in file "UI.c"
 20489 ;; Parameters:    Size  Location     Type
 20490 ;;		None
 20491 ;; Auto vars:     Size  Location     Type
 20492 ;;		None
 20493 ;; Return value:  Size  Location     Type
 20494 ;;                  1    wreg      void 
 20495 ;; Registers used:
 20496 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20497 ;; Tracked objects:
 20498 ;;		On entry : 0/0
 20499 ;;		On exit  : 0/0
 20500 ;;		Unchanged: 0/0
 20501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20506 ;;Total ram usage:        0 bytes
 20507 ;; Hardware stack levels used:    1
 20508 ;; Hardware stack levels required when called:    3
 20509 ;; This function calls:
 20510 ;;		i2_lcdInst
 20511 ;;		i2_printf
 20512 ;; This function is called by:
 20513 ;;		_updateMenu
 20514 ;;		_inputHandler
 20515 ;; This function uses a non-reentrant model
 20516 ;;
 20517                           
 20518                           	psect	text72
 20519  004F80                     __ptext72:
 20520                           	opt stack 0
 20521  004F80                     _change_state_to_logs_33:
 20522                           	opt stack 18
 20523                           
 20524                           ;UI.c: 543: cur_state = 1033;
 20525                           
 20526                           ;incstack = 0
 20527  004F80  0E04               	movlw	4
 20528  004F82  0100               	movlb	0	; () banked
 20529  004F84  6FED               	movwf	(_cur_state+1)& (0+255),b
 20530  004F86  0E09               	movlw	9
 20531  004F88  6FEC               	movwf	_cur_state& (0+255),b
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;UI.c: 544: lcdInst(0b10000000);;
 20535  004F8A  0E80               	movlw	128
 20536  004F8C  EC7B  F029         	call	i2_lcdInst
 20537                           
 20538                           ;UI.c: 545: printf("LOG 3          <");
 20539  004F90  0E91               	movlw	low STR_46
 20540  004F92  6E0D               	movwf	i2printf@f,c
 20541  004F94  0EFD               	movlw	high STR_46
 20542  004F96  6E0E               	movwf	i2printf@f+1,c
 20543  004F98  ECE6  F00E         	call	i2_printf	;wreg free
 20544                           
 20545                           ;UI.c: 546: lcdInst(0b11000000);;
 20546  004F9C  0EC0               	movlw	192
 20547  004F9E  EC7B  F029         	call	i2_lcdInst
 20548                           
 20549                           ;UI.c: 547: printf("LOG 4           ");
 20550  004FA2  0EF8               	movlw	low STR_48
 20551  004FA4  6E0D               	movwf	i2printf@f,c
 20552  004FA6  0EFC               	movlw	high STR_48
 20553  004FA8  6E0E               	movwf	i2printf@f+1,c
 20554  004FAA  ECE6  F00E         	call	i2_printf	;wreg free
 20555  004FAE  0012               	return		;funcret
 20556  004FB0                     __end_of_change_state_to_logs_33:
 20557                           	opt stack 0
 20558                           pclatu	equ	0xFFB
 20559                           pclath	equ	0xFFA
 20560                           tblptru	equ	0xFF8
 20561                           tblptrh	equ	0xFF7
 20562                           tblptrl	equ	0xFF6
 20563                           tablat	equ	0xFF5
 20564                           prodh	equ	0xFF4
 20565                           prodl	equ	0xFF3
 20566                           intcon	equ	0xFF2
 20567                           intcon2	equ	0xFF1
 20568                           intcon3	equ	0xFF0
 20569                           indf0	equ	0xFEF
 20570                           postinc0	equ	0xFEE
 20571                           fsr0h	equ	0xFEA
 20572                           fsr0l	equ	0xFE9
 20573                           wreg	equ	0xFE8
 20574                           postdec1	equ	0xFE5
 20575                           fsr1h	equ	0xFE2
 20576                           fsr1l	equ	0xFE1
 20577                           indf2	equ	0xFDF
 20578                           postinc2	equ	0xFDE
 20579                           postdec2	equ	0xFDD
 20580                           fsr2h	equ	0xFDA
 20581                           fsr2l	equ	0xFD9
 20582                           status	equ	0xFD8
 20583                           
 20584 ;; *************** function _change_state_to_logs_23 *****************
 20585 ;; Defined at:
 20586 ;;		line 535 in file "UI.c"
 20587 ;; Parameters:    Size  Location     Type
 20588 ;;		None
 20589 ;; Auto vars:     Size  Location     Type
 20590 ;;		None
 20591 ;; Return value:  Size  Location     Type
 20592 ;;                  1    wreg      void 
 20593 ;; Registers used:
 20594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20595 ;; Tracked objects:
 20596 ;;		On entry : 0/0
 20597 ;;		On exit  : 0/0
 20598 ;;		Unchanged: 0/0
 20599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20604 ;;Total ram usage:        0 bytes
 20605 ;; Hardware stack levels used:    1
 20606 ;; Hardware stack levels required when called:    3
 20607 ;; This function calls:
 20608 ;;		i2_lcdInst
 20609 ;;		i2_printf
 20610 ;; This function is called by:
 20611 ;;		_updateMenu
 20612 ;;		_inputHandler
 20613 ;; This function uses a non-reentrant model
 20614 ;;
 20615                           
 20616                           	psect	text73
 20617  00506E                     __ptext73:
 20618                           	opt stack 0
 20619  00506E                     _change_state_to_logs_23:
 20620                           	opt stack 18
 20621                           
 20622                           ;UI.c: 536: cur_state = 1023;
 20623                           
 20624                           ;incstack = 0
 20625  00506E  0E03               	movlw	3
 20626  005070  0100               	movlb	0	; () banked
 20627  005072  6FED               	movwf	(_cur_state+1)& (0+255),b
 20628  005074  69EC               	setf	_cur_state& (0+255),b
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;UI.c: 537: lcdInst(0b10000000);;
 20632  005076  0E80               	movlw	128
 20633  005078  EC7B  F029         	call	i2_lcdInst
 20634                           
 20635                           ;UI.c: 538: printf("LOG 2           ");
 20636  00507C  0ED6               	movlw	low STR_40
 20637  00507E  6E0D               	movwf	i2printf@f,c
 20638  005080  0EFC               	movlw	high STR_40
 20639  005082  6E0E               	movwf	i2printf@f+1,c
 20640  005084  ECE6  F00E         	call	i2_printf	;wreg free
 20641                           
 20642                           ;UI.c: 539: lcdInst(0b11000000);;
 20643  005088  0EC0               	movlw	192
 20644  00508A  EC7B  F029         	call	i2_lcdInst
 20645                           
 20646                           ;UI.c: 540: printf("LOG 3          <");
 20647  00508E  0E91               	movlw	low STR_46
 20648  005090  6E0D               	movwf	i2printf@f,c
 20649  005092  0EFD               	movlw	high STR_46
 20650  005094  6E0E               	movwf	i2printf@f+1,c
 20651  005096  ECE6  F00E         	call	i2_printf	;wreg free
 20652  00509A  0012               	return		;funcret
 20653  00509C                     __end_of_change_state_to_logs_23:
 20654                           	opt stack 0
 20655                           pclatu	equ	0xFFB
 20656                           pclath	equ	0xFFA
 20657                           tblptru	equ	0xFF8
 20658                           tblptrh	equ	0xFF7
 20659                           tblptrl	equ	0xFF6
 20660                           tablat	equ	0xFF5
 20661                           prodh	equ	0xFF4
 20662                           prodl	equ	0xFF3
 20663                           intcon	equ	0xFF2
 20664                           intcon2	equ	0xFF1
 20665                           intcon3	equ	0xFF0
 20666                           indf0	equ	0xFEF
 20667                           postinc0	equ	0xFEE
 20668                           fsr0h	equ	0xFEA
 20669                           fsr0l	equ	0xFE9
 20670                           wreg	equ	0xFE8
 20671                           postdec1	equ	0xFE5
 20672                           fsr1h	equ	0xFE2
 20673                           fsr1l	equ	0xFE1
 20674                           indf2	equ	0xFDF
 20675                           postinc2	equ	0xFDE
 20676                           postdec2	equ	0xFDD
 20677                           fsr2h	equ	0xFDA
 20678                           fsr2l	equ	0xFD9
 20679                           status	equ	0xFD8
 20680                           
 20681 ;; *************** function _change_state_to_logs_22 *****************
 20682 ;; Defined at:
 20683 ;;		line 528 in file "UI.c"
 20684 ;; Parameters:    Size  Location     Type
 20685 ;;		None
 20686 ;; Auto vars:     Size  Location     Type
 20687 ;;		None
 20688 ;; Return value:  Size  Location     Type
 20689 ;;                  1    wreg      void 
 20690 ;; Registers used:
 20691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20692 ;; Tracked objects:
 20693 ;;		On entry : 0/0
 20694 ;;		On exit  : 0/0
 20695 ;;		Unchanged: 0/0
 20696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20701 ;;Total ram usage:        0 bytes
 20702 ;; Hardware stack levels used:    1
 20703 ;; Hardware stack levels required when called:    3
 20704 ;; This function calls:
 20705 ;;		i2_lcdInst
 20706 ;;		i2_printf
 20707 ;; This function is called by:
 20708 ;;		_updateMenu
 20709 ;;		_inputHandler
 20710 ;; This function uses a non-reentrant model
 20711 ;;
 20712                           
 20713                           	psect	text74
 20714  004FB0                     __ptext74:
 20715                           	opt stack 0
 20716  004FB0                     _change_state_to_logs_22:
 20717                           	opt stack 18
 20718                           
 20719                           ;UI.c: 529: cur_state = 1022;
 20720                           
 20721                           ;incstack = 0
 20722  004FB0  0E03               	movlw	3
 20723  004FB2  0100               	movlb	0	; () banked
 20724  004FB4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20725  004FB6  0EFE               	movlw	254
 20726  004FB8  6FEC               	movwf	_cur_state& (0+255),b
 20727                           
 20728                           ; BSR set to: 0
 20729                           ;UI.c: 530: lcdInst(0b10000000);;
 20730  004FBA  0E80               	movlw	128
 20731  004FBC  EC7B  F029         	call	i2_lcdInst
 20732                           
 20733                           ;UI.c: 531: printf("LOG 2          <");
 20734  004FC0  0E80               	movlw	low STR_42
 20735  004FC2  6E0D               	movwf	i2printf@f,c
 20736  004FC4  0EFD               	movlw	high STR_42
 20737  004FC6  6E0E               	movwf	i2printf@f+1,c
 20738  004FC8  ECE6  F00E         	call	i2_printf	;wreg free
 20739                           
 20740                           ;UI.c: 532: lcdInst(0b11000000);;
 20741  004FCC  0EC0               	movlw	192
 20742  004FCE  EC7B  F029         	call	i2_lcdInst
 20743                           
 20744                           ;UI.c: 533: printf("LOG 3           ");
 20745  004FD2  0EE7               	movlw	low STR_44
 20746  004FD4  6E0D               	movwf	i2printf@f,c
 20747  004FD6  0EFC               	movlw	high STR_44
 20748  004FD8  6E0E               	movwf	i2printf@f+1,c
 20749  004FDA  ECE6  F00E         	call	i2_printf	;wreg free
 20750  004FDE  0012               	return		;funcret
 20751  004FE0                     __end_of_change_state_to_logs_22:
 20752                           	opt stack 0
 20753                           pclatu	equ	0xFFB
 20754                           pclath	equ	0xFFA
 20755                           tblptru	equ	0xFF8
 20756                           tblptrh	equ	0xFF7
 20757                           tblptrl	equ	0xFF6
 20758                           tablat	equ	0xFF5
 20759                           prodh	equ	0xFF4
 20760                           prodl	equ	0xFF3
 20761                           intcon	equ	0xFF2
 20762                           intcon2	equ	0xFF1
 20763                           intcon3	equ	0xFF0
 20764                           indf0	equ	0xFEF
 20765                           postinc0	equ	0xFEE
 20766                           fsr0h	equ	0xFEA
 20767                           fsr0l	equ	0xFE9
 20768                           wreg	equ	0xFE8
 20769                           postdec1	equ	0xFE5
 20770                           fsr1h	equ	0xFE2
 20771                           fsr1l	equ	0xFE1
 20772                           indf2	equ	0xFDF
 20773                           postinc2	equ	0xFDE
 20774                           postdec2	equ	0xFDD
 20775                           fsr2h	equ	0xFDA
 20776                           fsr2l	equ	0xFD9
 20777                           status	equ	0xFD8
 20778                           
 20779 ;; *************** function _change_state_to_logs_12 *****************
 20780 ;; Defined at:
 20781 ;;		line 521 in file "UI.c"
 20782 ;; Parameters:    Size  Location     Type
 20783 ;;		None
 20784 ;; Auto vars:     Size  Location     Type
 20785 ;;		None
 20786 ;; Return value:  Size  Location     Type
 20787 ;;                  1    wreg      void 
 20788 ;; Registers used:
 20789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20790 ;; Tracked objects:
 20791 ;;		On entry : 0/0
 20792 ;;		On exit  : 0/0
 20793 ;;		Unchanged: 0/0
 20794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20799 ;;Total ram usage:        0 bytes
 20800 ;; Hardware stack levels used:    1
 20801 ;; Hardware stack levels required when called:    3
 20802 ;; This function calls:
 20803 ;;		i2_lcdInst
 20804 ;;		i2_printf
 20805 ;; This function is called by:
 20806 ;;		_updateMenu
 20807 ;;		_inputHandler
 20808 ;; This function uses a non-reentrant model
 20809 ;;
 20810                           
 20811                           	psect	text75
 20812  004FE0                     __ptext75:
 20813                           	opt stack 0
 20814  004FE0                     _change_state_to_logs_12:
 20815                           	opt stack 18
 20816                           
 20817                           ;UI.c: 522: cur_state = 1012;
 20818                           
 20819                           ;incstack = 0
 20820  004FE0  0E03               	movlw	3
 20821  004FE2  0100               	movlb	0	; () banked
 20822  004FE4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20823  004FE6  0EF4               	movlw	244
 20824  004FE8  6FEC               	movwf	_cur_state& (0+255),b
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;UI.c: 523: lcdInst(0b10000000);;
 20828  004FEA  0E80               	movlw	128
 20829  004FEC  EC7B  F029         	call	i2_lcdInst
 20830                           
 20831                           ;UI.c: 524: printf("LOG 1           ");
 20832  004FF0  0EC5               	movlw	low STR_41
 20833  004FF2  6E0D               	movwf	i2printf@f,c
 20834  004FF4  0EFC               	movlw	high STR_41
 20835  004FF6  6E0E               	movwf	i2printf@f+1,c
 20836  004FF8  ECE6  F00E         	call	i2_printf	;wreg free
 20837                           
 20838                           ;UI.c: 525: lcdInst(0b11000000);;
 20839  004FFC  0EC0               	movlw	192
 20840  004FFE  EC7B  F029         	call	i2_lcdInst
 20841                           
 20842                           ;UI.c: 526: printf("LOG 2          <");
 20843  005002  0E80               	movlw	low STR_42
 20844  005004  6E0D               	movwf	i2printf@f,c
 20845  005006  0EFD               	movlw	high STR_42
 20846  005008  6E0E               	movwf	i2printf@f+1,c
 20847  00500A  ECE6  F00E         	call	i2_printf	;wreg free
 20848  00500E  0012               	return		;funcret
 20849  005010                     __end_of_change_state_to_logs_12:
 20850                           	opt stack 0
 20851                           pclatu	equ	0xFFB
 20852                           pclath	equ	0xFFA
 20853                           tblptru	equ	0xFF8
 20854                           tblptrh	equ	0xFF7
 20855                           tblptrl	equ	0xFF6
 20856                           tablat	equ	0xFF5
 20857                           prodh	equ	0xFF4
 20858                           prodl	equ	0xFF3
 20859                           intcon	equ	0xFF2
 20860                           intcon2	equ	0xFF1
 20861                           intcon3	equ	0xFF0
 20862                           indf0	equ	0xFEF
 20863                           postinc0	equ	0xFEE
 20864                           fsr0h	equ	0xFEA
 20865                           fsr0l	equ	0xFE9
 20866                           wreg	equ	0xFE8
 20867                           postdec1	equ	0xFE5
 20868                           fsr1h	equ	0xFE2
 20869                           fsr1l	equ	0xFE1
 20870                           indf2	equ	0xFDF
 20871                           postinc2	equ	0xFDE
 20872                           postdec2	equ	0xFDD
 20873                           fsr2h	equ	0xFDA
 20874                           fsr2l	equ	0xFD9
 20875                           status	equ	0xFD8
 20876                           
 20877 ;; *************** function _change_state_to_logs_11 *****************
 20878 ;; Defined at:
 20879 ;;		line 514 in file "UI.c"
 20880 ;; Parameters:    Size  Location     Type
 20881 ;;		None
 20882 ;; Auto vars:     Size  Location     Type
 20883 ;;		None
 20884 ;; Return value:  Size  Location     Type
 20885 ;;                  1    wreg      void 
 20886 ;; Registers used:
 20887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20888 ;; Tracked objects:
 20889 ;;		On entry : 0/0
 20890 ;;		On exit  : 0/0
 20891 ;;		Unchanged: 0/0
 20892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20897 ;;Total ram usage:        0 bytes
 20898 ;; Hardware stack levels used:    1
 20899 ;; Hardware stack levels required when called:    3
 20900 ;; This function calls:
 20901 ;;		i2_lcdInst
 20902 ;;		i2_printf
 20903 ;; This function is called by:
 20904 ;;		_updateMenu
 20905 ;;		_inputHandler
 20906 ;; This function uses a non-reentrant model
 20907 ;;
 20908                           
 20909                           	psect	text76
 20910  005010                     __ptext76:
 20911                           	opt stack 0
 20912  005010                     _change_state_to_logs_11:
 20913                           	opt stack 18
 20914                           
 20915                           ;UI.c: 515: cur_state = 1011;
 20916                           
 20917                           ;incstack = 0
 20918  005010  0E03               	movlw	3
 20919  005012  0100               	movlb	0	; () banked
 20920  005014  6FED               	movwf	(_cur_state+1)& (0+255),b
 20921  005016  0EF3               	movlw	243
 20922  005018  6FEC               	movwf	_cur_state& (0+255),b
 20923                           
 20924                           ; BSR set to: 0
 20925                           ;UI.c: 516: lcdInst(0b10000000);;
 20926  00501A  0E80               	movlw	128
 20927  00501C  EC7B  F029         	call	i2_lcdInst
 20928                           
 20929                           ;UI.c: 517: printf("LOG 1          <");
 20930  005020  0E6F               	movlw	low STR_39
 20931  005022  6E0D               	movwf	i2printf@f,c
 20932  005024  0EFD               	movlw	high STR_39
 20933  005026  6E0E               	movwf	i2printf@f+1,c
 20934  005028  ECE6  F00E         	call	i2_printf	;wreg free
 20935                           
 20936                           ;UI.c: 518: lcdInst(0b11000000);;
 20937  00502C  0EC0               	movlw	192
 20938  00502E  EC7B  F029         	call	i2_lcdInst
 20939                           
 20940                           ;UI.c: 519: printf("LOG 2           ");
 20941  005032  0ED6               	movlw	low STR_40
 20942  005034  6E0D               	movwf	i2printf@f,c
 20943  005036  0EFC               	movlw	high STR_40
 20944  005038  6E0E               	movwf	i2printf@f+1,c
 20945  00503A  ECE6  F00E         	call	i2_printf	;wreg free
 20946  00503E  0012               	return		;funcret
 20947  005040                     __end_of_change_state_to_logs_11:
 20948                           	opt stack 0
 20949                           pclatu	equ	0xFFB
 20950                           pclath	equ	0xFFA
 20951                           tblptru	equ	0xFF8
 20952                           tblptrh	equ	0xFF7
 20953                           tblptrl	equ	0xFF6
 20954                           tablat	equ	0xFF5
 20955                           prodh	equ	0xFF4
 20956                           prodl	equ	0xFF3
 20957                           intcon	equ	0xFF2
 20958                           intcon2	equ	0xFF1
 20959                           intcon3	equ	0xFF0
 20960                           indf0	equ	0xFEF
 20961                           postinc0	equ	0xFEE
 20962                           fsr0h	equ	0xFEA
 20963                           fsr0l	equ	0xFE9
 20964                           wreg	equ	0xFE8
 20965                           postdec1	equ	0xFE5
 20966                           fsr1h	equ	0xFE2
 20967                           fsr1l	equ	0xFE1
 20968                           indf2	equ	0xFDF
 20969                           postinc2	equ	0xFDE
 20970                           postdec2	equ	0xFDD
 20971                           fsr2h	equ	0xFDA
 20972                           fsr2l	equ	0xFD9
 20973                           status	equ	0xFD8
 20974                           
 20975 ;; *************** function _dispLogs *****************
 20976 ;; Defined at:
 20977 ;;		line 467 in file "UI.c"
 20978 ;; Parameters:    Size  Location     Type
 20979 ;;  myLog           2   17[COMRAM] int 
 20980 ;; Auto vars:     Size  Location     Type
 20981 ;;		None
 20982 ;; Return value:  Size  Location     Type
 20983 ;;                  1    wreg      void 
 20984 ;; Registers used:
 20985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20986 ;; Tracked objects:
 20987 ;;		On entry : 0/0
 20988 ;;		On exit  : 0/0
 20989 ;;		Unchanged: 0/0
 20990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;Total ram usage:        2 bytes
 20996 ;; Hardware stack levels used:    1
 20997 ;; Hardware stack levels required when called:    2
 20998 ;; This function calls:
 20999 ;;		_retrieveLog
 21000 ;; This function is called by:
 21001 ;;		_updateMenu
 21002 ;; This function uses a non-reentrant model
 21003 ;;
 21004                           
 21005                           	psect	text77
 21006  0051BA                     __ptext77:
 21007                           	opt stack 0
 21008  0051BA                     _dispLogs:
 21009                           	opt stack 20
 21010                           
 21011                           ;UI.c: 468: logstate = 1;
 21012                           
 21013                           ;incstack = 0
 21014  0051BA  0E00               	movlw	0
 21015  0051BC  0100               	movlb	0	; () banked
 21016  0051BE  6FF7               	movwf	(_logstate+1)& (0+255),b
 21017  0051C0  0E01               	movlw	1
 21018  0051C2  6FF6               	movwf	_logstate& (0+255),b
 21019                           
 21020                           ; BSR set to: 0
 21021                           ;UI.c: 469: log = myLog;
 21022  0051C4  C012  F0F2         	movff	dispLogs@myLog,_log
 21023  0051C8  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 21024                           
 21025                           ; BSR set to: 0
 21026                           ;UI.c: 470: retrieveLog(myLog - 1);
 21027  0051CC  0EFF               	movlw	255
 21028  0051CE  2412               	addwf	dispLogs@myLog,w,c
 21029  0051D0  6E07               	movwf	retrieveLog@logNum,c
 21030  0051D2  0EFF               	movlw	255
 21031  0051D4  2013               	addwfc	dispLogs@myLog+1,w,c
 21032  0051D6  6E08               	movwf	retrieveLog@logNum+1,c
 21033  0051D8  ECAE  F01D         	call	_retrieveLog	;wreg free
 21034  0051DC  0012               	return		;funcret
 21035  0051DE                     __end_of_dispLogs:
 21036                           	opt stack 0
 21037                           pclatu	equ	0xFFB
 21038                           pclath	equ	0xFFA
 21039                           tblptru	equ	0xFF8
 21040                           tblptrh	equ	0xFF7
 21041                           tblptrl	equ	0xFF6
 21042                           tablat	equ	0xFF5
 21043                           prodh	equ	0xFF4
 21044                           prodl	equ	0xFF3
 21045                           intcon	equ	0xFF2
 21046                           intcon2	equ	0xFF1
 21047                           intcon3	equ	0xFF0
 21048                           indf0	equ	0xFEF
 21049                           postinc0	equ	0xFEE
 21050                           fsr0h	equ	0xFEA
 21051                           fsr0l	equ	0xFE9
 21052                           wreg	equ	0xFE8
 21053                           postdec1	equ	0xFE5
 21054                           fsr1h	equ	0xFE2
 21055                           fsr1l	equ	0xFE1
 21056                           indf2	equ	0xFDF
 21057                           postinc2	equ	0xFDE
 21058                           postdec2	equ	0xFDD
 21059                           fsr2h	equ	0xFDA
 21060                           fsr2l	equ	0xFD9
 21061                           status	equ	0xFD8
 21062                           
 21063 ;; *************** function _retrieveLog *****************
 21064 ;; Defined at:
 21065 ;;		line 134 in file "EEPROM.c"
 21066 ;; Parameters:    Size  Location     Type
 21067 ;;  logNum          2    6[COMRAM] int 
 21068 ;; Auto vars:     Size  Location     Type
 21069 ;;  i               2   13[COMRAM] int 
 21070 ;;  addr            2   15[COMRAM] unsigned short 
 21071 ;;  byte3           1   12[COMRAM] unsigned char 
 21072 ;;  byte2           1   11[COMRAM] unsigned char 
 21073 ;;  byte1           1   10[COMRAM] unsigned char 
 21074 ;; Return value:  Size  Location     Type
 21075 ;;                  1    wreg      void 
 21076 ;; Registers used:
 21077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21078 ;; Tracked objects:
 21079 ;;		On entry : 0/0
 21080 ;;		On exit  : 0/0
 21081 ;;		Unchanged: 0/0
 21082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21086 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21087 ;;Total ram usage:       11 bytes
 21088 ;; Hardware stack levels used:    1
 21089 ;; Hardware stack levels required when called:    1
 21090 ;; This function calls:
 21091 ;;		i2_EEPROM_read
 21092 ;;		i2___wmul
 21093 ;; This function is called by:
 21094 ;;		_dispLogs
 21095 ;; This function uses a non-reentrant model
 21096 ;;
 21097                           
 21098                           	psect	text78
 21099  003B5C                     __ptext78:
 21100                           	opt stack 0
 21101  003B5C                     _retrieveLog:
 21102                           	opt stack 20
 21103                           
 21104                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21105                           
 21106                           ;incstack = 0
 21107  003B5C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21108  003B60  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21109  003B64  0E00               	movlw	0
 21110  003B66  6E04               	movwf	i2___wmul@multiplicand+1,c
 21111  003B68  0E0B               	movlw	11
 21112  003B6A  6E03               	movwf	i2___wmul@multiplicand,c
 21113  003B6C  ECB7  F028         	call	i2___wmul	;wreg free
 21114  003B70  0E01               	movlw	1
 21115  003B72  2401               	addwf	?i2___wmul,w,c
 21116  003B74  6E10               	movwf	retrieveLog@addr,c
 21117  003B76  0E00               	movlw	0
 21118  003B78  2002               	addwfc	?i2___wmul+1,w,c
 21119  003B7A  6E11               	movwf	retrieveLog@addr+1,c
 21120                           
 21121                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21122  003B7C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21123  003B80  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21124  003B84  EC47  F029         	call	i2_EEPROM_read	;wreg free
 21125  003B88  6E0B               	movwf	retrieveLog@byte1,c
 21126                           
 21127                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21128  003B8A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21129  003B8E  0E80               	movlw	128
 21130  003B90  1609               	andwf	??_retrieveLog,f,c
 21131  003B92  5009               	movf	??_retrieveLog,w,c
 21132  003B94  6E63               	movwf	_log_completion,c
 21133  003B96  6A64               	clrf	_log_completion+1,c
 21134                           
 21135                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21136  003B98  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21137  003B9C  0E0F               	movlw	15
 21138  003B9E  1609               	andwf	??_retrieveLog,f,c
 21139  003BA0  5009               	movf	??_retrieveLog,w,c
 21140  003BA2  0101               	movlb	1	; () banked
 21141  003BA4  6F3F               	movwf	_log_count_total& (0+255),b
 21142  003BA6  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21143                           
 21144                           ; BSR set to: 1
 21145                           ;EEPROM.c: 146: addr++;
 21146  003BA8  4A10               	infsnz	retrieveLog@addr,f,c
 21147  003BAA  2A11               	incf	retrieveLog@addr+1,f,c
 21148                           
 21149                           ; BSR set to: 1
 21150                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21151  003BAC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21152  003BB0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21153  003BB4  EC47  F029         	call	i2_EEPROM_read	;wreg free
 21154  003BB8  6E0C               	movwf	retrieveLog@byte2,c
 21155                           
 21156                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21157  003BBA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21158  003BBE  3A09               	swapf	??_retrieveLog,f,c
 21159  003BC0  0E0F               	movlw	15
 21160  003BC2  1609               	andwf	??_retrieveLog,f,c
 21161  003BC4  0E0F               	movlw	15
 21162  003BC6  1609               	andwf	??_retrieveLog,f,c
 21163  003BC8  5009               	movf	??_retrieveLog,w,c
 21164  003BCA  6E69               	movwf	_log_count_pop_no_tab,c
 21165  003BCC  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21166                           
 21167                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21168  003BCE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21169  003BD2  0E0F               	movlw	15
 21170  003BD4  1609               	andwf	??_retrieveLog,f,c
 21171  003BD6  5009               	movf	??_retrieveLog,w,c
 21172  003BD8  6E6B               	movwf	_log_count_pop_w_tab,c
 21173  003BDA  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21174                           
 21175                           ;EEPROM.c: 152: addr++;
 21176  003BDC  4A10               	infsnz	retrieveLog@addr,f,c
 21177  003BDE  2A11               	incf	retrieveLog@addr+1,f,c
 21178                           
 21179                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21180  003BE0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21181  003BE4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21182  003BE8  EC47  F029         	call	i2_EEPROM_read	;wreg free
 21183  003BEC  6E0D               	movwf	retrieveLog@byte3,c
 21184                           
 21185                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21186  003BEE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21187  003BF2  3A09               	swapf	??_retrieveLog,f,c
 21188  003BF4  0E0F               	movlw	15
 21189  003BF6  1609               	andwf	??_retrieveLog,f,c
 21190  003BF8  0E0F               	movlw	15
 21191  003BFA  1609               	andwf	??_retrieveLog,f,c
 21192  003BFC  5009               	movf	??_retrieveLog,w,c
 21193  003BFE  6E67               	movwf	_log_count_can_w_lab,c
 21194  003C00  6A68               	clrf	_log_count_can_w_lab+1,c
 21195                           
 21196                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21197  003C02  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21198  003C06  0E0F               	movlw	15
 21199  003C08  1609               	andwf	??_retrieveLog,f,c
 21200  003C0A  5009               	movf	??_retrieveLog,w,c
 21201  003C0C  6E65               	movwf	_log_count_can_no_lab,c
 21202  003C0E  6A66               	clrf	_log_count_can_no_lab+1,c
 21203                           
 21204                           ;EEPROM.c: 156: addr++;
 21205  003C10  4A10               	infsnz	retrieveLog@addr,f,c
 21206  003C12  2A11               	incf	retrieveLog@addr+1,f,c
 21207                           
 21208                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21209  003C14  0E00               	movlw	0
 21210  003C16  6E0F               	movwf	retrieveLog@i+1,c
 21211  003C18  0E00               	movlw	0
 21212  003C1A  6E0E               	movwf	retrieveLog@i,c
 21213  003C1C                     i2l6792:
 21214  003C1C  BE0F               	btfsc	retrieveLog@i+1,7,c
 21215  003C1E  D006               	goto	i2l6796
 21216  003C20  500F               	movf	retrieveLog@i+1,w,c
 21217  003C22  E11E               	bnz	i2l6804
 21218  003C24  0E07               	movlw	7
 21219  003C26  5C0E               	subwf	retrieveLog@i,w,c
 21220  003C28  B0D8               	btfsc	status,0,c
 21221  003C2A  D01A               	goto	i2l6804
 21222  003C2C                     i2l6796:
 21223                           
 21224                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21225  003C2C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21226  003C30  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21227  003C34  EC47  F029         	call	i2_EEPROM_read	;wreg free
 21228  003C38  6E09               	movwf	??_retrieveLog& (0+255),c
 21229  003C3A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21230  003C3C  90D8               	bcf	status,0,c
 21231  003C3E  340E               	rlcf	retrieveLog@i,w,c
 21232  003C40  6ED9               	movwf	fsr2l,c
 21233  003C42  340F               	rlcf	retrieveLog@i+1,w,c
 21234  003C44  6EDA               	movwf	fsr2h,c
 21235  003C46  0E00               	movlw	low _log_startTime
 21236  003C48  26D9               	addwf	fsr2l,f,c
 21237  003C4A  0E01               	movlw	high _log_startTime
 21238  003C4C  22DA               	addwfc	fsr2h,f,c
 21239  003C4E  C009  FFDE         	movff	??_retrieveLog,postinc2
 21240  003C52  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21241                           
 21242                           ;EEPROM.c: 161: addr++;
 21243  003C56  4A10               	infsnz	retrieveLog@addr,f,c
 21244  003C58  2A11               	incf	retrieveLog@addr+1,f,c
 21245  003C5A  4A0E               	infsnz	retrieveLog@i,f,c
 21246  003C5C  2A0F               	incf	retrieveLog@i+1,f,c
 21247  003C5E  D7DE               	goto	i2l6792
 21248  003C60                     i2l6804:
 21249                           
 21250                           ;EEPROM.c: 162: }
 21251                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21252  003C60  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21253  003C64  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21254  003C68  EC47  F029         	call	i2_EEPROM_read	;wreg free
 21255  003C6C  6E09               	movwf	??_retrieveLog& (0+255),c
 21256  003C6E  5009               	movf	??_retrieveLog,w,c
 21257  003C70  0100               	movlb	0	; () banked
 21258  003C72  6FF4               	movwf	_log_total_time& (0+255),b
 21259  003C74  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21260                           
 21261                           ; BSR set to: 0
 21262  003C76  0012               	return		;funcret
 21263  003C78                     __end_of_retrieveLog:
 21264                           	opt stack 0
 21265                           pclatu	equ	0xFFB
 21266                           pclath	equ	0xFFA
 21267                           tblptru	equ	0xFF8
 21268                           tblptrh	equ	0xFF7
 21269                           tblptrl	equ	0xFF6
 21270                           tablat	equ	0xFF5
 21271                           prodh	equ	0xFF4
 21272                           prodl	equ	0xFF3
 21273                           intcon	equ	0xFF2
 21274                           intcon2	equ	0xFF1
 21275                           intcon3	equ	0xFF0
 21276                           indf0	equ	0xFEF
 21277                           postinc0	equ	0xFEE
 21278                           fsr0h	equ	0xFEA
 21279                           fsr0l	equ	0xFE9
 21280                           wreg	equ	0xFE8
 21281                           postdec1	equ	0xFE5
 21282                           fsr1h	equ	0xFE2
 21283                           fsr1l	equ	0xFE1
 21284                           indf2	equ	0xFDF
 21285                           postinc2	equ	0xFDE
 21286                           postdec2	equ	0xFDD
 21287                           fsr2h	equ	0xFDA
 21288                           fsr2l	equ	0xFD9
 21289                           status	equ	0xFD8
 21290                           
 21291 ;; *************** function i2_EEPROM_read *****************
 21292 ;; Defined at:
 21293 ;;		line 68 in file "EEPROM.c"
 21294 ;; Parameters:    Size  Location     Type
 21295 ;;  address         2    0[COMRAM] unsigned short 
 21296 ;; Auto vars:     Size  Location     Type
 21297 ;;		None
 21298 ;; Return value:  Size  Location     Type
 21299 ;;                  1    wreg      unsigned char 
 21300 ;; Registers used:
 21301 ;;		wreg, status,2
 21302 ;; Tracked objects:
 21303 ;;		On entry : 0/0
 21304 ;;		On exit  : 0/0
 21305 ;;		Unchanged: 0/0
 21306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21311 ;;Total ram usage:        2 bytes
 21312 ;; Hardware stack levels used:    1
 21313 ;; This function calls:
 21314 ;;		Nothing
 21315 ;; This function is called by:
 21316 ;;		_retrieveLog
 21317 ;; This function uses a non-reentrant model
 21318 ;;
 21319                           
 21320                           	psect	text79
 21321  00528E                     __ptext79:
 21322                           	opt stack 0
 21323  00528E                     i2_EEPROM_read:
 21324                           	opt stack 20
 21325                           
 21326                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21327                           
 21328                           ; BSR set to: 0
 21329                           ;incstack = 0
 21330  00528E  5002               	movf	i2EEPROM_read@address+1,w,c
 21331  005290  6EAA               	movwf	4010,c	;volatile
 21332                           
 21333                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21334  005292  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21335                           
 21336                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21337  005296  9EA6               	bcf	4006,7,c	;volatile
 21338                           
 21339                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21340  005298  9CA6               	bcf	4006,6,c	;volatile
 21341                           
 21342                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21343  00529A  80A6               	bsf	4006,0,c	;volatile
 21344  00529C                     i2l1043:
 21345  00529C  B0A6               	btfsc	4006,0,c	;volatile
 21346  00529E  D7FE               	goto	i2l1043
 21347                           
 21348                           ;EEPROM.c: 81: return EEDATA;
 21349  0052A0  50A8               	movf	4008,w,c	;volatile
 21350  0052A2  0012               	return	
 21351  0052A4                     __end_ofi2_EEPROM_read:
 21352                           	opt stack 0
 21353                           pclatu	equ	0xFFB
 21354                           pclath	equ	0xFFA
 21355                           tblptru	equ	0xFF8
 21356                           tblptrh	equ	0xFF7
 21357                           tblptrl	equ	0xFF6
 21358                           tablat	equ	0xFF5
 21359                           prodh	equ	0xFF4
 21360                           prodl	equ	0xFF3
 21361                           intcon	equ	0xFF2
 21362                           intcon2	equ	0xFF1
 21363                           intcon3	equ	0xFF0
 21364                           indf0	equ	0xFEF
 21365                           postinc0	equ	0xFEE
 21366                           fsr0h	equ	0xFEA
 21367                           fsr0l	equ	0xFE9
 21368                           wreg	equ	0xFE8
 21369                           postdec1	equ	0xFE5
 21370                           fsr1h	equ	0xFE2
 21371                           fsr1l	equ	0xFE1
 21372                           indf2	equ	0xFDF
 21373                           postinc2	equ	0xFDE
 21374                           postdec2	equ	0xFDD
 21375                           fsr2h	equ	0xFDA
 21376                           fsr2l	equ	0xFD9
 21377                           status	equ	0xFD8
 21378                           
 21379 ;; *************** function _printSortTimer *****************
 21380 ;; Defined at:
 21381 ;;		line 439 in file "sort.c"
 21382 ;; Parameters:    Size  Location     Type
 21383 ;;		None
 21384 ;; Auto vars:     Size  Location     Type
 21385 ;;  i               2   70[COMRAM] int 
 21386 ;;  i               2   72[COMRAM] int 
 21387 ;;  curTime        14   44[COMRAM] int [7]
 21388 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21389 ;;  sec             2   64[COMRAM] int 
 21390 ;;  min             2   62[COMRAM] int 
 21391 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21392 ;;  start_sec       2   58[COMRAM] unsigned int 
 21393 ;; Return value:  Size  Location     Type
 21394 ;;                  1    wreg      void 
 21395 ;; Registers used:
 21396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21397 ;; Tracked objects:
 21398 ;;		On entry : 0/0
 21399 ;;		On exit  : 0/0
 21400 ;;		Unchanged: 0/0
 21401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;Total ram usage:       33 bytes
 21407 ;; Hardware stack levels used:    1
 21408 ;; Hardware stack levels required when called:    3
 21409 ;; This function calls:
 21410 ;;		i2___lwdiv
 21411 ;;		i2___lwmod
 21412 ;;		i2___wmul
 21413 ;;		i2_delay_ms
 21414 ;;		i2_getRTC
 21415 ;;		i2_lcdInst
 21416 ;;		i2_printf
 21417 ;; This function is called by:
 21418 ;;		_handler
 21419 ;; This function uses a non-reentrant model
 21420 ;;
 21421                           
 21422                           	psect	text80
 21423  0029C2                     __ptext80:
 21424                           	opt stack 0
 21425  0029C2                     _printSortTimer:
 21426                           	opt stack 20
 21427                           
 21428                           ;sort.c: 440: getRTC();
 21429                           
 21430                           ;incstack = 0
 21431  0029C2  ECF6  F023         	call	i2_getRTC	;wreg free
 21432                           
 21433                           ;sort.c: 441: int curTime[7];
 21434                           ;sort.c: 442: for(int i = 0; i < 7; i++){
 21435  0029C6  0E00               	movlw	0
 21436  0029C8  6E4A               	movwf	printSortTimer@i+1,c
 21437  0029CA  0E00               	movlw	0
 21438  0029CC  6E49               	movwf	printSortTimer@i,c
 21439  0029CE                     i2l9208:
 21440  0029CE  BE4A               	btfsc	printSortTimer@i+1,7,c
 21441  0029D0  D006               	goto	i2l9212
 21442  0029D2  504A               	movf	printSortTimer@i+1,w,c
 21443  0029D4  E131               	bnz	i2l9218
 21444  0029D6  0E07               	movlw	7
 21445  0029D8  5C49               	subwf	printSortTimer@i,w,c
 21446  0029DA  B0D8               	btfsc	status,0,c
 21447  0029DC  D02D               	goto	i2l9218
 21448  0029DE                     i2l9212:
 21449                           
 21450                           ;sort.c: 443: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21451  0029DE  0E1C               	movlw	low _time
 21452  0029E0  2449               	addwf	printSortTimer@i,w,c
 21453  0029E2  6ED9               	movwf	fsr2l,c
 21454  0029E4  0E01               	movlw	high _time
 21455  0029E6  204A               	addwfc	printSortTimer@i+1,w,c
 21456  0029E8  6EDA               	movwf	fsr2h,c
 21457  0029EA  50DF               	movf	indf2,w,c
 21458  0029EC  6E2A               	movwf	??_printSortTimer& (0+255),c
 21459  0029EE  3A2A               	swapf	??_printSortTimer,f,c
 21460  0029F0  0E0F               	movlw	15
 21461  0029F2  162A               	andwf	??_printSortTimer,f,c
 21462  0029F4  0E0F               	movlw	15
 21463  0029F6  162A               	andwf	??_printSortTimer,f,c
 21464  0029F8  502A               	movf	??_printSortTimer,w,c
 21465  0029FA  0D0A               	mullw	10
 21466  0029FC  0E1C               	movlw	low _time
 21467  0029FE  2449               	addwf	printSortTimer@i,w,c
 21468  002A00  6ED9               	movwf	fsr2l,c
 21469  002A02  0E01               	movlw	high _time
 21470  002A04  204A               	addwfc	printSortTimer@i+1,w,c
 21471  002A06  6EDA               	movwf	fsr2h,c
 21472  002A08  50DF               	movf	indf2,w,c
 21473  002A0A  0B0F               	andlw	15
 21474  002A0C  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21475  002A0E  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21476  002A10  50F3               	movf	prodl,w,c
 21477  002A12  262B               	addwf	??_printSortTimer+1,f,c
 21478  002A14  50F4               	movf	prodh,w,c
 21479  002A16  222C               	addwfc	??_printSortTimer+2,f,c
 21480  002A18  90D8               	bcf	status,0,c
 21481  002A1A  3449               	rlcf	printSortTimer@i,w,c
 21482  002A1C  6ED9               	movwf	fsr2l,c
 21483  002A1E  344A               	rlcf	printSortTimer@i+1,w,c
 21484  002A20  6EDA               	movwf	fsr2h,c
 21485  002A22  0E2D               	movlw	low printSortTimer@curTime
 21486  002A24  26D9               	addwf	fsr2l,f,c
 21487  002A26  0E00               	movlw	high printSortTimer@curTime
 21488  002A28  22DA               	addwfc	fsr2h,f,c
 21489  002A2A  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21490  002A2E  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21491  002A32  4A49               	infsnz	printSortTimer@i,f,c
 21492  002A34  2A4A               	incf	printSortTimer@i+1,f,c
 21493  002A36  D7CB               	goto	i2l9208
 21494  002A38                     i2l9218:
 21495                           
 21496                           ;sort.c: 444: }
 21497                           ;sort.c: 445: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21498  002A38  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21499  002A3C  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21500  002A40  0E00               	movlw	0
 21501  002A42  6E04               	movwf	i2___wmul@multiplicand+1,c
 21502  002A44  0E3C               	movlw	60
 21503  002A46  6E03               	movwf	i2___wmul@multiplicand,c
 21504  002A48  ECB7  F028         	call	i2___wmul	;wreg free
 21505  002A4C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21506  002A50  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21507  002A54  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21508  002A58  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21509  002A5C  0E0E               	movlw	14
 21510  002A5E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21511  002A60  0E10               	movlw	16
 21512  002A62  6E03               	movwf	i2___wmul@multiplicand,c
 21513  002A64  ECB7  F028         	call	i2___wmul	;wreg free
 21514  002A68  5001               	movf	?i2___wmul,w,c
 21515  002A6A  262A               	addwf	??_printSortTimer,f,c
 21516  002A6C  5002               	movf	?i2___wmul+1,w,c
 21517  002A6E  222B               	addwfc	??_printSortTimer+1,f,c
 21518  002A70  0101               	movlb	1	; () banked
 21519  002A72  510E               	movf	_startTime& (0+255),w,b
 21520  002A74  242A               	addwf	??_printSortTimer,w,c
 21521  002A76  6E3B               	movwf	printSortTimer@start_sec,c
 21522  002A78  0101               	movlb	1	; () banked
 21523  002A7A  510F               	movf	(_startTime+1)& (0+255),w,b
 21524  002A7C  202B               	addwfc	??_printSortTimer+1,w,c
 21525  002A7E  6E3C               	movwf	printSortTimer@start_sec+1,c
 21526                           
 21527                           ;sort.c: 446: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21528  002A80  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21529  002A84  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21530  002A88  0E00               	movlw	0
 21531  002A8A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21532  002A8C  0E3C               	movlw	60
 21533  002A8E  6E03               	movwf	i2___wmul@multiplicand,c
 21534  002A90  ECB7  F028         	call	i2___wmul	;wreg free
 21535  002A94  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21536  002A98  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21537  002A9C  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21538  002AA0  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21539  002AA4  0E0E               	movlw	14
 21540  002AA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 21541  002AA8  0E10               	movlw	16
 21542  002AAA  6E03               	movwf	i2___wmul@multiplicand,c
 21543  002AAC  ECB7  F028         	call	i2___wmul	;wreg free
 21544  002AB0  5001               	movf	?i2___wmul,w,c
 21545  002AB2  262A               	addwf	??_printSortTimer,f,c
 21546  002AB4  5002               	movf	?i2___wmul+1,w,c
 21547  002AB6  222B               	addwfc	??_printSortTimer+1,f,c
 21548  002AB8  502D               	movf	printSortTimer@curTime,w,c
 21549  002ABA  242A               	addwf	??_printSortTimer,w,c
 21550  002ABC  6E3D               	movwf	printSortTimer@cur_sec,c
 21551  002ABE  502E               	movf	printSortTimer@curTime+1,w,c
 21552  002AC0  202B               	addwfc	??_printSortTimer+1,w,c
 21553  002AC2  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21554                           
 21555                           ;sort.c: 447: unsigned int timeDiff = cur_sec - start_sec;
 21556  002AC4  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21557  002AC8  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21558  002ACC  1E2A               	comf	??_printSortTimer,f,c
 21559  002ACE  1E2B               	comf	??_printSortTimer+1,f,c
 21560  002AD0  4A2A               	infsnz	??_printSortTimer,f,c
 21561  002AD2  2A2B               	incf	??_printSortTimer+1,f,c
 21562  002AD4  503D               	movf	printSortTimer@cur_sec,w,c
 21563  002AD6  242A               	addwf	??_printSortTimer,w,c
 21564  002AD8  6E45               	movwf	printSortTimer@timeDiff,c
 21565  002ADA  503E               	movf	printSortTimer@cur_sec+1,w,c
 21566  002ADC  202B               	addwfc	??_printSortTimer+1,w,c
 21567  002ADE  6E46               	movwf	printSortTimer@timeDiff+1,c
 21568                           
 21569                           ;sort.c: 449: total_time = timeDiff;
 21570  002AE0  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21571  002AE4  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21572                           
 21573                           ;sort.c: 451: if(f_most_recent_sort_time){
 21574  002AE8  0101               	movlb	1	; () banked
 21575  002AEA  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21576  002AEC  0101               	movlb	1	; () banked
 21577  002AEE  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21578  002AF0  B4D8               	btfsc	status,2,c
 21579  002AF2  D009               	goto	i2l9230
 21580                           
 21581                           ; BSR set to: 1
 21582                           ;sort.c: 452: most_recent_sort_time = total_time;
 21583  002AF4  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21584  002AF8  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21585                           
 21586                           ; BSR set to: 1
 21587                           ;sort.c: 453: f_most_recent_sort_time = 0;
 21588  002AFC  0E00               	movlw	0
 21589  002AFE  0101               	movlb	1	; () banked
 21590  002B00  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21591  002B02  0E00               	movlw	0
 21592  002B04  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21593  002B06                     i2l9230:
 21594                           
 21595                           ; BSR set to: 1
 21596                           ;sort.c: 454: }
 21597                           ;sort.c: 456: if(total_time - most_recent_sort_time == 20){
 21598  002B06  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21599  002B0A  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21600  002B0E  1E2A               	comf	??_printSortTimer,f,c
 21601  002B10  1E2B               	comf	??_printSortTimer+1,f,c
 21602  002B12  4A2A               	infsnz	??_printSortTimer,f,c
 21603  002B14  2A2B               	incf	??_printSortTimer+1,f,c
 21604  002B16  0100               	movlb	0	; () banked
 21605  002B18  51F8               	movf	_total_time& (0+255),w,b
 21606  002B1A  262A               	addwf	??_printSortTimer,f,c
 21607  002B1C  0100               	movlb	0	; () banked
 21608  002B1E  51F9               	movf	(_total_time+1)& (0+255),w,b
 21609  002B20  222B               	addwfc	??_printSortTimer+1,f,c
 21610  002B22  0E14               	movlw	20
 21611  002B24  182A               	xorwf	??_printSortTimer,w,c
 21612  002B26  102B               	iorwf	??_printSortTimer+1,w,c
 21613  002B28  A4D8               	btfss	status,2,c
 21614  002B2A  D033               	goto	i2l9250
 21615                           
 21616                           ; BSR set to: 0
 21617                           ;sort.c: 457: LATBbits.LATB2 = 0;
 21618  002B2C  948A               	bcf	3978,2,c	;volatile
 21619                           
 21620                           ; BSR set to: 0
 21621                           ;sort.c: 458: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21622  002B2E  0E52               	movlw	82
 21623  002B30  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21624  002B32  0E2B               	movlw	43
 21625  002B34  6E2A               	movwf	??_printSortTimer& (0+255),c
 21626  002B36  0E00               	movlw	0
 21627  002B38                     i2u1012_47:
 21628  002B38  2EE8               	decfsz	wreg,f,c
 21629  002B3A  D7FE               	bra	i2u1012_47
 21630  002B3C  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21631  002B3E  D7FC               	bra	i2u1012_47
 21632  002B40  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21633  002B42  D7FA               	bra	i2u1012_47
 21634  002B44  D000               	nop2	
 21635                           
 21636                           ;sort.c: 459: for(int i=0; i<46; i++){
 21637  002B46  0E00               	movlw	0
 21638  002B48  6E48               	movwf	printSortTimer@i_1186+1,c
 21639  002B4A  0E00               	movlw	0
 21640  002B4C  6E47               	movwf	printSortTimer@i_1186,c
 21641  002B4E  BE48               	btfsc	printSortTimer@i_1186+1,7,c
 21642  002B50  D006               	goto	i2l9242
 21643  002B52  5048               	movf	printSortTimer@i_1186+1,w,c
 21644  002B54  E11D               	bnz	i2l847
 21645  002B56  0E2E               	movlw	46
 21646  002B58  5C47               	subwf	printSortTimer@i_1186,w,c
 21647  002B5A  B0D8               	btfsc	status,0,c
 21648  002B5C  D019               	goto	i2l847
 21649  002B5E                     i2l9242:
 21650                           
 21651                           ;sort.c: 460: LATBbits.LATB2 = !LATBbits.LATB2;
 21652  002B5E  B48A               	btfsc	3978,2,c	;volatile
 21653  002B60  D003               	goto	i2u830_40
 21654  002B62  6A2A               	clrf	??_printSortTimer& (0+255),c
 21655  002B64  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21656  002B66  D001               	goto	i2u831_48
 21657  002B68                     i2u830_40:
 21658  002B68  6A2A               	clrf	??_printSortTimer& (0+255),c
 21659  002B6A                     i2u831_48:
 21660  002B6A  462A               	rlncf	??_printSortTimer,f,c
 21661  002B6C  462A               	rlncf	??_printSortTimer,f,c
 21662  002B6E  508A               	movf	3978,w,c	;volatile
 21663  002B70  182A               	xorwf	??_printSortTimer,w,c
 21664  002B72  0BFB               	andlw	-5
 21665  002B74  182A               	xorwf	??_printSortTimer,w,c
 21666  002B76  6E8A               	movwf	3978,c	;volatile
 21667                           
 21668                           ;sort.c: 461: delay_ms(45-i);
 21669  002B78  5047               	movf	printSortTimer@i_1186,w,c
 21670  002B7A  0800               	sublw	0
 21671  002B7C  0F2D               	addlw	45
 21672  002B7E  EC20  F029         	call	i2_delay_ms
 21673  002B82  4A47               	infsnz	printSortTimer@i_1186,f,c
 21674  002B84  2A48               	incf	printSortTimer@i_1186+1,f,c
 21675  002B86  BE48               	btfsc	printSortTimer@i_1186+1,7,c
 21676  002B88  D7EA               	goto	i2l9242
 21677  002B8A  5048               	movf	printSortTimer@i_1186+1,w,c
 21678  002B8C  E101               	bnz	i2u832_40
 21679  002B8E  D7E3               	goto	L13
 21680  002B90                     i2u832_40:
 21681  002B90                     i2l847:
 21682                           
 21683                           ;sort.c: 462: }
 21684                           ;sort.c: 463: LATBbits.LATB2 = 1;
 21685  002B90  848A               	bsf	3978,2,c	;volatile
 21686  002B92                     i2l9250:
 21687                           
 21688                           ;sort.c: 464: }
 21689                           ;sort.c: 466: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21690  002B92  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21691  002B96  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21692  002B9A  1E2A               	comf	??_printSortTimer,f,c
 21693  002B9C  1E2B               	comf	??_printSortTimer+1,f,c
 21694  002B9E  4A2A               	infsnz	??_printSortTimer,f,c
 21695  002BA0  2A2B               	incf	??_printSortTimer+1,f,c
 21696  002BA2  0100               	movlb	0	; () banked
 21697  002BA4  51F8               	movf	_total_time& (0+255),w,b
 21698  002BA6  262A               	addwf	??_printSortTimer,f,c
 21699  002BA8  0100               	movlb	0	; () banked
 21700  002BAA  51F9               	movf	(_total_time+1)& (0+255),w,b
 21701  002BAC  222B               	addwfc	??_printSortTimer+1,f,c
 21702  002BAE  0E2A               	movlw	42
 21703  002BB0  182A               	xorwf	??_printSortTimer,w,c
 21704  002BB2  102B               	iorwf	??_printSortTimer+1,w,c
 21705  002BB4  B4D8               	btfsc	status,2,c
 21706  002BB6  D007               	goto	i2l9254
 21707                           
 21708                           ; BSR set to: 0
 21709  002BB8  0EB3               	movlw	179
 21710  002BBA  0100               	movlb	0	; () banked
 21711  002BBC  19F8               	xorwf	_total_time& (0+255),w,b
 21712  002BBE  0100               	movlb	0	; () banked
 21713  002BC0  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21714  002BC2  A4D8               	btfss	status,2,c
 21715  002BC4  D003               	goto	i2l9256
 21716  002BC6                     i2l9254:
 21717                           
 21718                           ; BSR set to: 0
 21719                           ;sort.c: 467: machine_state = DoneSorting_state;
 21720  002BC6  0E02               	movlw	2
 21721  002BC8  0100               	movlb	0	; () banked
 21722  002BCA  6FFC               	movwf	_machine_state& (0+255),b
 21723  002BCC                     i2l9256:
 21724                           
 21725                           ; BSR set to: 0
 21726                           ;sort.c: 469: }
 21727                           ;sort.c: 471: int min = (timeDiff % 3600) / 60;
 21728  002BCC  0E0E               	movlw	14
 21729  002BCE  6E04               	movwf	i2___lwmod@divisor+1,c
 21730  002BD0  0E10               	movlw	16
 21731  002BD2  6E03               	movwf	i2___lwmod@divisor,c
 21732  002BD4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21733  002BD8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21734  002BDC  EC6F  F026         	call	i2___lwmod	;wreg free
 21735  002BE0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21736  002BE4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21737  002BE8  0E00               	movlw	0
 21738  002BEA  6E09               	movwf	i2___lwdiv@divisor+1,c
 21739  002BEC  0E3C               	movlw	60
 21740  002BEE  6E08               	movwf	i2___lwdiv@divisor,c
 21741  002BF0  ECB0  F025         	call	i2___lwdiv	;wreg free
 21742  002BF4  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21743  002BF8  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21744                           
 21745                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21746  002BFC  0E0E               	movlw	14
 21747  002BFE  6E04               	movwf	i2___lwmod@divisor+1,c
 21748  002C00  0E10               	movlw	16
 21749  002C02  6E03               	movwf	i2___lwmod@divisor,c
 21750  002C04  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21751  002C08  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21752  002C0C  EC6F  F026         	call	i2___lwmod	;wreg free
 21753  002C10  C001  F043         	movff	?i2___lwmod,_printSortTimer$2548
 21754  002C14  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2548+1
 21755                           
 21756                           ;sort.c: 472: int sec = (timeDiff % 3600) % 60;
 21757  002C18  C043  F001         	movff	_printSortTimer$2548,i2___lwmod@dividend
 21758  002C1C  C044  F002         	movff	_printSortTimer$2548+1,i2___lwmod@dividend+1
 21759  002C20  0E00               	movlw	0
 21760  002C22  6E04               	movwf	i2___lwmod@divisor+1,c
 21761  002C24  0E3C               	movlw	60
 21762  002C26  6E03               	movwf	i2___lwmod@divisor,c
 21763  002C28  EC6F  F026         	call	i2___lwmod	;wreg free
 21764  002C2C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21765  002C30  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21766                           
 21767                           ;sort.c: 474: lcdInst(0b10000000);;
 21768  002C34  0E80               	movlw	128
 21769  002C36  EC7B  F029         	call	i2_lcdInst
 21770                           
 21771                           ;sort.c: 475: printf("SORTING...");
 21772  002C3A  0E7C               	movlw	low STR_64
 21773  002C3C  6E0D               	movwf	i2printf@f,c
 21774  002C3E  0EFF               	movlw	high STR_64
 21775  002C40  6E0E               	movwf	i2printf@f+1,c
 21776  002C42  ECE6  F00E         	call	i2_printf	;wreg free
 21777                           
 21778                           ;sort.c: 476: lcdInst(0b11000000);;
 21779  002C46  0EC0               	movlw	192
 21780  002C48  EC7B  F029         	call	i2_lcdInst
 21781                           
 21782                           ;sort.c: 477: printf("TIME %d:%02d", min, sec);
 21783  002C4C  0E42               	movlw	low STR_65
 21784  002C4E  6E0D               	movwf	i2printf@f,c
 21785  002C50  0EFF               	movlw	high STR_65
 21786  002C52  6E0E               	movwf	i2printf@f+1,c
 21787  002C54  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21788  002C58  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21789  002C5C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21790  002C60  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21791  002C64  ECE6  F00E         	call	i2_printf	;wreg free
 21792  002C68  0012               	return		;funcret
 21793  002C6A                     __end_of_printSortTimer:
 21794                           	opt stack 0
 21795                           pclatu	equ	0xFFB
 21796                           pclath	equ	0xFFA
 21797                           tblptru	equ	0xFF8
 21798                           tblptrh	equ	0xFF7
 21799                           tblptrl	equ	0xFF6
 21800                           tablat	equ	0xFF5
 21801                           prodh	equ	0xFF4
 21802                           prodl	equ	0xFF3
 21803                           intcon	equ	0xFF2
 21804                           intcon2	equ	0xFF1
 21805                           intcon3	equ	0xFF0
 21806                           indf0	equ	0xFEF
 21807                           postinc0	equ	0xFEE
 21808                           fsr0h	equ	0xFEA
 21809                           fsr0l	equ	0xFE9
 21810                           wreg	equ	0xFE8
 21811                           postdec1	equ	0xFE5
 21812                           fsr1h	equ	0xFE2
 21813                           fsr1l	equ	0xFE1
 21814                           indf2	equ	0xFDF
 21815                           postinc2	equ	0xFDE
 21816                           postdec2	equ	0xFDD
 21817                           fsr2h	equ	0xFDA
 21818                           fsr2l	equ	0xFD9
 21819                           status	equ	0xFD8
 21820                           
 21821 ;; *************** function i2_printf *****************
 21822 ;; Defined at:
 21823 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21824 ;; Parameters:    Size  Location     Type
 21825 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21826 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21827 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21828 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21829 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21830 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21831 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21832 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21833 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21834 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21835 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21836 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21837 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21838 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21839 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21840 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21841 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21842 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21843 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21844 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21845 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21846 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21847 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21848 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21849 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21850 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21851 ;; Auto vars:     Size  Location     Type
 21852 ;;  printf          4    0        struct .
 21853 ;;  printf          2   39[COMRAM] int 
 21854 ;;  printf          2   35[COMRAM] unsigned int 
 21855 ;;  printf          2   33[COMRAM] unsigned int 
 21856 ;;  printf          2   31[COMRAM] PTR void [1]
 21857 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21858 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21859 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21860 ;;  printf          1   38[COMRAM] char 
 21861 ;;  printf          1   37[COMRAM] unsigned char 
 21862 ;;  printf          1   28[COMRAM] char 
 21863 ;; Return value:  Size  Location     Type
 21864 ;;                  2   12[COMRAM] int 
 21865 ;; Registers used:
 21866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21867 ;; Tracked objects:
 21868 ;;		On entry : 0/0
 21869 ;;		On exit  : 0/0
 21870 ;;		Unchanged: 0/0
 21871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21872 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21873 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21874 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21875 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21876 ;;Total ram usage:       29 bytes
 21877 ;; Hardware stack levels used:    1
 21878 ;; Hardware stack levels required when called:    2
 21879 ;; This function calls:
 21880 ;;		i2___lwdiv
 21881 ;;		i2___lwmod
 21882 ;;		i2___wmul
 21883 ;;		i2_isdigit
 21884 ;;		i2_putch
 21885 ;; This function is called by:
 21886 ;;		_change_state_to_menu_11
 21887 ;;		_change_state_to_menu_23
 21888 ;;		_change_state_to_logs_11
 21889 ;;		_change_state_to_logs_12
 21890 ;;		_change_state_to_logs_22
 21891 ;;		_change_state_to_logs_23
 21892 ;;		_change_state_to_logs_33
 21893 ;;		_change_state_to_logs_34
 21894 ;;		_printSortTimer
 21895 ;;		i2_change_state_to_menu_start
 21896 ;;		i2_change_state_to_menu_12
 21897 ;;		i2_change_state_to_menu_22
 21898 ;;		i2_printRTC
 21899 ;; This function uses a non-reentrant model
 21900 ;;
 21901                           
 21902                           	psect	text81
 21903  001DCC                     __ptext81:
 21904                           	opt stack 0
 21905  001DCC                     i2_printf:
 21906                           	opt stack 19
 21907                           
 21908                           ;doprnt.c: 466: va_list ap;
 21909                           ;doprnt.c: 499: signed char c;
 21910                           ;doprnt.c: 501: int width;
 21911                           ;doprnt.c: 506: signed char prec;
 21912                           ;doprnt.c: 508: unsigned char flag;
 21913                           ;doprnt.c: 523: union {
 21914                           ;doprnt.c: 524: unsigned long vd;
 21915                           ;doprnt.c: 525: double integ;
 21916                           ;doprnt.c: 526: } tmpval;
 21917                           ;doprnt.c: 528: unsigned int val;
 21918                           ;doprnt.c: 529: unsigned len;
 21919                           ;doprnt.c: 530: const char * cp;
 21920                           ;doprnt.c: 533: *ap = __va_start();
 21921                           
 21922                           ;incstack = 0
 21923  001DCC  0E0F               	movlw	low (?i2_printf+2)
 21924  001DCE  6E20               	movwf	i2printf@ap,c
 21925  001DD0  0E00               	movlw	high (?i2_printf+2)
 21926  001DD2  6E21               	movwf	i2printf@ap+1,c
 21927                           
 21928                           ;doprnt.c: 536: while(c = *f++) {
 21929  001DD4  D1A4               	goto	i2l6616
 21930  001DD6                     i2l6486:
 21931                           
 21932                           ;doprnt.c: 538: if(c != '%')
 21933  001DD6  0E25               	movlw	37
 21934  001DD8  1827               	xorwf	i2printf@c,w,c
 21935  001DDA  B4D8               	btfsc	status,2,c
 21936  001DDC  D004               	goto	i2l6490
 21937                           
 21938                           ;doprnt.c: 540: {
 21939                           ;doprnt.c: 541: (putch(c) );
 21940  001DDE  5027               	movf	i2printf@c,w,c
 21941  001DE0  EC75  F029         	call	i2_putch
 21942                           
 21943                           ;doprnt.c: 542: continue;
 21944  001DE4  D19C               	goto	i2l6616
 21945  001DE6                     i2l6490:
 21946                           
 21947                           ;doprnt.c: 543: }
 21948                           ;doprnt.c: 546: width = 0;
 21949  001DE6  0E00               	movlw	0
 21950  001DE8  6E29               	movwf	i2printf@width+1,c
 21951  001DEA  0E00               	movlw	0
 21952  001DEC  6E28               	movwf	i2printf@width,c
 21953                           
 21954                           ;doprnt.c: 548: flag = 0;
 21955  001DEE  0E00               	movlw	0
 21956  001DF0  6E26               	movwf	i2printf@flag,c
 21957                           
 21958                           ;doprnt.c: 551: switch(*f) {
 21959                           
 21960                           ;doprnt.c: 550: for(;;) {
 21961  001DF2  D003               	goto	i2l6496
 21962  001DF4                     i2l6492:
 21963                           
 21964                           ;doprnt.c: 580: flag |= 0x04;
 21965  001DF4  8426               	bsf	i2printf@flag,2,c
 21966                           
 21967                           ;doprnt.c: 581: f++;
 21968  001DF6  4A0D               	infsnz	i2printf@f,f,c
 21969  001DF8  2A0E               	incf	i2printf@f+1,f,c
 21970  001DFA                     i2l6496:
 21971  001DFA  C00D  FFF6         	movff	i2printf@f,tblptrl
 21972  001DFE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21973  001E02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21974  001E02  6AF8               	clrf	tblptru,c
 21975  001E04                     	endif
 21976  001E04                     	if	0	;tblptru may be non-zero
 21977  001E04                     	endif
 21978  001E04  0008               	tblrd		*
 21979  001E06  50F5               	movf	tablat,w,c
 21980                           
 21981                           ; Switch size 1, requested type "space"
 21982                           ; Number of cases is 1, Range of values is 48 to 48
 21983                           ; switch strategies available:
 21984                           ; Name         Instructions Cycles
 21985                           ; simple_byte            4     3 (average)
 21986                           ;	Chosen strategy is simple_byte
 21987  001E08  0A30               	xorlw	48	; case 48
 21988  001E0A  B4D8               	btfsc	status,2,c
 21989  001E0C  D7F3               	goto	i2l6492
 21990                           
 21991                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21992                           
 21993                           ;doprnt.c: 586: }
 21994                           
 21995                           ;doprnt.c: 585: break;
 21996  001E0E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21997  001E12  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21998  001E16                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21999  001E16  6AF8               	clrf	tblptru,c
 22000  001E18                     	endif
 22001  001E18                     	if	0	;tblptru may be non-zero
 22002  001E18                     	endif
 22003  001E18  0008               	tblrd		*
 22004  001E1A  50F5               	movf	tablat,w,c
 22005  001E1C  EC11  F029         	call	i2_isdigit
 22006  001E20  A0D8               	btfss	status,0,c
 22007  001E22  D0A6               	goto	i2l6544
 22008                           
 22009                           ;doprnt.c: 598: width = 0;
 22010  001E24  0E00               	movlw	0
 22011  001E26  6E29               	movwf	i2printf@width+1,c
 22012  001E28  0E00               	movlw	0
 22013  001E2A  6E28               	movwf	i2printf@width,c
 22014  001E2C                     i2l6502:
 22015                           
 22016                           ;doprnt.c: 600: width *= 10;
 22017  001E2C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22018  001E30  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22019  001E34  0E00               	movlw	0
 22020  001E36  6E04               	movwf	i2___wmul@multiplicand+1,c
 22021  001E38  0E0A               	movlw	10
 22022  001E3A  6E03               	movwf	i2___wmul@multiplicand,c
 22023  001E3C  ECB7  F028         	call	i2___wmul	;wreg free
 22024  001E40  C001  F028         	movff	?i2___wmul,i2printf@width
 22025  001E44  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22026                           
 22027                           ;doprnt.c: 601: width += *f++ - '0';
 22028  001E48  0ED0               	movlw	208
 22029  001E4A  6E19               	movwf	??i2_printf& (0+255),c
 22030  001E4C  0EFF               	movlw	255
 22031  001E4E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22032  001E50  C00D  FFF6         	movff	i2printf@f,tblptrl
 22033  001E54  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22034  001E58                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22035  001E58  6AF8               	clrf	tblptru,c
 22036  001E5A                     	endif
 22037  001E5A                     	if	0	;tblptru may be non-zero
 22038  001E5A                     	endif
 22039  001E5A  0008               	tblrd		*
 22040  001E5C  50F5               	movf	tablat,w,c
 22041  001E5E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22042  001E60  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22043  001E62  5019               	movf	??i2_printf,w,c
 22044  001E64  261B               	addwf	??i2_printf+2,f,c
 22045  001E66  501A               	movf	??i2_printf+1,w,c
 22046  001E68  221C               	addwfc	??i2_printf+3,f,c
 22047  001E6A  501B               	movf	??i2_printf+2,w,c
 22048  001E6C  2628               	addwf	i2printf@width,f,c
 22049  001E6E  501C               	movf	??i2_printf+3,w,c
 22050  001E70  2229               	addwfc	i2printf@width+1,f,c
 22051  001E72  4A0D               	infsnz	i2printf@f,f,c
 22052  001E74  2A0E               	incf	i2printf@f+1,f,c
 22053                           
 22054                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22055  001E76  C00D  FFF6         	movff	i2printf@f,tblptrl
 22056  001E7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22057  001E7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22058  001E7E  6AF8               	clrf	tblptru,c
 22059  001E80                     	endif
 22060  001E80                     	if	0	;tblptru may be non-zero
 22061  001E80                     	endif
 22062  001E80  0008               	tblrd		*
 22063  001E82  50F5               	movf	tablat,w,c
 22064  001E84  EC11  F029         	call	i2_isdigit
 22065  001E88  A0D8               	btfss	status,0,c
 22066  001E8A  D072               	goto	i2l6544
 22067  001E8C  D7CF               	goto	i2l6502
 22068  001E8E                     i2l6510:
 22069                           
 22070                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22071  001E8E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22072  001E92  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22073  001E96  CFDE F01E          	movff	postinc2,i2printf@cp
 22074  001E9A  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22075  001E9E  0E02               	movlw	2
 22076  001EA0  2620               	addwf	i2printf@ap,f,c
 22077  001EA2  0E00               	movlw	0
 22078  001EA4  2221               	addwfc	i2printf@ap+1,f,c
 22079                           
 22080                           ;doprnt.c: 740: if(!cp)
 22081  001EA6  501E               	movf	i2printf@cp,w,c
 22082  001EA8  101F               	iorwf	i2printf@cp+1,w,c
 22083  001EAA  A4D8               	btfss	status,2,c
 22084  001EAC  D004               	goto	i2l6518
 22085                           
 22086                           ;doprnt.c: 741: cp = "(null)";
 22087  001EAE  0EB6               	movlw	low STR_126
 22088  001EB0  6E1E               	movwf	i2printf@cp,c
 22089  001EB2  0EFF               	movlw	high STR_126
 22090  001EB4  6E1F               	movwf	i2printf@cp+1,c
 22091  001EB6                     i2l6518:
 22092                           
 22093                           ;doprnt.c: 745: len = 0;
 22094  001EB6  0E00               	movlw	0
 22095  001EB8  6E23               	movwf	i2printf@len+1,c
 22096  001EBA  0E00               	movlw	0
 22097  001EBC  6E22               	movwf	i2printf@len,c
 22098                           
 22099                           ;doprnt.c: 746: while(cp[len])
 22100  001EBE  D002               	goto	i2l6522
 22101  001EC0                     i2l6520:
 22102                           
 22103                           ;doprnt.c: 747: len++;
 22104  001EC0  4A22               	infsnz	i2printf@len,f,c
 22105  001EC2  2A23               	incf	i2printf@len+1,f,c
 22106  001EC4                     i2l6522:
 22107  001EC4  5022               	movf	i2printf@len,w,c
 22108  001EC6  241E               	addwf	i2printf@cp,w,c
 22109  001EC8  6E19               	movwf	??i2_printf& (0+255),c
 22110  001ECA  5023               	movf	i2printf@len+1,w,c
 22111  001ECC  201F               	addwfc	i2printf@cp+1,w,c
 22112  001ECE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22113  001ED0  C019  FFF6         	movff	??i2_printf,tblptrl
 22114  001ED4  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22115  001ED8  0E00               	movlw	low (__mediumconst shr (0+16))
 22116  001EDA  6EF8               	movwf	tblptru,c
 22117  001EDC  0E0F               	movlw	(high __ramtop+-1)
 22118  001EDE  64F7               	cpfsgt	tblptrh,c
 22119  001EE0  D003               	bra	i2u498_47
 22120  001EE2  0008               	tblrd		*
 22121  001EE4  50F5               	movf	tablat,w,c
 22122  001EE6  D005               	bra	i2u498_40
 22123  001EE8                     i2u498_47:
 22124  001EE8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22125  001EEC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22126  001EF0  50EF               	movf	indf0,w,c
 22127  001EF2                     i2u498_40:
 22128  001EF2  0900               	iorlw	0
 22129  001EF4  A4D8               	btfss	status,2,c
 22130  001EF6  D7E4               	goto	i2l6520
 22131                           
 22132                           ;doprnt.c: 757: if(width > len)
 22133  001EF8  5028               	movf	i2printf@width,w,c
 22134  001EFA  5C22               	subwf	i2printf@len,w,c
 22135  001EFC  5029               	movf	i2printf@width+1,w,c
 22136  001EFE  5823               	subwfb	i2printf@len+1,w,c
 22137  001F00  B0D8               	btfsc	status,0,c
 22138  001F02  D005               	goto	i2l6528
 22139                           
 22140                           ;doprnt.c: 758: width -= len;
 22141  001F04  5022               	movf	i2printf@len,w,c
 22142  001F06  5E28               	subwf	i2printf@width,f,c
 22143  001F08  5023               	movf	i2printf@len+1,w,c
 22144  001F0A  5A29               	subwfb	i2printf@width+1,f,c
 22145  001F0C  D008               	goto	i2l6532
 22146  001F0E                     i2l6528:
 22147                           
 22148                           ;doprnt.c: 759: else
 22149                           ;doprnt.c: 760: width = 0;
 22150  001F0E  0E00               	movlw	0
 22151  001F10  6E29               	movwf	i2printf@width+1,c
 22152  001F12  0E00               	movlw	0
 22153  001F14  6E28               	movwf	i2printf@width,c
 22154                           
 22155                           ;doprnt.c: 764: while(width--)
 22156  001F16  D003               	goto	i2l6532
 22157  001F18                     i2l6530:
 22158                           
 22159                           ;doprnt.c: 765: (putch(' ') );
 22160  001F18  0E20               	movlw	32
 22161  001F1A  EC75  F029         	call	i2_putch
 22162  001F1E                     i2l6532:
 22163  001F1E  0628               	decf	i2printf@width,f,c
 22164  001F20  A0D8               	btfss	status,0,c
 22165  001F22  0629               	decf	i2printf@width+1,f,c
 22166  001F24  2828               	incf	i2printf@width,w,c
 22167  001F26  E1F8               	bnz	i2l6530
 22168  001F28  2829               	incf	i2printf@width+1,w,c
 22169  001F2A  B4D8               	btfsc	status,2,c
 22170  001F2C  D016               	goto	i2l6538
 22171  001F2E  D7F4               	goto	i2l6530
 22172  001F30                     i2l6534:
 22173                           
 22174                           ;doprnt.c: 768: (putch(*cp++) );
 22175  001F30  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22176  001F34  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22177  001F38  0E00               	movlw	low (__mediumconst shr (0+16))
 22178  001F3A  6EF8               	movwf	tblptru,c
 22179  001F3C  0E0F               	movlw	(high __ramtop+-1)
 22180  001F3E  64F7               	cpfsgt	tblptrh,c
 22181  001F40  D003               	bra	i2u502_47
 22182  001F42  0008               	tblrd		*
 22183  001F44  50F5               	movf	tablat,w,c
 22184  001F46  D005               	bra	i2u502_40
 22185  001F48                     i2u502_47:
 22186  001F48  CFF6 FFE9          	movff	tblptrl,fsr0l
 22187  001F4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 22188  001F50  50EF               	movf	indf0,w,c
 22189  001F52                     i2u502_40:
 22190  001F52  EC75  F029         	call	i2_putch
 22191  001F56  4A1E               	infsnz	i2printf@cp,f,c
 22192  001F58  2A1F               	incf	i2printf@cp+1,f,c
 22193  001F5A                     i2l6538:
 22194  001F5A  0622               	decf	i2printf@len,f,c
 22195  001F5C  A0D8               	btfss	status,0,c
 22196  001F5E  0623               	decf	i2printf@len+1,f,c
 22197  001F60  2822               	incf	i2printf@len,w,c
 22198  001F62  E1E6               	bnz	i2l6534
 22199  001F64  2823               	incf	i2printf@len+1,w,c
 22200  001F66  B4D8               	btfsc	status,2,c
 22201  001F68  D0DA               	goto	i2l6616
 22202  001F6A  D7E2               	goto	i2l6534
 22203  001F6C                     i2l6540:
 22204                           
 22205                           ;doprnt.c: 818: flag |= 0x40;
 22206  001F6C  8C26               	bsf	i2printf@flag,6,c
 22207                           
 22208                           ;doprnt.c: 822: }
 22209                           
 22210                           ;doprnt.c: 819: break;
 22211  001F6E  D01B               	goto	i2l1410
 22212  001F70                     i2l6544:
 22213  001F70  C00D  FFF6         	movff	i2printf@f,tblptrl
 22214  001F74  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22215  001F78  4A0D               	infsnz	i2printf@f,f,c
 22216  001F7A  2A0E               	incf	i2printf@f+1,f,c
 22217  001F7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22218  001F7C  6AF8               	clrf	tblptru,c
 22219  001F7E                     	endif
 22220  001F7E                     	if	0	;tblptru may be non-zero
 22221  001F7E                     	endif
 22222  001F7E  0008               	tblrd		*
 22223  001F80  CFF5 F027          	movff	tablat,i2printf@c
 22224  001F84  5027               	movf	i2printf@c,w,c
 22225                           
 22226                           ; Switch size 1, requested type "space"
 22227                           ; Number of cases is 5, Range of values is 0 to 117
 22228                           ; switch strategies available:
 22229                           ; Name         Instructions Cycles
 22230                           ; simple_byte           16     9 (average)
 22231                           ;	Chosen strategy is simple_byte
 22232  001F86  0A00               	xorlw	0	; case 0
 22233  001F88  B4D8               	btfsc	status,2,c
 22234  001F8A  0012               	return	
 22235  001F8C  0A64               	xorlw	100	; case 100
 22236  001F8E  B4D8               	btfsc	status,2,c
 22237  001F90  D00A               	goto	i2l1410
 22238  001F92  0A0D               	xorlw	13	; case 105
 22239  001F94  B4D8               	btfsc	status,2,c
 22240  001F96  D007               	goto	i2l1410
 22241  001F98  0A1A               	xorlw	26	; case 115
 22242  001F9A  B4D8               	btfsc	status,2,c
 22243  001F9C  D778               	goto	i2l6510
 22244  001F9E  0A06               	xorlw	6	; case 117
 22245  001FA0  B4D8               	btfsc	status,2,c
 22246  001FA2  D7E4               	goto	i2l6540
 22247  001FA4  D0BC               	goto	i2l6616
 22248  001FA6                     i2l1410:
 22249                           
 22250                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22251  001FA6  BC26               	btfsc	i2printf@flag,6,c
 22252  001FA8  D015               	goto	i2l6556
 22253                           
 22254                           ;doprnt.c: 1253: {
 22255                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22256  001FAA  C020  FFD9         	movff	i2printf@ap,fsr2l
 22257  001FAE  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22258  001FB2  CFDE F024          	movff	postinc2,i2printf@val
 22259  001FB6  CFDD F025          	movff	postdec2,i2printf@val+1
 22260  001FBA  0E02               	movlw	2
 22261  001FBC  2620               	addwf	i2printf@ap,f,c
 22262  001FBE  0E00               	movlw	0
 22263  001FC0  2221               	addwfc	i2printf@ap+1,f,c
 22264                           
 22265                           ;doprnt.c: 1261: if((int)val < 0) {
 22266  001FC2  AE25               	btfss	i2printf@val+1,7,c
 22267  001FC4  D013               	goto	i2l6560
 22268                           
 22269                           ;doprnt.c: 1262: flag |= 0x03;
 22270  001FC6  0E03               	movlw	3
 22271  001FC8  1226               	iorwf	i2printf@flag,f,c
 22272                           
 22273                           ;doprnt.c: 1263: val = -val;
 22274  001FCA  6C24               	negf	i2printf@val,c
 22275  001FCC  1E25               	comf	i2printf@val+1,f,c
 22276  001FCE  B0D8               	btfsc	status,0,c
 22277  001FD0  2A25               	incf	i2printf@val+1,f,c
 22278                           
 22279                           ;doprnt.c: 1264: }
 22280                           ;doprnt.c: 1266: }
 22281  001FD2  D00C               	goto	i2l6560
 22282  001FD4                     i2l6556:
 22283                           
 22284                           ;doprnt.c: 1268: else
 22285                           ;doprnt.c: 1273: {
 22286                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22287  001FD4  C020  FFD9         	movff	i2printf@ap,fsr2l
 22288  001FD8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22289  001FDC  CFDE F024          	movff	postinc2,i2printf@val
 22290  001FE0  CFDD F025          	movff	postdec2,i2printf@val+1
 22291  001FE4  0E02               	movlw	2
 22292  001FE6  2620               	addwf	i2printf@ap,f,c
 22293  001FE8  0E00               	movlw	0
 22294  001FEA  2221               	addwfc	i2printf@ap+1,f,c
 22295  001FEC                     i2l6560:
 22296                           
 22297                           ;doprnt.c: 1287: }
 22298                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22299  001FEC  0E01               	movlw	1
 22300  001FEE  6E27               	movwf	i2printf@c,c
 22301  001FF0                     i2l6562:
 22302  001FF0  0E05               	movlw	5
 22303  001FF2  1827               	xorwf	i2printf@c,w,c
 22304  001FF4  B4D8               	btfsc	status,2,c
 22305  001FF6  D015               	goto	i2l6574
 22306                           
 22307                           ;doprnt.c: 1306: if(val < dpowers[c])
 22308  001FF8  5027               	movf	i2printf@c,w,c
 22309  001FFA  0D02               	mullw	2
 22310  001FFC  0E00               	movlw	low _dpowers
 22311  001FFE  24F3               	addwf	prodl,w,c
 22312  002000  6EF6               	movwf	tblptrl,c
 22313  002002  0EFB               	movlw	high _dpowers
 22314  002004  20F4               	addwfc	prodh,w,c
 22315  002006  6EF7               	movwf	tblptrh,c
 22316  002008                     	if	1	;There are 3 active tblptr bytes
 22317  002008  6AF8               	clrf	tblptru,c
 22318  00200A  0E00               	movlw	low (__mediumconst shr (0+16))
 22319  00200C  22F8               	addwfc	tblptru,f,c
 22320  00200E                     	endif
 22321  00200E  0009               	tblrd		*+
 22322  002010  50F5               	movf	tablat,w,c
 22323  002012  5C24               	subwf	i2printf@val,w,c
 22324  002014  0009               	tblrd		*+
 22325  002016  50F5               	movf	tablat,w,c
 22326  002018  5825               	subwfb	i2printf@val+1,w,c
 22327  00201A  A0D8               	btfss	status,0,c
 22328  00201C  D002               	goto	i2l6574
 22329                           
 22330                           ;doprnt.c: 1307: break;
 22331  00201E  2A27               	incf	i2printf@c,f,c
 22332  002020  D7E7               	goto	i2l6562
 22333  002022                     i2l6574:
 22334                           
 22335                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22336  002022  5028               	movf	i2printf@width,w,c
 22337  002024  1029               	iorwf	i2printf@width+1,w,c
 22338  002026  B4D8               	btfsc	status,2,c
 22339  002028  D009               	goto	i2l6580
 22340  00202A  C026  F019         	movff	i2printf@flag,??i2_printf
 22341  00202E  0E03               	movlw	3
 22342  002030  1619               	andwf	??i2_printf,f,c
 22343  002032  B4D8               	btfsc	status,2,c
 22344  002034  D003               	goto	i2l6580
 22345                           
 22346                           ;doprnt.c: 1346: width--;
 22347  002036  0628               	decf	i2printf@width,f,c
 22348  002038  A0D8               	btfss	status,0,c
 22349  00203A  0629               	decf	i2printf@width+1,f,c
 22350  00203C                     i2l6580:
 22351                           
 22352                           ;doprnt.c: 1381: if(width > c)
 22353  00203C  0E80               	movlw	128
 22354  00203E  BE27               	btfsc	i2printf@c,7,c
 22355  002040  0E7F               	movlw	127
 22356  002042  6E19               	movwf	??i2_printf& (0+255),c
 22357  002044  5028               	movf	i2printf@width,w,c
 22358  002046  5C27               	subwf	i2printf@c,w,c
 22359  002048  5029               	movf	i2printf@width+1,w,c
 22360  00204A  0A80               	xorlw	128
 22361  00204C  5819               	subwfb	??i2_printf& (0+255),w,c
 22362  00204E  B0D8               	btfsc	status,0,c
 22363  002050  D007               	goto	i2l6584
 22364                           
 22365                           ;doprnt.c: 1382: width -= c;
 22366  002052  5027               	movf	i2printf@c,w,c
 22367  002054  5E28               	subwf	i2printf@width,f,c
 22368  002056  0E00               	movlw	0
 22369  002058  BE27               	btfsc	i2printf@c,7,c
 22370  00205A  0EFF               	movlw	255
 22371  00205C  5A29               	subwfb	i2printf@width+1,f,c
 22372  00205E  D004               	goto	i2l6586
 22373  002060                     i2l6584:
 22374                           
 22375                           ;doprnt.c: 1383: else
 22376                           ;doprnt.c: 1384: width = 0;
 22377  002060  0E00               	movlw	0
 22378  002062  6E29               	movwf	i2printf@width+1,c
 22379  002064  0E00               	movlw	0
 22380  002066  6E28               	movwf	i2printf@width,c
 22381  002068                     i2l6586:
 22382                           
 22383                           ;doprnt.c: 1387: if(flag & 0x04) {
 22384  002068  A426               	btfss	i2printf@flag,2,c
 22385  00206A  D014               	goto	i2l6598
 22386                           
 22387                           ;doprnt.c: 1392: if(flag & 0x03)
 22388  00206C  C026  F019         	movff	i2printf@flag,??i2_printf
 22389  002070  0E03               	movlw	3
 22390  002072  1619               	andwf	??i2_printf,f,c
 22391  002074  B4D8               	btfsc	status,2,c
 22392  002076  D003               	goto	i2l6592
 22393                           
 22394                           ;doprnt.c: 1393: (putch('-') );
 22395  002078  0E2D               	movlw	45
 22396  00207A  EC75  F029         	call	i2_putch
 22397  00207E                     i2l6592:
 22398                           
 22399                           ;doprnt.c: 1415: if(width)
 22400  00207E  5028               	movf	i2printf@width,w,c
 22401  002080  1029               	iorwf	i2printf@width+1,w,c
 22402  002082  B4D8               	btfsc	status,2,c
 22403  002084  D01E               	goto	i2l6608
 22404                           
 22405                           ;doprnt.c: 1417: (putch('0') );
 22406                           
 22407                           ;doprnt.c: 1416: do
 22408  002086  0E30               	movlw	48
 22409  002088  EC75  F029         	call	i2_putch
 22410                           
 22411                           ;doprnt.c: 1418: while(--width);
 22412  00208C  0628               	decf	i2printf@width,f,c
 22413  00208E  A0D8               	btfss	status,0,c
 22414  002090  0629               	decf	i2printf@width+1,f,c
 22415  002092  D7F5               	goto	i2l6592
 22416  002094                     i2l6598:
 22417                           
 22418                           ;doprnt.c: 1422: {
 22419                           ;doprnt.c: 1424: if(width
 22420                           ;doprnt.c: 1428: )
 22421  002094  5028               	movf	i2printf@width,w,c
 22422  002096  1029               	iorwf	i2printf@width+1,w,c
 22423  002098  B4D8               	btfsc	status,2,c
 22424  00209A  D00A               	goto	i2l6604
 22425  00209C                     i2l6600:
 22426                           
 22427                           ;doprnt.c: 1430: (putch(' ') );
 22428  00209C  0E20               	movlw	32
 22429  00209E  EC75  F029         	call	i2_putch
 22430                           
 22431                           ;doprnt.c: 1431: while(--width);
 22432  0020A2  0628               	decf	i2printf@width,f,c
 22433  0020A4  A0D8               	btfss	status,0,c
 22434  0020A6  0629               	decf	i2printf@width+1,f,c
 22435  0020A8  5028               	movf	i2printf@width,w,c
 22436  0020AA  1029               	iorwf	i2printf@width+1,w,c
 22437  0020AC  A4D8               	btfss	status,2,c
 22438  0020AE  D7F6               	goto	i2l6600
 22439  0020B0                     i2l6604:
 22440                           
 22441                           ;doprnt.c: 1438: if(flag & 0x03)
 22442  0020B0  C026  F019         	movff	i2printf@flag,??i2_printf
 22443  0020B4  0E03               	movlw	3
 22444  0020B6  1619               	andwf	??i2_printf,f,c
 22445  0020B8  B4D8               	btfsc	status,2,c
 22446  0020BA  D003               	goto	i2l6608
 22447                           
 22448                           ;doprnt.c: 1439: (putch('-') );
 22449  0020BC  0E2D               	movlw	45
 22450  0020BE  EC75  F029         	call	i2_putch
 22451  0020C2                     i2l6608:
 22452                           
 22453                           ;doprnt.c: 1469: }
 22454                           ;doprnt.c: 1472: prec = c;
 22455  0020C2  C027  F01D         	movff	i2printf@c,i2printf@prec
 22456                           
 22457                           ;doprnt.c: 1474: while(prec--) {
 22458  0020C6  D027               	goto	i2l6614
 22459  0020C8                     i2l6610:
 22460                           
 22461                           ;doprnt.c: 1478: {
 22462                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22463  0020C8  501D               	movf	i2printf@prec,w,c
 22464  0020CA  0D02               	mullw	2
 22465  0020CC  0E00               	movlw	low _dpowers
 22466  0020CE  24F3               	addwf	prodl,w,c
 22467  0020D0  6EF6               	movwf	tblptrl,c
 22468  0020D2  0EFB               	movlw	high _dpowers
 22469  0020D4  20F4               	addwfc	prodh,w,c
 22470  0020D6  6EF7               	movwf	tblptrh,c
 22471  0020D8                     	if	1	;There are 3 active tblptr bytes
 22472  0020D8  6AF8               	clrf	tblptru,c
 22473  0020DA  0E00               	movlw	low (__mediumconst shr (0+16))
 22474  0020DC  22F8               	addwfc	tblptru,f,c
 22475  0020DE                     	endif
 22476  0020DE  0009               	tblrd		*+
 22477  0020E0  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22478  0020E4  000A               	tblrd		*-
 22479  0020E6  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22480  0020EA  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22481  0020EE  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22482  0020F2  ECB0  F025         	call	i2___lwdiv	;wreg free
 22483  0020F6  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22484  0020FA  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22485  0020FE  0E00               	movlw	0
 22486  002100  6E04               	movwf	i2___lwmod@divisor+1,c
 22487  002102  0E0A               	movlw	10
 22488  002104  6E03               	movwf	i2___lwmod@divisor,c
 22489  002106  EC6F  F026         	call	i2___lwmod	;wreg free
 22490  00210A  5001               	movf	?i2___lwmod,w,c
 22491  00210C  0F30               	addlw	48
 22492  00210E  6E27               	movwf	i2printf@c,c
 22493                           
 22494                           ;doprnt.c: 1523: }
 22495                           ;doprnt.c: 1524: (putch(c) );
 22496  002110  5027               	movf	i2printf@c,w,c
 22497  002112  EC75  F029         	call	i2_putch
 22498  002116                     i2l6614:
 22499  002116  061D               	decf	i2printf@prec,f,c
 22500  002118  281D               	incf	i2printf@prec,w,c
 22501  00211A  A4D8               	btfss	status,2,c
 22502  00211C  D7D5               	goto	i2l6610
 22503  00211E                     i2l6616:
 22504  00211E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22505  002122  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22506  002126  4A0D               	infsnz	i2printf@f,f,c
 22507  002128  2A0E               	incf	i2printf@f+1,f,c
 22508  00212A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22509  00212A  6AF8               	clrf	tblptru,c
 22510  00212C                     	endif
 22511  00212C                     	if	0	;tblptru may be non-zero
 22512  00212C                     	endif
 22513  00212C  0008               	tblrd		*
 22514  00212E  CFF5 F027          	movff	tablat,i2printf@c
 22515  002132  5027               	movf	i2printf@c,w,c
 22516  002134  B4D8               	btfsc	status,2,c
 22517  002136  0012               	return	
 22518  002138  D64E               	goto	i2l6486
 22519  00213A                     __end_ofi2_printf:
 22520                           	opt stack 0
 22521                           pclatu	equ	0xFFB
 22522                           pclath	equ	0xFFA
 22523                           tblptru	equ	0xFF8
 22524                           tblptrh	equ	0xFF7
 22525                           tblptrl	equ	0xFF6
 22526                           tablat	equ	0xFF5
 22527                           prodh	equ	0xFF4
 22528                           prodl	equ	0xFF3
 22529                           intcon	equ	0xFF2
 22530                           intcon2	equ	0xFF1
 22531                           intcon3	equ	0xFF0
 22532                           indf0	equ	0xFEF
 22533                           postinc0	equ	0xFEE
 22534                           fsr0h	equ	0xFEA
 22535                           fsr0l	equ	0xFE9
 22536                           wreg	equ	0xFE8
 22537                           postdec1	equ	0xFE5
 22538                           fsr1h	equ	0xFE2
 22539                           fsr1l	equ	0xFE1
 22540                           indf2	equ	0xFDF
 22541                           postinc2	equ	0xFDE
 22542                           postdec2	equ	0xFDD
 22543                           fsr2h	equ	0xFDA
 22544                           fsr2l	equ	0xFD9
 22545                           status	equ	0xFD8
 22546                           
 22547 ;; *************** function i2_putch *****************
 22548 ;; Defined at:
 22549 ;;		line 20 in file "lcd.c"
 22550 ;; Parameters:    Size  Location     Type
 22551 ;;  data            1    wreg     unsigned char 
 22552 ;; Auto vars:     Size  Location     Type
 22553 ;;  data            1    2[COMRAM] unsigned char 
 22554 ;; Return value:  Size  Location     Type
 22555 ;;                  1    wreg      void 
 22556 ;; Registers used:
 22557 ;;		wreg, status,2, status,0, cstack
 22558 ;; Tracked objects:
 22559 ;;		On entry : 0/0
 22560 ;;		On exit  : 0/0
 22561 ;;		Unchanged: 0/0
 22562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22567 ;;Total ram usage:        1 bytes
 22568 ;; Hardware stack levels used:    1
 22569 ;; Hardware stack levels required when called:    1
 22570 ;; This function calls:
 22571 ;;		i2_lcdNibble
 22572 ;; This function is called by:
 22573 ;;		i2_printf
 22574 ;; This function uses a non-reentrant model
 22575 ;;
 22576                           
 22577                           	psect	text82
 22578  0052EA                     __ptext82:
 22579                           	opt stack 0
 22580  0052EA                     i2_putch:
 22581                           	opt stack 19
 22582                           
 22583                           ;incstack = 0
 22584                           ;i2putch@data stored from wreg
 22585  0052EA  6E03               	movwf	i2putch@data,c
 22586                           
 22587                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22588  0052EC  848C               	bsf	3980,2,c	;volatile
 22589                           
 22590                           ;lcd.c: 22: lcdNibble(data);
 22591  0052EE  5003               	movf	i2putch@data,w,c
 22592  0052F0  EC85  F025         	call	i2_lcdNibble
 22593  0052F4  0012               	return		;funcret
 22594  0052F6                     __end_ofi2_putch:
 22595                           	opt stack 0
 22596                           pclatu	equ	0xFFB
 22597                           pclath	equ	0xFFA
 22598                           tblptru	equ	0xFF8
 22599                           tblptrh	equ	0xFF7
 22600                           tblptrl	equ	0xFF6
 22601                           tablat	equ	0xFF5
 22602                           prodh	equ	0xFF4
 22603                           prodl	equ	0xFF3
 22604                           intcon	equ	0xFF2
 22605                           intcon2	equ	0xFF1
 22606                           intcon3	equ	0xFF0
 22607                           indf0	equ	0xFEF
 22608                           postinc0	equ	0xFEE
 22609                           fsr0h	equ	0xFEA
 22610                           fsr0l	equ	0xFE9
 22611                           wreg	equ	0xFE8
 22612                           postdec1	equ	0xFE5
 22613                           fsr1h	equ	0xFE2
 22614                           fsr1l	equ	0xFE1
 22615                           indf2	equ	0xFDF
 22616                           postinc2	equ	0xFDE
 22617                           postdec2	equ	0xFDD
 22618                           fsr2h	equ	0xFDA
 22619                           fsr2l	equ	0xFD9
 22620                           status	equ	0xFD8
 22621                           
 22622 ;; *************** function i2_isdigit *****************
 22623 ;; Defined at:
 22624 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22625 ;; Parameters:    Size  Location     Type
 22626 ;;  c               1    wreg     unsigned char 
 22627 ;; Auto vars:     Size  Location     Type
 22628 ;;  c               1    2[COMRAM] unsigned char 
 22629 ;; Return value:  Size  Location     Type
 22630 ;;		None               void
 22631 ;; Registers used:
 22632 ;;		wreg, status,2, status,0
 22633 ;; Tracked objects:
 22634 ;;		On entry : 0/0
 22635 ;;		On exit  : 0/0
 22636 ;;		Unchanged: 0/0
 22637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22641 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22642 ;;Total ram usage:        3 bytes
 22643 ;; Hardware stack levels used:    1
 22644 ;; This function calls:
 22645 ;;		Nothing
 22646 ;; This function is called by:
 22647 ;;		i2_printf
 22648 ;; This function uses a non-reentrant model
 22649 ;;
 22650                           
 22651                           	psect	text83
 22652  005222                     __ptext83:
 22653                           	opt stack 0
 22654  005222                     i2_isdigit:
 22655                           	opt stack 20
 22656                           
 22657                           ;incstack = 0
 22658                           ;i2isdigit@c stored from wreg
 22659  005222  6E03               	movwf	i2isdigit@c,c
 22660  005224  0E00               	movlw	0
 22661  005226  6E02               	movwf	i2_isdigit$2058,c
 22662  005228  0E3A               	movlw	58
 22663  00522A  6003               	cpfslt	i2isdigit@c,c
 22664  00522C  D005               	goto	i2l6186
 22665  00522E  0E2F               	movlw	47
 22666  005230  6403               	cpfsgt	i2isdigit@c,c
 22667  005232  D002               	goto	i2l6186
 22668  005234  0E01               	movlw	1
 22669  005236  6E02               	movwf	i2_isdigit$2058,c
 22670  005238                     i2l6186:
 22671  005238  C002  F001         	movff	i2_isdigit$2058,??i2_isdigit
 22672  00523C  3001               	rrcf	??i2_isdigit,w,c
 22673  00523E  0012               	return	
 22674  005240                     __end_ofi2_isdigit:
 22675                           	opt stack 0
 22676                           pclatu	equ	0xFFB
 22677                           pclath	equ	0xFFA
 22678                           tblptru	equ	0xFF8
 22679                           tblptrh	equ	0xFF7
 22680                           tblptrl	equ	0xFF6
 22681                           tablat	equ	0xFF5
 22682                           prodh	equ	0xFF4
 22683                           prodl	equ	0xFF3
 22684                           intcon	equ	0xFF2
 22685                           intcon2	equ	0xFF1
 22686                           intcon3	equ	0xFF0
 22687                           indf0	equ	0xFEF
 22688                           postinc0	equ	0xFEE
 22689                           fsr0h	equ	0xFEA
 22690                           fsr0l	equ	0xFE9
 22691                           wreg	equ	0xFE8
 22692                           postdec1	equ	0xFE5
 22693                           fsr1h	equ	0xFE2
 22694                           fsr1l	equ	0xFE1
 22695                           indf2	equ	0xFDF
 22696                           postinc2	equ	0xFDE
 22697                           postdec2	equ	0xFDD
 22698                           fsr2h	equ	0xFDA
 22699                           fsr2l	equ	0xFD9
 22700                           status	equ	0xFD8
 22701                           
 22702 ;; *************** function i2___wmul *****************
 22703 ;; Defined at:
 22704 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22705 ;; Parameters:    Size  Location     Type
 22706 ;;  multiplier      2    0[COMRAM] unsigned int 
 22707 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22708 ;; Auto vars:     Size  Location     Type
 22709 ;;  __wmul          2    4[COMRAM] unsigned int 
 22710 ;; Return value:  Size  Location     Type
 22711 ;;                  2    0[COMRAM] unsigned int 
 22712 ;; Registers used:
 22713 ;;		wreg, status,2, status,0, prodl, prodh
 22714 ;; Tracked objects:
 22715 ;;		On entry : 0/0
 22716 ;;		On exit  : 0/0
 22717 ;;		Unchanged: 0/0
 22718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22722 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22723 ;;Total ram usage:        6 bytes
 22724 ;; Hardware stack levels used:    1
 22725 ;; This function calls:
 22726 ;;		Nothing
 22727 ;; This function is called by:
 22728 ;;		_printSortTimer
 22729 ;;		_retrieveLog
 22730 ;;		i2_printf
 22731 ;; This function uses a non-reentrant model
 22732 ;;
 22733                           
 22734                           	psect	text84
 22735  00516E                     __ptext84:
 22736                           	opt stack 0
 22737  00516E                     i2___wmul:
 22738                           	opt stack 20
 22739                           
 22740                           ;incstack = 0
 22741  00516E  5001               	movf	i2___wmul@multiplier,w,c
 22742  005170  0203               	mulwf	i2___wmul@multiplicand,c
 22743  005172  CFF3 F005          	movff	prodl,i2___wmul@product
 22744  005176  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22745  00517A  5001               	movf	i2___wmul@multiplier,w,c
 22746  00517C  0204               	mulwf	i2___wmul@multiplicand+1,c
 22747  00517E  50F3               	movf	prodl,w,c
 22748  005180  2606               	addwf	i2___wmul@product+1,f,c
 22749  005182  5002               	movf	i2___wmul@multiplier+1,w,c
 22750  005184  0203               	mulwf	i2___wmul@multiplicand,c
 22751  005186  50F3               	movf	prodl,w,c
 22752  005188  2606               	addwf	i2___wmul@product+1,f,c
 22753  00518A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22754  00518E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22755  005192  0012               	return	
 22756  005194                     __end_ofi2___wmul:
 22757                           	opt stack 0
 22758                           pclatu	equ	0xFFB
 22759                           pclath	equ	0xFFA
 22760                           tblptru	equ	0xFF8
 22761                           tblptrh	equ	0xFF7
 22762                           tblptrl	equ	0xFF6
 22763                           tablat	equ	0xFF5
 22764                           prodh	equ	0xFF4
 22765                           prodl	equ	0xFF3
 22766                           intcon	equ	0xFF2
 22767                           intcon2	equ	0xFF1
 22768                           intcon3	equ	0xFF0
 22769                           indf0	equ	0xFEF
 22770                           postinc0	equ	0xFEE
 22771                           fsr0h	equ	0xFEA
 22772                           fsr0l	equ	0xFE9
 22773                           wreg	equ	0xFE8
 22774                           postdec1	equ	0xFE5
 22775                           fsr1h	equ	0xFE2
 22776                           fsr1l	equ	0xFE1
 22777                           indf2	equ	0xFDF
 22778                           postinc2	equ	0xFDE
 22779                           postdec2	equ	0xFDD
 22780                           fsr2h	equ	0xFDA
 22781                           fsr2l	equ	0xFD9
 22782                           status	equ	0xFD8
 22783                           
 22784 ;; *************** function i2___lwmod *****************
 22785 ;; Defined at:
 22786 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22787 ;; Parameters:    Size  Location     Type
 22788 ;;  dividend        2    0[COMRAM] unsigned int 
 22789 ;;  divisor         2    2[COMRAM] unsigned int 
 22790 ;; Auto vars:     Size  Location     Type
 22791 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22792 ;; Return value:  Size  Location     Type
 22793 ;;                  2    0[COMRAM] unsigned int 
 22794 ;; Registers used:
 22795 ;;		wreg, status,2, status,0
 22796 ;; Tracked objects:
 22797 ;;		On entry : 0/0
 22798 ;;		On exit  : 0/0
 22799 ;;		Unchanged: 0/0
 22800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22805 ;;Total ram usage:        5 bytes
 22806 ;; Hardware stack levels used:    1
 22807 ;; This function calls:
 22808 ;;		Nothing
 22809 ;; This function is called by:
 22810 ;;		_printSortTimer
 22811 ;;		i2_printf
 22812 ;; This function uses a non-reentrant model
 22813 ;;
 22814                           
 22815                           	psect	text85
 22816  004CDE                     __ptext85:
 22817                           	opt stack 0
 22818  004CDE                     i2___lwmod:
 22819                           	opt stack 20
 22820                           
 22821                           ;incstack = 0
 22822  004CDE  5003               	movf	i2___lwmod@divisor,w,c
 22823  004CE0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22824  004CE2  B4D8               	btfsc	status,2,c
 22825  004CE4  D018               	goto	i2l1867
 22826  004CE6  0E01               	movlw	1
 22827  004CE8  6E05               	movwf	i2___lwmod@counter,c
 22828  004CEA  D004               	goto	i2l6218
 22829  004CEC                     i2l6216:
 22830  004CEC  90D8               	bcf	status,0,c
 22831  004CEE  3603               	rlcf	i2___lwmod@divisor,f,c
 22832  004CF0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22833  004CF2  2A05               	incf	i2___lwmod@counter,f,c
 22834  004CF4                     i2l6218:
 22835  004CF4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22836  004CF6  D7FA               	goto	i2l6216
 22837  004CF8                     i2l6220:
 22838  004CF8  5003               	movf	i2___lwmod@divisor,w,c
 22839  004CFA  5C01               	subwf	i2___lwmod@dividend,w,c
 22840  004CFC  5004               	movf	i2___lwmod@divisor+1,w,c
 22841  004CFE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22842  004D00  A0D8               	btfss	status,0,c
 22843  004D02  D004               	goto	i2l6224
 22844  004D04  5003               	movf	i2___lwmod@divisor,w,c
 22845  004D06  5E01               	subwf	i2___lwmod@dividend,f,c
 22846  004D08  5004               	movf	i2___lwmod@divisor+1,w,c
 22847  004D0A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22848  004D0C                     i2l6224:
 22849  004D0C  90D8               	bcf	status,0,c
 22850  004D0E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22851  004D10  3203               	rrcf	i2___lwmod@divisor,f,c
 22852  004D12  2E05               	decfsz	i2___lwmod@counter,f,c
 22853  004D14  D7F1               	goto	i2l6220
 22854  004D16                     i2l1867:
 22855  004D16  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22856  004D1A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22857  004D1E  0012               	return		;funcret
 22858  004D20                     __end_ofi2___lwmod:
 22859                           	opt stack 0
 22860                           pclatu	equ	0xFFB
 22861                           pclath	equ	0xFFA
 22862                           tblptru	equ	0xFF8
 22863                           tblptrh	equ	0xFF7
 22864                           tblptrl	equ	0xFF6
 22865                           tablat	equ	0xFF5
 22866                           prodh	equ	0xFF4
 22867                           prodl	equ	0xFF3
 22868                           intcon	equ	0xFF2
 22869                           intcon2	equ	0xFF1
 22870                           intcon3	equ	0xFF0
 22871                           indf0	equ	0xFEF
 22872                           postinc0	equ	0xFEE
 22873                           fsr0h	equ	0xFEA
 22874                           fsr0l	equ	0xFE9
 22875                           wreg	equ	0xFE8
 22876                           postdec1	equ	0xFE5
 22877                           fsr1h	equ	0xFE2
 22878                           fsr1l	equ	0xFE1
 22879                           indf2	equ	0xFDF
 22880                           postinc2	equ	0xFDE
 22881                           postdec2	equ	0xFDD
 22882                           fsr2h	equ	0xFDA
 22883                           fsr2l	equ	0xFD9
 22884                           status	equ	0xFD8
 22885                           
 22886 ;; *************** function i2___lwdiv *****************
 22887 ;; Defined at:
 22888 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22889 ;; Parameters:    Size  Location     Type
 22890 ;;  dividend        2    5[COMRAM] unsigned int 
 22891 ;;  divisor         2    7[COMRAM] unsigned int 
 22892 ;; Auto vars:     Size  Location     Type
 22893 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22894 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22895 ;; Return value:  Size  Location     Type
 22896 ;;                  2    5[COMRAM] unsigned int 
 22897 ;; Registers used:
 22898 ;;		wreg, status,2, status,0
 22899 ;; Tracked objects:
 22900 ;;		On entry : 0/0
 22901 ;;		On exit  : 0/0
 22902 ;;		Unchanged: 0/0
 22903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22905 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22907 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22908 ;;Total ram usage:        7 bytes
 22909 ;; Hardware stack levels used:    1
 22910 ;; This function calls:
 22911 ;;		Nothing
 22912 ;; This function is called by:
 22913 ;;		_printSortTimer
 22914 ;;		i2_printf
 22915 ;; This function uses a non-reentrant model
 22916 ;;
 22917                           
 22918                           	psect	text86
 22919  004B60                     __ptext86:
 22920                           	opt stack 0
 22921  004B60                     i2___lwdiv:
 22922                           	opt stack 20
 22923                           
 22924                           ;incstack = 0
 22925  004B60  0E00               	movlw	0
 22926  004B62  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22927  004B64  0E00               	movlw	0
 22928  004B66  6E0A               	movwf	i2___lwdiv@quotient,c
 22929  004B68  5008               	movf	i2___lwdiv@divisor,w,c
 22930  004B6A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22931  004B6C  B4D8               	btfsc	status,2,c
 22932  004B6E  D01C               	goto	i2l1857
 22933  004B70  0E01               	movlw	1
 22934  004B72  6E0C               	movwf	i2___lwdiv@counter,c
 22935  004B74  D004               	goto	i2l6198
 22936  004B76                     i2l6196:
 22937  004B76  90D8               	bcf	status,0,c
 22938  004B78  3608               	rlcf	i2___lwdiv@divisor,f,c
 22939  004B7A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22940  004B7C  2A0C               	incf	i2___lwdiv@counter,f,c
 22941  004B7E                     i2l6198:
 22942  004B7E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22943  004B80  D7FA               	goto	i2l6196
 22944  004B82                     i2l6200:
 22945  004B82  90D8               	bcf	status,0,c
 22946  004B84  360A               	rlcf	i2___lwdiv@quotient,f,c
 22947  004B86  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22948  004B88  5008               	movf	i2___lwdiv@divisor,w,c
 22949  004B8A  5C06               	subwf	i2___lwdiv@dividend,w,c
 22950  004B8C  5009               	movf	i2___lwdiv@divisor+1,w,c
 22951  004B8E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22952  004B90  A0D8               	btfss	status,0,c
 22953  004B92  D005               	goto	i2l6208
 22954  004B94  5008               	movf	i2___lwdiv@divisor,w,c
 22955  004B96  5E06               	subwf	i2___lwdiv@dividend,f,c
 22956  004B98  5009               	movf	i2___lwdiv@divisor+1,w,c
 22957  004B9A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22958  004B9C  800A               	bsf	i2___lwdiv@quotient,0,c
 22959  004B9E                     i2l6208:
 22960  004B9E  90D8               	bcf	status,0,c
 22961  004BA0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22962  004BA2  3208               	rrcf	i2___lwdiv@divisor,f,c
 22963  004BA4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22964  004BA6  D7ED               	goto	i2l6200
 22965  004BA8                     i2l1857:
 22966  004BA8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22967  004BAC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22968  004BB0  0012               	return		;funcret
 22969  004BB2                     __end_ofi2___lwdiv:
 22970                           	opt stack 0
 22971                           pclatu	equ	0xFFB
 22972                           pclath	equ	0xFFA
 22973                           tblptru	equ	0xFF8
 22974                           tblptrh	equ	0xFF7
 22975                           tblptrl	equ	0xFF6
 22976                           tablat	equ	0xFF5
 22977                           prodh	equ	0xFF4
 22978                           prodl	equ	0xFF3
 22979                           intcon	equ	0xFF2
 22980                           intcon2	equ	0xFF1
 22981                           intcon3	equ	0xFF0
 22982                           indf0	equ	0xFEF
 22983                           postinc0	equ	0xFEE
 22984                           fsr0h	equ	0xFEA
 22985                           fsr0l	equ	0xFE9
 22986                           wreg	equ	0xFE8
 22987                           postdec1	equ	0xFE5
 22988                           fsr1h	equ	0xFE2
 22989                           fsr1l	equ	0xFE1
 22990                           indf2	equ	0xFDF
 22991                           postinc2	equ	0xFDE
 22992                           postdec2	equ	0xFDD
 22993                           fsr2h	equ	0xFDA
 22994                           fsr2l	equ	0xFD9
 22995                           status	equ	0xFD8
 22996                           
 22997 ;; *************** function i2_lcdInst *****************
 22998 ;; Defined at:
 22999 ;;		line 15 in file "lcd.c"
 23000 ;; Parameters:    Size  Location     Type
 23001 ;;  data            1    wreg     unsigned char 
 23002 ;; Auto vars:     Size  Location     Type
 23003 ;;  data            1    2[COMRAM] unsigned char 
 23004 ;; Return value:  Size  Location     Type
 23005 ;;                  1    wreg      void 
 23006 ;; Registers used:
 23007 ;;		wreg, status,2, status,0, cstack
 23008 ;; Tracked objects:
 23009 ;;		On entry : 0/0
 23010 ;;		On exit  : 0/0
 23011 ;;		Unchanged: 0/0
 23012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23017 ;;Total ram usage:        1 bytes
 23018 ;; Hardware stack levels used:    1
 23019 ;; Hardware stack levels required when called:    1
 23020 ;; This function calls:
 23021 ;;		i2_lcdNibble
 23022 ;; This function is called by:
 23023 ;;		_change_state_to_menu_11
 23024 ;;		_change_state_to_menu_23
 23025 ;;		_change_state_to_logs_11
 23026 ;;		_change_state_to_logs_12
 23027 ;;		_change_state_to_logs_22
 23028 ;;		_change_state_to_logs_23
 23029 ;;		_change_state_to_logs_33
 23030 ;;		_change_state_to_logs_34
 23031 ;;		_printSortTimer
 23032 ;;		i2_change_state_to_menu_start
 23033 ;;		i2_change_state_to_menu_12
 23034 ;;		i2_change_state_to_menu_22
 23035 ;;		i2_printRTC
 23036 ;; This function uses a non-reentrant model
 23037 ;;
 23038                           
 23039                           	psect	text87
 23040  0052F6                     __ptext87:
 23041                           	opt stack 0
 23042  0052F6                     i2_lcdInst:
 23043                           	opt stack 19
 23044                           
 23045                           ;incstack = 0
 23046                           ;i2lcdInst@data stored from wreg
 23047  0052F6  6E03               	movwf	i2lcdInst@data,c
 23048                           
 23049                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23050  0052F8  948C               	bcf	3980,2,c	;volatile
 23051                           
 23052                           ;lcd.c: 17: lcdNibble(data);
 23053  0052FA  5003               	movf	i2lcdInst@data,w,c
 23054  0052FC  EC85  F025         	call	i2_lcdNibble
 23055  005300  0012               	return		;funcret
 23056  005302                     __end_ofi2_lcdInst:
 23057                           	opt stack 0
 23058                           pclatu	equ	0xFFB
 23059                           pclath	equ	0xFFA
 23060                           tblptru	equ	0xFF8
 23061                           tblptrh	equ	0xFF7
 23062                           tblptrl	equ	0xFF6
 23063                           tablat	equ	0xFF5
 23064                           prodh	equ	0xFF4
 23065                           prodl	equ	0xFF3
 23066                           intcon	equ	0xFF2
 23067                           intcon2	equ	0xFF1
 23068                           intcon3	equ	0xFF0
 23069                           indf0	equ	0xFEF
 23070                           postinc0	equ	0xFEE
 23071                           fsr0h	equ	0xFEA
 23072                           fsr0l	equ	0xFE9
 23073                           wreg	equ	0xFE8
 23074                           postdec1	equ	0xFE5
 23075                           fsr1h	equ	0xFE2
 23076                           fsr1l	equ	0xFE1
 23077                           indf2	equ	0xFDF
 23078                           postinc2	equ	0xFDE
 23079                           postdec2	equ	0xFDD
 23080                           fsr2h	equ	0xFDA
 23081                           fsr2l	equ	0xFD9
 23082                           status	equ	0xFD8
 23083                           
 23084 ;; *************** function i2_lcdNibble *****************
 23085 ;; Defined at:
 23086 ;;		line 25 in file "lcd.c"
 23087 ;; Parameters:    Size  Location     Type
 23088 ;;  data            1    wreg     unsigned char 
 23089 ;; Auto vars:     Size  Location     Type
 23090 ;;  data            1    1[COMRAM] unsigned char 
 23091 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23092 ;; Return value:  Size  Location     Type
 23093 ;;                  1    wreg      void 
 23094 ;; Registers used:
 23095 ;;		wreg, status,2, status,0
 23096 ;; Tracked objects:
 23097 ;;		On entry : 0/0
 23098 ;;		On exit  : 0/0
 23099 ;;		Unchanged: 0/0
 23100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23105 ;;Total ram usage:        2 bytes
 23106 ;; Hardware stack levels used:    1
 23107 ;; This function calls:
 23108 ;;		Nothing
 23109 ;; This function is called by:
 23110 ;;		i2_lcdInst
 23111 ;;		i2_putch
 23112 ;; This function uses a non-reentrant model
 23113 ;;
 23114                           
 23115                           	psect	text88
 23116  004B0A                     __ptext88:
 23117                           	opt stack 0
 23118  004B0A                     i2_lcdNibble:
 23119                           	opt stack 19
 23120                           
 23121                           ;incstack = 0
 23122                           ;i2lcdNibble@data stored from wreg
 23123  004B0A  6E02               	movwf	i2lcdNibble@data,c
 23124                           
 23125                           ;lcd.c: 27: char temp = data & 0xF0;
 23126  004B0C  5002               	movf	i2lcdNibble@data,w,c
 23127  004B0E  0BF0               	andlw	240
 23128  004B10  6E01               	movwf	i2lcdNibble@temp,c
 23129                           
 23130                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23131  004B12  508C               	movf	3980,w,c	;volatile
 23132  004B14  0B0F               	andlw	15
 23133  004B16  6E8C               	movwf	3980,c	;volatile
 23134                           
 23135                           ;lcd.c: 29: LATD = temp | LATD;
 23136  004B18  5001               	movf	i2lcdNibble@temp,w,c
 23137  004B1A  108C               	iorwf	3980,w,c	;volatile
 23138  004B1C  6E8C               	movwf	3980,c	;volatile
 23139                           
 23140                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23141  004B1E  868C               	bsf	3980,3,c	;volatile
 23142                           
 23143                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23144  004B20  0E42               	movlw	66
 23145  004B22                     i2u1013_47:
 23146  004B22  2EE8               	decfsz	wreg,f,c
 23147  004B24  D7FE               	bra	i2u1013_47
 23148  004B26  D000               	nop2	
 23149                           
 23150                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23151  004B28  968C               	bcf	3980,3,c	;volatile
 23152                           
 23153                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23154  004B2A  0E42               	movlw	66
 23155  004B2C                     i2u1014_47:
 23156  004B2C  2EE8               	decfsz	wreg,f,c
 23157  004B2E  D7FE               	bra	i2u1014_47
 23158  004B30  D000               	nop2	
 23159                           
 23160                           ;lcd.c: 36: data = data << 4;
 23161  004B32  3802               	swapf	i2lcdNibble@data,w,c
 23162  004B34  0BF0               	andlw	240
 23163  004B36  6E02               	movwf	i2lcdNibble@data,c
 23164                           
 23165                           ;lcd.c: 38: temp = data & 0xF0;
 23166  004B38  5002               	movf	i2lcdNibble@data,w,c
 23167  004B3A  0BF0               	andlw	240
 23168  004B3C  6E01               	movwf	i2lcdNibble@temp,c
 23169                           
 23170                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23171  004B3E  508C               	movf	3980,w,c	;volatile
 23172  004B40  0B0F               	andlw	15
 23173  004B42  6E8C               	movwf	3980,c	;volatile
 23174                           
 23175                           ;lcd.c: 40: LATD = temp | LATD;
 23176  004B44  5001               	movf	i2lcdNibble@temp,w,c
 23177  004B46  108C               	iorwf	3980,w,c	;volatile
 23178  004B48  6E8C               	movwf	3980,c	;volatile
 23179                           
 23180                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23181  004B4A  868C               	bsf	3980,3,c	;volatile
 23182                           
 23183                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23184  004B4C  0E42               	movlw	66
 23185  004B4E                     i2u1015_47:
 23186  004B4E  2EE8               	decfsz	wreg,f,c
 23187  004B50  D7FE               	bra	i2u1015_47
 23188  004B52  D000               	nop2	
 23189                           
 23190                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23191  004B54  968C               	bcf	3980,3,c	;volatile
 23192                           
 23193                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23194  004B56  0E42               	movlw	66
 23195  004B58                     i2u1016_47:
 23196  004B58  2EE8               	decfsz	wreg,f,c
 23197  004B5A  D7FE               	bra	i2u1016_47
 23198  004B5C  D000               	nop2	
 23199  004B5E  0012               	return		;funcret
 23200  004B60                     __end_ofi2_lcdNibble:
 23201                           	opt stack 0
 23202                           pclatu	equ	0xFFB
 23203                           pclath	equ	0xFFA
 23204                           tblptru	equ	0xFF8
 23205                           tblptrh	equ	0xFF7
 23206                           tblptrl	equ	0xFF6
 23207                           tablat	equ	0xFF5
 23208                           prodh	equ	0xFF4
 23209                           prodl	equ	0xFF3
 23210                           intcon	equ	0xFF2
 23211                           intcon2	equ	0xFF1
 23212                           intcon3	equ	0xFF0
 23213                           indf0	equ	0xFEF
 23214                           postinc0	equ	0xFEE
 23215                           fsr0h	equ	0xFEA
 23216                           fsr0l	equ	0xFE9
 23217                           wreg	equ	0xFE8
 23218                           postdec1	equ	0xFE5
 23219                           fsr1h	equ	0xFE2
 23220                           fsr1l	equ	0xFE1
 23221                           indf2	equ	0xFDF
 23222                           postinc2	equ	0xFDE
 23223                           postdec2	equ	0xFDD
 23224                           fsr2h	equ	0xFDA
 23225                           fsr2l	equ	0xFD9
 23226                           status	equ	0xFD8
 23227                           
 23228 ;; *************** function i2_getRTC *****************
 23229 ;; Defined at:
 23230 ;;		line 44 in file "RTC.c"
 23231 ;; Parameters:    Size  Location     Type
 23232 ;;		None
 23233 ;; Auto vars:     Size  Location     Type
 23234 ;;  getRTC          2    3[COMRAM] int 
 23235 ;; Return value:  Size  Location     Type
 23236 ;;                  1    wreg      void 
 23237 ;; Registers used:
 23238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23239 ;; Tracked objects:
 23240 ;;		On entry : 0/0
 23241 ;;		On exit  : 0/0
 23242 ;;		Unchanged: 0/0
 23243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23247 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23248 ;;Total ram usage:        2 bytes
 23249 ;; Hardware stack levels used:    1
 23250 ;; Hardware stack levels required when called:    2
 23251 ;; This function calls:
 23252 ;;		i2_I2C_Master_Read
 23253 ;;		i2_I2C_Master_Start
 23254 ;;		i2_I2C_Master_Stop
 23255 ;;		i2_I2C_Master_Write
 23256 ;; This function is called by:
 23257 ;;		_printSortTimer
 23258 ;;		i2_printRTC
 23259 ;; This function uses a non-reentrant model
 23260 ;;
 23261                           
 23262                           	psect	text89
 23263  0047EC                     __ptext89:
 23264                           	opt stack 0
 23265  0047EC                     i2_getRTC:
 23266                           	opt stack 18
 23267                           
 23268                           ;RTC.c: 48: I2C_Master_Start();
 23269                           
 23270                           ;incstack = 0
 23271  0047EC  EC9B  F029         	call	i2_I2C_Master_Start	;wreg free
 23272                           
 23273                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23274  0047F0  0E00               	movlw	0
 23275  0047F2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23276  0047F4  0ED0               	movlw	208
 23277  0047F6  6E02               	movwf	i2I2C_Master_Write@d,c
 23278  0047F8  EC86  F029         	call	i2_I2C_Master_Write	;wreg free
 23279                           
 23280                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23281  0047FC  0E00               	movlw	0
 23282  0047FE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23283  004800  0E00               	movlw	0
 23284  004802  6E02               	movwf	i2I2C_Master_Write@d,c
 23285  004804  EC86  F029         	call	i2_I2C_Master_Write	;wreg free
 23286                           
 23287                           ;RTC.c: 51: I2C_Master_Stop();
 23288  004808  EC97  F029         	call	i2_I2C_Master_Stop	;wreg free
 23289                           
 23290                           ;RTC.c: 54: I2C_Master_Start();
 23291  00480C  EC9B  F029         	call	i2_I2C_Master_Start	;wreg free
 23292                           
 23293                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23294  004810  0E00               	movlw	0
 23295  004812  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23296  004814  0ED1               	movlw	209
 23297  004816  6E02               	movwf	i2I2C_Master_Write@d,c
 23298  004818  EC86  F029         	call	i2_I2C_Master_Write	;wreg free
 23299                           
 23300                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23301  00481C  0E00               	movlw	0
 23302  00481E  6E05               	movwf	i2getRTC@i+1,c
 23303  004820  0E00               	movlw	0
 23304  004822  6E04               	movwf	i2getRTC@i,c
 23305  004824                     i2l6458:
 23306  004824  BE05               	btfsc	i2getRTC@i+1,7,c
 23307  004826  D006               	goto	i2l6462
 23308  004828  5005               	movf	i2getRTC@i+1,w,c
 23309  00482A  E111               	bnz	i2l6468
 23310  00482C  0E06               	movlw	6
 23311  00482E  5C04               	subwf	i2getRTC@i,w,c
 23312  004830  B0D8               	btfsc	status,0,c
 23313  004832  D00D               	goto	i2l6468
 23314  004834                     i2l6462:
 23315                           
 23316                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23317  004834  0E1C               	movlw	low _time
 23318  004836  2404               	addwf	i2getRTC@i,w,c
 23319  004838  6ED9               	movwf	fsr2l,c
 23320  00483A  0E01               	movlw	high _time
 23321  00483C  2005               	addwfc	i2getRTC@i+1,w,c
 23322  00483E  6EDA               	movwf	fsr2h,c
 23323  004840  0E01               	movlw	1
 23324  004842  ECCA  F028         	call	i2_I2C_Master_Read
 23325  004846  6EDF               	movwf	indf2,c
 23326  004848  4A04               	infsnz	i2getRTC@i,f,c
 23327  00484A  2A05               	incf	i2getRTC@i+1,f,c
 23328  00484C  D7EB               	goto	i2l6458
 23329  00484E                     i2l6468:
 23330                           
 23331                           ;RTC.c: 58: }
 23332                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23333  00484E  0E00               	movlw	0
 23334  004850  ECCA  F028         	call	i2_I2C_Master_Read
 23335  004854  0101               	movlb	1	; () banked
 23336  004856  6F22               	movwf	(_time+6)& (0+255),b
 23337                           
 23338                           ;RTC.c: 60: I2C_Master_Stop();
 23339  004858  EC97  F029         	call	i2_I2C_Master_Stop	;wreg free
 23340  00485C  0012               	return		;funcret
 23341  00485E                     __end_ofi2_getRTC:
 23342                           	opt stack 0
 23343                           pclatu	equ	0xFFB
 23344                           pclath	equ	0xFFA
 23345                           tblptru	equ	0xFF8
 23346                           tblptrh	equ	0xFF7
 23347                           tblptrl	equ	0xFF6
 23348                           tablat	equ	0xFF5
 23349                           prodh	equ	0xFF4
 23350                           prodl	equ	0xFF3
 23351                           intcon	equ	0xFF2
 23352                           intcon2	equ	0xFF1
 23353                           intcon3	equ	0xFF0
 23354                           indf0	equ	0xFEF
 23355                           postinc0	equ	0xFEE
 23356                           fsr0h	equ	0xFEA
 23357                           fsr0l	equ	0xFE9
 23358                           wreg	equ	0xFE8
 23359                           postdec1	equ	0xFE5
 23360                           fsr1h	equ	0xFE2
 23361                           fsr1l	equ	0xFE1
 23362                           indf2	equ	0xFDF
 23363                           postinc2	equ	0xFDE
 23364                           postdec2	equ	0xFDD
 23365                           fsr2h	equ	0xFDA
 23366                           fsr2l	equ	0xFD9
 23367                           status	equ	0xFD8
 23368                           
 23369 ;; *************** function i2_I2C_Master_Write *****************
 23370 ;; Defined at:
 23371 ;;		line 49 in file "I2C.c"
 23372 ;; Parameters:    Size  Location     Type
 23373 ;;  d               2    1[COMRAM] unsigned int 
 23374 ;; Auto vars:     Size  Location     Type
 23375 ;;		None
 23376 ;; Return value:  Size  Location     Type
 23377 ;;                  1    wreg      void 
 23378 ;; Registers used:
 23379 ;;		wreg, status,2, status,0, cstack
 23380 ;; Tracked objects:
 23381 ;;		On entry : 0/0
 23382 ;;		On exit  : 0/0
 23383 ;;		Unchanged: 0/0
 23384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23389 ;;Total ram usage:        2 bytes
 23390 ;; Hardware stack levels used:    1
 23391 ;; Hardware stack levels required when called:    1
 23392 ;; This function calls:
 23393 ;;		i2_I2C_Master_Wait
 23394 ;; This function is called by:
 23395 ;;		i2_getRTC
 23396 ;; This function uses a non-reentrant model
 23397 ;;
 23398                           
 23399                           	psect	text90
 23400  00530C                     __ptext90:
 23401                           	opt stack 0
 23402  00530C                     i2_I2C_Master_Write:
 23403                           	opt stack 18
 23404                           
 23405                           ;I2C.c: 51: I2C_Master_Wait();
 23406                           
 23407                           ;incstack = 0
 23408  00530C  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23409                           
 23410                           ;I2C.c: 52: SSPBUF = d;
 23411  005310  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23412  005314  0012               	return		;funcret
 23413  005316                     __end_ofi2_I2C_Master_Write:
 23414                           	opt stack 0
 23415                           pclatu	equ	0xFFB
 23416                           pclath	equ	0xFFA
 23417                           tblptru	equ	0xFF8
 23418                           tblptrh	equ	0xFF7
 23419                           tblptrl	equ	0xFF6
 23420                           tablat	equ	0xFF5
 23421                           prodh	equ	0xFF4
 23422                           prodl	equ	0xFF3
 23423                           intcon	equ	0xFF2
 23424                           intcon2	equ	0xFF1
 23425                           intcon3	equ	0xFF0
 23426                           indf0	equ	0xFEF
 23427                           postinc0	equ	0xFEE
 23428                           fsr0h	equ	0xFEA
 23429                           fsr0l	equ	0xFE9
 23430                           wreg	equ	0xFE8
 23431                           postdec1	equ	0xFE5
 23432                           fsr1h	equ	0xFE2
 23433                           fsr1l	equ	0xFE1
 23434                           indf2	equ	0xFDF
 23435                           postinc2	equ	0xFDE
 23436                           postdec2	equ	0xFDD
 23437                           fsr2h	equ	0xFDA
 23438                           fsr2l	equ	0xFD9
 23439                           status	equ	0xFD8
 23440                           
 23441 ;; *************** function i2_I2C_Master_Stop *****************
 23442 ;; Defined at:
 23443 ;;		line 43 in file "I2C.c"
 23444 ;; Parameters:    Size  Location     Type
 23445 ;;		None
 23446 ;; Auto vars:     Size  Location     Type
 23447 ;;		None
 23448 ;; Return value:  Size  Location     Type
 23449 ;;                  1    wreg      void 
 23450 ;; Registers used:
 23451 ;;		wreg, status,2, status,0, cstack
 23452 ;; Tracked objects:
 23453 ;;		On entry : 0/0
 23454 ;;		On exit  : 0/0
 23455 ;;		Unchanged: 0/0
 23456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23461 ;;Total ram usage:        0 bytes
 23462 ;; Hardware stack levels used:    1
 23463 ;; Hardware stack levels required when called:    1
 23464 ;; This function calls:
 23465 ;;		i2_I2C_Master_Wait
 23466 ;; This function is called by:
 23467 ;;		i2_getRTC
 23468 ;; This function uses a non-reentrant model
 23469 ;;
 23470                           
 23471                           	psect	text91
 23472  00532E                     __ptext91:
 23473                           	opt stack 0
 23474  00532E                     i2_I2C_Master_Stop:
 23475                           	opt stack 18
 23476                           
 23477                           ;I2C.c: 45: I2C_Master_Wait();
 23478                           
 23479                           ;incstack = 0
 23480  00532E  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23481                           
 23482                           ;I2C.c: 46: PEN = 1;
 23483  005332  84C5               	bsf	4037,2,c	;volatile
 23484  005334  0012               	return		;funcret
 23485  005336                     __end_ofi2_I2C_Master_Stop:
 23486                           	opt stack 0
 23487                           pclatu	equ	0xFFB
 23488                           pclath	equ	0xFFA
 23489                           tblptru	equ	0xFF8
 23490                           tblptrh	equ	0xFF7
 23491                           tblptrl	equ	0xFF6
 23492                           tablat	equ	0xFF5
 23493                           prodh	equ	0xFF4
 23494                           prodl	equ	0xFF3
 23495                           intcon	equ	0xFF2
 23496                           intcon2	equ	0xFF1
 23497                           intcon3	equ	0xFF0
 23498                           indf0	equ	0xFEF
 23499                           postinc0	equ	0xFEE
 23500                           fsr0h	equ	0xFEA
 23501                           fsr0l	equ	0xFE9
 23502                           wreg	equ	0xFE8
 23503                           postdec1	equ	0xFE5
 23504                           fsr1h	equ	0xFE2
 23505                           fsr1l	equ	0xFE1
 23506                           indf2	equ	0xFDF
 23507                           postinc2	equ	0xFDE
 23508                           postdec2	equ	0xFDD
 23509                           fsr2h	equ	0xFDA
 23510                           fsr2l	equ	0xFD9
 23511                           status	equ	0xFD8
 23512                           
 23513 ;; *************** function i2_I2C_Master_Start *****************
 23514 ;; Defined at:
 23515 ;;		line 31 in file "I2C.c"
 23516 ;; Parameters:    Size  Location     Type
 23517 ;;		None
 23518 ;; Auto vars:     Size  Location     Type
 23519 ;;		None
 23520 ;; Return value:  Size  Location     Type
 23521 ;;                  1    wreg      void 
 23522 ;; Registers used:
 23523 ;;		wreg, status,2, status,0, cstack
 23524 ;; Tracked objects:
 23525 ;;		On entry : 0/0
 23526 ;;		On exit  : 0/0
 23527 ;;		Unchanged: 0/0
 23528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;Total ram usage:        0 bytes
 23534 ;; Hardware stack levels used:    1
 23535 ;; Hardware stack levels required when called:    1
 23536 ;; This function calls:
 23537 ;;		i2_I2C_Master_Wait
 23538 ;; This function is called by:
 23539 ;;		i2_getRTC
 23540 ;; This function uses a non-reentrant model
 23541 ;;
 23542                           
 23543                           	psect	text92
 23544  005336                     __ptext92:
 23545                           	opt stack 0
 23546  005336                     i2_I2C_Master_Start:
 23547                           	opt stack 18
 23548                           
 23549                           ;I2C.c: 33: I2C_Master_Wait();
 23550                           
 23551                           ;incstack = 0
 23552  005336  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23553                           
 23554                           ;I2C.c: 34: SEN = 1;
 23555  00533A  80C5               	bsf	4037,0,c	;volatile
 23556  00533C  0012               	return		;funcret
 23557  00533E                     __end_ofi2_I2C_Master_Start:
 23558                           	opt stack 0
 23559                           pclatu	equ	0xFFB
 23560                           pclath	equ	0xFFA
 23561                           tblptru	equ	0xFF8
 23562                           tblptrh	equ	0xFF7
 23563                           tblptrl	equ	0xFF6
 23564                           tablat	equ	0xFF5
 23565                           prodh	equ	0xFF4
 23566                           prodl	equ	0xFF3
 23567                           intcon	equ	0xFF2
 23568                           intcon2	equ	0xFF1
 23569                           intcon3	equ	0xFF0
 23570                           indf0	equ	0xFEF
 23571                           postinc0	equ	0xFEE
 23572                           fsr0h	equ	0xFEA
 23573                           fsr0l	equ	0xFE9
 23574                           wreg	equ	0xFE8
 23575                           postdec1	equ	0xFE5
 23576                           fsr1h	equ	0xFE2
 23577                           fsr1l	equ	0xFE1
 23578                           indf2	equ	0xFDF
 23579                           postinc2	equ	0xFDE
 23580                           postdec2	equ	0xFDD
 23581                           fsr2h	equ	0xFDA
 23582                           fsr2l	equ	0xFD9
 23583                           status	equ	0xFD8
 23584                           
 23585 ;; *************** function i2_I2C_Master_Read *****************
 23586 ;; Defined at:
 23587 ;;		line 55 in file "I2C.c"
 23588 ;; Parameters:    Size  Location     Type
 23589 ;;  a               1    wreg     unsigned char 
 23590 ;; Auto vars:     Size  Location     Type
 23591 ;;  a               1    1[COMRAM] unsigned char 
 23592 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23593 ;; Return value:  Size  Location     Type
 23594 ;;                  1    wreg      unsigned char 
 23595 ;; Registers used:
 23596 ;;		wreg, status,2, status,0, cstack
 23597 ;; Tracked objects:
 23598 ;;		On entry : 0/0
 23599 ;;		On exit  : 0/0
 23600 ;;		Unchanged: 0/0
 23601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23606 ;;Total ram usage:        2 bytes
 23607 ;; Hardware stack levels used:    1
 23608 ;; Hardware stack levels required when called:    1
 23609 ;; This function calls:
 23610 ;;		i2_I2C_Master_Wait
 23611 ;; This function is called by:
 23612 ;;		i2_getRTC
 23613 ;; This function uses a non-reentrant model
 23614 ;;
 23615                           
 23616                           	psect	text93
 23617  005194                     __ptext93:
 23618                           	opt stack 0
 23619  005194                     i2_I2C_Master_Read:
 23620                           	opt stack 18
 23621                           
 23622                           ;incstack = 0
 23623                           ;i2I2C_Master_Read@a stored from wreg
 23624  005194  6E02               	movwf	i2I2C_Master_Read@a,c
 23625                           
 23626                           ;I2C.c: 57: unsigned char temp;
 23627                           ;I2C.c: 58: I2C_Master_Wait();
 23628  005196  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23629                           
 23630                           ;I2C.c: 59: RCEN = 1;
 23631  00519A  86C5               	bsf	4037,3,c	;volatile
 23632                           
 23633                           ;I2C.c: 60: I2C_Master_Wait();
 23634  00519C  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23635                           
 23636                           ;I2C.c: 61: temp = SSPBUF;
 23637  0051A0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23638                           
 23639                           ;I2C.c: 62: I2C_Master_Wait();
 23640  0051A4  EC5C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23641                           
 23642                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23643  0051A8  5002               	movf	i2I2C_Master_Read@a,w,c
 23644  0051AA  A4D8               	btfss	status,2,c
 23645  0051AC  D002               	goto	i2u443_40
 23646  0051AE  8AC5               	bsf	4037,5,c	;volatile
 23647  0051B0  D001               	goto	i2l6162
 23648  0051B2                     i2u443_40:
 23649  0051B2  9AC5               	bcf	4037,5,c	;volatile
 23650  0051B4                     i2l6162:
 23651                           
 23652                           ;I2C.c: 64: ACKEN = 1;
 23653  0051B4  88C5               	bsf	4037,4,c	;volatile
 23654                           
 23655                           ;I2C.c: 65: return temp;
 23656  0051B6  5003               	movf	i2I2C_Master_Read@temp,w,c
 23657  0051B8  0012               	return	
 23658  0051BA                     __end_ofi2_I2C_Master_Read:
 23659                           	opt stack 0
 23660                           pclatu	equ	0xFFB
 23661                           pclath	equ	0xFFA
 23662                           tblptru	equ	0xFF8
 23663                           tblptrh	equ	0xFF7
 23664                           tblptrl	equ	0xFF6
 23665                           tablat	equ	0xFF5
 23666                           prodh	equ	0xFF4
 23667                           prodl	equ	0xFF3
 23668                           intcon	equ	0xFF2
 23669                           intcon2	equ	0xFF1
 23670                           intcon3	equ	0xFF0
 23671                           indf0	equ	0xFEF
 23672                           postinc0	equ	0xFEE
 23673                           fsr0h	equ	0xFEA
 23674                           fsr0l	equ	0xFE9
 23675                           wreg	equ	0xFE8
 23676                           postdec1	equ	0xFE5
 23677                           fsr1h	equ	0xFE2
 23678                           fsr1l	equ	0xFE1
 23679                           indf2	equ	0xFDF
 23680                           postinc2	equ	0xFDE
 23681                           postdec2	equ	0xFDD
 23682                           fsr2h	equ	0xFDA
 23683                           fsr2l	equ	0xFD9
 23684                           status	equ	0xFD8
 23685                           
 23686 ;; *************** function i2_I2C_Master_Wait *****************
 23687 ;; Defined at:
 23688 ;;		line 26 in file "I2C.c"
 23689 ;; Parameters:    Size  Location     Type
 23690 ;;		None
 23691 ;; Auto vars:     Size  Location     Type
 23692 ;;		None
 23693 ;; Return value:  Size  Location     Type
 23694 ;;                  1    wreg      void 
 23695 ;; Registers used:
 23696 ;;		wreg, status,2, status,0
 23697 ;; Tracked objects:
 23698 ;;		On entry : 0/0
 23699 ;;		On exit  : 0/0
 23700 ;;		Unchanged: 0/0
 23701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23704 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23706 ;;Total ram usage:        1 bytes
 23707 ;; Hardware stack levels used:    1
 23708 ;; This function calls:
 23709 ;;		Nothing
 23710 ;; This function is called by:
 23711 ;;		i2_I2C_Master_Start
 23712 ;;		i2_I2C_Master_Stop
 23713 ;;		i2_I2C_Master_Write
 23714 ;;		i2_I2C_Master_Read
 23715 ;; This function uses a non-reentrant model
 23716 ;;
 23717                           
 23718                           	psect	text94
 23719  0052B8                     __ptext94:
 23720                           	opt stack 0
 23721  0052B8                     i2_I2C_Master_Wait:
 23722                           	opt stack 18
 23723  0052B8                     i2l66:
 23724  0052B8  B4C7               	btfsc	4039,2,c	;volatile
 23725  0052BA  D7FE               	goto	i2l66
 23726  0052BC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23727  0052C0  0E1F               	movlw	31
 23728  0052C2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23729  0052C4  B4D8               	btfsc	status,2,c
 23730  0052C6  0012               	return	
 23731  0052C8  D7F7               	goto	i2l66
 23732  0052CA                     __end_ofi2_I2C_Master_Wait:
 23733                           	opt stack 0
 23734                           pclatu	equ	0xFFB
 23735                           pclath	equ	0xFFA
 23736                           tblptru	equ	0xFF8
 23737                           tblptrh	equ	0xFF7
 23738                           tblptrl	equ	0xFF6
 23739                           tablat	equ	0xFF5
 23740                           prodh	equ	0xFF4
 23741                           prodl	equ	0xFF3
 23742                           intcon	equ	0xFF2
 23743                           intcon2	equ	0xFF1
 23744                           intcon3	equ	0xFF0
 23745                           indf0	equ	0xFEF
 23746                           postinc0	equ	0xFEE
 23747                           fsr0h	equ	0xFEA
 23748                           fsr0l	equ	0xFE9
 23749                           wreg	equ	0xFE8
 23750                           postdec1	equ	0xFE5
 23751                           fsr1h	equ	0xFE2
 23752                           fsr1l	equ	0xFE1
 23753                           indf2	equ	0xFDF
 23754                           postinc2	equ	0xFDE
 23755                           postdec2	equ	0xFDD
 23756                           fsr2h	equ	0xFDA
 23757                           fsr2l	equ	0xFD9
 23758                           status	equ	0xFD8
 23759                           
 23760 ;; *************** function i2_delay_ms *****************
 23761 ;; Defined at:
 23762 ;;		line 590 in file "sort.c"
 23763 ;; Parameters:    Size  Location     Type
 23764 ;;  milliseconds    1    wreg     unsigned char 
 23765 ;; Auto vars:     Size  Location     Type
 23766 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23767 ;; Return value:  Size  Location     Type
 23768 ;;                  1    wreg      void 
 23769 ;; Registers used:
 23770 ;;		wreg, status,2, status,0, cstack
 23771 ;; Tracked objects:
 23772 ;;		On entry : 0/0
 23773 ;;		On exit  : 0/0
 23774 ;;		Unchanged: 0/0
 23775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23780 ;;Total ram usage:        2 bytes
 23781 ;; Hardware stack levels used:    1
 23782 ;; This function calls:
 23783 ;;		Nothing
 23784 ;; This function is called by:
 23785 ;;		_printSortTimer
 23786 ;; This function uses a non-reentrant model
 23787 ;;
 23788                           
 23789                           	psect	text95
 23790  005240                     __ptext95:
 23791                           	opt stack 0
 23792  005240                     i2_delay_ms:
 23793                           	opt stack 22
 23794                           
 23795                           ;incstack = 0
 23796                           ;i2delay_ms@milliseconds stored from wreg
 23797  005240  6E02               	movwf	i2delay_ms@milliseconds,c
 23798                           
 23799                           ;sort.c: 591: while(milliseconds > 0)
 23800  005242  D008               	goto	i2l8506
 23801  005244                     i2l8502:
 23802                           
 23803                           ;sort.c: 592: {
 23804                           ;sort.c: 593: milliseconds--;
 23805  005244  0602               	decf	i2delay_ms@milliseconds,f,c
 23806                           
 23807                           ;sort.c: 594: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23808  005246  0E0B               	movlw	11
 23809  005248  6E01               	movwf	??i2_delay_ms& (0+255),c
 23810  00524A  0E48               	movlw	72
 23811  00524C                     i2u1017_47:
 23812  00524C  2EE8               	decfsz	wreg,f,c
 23813  00524E  D7FE               	bra	i2u1017_47
 23814  005250  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23815  005252  D7FC               	bra	i2u1017_47
 23816  005254                     i2l8506:
 23817  005254  5002               	movf	i2delay_ms@milliseconds,w,c
 23818  005256  B4D8               	btfsc	status,2,c
 23819  005258  0012               	return	
 23820  00525A  D7F4               	goto	i2l8502
 23821  00525C                     __end_ofi2_delay_ms:
 23822                           	opt stack 0
 23823                           pclatu	equ	0xFFB
 23824                           pclath	equ	0xFFA
 23825                           tblptru	equ	0xFF8
 23826                           tblptrh	equ	0xFF7
 23827                           tblptrl	equ	0xFF6
 23828                           tablat	equ	0xFF5
 23829                           prodh	equ	0xFF4
 23830                           prodl	equ	0xFF3
 23831                           intcon	equ	0xFF2
 23832                           intcon2	equ	0xFF1
 23833                           intcon3	equ	0xFF0
 23834                           indf0	equ	0xFEF
 23835                           postinc0	equ	0xFEE
 23836                           fsr0h	equ	0xFEA
 23837                           fsr0l	equ	0xFE9
 23838                           wreg	equ	0xFE8
 23839                           postdec1	equ	0xFE5
 23840                           fsr1h	equ	0xFE2
 23841                           fsr1l	equ	0xFE1
 23842                           indf2	equ	0xFDF
 23843                           postinc2	equ	0xFDE
 23844                           postdec2	equ	0xFDD
 23845                           fsr2h	equ	0xFDA
 23846                           fsr2l	equ	0xFD9
 23847                           status	equ	0xFD8
 23848                           pclatu	equ	0xFFB
 23849                           pclath	equ	0xFFA
 23850                           tblptru	equ	0xFF8
 23851                           tblptrh	equ	0xFF7
 23852                           tblptrl	equ	0xFF6
 23853                           tablat	equ	0xFF5
 23854                           prodh	equ	0xFF4
 23855                           prodl	equ	0xFF3
 23856                           intcon	equ	0xFF2
 23857                           intcon2	equ	0xFF1
 23858                           intcon3	equ	0xFF0
 23859                           indf0	equ	0xFEF
 23860                           postinc0	equ	0xFEE
 23861                           fsr0h	equ	0xFEA
 23862                           fsr0l	equ	0xFE9
 23863                           wreg	equ	0xFE8
 23864                           postdec1	equ	0xFE5
 23865                           fsr1h	equ	0xFE2
 23866                           fsr1l	equ	0xFE1
 23867                           indf2	equ	0xFDF
 23868                           postinc2	equ	0xFDE
 23869                           postdec2	equ	0xFDD
 23870                           fsr2h	equ	0xFDA
 23871                           fsr2l	equ	0xFD9
 23872                           status	equ	0xFD8
 23873                           
 23874                           	psect	rparam
 23875  0000                     pclatu	equ	0xFFB
 23876                           pclath	equ	0xFFA
 23877                           tblptru	equ	0xFF8
 23878                           tblptrh	equ	0xFF7
 23879                           tblptrl	equ	0xFF6
 23880                           tablat	equ	0xFF5
 23881                           prodh	equ	0xFF4
 23882                           prodl	equ	0xFF3
 23883                           intcon	equ	0xFF2
 23884                           intcon2	equ	0xFF1
 23885                           intcon3	equ	0xFF0
 23886                           indf0	equ	0xFEF
 23887                           postinc0	equ	0xFEE
 23888                           fsr0h	equ	0xFEA
 23889                           fsr0l	equ	0xFE9
 23890                           wreg	equ	0xFE8
 23891                           postdec1	equ	0xFE5
 23892                           fsr1h	equ	0xFE2
 23893                           fsr1l	equ	0xFE1
 23894                           indf2	equ	0xFDF
 23895                           postinc2	equ	0xFDE
 23896                           postdec2	equ	0xFDD
 23897                           fsr2h	equ	0xFDA
 23898                           fsr2l	equ	0xFD9
 23899                           status	equ	0xFD8
 23900                           
 23901                           	psect	temp
 23902  00007E                     btemp:
 23903                           	opt stack 0
 23904  00007E                     	ds	1
 23905  0000                     int$flags	set	btemp
 23906                           pclatu	equ	0xFFB
 23907                           pclath	equ	0xFFA
 23908                           tblptru	equ	0xFF8
 23909                           tblptrh	equ	0xFF7
 23910                           tblptrl	equ	0xFF6
 23911                           tablat	equ	0xFF5
 23912                           prodh	equ	0xFF4
 23913                           prodl	equ	0xFF3
 23914                           intcon	equ	0xFF2
 23915                           intcon2	equ	0xFF1
 23916                           intcon3	equ	0xFF0
 23917                           indf0	equ	0xFEF
 23918                           postinc0	equ	0xFEE
 23919                           fsr0h	equ	0xFEA
 23920                           fsr0l	equ	0xFE9
 23921                           wreg	equ	0xFE8
 23922                           postdec1	equ	0xFE5
 23923                           fsr1h	equ	0xFE2
 23924                           fsr1l	equ	0xFE1
 23925                           indf2	equ	0xFDF
 23926                           postinc2	equ	0xFDE
 23927                           postdec2	equ	0xFDD
 23928                           fsr2h	equ	0xFDA
 23929                           fsr2l	equ	0xFD9
 23930                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  200579
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22783
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17463
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   96741
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15223
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19117
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76327
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 04 23:10:05 2017

                                    _i 013D                     i2_I2C_Master_Start 5336  
                   i2_I2C_Master_Write 530C                                     l66 52A4  
                                   _ID 2C6A                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l606 24EE  
                                  l810 2DEE                                    l811 2E2C  
                                  l491 40CA                                    l812 2E12  
                                  l816 2EC4                                    l752 123C  
                                  l809 2DD4                                    l770 13CA  
                                  l762 12F6                                    l773 1404  
                                  l765 1330                                    l790 1556  
                                  l791 156C                                    l785 1508  
                                  l795 1602                                    l787 151A  
                                  l779 15B6                                    l868 45B8  
                                  l788 152E                                    l789 1542  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3704                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F2  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3A18  
                  _log_count_can_w_lab 0067                             i2_delay_ms 5240  
      __end_of_change_state_to_menu_11 4F50        __end_of_change_state_to_menu_12 4D90  
      __end_of_change_state_to_menu_22 4D58        __end_of_change_state_to_menu_23 4F20  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5040        __end_of_change_state_to_logs_12 5010  
      __end_of_change_state_to_logs_22 4FE0        __end_of_change_state_to_logs_23 509C  
      __end_of_change_state_to_logs_33 4FB0        __end_of_change_state_to_logs_34 4F80  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1030 3DAE                                   l1043 5286  
                                 l1212 0126                                   l1052 3B46  
                                 l1205 007C                                   l1215 018C  
                                 l1216 01DA                                   l1208 0080  
                                 l1321 30F6                                   l1217 0240  
                                 l1410 1856                                   l1314 3116  
                                 l1242 05E8                                   l1218 028E  
                                 l1170 3FB4                                   l1146 3CD6  
                                 l1323 3110                                   l1317 30B2  
                                 l1173 3FB8                                   l1149 3CF6  
                                 l1254 0782                                   l1182 219C  
                                 l1280 46A6                                   l1272 467E  
                                 l1352 464E                                   l1281 46AA  
                                 l1345 463E                                   l1282 46AE  
                                 l1259 0858                                   l1179 2198  
                                 l1284 46EC                                   l1276 469A  
                                 l1293 4A98                                   l1374 39B6  
                                 l1278 469E                                   l1375 39D0  
                                 l1279 46A2                                   l1369 396A  
                                 l1299 4AA8                                   l1804 4258  
                                 l6110 4720                                   l6112 472C  
                                 l1857 4770                                   l6122 4762  
                                 l6114 4732                                   l6130 494A  
                                 l1867 498E                                   l6132 4956  
                                 l6300 1816                                   l6052 50DC  
                                 l7020 44BA                                   l6134 495C  
                                 l6054 50EE                                   l6320 18A8  
                                 l6304 181C                                   l8000 06E6  
                                 l7016 44A4                                   l6138 4980  
                                 l6322 18AE                                   l6250 1632  
                                 l7026 44E6                                   l6340 190C  
                                 l6316 188E                                   l6252 1644  
                                 l8100 08C2                                   l8020 075A  
                                 l8012 0738                                   l8004 06FE  
                                 l6076 5066                                   l6094 5114  
                                 l6334 18EA                                   l6270 16FE  
                                 l6262 1682                                   l6246 161E  
                                 l6422 45D6                                   l8022 0760  
                                 l6360 1990                                   l6352 1968  
                                 l6344 1944                                   l6280 173C  
                                 l6256 164E                                   l6416 459C  
                                 l8016 0742                                   l7400 15BE  
                                 l7312 13B4                                   l7232 11FA  
                                 l6370 19C4                                   l6346 194E  
                                 l6290 17B4                                   l6282 1742  
                                 l8050 07DC                                   l8026 076A  
                                 l6434 41DC                                   l7322 13E4  
                                 l7242 1244                                   l6364 19AA  
                                 l6292 17BA                                   l8204 309C  
                                 l8060 0804                                   l6380 4D9A  
                                 l6436 41EC                                   l7412 15F6  
                                 l7324 13EE                                   l6374 1A1C  
                                 l6358 1984                                   l6294 17D2  
                                 l6278 1730                                   l8214 30CC  
                                 l8142 4676                                   l8070 0842  
                                 l8054 07F4                                   l8046 07D2  
                                 l6382 4DA6                                   l6446 4246  
                                 l6438 41F2                                   l7510 2E82  
                                 l7334 141E                                   l7414 1604  
                                 _ADIE 007CEE                                   l6368 19BE  
                                 l6288 17A8                                   l6376 1A28  
                                 l8232 46B2                                   l8080 0872  
                                 l8064 081C                                   l8056 07FA  
                                 l6392 4544                                   l9120 3A64  
                                 l6298 17FE                                   l8218 30E0  
                                 l8154 2F04                                   l8090 089A  
                                 l8082 0878                                   l8410 4122  
                                 l6650 2516                                   l6642 246C  
                                 l9122 3A78                                   l7530 3EDA  
                                 l7362 14E6                                   l7346 1482  
                                 l7338 1444                                   l7274 12E0  
                                 l7258 1280                                   l8172 2FBC  
                                 l8092 08A0                                   l7604 21EC  
                                 l8420 4152                                   l8404 410C  
                                 l6388 452E                                   l6660 25AC  
                                 l6652 2534                                   l7524 3E8C  
                                 l7460 2D88                                   l7452 2D60  
                                 l6820 433A                                   l7364 14F0  
                                 l7284 1310                                   l8174 2FC2  
                                 l8086 0882                                   l7622 22A4  
                                 l6398 4564                                   l6670 2642  
                                 l6662 25CA                                   l6654 2552  
                                 l7526 3EA6                                   l7534 3EF4  
                                 l7518 2EC6                                   l7286 131A  
                                 l8352 3938                                   l8192 307A  
                                 l8096 08AA                                   l7640 2336  
                                 l8416 4140                                   l8432 4190  
                                 l6664 25E8                                   l6656 2570  
                                 l6648 24F8                                   l7528 3EC0  
                                 l7536 3F22                                   l7464 2D98  
                                 l7448 2D50                                   l6912 479E  
                                 l6816 4324                                   l7392 1578  
                                 l7296 134A                                   l8370 397C  
                                 l7810 032C                                   l7802 030A  
                                 l7722 00FA                                   l7634 22F4  
                                 l8418 414C                                   l6666 2606  
                                 l6658 258E                                   l6674 2660  
                                 l9146 3B00                                   l7474 2DBE  
                                 l7466 2D9A                                   l6826 43B0  
                                 l7394 15AE                                   l8348 3908  
                                 l7820 0354                                   l7812 0332  
                                 l7716 00EA                                   l7660 23B2  
                                 l7652 2382                                   l9180 3D08  
                                 l8436 41A4                                   l8428 4182  
                                 l8460 4412                                   l8452 43EC  
                                 l6668 2624                                   l6676 26BE  
                                 l8612 0B02                                   l8604 0AE0  
                                 l7484 2DF2                                   l6924 47C8  
                                 l6908 4788                                   l8390 39E2  
                                 l7910 0524                                   l7806 0314  
                                 l7726 0112                                   l7718 00F0  
                                 l9190 3D26                                   l9182 3D0E  
                                 l9158 3C78                                   l8622 0B1E  
                                 l8542 09B8                                   l6862 3E1A  
                                 l6870 3E3C                                   l7486 2DFC  
                                 l8376 3996                                   l8368 396C  
                                 l7920 054C                                   l7832 0398  
                                 l7816 033C                                   l7672 23FA  
                                 l7664 23E8                                   l9192 3D2C  
                                 l9184 3D14                                   l9176 3CFC  
                                 l8472 4458                                   l8464 4436  
                                 l8456 4400                                   l8448 43DC  
                                 l8608 0AEA                                   l8560 0A04  
                                 l8552 09DA                                   l8544 09BE  
                                 l6928 47E0                                   l8378 39A0  
                                 l8394 3A12                                   l7914 053C  
                                 l7906 051A                                   l7842 03C0  
                                 l9194 3D32                                   l9186 3D1A  
                                 l9178 3D02                                   l8458 440C  
                                 l8802 1052                                   l8722 0EDA  
                                 l8650 0C00                                   l8642 0B88  
                                 l8626 0B36                                   l8618 0B14  
                                 l6874 3E52                                   l6866 3E24  
                                 l8388 39D2                                   l7940 05C0  
                                 l7932 059E                                   l7924 0564  
                                 l7916 0542                                   l7836 03B0  
                                 l7828 038E                                   l7676 2430  
                                 l9188 3D20                                   l8468 4444  
                                 l8820 109E                                   l8812 107C  
                                 l8740 0F26                                   l8732 0F04  
                                 l8660 0C96                                   l8652 0C1E  
                                 l8644 0BA6                                   l8580 0A68  
                                 l8556 09F2                                   l8548 09D0  
                                 l6884 5124                                   l9380 409C  
                                 l7942 05C6                                   l7862 0434  
                                 l7854 0412                                   l7846 03D8  
                                 l7838 03B6                                   l9198 3D38  
                                 l8806 106A                                   l8726 0EF2  
                                 l8718 0ED0                                   l8662 0CB4  
                                 l8654 0C3C                                   l8646 0BC4  
                                 l8670 0D0E                                   l8574 0A58  
                                 l8590 0A8E                                   l6878 3E5C  
                                 l9382 40A2                                   l9374 4076  
                                 l7960 0630                                   l7936 05A8  
                                 l7880 0496                                   l7872 045C  
                                 l7864 043A                                   l8816 1086  
                                 l8736 0F0E                                   l8680 0DBE  
                                 l8664 0CD2                                   l8656 0C5A  
                                 l8648 0BE2                                   l8672 0D72  
                                 l8584 0A80                                   l8576 0A5E  
                                 l6888 513A                                   l9392 40C0  
                                 l9384 40A8                                   l9376 408C  
                                 l7970 0658                                   l7946 05D0  
                                 l7890 04BE                                   l7858 041C  
                                 l8842 1106                                   l8762 0F96  
                                 l8690 0DE8                                   l8666 0CF0  
                                 l8658 0C78                                   l9394 40C6  
                                 l7964 063A                                   l7884 04A0  
                                 l7868 0444                                   l8860 1152  
                                 l8852 1130                                   l8780 0FE2  
                                 l8772 0FC0                                   l8684 0DD6  
                                 l8676 0DB4                                   l7990 06BE  
                                 l7974 0662                                   l7894 04C8  
                                 l8846 111E                                   l8838 10FC  
                                 l8766 0FAE                                   l8758 0F8C  
                                 l8694 0DF2                                   l9398 40CC  
                                 l7968 0652                                   l7888 04B8  
                                 l8856 113A                                   l8776 0FCA  
                                 l8864 115E                                   l7994 06D6  
                                 l7986 06B4                                   l7978 067A  
                                 l7898 04E0                                   l8698 0E0A  
                                 l7996 06DC                                   l8798 1048  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4330 5064  
                                 u7000 3926                                   u6120 222E  
                                 u5240 24EE                                   u6040 2E8E  
                                 u5225 49C8                                   u4610 177C  
                                 u6130 2230                                   u4530 4C42  
                                 _PEIE 007F96                                   u6300 028E  
                                 u6060 2EC4                                   u4540 4C44  
                                 u7101 398C                                   u7110 398E  
                                 u4550 4C8E                                   u4551 4C8A  
                                 u7008 392A                                   u4560 4C90  
                                 u6160 23D6                                   u4617 1772  
                                 u4650 17F4                                   u6058 2E92  
                                 u5610 123C                                   u7051 3960  
                                 u7060 3962                                   u6260 0126  
                                 _RCEN 007E2B                                   u6190 241E  
                                 u7160 3A00                                   u6280 01DA  
                                 u6168 23DA                                   u5608 120A  
                                 u4657 17EA                                   u8220 3B46  
                                 u5900 2CBA                                   u6198 2422  
                                 u5910 2D10                                   u5590 1206  
                                 u9007 09E2                                   u7168 3A04  
                                 u5808 1466                                   u9017 0A1A  
                                 i2l66 52B8                                   u9107 0EE2  
                                 u9027 0A70                                   u5908 2CBE  
                                 u9117 0F16                                   u9037 0A9C  
                                 u6830 2F46                                   u5918 2D14  
                                 u5790 1462                                   u9207 1142  
                                 u9127 0F40                                   u9047 0AF2  
                                 u6840 2F48                                   u9217 3C86  
                                 u9137 0F9E                                   u9057 0B26  
                                 u9307 22E6                                   u9227 3CCA  
                                 u9147 0FD2                                   u9067 0B50  
                                 u6860 3004                                   u9317 232A  
                                 u9237 2148                                   u9157 0FFC  
                                 u9077 0DC6                                   u6870 3006  
                                 u9407 0092                                   u9327 2348  
                                 u9247 218C                                   u9167 105A  
                                 u9087 0DFA                                   u8607 133E  
                                 u9417 0102                                   u9337 2376  
                                 u9257 21AE                                   u9177 108E  
                                 u9097 0E24                                   u8617 1358  
                                 u9507 0344                                   u9427 0136  
                                 u9347 2390                                   u9267 21DC  
                                 u9187 10B8                                   u8707 150C  
                                 u8627 1382                                   u9517 03A0  
                                 u9437 019C                                   u9357 3F64  
                                 u9277 2244                                   u9197 110E  
                                 u8717 1514                                   u8637 13CE  
                                 u8557 118A                                   u6990 38CA  
                                 u9607 05D8                                   u9527 03C8  
                                 u9447 01BA                                   u9367 3FA8  
                                 u9287 2298                                   u8807 1570  
                                 u8727 151E                                   u8647 13D6  
                                 u8567 12AE                                   u9617 0642  
                                 u9537 0424                                   u9457 01EA  
                                 u9377 3FCA                                   u9297 22B8  
                                 u8817 15D8                                   u8737 1528  
                                 u8657 1408                                   u8577 12FA  
                                 u9707 085C                                   u9627 066A  
                                 u9547 044C                                   u9467 0250  
                                 u9387 002C                                   u8907 2E16  
                                 u8827 4E1A                                   u8747 1532  
                                 u8667 1412                                   u8587 1302  
                                 u9717 0866                                   u9637 06C6  
                                 u9557 04A8                                   u9477 026E  
                                 u9397 0070                                   u8917 2E20  
                                 u8837 47A6                                   u8757 153C  
                                 u8677 142C                                   u8597 1334  
                                 u6998 38CE                                   u9807 301A  
                                 u9727 088A                                   u9647 06EE  
                                 u9567 04D0                                   u9487 029E  
                                 u8927 2E46                                   u8847 2C84  
                                 u8767 1546                                   u8687 149C  
                                 u9817 306E                                   u9737 08B2  
                                 u9657 074A                                   u9577 052C  
                                 u9497 031C                                   u8937 5130  
                                 u8857 2CA0                                   u8777 154E  
                                 u8697 14D4                                   u9907 1AEE  
                                 u9827 30B6                                   u9747 4608  
                                 u9667 0772                                   u9587 0554  
                                 u8947 3DD0                                   u8867 2CD8  
                                 u8787 155A                                   u9917 1B22  
                                 u9837 30BE                                   u9757 4658  
                                 u9677 0794                                   u9597 05B0  
                                 u8957 3E2C                                   u8877 2CF6  
                                 u8797 1564                                   u9927 1B54  
                                 u9847 30FA                                   u9767 466C  
                                 u9687 07E4                                   u8967 3E64  
                                 u8887 2DD8                                   u9937 1BA0  
                                 u9857 3104                                   u9777 2EE0  
                                 u9697 080C                                   u8977 4CA0  
                                 u8897 2DE2                                   u9947 1BD4  
                                 u9867 50E4                                   u9787 2F5C  
                                 u8987 4CD4                                   u9957 1C06  
                                 u9877 4A62                                   u9797 2FB0  
                                 u8997 08E2                                   u9967 1C52  
                                 u9887 1A56                                   u9977 1C9E  
                                 u9897 1AA2                                   u9987 1CD2  
                                 _RSEN 007E29                                   u9997 1D04  
                          _stopSignals 525C                                   _Test 3C78  
                                 _back 005B                                   _main 402C  
                                 _down 005D                                   _keys FAEF  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 51DE                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0065                        __end_ofi2_putch 52F6  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 311A  
                          i2_lcdNibble 4B0A                        __end_of_Loading 1610  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E74  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 41AE  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 4462                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 426A           i2updateServoPosition@time_us 0001  
                                u10007 1D50                                  u10017 1D84  
                                u10107 492E                                  u10027 1DB6  
                                u10037 4AF2                                  u10047 38A2  
                                u10057 39BA                                  u10067 39C4  
                                u10077 48EE                                  u10087 48F8  
                                _T0CON 000FD5                                  u10097 4924  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 477A  
                      __end_of___lwmod 4998                                  i2l257 29BE  
                                i2l606 31A8                                  i2l847 2B90  
                                i2l961 37E0                                  i2l868 4894  
                      ___awdiv@counter 008A                                  i2l965 3838  
                                i2l967 3858                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A48  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 52EA  
                      __end_of_handler 3894                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 50F4                        __end_of_initLCD 4CDE  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 477A  
                      __end_of_loadRTC 44EE                        __end_of_readMAG 4C98  
                      __end_of_dpowers FB0A                                  _first 0139  
                                _enter 005F                        __end_of_isdigit 511E  
                                _input 007D                                  _putch 52CA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5194                       __end_ofi2_getRTC 485E  
                  _log_count_pop_w_tab 006B                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 213A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4E60  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1186 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4BB2                           __end_of_Test 3D8C  
                   __size_ofi2_lcdInst 000C                           __end_of_main 40F0  
                         __end_of_keys FB00                           __end_of_sort 5200  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1793 00B3                            _BlockerTest 3894  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4EC0  
            i2_change_state_to_menu_22 4E90                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1043 529C                                 i2l1410 1FA6  
                               i2l6200 4B82                                 i2l7000 32BA  
                               i2l1857 4BA8                                 i2l7002 3314  
                               i2l1867 4D16                                 i2l6220 4CF8  
                               i2l7100 33D8                                 i2l7102 33DE  
                               i2l6208 4B9E                                 i2l6224 4D0C  
                               i2l6216 4CEC                                 i2l6162 51B4  
                               i2l6218 4CF4                                 i2l7106 33E4  
                               i2l7132 344E                                 i2l6510 1E8E  
                               i2l6502 1E2C                                 i2l7142 3474  
                               i2l7126 3440                                 i2l7118 3428  
                               i2l7070 3374                                 i2l6600 209C  
                               i2l6520 1EC0                                 i2l7160 34AE  
                               i2l7152 3496                                 i2l7136 346A  
                               i2l7080 339E                                 i2l9000 28F0  
                               i2l6186 5238                                 i2l6610 20C8  
                               i2l6530 1F18                                 i2l6522 1EC4  
                               i2l7170 34CE                                 i2l7146 3488  
                               i2l7082 33A2                                 i2l6196 4B76  
                               i2l6604 20B0                                 i2l6540 1F6C  
                               i2l6532 1F1E                                 i2l7148 348C  
                               i2l7092 33C0                                 i2l6620 4E38  
                               i2l9020 2946                                 i2l9012 2922  
                               i2l9004 2906                                 i2l6462 4834  
                               i2l6198 4B7E                                 i2l6614 2116  
                               i2l6534 1F30                                 i2l6518 1EB6  
                               i2l7182 3504                                 i2l7174 34E0  
                               i2l7166 34BC                                 i2l7094 33C6  
                               i2l7078 338E                                 i2l6622 4E40  
                               i2l6608 20C2                                 i2l6560 1FEC  
                               i2l6528 1F0E                                 i2l6544 1F70  
                               i2l6616 211E                                 i2l7096 33CC  
                               i2l7088 33AC                                 i2l9016 2930  
                               i2l9008 2914                                 i2l6458 4824  
                               i2l6562 1FF0                                 i2l6538 1F5A  
                               i2l6490 1DE6                                 i2l7178 34F2  
                               i2l7098 33D2                                 i2l9026 2954  
                               i2l6468 484E                                 i2l6580 203C  
                               i2l6556 1FD4                                 i2l6492 1DF4  
                               i2l9212 29DE                                 i2l6804 3C60  
                               i2l7188 350E                                 i2l8502 5244  
                               i2l6574 2022                                 i2l6486 1DD6  
                               i2l9230 2B06                                 i2l9310 3630  
                               i2l9302 35C4                                 i2l6592 207E  
                               i2l6584 2060                                 i2l6496 1DFA  
                               i2l9208 29CE                                 i2l9304 360E  
                               i2l8506 5254                                 i2l6586 2068  
                               i2l9242 2B5E                                 i2l9250 2B92  
                               i2l9218 2A38                                 i2l9322 367C  
                               i2l9306 3618                                 i2l9316 3656  
                               i2l9412 377E                                 i2l9420 3798  
                               i2l6598 2094                                 i2l9254 2BC6  
                               i2l9414 3782                                 i2l9256 2BCC  
                               i2l6792 3C1C                                 i2l9336 36D2  
                               i2l9280 3570                                 i2l9282 357A  
                               i2l9434 37B4                                 i2l6796 3C2C  
                               i2l6980 31F4                                 i2l9276 355A  
                               i2l6990 3262                                 i2l6982 320A  
                               i2l6974 31B2                                 i2l8494 48AE  
                               i2l9294 35A6                                 i2l9462 380C  
                               i2l6992 3278                                 i2l6984 3220  
                               i2l6976 31C8                                 i2l6968 3146  
                               i2l8920 27B8                                 i2l8912 279A  
                               i2l8904 277E                                 i2l8488 487C  
                               i2l9296 35BA                                 i2l9288 3590  
                               i2l9456 37FE                                 i2l6994 328E  
                               i2l6986 3236                                 i2l6978 31DE  
                               i2l6996 32A4                                 i2l6988 324C  
                               i2l8940 2806                                 i2l8932 27E2  
                               i2l8924 27C6                                 i2l8916 27AA  
                               i2l8908 278C                                 i2l9484 3856  
                               i2l8960 2854                                 i2l8952 2830  
                               i2l8944 2814                                 i2l8936 27F0  
                               i2l8928 27D4                                 i2l8880 2738  
                               i2l8980 28A2                                 i2l8972 2886  
                               i2l8964 2862                                 i2l8956 2846  
                               i2l8948 2822                                 i2l8892 2762  
                               i2l8884 2746                                 i2l8878 2732  
                               i2l9950 3606                                 i2l9960 2994  
                               i2l8992 28D4                                 i2l8984 28B0  
                               i2l8976 2894                                 i2l8968 2870  
                               i2l8896 2770                                 i2l8888 2754  
                               i2l9952 36EA                                 i2l9944 35E8  
                               i2l9962 29B0                                 i2l9954 36FA  
                               i2l9946 35F2                                 i2l8996 28E2  
                               i2l8988 28C6                                 i2l9948 35FC  
                               i2l9966 33FC                                 i2l9958 2972  
                               i2l9968 3418                _f_most_recent_sort_time 0137  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5146  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 51DE                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 3F56  
                               ___wmul 4DC6                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4DFC  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 44EE                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5222  
                               _initUI 4E60                                 _readIR 4C00  
                               _logRun 3A18                                 getIR@i 0087  
                               clear_0 4BD8                                 clear_1 4BE4  
                               clear_2 4BF0                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4A54  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1610                              ??_handler 004B  
              __size_of_initGlobalVars 00AC                           ?_retrieveLog 0007  
                               _strcpy 4D90                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 516E  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5146                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4BB2  
                     __end_of_printRTC 2702                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4D20                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0069                  __end_of_algorithmTest 402C  
                    __end_ofi2_lcdInst 5302                             _PusherTest 2ED2  
                    __end_ofi2_isdigit 5240                             __accesstop 0080  
              __end_of__initialization 4BF6                          ?_inputHandler 002A  
                _most_recent_sort_time 006D                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 528E                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 5340  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5316  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 47EC  
                          i2printRTC@i 0041                          _initSortTimer 4316  
          __end_of_updateServoPosition 45FA                          __end_of_putch 52DA  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2ED2                             __end_of_UI 116C  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 50C8  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 509C  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 48CE  
                         _EEPROM_write 3D8C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3235 0141  
                    __end_of_SpeedTest 467E                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 4702  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2416 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006F                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 52EA                              ?_initTime 0080  
                      _f_loadingNewCan 00F0                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4936                                _Loading 116C  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 40F0  
                              ___awmod 43C0                             _initServos 4AB0  
                              ___lldiv 41AE                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4702  
                              ___lwmod 4936                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4BB2  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 426A                                _lcdInst 52DA  
                              _handler 0008                                __ptext0 402C  
                              __ptext1 525C                                __ptext2 51DE  
                              __ptext3 116C                                __ptext4 4316  
                              __ptext5 426A                                __ptext6 4DFC  
                              __ptext7 477A                                __ptext8 4C00  
                              __ptext9 2C6A                        __size_of_printf 0438  
                              _readADC 50C8                        __size_of_strcpy 0036  
                              _initLCD 4C98                                _cur_can 012B  
                              _loadRTC 4462                                _readMAG 4C4C  
                              _dpowers FB00                     actuatorTest@i_1741 00AE  
                   actuatorTest@i_1750 00B4                     actuatorTest@i_1742 00AF  
                   actuatorTest@i_1734 00AD                     actuatorTest@i_1751 00B5  
                   actuatorTest@i_1760 00BA                     actuatorTest@i_1744 00B0  
                   actuatorTest@i_1761 00BB                     actuatorTest@i_1753 00B6  
                   actuatorTest@i_1745 00B1                     actuatorTest@i_1770 00C0  
                   actuatorTest@i_1754 00B7                     actuatorTest@i_1771 00C1  
                   actuatorTest@i_1763 00BC                     actuatorTest@i_1747 00B2  
                   actuatorTest@i_1764 00BD                     actuatorTest@i_1756 00B8  
                   actuatorTest@i_1748 00B3                     actuatorTest@i_1773 00C2  
                   actuatorTest@i_1757 00B9                     actuatorTest@i_1774 00C3  
                   actuatorTest@i_1766 00BE                     actuatorTest@i_1767 00BF  
                              _isdigit 50F4                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011C  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 3E74                         __pintcode_body 3704  
                 end_of_initialization 4BF6                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3704                    i2___wmul@multiplier 0001  
                            i2u1011_47 3394                              i2u1012_47 2B38  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1013_47 4B22                              i2u1014_47 4B2C  
                            i2u1015_47 4B4E                              i2u1016_47 4B58  
                            i2u1017_47 524C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 525C                 __end_of_initGlobalVars 4316  
                           _sensorTest 213A                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 353C  
                         ??_BothServos 00AB                  __end_of_machineConfig 4A54  
                           _updateMenu 2702                      i2_I2C_Master_Read 5194  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 52B8  
                    i2_I2C_Master_Stop 532E                      i2___lwdiv@divisor 0008  
                      _log_count_total 013F                              i2___lwdiv 4B60  
                            i2___lwmod 4CDE                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3350                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 52F6                          Loading@i_1160 00BC  
                        Loading@i_1162 00BE                          Loading@i_1148 00B6  
                        Loading@i_1157 00B8                          Loading@i_1159 00BA  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5222                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DCC                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 528E                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4DFC  
                       __end_of_getMAG 4E2E                         __end_of_getRTC 4574  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4E90  
                       __end_of_readIR 4C4C                         __end_of_logRun 3B5C  
                     i2___wmul@product 0005                         __end_of_printf 1A48  
                         i2printf@flag 0026                         __end_of_strcpy 4DC6  
            __end_ofi2_I2C_Master_Read 51BA              __end_ofi2_I2C_Master_Wait 52CA  
                         i2printf@prec 001D                    start_initialization 4BB2  
            __end_ofi2_I2C_Master_Stop 5336                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1398 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 45FA  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 467E                            ?_sensorTest 0001  
                          __pdataBANK1 0141                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1173 0086  
                             ID@i_1174 0088                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2548 0043                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A8  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2058 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0075  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1789 00AF                        _count_pop_w_tab 0129  
                          _EEPROM_read 5276                     __end_of_PortTestA5 4AB0  
                     _I2C_Master_Start 5326                              _f_lastCan 00EE  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5302                      __size_of_initTime 0022  
                i2_updateServoPosition 485E                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 48CE                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00E2  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 311A                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3F56  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0268  
                          __size_of_UI 08A2                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 533E             __end_ofi2_I2C_Master_Write 5316  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 3350  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u502_40 1F52                               i2u502_47 1F48  
                             i2u443_40 51B2                               _PIR2bits 000FA1  
                             i2u543_40 31A8                               i2u830_40 2B68  
                             i2u832_40 2B90                               i2u831_48 2B6A  
                             i2u498_40 1EF2                               i2u498_47 1EE8  
                  __size_of_updateMenu 02C0                         _log_completion 0063  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 516E                          lcdNibble@data 0081  
                             i2_getRTC 47EC                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DCC                               i2_strcpy 4E2E  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4BC6                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 52A4  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 04A4                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 43C0  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4F20             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4D58             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4D20                _change_state_to_menu_23 4EF0  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5010  
              _change_state_to_logs_12 4FE0                _change_state_to_logs_22 4FB0  
              _change_state_to_logs_23 506E                _change_state_to_logs_33 4F80  
              _change_state_to_logs_34 4F50                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 388C  
                           _EEPROMTest 533E                        _I2C_Master_Init 4998  
                     __size_of_readADC 002C                        _I2C_Master_Read 5040  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 52A4                        _I2C_Master_Stop 531E  
                     __size_of_isdigit 002A                               _delay_ms 511E  
                       _printSortTimer 29C2                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3C78  
                             __ptext10 511E                               __ptext11 3E74  
                             __ptext20 509C                               __ptext12 49F8  
                             __ptext21 5200                               __ptext13 3A18  
                             __ptext30 5040                               __ptext22 4C98  
                             __ptext14 3D8C                               __ptext31 52A4  
                             __ptext23 08CA                               __ptext15 5276  
                             __ptext40 0012                               __ptext32 4D20  
                             __ptext24 2438                               __ptext16 4E60  
                             __ptext41 45FA                               __ptext33 4D58  
                             __ptext25 4D90                               __ptext17 4462  
                             __ptext50 3894                               __ptext42 2ED2  
                             __ptext34 43C0                               __ptext26 44EE  
                             __ptext18 4998                               __ptext51 1610  
                             __ptext43 50C8                               __ptext35 40F0  
                             __ptext27 5302                               __ptext19 41AE  
                             __ptext60 353C                               __ptext52 52CA  
                             __ptext44 467E                               __ptext36 3C78  
                             __ptext28 531E                               __ptext61 485E  
                             __ptext53 50F4                               __ptext45 4A54  
                             __ptext37 213A                               __ptext29 5326  
                             __ptext70 4F20                               __ptext62 2702  
                             __ptext54 4DC6                               __ptext46 533E  
                             __ptext38 4C4C                               __ptext71 4F50  
                             __ptext63 5146                               __ptext55 4936  
                             __ptext47 1A48                               __ptext39 3F56  
                             __ptext80 29C2                               __ptext72 4F80  
                             __ptext64 311A                               __ptext56 4702  
                             __ptext48 4AB0                               __ptext81 1DCC  
                             __ptext73 506E                               __ptext65 4E2E  
                             __ptext57 52DA                               __ptext49 4574  
                             __ptext90 530C                               __ptext82 52EA  
                             __ptext74 4FB0                               __ptext66 3350  
                             __ptext58 48CE                               __ptext91 532E  
                             __ptext83 5222                               __ptext75 4FE0  
                             __ptext67 4E90                               __ptext92 5336  
                             __ptext84 516E                               __ptext76 5010  
                             __ptext68 4EC0                               __ptext93 5194  
                             __ptext85 4CDE                               __ptext77 51BA  
                             __ptext69 4EF0                               __ptext94 52B8  
                             __ptext86 4B60                               __ptext78 3B5C  
                             __ptext95 5240                               __ptext87 52F6  
                             __ptext79 528E                               __ptext88 4B0A  
                             __ptext89 47EC                               _dispLogs 51BA  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2058 0002  
                   __end_of_initServos 4B0A                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 5200  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4574                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 2438  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4EF0      __end_ofi2_change_state_to_menu_22 4EC0  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C6A  
                            putch@data 0082               __end_of_I2C_Master_Start 532E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 530C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 0071                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2438  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5276  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29C2                __end_of_I2C_Master_Init 49F8  
              __end_of_I2C_Master_Read 506E                __end_of_I2C_Master_Wait 52B8  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5326  
                          lcdInst@data 0082                          printRTC@F3226 0145  
                         retrieveLog@i 000E                            _retrieveLog 3B5C  
                  __end_ofi2_lcdNibble 4B60                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 0073  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 49F8  
                      ___lwmod@counter 008B                      _updateServoStates 353C  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
