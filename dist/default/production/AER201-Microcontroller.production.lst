

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 17:56:46 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  005484                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3232
   156  005484  4D                 	db	77
   157  005485  4D                 	db	77
   158  005486  4D                 	db	77
   159  005487  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3223
   162  005488  4D                 	db	77
   163  005489  4D                 	db	77
   164  00548A  4D                 	db	77
   165  00548B  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAEE                     __pmediumconst:
   169                           	opt stack 0
   170  00FAEE  00                 	db	0
   171  00FAEF                     _keys:
   172                           	opt stack 0
   173  00FAEF  31                 	db	49
   174  00FAF0  32                 	db	50
   175  00FAF1  33                 	db	51
   176  00FAF2  41                 	db	65
   177  00FAF3  34                 	db	52
   178  00FAF4  35                 	db	53
   179  00FAF5  36                 	db	54
   180  00FAF6  42                 	db	66
   181  00FAF7  37                 	db	55
   182  00FAF8  38                 	db	56
   183  00FAF9  39                 	db	57
   184  00FAFA  43                 	db	67
   185  00FAFB  2A                 	db	42
   186  00FAFC  30                 	db	48
   187  00FAFD  23                 	db	35
   188  00FAFE  44                 	db	68
   189  00FAFF  00                 	db	0
   190  00FB00                     __end_of_keys:
   191                           	opt stack 0
   192  00FB00                     _dpowers:
   193                           	opt stack 0
   194  00FB00  0001               	dw	1
   195  00FB02  000A               	dw	10
   196  00FB04  0064               	dw	100
   197  00FB06  03E8               	dw	1000
   198  00FB08  2710               	dw	10000
   199  00FB0A                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _LATEbits	set	3981
   225  0000                     _OSCCON	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIR2bits	set	4001
   228  0000                     _PORTAbits	set	3968
   229  0000                     _PORTB	set	3969
   230  0000                     _PORTBbits	set	3969
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T3CON	set	4017
   239  0000                     _TMR0H	set	4055
   240  0000                     _TMR0L	set	4054
   241  0000                     _TMR1H	set	4047
   242  0000                     _TMR1L	set	4046
   243  0000                     _TMR3H	set	4019
   244  0000                     _TMR3L	set	4018
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISC	set	3988
   248  0000                     _TRISD	set	3989
   249  0000                     _TRISE	set	3990
   250  0000                     _ACKDT	set	32301
   251  0000                     _ACKEN	set	32300
   252  0000                     _ADIE	set	31982
   253  0000                     _INT1IE	set	32643
   254  0000                     _INT1IF	set	32640
   255  0000                     _PEIE	set	32662
   256  0000                     _PEN	set	32298
   257  0000                     _RCEN	set	32299
   258  0000                     _RSEN	set	32297
   259  0000                     _SEN	set	32296
   260  0000                     _TMR0IE	set	32661
   261  0000                     _TMR0IF	set	32658
   262  0000                     _TMR0ON	set	32431
   263  0000                     _TMR1IE	set	31976
   264  0000                     _TMR1IF	set	31984
   265  0000                     _TMR1ON	set	32360
   266  0000                     _TMR2IE	set	31977
   267  0000                     _TMR3IE	set	32001
   268  0000                     _TMR3IF	set	32009
   269  0000                     _TMR3ON	set	32136
   270  0000                     _TRISC3	set	31907
   271  0000                     _TRISC4	set	31908
   272  0000                     _nRBPU	set	32655
   273  00FB0A                     STR_21:
   274  00FB0A  25                 	db	37
   275  00FB0B  30                 	db	48	;'0'
   276  00FB0C  32                 	db	50	;'2'
   277  00FB0D  64                 	db	100	;'d'
   278  00FB0E  25                 	db	37
   279  00FB0F  73                 	db	115	;'s'
   280  00FB10  20                 	db	32
   281  00FB11  7C                 	db	124
   282  00FB12  20                 	db	32
   283  00FB13  25                 	db	37
   284  00FB14  30                 	db	48	;'0'
   285  00FB15  32                 	db	50	;'2'
   286  00FB16  64                 	db	100	;'d'
   287  00FB17  3A                 	db	58	;':'
   288  00FB18  25                 	db	37
   289  00FB19  30                 	db	48	;'0'
   290  00FB1A  32                 	db	50	;'2'
   291  00FB1B  64                 	db	100	;'d'
   292  00FB1C  3A                 	db	58	;':'
   293  00FB1D  25                 	db	37
   294  00FB1E  30                 	db	48	;'0'
   295  00FB1F  32                 	db	50	;'2'
   296  00FB20  64                 	db	100	;'d'
   297  00FB21  00                 	db	0
   298  00FB22                     STR_66:
   299  00FB22  28                 	db	40
   300  00FB23  64                 	db	100	;'d'
   301  00FB24  61                 	db	97	;'a'
   302  00FB25  74                 	db	116	;'t'
   303  00FB26  61                 	db	97	;'a'
   304  00FB27  3A                 	db	58	;':'
   305  00FB28  20                 	db	32
   306  00FB29  25                 	db	37
   307  00FB2A  75                 	db	117	;'u'
   308  00FB2B  2C                 	db	44
   309  00FB2C  20                 	db	32
   310  00FB2D  61                 	db	97	;'a'
   311  00FB2E  64                 	db	100	;'d'
   312  00FB2F  64                 	db	100	;'d'
   313  00FB30  72                 	db	114	;'r'
   314  00FB31  3A                 	db	58	;':'
   315  00FB32  20                 	db	32
   316  00FB33  25                 	db	37
   317  00FB34  75                 	db	117	;'u'
   318  00FB35  29                 	db	41
   319  00FB36  00                 	db	0
   320  00FB37                     STR_111:
   321  00FB37  44                 	db	68	;'D'
   322  00FB38  20                 	db	32
   323  00FB39  57                 	db	87	;'W'
   324  00FB3A  49                 	db	73	;'I'
   325  00FB3B  4C                 	db	76	;'L'
   326  00FB3C  4C                 	db	76	;'L'
   327  00FB3D  20                 	db	32
   328  00FB3E  52                 	db	82	;'R'
   329  00FB3F  45                 	db	69	;'E'
   330  00FB40  54                 	db	84	;'T'
   331  00FB41  55                 	db	85	;'U'
   332  00FB42  52                 	db	82	;'R'
   333  00FB43  4E                 	db	78	;'N'
   334  00FB44  20                 	db	32
   335  00FB45  20                 	db	32
   336  00FB46  20                 	db	32
   337  00FB47  20                 	db	32
   338  00FB48  00                 	db	0
   339  00FB49                     STR_112:
   340  00FB49  4F                 	db	79	;'O'
   341  00FB4A  54                 	db	84	;'T'
   342  00FB4B  48                 	db	72	;'H'
   343  00FB4C  45                 	db	69	;'E'
   344  00FB4D  52                 	db	82	;'R'
   345  00FB4E  20                 	db	32
   346  00FB4F  53                 	db	83	;'S'
   347  00FB50  45                 	db	69	;'E'
   348  00FB51  54                 	db	84	;'T'
   349  00FB52  53                 	db	83	;'S'
   350  00FB53  20                 	db	32
   351  00FB54  52                 	db	82	;'R'
   352  00FB55  41                 	db	65	;'A'
   353  00FB56  35                 	db	53	;'5'
   354  00FB57  20                 	db	32
   355  00FB58  20                 	db	32
   356  00FB59  20                 	db	32
   357  00FB5A  00                 	db	0
   358  00FB5B                     STR_120:
   359  00FB5B  53                 	db	83	;'S'
   360  00FB5C  3A                 	db	58	;':'
   361  00FB5D  20                 	db	32
   362  00FB5E  44                 	db	68	;'D'
   363  00FB5F  20                 	db	32
   364  00FB60  57                 	db	87	;'W'
   365  00FB61  49                 	db	73	;'I'
   366  00FB62  4C                 	db	76	;'L'
   367  00FB63  4C                 	db	76	;'L'
   368  00FB64  20                 	db	32
   369  00FB65  52                 	db	82	;'R'
   370  00FB66  45                 	db	69	;'E'
   371  00FB67  54                 	db	84	;'T'
   372  00FB68  55                 	db	85	;'U'
   373  00FB69  52                 	db	82	;'R'
   374  00FB6A  4E                 	db	78	;'N'
   375  00FB6B  20                 	db	32
   376  00FB6C  00                 	db	0
   377  00FB6D                     STR_123:
   378  00FB6D  4F                 	db	79	;'O'
   379  00FB6E  54                 	db	84	;'T'
   380  00FB6F  48                 	db	72	;'H'
   381  00FB70  45                 	db	69	;'E'
   382  00FB71  52                 	db	82	;'R'
   383  00FB72  3A                 	db	58	;':'
   384  00FB73  20                 	db	32
   385  00FB74  43                 	db	67	;'C'
   386  00FB75  41                 	db	65	;'A'
   387  00FB76  4D                 	db	77	;'M'
   388  00FB77  20                 	db	32
   389  00FB78  54                 	db	84	;'T'
   390  00FB79  4F                 	db	79	;'O'
   391  00FB7A  47                 	db	71	;'G'
   392  00FB7B  47                 	db	71	;'G'
   393  00FB7C  4C                 	db	76	;'L'
   394  00FB7D  45                 	db	69	;'E'
   395  00FB7E  00                 	db	0
   396  00FB7F                     STR_122:
   397  00FB7F  44                 	db	68	;'D'
   398  00FB80  3A                 	db	58	;':'
   399  00FB81  20                 	db	32
   400  00FB82  52                 	db	82	;'R'
   401  00FB83  45                 	db	69	;'E'
   402  00FB84  54                 	db	84	;'T'
   403  00FB85  7C                 	db	124
   404  00FB86  32                 	db	50	;'2'
   405  00FB87  3A                 	db	58	;':'
   406  00FB88  20                 	db	32
   407  00FB89  43                 	db	67	;'C'
   408  00FB8A  4F                 	db	79	;'O'
   409  00FB8B  4E                 	db	78	;'N'
   410  00FB8C  44                 	db	68	;'D'
   411  00FB8D  20                 	db	32
   412  00FB8E  25                 	db	37
   413  00FB8F  64                 	db	100	;'d'
   414  00FB90  00                 	db	0
   415  00FB91                     STR_3:
   416  00FB91  2D                 	db	45
   417  00FB92  2D                 	db	45
   418  00FB93  20                 	db	32
   419  00FB94  4C                 	db	76	;'L'
   420  00FB95  4F                 	db	79	;'O'
   421  00FB96  47                 	db	71	;'G'
   422  00FB97  20                 	db	32
   423  00FB98  25                 	db	37
   424  00FB99  32                 	db	50	;'2'
   425  00FB9A  64                 	db	100	;'d'
   426  00FB9B  20                 	db	32
   427  00FB9C  48                 	db	72	;'H'
   428  00FB9D  45                 	db	69	;'E'
   429  00FB9E  52                 	db	82	;'R'
   430  00FB9F  45                 	db	69	;'E'
   431  00FBA0  2D                 	db	45
   432  00FBA1  2D                 	db	45
   433  00FBA2  00                 	db	0
   434  00FBA3                     STR_1:
   435  00FBA3  52                 	db	82	;'R'
   436  00FBA4  45                 	db	69	;'E'
   437  00FBA5  53                 	db	83	;'S'
   438  00FBA6  55                 	db	85	;'U'
   439  00FBA7  4C                 	db	76	;'L'
   440  00FBA8  54                 	db	84	;'T'
   441  00FBA9  53                 	db	83	;'S'
   442  00FBAA  20                 	db	32
   443  00FBAB  49                 	db	73	;'I'
   444  00FBAC  4E                 	db	78	;'N'
   445  00FBAD  20                 	db	32
   446  00FBAE  4C                 	db	76	;'L'
   447  00FBAF  4F                 	db	79	;'O'
   448  00FBB0  47                 	db	71	;'G'
   449  00FBB1  20                 	db	32
   450  00FBB2  25                 	db	37
   451  00FBB3  64                 	db	100	;'d'
   452  00FBB4  00                 	db	0
   453  00FBB5                     STR_102:
   454  00FBB5  4D                 	db	77	;'M'
   455  00FBB6  49                 	db	73	;'I'
   456  00FBB7  44                 	db	68	;'D'
   457  00FBB8  20                 	db	32
   458  00FBB9  2D                 	db	45
   459  00FBBA  2D                 	db	45
   460  00FBBB  20                 	db	32
   461  00FBBC  32                 	db	50	;'2'
   462  00FBBD  73                 	db	115	;'s'
   463  00FBBE  20                 	db	32
   464  00FBBF  20                 	db	32
   465  00FBC0  20                 	db	32
   466  00FBC1  20                 	db	32
   467  00FBC2  20                 	db	32
   468  00FBC3  20                 	db	32
   469  00FBC4  20                 	db	32
   470  00FBC5  00                 	db	0
   471  00FBC6                     STR_105:
   472  00FBC6  44                 	db	68	;'D'
   473  00FBC7  52                 	db	82	;'R'
   474  00FBC8  4F                 	db	79	;'O'
   475  00FBC9  50                 	db	80	;'P'
   476  00FBCA  20                 	db	32
   477  00FBCB  2D                 	db	45
   478  00FBCC  2D                 	db	45
   479  00FBCD  20                 	db	32
   480  00FBCE  32                 	db	50	;'2'
   481  00FBCF  73                 	db	115	;'s'
   482  00FBD0  20                 	db	32
   483  00FBD1  20                 	db	32
   484  00FBD2  20                 	db	32
   485  00FBD3  20                 	db	32
   486  00FBD4  20                 	db	32
   487  00FBD5  20                 	db	32
   488  00FBD6  00                 	db	0
   489  00FBD7                     STR_99:
   490  00FBD7  4C                 	db	76	;'L'
   491  00FBD8  45                 	db	69	;'E'
   492  00FBD9  46                 	db	70	;'F'
   493  00FBDA  54                 	db	84	;'T'
   494  00FBDB  20                 	db	32
   495  00FBDC  2D                 	db	45
   496  00FBDD  2D                 	db	45
   497  00FBDE  20                 	db	32
   498  00FBDF  32                 	db	50	;'2'
   499  00FBE0  73                 	db	115	;'s'
   500  00FBE1  20                 	db	32
   501  00FBE2  20                 	db	32
   502  00FBE3  20                 	db	32
   503  00FBE4  20                 	db	32
   504  00FBE5  20                 	db	32
   505  00FBE6  20                 	db	32
   506  00FBE7  00                 	db	0
   507  00FBE8                     STR_104:
   508  00FBE8  4C                 	db	76	;'L'
   509  00FBE9  45                 	db	69	;'E'
   510  00FBEA  56                 	db	86	;'V'
   511  00FBEB  45                 	db	69	;'E'
   512  00FBEC  4C                 	db	76	;'L'
   513  00FBED  20                 	db	32
   514  00FBEE  2D                 	db	45
   515  00FBEF  2D                 	db	45
   516  00FBF0  20                 	db	32
   517  00FBF1  32                 	db	50	;'2'
   518  00FBF2  73                 	db	115	;'s'
   519  00FBF3  20                 	db	32
   520  00FBF4  20                 	db	32
   521  00FBF5  20                 	db	32
   522  00FBF6  20                 	db	32
   523  00FBF7  20                 	db	32
   524  00FBF8  00                 	db	0
   525  00FBF9                     STR_98:
   526  00FBF9  52                 	db	82	;'R'
   527  00FBFA  49                 	db	73	;'I'
   528  00FBFB  47                 	db	71	;'G'
   529  00FBFC  48                 	db	72	;'H'
   530  00FBFD  54                 	db	84	;'T'
   531  00FBFE  20                 	db	32
   532  00FBFF  2D                 	db	45
   533  00FC00  2D                 	db	45
   534  00FC01  20                 	db	32
   535  00FC02  32                 	db	50	;'2'
   536  00FC03  73                 	db	115	;'s'
   537  00FC04  20                 	db	32
   538  00FC05  20                 	db	32
   539  00FC06  20                 	db	32
   540  00FC07  20                 	db	32
   541  00FC08  20                 	db	32
   542  00FC09  00                 	db	0
   543  00FC0A                     STR_97:
   544  00FC0A  4D                 	db	77	;'M'
   545  00FC0B  49                 	db	73	;'I'
   546  00FC0C  44                 	db	68	;'D'
   547  00FC0D  44                 	db	68	;'D'
   548  00FC0E  4C                 	db	76	;'L'
   549  00FC0F  45                 	db	69	;'E'
   550  00FC10  20                 	db	32
   551  00FC11  2D                 	db	45
   552  00FC12  2D                 	db	45
   553  00FC13  20                 	db	32
   554  00FC14  32                 	db	50	;'2'
   555  00FC15  73                 	db	115	;'s'
   556  00FC16  20                 	db	32
   557  00FC17  20                 	db	32
   558  00FC18  20                 	db	32
   559  00FC19  20                 	db	32
   560  00FC1A  00                 	db	0
   561  00FC1B  44                 	db	68	;'D'
   562  00FC1C  20                 	db	32
   563  00FC1D  57                 	db	87	;'W'
   564  00FC1E  49                 	db	73	;'I'
   565  00FC1F  4C                 	db	76	;'L'
   566  00FC20  4C                 	db	76	;'L'
   567  00FC21  20                 	db	32
   568  00FC22  52                 	db	82	;'R'
   569  00FC23  45                 	db	69	;'E'
   570  00FC24  54                 	db	84	;'T'
   571  00FC25  55                 	db	85	;'U'
   572  00FC26  52                 	db	82	;'R'
   573  00FC27  4E                 	db	78	;'N'
   574  00FC28  20                 	db	32
   575  00FC29  20                 	db	32
   576  00FC2A  20                 	db	32
   577  00FC2B  00                 	db	0
   578  00FC2C                     STR_100:
   579  00FC2C  4D                 	db	77	;'M'
   580  00FC2D  49                 	db	73	;'I'
   581  00FC2E  44                 	db	68	;'D'
   582  00FC2F  2D                 	db	45
   583  00FC30  4C                 	db	76	;'L'
   584  00FC31  45                 	db	69	;'E'
   585  00FC32  46                 	db	70	;'F'
   586  00FC33  54                 	db	84	;'T'
   587  00FC34  20                 	db	32
   588  00FC35  2D                 	db	45
   589  00FC36  2D                 	db	45
   590  00FC37  20                 	db	32
   591  00FC38  32                 	db	50	;'2'
   592  00FC39  73                 	db	115	;'s'
   593  00FC3A  20                 	db	32
   594  00FC3B  20                 	db	32
   595  00FC3C  00                 	db	0
   596  00FC3D                     STR_101:
   597  00FC3D  4D                 	db	77	;'M'
   598  00FC3E  49                 	db	73	;'I'
   599  00FC3F  44                 	db	68	;'D'
   600  00FC40  2D                 	db	45
   601  00FC41  52                 	db	82	;'R'
   602  00FC42  49                 	db	73	;'I'
   603  00FC43  47                 	db	71	;'G'
   604  00FC44  48                 	db	72	;'H'
   605  00FC45  54                 	db	84	;'T'
   606  00FC46  20                 	db	32
   607  00FC47  2D                 	db	45
   608  00FC48  2D                 	db	45
   609  00FC49  20                 	db	32
   610  00FC4A  32                 	db	50	;'2'
   611  00FC4B  73                 	db	115	;'s'
   612  00FC4C  20                 	db	32
   613  00FC4D  00                 	db	0
   614  00FC4E  45                 	db	69	;'E'
   615  00FC4F  4C                 	db	76	;'L'
   616  00FC50  53                 	db	83	;'S'
   617  00FC51  45                 	db	69	;'E'
   618  00FC52  20                 	db	32
   619  00FC53  54                 	db	84	;'T'
   620  00FC54  4F                 	db	79	;'O'
   621  00FC55  47                 	db	71	;'G'
   622  00FC56  47                 	db	71	;'G'
   623  00FC57  4C                 	db	76	;'L'
   624  00FC58  45                 	db	69	;'E'
   625  00FC59  53                 	db	83	;'S'
   626  00FC5A  20                 	db	32
   627  00FC5B  52                 	db	82	;'R'
   628  00FC5C  41                 	db	65	;'A'
   629  00FC5D  35                 	db	53	;'5'
   630  00FC5E  00                 	db	0
   631  00FC5F                     STR_72:
   632  00FC5F  41                 	db	65	;'A'
   633  00FC60  4C                 	db	76	;'L'
   634  00FC61  47                 	db	71	;'G'
   635  00FC62  31                 	db	49	;'1'
   636  00FC63  3A                 	db	58	;':'
   637  00FC64  20                 	db	32
   638  00FC65  39                 	db	57	;'9'
   639  00FC66  20                 	db	32
   640  00FC67  50                 	db	80	;'P'
   641  00FC68  4F                 	db	79	;'O'
   642  00FC69  50                 	db	80	;'P'
   643  00FC6A  4E                 	db	78	;'N'
   644  00FC6B  4F                 	db	79	;'O'
   645  00FC6C  54                 	db	84	;'T'
   646  00FC6D  41                 	db	65	;'A'
   647  00FC6E  42                 	db	66	;'B'
   648  00FC6F  00                 	db	0
   649  00FC70                     STR_92:
   650  00FC70  54                 	db	84	;'T'
   651  00FC71  53                 	db	83	;'S'
   652  00FC72  54                 	db	84	;'T'
   653  00FC73  3A                 	db	58	;':'
   654  00FC74  20                 	db	32
   655  00FC75  43                 	db	67	;'C'
   656  00FC76  4F                 	db	79	;'O'
   657  00FC77  4E                 	db	78	;'N'
   658  00FC78  44                 	db	68	;'D'
   659  00FC79  20                 	db	32
   660  00FC7A  53                 	db	83	;'S'
   661  00FC7B  4F                 	db	79	;'O'
   662  00FC7C  4C                 	db	76	;'L'
   663  00FC7D  4E                 	db	78	;'N'
   664  00FC7E  27                 	db	39
   665  00FC7F  44                 	db	68	;'D'
   666  00FC80  00                 	db	0
   667  00FC81                     STR_94:
   668  00FC81  54                 	db	84	;'T'
   669  00FC82  53                 	db	83	;'S'
   670  00FC83  54                 	db	84	;'T'
   671  00FC84  3A                 	db	58	;':'
   672  00FC85  20                 	db	32
   673  00FC86  50                 	db	80	;'P'
   674  00FC87  55                 	db	85	;'U'
   675  00FC88  53                 	db	83	;'S'
   676  00FC89  48                 	db	72	;'H'
   677  00FC8A  20                 	db	32
   678  00FC8B  53                 	db	83	;'S'
   679  00FC8C  4F                 	db	79	;'O'
   680  00FC8D  4C                 	db	76	;'L'
   681  00FC8E  4E                 	db	78	;'N'
   682  00FC8F  27                 	db	39
   683  00FC90  44                 	db	68	;'D'
   684  00FC91  00                 	db	0
   685  00FC92                     STR_68:
   686  00FC92  32                 	db	50	;'2'
   687  00FC93  2E                 	db	46
   688  00FC94  53                 	db	83	;'S'
   689  00FC95  4E                 	db	78	;'N'
   690  00FC96  52                 	db	82	;'R'
   691  00FC97  7C                 	db	124
   692  00FC98  34                 	db	52	;'4'
   693  00FC99  2E                 	db	46
   694  00FC9A  48                 	db	72	;'H'
   695  00FC9B  49                 	db	73	;'I'
   696  00FC9C  7C                 	db	124
   697  00FC9D  35                 	db	53	;'5'
   698  00FC9E  2E                 	db	46
   699  00FC9F  4D                 	db	77	;'M'
   700  00FCA0  45                 	db	69	;'E'
   701  00FCA1  44                 	db	68	;'D'
   702  00FCA2  00                 	db	0
   703  00FCA3                     STR_69:
   704  00FCA3  42                 	db	66	;'B'
   705  00FCA4  2E                 	db	46
   706  00FCA5  50                 	db	80	;'P'
   707  00FCA6  53                 	db	83	;'S'
   708  00FCA7  48                 	db	72	;'H'
   709  00FCA8  7C                 	db	124
   710  00FCA9  38                 	db	56	;'8'
   711  00FCAA  2E                 	db	46
   712  00FCAB  53                 	db	83	;'S'
   713  00FCAC  56                 	db	86	;'V'
   714  00FCAD  7C                 	db	124
   715  00FCAE  39                 	db	57	;'9'
   716  00FCAF  2E                 	db	46
   717  00FCB0  42                 	db	66	;'B'
   718  00FCB1  4C                 	db	76	;'L'
   719  00FCB2  4B                 	db	75	;'K'
   720  00FCB3  00                 	db	0
   721  00FCB4                     STR_110:
   722  00FCB4  54                 	db	84	;'T'
   723  00FCB5  53                 	db	83	;'S'
   724  00FCB6  54                 	db	84	;'T'
   725  00FCB7  3A                 	db	58	;':'
   726  00FCB8  20                 	db	32
   727  00FCB9  42                 	db	66	;'B'
   728  00FCBA  4F                 	db	79	;'O'
   729  00FCBB  54                 	db	84	;'T'
   730  00FCBC  48                 	db	72	;'H'
   731  00FCBD  20                 	db	32
   732  00FCBE  53                 	db	83	;'S'
   733  00FCBF  45                 	db	69	;'E'
   734  00FCC0  52                 	db	82	;'R'
   735  00FCC1  56                 	db	86	;'V'
   736  00FCC2  4F                 	db	79	;'O'
   737  00FCC3  53                 	db	83	;'S'
   738  00FCC4  00                 	db	0
   739  00FCC5                     STR_41:
   740  00FCC5  4C                 	db	76	;'L'
   741  00FCC6  4F                 	db	79	;'O'
   742  00FCC7  47                 	db	71	;'G'
   743  00FCC8  20                 	db	32
   744  00FCC9  31                 	db	49	;'1'
   745  00FCCA  20                 	db	32
   746  00FCCB  20                 	db	32
   747  00FCCC  20                 	db	32
   748  00FCCD  20                 	db	32
   749  00FCCE  20                 	db	32
   750  00FCCF  20                 	db	32
   751  00FCD0  20                 	db	32
   752  00FCD1  20                 	db	32
   753  00FCD2  20                 	db	32
   754  00FCD3  20                 	db	32
   755  00FCD4  20                 	db	32
   756  00FCD5  00                 	db	0
   757  00FCD6                     STR_40:
   758  00FCD6  4C                 	db	76	;'L'
   759  00FCD7  4F                 	db	79	;'O'
   760  00FCD8  47                 	db	71	;'G'
   761  00FCD9  20                 	db	32
   762  00FCDA  32                 	db	50	;'2'
   763  00FCDB  20                 	db	32
   764  00FCDC  20                 	db	32
   765  00FCDD  20                 	db	32
   766  00FCDE  20                 	db	32
   767  00FCDF  20                 	db	32
   768  00FCE0  20                 	db	32
   769  00FCE1  20                 	db	32
   770  00FCE2  20                 	db	32
   771  00FCE3  20                 	db	32
   772  00FCE4  20                 	db	32
   773  00FCE5  20                 	db	32
   774  00FCE6  00                 	db	0
   775  00FCE7                     STR_44:
   776  00FCE7  4C                 	db	76	;'L'
   777  00FCE8  4F                 	db	79	;'O'
   778  00FCE9  47                 	db	71	;'G'
   779  00FCEA  20                 	db	32
   780  00FCEB  33                 	db	51	;'3'
   781  00FCEC  20                 	db	32
   782  00FCED  20                 	db	32
   783  00FCEE  20                 	db	32
   784  00FCEF  20                 	db	32
   785  00FCF0  20                 	db	32
   786  00FCF1  20                 	db	32
   787  00FCF2  20                 	db	32
   788  00FCF3  20                 	db	32
   789  00FCF4  20                 	db	32
   790  00FCF5  20                 	db	32
   791  00FCF6  20                 	db	32
   792  00FCF7  00                 	db	0
   793  00FCF8                     STR_48:
   794  00FCF8  4C                 	db	76	;'L'
   795  00FCF9  4F                 	db	79	;'O'
   796  00FCFA  47                 	db	71	;'G'
   797  00FCFB  20                 	db	32
   798  00FCFC  34                 	db	52	;'4'
   799  00FCFD  20                 	db	32
   800  00FCFE  20                 	db	32
   801  00FCFF  20                 	db	32
   802  00FD00  20                 	db	32
   803  00FD01  20                 	db	32
   804  00FD02  20                 	db	32
   805  00FD03  20                 	db	32
   806  00FD04  20                 	db	32
   807  00FD05  20                 	db	32
   808  00FD06  20                 	db	32
   809  00FD07  20                 	db	32
   810  00FD08  00                 	db	0
   811  00FD09                     STR_36:
   812  00FD09  33                 	db	51	;'3'
   813  00FD0A  2E                 	db	46
   814  00FD0B  20                 	db	32
   815  00FD0C  4C                 	db	76	;'L'
   816  00FD0D  4F                 	db	79	;'O'
   817  00FD0E  47                 	db	71	;'G'
   818  00FD0F  53                 	db	83	;'S'
   819  00FD10  20                 	db	32
   820  00FD11  20                 	db	32
   821  00FD12  20                 	db	32
   822  00FD13  20                 	db	32
   823  00FD14  20                 	db	32
   824  00FD15  20                 	db	32
   825  00FD16  20                 	db	32
   826  00FD17  20                 	db	32
   827  00FD18  20                 	db	32
   828  00FD19  00                 	db	0
   829  00FD1A                     STR_32:
   830  00FD1A  32                 	db	50	;'2'
   831  00FD1B  2E                 	db	46
   832  00FD1C  20                 	db	32
   833  00FD1D  53                 	db	83	;'S'
   834  00FD1E  4F                 	db	79	;'O'
   835  00FD1F  52                 	db	82	;'R'
   836  00FD20  54                 	db	84	;'T'
   837  00FD21  20                 	db	32
   838  00FD22  20                 	db	32
   839  00FD23  20                 	db	32
   840  00FD24  20                 	db	32
   841  00FD25  20                 	db	32
   842  00FD26  20                 	db	32
   843  00FD27  20                 	db	32
   844  00FD28  20                 	db	32
   845  00FD29  20                 	db	32
   846  00FD2A  00                 	db	0
   847  00FD2B                     STR_33:
   848  00FD2B  31                 	db	49	;'1'
   849  00FD2C  2E                 	db	46
   850  00FD2D  20                 	db	32
   851  00FD2E  44                 	db	68	;'D'
   852  00FD2F  41                 	db	65	;'A'
   853  00FD30  54                 	db	84	;'T'
   854  00FD31  45                 	db	69	;'E'
   855  00FD32  2F                 	db	47
   856  00FD33  54                 	db	84	;'T'
   857  00FD34  49                 	db	73	;'I'
   858  00FD35  4D                 	db	77	;'M'
   859  00FD36  45                 	db	69	;'E'
   860  00FD37  20                 	db	32
   861  00FD38  20                 	db	32
   862  00FD39  20                 	db	32
   863  00FD3A  20                 	db	32
   864  00FD3B  00                 	db	0
   865  00FD3C                     STR_24:
   866  00FD3C  20                 	db	32
   867  00FD3D  2D                 	db	45
   868  00FD3E  2D                 	db	45
   869  00FD3F  20                 	db	32
   870  00FD40  50                 	db	80	;'P'
   871  00FD41  4F                 	db	79	;'O'
   872  00FD42  50                 	db	80	;'P'
   873  00FD43  20                 	db	32
   874  00FD44  20                 	db	32
   875  00FD45  43                 	db	67	;'C'
   876  00FD46  41                 	db	65	;'A'
   877  00FD47  4E                 	db	78	;'N'
   878  00FD48  20                 	db	32
   879  00FD49  2D                 	db	45
   880  00FD4A  2D                 	db	45
   881  00FD4B  20                 	db	32
   882  00FD4C  00                 	db	0
   883  00FD4D                     STR_26:
   884  00FD4D  20                 	db	32
   885  00FD4E  2D                 	db	45
   886  00FD4F  2D                 	db	45
   887  00FD50  20                 	db	32
   888  00FD51  53                 	db	83	;'S'
   889  00FD52  4F                 	db	79	;'O'
   890  00FD53  55                 	db	85	;'U'
   891  00FD54  50                 	db	80	;'P'
   892  00FD55  20                 	db	32
   893  00FD56  43                 	db	67	;'C'
   894  00FD57  41                 	db	65	;'A'
   895  00FD58  4E                 	db	78	;'N'
   896  00FD59  20                 	db	32
   897  00FD5A  2D                 	db	45
   898  00FD5B  2D                 	db	45
   899  00FD5C  20                 	db	32
   900  00FD5D  00                 	db	0
   901  00FD5E                     STR_28:
   902  00FD5E  2D                 	db	45
   903  00FD5F  2D                 	db	45
   904  00FD60  20                 	db	32
   905  00FD61  54                 	db	84	;'T'
   906  00FD62  4F                 	db	79	;'O'
   907  00FD63  54                 	db	84	;'T'
   908  00FD64  41                 	db	65	;'A'
   909  00FD65  4C                 	db	76	;'L'
   910  00FD66  20                 	db	32
   911  00FD67  43                 	db	67	;'C'
   912  00FD68  41                 	db	65	;'A'
   913  00FD69  4E                 	db	78	;'N'
   914  00FD6A  53                 	db	83	;'S'
   915  00FD6B  20                 	db	32
   916  00FD6C  2D                 	db	45
   917  00FD6D  2D                 	db	45
   918  00FD6E  00                 	db	0
   919  00FD6F                     STR_39:
   920  00FD6F  4C                 	db	76	;'L'
   921  00FD70  4F                 	db	79	;'O'
   922  00FD71  47                 	db	71	;'G'
   923  00FD72  20                 	db	32
   924  00FD73  31                 	db	49	;'1'
   925  00FD74  20                 	db	32
   926  00FD75  20                 	db	32
   927  00FD76  20                 	db	32
   928  00FD77  20                 	db	32
   929  00FD78  20                 	db	32
   930  00FD79  20                 	db	32
   931  00FD7A  20                 	db	32
   932  00FD7B  20                 	db	32
   933  00FD7C  20                 	db	32
   934  00FD7D  20                 	db	32
   935  00FD7E  3C                 	db	60	;'<'
   936  00FD7F  00                 	db	0
   937  00FD80                     STR_42:
   938  00FD80  4C                 	db	76	;'L'
   939  00FD81  4F                 	db	79	;'O'
   940  00FD82  47                 	db	71	;'G'
   941  00FD83  20                 	db	32
   942  00FD84  32                 	db	50	;'2'
   943  00FD85  20                 	db	32
   944  00FD86  20                 	db	32
   945  00FD87  20                 	db	32
   946  00FD88  20                 	db	32
   947  00FD89  20                 	db	32
   948  00FD8A  20                 	db	32
   949  00FD8B  20                 	db	32
   950  00FD8C  20                 	db	32
   951  00FD8D  20                 	db	32
   952  00FD8E  20                 	db	32
   953  00FD8F  3C                 	db	60	;'<'
   954  00FD90  00                 	db	0
   955  00FD91                     STR_46:
   956  00FD91  4C                 	db	76	;'L'
   957  00FD92  4F                 	db	79	;'O'
   958  00FD93  47                 	db	71	;'G'
   959  00FD94  20                 	db	32
   960  00FD95  33                 	db	51	;'3'
   961  00FD96  20                 	db	32
   962  00FD97  20                 	db	32
   963  00FD98  20                 	db	32
   964  00FD99  20                 	db	32
   965  00FD9A  20                 	db	32
   966  00FD9B  20                 	db	32
   967  00FD9C  20                 	db	32
   968  00FD9D  20                 	db	32
   969  00FD9E  20                 	db	32
   970  00FD9F  20                 	db	32
   971  00FDA0  3C                 	db	60	;'<'
   972  00FDA1  00                 	db	0
   973  00FDA2                     STR_50:
   974  00FDA2  4C                 	db	76	;'L'
   975  00FDA3  4F                 	db	79	;'O'
   976  00FDA4  47                 	db	71	;'G'
   977  00FDA5  20                 	db	32
   978  00FDA6  34                 	db	52	;'4'
   979  00FDA7  20                 	db	32
   980  00FDA8  20                 	db	32
   981  00FDA9  20                 	db	32
   982  00FDAA  20                 	db	32
   983  00FDAB  20                 	db	32
   984  00FDAC  20                 	db	32
   985  00FDAD  20                 	db	32
   986  00FDAE  20                 	db	32
   987  00FDAF  20                 	db	32
   988  00FDB0  20                 	db	32
   989  00FDB1  3C                 	db	60	;'<'
   990  00FDB2  00                 	db	0
   991  00FDB3                     STR_38:
   992  00FDB3  33                 	db	51	;'3'
   993  00FDB4  2E                 	db	46
   994  00FDB5  20                 	db	32
   995  00FDB6  4C                 	db	76	;'L'
   996  00FDB7  4F                 	db	79	;'O'
   997  00FDB8  47                 	db	71	;'G'
   998  00FDB9  53                 	db	83	;'S'
   999  00FDBA  20                 	db	32
  1000  00FDBB  20                 	db	32
  1001  00FDBC  20                 	db	32
  1002  00FDBD  20                 	db	32
  1003  00FDBE  20                 	db	32
  1004  00FDBF  20                 	db	32
  1005  00FDC0  20                 	db	32
  1006  00FDC1  20                 	db	32
  1007  00FDC2  3C                 	db	60	;'<'
  1008  00FDC3  00                 	db	0
  1009  00FDC4                     STR_34:
  1010  00FDC4  32                 	db	50	;'2'
  1011  00FDC5  2E                 	db	46
  1012  00FDC6  20                 	db	32
  1013  00FDC7  53                 	db	83	;'S'
  1014  00FDC8  4F                 	db	79	;'O'
  1015  00FDC9  52                 	db	82	;'R'
  1016  00FDCA  54                 	db	84	;'T'
  1017  00FDCB  20                 	db	32
  1018  00FDCC  20                 	db	32
  1019  00FDCD  20                 	db	32
  1020  00FDCE  20                 	db	32
  1021  00FDCF  20                 	db	32
  1022  00FDD0  20                 	db	32
  1023  00FDD1  20                 	db	32
  1024  00FDD2  20                 	db	32
  1025  00FDD3  3C                 	db	60	;'<'
  1026  00FDD4  00                 	db	0
  1027  00FDD5                     STR_31:
  1028  00FDD5  31                 	db	49	;'1'
  1029  00FDD6  2E                 	db	46
  1030  00FDD7  20                 	db	32
  1031  00FDD8  44                 	db	68	;'D'
  1032  00FDD9  41                 	db	65	;'A'
  1033  00FDDA  54                 	db	84	;'T'
  1034  00FDDB  45                 	db	69	;'E'
  1035  00FDDC  2F                 	db	47
  1036  00FDDD  54                 	db	84	;'T'
  1037  00FDDE  49                 	db	73	;'I'
  1038  00FDDF  4D                 	db	77	;'M'
  1039  00FDE0  45                 	db	69	;'E'
  1040  00FDE1  20                 	db	32
  1041  00FDE2  20                 	db	32
  1042  00FDE3  20                 	db	32
  1043  00FDE4  3C                 	db	60	;'<'
  1044  00FDE5  00                 	db	0
  1045  00FDE6                     STR_6:
  1046  00FDE6  50                 	db	80	;'P'
  1047  00FDE7  41                 	db	65	;'A'
  1048  00FDE8  55                 	db	85	;'U'
  1049  00FDE9  53                 	db	83	;'S'
  1050  00FDEA  45                 	db	69	;'E'
  1051  00FDEB  20                 	db	32
  1052  00FDEC  3C                 	db	60	;'<'
  1053  00FDED  20                 	db	32
  1054  00FDEE  7C                 	db	124
  1055  00FDEF  20                 	db	32
  1056  00FDF0  42                 	db	66	;'B'
  1057  00FDF1  41                 	db	65	;'A'
  1058  00FDF2  43                 	db	67	;'C'
  1059  00FDF3  4B                 	db	75	;'K'
  1060  00FDF4  20                 	db	32
  1061  00FDF5  3E                 	db	62	;'>'
  1062  00FDF6  00                 	db	0
  1063  00FDF7                     STR_30:
  1064  00FDF7  50                 	db	80	;'P'
  1065  00FDF8  55                 	db	85	;'U'
  1066  00FDF9  53                 	db	83	;'S'
  1067  00FDFA  48                 	db	72	;'H'
  1068  00FDFB  20                 	db	32
  1069  00FDFC  54                 	db	84	;'T'
  1070  00FDFD  4F                 	db	79	;'O'
  1071  00FDFE  20                 	db	32
  1072  00FDFF  43                 	db	67	;'C'
  1073  00FE00  4F                 	db	79	;'O'
  1074  00FE01  4E                 	db	78	;'N'
  1075  00FE02  54                 	db	84	;'T'
  1076  00FE03  49                 	db	73	;'I'
  1077  00FE04  4E                 	db	78	;'N'
  1078  00FE05  55                 	db	85	;'U'
  1079  00FE06  45                 	db	69	;'E'
  1080  00FE07  00                 	db	0
  1081  00FE08                     STR_27:
  1082  00FE08  4E                 	db	78	;'N'
  1083  00FE09  4C                 	db	76	;'L'
  1084  00FE0A  41                 	db	65	;'A'
  1085  00FE0B  42                 	db	66	;'B'
  1086  00FE0C  3A                 	db	58	;':'
  1087  00FE0D  20                 	db	32
  1088  00FE0E  25                 	db	37
  1089  00FE0F  64                 	db	100	;'d'
  1090  00FE10  7C                 	db	124
  1091  00FE11  4C                 	db	76	;'L'
  1092  00FE12  41                 	db	65	;'A'
  1093  00FE13  42                 	db	66	;'B'
  1094  00FE14  3A                 	db	58	;':'
  1095  00FE15  20                 	db	32
  1096  00FE16  25                 	db	37
  1097  00FE17  64                 	db	100	;'d'
  1098  00FE18  00                 	db	0
  1099  00FE19                     STR_25:
  1100  00FE19  4E                 	db	78	;'N'
  1101  00FE1A  54                 	db	84	;'T'
  1102  00FE1B  41                 	db	65	;'A'
  1103  00FE1C  42                 	db	66	;'B'
  1104  00FE1D  3A                 	db	58	;':'
  1105  00FE1E  20                 	db	32
  1106  00FE1F  25                 	db	37
  1107  00FE20  64                 	db	100	;'d'
  1108  00FE21  7C                 	db	124
  1109  00FE22  54                 	db	84	;'T'
  1110  00FE23  41                 	db	65	;'A'
  1111  00FE24  42                 	db	66	;'B'
  1112  00FE25  3A                 	db	58	;':'
  1113  00FE26  20                 	db	32
  1114  00FE27  25                 	db	37
  1115  00FE28  64                 	db	100	;'d'
  1116  00FE29  00                 	db	0
  1117  00FE2A                     STR_83:
  1118  00FE2A  4D                 	db	77	;'M'
  1119  00FE2B  41                 	db	65	;'A'
  1120  00FE2C  47                 	db	71	;'G'
  1121  00FE2D  5F                 	db	95	;'_'
  1122  00FE2E  73                 	db	115	;'s'
  1123  00FE2F  69                 	db	105	;'i'
  1124  00FE30  67                 	db	103	;'g'
  1125  00FE31  6E                 	db	110	;'n'
  1126  00FE32  61                 	db	97	;'a'
  1127  00FE33  6C                 	db	108	;'l'
  1128  00FE34  3A                 	db	58	;':'
  1129  00FE35  20                 	db	32
  1130  00FE36  25                 	db	37
  1131  00FE37  64                 	db	100	;'d'
  1132  00FE38  20                 	db	32
  1133  00FE39  00                 	db	0
  1134  00FE3A                     STR_103:
  1135  00FE3A  54                 	db	84	;'T'
  1136  00FE3B  53                 	db	83	;'S'
  1137  00FE3C  54                 	db	84	;'T'
  1138  00FE3D  3A                 	db	58	;':'
  1139  00FE3E  20                 	db	32
  1140  00FE3F  54                 	db	84	;'T'
  1141  00FE40  49                 	db	73	;'I'
  1142  00FE41  4C                 	db	76	;'L'
  1143  00FE42  54                 	db	84	;'T'
  1144  00FE43  20                 	db	32
  1145  00FE44  53                 	db	83	;'S'
  1146  00FE45  45                 	db	69	;'E'
  1147  00FE46  52                 	db	82	;'R'
  1148  00FE47  56                 	db	86	;'V'
  1149  00FE48  4F                 	db	79	;'O'
  1150  00FE49  00                 	db	0
  1151  00FE4A                     STR_4:
  1152  00FE4A  44                 	db	68	;'D'
  1153  00FE4B  49                 	db	73	;'I'
  1154  00FE4C  44                 	db	68	;'D'
  1155  00FE4D  4E                 	db	78	;'N'
  1156  00FE4E  27                 	db	39
  1157  00FE4F  54                 	db	84	;'T'
  1158  00FE50  20                 	db	32
  1159  00FE51  43                 	db	67	;'C'
  1160  00FE52  4F                 	db	79	;'O'
  1161  00FE53  4D                 	db	77	;'M'
  1162  00FE54  50                 	db	80	;'P'
  1163  00FE55  4C                 	db	76	;'L'
  1164  00FE56  45                 	db	69	;'E'
  1165  00FE57  54                 	db	84	;'T'
  1166  00FE58  45                 	db	69	;'E'
  1167  00FE59  00                 	db	0
  1168  00FE5A                     STR_80:
  1169  00FE5A  49                 	db	73	;'I'
  1170  00FE5B  52                 	db	82	;'R'
  1171  00FE5C  5F                 	db	95	;'_'
  1172  00FE5D  73                 	db	115	;'s'
  1173  00FE5E  69                 	db	105	;'i'
  1174  00FE5F  67                 	db	103	;'g'
  1175  00FE60  6E                 	db	110	;'n'
  1176  00FE61  61                 	db	97	;'a'
  1177  00FE62  6C                 	db	108	;'l'
  1178  00FE63  3A                 	db	58	;':'
  1179  00FE64  20                 	db	32
  1180  00FE65  25                 	db	37
  1181  00FE66  64                 	db	100	;'d'
  1182  00FE67  20                 	db	32
  1183  00FE68  00                 	db	0
  1184  00FE69                     STR_109:
  1185  00FE69  43                 	db	67	;'C'
  1186  00FE6A  41                 	db	65	;'A'
  1187  00FE6B  4D                 	db	77	;'M'
  1188  00FE6C  20                 	db	32
  1189  00FE6D  44                 	db	68	;'D'
  1190  00FE6E  57                 	db	87	;'W'
  1191  00FE6F  4E                 	db	78	;'N'
  1192  00FE70  20                 	db	32
  1193  00FE71  7C                 	db	124
  1194  00FE72  52                 	db	82	;'R'
  1195  00FE73  43                 	db	67	;'C'
  1196  00FE74  30                 	db	48	;'0'
  1197  00FE75  3D                 	db	61	;'='
  1198  00FE76  30                 	db	48	;'0'
  1199  00FE77  00                 	db	0
  1200  00FE78                     STR_108:
  1201  00FE78  43                 	db	67	;'C'
  1202  00FE79  41                 	db	65	;'A'
  1203  00FE7A  4D                 	db	77	;'M'
  1204  00FE7B  20                 	db	32
  1205  00FE7C  55                 	db	85	;'U'
  1206  00FE7D  50                 	db	80	;'P'
  1207  00FE7E  20                 	db	32
  1208  00FE7F  20                 	db	32
  1209  00FE80  7C                 	db	124
  1210  00FE81  52                 	db	82	;'R'
  1211  00FE82  43                 	db	67	;'C'
  1212  00FE83  30                 	db	48	;'0'
  1213  00FE84  3D                 	db	61	;'='
  1214  00FE85  31                 	db	49	;'1'
  1215  00FE86  00                 	db	0
  1216  00FE87                     STR_82:
  1217  00FE87  54                 	db	84	;'T'
  1218  00FE88  53                 	db	83	;'S'
  1219  00FE89  54                 	db	84	;'T'
  1220  00FE8A  3A                 	db	58	;':'
  1221  00FE8B  20                 	db	32
  1222  00FE8C  4D                 	db	77	;'M'
  1223  00FE8D  41                 	db	65	;'A'
  1224  00FE8E  47                 	db	71	;'G'
  1225  00FE8F  4E                 	db	78	;'N'
  1226  00FE90  45                 	db	69	;'E'
  1227  00FE91  54                 	db	84	;'T'
  1228  00FE92  49                 	db	73	;'I'
  1229  00FE93  53                 	db	83	;'S'
  1230  00FE94  4D                 	db	77	;'M'
  1231  00FE95  00                 	db	0
  1232  00FE96                     STR_107:
  1233  00FE96  54                 	db	84	;'T'
  1234  00FE97  53                 	db	83	;'S'
  1235  00FE98  54                 	db	84	;'T'
  1236  00FE99  3A                 	db	58	;':'
  1237  00FE9A  20                 	db	32
  1238  00FE9B  43                 	db	67	;'C'
  1239  00FE9C  41                 	db	65	;'A'
  1240  00FE9D  4D                 	db	77	;'M'
  1241  00FE9E  20                 	db	32
  1242  00FE9F  53                 	db	83	;'S'
  1243  00FEA0  45                 	db	69	;'E'
  1244  00FEA1  52                 	db	82	;'R'
  1245  00FEA2  56                 	db	86	;'V'
  1246  00FEA3  4F                 	db	79	;'O'
  1247  00FEA4  00                 	db	0
  1248  00FEA5                     STR_96:
  1249  00FEA5  54                 	db	84	;'T'
  1250  00FEA6  53                 	db	83	;'S'
  1251  00FEA7  54                 	db	84	;'T'
  1252  00FEA8  3A                 	db	58	;':'
  1253  00FEA9  20                 	db	32
  1254  00FEAA  50                 	db	80	;'P'
  1255  00FEAB  41                 	db	65	;'A'
  1256  00FEAC  4E                 	db	78	;'N'
  1257  00FEAD  20                 	db	32
  1258  00FEAE  53                 	db	83	;'S'
  1259  00FEAF  45                 	db	69	;'E'
  1260  00FEB0  52                 	db	82	;'R'
  1261  00FEB1  56                 	db	86	;'V'
  1262  00FEB2  4F                 	db	79	;'O'
  1263  00FEB3  00                 	db	0
  1264  00FEB4                     STR_75:
  1265  00FEB4  41                 	db	65	;'A'
  1266  00FEB5  4C                 	db	76	;'L'
  1267  00FEB6  47                 	db	71	;'G'
  1268  00FEB7  34                 	db	52	;'4'
  1269  00FEB8  3A                 	db	58	;':'
  1270  00FEB9  20                 	db	32
  1271  00FEBA  41                 	db	65	;'A'
  1272  00FEBB  4C                 	db	76	;'L'
  1273  00FEBC  4C                 	db	76	;'L'
  1274  00FEBD  20                 	db	32
  1275  00FEBE  43                 	db	67	;'C'
  1276  00FEBF  41                 	db	65	;'A'
  1277  00FEC0  4E                 	db	78	;'N'
  1278  00FEC1  53                 	db	83	;'S'
  1279  00FEC2  00                 	db	0
  1280  00FEC3                     STR_90:
  1281  00FEC3  54                 	db	84	;'T'
  1282  00FEC4  53                 	db	83	;'S'
  1283  00FEC5  54                 	db	84	;'T'
  1284  00FEC6  3A                 	db	58	;':'
  1285  00FEC7  20                 	db	32
  1286  00FEC8  44                 	db	68	;'D'
  1287  00FEC9  43                 	db	67	;'C'
  1288  00FECA  20                 	db	32
  1289  00FECB  4D                 	db	77	;'M'
  1290  00FECC  4F                 	db	79	;'O'
  1291  00FECD  54                 	db	84	;'T'
  1292  00FECE  4F                 	db	79	;'O'
  1293  00FECF  52                 	db	82	;'R'
  1294  00FED0  53                 	db	83	;'S'
  1295  00FED1  00                 	db	0
  1296  00FED2                     STR_70:
  1297  00FED2  41                 	db	65	;'A'
  1298  00FED3  4C                 	db	76	;'L'
  1299  00FED4  47                 	db	71	;'G'
  1300  00FED5  4F                 	db	79	;'O'
  1301  00FED6  52                 	db	82	;'R'
  1302  00FED7  49                 	db	73	;'I'
  1303  00FED8  54                 	db	84	;'T'
  1304  00FED9  48                 	db	72	;'H'
  1305  00FEDA  4D                 	db	77	;'M'
  1306  00FEDB  20                 	db	32
  1307  00FEDC  54                 	db	84	;'T'
  1308  00FEDD  45                 	db	69	;'E'
  1309  00FEDE  53                 	db	83	;'S'
  1310  00FEDF  54                 	db	84	;'T'
  1311  00FEE0  00                 	db	0
  1312  00FEE1                     STR_91:
  1313  00FEE1  50                 	db	80	;'P'
  1314  00FEE2  49                 	db	73	;'I'
  1315  00FEE3  4E                 	db	78	;'N'
  1316  00FEE4  20                 	db	32
  1317  00FEE5  52                 	db	82	;'R'
  1318  00FEE6  41                 	db	65	;'A'
  1319  00FEE7  35                 	db	53	;'5'
  1320  00FEE8  20                 	db	32
  1321  00FEE9  48                 	db	72	;'H'
  1322  00FEEA  49                 	db	73	;'I'
  1323  00FEEB  47                 	db	71	;'G'
  1324  00FEEC  48                 	db	72	;'H'
  1325  00FEED  2E                 	db	46
  1326  00FEEE  00                 	db	0
  1327  00FEEF                     STR_73:
  1328  00FEEF  41                 	db	65	;'A'
  1329  00FEF0  4C                 	db	76	;'L'
  1330  00FEF1  47                 	db	71	;'G'
  1331  00FEF2  32                 	db	50	;'2'
  1332  00FEF3  3A                 	db	58	;':'
  1333  00FEF4  20                 	db	32
  1334  00FEF5  31                 	db	49	;'1'
  1335  00FEF6  32                 	db	50	;'2'
  1336  00FEF7  20                 	db	32
  1337  00FEF8  43                 	db	67	;'C'
  1338  00FEF9  41                 	db	65	;'A'
  1339  00FEFA  4E                 	db	78	;'N'
  1340  00FEFB  53                 	db	83	;'S'
  1341  00FEFC  00                 	db	0
  1342  00FEFD                     STR_76:
  1343  00FEFD  41                 	db	65	;'A'
  1344  00FEFE  4C                 	db	76	;'L'
  1345  00FEFF  47                 	db	71	;'G'
  1346  00FF00  35                 	db	53	;'5'
  1347  00FF01  3A                 	db	58	;':'
  1348  00FF02  20                 	db	32
  1349  00FF03  4E                 	db	78	;'N'
  1350  00FF04  4F                 	db	79	;'O'
  1351  00FF05  20                 	db	32
  1352  00FF06  43                 	db	67	;'C'
  1353  00FF07  41                 	db	65	;'A'
  1354  00FF08  4E                 	db	78	;'N'
  1355  00FF09  53                 	db	83	;'S'
  1356  00FF0A  00                 	db	0
  1357  00FF0B                     STR_71:
  1358  00FF0B  50                 	db	80	;'P'
  1359  00FF0C  55                 	db	85	;'U'
  1360  00FF0D  53                 	db	83	;'S'
  1361  00FF0E  48                 	db	72	;'H'
  1362  00FF0F  20                 	db	32
  1363  00FF10  54                 	db	84	;'T'
  1364  00FF11  4F                 	db	79	;'O'
  1365  00FF12  20                 	db	32
  1366  00FF13  53                 	db	83	;'S'
  1367  00FF14  54                 	db	84	;'T'
  1368  00FF15  41                 	db	65	;'A'
  1369  00FF16  52                 	db	82	;'R'
  1370  00FF17  54                 	db	84	;'T'
  1371  00FF18  00                 	db	0
  1372  00FF19                     STR_23:
  1373  00FF19  25                 	db	37
  1374  00FF1A  64                 	db	100	;'d'
  1375  00FF1B  20                 	db	32
  1376  00FF1C  4D                 	db	77	;'M'
  1377  00FF1D  49                 	db	73	;'I'
  1378  00FF1E  4E                 	db	78	;'N'
  1379  00FF1F  20                 	db	32
  1380  00FF20  25                 	db	37
  1381  00FF21  64                 	db	100	;'d'
  1382  00FF22  20                 	db	32
  1383  00FF23  53                 	db	83	;'S'
  1384  00FF24  45                 	db	69	;'E'
  1385  00FF25  43                 	db	67	;'C'
  1386  00FF26  00                 	db	0
  1387  00FF27                     STR_2:
  1388  00FF27  54                 	db	84	;'T'
  1389  00FF28  49                 	db	73	;'I'
  1390  00FF29  4D                 	db	77	;'M'
  1391  00FF2A  45                 	db	69	;'E'
  1392  00FF2B  3A                 	db	58	;':'
  1393  00FF2C  20                 	db	32
  1394  00FF2D  25                 	db	37
  1395  00FF2E  64                 	db	100	;'d'
  1396  00FF2F  3A                 	db	58	;':'
  1397  00FF30  25                 	db	37
  1398  00FF31  30                 	db	48	;'0'
  1399  00FF32  32                 	db	50	;'2'
  1400  00FF33  64                 	db	100	;'d'
  1401  00FF34  00                 	db	0
  1402  00FF35                     STR_79:
  1403  00FF35  54                 	db	84	;'T'
  1404  00FF36  53                 	db	83	;'S'
  1405  00FF37  54                 	db	84	;'T'
  1406  00FF38  3A                 	db	58	;':'
  1407  00FF39  20                 	db	32
  1408  00FF3A  49                 	db	73	;'I'
  1409  00FF3B  52                 	db	82	;'R'
  1410  00FF3C  20                 	db	32
  1411  00FF3D  53                 	db	83	;'S'
  1412  00FF3E  4E                 	db	78	;'N'
  1413  00FF3F  53                 	db	83	;'S'
  1414  00FF40  52                 	db	82	;'R'
  1415  00FF41  00                 	db	0
  1416  00FF42                     STR_65:
  1417  00FF42  54                 	db	84	;'T'
  1418  00FF43  49                 	db	73	;'I'
  1419  00FF44  4D                 	db	77	;'M'
  1420  00FF45  45                 	db	69	;'E'
  1421  00FF46  20                 	db	32
  1422  00FF47  25                 	db	37
  1423  00FF48  64                 	db	100	;'d'
  1424  00FF49  3A                 	db	58	;':'
  1425  00FF4A  25                 	db	37
  1426  00FF4B  30                 	db	48	;'0'
  1427  00FF4C  32                 	db	50	;'2'
  1428  00FF4D  64                 	db	100	;'d'
  1429  00FF4E  00                 	db	0
  1430  00FF4F                     STR_74:
  1431  00FF4F  41                 	db	65	;'A'
  1432  00FF50  4C                 	db	76	;'L'
  1433  00FF51  47                 	db	71	;'G'
  1434  00FF52  33                 	db	51	;'3'
  1435  00FF53  3A                 	db	58	;':'
  1436  00FF54  20                 	db	32
  1437  00FF55  31                 	db	49	;'1'
  1438  00FF56  20                 	db	32
  1439  00FF57  43                 	db	67	;'C'
  1440  00FF58  41                 	db	65	;'A'
  1441  00FF59  4E                 	db	78	;'N'
  1442  00FF5A  00                 	db	0
  1443  00FF5B                     STR_93:
  1444  00FF5B  50                 	db	80	;'P'
  1445  00FF5C  49                 	db	73	;'I'
  1446  00FF5D  4E                 	db	78	;'N'
  1447  00FF5E  20                 	db	32
  1448  00FF5F  52                 	db	82	;'R'
  1449  00FF60  41                 	db	65	;'A'
  1450  00FF61  33                 	db	51	;'3'
  1451  00FF62  2E                 	db	46
  1452  00FF63  2E                 	db	46
  1453  00FF64  2E                 	db	46
  1454  00FF65  00                 	db	0
  1455  00FF66                     STR_95:
  1456  00FF66  50                 	db	80	;'P'
  1457  00FF67  49                 	db	73	;'I'
  1458  00FF68  4E                 	db	78	;'N'
  1459  00FF69  20                 	db	32
  1460  00FF6A  52                 	db	82	;'R'
  1461  00FF6B  41                 	db	65	;'A'
  1462  00FF6C  34                 	db	52	;'4'
  1463  00FF6D  2E                 	db	46
  1464  00FF6E  2E                 	db	46
  1465  00FF6F  2E                 	db	46
  1466  00FF70  00                 	db	0
  1467  00FF71                     STR_113:
  1468  00FF71  50                 	db	80	;'P'
  1469  00FF72  55                 	db	85	;'U'
  1470  00FF73  53                 	db	83	;'S'
  1471  00FF74  48                 	db	72	;'H'
  1472  00FF75  45                 	db	69	;'E'
  1473  00FF76  52                 	db	82	;'R'
  1474  00FF77  20                 	db	32
  1475  00FF78  54                 	db	84	;'T'
  1476  00FF79  53                 	db	83	;'S'
  1477  00FF7A  54                 	db	84	;'T'
  1478  00FF7B  00                 	db	0
  1479  00FF7C                     STR_64:
  1480  00FF7C  53                 	db	83	;'S'
  1481  00FF7D  4F                 	db	79	;'O'
  1482  00FF7E  52                 	db	82	;'R'
  1483  00FF7F  54                 	db	84	;'T'
  1484  00FF80  49                 	db	73	;'I'
  1485  00FF81  4E                 	db	78	;'N'
  1486  00FF82  47                 	db	71	;'G'
  1487  00FF83  2E                 	db	46
  1488  00FF84  2E                 	db	46
  1489  00FF85  2E                 	db	46
  1490  00FF86  00                 	db	0
  1491  00FF87                     STR_84:
  1492  00FF87  54                 	db	84	;'T'
  1493  00FF88  53                 	db	83	;'S'
  1494  00FF89  54                 	db	84	;'T'
  1495  00FF8A  3A                 	db	58	;':'
  1496  00FF8B  20                 	db	32
  1497  00FF8C  43                 	db	67	;'C'
  1498  00FF8D  4F                 	db	79	;'O'
  1499  00FF8E  4E                 	db	78	;'N'
  1500  00FF8F  44                 	db	68	;'D'
  1501  00FF90  00                 	db	0
  1502  00FF91                     STR_88:
  1503  00FF91  41                 	db	65	;'A'
  1504  00FF92  43                 	db	67	;'C'
  1505  00FF93  54                 	db	84	;'T'
  1506  00FF94  55                 	db	85	;'U'
  1507  00FF95  41                 	db	65	;'A'
  1508  00FF96  54                 	db	84	;'T'
  1509  00FF97  4F                 	db	79	;'O'
  1510  00FF98  52                 	db	82	;'R'
  1511  00FF99  53                 	db	83	;'S'
  1512  00FF9A  00                 	db	0
  1513  00FF9B                     STR_22:
  1514  00FF9B  44                 	db	68	;'D'
  1515  00FF9C  55                 	db	85	;'U'
  1516  00FF9D  52                 	db	82	;'R'
  1517  00FF9E  41                 	db	65	;'A'
  1518  00FF9F  54                 	db	84	;'T'
  1519  00FFA0  49                 	db	73	;'I'
  1520  00FFA1  4F                 	db	79	;'O'
  1521  00FFA2  4E                 	db	78	;'N'
  1522  00FFA3  3A                 	db	58	;':'
  1523  00FFA4  00                 	db	0
  1524  00FFA5                     STR_86:
  1525  00FFA5  43                 	db	67	;'C'
  1526  00FFA6  4F                 	db	79	;'O'
  1527  00FFA7  4E                 	db	78	;'N'
  1528  00FFA8  44                 	db	68	;'D'
  1529  00FFA9  3A                 	db	58	;':'
  1530  00FFAA  20                 	db	32
  1531  00FFAB  25                 	db	37
  1532  00FFAC  64                 	db	100	;'d'
  1533  00FFAD  00                 	db	0
  1534  00FFAE                     STR_77:
  1535  00FFAE  53                 	db	83	;'S'
  1536  00FFAF  45                 	db	69	;'E'
  1537  00FFB0  4E                 	db	78	;'N'
  1538  00FFB1  53                 	db	83	;'S'
  1539  00FFB2  4F                 	db	79	;'O'
  1540  00FFB3  52                 	db	82	;'R'
  1541  00FFB4  53                 	db	83	;'S'
  1542  00FFB5  00                 	db	0
  1543  00FFB6                     STR_126:
  1544  00FFB6  28                 	db	40
  1545  00FFB7  6E                 	db	110	;'n'
  1546  00FFB8  75                 	db	117	;'u'
  1547  00FFB9  6C                 	db	108	;'l'
  1548  00FFBA  6C                 	db	108	;'l'
  1549  00FFBB  29                 	db	41
  1550  00FFBC  00                 	db	0
  1551  00FFBD                     STR_67:
  1552  00FFBD  46                 	db	70	;'F'
  1553  00FFBE  41                 	db	65	;'A'
  1554  00FFBF  49                 	db	73	;'I'
  1555  00FFC0  4C                 	db	76	;'L'
  1556  00FFC1  45                 	db	69	;'E'
  1557  00FFC2  44                 	db	68	;'D'
  1558  00FFC3  00                 	db	0
  1559  00FFC4                     STR_7:
  1560  00FFC4  53                 	db	83	;'S'
  1561  00FFC5  54                 	db	84	;'T'
  1562  00FFC6  41                 	db	65	;'A'
  1563  00FFC7  52                 	db	82	;'R'
  1564  00FFC8  54                 	db	84	;'T'
  1565  00FFC9  3A                 	db	58	;':'
  1566  00FFCA  00                 	db	0
  1567  00FFCB                     STR_9:
  1568  00FFCB  46                 	db	70	;'F'
  1569  00FFCC  45                 	db	69	;'E'
  1570  00FFCD  42                 	db	66	;'B'
  1571  00FFCE  00                 	db	0
  1572  00FFCF                     STR_19:
  1573  00FFCF  44                 	db	68	;'D'
  1574  00FFD0  45                 	db	69	;'E'
  1575  00FFD1  43                 	db	67	;'C'
  1576  00FFD2  00                 	db	0
  1577  00FFD3                     STR_15:
  1578  00FFD3  41                 	db	65	;'A'
  1579  00FFD4  55                 	db	85	;'U'
  1580  00FFD5  47                 	db	71	;'G'
  1581  00FFD6  00                 	db	0
  1582  00FFD7                     STR_14:
  1583  00FFD7  4A                 	db	74	;'J'
  1584  00FFD8  55                 	db	85	;'U'
  1585  00FFD9  4C                 	db	76	;'L'
  1586  00FFDA  00                 	db	0
  1587  00FFDB                     STR_8:
  1588  00FFDB  4A                 	db	74	;'J'
  1589  00FFDC  41                 	db	65	;'A'
  1590  00FFDD  4E                 	db	78	;'N'
  1591  00FFDE  00                 	db	0
  1592  00FFDF                     STR_13:
  1593  00FFDF  4A                 	db	74	;'J'
  1594  00FFE0  55                 	db	85	;'U'
  1595  00FFE1  4E                 	db	78	;'N'
  1596  00FFE2  00                 	db	0
  1597  00FFE3                     STR_16:
  1598  00FFE3  53                 	db	83	;'S'
  1599  00FFE4  45                 	db	69	;'E'
  1600  00FFE5  50                 	db	80	;'P'
  1601  00FFE6  00                 	db	0
  1602  00FFE7                     STR_10:
  1603  00FFE7  4D                 	db	77	;'M'
  1604  00FFE8  41                 	db	65	;'A'
  1605  00FFE9  52                 	db	82	;'R'
  1606  00FFEA  00                 	db	0
  1607  00FFEB                     STR_11:
  1608  00FFEB  41                 	db	65	;'A'
  1609  00FFEC  50                 	db	80	;'P'
  1610  00FFED  52                 	db	82	;'R'
  1611  00FFEE  00                 	db	0
  1612  00FFEF                     STR_20:
  1613  00FFEF  45                 	db	69	;'E'
  1614  00FFF0  52                 	db	82	;'R'
  1615  00FFF1  52                 	db	82	;'R'
  1616  00FFF2  00                 	db	0
  1617  00FFF3                     STR_17:
  1618  00FFF3  4F                 	db	79	;'O'
  1619  00FFF4  43                 	db	67	;'C'
  1620  00FFF5  54                 	db	84	;'T'
  1621  00FFF6  00                 	db	0
  1622  00FFF7                     STR_18:
  1623  00FFF7  4E                 	db	78	;'N'
  1624  00FFF8  4F                 	db	79	;'O'
  1625  00FFF9  56                 	db	86	;'V'
  1626  00FFFA  00                 	db	0
  1627  00FFFB                     STR_12:
  1628  00FFFB  4D                 	db	77	;'M'
  1629  00FFFC  41                 	db	65	;'A'
  1630  00FFFD  59                 	db	89	;'Y'
  1631  00FFFE  00                 	db	0
  1632  0000                     
  1633                           ; #config settings
  1634  00FFFF  00                 	db	0	; dummy byte at the end
  1635  0000                     
  1636                           	psect	cinit
  1637  004D22                     __pcinit:
  1638                           	opt stack 0
  1639  004D22                     start_initialization:
  1640                           	opt stack 0
  1641  004D22                     __initialization:
  1642                           	opt stack 0
  1643                           
  1644                           ; Initialize objects allocated to BANK1 (8 bytes)
  1645                           ; load TBLPTR registers with __pidataBANK1
  1646  004D22  0E84               	movlw	low __pidataBANK1
  1647  004D24  6EF6               	movwf	tblptrl,c
  1648  004D26  0E54               	movlw	high __pidataBANK1
  1649  004D28  6EF7               	movwf	tblptrh,c
  1650  004D2A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1651  004D2C  6EF8               	movwf	tblptru,c
  1652  004D2E  EE01  F03B         	lfsr	0,__pdataBANK1
  1653  004D32  EE10 F008          	lfsr	1,8
  1654  004D36                     copy_data0:
  1655  004D36  0009               	tblrd		*+
  1656  004D38  CFF5 FFEE          	movff	tablat,postinc0
  1657  004D3C  50E5               	movf	postdec1,w,c
  1658  004D3E  50E1               	movf	fsr1l,w,c
  1659  004D40  E1FA               	bnz	copy_data0
  1660                           
  1661                           ; Clear objects allocated to BANK1 (59 bytes)
  1662  004D42  EE01  F000         	lfsr	0,__pbssBANK1
  1663  004D46  0E3B               	movlw	59
  1664  004D48                     clear_0:
  1665  004D48  6AEE               	clrf	postinc0,c
  1666  004D4A  06E8               	decf	wreg,f,c
  1667  004D4C  E1FD               	bnz	clear_0
  1668                           
  1669                           ; Clear objects allocated to BANK0 (38 bytes)
  1670  004D4E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1671  004D52  0E26               	movlw	38
  1672  004D54                     clear_1:
  1673  004D54  6AEE               	clrf	postinc0,c
  1674  004D56  06E8               	decf	wreg,f,c
  1675  004D58  E1FD               	bnz	clear_1
  1676                           
  1677                           ; Clear objects allocated to COMRAM (35 bytes)
  1678  004D5A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1679  004D5E  0E23               	movlw	35
  1680  004D60                     clear_2:
  1681  004D60  6AEE               	clrf	postinc0,c
  1682  004D62  06E8               	decf	wreg,f,c
  1683  004D64  E1FD               	bnz	clear_2
  1684  004D66                     end_of_initialization:
  1685                           	opt stack 0
  1686  004D66                     __end_of__initialization:
  1687                           	opt stack 0
  1688  004D66  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1689  004D68  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1690  004D6A  0100               	movlb	0
  1691  004D6C  EFA1  F020         	goto	_main	;jump to C main() function
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssCOMRAM
  1702  00005B                     __pbssCOMRAM:
  1703                           	opt stack 0
  1704  00005B                     _back:
  1705                           	opt stack 0
  1706  00005B                     	ds	2
  1707  00005D                     _down:
  1708                           	opt stack 0
  1709  00005D                     	ds	2
  1710  00005F                     _enter:
  1711                           	opt stack 0
  1712  00005F                     	ds	2
  1713  000061                     _first:
  1714                           	opt stack 0
  1715  000061                     	ds	2
  1716  000063                     _firstboot:
  1717                           	opt stack 0
  1718  000063                     	ds	2
  1719  000065                     _log_completion:
  1720                           	opt stack 0
  1721  000065                     	ds	2
  1722  000067                     _log_count_can_no_lab:
  1723                           	opt stack 0
  1724  000067                     	ds	2
  1725  000069                     _log_count_can_w_lab:
  1726                           	opt stack 0
  1727  000069                     	ds	2
  1728  00006B                     _log_count_pop_no_tab:
  1729                           	opt stack 0
  1730  00006B                     	ds	2
  1731  00006D                     _log_count_pop_w_tab:
  1732                           	opt stack 0
  1733  00006D                     	ds	2
  1734  00006F                     _log_count_total:
  1735                           	opt stack 0
  1736  00006F                     	ds	2
  1737  000071                     _most_recent_sort_time:
  1738                           	opt stack 0
  1739  000071                     	ds	2
  1740  000073                     _servo_state:
  1741                           	opt stack 0
  1742  000073                     	ds	2
  1743  000075                     _up:
  1744                           	opt stack 0
  1745  000075                     	ds	2
  1746  000077                     _var:
  1747                           	opt stack 0
  1748  000077                     	ds	2
  1749  000079                     _was_low_1:
  1750                           	opt stack 0
  1751  000079                     	ds	2
  1752  00007B                     _was_low_3:
  1753                           	opt stack 0
  1754  00007B                     	ds	2
  1755  00007D                     _input:
  1756                           	opt stack 0
  1757  00007D                     	ds	1
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           fsr1l	equ	0xFE1
  1766                           
  1767                           	psect	bssBANK0
  1768  0000DA                     __pbssBANK0:
  1769                           	opt stack 0
  1770  0000DA                     _servoTimes:
  1771                           	opt stack 0
  1772  0000DA                     	ds	8
  1773  0000E2                     _sensor_outputs:
  1774                           	opt stack 0
  1775  0000E2                     	ds	4
  1776  0000E6                     _IR_signal:
  1777                           	opt stack 0
  1778  0000E6                     	ds	2
  1779  0000E8                     _MAG_signal:
  1780                           	opt stack 0
  1781  0000E8                     	ds	2
  1782  0000EA                     _RTCflag:
  1783                           	opt stack 0
  1784  0000EA                     	ds	2
  1785  0000EC                     _cur_can:
  1786                           	opt stack 0
  1787  0000EC                     	ds	2
  1788  0000EE                     _cur_state:
  1789                           	opt stack 0
  1790  0000EE                     	ds	2
  1791  0000F0                     _f_lastCan:
  1792                           	opt stack 0
  1793  0000F0                     	ds	2
  1794  0000F2                     _f_loadingNewCan:
  1795                           	opt stack 0
  1796  0000F2                     	ds	2
  1797  0000F4                     _log:
  1798                           	opt stack 0
  1799  0000F4                     	ds	2
  1800  0000F6                     _log_total_time:
  1801                           	opt stack 0
  1802  0000F6                     	ds	2
  1803  0000F8                     _logstate:
  1804                           	opt stack 0
  1805  0000F8                     	ds	2
  1806  0000FA                     _total_time:
  1807                           	opt stack 0
  1808  0000FA                     	ds	2
  1809  0000FC                     _machine_state:
  1810                           	opt stack 0
  1811  0000FC                     	ds	1
  1812  0000FD                     _sel:
  1813                           	opt stack 0
  1814  0000FD                     	ds	1
  1815  0000FE                     _count_total:
  1816                           	opt stack 0
  1817  0000FE                     	ds	2
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           postdec1	equ	0xFE5
  1825                           fsr1l	equ	0xFE1
  1826                           
  1827                           	psect	bssBANK1
  1828  000100                     __pbssBANK1:
  1829                           	opt stack 0
  1830  000100                     _log_startTime:
  1831                           	opt stack 0
  1832  000100                     	ds	14
  1833  00010E                     _startTime:
  1834                           	opt stack 0
  1835  00010E                     	ds	14
  1836  00011C                     _time:
  1837                           	opt stack 0
  1838  00011C                     	ds	7
  1839  000123                     _count_can_no_lab:
  1840                           	opt stack 0
  1841  000123                     	ds	2
  1842  000125                     _count_can_w_lab:
  1843                           	opt stack 0
  1844  000125                     	ds	2
  1845  000127                     _count_pop_no_tab:
  1846                           	opt stack 0
  1847  000127                     	ds	2
  1848  000129                     _count_pop_w_tab:
  1849                           	opt stack 0
  1850  000129                     	ds	2
  1851  00012B                     _debug:
  1852                           	opt stack 0
  1853  00012B                     	ds	2
  1854  00012D                     _f_ID_receive:
  1855                           	opt stack 0
  1856  00012D                     	ds	2
  1857  00012F                     _f_can_coming_to_ID:
  1858                           	opt stack 0
  1859  00012F                     	ds	2
  1860  000131                     _f_can_coming_to_distribution:
  1861                           	opt stack 0
  1862  000131                     	ds	2
  1863  000133                     _f_can_distributed:
  1864                           	opt stack 0
  1865  000133                     	ds	2
  1866  000135                     _f_most_recent_sort_time:
  1867                           	opt stack 0
  1868  000135                     	ds	2
  1869  000137                     _i:
  1870                           	opt stack 0
  1871  000137                     	ds	2
  1872  000139                     _servo_timer_counter:
  1873                           	opt stack 0
  1874  000139                     	ds	2
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           postdec1	equ	0xFE5
  1882                           fsr1l	equ	0xFE1
  1883                           
  1884                           	psect	dataBANK1
  1885  00013B                     __pdataBANK1:
  1886                           	opt stack 0
  1887  00013B                     UI@F3232:
  1888                           	opt stack 0
  1889  00013B                     	ds	4
  1890  00013F                     printRTC@F3223:
  1891                           	opt stack 0
  1892  00013F                     	ds	4
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           
  1902                           	psect	cstackBANK0
  1903  000080                     __pcstackBANK0:
  1904                           	opt stack 0
  1905  000080                     ??_delay_ms:
  1906  000080                     ??_PortTests:
  1907  000080                     ??_isdigit:
  1908  000080                     ??_readADC:
  1909  000080                     ??_I2C_Master_Wait:
  1910  000080                     ?___wmul:
  1911                           	opt stack 0
  1912  000080                     ?___awmod:
  1913                           	opt stack 0
  1914  000080                     ?___lwdiv:
  1915                           	opt stack 0
  1916  000080                     ?___lldiv:
  1917                           	opt stack 0
  1918  000080                     lcdNibble@temp:
  1919                           	opt stack 0
  1920  000080                     initTime@m:
  1921                           	opt stack 0
  1922  000080                     updateServoPosition@time_us:
  1923                           	opt stack 0
  1924  000080                     EEPROM_read@address:
  1925                           	opt stack 0
  1926  000080                     ___wmul@multiplier:
  1927                           	opt stack 0
  1928  000080                     ___awmod@dividend:
  1929                           	opt stack 0
  1930  000080                     ___lwdiv@dividend:
  1931                           	opt stack 0
  1932  000080                     strcpy@to:
  1933                           	opt stack 0
  1934  000080                     ___lldiv@dividend:
  1935                           	opt stack 0
  1936                           
  1937                           ; 4 bytes @ 0x0
  1938  000080                     	ds	1
  1939  000081                     readADC@channel:
  1940                           	opt stack 0
  1941  000081                     I2C_Master_Read@a:
  1942                           	opt stack 0
  1943  000081                     lcdNibble@data:
  1944                           	opt stack 0
  1945  000081                     initTime@h:
  1946                           	opt stack 0
  1947  000081                     delay_ms@milliseconds:
  1948                           	opt stack 0
  1949  000081                     _isdigit$2054:
  1950                           	opt stack 0
  1951  000081                     I2C_Master_Write@d:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x1
  1955  000081                     	ds	1
  1956  000082                     ??_ID:
  1957  000082                     ??_readIR:
  1958  000082                     ??_readMAG:
  1959  000082                     I2C_Master_Read@temp:
  1960                           	opt stack 0
  1961  000082                     lcdInst@data:
  1962                           	opt stack 0
  1963  000082                     putch@data:
  1964                           	opt stack 0
  1965  000082                     initTime@w:
  1966                           	opt stack 0
  1967  000082                     isdigit@c:
  1968                           	opt stack 0
  1969  000082                     updateServoPosition@timer:
  1970                           	opt stack 0
  1971  000082                     ___wmul@multiplicand:
  1972                           	opt stack 0
  1973  000082                     ___awmod@divisor:
  1974                           	opt stack 0
  1975  000082                     ___lwdiv@divisor:
  1976                           	opt stack 0
  1977  000082                     strcpy@from:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x2
  1981  000082                     	ds	1
  1982  000083                     ??_initLCD:
  1983  000083                     initTime@DD:
  1984                           	opt stack 0
  1985  000083                     getRTC@i:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x3
  1989  000083                     	ds	1
  1990  000084                     ??_updateServoPosition:
  1991  000084                     initTime@MM:
  1992                           	opt stack 0
  1993  000084                     ___awmod@counter:
  1994                           	opt stack 0
  1995  000084                     readIR@res:
  1996                           	opt stack 0
  1997  000084                     readMAG@res:
  1998                           	opt stack 0
  1999  000084                     ID@i:
  2000                           	opt stack 0
  2001  000084                     ___wmul@product:
  2002                           	opt stack 0
  2003  000084                     ___lwdiv@quotient:
  2004                           	opt stack 0
  2005  000084                     strcpy@cp:
  2006                           	opt stack 0
  2007  000084                     ___lldiv@divisor:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x4
  2011  000084                     	ds	1
  2012  000085                     ??_initSortTimer:
  2013  000085                     initTime@YY:
  2014                           	opt stack 0
  2015  000085                     ___awmod@sign:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0x5
  2019  000085                     	ds	1
  2020  000086                     ??_getIR:
  2021  000086                     ??_getMAG:
  2022  000086                     ?___awdiv:
  2023                           	opt stack 0
  2024  000086                     initTime@s:
  2025                           	opt stack 0
  2026  000086                     ___lwdiv@counter:
  2027                           	opt stack 0
  2028  000086                     ID@i_1170:
  2029                           	opt stack 0
  2030  000086                     updateServoPosition@my_time:
  2031                           	opt stack 0
  2032  000086                     ___awdiv@dividend:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x6
  2036  000086                     	ds	1
  2037  000087                     ?___lwmod:
  2038                           	opt stack 0
  2039  000087                     getIR@i:
  2040                           	opt stack 0
  2041  000087                     ___lwmod@dividend:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x7
  2045  000087                     	ds	1
  2046  000088                     ??_Distribution:
  2047  000088                     ??_initServos:
  2048  000088                     initSortTimer@i:
  2049                           	opt stack 0
  2050  000088                     ___awdiv@divisor:
  2051                           	opt stack 0
  2052  000088                     ___lldiv@quotient:
  2053                           	opt stack 0
  2054                           
  2055                           ; 4 bytes @ 0x8
  2056  000088                     	ds	1
  2057  000089                     ___lwmod@divisor:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x9
  2061  000089                     	ds	1
  2062  00008A                     ___awdiv@counter:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0xA
  2066  00008A                     	ds	1
  2067  00008B                     ___awdiv@sign:
  2068                           	opt stack 0
  2069  00008B                     ___lwmod@counter:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0xB
  2073  00008B                     	ds	1
  2074  00008C                     ___lldiv@counter:
  2075                           	opt stack 0
  2076  00008C                     ___awdiv@quotient:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0xC
  2080  00008C                     	ds	1
  2081  00008D                     I2C_Master_Init@c:
  2082                           	opt stack 0
  2083                           
  2084                           ; 4 bytes @ 0xD
  2085  00008D                     	ds	1
  2086  00008E                     ?_printf:
  2087                           	opt stack 0
  2088  00008E                     printf@f:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0xE
  2092  00008E                     	ds	3
  2093  000091                     ??_I2C_Master_Init:
  2094                           
  2095                           ; 1 bytes @ 0x11
  2096  000091                     	ds	4
  2097  000095                     ??_loadRTC:
  2098                           
  2099                           ; 1 bytes @ 0x15
  2100  000095                     	ds	1
  2101  000096                     loadRTC@i:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x16
  2105  000096                     	ds	4
  2106  00009A                     ??_printf:
  2107                           
  2108                           ; 1 bytes @ 0x1A
  2109  00009A                     	ds	4
  2110  00009E                     printf@prec:
  2111                           	opt stack 0
  2112                           
  2113                           ; 1 bytes @ 0x1E
  2114  00009E                     	ds	1
  2115  00009F                     printf@cp:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x1F
  2119  00009F                     	ds	2
  2120  0000A1                     printf@ap:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x21
  2124  0000A1                     	ds	2
  2125  0000A3                     printf@len:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x23
  2129  0000A3                     	ds	2
  2130  0000A5                     printf@val:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x25
  2134  0000A5                     	ds	2
  2135  0000A7                     printf@flag:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x27
  2139  0000A7                     	ds	1
  2140  0000A8                     printf@c:
  2141                           	opt stack 0
  2142                           
  2143                           ; 1 bytes @ 0x28
  2144  0000A8                     	ds	1
  2145  0000A9                     printf@width:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x29
  2149  0000A9                     	ds	2
  2150  0000AB                     ??_printRTC:
  2151  0000AB                     ??_algorithmTest:
  2152  0000AB                     ??_sensorTest:
  2153  0000AB                     ??_actuatorTest:
  2154  0000AB                     ??_PortTestA5:
  2155  0000AB                     ??_SpeedTest:
  2156  0000AB                     ??_PusherTest:
  2157  0000AB                     ??_BothServos:
  2158  0000AB                     ??_BlockerTest:
  2159  0000AB                     EEPROM_write@address:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x2B
  2163  0000AB                     	ds	1
  2164  0000AC                     BlockerTest@i:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2C
  2168  0000AC                     	ds	1
  2169  0000AD                     EEPROM_write@data:
  2170                           	opt stack 0
  2171  0000AD                     actuatorTest@i_1730:
  2172                           	opt stack 0
  2173  0000AD                     sensorTest@res:
  2174                           	opt stack 0
  2175  0000AD                     PusherTest@res:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x2D
  2179  0000AD                     	ds	1
  2180  0000AE                     ??_EEPROM_write:
  2181  0000AE                     actuatorTest@i_1737:
  2182                           	opt stack 0
  2183  0000AE                     BlockerTest@cam_flag:
  2184                           	opt stack 0
  2185  0000AE                     printRTC@INT_time:
  2186                           	opt stack 0
  2187                           
  2188                           ; 14 bytes @ 0x2E
  2189  0000AE                     	ds	1
  2190  0000AF                     EEPROM_write@i:
  2191                           	opt stack 0
  2192  0000AF                     actuatorTest@i_1738:
  2193                           	opt stack 0
  2194  0000AF                     PusherTest@res_1785:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x2F
  2198  0000AF                     	ds	1
  2199  0000B0                     EEPROM_write@i_1394:
  2200                           	opt stack 0
  2201  0000B0                     actuatorTest@i_1740:
  2202                           	opt stack 0
  2203  0000B0                     BlockerTest@cond_flag:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x30
  2207  0000B0                     	ds	1
  2208  0000B1                     ??_Loading:
  2209  0000B1                     logRun@num:
  2210                           	opt stack 0
  2211  0000B1                     actuatorTest@i_1741:
  2212                           	opt stack 0
  2213  0000B1                     PusherTest@i:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x31
  2217  0000B1                     	ds	1
  2218  0000B2                     logRun@byte1:
  2219                           	opt stack 0
  2220  0000B2                     actuatorTest@i_1743:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x32
  2224  0000B2                     	ds	1
  2225  0000B3                     logRun@byte2:
  2226                           	opt stack 0
  2227  0000B3                     actuatorTest@i_1744:
  2228                           	opt stack 0
  2229  0000B3                     Loading@addr:
  2230                           	opt stack 0
  2231  0000B3                     PusherTest@i_1789:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x33
  2235  0000B3                     	ds	1
  2236  0000B4                     logRun@byte3:
  2237                           	opt stack 0
  2238  0000B4                     actuatorTest@i_1746:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x34
  2242  0000B4                     	ds	1
  2243  0000B5                     Loading@byte1:
  2244                           	opt stack 0
  2245  0000B5                     logRun@byte_i:
  2246                           	opt stack 0
  2247  0000B5                     actuatorTest@i_1747:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x35
  2251  0000B5                     	ds	1
  2252  0000B6                     logRun@byte11:
  2253                           	opt stack 0
  2254  0000B6                     actuatorTest@i_1749:
  2255                           	opt stack 0
  2256  0000B6                     Loading@i_1145:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x36
  2260  0000B6                     	ds	1
  2261  0000B7                     actuatorTest@i_1750:
  2262                           	opt stack 0
  2263  0000B7                     logRun@i:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x37
  2267  0000B7                     	ds	1
  2268  0000B8                     actuatorTest@i_1752:
  2269                           	opt stack 0
  2270  0000B8                     Loading@i_1154:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x38
  2274  0000B8                     	ds	1
  2275  0000B9                     actuatorTest@i_1753:
  2276                           	opt stack 0
  2277  0000B9                     logRun@addr:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x39
  2281  0000B9                     	ds	1
  2282  0000BA                     actuatorTest@i_1756:
  2283                           	opt stack 0
  2284  0000BA                     Loading@i_1156:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x3A
  2288  0000BA                     	ds	1
  2289  0000BB                     actuatorTest@i_1757:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x3B
  2293  0000BB                     	ds	1
  2294  0000BC                     actuatorTest@i_1759:
  2295                           	opt stack 0
  2296  0000BC                     printRTC@RTC_month:
  2297                           	opt stack 0
  2298  0000BC                     Loading@i_1157:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x3C
  2302  0000BC                     	ds	1
  2303  0000BD                     actuatorTest@i_1760:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x3D
  2307  0000BD                     	ds	1
  2308  0000BE                     actuatorTest@i_1762:
  2309                           	opt stack 0
  2310  0000BE                     Loading@i_1159:
  2311                           	opt stack 0
  2312  0000BE                     printRTC@month:
  2313                           	opt stack 0
  2314                           
  2315                           ; 4 bytes @ 0x3E
  2316  0000BE                     	ds	1
  2317  0000BF                     actuatorTest@i_1763:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x3F
  2321  0000BF                     	ds	1
  2322  0000C0                     actuatorTest@i_1766:
  2323                           	opt stack 0
  2324  0000C0                     Loading@j:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x40
  2328  0000C0                     	ds	1
  2329  0000C1                     actuatorTest@i_1767:
  2330                           	opt stack 0
  2331                           
  2332                           ; 1 bytes @ 0x41
  2333  0000C1                     	ds	1
  2334  0000C2                     actuatorTest@i_1769:
  2335                           	opt stack 0
  2336  0000C2                     printRTC@i:
  2337                           	opt stack 0
  2338  0000C2                     Loading@i:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x42
  2342  0000C2                     	ds	1
  2343  0000C3                     actuatorTest@i_1770:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x43
  2347  0000C3                     	ds	1
  2348  0000C4                     ??_UI:
  2349  0000C4                     actuatorTest@i:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x44
  2353  0000C4                     	ds	2
  2354  0000C6                     ??_Test:
  2355  0000C6                     _UI$2412:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x46
  2359  0000C6                     	ds	2
  2360  0000C8                     UI@i:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x48
  2364  0000C8                     	ds	1
  2365  0000C9                     UI@i_409:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x49
  2369  0000C9                     	ds	1
  2370  0000CA                     UI@i_412:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x4A
  2374  0000CA                     	ds	1
  2375  0000CB                     UI@i_413:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x4B
  2379  0000CB                     	ds	1
  2380  0000CC                     UI@i_431:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4C
  2384  0000CC                     	ds	1
  2385  0000CD                     UI@i_432:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x4D
  2389  0000CD                     	ds	1
  2390  0000CE                     UI@i_435:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x4E
  2394  0000CE                     	ds	1
  2395  0000CF                     UI@i_436:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x4F
  2399  0000CF                     	ds	1
  2400  0000D0                     UI@i_439:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x50
  2404  0000D0                     	ds	1
  2405  0000D1                     UI@i_440:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x51
  2409  0000D1                     	ds	1
  2410  0000D2                     UI@i_443:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x52
  2414  0000D2                     	ds	1
  2415  0000D3                     UI@i_444:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x53
  2419  0000D3                     	ds	1
  2420  0000D4                     UI@i_447:
  2421                           	opt stack 0
  2422                           
  2423                           ; 1 bytes @ 0x54
  2424  0000D4                     	ds	1
  2425  0000D5                     UI@i_448:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x55
  2429  0000D5                     	ds	1
  2430  0000D6                     UI@month:
  2431                           	opt stack 0
  2432                           
  2433                           ; 4 bytes @ 0x56
  2434  0000D6                     	ds	4
  2435  0000DA                     tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postdec1	equ	0xFE5
  2442                           fsr1l	equ	0xFE1
  2443                           
  2444                           ; 1 bytes @ 0x5A
  2445                           
  2446                           	psect	cstackCOMRAM
  2447  000001                     __pcstackCOMRAM:
  2448                           	opt stack 0
  2449  000001                     ??i2_I2C_Master_Wait:
  2450  000001                     ??i2_delay_ms:
  2451  000001                     ??i2_isdigit:
  2452  000001                     ?i2___wmul:
  2453                           	opt stack 0
  2454  000001                     ?i2___awdiv:
  2455                           	opt stack 0
  2456  000001                     ?i2___lwmod:
  2457                           	opt stack 0
  2458  000001                     i2lcdNibble@temp:
  2459                           	opt stack 0
  2460  000001                     i2updateServoPosition@time_us:
  2461                           	opt stack 0
  2462  000001                     i2EEPROM_read@address:
  2463                           	opt stack 0
  2464  000001                     i2___wmul@multiplier:
  2465                           	opt stack 0
  2466  000001                     i2___awdiv@dividend:
  2467                           	opt stack 0
  2468  000001                     i2___lwmod@dividend:
  2469                           	opt stack 0
  2470  000001                     i2strcpy@to:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x0
  2474  000001                     	ds	1
  2475  000002                     i2I2C_Master_Read@a:
  2476                           	opt stack 0
  2477  000002                     i2lcdNibble@data:
  2478                           	opt stack 0
  2479  000002                     i2delay_ms@milliseconds:
  2480                           	opt stack 0
  2481  000002                     i2_isdigit$2054:
  2482                           	opt stack 0
  2483  000002                     i2I2C_Master_Write@d:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x1
  2487  000002                     	ds	1
  2488  000003                     i2I2C_Master_Read@temp:
  2489                           	opt stack 0
  2490  000003                     i2lcdInst@data:
  2491                           	opt stack 0
  2492  000003                     i2putch@data:
  2493                           	opt stack 0
  2494  000003                     i2isdigit@c:
  2495                           	opt stack 0
  2496  000003                     i2updateServoPosition@timer:
  2497                           	opt stack 0
  2498  000003                     i2___wmul@multiplicand:
  2499                           	opt stack 0
  2500  000003                     i2___awdiv@divisor:
  2501                           	opt stack 0
  2502  000003                     i2___lwmod@divisor:
  2503                           	opt stack 0
  2504  000003                     i2strcpy@from:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x2
  2508  000003                     	ds	1
  2509  000004                     i2getRTC@i:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x3
  2513  000004                     	ds	1
  2514  000005                     ??i2_updateServoPosition:
  2515  000005                     i2___awdiv@counter:
  2516                           	opt stack 0
  2517  000005                     i2___lwmod@counter:
  2518                           	opt stack 0
  2519  000005                     i2___wmul@product:
  2520                           	opt stack 0
  2521  000005                     i2strcpy@cp:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x4
  2525  000005                     	ds	1
  2526  000006                     ?i2___lwdiv:
  2527                           	opt stack 0
  2528  000006                     i2___awdiv@sign:
  2529                           	opt stack 0
  2530  000006                     i2___lwdiv@dividend:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x5
  2534  000006                     	ds	1
  2535  000007                     retrieveLog@logNum:
  2536                           	opt stack 0
  2537  000007                     i2updateServoPosition@my_time:
  2538                           	opt stack 0
  2539  000007                     i2___awdiv@quotient:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x6
  2543  000007                     	ds	1
  2544  000008                     i2___lwdiv@divisor:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x7
  2548  000008                     	ds	1
  2549  000009                     ??_retrieveLog:
  2550  000009                     ??_updateServoStates:
  2551                           
  2552                           ; 1 bytes @ 0x8
  2553  000009                     	ds	1
  2554  00000A                     i2___lwdiv@quotient:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x9
  2558  00000A                     	ds	1
  2559  00000B                     retrieveLog@byte1:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0xA
  2563  00000B                     	ds	1
  2564  00000C                     retrieveLog@byte2:
  2565                           	opt stack 0
  2566  00000C                     i2___lwdiv@counter:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0xB
  2570  00000C                     	ds	1
  2571  00000D                     ?i2_printf:
  2572                           	opt stack 0
  2573  00000D                     retrieveLog@byte3:
  2574                           	opt stack 0
  2575  00000D                     i2printf@f:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0xC
  2579  00000D                     	ds	1
  2580  00000E                     retrieveLog@i:
  2581                           	opt stack 0
  2582                           
  2583                           ; 2 bytes @ 0xD
  2584  00000E                     	ds	2
  2585  000010                     retrieveLog@addr:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0xF
  2589  000010                     	ds	2
  2590  000012                     dispLogs@myLog:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x11
  2594  000012                     	ds	2
  2595  000014                     
  2596                           ; 1 bytes @ 0x13
  2597  000014                     	ds	5
  2598  000019                     ??i2_printf:
  2599                           
  2600                           ; 1 bytes @ 0x18
  2601  000019                     	ds	4
  2602  00001D                     i2printf@prec:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x1C
  2606  00001D                     	ds	1
  2607  00001E                     i2printf@cp:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x1D
  2611  00001E                     	ds	2
  2612  000020                     i2printf@ap:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x1F
  2616  000020                     	ds	2
  2617  000022                     i2printf@len:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x21
  2621  000022                     	ds	2
  2622  000024                     i2printf@val:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x23
  2626  000024                     	ds	2
  2627  000026                     i2printf@flag:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x25
  2631  000026                     	ds	1
  2632  000027                     i2printf@c:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x26
  2636  000027                     	ds	1
  2637  000028                     i2printf@width:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x27
  2641  000028                     	ds	2
  2642  00002A                     ??_printSortTimer:
  2643  00002A                     ??i2_printRTC:
  2644  00002A                     ?_inputHandler:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x29
  2648  00002A                     	ds	2
  2649  00002C                     ??_inputHandler:
  2650                           
  2651                           ; 1 bytes @ 0x2B
  2652  00002C                     	ds	1
  2653  00002D                     printSortTimer@curTime:
  2654                           	opt stack 0
  2655  00002D                     i2printRTC@INT_time:
  2656                           	opt stack 0
  2657                           
  2658                           ; 14 bytes @ 0x2C
  2659  00002D                     	ds	14
  2660  00003B                     printSortTimer@start_sec:
  2661                           	opt stack 0
  2662  00003B                     i2printRTC@RTC_month:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x3A
  2666  00003B                     	ds	2
  2667  00003D                     printSortTimer@cur_sec:
  2668                           	opt stack 0
  2669  00003D                     i2printRTC@month:
  2670                           	opt stack 0
  2671                           
  2672                           ; 4 bytes @ 0x3C
  2673  00003D                     	ds	2
  2674  00003F                     printSortTimer@min:
  2675                           	opt stack 0
  2676                           
  2677                           ; 2 bytes @ 0x3E
  2678  00003F                     	ds	2
  2679  000041                     printSortTimer@sec:
  2680                           	opt stack 0
  2681  000041                     i2printRTC@i:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x40
  2685  000041                     	ds	2
  2686  000043                     ??_updateMenu:
  2687  000043                     _printSortTimer$2553:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x42
  2691  000043                     	ds	2
  2692  000045                     printSortTimer@timeDiff:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x44
  2696  000045                     	ds	2
  2697  000047                     printSortTimer@i_1182:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x46
  2701  000047                     	ds	2
  2702  000049                     printSortTimer@i:
  2703                           	opt stack 0
  2704                           
  2705                           ; 2 bytes @ 0x48
  2706  000049                     	ds	2
  2707  00004B                     ??_handler:
  2708                           
  2709                           ; 1 bytes @ 0x4A
  2710  00004B                     	ds	16
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1l	equ	0xFE1
  2719                           
  2720 ;;
  2721 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2722 ;;
  2723 ;; *************** function _main *****************
  2724 ;; Defined at:
  2725 ;;		line 19 in file "main.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;Total ram usage:        0 bytes
  2744 ;; Hardware stack levels required when called:   13
  2745 ;; This function calls:
  2746 ;;		_I2C_Master_Init
  2747 ;;		_Test
  2748 ;;		_UI
  2749 ;;		_initLCD
  2750 ;;		_initTime
  2751 ;;		_initUI
  2752 ;;		_logRun
  2753 ;;		_machineConfig
  2754 ;;		_sort
  2755 ;;		_stopSignals
  2756 ;; This function is called by:
  2757 ;;		Startup code after reset
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text0
  2762  004142                     __ptext0:
  2763                           	opt stack 0
  2764  004142                     _main:
  2765                           	opt stack 18
  2766                           
  2767                           ;main.c: 20: machineConfig();
  2768                           
  2769                           ;incstack = 0
  2770  004142  ECB4  F025         	call	_machineConfig	;wreg free
  2771                           
  2772                           ;main.c: 21: initLCD();
  2773  004146  EC04  F027         	call	_initLCD	;wreg free
  2774                           
  2775                           ;main.c: 24: RTCflag = 0;
  2776  00414A  0E00               	movlw	0
  2777  00414C  0100               	movlb	0	; () banked
  2778  00414E  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2779  004150  0E00               	movlw	0
  2780  004152  6FEA               	movwf	_RTCflag& (0+255),b
  2781                           
  2782                           ;main.c: 25: if(RTCflag){
  2783  004154  0100               	movlb	0	; () banked
  2784  004156  51EA               	movf	_RTCflag& (0+255),w,b
  2785  004158  0100               	movlb	0	; () banked
  2786  00415A  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2787  00415C  B4D8               	btfsc	status,2,c
  2788  00415E  D016               	goto	l9404
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2792  004160  0E20               	movlw	32
  2793  004162  0100               	movlb	0	; () banked
  2794  004164  6F80               	movwf	initTime@m& (0+255),b
  2795  004166  0E15               	movlw	21
  2796  004168  0100               	movlb	0	; () banked
  2797  00416A  6F81               	movwf	initTime@h& (0+255),b
  2798  00416C  0E04               	movlw	4
  2799  00416E  0100               	movlb	0	; () banked
  2800  004170  6F82               	movwf	initTime@w& (0+255),b
  2801  004172  0E15               	movlw	21
  2802  004174  0100               	movlb	0	; () banked
  2803  004176  6F83               	movwf	initTime@DD& (0+255),b
  2804  004178  0E03               	movlw	3
  2805  00417A  0100               	movlb	0	; () banked
  2806  00417C  6F84               	movwf	initTime@MM& (0+255),b
  2807  00417E  0E17               	movlw	23
  2808  004180  0100               	movlb	0	; () banked
  2809  004182  6F85               	movwf	initTime@YY& (0+255),b
  2810  004184  0E42               	movlw	66
  2811  004186  ECB7  F029         	call	_initTime
  2812                           
  2813                           ;main.c: 27: }
  2814  00418A  D00B               	goto	l9406
  2815  00418C                     l9404:
  2816                           
  2817                           ;main.c: 28: else{
  2818                           ;main.c: 29: I2C_Master_Init(10000);
  2819  00418C  0E10               	movlw	16
  2820  00418E  0100               	movlb	0	; () banked
  2821  004190  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2822  004192  0E27               	movlw	39
  2823  004194  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2824  004196  0E00               	movlw	0
  2825  004198  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2826  00419A  0E00               	movlw	0
  2827  00419C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2828  00419E  EC84  F025         	call	_I2C_Master_Init	;wreg free
  2829  0041A2                     l9406:
  2830                           
  2831                           ;main.c: 30: }
  2832                           ;main.c: 32: initUI();
  2833  0041A2  ECC0  F028         	call	_initUI	;wreg free
  2834                           
  2835                           ;main.c: 33: first = 1;
  2836  0041A6  0E00               	movlw	0
  2837  0041A8  6E62               	movwf	_first+1,c
  2838  0041AA  0E01               	movlw	1
  2839  0041AC  6E61               	movwf	_first,c
  2840                           
  2841                           ;main.c: 44: switch(machine_state){
  2842                           
  2843                           ;main.c: 43: while(1){
  2844  0041AE  D017               	goto	l9428
  2845  0041B0                     l9410:
  2846                           
  2847                           ;main.c: 46: UI();
  2848  0041B0  EC65  F004         	call	_UI	;wreg free
  2849                           
  2850                           ;main.c: 47: break;
  2851  0041B4  D014               	goto	l9428
  2852  0041B6                     l9412:
  2853                           
  2854                           ;main.c: 49: sort();
  2855  0041B6  ECA6  F029         	call	_sort	;wreg free
  2856                           
  2857                           ;main.c: 50: break;
  2858  0041BA  D011               	goto	l9428
  2859  0041BC                     l9414:
  2860                           
  2861                           ;main.c: 52: stopSignals();
  2862  0041BC  ECE5  F029         	call	_stopSignals	;wreg free
  2863                           
  2864                           ;main.c: 53: logRun();
  2865  0041C0  EC0B  F01E         	call	_logRun	;wreg free
  2866                           
  2867                           ;main.c: 54: first = 1;
  2868  0041C4  0E00               	movlw	0
  2869  0041C6  6E62               	movwf	_first+1,c
  2870  0041C8  0E01               	movlw	1
  2871  0041CA  6E61               	movwf	_first,c
  2872                           
  2873                           ;main.c: 55: UI();
  2874  0041CC  EC65  F004         	call	_UI	;wreg free
  2875                           
  2876                           ;main.c: 56: break;
  2877  0041D0  D006               	goto	l9428
  2878  0041D2                     l9422:
  2879                           
  2880                           ;main.c: 58: Test();
  2881  0041D2  EC3A  F01F         	call	_Test	;wreg free
  2882                           
  2883                           ;main.c: 59: break;
  2884  0041D6  D003               	goto	l9428
  2885  0041D8                     l9424:
  2886                           
  2887                           ;main.c: 61: stopSignals();
  2888  0041D8  ECE5  F029         	call	_stopSignals	;wreg free
  2889  0041DC                     l491:
  2890  0041DC  D7FF               	goto	l491
  2891  0041DE                     l9428:
  2892  0041DE  0100               	movlb	0	; () banked
  2893  0041E0  51FC               	movf	_machine_state& (0+255),w,b
  2894                           
  2895                           ; Switch size 1, requested type "space"
  2896                           ; Number of cases is 5, Range of values is 0 to 4
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte           16     9 (average)
  2900                           ;	Chosen strategy is simple_byte
  2901  0041E2  0A00               	xorlw	0	; case 0
  2902  0041E4  B4D8               	btfsc	status,2,c
  2903  0041E6  D7E4               	goto	l9410
  2904  0041E8  0A01               	xorlw	1	; case 1
  2905  0041EA  B4D8               	btfsc	status,2,c
  2906  0041EC  D7E4               	goto	l9412
  2907  0041EE  0A03               	xorlw	3	; case 2
  2908  0041F0  B4D8               	btfsc	status,2,c
  2909  0041F2  D7E4               	goto	l9414
  2910  0041F4  0A01               	xorlw	1	; case 3
  2911  0041F6  B4D8               	btfsc	status,2,c
  2912  0041F8  D7EC               	goto	l9422
  2913  0041FA  0A07               	xorlw	7	; case 4
  2914  0041FC  B4D8               	btfsc	status,2,c
  2915  0041FE  D7EC               	goto	l9424
  2916                           
  2917                           ; BSR set to: 0
  2918                           
  2919                           ; BSR set to: 0
  2920  004200  D7EE               	goto	l9428
  2921  004202                     __end_of_main:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _stopSignals *****************
  2934 ;; Defined at:
  2935 ;;		line 70 in file "main.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    7
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text1
  2964  0053CA                     __ptext1:
  2965                           	opt stack 0
  2966  0053CA                     _stopSignals:
  2967                           	opt stack 23
  2968                           
  2969                           ;main.c: 71: LATA = 0x00;
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;incstack = 0
  2973  0053CA  0E00               	movlw	0
  2974  0053CC  6E89               	movwf	3977,c	;volatile
  2975                           
  2976                           ;main.c: 72: LATB = 0x00;
  2977  0053CE  0E00               	movlw	0
  2978  0053D0  6E8A               	movwf	3978,c	;volatile
  2979                           
  2980                           ;main.c: 73: LATC = 0x00;
  2981  0053D2  0E00               	movlw	0
  2982  0053D4  6E8B               	movwf	3979,c	;volatile
  2983                           
  2984                           ;main.c: 74: LATD = 0x00;
  2985  0053D6  0E00               	movlw	0
  2986  0053D8  6E8C               	movwf	3980,c	;volatile
  2987                           
  2988                           ;main.c: 75: LATE = 0x00;
  2989  0053DA  0E00               	movlw	0
  2990  0053DC  6E8D               	movwf	3981,c	;volatile
  2991                           
  2992                           ;main.c: 76: TMR1ON = 0;
  2993  0053DE  90CD               	bcf	4045,0,c	;volatile
  2994                           
  2995                           ;main.c: 77: TMR3ON = 0;
  2996  0053E0  90B1               	bcf	4017,0,c	;volatile
  2997  0053E2  0012               	return		;funcret
  2998  0053E4                     __end_of_stopSignals:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           postinc0	equ	0xFEE
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1l	equ	0xFE1
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _sort *****************
  3011 ;; Defined at:
  3012 ;;		line 60 in file "sort.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:   12
  3033 ;; This function calls:
  3034 ;;		_Distribution
  3035 ;;		_ID
  3036 ;;		_Loading
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text2
  3043  00534C                     __ptext2:
  3044                           	opt stack 0
  3045  00534C                     _sort:
  3046                           	opt stack 18
  3047                           
  3048                           ;sort.c: 61: if(machine_state == Sorting_state){
  3049                           
  3050                           ;incstack = 0
  3051  00534C  0100               	movlb	0	; () banked
  3052  00534E  05FC               	decf	_machine_state& (0+255),w,b
  3053  005350  B4D8               	btfsc	status,2,c
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;sort.c: 62: Loading();
  3057  005352  ECB6  F008         	call	_Loading	;wreg free
  3058                           
  3059                           ;sort.c: 63: }
  3060                           ;sort.c: 64: if(machine_state == Sorting_state){
  3061  005356  0100               	movlb	0	; () banked
  3062  005358  05FC               	decf	_machine_state& (0+255),w,b
  3063  00535A  B4D8               	btfsc	status,2,c
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;sort.c: 65: ID();
  3067  00535C  EC6C  F018         	call	_ID	;wreg free
  3068                           
  3069                           ;sort.c: 66: }
  3070                           ;sort.c: 67: if(machine_state == Sorting_state){
  3071  005360  0100               	movlb	0	; () banked
  3072  005362  05FC               	decf	_machine_state& (0+255),w,b
  3073  005364  A4D8               	btfss	status,2,c
  3074  005366  0012               	return	
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;sort.c: 68: Distribution();
  3078  005368  EC85  F019         	call	_Distribution	;wreg free
  3079  00536C  0012               	return	
  3080  00536E                     __end_of_sort:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           postdec1	equ	0xFE5
  3089                           fsr1l	equ	0xFE1
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _Loading *****************
  3093 ;; Defined at:
  3094 ;;		line 72 in file "sort.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  i               2   62[BANK0 ] int 
  3099 ;;  i               2   60[BANK0 ] int 
  3100 ;;  i               2   58[BANK0 ] int 
  3101 ;;  i               2   56[BANK0 ] int 
  3102 ;;  i               2   54[BANK0 ] int 
  3103 ;;  j               2   64[BANK0 ] int 
  3104 ;;  i               2   66[BANK0 ] int 
  3105 ;;  addr            2   51[BANK0 ] unsigned short 
  3106 ;;  byte1           1   53[BANK0 ] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:       19 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:   11
  3123 ;; This function calls:
  3124 ;;		_EEPROM_read
  3125 ;;		_EEPROM_write
  3126 ;;		_delay_ms
  3127 ;;		_getIR
  3128 ;;		_getMAG
  3129 ;;		_initGlobalVars
  3130 ;;		_initServos
  3131 ;;		_initSortTimer
  3132 ;;		_lcdInst
  3133 ;;		_readIR
  3134 ;; This function is called by:
  3135 ;;		_sort
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text3
  3140  00116C                     __ptext3:
  3141                           	opt stack 0
  3142  00116C                     _Loading:
  3143                           	opt stack 18
  3144                           
  3145                           ;sort.c: 73: if(first){
  3146                           
  3147                           ;incstack = 0
  3148  00116C  5061               	movf	_first,w,c
  3149  00116E  1062               	iorwf	_first+1,w,c
  3150  001170  B4D8               	btfsc	status,2,c
  3151  001172  D066               	goto	l7254
  3152                           
  3153                           ;sort.c: 74: initGlobalVars();
  3154  001174  EC64  F022         	call	_initGlobalVars	;wreg free
  3155                           
  3156                           ;sort.c: 75: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3157  001178  0E01               	movlw	1
  3158  00117A  EC24  F02A         	call	_lcdInst
  3159  00117E  0E68               	movlw	104
  3160  001180  0100               	movlb	0	; () banked
  3161  001182  6FB1               	movwf	??_Loading& (0+255),b
  3162  001184  0EE4               	movlw	228
  3163  001186                     u8537:
  3164  001186  2EE8               	decfsz	wreg,f,c
  3165  001188  D7FE               	bra	u8537
  3166  00118A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3167  00118C  D7FC               	bra	u8537
  3168  00118E  F000               	nop	
  3169                           
  3170                           ;sort.c: 76: initSortTimer();
  3171  001190  ECBE  F021         	call	_initSortTimer	;wreg free
  3172                           
  3173                           ;sort.c: 77: LATCbits.LATC5 = 1;
  3174  001194  8A8B               	bsf	3979,5,c	;volatile
  3175                           
  3176                           ;sort.c: 82: sel = EEPROM_read(0);
  3177  001196  0E00               	movlw	0
  3178  001198  0100               	movlb	0	; () banked
  3179  00119A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3180  00119C  0E00               	movlw	0
  3181  00119E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3182  0011A0  ECF2  F029         	call	_EEPROM_read	;wreg free
  3183  0011A4  0100               	movlb	0	; () banked
  3184  0011A6  6FFD               	movwf	_sel& (0+255),b
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;sort.c: 83: unsigned short addr = 1 + 11 * sel;
  3188  0011A8  0100               	movlb	0	; () banked
  3189  0011AA  51FD               	movf	_sel& (0+255),w,b
  3190  0011AC  0D0B               	mullw	11
  3191  0011AE  0E01               	movlw	1
  3192  0011B0  24F3               	addwf	prodl,w,c
  3193  0011B2  0100               	movlb	0	; () banked
  3194  0011B4  6FB3               	movwf	Loading@addr& (0+255),b
  3195  0011B6  0E00               	movlw	0
  3196  0011B8  20F4               	addwfc	prodh,w,c
  3197  0011BA  0100               	movlb	0	; () banked
  3198  0011BC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;sort.c: 84: unsigned char byte1 = 0b01111111;
  3202  0011BE  0E7F               	movlw	127
  3203  0011C0  0100               	movlb	0	; () banked
  3204  0011C2  6FB5               	movwf	Loading@byte1& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;sort.c: 85: EEPROM_write(addr, byte1);
  3208  0011C4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3209  0011C8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3210  0011CC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3211  0011D0  ECC2  F01F         	call	_EEPROM_write	;wreg free
  3212                           
  3213                           ;sort.c: 88: LATBbits.LATB2 = 0;
  3214  0011D4  948A               	bcf	3978,2,c	;volatile
  3215                           
  3216                           ;sort.c: 90: for(int i=0; i<46; i++){
  3217  0011D6  0E00               	movlw	0
  3218  0011D8  0100               	movlb	0	; () banked
  3219  0011DA  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3220  0011DC  0E00               	movlw	0
  3221  0011DE  6FC2               	movwf	Loading@i& (0+255),b
  3222                           
  3223                           ; BSR set to: 0
  3224  0011E0  0100               	movlb	0	; () banked
  3225  0011E2  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3226  0011E4  D008               	goto	l7244
  3227  0011E6  0100               	movlb	0	; () banked
  3228  0011E8  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3229  0011EA  E126               	bnz	l746
  3230  0011EC  0E2E               	movlw	46
  3231  0011EE  0100               	movlb	0	; () banked
  3232  0011F0  5DC2               	subwf	Loading@i& (0+255),w,b
  3233  0011F2  B0D8               	btfsc	status,0,c
  3234  0011F4  D021               	goto	l746
  3235  0011F6                     l7244:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;sort.c: 91: LATBbits.LATB2 = !LATBbits.LATB2;
  3239  0011F6  B48A               	btfsc	3978,2,c	;volatile
  3240  0011F8  D004               	goto	u5580
  3241  0011FA  0100               	movlb	0	; () banked
  3242  0011FC  6BB1               	clrf	??_Loading& (0+255),b
  3243  0011FE  2BB1               	incf	??_Loading& (0+255),f,b
  3244  001200  D002               	goto	u5598
  3245  001202                     u5580:
  3246  001202  0100               	movlb	0	; () banked
  3247  001204  6BB1               	clrf	??_Loading& (0+255),b
  3248  001206                     u5598:
  3249  001206  0100               	movlb	0	; () banked
  3250  001208  47B1               	rlncf	??_Loading& (0+255),f,b
  3251  00120A  47B1               	rlncf	??_Loading& (0+255),f,b
  3252  00120C  508A               	movf	3978,w,c	;volatile
  3253  00120E  0100               	movlb	0	; () banked
  3254  001210  19B1               	xorwf	??_Loading& (0+255),w,b
  3255  001212  0BFB               	andlw	-5
  3256  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3257  001216  6E8A               	movwf	3978,c	;volatile
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;sort.c: 92: delay_ms(45-i);
  3261  001218  0100               	movlb	0	; () banked
  3262  00121A  51C2               	movf	Loading@i& (0+255),w,b
  3263  00121C  0800               	sublw	0
  3264  00121E  0F2D               	addlw	45
  3265  001220  EC46  F029         	call	_delay_ms
  3266  001224  0100               	movlb	0	; () banked
  3267  001226  4BC2               	infsnz	Loading@i& (0+255),f,b
  3268  001228  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271  00122A  0100               	movlb	0	; () banked
  3272  00122C  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3273  00122E  D7E3               	goto	l7244
  3274  001230  0100               	movlb	0	; () banked
  3275  001232  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3276  001234  E101               	bnz	u5600
  3277  001236  D7DA               	goto	L1
  3278  001238                     u5600:
  3279  001238                     l746:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;sort.c: 93: }
  3283                           ;sort.c: 94: LATBbits.LATB2 = 1;
  3284  001238  848A               	bsf	3978,2,c	;volatile
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;sort.c: 97: initServos();
  3288  00123A  EC10  F026         	call	_initServos	;wreg free
  3289                           
  3290                           ;sort.c: 98: }
  3291  00123E  0012               	return	
  3292  001240                     l7254:
  3293                           
  3294                           ;sort.c: 99: else{
  3295                           ;sort.c: 102: if(!f_loadingNewCan){
  3296  001240  0100               	movlb	0	; () banked
  3297  001242  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3298  001244  0100               	movlb	0	; () banked
  3299  001246  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3300  001248  A4D8               	btfss	status,2,c
  3301  00124A  D018               	goto	l7270
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 104: getIR();
  3305  00124C  EC79  F024         	call	_getIR	;wreg free
  3306                           
  3307                           ;sort.c: 106: if(!f_loadingNewCan){
  3308  001250  0100               	movlb	0	; () banked
  3309  001252  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3310  001254  0100               	movlb	0	; () banked
  3311  001256  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3312  001258  B4D8               	btfsc	status,2,c
  3313  00125A  0012               	return	
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sort.c: 110: else{
  3317                           ;sort.c: 111: count_total++;
  3318                           
  3319                           ; BSR set to: 0
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;sort.c: 108: }
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;sort.c: 107: return;
  3326  00125C  0100               	movlb	0	; () banked
  3327  00125E  4BFE               	infsnz	_count_total& (0+255),f,b
  3328  001260  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;sort.c: 112: if(count_total == 12){
  3332  001262  0E0C               	movlw	12
  3333  001264  0100               	movlb	0	; () banked
  3334  001266  19FE               	xorwf	_count_total& (0+255),w,b
  3335  001268  0100               	movlb	0	; () banked
  3336  00126A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3337  00126C  A4D8               	btfss	status,2,c
  3338  00126E  0012               	return	
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;sort.c: 113: f_lastCan = 1;
  3342  001270  0E00               	movlw	0
  3343  001272  0100               	movlb	0	; () banked
  3344  001274  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3345  001276  0E01               	movlw	1
  3346  001278  6FF0               	movwf	_f_lastCan& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 114: }
  3350                           ;sort.c: 115: }
  3351                           ;sort.c: 116: }
  3352                           
  3353                           ; BSR set to: 0
  3354  00127A  0012               	return	
  3355  00127C                     l7270:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;sort.c: 119: else if(f_ID_receive){
  3359  00127C  0101               	movlb	1	; () banked
  3360  00127E  512D               	movf	_f_ID_receive& (0+255),w,b
  3361  001280  0101               	movlb	1	; () banked
  3362  001282  112E               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3363  001284  B4D8               	btfsc	status,2,c
  3364  001286  0012               	return	
  3365                           
  3366                           ; BSR set to: 1
  3367                           ;sort.c: 120: f_loadingNewCan = 0;
  3368  001288  0E00               	movlw	0
  3369  00128A  0100               	movlb	0	; () banked
  3370  00128C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3371  00128E  0E00               	movlw	0
  3372  001290  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;sort.c: 121: _delay((unsigned long)((750)*(32000000/4000.0)));
  3376  001292  0E1F               	movlw	31
  3377  001294  0100               	movlb	0	; () banked
  3378  001296  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3379  001298  0E71               	movlw	113
  3380  00129A  0100               	movlb	0	; () banked
  3381  00129C  6FB1               	movwf	??_Loading& (0+255),b
  3382  00129E  0E1E               	movlw	30
  3383  0012A0                     u8547:
  3384  0012A0  2EE8               	decfsz	wreg,f,c
  3385  0012A2  D7FE               	bra	u8547
  3386  0012A4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3387  0012A6  D7FC               	bra	u8547
  3388  0012A8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3389  0012AA  D7FA               	bra	u8547
  3390  0012AC  F000               	nop	
  3391                           
  3392                           ;sort.c: 122: LATBbits.LATB2 = 0;
  3393  0012AE  948A               	bcf	3978,2,c	;volatile
  3394                           
  3395                           ;sort.c: 126: getMAG();
  3396  0012B0  ECB6  F027         	call	_getMAG	;wreg free
  3397                           
  3398                           ;sort.c: 127: sensor_outputs[0] = MAG_signal;
  3399  0012B4  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3400  0012B8  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3401                           
  3402                           ;sort.c: 129: if(sensor_outputs[0]){
  3403  0012BC  0100               	movlb	0	; () banked
  3404  0012BE  51E2               	movf	_sensor_outputs& (0+255),w,b
  3405  0012C0  0100               	movlb	0	; () banked
  3406  0012C2  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3407  0012C4  B4D8               	btfsc	status,2,c
  3408  0012C6  D01D               	goto	l7296
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 130: for(int i = 0; i<2500; i++){
  3412  0012C8  0E00               	movlw	0
  3413  0012CA  0100               	movlb	0	; () banked
  3414  0012CC  6FB7               	movwf	(Loading@i_1145+1)& (0+255),b
  3415  0012CE  0E00               	movlw	0
  3416  0012D0  6FB6               	movwf	Loading@i_1145& (0+255),b
  3417  0012D2                     l7286:
  3418                           
  3419                           ; BSR set to: 0
  3420  0012D2  0100               	movlb	0	; () banked
  3421  0012D4  BFB7               	btfsc	(Loading@i_1145+1)& (0+255),7,b
  3422  0012D6  D008               	goto	l756
  3423  0012D8  0EC4               	movlw	196
  3424  0012DA  0100               	movlb	0	; () banked
  3425  0012DC  5DB6               	subwf	Loading@i_1145& (0+255),w,b
  3426  0012DE  0E09               	movlw	9
  3427  0012E0  0100               	movlb	0	; () banked
  3428  0012E2  59B7               	subwfb	(Loading@i_1145+1)& (0+255),w,b
  3429  0012E4  B0D8               	btfsc	status,0,c
  3430  0012E6  D02A               	goto	l7308
  3431  0012E8                     l756:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;sort.c: 131: LATAbits.LATA4 = 1;
  3435  0012E8  8889               	bsf	3977,4,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 132: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3439  0012EA  0EC8               	movlw	200
  3440  0012EC                     u8557:
  3441  0012EC  2EE8               	decfsz	wreg,f,c
  3442  0012EE  D7FE               	bra	u8557
  3443                           
  3444                           ;sort.c: 133: LATAbits.LATA4 = 0;
  3445  0012F0  9889               	bcf	3977,4,c	;volatile
  3446                           
  3447                           ;sort.c: 134: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3448  0012F2  0E42               	movlw	66
  3449  0012F4                     u8567:
  3450  0012F4  2EE8               	decfsz	wreg,f,c
  3451  0012F6  D7FE               	bra	u8567
  3452  0012F8  D000               	nop2	
  3453  0012FA  0100               	movlb	0	; () banked
  3454  0012FC  4BB6               	infsnz	Loading@i_1145& (0+255),f,b
  3455  0012FE  2BB7               	incf	(Loading@i_1145+1)& (0+255),f,b
  3456  001300  D7E8               	goto	l7286
  3457  001302                     l7296:
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 137: else{
  3461                           ;sort.c: 138: for(int i = 0; i<2500; i++){
  3462  001302  0E00               	movlw	0
  3463  001304  0100               	movlb	0	; () banked
  3464  001306  6FB9               	movwf	(Loading@i_1154+1)& (0+255),b
  3465  001308  0E00               	movlw	0
  3466  00130A  6FB8               	movwf	Loading@i_1154& (0+255),b
  3467  00130C                     l7298:
  3468                           
  3469                           ; BSR set to: 0
  3470  00130C  0100               	movlb	0	; () banked
  3471  00130E  BFB9               	btfsc	(Loading@i_1154+1)& (0+255),7,b
  3472  001310  D008               	goto	l759
  3473  001312  0EC4               	movlw	196
  3474  001314  0100               	movlb	0	; () banked
  3475  001316  5DB8               	subwf	Loading@i_1154& (0+255),w,b
  3476  001318  0E09               	movlw	9
  3477  00131A  0100               	movlb	0	; () banked
  3478  00131C  59B9               	subwfb	(Loading@i_1154+1)& (0+255),w,b
  3479  00131E  B0D8               	btfsc	status,0,c
  3480  001320  D00D               	goto	l7308
  3481  001322                     l759:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;sort.c: 139: LATAbits.LATA4 = 1;
  3485  001322  8889               	bsf	3977,4,c	;volatile
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;sort.c: 140: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3489  001324  0E9A               	movlw	154
  3490  001326                     u8577:
  3491  001326  2EE8               	decfsz	wreg,f,c
  3492  001328  D7FE               	bra	u8577
  3493  00132A  D000               	nop2	
  3494                           
  3495                           ;sort.c: 141: LATAbits.LATA4 = 0;
  3496  00132C  9889               	bcf	3977,4,c	;volatile
  3497                           
  3498                           ;sort.c: 142: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3499  00132E  0E70               	movlw	112
  3500  001330                     u8587:
  3501  001330  2EE8               	decfsz	wreg,f,c
  3502  001332  D7FE               	bra	u8587
  3503  001334  0100               	movlb	0	; () banked
  3504  001336  4BB8               	infsnz	Loading@i_1154& (0+255),f,b
  3505  001338  2BB9               	incf	(Loading@i_1154+1)& (0+255),f,b
  3506  00133A  D7E8               	goto	l7298
  3507  00133C                     l7308:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;sort.c: 143: }
  3511                           ;sort.c: 144: }
  3512                           ;sort.c: 146: _delay((unsigned long)((350)*(32000000/4000.0)));
  3513  00133C  0E0F               	movlw	15
  3514  00133E  0100               	movlb	0	; () banked
  3515  001340  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3516  001342  0E35               	movlw	53
  3517  001344  0100               	movlb	0	; () banked
  3518  001346  6FB1               	movwf	??_Loading& (0+255),b
  3519  001348  0E51               	movlw	81
  3520  00134A                     u8597:
  3521  00134A  2EE8               	decfsz	wreg,f,c
  3522  00134C  D7FE               	bra	u8597
  3523  00134E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3524  001350  D7FC               	bra	u8597
  3525  001352  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3526  001354  D7FA               	bra	u8597
  3527                           
  3528                           ;sort.c: 148: readIR();
  3529  001356  ECB8  F026         	call	_readIR	;wreg free
  3530                           
  3531                           ;sort.c: 149: if(IR_signal==1){
  3532  00135A  0100               	movlb	0	; () banked
  3533  00135C  05E6               	decf	_IR_signal& (0+255),w,b
  3534  00135E  0100               	movlb	0	; () banked
  3535  001360  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3536  001362  A4D8               	btfss	status,2,c
  3537  001364  D147               	goto	l7426
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;sort.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
  3541  001366  0E05               	movlw	5
  3542  001368  0100               	movlb	0	; () banked
  3543  00136A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3544  00136C  0E0F               	movlw	15
  3545  00136E  0100               	movlb	0	; () banked
  3546  001370  6FB1               	movwf	??_Loading& (0+255),b
  3547  001372  0EF1               	movlw	241
  3548  001374                     u8607:
  3549  001374  2EE8               	decfsz	wreg,f,c
  3550  001376  D7FE               	bra	u8607
  3551  001378  2FB1               	decfsz	??_Loading& (0+255),f,b
  3552  00137A  D7FC               	bra	u8607
  3553  00137C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3554  00137E  D7FA               	bra	u8607
  3555                           
  3556                           ;sort.c: 151: readIR();
  3557  001380  ECB8  F026         	call	_readIR	;wreg free
  3558                           
  3559                           ;sort.c: 152: if(IR_signal==1){
  3560  001384  0100               	movlb	0	; () banked
  3561  001386  05E6               	decf	_IR_signal& (0+255),w,b
  3562  001388  0100               	movlb	0	; () banked
  3563  00138A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3564  00138C  A4D8               	btfss	status,2,c
  3565  00138E  D040               	goto	l7346
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;sort.c: 153: if(sensor_outputs[0]){
  3569  001390  0100               	movlb	0	; () banked
  3570  001392  51E2               	movf	_sensor_outputs& (0+255),w,b
  3571  001394  0100               	movlb	0	; () banked
  3572  001396  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3573  001398  B4D8               	btfsc	status,2,c
  3574  00139A  D01D               	goto	l7334
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;sort.c: 154: for(int i = 0; i<2500; i++){
  3578  00139C  0E00               	movlw	0
  3579  00139E  0100               	movlb	0	; () banked
  3580  0013A0  6FBB               	movwf	(Loading@i_1156+1)& (0+255),b
  3581  0013A2  0E00               	movlw	0
  3582  0013A4  6FBA               	movwf	Loading@i_1156& (0+255),b
  3583  0013A6                     l7324:
  3584                           
  3585                           ; BSR set to: 0
  3586  0013A6  0100               	movlb	0	; () banked
  3587  0013A8  BFBB               	btfsc	(Loading@i_1156+1)& (0+255),7,b
  3588  0013AA  D008               	goto	l764
  3589  0013AC  0EC4               	movlw	196
  3590  0013AE  0100               	movlb	0	; () banked
  3591  0013B0  5DBA               	subwf	Loading@i_1156& (0+255),w,b
  3592  0013B2  0E09               	movlw	9
  3593  0013B4  0100               	movlb	0	; () banked
  3594  0013B6  59BB               	subwfb	(Loading@i_1156+1)& (0+255),w,b
  3595  0013B8  B0D8               	btfsc	status,0,c
  3596  0013BA  D02A               	goto	l7346
  3597  0013BC                     l764:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;sort.c: 155: LATAbits.LATA4 = 1;
  3601  0013BC  8889               	bsf	3977,4,c	;volatile
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;sort.c: 156: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3605  0013BE  0EC8               	movlw	200
  3606  0013C0                     u8617:
  3607  0013C0  2EE8               	decfsz	wreg,f,c
  3608  0013C2  D7FE               	bra	u8617
  3609                           
  3610                           ;sort.c: 157: LATAbits.LATA4 = 0;
  3611  0013C4  9889               	bcf	3977,4,c	;volatile
  3612                           
  3613                           ;sort.c: 158: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3614  0013C6  0E42               	movlw	66
  3615  0013C8                     u8627:
  3616  0013C8  2EE8               	decfsz	wreg,f,c
  3617  0013CA  D7FE               	bra	u8627
  3618  0013CC  D000               	nop2	
  3619  0013CE  0100               	movlb	0	; () banked
  3620  0013D0  4BBA               	infsnz	Loading@i_1156& (0+255),f,b
  3621  0013D2  2BBB               	incf	(Loading@i_1156+1)& (0+255),f,b
  3622  0013D4  D7E8               	goto	l7324
  3623  0013D6                     l7334:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;sort.c: 161: else{
  3627                           ;sort.c: 162: for(int i = 0; i<2500; i++){
  3628  0013D6  0E00               	movlw	0
  3629  0013D8  0100               	movlb	0	; () banked
  3630  0013DA  6FBD               	movwf	(Loading@i_1157+1)& (0+255),b
  3631  0013DC  0E00               	movlw	0
  3632  0013DE  6FBC               	movwf	Loading@i_1157& (0+255),b
  3633  0013E0                     l7336:
  3634                           
  3635                           ; BSR set to: 0
  3636  0013E0  0100               	movlb	0	; () banked
  3637  0013E2  BFBD               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3638  0013E4  D008               	goto	l767
  3639  0013E6  0EC4               	movlw	196
  3640  0013E8  0100               	movlb	0	; () banked
  3641  0013EA  5DBC               	subwf	Loading@i_1157& (0+255),w,b
  3642  0013EC  0E09               	movlw	9
  3643  0013EE  0100               	movlb	0	; () banked
  3644  0013F0  59BD               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3645  0013F2  B0D8               	btfsc	status,0,c
  3646  0013F4  D00D               	goto	l7346
  3647  0013F6                     l767:
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;sort.c: 163: LATAbits.LATA4 = 1;
  3651  0013F6  8889               	bsf	3977,4,c	;volatile
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;sort.c: 164: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3655  0013F8  0E9A               	movlw	154
  3656  0013FA                     u8637:
  3657  0013FA  2EE8               	decfsz	wreg,f,c
  3658  0013FC  D7FE               	bra	u8637
  3659  0013FE  D000               	nop2	
  3660                           
  3661                           ;sort.c: 165: LATAbits.LATA4 = 0;
  3662  001400  9889               	bcf	3977,4,c	;volatile
  3663                           
  3664                           ;sort.c: 166: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3665  001402  0E70               	movlw	112
  3666  001404                     u8647:
  3667  001404  2EE8               	decfsz	wreg,f,c
  3668  001406  D7FE               	bra	u8647
  3669  001408  0100               	movlb	0	; () banked
  3670  00140A  4BBC               	infsnz	Loading@i_1157& (0+255),f,b
  3671  00140C  2BBD               	incf	(Loading@i_1157+1)& (0+255),f,b
  3672  00140E  D7E8               	goto	l7336
  3673  001410                     l7346:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;sort.c: 167: }
  3677                           ;sort.c: 168: }
  3678                           ;sort.c: 169: }
  3679                           ;sort.c: 171: _delay((unsigned long)((350)*(32000000/4000.0)));
  3680  001410  0E0F               	movlw	15
  3681  001412  0100               	movlb	0	; () banked
  3682  001414  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3683  001416  0E35               	movlw	53
  3684  001418  0100               	movlb	0	; () banked
  3685  00141A  6FB1               	movwf	??_Loading& (0+255),b
  3686  00141C  0E51               	movlw	81
  3687  00141E                     u8657:
  3688  00141E  2EE8               	decfsz	wreg,f,c
  3689  001420  D7FE               	bra	u8657
  3690  001422  2FB1               	decfsz	??_Loading& (0+255),f,b
  3691  001424  D7FC               	bra	u8657
  3692  001426  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3693  001428  D7FA               	bra	u8657
  3694                           
  3695                           ;sort.c: 173: int j = 1;
  3696  00142A  0E00               	movlw	0
  3697  00142C  0100               	movlb	0	; () banked
  3698  00142E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3699  001430  0E01               	movlw	1
  3700  001432  6FC0               	movwf	Loading@j& (0+255),b
  3701                           
  3702                           ;sort.c: 174: while(IR_signal == 1){
  3703  001434  D0D8               	goto	l7424
  3704  001436                     l7350:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;sort.c: 175: readIR();
  3708  001436  ECB8  F026         	call	_readIR	;wreg free
  3709                           
  3710                           ;sort.c: 176: if(j == 10){
  3711  00143A  0E0A               	movlw	10
  3712  00143C  0100               	movlb	0	; () banked
  3713  00143E  19C0               	xorwf	Loading@j& (0+255),w,b
  3714  001440  0100               	movlb	0	; () banked
  3715  001442  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3716  001444  A4D8               	btfss	status,2,c
  3717  001446  D016               	goto	l7358
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;sort.c: 177: LATBbits.LATB2 = !LATBbits.LATB2;
  3721  001448  B48A               	btfsc	3978,2,c	;volatile
  3722  00144A  D004               	goto	u5780
  3723  00144C  0100               	movlb	0	; () banked
  3724  00144E  6BB1               	clrf	??_Loading& (0+255),b
  3725  001450  2BB1               	incf	??_Loading& (0+255),f,b
  3726  001452  D002               	goto	u5798
  3727  001454                     u5780:
  3728  001454  0100               	movlb	0	; () banked
  3729  001456  6BB1               	clrf	??_Loading& (0+255),b
  3730  001458                     u5798:
  3731  001458  0100               	movlb	0	; () banked
  3732  00145A  47B1               	rlncf	??_Loading& (0+255),f,b
  3733  00145C  47B1               	rlncf	??_Loading& (0+255),f,b
  3734  00145E  508A               	movf	3978,w,c	;volatile
  3735  001460  0100               	movlb	0	; () banked
  3736  001462  19B1               	xorwf	??_Loading& (0+255),w,b
  3737  001464  0BFB               	andlw	-5
  3738  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3739  001468  6E8A               	movwf	3978,c	;volatile
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;sort.c: 178: j = 0;
  3743  00146A  0E00               	movlw	0
  3744  00146C  0100               	movlb	0	; () banked
  3745  00146E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3746  001470  0E00               	movlw	0
  3747  001472  6FC0               	movwf	Loading@j& (0+255),b
  3748  001474                     l7358:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;sort.c: 179: }
  3752                           ;sort.c: 180: if(IR_signal==1){
  3753  001474  0100               	movlb	0	; () banked
  3754  001476  05E6               	decf	_IR_signal& (0+255),w,b
  3755  001478  0100               	movlb	0	; () banked
  3756  00147A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3757  00147C  A4D8               	btfss	status,2,c
  3758  00147E  D098               	goto	l7412
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;sort.c: 181: _delay((unsigned long)((350)*(32000000/4000.0)));
  3762  001480  0E0F               	movlw	15
  3763  001482  0100               	movlb	0	; () banked
  3764  001484  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3765  001486  0E35               	movlw	53
  3766  001488  0100               	movlb	0	; () banked
  3767  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3768  00148C  0E51               	movlw	81
  3769  00148E                     u8667:
  3770  00148E  2EE8               	decfsz	wreg,f,c
  3771  001490  D7FE               	bra	u8667
  3772  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3773  001494  D7FC               	bra	u8667
  3774  001496  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3775  001498  D7FA               	bra	u8667
  3776                           
  3777                           ;sort.c: 182: readIR();
  3778  00149A  ECB8  F026         	call	_readIR	;wreg free
  3779                           
  3780                           ;sort.c: 183: if(IR_signal==1){
  3781  00149E  0100               	movlb	0	; () banked
  3782  0014A0  05E6               	decf	_IR_signal& (0+255),w,b
  3783  0014A2  0100               	movlb	0	; () banked
  3784  0014A4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3785  0014A6  A4D8               	btfss	status,2,c
  3786  0014A8  D07F               	goto	l773
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;sort.c: 184: if(sensor_outputs[0]){
  3790  0014AA  0100               	movlb	0	; () banked
  3791  0014AC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3792  0014AE  0100               	movlb	0	; () banked
  3793  0014B0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3794  0014B2  B4D8               	btfsc	status,2,c
  3795  0014B4  D011               	goto	l7374
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;sort.c: 185: LATAbits.LATA4 = 1;
  3799  0014B6  8889               	bsf	3977,4,c	;volatile
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;sort.c: 186: _delay((unsigned long)((250)*(32000000/4000.0)));
  3803  0014B8  0E0B               	movlw	11
  3804  0014BA  0100               	movlb	0	; () banked
  3805  0014BC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3806  0014BE  0E26               	movlw	38
  3807  0014C0  0100               	movlb	0	; () banked
  3808  0014C2  6FB1               	movwf	??_Loading& (0+255),b
  3809  0014C4  0E5D               	movlw	93
  3810  0014C6                     u8677:
  3811  0014C6  2EE8               	decfsz	wreg,f,c
  3812  0014C8  D7FE               	bra	u8677
  3813  0014CA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3814  0014CC  D7FC               	bra	u8677
  3815  0014CE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3816  0014D0  D7FA               	bra	u8677
  3817  0014D2  D000               	nop2	
  3818                           
  3819                           ;sort.c: 187: LATAbits.LATA4 = 0;
  3820  0014D4  9889               	bcf	3977,4,c	;volatile
  3821                           
  3822                           ;sort.c: 188: }
  3823  0014D6  D068               	goto	l773
  3824  0014D8                     l7374:
  3825                           
  3826                           ;sort.c: 189: else{
  3827                           ;sort.c: 190: for(int i = 0; i<2500; i++){
  3828  0014D8  0E00               	movlw	0
  3829  0014DA  0100               	movlb	0	; () banked
  3830  0014DC  6FBF               	movwf	(Loading@i_1159+1)& (0+255),b
  3831  0014DE  0E00               	movlw	0
  3832  0014E0  6FBE               	movwf	Loading@i_1159& (0+255),b
  3833  0014E2                     l7376:
  3834                           
  3835                           ; BSR set to: 0
  3836  0014E2  0100               	movlb	0	; () banked
  3837  0014E4  BFBF               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3838  0014E6  D041               	goto	l7404
  3839  0014E8  0EC4               	movlw	196
  3840  0014EA  0100               	movlb	0	; () banked
  3841  0014EC  5DBE               	subwf	Loading@i_1159& (0+255),w,b
  3842  0014EE  0E09               	movlw	9
  3843  0014F0  0100               	movlb	0	; () banked
  3844  0014F2  59BF               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3845  0014F4  B0D8               	btfsc	status,0,c
  3846  0014F6  D058               	goto	l773
  3847  0014F8  D038               	goto	l7404
  3848  0014FA                     l779:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3852  0014FA  8889               	bsf	3977,4,c	;volatile
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;sort.c: 194: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3856  0014FC  0EC8               	movlw	200
  3857  0014FE                     u8687:
  3858  0014FE  2EE8               	decfsz	wreg,f,c
  3859  001500  D7FE               	bra	u8687
  3860                           
  3861                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3862  001502  9889               	bcf	3977,4,c	;volatile
  3863                           
  3864                           ;sort.c: 196: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3865  001504  0E42               	movlw	66
  3866  001506                     u8697:
  3867  001506  2EE8               	decfsz	wreg,f,c
  3868  001508  D7FE               	bra	u8697
  3869  00150A  D01C               	goto	L2
  3870  00150C                     l781:
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;sort.c: 199: LATAbits.LATA4 = 1;
  3874  00150C  8889               	bsf	3977,4,c	;volatile
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;sort.c: 200: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3878  00150E  0ED5               	movlw	213
  3879  001510                     u8707:
  3880  001510  2EE8               	decfsz	wreg,f,c
  3881  001512  D7FE               	bra	u8707
  3882  001514  F000               	nop	
  3883                           
  3884                           ;sort.c: 201: LATAbits.LATA4 = 0;
  3885  001516  9889               	bcf	3977,4,c	;volatile
  3886                           
  3887                           ;sort.c: 202: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3888  001518  0E35               	movlw	53
  3889  00151A                     u8717:
  3890  00151A  2EE8               	decfsz	wreg,f,c
  3891  00151C  D7FE               	bra	u8717
  3892  00151E  D01D               	goto	L3
  3893  001520                     l782:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;sort.c: 205: LATAbits.LATA4 = 1;
  3897  001520  8889               	bsf	3977,4,c	;volatile
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;sort.c: 206: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3901  001522  0EE2               	movlw	226
  3902  001524                     u8727:
  3903  001524  2EE8               	decfsz	wreg,f,c
  3904  001526  D7FE               	bra	u8727
  3905  001528  D000               	nop2	
  3906                           
  3907                           ;sort.c: 207: LATAbits.LATA4 = 0;
  3908  00152A  9889               	bcf	3977,4,c	;volatile
  3909                           
  3910                           ;sort.c: 208: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3911  00152C  0E28               	movlw	40
  3912  00152E                     u8737:
  3913  00152E  2EE8               	decfsz	wreg,f,c
  3914  001530  D7FE               	bra	u8737
  3915                           
  3916                           ;sort.c: 209: break;
  3917  001532  D036               	goto	l7406
  3918  001534                     l783:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;sort.c: 211: LATAbits.LATA4 = 1;
  3922  001534  8889               	bsf	3977,4,c	;volatile
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;sort.c: 212: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3926  001536  0EF0               	movlw	240
  3927  001538                     u8747:
  3928  001538  2EE8               	decfsz	wreg,f,c
  3929  00153A  D7FE               	bra	u8747
  3930                           
  3931                           ;sort.c: 213: LATAbits.LATA4 = 0;
  3932  00153C  9889               	bcf	3977,4,c	;volatile
  3933                           
  3934                           ;sort.c: 214: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3935  00153E  0E1A               	movlw	26
  3936  001540                     u8757:
  3937  001540  2EE8               	decfsz	wreg,f,c
  3938  001542  D7FE               	bra	u8757
  3939  001544                     L2:
  3940  001544  D000               	nop2	
  3941                           
  3942                           ;sort.c: 215: break;
  3943  001546  D02C               	goto	l7406
  3944  001548                     l784:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 217: LATAbits.LATA4 = 1;
  3948  001548  8889               	bsf	3977,4,c	;volatile
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;sort.c: 218: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3952  00154A  0EFD               	movlw	253
  3953  00154C                     u8767:
  3954  00154C  2EE8               	decfsz	wreg,f,c
  3955  00154E  D7FE               	bra	u8767
  3956  001550  F000               	nop	
  3957                           
  3958                           ;sort.c: 219: LATAbits.LATA4 = 0;
  3959  001552  9889               	bcf	3977,4,c	;volatile
  3960                           
  3961                           ;sort.c: 220: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3962  001554  0E0D               	movlw	13
  3963  001556                     u8777:
  3964  001556  2EE8               	decfsz	wreg,f,c
  3965  001558  D7FE               	bra	u8777
  3966  00155A                     L3:
  3967  00155A  F000               	nop	
  3968                           
  3969                           ;sort.c: 221: break;
  3970  00155C  D021               	goto	l7406
  3971  00155E                     l785:
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;sort.c: 223: LATAbits.LATA4 = 1;
  3975  00155E  8889               	bsf	3977,4,c	;volatile
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;sort.c: 224: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3979  001560  0EA0               	movlw	160
  3980  001562                     u8787:
  3981  001562  D000               	nop2	
  3982  001564  2EE8               	decfsz	wreg,f,c
  3983  001566  D7FD               	bra	u8787
  3984                           
  3985                           ;sort.c: 226: }
  3986                           
  3987                           ;sort.c: 225: break;
  3988  001568  D01B               	goto	l7406
  3989  00156A                     l7404:
  3990  00156A  C0C0  F0B1         	movff	Loading@j,??_Loading
  3991  00156E  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3992                           
  3993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3994                           ; Switch size 1, requested type "space"
  3995                           ; Number of cases is 1, Range of values is 0 to 0
  3996                           ; switch strategies available:
  3997                           ; Name         Instructions Cycles
  3998                           ; simple_byte            4     3 (average)
  3999                           ;	Chosen strategy is simple_byte
  4000  001572  0100               	movlb	0	; () banked
  4001  001574  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4002  001576  0A00               	xorlw	0	; case 0
  4003  001578  A4D8               	btfss	status,2,c
  4004  00157A  D7F1               	goto	l785
  4005                           
  4006                           ; BSR set to: 0
  4007                           ; Switch size 1, requested type "space"
  4008                           ; Number of cases is 5, Range of values is 1 to 5
  4009                           ; switch strategies available:
  4010                           ; Name         Instructions Cycles
  4011                           ; simple_byte           16     9 (average)
  4012                           ;	Chosen strategy is simple_byte
  4013  00157C  0100               	movlb	0	; () banked
  4014  00157E  51B1               	movf	??_Loading& (0+255),w,b
  4015  001580  0A01               	xorlw	1	; case 1
  4016  001582  B4D8               	btfsc	status,2,c
  4017  001584  D7BA               	goto	l779
  4018  001586  0A03               	xorlw	3	; case 2
  4019  001588  B4D8               	btfsc	status,2,c
  4020  00158A  D7C0               	goto	l781
  4021  00158C  0A01               	xorlw	1	; case 3
  4022  00158E  B4D8               	btfsc	status,2,c
  4023  001590  D7C7               	goto	l782
  4024  001592  0A07               	xorlw	7	; case 4
  4025  001594  B4D8               	btfsc	status,2,c
  4026  001596  D7CE               	goto	l783
  4027  001598  0A01               	xorlw	1	; case 5
  4028  00159A  B4D8               	btfsc	status,2,c
  4029  00159C  D7D5               	goto	l784
  4030  00159E  D7DF               	goto	l785
  4031  0015A0                     l7406:
  4032  0015A0  0100               	movlb	0	; () banked
  4033  0015A2  4BBE               	infsnz	Loading@i_1159& (0+255),f,b
  4034  0015A4  2BBF               	incf	(Loading@i_1159+1)& (0+255),f,b
  4035  0015A6  D79D               	goto	l7376
  4036  0015A8                     l773:
  4037                           
  4038                           ;sort.c: 227: }
  4039                           ;sort.c: 228: }
  4040                           ;sort.c: 229: }
  4041                           ;sort.c: 230: LATAbits.LATA4 = 0;
  4042  0015A8  9889               	bcf	3977,4,c	;volatile
  4043                           
  4044                           ;sort.c: 231: j++;
  4045  0015AA  0100               	movlb	0	; () banked
  4046  0015AC  4BC0               	infsnz	Loading@j& (0+255),f,b
  4047  0015AE  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4048  0015B0                     l7412:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;sort.c: 232: }
  4052                           ;sort.c: 234: if(!IR_signal){
  4053  0015B0  0100               	movlb	0	; () banked
  4054  0015B2  51E6               	movf	_IR_signal& (0+255),w,b
  4055  0015B4  0100               	movlb	0	; () banked
  4056  0015B6  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4057  0015B8  A4D8               	btfss	status,2,c
  4058  0015BA  D015               	goto	l7424
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;sort.c: 235: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4062  0015BC  0E29               	movlw	41
  4063  0015BE  0100               	movlb	0	; () banked
  4064  0015C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4065  0015C2  0E96               	movlw	150
  4066  0015C4  0100               	movlb	0	; () banked
  4067  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  4068  0015C8  0E7F               	movlw	127
  4069  0015CA                     u8797:
  4070  0015CA  2EE8               	decfsz	wreg,f,c
  4071  0015CC  D7FE               	bra	u8797
  4072  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4073  0015D0  D7FC               	bra	u8797
  4074  0015D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4075  0015D4  D7FA               	bra	u8797
  4076                           
  4077                           ;sort.c: 236: readIR();
  4078  0015D6  ECB8  F026         	call	_readIR	;wreg free
  4079                           
  4080                           ;sort.c: 237: if(IR_signal==1){
  4081  0015DA  0100               	movlb	0	; () banked
  4082  0015DC  05E6               	decf	_IR_signal& (0+255),w,b
  4083  0015DE  0100               	movlb	0	; () banked
  4084  0015E0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4085  0015E2  A4D8               	btfss	status,2,c
  4086  0015E4  D006               	goto	l789
  4087  0015E6                     l7424:
  4088                           
  4089                           ; BSR set to: 0
  4090  0015E6  0100               	movlb	0	; () banked
  4091  0015E8  05E6               	decf	_IR_signal& (0+255),w,b
  4092  0015EA  0100               	movlb	0	; () banked
  4093  0015EC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4094  0015EE  B4D8               	btfsc	status,2,c
  4095  0015F0  D722               	goto	l7350
  4096  0015F2                     l789:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;sort.c: 242: }
  4100                           ;sort.c: 243: }
  4101                           ;sort.c: 244: }
  4102                           ;sort.c: 245: LATBbits.LATB2 = 0;
  4103  0015F2  948A               	bcf	3978,2,c	;volatile
  4104  0015F4                     l7426:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;sort.c: 246: }
  4108                           ;sort.c: 247: f_can_coming_to_ID = 1;
  4109  0015F4  0E00               	movlw	0
  4110  0015F6  0101               	movlb	1	; () banked
  4111  0015F8  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4112  0015FA  0E01               	movlw	1
  4113  0015FC  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4114                           
  4115                           ; BSR set to: 1
  4116                           
  4117                           ; BSR set to: 1
  4118  0015FE  0012               	return	
  4119  001600                     __end_of_Loading:
  4120                           	opt stack 0
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           postdec1	equ	0xFE5
  4130                           fsr1l	equ	0xFE1
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _initSortTimer *****************
  4134 ;; Defined at:
  4135 ;;		line 420 in file "sort.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  i               2    8[BANK0 ] int 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;Total ram usage:        5 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:   10
  4156 ;; This function calls:
  4157 ;;		_getRTC
  4158 ;; This function is called by:
  4159 ;;		_Loading
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text4
  4164  00437C                     __ptext4:
  4165                           	opt stack 0
  4166  00437C                     _initSortTimer:
  4167                           	opt stack 18
  4168                           
  4169                           ;sort.c: 422: getRTC();
  4170                           
  4171                           ;incstack = 0
  4172  00437C  ECF6  F022         	call	_getRTC	;wreg free
  4173                           
  4174                           ;sort.c: 423: for(int i = 0; i < 7; i++){
  4175  004380  0E00               	movlw	0
  4176  004382  0100               	movlb	0	; () banked
  4177  004384  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4178  004386  0E00               	movlw	0
  4179  004388  6F88               	movwf	initSortTimer@i& (0+255),b
  4180  00438A                     l6828:
  4181                           
  4182                           ; BSR set to: 0
  4183  00438A  0100               	movlb	0	; () banked
  4184  00438C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4185  00438E  D008               	goto	l6832
  4186  004390  0100               	movlb	0	; () banked
  4187  004392  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4188  004394  E140               	bnz	l6838
  4189  004396  0E07               	movlw	7
  4190  004398  0100               	movlb	0	; () banked
  4191  00439A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4192  00439C  B0D8               	btfsc	status,0,c
  4193  00439E  D03B               	goto	l6838
  4194  0043A0                     l6832:
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;sort.c: 424: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4198  0043A0  0E1C               	movlw	low _time
  4199  0043A2  0100               	movlb	0	; () banked
  4200  0043A4  2588               	addwf	initSortTimer@i& (0+255),w,b
  4201  0043A6  6ED9               	movwf	fsr2l,c
  4202  0043A8  0E01               	movlw	high _time
  4203  0043AA  0100               	movlb	0	; () banked
  4204  0043AC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4205  0043AE  6EDA               	movwf	fsr2h,c
  4206  0043B0  50DF               	movf	indf2,w,c
  4207  0043B2  0100               	movlb	0	; () banked
  4208  0043B4  6F85               	movwf	??_initSortTimer& (0+255),b
  4209  0043B6  0100               	movlb	0	; () banked
  4210  0043B8  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4211  0043BA  0E0F               	movlw	15
  4212  0043BC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4213  0043BE  0E0F               	movlw	15
  4214  0043C0  0100               	movlb	0	; () banked
  4215  0043C2  1785               	andwf	??_initSortTimer& (0+255),f,b
  4216  0043C4  0100               	movlb	0	; () banked
  4217  0043C6  5185               	movf	??_initSortTimer& (0+255),w,b
  4218  0043C8  0D0A               	mullw	10
  4219  0043CA  0E1C               	movlw	low _time
  4220  0043CC  0100               	movlb	0	; () banked
  4221  0043CE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4222  0043D0  6ED9               	movwf	fsr2l,c
  4223  0043D2  0E01               	movlw	high _time
  4224  0043D4  0100               	movlb	0	; () banked
  4225  0043D6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4226  0043D8  6EDA               	movwf	fsr2h,c
  4227  0043DA  50DF               	movf	indf2,w,c
  4228  0043DC  0B0F               	andlw	15
  4229  0043DE  0100               	movlb	0	; () banked
  4230  0043E0  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4231  0043E2  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4232  0043E4  50F3               	movf	prodl,w,c
  4233  0043E6  0100               	movlb	0	; () banked
  4234  0043E8  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4235  0043EA  50F4               	movf	prodh,w,c
  4236  0043EC  0100               	movlb	0	; () banked
  4237  0043EE  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4238  0043F0  90D8               	bcf	status,0,c
  4239  0043F2  0100               	movlb	0	; () banked
  4240  0043F4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4241  0043F6  6ED9               	movwf	fsr2l,c
  4242  0043F8  0100               	movlb	0	; () banked
  4243  0043FA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4244  0043FC  6EDA               	movwf	fsr2h,c
  4245  0043FE  0E0E               	movlw	low _startTime
  4246  004400  26D9               	addwf	fsr2l,f,c
  4247  004402  0E01               	movlw	high _startTime
  4248  004404  22DA               	addwfc	fsr2h,f,c
  4249  004406  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4250  00440A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4251                           
  4252                           ; BSR set to: 0
  4253  00440E  0100               	movlb	0	; () banked
  4254  004410  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4255  004412  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4256  004414  D7BA               	goto	l6828
  4257  004416                     l6838:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 425: }
  4261                           ;sort.c: 427: T0CON = 0b00010111;
  4262  004416  0E17               	movlw	23
  4263  004418  6ED5               	movwf	4053,c	;volatile
  4264                           
  4265                           ;sort.c: 436: TMR0H = 0b10000101;
  4266  00441A  0E85               	movlw	133
  4267  00441C  6ED7               	movwf	4055,c	;volatile
  4268                           
  4269                           ;sort.c: 437: TMR0L = 0b11101110;
  4270  00441E  0EEE               	movlw	238
  4271  004420  6ED6               	movwf	4054,c	;volatile
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;sort.c: 438: TMR0ON = 1;
  4275  004422  8ED5               	bsf	4053,7,c	;volatile
  4276                           
  4277                           ; BSR set to: 0
  4278  004424  0012               	return		;funcret
  4279  004426                     __end_of_initSortTimer:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           postdec1	equ	0xFE5
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _initGlobalVars *****************
  4299 ;; Defined at:
  4300 ;;		line 393 in file "sort.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;		None
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      void 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;Total ram usage:        0 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    7
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_Loading
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text5
  4329  0044C8                     __ptext5:
  4330                           	opt stack 0
  4331  0044C8                     _initGlobalVars:
  4332                           	opt stack 21
  4333                           
  4334                           ;sort.c: 395: first = 0;
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;incstack = 0
  4338  0044C8  0E00               	movlw	0
  4339  0044CA  6E62               	movwf	_first+1,c
  4340  0044CC  0E00               	movlw	0
  4341  0044CE  6E61               	movwf	_first,c
  4342                           
  4343                           ;sort.c: 398: f_loadingNewCan = 0;
  4344  0044D0  0E00               	movlw	0
  4345  0044D2  0100               	movlb	0	; () banked
  4346  0044D4  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4347  0044D6  0E00               	movlw	0
  4348  0044D8  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4349                           
  4350                           ;sort.c: 399: f_lastCan = 0;
  4351  0044DA  0E00               	movlw	0
  4352  0044DC  0100               	movlb	0	; () banked
  4353  0044DE  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4354  0044E0  0E00               	movlw	0
  4355  0044E2  6FF0               	movwf	_f_lastCan& (0+255),b
  4356                           
  4357                           ;sort.c: 400: f_ID_receive = 1;
  4358  0044E4  0E00               	movlw	0
  4359  0044E6  0101               	movlb	1	; () banked
  4360  0044E8  6F2E               	movwf	(_f_ID_receive+1)& (0+255),b
  4361  0044EA  0E01               	movlw	1
  4362  0044EC  6F2D               	movwf	_f_ID_receive& (0+255),b
  4363                           
  4364                           ;sort.c: 401: f_can_coming_to_ID = 0;
  4365  0044EE  0E00               	movlw	0
  4366  0044F0  0101               	movlb	1	; () banked
  4367  0044F2  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4368  0044F4  0E00               	movlw	0
  4369  0044F6  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4370                           
  4371                           ;sort.c: 402: f_can_coming_to_distribution = 0;
  4372  0044F8  0E00               	movlw	0
  4373  0044FA  0101               	movlb	1	; () banked
  4374  0044FC  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4375  0044FE  0E00               	movlw	0
  4376  004500  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  4377                           
  4378                           ;sort.c: 403: f_can_distributed = 0;
  4379  004502  0E00               	movlw	0
  4380  004504  0101               	movlb	1	; () banked
  4381  004506  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4382  004508  0E00               	movlw	0
  4383  00450A  6F33               	movwf	_f_can_distributed& (0+255),b
  4384                           
  4385                           ;sort.c: 404: f_most_recent_sort_time = 0;
  4386  00450C  0E00               	movlw	0
  4387  00450E  0101               	movlb	1	; () banked
  4388  004510  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4389  004512  0E00               	movlw	0
  4390  004514  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  4391                           
  4392                           ;sort.c: 407: count_total = 0;
  4393  004516  0E00               	movlw	0
  4394  004518  0100               	movlb	0	; () banked
  4395  00451A  6FFF               	movwf	(_count_total+1)& (0+255),b
  4396  00451C  0E00               	movlw	0
  4397  00451E  6FFE               	movwf	_count_total& (0+255),b
  4398                           
  4399                           ;sort.c: 408: count_pop_no_tab = 0;
  4400  004520  0E00               	movlw	0
  4401  004522  0101               	movlb	1	; () banked
  4402  004524  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4403  004526  0E00               	movlw	0
  4404  004528  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4405                           
  4406                           ;sort.c: 409: count_pop_w_tab = 0;
  4407  00452A  0E00               	movlw	0
  4408  00452C  0101               	movlb	1	; () banked
  4409  00452E  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4410  004530  0E00               	movlw	0
  4411  004532  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4412                           
  4413                           ;sort.c: 410: count_can_w_lab = 0;
  4414  004534  0E00               	movlw	0
  4415  004536  0101               	movlb	1	; () banked
  4416  004538  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4417  00453A  0E00               	movlw	0
  4418  00453C  6F25               	movwf	_count_can_w_lab& (0+255),b
  4419                           
  4420                           ;sort.c: 411: count_can_no_lab = 0;
  4421  00453E  0E00               	movlw	0
  4422  004540  0101               	movlb	1	; () banked
  4423  004542  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4424  004544  0E00               	movlw	0
  4425  004546  6F23               	movwf	_count_can_no_lab& (0+255),b
  4426                           
  4427                           ;sort.c: 414: most_recent_sort_time = 999;
  4428  004548  0E03               	movlw	3
  4429  00454A  6E72               	movwf	_most_recent_sort_time+1,c
  4430  00454C  0EE7               	movlw	231
  4431  00454E  6E71               	movwf	_most_recent_sort_time,c
  4432                           
  4433                           ;sort.c: 417: servo_timer_counter = 0;
  4434  004550  0E00               	movlw	0
  4435  004552  0101               	movlb	1	; () banked
  4436  004554  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
  4437  004556  0E00               	movlw	0
  4438  004558  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;sort.c: 418: servo_state = -1;
  4442  00455A  6873               	setf	_servo_state,c	;volatile
  4443  00455C  6874               	setf	_servo_state+1,c	;volatile
  4444                           
  4445                           ; BSR set to: 1
  4446  00455E  0012               	return		;funcret
  4447  004560                     __end_of_initGlobalVars:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postdec1	equ	0xFE5
  4458                           fsr1l	equ	0xFE1
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           fsr2h	equ	0xFDA
  4463                           fsr2l	equ	0xFD9
  4464                           status	equ	0xFD8
  4465                           
  4466 ;; *************** function _getMAG *****************
  4467 ;; Defined at:
  4468 ;;		line 508 in file "sort.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;Total ram usage:        2 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    9
  4489 ;; This function calls:
  4490 ;;		_readMAG
  4491 ;; This function is called by:
  4492 ;;		_Loading
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text6
  4497  004F6C                     __ptext6:
  4498                           	opt stack 0
  4499  004F6C                     _getMAG:
  4500                           	opt stack 19
  4501                           
  4502                           ;sort.c: 509: readMAG();
  4503                           
  4504                           ; BSR set to: 1
  4505                           ;incstack = 0
  4506  004F6C  ECDE  F026         	call	_readMAG	;wreg free
  4507                           
  4508                           ;sort.c: 511: if(MAG_signal==1){
  4509  004F70  0100               	movlb	0	; () banked
  4510  004F72  05E8               	decf	_MAG_signal& (0+255),w,b
  4511  004F74  0100               	movlb	0	; () banked
  4512  004F76  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4513  004F78  A4D8               	btfss	status,2,c
  4514  004F7A  0012               	return	
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;sort.c: 512: _delay((unsigned long)((500)*(32000000/4000.0)));
  4518  004F7C  0E15               	movlw	21
  4519  004F7E  0100               	movlb	0	; () banked
  4520  004F80  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4521  004F82  0E4B               	movlw	75
  4522  004F84  0100               	movlb	0	; () banked
  4523  004F86  6F86               	movwf	??_getMAG& (0+255),b
  4524  004F88  0EBE               	movlw	190
  4525  004F8A                     u8807:
  4526  004F8A  2EE8               	decfsz	wreg,f,c
  4527  004F8C  D7FE               	bra	u8807
  4528  004F8E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4529  004F90  D7FC               	bra	u8807
  4530  004F92  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4531  004F94  D7FA               	bra	u8807
  4532  004F96  F000               	nop	
  4533                           
  4534                           ;sort.c: 513: readMAG();
  4535  004F98  ECDE  F026         	call	_readMAG	;wreg free
  4536  004F9C  0012               	return	
  4537  004F9E                     __end_of_getMAG:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1l	equ	0xFE1
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           postdec2	equ	0xFDD
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _getIR *****************
  4557 ;; Defined at:
  4558 ;;		line 492 in file "sort.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  i               2    7[BANK0 ] int 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, status,2, status,0, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;Total ram usage:        3 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    9
  4579 ;; This function calls:
  4580 ;;		_readIR
  4581 ;; This function is called by:
  4582 ;;		_Loading
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text7
  4587  0048F2                     __ptext7:
  4588                           	opt stack 0
  4589  0048F2                     _getIR:
  4590                           	opt stack 19
  4591                           
  4592                           ;sort.c: 493: readIR();
  4593                           
  4594                           ;incstack = 0
  4595  0048F2  ECB8  F026         	call	_readIR	;wreg free
  4596                           
  4597                           ;sort.c: 494: for(int i = 0; i < 150; i++){
  4598  0048F6  0E00               	movlw	0
  4599  0048F8  0100               	movlb	0	; () banked
  4600  0048FA  6F88               	movwf	(getIR@i+1)& (0+255),b
  4601  0048FC  0E00               	movlw	0
  4602  0048FE  6F87               	movwf	getIR@i& (0+255),b
  4603  004900                     l6920:
  4604                           
  4605                           ; BSR set to: 0
  4606  004900  0100               	movlb	0	; () banked
  4607  004902  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4608  004904  D008               	goto	l6924
  4609  004906  0100               	movlb	0	; () banked
  4610  004908  5188               	movf	(getIR@i+1)& (0+255),w,b
  4611  00490A  E11A               	bnz	l6936
  4612  00490C  0E96               	movlw	150
  4613  00490E  0100               	movlb	0	; () banked
  4614  004910  5D87               	subwf	getIR@i& (0+255),w,b
  4615  004912  B0D8               	btfsc	status,0,c
  4616  004914  D015               	goto	l6936
  4617  004916                     l6924:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;sort.c: 495: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4621  004916  0E06               	movlw	6
  4622  004918  0100               	movlb	0	; () banked
  4623  00491A  6F86               	movwf	??_getIR& (0+255),b
  4624  00491C  0E30               	movlw	48
  4625  00491E                     u8817:
  4626  00491E  2EE8               	decfsz	wreg,f,c
  4627  004920  D7FE               	bra	u8817
  4628  004922  2F86               	decfsz	??_getIR& (0+255),f,b
  4629  004924  D7FC               	bra	u8817
  4630  004926  F000               	nop	
  4631                           
  4632                           ;sort.c: 496: readIR();
  4633  004928  ECB8  F026         	call	_readIR	;wreg free
  4634                           
  4635                           ;sort.c: 497: if(!IR_signal){
  4636  00492C  0100               	movlb	0	; () banked
  4637  00492E  51E6               	movf	_IR_signal& (0+255),w,b
  4638  004930  0100               	movlb	0	; () banked
  4639  004932  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4640  004934  B4D8               	btfsc	status,2,c
  4641  004936  D004               	goto	l6936
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;sort.c: 498: break;
  4649  004938  0100               	movlb	0	; () banked
  4650  00493A  4B87               	infsnz	getIR@i& (0+255),f,b
  4651  00493C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4652  00493E  D7E0               	goto	l6920
  4653  004940                     l6936:
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;sort.c: 499: }
  4657                           ;sort.c: 500: }
  4658                           ;sort.c: 501: if(IR_signal==1){
  4659  004940  0100               	movlb	0	; () banked
  4660  004942  05E6               	decf	_IR_signal& (0+255),w,b
  4661  004944  0100               	movlb	0	; () banked
  4662  004946  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4663  004948  A4D8               	btfss	status,2,c
  4664  00494A  D006               	goto	l6940
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;sort.c: 502: f_loadingNewCan = 1;
  4668  00494C  0E00               	movlw	0
  4669  00494E  0100               	movlb	0	; () banked
  4670  004950  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4671  004952  0E01               	movlw	1
  4672  004954  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4673                           
  4674                           ;sort.c: 503: }
  4675  004956  0012               	return	
  4676  004958                     l6940:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;sort.c: 504: else{
  4680                           ;sort.c: 505: f_loadingNewCan = 0;
  4681  004958  0E00               	movlw	0
  4682  00495A  0100               	movlb	0	; () banked
  4683  00495C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4684  00495E  0E00               	movlw	0
  4685  004960  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4686  004962  0012               	return	
  4687  004964                     __end_of_getIR:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _readIR *****************
  4707 ;; Defined at:
  4708 ;;		line 23 in file "ADCFunctionality.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  res             2    4[BANK0 ] int 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;Total ram usage:        4 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    8
  4729 ;; This function calls:
  4730 ;;		_readADC
  4731 ;; This function is called by:
  4732 ;;		_Loading
  4733 ;;		_getIR
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text8
  4738  004D70                     __ptext8:
  4739                           	opt stack 0
  4740  004D70                     _readIR:
  4741                           	opt stack 20
  4742                           
  4743                           ;ADCFunctionality.c: 24: readADC(0);
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;incstack = 0
  4747  004D70  0E00               	movlw	0
  4748  004D72  EC1B  F029         	call	_readADC
  4749                           
  4750                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4751  004D76  50C3               	movf	4035,w,c	;volatile
  4752  004D78  CFC4 F082          	movff	4036,??_readIR	;volatile
  4753  004D7C  0100               	movlb	0	; () banked
  4754  004D7E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4755  004D80  C082  F083         	movff	??_readIR,??_readIR+1
  4756  004D84  0100               	movlb	0	; () banked
  4757  004D86  6B82               	clrf	??_readIR& (0+255),b
  4758  004D88  0100               	movlb	0	; () banked
  4759  004D8A  1182               	iorwf	??_readIR& (0+255),w,b
  4760  004D8C  0100               	movlb	0	; () banked
  4761  004D8E  6F84               	movwf	readIR@res& (0+255),b
  4762  004D90  0100               	movlb	0	; () banked
  4763  004D92  5183               	movf	(??_readIR+1)& (0+255),w,b
  4764  004D94  0100               	movlb	0	; () banked
  4765  004D96  6F85               	movwf	(readIR@res+1)& (0+255),b
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4769  004D98  0100               	movlb	0	; () banked
  4770  004D9A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4771  004D9C  D00A               	goto	u4520
  4772  004D9E  0E21               	movlw	33
  4773  004DA0  0100               	movlb	0	; () banked
  4774  004DA2  5D84               	subwf	readIR@res& (0+255),w,b
  4775  004DA4  0E03               	movlw	3
  4776  004DA6  0100               	movlb	0	; () banked
  4777  004DA8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4778  004DAA  A0D8               	btfss	status,0,c
  4779  004DAC  D002               	goto	u4520
  4780  004DAE  0E01               	movlw	1
  4781  004DB0  D001               	goto	u4530
  4782  004DB2                     u4520:
  4783  004DB2  0E00               	movlw	0
  4784  004DB4                     u4530:
  4785  004DB4  0100               	movlb	0	; () banked
  4786  004DB6  6FE6               	movwf	_IR_signal& (0+255),b
  4787  004DB8  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4788                           
  4789                           ; BSR set to: 0
  4790  004DBA  0012               	return		;funcret
  4791  004DBC                     __end_of_readIR:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _ID *****************
  4811 ;; Defined at:
  4812 ;;		line 251 in file "sort.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  i               2    6[BANK0 ] int 
  4817 ;;  i               2    4[BANK0 ] int 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        6 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    8
  4834 ;; This function calls:
  4835 ;;		_delay_ms
  4836 ;; This function is called by:
  4837 ;;		_sort
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text9
  4842  0030D8                     __ptext9:
  4843                           	opt stack 0
  4844  0030D8                     _ID:
  4845                           	opt stack 21
  4846                           
  4847                           ;sort.c: 252: if(f_can_coming_to_ID){
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;incstack = 0
  4851  0030D8  0101               	movlb	1	; () banked
  4852  0030DA  512F               	movf	_f_can_coming_to_ID& (0+255),w,b
  4853  0030DC  0101               	movlb	1	; () banked
  4854  0030DE  1130               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4855  0030E0  B4D8               	btfsc	status,2,c
  4856  0030E2  0012               	return	
  4857                           
  4858                           ; BSR set to: 1
  4859                           ;sort.c: 254: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4860  0030E4  0E3D               	movlw	61
  4861  0030E6  0100               	movlb	0	; () banked
  4862  0030E8  6F83               	movwf	(??_ID+1)& (0+255),b
  4863  0030EA  0EE1               	movlw	225
  4864  0030EC  0100               	movlb	0	; () banked
  4865  0030EE  6F82               	movwf	??_ID& (0+255),b
  4866  0030F0  0E3F               	movlw	63
  4867  0030F2                     u8827:
  4868  0030F2  2EE8               	decfsz	wreg,f,c
  4869  0030F4  D7FE               	bra	u8827
  4870  0030F6  2F82               	decfsz	??_ID& (0+255),f,b
  4871  0030F8  D7FC               	bra	u8827
  4872  0030FA  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4873  0030FC  D7FA               	bra	u8827
  4874  0030FE  D000               	nop2	
  4875                           
  4876                           ;sort.c: 256: LATAbits.LATA3 = 1;
  4877  003100  8689               	bsf	3977,3,c	;volatile
  4878                           
  4879                           ;sort.c: 257: _delay((unsigned long)((600)*(32000000/4000.0)));
  4880  003102  0E19               	movlw	25
  4881  003104  0100               	movlb	0	; () banked
  4882  003106  6F83               	movwf	(??_ID+1)& (0+255),b
  4883  003108  0E5A               	movlw	90
  4884  00310A  0100               	movlb	0	; () banked
  4885  00310C  6F82               	movwf	??_ID& (0+255),b
  4886  00310E  0EB1               	movlw	177
  4887  003110                     u8837:
  4888  003110  2EE8               	decfsz	wreg,f,c
  4889  003112  D7FE               	bra	u8837
  4890  003114  2F82               	decfsz	??_ID& (0+255),f,b
  4891  003116  D7FC               	bra	u8837
  4892  003118  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4893  00311A  D7FA               	bra	u8837
  4894  00311C  D000               	nop2	
  4895                           
  4896                           ;sort.c: 258: sensor_outputs[1] = PORTAbits.RA2;
  4897  00311E  A480               	btfss	3968,2,c	;volatile
  4898  003120  D004               	goto	u5890
  4899  003122  0100               	movlb	0	; () banked
  4900  003124  6B82               	clrf	??_ID& (0+255),b
  4901  003126  2B82               	incf	??_ID& (0+255),f,b
  4902  003128  D002               	goto	u5898
  4903  00312A                     u5890:
  4904  00312A  0100               	movlb	0	; () banked
  4905  00312C  6B82               	clrf	??_ID& (0+255),b
  4906  00312E                     u5898:
  4907  00312E  0100               	movlb	0	; () banked
  4908  003130  5182               	movf	??_ID& (0+255),w,b
  4909  003132  0100               	movlb	0	; () banked
  4910  003134  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4911  003136  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;sort.c: 259: LATAbits.LATA3 = 0;
  4915  003138  9689               	bcf	3977,3,c	;volatile
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;sort.c: 261: _delay((unsigned long)((200)*(32000000/4000.0)));
  4919  00313A  0E09               	movlw	9
  4920  00313C  0100               	movlb	0	; () banked
  4921  00313E  6F83               	movwf	(??_ID+1)& (0+255),b
  4922  003140  0E1E               	movlw	30
  4923  003142  0100               	movlb	0	; () banked
  4924  003144  6F82               	movwf	??_ID& (0+255),b
  4925  003146  0EE4               	movlw	228
  4926  003148                     u8847:
  4927  003148  2EE8               	decfsz	wreg,f,c
  4928  00314A  D7FE               	bra	u8847
  4929  00314C  2F82               	decfsz	??_ID& (0+255),f,b
  4930  00314E  D7FC               	bra	u8847
  4931  003150  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4932  003152  D7FA               	bra	u8847
  4933  003154  F000               	nop	
  4934                           
  4935                           ;sort.c: 262: LATAbits.LATA3 = 1;
  4936  003156  8689               	bsf	3977,3,c	;volatile
  4937                           
  4938                           ;sort.c: 263: _delay((unsigned long)((600)*(32000000/4000.0)));
  4939  003158  0E19               	movlw	25
  4940  00315A  0100               	movlb	0	; () banked
  4941  00315C  6F83               	movwf	(??_ID+1)& (0+255),b
  4942  00315E  0E5A               	movlw	90
  4943  003160  0100               	movlb	0	; () banked
  4944  003162  6F82               	movwf	??_ID& (0+255),b
  4945  003164  0EB1               	movlw	177
  4946  003166                     u8857:
  4947  003166  2EE8               	decfsz	wreg,f,c
  4948  003168  D7FE               	bra	u8857
  4949  00316A  2F82               	decfsz	??_ID& (0+255),f,b
  4950  00316C  D7FC               	bra	u8857
  4951  00316E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4952  003170  D7FA               	bra	u8857
  4953  003172  D000               	nop2	
  4954                           
  4955                           ;sort.c: 264: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4956  003174  A480               	btfss	3968,2,c	;volatile
  4957  003176  D004               	goto	u5900
  4958  003178  0100               	movlb	0	; () banked
  4959  00317A  6B82               	clrf	??_ID& (0+255),b
  4960  00317C  2B82               	incf	??_ID& (0+255),f,b
  4961  00317E  D002               	goto	u5908
  4962  003180                     u5900:
  4963  003180  0100               	movlb	0	; () banked
  4964  003182  6B82               	clrf	??_ID& (0+255),b
  4965  003184                     u5908:
  4966  003184  0100               	movlb	0	; () banked
  4967  003186  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4968  003188  0100               	movlb	0	; () banked
  4969  00318A  1182               	iorwf	??_ID& (0+255),w,b
  4970  00318C  0100               	movlb	0	; () banked
  4971  00318E  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4972  003190  0100               	movlb	0	; () banked
  4973  003192  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  4974  003194  0100               	movlb	0	; () banked
  4975  003196  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;sort.c: 272: if(!sensor_outputs[0]){
  4979  003198  0100               	movlb	0	; () banked
  4980  00319A  51E2               	movf	_sensor_outputs& (0+255),w,b
  4981  00319C  0100               	movlb	0	; () banked
  4982  00319E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4983  0031A0  A4D8               	btfss	status,2,c
  4984  0031A2  D016               	goto	l7464
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 273: if(!sensor_outputs[1]){
  4988  0031A4  0100               	movlb	0	; () banked
  4989  0031A6  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4990  0031A8  0100               	movlb	0	; () banked
  4991  0031AA  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4992  0031AC  A4D8               	btfss	status,2,c
  4993  0031AE  D008               	goto	l7460
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;sort.c: 274: count_pop_no_tab++;
  4997  0031B0  0101               	movlb	1	; () banked
  4998  0031B2  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  4999  0031B4  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5000                           
  5001                           ; BSR set to: 1
  5002                           ;sort.c: 275: cur_can = 0;
  5003  0031B6  0E00               	movlw	0
  5004  0031B8  0100               	movlb	0	; () banked
  5005  0031BA  6FED               	movwf	(_cur_can+1)& (0+255),b
  5006  0031BC  0E00               	movlw	0
  5007  0031BE  D007               	goto	L4
  5008  0031C0                     l7460:
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;sort.c: 277: else{
  5012                           ;sort.c: 278: count_pop_w_tab++;
  5013  0031C0  0101               	movlb	1	; () banked
  5014  0031C2  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5015  0031C4  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;sort.c: 279: cur_can = 1;
  5019  0031C6  0E00               	movlw	0
  5020  0031C8  0100               	movlb	0	; () banked
  5021  0031CA  6FED               	movwf	(_cur_can+1)& (0+255),b
  5022  0031CC  0E01               	movlw	1
  5023  0031CE                     L4:
  5024  0031CE  6FEC               	movwf	_cur_can& (0+255),b
  5025  0031D0                     l7464:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;sort.c: 280: }
  5029                           ;sort.c: 281: }
  5030                           ;sort.c: 282: if(sensor_outputs[0]){
  5031  0031D0  0100               	movlb	0	; () banked
  5032  0031D2  51E2               	movf	_sensor_outputs& (0+255),w,b
  5033  0031D4  0100               	movlb	0	; () banked
  5034  0031D6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5035  0031D8  B4D8               	btfsc	status,2,c
  5036  0031DA  D016               	goto	l7476
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;sort.c: 283: if(!sensor_outputs[1]){
  5040  0031DC  0100               	movlb	0	; () banked
  5041  0031DE  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5042  0031E0  0100               	movlb	0	; () banked
  5043  0031E2  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5044  0031E4  A4D8               	btfss	status,2,c
  5045  0031E6  D008               	goto	l7472
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;sort.c: 284: count_can_w_lab++;
  5049  0031E8  0101               	movlb	1	; () banked
  5050  0031EA  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5051  0031EC  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5052                           
  5053                           ; BSR set to: 1
  5054                           ;sort.c: 285: cur_can = 2;
  5055  0031EE  0E00               	movlw	0
  5056  0031F0  0100               	movlb	0	; () banked
  5057  0031F2  6FED               	movwf	(_cur_can+1)& (0+255),b
  5058  0031F4  0E02               	movlw	2
  5059  0031F6  D007               	goto	L5
  5060  0031F8                     l7472:
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;sort.c: 287: else{
  5064                           ;sort.c: 288: count_can_no_lab++;
  5065  0031F8  0101               	movlb	1	; () banked
  5066  0031FA  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5067  0031FC  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5068                           
  5069                           ; BSR set to: 1
  5070                           ;sort.c: 289: cur_can = 3;
  5071  0031FE  0E00               	movlw	0
  5072  003200  0100               	movlb	0	; () banked
  5073  003202  6FED               	movwf	(_cur_can+1)& (0+255),b
  5074  003204  0E03               	movlw	3
  5075  003206                     L5:
  5076  003206  6FEC               	movwf	_cur_can& (0+255),b
  5077  003208                     l7476:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;sort.c: 290: }
  5081                           ;sort.c: 291: }
  5082                           ;sort.c: 292: LATAbits.LATA3 = 0;
  5083  003208  9689               	bcf	3977,3,c	;volatile
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;sort.c: 293: _delay((unsigned long)((200)*(32000000/4000.0)));
  5087  00320A  0E09               	movlw	9
  5088  00320C  0100               	movlb	0	; () banked
  5089  00320E  6F83               	movwf	(??_ID+1)& (0+255),b
  5090  003210  0E1E               	movlw	30
  5091  003212  0100               	movlb	0	; () banked
  5092  003214  6F82               	movwf	??_ID& (0+255),b
  5093  003216  0EE4               	movlw	228
  5094  003218                     u8867:
  5095  003218  2EE8               	decfsz	wreg,f,c
  5096  00321A  D7FE               	bra	u8867
  5097  00321C  2F82               	decfsz	??_ID& (0+255),f,b
  5098  00321E  D7FC               	bra	u8867
  5099  003220  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5100  003222  D7FA               	bra	u8867
  5101  003224  F000               	nop	
  5102                           
  5103                           ;sort.c: 294: LATAbits.LATA3 = 1;
  5104  003226  8689               	bsf	3977,3,c	;volatile
  5105                           
  5106                           ;sort.c: 297: for(int i=0;i<10000;i++)
  5107  003228  0E00               	movlw	0
  5108  00322A  0100               	movlb	0	; () banked
  5109  00322C  6F85               	movwf	(ID@i+1)& (0+255),b
  5110  00322E  0E00               	movlw	0
  5111  003230  6F84               	movwf	ID@i& (0+255),b
  5112  003232  0100               	movlb	0	; () banked
  5113  003234  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5114  003236  D008               	goto	l799
  5115  003238  0E10               	movlw	16
  5116  00323A  0100               	movlb	0	; () banked
  5117  00323C  5D84               	subwf	ID@i& (0+255),w,b
  5118  00323E  0E27               	movlw	39
  5119  003240  0100               	movlb	0	; () banked
  5120  003242  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5121  003244  B0D8               	btfsc	status,0,c
  5122  003246  D00D               	goto	l800
  5123  003248                     l799:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;sort.c: 298: {
  5127                           ;sort.c: 299: LATCbits.LATC0 = 1;
  5128  003248  808B               	bsf	3979,0,c	;volatile
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;sort.c: 300: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5132  00324A  0E1A               	movlw	26
  5133  00324C                     u8877:
  5134  00324C  2EE8               	decfsz	wreg,f,c
  5135  00324E  D7FE               	bra	u8877
  5136  003250  D000               	nop2	
  5137                           
  5138                           ;sort.c: 301: LATCbits.LATC0 = 0;
  5139  003252  908B               	bcf	3979,0,c	;volatile
  5140                           
  5141                           ;sort.c: 302: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5142  003254  0EF0               	movlw	240
  5143  003256                     u8887:
  5144  003256  2EE8               	decfsz	wreg,f,c
  5145  003258  D7FE               	bra	u8887
  5146  00325A  0100               	movlb	0	; () banked
  5147  00325C  4B84               	infsnz	ID@i& (0+255),f,b
  5148  00325E  2B85               	incf	(ID@i+1)& (0+255),f,b
  5149  003260  D7E8               	goto	L6
  5150  003262                     l800:
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;sort.c: 303: }
  5154                           ;sort.c: 304: LATCbits.LATC0 = 0;
  5155  003262  908B               	bcf	3979,0,c	;volatile
  5156                           
  5157                           ;sort.c: 306: LATAbits.LATA3 = 0;
  5158  003264  9689               	bcf	3977,3,c	;volatile
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;sort.c: 310: f_can_coming_to_distribution = 1;
  5162  003266  0E00               	movlw	0
  5163  003268  0101               	movlb	1	; () banked
  5164  00326A  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5165  00326C  0E01               	movlw	1
  5166  00326E  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5167                           
  5168                           ; BSR set to: 1
  5169                           ;sort.c: 311: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5170  003270  0E3D               	movlw	61
  5171  003272  0100               	movlb	0	; () banked
  5172  003274  6F83               	movwf	(??_ID+1)& (0+255),b
  5173  003276  0EE1               	movlw	225
  5174  003278  0100               	movlb	0	; () banked
  5175  00327A  6F82               	movwf	??_ID& (0+255),b
  5176  00327C  0E3F               	movlw	63
  5177  00327E                     u8897:
  5178  00327E  2EE8               	decfsz	wreg,f,c
  5179  003280  D7FE               	bra	u8897
  5180  003282  2F82               	decfsz	??_ID& (0+255),f,b
  5181  003284  D7FC               	bra	u8897
  5182  003286  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5183  003288  D7FA               	bra	u8897
  5184  00328A  D000               	nop2	
  5185                           
  5186                           ;sort.c: 312: LATCbits.LATC0 = 1;
  5187  00328C  808B               	bsf	3979,0,c	;volatile
  5188                           
  5189                           ;sort.c: 315: if(!f_lastCan){
  5190  00328E  0100               	movlb	0	; () banked
  5191  003290  51F0               	movf	_f_lastCan& (0+255),w,b
  5192  003292  0100               	movlb	0	; () banked
  5193  003294  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5194  003296  A4D8               	btfss	status,2,c
  5195  003298  D032               	goto	l7514
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;sort.c: 316: for(int i=0; i<46; i++){
  5199  00329A  0E00               	movlw	0
  5200  00329C  0100               	movlb	0	; () banked
  5201  00329E  6F87               	movwf	(ID@i_1170+1)& (0+255),b
  5202  0032A0  0E00               	movlw	0
  5203  0032A2  6F86               	movwf	ID@i_1170& (0+255),b
  5204                           
  5205                           ; BSR set to: 0
  5206  0032A4  0100               	movlb	0	; () banked
  5207  0032A6  BF87               	btfsc	(ID@i_1170+1)& (0+255),7,b
  5208  0032A8  D008               	goto	l7506
  5209  0032AA  0100               	movlb	0	; () banked
  5210  0032AC  5187               	movf	(ID@i_1170+1)& (0+255),w,b
  5211  0032AE  E126               	bnz	l803
  5212  0032B0  0E2E               	movlw	46
  5213  0032B2  0100               	movlb	0	; () banked
  5214  0032B4  5D86               	subwf	ID@i_1170& (0+255),w,b
  5215  0032B6  B0D8               	btfsc	status,0,c
  5216  0032B8  D021               	goto	l803
  5217  0032BA                     l7506:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;sort.c: 317: LATBbits.LATB2 = !LATBbits.LATB2;
  5221  0032BA  B48A               	btfsc	3978,2,c	;volatile
  5222  0032BC  D004               	goto	u5990
  5223  0032BE  0100               	movlb	0	; () banked
  5224  0032C0  6B82               	clrf	??_ID& (0+255),b
  5225  0032C2  2B82               	incf	??_ID& (0+255),f,b
  5226  0032C4  D002               	goto	u6008
  5227  0032C6                     u5990:
  5228  0032C6  0100               	movlb	0	; () banked
  5229  0032C8  6B82               	clrf	??_ID& (0+255),b
  5230  0032CA                     u6008:
  5231  0032CA  0100               	movlb	0	; () banked
  5232  0032CC  4782               	rlncf	??_ID& (0+255),f,b
  5233  0032CE  4782               	rlncf	??_ID& (0+255),f,b
  5234  0032D0  508A               	movf	3978,w,c	;volatile
  5235  0032D2  0100               	movlb	0	; () banked
  5236  0032D4  1982               	xorwf	??_ID& (0+255),w,b
  5237  0032D6  0BFB               	andlw	-5
  5238  0032D8  1982               	xorwf	??_ID& (0+255),w,b
  5239  0032DA  6E8A               	movwf	3978,c	;volatile
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;sort.c: 318: delay_ms(45-i);
  5243  0032DC  0100               	movlb	0	; () banked
  5244  0032DE  5186               	movf	ID@i_1170& (0+255),w,b
  5245  0032E0  0800               	sublw	0
  5246  0032E2  0F2D               	addlw	45
  5247  0032E4  EC46  F029         	call	_delay_ms
  5248  0032E8  0100               	movlb	0	; () banked
  5249  0032EA  4B86               	infsnz	ID@i_1170& (0+255),f,b
  5250  0032EC  2B87               	incf	(ID@i_1170+1)& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253  0032EE  0100               	movlb	0	; () banked
  5254  0032F0  BF87               	btfsc	(ID@i_1170+1)& (0+255),7,b
  5255  0032F2  D7E3               	goto	l7506
  5256  0032F4  0100               	movlb	0	; () banked
  5257  0032F6  5187               	movf	(ID@i_1170+1)& (0+255),w,b
  5258  0032F8  E101               	bnz	u6010
  5259  0032FA  D7DA               	goto	L7
  5260  0032FC                     u6010:
  5261  0032FC                     l803:
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;sort.c: 319: }
  5265                           ;sort.c: 320: LATBbits.LATB2 = 1;
  5266  0032FC  848A               	bsf	3978,2,c	;volatile
  5267  0032FE                     l7514:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;sort.c: 321: }
  5271                           ;sort.c: 323: f_can_coming_to_ID = 0;
  5272  0032FE  0E00               	movlw	0
  5273  003300  0101               	movlb	1	; () banked
  5274  003302  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5275  003304  0E00               	movlw	0
  5276  003306  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  5277  003308  0012               	return	
  5278  00330A                     __end_of_ID:
  5279                           	opt stack 0
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _delay_ms *****************
  5298 ;; Defined at:
  5299 ;;		line 579 in file "sort.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  milliseconds    1    wreg     unsigned char 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      void 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;Total ram usage:        2 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    7
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_Loading
  5324 ;;		_ID
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text10
  5329  00528C                     __ptext10:
  5330                           	opt stack 0
  5331  00528C                     _delay_ms:
  5332                           	opt stack 21
  5333                           
  5334                           ; BSR set to: 1
  5335                           ;incstack = 0
  5336                           ;delay_ms@milliseconds stored from wreg
  5337  00528C  0100               	movlb	0	; () banked
  5338  00528E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5339                           
  5340                           ;sort.c: 580: while(milliseconds > 0)
  5341  005290  D00B               	goto	l6900
  5342  005292                     l6896:
  5343                           
  5344                           ;sort.c: 581: {
  5345                           ;sort.c: 582: milliseconds--;
  5346  005292  0100               	movlb	0	; () banked
  5347  005294  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;sort.c: 583: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5351  005296  0E0B               	movlw	11
  5352  005298  0100               	movlb	0	; () banked
  5353  00529A  6F80               	movwf	??_delay_ms& (0+255),b
  5354  00529C  0E47               	movlw	71
  5355  00529E                     u8907:
  5356  00529E  2EE8               	decfsz	wreg,f,c
  5357  0052A0  D7FE               	bra	u8907
  5358  0052A2  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5359  0052A4  D7FC               	bra	u8907
  5360  0052A6  D000               	nop2	
  5361  0052A8                     l6900:
  5362  0052A8  0100               	movlb	0	; () banked
  5363  0052AA  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5364  0052AC  0100               	movlb	0	; () banked
  5365  0052AE  B4D8               	btfsc	status,2,c
  5366  0052B0  0012               	return	
  5367  0052B2  D7EF               	goto	l6896
  5368  0052B4                     __end_of_delay_ms:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           postdec1	equ	0xFE5
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _Distribution *****************
  5388 ;; Defined at:
  5389 ;;		line 326 in file "sort.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;		None
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      void 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;Total ram usage:        2 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    8
  5410 ;; This function calls:
  5411 ;;		_updateServoPosition
  5412 ;; This function is called by:
  5413 ;;		_sort
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text11
  5418  00330A                     __ptext11:
  5419                           	opt stack 0
  5420  00330A                     _Distribution:
  5421                           	opt stack 21
  5422                           
  5423                           ;sort.c: 327: if(f_can_coming_to_distribution){
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;incstack = 0
  5427  00330A  0101               	movlb	1	; () banked
  5428  00330C  5131               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5429  00330E  0101               	movlb	1	; () banked
  5430  003310  1132               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5431  003312  B4D8               	btfsc	status,2,c
  5432  003314  0012               	return	
  5433  003316  D034               	goto	l7530
  5434  003318                     l7520:
  5435                           
  5436                           ;sort.c: 337: updateServoPosition(500, 1);
  5437  003318  0E01               	movlw	1
  5438  00331A  0100               	movlb	0	; () banked
  5439  00331C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5440  00331E  0EF4               	movlw	244
  5441  003320  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5442  003322  0E00               	movlw	0
  5443  003324  0100               	movlb	0	; () banked
  5444  003326  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5445  003328  0E01               	movlw	1
  5446  00332A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5447  00332C  ECFE  F023         	call	_updateServoPosition	;wreg free
  5448                           
  5449                           ;sort.c: 338: break;
  5450  003330  D03E               	goto	l7532
  5451  003332                     l7522:
  5452                           
  5453                           ;sort.c: 340: updateServoPosition(850, 1);
  5454  003332  0E03               	movlw	3
  5455  003334  0100               	movlb	0	; () banked
  5456  003336  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5457  003338  0E52               	movlw	82
  5458  00333A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5459  00333C  0E00               	movlw	0
  5460  00333E  0100               	movlb	0	; () banked
  5461  003340  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5462  003342  0E01               	movlw	1
  5463  003344  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5464  003346  ECFE  F023         	call	_updateServoPosition	;wreg free
  5465                           
  5466                           ;sort.c: 341: break;
  5467  00334A  D031               	goto	l7532
  5468  00334C                     l7524:
  5469                           
  5470                           ;sort.c: 343: updateServoPosition(1670, 1);
  5471  00334C  0E06               	movlw	6
  5472  00334E  0100               	movlb	0	; () banked
  5473  003350  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5474  003352  0E86               	movlw	134
  5475  003354  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5476  003356  0E00               	movlw	0
  5477  003358  0100               	movlb	0	; () banked
  5478  00335A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5479  00335C  0E01               	movlw	1
  5480  00335E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5481  003360  ECFE  F023         	call	_updateServoPosition	;wreg free
  5482                           
  5483                           ;sort.c: 344: break;
  5484  003364  D024               	goto	l7532
  5485  003366                     l7526:
  5486                           
  5487                           ;sort.c: 346: updateServoPosition(2400, 1);
  5488  003366  0E09               	movlw	9
  5489  003368  0100               	movlb	0	; () banked
  5490  00336A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5491  00336C  0E60               	movlw	96
  5492  00336E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5493  003370  0E00               	movlw	0
  5494  003372  0100               	movlb	0	; () banked
  5495  003374  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5496  003376  0E01               	movlw	1
  5497  003378  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5498  00337A  ECFE  F023         	call	_updateServoPosition	;wreg free
  5499                           
  5500                           ;sort.c: 350: }
  5501                           
  5502                           ;sort.c: 349: break;
  5503                           
  5504                           ;sort.c: 348: default:
  5505                           
  5506                           ;sort.c: 347: break;
  5507  00337E  D017               	goto	l7532
  5508  003380                     l7530:
  5509  003380  C0EC  F088         	movff	_cur_can,??_Distribution
  5510  003384  C0ED  F089         	movff	_cur_can+1,??_Distribution+1
  5511                           
  5512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5513                           ; Switch size 1, requested type "space"
  5514                           ; Number of cases is 1, Range of values is 0 to 0
  5515                           ; switch strategies available:
  5516                           ; Name         Instructions Cycles
  5517                           ; simple_byte            4     3 (average)
  5518                           ;	Chosen strategy is simple_byte
  5519  003388  0100               	movlb	0	; () banked
  5520  00338A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5521  00338C  0A00               	xorlw	0	; case 0
  5522  00338E  A4D8               	btfss	status,2,c
  5523  003390  D00E               	goto	l7532
  5524                           
  5525                           ; BSR set to: 0
  5526                           ; Switch size 1, requested type "space"
  5527                           ; Number of cases is 4, Range of values is 0 to 3
  5528                           ; switch strategies available:
  5529                           ; Name         Instructions Cycles
  5530                           ; simple_byte           13     7 (average)
  5531                           ;	Chosen strategy is simple_byte
  5532  003392  0100               	movlb	0	; () banked
  5533  003394  5188               	movf	??_Distribution& (0+255),w,b
  5534  003396  0A00               	xorlw	0	; case 0
  5535  003398  B4D8               	btfsc	status,2,c
  5536  00339A  D7BE               	goto	l7520
  5537  00339C  0A01               	xorlw	1	; case 1
  5538  00339E  B4D8               	btfsc	status,2,c
  5539  0033A0  D7C8               	goto	l7522
  5540  0033A2  0A03               	xorlw	3	; case 2
  5541  0033A4  B4D8               	btfsc	status,2,c
  5542  0033A6  D7D2               	goto	l7524
  5543  0033A8  0A01               	xorlw	1	; case 3
  5544  0033AA  B4D8               	btfsc	status,2,c
  5545  0033AC  D7DC               	goto	l7526
  5546  0033AE                     l7532:
  5547                           
  5548                           ;sort.c: 351: updateServoPosition(1050, 3);
  5549  0033AE  0E04               	movlw	4
  5550  0033B0  0100               	movlb	0	; () banked
  5551  0033B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5552  0033B4  0E1A               	movlw	26
  5553  0033B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5554  0033B8  0E00               	movlw	0
  5555  0033BA  0100               	movlb	0	; () banked
  5556  0033BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5557  0033BE  0E03               	movlw	3
  5558  0033C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5559  0033C2  ECFE  F023         	call	_updateServoPosition	;wreg free
  5560                           
  5561                           ;sort.c: 352: _delay((unsigned long)((750)*(32000000/4000.0)));
  5562  0033C6  0E1F               	movlw	31
  5563  0033C8  0100               	movlb	0	; () banked
  5564  0033CA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5565  0033CC  0E71               	movlw	113
  5566  0033CE  0100               	movlb	0	; () banked
  5567  0033D0  6F88               	movwf	??_Distribution& (0+255),b
  5568  0033D2  0E1E               	movlw	30
  5569  0033D4                     u8917:
  5570  0033D4  2EE8               	decfsz	wreg,f,c
  5571  0033D6  D7FE               	bra	u8917
  5572  0033D8  2F88               	decfsz	??_Distribution& (0+255),f,b
  5573  0033DA  D7FC               	bra	u8917
  5574  0033DC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5575  0033DE  D7FA               	bra	u8917
  5576  0033E0  F000               	nop	
  5577                           
  5578                           ;sort.c: 360: switch(cur_can){
  5579  0033E2  D034               	goto	l7546
  5580  0033E4                     l7536:
  5581                           
  5582                           ;sort.c: 362: updateServoPosition(1260, 3);
  5583  0033E4  0E04               	movlw	4
  5584  0033E6  0100               	movlb	0	; () banked
  5585  0033E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5586  0033EA  0EEC               	movlw	236
  5587  0033EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5588  0033EE  0E00               	movlw	0
  5589  0033F0  0100               	movlb	0	; () banked
  5590  0033F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5591  0033F4  0E03               	movlw	3
  5592  0033F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5593  0033F8  ECFE  F023         	call	_updateServoPosition	;wreg free
  5594                           
  5595                           ;sort.c: 363: break;
  5596  0033FC  D03E               	goto	l7548
  5597  0033FE                     l7538:
  5598                           
  5599                           ;sort.c: 365: updateServoPosition(1260, 3);
  5600  0033FE  0E04               	movlw	4
  5601  003400  0100               	movlb	0	; () banked
  5602  003402  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5603  003404  0EEC               	movlw	236
  5604  003406  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5605  003408  0E00               	movlw	0
  5606  00340A  0100               	movlb	0	; () banked
  5607  00340C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5608  00340E  0E03               	movlw	3
  5609  003410  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5610  003412  ECFE  F023         	call	_updateServoPosition	;wreg free
  5611                           
  5612                           ;sort.c: 366: break;
  5613  003416  D031               	goto	l7548
  5614  003418                     l7540:
  5615                           
  5616                           ;sort.c: 368: updateServoPosition(1390, 3);
  5617  003418  0E05               	movlw	5
  5618  00341A  0100               	movlb	0	; () banked
  5619  00341C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5620  00341E  0E6E               	movlw	110
  5621  003420  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5622  003422  0E00               	movlw	0
  5623  003424  0100               	movlb	0	; () banked
  5624  003426  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5625  003428  0E03               	movlw	3
  5626  00342A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5627  00342C  ECFE  F023         	call	_updateServoPosition	;wreg free
  5628                           
  5629                           ;sort.c: 369: break;
  5630  003430  D024               	goto	l7548
  5631  003432                     l7542:
  5632                           
  5633                           ;sort.c: 371: updateServoPosition(1390, 3);
  5634  003432  0E05               	movlw	5
  5635  003434  0100               	movlb	0	; () banked
  5636  003436  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5637  003438  0E6E               	movlw	110
  5638  00343A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5639  00343C  0E00               	movlw	0
  5640  00343E  0100               	movlb	0	; () banked
  5641  003440  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5642  003442  0E03               	movlw	3
  5643  003444  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5644  003446  ECFE  F023         	call	_updateServoPosition	;wreg free
  5645                           
  5646                           ;sort.c: 375: }
  5647                           
  5648                           ;sort.c: 374: break;
  5649                           
  5650                           ;sort.c: 373: default:
  5651                           
  5652                           ;sort.c: 372: break;
  5653  00344A  D017               	goto	l7548
  5654  00344C                     l7546:
  5655  00344C  C0EC  F088         	movff	_cur_can,??_Distribution
  5656  003450  C0ED  F089         	movff	_cur_can+1,??_Distribution+1
  5657                           
  5658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5659                           ; Switch size 1, requested type "space"
  5660                           ; Number of cases is 1, Range of values is 0 to 0
  5661                           ; switch strategies available:
  5662                           ; Name         Instructions Cycles
  5663                           ; simple_byte            4     3 (average)
  5664                           ;	Chosen strategy is simple_byte
  5665  003454  0100               	movlb	0	; () banked
  5666  003456  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5667  003458  0A00               	xorlw	0	; case 0
  5668  00345A  A4D8               	btfss	status,2,c
  5669  00345C  D00E               	goto	l7548
  5670                           
  5671                           ; BSR set to: 0
  5672                           ; Switch size 1, requested type "space"
  5673                           ; Number of cases is 4, Range of values is 0 to 3
  5674                           ; switch strategies available:
  5675                           ; Name         Instructions Cycles
  5676                           ; simple_byte           13     7 (average)
  5677                           ;	Chosen strategy is simple_byte
  5678  00345E  0100               	movlb	0	; () banked
  5679  003460  5188               	movf	??_Distribution& (0+255),w,b
  5680  003462  0A00               	xorlw	0	; case 0
  5681  003464  B4D8               	btfsc	status,2,c
  5682  003466  D7BE               	goto	l7536
  5683  003468  0A01               	xorlw	1	; case 1
  5684  00346A  B4D8               	btfsc	status,2,c
  5685  00346C  D7C8               	goto	l7538
  5686  00346E  0A03               	xorlw	3	; case 2
  5687  003470  B4D8               	btfsc	status,2,c
  5688  003472  D7D2               	goto	l7540
  5689  003474  0A01               	xorlw	1	; case 3
  5690  003476  B4D8               	btfsc	status,2,c
  5691  003478  D7DC               	goto	l7542
  5692  00347A                     l7548:
  5693                           
  5694                           ;sort.c: 376: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5695  00347A  0E66               	movlw	102
  5696  00347C  0100               	movlb	0	; () banked
  5697  00347E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5698  003480  0E76               	movlw	118
  5699  003482  0100               	movlb	0	; () banked
  5700  003484  6F88               	movwf	??_Distribution& (0+255),b
  5701  003486  0EC1               	movlw	193
  5702  003488                     u8927:
  5703  003488  2EE8               	decfsz	wreg,f,c
  5704  00348A  D7FE               	bra	u8927
  5705  00348C  2F88               	decfsz	??_Distribution& (0+255),f,b
  5706  00348E  D7FC               	bra	u8927
  5707  003490  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5708  003492  D7FA               	bra	u8927
  5709                           
  5710                           ;sort.c: 379: updateServoPosition(1050, 3);
  5711  003494  0E04               	movlw	4
  5712  003496  0100               	movlb	0	; () banked
  5713  003498  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5714  00349A  0E1A               	movlw	26
  5715  00349C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5716  00349E  0E00               	movlw	0
  5717  0034A0  0100               	movlb	0	; () banked
  5718  0034A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5719  0034A4  0E03               	movlw	3
  5720  0034A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5721  0034A8  ECFE  F023         	call	_updateServoPosition	;wreg free
  5722                           
  5723                           ;sort.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
  5724  0034AC  0E1F               	movlw	31
  5725  0034AE  0100               	movlb	0	; () banked
  5726  0034B0  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5727  0034B2  0E71               	movlw	113
  5728  0034B4  0100               	movlb	0	; () banked
  5729  0034B6  6F88               	movwf	??_Distribution& (0+255),b
  5730  0034B8  0E1E               	movlw	30
  5731  0034BA                     u8937:
  5732  0034BA  2EE8               	decfsz	wreg,f,c
  5733  0034BC  D7FE               	bra	u8937
  5734  0034BE  2F88               	decfsz	??_Distribution& (0+255),f,b
  5735  0034C0  D7FC               	bra	u8937
  5736  0034C2  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5737  0034C4  D7FA               	bra	u8937
  5738  0034C6  F000               	nop	
  5739                           
  5740                           ;sort.c: 381: updateServoPosition(1200, 1);
  5741  0034C8  0E04               	movlw	4
  5742  0034CA  0100               	movlb	0	; () banked
  5743  0034CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5744  0034CE  0EB0               	movlw	176
  5745  0034D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5746  0034D2  0E00               	movlw	0
  5747  0034D4  0100               	movlb	0	; () banked
  5748  0034D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5749  0034D8  0E01               	movlw	1
  5750  0034DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5751  0034DC  ECFE  F023         	call	_updateServoPosition	;wreg free
  5752                           
  5753                           ;sort.c: 382: updateServoPosition(1050, 3);
  5754  0034E0  0E04               	movlw	4
  5755  0034E2  0100               	movlb	0	; () banked
  5756  0034E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5757  0034E6  0E1A               	movlw	26
  5758  0034E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5759  0034EA  0E00               	movlw	0
  5760  0034EC  0100               	movlb	0	; () banked
  5761  0034EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5762  0034F0  0E03               	movlw	3
  5763  0034F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5764  0034F4  ECFE  F023         	call	_updateServoPosition	;wreg free
  5765                           
  5766                           ;sort.c: 384: f_can_coming_to_distribution = 0;
  5767  0034F8  0E00               	movlw	0
  5768  0034FA  0101               	movlb	1	; () banked
  5769  0034FC  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5770  0034FE  0E00               	movlw	0
  5771  003500  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5772                           
  5773                           ; BSR set to: 1
  5774                           ;sort.c: 385: f_can_distributed = 1;
  5775  003502  0E00               	movlw	0
  5776  003504  0101               	movlb	1	; () banked
  5777  003506  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  5778  003508  0E01               	movlw	1
  5779  00350A  6F33               	movwf	_f_can_distributed& (0+255),b
  5780                           
  5781                           ; BSR set to: 1
  5782                           ;sort.c: 386: f_most_recent_sort_time = 1;
  5783  00350C  0E00               	movlw	0
  5784  00350E  0101               	movlb	1	; () banked
  5785  003510  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  5786  003512  0E01               	movlw	1
  5787  003514  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;sort.c: 387: if(f_lastCan == 1){
  5791  003516  0100               	movlb	0	; () banked
  5792  003518  05F0               	decf	_f_lastCan& (0+255),w,b
  5793  00351A  0100               	movlb	0	; () banked
  5794  00351C  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5795  00351E  A4D8               	btfss	status,2,c
  5796  003520  0012               	return	
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;sort.c: 388: machine_state = DoneSorting_state;
  5800  003522  0E02               	movlw	2
  5801  003524  0100               	movlb	0	; () banked
  5802  003526  6FFC               	movwf	_machine_state& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805  003528  0012               	return	
  5806  00352A                     __end_of_Distribution:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           postdec1	equ	0xFE5
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function _machineConfig *****************
  5826 ;; Defined at:
  5827 ;;		line 15 in file "MachineConfig.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;		None
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;		None
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  1    wreg      void 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:        0 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    7
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_main
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text12
  5856  004B68                     __ptext12:
  5857                           	opt stack 0
  5858  004B68                     _machineConfig:
  5859                           	opt stack 23
  5860                           
  5861                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5862                           
  5863                           ;incstack = 0
  5864  004B68  0EF0               	movlw	240
  5865  004B6A  6ED3               	movwf	4051,c	;volatile
  5866                           
  5867                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5868  004B6C  8C9B               	bsf	3995,6,c	;volatile
  5869                           
  5870                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5871  004B6E  0E07               	movlw	7
  5872  004B70  6E92               	movwf	3986,c	;volatile
  5873                           
  5874                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5875  004B72  0EF2               	movlw	242
  5876  004B74  6E93               	movwf	3987,c	;volatile
  5877                           
  5878                           ;MachineConfig.c: 27: TRISC = 0x00;
  5879  004B76  0E00               	movlw	0
  5880  004B78  6E94               	movwf	3988,c	;volatile
  5881                           
  5882                           ;MachineConfig.c: 31: TRISD = 0x00;
  5883  004B7A  0E00               	movlw	0
  5884  004B7C  6E95               	movwf	3989,c	;volatile
  5885                           
  5886                           ;MachineConfig.c: 34: TRISE = 0x00;
  5887  004B7E  0E00               	movlw	0
  5888  004B80  6E96               	movwf	3990,c	;volatile
  5889                           
  5890                           ;MachineConfig.c: 37: LATA = 0x00;
  5891  004B82  0E00               	movlw	0
  5892  004B84  6E89               	movwf	3977,c	;volatile
  5893                           
  5894                           ;MachineConfig.c: 38: LATB = 0x00;
  5895  004B86  0E00               	movlw	0
  5896  004B88  6E8A               	movwf	3978,c	;volatile
  5897                           
  5898                           ;MachineConfig.c: 39: LATC = 0x00;
  5899  004B8A  0E00               	movlw	0
  5900  004B8C  6E8B               	movwf	3979,c	;volatile
  5901                           
  5902                           ;MachineConfig.c: 40: LATD = 0x00;
  5903  004B8E  0E00               	movlw	0
  5904  004B90  6E8C               	movwf	3980,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 41: LATE = 0x00;
  5907  004B92  0E00               	movlw	0
  5908  004B94  6E8D               	movwf	3981,c	;volatile
  5909                           
  5910                           ;MachineConfig.c: 43: nRBPU = 0;
  5911  004B96  9EF1               	bcf	intcon2,7,c	;volatile
  5912                           
  5913                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5914  004B98  0E00               	movlw	0
  5915  004B9A  6EC2               	movwf	4034,c	;volatile
  5916                           
  5917                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5918  004B9C  0E0D               	movlw	13
  5919  004B9E  6EC1               	movwf	4033,c	;volatile
  5920                           
  5921                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5922  004BA0  0E00               	movlw	0
  5923  004BA2  6EB5               	movwf	4021,c	;volatile
  5924                           
  5925                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5926  004BA4  96B4               	bcf	4020,3,c	;volatile
  5927                           
  5928                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5929  004BA6  0EB1               	movlw	177
  5930  004BA8  6EC0               	movwf	4032,c	;volatile
  5931                           
  5932                           ;MachineConfig.c: 55: INT1IE = 1;
  5933  004BAA  86F0               	bsf	intcon3,3,c	;volatile
  5934                           
  5935                           ;MachineConfig.c: 57: TMR0IE = 1;
  5936  004BAC  8AF2               	bsf	intcon,5,c	;volatile
  5937                           
  5938                           ;MachineConfig.c: 58: TMR1IE = 1;
  5939  004BAE  809D               	bsf	3997,0,c	;volatile
  5940                           
  5941                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5942  004BB0  0EB0               	movlw	176
  5943  004BB2  6ECD               	movwf	4045,c	;volatile
  5944                           
  5945                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5946  004BB4  0EB0               	movlw	176
  5947  004BB6  6EB1               	movwf	4017,c	;volatile
  5948                           
  5949                           ;MachineConfig.c: 61: TMR2IE = 1;
  5950  004BB8  829D               	bsf	3997,1,c	;volatile
  5951                           
  5952                           ;MachineConfig.c: 62: TMR3IE = 1;
  5953  004BBA  82A0               	bsf	4000,1,c	;volatile
  5954                           
  5955                           ;MachineConfig.c: 63: PEIE = 1;
  5956  004BBC  8CF2               	bsf	intcon,6,c	;volatile
  5957                           
  5958                           ;MachineConfig.c: 64: ADIE = 0;
  5959  004BBE  9C9D               	bcf	3997,6,c	;volatile
  5960                           
  5961                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5962  004BC0  9EF2               	bcf	intcon,7,c	;volatile
  5963  004BC2  0012               	return		;funcret
  5964  004BC4                     __end_of_machineConfig:
  5965                           	opt stack 0
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon2	equ	0xFF1
  5974                           intcon3	equ	0xFF0
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           postdec1	equ	0xFE5
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function _logRun *****************
  5987 ;; Defined at:
  5988 ;;		line 84 in file "EEPROM.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5993 ;;  i               2   55[BANK0 ] int 
  5994 ;;  num             1   49[BANK0 ] unsigned char 
  5995 ;;  addr            2   57[BANK0 ] unsigned short 
  5996 ;;  byte11          1   54[BANK0 ] unsigned char 
  5997 ;;  byte3           1   52[BANK0 ] unsigned char 
  5998 ;;  byte2           1   51[BANK0 ] unsigned char 
  5999 ;;  byte1           1   50[BANK0 ] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      void 
  6002 ;; Registers used:
  6003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;Total ram usage:       10 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:   11
  6016 ;; This function calls:
  6017 ;;		_EEPROM_read
  6018 ;;		_EEPROM_write
  6019 ;; This function is called by:
  6020 ;;		_main
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text13
  6025  003C16                     __ptext13:
  6026                           	opt stack 0
  6027  003C16                     _logRun:
  6028                           	opt stack 19
  6029                           
  6030                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6031                           
  6032                           ;incstack = 0
  6033  003C16  0E00               	movlw	0
  6034  003C18  0100               	movlb	0	; () banked
  6035  003C1A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6036  003C1C  0E00               	movlw	0
  6037  003C1E  6F80               	movwf	EEPROM_read@address& (0+255),b
  6038  003C20  ECF2  F029         	call	_EEPROM_read	;wreg free
  6039  003C24  0100               	movlb	0	; () banked
  6040  003C26  6FFD               	movwf	_sel& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6044  003C28  0100               	movlb	0	; () banked
  6045  003C2A  51FD               	movf	_sel& (0+255),w,b
  6046  003C2C  0D0B               	mullw	11
  6047  003C2E  0E01               	movlw	1
  6048  003C30  24F3               	addwf	prodl,w,c
  6049  003C32  0100               	movlb	0	; () banked
  6050  003C34  6FB9               	movwf	logRun@addr& (0+255),b
  6051  003C36  0E00               	movlw	0
  6052  003C38  20F4               	addwfc	prodh,w,c
  6053  003C3A  0100               	movlb	0	; () banked
  6054  003C3C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;EEPROM.c: 101: if (sel < 3){
  6058  003C3E  0E03               	movlw	3
  6059  003C40  0100               	movlb	0	; () banked
  6060  003C42  61FD               	cpfslt	_sel& (0+255),b
  6061  003C44  D00E               	goto	l9140
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6065  003C46  0100               	movlb	0	; () banked
  6066  003C48  29FD               	incf	_sel& (0+255),w,b
  6067  003C4A  0100               	movlb	0	; () banked
  6068  003C4C  6FB1               	movwf	logRun@num& (0+255),b
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6072  003C4E  0E00               	movlw	0
  6073  003C50  0100               	movlb	0	; () banked
  6074  003C52  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6075  003C54  0E00               	movlw	0
  6076  003C56  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6077  003C58  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6078  003C5C  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6079                           
  6080                           ;EEPROM.c: 104: }
  6081  003C60  D00A               	goto	l9142
  6082  003C62                     l9140:
  6083                           
  6084                           ;EEPROM.c: 105: else{
  6085                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6086  003C62  0E00               	movlw	0
  6087  003C64  0100               	movlb	0	; () banked
  6088  003C66  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6089  003C68  0E00               	movlw	0
  6090  003C6A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6091  003C6C  0E00               	movlw	0
  6092  003C6E  0100               	movlb	0	; () banked
  6093  003C70  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6094  003C72  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6095  003C76                     l9142:
  6096                           
  6097                           ;EEPROM.c: 107: }
  6098                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6099  003C76  0100               	movlb	0	; () banked
  6100  003C78  51FE               	movf	_count_total& (0+255),w,b
  6101  003C7A  0980               	iorlw	128
  6102  003C7C  0100               	movlb	0	; () banked
  6103  003C7E  6FB2               	movwf	logRun@byte1& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6107  003C80  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6108  003C84  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6109  003C88  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6110  003C8C  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6111                           
  6112                           ;EEPROM.c: 112: addr++;
  6113  003C90  0100               	movlb	0	; () banked
  6114  003C92  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6115  003C94  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6119  003C96  0101               	movlb	1	; () banked
  6120  003C98  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6121  003C9A  0BF0               	andlw	240
  6122  003C9C  0101               	movlb	1	; () banked
  6123  003C9E  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6124  003CA0  0100               	movlb	0	; () banked
  6125  003CA2  6FB3               	movwf	logRun@byte2& (0+255),b
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6129  003CA4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6130  003CA8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6131  003CAC  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6132  003CB0  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6133                           
  6134                           ;EEPROM.c: 117: addr++;
  6135  003CB4  0100               	movlb	0	; () banked
  6136  003CB6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6137  003CB8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6141  003CBA  0101               	movlb	1	; () banked
  6142  003CBC  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6143  003CBE  0BF0               	andlw	240
  6144  003CC0  0101               	movlb	1	; () banked
  6145  003CC2  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6146  003CC4  0100               	movlb	0	; () banked
  6147  003CC6  6FB4               	movwf	logRun@byte3& (0+255),b
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6151  003CC8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6152  003CCC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6153  003CD0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6154  003CD4  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6155                           
  6156                           ;EEPROM.c: 120: addr++;
  6157  003CD8  0100               	movlb	0	; () banked
  6158  003CDA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6159  003CDC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6163  003CDE  0E00               	movlw	0
  6164  003CE0  0100               	movlb	0	; () banked
  6165  003CE2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6166  003CE4  0E00               	movlw	0
  6167  003CE6  6FB7               	movwf	logRun@i& (0+255),b
  6168                           
  6169                           ; BSR set to: 0
  6170  003CE8  0100               	movlb	0	; () banked
  6171  003CEA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6172  003CEC  D008               	goto	l9166
  6173  003CEE  0100               	movlb	0	; () banked
  6174  003CF0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6175  003CF2  E128               	bnz	l1038
  6176  003CF4  0E07               	movlw	7
  6177  003CF6  0100               	movlb	0	; () banked
  6178  003CF8  5DB7               	subwf	logRun@i& (0+255),w,b
  6179  003CFA  B0D8               	btfsc	status,0,c
  6180  003CFC  D023               	goto	l1038
  6181  003CFE                     l9166:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6185  003CFE  90D8               	bcf	status,0,c
  6186  003D00  0100               	movlb	0	; () banked
  6187  003D02  35B7               	rlcf	logRun@i& (0+255),w,b
  6188  003D04  6ED9               	movwf	fsr2l,c
  6189  003D06  0100               	movlb	0	; () banked
  6190  003D08  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6191  003D0A  6EDA               	movwf	fsr2h,c
  6192  003D0C  0E0E               	movlw	low _startTime
  6193  003D0E  26D9               	addwf	fsr2l,f,c
  6194  003D10  0E01               	movlw	high _startTime
  6195  003D12  22DA               	addwfc	fsr2h,f,c
  6196  003D14  50DF               	movf	indf2,w,c
  6197  003D16  0100               	movlb	0	; () banked
  6198  003D18  6FB5               	movwf	logRun@byte_i& (0+255),b
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6202  003D1A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6203  003D1E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6204  003D22  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6205  003D26  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6206                           
  6207                           ;EEPROM.c: 126: addr++;
  6208  003D2A  0100               	movlb	0	; () banked
  6209  003D2C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6210  003D2E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6211                           
  6212                           ; BSR set to: 0
  6213  003D30  0100               	movlb	0	; () banked
  6214  003D32  4BB7               	infsnz	logRun@i& (0+255),f,b
  6215  003D34  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6216                           
  6217                           ; BSR set to: 0
  6218  003D36  0100               	movlb	0	; () banked
  6219  003D38  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6220  003D3A  D7E1               	goto	l9166
  6221  003D3C  0100               	movlb	0	; () banked
  6222  003D3E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6223  003D40  E101               	bnz	u8180
  6224  003D42  D7D8               	goto	L8
  6225  003D44                     u8180:
  6226  003D44                     l1038:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;EEPROM.c: 127: }
  6230                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6231  003D44  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6235  003D48  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6236  003D4C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6237  003D50  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6238  003D54  ECC2  F01F         	call	_EEPROM_write	;wreg free
  6239  003D58  0012               	return		;funcret
  6240  003D5A                     __end_of_logRun:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           intcon2	equ	0xFF1
  6250                           intcon3	equ	0xFF0
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           postdec1	equ	0xFE5
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _EEPROM_write *****************
  6263 ;; Defined at:
  6264 ;;		line 32 in file "EEPROM.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  address         2   43[BANK0 ] unsigned short 
  6267 ;;  data            1   45[BANK0 ] unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  i               1   48[BANK0 ] unsigned char 
  6270 ;;  i               1   47[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:        6 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:   10
  6287 ;; This function calls:
  6288 ;;		_EEPROM_read
  6289 ;;		_lcdInst
  6290 ;;		_printf
  6291 ;; This function is called by:
  6292 ;;		_Loading
  6293 ;;		_logRun
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text14
  6298  003F84                     __ptext14:
  6299                           	opt stack 0
  6300  003F84                     _EEPROM_write:
  6301                           	opt stack 18
  6302                           
  6303                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6304                           
  6305                           ;incstack = 0
  6306  003F84  84A6               	bsf	4006,2,c	;volatile
  6307                           
  6308                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6309  003F86  0100               	movlb	0	; () banked
  6310  003F88  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6311  003F8A  6EAA               	movwf	4010,c	;volatile
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6315  003F8C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;EEPROM.c: 39: EEDATA = data;
  6319  003F90  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6323  003F94  9EA6               	bcf	4006,7,c	;volatile
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6327  003F96  9CA6               	bcf	4006,6,c	;volatile
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6331  003F98  9EF2               	bcf	intcon,7,c	;volatile
  6332                           
  6333                           ;EEPROM.c: 45: EECON2 = 0x55;
  6334  003F9A  0E55               	movlw	85
  6335  003F9C  6EA7               	movwf	4007,c	;volatile
  6336                           
  6337                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6338  003F9E  0EAA               	movlw	170
  6339  003FA0  6EA7               	movwf	4007,c	;volatile
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6343  003FA2  82A6               	bsf	4006,1,c	;volatile
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6347  003FA4  8EF2               	bsf	intcon,7,c	;volatile
  6348  003FA6                     l1016:
  6349  003FA6  A8A1               	btfss	4001,4,c	;volatile
  6350  003FA8  D7FE               	goto	l1016
  6351                           
  6352                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6353  003FAA  98A1               	bcf	4001,4,c	;volatile
  6354                           
  6355                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6356  003FAC  94A6               	bcf	4006,2,c	;volatile
  6357                           
  6358                           ;EEPROM.c: 57: if(debug){
  6359  003FAE  0101               	movlb	1	; () banked
  6360  003FB0  512B               	movf	_debug& (0+255),w,b
  6361  003FB2  0101               	movlb	1	; () banked
  6362  003FB4  112C               	iorwf	(_debug+1)& (0+255),w,b
  6363  003FB6  B4D8               	btfsc	status,2,c
  6364  003FB8  0012               	return	
  6365                           
  6366                           ; BSR set to: 1
  6367                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6368  003FBA  0E01               	movlw	1
  6369  003FBC  EC24  F02A         	call	_lcdInst
  6370  003FC0  0E68               	movlw	104
  6371  003FC2  0100               	movlb	0	; () banked
  6372  003FC4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6373  003FC6  0EE4               	movlw	228
  6374  003FC8                     u8947:
  6375  003FC8  2EE8               	decfsz	wreg,f,c
  6376  003FCA  D7FE               	bra	u8947
  6377  003FCC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6378  003FCE  D7FC               	bra	u8947
  6379  003FD0  F000               	nop	
  6380                           
  6381                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6382  003FD2  0E80               	movlw	128
  6383  003FD4  EC24  F02A         	call	_lcdInst
  6384                           
  6385                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6386  003FD8  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6387  003FDC  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6388  003FE0  ECF2  F029         	call	_EEPROM_read	;wreg free
  6389  003FE4  0100               	movlb	0	; () banked
  6390  003FE6  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6391  003FE8  A4D8               	btfss	status,2,c
  6392  003FEA  D024               	goto	l6882
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6396  003FEC  0E22               	movlw	low STR_66
  6397  003FEE  0100               	movlb	0	; () banked
  6398  003FF0  6F8E               	movwf	printf@f& (0+255),b
  6399  003FF2  0EFB               	movlw	high STR_66
  6400  003FF4  0100               	movlb	0	; () banked
  6401  003FF6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6402  003FF8  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6403  003FFC  0100               	movlb	0	; () banked
  6404  003FFE  6B91               	clrf	(?_printf+3)& (0+255),b
  6405  004000  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6406  004004  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6407  004008  EC00  F00B         	call	_printf	;wreg free
  6408                           
  6409                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6410  00400C  0E00               	movlw	0
  6411  00400E  0100               	movlb	0	; () banked
  6412  004010  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6413  004012                     l6874:
  6414                           
  6415                           ; BSR set to: 0
  6416  004012  0E63               	movlw	99
  6417  004014  0100               	movlb	0	; () banked
  6418  004016  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6419  004018  D001               	goto	l6878
  6420  00401A  0012               	return	
  6421  00401C                     l6878:
  6422                           
  6423                           ; BSR set to: 0
  6424  00401C  0E68               	movlw	104
  6425  00401E  0100               	movlb	0	; () banked
  6426  004020  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6427  004022  0EE4               	movlw	228
  6428  004024                     u8957:
  6429  004024  2EE8               	decfsz	wreg,f,c
  6430  004026  D7FE               	bra	u8957
  6431  004028  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6432  00402A  D7FC               	bra	u8957
  6433  00402C  F000               	nop	
  6434  00402E  0100               	movlb	0	; () banked
  6435  004030  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6436  004032  D7EF               	goto	l6874
  6437  004034                     l6882:
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6441  004034  0EBD               	movlw	low STR_67
  6442  004036  0100               	movlb	0	; () banked
  6443  004038  6F8E               	movwf	printf@f& (0+255),b
  6444  00403A  0EFF               	movlw	high STR_67
  6445  00403C  0100               	movlb	0	; () banked
  6446  00403E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6447  004040  EC00  F00B         	call	_printf	;wreg free
  6448  004044  0E00               	movlw	0
  6449  004046  0100               	movlb	0	; () banked
  6450  004048  6FB0               	movwf	EEPROM_write@i_1394& (0+255),b
  6451  00404A                     l6886:
  6452                           
  6453                           ; BSR set to: 0
  6454  00404A  0E63               	movlw	99
  6455  00404C  0100               	movlb	0	; () banked
  6456  00404E  65B0               	cpfsgt	EEPROM_write@i_1394& (0+255),b
  6457  004050  D001               	goto	l6890
  6458  004052  0012               	return	
  6459  004054                     l6890:
  6460                           
  6461                           ; BSR set to: 0
  6462  004054  0E68               	movlw	104
  6463  004056  0100               	movlb	0	; () banked
  6464  004058  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6465  00405A  0EE4               	movlw	228
  6466  00405C                     u8967:
  6467  00405C  2EE8               	decfsz	wreg,f,c
  6468  00405E  D7FE               	bra	u8967
  6469  004060  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6470  004062  D7FC               	bra	u8967
  6471  004064  F000               	nop	
  6472  004066  0100               	movlb	0	; () banked
  6473  004068  2BB0               	incf	EEPROM_write@i_1394& (0+255),f,b
  6474  00406A  D7EF               	goto	l6886
  6475  00406C                     __end_of_EEPROM_write:
  6476                           	opt stack 0
  6477                           tblptru	equ	0xFF8
  6478                           tblptrh	equ	0xFF7
  6479                           tblptrl	equ	0xFF6
  6480                           tablat	equ	0xFF5
  6481                           prodh	equ	0xFF4
  6482                           prodl	equ	0xFF3
  6483                           intcon	equ	0xFF2
  6484                           intcon2	equ	0xFF1
  6485                           intcon3	equ	0xFF0
  6486                           postinc0	equ	0xFEE
  6487                           wreg	equ	0xFE8
  6488                           postdec1	equ	0xFE5
  6489                           fsr1l	equ	0xFE1
  6490                           indf2	equ	0xFDF
  6491                           postinc2	equ	0xFDE
  6492                           postdec2	equ	0xFDD
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _EEPROM_read *****************
  6498 ;; Defined at:
  6499 ;;		line 68 in file "EEPROM.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  address         2    0[BANK0 ] unsigned short 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;		None
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  1    wreg      unsigned char 
  6506 ;; Registers used:
  6507 ;;		wreg, status,2
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;Total ram usage:        2 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    7
  6520 ;; This function calls:
  6521 ;;		Nothing
  6522 ;; This function is called by:
  6523 ;;		_Loading
  6524 ;;		_EEPROM_write
  6525 ;;		_logRun
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text15
  6530  0053E4                     __ptext15:
  6531                           	opt stack 0
  6532  0053E4                     _EEPROM_read:
  6533                           	opt stack 20
  6534                           
  6535                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6536                           
  6537                           ;incstack = 0
  6538  0053E4  0100               	movlb	0	; () banked
  6539  0053E6  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6540  0053E8  6EAA               	movwf	4010,c	;volatile
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6544  0053EA  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6548  0053EE  9EA6               	bcf	4006,7,c	;volatile
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6552  0053F0  9CA6               	bcf	4006,6,c	;volatile
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6556  0053F2  80A6               	bsf	4006,0,c	;volatile
  6557  0053F4                     l1029:
  6558  0053F4  B0A6               	btfsc	4006,0,c	;volatile
  6559  0053F6  D7FE               	goto	l1029
  6560                           
  6561                           ;EEPROM.c: 81: return EEDATA;
  6562  0053F8  50A8               	movf	4008,w,c	;volatile
  6563  0053FA  0012               	return	
  6564  0053FC                     __end_of_EEPROM_read:
  6565                           	opt stack 0
  6566                           tblptru	equ	0xFF8
  6567                           tblptrh	equ	0xFF7
  6568                           tblptrl	equ	0xFF6
  6569                           tablat	equ	0xFF5
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           intcon3	equ	0xFF0
  6575                           postinc0	equ	0xFEE
  6576                           wreg	equ	0xFE8
  6577                           postdec1	equ	0xFE5
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function _initUI *****************
  6587 ;; Defined at:
  6588 ;;		line 62 in file "UI.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;Total ram usage:        0 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:   12
  6609 ;; This function calls:
  6610 ;;		_change_state_to_menu_start
  6611 ;;		_loadRTC
  6612 ;; This function is called by:
  6613 ;;		_main
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text16
  6618  005180                     __ptext16:
  6619                           	opt stack 0
  6620  005180                     _initUI:
  6621                           	opt stack 18
  6622                           
  6623                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6624                           
  6625                           ;incstack = 0
  6626  005180  8EF2               	bsf	intcon,7,c	;volatile
  6627                           
  6628                           ;UI.c: 64: machine_state = UI_state;
  6629  005182  0E00               	movlw	0
  6630  005184  0100               	movlb	0	; () banked
  6631  005186  6FFC               	movwf	_machine_state& (0+255),b
  6632                           
  6633                           ;UI.c: 65: logstate = 0;
  6634  005188  0E00               	movlw	0
  6635  00518A  0100               	movlb	0	; () banked
  6636  00518C  6FF9               	movwf	(_logstate+1)& (0+255),b
  6637  00518E  0E00               	movlw	0
  6638  005190  6FF8               	movwf	_logstate& (0+255),b
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;UI.c: 67: if(RTCflag){
  6642  005192  0100               	movlb	0	; () banked
  6643  005194  51EA               	movf	_RTCflag& (0+255),w,b
  6644  005196  0100               	movlb	0	; () banked
  6645  005198  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6646  00519A  A4D8               	btfss	status,2,c
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;UI.c: 68: loadRTC();
  6650  00519C  ECB0  F022         	call	_loadRTC	;wreg free
  6651                           
  6652                           ;UI.c: 69: }
  6653                           ;UI.c: 71: change_state_to_menu_start();
  6654  0051A0  EC05  F029         	call	_change_state_to_menu_start	;wreg free
  6655                           
  6656                           ;UI.c: 72: firstboot = 1;
  6657  0051A4  0E00               	movlw	0
  6658  0051A6  6E64               	movwf	_firstboot+1,c
  6659  0051A8  0E01               	movlw	1
  6660  0051AA  6E63               	movwf	_firstboot,c
  6661  0051AC  0012               	return		;funcret
  6662  0051AE                     __end_of_initUI:
  6663                           	opt stack 0
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           intcon	equ	0xFF2
  6671                           intcon2	equ	0xFF1
  6672                           intcon3	equ	0xFF0
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           postdec1	equ	0xFE5
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _loadRTC *****************
  6685 ;; Defined at:
  6686 ;;		line 28 in file "RTC.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  i               2   22[BANK0 ] int 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;Total ram usage:        3 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    9
  6707 ;; This function calls:
  6708 ;;		_I2C_Master_Init
  6709 ;;		_I2C_Master_Start
  6710 ;;		_I2C_Master_Stop
  6711 ;;		_I2C_Master_Write
  6712 ;; This function is called by:
  6713 ;;		_initUI
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text17
  6718  004560                     __ptext17:
  6719                           	opt stack 0
  6720  004560                     _loadRTC:
  6721                           	opt stack 20
  6722                           
  6723                           ;RTC.c: 30: I2C_Master_Init(10000);
  6724                           
  6725                           ;incstack = 0
  6726  004560  0E10               	movlw	16
  6727  004562  0100               	movlb	0	; () banked
  6728  004564  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6729  004566  0E27               	movlw	39
  6730  004568  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6731  00456A  0E00               	movlw	0
  6732  00456C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6733  00456E  0E00               	movlw	0
  6734  004570  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6735  004572  EC84  F025         	call	_I2C_Master_Init	;wreg free
  6736                           
  6737                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6738  004576  9EF2               	bcf	intcon,7,c	;volatile
  6739                           
  6740                           ;RTC.c: 34: I2C_Master_Start();
  6741  004578  EC4A  F02A         	call	_I2C_Master_Start	;wreg free
  6742                           
  6743                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6744  00457C  0E00               	movlw	0
  6745  00457E  0100               	movlb	0	; () banked
  6746  004580  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6747  004582  0ED0               	movlw	208
  6748  004584  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6749  004586  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  6750                           
  6751                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6752  00458A  0E00               	movlw	0
  6753  00458C  0100               	movlb	0	; () banked
  6754  00458E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6755  004590  0E00               	movlw	0
  6756  004592  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6757  004594  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  6758                           
  6759                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6760  004598  0E00               	movlw	0
  6761  00459A  0100               	movlb	0	; () banked
  6762  00459C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6763  00459E  0E00               	movlw	0
  6764  0045A0  6F96               	movwf	loadRTC@i& (0+255),b
  6765  0045A2                     l7028:
  6766                           
  6767                           ; BSR set to: 0
  6768  0045A2  0100               	movlb	0	; () banked
  6769  0045A4  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6770  0045A6  D008               	goto	l7032
  6771  0045A8  0100               	movlb	0	; () banked
  6772  0045AA  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6773  0045AC  E11B               	bnz	l7038
  6774  0045AE  0E07               	movlw	7
  6775  0045B0  0100               	movlb	0	; () banked
  6776  0045B2  5D96               	subwf	loadRTC@i& (0+255),w,b
  6777  0045B4  B0D8               	btfsc	status,0,c
  6778  0045B6  D016               	goto	l7038
  6779  0045B8                     l7032:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6783  0045B8  0E1C               	movlw	low _time
  6784  0045BA  0100               	movlb	0	; () banked
  6785  0045BC  2596               	addwf	loadRTC@i& (0+255),w,b
  6786  0045BE  6ED9               	movwf	fsr2l,c
  6787  0045C0  0E01               	movlw	high _time
  6788  0045C2  0100               	movlb	0	; () banked
  6789  0045C4  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6790  0045C6  6EDA               	movwf	fsr2h,c
  6791  0045C8  50DF               	movf	indf2,w,c
  6792  0045CA  0100               	movlb	0	; () banked
  6793  0045CC  6F95               	movwf	??_loadRTC& (0+255),b
  6794  0045CE  0100               	movlb	0	; () banked
  6795  0045D0  5195               	movf	??_loadRTC& (0+255),w,b
  6796  0045D2  0100               	movlb	0	; () banked
  6797  0045D4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6798  0045D6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6799  0045D8  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  6800  0045DC  0100               	movlb	0	; () banked
  6801  0045DE  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6802  0045E0  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6803  0045E2  D7DF               	goto	l7028
  6804  0045E4                     l7038:
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;RTC.c: 39: }
  6808                           ;RTC.c: 40: I2C_Master_Stop();
  6809  0045E4  EC46  F02A         	call	_I2C_Master_Stop	;wreg free
  6810                           
  6811                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6812  0045E8  8EF2               	bsf	intcon,7,c	;volatile
  6813  0045EA  0012               	return		;funcret
  6814  0045EC                     __end_of_loadRTC:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           intcon2	equ	0xFF1
  6824                           intcon3	equ	0xFF0
  6825                           postinc0	equ	0xFEE
  6826                           wreg	equ	0xFE8
  6827                           postdec1	equ	0xFE5
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _I2C_Master_Init *****************
  6837 ;; Defined at:
  6838 ;;		line 15 in file "I2C.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  c               4   13[BANK0 ] const unsigned long 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;		None
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6852 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;Total ram usage:        8 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    8
  6859 ;; This function calls:
  6860 ;;		___lldiv
  6861 ;; This function is called by:
  6862 ;;		_main
  6863 ;;		_loadRTC
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text18
  6868  004B08                     __ptext18:
  6869                           	opt stack 0
  6870  004B08                     _I2C_Master_Init:
  6871                           	opt stack 20
  6872                           
  6873                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6874                           
  6875                           ;incstack = 0
  6876  004B08  0E00               	movlw	0
  6877  004B0A  6EC7               	movwf	4039,c	;volatile
  6878                           
  6879                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6880  004B0C  0E28               	movlw	40
  6881  004B0E  6EC6               	movwf	4038,c	;volatile
  6882                           
  6883                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6884  004B10  0E00               	movlw	0
  6885  004B12  6EC5               	movwf	4037,c	;volatile
  6886                           
  6887                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6888  004B14  0E00               	movlw	0
  6889  004B16  0100               	movlb	0	; () banked
  6890  004B18  6F80               	movwf	___lldiv@dividend& (0+255),b
  6891  004B1A  0E48               	movlw	72
  6892  004B1C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6893  004B1E  0EE8               	movlw	232
  6894  004B20  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6895  004B22  0E01               	movlw	1
  6896  004B24  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6897  004B26  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6898  004B2A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6899  004B2E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6900  004B32  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6901  004B36  0E02               	movlw	2
  6902  004B38                     u5215:
  6903  004B38  90D8               	bcf	status,0,c
  6904  004B3A  0100               	movlb	0	; () banked
  6905  004B3C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6906  004B3E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6907  004B40  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6908  004B42  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6909  004B44  2EE8               	decfsz	wreg,f,c
  6910  004B46  D7F8               	goto	u5215
  6911  004B48  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6912  004B4C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6913  004B50  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6914  004B54  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6915  004B58  EC60  F021         	call	___lldiv	;wreg free
  6916  004B5C  0100               	movlb	0	; () banked
  6917  004B5E  0580               	decf	?___lldiv& (0+255),w,b
  6918  004B60  6EC8               	movwf	4040,c	;volatile
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;I2C.c: 22: TRISC3 = 1;
  6922  004B62  8694               	bsf	3988,3,c	;volatile
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;I2C.c: 23: TRISC4 = 1;
  6926  004B64  8894               	bsf	3988,4,c	;volatile
  6927                           
  6928                           ; BSR set to: 0
  6929  004B66  0012               	return		;funcret
  6930  004B68                     __end_of_I2C_Master_Init:
  6931                           	opt stack 0
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           intcon	equ	0xFF2
  6939                           intcon2	equ	0xFF1
  6940                           intcon3	equ	0xFF0
  6941                           postinc0	equ	0xFEE
  6942                           wreg	equ	0xFE8
  6943                           postdec1	equ	0xFE5
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function ___lldiv *****************
  6953 ;; Defined at:
  6954 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;  dividend        4    0[BANK0 ] unsigned long 
  6957 ;;  divisor         4    4[BANK0 ] unsigned long 
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  quotient        4    8[BANK0 ] unsigned long 
  6960 ;;  counter         1   12[BANK0 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  4    0[BANK0 ] unsigned long 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6970 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;Total ram usage:       13 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    7
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_I2C_Master_Init
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text19
  6985  0042C0                     __ptext19:
  6986                           	opt stack 0
  6987  0042C0                     ___lldiv:
  6988                           	opt stack 20
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;incstack = 0
  6992  0042C0  0E00               	movlw	0
  6993  0042C2  0100               	movlb	0	; () banked
  6994  0042C4  6F88               	movwf	___lldiv@quotient& (0+255),b
  6995  0042C6  0E00               	movlw	0
  6996  0042C8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6997  0042CA  0E00               	movlw	0
  6998  0042CC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6999  0042CE  0E00               	movlw	0
  7000  0042D0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7001                           
  7002                           ; BSR set to: 0
  7003  0042D2  0100               	movlb	0	; () banked
  7004  0042D4  5184               	movf	___lldiv@divisor& (0+255),w,b
  7005  0042D6  0100               	movlb	0	; () banked
  7006  0042D8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7007  0042DA  0100               	movlb	0	; () banked
  7008  0042DC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7009  0042DE  0100               	movlb	0	; () banked
  7010  0042E0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7011  0042E2  B4D8               	btfsc	status,2,c
  7012  0042E4  D042               	goto	l1790
  7013                           
  7014                           ; BSR set to: 0
  7015  0042E6  0E01               	movlw	1
  7016  0042E8  0100               	movlb	0	; () banked
  7017  0042EA  6F8C               	movwf	___lldiv@counter& (0+255),b
  7018  0042EC  D008               	goto	l6450
  7019  0042EE                     l6448:
  7020                           
  7021                           ; BSR set to: 0
  7022  0042EE  0100               	movlb	0	; () banked
  7023  0042F0  90D8               	bcf	status,0,c
  7024  0042F2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7025  0042F4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7026  0042F6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7027  0042F8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7028  0042FA  0100               	movlb	0	; () banked
  7029  0042FC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7030  0042FE                     l6450:
  7031                           
  7032                           ; BSR set to: 0
  7033  0042FE  0100               	movlb	0	; () banked
  7034  004300  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7035  004302  D7F5               	goto	l6448
  7036  004304                     l6452:
  7037                           
  7038                           ; BSR set to: 0
  7039  004304  0100               	movlb	0	; () banked
  7040  004306  90D8               	bcf	status,0,c
  7041  004308  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7042  00430A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7043  00430C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7044  00430E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7045                           
  7046                           ; BSR set to: 0
  7047  004310  0100               	movlb	0	; () banked
  7048  004312  5184               	movf	___lldiv@divisor& (0+255),w,b
  7049  004314  0100               	movlb	0	; () banked
  7050  004316  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7051  004318  0100               	movlb	0	; () banked
  7052  00431A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7053  00431C  0100               	movlb	0	; () banked
  7054  00431E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7055  004320  0100               	movlb	0	; () banked
  7056  004322  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7057  004324  0100               	movlb	0	; () banked
  7058  004326  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7059  004328  0100               	movlb	0	; () banked
  7060  00432A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7061  00432C  0100               	movlb	0	; () banked
  7062  00432E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7063  004330  A0D8               	btfss	status,0,c
  7064  004332  D012               	goto	l6460
  7065                           
  7066                           ; BSR set to: 0
  7067  004334  0100               	movlb	0	; () banked
  7068  004336  5184               	movf	___lldiv@divisor& (0+255),w,b
  7069  004338  0100               	movlb	0	; () banked
  7070  00433A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7071  00433C  0100               	movlb	0	; () banked
  7072  00433E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7073  004340  0100               	movlb	0	; () banked
  7074  004342  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7075  004344  0100               	movlb	0	; () banked
  7076  004346  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7077  004348  0100               	movlb	0	; () banked
  7078  00434A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7079  00434C  0100               	movlb	0	; () banked
  7080  00434E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7081  004350  0100               	movlb	0	; () banked
  7082  004352  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7083                           
  7084                           ; BSR set to: 0
  7085  004354  0100               	movlb	0	; () banked
  7086  004356  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7087  004358                     l6460:
  7088                           
  7089                           ; BSR set to: 0
  7090  004358  0100               	movlb	0	; () banked
  7091  00435A  90D8               	bcf	status,0,c
  7092  00435C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7093  00435E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7094  004360  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7095  004362  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098  004364  0100               	movlb	0	; () banked
  7099  004366  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7100  004368  D7CD               	goto	l6452
  7101  00436A                     l1790:
  7102                           
  7103                           ; BSR set to: 0
  7104  00436A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7105  00436E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7106  004372  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7107  004376  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7108                           
  7109                           ; BSR set to: 0
  7110  00437A  0012               	return		;funcret
  7111  00437C                     __end_of___lldiv:
  7112                           	opt stack 0
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           intcon2	equ	0xFF1
  7121                           intcon3	equ	0xFF0
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _change_state_to_menu_start *****************
  7134 ;; Defined at:
  7135 ;;		line 474 in file "UI.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;Total ram usage:        0 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:   11
  7156 ;; This function calls:
  7157 ;;		_lcdInst
  7158 ;;		_printRTC
  7159 ;;		_printf
  7160 ;; This function is called by:
  7161 ;;		_initUI
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text20
  7166  00520A                     __ptext20:
  7167                           	opt stack 0
  7168  00520A                     _change_state_to_menu_start:
  7169                           	opt stack 18
  7170                           
  7171                           ;UI.c: 475: cur_state = 0;
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;incstack = 0
  7175  00520A  0E00               	movlw	0
  7176  00520C  0100               	movlb	0	; () banked
  7177  00520E  6FEF               	movwf	(_cur_state+1)& (0+255),b
  7178  005210  0E00               	movlw	0
  7179  005212  6FEE               	movwf	_cur_state& (0+255),b
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;UI.c: 477: lcdInst(0b10000000);;
  7183  005214  0E80               	movlw	128
  7184  005216  EC24  F02A         	call	_lcdInst
  7185                           
  7186                           ;UI.c: 478: printRTC();
  7187  00521A  EC14  F012         	call	_printRTC	;wreg free
  7188                           
  7189                           ;UI.c: 479: lcdInst(0b11000000);;
  7190  00521E  0EC0               	movlw	192
  7191  005220  EC24  F02A         	call	_lcdInst
  7192                           
  7193                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7194  005224  0EF7               	movlw	low STR_30
  7195  005226  0100               	movlb	0	; () banked
  7196  005228  6F8E               	movwf	printf@f& (0+255),b
  7197  00522A  0EFD               	movlw	high STR_30
  7198  00522C  0100               	movlb	0	; () banked
  7199  00522E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7200  005230  EC00  F00B         	call	_printf	;wreg free
  7201  005234  0012               	return		;funcret
  7202  005236                     __end_of_change_state_to_menu_start:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           intcon2	equ	0xFF1
  7212                           intcon3	equ	0xFF0
  7213                           postinc0	equ	0xFEE
  7214                           wreg	equ	0xFE8
  7215                           postdec1	equ	0xFE5
  7216                           fsr1l	equ	0xFE1
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           fsr2h	equ	0xFDA
  7221                           fsr2l	equ	0xFD9
  7222                           status	equ	0xFD8
  7223                           
  7224 ;; *************** function _initTime *****************
  7225 ;; Defined at:
  7226 ;;		line 17 in file "RTC.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  s               1    wreg     unsigned char 
  7229 ;;  m               1    0[BANK0 ] unsigned char 
  7230 ;;  h               1    1[BANK0 ] unsigned char 
  7231 ;;  w               1    2[BANK0 ] unsigned char 
  7232 ;;  DD              1    3[BANK0 ] unsigned char 
  7233 ;;  MM              1    4[BANK0 ] unsigned char 
  7234 ;;  YY              1    5[BANK0 ] unsigned char 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  s               1    6[BANK0 ] unsigned char 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7246 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;Total ram usage:        7 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    7
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_main
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text21
  7261  00536E                     __ptext21:
  7262                           	opt stack 0
  7263  00536E                     _initTime:
  7264                           	opt stack 23
  7265                           
  7266                           ;incstack = 0
  7267                           ;initTime@s stored from wreg
  7268  00536E  0100               	movlb	0	; () banked
  7269  005370  6F86               	movwf	initTime@s& (0+255),b
  7270                           
  7271                           ;RTC.c: 19: time[0] = s;
  7272  005372  C086  F11C         	movff	initTime@s,_time
  7273                           
  7274                           ;RTC.c: 20: time[1] = m;
  7275  005376  C080  F11D         	movff	initTime@m,_time+1
  7276                           
  7277                           ;RTC.c: 21: time[2] = h;
  7278  00537A  C081  F11E         	movff	initTime@h,_time+2
  7279                           
  7280                           ;RTC.c: 22: time[3] = w;
  7281  00537E  C082  F11F         	movff	initTime@w,_time+3
  7282                           
  7283                           ;RTC.c: 23: time[4] = DD;
  7284  005382  C083  F120         	movff	initTime@DD,_time+4
  7285                           
  7286                           ;RTC.c: 24: time[5] = MM;
  7287  005386  C084  F121         	movff	initTime@MM,_time+5
  7288                           
  7289                           ;RTC.c: 25: time[6] = YY;
  7290  00538A  C085  F122         	movff	initTime@YY,_time+6
  7291  00538E  0012               	return		;funcret
  7292  005390                     __end_of_initTime:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           intcon	equ	0xFF2
  7301                           intcon2	equ	0xFF1
  7302                           intcon3	equ	0xFF0
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           postdec1	equ	0xFE5
  7306                           fsr1l	equ	0xFE1
  7307                           indf2	equ	0xFDF
  7308                           postinc2	equ	0xFDE
  7309                           postdec2	equ	0xFDD
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8
  7313                           
  7314 ;; *************** function _initLCD *****************
  7315 ;; Defined at:
  7316 ;;		line 48 in file "lcd.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;Total ram usage:        1 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    9
  7337 ;; This function calls:
  7338 ;;		_lcdInst
  7339 ;; This function is called by:
  7340 ;;		_main
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text22
  7345  004E08                     __ptext22:
  7346                           	opt stack 0
  7347  004E08                     _initLCD:
  7348                           	opt stack 21
  7349                           
  7350                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7351                           
  7352                           ;incstack = 0
  7353  004E08  0E9C               	movlw	156
  7354  004E0A  0100               	movlb	0	; () banked
  7355  004E0C  6F83               	movwf	??_initLCD& (0+255),b
  7356  004E0E  0ED7               	movlw	215
  7357  004E10                     u8977:
  7358  004E10  2EE8               	decfsz	wreg,f,c
  7359  004E12  D7FE               	bra	u8977
  7360  004E14  2F83               	decfsz	??_initLCD& (0+255),f,b
  7361  004E16  D7FC               	bra	u8977
  7362                           
  7363                           ;lcd.c: 50: lcdInst(0b00110011);
  7364  004E18  0E33               	movlw	51
  7365  004E1A  EC24  F02A         	call	_lcdInst
  7366                           
  7367                           ;lcd.c: 51: lcdInst(0b00110010);
  7368  004E1E  0E32               	movlw	50
  7369  004E20  EC24  F02A         	call	_lcdInst
  7370                           
  7371                           ;lcd.c: 53: lcdInst(0b00101000);
  7372  004E24  0E28               	movlw	40
  7373  004E26  EC24  F02A         	call	_lcdInst
  7374                           
  7375                           ;lcd.c: 54: lcdInst(0b00001100);
  7376  004E2A  0E0C               	movlw	12
  7377  004E2C  EC24  F02A         	call	_lcdInst
  7378                           
  7379                           ;lcd.c: 55: lcdInst(0b00000110);
  7380  004E30  0E06               	movlw	6
  7381  004E32  EC24  F02A         	call	_lcdInst
  7382                           
  7383                           ;lcd.c: 56: lcdInst(0b00000001);
  7384  004E36  0E01               	movlw	1
  7385  004E38  EC24  F02A         	call	_lcdInst
  7386                           
  7387                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7388  004E3C  0E9C               	movlw	156
  7389  004E3E  0100               	movlb	0	; () banked
  7390  004E40  6F83               	movwf	??_initLCD& (0+255),b
  7391  004E42  0ED7               	movlw	215
  7392  004E44                     u8987:
  7393  004E44  2EE8               	decfsz	wreg,f,c
  7394  004E46  D7FE               	bra	u8987
  7395  004E48  2F83               	decfsz	??_initLCD& (0+255),f,b
  7396  004E4A  D7FC               	bra	u8987
  7397  004E4C  0012               	return		;funcret
  7398  004E4E                     __end_of_initLCD:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           intcon2	equ	0xFF1
  7408                           intcon3	equ	0xFF0
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function _UI *****************
  7421 ;; Defined at:
  7422 ;;		line 76 in file "UI.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  i               1   73[BANK0 ] unsigned char 
  7427 ;;  i               1   85[BANK0 ] unsigned char 
  7428 ;;  i               1   84[BANK0 ] unsigned char 
  7429 ;;  i               1   83[BANK0 ] unsigned char 
  7430 ;;  i               1   82[BANK0 ] unsigned char 
  7431 ;;  i               1   81[BANK0 ] unsigned char 
  7432 ;;  i               1   80[BANK0 ] unsigned char 
  7433 ;;  i               1   79[BANK0 ] unsigned char 
  7434 ;;  i               1   78[BANK0 ] unsigned char 
  7435 ;;  i               1   77[BANK0 ] unsigned char 
  7436 ;;  i               1   76[BANK0 ] unsigned char 
  7437 ;;  i               1   75[BANK0 ] unsigned char 
  7438 ;;  i               1   74[BANK0 ] unsigned char 
  7439 ;;  month           4   86[BANK0 ] unsigned char [4]
  7440 ;;  i               1   72[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:       22 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:   11
  7457 ;; This function calls:
  7458 ;;		___awdiv
  7459 ;;		___awmod
  7460 ;;		_change_state_to_menu_12
  7461 ;;		_change_state_to_menu_22
  7462 ;;		_lcdInst
  7463 ;;		_printRTC
  7464 ;;		_printf
  7465 ;;		_strcpy
  7466 ;; This function is called by:
  7467 ;;		_main
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	text23
  7472  0008CA                     __ptext23:
  7473                           	opt stack 0
  7474  0008CA                     _UI:
  7475                           	opt stack 19
  7476                           
  7477                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7478                           
  7479                           ;incstack = 0
  7480  0008CA  0E02               	movlw	2
  7481  0008CC  0100               	movlb	0	; () banked
  7482  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7483  0008D0  A4D8               	btfss	status,2,c
  7484  0008D2  D075               	goto	l8564
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7488  0008D4  0E01               	movlw	1
  7489  0008D6  EC24  F02A         	call	_lcdInst
  7490  0008DA  0E68               	movlw	104
  7491  0008DC  0100               	movlb	0	; () banked
  7492  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7493  0008E0  0EE4               	movlw	228
  7494  0008E2                     u8997:
  7495  0008E2  2EE8               	decfsz	wreg,f,c
  7496  0008E4  D7FE               	bra	u8997
  7497  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7498  0008E8  D7FC               	bra	u8997
  7499  0008EA  F000               	nop	
  7500                           
  7501                           ;UI.c: 79: lcdInst(0b10000000);;
  7502  0008EC  0E80               	movlw	128
  7503  0008EE  EC24  F02A         	call	_lcdInst
  7504                           
  7505                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7506  0008F2  0EA3               	movlw	low STR_1
  7507  0008F4  0100               	movlb	0	; () banked
  7508  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7509  0008F8  0EFB               	movlw	high STR_1
  7510  0008FA  0100               	movlb	0	; () banked
  7511  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7512  0008FE  0E01               	movlw	1
  7513  000900  0100               	movlb	0	; () banked
  7514  000902  25FD               	addwf	_sel& (0+255),w,b
  7515  000904  0100               	movlb	0	; () banked
  7516  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7517  000908  0100               	movlb	0	; () banked
  7518  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7519  00090C  0E00               	movlw	0
  7520  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7521  000910  EC00  F00B         	call	_printf	;wreg free
  7522                           
  7523                           ;UI.c: 81: lcdInst(0b11000000);;
  7524  000914  0EC0               	movlw	192
  7525  000916  EC24  F02A         	call	_lcdInst
  7526                           
  7527                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7528  00091A  0E0E               	movlw	14
  7529  00091C  0100               	movlb	0	; () banked
  7530  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7531  000920  0E10               	movlw	16
  7532  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7533  000924  C0FA  F080         	movff	_total_time,___awmod@dividend
  7534  000928  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7535  00092C  EC13  F022         	call	___awmod	;wreg free
  7536  000930  C080  F0C6         	movff	?___awmod,_UI$2412
  7537  000934  C081  F0C7         	movff	?___awmod+1,_UI$2412+1
  7538                           
  7539                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7540  000938  0E27               	movlw	low STR_2
  7541  00093A  0100               	movlb	0	; () banked
  7542  00093C  6F8E               	movwf	printf@f& (0+255),b
  7543  00093E  0EFF               	movlw	high STR_2
  7544  000940  0100               	movlb	0	; () banked
  7545  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7546  000944  0E0E               	movlw	14
  7547  000946  0100               	movlb	0	; () banked
  7548  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7549  00094A  0E10               	movlw	16
  7550  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7551  00094E  C0FA  F080         	movff	_total_time,___awmod@dividend
  7552  000952  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7553  000956  EC13  F022         	call	___awmod	;wreg free
  7554  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7555  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7556  000962  0E00               	movlw	0
  7557  000964  0100               	movlb	0	; () banked
  7558  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7559  000968  0E3C               	movlw	60
  7560  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7561  00096C  EC01  F021         	call	___awdiv	;wreg free
  7562  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7563  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7564  000978  C0C6  F080         	movff	_UI$2412,___awmod@dividend
  7565  00097C  C0C7  F081         	movff	_UI$2412+1,___awmod@dividend+1
  7566  000980  0E00               	movlw	0
  7567  000982  0100               	movlb	0	; () banked
  7568  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7569  000986  0E3C               	movlw	60
  7570  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7571  00098A  EC13  F022         	call	___awmod	;wreg free
  7572  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7573  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7574  000996  EC00  F00B         	call	_printf	;wreg free
  7575                           
  7576                           ;UI.c: 83: machine_state = UI_state;
  7577  00099A  0E00               	movlw	0
  7578  00099C  0100               	movlb	0	; () banked
  7579  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7580  0009A0                     l180:
  7581  0009A0  A281               	btfss	3969,1,c	;volatile
  7582  0009A2  D7FE               	goto	l180
  7583                           
  7584                           ;UI.c: 86: }
  7585                           ;UI.c: 87: if(cur_state==12){
  7586  0009A4  0E0C               	movlw	12
  7587  0009A6  0100               	movlb	0	; () banked
  7588  0009A8  19EE               	xorwf	_cur_state& (0+255),w,b
  7589  0009AA  0100               	movlb	0	; () banked
  7590  0009AC  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  7591  0009AE  A4D8               	btfss	status,2,c
  7592  0009B0  D003               	goto	l8562
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;UI.c: 88: change_state_to_menu_12();
  7596  0009B2  EC64  F027         	call	_change_state_to_menu_12	;wreg free
  7597                           
  7598                           ;UI.c: 89: }
  7599  0009B6  D3D3               	goto	l8884
  7600  0009B8                     l8562:
  7601                           
  7602                           ;UI.c: 90: else{
  7603                           ;UI.c: 91: change_state_to_menu_22();
  7604  0009B8  EC48  F027         	call	_change_state_to_menu_22	;wreg free
  7605                           
  7606                           ;UI.c: 92: }
  7607                           ;UI.c: 93: }
  7608  0009BC  D3D0               	goto	l8884
  7609  0009BE                     l8564:
  7610                           
  7611                           ;UI.c: 94: else if(cur_state == 0){
  7612  0009BE  0100               	movlb	0	; () banked
  7613  0009C0  51EE               	movf	_cur_state& (0+255),w,b
  7614  0009C2  0100               	movlb	0	; () banked
  7615  0009C4  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  7616  0009C6  A4D8               	btfss	status,2,c
  7617  0009C8  D3CA               	goto	l8884
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7621  0009CA  0E00               	movlw	0
  7622  0009CC  0100               	movlb	0	; () banked
  7623  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7624  0009D0                     l8568:
  7625                           
  7626                           ; BSR set to: 0
  7627  0009D0  0E63               	movlw	99
  7628  0009D2  0100               	movlb	0	; () banked
  7629  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7630  0009D6  D001               	goto	l8572
  7631  0009D8  D00C               	goto	l8576
  7632  0009DA                     l8572:
  7633                           
  7634                           ; BSR set to: 0
  7635  0009DA  0E68               	movlw	104
  7636  0009DC  0100               	movlb	0	; () banked
  7637  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7638  0009E0  0EE4               	movlw	228
  7639  0009E2                     u9007:
  7640  0009E2  2EE8               	decfsz	wreg,f,c
  7641  0009E4  D7FE               	bra	u9007
  7642  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7643  0009E8  D7FC               	bra	u9007
  7644  0009EA  F000               	nop	
  7645  0009EC  0100               	movlb	0	; () banked
  7646  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7647  0009F0  D7EF               	goto	l8568
  7648  0009F2                     l8576:
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;UI.c: 96: if(cur_state == 0){
  7652  0009F2  0100               	movlb	0	; () banked
  7653  0009F4  51EE               	movf	_cur_state& (0+255),w,b
  7654  0009F6  0100               	movlb	0	; () banked
  7655  0009F8  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  7656  0009FA  A4D8               	btfss	status,2,c
  7657  0009FC  D3B0               	goto	l8884
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;UI.c: 97: printRTC();
  7661  0009FE  EC14  F012         	call	_printRTC	;wreg free
  7662                           
  7663                           ;UI.c: 98: }
  7664                           ;UI.c: 99: }
  7665                           ;UI.c: 100: while(logstate){
  7666  000A02  D3AD               	goto	l8884
  7667  000A04                     l8580:
  7668                           
  7669                           ;UI.c: 102: if(!log_completion){
  7670  000A04  5065               	movf	_log_completion,w,c
  7671  000A06  1066               	iorwf	_log_completion+1,w,c
  7672  000A08  A4D8               	btfss	status,2,c
  7673  000A0A  D041               	goto	l8610
  7674                           
  7675                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7676  000A0C  0E01               	movlw	1
  7677  000A0E  EC24  F02A         	call	_lcdInst
  7678  000A12  0E68               	movlw	104
  7679  000A14  0100               	movlb	0	; () banked
  7680  000A16  6FC4               	movwf	??_UI& (0+255),b
  7681  000A18  0EE4               	movlw	228
  7682  000A1A                     u9017:
  7683  000A1A  2EE8               	decfsz	wreg,f,c
  7684  000A1C  D7FE               	bra	u9017
  7685  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7686  000A20  D7FC               	bra	u9017
  7687  000A22  F000               	nop	
  7688                           
  7689                           ;UI.c: 104: lcdInst(0b10000000);;
  7690  000A24  0E80               	movlw	128
  7691  000A26  EC24  F02A         	call	_lcdInst
  7692                           
  7693                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7694  000A2A  0E91               	movlw	low STR_3
  7695  000A2C  0100               	movlb	0	; () banked
  7696  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7697  000A30  0EFB               	movlw	high STR_3
  7698  000A32  0100               	movlb	0	; () banked
  7699  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7700  000A36  C0F4  F090         	movff	_log,?_printf+2
  7701  000A3A  C0F5  F091         	movff	_log+1,?_printf+3
  7702  000A3E  EC00  F00B         	call	_printf	;wreg free
  7703                           
  7704                           ;UI.c: 106: lcdInst(0b11000000);;
  7705  000A42  0EC0               	movlw	192
  7706  000A44  EC24  F02A         	call	_lcdInst
  7707                           
  7708                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7709  000A48  0E4A               	movlw	low STR_4
  7710  000A4A  0100               	movlb	0	; () banked
  7711  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7712  000A4E  0EFE               	movlw	high STR_4
  7713  000A50  0100               	movlb	0	; () banked
  7714  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7715  000A54  EC00  F00B         	call	_printf	;wreg free
  7716  000A58                     l8594:
  7717  000A58  0E00               	movlw	0
  7718  000A5A  0100               	movlb	0	; () banked
  7719  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7720  000A5E                     l8596:
  7721                           
  7722                           ; BSR set to: 0
  7723  000A5E  0E63               	movlw	99
  7724  000A60  0100               	movlb	0	; () banked
  7725  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7726  000A64  D001               	goto	l8600
  7727  000A66  D00C               	goto	l8604
  7728  000A68                     l8600:
  7729                           
  7730                           ; BSR set to: 0
  7731  000A68  0E68               	movlw	104
  7732  000A6A  0100               	movlb	0	; () banked
  7733  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7734  000A6E  0EE4               	movlw	228
  7735  000A70                     u9027:
  7736  000A70  2EE8               	decfsz	wreg,f,c
  7737  000A72  D7FE               	bra	u9027
  7738  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7739  000A76  D7FC               	bra	u9027
  7740  000A78  F000               	nop	
  7741  000A7A  0100               	movlb	0	; () banked
  7742  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7743  000A7E  D7EF               	goto	l8596
  7744  000A80                     l8604:
  7745                           
  7746                           ; BSR set to: 0
  7747  000A80  0100               	movlb	0	; () banked
  7748  000A82  51F8               	movf	_logstate& (0+255),w,b
  7749  000A84  0100               	movlb	0	; () banked
  7750  000A86  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7751  000A88  B4D8               	btfsc	status,2,c
  7752  000A8A  0012               	return	
  7753  000A8C  D7E5               	goto	l8594
  7754  000A8E                     l8610:
  7755                           
  7756                           ;UI.c: 111: else{
  7757                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7758  000A8E  0E01               	movlw	1
  7759  000A90  EC24  F02A         	call	_lcdInst
  7760  000A94  0E68               	movlw	104
  7761  000A96  0100               	movlb	0	; () banked
  7762  000A98  6FC4               	movwf	??_UI& (0+255),b
  7763  000A9A  0EE4               	movlw	228
  7764  000A9C                     u9037:
  7765  000A9C  2EE8               	decfsz	wreg,f,c
  7766  000A9E  D7FE               	bra	u9037
  7767  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7768  000AA2  D7FC               	bra	u9037
  7769  000AA4  F000               	nop	
  7770                           
  7771                           ;UI.c: 113: lcdInst(0b10000000);;
  7772  000AA6  0E80               	movlw	128
  7773  000AA8  EC24  F02A         	call	_lcdInst
  7774                           
  7775                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7776  000AAC  0E91               	movlw	low STR_3
  7777  000AAE  0100               	movlb	0	; () banked
  7778  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7779  000AB2  0EFB               	movlw	high STR_3
  7780  000AB4  0100               	movlb	0	; () banked
  7781  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7782  000AB8  C0F4  F090         	movff	_log,?_printf+2
  7783  000ABC  C0F5  F091         	movff	_log+1,?_printf+3
  7784  000AC0  EC00  F00B         	call	_printf	;wreg free
  7785                           
  7786                           ;UI.c: 115: lcdInst(0b11000000);;
  7787  000AC4  0EC0               	movlw	192
  7788  000AC6  EC24  F02A         	call	_lcdInst
  7789                           
  7790                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7791  000ACA  0EE6               	movlw	low STR_6
  7792  000ACC  0100               	movlb	0	; () banked
  7793  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7794  000AD0  0EFD               	movlw	high STR_6
  7795  000AD2  0100               	movlb	0	; () banked
  7796  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7797  000AD6  EC00  F00B         	call	_printf	;wreg free
  7798                           
  7799                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7800  000ADA  0E00               	movlw	0
  7801  000ADC  0100               	movlb	0	; () banked
  7802  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7803  000AE0                     l8624:
  7804                           
  7805                           ; BSR set to: 0
  7806  000AE0  0E63               	movlw	99
  7807  000AE2  0100               	movlb	0	; () banked
  7808  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7809  000AE6  D001               	goto	l8628
  7810  000AE8  D00C               	goto	l8632
  7811  000AEA                     l8628:
  7812                           
  7813                           ; BSR set to: 0
  7814  000AEA  0E68               	movlw	104
  7815  000AEC  0100               	movlb	0	; () banked
  7816  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7817  000AF0  0EE4               	movlw	228
  7818  000AF2                     u9047:
  7819  000AF2  2EE8               	decfsz	wreg,f,c
  7820  000AF4  D7FE               	bra	u9047
  7821  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7822  000AF8  D7FC               	bra	u9047
  7823  000AFA  F000               	nop	
  7824  000AFC  0100               	movlb	0	; () banked
  7825  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7826  000B00  D7EF               	goto	l8624
  7827  000B02                     l8632:
  7828                           
  7829                           ; BSR set to: 0
  7830  000B02  0100               	movlb	0	; () banked
  7831  000B04  51F8               	movf	_logstate& (0+255),w,b
  7832  000B06  0100               	movlb	0	; () banked
  7833  000B08  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7834  000B0A  B4D8               	btfsc	status,2,c
  7835  000B0C  0012               	return	
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7839                           
  7840                           ; BSR set to: 0
  7841                           
  7842                           ; BSR set to: 0
  7843  000B0E  0E00               	movlw	0
  7844  000B10  0100               	movlb	0	; () banked
  7845  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7846  000B14                     l8638:
  7847                           
  7848                           ; BSR set to: 0
  7849  000B14  0E63               	movlw	99
  7850  000B16  0100               	movlb	0	; () banked
  7851  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7852  000B1A  D001               	goto	l8642
  7853  000B1C  D00C               	goto	l8646
  7854  000B1E                     l8642:
  7855                           
  7856                           ; BSR set to: 0
  7857  000B1E  0E68               	movlw	104
  7858  000B20  0100               	movlb	0	; () banked
  7859  000B22  6FC4               	movwf	??_UI& (0+255),b
  7860  000B24  0EE4               	movlw	228
  7861  000B26                     u9057:
  7862  000B26  2EE8               	decfsz	wreg,f,c
  7863  000B28  D7FE               	bra	u9057
  7864  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7865  000B2C  D7FC               	bra	u9057
  7866  000B2E  F000               	nop	
  7867  000B30  0100               	movlb	0	; () banked
  7868  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7869  000B34  D7EF               	goto	l8638
  7870  000B36                     l8646:
  7871                           
  7872                           ; BSR set to: 0
  7873  000B36  0100               	movlb	0	; () banked
  7874  000B38  51F8               	movf	_logstate& (0+255),w,b
  7875  000B3A  0100               	movlb	0	; () banked
  7876  000B3C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7877  000B3E  B4D8               	btfsc	status,2,c
  7878  000B40  0012               	return	
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7882                           
  7883                           ; BSR set to: 0
  7884                           
  7885                           ; BSR set to: 0
  7886  000B42  0E01               	movlw	1
  7887  000B44  EC24  F02A         	call	_lcdInst
  7888  000B48  0E68               	movlw	104
  7889  000B4A  0100               	movlb	0	; () banked
  7890  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7891  000B4E  0EE4               	movlw	228
  7892  000B50                     u9067:
  7893  000B50  2EE8               	decfsz	wreg,f,c
  7894  000B52  D7FE               	bra	u9067
  7895  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7896  000B56  D7FC               	bra	u9067
  7897  000B58  F000               	nop	
  7898                           
  7899                           ;UI.c: 122: lcdInst(0b10000000);;
  7900  000B5A  0E80               	movlw	128
  7901  000B5C  EC24  F02A         	call	_lcdInst
  7902                           
  7903                           ;UI.c: 123: printf("START:");
  7904  000B60  0EC4               	movlw	low STR_7
  7905  000B62  0100               	movlb	0	; () banked
  7906  000B64  6F8E               	movwf	printf@f& (0+255),b
  7907  000B66  0EFF               	movlw	high STR_7
  7908  000B68  0100               	movlb	0	; () banked
  7909  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7910  000B6C  EC00  F00B         	call	_printf	;wreg free
  7911                           
  7912                           ;UI.c: 124: lcdInst(0b11000000);;
  7913  000B70  0EC0               	movlw	192
  7914  000B72  EC24  F02A         	call	_lcdInst
  7915                           
  7916                           ;UI.c: 125: char month[] = "MMM";
  7917  000B76  C13B  F0D6         	movff	UI@F3232,UI@month
  7918  000B7A  C13C  F0D7         	movff	UI@F3232+1,UI@month+1
  7919  000B7E  C13D  F0D8         	movff	UI@F3232+2,UI@month+2
  7920  000B82  C13E  F0D9         	movff	UI@F3232+3,UI@month+3
  7921                           
  7922                           ;UI.c: 126: switch(log_startTime[5]){
  7923  000B86  D0C3               	goto	l8690
  7924  000B88                     l8662:
  7925                           
  7926                           ;UI.c: 128: strcpy(month, "JAN");
  7927  000B88  0ED6               	movlw	low UI@month
  7928  000B8A  0100               	movlb	0	; () banked
  7929  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7930  000B8E  0E00               	movlw	high UI@month
  7931  000B90  0100               	movlb	0	; () banked
  7932  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7933  000B94  0EDB               	movlw	low STR_8
  7934  000B96  0100               	movlb	0	; () banked
  7935  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7936  000B9A  0EFF               	movlw	high STR_8
  7937  000B9C  0100               	movlb	0	; () banked
  7938  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7939  000BA0  EC80  F027         	call	_strcpy	;wreg free
  7940                           
  7941                           ;UI.c: 129: break;
  7942  000BA4  D0E6               	goto	l8692
  7943  000BA6                     l8664:
  7944                           
  7945                           ;UI.c: 131: strcpy(month, "FEB");
  7946  000BA6  0ED6               	movlw	low UI@month
  7947  000BA8  0100               	movlb	0	; () banked
  7948  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7949  000BAC  0E00               	movlw	high UI@month
  7950  000BAE  0100               	movlb	0	; () banked
  7951  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7952  000BB2  0ECB               	movlw	low STR_9
  7953  000BB4  0100               	movlb	0	; () banked
  7954  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7955  000BB8  0EFF               	movlw	high STR_9
  7956  000BBA  0100               	movlb	0	; () banked
  7957  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7958  000BBE  EC80  F027         	call	_strcpy	;wreg free
  7959                           
  7960                           ;UI.c: 132: break;
  7961  000BC2  D0D7               	goto	l8692
  7962  000BC4                     l8666:
  7963                           
  7964                           ;UI.c: 134: strcpy(month, "MAR");
  7965  000BC4  0ED6               	movlw	low UI@month
  7966  000BC6  0100               	movlb	0	; () banked
  7967  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7968  000BCA  0E00               	movlw	high UI@month
  7969  000BCC  0100               	movlb	0	; () banked
  7970  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7971  000BD0  0EE7               	movlw	low STR_10
  7972  000BD2  0100               	movlb	0	; () banked
  7973  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7974  000BD6  0EFF               	movlw	high STR_10
  7975  000BD8  0100               	movlb	0	; () banked
  7976  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7977  000BDC  EC80  F027         	call	_strcpy	;wreg free
  7978                           
  7979                           ;UI.c: 135: break;
  7980  000BE0  D0C8               	goto	l8692
  7981  000BE2                     l8668:
  7982                           
  7983                           ;UI.c: 137: strcpy(month, "APR");
  7984  000BE2  0ED6               	movlw	low UI@month
  7985  000BE4  0100               	movlb	0	; () banked
  7986  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7987  000BE8  0E00               	movlw	high UI@month
  7988  000BEA  0100               	movlb	0	; () banked
  7989  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7990  000BEE  0EEB               	movlw	low STR_11
  7991  000BF0  0100               	movlb	0	; () banked
  7992  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7993  000BF4  0EFF               	movlw	high STR_11
  7994  000BF6  0100               	movlb	0	; () banked
  7995  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7996  000BFA  EC80  F027         	call	_strcpy	;wreg free
  7997                           
  7998                           ;UI.c: 138: break;
  7999  000BFE  D0B9               	goto	l8692
  8000  000C00                     l8670:
  8001                           
  8002                           ;UI.c: 140: strcpy(month, "MAY");
  8003  000C00  0ED6               	movlw	low UI@month
  8004  000C02  0100               	movlb	0	; () banked
  8005  000C04  6F80               	movwf	strcpy@to& (0+255),b
  8006  000C06  0E00               	movlw	high UI@month
  8007  000C08  0100               	movlb	0	; () banked
  8008  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8009  000C0C  0EFB               	movlw	low STR_12
  8010  000C0E  0100               	movlb	0	; () banked
  8011  000C10  6F82               	movwf	strcpy@from& (0+255),b
  8012  000C12  0EFF               	movlw	high STR_12
  8013  000C14  0100               	movlb	0	; () banked
  8014  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8015  000C18  EC80  F027         	call	_strcpy	;wreg free
  8016                           
  8017                           ;UI.c: 141: break;
  8018  000C1C  D0AA               	goto	l8692
  8019  000C1E                     l8672:
  8020                           
  8021                           ;UI.c: 143: strcpy(month, "JUN");
  8022  000C1E  0ED6               	movlw	low UI@month
  8023  000C20  0100               	movlb	0	; () banked
  8024  000C22  6F80               	movwf	strcpy@to& (0+255),b
  8025  000C24  0E00               	movlw	high UI@month
  8026  000C26  0100               	movlb	0	; () banked
  8027  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8028  000C2A  0EDF               	movlw	low STR_13
  8029  000C2C  0100               	movlb	0	; () banked
  8030  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  8031  000C30  0EFF               	movlw	high STR_13
  8032  000C32  0100               	movlb	0	; () banked
  8033  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8034  000C36  EC80  F027         	call	_strcpy	;wreg free
  8035                           
  8036                           ;UI.c: 144: break;
  8037  000C3A  D09B               	goto	l8692
  8038  000C3C                     l8674:
  8039                           
  8040                           ;UI.c: 146: strcpy(month, "JUL");
  8041  000C3C  0ED6               	movlw	low UI@month
  8042  000C3E  0100               	movlb	0	; () banked
  8043  000C40  6F80               	movwf	strcpy@to& (0+255),b
  8044  000C42  0E00               	movlw	high UI@month
  8045  000C44  0100               	movlb	0	; () banked
  8046  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8047  000C48  0ED7               	movlw	low STR_14
  8048  000C4A  0100               	movlb	0	; () banked
  8049  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  8050  000C4E  0EFF               	movlw	high STR_14
  8051  000C50  0100               	movlb	0	; () banked
  8052  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8053  000C54  EC80  F027         	call	_strcpy	;wreg free
  8054                           
  8055                           ;UI.c: 147: break;
  8056  000C58  D08C               	goto	l8692
  8057  000C5A                     l8676:
  8058                           
  8059                           ;UI.c: 149: strcpy(month, "AUG");
  8060  000C5A  0ED6               	movlw	low UI@month
  8061  000C5C  0100               	movlb	0	; () banked
  8062  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  8063  000C60  0E00               	movlw	high UI@month
  8064  000C62  0100               	movlb	0	; () banked
  8065  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8066  000C66  0ED3               	movlw	low STR_15
  8067  000C68  0100               	movlb	0	; () banked
  8068  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  8069  000C6C  0EFF               	movlw	high STR_15
  8070  000C6E  0100               	movlb	0	; () banked
  8071  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8072  000C72  EC80  F027         	call	_strcpy	;wreg free
  8073                           
  8074                           ;UI.c: 150: break;
  8075  000C76  D07D               	goto	l8692
  8076  000C78                     l8678:
  8077                           
  8078                           ;UI.c: 152: strcpy(month, "SEP");
  8079  000C78  0ED6               	movlw	low UI@month
  8080  000C7A  0100               	movlb	0	; () banked
  8081  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  8082  000C7E  0E00               	movlw	high UI@month
  8083  000C80  0100               	movlb	0	; () banked
  8084  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8085  000C84  0EE3               	movlw	low STR_16
  8086  000C86  0100               	movlb	0	; () banked
  8087  000C88  6F82               	movwf	strcpy@from& (0+255),b
  8088  000C8A  0EFF               	movlw	high STR_16
  8089  000C8C  0100               	movlb	0	; () banked
  8090  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8091  000C90  EC80  F027         	call	_strcpy	;wreg free
  8092                           
  8093                           ;UI.c: 153: break;
  8094  000C94  D06E               	goto	l8692
  8095  000C96                     l8680:
  8096                           
  8097                           ;UI.c: 155: strcpy(month, "OCT");
  8098  000C96  0ED6               	movlw	low UI@month
  8099  000C98  0100               	movlb	0	; () banked
  8100  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  8101  000C9C  0E00               	movlw	high UI@month
  8102  000C9E  0100               	movlb	0	; () banked
  8103  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8104  000CA2  0EF3               	movlw	low STR_17
  8105  000CA4  0100               	movlb	0	; () banked
  8106  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  8107  000CA8  0EFF               	movlw	high STR_17
  8108  000CAA  0100               	movlb	0	; () banked
  8109  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8110  000CAE  EC80  F027         	call	_strcpy	;wreg free
  8111                           
  8112                           ;UI.c: 156: break;
  8113  000CB2  D05F               	goto	l8692
  8114  000CB4                     l8682:
  8115                           
  8116                           ;UI.c: 158: strcpy(month, "NOV");
  8117  000CB4  0ED6               	movlw	low UI@month
  8118  000CB6  0100               	movlb	0	; () banked
  8119  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  8120  000CBA  0E00               	movlw	high UI@month
  8121  000CBC  0100               	movlb	0	; () banked
  8122  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8123  000CC0  0EF7               	movlw	low STR_18
  8124  000CC2  0100               	movlb	0	; () banked
  8125  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  8126  000CC6  0EFF               	movlw	high STR_18
  8127  000CC8  0100               	movlb	0	; () banked
  8128  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8129  000CCC  EC80  F027         	call	_strcpy	;wreg free
  8130                           
  8131                           ;UI.c: 159: break;
  8132  000CD0  D050               	goto	l8692
  8133  000CD2                     l8684:
  8134                           
  8135                           ;UI.c: 161: strcpy(month, "DEC");
  8136  000CD2  0ED6               	movlw	low UI@month
  8137  000CD4  0100               	movlb	0	; () banked
  8138  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  8139  000CD8  0E00               	movlw	high UI@month
  8140  000CDA  0100               	movlb	0	; () banked
  8141  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8142  000CDE  0ECF               	movlw	low STR_19
  8143  000CE0  0100               	movlb	0	; () banked
  8144  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  8145  000CE4  0EFF               	movlw	high STR_19
  8146  000CE6  0100               	movlb	0	; () banked
  8147  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8148  000CEA  EC80  F027         	call	_strcpy	;wreg free
  8149                           
  8150                           ;UI.c: 162: break;
  8151  000CEE  D041               	goto	l8692
  8152  000CF0                     l8686:
  8153                           
  8154                           ;UI.c: 164: strcpy(month, "ERR");
  8155  000CF0  0ED6               	movlw	low UI@month
  8156  000CF2  0100               	movlb	0	; () banked
  8157  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  8158  000CF6  0E00               	movlw	high UI@month
  8159  000CF8  0100               	movlb	0	; () banked
  8160  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8161  000CFC  0EEF               	movlw	low STR_20
  8162  000CFE  0100               	movlb	0	; () banked
  8163  000D00  6F82               	movwf	strcpy@from& (0+255),b
  8164  000D02  0EFF               	movlw	high STR_20
  8165  000D04  0100               	movlb	0	; () banked
  8166  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8167  000D08  EC80  F027         	call	_strcpy	;wreg free
  8168                           
  8169                           ;UI.c: 166: }
  8170                           
  8171                           ;UI.c: 165: break;
  8172  000D0C  D032               	goto	l8692
  8173  000D0E                     l8690:
  8174  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  8175  000D12  CFDE F0C4          	movff	postinc2,??_UI
  8176  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  8177                           
  8178                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8179                           ; Switch size 1, requested type "space"
  8180                           ; Number of cases is 1, Range of values is 0 to 0
  8181                           ; switch strategies available:
  8182                           ; Name         Instructions Cycles
  8183                           ; simple_byte            4     3 (average)
  8184                           ;	Chosen strategy is simple_byte
  8185  000D1A  0100               	movlb	0	; () banked
  8186  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  8187  000D1E  0A00               	xorlw	0	; case 0
  8188  000D20  A4D8               	btfss	status,2,c
  8189  000D22  D7E6               	goto	l8686
  8190                           
  8191                           ; BSR set to: 0
  8192                           ; Switch size 1, requested type "space"
  8193                           ; Number of cases is 12, Range of values is 1 to 12
  8194                           ; switch strategies available:
  8195                           ; Name         Instructions Cycles
  8196                           ; simple_byte           37    19 (average)
  8197                           ;	Chosen strategy is simple_byte
  8198  000D24  0100               	movlb	0	; () banked
  8199  000D26  51C4               	movf	??_UI& (0+255),w,b
  8200  000D28  0A01               	xorlw	1	; case 1
  8201  000D2A  B4D8               	btfsc	status,2,c
  8202  000D2C  D72D               	goto	l8662
  8203  000D2E  0A03               	xorlw	3	; case 2
  8204  000D30  B4D8               	btfsc	status,2,c
  8205  000D32  D739               	goto	l8664
  8206  000D34  0A01               	xorlw	1	; case 3
  8207  000D36  B4D8               	btfsc	status,2,c
  8208  000D38  D745               	goto	l8666
  8209  000D3A  0A07               	xorlw	7	; case 4
  8210  000D3C  B4D8               	btfsc	status,2,c
  8211  000D3E  D751               	goto	l8668
  8212  000D40  0A01               	xorlw	1	; case 5
  8213  000D42  B4D8               	btfsc	status,2,c
  8214  000D44  D75D               	goto	l8670
  8215  000D46  0A03               	xorlw	3	; case 6
  8216  000D48  B4D8               	btfsc	status,2,c
  8217  000D4A  D769               	goto	l8672
  8218  000D4C  0A01               	xorlw	1	; case 7
  8219  000D4E  B4D8               	btfsc	status,2,c
  8220  000D50  D775               	goto	l8674
  8221  000D52  0A0F               	xorlw	15	; case 8
  8222  000D54  B4D8               	btfsc	status,2,c
  8223  000D56  D781               	goto	l8676
  8224  000D58  0A01               	xorlw	1	; case 9
  8225  000D5A  B4D8               	btfsc	status,2,c
  8226  000D5C  D78D               	goto	l8678
  8227  000D5E  0A03               	xorlw	3	; case 10
  8228  000D60  B4D8               	btfsc	status,2,c
  8229  000D62  D799               	goto	l8680
  8230  000D64  0A01               	xorlw	1	; case 11
  8231  000D66  B4D8               	btfsc	status,2,c
  8232  000D68  D7A5               	goto	l8682
  8233  000D6A  0A07               	xorlw	7	; case 12
  8234  000D6C  B4D8               	btfsc	status,2,c
  8235  000D6E  D7B1               	goto	l8684
  8236  000D70  D7BF               	goto	l8686
  8237  000D72                     l8692:
  8238                           
  8239                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8240  000D72  0E0A               	movlw	low STR_21
  8241  000D74  0100               	movlb	0	; () banked
  8242  000D76  6F8E               	movwf	printf@f& (0+255),b
  8243  000D78  0EFB               	movlw	high STR_21
  8244  000D7A  0100               	movlb	0	; () banked
  8245  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8246  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8247  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8248  000D86  0ED6               	movlw	low UI@month
  8249  000D88  0100               	movlb	0	; () banked
  8250  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8251  000D8C  0E00               	movlw	high UI@month
  8252  000D8E  0100               	movlb	0	; () banked
  8253  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8254  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8255  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8256  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8257  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8258  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8259  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8260  000DAA  EC00  F00B         	call	_printf	;wreg free
  8261                           
  8262                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8263  000DAE  0E00               	movlw	0
  8264  000DB0  0100               	movlb	0	; () banked
  8265  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8266  000DB4                     l8696:
  8267                           
  8268                           ; BSR set to: 0
  8269  000DB4  0E63               	movlw	99
  8270  000DB6  0100               	movlb	0	; () banked
  8271  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8272  000DBA  D001               	goto	l8700
  8273  000DBC  D00C               	goto	l8704
  8274  000DBE                     l8700:
  8275                           
  8276                           ; BSR set to: 0
  8277  000DBE  0E68               	movlw	104
  8278  000DC0  0100               	movlb	0	; () banked
  8279  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8280  000DC4  0EE4               	movlw	228
  8281  000DC6                     u9077:
  8282  000DC6  2EE8               	decfsz	wreg,f,c
  8283  000DC8  D7FE               	bra	u9077
  8284  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8285  000DCC  D7FC               	bra	u9077
  8286  000DCE  F000               	nop	
  8287  000DD0  0100               	movlb	0	; () banked
  8288  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8289  000DD4  D7EF               	goto	l8696
  8290  000DD6                     l8704:
  8291                           
  8292                           ; BSR set to: 0
  8293  000DD6  0100               	movlb	0	; () banked
  8294  000DD8  51F8               	movf	_logstate& (0+255),w,b
  8295  000DDA  0100               	movlb	0	; () banked
  8296  000DDC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8297  000DDE  B4D8               	btfsc	status,2,c
  8298  000DE0  0012               	return	
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8302                           
  8303                           ; BSR set to: 0
  8304                           
  8305                           ; BSR set to: 0
  8306  000DE2  0E00               	movlw	0
  8307  000DE4  0100               	movlb	0	; () banked
  8308  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8309  000DE8                     l8710:
  8310                           
  8311                           ; BSR set to: 0
  8312  000DE8  0E63               	movlw	99
  8313  000DEA  0100               	movlb	0	; () banked
  8314  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8315  000DEE  D001               	goto	l8714
  8316  000DF0  D00C               	goto	l8718
  8317  000DF2                     l8714:
  8318                           
  8319                           ; BSR set to: 0
  8320  000DF2  0E68               	movlw	104
  8321  000DF4  0100               	movlb	0	; () banked
  8322  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8323  000DF8  0EE4               	movlw	228
  8324  000DFA                     u9087:
  8325  000DFA  2EE8               	decfsz	wreg,f,c
  8326  000DFC  D7FE               	bra	u9087
  8327  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8328  000E00  D7FC               	bra	u9087
  8329  000E02  F000               	nop	
  8330  000E04  0100               	movlb	0	; () banked
  8331  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8332  000E08  D7EF               	goto	l8710
  8333  000E0A                     l8718:
  8334                           
  8335                           ; BSR set to: 0
  8336  000E0A  0100               	movlb	0	; () banked
  8337  000E0C  51F8               	movf	_logstate& (0+255),w,b
  8338  000E0E  0100               	movlb	0	; () banked
  8339  000E10  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8340  000E12  B4D8               	btfsc	status,2,c
  8341  000E14  0012               	return	
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8345                           
  8346                           ; BSR set to: 0
  8347                           
  8348                           ; BSR set to: 0
  8349  000E16  0E01               	movlw	1
  8350  000E18  EC24  F02A         	call	_lcdInst
  8351  000E1C  0E68               	movlw	104
  8352  000E1E  0100               	movlb	0	; () banked
  8353  000E20  6FC4               	movwf	??_UI& (0+255),b
  8354  000E22  0EE4               	movlw	228
  8355  000E24                     u9097:
  8356  000E24  2EE8               	decfsz	wreg,f,c
  8357  000E26  D7FE               	bra	u9097
  8358  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8359  000E2A  D7FC               	bra	u9097
  8360  000E2C  F000               	nop	
  8361                           
  8362                           ;UI.c: 173: lcdInst(0b10000000);;
  8363  000E2E  0E80               	movlw	128
  8364  000E30  EC24  F02A         	call	_lcdInst
  8365                           
  8366                           ;UI.c: 174: printf("DURATION:");
  8367  000E34  0E9B               	movlw	low STR_22
  8368  000E36  0100               	movlb	0	; () banked
  8369  000E38  6F8E               	movwf	printf@f& (0+255),b
  8370  000E3A  0EFF               	movlw	high STR_22
  8371  000E3C  0100               	movlb	0	; () banked
  8372  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8373  000E40  EC00  F00B         	call	_printf	;wreg free
  8374                           
  8375                           ;UI.c: 175: lcdInst(0b11000000);;
  8376  000E44  0EC0               	movlw	192
  8377  000E46  EC24  F02A         	call	_lcdInst
  8378                           
  8379                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8380  000E4A  0E0E               	movlw	14
  8381  000E4C  0100               	movlb	0	; () banked
  8382  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8383  000E50  0E10               	movlw	16
  8384  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8385  000E54  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8386  000E58  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8387  000E5C  EC13  F022         	call	___awmod	;wreg free
  8388  000E60  C080  F0C6         	movff	?___awmod,_UI$2412
  8389  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2412+1
  8390                           
  8391                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8392  000E68  0E19               	movlw	low STR_23
  8393  000E6A  0100               	movlb	0	; () banked
  8394  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8395  000E6E  0EFF               	movlw	high STR_23
  8396  000E70  0100               	movlb	0	; () banked
  8397  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8398  000E74  0E0E               	movlw	14
  8399  000E76  0100               	movlb	0	; () banked
  8400  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8401  000E7A  0E10               	movlw	16
  8402  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8403  000E7E  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8404  000E82  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8405  000E86  EC13  F022         	call	___awmod	;wreg free
  8406  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8407  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8408  000E92  0E00               	movlw	0
  8409  000E94  0100               	movlb	0	; () banked
  8410  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8411  000E98  0E3C               	movlw	60
  8412  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8413  000E9C  EC01  F021         	call	___awdiv	;wreg free
  8414  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8415  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8416  000EA8  C0C6  F080         	movff	_UI$2412,___awmod@dividend
  8417  000EAC  C0C7  F081         	movff	_UI$2412+1,___awmod@dividend+1
  8418  000EB0  0E00               	movlw	0
  8419  000EB2  0100               	movlb	0	; () banked
  8420  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8421  000EB6  0E3C               	movlw	60
  8422  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8423  000EBA  EC13  F022         	call	___awmod	;wreg free
  8424  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8425  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8426  000EC6  EC00  F00B         	call	_printf	;wreg free
  8427                           
  8428                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8429  000ECA  0E00               	movlw	0
  8430  000ECC  0100               	movlb	0	; () banked
  8431  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8432  000ED0                     l8738:
  8433                           
  8434                           ; BSR set to: 0
  8435  000ED0  0E63               	movlw	99
  8436  000ED2  0100               	movlb	0	; () banked
  8437  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8438  000ED6  D001               	goto	l8742
  8439  000ED8  D00C               	goto	l8746
  8440  000EDA                     l8742:
  8441                           
  8442                           ; BSR set to: 0
  8443  000EDA  0E68               	movlw	104
  8444  000EDC  0100               	movlb	0	; () banked
  8445  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8446  000EE0  0EE4               	movlw	228
  8447  000EE2                     u9107:
  8448  000EE2  2EE8               	decfsz	wreg,f,c
  8449  000EE4  D7FE               	bra	u9107
  8450  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8451  000EE8  D7FC               	bra	u9107
  8452  000EEA  F000               	nop	
  8453  000EEC  0100               	movlb	0	; () banked
  8454  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8455  000EF0  D7EF               	goto	l8738
  8456  000EF2                     l8746:
  8457                           
  8458                           ; BSR set to: 0
  8459  000EF2  0100               	movlb	0	; () banked
  8460  000EF4  51F8               	movf	_logstate& (0+255),w,b
  8461  000EF6  0100               	movlb	0	; () banked
  8462  000EF8  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8463  000EFA  B4D8               	btfsc	status,2,c
  8464  000EFC  0012               	return	
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8468                           
  8469                           ; BSR set to: 0
  8470                           
  8471                           ; BSR set to: 0
  8472  000EFE  0E00               	movlw	0
  8473  000F00  0100               	movlb	0	; () banked
  8474  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8475  000F04                     l8752:
  8476                           
  8477                           ; BSR set to: 0
  8478  000F04  0E63               	movlw	99
  8479  000F06  0100               	movlb	0	; () banked
  8480  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8481  000F0A  D001               	goto	l8756
  8482  000F0C  D00C               	goto	l8760
  8483  000F0E                     l8756:
  8484                           
  8485                           ; BSR set to: 0
  8486  000F0E  0E68               	movlw	104
  8487  000F10  0100               	movlb	0	; () banked
  8488  000F12  6FC4               	movwf	??_UI& (0+255),b
  8489  000F14  0EE4               	movlw	228
  8490  000F16                     u9117:
  8491  000F16  2EE8               	decfsz	wreg,f,c
  8492  000F18  D7FE               	bra	u9117
  8493  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8494  000F1C  D7FC               	bra	u9117
  8495  000F1E  F000               	nop	
  8496  000F20  0100               	movlb	0	; () banked
  8497  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8498  000F24  D7EF               	goto	l8752
  8499  000F26                     l8760:
  8500                           
  8501                           ; BSR set to: 0
  8502  000F26  0100               	movlb	0	; () banked
  8503  000F28  51F8               	movf	_logstate& (0+255),w,b
  8504  000F2A  0100               	movlb	0	; () banked
  8505  000F2C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8506  000F2E  B4D8               	btfsc	status,2,c
  8507  000F30  0012               	return	
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8511                           
  8512                           ; BSR set to: 0
  8513                           
  8514                           ; BSR set to: 0
  8515  000F32  0E01               	movlw	1
  8516  000F34  EC24  F02A         	call	_lcdInst
  8517  000F38  0E68               	movlw	104
  8518  000F3A  0100               	movlb	0	; () banked
  8519  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8520  000F3E  0EE4               	movlw	228
  8521  000F40                     u9127:
  8522  000F40  2EE8               	decfsz	wreg,f,c
  8523  000F42  D7FE               	bra	u9127
  8524  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8525  000F46  D7FC               	bra	u9127
  8526  000F48  F000               	nop	
  8527                           
  8528                           ;UI.c: 182: lcdInst(0b10000000);;
  8529  000F4A  0E80               	movlw	128
  8530  000F4C  EC24  F02A         	call	_lcdInst
  8531                           
  8532                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8533  000F50  0E3C               	movlw	low STR_24
  8534  000F52  0100               	movlb	0	; () banked
  8535  000F54  6F8E               	movwf	printf@f& (0+255),b
  8536  000F56  0EFD               	movlw	high STR_24
  8537  000F58  0100               	movlb	0	; () banked
  8538  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8539  000F5C  EC00  F00B         	call	_printf	;wreg free
  8540                           
  8541                           ;UI.c: 184: lcdInst(0b11000000);;
  8542  000F60  0EC0               	movlw	192
  8543  000F62  EC24  F02A         	call	_lcdInst
  8544                           
  8545                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8546  000F66  0E19               	movlw	low STR_25
  8547  000F68  0100               	movlb	0	; () banked
  8548  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8549  000F6C  0EFE               	movlw	high STR_25
  8550  000F6E  0100               	movlb	0	; () banked
  8551  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8552  000F72  C06B  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8553  000F76  C06C  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8554  000F7A  C06D  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8555  000F7E  C06E  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8556  000F82  EC00  F00B         	call	_printf	;wreg free
  8557                           
  8558                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8559  000F86  0E00               	movlw	0
  8560  000F88  0100               	movlb	0	; () banked
  8561  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8562  000F8C                     l8778:
  8563                           
  8564                           ; BSR set to: 0
  8565  000F8C  0E63               	movlw	99
  8566  000F8E  0100               	movlb	0	; () banked
  8567  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8568  000F92  D001               	goto	l8782
  8569  000F94  D00C               	goto	l8786
  8570  000F96                     l8782:
  8571                           
  8572                           ; BSR set to: 0
  8573  000F96  0E68               	movlw	104
  8574  000F98  0100               	movlb	0	; () banked
  8575  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8576  000F9C  0EE4               	movlw	228
  8577  000F9E                     u9137:
  8578  000F9E  2EE8               	decfsz	wreg,f,c
  8579  000FA0  D7FE               	bra	u9137
  8580  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8581  000FA4  D7FC               	bra	u9137
  8582  000FA6  F000               	nop	
  8583  000FA8  0100               	movlb	0	; () banked
  8584  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8585  000FAC  D7EF               	goto	l8778
  8586  000FAE                     l8786:
  8587                           
  8588                           ; BSR set to: 0
  8589  000FAE  0100               	movlb	0	; () banked
  8590  000FB0  51F8               	movf	_logstate& (0+255),w,b
  8591  000FB2  0100               	movlb	0	; () banked
  8592  000FB4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8593  000FB6  B4D8               	btfsc	status,2,c
  8594  000FB8  0012               	return	
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8598                           
  8599                           ; BSR set to: 0
  8600                           
  8601                           ; BSR set to: 0
  8602  000FBA  0E00               	movlw	0
  8603  000FBC  0100               	movlb	0	; () banked
  8604  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8605  000FC0                     l8792:
  8606                           
  8607                           ; BSR set to: 0
  8608  000FC0  0E63               	movlw	99
  8609  000FC2  0100               	movlb	0	; () banked
  8610  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8611  000FC6  D001               	goto	l8796
  8612  000FC8  D00C               	goto	l8800
  8613  000FCA                     l8796:
  8614                           
  8615                           ; BSR set to: 0
  8616  000FCA  0E68               	movlw	104
  8617  000FCC  0100               	movlb	0	; () banked
  8618  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8619  000FD0  0EE4               	movlw	228
  8620  000FD2                     u9147:
  8621  000FD2  2EE8               	decfsz	wreg,f,c
  8622  000FD4  D7FE               	bra	u9147
  8623  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8624  000FD8  D7FC               	bra	u9147
  8625  000FDA  F000               	nop	
  8626  000FDC  0100               	movlb	0	; () banked
  8627  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8628  000FE0  D7EF               	goto	l8792
  8629  000FE2                     l8800:
  8630                           
  8631                           ; BSR set to: 0
  8632  000FE2  0100               	movlb	0	; () banked
  8633  000FE4  51F8               	movf	_logstate& (0+255),w,b
  8634  000FE6  0100               	movlb	0	; () banked
  8635  000FE8  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8636  000FEA  B4D8               	btfsc	status,2,c
  8637  000FEC  0012               	return	
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8641                           
  8642                           ; BSR set to: 0
  8643                           
  8644                           ; BSR set to: 0
  8645  000FEE  0E01               	movlw	1
  8646  000FF0  EC24  F02A         	call	_lcdInst
  8647  000FF4  0E68               	movlw	104
  8648  000FF6  0100               	movlb	0	; () banked
  8649  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8650  000FFA  0EE4               	movlw	228
  8651  000FFC                     u9157:
  8652  000FFC  2EE8               	decfsz	wreg,f,c
  8653  000FFE  D7FE               	bra	u9157
  8654  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8655  001002  D7FC               	bra	u9157
  8656  001004  F000               	nop	
  8657                           
  8658                           ;UI.c: 191: lcdInst(0b10000000);;
  8659  001006  0E80               	movlw	128
  8660  001008  EC24  F02A         	call	_lcdInst
  8661                           
  8662                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8663  00100C  0E4D               	movlw	low STR_26
  8664  00100E  0100               	movlb	0	; () banked
  8665  001010  6F8E               	movwf	printf@f& (0+255),b
  8666  001012  0EFD               	movlw	high STR_26
  8667  001014  0100               	movlb	0	; () banked
  8668  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8669  001018  EC00  F00B         	call	_printf	;wreg free
  8670                           
  8671                           ;UI.c: 193: lcdInst(0b11000000);;
  8672  00101C  0EC0               	movlw	192
  8673  00101E  EC24  F02A         	call	_lcdInst
  8674                           
  8675                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8676  001022  0E08               	movlw	low STR_27
  8677  001024  0100               	movlb	0	; () banked
  8678  001026  6F8E               	movwf	printf@f& (0+255),b
  8679  001028  0EFE               	movlw	high STR_27
  8680  00102A  0100               	movlb	0	; () banked
  8681  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8682  00102E  C067  F090         	movff	_log_count_can_no_lab,?_printf+2
  8683  001032  C068  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8684  001036  C069  F092         	movff	_log_count_can_w_lab,?_printf+4
  8685  00103A  C06A  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8686  00103E  EC00  F00B         	call	_printf	;wreg free
  8687                           
  8688                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8689  001042  0E00               	movlw	0
  8690  001044  0100               	movlb	0	; () banked
  8691  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8692  001048                     l8818:
  8693                           
  8694                           ; BSR set to: 0
  8695  001048  0E63               	movlw	99
  8696  00104A  0100               	movlb	0	; () banked
  8697  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8698  00104E  D001               	goto	l8822
  8699  001050  D00C               	goto	l8826
  8700  001052                     l8822:
  8701                           
  8702                           ; BSR set to: 0
  8703  001052  0E68               	movlw	104
  8704  001054  0100               	movlb	0	; () banked
  8705  001056  6FC4               	movwf	??_UI& (0+255),b
  8706  001058  0EE4               	movlw	228
  8707  00105A                     u9167:
  8708  00105A  2EE8               	decfsz	wreg,f,c
  8709  00105C  D7FE               	bra	u9167
  8710  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8711  001060  D7FC               	bra	u9167
  8712  001062  F000               	nop	
  8713  001064  0100               	movlb	0	; () banked
  8714  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8715  001068  D7EF               	goto	l8818
  8716  00106A                     l8826:
  8717                           
  8718                           ; BSR set to: 0
  8719  00106A  0100               	movlb	0	; () banked
  8720  00106C  51F8               	movf	_logstate& (0+255),w,b
  8721  00106E  0100               	movlb	0	; () banked
  8722  001070  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8723  001072  B4D8               	btfsc	status,2,c
  8724  001074  0012               	return	
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8728                           
  8729                           ; BSR set to: 0
  8730                           
  8731                           ; BSR set to: 0
  8732  001076  0E00               	movlw	0
  8733  001078  0100               	movlb	0	; () banked
  8734  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8735  00107C                     l8832:
  8736                           
  8737                           ; BSR set to: 0
  8738  00107C  0E63               	movlw	99
  8739  00107E  0100               	movlb	0	; () banked
  8740  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8741  001082  D001               	goto	l8836
  8742  001084  D00C               	goto	l8840
  8743  001086                     l8836:
  8744                           
  8745                           ; BSR set to: 0
  8746  001086  0E68               	movlw	104
  8747  001088  0100               	movlb	0	; () banked
  8748  00108A  6FC4               	movwf	??_UI& (0+255),b
  8749  00108C  0EE4               	movlw	228
  8750  00108E                     u9177:
  8751  00108E  2EE8               	decfsz	wreg,f,c
  8752  001090  D7FE               	bra	u9177
  8753  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8754  001094  D7FC               	bra	u9177
  8755  001096  F000               	nop	
  8756  001098  0100               	movlb	0	; () banked
  8757  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8758  00109C  D7EF               	goto	l8832
  8759  00109E                     l8840:
  8760                           
  8761                           ; BSR set to: 0
  8762  00109E  0100               	movlb	0	; () banked
  8763  0010A0  51F8               	movf	_logstate& (0+255),w,b
  8764  0010A2  0100               	movlb	0	; () banked
  8765  0010A4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8766  0010A6  B4D8               	btfsc	status,2,c
  8767  0010A8  0012               	return	
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8771                           
  8772                           ; BSR set to: 0
  8773                           
  8774                           ; BSR set to: 0
  8775  0010AA  0E01               	movlw	1
  8776  0010AC  EC24  F02A         	call	_lcdInst
  8777  0010B0  0E68               	movlw	104
  8778  0010B2  0100               	movlb	0	; () banked
  8779  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8780  0010B6  0EE4               	movlw	228
  8781  0010B8                     u9187:
  8782  0010B8  2EE8               	decfsz	wreg,f,c
  8783  0010BA  D7FE               	bra	u9187
  8784  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8785  0010BE  D7FC               	bra	u9187
  8786  0010C0  F000               	nop	
  8787                           
  8788                           ;UI.c: 200: lcdInst(0b10000000);;
  8789  0010C2  0E80               	movlw	128
  8790  0010C4  EC24  F02A         	call	_lcdInst
  8791                           
  8792                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8793  0010C8  0E5E               	movlw	low STR_28
  8794  0010CA  0100               	movlb	0	; () banked
  8795  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8796  0010CE  0EFD               	movlw	high STR_28
  8797  0010D0  0100               	movlb	0	; () banked
  8798  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8799  0010D4  EC00  F00B         	call	_printf	;wreg free
  8800                           
  8801                           ;UI.c: 202: lcdInst(0b11000000);;
  8802  0010D8  0EC0               	movlw	192
  8803  0010DA  EC24  F02A         	call	_lcdInst
  8804                           
  8805                           ;UI.c: 203: printf("%d", log_count_total);
  8806  0010DE  0E16               	movlw	low (STR_27+14)
  8807  0010E0  0100               	movlb	0	; () banked
  8808  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8809  0010E4  0EFE               	movlw	high (STR_27+14)
  8810  0010E6  0100               	movlb	0	; () banked
  8811  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8812  0010EA  C06F  F090         	movff	_log_count_total,?_printf+2
  8813  0010EE  C070  F091         	movff	_log_count_total+1,?_printf+3
  8814  0010F2  EC00  F00B         	call	_printf	;wreg free
  8815                           
  8816                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8817  0010F6  0E00               	movlw	0
  8818  0010F8  0100               	movlb	0	; () banked
  8819  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8820  0010FC                     l8858:
  8821                           
  8822                           ; BSR set to: 0
  8823  0010FC  0E63               	movlw	99
  8824  0010FE  0100               	movlb	0	; () banked
  8825  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8826  001102  D001               	goto	l8862
  8827  001104  D00C               	goto	l8866
  8828  001106                     l8862:
  8829                           
  8830                           ; BSR set to: 0
  8831  001106  0E68               	movlw	104
  8832  001108  0100               	movlb	0	; () banked
  8833  00110A  6FC4               	movwf	??_UI& (0+255),b
  8834  00110C  0EE4               	movlw	228
  8835  00110E                     u9197:
  8836  00110E  2EE8               	decfsz	wreg,f,c
  8837  001110  D7FE               	bra	u9197
  8838  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8839  001114  D7FC               	bra	u9197
  8840  001116  F000               	nop	
  8841  001118  0100               	movlb	0	; () banked
  8842  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8843  00111C  D7EF               	goto	l8858
  8844  00111E                     l8866:
  8845                           
  8846                           ; BSR set to: 0
  8847  00111E  0100               	movlb	0	; () banked
  8848  001120  51F8               	movf	_logstate& (0+255),w,b
  8849  001122  0100               	movlb	0	; () banked
  8850  001124  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8851  001126  B4D8               	btfsc	status,2,c
  8852  001128  0012               	return	
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8856                           
  8857                           ; BSR set to: 0
  8858                           
  8859                           ; BSR set to: 0
  8860  00112A  0E00               	movlw	0
  8861  00112C  0100               	movlb	0	; () banked
  8862  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8863  001130                     l8872:
  8864                           
  8865                           ; BSR set to: 0
  8866  001130  0E63               	movlw	99
  8867  001132  0100               	movlb	0	; () banked
  8868  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8869  001136  D001               	goto	l8876
  8870  001138  D00C               	goto	l8880
  8871  00113A                     l8876:
  8872                           
  8873                           ; BSR set to: 0
  8874  00113A  0E68               	movlw	104
  8875  00113C  0100               	movlb	0	; () banked
  8876  00113E  6FC4               	movwf	??_UI& (0+255),b
  8877  001140  0EE4               	movlw	228
  8878  001142                     u9207:
  8879  001142  2EE8               	decfsz	wreg,f,c
  8880  001144  D7FE               	bra	u9207
  8881  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8882  001148  D7FC               	bra	u9207
  8883  00114A  F000               	nop	
  8884  00114C  0100               	movlb	0	; () banked
  8885  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8886  001150  D7EF               	goto	l8872
  8887  001152                     l8880:
  8888                           
  8889                           ; BSR set to: 0
  8890  001152  0100               	movlb	0	; () banked
  8891  001154  51F8               	movf	_logstate& (0+255),w,b
  8892  001156  0100               	movlb	0	; () banked
  8893  001158  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8894  00115A  B4D8               	btfsc	status,2,c
  8895  00115C  0012               	return	
  8896  00115E                     l8884:
  8897  00115E  0100               	movlb	0	; () banked
  8898  001160  51F8               	movf	_logstate& (0+255),w,b
  8899  001162  0100               	movlb	0	; () banked
  8900  001164  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8901  001166  B4D8               	btfsc	status,2,c
  8902  001168  0012               	return	
  8903  00116A  D44C               	goto	l8580
  8904  00116C                     __end_of_UI:
  8905                           	opt stack 0
  8906                           tblptru	equ	0xFF8
  8907                           tblptrh	equ	0xFF7
  8908                           tblptrl	equ	0xFF6
  8909                           tablat	equ	0xFF5
  8910                           prodh	equ	0xFF4
  8911                           prodl	equ	0xFF3
  8912                           intcon	equ	0xFF2
  8913                           intcon2	equ	0xFF1
  8914                           intcon3	equ	0xFF0
  8915                           postinc0	equ	0xFEE
  8916                           wreg	equ	0xFE8
  8917                           postdec1	equ	0xFE5
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           fsr2h	equ	0xFDA
  8923                           fsr2l	equ	0xFD9
  8924                           status	equ	0xFD8
  8925                           
  8926 ;; *************** function _printRTC *****************
  8927 ;; Defined at:
  8928 ;;		line 63 in file "RTC.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;		None
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  i               2   66[BANK0 ] int 
  8933 ;;  INT_time       14   46[BANK0 ] int [7]
  8934 ;;  month           4   62[BANK0 ] unsigned char [4]
  8935 ;;  RTC_month       2   60[BANK0 ] int 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  1    wreg      void 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;Total ram usage:       25 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:   10
  8952 ;; This function calls:
  8953 ;;		_getRTC
  8954 ;;		_lcdInst
  8955 ;;		_printf
  8956 ;;		_strcpy
  8957 ;; This function is called by:
  8958 ;;		_UI
  8959 ;;		_change_state_to_menu_start
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text24
  8964  002428                     __ptext24:
  8965                           	opt stack 0
  8966  002428                     _printRTC:
  8967                           	opt stack 18
  8968                           
  8969                           ;RTC.c: 64: getRTC();
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;incstack = 0
  8973  002428  ECF6  F022         	call	_getRTC	;wreg free
  8974                           
  8975                           ;RTC.c: 65: char month[] = "MMM";
  8976  00242C  C13F  F0BE         	movff	printRTC@F3223,printRTC@month
  8977  002430  C140  F0BF         	movff	printRTC@F3223+1,printRTC@month+1
  8978  002434  C141  F0C0         	movff	printRTC@F3223+2,printRTC@month+2
  8979  002438  C142  F0C1         	movff	printRTC@F3223+3,printRTC@month+3
  8980                           
  8981                           ;RTC.c: 66: int INT_time[7];
  8982                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8983  00243C  0E00               	movlw	0
  8984  00243E  0100               	movlb	0	; () banked
  8985  002440  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8986  002442  0E00               	movlw	0
  8987  002444  6FC2               	movwf	printRTC@i& (0+255),b
  8988                           
  8989                           ; BSR set to: 0
  8990  002446  0100               	movlb	0	; () banked
  8991  002448  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8992  00244A  D008               	goto	l6656
  8993  00244C  0100               	movlb	0	; () banked
  8994  00244E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8995  002450  E146               	bnz	l606
  8996  002452  0E07               	movlw	7
  8997  002454  0100               	movlb	0	; () banked
  8998  002456  5DC2               	subwf	printRTC@i& (0+255),w,b
  8999  002458  B0D8               	btfsc	status,0,c
  9000  00245A  D041               	goto	l606
  9001  00245C                     l6656:
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9005  00245C  0E1C               	movlw	low _time
  9006  00245E  0100               	movlb	0	; () banked
  9007  002460  25C2               	addwf	printRTC@i& (0+255),w,b
  9008  002462  6ED9               	movwf	fsr2l,c
  9009  002464  0E01               	movlw	high _time
  9010  002466  0100               	movlb	0	; () banked
  9011  002468  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9012  00246A  6EDA               	movwf	fsr2h,c
  9013  00246C  50DF               	movf	indf2,w,c
  9014  00246E  0100               	movlb	0	; () banked
  9015  002470  6FAB               	movwf	??_printRTC& (0+255),b
  9016  002472  0100               	movlb	0	; () banked
  9017  002474  3BAB               	swapf	??_printRTC& (0+255),f,b
  9018  002476  0E0F               	movlw	15
  9019  002478  17AB               	andwf	??_printRTC& (0+255),f,b
  9020  00247A  0E0F               	movlw	15
  9021  00247C  0100               	movlb	0	; () banked
  9022  00247E  17AB               	andwf	??_printRTC& (0+255),f,b
  9023  002480  0100               	movlb	0	; () banked
  9024  002482  51AB               	movf	??_printRTC& (0+255),w,b
  9025  002484  0D0A               	mullw	10
  9026  002486  0E1C               	movlw	low _time
  9027  002488  0100               	movlb	0	; () banked
  9028  00248A  25C2               	addwf	printRTC@i& (0+255),w,b
  9029  00248C  6ED9               	movwf	fsr2l,c
  9030  00248E  0E01               	movlw	high _time
  9031  002490  0100               	movlb	0	; () banked
  9032  002492  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9033  002494  6EDA               	movwf	fsr2h,c
  9034  002496  50DF               	movf	indf2,w,c
  9035  002498  0B0F               	andlw	15
  9036  00249A  0100               	movlb	0	; () banked
  9037  00249C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9038  00249E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9039  0024A0  50F3               	movf	prodl,w,c
  9040  0024A2  0100               	movlb	0	; () banked
  9041  0024A4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9042  0024A6  50F4               	movf	prodh,w,c
  9043  0024A8  0100               	movlb	0	; () banked
  9044  0024AA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9045  0024AC  90D8               	bcf	status,0,c
  9046  0024AE  0100               	movlb	0	; () banked
  9047  0024B0  35C2               	rlcf	printRTC@i& (0+255),w,b
  9048  0024B2  6ED9               	movwf	fsr2l,c
  9049  0024B4  0100               	movlb	0	; () banked
  9050  0024B6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9051  0024B8  6EDA               	movwf	fsr2h,c
  9052  0024BA  0EAE               	movlw	low printRTC@INT_time
  9053  0024BC  26D9               	addwf	fsr2l,f,c
  9054  0024BE  0E00               	movlw	high printRTC@INT_time
  9055  0024C0  22DA               	addwfc	fsr2h,f,c
  9056  0024C2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9057  0024C6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9058                           
  9059                           ; BSR set to: 0
  9060  0024CA  0100               	movlb	0	; () banked
  9061  0024CC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9062  0024CE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9063                           
  9064                           ; BSR set to: 0
  9065  0024D0  0100               	movlb	0	; () banked
  9066  0024D2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9067  0024D4  D7C3               	goto	l6656
  9068  0024D6  0100               	movlb	0	; () banked
  9069  0024D8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9070  0024DA  E101               	bnz	u5230
  9071  0024DC  D7BA               	goto	L9
  9072  0024DE                     u5230:
  9073  0024DE                     l606:
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;RTC.c: 69: }
  9077                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9078  0024DE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9079  0024E2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9080                           
  9081                           ;RTC.c: 71: switch(RTC_month){
  9082  0024E6  D0B4               	goto	l6688
  9083  0024E8                     l6662:
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;RTC.c: 73: strcpy(month, "JAN");
  9087  0024E8  0EBE               	movlw	low printRTC@month
  9088  0024EA  0100               	movlb	0	; () banked
  9089  0024EC  6F80               	movwf	strcpy@to& (0+255),b
  9090  0024EE  0E00               	movlw	high printRTC@month
  9091  0024F0  0100               	movlb	0	; () banked
  9092  0024F2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9093  0024F4  0EDB               	movlw	low STR_8
  9094  0024F6  0100               	movlb	0	; () banked
  9095  0024F8  6F82               	movwf	strcpy@from& (0+255),b
  9096  0024FA  0EFF               	movlw	high STR_8
  9097  0024FC  0100               	movlb	0	; () banked
  9098  0024FE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9099  002500  EC80  F027         	call	_strcpy	;wreg free
  9100                           
  9101                           ;RTC.c: 74: break;
  9102  002504  D0D4               	goto	l6690
  9103  002506                     l6664:
  9104                           
  9105                           ;RTC.c: 76: strcpy(month, "FEB");
  9106  002506  0EBE               	movlw	low printRTC@month
  9107  002508  0100               	movlb	0	; () banked
  9108  00250A  6F80               	movwf	strcpy@to& (0+255),b
  9109  00250C  0E00               	movlw	high printRTC@month
  9110  00250E  0100               	movlb	0	; () banked
  9111  002510  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9112  002512  0ECB               	movlw	low STR_9
  9113  002514  0100               	movlb	0	; () banked
  9114  002516  6F82               	movwf	strcpy@from& (0+255),b
  9115  002518  0EFF               	movlw	high STR_9
  9116  00251A  0100               	movlb	0	; () banked
  9117  00251C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9118  00251E  EC80  F027         	call	_strcpy	;wreg free
  9119                           
  9120                           ;RTC.c: 77: break;
  9121  002522  D0C5               	goto	l6690
  9122  002524                     l6666:
  9123                           
  9124                           ;RTC.c: 79: strcpy(month, "MAR");
  9125  002524  0EBE               	movlw	low printRTC@month
  9126  002526  0100               	movlb	0	; () banked
  9127  002528  6F80               	movwf	strcpy@to& (0+255),b
  9128  00252A  0E00               	movlw	high printRTC@month
  9129  00252C  0100               	movlb	0	; () banked
  9130  00252E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9131  002530  0EE7               	movlw	low STR_10
  9132  002532  0100               	movlb	0	; () banked
  9133  002534  6F82               	movwf	strcpy@from& (0+255),b
  9134  002536  0EFF               	movlw	high STR_10
  9135  002538  0100               	movlb	0	; () banked
  9136  00253A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9137  00253C  EC80  F027         	call	_strcpy	;wreg free
  9138                           
  9139                           ;RTC.c: 80: break;
  9140  002540  D0B6               	goto	l6690
  9141  002542                     l6668:
  9142                           
  9143                           ;RTC.c: 82: strcpy(month, "APR");
  9144  002542  0EBE               	movlw	low printRTC@month
  9145  002544  0100               	movlb	0	; () banked
  9146  002546  6F80               	movwf	strcpy@to& (0+255),b
  9147  002548  0E00               	movlw	high printRTC@month
  9148  00254A  0100               	movlb	0	; () banked
  9149  00254C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9150  00254E  0EEB               	movlw	low STR_11
  9151  002550  0100               	movlb	0	; () banked
  9152  002552  6F82               	movwf	strcpy@from& (0+255),b
  9153  002554  0EFF               	movlw	high STR_11
  9154  002556  0100               	movlb	0	; () banked
  9155  002558  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9156  00255A  EC80  F027         	call	_strcpy	;wreg free
  9157                           
  9158                           ;RTC.c: 83: break;
  9159  00255E  D0A7               	goto	l6690
  9160  002560                     l6670:
  9161                           
  9162                           ;RTC.c: 85: strcpy(month, "MAY");
  9163  002560  0EBE               	movlw	low printRTC@month
  9164  002562  0100               	movlb	0	; () banked
  9165  002564  6F80               	movwf	strcpy@to& (0+255),b
  9166  002566  0E00               	movlw	high printRTC@month
  9167  002568  0100               	movlb	0	; () banked
  9168  00256A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9169  00256C  0EFB               	movlw	low STR_12
  9170  00256E  0100               	movlb	0	; () banked
  9171  002570  6F82               	movwf	strcpy@from& (0+255),b
  9172  002572  0EFF               	movlw	high STR_12
  9173  002574  0100               	movlb	0	; () banked
  9174  002576  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9175  002578  EC80  F027         	call	_strcpy	;wreg free
  9176                           
  9177                           ;RTC.c: 86: break;
  9178  00257C  D098               	goto	l6690
  9179  00257E                     l6672:
  9180                           
  9181                           ;RTC.c: 88: strcpy(month, "JUN");
  9182  00257E  0EBE               	movlw	low printRTC@month
  9183  002580  0100               	movlb	0	; () banked
  9184  002582  6F80               	movwf	strcpy@to& (0+255),b
  9185  002584  0E00               	movlw	high printRTC@month
  9186  002586  0100               	movlb	0	; () banked
  9187  002588  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9188  00258A  0EDF               	movlw	low STR_13
  9189  00258C  0100               	movlb	0	; () banked
  9190  00258E  6F82               	movwf	strcpy@from& (0+255),b
  9191  002590  0EFF               	movlw	high STR_13
  9192  002592  0100               	movlb	0	; () banked
  9193  002594  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9194  002596  EC80  F027         	call	_strcpy	;wreg free
  9195                           
  9196                           ;RTC.c: 89: break;
  9197  00259A  D089               	goto	l6690
  9198  00259C                     l6674:
  9199                           
  9200                           ;RTC.c: 91: strcpy(month, "JUL");
  9201  00259C  0EBE               	movlw	low printRTC@month
  9202  00259E  0100               	movlb	0	; () banked
  9203  0025A0  6F80               	movwf	strcpy@to& (0+255),b
  9204  0025A2  0E00               	movlw	high printRTC@month
  9205  0025A4  0100               	movlb	0	; () banked
  9206  0025A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9207  0025A8  0ED7               	movlw	low STR_14
  9208  0025AA  0100               	movlb	0	; () banked
  9209  0025AC  6F82               	movwf	strcpy@from& (0+255),b
  9210  0025AE  0EFF               	movlw	high STR_14
  9211  0025B0  0100               	movlb	0	; () banked
  9212  0025B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9213  0025B4  EC80  F027         	call	_strcpy	;wreg free
  9214                           
  9215                           ;RTC.c: 92: break;
  9216  0025B8  D07A               	goto	l6690
  9217  0025BA                     l6676:
  9218                           
  9219                           ;RTC.c: 94: strcpy(month, "AUG");
  9220  0025BA  0EBE               	movlw	low printRTC@month
  9221  0025BC  0100               	movlb	0	; () banked
  9222  0025BE  6F80               	movwf	strcpy@to& (0+255),b
  9223  0025C0  0E00               	movlw	high printRTC@month
  9224  0025C2  0100               	movlb	0	; () banked
  9225  0025C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9226  0025C6  0ED3               	movlw	low STR_15
  9227  0025C8  0100               	movlb	0	; () banked
  9228  0025CA  6F82               	movwf	strcpy@from& (0+255),b
  9229  0025CC  0EFF               	movlw	high STR_15
  9230  0025CE  0100               	movlb	0	; () banked
  9231  0025D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9232  0025D2  EC80  F027         	call	_strcpy	;wreg free
  9233                           
  9234                           ;RTC.c: 95: break;
  9235  0025D6  D06B               	goto	l6690
  9236  0025D8                     l6678:
  9237                           
  9238                           ;RTC.c: 97: strcpy(month, "SEP");
  9239  0025D8  0EBE               	movlw	low printRTC@month
  9240  0025DA  0100               	movlb	0	; () banked
  9241  0025DC  6F80               	movwf	strcpy@to& (0+255),b
  9242  0025DE  0E00               	movlw	high printRTC@month
  9243  0025E0  0100               	movlb	0	; () banked
  9244  0025E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9245  0025E4  0EE3               	movlw	low STR_16
  9246  0025E6  0100               	movlb	0	; () banked
  9247  0025E8  6F82               	movwf	strcpy@from& (0+255),b
  9248  0025EA  0EFF               	movlw	high STR_16
  9249  0025EC  0100               	movlb	0	; () banked
  9250  0025EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9251  0025F0  EC80  F027         	call	_strcpy	;wreg free
  9252                           
  9253                           ;RTC.c: 98: break;
  9254  0025F4  D05C               	goto	l6690
  9255  0025F6                     l6680:
  9256                           
  9257                           ;RTC.c: 100: strcpy(month, "OCT");
  9258  0025F6  0EBE               	movlw	low printRTC@month
  9259  0025F8  0100               	movlb	0	; () banked
  9260  0025FA  6F80               	movwf	strcpy@to& (0+255),b
  9261  0025FC  0E00               	movlw	high printRTC@month
  9262  0025FE  0100               	movlb	0	; () banked
  9263  002600  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9264  002602  0EF3               	movlw	low STR_17
  9265  002604  0100               	movlb	0	; () banked
  9266  002606  6F82               	movwf	strcpy@from& (0+255),b
  9267  002608  0EFF               	movlw	high STR_17
  9268  00260A  0100               	movlb	0	; () banked
  9269  00260C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9270  00260E  EC80  F027         	call	_strcpy	;wreg free
  9271                           
  9272                           ;RTC.c: 101: break;
  9273  002612  D04D               	goto	l6690
  9274  002614                     l6682:
  9275                           
  9276                           ;RTC.c: 103: strcpy(month, "NOV");
  9277  002614  0EBE               	movlw	low printRTC@month
  9278  002616  0100               	movlb	0	; () banked
  9279  002618  6F80               	movwf	strcpy@to& (0+255),b
  9280  00261A  0E00               	movlw	high printRTC@month
  9281  00261C  0100               	movlb	0	; () banked
  9282  00261E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9283  002620  0EF7               	movlw	low STR_18
  9284  002622  0100               	movlb	0	; () banked
  9285  002624  6F82               	movwf	strcpy@from& (0+255),b
  9286  002626  0EFF               	movlw	high STR_18
  9287  002628  0100               	movlb	0	; () banked
  9288  00262A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9289  00262C  EC80  F027         	call	_strcpy	;wreg free
  9290                           
  9291                           ;RTC.c: 104: break;
  9292  002630  D03E               	goto	l6690
  9293  002632                     l6684:
  9294                           
  9295                           ;RTC.c: 106: strcpy(month, "DEC");
  9296  002632  0EBE               	movlw	low printRTC@month
  9297  002634  0100               	movlb	0	; () banked
  9298  002636  6F80               	movwf	strcpy@to& (0+255),b
  9299  002638  0E00               	movlw	high printRTC@month
  9300  00263A  0100               	movlb	0	; () banked
  9301  00263C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9302  00263E  0ECF               	movlw	low STR_19
  9303  002640  0100               	movlb	0	; () banked
  9304  002642  6F82               	movwf	strcpy@from& (0+255),b
  9305  002644  0EFF               	movlw	high STR_19
  9306  002646  0100               	movlb	0	; () banked
  9307  002648  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9308  00264A  EC80  F027         	call	_strcpy	;wreg free
  9309                           
  9310                           ;RTC.c: 108: }
  9311                           
  9312                           ;RTC.c: 107: break;
  9313  00264E  D02F               	goto	l6690
  9314  002650                     l6688:
  9315  002650  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9316  002654  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9317                           
  9318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9319                           ; Switch size 1, requested type "space"
  9320                           ; Number of cases is 1, Range of values is 0 to 0
  9321                           ; switch strategies available:
  9322                           ; Name         Instructions Cycles
  9323                           ; simple_byte            4     3 (average)
  9324                           ;	Chosen strategy is simple_byte
  9325  002658  0100               	movlb	0	; () banked
  9326  00265A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9327  00265C  0A00               	xorlw	0	; case 0
  9328  00265E  A4D8               	btfss	status,2,c
  9329  002660  D026               	goto	l6690
  9330                           
  9331                           ; BSR set to: 0
  9332                           ; Switch size 1, requested type "space"
  9333                           ; Number of cases is 12, Range of values is 1 to 12
  9334                           ; switch strategies available:
  9335                           ; Name         Instructions Cycles
  9336                           ; simple_byte           37    19 (average)
  9337                           ;	Chosen strategy is simple_byte
  9338  002662  0100               	movlb	0	; () banked
  9339  002664  51AB               	movf	??_printRTC& (0+255),w,b
  9340  002666  0A01               	xorlw	1	; case 1
  9341  002668  B4D8               	btfsc	status,2,c
  9342  00266A  D73E               	goto	l6662
  9343  00266C  0A03               	xorlw	3	; case 2
  9344  00266E  B4D8               	btfsc	status,2,c
  9345  002670  D74A               	goto	l6664
  9346  002672  0A01               	xorlw	1	; case 3
  9347  002674  B4D8               	btfsc	status,2,c
  9348  002676  D756               	goto	l6666
  9349  002678  0A07               	xorlw	7	; case 4
  9350  00267A  B4D8               	btfsc	status,2,c
  9351  00267C  D762               	goto	l6668
  9352  00267E  0A01               	xorlw	1	; case 5
  9353  002680  B4D8               	btfsc	status,2,c
  9354  002682  D76E               	goto	l6670
  9355  002684  0A03               	xorlw	3	; case 6
  9356  002686  B4D8               	btfsc	status,2,c
  9357  002688  D77A               	goto	l6672
  9358  00268A  0A01               	xorlw	1	; case 7
  9359  00268C  B4D8               	btfsc	status,2,c
  9360  00268E  D786               	goto	l6674
  9361  002690  0A0F               	xorlw	15	; case 8
  9362  002692  B4D8               	btfsc	status,2,c
  9363  002694  D792               	goto	l6676
  9364  002696  0A01               	xorlw	1	; case 9
  9365  002698  B4D8               	btfsc	status,2,c
  9366  00269A  D79E               	goto	l6678
  9367  00269C  0A03               	xorlw	3	; case 10
  9368  00269E  B4D8               	btfsc	status,2,c
  9369  0026A0  D7AA               	goto	l6680
  9370  0026A2  0A01               	xorlw	1	; case 11
  9371  0026A4  B4D8               	btfsc	status,2,c
  9372  0026A6  D7B6               	goto	l6682
  9373  0026A8  0A07               	xorlw	7	; case 12
  9374  0026AA  B4D8               	btfsc	status,2,c
  9375  0026AC  D7C2               	goto	l6684
  9376  0026AE                     l6690:
  9377                           
  9378                           ;RTC.c: 109: lcdInst(0b10000000);;
  9379  0026AE  0E80               	movlw	128
  9380  0026B0  EC24  F02A         	call	_lcdInst
  9381                           
  9382                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9383  0026B4  0E0A               	movlw	low STR_21
  9384  0026B6  0100               	movlb	0	; () banked
  9385  0026B8  6F8E               	movwf	printf@f& (0+255),b
  9386  0026BA  0EFB               	movlw	high STR_21
  9387  0026BC  0100               	movlb	0	; () banked
  9388  0026BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9389  0026C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9390  0026C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9391  0026C8  0EBE               	movlw	low printRTC@month
  9392  0026CA  0100               	movlb	0	; () banked
  9393  0026CC  6F92               	movwf	(?_printf+4)& (0+255),b
  9394  0026CE  0E00               	movlw	high printRTC@month
  9395  0026D0  0100               	movlb	0	; () banked
  9396  0026D2  6F93               	movwf	(?_printf+5)& (0+255),b
  9397  0026D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9398  0026D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9399  0026DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9400  0026E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9401  0026E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9402  0026E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9403  0026EC  EC00  F00B         	call	_printf	;wreg free
  9404  0026F0  0012               	return		;funcret
  9405  0026F2                     __end_of_printRTC:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           intcon	equ	0xFF2
  9414                           intcon2	equ	0xFF1
  9415                           intcon3	equ	0xFF0
  9416                           postinc0	equ	0xFEE
  9417                           wreg	equ	0xFE8
  9418                           postdec1	equ	0xFE5
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function _strcpy *****************
  9428 ;; Defined at:
  9429 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9432 ;;		 -> printRTC@month(4), UI@month(4), 
  9433 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9434 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9435 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9436 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9437 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9438 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9439 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9440 ;;		 -> STR_8(4), 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9443 ;;		 -> printRTC@month(4), UI@month(4), 
  9444 ;; Return value:  Size  Location     Type
  9445 ;;                  2    0[BANK0 ] PTR unsigned char 
  9446 ;; Registers used:
  9447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9453 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;Total ram usage:        6 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; Hardware stack levels required when called:    7
  9460 ;; This function calls:
  9461 ;;		Nothing
  9462 ;; This function is called by:
  9463 ;;		_UI
  9464 ;;		_printRTC
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	text25
  9469  004F00                     __ptext25:
  9470                           	opt stack 0
  9471  004F00                     _strcpy:
  9472                           	opt stack 20
  9473                           
  9474                           ;incstack = 0
  9475  004F00  C080  F084         	movff	strcpy@to,strcpy@cp
  9476  004F04  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9477  004F08  D006               	goto	l6400
  9478  004F0A                     l6398:
  9479  004F0A  0100               	movlb	0	; () banked
  9480  004F0C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9481  004F0E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9482  004F10  0100               	movlb	0	; () banked
  9483  004F12  4B82               	infsnz	strcpy@from& (0+255),f,b
  9484  004F14  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9485  004F16                     l6400:
  9486  004F16  C082  FFF6         	movff	strcpy@from,tblptrl
  9487  004F1A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9488  004F1E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9489  004F1E  6AF8               	clrf	tblptru,c
  9490  004F20                     	endif
  9491  004F20                     	if	0	;tblptru may be non-zero
  9492  004F20                     	endif
  9493  004F20  C084  FFD9         	movff	strcpy@cp,fsr2l
  9494  004F24  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9495  004F28  0008               	tblrd		*
  9496  004F2A  CFF5 FFDF          	movff	tablat,indf2
  9497  004F2E  50DF               	movf	indf2,w,c
  9498  004F30  B4D8               	btfsc	status,2,c
  9499  004F32  0012               	return	
  9500  004F34  D7EA               	goto	l6398
  9501  004F36                     __end_of_strcpy:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           intcon2	equ	0xFF1
  9511                           intcon3	equ	0xFF0
  9512                           postinc0	equ	0xFEE
  9513                           wreg	equ	0xFE8
  9514                           postdec1	equ	0xFE5
  9515                           fsr1l	equ	0xFE1
  9516                           indf2	equ	0xFDF
  9517                           postinc2	equ	0xFDE
  9518                           postdec2	equ	0xFDD
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function _getRTC *****************
  9524 ;; Defined at:
  9525 ;;		line 44 in file "RTC.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;		None
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;  i               2    3[BANK0 ] int 
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  1    wreg      void 
  9532 ;; Registers used:
  9533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9543 ;;Total ram usage:        2 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; Hardware stack levels required when called:    9
  9546 ;; This function calls:
  9547 ;;		_I2C_Master_Read
  9548 ;;		_I2C_Master_Start
  9549 ;;		_I2C_Master_Stop
  9550 ;;		_I2C_Master_Write
  9551 ;; This function is called by:
  9552 ;;		_printRTC
  9553 ;;		_initSortTimer
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           	psect	text26
  9558  0045EC                     __ptext26:
  9559                           	opt stack 0
  9560  0045EC                     _getRTC:
  9561                           	opt stack 18
  9562                           
  9563                           ;RTC.c: 48: I2C_Master_Start();
  9564                           
  9565                           ;incstack = 0
  9566  0045EC  EC4A  F02A         	call	_I2C_Master_Start	;wreg free
  9567                           
  9568                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9569  0045F0  0E00               	movlw	0
  9570  0045F2  0100               	movlb	0	; () banked
  9571  0045F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9572  0045F6  0ED0               	movlw	208
  9573  0045F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9574  0045FA  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  9575                           
  9576                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9577  0045FE  0E00               	movlw	0
  9578  004600  0100               	movlb	0	; () banked
  9579  004602  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9580  004604  0E00               	movlw	0
  9581  004606  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9582  004608  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  9583                           
  9584                           ;RTC.c: 51: I2C_Master_Stop();
  9585  00460C  EC46  F02A         	call	_I2C_Master_Stop	;wreg free
  9586                           
  9587                           ;RTC.c: 54: I2C_Master_Start();
  9588  004610  EC4A  F02A         	call	_I2C_Master_Start	;wreg free
  9589                           
  9590                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9591  004614  0E00               	movlw	0
  9592  004616  0100               	movlb	0	; () banked
  9593  004618  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9594  00461A  0ED1               	movlw	209
  9595  00461C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9596  00461E  EC38  F02A         	call	_I2C_Master_Write	;wreg free
  9597                           
  9598                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9599  004622  0E00               	movlw	0
  9600  004624  0100               	movlb	0	; () banked
  9601  004626  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9602  004628  0E00               	movlw	0
  9603  00462A  6F83               	movwf	getRTC@i& (0+255),b
  9604  00462C                     l6406:
  9605                           
  9606                           ; BSR set to: 0
  9607  00462C  0100               	movlb	0	; () banked
  9608  00462E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9609  004630  D008               	goto	l6410
  9610  004632  0100               	movlb	0	; () banked
  9611  004634  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9612  004636  E115               	bnz	l6416
  9613  004638  0E06               	movlw	6
  9614  00463A  0100               	movlb	0	; () banked
  9615  00463C  5D83               	subwf	getRTC@i& (0+255),w,b
  9616  00463E  B0D8               	btfsc	status,0,c
  9617  004640  D010               	goto	l6416
  9618  004642                     l6410:
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9622  004642  0E1C               	movlw	low _time
  9623  004644  0100               	movlb	0	; () banked
  9624  004646  2583               	addwf	getRTC@i& (0+255),w,b
  9625  004648  6ED9               	movwf	fsr2l,c
  9626  00464A  0E01               	movlw	high _time
  9627  00464C  0100               	movlb	0	; () banked
  9628  00464E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9629  004650  6EDA               	movwf	fsr2h,c
  9630  004652  0E01               	movlw	1
  9631  004654  ECD7  F028         	call	_I2C_Master_Read
  9632  004658  6EDF               	movwf	indf2,c
  9633  00465A  0100               	movlb	0	; () banked
  9634  00465C  4B83               	infsnz	getRTC@i& (0+255),f,b
  9635  00465E  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9636  004660  D7E5               	goto	l6406
  9637  004662                     l6416:
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;RTC.c: 58: }
  9641                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9642  004662  0E00               	movlw	0
  9643  004664  ECD7  F028         	call	_I2C_Master_Read
  9644  004668  0101               	movlb	1	; () banked
  9645  00466A  6F22               	movwf	(_time+6)& (0+255),b
  9646                           
  9647                           ;RTC.c: 60: I2C_Master_Stop();
  9648  00466C  EC46  F02A         	call	_I2C_Master_Stop	;wreg free
  9649  004670  0012               	return		;funcret
  9650  004672                     __end_of_getRTC:
  9651                           	opt stack 0
  9652                           tblptru	equ	0xFF8
  9653                           tblptrh	equ	0xFF7
  9654                           tblptrl	equ	0xFF6
  9655                           tablat	equ	0xFF5
  9656                           prodh	equ	0xFF4
  9657                           prodl	equ	0xFF3
  9658                           intcon	equ	0xFF2
  9659                           intcon2	equ	0xFF1
  9660                           intcon3	equ	0xFF0
  9661                           postinc0	equ	0xFEE
  9662                           wreg	equ	0xFE8
  9663                           postdec1	equ	0xFE5
  9664                           fsr1l	equ	0xFE1
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8
  9671                           
  9672 ;; *************** function _I2C_Master_Write *****************
  9673 ;; Defined at:
  9674 ;;		line 49 in file "I2C.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  d               2    1[BANK0 ] unsigned int 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  1    wreg      void 
  9681 ;; Registers used:
  9682 ;;		wreg, status,2, status,0, cstack
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;Total ram usage:        2 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    8
  9695 ;; This function calls:
  9696 ;;		_I2C_Master_Wait
  9697 ;; This function is called by:
  9698 ;;		_loadRTC
  9699 ;;		_getRTC
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           	psect	text27
  9704  005470                     __ptext27:
  9705                           	opt stack 0
  9706  005470                     _I2C_Master_Write:
  9707                           	opt stack 18
  9708                           
  9709                           ;I2C.c: 51: I2C_Master_Wait();
  9710                           
  9711                           ;incstack = 0
  9712  005470  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9713                           
  9714                           ;I2C.c: 52: SSPBUF = d;
  9715  005474  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9716  005478  0012               	return		;funcret
  9717  00547A                     __end_of_I2C_Master_Write:
  9718                           	opt stack 0
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           intcon2	equ	0xFF1
  9727                           intcon3	equ	0xFF0
  9728                           postinc0	equ	0xFEE
  9729                           wreg	equ	0xFE8
  9730                           postdec1	equ	0xFE5
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function _I2C_Master_Stop *****************
  9740 ;; Defined at:
  9741 ;;		line 43 in file "I2C.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;		None
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;		None
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  1    wreg      void 
  9748 ;; Registers used:
  9749 ;;		wreg, status,2, status,0, cstack
  9750 ;; Tracked objects:
  9751 ;;		On entry : 0/0
  9752 ;;		On exit  : 0/0
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;Total ram usage:        0 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; Hardware stack levels required when called:    8
  9762 ;; This function calls:
  9763 ;;		_I2C_Master_Wait
  9764 ;; This function is called by:
  9765 ;;		_loadRTC
  9766 ;;		_getRTC
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           	psect	text28
  9771  00548C                     __ptext28:
  9772                           	opt stack 0
  9773  00548C                     _I2C_Master_Stop:
  9774                           	opt stack 18
  9775                           
  9776                           ;I2C.c: 45: I2C_Master_Wait();
  9777                           
  9778                           ;incstack = 0
  9779  00548C  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9780                           
  9781                           ;I2C.c: 46: PEN = 1;
  9782  005490  84C5               	bsf	4037,2,c	;volatile
  9783  005492  0012               	return		;funcret
  9784  005494                     __end_of_I2C_Master_Stop:
  9785                           	opt stack 0
  9786                           tblptru	equ	0xFF8
  9787                           tblptrh	equ	0xFF7
  9788                           tblptrl	equ	0xFF6
  9789                           tablat	equ	0xFF5
  9790                           prodh	equ	0xFF4
  9791                           prodl	equ	0xFF3
  9792                           intcon	equ	0xFF2
  9793                           intcon2	equ	0xFF1
  9794                           intcon3	equ	0xFF0
  9795                           postinc0	equ	0xFEE
  9796                           wreg	equ	0xFE8
  9797                           postdec1	equ	0xFE5
  9798                           fsr1l	equ	0xFE1
  9799                           indf2	equ	0xFDF
  9800                           postinc2	equ	0xFDE
  9801                           postdec2	equ	0xFDD
  9802                           fsr2h	equ	0xFDA
  9803                           fsr2l	equ	0xFD9
  9804                           status	equ	0xFD8
  9805                           
  9806 ;; *************** function _I2C_Master_Start *****************
  9807 ;; Defined at:
  9808 ;;		line 31 in file "I2C.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;		None
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		wreg, status,2, status,0, cstack
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    8
  9829 ;; This function calls:
  9830 ;;		_I2C_Master_Wait
  9831 ;; This function is called by:
  9832 ;;		_loadRTC
  9833 ;;		_getRTC
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text29
  9838  005494                     __ptext29:
  9839                           	opt stack 0
  9840  005494                     _I2C_Master_Start:
  9841                           	opt stack 18
  9842                           
  9843                           ;I2C.c: 33: I2C_Master_Wait();
  9844                           
  9845                           ;incstack = 0
  9846  005494  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9847                           
  9848                           ;I2C.c: 34: SEN = 1;
  9849  005498  80C5               	bsf	4037,0,c	;volatile
  9850  00549A  0012               	return		;funcret
  9851  00549C                     __end_of_I2C_Master_Start:
  9852                           	opt stack 0
  9853                           tblptru	equ	0xFF8
  9854                           tblptrh	equ	0xFF7
  9855                           tblptrl	equ	0xFF6
  9856                           tablat	equ	0xFF5
  9857                           prodh	equ	0xFF4
  9858                           prodl	equ	0xFF3
  9859                           intcon	equ	0xFF2
  9860                           intcon2	equ	0xFF1
  9861                           intcon3	equ	0xFF0
  9862                           postinc0	equ	0xFEE
  9863                           wreg	equ	0xFE8
  9864                           postdec1	equ	0xFE5
  9865                           fsr1l	equ	0xFE1
  9866                           indf2	equ	0xFDF
  9867                           postinc2	equ	0xFDE
  9868                           postdec2	equ	0xFDD
  9869                           fsr2h	equ	0xFDA
  9870                           fsr2l	equ	0xFD9
  9871                           status	equ	0xFD8
  9872                           
  9873 ;; *************** function _I2C_Master_Read *****************
  9874 ;; Defined at:
  9875 ;;		line 55 in file "I2C.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  a               1    wreg     unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  a               1    1[BANK0 ] unsigned char 
  9880 ;;  temp            1    2[BANK0 ] unsigned char 
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      unsigned char 
  9883 ;; Registers used:
  9884 ;;		wreg, status,2, status,0, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;Total ram usage:        2 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    8
  9897 ;; This function calls:
  9898 ;;		_I2C_Master_Wait
  9899 ;; This function is called by:
  9900 ;;		_getRTC
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text30
  9905  0051AE                     __ptext30:
  9906                           	opt stack 0
  9907  0051AE                     _I2C_Master_Read:
  9908                           	opt stack 18
  9909                           
  9910                           ;incstack = 0
  9911                           ;I2C_Master_Read@a stored from wreg
  9912  0051AE  0100               	movlb	0	; () banked
  9913  0051B0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9914                           
  9915                           ;I2C.c: 57: unsigned char temp;
  9916                           ;I2C.c: 58: I2C_Master_Wait();
  9917  0051B2  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9918                           
  9919                           ;I2C.c: 59: RCEN = 1;
  9920  0051B6  86C5               	bsf	4037,3,c	;volatile
  9921                           
  9922                           ;I2C.c: 60: I2C_Master_Wait();
  9923  0051B8  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9924                           
  9925                           ;I2C.c: 61: temp = SSPBUF;
  9926  0051BC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9927                           
  9928                           ;I2C.c: 62: I2C_Master_Wait();
  9929  0051C0  EC09  F02A         	call	_I2C_Master_Wait	;wreg free
  9930                           
  9931                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9932  0051C4  0100               	movlb	0	; () banked
  9933  0051C6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9934  0051C8  0100               	movlb	0	; () banked
  9935  0051CA  A4D8               	btfss	status,2,c
  9936  0051CC  D002               	goto	u4320
  9937  0051CE  8AC5               	bsf	4037,5,c	;volatile
  9938  0051D0  D001               	goto	l6094
  9939  0051D2                     u4320:
  9940  0051D2  9AC5               	bcf	4037,5,c	;volatile
  9941  0051D4                     l6094:
  9942                           
  9943                           ;I2C.c: 64: ACKEN = 1;
  9944  0051D4  88C5               	bsf	4037,4,c	;volatile
  9945                           
  9946                           ;I2C.c: 65: return temp;
  9947  0051D6  0100               	movlb	0	; () banked
  9948  0051D8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9949  0051DA  0012               	return	
  9950  0051DC                     __end_of_I2C_Master_Read:
  9951                           	opt stack 0
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           intcon2	equ	0xFF1
  9960                           intcon3	equ	0xFF0
  9961                           postinc0	equ	0xFEE
  9962                           wreg	equ	0xFE8
  9963                           postdec1	equ	0xFE5
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972 ;; *************** function _I2C_Master_Wait *****************
  9973 ;; Defined at:
  9974 ;;		line 26 in file "I2C.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;		None
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;		None
  9979 ;; Return value:  Size  Location     Type
  9980 ;;                  1    wreg      void 
  9981 ;; Registers used:
  9982 ;;		wreg, status,2, status,0
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;Total ram usage:        1 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:    7
  9995 ;; This function calls:
  9996 ;;		Nothing
  9997 ;; This function is called by:
  9998 ;;		_I2C_Master_Start
  9999 ;;		_I2C_Master_Stop
 10000 ;;		_I2C_Master_Write
 10001 ;;		_I2C_Master_Read
 10002 ;;		_I2C_Master_RepeatedStart
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           	psect	text31
 10007  005412                     __ptext31:
 10008                           	opt stack 0
 10009  005412                     _I2C_Master_Wait:
 10010                           	opt stack 18
 10011  005412                     l66:
 10012  005412  B4C7               	btfsc	4039,2,c	;volatile
 10013  005414  D7FE               	goto	l66
 10014  005416  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10015  00541A  0E1F               	movlw	31
 10016  00541C  0100               	movlb	0	; () banked
 10017  00541E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10018  005420  B4D8               	btfsc	status,2,c
 10019  005422  0012               	return	
 10020  005424  D7F6               	goto	l66
 10021  005426                     __end_of_I2C_Master_Wait:
 10022                           	opt stack 0
 10023                           tblptru	equ	0xFF8
 10024                           tblptrh	equ	0xFF7
 10025                           tblptrl	equ	0xFF6
 10026                           tablat	equ	0xFF5
 10027                           prodh	equ	0xFF4
 10028                           prodl	equ	0xFF3
 10029                           intcon	equ	0xFF2
 10030                           intcon2	equ	0xFF1
 10031                           intcon3	equ	0xFF0
 10032                           postinc0	equ	0xFEE
 10033                           wreg	equ	0xFE8
 10034                           postdec1	equ	0xFE5
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           fsr2h	equ	0xFDA
 10040                           fsr2l	equ	0xFD9
 10041                           status	equ	0xFD8
 10042                           
 10043 ;; *************** function _change_state_to_menu_22 *****************
 10044 ;; Defined at:
 10045 ;;		line 498 in file "UI.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:   10
 10066 ;; This function calls:
 10067 ;;		_lcdInst
 10068 ;;		_printf
 10069 ;; This function is called by:
 10070 ;;		_UI
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           	psect	text32
 10075  004E90                     __ptext32:
 10076                           	opt stack 0
 10077  004E90                     _change_state_to_menu_22:
 10078                           	opt stack 19
 10079                           
 10080                           ;UI.c: 499: cur_state = 22;
 10081                           
 10082                           ; BSR set to: 0
 10083                           ;incstack = 0
 10084  004E90  0E00               	movlw	0
 10085  004E92  0100               	movlb	0	; () banked
 10086  004E94  6FEF               	movwf	(_cur_state+1)& (0+255),b
 10087  004E96  0E16               	movlw	22
 10088  004E98  6FEE               	movwf	_cur_state& (0+255),b
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;UI.c: 501: lcdInst(0b10000000);;
 10092  004E9A  0E80               	movlw	128
 10093  004E9C  EC24  F02A         	call	_lcdInst
 10094                           
 10095                           ;UI.c: 502: printf("2. SORT        <");
 10096  004EA0  0EC4               	movlw	low STR_34
 10097  004EA2  0100               	movlb	0	; () banked
 10098  004EA4  6F8E               	movwf	printf@f& (0+255),b
 10099  004EA6  0EFD               	movlw	high STR_34
 10100  004EA8  0100               	movlb	0	; () banked
 10101  004EAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10102  004EAC  EC00  F00B         	call	_printf	;wreg free
 10103                           
 10104                           ;UI.c: 503: lcdInst(0b11000000);;
 10105  004EB0  0EC0               	movlw	192
 10106  004EB2  EC24  F02A         	call	_lcdInst
 10107                           
 10108                           ;UI.c: 504: printf("3. LOGS         ");
 10109  004EB6  0E09               	movlw	low STR_36
 10110  004EB8  0100               	movlb	0	; () banked
 10111  004EBA  6F8E               	movwf	printf@f& (0+255),b
 10112  004EBC  0EFD               	movlw	high STR_36
 10113  004EBE  0100               	movlb	0	; () banked
 10114  004EC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10115  004EC2  EC00  F00B         	call	_printf	;wreg free
 10116  004EC6  0012               	return		;funcret
 10117  004EC8                     __end_of_change_state_to_menu_22:
 10118                           	opt stack 0
 10119                           tblptru	equ	0xFF8
 10120                           tblptrh	equ	0xFF7
 10121                           tblptrl	equ	0xFF6
 10122                           tablat	equ	0xFF5
 10123                           prodh	equ	0xFF4
 10124                           prodl	equ	0xFF3
 10125                           intcon	equ	0xFF2
 10126                           intcon2	equ	0xFF1
 10127                           intcon3	equ	0xFF0
 10128                           postinc0	equ	0xFEE
 10129                           wreg	equ	0xFE8
 10130                           postdec1	equ	0xFE5
 10131                           fsr1l	equ	0xFE1
 10132                           indf2	equ	0xFDF
 10133                           postinc2	equ	0xFDE
 10134                           postdec2	equ	0xFDD
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function _change_state_to_menu_12 *****************
 10140 ;; Defined at:
 10141 ;;		line 490 in file "UI.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;		None
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;		None
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      void 
 10148 ;; Registers used:
 10149 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;Total ram usage:        0 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:   10
 10162 ;; This function calls:
 10163 ;;		_lcdInst
 10164 ;;		_printf
 10165 ;; This function is called by:
 10166 ;;		_UI
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           	psect	text33
 10171  004EC8                     __ptext33:
 10172                           	opt stack 0
 10173  004EC8                     _change_state_to_menu_12:
 10174                           	opt stack 19
 10175                           
 10176                           ;UI.c: 491: cur_state = 12;
 10177                           
 10178                           ;incstack = 0
 10179  004EC8  0E00               	movlw	0
 10180  004ECA  0100               	movlb	0	; () banked
 10181  004ECC  6FEF               	movwf	(_cur_state+1)& (0+255),b
 10182  004ECE  0E0C               	movlw	12
 10183  004ED0  6FEE               	movwf	_cur_state& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;UI.c: 493: lcdInst(0b10000000);;
 10187  004ED2  0E80               	movlw	128
 10188  004ED4  EC24  F02A         	call	_lcdInst
 10189                           
 10190                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10191  004ED8  0E2B               	movlw	low STR_33
 10192  004EDA  0100               	movlb	0	; () banked
 10193  004EDC  6F8E               	movwf	printf@f& (0+255),b
 10194  004EDE  0EFD               	movlw	high STR_33
 10195  004EE0  0100               	movlb	0	; () banked
 10196  004EE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10197  004EE4  EC00  F00B         	call	_printf	;wreg free
 10198                           
 10199                           ;UI.c: 495: lcdInst(0b11000000);;
 10200  004EE8  0EC0               	movlw	192
 10201  004EEA  EC24  F02A         	call	_lcdInst
 10202                           
 10203                           ;UI.c: 496: printf("2. SORT        <");
 10204  004EEE  0EC4               	movlw	low STR_34
 10205  004EF0  0100               	movlb	0	; () banked
 10206  004EF2  6F8E               	movwf	printf@f& (0+255),b
 10207  004EF4  0EFD               	movlw	high STR_34
 10208  004EF6  0100               	movlb	0	; () banked
 10209  004EF8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10210  004EFA  EC00  F00B         	call	_printf	;wreg free
 10211  004EFE  0012               	return		;funcret
 10212  004F00                     __end_of_change_state_to_menu_12:
 10213                           	opt stack 0
 10214                           tblptru	equ	0xFF8
 10215                           tblptrh	equ	0xFF7
 10216                           tblptrl	equ	0xFF6
 10217                           tablat	equ	0xFF5
 10218                           prodh	equ	0xFF4
 10219                           prodl	equ	0xFF3
 10220                           intcon	equ	0xFF2
 10221                           intcon2	equ	0xFF1
 10222                           intcon3	equ	0xFF0
 10223                           postinc0	equ	0xFEE
 10224                           wreg	equ	0xFE8
 10225                           postdec1	equ	0xFE5
 10226                           fsr1l	equ	0xFE1
 10227                           indf2	equ	0xFDF
 10228                           postinc2	equ	0xFDE
 10229                           postdec2	equ	0xFDD
 10230                           fsr2h	equ	0xFDA
 10231                           fsr2l	equ	0xFD9
 10232                           status	equ	0xFD8
 10233                           
 10234 ;; *************** function ___awmod *****************
 10235 ;; Defined at:
 10236 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  dividend        2    0[BANK0 ] int 
 10239 ;;  divisor         2    2[BANK0 ] int 
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;  sign            1    5[BANK0 ] unsigned char 
 10242 ;;  counter         1    4[BANK0 ] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  2    0[BANK0 ] int 
 10245 ;; Registers used:
 10246 ;;		wreg, status,2, status,0
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;Total ram usage:        6 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    7
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_UI
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           	psect	text34
 10267  004426                     __ptext34:
 10268                           	opt stack 0
 10269  004426                     ___awmod:
 10270                           	opt stack 22
 10271                           
 10272                           ;incstack = 0
 10273  004426  0E00               	movlw	0
 10274  004428  0100               	movlb	0	; () banked
 10275  00442A  6F85               	movwf	___awmod@sign& (0+255),b
 10276                           
 10277                           ; BSR set to: 0
 10278  00442C  0100               	movlb	0	; () banked
 10279  00442E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10280  004430  D008               	goto	l8472
 10281                           
 10282                           ; BSR set to: 0
 10283  004432  0100               	movlb	0	; () banked
 10284  004434  6D80               	negf	___awmod@dividend& (0+255),b
 10285  004436  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10286  004438  B0D8               	btfsc	status,0,c
 10287  00443A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10288                           
 10289                           ; BSR set to: 0
 10290  00443C  0E01               	movlw	1
 10291  00443E  0100               	movlb	0	; () banked
 10292  004440  6F85               	movwf	___awmod@sign& (0+255),b
 10293  004442                     l8472:
 10294                           
 10295                           ; BSR set to: 0
 10296  004442  0100               	movlb	0	; () banked
 10297  004444  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10298  004446  D005               	goto	l8476
 10299                           
 10300                           ; BSR set to: 0
 10301  004448  0100               	movlb	0	; () banked
 10302  00444A  6D82               	negf	___awmod@divisor& (0+255),b
 10303  00444C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10304  00444E  B0D8               	btfsc	status,0,c
 10305  004450  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10306  004452                     l8476:
 10307                           
 10308                           ; BSR set to: 0
 10309  004452  0100               	movlb	0	; () banked
 10310  004454  5182               	movf	___awmod@divisor& (0+255),w,b
 10311  004456  0100               	movlb	0	; () banked
 10312  004458  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10313  00445A  B4D8               	btfsc	status,2,c
 10314  00445C  D026               	goto	l8492
 10315                           
 10316                           ; BSR set to: 0
 10317  00445E  0E01               	movlw	1
 10318  004460  0100               	movlb	0	; () banked
 10319  004462  6F84               	movwf	___awmod@counter& (0+255),b
 10320  004464  D006               	goto	l8482
 10321  004466                     l8480:
 10322                           
 10323                           ; BSR set to: 0
 10324  004466  0100               	movlb	0	; () banked
 10325  004468  90D8               	bcf	status,0,c
 10326  00446A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10327  00446C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10328  00446E  0100               	movlb	0	; () banked
 10329  004470  2B84               	incf	___awmod@counter& (0+255),f,b
 10330  004472                     l8482:
 10331                           
 10332                           ; BSR set to: 0
 10333  004472  0100               	movlb	0	; () banked
 10334  004474  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10335  004476  D7F7               	goto	l8480
 10336  004478                     l8484:
 10337                           
 10338                           ; BSR set to: 0
 10339  004478  0100               	movlb	0	; () banked
 10340  00447A  5182               	movf	___awmod@divisor& (0+255),w,b
 10341  00447C  0100               	movlb	0	; () banked
 10342  00447E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10343  004480  0100               	movlb	0	; () banked
 10344  004482  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10345  004484  0100               	movlb	0	; () banked
 10346  004486  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10347  004488  A0D8               	btfss	status,0,c
 10348  00448A  D008               	goto	l8488
 10349                           
 10350                           ; BSR set to: 0
 10351  00448C  0100               	movlb	0	; () banked
 10352  00448E  5182               	movf	___awmod@divisor& (0+255),w,b
 10353  004490  0100               	movlb	0	; () banked
 10354  004492  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10355  004494  0100               	movlb	0	; () banked
 10356  004496  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10357  004498  0100               	movlb	0	; () banked
 10358  00449A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10359  00449C                     l8488:
 10360                           
 10361                           ; BSR set to: 0
 10362  00449C  0100               	movlb	0	; () banked
 10363  00449E  90D8               	bcf	status,0,c
 10364  0044A0  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10365  0044A2  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10366                           
 10367                           ; BSR set to: 0
 10368  0044A4  0100               	movlb	0	; () banked
 10369  0044A6  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10370  0044A8  D7E7               	goto	l8484
 10371  0044AA                     l8492:
 10372                           
 10373                           ; BSR set to: 0
 10374  0044AA  0100               	movlb	0	; () banked
 10375  0044AC  5185               	movf	___awmod@sign& (0+255),w,b
 10376  0044AE  0100               	movlb	0	; () banked
 10377  0044B0  B4D8               	btfsc	status,2,c
 10378  0044B2  D005               	goto	l8496
 10379                           
 10380                           ; BSR set to: 0
 10381  0044B4  0100               	movlb	0	; () banked
 10382  0044B6  6D80               	negf	___awmod@dividend& (0+255),b
 10383  0044B8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10384  0044BA  B0D8               	btfsc	status,0,c
 10385  0044BC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10386  0044BE                     l8496:
 10387                           
 10388                           ; BSR set to: 0
 10389  0044BE  C080  F080         	movff	___awmod@dividend,?___awmod
 10390  0044C2  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10391  0044C6  0012               	return	
 10392  0044C8                     __end_of___awmod:
 10393                           	opt stack 0
 10394                           tblptru	equ	0xFF8
 10395                           tblptrh	equ	0xFF7
 10396                           tblptrl	equ	0xFF6
 10397                           tablat	equ	0xFF5
 10398                           prodh	equ	0xFF4
 10399                           prodl	equ	0xFF3
 10400                           intcon	equ	0xFF2
 10401                           intcon2	equ	0xFF1
 10402                           intcon3	equ	0xFF0
 10403                           postinc0	equ	0xFEE
 10404                           wreg	equ	0xFE8
 10405                           postdec1	equ	0xFE5
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function ___awdiv *****************
 10415 ;; Defined at:
 10416 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  dividend        2    6[BANK0 ] int 
 10419 ;;  divisor         2    8[BANK0 ] int 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  quotient        2   12[BANK0 ] int 
 10422 ;;  sign            1   11[BANK0 ] unsigned char 
 10423 ;;  counter         1   10[BANK0 ] unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  2    6[BANK0 ] int 
 10426 ;; Registers used:
 10427 ;;		wreg, status,2, status,0
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;Total ram usage:        8 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    7
 10440 ;; This function calls:
 10441 ;;		Nothing
 10442 ;; This function is called by:
 10443 ;;		_UI
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           	psect	text35
 10448  004202                     __ptext35:
 10449                           	opt stack 0
 10450  004202                     ___awdiv:
 10451                           	opt stack 22
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;incstack = 0
 10455  004202  0E00               	movlw	0
 10456  004204  0100               	movlb	0	; () banked
 10457  004206  6F8B               	movwf	___awdiv@sign& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460  004208  0100               	movlb	0	; () banked
 10461  00420A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10462  00420C  D008               	goto	l8428
 10463                           
 10464                           ; BSR set to: 0
 10465  00420E  0100               	movlb	0	; () banked
 10466  004210  6D88               	negf	___awdiv@divisor& (0+255),b
 10467  004212  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10468  004214  B0D8               	btfsc	status,0,c
 10469  004216  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10470                           
 10471                           ; BSR set to: 0
 10472  004218  0E01               	movlw	1
 10473  00421A  0100               	movlb	0	; () banked
 10474  00421C  6F8B               	movwf	___awdiv@sign& (0+255),b
 10475  00421E                     l8428:
 10476                           
 10477                           ; BSR set to: 0
 10478  00421E  0100               	movlb	0	; () banked
 10479  004220  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10480  004222  D008               	goto	l8434
 10481                           
 10482                           ; BSR set to: 0
 10483  004224  0100               	movlb	0	; () banked
 10484  004226  6D86               	negf	___awdiv@dividend& (0+255),b
 10485  004228  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10486  00422A  B0D8               	btfsc	status,0,c
 10487  00422C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10488                           
 10489                           ; BSR set to: 0
 10490  00422E  0E01               	movlw	1
 10491  004230  0100               	movlb	0	; () banked
 10492  004232  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10493  004234                     l8434:
 10494                           
 10495                           ; BSR set to: 0
 10496  004234  0E00               	movlw	0
 10497  004236  0100               	movlb	0	; () banked
 10498  004238  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10499  00423A  0E00               	movlw	0
 10500  00423C  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10501                           
 10502                           ; BSR set to: 0
 10503  00423E  0100               	movlb	0	; () banked
 10504  004240  5188               	movf	___awdiv@divisor& (0+255),w,b
 10505  004242  0100               	movlb	0	; () banked
 10506  004244  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10507  004246  B4D8               	btfsc	status,2,c
 10508  004248  D02C               	goto	l8456
 10509                           
 10510                           ; BSR set to: 0
 10511  00424A  0E01               	movlw	1
 10512  00424C  0100               	movlb	0	; () banked
 10513  00424E  6F8A               	movwf	___awdiv@counter& (0+255),b
 10514  004250  D006               	goto	l8442
 10515  004252                     l8440:
 10516                           
 10517                           ; BSR set to: 0
 10518  004252  0100               	movlb	0	; () banked
 10519  004254  90D8               	bcf	status,0,c
 10520  004256  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10521  004258  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10522  00425A  0100               	movlb	0	; () banked
 10523  00425C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10524  00425E                     l8442:
 10525                           
 10526                           ; BSR set to: 0
 10527  00425E  0100               	movlb	0	; () banked
 10528  004260  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10529  004262  D7F7               	goto	l8440
 10530  004264                     l8444:
 10531                           
 10532                           ; BSR set to: 0
 10533  004264  0100               	movlb	0	; () banked
 10534  004266  90D8               	bcf	status,0,c
 10535  004268  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10536  00426A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10537                           
 10538                           ; BSR set to: 0
 10539  00426C  0100               	movlb	0	; () banked
 10540  00426E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10541  004270  0100               	movlb	0	; () banked
 10542  004272  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10543  004274  0100               	movlb	0	; () banked
 10544  004276  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10545  004278  0100               	movlb	0	; () banked
 10546  00427A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10547  00427C  A0D8               	btfss	status,0,c
 10548  00427E  D00A               	goto	l8452
 10549                           
 10550                           ; BSR set to: 0
 10551  004280  0100               	movlb	0	; () banked
 10552  004282  5188               	movf	___awdiv@divisor& (0+255),w,b
 10553  004284  0100               	movlb	0	; () banked
 10554  004286  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10555  004288  0100               	movlb	0	; () banked
 10556  00428A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10557  00428C  0100               	movlb	0	; () banked
 10558  00428E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10559                           
 10560                           ; BSR set to: 0
 10561  004290  0100               	movlb	0	; () banked
 10562  004292  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10563  004294                     l8452:
 10564                           
 10565                           ; BSR set to: 0
 10566  004294  0100               	movlb	0	; () banked
 10567  004296  90D8               	bcf	status,0,c
 10568  004298  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10569  00429A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10570                           
 10571                           ; BSR set to: 0
 10572  00429C  0100               	movlb	0	; () banked
 10573  00429E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10574  0042A0  D7E1               	goto	l8444
 10575  0042A2                     l8456:
 10576                           
 10577                           ; BSR set to: 0
 10578  0042A2  0100               	movlb	0	; () banked
 10579  0042A4  518B               	movf	___awdiv@sign& (0+255),w,b
 10580  0042A6  0100               	movlb	0	; () banked
 10581  0042A8  B4D8               	btfsc	status,2,c
 10582  0042AA  D005               	goto	l8460
 10583                           
 10584                           ; BSR set to: 0
 10585  0042AC  0100               	movlb	0	; () banked
 10586  0042AE  6D8C               	negf	___awdiv@quotient& (0+255),b
 10587  0042B0  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10588  0042B2  B0D8               	btfsc	status,0,c
 10589  0042B4  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10590  0042B6                     l8460:
 10591                           
 10592                           ; BSR set to: 0
 10593  0042B6  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10594  0042BA  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10595  0042BE  0012               	return	
 10596  0042C0                     __end_of___awdiv:
 10597                           	opt stack 0
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           intcon2	equ	0xFF1
 10606                           intcon3	equ	0xFF0
 10607                           postinc0	equ	0xFEE
 10608                           wreg	equ	0xFE8
 10609                           postdec1	equ	0xFE5
 10610                           fsr1l	equ	0xFE1
 10611                           indf2	equ	0xFDF
 10612                           postinc2	equ	0xFDE
 10613                           postdec2	equ	0xFDD
 10614                           fsr2h	equ	0xFDA
 10615                           fsr2l	equ	0xFD9
 10616                           status	equ	0xFD8
 10617                           
 10618 ;; *************** function _Test *****************
 10619 ;; Defined at:
 10620 ;;		line 30 in file "Test.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;		None
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      void 
 10627 ;; Registers used:
 10628 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;Total ram usage:        2 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:   11
 10641 ;; This function calls:
 10642 ;;		_BlockerTest
 10643 ;;		_BothServos
 10644 ;;		_EEPROMTest
 10645 ;;		_PortTestA5
 10646 ;;		_PortTests
 10647 ;;		_PusherTest
 10648 ;;		_SpeedTest
 10649 ;;		_actuatorTest
 10650 ;;		_algorithmTest
 10651 ;;		_lcdInst
 10652 ;;		_printf
 10653 ;;		_sensorTest
 10654 ;; This function is called by:
 10655 ;;		_main
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text36
 10660  003E74                     __ptext36:
 10661                           	opt stack 0
 10662  003E74                     _Test:
 10663                           	opt stack 19
 10664  003E74                     
 10665                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10666  003E74  0E01               	movlw	1
 10667  003E76  EC24  F02A         	call	_lcdInst
 10668  003E7A  0E68               	movlw	104
 10669  003E7C  0100               	movlb	0	; () banked
 10670  003E7E  6FC6               	movwf	??_Test& (0+255),b
 10671  003E80  0EE4               	movlw	228
 10672  003E82                     u9217:
 10673  003E82  2EE8               	decfsz	wreg,f,c
 10674  003E84  D7FE               	bra	u9217
 10675  003E86  2FC6               	decfsz	??_Test& (0+255),f,b
 10676  003E88  D7FC               	bra	u9217
 10677  003E8A  F000               	nop	
 10678  003E8C  0E80               	movlw	128
 10679  003E8E  EC24  F02A         	call	_lcdInst
 10680                           
 10681                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10682  003E92  0E92               	movlw	low STR_68
 10683  003E94  0100               	movlb	0	; () banked
 10684  003E96  6F8E               	movwf	printf@f& (0+255),b
 10685  003E98  0EFC               	movlw	high STR_68
 10686  003E9A  0100               	movlb	0	; () banked
 10687  003E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10688  003E9E  EC00  F00B         	call	_printf	;wreg free
 10689                           
 10690                           ;Test.c: 35: lcdInst(0b11000000);;
 10691  003EA2  0EC0               	movlw	192
 10692  003EA4  EC24  F02A         	call	_lcdInst
 10693                           
 10694                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10695  003EA8  0EA3               	movlw	low STR_69
 10696  003EAA  0100               	movlb	0	; () banked
 10697  003EAC  6F8E               	movwf	printf@f& (0+255),b
 10698  003EAE  0EFC               	movlw	high STR_69
 10699  003EB0  0100               	movlb	0	; () banked
 10700  003EB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10701  003EB4  EC00  F00B         	call	_printf	;wreg free
 10702                           
 10703                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10704  003EB8  0E05               	movlw	5
 10705  003EBA  0100               	movlb	0	; () banked
 10706  003EBC  6FC7               	movwf	(??_Test+1)& (0+255),b
 10707  003EBE  0E0F               	movlw	15
 10708  003EC0  0100               	movlb	0	; () banked
 10709  003EC2  6FC6               	movwf	??_Test& (0+255),b
 10710  003EC4  0EF1               	movlw	241
 10711  003EC6                     u9227:
 10712  003EC6  2EE8               	decfsz	wreg,f,c
 10713  003EC8  D7FE               	bra	u9227
 10714  003ECA  2FC6               	decfsz	??_Test& (0+255),f,b
 10715  003ECC  D7FC               	bra	u9227
 10716  003ECE  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10717  003ED0  D7FA               	bra	u9227
 10718  003ED2                     l1132:
 10719  003ED2  A281               	btfss	3969,1,c	;volatile
 10720  003ED4  D7FE               	goto	l1132
 10721                           
 10722                           ;Test.c: 39: var = PORTB >> 4;
 10723  003ED6  CF81 F0C6          	movff	3969,??_Test	;volatile
 10724  003EDA  0100               	movlb	0	; () banked
 10725  003EDC  3BC6               	swapf	??_Test& (0+255),f,b
 10726  003EDE  0E0F               	movlw	15
 10727  003EE0  17C6               	andwf	??_Test& (0+255),f,b
 10728  003EE2  0100               	movlb	0	; () banked
 10729  003EE4  51C6               	movf	??_Test& (0+255),w,b
 10730  003EE6  6E77               	movwf	_var,c
 10731  003EE8  6A78               	clrf	_var+1,c
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;Test.c: 40: var++;
 10735  003EEA  4A77               	infsnz	_var,f,c
 10736  003EEC  2A78               	incf	_var+1,f,c
 10737  003EEE                     l1135:
 10738  003EEE  A281               	btfss	3969,1,c	;volatile
 10739  003EF0  D01F               	goto	l9218
 10740  003EF2  D7FD               	goto	l1135
 10741  003EF4                     l9196:
 10742                           
 10743                           ;Test.c: 44: algorithmTest();
 10744  003EF4  EC36  F020         	call	_algorithmTest	;wreg free
 10745                           
 10746                           ;Test.c: 45: break;
 10747  003EF8  D7BD               	goto	l9178
 10748  003EFA                     l9198:
 10749                           
 10750                           ;Test.c: 47: sensorTest();
 10751  003EFA  EC95  F010         	call	_sensorTest	;wreg free
 10752                           
 10753                           ;Test.c: 48: break;
 10754  003EFE  D7BA               	goto	l9178
 10755  003F00                     l9200:
 10756                           
 10757                           ;Test.c: 50: actuatorTest();
 10758  003F00  EC09  F000         	call	_actuatorTest	;wreg free
 10759                           
 10760                           ;Test.c: 51: break;
 10761  003F04  D7B7               	goto	l9178
 10762  003F06                     l9202:
 10763                           
 10764                           ;Test.c: 53: PortTestA5();
 10765  003F06  ECE2  F025         	call	_PortTestA5	;wreg free
 10766                           
 10767                           ;Test.c: 54: break;
 10768  003F0A  D7B4               	goto	l9178
 10769  003F0C                     l9204:
 10770                           
 10771                           ;Test.c: 57: SpeedTest();
 10772  003F0C  EC39  F023         	call	_SpeedTest	;wreg free
 10773                           
 10774                           ;Test.c: 58: break;
 10775  003F10  D7B1               	goto	l9178
 10776  003F12                     l9206:
 10777                           
 10778                           ;Test.c: 60: EEPROMTest();
 10779  003F12  EC56  F02A         	call	_EEPROMTest	;wreg free
 10780                           
 10781                           ;Test.c: 61: break;
 10782  003F16  D7AE               	goto	l9178
 10783  003F18                     l9208:
 10784                           
 10785                           ;Test.c: 63: PusherTest();
 10786  003F18  EC2D  F016         	call	_PusherTest	;wreg free
 10787                           
 10788                           ;Test.c: 64: break;
 10789  003F1C  D7AB               	goto	l9178
 10790  003F1E                     l9210:
 10791                           
 10792                           ;Test.c: 66: PortTests();
 10793  003F1E  ECBD  F023         	call	_PortTests	;wreg free
 10794                           
 10795                           ;Test.c: 67: break;
 10796  003F22  D7A8               	goto	l9178
 10797  003F24                     l9212:
 10798                           
 10799                           ;Test.c: 69: BothServos();
 10800  003F24  EC1C  F00D         	call	_BothServos	;wreg free
 10801                           
 10802                           ;Test.c: 70: break;
 10803  003F28  D7A5               	goto	l9178
 10804  003F2A                     l9214:
 10805                           
 10806                           ;Test.c: 72: BlockerTest();
 10807  003F2A  EC49  F01D         	call	_BlockerTest	;wreg free
 10808                           
 10809                           ;Test.c: 76: }
 10810                           
 10811                           ;Test.c: 75: break;
 10812                           
 10813                           ;Test.c: 74: default:
 10814                           
 10815                           ;Test.c: 73: break;
 10816  003F2E  D7A2               	goto	l9178
 10817  003F30                     l9218:
 10818  003F30  C077  F0C6         	movff	_var,??_Test
 10819  003F34  C078  F0C7         	movff	_var+1,??_Test+1
 10820                           
 10821                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10822                           ; Switch size 1, requested type "space"
 10823                           ; Number of cases is 1, Range of values is 0 to 0
 10824                           ; switch strategies available:
 10825                           ; Name         Instructions Cycles
 10826                           ; simple_byte            4     3 (average)
 10827                           ;	Chosen strategy is simple_byte
 10828  003F38  0100               	movlb	0	; () banked
 10829  003F3A  51C7               	movf	(??_Test+1)& (0+255),w,b
 10830  003F3C  0A00               	xorlw	0	; case 0
 10831  003F3E  A4D8               	btfss	status,2,c
 10832  003F40  D799               	goto	l9178
 10833                           
 10834                           ; BSR set to: 0
 10835                           ; Switch size 1, requested type "space"
 10836                           ; Number of cases is 10, Range of values is 1 to 11
 10837                           ; switch strategies available:
 10838                           ; Name         Instructions Cycles
 10839                           ; simple_byte           31    16 (average)
 10840                           ;	Chosen strategy is simple_byte
 10841  003F42  0100               	movlb	0	; () banked
 10842  003F44  51C6               	movf	??_Test& (0+255),w,b
 10843  003F46  0A01               	xorlw	1	; case 1
 10844  003F48  B4D8               	btfsc	status,2,c
 10845  003F4A  D7D4               	goto	l9196
 10846  003F4C  0A03               	xorlw	3	; case 2
 10847  003F4E  B4D8               	btfsc	status,2,c
 10848  003F50  D7D4               	goto	l9198
 10849  003F52  0A01               	xorlw	1	; case 3
 10850  003F54  B4D8               	btfsc	status,2,c
 10851  003F56  D7D4               	goto	l9200
 10852  003F58  0A06               	xorlw	6	; case 5
 10853  003F5A  B4D8               	btfsc	status,2,c
 10854  003F5C  D7D4               	goto	l9202
 10855  003F5E  0A03               	xorlw	3	; case 6
 10856  003F60  B4D8               	btfsc	status,2,c
 10857  003F62  D7D4               	goto	l9204
 10858  003F64  0A01               	xorlw	1	; case 7
 10859  003F66  B4D8               	btfsc	status,2,c
 10860  003F68  D7D4               	goto	l9206
 10861  003F6A  0A0F               	xorlw	15	; case 8
 10862  003F6C  B4D8               	btfsc	status,2,c
 10863  003F6E  D7D4               	goto	l9208
 10864  003F70  0A01               	xorlw	1	; case 9
 10865  003F72  B4D8               	btfsc	status,2,c
 10866  003F74  D7D4               	goto	l9210
 10867  003F76  0A03               	xorlw	3	; case 10
 10868  003F78  B4D8               	btfsc	status,2,c
 10869  003F7A  D7D4               	goto	l9212
 10870  003F7C  0A01               	xorlw	1	; case 11
 10871  003F7E  B4D8               	btfsc	status,2,c
 10872  003F80  D7D4               	goto	l9214
 10873                           
 10874                           ; BSR set to: 0
 10875                           
 10876                           ; BSR set to: 0
 10877  003F82  D778               	goto	l9178
 10878  003F84                     __end_of_Test:
 10879                           	opt stack 0
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           intcon2	equ	0xFF1
 10888                           intcon3	equ	0xFF0
 10889                           postinc0	equ	0xFEE
 10890                           wreg	equ	0xFE8
 10891                           postdec1	equ	0xFE5
 10892                           fsr1l	equ	0xFE1
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           postdec2	equ	0xFDD
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function _sensorTest *****************
 10901 ;; Defined at:
 10902 ;;		line 124 in file "Test.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;		None
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  res             2   45[BANK0 ] int 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;                  1    wreg      void 
 10909 ;; Registers used:
 10910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10919 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;Total ram usage:        4 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:   10
 10923 ;; This function calls:
 10924 ;;		_lcdInst
 10925 ;;		_printf
 10926 ;;		_readADC
 10927 ;;		_readMAG
 10928 ;; This function is called by:
 10929 ;;		_Test
 10930 ;; This function uses a non-reentrant model
 10931 ;;
 10932                           
 10933                           	psect	text37
 10934  00212A                     __ptext37:
 10935                           	opt stack 0
 10936  00212A                     _sensorTest:
 10937                           	opt stack 19
 10938                           
 10939                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;incstack = 0
 10943  00212A  0E01               	movlw	1
 10944  00212C  EC24  F02A         	call	_lcdInst
 10945  002130  0E68               	movlw	104
 10946  002132  0100               	movlb	0	; () banked
 10947  002134  6FAB               	movwf	??_sensorTest& (0+255),b
 10948  002136  0EE4               	movlw	228
 10949  002138                     u9237:
 10950  002138  2EE8               	decfsz	wreg,f,c
 10951  00213A  D7FE               	bra	u9237
 10952  00213C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10953  00213E  D7FC               	bra	u9237
 10954  002140  F000               	nop	
 10955  002142  0E80               	movlw	128
 10956  002144  EC24  F02A         	call	_lcdInst
 10957                           
 10958                           ;Test.c: 127: printf("SENSORS");
 10959  002148  0EAE               	movlw	low STR_77
 10960  00214A  0100               	movlb	0	; () banked
 10961  00214C  6F8E               	movwf	printf@f& (0+255),b
 10962  00214E  0EFF               	movlw	high STR_77
 10963  002150  0100               	movlb	0	; () banked
 10964  002152  6F8F               	movwf	(printf@f+1)& (0+255),b
 10965  002154  EC00  F00B         	call	_printf	;wreg free
 10966                           
 10967                           ;Test.c: 128: lcdInst(0b11000000);;
 10968  002158  0EC0               	movlw	192
 10969  00215A  EC24  F02A         	call	_lcdInst
 10970                           
 10971                           ;Test.c: 129: printf("PUSH TO START");
 10972  00215E  0E0B               	movlw	low STR_71
 10973  002160  0100               	movlb	0	; () banked
 10974  002162  6F8E               	movwf	printf@f& (0+255),b
 10975  002164  0EFF               	movlw	high STR_71
 10976  002166  0100               	movlb	0	; () banked
 10977  002168  6F8F               	movwf	(printf@f+1)& (0+255),b
 10978  00216A  EC00  F00B         	call	_printf	;wreg free
 10979                           
 10980                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10981  00216E  0E05               	movlw	5
 10982  002170  0100               	movlb	0	; () banked
 10983  002172  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10984  002174  0E0F               	movlw	15
 10985  002176  0100               	movlb	0	; () banked
 10986  002178  6FAB               	movwf	??_sensorTest& (0+255),b
 10987  00217A  0EF1               	movlw	241
 10988  00217C                     u9247:
 10989  00217C  2EE8               	decfsz	wreg,f,c
 10990  00217E  D7FE               	bra	u9247
 10991  002180  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10992  002182  D7FC               	bra	u9247
 10993  002184  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10994  002186  D7FA               	bra	u9247
 10995  002188                     l1165:
 10996  002188  A281               	btfss	3969,1,c	;volatile
 10997  00218A  D7FE               	goto	l1165
 10998  00218C                     l1168:
 10999  00218C  B281               	btfsc	3969,1,c	;volatile
 11000  00218E  D7FE               	goto	l1168
 11001                           
 11002                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11003  002190  0E01               	movlw	1
 11004  002192  EC24  F02A         	call	_lcdInst
 11005  002196  0E68               	movlw	104
 11006  002198  0100               	movlb	0	; () banked
 11007  00219A  6FAB               	movwf	??_sensorTest& (0+255),b
 11008  00219C  0EE4               	movlw	228
 11009  00219E                     u9257:
 11010  00219E  2EE8               	decfsz	wreg,f,c
 11011  0021A0  D7FE               	bra	u9257
 11012  0021A2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11013  0021A4  D7FC               	bra	u9257
 11014  0021A6  F000               	nop	
 11015  0021A8  0E80               	movlw	128
 11016  0021AA  EC24  F02A         	call	_lcdInst
 11017                           
 11018                           ;Test.c: 138: printf("TST: IR SNSR");
 11019  0021AE  0E35               	movlw	low STR_79
 11020  0021B0  0100               	movlb	0	; () banked
 11021  0021B2  6F8E               	movwf	printf@f& (0+255),b
 11022  0021B4  0EFF               	movlw	high STR_79
 11023  0021B6  0100               	movlb	0	; () banked
 11024  0021B8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11025  0021BA  EC00  F00B         	call	_printf	;wreg free
 11026                           
 11027                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 11028  0021BE  0E05               	movlw	5
 11029  0021C0  0100               	movlb	0	; () banked
 11030  0021C2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11031  0021C4  0E0F               	movlw	15
 11032  0021C6  0100               	movlb	0	; () banked
 11033  0021C8  6FAB               	movwf	??_sensorTest& (0+255),b
 11034  0021CA  0EF1               	movlw	241
 11035  0021CC                     u9267:
 11036  0021CC  2EE8               	decfsz	wreg,f,c
 11037  0021CE  D7FE               	bra	u9267
 11038  0021D0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11039  0021D2  D7FC               	bra	u9267
 11040  0021D4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11041  0021D6  D7FA               	bra	u9267
 11042                           
 11043                           ;Test.c: 140: LATCbits.LATC5 = 1;
 11044  0021D8  8A8B               	bsf	3979,5,c	;volatile
 11045                           
 11046                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 11047  0021DA  D05C               	goto	l7646
 11048  0021DC                     l7628:
 11049                           
 11050                           ;Test.c: 143: readADC(0);
 11051  0021DC  0E00               	movlw	0
 11052  0021DE  EC1B  F029         	call	_readADC
 11053                           
 11054                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 11055  0021E2  50C3               	movf	4035,w,c	;volatile
 11056  0021E4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11057  0021E8  0100               	movlb	0	; () banked
 11058  0021EA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11059  0021EC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11060  0021F0  0100               	movlb	0	; () banked
 11061  0021F2  6BAB               	clrf	??_sensorTest& (0+255),b
 11062  0021F4  0100               	movlb	0	; () banked
 11063  0021F6  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11064  0021F8  0100               	movlb	0	; () banked
 11065  0021FA  6FAD               	movwf	sensorTest@res& (0+255),b
 11066  0021FC  0100               	movlb	0	; () banked
 11067  0021FE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11068  002200  0100               	movlb	0	; () banked
 11069  002202  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 11073  002204  0100               	movlb	0	; () banked
 11074  002206  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11075  002208  D00A               	goto	u6080
 11076  00220A  0E21               	movlw	33
 11077  00220C  0100               	movlb	0	; () banked
 11078  00220E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11079  002210  0E03               	movlw	3
 11080  002212  0100               	movlb	0	; () banked
 11081  002214  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11082  002216  A0D8               	btfss	status,0,c
 11083  002218  D002               	goto	u6080
 11084  00221A  0E01               	movlw	1
 11085  00221C  D001               	goto	u6090
 11086  00221E                     u6080:
 11087  00221E  0E00               	movlw	0
 11088  002220                     u6090:
 11089  002220  0100               	movlb	0	; () banked
 11090  002222  6FE6               	movwf	_IR_signal& (0+255),b
 11091  002224  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11092                           
 11093                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11094  002226  0E01               	movlw	1
 11095  002228  EC24  F02A         	call	_lcdInst
 11096  00222C  0E68               	movlw	104
 11097  00222E  0100               	movlb	0	; () banked
 11098  002230  6FAB               	movwf	??_sensorTest& (0+255),b
 11099  002232  0EE4               	movlw	228
 11100  002234                     u9277:
 11101  002234  2EE8               	decfsz	wreg,f,c
 11102  002236  D7FE               	bra	u9277
 11103  002238  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11104  00223A  D7FC               	bra	u9277
 11105  00223C  F000               	nop	
 11106  00223E  0E80               	movlw	128
 11107  002240  EC24  F02A         	call	_lcdInst
 11108                           
 11109                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 11110  002244  0E5A               	movlw	low STR_80
 11111  002246  0100               	movlb	0	; () banked
 11112  002248  6F8E               	movwf	printf@f& (0+255),b
 11113  00224A  0EFE               	movlw	high STR_80
 11114  00224C  0100               	movlb	0	; () banked
 11115  00224E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11116  002250  C0E6  F090         	movff	_IR_signal,?_printf+2
 11117  002254  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11118  002258  EC00  F00B         	call	_printf	;wreg free
 11119                           
 11120                           ;Test.c: 149: lcdInst(0b11000000);;
 11121  00225C  0EC0               	movlw	192
 11122  00225E  EC24  F02A         	call	_lcdInst
 11123                           
 11124                           ;Test.c: 150: printf("%d", res);
 11125  002262  0E16               	movlw	low (STR_27+14)
 11126  002264  0100               	movlb	0	; () banked
 11127  002266  6F8E               	movwf	printf@f& (0+255),b
 11128  002268  0EFE               	movlw	high (STR_27+14)
 11129  00226A  0100               	movlb	0	; () banked
 11130  00226C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11131  00226E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11132  002272  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11133  002276  EC00  F00B         	call	_printf	;wreg free
 11134                           
 11135                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11136  00227A  0E05               	movlw	5
 11137  00227C  0100               	movlb	0	; () banked
 11138  00227E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11139  002280  0E0F               	movlw	15
 11140  002282  0100               	movlb	0	; () banked
 11141  002284  6FAB               	movwf	??_sensorTest& (0+255),b
 11142  002286  0EF1               	movlw	241
 11143  002288                     u9287:
 11144  002288  2EE8               	decfsz	wreg,f,c
 11145  00228A  D7FE               	bra	u9287
 11146  00228C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11147  00228E  D7FC               	bra	u9287
 11148  002290  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11149  002292  D7FA               	bra	u9287
 11150  002294                     l7646:
 11151  002294  A281               	btfss	3969,1,c	;volatile
 11152  002296  D7A2               	goto	l7628
 11153                           
 11154                           ;Test.c: 152: }
 11155                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11156  002298  9A8B               	bcf	3979,5,c	;volatile
 11157                           
 11158                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11159  00229A  0E01               	movlw	1
 11160  00229C  EC24  F02A         	call	_lcdInst
 11161  0022A0  0E68               	movlw	104
 11162  0022A2  0100               	movlb	0	; () banked
 11163  0022A4  6FAB               	movwf	??_sensorTest& (0+255),b
 11164  0022A6  0EE4               	movlw	228
 11165  0022A8                     u9297:
 11166  0022A8  2EE8               	decfsz	wreg,f,c
 11167  0022AA  D7FE               	bra	u9297
 11168  0022AC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11169  0022AE  D7FC               	bra	u9297
 11170  0022B0  F000               	nop	
 11171  0022B2  0E80               	movlw	128
 11172  0022B4  EC24  F02A         	call	_lcdInst
 11173                           
 11174                           ;Test.c: 162: printf("TST: MAGNETISM");
 11175  0022B8  0E87               	movlw	low STR_82
 11176  0022BA  0100               	movlb	0	; () banked
 11177  0022BC  6F8E               	movwf	printf@f& (0+255),b
 11178  0022BE  0EFE               	movlw	high STR_82
 11179  0022C0  0100               	movlb	0	; () banked
 11180  0022C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11181  0022C4  EC00  F00B         	call	_printf	;wreg free
 11182                           
 11183                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11184  0022C8  0E05               	movlw	5
 11185  0022CA  0100               	movlb	0	; () banked
 11186  0022CC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11187  0022CE  0E0F               	movlw	15
 11188  0022D0  0100               	movlb	0	; () banked
 11189  0022D2  6FAB               	movwf	??_sensorTest& (0+255),b
 11190  0022D4  0EF1               	movlw	241
 11191  0022D6                     u9307:
 11192  0022D6  2EE8               	decfsz	wreg,f,c
 11193  0022D8  D7FE               	bra	u9307
 11194  0022DA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11195  0022DC  D7FC               	bra	u9307
 11196  0022DE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11197  0022E0  D7FA               	bra	u9307
 11198                           
 11199                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11200  0022E2  D021               	goto	l7664
 11201  0022E4                     l7658:
 11202                           
 11203                           ;Test.c: 165: readMAG();
 11204  0022E4  ECDE  F026         	call	_readMAG	;wreg free
 11205                           
 11206                           ;Test.c: 166: lcdInst(0b10000000);;
 11207  0022E8  0E80               	movlw	128
 11208  0022EA  EC24  F02A         	call	_lcdInst
 11209                           
 11210                           ;Test.c: 167: lcdInst(0b11000000);;
 11211  0022EE  0EC0               	movlw	192
 11212  0022F0  EC24  F02A         	call	_lcdInst
 11213                           
 11214                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11215  0022F4  0E2A               	movlw	low STR_83
 11216  0022F6  0100               	movlb	0	; () banked
 11217  0022F8  6F8E               	movwf	printf@f& (0+255),b
 11218  0022FA  0EFE               	movlw	high STR_83
 11219  0022FC  0100               	movlb	0	; () banked
 11220  0022FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11221  002300  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11222  002304  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11223  002308  EC00  F00B         	call	_printf	;wreg free
 11224                           
 11225                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11226  00230C  0E05               	movlw	5
 11227  00230E  0100               	movlb	0	; () banked
 11228  002310  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11229  002312  0E0F               	movlw	15
 11230  002314  0100               	movlb	0	; () banked
 11231  002316  6FAB               	movwf	??_sensorTest& (0+255),b
 11232  002318  0EF1               	movlw	241
 11233  00231A                     u9317:
 11234  00231A  2EE8               	decfsz	wreg,f,c
 11235  00231C  D7FE               	bra	u9317
 11236  00231E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11237  002320  D7FC               	bra	u9317
 11238  002322  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11239  002324  D7FA               	bra	u9317
 11240  002326                     l7664:
 11241  002326  A281               	btfss	3969,1,c	;volatile
 11242  002328  D7DD               	goto	l7658
 11243                           
 11244                           ;Test.c: 170: }
 11245                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11246  00232A  0E01               	movlw	1
 11247  00232C  EC24  F02A         	call	_lcdInst
 11248  002330  0E68               	movlw	104
 11249  002332  0100               	movlb	0	; () banked
 11250  002334  6FAB               	movwf	??_sensorTest& (0+255),b
 11251  002336  0EE4               	movlw	228
 11252  002338                     u9327:
 11253  002338  2EE8               	decfsz	wreg,f,c
 11254  00233A  D7FE               	bra	u9327
 11255  00233C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11256  00233E  D7FC               	bra	u9327
 11257  002340  F000               	nop	
 11258  002342  0E80               	movlw	128
 11259  002344  EC24  F02A         	call	_lcdInst
 11260                           
 11261                           ;Test.c: 176: printf("TST: COND");
 11262  002348  0E87               	movlw	low STR_84
 11263  00234A  0100               	movlb	0	; () banked
 11264  00234C  6F8E               	movwf	printf@f& (0+255),b
 11265  00234E  0EFF               	movlw	high STR_84
 11266  002350  0100               	movlb	0	; () banked
 11267  002352  6F8F               	movwf	(printf@f+1)& (0+255),b
 11268  002354  EC00  F00B         	call	_printf	;wreg free
 11269                           
 11270                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11271  002358  0E05               	movlw	5
 11272  00235A  0100               	movlb	0	; () banked
 11273  00235C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11274  00235E  0E0F               	movlw	15
 11275  002360  0100               	movlb	0	; () banked
 11276  002362  6FAB               	movwf	??_sensorTest& (0+255),b
 11277  002364  0EF1               	movlw	241
 11278  002366                     u9337:
 11279  002366  2EE8               	decfsz	wreg,f,c
 11280  002368  D7FE               	bra	u9337
 11281  00236A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11282  00236C  D7FC               	bra	u9337
 11283  00236E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11284  002370  D7FA               	bra	u9337
 11285  002372                     l7676:
 11286                           
 11287                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11288  002372  0E01               	movlw	1
 11289  002374  EC24  F02A         	call	_lcdInst
 11290  002378  0E68               	movlw	104
 11291  00237A  0100               	movlb	0	; () banked
 11292  00237C  6FAB               	movwf	??_sensorTest& (0+255),b
 11293  00237E  0EE4               	movlw	228
 11294  002380                     u9347:
 11295  002380  2EE8               	decfsz	wreg,f,c
 11296  002382  D7FE               	bra	u9347
 11297  002384  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11298  002386  D7FC               	bra	u9347
 11299  002388  F000               	nop	
 11300  00238A  0E80               	movlw	128
 11301  00238C  EC24  F02A         	call	_lcdInst
 11302                           
 11303                           ;Test.c: 180: printf("TST: COND");
 11304  002390  0E87               	movlw	low STR_84
 11305  002392  0100               	movlb	0	; () banked
 11306  002394  6F8E               	movwf	printf@f& (0+255),b
 11307  002396  0EFF               	movlw	high STR_84
 11308  002398  0100               	movlb	0	; () banked
 11309  00239A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11310  00239C  EC00  F00B         	call	_printf	;wreg free
 11311                           
 11312                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11313  0023A0  D01B               	goto	l7688
 11314  0023A2                     l7684:
 11315                           
 11316                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11317  0023A2  0E80               	movlw	128
 11318  0023A4  EC24  F02A         	call	_lcdInst
 11319  0023A8  0EC0               	movlw	192
 11320  0023AA  EC24  F02A         	call	_lcdInst
 11321                           
 11322                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11323  0023AE  0EA5               	movlw	low STR_86
 11324  0023B0  0100               	movlb	0	; () banked
 11325  0023B2  6F8E               	movwf	printf@f& (0+255),b
 11326  0023B4  0EFF               	movlw	high STR_86
 11327  0023B6  0100               	movlb	0	; () banked
 11328  0023B8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11329  0023BA  A480               	btfss	3968,2,c	;volatile
 11330  0023BC  D004               	goto	u6120
 11331  0023BE  0100               	movlb	0	; () banked
 11332  0023C0  6BAB               	clrf	??_sensorTest& (0+255),b
 11333  0023C2  2BAB               	incf	??_sensorTest& (0+255),f,b
 11334  0023C4  D002               	goto	u6128
 11335  0023C6                     u6120:
 11336  0023C6  0100               	movlb	0	; () banked
 11337  0023C8  6BAB               	clrf	??_sensorTest& (0+255),b
 11338  0023CA                     u6128:
 11339  0023CA  0100               	movlb	0	; () banked
 11340  0023CC  51AB               	movf	??_sensorTest& (0+255),w,b
 11341  0023CE  0100               	movlb	0	; () banked
 11342  0023D0  6F90               	movwf	(?_printf+2)& (0+255),b
 11343  0023D2  6B91               	clrf	(?_printf+3)& (0+255),b
 11344  0023D4  EC00  F00B         	call	_printf	;wreg free
 11345  0023D8                     l7688:
 11346  0023D8  A281               	btfss	3969,1,c	;volatile
 11347  0023DA  D7E3               	goto	l7684
 11348                           
 11349                           ;Test.c: 187: }
 11350                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11351  0023DC  3881               	swapf	3969,w,c	;volatile
 11352  0023DE  0B0F               	andlw	15
 11353  0023E0  0A0F               	xorlw	15
 11354  0023E2  B4D8               	btfsc	status,2,c
 11355  0023E4  0012               	return	
 11356                           
 11357                           ;Test.c: 191: else{
 11358                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11359                           
 11360                           ;Test.c: 190: }
 11361                           
 11362                           ;Test.c: 189: break;
 11363  0023E6  8689               	bsf	3977,3,c	;volatile
 11364                           
 11365                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11366  0023E8  D01B               	goto	l7700
 11367  0023EA                     l7696:
 11368                           
 11369                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11370  0023EA  0E80               	movlw	128
 11371  0023EC  EC24  F02A         	call	_lcdInst
 11372  0023F0  0EC0               	movlw	192
 11373  0023F2  EC24  F02A         	call	_lcdInst
 11374                           
 11375                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11376  0023F6  0EA5               	movlw	low STR_86
 11377  0023F8  0100               	movlb	0	; () banked
 11378  0023FA  6F8E               	movwf	printf@f& (0+255),b
 11379  0023FC  0EFF               	movlw	high STR_86
 11380  0023FE  0100               	movlb	0	; () banked
 11381  002400  6F8F               	movwf	(printf@f+1)& (0+255),b
 11382  002402  A480               	btfss	3968,2,c	;volatile
 11383  002404  D004               	goto	u6150
 11384  002406  0100               	movlb	0	; () banked
 11385  002408  6BAB               	clrf	??_sensorTest& (0+255),b
 11386  00240A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11387  00240C  D002               	goto	u6158
 11388  00240E                     u6150:
 11389  00240E  0100               	movlb	0	; () banked
 11390  002410  6BAB               	clrf	??_sensorTest& (0+255),b
 11391  002412                     u6158:
 11392  002412  0100               	movlb	0	; () banked
 11393  002414  51AB               	movf	??_sensorTest& (0+255),w,b
 11394  002416  0100               	movlb	0	; () banked
 11395  002418  6F90               	movwf	(?_printf+2)& (0+255),b
 11396  00241A  6B91               	clrf	(?_printf+3)& (0+255),b
 11397  00241C  EC00  F00B         	call	_printf	;wreg free
 11398  002420                     l7700:
 11399  002420  B281               	btfsc	3969,1,c	;volatile
 11400  002422  D7E3               	goto	l7696
 11401                           
 11402                           ;Test.c: 197: }
 11403                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11404  002424  9689               	bcf	3977,3,c	;volatile
 11405  002426  D7A5               	goto	l7676
 11406  002428                     __end_of_sensorTest:
 11407                           	opt stack 0
 11408                           tblptru	equ	0xFF8
 11409                           tblptrh	equ	0xFF7
 11410                           tblptrl	equ	0xFF6
 11411                           tablat	equ	0xFF5
 11412                           prodh	equ	0xFF4
 11413                           prodl	equ	0xFF3
 11414                           intcon	equ	0xFF2
 11415                           intcon2	equ	0xFF1
 11416                           intcon3	equ	0xFF0
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           postdec1	equ	0xFE5
 11420                           fsr1l	equ	0xFE1
 11421                           indf2	equ	0xFDF
 11422                           postinc2	equ	0xFDE
 11423                           postdec2	equ	0xFDD
 11424                           fsr2h	equ	0xFDA
 11425                           fsr2l	equ	0xFD9
 11426                           status	equ	0xFD8
 11427                           
 11428 ;; *************** function _readMAG *****************
 11429 ;; Defined at:
 11430 ;;		line 29 in file "ADCFunctionality.c"
 11431 ;; Parameters:    Size  Location     Type
 11432 ;;		None
 11433 ;; Auto vars:     Size  Location     Type
 11434 ;;  res             2    4[BANK0 ] int 
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  1    wreg      void 
 11437 ;; Registers used:
 11438 ;;		wreg, status,2, status,0, cstack
 11439 ;; Tracked objects:
 11440 ;;		On entry : 0/0
 11441 ;;		On exit  : 0/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;Total ram usage:        4 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    8
 11451 ;; This function calls:
 11452 ;;		_readADC
 11453 ;; This function is called by:
 11454 ;;		_getMAG
 11455 ;;		_sensorTest
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           	psect	text38
 11460  004DBC                     __ptext38:
 11461                           	opt stack 0
 11462  004DBC                     _readMAG:
 11463                           	opt stack 19
 11464                           
 11465                           ;ADCFunctionality.c: 30: readADC(1);
 11466                           
 11467                           ;incstack = 0
 11468  004DBC  0E01               	movlw	1
 11469  004DBE  EC1B  F029         	call	_readADC
 11470                           
 11471                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11472  004DC2  50C3               	movf	4035,w,c	;volatile
 11473  004DC4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11474  004DC8  0100               	movlb	0	; () banked
 11475  004DCA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11476  004DCC  C082  F083         	movff	??_readMAG,??_readMAG+1
 11477  004DD0  0100               	movlb	0	; () banked
 11478  004DD2  6B82               	clrf	??_readMAG& (0+255),b
 11479  004DD4  0100               	movlb	0	; () banked
 11480  004DD6  1182               	iorwf	??_readMAG& (0+255),w,b
 11481  004DD8  0100               	movlb	0	; () banked
 11482  004DDA  6F84               	movwf	readMAG@res& (0+255),b
 11483  004DDC  0100               	movlb	0	; () banked
 11484  004DDE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11485  004DE0  0100               	movlb	0	; () banked
 11486  004DE2  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11490  004DE4  0100               	movlb	0	; () banked
 11491  004DE6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11492  004DE8  D008               	goto	u4541
 11493  004DEA  0100               	movlb	0	; () banked
 11494  004DEC  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11495  004DEE  E107               	bnz	u4540
 11496  004DF0  0E96               	movlw	150
 11497  004DF2  0100               	movlb	0	; () banked
 11498  004DF4  5D84               	subwf	readMAG@res& (0+255),w,b
 11499  004DF6  B0D8               	btfsc	status,0,c
 11500  004DF8  D002               	goto	u4540
 11501  004DFA                     u4541:
 11502  004DFA  0E01               	movlw	1
 11503  004DFC  D001               	goto	u4550
 11504  004DFE                     u4540:
 11505  004DFE  0E00               	movlw	0
 11506  004E00                     u4550:
 11507  004E00  0100               	movlb	0	; () banked
 11508  004E02  6FE8               	movwf	_MAG_signal& (0+255),b
 11509  004E04  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11510                           
 11511                           ; BSR set to: 0
 11512  004E06  0012               	return		;funcret
 11513  004E08                     __end_of_readMAG:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           intcon3	equ	0xFF0
 11524                           postinc0	equ	0xFEE
 11525                           wreg	equ	0xFE8
 11526                           postdec1	equ	0xFE5
 11527                           fsr1l	equ	0xFE1
 11528                           indf2	equ	0xFDF
 11529                           postinc2	equ	0xFDE
 11530                           postdec2	equ	0xFDD
 11531                           fsr2h	equ	0xFDA
 11532                           fsr2l	equ	0xFD9
 11533                           status	equ	0xFD8
 11534                           
 11535 ;; *************** function _algorithmTest *****************
 11536 ;; Defined at:
 11537 ;;		line 80 in file "Test.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;		None
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      void 
 11544 ;; Registers used:
 11545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;Total ram usage:        2 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:   10
 11558 ;; This function calls:
 11559 ;;		_lcdInst
 11560 ;;		_printf
 11561 ;; This function is called by:
 11562 ;;		_Test
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           	psect	text39
 11567  00406C                     __ptext39:
 11568                           	opt stack 0
 11569  00406C                     _algorithmTest:
 11570                           	opt stack 19
 11571                           
 11572                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;incstack = 0
 11576  00406C  0E01               	movlw	1
 11577  00406E  EC24  F02A         	call	_lcdInst
 11578  004072  0E68               	movlw	104
 11579  004074  0100               	movlb	0	; () banked
 11580  004076  6FAB               	movwf	??_algorithmTest& (0+255),b
 11581  004078  0EE4               	movlw	228
 11582  00407A                     u9357:
 11583  00407A  2EE8               	decfsz	wreg,f,c
 11584  00407C  D7FE               	bra	u9357
 11585  00407E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11586  004080  D7FC               	bra	u9357
 11587  004082  F000               	nop	
 11588  004084  0E80               	movlw	128
 11589  004086  EC24  F02A         	call	_lcdInst
 11590                           
 11591                           ;Test.c: 83: printf("ALGORITHM TEST");
 11592  00408A  0ED2               	movlw	low STR_70
 11593  00408C  0100               	movlb	0	; () banked
 11594  00408E  6F8E               	movwf	printf@f& (0+255),b
 11595  004090  0EFE               	movlw	high STR_70
 11596  004092  0100               	movlb	0	; () banked
 11597  004094  6F8F               	movwf	(printf@f+1)& (0+255),b
 11598  004096  EC00  F00B         	call	_printf	;wreg free
 11599                           
 11600                           ;Test.c: 84: lcdInst(0b11000000);;
 11601  00409A  0EC0               	movlw	192
 11602  00409C  EC24  F02A         	call	_lcdInst
 11603                           
 11604                           ;Test.c: 85: printf("PUSH TO START");
 11605  0040A0  0E0B               	movlw	low STR_71
 11606  0040A2  0100               	movlb	0	; () banked
 11607  0040A4  6F8E               	movwf	printf@f& (0+255),b
 11608  0040A6  0EFF               	movlw	high STR_71
 11609  0040A8  0100               	movlb	0	; () banked
 11610  0040AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11611  0040AC  EC00  F00B         	call	_printf	;wreg free
 11612                           
 11613                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11614  0040B0  0E05               	movlw	5
 11615  0040B2  0100               	movlb	0	; () banked
 11616  0040B4  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11617  0040B6  0E0F               	movlw	15
 11618  0040B8  0100               	movlb	0	; () banked
 11619  0040BA  6FAB               	movwf	??_algorithmTest& (0+255),b
 11620  0040BC  0EF1               	movlw	241
 11621  0040BE                     u9367:
 11622  0040BE  2EE8               	decfsz	wreg,f,c
 11623  0040C0  D7FE               	bra	u9367
 11624  0040C2  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11625  0040C4  D7FC               	bra	u9367
 11626  0040C6  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11627  0040C8  D7FA               	bra	u9367
 11628  0040CA                     l1156:
 11629  0040CA  A281               	btfss	3969,1,c	;volatile
 11630  0040CC  D7FE               	goto	l1156
 11631  0040CE                     l1159:
 11632  0040CE  B281               	btfsc	3969,1,c	;volatile
 11633  0040D0  D7FE               	goto	l1159
 11634                           
 11635                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11636  0040D2  0E01               	movlw	1
 11637  0040D4  EC24  F02A         	call	_lcdInst
 11638  0040D8  0E68               	movlw	104
 11639  0040DA  0100               	movlb	0	; () banked
 11640  0040DC  6FAB               	movwf	??_algorithmTest& (0+255),b
 11641  0040DE  0EE4               	movlw	228
 11642  0040E0                     u9377:
 11643  0040E0  2EE8               	decfsz	wreg,f,c
 11644  0040E2  D7FE               	bra	u9377
 11645  0040E4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11646  0040E6  D7FC               	bra	u9377
 11647  0040E8  F000               	nop	
 11648  0040EA  0E80               	movlw	128
 11649  0040EC  EC24  F02A         	call	_lcdInst
 11650                           
 11651                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11652  0040F0  0E5F               	movlw	low STR_72
 11653  0040F2  0100               	movlb	0	; () banked
 11654  0040F4  6F8E               	movwf	printf@f& (0+255),b
 11655  0040F6  0EFC               	movlw	high STR_72
 11656  0040F8  0100               	movlb	0	; () banked
 11657  0040FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11658  0040FC  EC00  F00B         	call	_printf	;wreg free
 11659                           
 11660                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11661  004100  0EEF               	movlw	low STR_73
 11662  004102  0100               	movlb	0	; () banked
 11663  004104  6F8E               	movwf	printf@f& (0+255),b
 11664  004106  0EFE               	movlw	high STR_73
 11665  004108  0100               	movlb	0	; () banked
 11666  00410A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11667  00410C  EC00  F00B         	call	_printf	;wreg free
 11668                           
 11669                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11670  004110  0E4F               	movlw	low STR_74
 11671  004112  0100               	movlb	0	; () banked
 11672  004114  6F8E               	movwf	printf@f& (0+255),b
 11673  004116  0EFF               	movlw	high STR_74
 11674  004118  0100               	movlb	0	; () banked
 11675  00411A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11676  00411C  EC00  F00B         	call	_printf	;wreg free
 11677                           
 11678                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11679  004120  0EB4               	movlw	low STR_75
 11680  004122  0100               	movlb	0	; () banked
 11681  004124  6F8E               	movwf	printf@f& (0+255),b
 11682  004126  0EFE               	movlw	high STR_75
 11683  004128  0100               	movlb	0	; () banked
 11684  00412A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11685  00412C  EC00  F00B         	call	_printf	;wreg free
 11686                           
 11687                           ;Test.c: 121: printf("ALG5: NO CANS");
 11688  004130  0EFD               	movlw	low STR_76
 11689  004132  0100               	movlb	0	; () banked
 11690  004134  6F8E               	movwf	printf@f& (0+255),b
 11691  004136  0EFE               	movlw	high STR_76
 11692  004138  0100               	movlb	0	; () banked
 11693  00413A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11694  00413C  EC00  F00B         	call	_printf	;wreg free
 11695  004140  0012               	return		;funcret
 11696  004142                     __end_of_algorithmTest:
 11697                           	opt stack 0
 11698                           tblptru	equ	0xFF8
 11699                           tblptrh	equ	0xFF7
 11700                           tblptrl	equ	0xFF6
 11701                           tablat	equ	0xFF5
 11702                           prodh	equ	0xFF4
 11703                           prodl	equ	0xFF3
 11704                           intcon	equ	0xFF2
 11705                           intcon2	equ	0xFF1
 11706                           intcon3	equ	0xFF0
 11707                           postinc0	equ	0xFEE
 11708                           wreg	equ	0xFE8
 11709                           postdec1	equ	0xFE5
 11710                           fsr1l	equ	0xFE1
 11711                           indf2	equ	0xFDF
 11712                           postinc2	equ	0xFDE
 11713                           postdec2	equ	0xFDD
 11714                           fsr2h	equ	0xFDA
 11715                           fsr2l	equ	0xFD9
 11716                           status	equ	0xFD8
 11717                           
 11718 ;; *************** function _actuatorTest *****************
 11719 ;; Defined at:
 11720 ;;		line 203 in file "Test.c"
 11721 ;; Parameters:    Size  Location     Type
 11722 ;;		None
 11723 ;; Auto vars:     Size  Location     Type
 11724 ;;  i               1   45[BANK0 ] unsigned char 
 11725 ;;  i               1   67[BANK0 ] unsigned char 
 11726 ;;  i               1   66[BANK0 ] unsigned char 
 11727 ;;  i               1   65[BANK0 ] unsigned char 
 11728 ;;  i               1   64[BANK0 ] unsigned char 
 11729 ;;  i               1   63[BANK0 ] unsigned char 
 11730 ;;  i               1   62[BANK0 ] unsigned char 
 11731 ;;  i               1   61[BANK0 ] unsigned char 
 11732 ;;  i               1   60[BANK0 ] unsigned char 
 11733 ;;  i               1   59[BANK0 ] unsigned char 
 11734 ;;  i               1   58[BANK0 ] unsigned char 
 11735 ;;  i               1   57[BANK0 ] unsigned char 
 11736 ;;  i               1   56[BANK0 ] unsigned char 
 11737 ;;  i               1   55[BANK0 ] unsigned char 
 11738 ;;  i               1   54[BANK0 ] unsigned char 
 11739 ;;  i               1   53[BANK0 ] unsigned char 
 11740 ;;  i               1   52[BANK0 ] unsigned char 
 11741 ;;  i               1   51[BANK0 ] unsigned char 
 11742 ;;  i               1   50[BANK0 ] unsigned char 
 11743 ;;  i               1   49[BANK0 ] unsigned char 
 11744 ;;  i               1   48[BANK0 ] unsigned char 
 11745 ;;  i               1   47[BANK0 ] unsigned char 
 11746 ;;  i               1   46[BANK0 ] unsigned char 
 11747 ;;  i               2   68[BANK0 ] int 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      void 
 11750 ;; Registers used:
 11751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:       27 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:   10
 11764 ;; This function calls:
 11765 ;;		_lcdInst
 11766 ;;		_printf
 11767 ;;		_updateServoPosition
 11768 ;; This function is called by:
 11769 ;;		_Test
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text40
 11774  000012                     __ptext40:
 11775                           	opt stack 0
 11776  000012                     _actuatorTest:
 11777                           	opt stack 19
 11778                           
 11779                           ;Test.c: 205: int i = 0;
 11780                           
 11781                           ;incstack = 0
 11782  000012  0E00               	movlw	0
 11783  000014  0100               	movlb	0	; () banked
 11784  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11785  000018  0E00               	movlw	0
 11786  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11790  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11794  00001E  0E01               	movlw	1
 11795  000020  EC24  F02A         	call	_lcdInst
 11796  000024  0E68               	movlw	104
 11797  000026  0100               	movlb	0	; () banked
 11798  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11799  00002A  0EE4               	movlw	228
 11800  00002C                     u9387:
 11801  00002C  2EE8               	decfsz	wreg,f,c
 11802  00002E  D7FE               	bra	u9387
 11803  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11804  000032  D7FC               	bra	u9387
 11805  000034  F000               	nop	
 11806  000036  0E80               	movlw	128
 11807  000038  EC24  F02A         	call	_lcdInst
 11808                           
 11809                           ;Test.c: 209: printf("ACTUATORS");
 11810  00003C  0E91               	movlw	low STR_88
 11811  00003E  0100               	movlb	0	; () banked
 11812  000040  6F8E               	movwf	printf@f& (0+255),b
 11813  000042  0EFF               	movlw	high STR_88
 11814  000044  0100               	movlb	0	; () banked
 11815  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11816  000048  EC00  F00B         	call	_printf	;wreg free
 11817                           
 11818                           ;Test.c: 210: lcdInst(0b11000000);;
 11819  00004C  0EC0               	movlw	192
 11820  00004E  EC24  F02A         	call	_lcdInst
 11821                           
 11822                           ;Test.c: 211: printf("PUSH TO START");
 11823  000052  0E0B               	movlw	low STR_71
 11824  000054  0100               	movlb	0	; () banked
 11825  000056  6F8E               	movwf	printf@f& (0+255),b
 11826  000058  0EFF               	movlw	high STR_71
 11827  00005A  0100               	movlb	0	; () banked
 11828  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11829  00005E  EC00  F00B         	call	_printf	;wreg free
 11830                           
 11831                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11832  000062  0E05               	movlw	5
 11833  000064  0100               	movlb	0	; () banked
 11834  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11835  000068  0E0F               	movlw	15
 11836  00006A  0100               	movlb	0	; () banked
 11837  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11838  00006E  0EF1               	movlw	241
 11839  000070                     u9397:
 11840  000070  2EE8               	decfsz	wreg,f,c
 11841  000072  D7FE               	bra	u9397
 11842  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11843  000076  D7FC               	bra	u9397
 11844  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11845  00007A  D7FA               	bra	u9397
 11846  00007C                     l1191:
 11847  00007C  A281               	btfss	3969,1,c	;volatile
 11848  00007E  D7FE               	goto	l1191
 11849  000080                     l1194:
 11850  000080  B281               	btfsc	3969,1,c	;volatile
 11851  000082  D7FE               	goto	l1194
 11852                           
 11853                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11854  000084  0E01               	movlw	1
 11855  000086  EC24  F02A         	call	_lcdInst
 11856  00008A  0E68               	movlw	104
 11857  00008C  0100               	movlb	0	; () banked
 11858  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11859  000090  0EE4               	movlw	228
 11860  000092                     u9407:
 11861  000092  2EE8               	decfsz	wreg,f,c
 11862  000094  D7FE               	bra	u9407
 11863  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11864  000098  D7FC               	bra	u9407
 11865  00009A  F000               	nop	
 11866  00009C  0E80               	movlw	128
 11867  00009E  EC24  F02A         	call	_lcdInst
 11868                           
 11869                           ;Test.c: 220: printf("TST: DC MOTORS");
 11870  0000A2  0EC3               	movlw	low STR_90
 11871  0000A4  0100               	movlb	0	; () banked
 11872  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11873  0000A8  0EFE               	movlw	high STR_90
 11874  0000AA  0100               	movlb	0	; () banked
 11875  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11876  0000AE  EC00  F00B         	call	_printf	;wreg free
 11877                           
 11878                           ;Test.c: 221: lcdInst(0b11000000);;
 11879  0000B2  0EC0               	movlw	192
 11880  0000B4  EC24  F02A         	call	_lcdInst
 11881                           
 11882                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11883  0000B8  0EE1               	movlw	low STR_91
 11884  0000BA  0100               	movlb	0	; () banked
 11885  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11886  0000BE  0EFE               	movlw	high STR_91
 11887  0000C0  0100               	movlb	0	; () banked
 11888  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11889  0000C4  EC00  F00B         	call	_printf	;wreg free
 11890                           
 11891                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11892  0000C8  848A               	bsf	3978,2,c	;volatile
 11893                           
 11894                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11895  0000CA  0E00               	movlw	0
 11896  0000CC  0100               	movlb	0	; () banked
 11897  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11898  0000D0  0E00               	movlw	0
 11899  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11900                           
 11901                           ; BSR set to: 0
 11902  0000D4  0100               	movlb	0	; () banked
 11903  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11904  0000D8  D008               	goto	l7740
 11905  0000DA  0100               	movlb	0	; () banked
 11906  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11907  0000DE  E123               	bnz	l1198
 11908  0000E0  0E05               	movlw	5
 11909  0000E2  0100               	movlb	0	; () banked
 11910  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11911  0000E6  B0D8               	btfsc	status,0,c
 11912  0000E8  D01E               	goto	l1198
 11913  0000EA                     l7740:
 11914                           
 11915                           ; BSR set to: 0
 11916  0000EA  0E00               	movlw	0
 11917  0000EC  0100               	movlb	0	; () banked
 11918  0000EE  6FAD               	movwf	actuatorTest@i_1730& (0+255),b
 11919  0000F0                     l7742:
 11920                           
 11921                           ; BSR set to: 0
 11922  0000F0  0E63               	movlw	99
 11923  0000F2  0100               	movlb	0	; () banked
 11924  0000F4  65AD               	cpfsgt	actuatorTest@i_1730& (0+255),b
 11925  0000F6  D001               	goto	l7746
 11926  0000F8  D00C               	goto	l7750
 11927  0000FA                     l7746:
 11928                           
 11929                           ; BSR set to: 0
 11930  0000FA  0E68               	movlw	104
 11931  0000FC  0100               	movlb	0	; () banked
 11932  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11933  000100  0EE4               	movlw	228
 11934  000102                     u9417:
 11935  000102  2EE8               	decfsz	wreg,f,c
 11936  000104  D7FE               	bra	u9417
 11937  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11938  000108  D7FC               	bra	u9417
 11939  00010A  F000               	nop	
 11940  00010C  0100               	movlb	0	; () banked
 11941  00010E  2BAD               	incf	actuatorTest@i_1730& (0+255),f,b
 11942  000110  D7EF               	goto	l7742
 11943  000112                     l7750:
 11944                           
 11945                           ; BSR set to: 0
 11946  000112  0100               	movlb	0	; () banked
 11947  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11948  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11949                           
 11950                           ; BSR set to: 0
 11951  000118  0100               	movlb	0	; () banked
 11952  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11953  00011C  D7E6               	goto	l7740
 11954  00011E  0100               	movlb	0	; () banked
 11955  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11956  000122  E101               	bnz	u6220
 11957  000124  D7DD               	goto	L10
 11958  000126                     u6220:
 11959  000126                     l1198:
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11963  000126  948A               	bcf	3978,2,c	;volatile
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11967  000128  0E01               	movlw	1
 11968  00012A  EC24  F02A         	call	_lcdInst
 11969  00012E  0E68               	movlw	104
 11970  000130  0100               	movlb	0	; () banked
 11971  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11972  000134  0EE4               	movlw	228
 11973  000136                     u9427:
 11974  000136  2EE8               	decfsz	wreg,f,c
 11975  000138  D7FE               	bra	u9427
 11976  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11977  00013C  D7FC               	bra	u9427
 11978  00013E  F000               	nop	
 11979  000140  0E80               	movlw	128
 11980  000142  EC24  F02A         	call	_lcdInst
 11981                           
 11982                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11983  000146  0E70               	movlw	low STR_92
 11984  000148  0100               	movlb	0	; () banked
 11985  00014A  6F8E               	movwf	printf@f& (0+255),b
 11986  00014C  0EFC               	movlw	high STR_92
 11987  00014E  0100               	movlb	0	; () banked
 11988  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11989  000152  EC00  F00B         	call	_printf	;wreg free
 11990                           
 11991                           ;Test.c: 233: lcdInst(0b11000000);;
 11992  000156  0EC0               	movlw	192
 11993  000158  EC24  F02A         	call	_lcdInst
 11994                           
 11995                           ;Test.c: 234: printf("PIN RA3...");
 11996  00015C  0E5B               	movlw	low STR_93
 11997  00015E  0100               	movlb	0	; () banked
 11998  000160  6F8E               	movwf	printf@f& (0+255),b
 11999  000162  0EFF               	movlw	high STR_93
 12000  000164  0100               	movlb	0	; () banked
 12001  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 12002  000168  EC00  F00B         	call	_printf	;wreg free
 12003                           
 12004                           ;Test.c: 235: for(i=0;i<5;i++){
 12005  00016C  0E00               	movlw	0
 12006  00016E  0100               	movlb	0	; () banked
 12007  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12008  000172  0E00               	movlw	0
 12009  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 12010                           
 12011                           ; BSR set to: 0
 12012  000176  0100               	movlb	0	; () banked
 12013  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12014  00017A  D008               	goto	l1201
 12015  00017C  0100               	movlb	0	; () banked
 12016  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12017  000180  E12C               	bnz	l1202
 12018  000182  0E05               	movlw	5
 12019  000184  0100               	movlb	0	; () banked
 12020  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12021  000188  B0D8               	btfsc	status,0,c
 12022  00018A  D027               	goto	l1202
 12023  00018C                     l1201:
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;Test.c: 236: LATAbits.LATA3 = 1;
 12027  00018C  8689               	bsf	3977,3,c	;volatile
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 12031  00018E  0E0D               	movlw	13
 12032  000190  0100               	movlb	0	; () banked
 12033  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12034  000194  0E2D               	movlw	45
 12035  000196  0100               	movlb	0	; () banked
 12036  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 12037  00019A  0ED7               	movlw	215
 12038  00019C                     u9437:
 12039  00019C  2EE8               	decfsz	wreg,f,c
 12040  00019E  D7FE               	bra	u9437
 12041  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12042  0001A2  D7FC               	bra	u9437
 12043  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12044  0001A6  D7FA               	bra	u9437
 12045  0001A8  D000               	nop2	
 12046                           
 12047                           ;Test.c: 238: LATAbits.LATA3 = !1;
 12048  0001AA  9689               	bcf	3977,3,c	;volatile
 12049                           
 12050                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12051  0001AC  0E1D               	movlw	29
 12052  0001AE  0100               	movlb	0	; () banked
 12053  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12054  0001B2  0E69               	movlw	105
 12055  0001B4  0100               	movlb	0	; () banked
 12056  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12057  0001B8  0EA5               	movlw	165
 12058  0001BA                     u9447:
 12059  0001BA  2EE8               	decfsz	wreg,f,c
 12060  0001BC  D7FE               	bra	u9447
 12061  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12062  0001C0  D7FC               	bra	u9447
 12063  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12064  0001C4  D7FA               	bra	u9447
 12065  0001C6  0100               	movlb	0	; () banked
 12066  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12067  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12068  0001CC  0100               	movlb	0	; () banked
 12069  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12070  0001D0  D7DD               	goto	l1201
 12071  0001D2  0100               	movlb	0	; () banked
 12072  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12073  0001D6  E101               	bnz	u6240
 12074  0001D8  D7D4               	goto	L11
 12075  0001DA                     u6240:
 12076  0001DA                     l1202:
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;Test.c: 240: }
 12080                           ;Test.c: 241: LATAbits.LATA3 = !1;
 12081  0001DA  9689               	bcf	3977,3,c	;volatile
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12085  0001DC  0E01               	movlw	1
 12086  0001DE  EC24  F02A         	call	_lcdInst
 12087  0001E2  0E68               	movlw	104
 12088  0001E4  0100               	movlb	0	; () banked
 12089  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12090  0001E8  0EE4               	movlw	228
 12091  0001EA                     u9457:
 12092  0001EA  2EE8               	decfsz	wreg,f,c
 12093  0001EC  D7FE               	bra	u9457
 12094  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12095  0001F0  D7FC               	bra	u9457
 12096  0001F2  F000               	nop	
 12097  0001F4  0E80               	movlw	128
 12098  0001F6  EC24  F02A         	call	_lcdInst
 12099                           
 12100                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 12101  0001FA  0E81               	movlw	low STR_94
 12102  0001FC  0100               	movlb	0	; () banked
 12103  0001FE  6F8E               	movwf	printf@f& (0+255),b
 12104  000200  0EFC               	movlw	high STR_94
 12105  000202  0100               	movlb	0	; () banked
 12106  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 12107  000206  EC00  F00B         	call	_printf	;wreg free
 12108                           
 12109                           ;Test.c: 249: lcdInst(0b11000000);;
 12110  00020A  0EC0               	movlw	192
 12111  00020C  EC24  F02A         	call	_lcdInst
 12112                           
 12113                           ;Test.c: 250: printf("PIN RA4...");
 12114  000210  0E66               	movlw	low STR_95
 12115  000212  0100               	movlb	0	; () banked
 12116  000214  6F8E               	movwf	printf@f& (0+255),b
 12117  000216  0EFF               	movlw	high STR_95
 12118  000218  0100               	movlb	0	; () banked
 12119  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12120  00021C  EC00  F00B         	call	_printf	;wreg free
 12121                           
 12122                           ;Test.c: 251: for(i=0;i<5;i++){
 12123  000220  0E00               	movlw	0
 12124  000222  0100               	movlb	0	; () banked
 12125  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12126  000226  0E00               	movlw	0
 12127  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12128                           
 12129                           ; BSR set to: 0
 12130  00022A  0100               	movlb	0	; () banked
 12131  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12132  00022E  D008               	goto	l1203
 12133  000230  0100               	movlb	0	; () banked
 12134  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12135  000234  E12C               	bnz	l1204
 12136  000236  0E05               	movlw	5
 12137  000238  0100               	movlb	0	; () banked
 12138  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12139  00023C  B0D8               	btfsc	status,0,c
 12140  00023E  D027               	goto	l1204
 12141  000240                     l1203:
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12145  000240  8889               	bsf	3977,4,c	;volatile
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12149  000242  0E0D               	movlw	13
 12150  000244  0100               	movlb	0	; () banked
 12151  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12152  000248  0E2D               	movlw	45
 12153  00024A  0100               	movlb	0	; () banked
 12154  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12155  00024E  0ED7               	movlw	215
 12156  000250                     u9467:
 12157  000250  2EE8               	decfsz	wreg,f,c
 12158  000252  D7FE               	bra	u9467
 12159  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12160  000256  D7FC               	bra	u9467
 12161  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12162  00025A  D7FA               	bra	u9467
 12163  00025C  D000               	nop2	
 12164                           
 12165                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12166  00025E  9889               	bcf	3977,4,c	;volatile
 12167                           
 12168                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12169  000260  0E1D               	movlw	29
 12170  000262  0100               	movlb	0	; () banked
 12171  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12172  000266  0E69               	movlw	105
 12173  000268  0100               	movlb	0	; () banked
 12174  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12175  00026C  0EA5               	movlw	165
 12176  00026E                     u9477:
 12177  00026E  2EE8               	decfsz	wreg,f,c
 12178  000270  D7FE               	bra	u9477
 12179  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12180  000274  D7FC               	bra	u9477
 12181  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12182  000278  D7FA               	bra	u9477
 12183  00027A  0100               	movlb	0	; () banked
 12184  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12185  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12186  000280  0100               	movlb	0	; () banked
 12187  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12188  000284  D7DD               	goto	l1203
 12189  000286  0100               	movlb	0	; () banked
 12190  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12191  00028A  E101               	bnz	u6260
 12192  00028C  D7D4               	goto	L12
 12193  00028E                     u6260:
 12194  00028E                     l1204:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;Test.c: 256: }
 12198                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12199  00028E  9889               	bcf	3977,4,c	;volatile
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12203  000290  0E01               	movlw	1
 12204  000292  EC24  F02A         	call	_lcdInst
 12205  000296  0E68               	movlw	104
 12206  000298  0100               	movlb	0	; () banked
 12207  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12208  00029C  0EE4               	movlw	228
 12209  00029E                     u9487:
 12210  00029E  2EE8               	decfsz	wreg,f,c
 12211  0002A0  D7FE               	bra	u9487
 12212  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12213  0002A4  D7FC               	bra	u9487
 12214  0002A6  F000               	nop	
 12215  0002A8  0E80               	movlw	128
 12216  0002AA  EC24  F02A         	call	_lcdInst
 12217                           
 12218                           ;Test.c: 261: machine_state = Sorting_state;
 12219  0002AE  0E01               	movlw	1
 12220  0002B0  0100               	movlb	0	; () banked
 12221  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;Test.c: 262: was_low_1 = 0;
 12225  0002B4  0E00               	movlw	0
 12226  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12227  0002B8  0E00               	movlw	0
 12228  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;Test.c: 263: was_low_1 = 0;
 12232  0002BC  0E00               	movlw	0
 12233  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12234  0002C0  0E00               	movlw	0
 12235  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;Test.c: 270: printf("TST: PAN SERVO");
 12239  0002C4  0EA5               	movlw	low STR_96
 12240  0002C6  0100               	movlb	0	; () banked
 12241  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12242  0002CA  0EFE               	movlw	high STR_96
 12243  0002CC  0100               	movlb	0	; () banked
 12244  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12245  0002D0  EC00  F00B         	call	_printf	;wreg free
 12246                           
 12247                           ;Test.c: 271: lcdInst(0b11000000);;
 12248  0002D4  0EC0               	movlw	192
 12249  0002D6  EC24  F02A         	call	_lcdInst
 12250                           
 12251                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12252  0002DA  0E0A               	movlw	low STR_97
 12253  0002DC  0100               	movlb	0	; () banked
 12254  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12255  0002E0  0EFC               	movlw	high STR_97
 12256  0002E2  0100               	movlb	0	; () banked
 12257  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12258  0002E6  EC00  F00B         	call	_printf	;wreg free
 12259                           
 12260                           ;Test.c: 273: updateServoPosition(1200, 1);
 12261  0002EA  0E04               	movlw	4
 12262  0002EC  0100               	movlb	0	; () banked
 12263  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12264  0002F0  0EB0               	movlw	176
 12265  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12266  0002F4  0E00               	movlw	0
 12267  0002F6  0100               	movlb	0	; () banked
 12268  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12269  0002FA  0E01               	movlw	1
 12270  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12271  0002FE  ECFE  F023         	call	_updateServoPosition	;wreg free
 12272                           
 12273                           ;Test.c: 274: TMR1ON = 1;
 12274  000302  80CD               	bsf	4045,0,c	;volatile
 12275                           
 12276                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12277  000304  0E00               	movlw	0
 12278  000306  0100               	movlb	0	; () banked
 12279  000308  6FAE               	movwf	actuatorTest@i_1737& (0+255),b
 12280  00030A                     l7826:
 12281                           
 12282                           ; BSR set to: 0
 12283  00030A  0E63               	movlw	99
 12284  00030C  0100               	movlb	0	; () banked
 12285  00030E  65AE               	cpfsgt	actuatorTest@i_1737& (0+255),b
 12286  000310  D001               	goto	l7830
 12287  000312  D00C               	goto	l7834
 12288  000314                     l7830:
 12289                           
 12290                           ; BSR set to: 0
 12291  000314  0E68               	movlw	104
 12292  000316  0100               	movlb	0	; () banked
 12293  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12294  00031A  0EE4               	movlw	228
 12295  00031C                     u9497:
 12296  00031C  2EE8               	decfsz	wreg,f,c
 12297  00031E  D7FE               	bra	u9497
 12298  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12299  000322  D7FC               	bra	u9497
 12300  000324  F000               	nop	
 12301  000326  0100               	movlb	0	; () banked
 12302  000328  2BAE               	incf	actuatorTest@i_1737& (0+255),f,b
 12303  00032A  D7EF               	goto	l7826
 12304  00032C                     l7834:
 12305                           
 12306                           ; BSR set to: 0
 12307  00032C  0E00               	movlw	0
 12308  00032E  0100               	movlb	0	; () banked
 12309  000330  6FAF               	movwf	actuatorTest@i_1738& (0+255),b
 12310  000332                     l7836:
 12311                           
 12312                           ; BSR set to: 0
 12313  000332  0E63               	movlw	99
 12314  000334  0100               	movlb	0	; () banked
 12315  000336  65AF               	cpfsgt	actuatorTest@i_1738& (0+255),b
 12316  000338  D001               	goto	l7840
 12317  00033A  D00C               	goto	l7844
 12318  00033C                     l7840:
 12319                           
 12320                           ; BSR set to: 0
 12321  00033C  0E68               	movlw	104
 12322  00033E  0100               	movlb	0	; () banked
 12323  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12324  000342  0EE4               	movlw	228
 12325  000344                     u9507:
 12326  000344  2EE8               	decfsz	wreg,f,c
 12327  000346  D7FE               	bra	u9507
 12328  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12329  00034A  D7FC               	bra	u9507
 12330  00034C  F000               	nop	
 12331  00034E  0100               	movlb	0	; () banked
 12332  000350  2BAF               	incf	actuatorTest@i_1738& (0+255),f,b
 12333  000352  D7EF               	goto	l7836
 12334  000354                     l7844:
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12338  000354  0E80               	movlw	128
 12339  000356  EC24  F02A         	call	_lcdInst
 12340  00035A  0EC0               	movlw	192
 12341  00035C  EC24  F02A         	call	_lcdInst
 12342                           
 12343                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12344  000360  0EF9               	movlw	low STR_98
 12345  000362  0100               	movlb	0	; () banked
 12346  000364  6F8E               	movwf	printf@f& (0+255),b
 12347  000366  0EFB               	movlw	high STR_98
 12348  000368  0100               	movlb	0	; () banked
 12349  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12350  00036C  EC00  F00B         	call	_printf	;wreg free
 12351                           
 12352                           ;Test.c: 279: updateServoPosition(500, 1);
 12353  000370  0E01               	movlw	1
 12354  000372  0100               	movlb	0	; () banked
 12355  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12356  000376  0EF4               	movlw	244
 12357  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12358  00037A  0E00               	movlw	0
 12359  00037C  0100               	movlb	0	; () banked
 12360  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12361  000380  0E01               	movlw	1
 12362  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12363  000384  ECFE  F023         	call	_updateServoPosition	;wreg free
 12364                           
 12365                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12366  000388  0E00               	movlw	0
 12367  00038A  0100               	movlb	0	; () banked
 12368  00038C  6FB0               	movwf	actuatorTest@i_1740& (0+255),b
 12369  00038E                     l7852:
 12370                           
 12371                           ; BSR set to: 0
 12372  00038E  0E63               	movlw	99
 12373  000390  0100               	movlb	0	; () banked
 12374  000392  65B0               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12375  000394  D001               	goto	l7856
 12376  000396  D00C               	goto	l7860
 12377  000398                     l7856:
 12378                           
 12379                           ; BSR set to: 0
 12380  000398  0E68               	movlw	104
 12381  00039A  0100               	movlb	0	; () banked
 12382  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12383  00039E  0EE4               	movlw	228
 12384  0003A0                     u9517:
 12385  0003A0  2EE8               	decfsz	wreg,f,c
 12386  0003A2  D7FE               	bra	u9517
 12387  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12388  0003A6  D7FC               	bra	u9517
 12389  0003A8  F000               	nop	
 12390  0003AA  0100               	movlb	0	; () banked
 12391  0003AC  2BB0               	incf	actuatorTest@i_1740& (0+255),f,b
 12392  0003AE  D7EF               	goto	l7852
 12393  0003B0                     l7860:
 12394                           
 12395                           ; BSR set to: 0
 12396  0003B0  0E00               	movlw	0
 12397  0003B2  0100               	movlb	0	; () banked
 12398  0003B4  6FB1               	movwf	actuatorTest@i_1741& (0+255),b
 12399  0003B6                     l7862:
 12400                           
 12401                           ; BSR set to: 0
 12402  0003B6  0E63               	movlw	99
 12403  0003B8  0100               	movlb	0	; () banked
 12404  0003BA  65B1               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12405  0003BC  D001               	goto	l7866
 12406  0003BE  D00C               	goto	l7870
 12407  0003C0                     l7866:
 12408                           
 12409                           ; BSR set to: 0
 12410  0003C0  0E68               	movlw	104
 12411  0003C2  0100               	movlb	0	; () banked
 12412  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12413  0003C6  0EE4               	movlw	228
 12414  0003C8                     u9527:
 12415  0003C8  2EE8               	decfsz	wreg,f,c
 12416  0003CA  D7FE               	bra	u9527
 12417  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12418  0003CE  D7FC               	bra	u9527
 12419  0003D0  F000               	nop	
 12420  0003D2  0100               	movlb	0	; () banked
 12421  0003D4  2BB1               	incf	actuatorTest@i_1741& (0+255),f,b
 12422  0003D6  D7EF               	goto	l7862
 12423  0003D8                     l7870:
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12427  0003D8  0E80               	movlw	128
 12428  0003DA  EC24  F02A         	call	_lcdInst
 12429  0003DE  0EC0               	movlw	192
 12430  0003E0  EC24  F02A         	call	_lcdInst
 12431                           
 12432                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12433  0003E4  0ED7               	movlw	low STR_99
 12434  0003E6  0100               	movlb	0	; () banked
 12435  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12436  0003EA  0EFB               	movlw	high STR_99
 12437  0003EC  0100               	movlb	0	; () banked
 12438  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12439  0003F0  EC00  F00B         	call	_printf	;wreg free
 12440                           
 12441                           ;Test.c: 284: updateServoPosition(2400, 1);
 12442  0003F4  0E09               	movlw	9
 12443  0003F6  0100               	movlb	0	; () banked
 12444  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12445  0003FA  0E60               	movlw	96
 12446  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12447  0003FE  0E00               	movlw	0
 12448  000400  0100               	movlb	0	; () banked
 12449  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12450  000404  0E01               	movlw	1
 12451  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12452  000408  ECFE  F023         	call	_updateServoPosition	;wreg free
 12453                           
 12454                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12455  00040C  0E00               	movlw	0
 12456  00040E  0100               	movlb	0	; () banked
 12457  000410  6FB2               	movwf	actuatorTest@i_1743& (0+255),b
 12458  000412                     l7878:
 12459                           
 12460                           ; BSR set to: 0
 12461  000412  0E63               	movlw	99
 12462  000414  0100               	movlb	0	; () banked
 12463  000416  65B2               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12464  000418  D001               	goto	l7882
 12465  00041A  D00C               	goto	l7886
 12466  00041C                     l7882:
 12467                           
 12468                           ; BSR set to: 0
 12469  00041C  0E68               	movlw	104
 12470  00041E  0100               	movlb	0	; () banked
 12471  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12472  000422  0EE4               	movlw	228
 12473  000424                     u9537:
 12474  000424  2EE8               	decfsz	wreg,f,c
 12475  000426  D7FE               	bra	u9537
 12476  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12477  00042A  D7FC               	bra	u9537
 12478  00042C  F000               	nop	
 12479  00042E  0100               	movlb	0	; () banked
 12480  000430  2BB2               	incf	actuatorTest@i_1743& (0+255),f,b
 12481  000432  D7EF               	goto	l7878
 12482  000434                     l7886:
 12483                           
 12484                           ; BSR set to: 0
 12485  000434  0E00               	movlw	0
 12486  000436  0100               	movlb	0	; () banked
 12487  000438  6FB3               	movwf	actuatorTest@i_1744& (0+255),b
 12488  00043A                     l7888:
 12489                           
 12490                           ; BSR set to: 0
 12491  00043A  0E63               	movlw	99
 12492  00043C  0100               	movlb	0	; () banked
 12493  00043E  65B3               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12494  000440  D001               	goto	l7892
 12495  000442  D00C               	goto	l7896
 12496  000444                     l7892:
 12497                           
 12498                           ; BSR set to: 0
 12499  000444  0E68               	movlw	104
 12500  000446  0100               	movlb	0	; () banked
 12501  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12502  00044A  0EE4               	movlw	228
 12503  00044C                     u9547:
 12504  00044C  2EE8               	decfsz	wreg,f,c
 12505  00044E  D7FE               	bra	u9547
 12506  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12507  000452  D7FC               	bra	u9547
 12508  000454  F000               	nop	
 12509  000456  0100               	movlb	0	; () banked
 12510  000458  2BB3               	incf	actuatorTest@i_1744& (0+255),f,b
 12511  00045A  D7EF               	goto	l7888
 12512  00045C                     l7896:
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12516  00045C  0E80               	movlw	128
 12517  00045E  EC24  F02A         	call	_lcdInst
 12518  000462  0EC0               	movlw	192
 12519  000464  EC24  F02A         	call	_lcdInst
 12520                           
 12521                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12522  000468  0E2C               	movlw	low STR_100
 12523  00046A  0100               	movlb	0	; () banked
 12524  00046C  6F8E               	movwf	printf@f& (0+255),b
 12525  00046E  0EFC               	movlw	high STR_100
 12526  000470  0100               	movlb	0	; () banked
 12527  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12528  000474  EC00  F00B         	call	_printf	;wreg free
 12529                           
 12530                           ;Test.c: 289: updateServoPosition(1670, 1);
 12531  000478  0E06               	movlw	6
 12532  00047A  0100               	movlb	0	; () banked
 12533  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12534  00047E  0E86               	movlw	134
 12535  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12536  000482  0E00               	movlw	0
 12537  000484  0100               	movlb	0	; () banked
 12538  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12539  000488  0E01               	movlw	1
 12540  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12541  00048C  ECFE  F023         	call	_updateServoPosition	;wreg free
 12542                           
 12543                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12544  000490  0E00               	movlw	0
 12545  000492  0100               	movlb	0	; () banked
 12546  000494  6FB4               	movwf	actuatorTest@i_1746& (0+255),b
 12547  000496                     l7904:
 12548                           
 12549                           ; BSR set to: 0
 12550  000496  0E63               	movlw	99
 12551  000498  0100               	movlb	0	; () banked
 12552  00049A  65B4               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12553  00049C  D001               	goto	l7908
 12554  00049E  D00C               	goto	l7912
 12555  0004A0                     l7908:
 12556                           
 12557                           ; BSR set to: 0
 12558  0004A0  0E68               	movlw	104
 12559  0004A2  0100               	movlb	0	; () banked
 12560  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12561  0004A6  0EE4               	movlw	228
 12562  0004A8                     u9557:
 12563  0004A8  2EE8               	decfsz	wreg,f,c
 12564  0004AA  D7FE               	bra	u9557
 12565  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12566  0004AE  D7FC               	bra	u9557
 12567  0004B0  F000               	nop	
 12568  0004B2  0100               	movlb	0	; () banked
 12569  0004B4  2BB4               	incf	actuatorTest@i_1746& (0+255),f,b
 12570  0004B6  D7EF               	goto	l7904
 12571  0004B8                     l7912:
 12572                           
 12573                           ; BSR set to: 0
 12574  0004B8  0E00               	movlw	0
 12575  0004BA  0100               	movlb	0	; () banked
 12576  0004BC  6FB5               	movwf	actuatorTest@i_1747& (0+255),b
 12577  0004BE                     l7914:
 12578                           
 12579                           ; BSR set to: 0
 12580  0004BE  0E63               	movlw	99
 12581  0004C0  0100               	movlb	0	; () banked
 12582  0004C2  65B5               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12583  0004C4  D001               	goto	l7918
 12584  0004C6  D00C               	goto	l7922
 12585  0004C8                     l7918:
 12586                           
 12587                           ; BSR set to: 0
 12588  0004C8  0E68               	movlw	104
 12589  0004CA  0100               	movlb	0	; () banked
 12590  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12591  0004CE  0EE4               	movlw	228
 12592  0004D0                     u9567:
 12593  0004D0  2EE8               	decfsz	wreg,f,c
 12594  0004D2  D7FE               	bra	u9567
 12595  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12596  0004D6  D7FC               	bra	u9567
 12597  0004D8  F000               	nop	
 12598  0004DA  0100               	movlb	0	; () banked
 12599  0004DC  2BB5               	incf	actuatorTest@i_1747& (0+255),f,b
 12600  0004DE  D7EF               	goto	l7914
 12601  0004E0                     l7922:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12605  0004E0  0E80               	movlw	128
 12606  0004E2  EC24  F02A         	call	_lcdInst
 12607  0004E6  0EC0               	movlw	192
 12608  0004E8  EC24  F02A         	call	_lcdInst
 12609                           
 12610                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12611  0004EC  0E3D               	movlw	low STR_101
 12612  0004EE  0100               	movlb	0	; () banked
 12613  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12614  0004F2  0EFC               	movlw	high STR_101
 12615  0004F4  0100               	movlb	0	; () banked
 12616  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12617  0004F8  EC00  F00B         	call	_printf	;wreg free
 12618                           
 12619                           ;Test.c: 294: updateServoPosition(850, 1);
 12620  0004FC  0E03               	movlw	3
 12621  0004FE  0100               	movlb	0	; () banked
 12622  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12623  000502  0E52               	movlw	82
 12624  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12625  000506  0E00               	movlw	0
 12626  000508  0100               	movlb	0	; () banked
 12627  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12628  00050C  0E01               	movlw	1
 12629  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12630  000510  ECFE  F023         	call	_updateServoPosition	;wreg free
 12631                           
 12632                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12633  000514  0E00               	movlw	0
 12634  000516  0100               	movlb	0	; () banked
 12635  000518  6FB6               	movwf	actuatorTest@i_1749& (0+255),b
 12636  00051A                     l7930:
 12637                           
 12638                           ; BSR set to: 0
 12639  00051A  0E63               	movlw	99
 12640  00051C  0100               	movlb	0	; () banked
 12641  00051E  65B6               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12642  000520  D001               	goto	l7934
 12643  000522  D00C               	goto	l7938
 12644  000524                     l7934:
 12645                           
 12646                           ; BSR set to: 0
 12647  000524  0E68               	movlw	104
 12648  000526  0100               	movlb	0	; () banked
 12649  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12650  00052A  0EE4               	movlw	228
 12651  00052C                     u9577:
 12652  00052C  2EE8               	decfsz	wreg,f,c
 12653  00052E  D7FE               	bra	u9577
 12654  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12655  000532  D7FC               	bra	u9577
 12656  000534  F000               	nop	
 12657  000536  0100               	movlb	0	; () banked
 12658  000538  2BB6               	incf	actuatorTest@i_1749& (0+255),f,b
 12659  00053A  D7EF               	goto	l7930
 12660  00053C                     l7938:
 12661                           
 12662                           ; BSR set to: 0
 12663  00053C  0E00               	movlw	0
 12664  00053E  0100               	movlb	0	; () banked
 12665  000540  6FB7               	movwf	actuatorTest@i_1750& (0+255),b
 12666  000542                     l7940:
 12667                           
 12668                           ; BSR set to: 0
 12669  000542  0E63               	movlw	99
 12670  000544  0100               	movlb	0	; () banked
 12671  000546  65B7               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12672  000548  D001               	goto	l7944
 12673  00054A  D00C               	goto	l7948
 12674  00054C                     l7944:
 12675                           
 12676                           ; BSR set to: 0
 12677  00054C  0E68               	movlw	104
 12678  00054E  0100               	movlb	0	; () banked
 12679  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12680  000552  0EE4               	movlw	228
 12681  000554                     u9587:
 12682  000554  2EE8               	decfsz	wreg,f,c
 12683  000556  D7FE               	bra	u9587
 12684  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12685  00055A  D7FC               	bra	u9587
 12686  00055C  F000               	nop	
 12687  00055E  0100               	movlb	0	; () banked
 12688  000560  2BB7               	incf	actuatorTest@i_1750& (0+255),f,b
 12689  000562  D7EF               	goto	l7940
 12690  000564                     l7948:
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12694  000564  0E80               	movlw	128
 12695  000566  EC24  F02A         	call	_lcdInst
 12696  00056A  0EC0               	movlw	192
 12697  00056C  EC24  F02A         	call	_lcdInst
 12698                           
 12699                           ;Test.c: 298: printf("MID -- 2s       ");
 12700  000570  0EB5               	movlw	low STR_102
 12701  000572  0100               	movlb	0	; () banked
 12702  000574  6F8E               	movwf	printf@f& (0+255),b
 12703  000576  0EFB               	movlw	high STR_102
 12704  000578  0100               	movlb	0	; () banked
 12705  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12706  00057C  EC00  F00B         	call	_printf	;wreg free
 12707                           
 12708                           ;Test.c: 299: updateServoPosition(1200, 1);
 12709  000580  0E04               	movlw	4
 12710  000582  0100               	movlb	0	; () banked
 12711  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12712  000586  0EB0               	movlw	176
 12713  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12714  00058A  0E00               	movlw	0
 12715  00058C  0100               	movlb	0	; () banked
 12716  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12717  000590  0E01               	movlw	1
 12718  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12719  000594  ECFE  F023         	call	_updateServoPosition	;wreg free
 12720                           
 12721                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12722  000598  0E00               	movlw	0
 12723  00059A  0100               	movlb	0	; () banked
 12724  00059C  6FB8               	movwf	actuatorTest@i_1752& (0+255),b
 12725  00059E                     l7956:
 12726                           
 12727                           ; BSR set to: 0
 12728  00059E  0E63               	movlw	99
 12729  0005A0  0100               	movlb	0	; () banked
 12730  0005A2  65B8               	cpfsgt	actuatorTest@i_1752& (0+255),b
 12731  0005A4  D001               	goto	l7960
 12732  0005A6  D00C               	goto	l7964
 12733  0005A8                     l7960:
 12734                           
 12735                           ; BSR set to: 0
 12736  0005A8  0E68               	movlw	104
 12737  0005AA  0100               	movlb	0	; () banked
 12738  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12739  0005AE  0EE4               	movlw	228
 12740  0005B0                     u9597:
 12741  0005B0  2EE8               	decfsz	wreg,f,c
 12742  0005B2  D7FE               	bra	u9597
 12743  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12744  0005B6  D7FC               	bra	u9597
 12745  0005B8  F000               	nop	
 12746  0005BA  0100               	movlb	0	; () banked
 12747  0005BC  2BB8               	incf	actuatorTest@i_1752& (0+255),f,b
 12748  0005BE  D7EF               	goto	l7956
 12749  0005C0                     l7964:
 12750                           
 12751                           ; BSR set to: 0
 12752  0005C0  0E00               	movlw	0
 12753  0005C2  0100               	movlb	0	; () banked
 12754  0005C4  6FB9               	movwf	actuatorTest@i_1753& (0+255),b
 12755  0005C6                     l7966:
 12756                           
 12757                           ; BSR set to: 0
 12758  0005C6  0E63               	movlw	99
 12759  0005C8  0100               	movlb	0	; () banked
 12760  0005CA  65B9               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12761  0005CC  D001               	goto	l7970
 12762  0005CE  D00C               	goto	l1228
 12763  0005D0                     l7970:
 12764                           
 12765                           ; BSR set to: 0
 12766  0005D0  0E68               	movlw	104
 12767  0005D2  0100               	movlb	0	; () banked
 12768  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12769  0005D6  0EE4               	movlw	228
 12770  0005D8                     u9607:
 12771  0005D8  2EE8               	decfsz	wreg,f,c
 12772  0005DA  D7FE               	bra	u9607
 12773  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12774  0005DE  D7FC               	bra	u9607
 12775  0005E0  F000               	nop	
 12776  0005E2  0100               	movlb	0	; () banked
 12777  0005E4  2BB9               	incf	actuatorTest@i_1753& (0+255),f,b
 12778  0005E6  D7EF               	goto	l7966
 12779  0005E8                     l1228:
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;Test.c: 301: TMR1ON = 0;
 12783  0005E8  90CD               	bcf	4045,0,c	;volatile
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;Test.c: 308: printf("TST: TILT SERVO");
 12787  0005EA  0E3A               	movlw	low STR_103
 12788  0005EC  0100               	movlb	0	; () banked
 12789  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12790  0005F0  0EFE               	movlw	high STR_103
 12791  0005F2  0100               	movlb	0	; () banked
 12792  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12793  0005F6  EC00  F00B         	call	_printf	;wreg free
 12794                           
 12795                           ;Test.c: 309: lcdInst(0b11000000);;
 12796  0005FA  0EC0               	movlw	192
 12797  0005FC  EC24  F02A         	call	_lcdInst
 12798                           
 12799                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12800  000600  0EE8               	movlw	low STR_104
 12801  000602  0100               	movlb	0	; () banked
 12802  000604  6F8E               	movwf	printf@f& (0+255),b
 12803  000606  0EFB               	movlw	high STR_104
 12804  000608  0100               	movlb	0	; () banked
 12805  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12806  00060C  EC00  F00B         	call	_printf	;wreg free
 12807                           
 12808                           ;Test.c: 311: updateServoPosition(1050, 3);
 12809  000610  0E04               	movlw	4
 12810  000612  0100               	movlb	0	; () banked
 12811  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12812  000616  0E1A               	movlw	26
 12813  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12814  00061A  0E00               	movlw	0
 12815  00061C  0100               	movlb	0	; () banked
 12816  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12817  000620  0E03               	movlw	3
 12818  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12819  000624  ECFE  F023         	call	_updateServoPosition	;wreg free
 12820                           
 12821                           ;Test.c: 312: TMR3ON = 1;
 12822  000628  80B1               	bsf	4017,0,c	;volatile
 12823                           
 12824                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12825  00062A  0E00               	movlw	0
 12826  00062C  0100               	movlb	0	; () banked
 12827  00062E  6FBA               	movwf	actuatorTest@i_1756& (0+255),b
 12828  000630                     l7984:
 12829                           
 12830                           ; BSR set to: 0
 12831  000630  0E63               	movlw	99
 12832  000632  0100               	movlb	0	; () banked
 12833  000634  65BA               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12834  000636  D001               	goto	l7988
 12835  000638  D00C               	goto	l7992
 12836  00063A                     l7988:
 12837                           
 12838                           ; BSR set to: 0
 12839  00063A  0E68               	movlw	104
 12840  00063C  0100               	movlb	0	; () banked
 12841  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12842  000640  0EE4               	movlw	228
 12843  000642                     u9617:
 12844  000642  2EE8               	decfsz	wreg,f,c
 12845  000644  D7FE               	bra	u9617
 12846  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12847  000648  D7FC               	bra	u9617
 12848  00064A  F000               	nop	
 12849  00064C  0100               	movlb	0	; () banked
 12850  00064E  2BBA               	incf	actuatorTest@i_1756& (0+255),f,b
 12851  000650  D7EF               	goto	l7984
 12852  000652                     l7992:
 12853                           
 12854                           ; BSR set to: 0
 12855  000652  0E00               	movlw	0
 12856  000654  0100               	movlb	0	; () banked
 12857  000656  6FBB               	movwf	actuatorTest@i_1757& (0+255),b
 12858  000658                     l7994:
 12859                           
 12860                           ; BSR set to: 0
 12861  000658  0E63               	movlw	99
 12862  00065A  0100               	movlb	0	; () banked
 12863  00065C  65BB               	cpfsgt	actuatorTest@i_1757& (0+255),b
 12864  00065E  D001               	goto	l7998
 12865  000660  D00C               	goto	l8002
 12866  000662                     l7998:
 12867                           
 12868                           ; BSR set to: 0
 12869  000662  0E68               	movlw	104
 12870  000664  0100               	movlb	0	; () banked
 12871  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12872  000668  0EE4               	movlw	228
 12873  00066A                     u9627:
 12874  00066A  2EE8               	decfsz	wreg,f,c
 12875  00066C  D7FE               	bra	u9627
 12876  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12877  000670  D7FC               	bra	u9627
 12878  000672  F000               	nop	
 12879  000674  0100               	movlb	0	; () banked
 12880  000676  2BBB               	incf	actuatorTest@i_1757& (0+255),f,b
 12881  000678  D7EF               	goto	l7994
 12882  00067A                     l8002:
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12886  00067A  0E80               	movlw	128
 12887  00067C  EC24  F02A         	call	_lcdInst
 12888  000680  0EC0               	movlw	192
 12889  000682  EC24  F02A         	call	_lcdInst
 12890                           
 12891                           ;Test.c: 316: printf("DROP -- 2s      ");
 12892  000686  0EC6               	movlw	low STR_105
 12893  000688  0100               	movlb	0	; () banked
 12894  00068A  6F8E               	movwf	printf@f& (0+255),b
 12895  00068C  0EFB               	movlw	high STR_105
 12896  00068E  0100               	movlb	0	; () banked
 12897  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12898  000692  EC00  F00B         	call	_printf	;wreg free
 12899                           
 12900                           ;Test.c: 317: updateServoPosition(1260, 3);
 12901  000696  0E04               	movlw	4
 12902  000698  0100               	movlb	0	; () banked
 12903  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12904  00069C  0EEC               	movlw	236
 12905  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12906  0006A0  0E00               	movlw	0
 12907  0006A2  0100               	movlb	0	; () banked
 12908  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12909  0006A6  0E03               	movlw	3
 12910  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12911  0006AA  ECFE  F023         	call	_updateServoPosition	;wreg free
 12912                           
 12913                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12914  0006AE  0E00               	movlw	0
 12915  0006B0  0100               	movlb	0	; () banked
 12916  0006B2  6FBC               	movwf	actuatorTest@i_1759& (0+255),b
 12917  0006B4                     l8010:
 12918                           
 12919                           ; BSR set to: 0
 12920  0006B4  0E63               	movlw	99
 12921  0006B6  0100               	movlb	0	; () banked
 12922  0006B8  65BC               	cpfsgt	actuatorTest@i_1759& (0+255),b
 12923  0006BA  D001               	goto	l8014
 12924  0006BC  D00C               	goto	l8018
 12925  0006BE                     l8014:
 12926                           
 12927                           ; BSR set to: 0
 12928  0006BE  0E68               	movlw	104
 12929  0006C0  0100               	movlb	0	; () banked
 12930  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12931  0006C4  0EE4               	movlw	228
 12932  0006C6                     u9637:
 12933  0006C6  2EE8               	decfsz	wreg,f,c
 12934  0006C8  D7FE               	bra	u9637
 12935  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12936  0006CC  D7FC               	bra	u9637
 12937  0006CE  F000               	nop	
 12938  0006D0  0100               	movlb	0	; () banked
 12939  0006D2  2BBC               	incf	actuatorTest@i_1759& (0+255),f,b
 12940  0006D4  D7EF               	goto	l8010
 12941  0006D6                     l8018:
 12942                           
 12943                           ; BSR set to: 0
 12944  0006D6  0E00               	movlw	0
 12945  0006D8  0100               	movlb	0	; () banked
 12946  0006DA  6FBD               	movwf	actuatorTest@i_1760& (0+255),b
 12947  0006DC                     l8020:
 12948                           
 12949                           ; BSR set to: 0
 12950  0006DC  0E63               	movlw	99
 12951  0006DE  0100               	movlb	0	; () banked
 12952  0006E0  65BD               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12953  0006E2  D001               	goto	l8024
 12954  0006E4  D00C               	goto	l8028
 12955  0006E6                     l8024:
 12956                           
 12957                           ; BSR set to: 0
 12958  0006E6  0E68               	movlw	104
 12959  0006E8  0100               	movlb	0	; () banked
 12960  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12961  0006EC  0EE4               	movlw	228
 12962  0006EE                     u9647:
 12963  0006EE  2EE8               	decfsz	wreg,f,c
 12964  0006F0  D7FE               	bra	u9647
 12965  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12966  0006F4  D7FC               	bra	u9647
 12967  0006F6  F000               	nop	
 12968  0006F8  0100               	movlb	0	; () banked
 12969  0006FA  2BBD               	incf	actuatorTest@i_1760& (0+255),f,b
 12970  0006FC  D7EF               	goto	l8020
 12971  0006FE                     l8028:
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12975  0006FE  0E80               	movlw	128
 12976  000700  EC24  F02A         	call	_lcdInst
 12977  000704  0EC0               	movlw	192
 12978  000706  EC24  F02A         	call	_lcdInst
 12979                           
 12980                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12981  00070A  0EE8               	movlw	low STR_104
 12982  00070C  0100               	movlb	0	; () banked
 12983  00070E  6F8E               	movwf	printf@f& (0+255),b
 12984  000710  0EFB               	movlw	high STR_104
 12985  000712  0100               	movlb	0	; () banked
 12986  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12987  000716  EC00  F00B         	call	_printf	;wreg free
 12988                           
 12989                           ;Test.c: 322: updateServoPosition(1050, 3);
 12990  00071A  0E04               	movlw	4
 12991  00071C  0100               	movlb	0	; () banked
 12992  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12993  000720  0E1A               	movlw	26
 12994  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12995  000724  0E00               	movlw	0
 12996  000726  0100               	movlb	0	; () banked
 12997  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12998  00072A  0E03               	movlw	3
 12999  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13000  00072E  ECFE  F023         	call	_updateServoPosition	;wreg free
 13001                           
 13002                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13003  000732  0E00               	movlw	0
 13004  000734  0100               	movlb	0	; () banked
 13005  000736  6FBE               	movwf	actuatorTest@i_1762& (0+255),b
 13006  000738                     l8036:
 13007                           
 13008                           ; BSR set to: 0
 13009  000738  0E63               	movlw	99
 13010  00073A  0100               	movlb	0	; () banked
 13011  00073C  65BE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 13012  00073E  D001               	goto	l8040
 13013  000740  D00C               	goto	l8044
 13014  000742                     l8040:
 13015                           
 13016                           ; BSR set to: 0
 13017  000742  0E68               	movlw	104
 13018  000744  0100               	movlb	0	; () banked
 13019  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 13020  000748  0EE4               	movlw	228
 13021  00074A                     u9657:
 13022  00074A  2EE8               	decfsz	wreg,f,c
 13023  00074C  D7FE               	bra	u9657
 13024  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13025  000750  D7FC               	bra	u9657
 13026  000752  F000               	nop	
 13027  000754  0100               	movlb	0	; () banked
 13028  000756  2BBE               	incf	actuatorTest@i_1762& (0+255),f,b
 13029  000758  D7EF               	goto	l8036
 13030  00075A                     l8044:
 13031                           
 13032                           ; BSR set to: 0
 13033  00075A  0E00               	movlw	0
 13034  00075C  0100               	movlb	0	; () banked
 13035  00075E  6FBF               	movwf	actuatorTest@i_1763& (0+255),b
 13036  000760                     l8046:
 13037                           
 13038                           ; BSR set to: 0
 13039  000760  0E63               	movlw	99
 13040  000762  0100               	movlb	0	; () banked
 13041  000764  65BF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 13042  000766  D001               	goto	l8050
 13043  000768  D00C               	goto	l1240
 13044  00076A                     l8050:
 13045                           
 13046                           ; BSR set to: 0
 13047  00076A  0E68               	movlw	104
 13048  00076C  0100               	movlb	0	; () banked
 13049  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13050  000770  0EE4               	movlw	228
 13051  000772                     u9667:
 13052  000772  2EE8               	decfsz	wreg,f,c
 13053  000774  D7FE               	bra	u9667
 13054  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13055  000778  D7FC               	bra	u9667
 13056  00077A  F000               	nop	
 13057  00077C  0100               	movlb	0	; () banked
 13058  00077E  2BBF               	incf	actuatorTest@i_1763& (0+255),f,b
 13059  000780  D7EF               	goto	l8046
 13060  000782                     l1240:
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;Test.c: 324: TMR3ON = 0;
 13064  000782  90B1               	bcf	4017,0,c	;volatile
 13065                           
 13066                           ;Test.c: 325: (INTCONbits.GIE = 0);
 13067  000784  9EF2               	bcf	intcon,7,c	;volatile
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13071  000786  0E01               	movlw	1
 13072  000788  EC24  F02A         	call	_lcdInst
 13073  00078C  0E68               	movlw	104
 13074  00078E  0100               	movlb	0	; () banked
 13075  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 13076  000792  0EE4               	movlw	228
 13077  000794                     u9677:
 13078  000794  2EE8               	decfsz	wreg,f,c
 13079  000796  D7FE               	bra	u9677
 13080  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13081  00079A  D7FC               	bra	u9677
 13082  00079C  F000               	nop	
 13083  00079E  0E80               	movlw	128
 13084  0007A0  EC24  F02A         	call	_lcdInst
 13085                           
 13086                           ;Test.c: 331: printf("TST: CAM SERVO");
 13087  0007A4  0E96               	movlw	low STR_107
 13088  0007A6  0100               	movlb	0	; () banked
 13089  0007A8  6F8E               	movwf	printf@f& (0+255),b
 13090  0007AA  0EFE               	movlw	high STR_107
 13091  0007AC  0100               	movlb	0	; () banked
 13092  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13093  0007B0  EC00  F00B         	call	_printf	;wreg free
 13094                           
 13095                           ;Test.c: 332: lcdInst(0b11000000);;
 13096  0007B4  0EC0               	movlw	192
 13097  0007B6  EC24  F02A         	call	_lcdInst
 13098                           
 13099                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 13100  0007BA  0E78               	movlw	low STR_108
 13101  0007BC  0100               	movlb	0	; () banked
 13102  0007BE  6F8E               	movwf	printf@f& (0+255),b
 13103  0007C0  0EFE               	movlw	high STR_108
 13104  0007C2  0100               	movlb	0	; () banked
 13105  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13106  0007C6  EC00  F00B         	call	_printf	;wreg free
 13107                           
 13108                           ;Test.c: 334: LATCbits.LATC0 = 1;
 13109  0007CA  808B               	bsf	3979,0,c	;volatile
 13110                           
 13111                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13112  0007CC  0E00               	movlw	0
 13113  0007CE  0100               	movlb	0	; () banked
 13114  0007D0  6FC0               	movwf	actuatorTest@i_1766& (0+255),b
 13115  0007D2                     l8070:
 13116                           
 13117                           ; BSR set to: 0
 13118  0007D2  0E63               	movlw	99
 13119  0007D4  0100               	movlb	0	; () banked
 13120  0007D6  65C0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 13121  0007D8  D001               	goto	l8074
 13122  0007DA  D00C               	goto	l8078
 13123  0007DC                     l8074:
 13124                           
 13125                           ; BSR set to: 0
 13126  0007DC  0E68               	movlw	104
 13127  0007DE  0100               	movlb	0	; () banked
 13128  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13129  0007E2  0EE4               	movlw	228
 13130  0007E4                     u9687:
 13131  0007E4  2EE8               	decfsz	wreg,f,c
 13132  0007E6  D7FE               	bra	u9687
 13133  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13134  0007EA  D7FC               	bra	u9687
 13135  0007EC  F000               	nop	
 13136  0007EE  0100               	movlb	0	; () banked
 13137  0007F0  2BC0               	incf	actuatorTest@i_1766& (0+255),f,b
 13138  0007F2  D7EF               	goto	l8070
 13139  0007F4                     l8078:
 13140                           
 13141                           ; BSR set to: 0
 13142  0007F4  0E00               	movlw	0
 13143  0007F6  0100               	movlb	0	; () banked
 13144  0007F8  6FC1               	movwf	actuatorTest@i_1767& (0+255),b
 13145  0007FA                     l8080:
 13146                           
 13147                           ; BSR set to: 0
 13148  0007FA  0E63               	movlw	99
 13149  0007FC  0100               	movlb	0	; () banked
 13150  0007FE  65C1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 13151  000800  D001               	goto	l8084
 13152  000802  D00C               	goto	l8088
 13153  000804                     l8084:
 13154                           
 13155                           ; BSR set to: 0
 13156  000804  0E68               	movlw	104
 13157  000806  0100               	movlb	0	; () banked
 13158  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13159  00080A  0EE4               	movlw	228
 13160  00080C                     u9697:
 13161  00080C  2EE8               	decfsz	wreg,f,c
 13162  00080E  D7FE               	bra	u9697
 13163  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13164  000812  D7FC               	bra	u9697
 13165  000814  F000               	nop	
 13166  000816  0100               	movlb	0	; () banked
 13167  000818  2BC1               	incf	actuatorTest@i_1767& (0+255),f,b
 13168  00081A  D7EF               	goto	l8080
 13169  00081C                     l8088:
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13173  00081C  0E80               	movlw	128
 13174  00081E  EC24  F02A         	call	_lcdInst
 13175  000822  0EC0               	movlw	192
 13176  000824  EC24  F02A         	call	_lcdInst
 13177                           
 13178                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13179  000828  0E69               	movlw	low STR_109
 13180  00082A  0100               	movlb	0	; () banked
 13181  00082C  6F8E               	movwf	printf@f& (0+255),b
 13182  00082E  0EFE               	movlw	high STR_109
 13183  000830  0100               	movlb	0	; () banked
 13184  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13185  000834  EC00  F00B         	call	_printf	;wreg free
 13186                           
 13187                           ;Test.c: 340: for(i=0;i<10000;i++)
 13188  000838  0E00               	movlw	0
 13189  00083A  0100               	movlb	0	; () banked
 13190  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13191  00083E  0E00               	movlw	0
 13192  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13193  000842                     l8094:
 13194                           
 13195                           ; BSR set to: 0
 13196  000842  0100               	movlb	0	; () banked
 13197  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13198  000846  D008               	goto	l1245
 13199  000848  0E10               	movlw	16
 13200  00084A  0100               	movlb	0	; () banked
 13201  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13202  00084E  0E27               	movlw	39
 13203  000850  0100               	movlb	0	; () banked
 13204  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13205  000854  B0D8               	btfsc	status,0,c
 13206  000856  D00D               	goto	l8104
 13207  000858                     l1245:
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;Test.c: 341: {
 13211                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13212  000858  808B               	bsf	3979,0,c	;volatile
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13216  00085A  0E1A               	movlw	26
 13217  00085C                     u9707:
 13218  00085C  2EE8               	decfsz	wreg,f,c
 13219  00085E  D7FE               	bra	u9707
 13220  000860  D000               	nop2	
 13221                           
 13222                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13223  000862  908B               	bcf	3979,0,c	;volatile
 13224                           
 13225                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13226  000864  0EF0               	movlw	240
 13227  000866                     u9717:
 13228  000866  2EE8               	decfsz	wreg,f,c
 13229  000868  D7FE               	bra	u9717
 13230  00086A  0100               	movlb	0	; () banked
 13231  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13232  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13233  000870  D7E8               	goto	l8094
 13234  000872                     l8104:
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;Test.c: 346: }
 13238                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13239  000872  0E00               	movlw	0
 13240  000874  0100               	movlb	0	; () banked
 13241  000876  6FC2               	movwf	actuatorTest@i_1769& (0+255),b
 13242  000878                     l8106:
 13243                           
 13244                           ; BSR set to: 0
 13245  000878  0E63               	movlw	99
 13246  00087A  0100               	movlb	0	; () banked
 13247  00087C  65C2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 13248  00087E  D001               	goto	l8110
 13249  000880  D00C               	goto	l8114
 13250  000882                     l8110:
 13251                           
 13252                           ; BSR set to: 0
 13253  000882  0E68               	movlw	104
 13254  000884  0100               	movlb	0	; () banked
 13255  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13256  000888  0EE4               	movlw	228
 13257  00088A                     u9727:
 13258  00088A  2EE8               	decfsz	wreg,f,c
 13259  00088C  D7FE               	bra	u9727
 13260  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13261  000890  D7FC               	bra	u9727
 13262  000892  F000               	nop	
 13263  000894  0100               	movlb	0	; () banked
 13264  000896  2BC2               	incf	actuatorTest@i_1769& (0+255),f,b
 13265  000898  D7EF               	goto	l8106
 13266  00089A                     l8114:
 13267                           
 13268                           ; BSR set to: 0
 13269  00089A  0E00               	movlw	0
 13270  00089C  0100               	movlb	0	; () banked
 13271  00089E  6FC3               	movwf	actuatorTest@i_1770& (0+255),b
 13272  0008A0                     l8116:
 13273                           
 13274                           ; BSR set to: 0
 13275  0008A0  0E63               	movlw	99
 13276  0008A2  0100               	movlb	0	; () banked
 13277  0008A4  65C3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 13278  0008A6  D001               	goto	l8120
 13279  0008A8  D00C               	goto	l8124
 13280  0008AA                     l8120:
 13281                           
 13282                           ; BSR set to: 0
 13283  0008AA  0E68               	movlw	104
 13284  0008AC  0100               	movlb	0	; () banked
 13285  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13286  0008B0  0EE4               	movlw	228
 13287  0008B2                     u9737:
 13288  0008B2  2EE8               	decfsz	wreg,f,c
 13289  0008B4  D7FE               	bra	u9737
 13290  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13291  0008B8  D7FC               	bra	u9737
 13292  0008BA  F000               	nop	
 13293  0008BC  0100               	movlb	0	; () banked
 13294  0008BE  2BC3               	incf	actuatorTest@i_1770& (0+255),f,b
 13295  0008C0  D7EF               	goto	l8116
 13296  0008C2                     l8124:
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;Test.c: 349: machine_state = Testing_state;
 13300  0008C2  0E03               	movlw	3
 13301  0008C4  0100               	movlb	0	; () banked
 13302  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13303                           
 13304                           ; BSR set to: 0
 13305  0008C8  0012               	return		;funcret
 13306  0008CA                     __end_of_actuatorTest:
 13307                           	opt stack 0
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           intcon2	equ	0xFF1
 13316                           intcon3	equ	0xFF0
 13317                           postinc0	equ	0xFEE
 13318                           wreg	equ	0xFE8
 13319                           postdec1	equ	0xFE5
 13320                           fsr1l	equ	0xFE1
 13321                           indf2	equ	0xFDF
 13322                           postinc2	equ	0xFDE
 13323                           postdec2	equ	0xFDD
 13324                           fsr2h	equ	0xFDA
 13325                           fsr2l	equ	0xFD9
 13326                           status	equ	0xFD8
 13327                           
 13328 ;; *************** function _SpeedTest *****************
 13329 ;; Defined at:
 13330 ;;		line 549 in file "Test.c"
 13331 ;; Parameters:    Size  Location     Type
 13332 ;;		None
 13333 ;; Auto vars:     Size  Location     Type
 13334 ;;		None
 13335 ;; Return value:  Size  Location     Type
 13336 ;;                  1    wreg      void 
 13337 ;; Registers used:
 13338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13339 ;; Tracked objects:
 13340 ;;		On entry : 0/0
 13341 ;;		On exit  : 0/0
 13342 ;;		Unchanged: 0/0
 13343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13347 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13348 ;;Total ram usage:        1 bytes
 13349 ;; Hardware stack levels used:    1
 13350 ;; Hardware stack levels required when called:   10
 13351 ;; This function calls:
 13352 ;;		_lcdInst
 13353 ;;		_printf
 13354 ;; This function is called by:
 13355 ;;		_Test
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           	psect	text41
 13360  004672                     __ptext41:
 13361                           	opt stack 0
 13362  004672                     _SpeedTest:
 13363                           	opt stack 19
 13364                           
 13365                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13366                           
 13367                           ; BSR set to: 0
 13368                           ;incstack = 0
 13369  004672  0E01               	movlw	1
 13370  004674  EC24  F02A         	call	_lcdInst
 13371  004678  0E68               	movlw	104
 13372  00467A  0100               	movlb	0	; () banked
 13373  00467C  6FAB               	movwf	??_SpeedTest& (0+255),b
 13374  00467E  0EE4               	movlw	228
 13375  004680                     u9747:
 13376  004680  2EE8               	decfsz	wreg,f,c
 13377  004682  D7FE               	bra	u9747
 13378  004684  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13379  004686  D7FC               	bra	u9747
 13380  004688  F000               	nop	
 13381  00468A  0E80               	movlw	128
 13382  00468C  EC24  F02A         	call	_lcdInst
 13383                           
 13384                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13385  004690  0E5B               	movlw	low STR_120
 13386  004692  0100               	movlb	0	; () banked
 13387  004694  6F8E               	movwf	printf@f& (0+255),b
 13388  004696  0EFB               	movlw	high STR_120
 13389  004698  0100               	movlb	0	; () banked
 13390  00469A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13391  00469C  EC00  F00B         	call	_printf	;wreg free
 13392                           
 13393                           ;Test.c: 553: lcdInst(0b11000000);;
 13394  0046A0  0EC0               	movlw	192
 13395  0046A2  EC24  F02A         	call	_lcdInst
 13396                           
 13397                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13398  0046A6  0E49               	movlw	low STR_112
 13399  0046A8  0100               	movlb	0	; () banked
 13400  0046AA  6F8E               	movwf	printf@f& (0+255),b
 13401  0046AC  0EFB               	movlw	high STR_112
 13402  0046AE  0100               	movlb	0	; () banked
 13403  0046B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13404  0046B2  EC00  F00B         	call	_printf	;wreg free
 13405  0046B6                     l1331:
 13406  0046B6  A281               	btfss	3969,1,c	;volatile
 13407  0046B8  D7FE               	goto	l1331
 13408                           
 13409                           ;Test.c: 559: }
 13410                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13411  0046BA  3881               	swapf	3969,w,c	;volatile
 13412  0046BC  0B0F               	andlw	15
 13413  0046BE  0A0F               	xorlw	15
 13414  0046C0  B4D8               	btfsc	status,2,c
 13415  0046C2  0012               	return	
 13416  0046C4  D014               	goto	l8166
 13417  0046C6                     l1338:
 13418                           
 13419                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13420  0046C6  8A89               	bsf	3977,5,c	;volatile
 13421                           
 13422                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13423  0046C8  0E34               	movlw	52
 13424  0046CA  0100               	movlb	0	; () banked
 13425  0046CC  6FAB               	movwf	??_SpeedTest& (0+255),b
 13426  0046CE  0EF1               	movlw	241
 13427  0046D0                     u9757:
 13428  0046D0  2EE8               	decfsz	wreg,f,c
 13429  0046D2  D7FE               	bra	u9757
 13430  0046D4  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13431  0046D6  D7FC               	bra	u9757
 13432  0046D8  D000               	nop2	
 13433                           
 13434                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13435  0046DA  9A89               	bcf	3977,5,c	;volatile
 13436                           
 13437                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13438  0046DC  0E34               	movlw	52
 13439  0046DE  0100               	movlb	0	; () banked
 13440  0046E0  6FAB               	movwf	??_SpeedTest& (0+255),b
 13441  0046E2  0EF1               	movlw	241
 13442  0046E4                     u9767:
 13443  0046E4  2EE8               	decfsz	wreg,f,c
 13444  0046E6  D7FE               	bra	u9767
 13445  0046E8  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13446  0046EA  D7FC               	bra	u9767
 13447  0046EC  D000               	nop2	
 13448  0046EE                     l8166:
 13449  0046EE  B281               	btfsc	3969,1,c	;volatile
 13450  0046F0  D7EA               	goto	l1338
 13451                           
 13452                           ;Test.c: 571: }
 13453                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13454  0046F2  9A89               	bcf	3977,5,c	;volatile
 13455  0046F4  D7E0               	goto	l1331
 13456  0046F6                     __end_of_SpeedTest:
 13457                           	opt stack 0
 13458                           tblptru	equ	0xFF8
 13459                           tblptrh	equ	0xFF7
 13460                           tblptrl	equ	0xFF6
 13461                           tablat	equ	0xFF5
 13462                           prodh	equ	0xFF4
 13463                           prodl	equ	0xFF3
 13464                           intcon	equ	0xFF2
 13465                           intcon2	equ	0xFF1
 13466                           intcon3	equ	0xFF0
 13467                           postinc0	equ	0xFEE
 13468                           wreg	equ	0xFE8
 13469                           postdec1	equ	0xFE5
 13470                           fsr1l	equ	0xFE1
 13471                           indf2	equ	0xFDF
 13472                           postinc2	equ	0xFDE
 13473                           postdec2	equ	0xFDD
 13474                           fsr2h	equ	0xFDA
 13475                           fsr2l	equ	0xFD9
 13476                           status	equ	0xFD8
 13477                           
 13478 ;; *************** function _PusherTest *****************
 13479 ;; Defined at:
 13480 ;;		line 467 in file "Test.c"
 13481 ;; Parameters:    Size  Location     Type
 13482 ;;		None
 13483 ;; Auto vars:     Size  Location     Type
 13484 ;;  i               2   51[BANK0 ] int 
 13485 ;;  i               2   49[BANK0 ] int 
 13486 ;;  res             2   47[BANK0 ] int 
 13487 ;;  res             2   45[BANK0 ] int 
 13488 ;; Return value:  Size  Location     Type
 13489 ;;                  1    wreg      void 
 13490 ;; Registers used:
 13491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13492 ;; Tracked objects:
 13493 ;;		On entry : 0/0
 13494 ;;		On exit  : 0/0
 13495 ;;		Unchanged: 0/0
 13496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13498 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13499 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13500 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13501 ;;Total ram usage:       10 bytes
 13502 ;; Hardware stack levels used:    1
 13503 ;; Hardware stack levels required when called:   10
 13504 ;; This function calls:
 13505 ;;		_lcdInst
 13506 ;;		_printf
 13507 ;;		_readADC
 13508 ;; This function is called by:
 13509 ;;		_Test
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           	psect	text42
 13514  002C5A                     __ptext42:
 13515                           	opt stack 0
 13516  002C5A                     _PusherTest:
 13517                           	opt stack 19
 13518                           
 13519                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13520                           
 13521                           ;incstack = 0
 13522  002C5A  0E01               	movlw	1
 13523  002C5C  EC24  F02A         	call	_lcdInst
 13524  002C60  0E68               	movlw	104
 13525  002C62  0100               	movlb	0	; () banked
 13526  002C64  6FAB               	movwf	??_PusherTest& (0+255),b
 13527  002C66  0EE4               	movlw	228
 13528  002C68                     u9777:
 13529  002C68  2EE8               	decfsz	wreg,f,c
 13530  002C6A  D7FE               	bra	u9777
 13531  002C6C  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13532  002C6E  D7FC               	bra	u9777
 13533  002C70  F000               	nop	
 13534  002C72  0E80               	movlw	128
 13535  002C74  EC24  F02A         	call	_lcdInst
 13536                           
 13537                           ;Test.c: 469: printf("PUSHER TST");
 13538  002C78  0E71               	movlw	low STR_113
 13539  002C7A  0100               	movlb	0	; () banked
 13540  002C7C  6F8E               	movwf	printf@f& (0+255),b
 13541  002C7E  0EFF               	movlw	high STR_113
 13542  002C80  0100               	movlb	0	; () banked
 13543  002C82  6F8F               	movwf	(printf@f+1)& (0+255),b
 13544  002C84  EC00  F00B         	call	_printf	;wreg free
 13545                           
 13546                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13547  002C88  8A8B               	bsf	3979,5,c	;volatile
 13548                           
 13549                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13550  002C8A  D05C               	goto	l8196
 13551  002C8C                     l8178:
 13552                           
 13553                           ;Test.c: 473: readADC(0);
 13554  002C8C  0E00               	movlw	0
 13555  002C8E  EC1B  F029         	call	_readADC
 13556                           
 13557                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13558  002C92  50C3               	movf	4035,w,c	;volatile
 13559  002C94  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13560  002C98  0100               	movlb	0	; () banked
 13561  002C9A  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13562  002C9C  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13563  002CA0  0100               	movlb	0	; () banked
 13564  002CA2  6BAB               	clrf	??_PusherTest& (0+255),b
 13565  002CA4  0100               	movlb	0	; () banked
 13566  002CA6  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13567  002CA8  0100               	movlb	0	; () banked
 13568  002CAA  6FAD               	movwf	PusherTest@res& (0+255),b
 13569  002CAC  0100               	movlb	0	; () banked
 13570  002CAE  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13571  002CB0  0100               	movlb	0	; () banked
 13572  002CB2  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13576  002CB4  0100               	movlb	0	; () banked
 13577  002CB6  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13578  002CB8  D00A               	goto	u6790
 13579  002CBA  0E21               	movlw	33
 13580  002CBC  0100               	movlb	0	; () banked
 13581  002CBE  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13582  002CC0  0E03               	movlw	3
 13583  002CC2  0100               	movlb	0	; () banked
 13584  002CC4  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13585  002CC6  A0D8               	btfss	status,0,c
 13586  002CC8  D002               	goto	u6790
 13587  002CCA  0E01               	movlw	1
 13588  002CCC  D001               	goto	u6800
 13589  002CCE                     u6790:
 13590  002CCE  0E00               	movlw	0
 13591  002CD0                     u6800:
 13592  002CD0  0100               	movlb	0	; () banked
 13593  002CD2  6FE6               	movwf	_IR_signal& (0+255),b
 13594  002CD4  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13595                           
 13596                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13597  002CD6  0E01               	movlw	1
 13598  002CD8  EC24  F02A         	call	_lcdInst
 13599  002CDC  0E68               	movlw	104
 13600  002CDE  0100               	movlb	0	; () banked
 13601  002CE0  6FAB               	movwf	??_PusherTest& (0+255),b
 13602  002CE2  0EE4               	movlw	228
 13603  002CE4                     u9787:
 13604  002CE4  2EE8               	decfsz	wreg,f,c
 13605  002CE6  D7FE               	bra	u9787
 13606  002CE8  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13607  002CEA  D7FC               	bra	u9787
 13608  002CEC  F000               	nop	
 13609  002CEE  0E80               	movlw	128
 13610  002CF0  EC24  F02A         	call	_lcdInst
 13611                           
 13612                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13613  002CF4  0E5A               	movlw	low STR_80
 13614  002CF6  0100               	movlb	0	; () banked
 13615  002CF8  6F8E               	movwf	printf@f& (0+255),b
 13616  002CFA  0EFE               	movlw	high STR_80
 13617  002CFC  0100               	movlb	0	; () banked
 13618  002CFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13619  002D00  C0E6  F090         	movff	_IR_signal,?_printf+2
 13620  002D04  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13621  002D08  EC00  F00B         	call	_printf	;wreg free
 13622                           
 13623                           ;Test.c: 479: lcdInst(0b11000000);;
 13624  002D0C  0EC0               	movlw	192
 13625  002D0E  EC24  F02A         	call	_lcdInst
 13626                           
 13627                           ;Test.c: 480: printf("%d", res);
 13628  002D12  0E16               	movlw	low (STR_27+14)
 13629  002D14  0100               	movlb	0	; () banked
 13630  002D16  6F8E               	movwf	printf@f& (0+255),b
 13631  002D18  0EFE               	movlw	high (STR_27+14)
 13632  002D1A  0100               	movlb	0	; () banked
 13633  002D1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13634  002D1E  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13635  002D22  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13636  002D26  EC00  F00B         	call	_printf	;wreg free
 13637                           
 13638                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13639  002D2A  0E05               	movlw	5
 13640  002D2C  0100               	movlb	0	; () banked
 13641  002D2E  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13642  002D30  0E0F               	movlw	15
 13643  002D32  0100               	movlb	0	; () banked
 13644  002D34  6FAB               	movwf	??_PusherTest& (0+255),b
 13645  002D36  0EF1               	movlw	241
 13646  002D38                     u9797:
 13647  002D38  2EE8               	decfsz	wreg,f,c
 13648  002D3A  D7FE               	bra	u9797
 13649  002D3C  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13650  002D3E  D7FC               	bra	u9797
 13651  002D40  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13652  002D42  D7FA               	bra	u9797
 13653  002D44                     l8196:
 13654  002D44  B281               	btfsc	3969,1,c	;volatile
 13655  002D46  D05D               	goto	l8216
 13656  002D48  D7A1               	goto	l8178
 13657  002D4A                     l8198:
 13658                           
 13659                           ;Test.c: 487: readADC(0);
 13660  002D4A  0E00               	movlw	0
 13661  002D4C  EC1B  F029         	call	_readADC
 13662                           
 13663                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13664  002D50  50C3               	movf	4035,w,c	;volatile
 13665  002D52  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13666  002D56  0100               	movlb	0	; () banked
 13667  002D58  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13668  002D5A  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13669  002D5E  0100               	movlb	0	; () banked
 13670  002D60  6BAB               	clrf	??_PusherTest& (0+255),b
 13671  002D62  0100               	movlb	0	; () banked
 13672  002D64  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13673  002D66  0100               	movlb	0	; () banked
 13674  002D68  6FAF               	movwf	PusherTest@res_1785& (0+255),b
 13675  002D6A  0100               	movlb	0	; () banked
 13676  002D6C  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13677  002D6E  0100               	movlb	0	; () banked
 13678  002D70  6FB0               	movwf	(PusherTest@res_1785+1)& (0+255),b
 13679                           
 13680                           ; BSR set to: 0
 13681                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13682  002D72  0100               	movlb	0	; () banked
 13683  002D74  BFB0               	btfsc	(PusherTest@res_1785+1)& (0+255),7,b
 13684  002D76  D00A               	goto	u6820
 13685  002D78  0E21               	movlw	33
 13686  002D7A  0100               	movlb	0	; () banked
 13687  002D7C  5DAF               	subwf	PusherTest@res_1785& (0+255),w,b
 13688  002D7E  0E03               	movlw	3
 13689  002D80  0100               	movlb	0	; () banked
 13690  002D82  59B0               	subwfb	(PusherTest@res_1785+1)& (0+255),w,b
 13691  002D84  A0D8               	btfss	status,0,c
 13692  002D86  D002               	goto	u6820
 13693  002D88  0E01               	movlw	1
 13694  002D8A  D001               	goto	u6830
 13695  002D8C                     u6820:
 13696  002D8C  0E00               	movlw	0
 13697  002D8E                     u6830:
 13698  002D8E  0100               	movlb	0	; () banked
 13699  002D90  6FE6               	movwf	_IR_signal& (0+255),b
 13700  002D92  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13701                           
 13702                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13703  002D94  0E01               	movlw	1
 13704  002D96  EC24  F02A         	call	_lcdInst
 13705  002D9A  0E68               	movlw	104
 13706  002D9C  0100               	movlb	0	; () banked
 13707  002D9E  6FAB               	movwf	??_PusherTest& (0+255),b
 13708  002DA0  0EE4               	movlw	228
 13709  002DA2                     u9807:
 13710  002DA2  2EE8               	decfsz	wreg,f,c
 13711  002DA4  D7FE               	bra	u9807
 13712  002DA6  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13713  002DA8  D7FC               	bra	u9807
 13714  002DAA  F000               	nop	
 13715  002DAC  0E80               	movlw	128
 13716  002DAE  EC24  F02A         	call	_lcdInst
 13717                           
 13718                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13719  002DB2  0E5A               	movlw	low STR_80
 13720  002DB4  0100               	movlb	0	; () banked
 13721  002DB6  6F8E               	movwf	printf@f& (0+255),b
 13722  002DB8  0EFE               	movlw	high STR_80
 13723  002DBA  0100               	movlb	0	; () banked
 13724  002DBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13725  002DBE  C0E6  F090         	movff	_IR_signal,?_printf+2
 13726  002DC2  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13727  002DC6  EC00  F00B         	call	_printf	;wreg free
 13728                           
 13729                           ;Test.c: 492: lcdInst(0b11000000);;
 13730  002DCA  0EC0               	movlw	192
 13731  002DCC  EC24  F02A         	call	_lcdInst
 13732                           
 13733                           ;Test.c: 493: printf("%d", res);
 13734  002DD0  0E16               	movlw	low (STR_27+14)
 13735  002DD2  0100               	movlb	0	; () banked
 13736  002DD4  6F8E               	movwf	printf@f& (0+255),b
 13737  002DD6  0EFE               	movlw	high (STR_27+14)
 13738  002DD8  0100               	movlb	0	; () banked
 13739  002DDA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13740  002DDC  C0AF  F090         	movff	PusherTest@res_1785,?_printf+2
 13741  002DE0  C0B0  F091         	movff	PusherTest@res_1785+1,?_printf+3
 13742  002DE4  EC00  F00B         	call	_printf	;wreg free
 13743                           
 13744                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13745  002DE8  0E05               	movlw	5
 13746  002DEA  0100               	movlb	0	; () banked
 13747  002DEC  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13748  002DEE  0E0F               	movlw	15
 13749  002DF0  0100               	movlb	0	; () banked
 13750  002DF2  6FAB               	movwf	??_PusherTest& (0+255),b
 13751  002DF4  0EF1               	movlw	241
 13752  002DF6                     u9817:
 13753  002DF6  2EE8               	decfsz	wreg,f,c
 13754  002DF8  D7FE               	bra	u9817
 13755  002DFA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13756  002DFC  D7FC               	bra	u9817
 13757  002DFE  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13758  002E00  D7FA               	bra	u9817
 13759  002E02                     l8216:
 13760  002E02  A281               	btfss	3969,1,c	;volatile
 13761  002E04  D7A2               	goto	l8198
 13762                           
 13763                           ;Test.c: 495: }
 13764                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13765  002E06  3881               	swapf	3969,w,c	;volatile
 13766  002E08  0B0F               	andlw	15
 13767  002E0A  0A0F               	xorlw	15
 13768  002E0C  B4D8               	btfsc	status,2,c
 13769  002E0E  D047               	goto	l1300
 13770                           
 13771                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13772                           
 13773                           ;Test.c: 498: }
 13774                           
 13775                           ;Test.c: 497: break;
 13776  002E10  3881               	swapf	3969,w,c	;volatile
 13777  002E12  0B0F               	andlw	15
 13778  002E14  0A05               	xorlw	5
 13779  002E16  A4D8               	btfss	status,2,c
 13780  002E18  D01D               	goto	l8238
 13781                           
 13782                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13783  002E1A  0E00               	movlw	0
 13784  002E1C  0100               	movlb	0	; () banked
 13785  002E1E  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13786  002E20  0E00               	movlw	0
 13787  002E22  6FB1               	movwf	PusherTest@i& (0+255),b
 13788  002E24                     l8228:
 13789                           
 13790                           ; BSR set to: 0
 13791  002E24  0100               	movlb	0	; () banked
 13792  002E26  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13793  002E28  D008               	goto	l1303
 13794  002E2A  0EB8               	movlw	184
 13795  002E2C  0100               	movlb	0	; () banked
 13796  002E2E  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13797  002E30  0E0B               	movlw	11
 13798  002E32  0100               	movlb	0	; () banked
 13799  002E34  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13800  002E36  B0D8               	btfsc	status,0,c
 13801  002E38  D02F               	goto	l1309
 13802  002E3A                     l1303:
 13803                           
 13804                           ; BSR set to: 0
 13805                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13806  002E3A  8889               	bsf	3977,4,c	;volatile
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13810  002E3C  0EC8               	movlw	200
 13811  002E3E                     u9827:
 13812  002E3E  2EE8               	decfsz	wreg,f,c
 13813  002E40  D7FE               	bra	u9827
 13814                           
 13815                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13816  002E42  9889               	bcf	3977,4,c	;volatile
 13817                           
 13818                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13819  002E44  0E42               	movlw	66
 13820  002E46                     u9837:
 13821  002E46  2EE8               	decfsz	wreg,f,c
 13822  002E48  D7FE               	bra	u9837
 13823  002E4A  D000               	nop2	
 13824  002E4C  0100               	movlb	0	; () banked
 13825  002E4E  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13826  002E50  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13827  002E52  D7E8               	goto	l8228
 13828  002E54                     l8238:
 13829                           
 13830                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13831  002E54  3881               	swapf	3969,w,c	;volatile
 13832  002E56  0B0F               	andlw	15
 13833  002E58  0A06               	xorlw	6
 13834  002E5A  A4D8               	btfss	status,2,c
 13835  002E5C  D01D               	goto	l1309
 13836                           
 13837                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13838  002E5E  0E00               	movlw	0
 13839  002E60  0100               	movlb	0	; () banked
 13840  002E62  6FB4               	movwf	(PusherTest@i_1789+1)& (0+255),b
 13841  002E64  0E00               	movlw	0
 13842  002E66  6FB3               	movwf	PusherTest@i_1789& (0+255),b
 13843  002E68                     l8242:
 13844                           
 13845                           ; BSR set to: 0
 13846  002E68  0100               	movlb	0	; () banked
 13847  002E6A  BFB4               	btfsc	(PusherTest@i_1789+1)& (0+255),7,b
 13848  002E6C  D008               	goto	l1307
 13849  002E6E  0EB8               	movlw	184
 13850  002E70  0100               	movlb	0	; () banked
 13851  002E72  5DB3               	subwf	PusherTest@i_1789& (0+255),w,b
 13852  002E74  0E0B               	movlw	11
 13853  002E76  0100               	movlb	0	; () banked
 13854  002E78  59B4               	subwfb	(PusherTest@i_1789+1)& (0+255),w,b
 13855  002E7A  B0D8               	btfsc	status,0,c
 13856  002E7C  D00D               	goto	l1309
 13857  002E7E                     l1307:
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13861  002E7E  8889               	bsf	3977,4,c	;volatile
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13865  002E80  0E9A               	movlw	154
 13866  002E82                     u9847:
 13867  002E82  2EE8               	decfsz	wreg,f,c
 13868  002E84  D7FE               	bra	u9847
 13869  002E86  D000               	nop2	
 13870                           
 13871                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13872  002E88  9889               	bcf	3977,4,c	;volatile
 13873                           
 13874                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13875  002E8A  0E70               	movlw	112
 13876  002E8C                     u9857:
 13877  002E8C  2EE8               	decfsz	wreg,f,c
 13878  002E8E  D7FE               	bra	u9857
 13879  002E90  0100               	movlb	0	; () banked
 13880  002E92  4BB3               	infsnz	PusherTest@i_1789& (0+255),f,b
 13881  002E94  2BB4               	incf	(PusherTest@i_1789+1)& (0+255),f,b
 13882  002E96  D7E8               	goto	l8242
 13883  002E98                     l1309:
 13884  002E98  A281               	btfss	3969,1,c	;volatile
 13885  002E9A  D7B3               	goto	l8216
 13886  002E9C  D7FD               	goto	l1309
 13887  002E9E                     l1300:
 13888                           
 13889                           ;Test.c: 519: }
 13890                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13891  002E9E  9A8B               	bcf	3979,5,c	;volatile
 13892  002EA0  0012               	return		;funcret
 13893  002EA2                     __end_of_PusherTest:
 13894                           	opt stack 0
 13895                           tblptru	equ	0xFF8
 13896                           tblptrh	equ	0xFF7
 13897                           tblptrl	equ	0xFF6
 13898                           tablat	equ	0xFF5
 13899                           prodh	equ	0xFF4
 13900                           prodl	equ	0xFF3
 13901                           intcon	equ	0xFF2
 13902                           intcon2	equ	0xFF1
 13903                           intcon3	equ	0xFF0
 13904                           postinc0	equ	0xFEE
 13905                           wreg	equ	0xFE8
 13906                           postdec1	equ	0xFE5
 13907                           fsr1l	equ	0xFE1
 13908                           indf2	equ	0xFDF
 13909                           postinc2	equ	0xFDE
 13910                           postdec2	equ	0xFDD
 13911                           fsr2h	equ	0xFDA
 13912                           fsr2l	equ	0xFD9
 13913                           status	equ	0xFD8
 13914                           
 13915 ;; *************** function _readADC *****************
 13916 ;; Defined at:
 13917 ;;		line 15 in file "ADCFunctionality.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  channel         1    wreg     unsigned char 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  channel         1    1[BANK0 ] unsigned char 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, status,0, cstack
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;Total ram usage:        2 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    7
 13938 ;; This function calls:
 13939 ;;		Nothing
 13940 ;; This function is called by:
 13941 ;;		_readIR
 13942 ;;		_readMAG
 13943 ;;		_sensorTest
 13944 ;;		_PusherTest
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           	psect	text43
 13949  005236                     __ptext43:
 13950                           	opt stack 0
 13951  005236                     _readADC:
 13952                           	opt stack 20
 13953                           
 13954                           ;incstack = 0
 13955                           ;readADC@channel stored from wreg
 13956  005236  0100               	movlb	0	; () banked
 13957  005238  6F81               	movwf	readADC@channel& (0+255),b
 13958                           
 13959                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13960  00523A  0100               	movlb	0	; () banked
 13961  00523C  4581               	rlncf	readADC@channel& (0+255),w,b
 13962  00523E  46E8               	rlncf	wreg,f,c
 13963  005240  0BFC               	andlw	252
 13964  005242  6EC2               	movwf	4034,c	;volatile
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13968  005244  80C2               	bsf	4034,0,c	;volatile
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13972  005246  82C2               	bsf	4034,1,c	;volatile
 13973                           
 13974                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13975  005248  D009               	goto	l6072
 13976  00524A                     l6070:
 13977  00524A  0E34               	movlw	52
 13978  00524C  0100               	movlb	0	; () banked
 13979  00524E  6F80               	movwf	??_readADC& (0+255),b
 13980  005250  0EF1               	movlw	241
 13981  005252                     u9867:
 13982  005252  2EE8               	decfsz	wreg,f,c
 13983  005254  D7FE               	bra	u9867
 13984  005256  2F80               	decfsz	??_readADC& (0+255),f,b
 13985  005258  D7FC               	bra	u9867
 13986  00525A  D000               	nop2	
 13987  00525C                     l6072:
 13988  00525C  A2C2               	btfss	4034,1,c	;volatile
 13989  00525E  0012               	return	
 13990  005260  D7F4               	goto	l6070
 13991  005262                     __end_of_readADC:
 13992                           	opt stack 0
 13993                           tblptru	equ	0xFF8
 13994                           tblptrh	equ	0xFF7
 13995                           tblptrl	equ	0xFF6
 13996                           tablat	equ	0xFF5
 13997                           prodh	equ	0xFF4
 13998                           prodl	equ	0xFF3
 13999                           intcon	equ	0xFF2
 14000                           intcon2	equ	0xFF1
 14001                           intcon3	equ	0xFF0
 14002                           postinc0	equ	0xFEE
 14003                           wreg	equ	0xFE8
 14004                           postdec1	equ	0xFE5
 14005                           fsr1l	equ	0xFE1
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8
 14012                           
 14013 ;; *************** function _PortTests *****************
 14014 ;; Defined at:
 14015 ;;		line 409 in file "Test.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;		None
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;		None
 14020 ;; Return value:  Size  Location     Type
 14021 ;;                  1    wreg      void 
 14022 ;; Registers used:
 14023 ;;		wreg, status,2, status,0
 14024 ;; Tracked objects:
 14025 ;;		On entry : 0/0
 14026 ;;		On exit  : 0/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;Total ram usage:        2 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; Hardware stack levels required when called:    7
 14036 ;; This function calls:
 14037 ;;		Nothing
 14038 ;; This function is called by:
 14039 ;;		_Test
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text44
 14044  00477A                     __ptext44:
 14045                           	opt stack 0
 14046  00477A                     _PortTests:
 14047                           	opt stack 22
 14048  00477A                     l1258:
 14049  00477A  A281               	btfss	3969,1,c	;volatile
 14050  00477C  D7FE               	goto	l1258
 14051                           
 14052                           ;Test.c: 413: var = PORTB >> 4;
 14053  00477E  CF81 F080          	movff	3969,??_PortTests	;volatile
 14054  004782  0100               	movlb	0	; () banked
 14055  004784  3B80               	swapf	??_PortTests& (0+255),f,b
 14056  004786  0E0F               	movlw	15
 14057  004788  1780               	andwf	??_PortTests& (0+255),f,b
 14058  00478A  0100               	movlb	0	; () banked
 14059  00478C  5180               	movf	??_PortTests& (0+255),w,b
 14060  00478E  6E77               	movwf	_var,c
 14061  004790  6A78               	clrf	_var+1,c
 14062                           
 14063                           ;Test.c: 414: switch(var){
 14064  004792  D00C               	goto	l8256
 14065  004794                     l1262:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;Test.c: 416: LATEbits.LATE0 = 1;
 14069  004794  808D               	bsf	3981,0,c	;volatile
 14070                           
 14071                           ;Test.c: 417: break;
 14072  004796  D027               	goto	l1270
 14073  004798                     l1264:
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;Test.c: 419: LATEbits.LATE1 = 1;
 14077  004798  828D               	bsf	3981,1,c	;volatile
 14078                           
 14079                           ;Test.c: 420: break;
 14080  00479A  D025               	goto	l1270
 14081  00479C                     l1265:
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;Test.c: 422: LATDbits.LATD0 = 1;
 14085  00479C  808C               	bsf	3980,0,c	;volatile
 14086                           
 14087                           ;Test.c: 423: break;
 14088  00479E  D023               	goto	l1270
 14089  0047A0                     l1266:
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;Test.c: 425: LATAbits.LATA3 = 1;
 14093  0047A0  8689               	bsf	3977,3,c	;volatile
 14094                           
 14095                           ;Test.c: 426: break;
 14096  0047A2  D021               	goto	l1270
 14097  0047A4                     l1267:
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;Test.c: 428: LATAbits.LATA4 = 1;
 14101  0047A4  8889               	bsf	3977,4,c	;volatile
 14102                           
 14103                           ;Test.c: 429: break;
 14104  0047A6  D01F               	goto	l1270
 14105  0047A8                     l1268:
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;Test.c: 431: LATAbits.LATA5 = 1;
 14109  0047A8  8A89               	bsf	3977,5,c	;volatile
 14110                           
 14111                           ; BSR set to: 0
 14112                           ;Test.c: 435: }
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;Test.c: 434: break;
 14116                           
 14117                           ;Test.c: 433: default:
 14118                           
 14119                           ;Test.c: 432: break;
 14120  0047AA  D01D               	goto	l1270
 14121  0047AC                     l8256:
 14122                           
 14123                           ; BSR set to: 0
 14124  0047AC  C077  F080         	movff	_var,??_PortTests
 14125  0047B0  C078  F081         	movff	_var+1,??_PortTests+1
 14126                           
 14127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14128                           ; Switch size 1, requested type "space"
 14129                           ; Number of cases is 1, Range of values is 0 to 0
 14130                           ; switch strategies available:
 14131                           ; Name         Instructions Cycles
 14132                           ; simple_byte            4     3 (average)
 14133                           ;	Chosen strategy is simple_byte
 14134  0047B4  0100               	movlb	0	; () banked
 14135  0047B6  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14136  0047B8  0A00               	xorlw	0	; case 0
 14137  0047BA  A4D8               	btfss	status,2,c
 14138  0047BC  D014               	goto	l1270
 14139                           
 14140                           ; BSR set to: 0
 14141                           ; Switch size 1, requested type "space"
 14142                           ; Number of cases is 6, Range of values is 0 to 5
 14143                           ; switch strategies available:
 14144                           ; Name         Instructions Cycles
 14145                           ; simple_byte           19    10 (average)
 14146                           ;	Chosen strategy is simple_byte
 14147  0047BE  0100               	movlb	0	; () banked
 14148  0047C0  5180               	movf	??_PortTests& (0+255),w,b
 14149  0047C2  0A00               	xorlw	0	; case 0
 14150  0047C4  B4D8               	btfsc	status,2,c
 14151  0047C6  D7E6               	goto	l1262
 14152  0047C8  0A01               	xorlw	1	; case 1
 14153  0047CA  B4D8               	btfsc	status,2,c
 14154  0047CC  D7E5               	goto	l1264
 14155  0047CE  0A03               	xorlw	3	; case 2
 14156  0047D0  B4D8               	btfsc	status,2,c
 14157  0047D2  D7E4               	goto	l1265
 14158  0047D4  0A01               	xorlw	1	; case 3
 14159  0047D6  B4D8               	btfsc	status,2,c
 14160  0047D8  D7E3               	goto	l1266
 14161  0047DA  0A07               	xorlw	7	; case 4
 14162  0047DC  B4D8               	btfsc	status,2,c
 14163  0047DE  D7E2               	goto	l1267
 14164  0047E0  0A01               	xorlw	1	; case 5
 14165  0047E2  B4D8               	btfsc	status,2,c
 14166  0047E4  D7E1               	goto	l1268
 14167  0047E6                     l1270:
 14168  0047E6  B281               	btfsc	3969,1,c	;volatile
 14169  0047E8  D7FE               	goto	l1270
 14170                           
 14171                           ;Test.c: 437: __nop();
 14172  0047EA  F000               	nop	
 14173                           
 14174                           ;Test.c: 438: __nop();
 14175  0047EC  F000               	nop	
 14176                           
 14177                           ;Test.c: 439: LATA = 0x00;
 14178  0047EE  0E00               	movlw	0
 14179  0047F0  6E89               	movwf	3977,c	;volatile
 14180                           
 14181                           ;Test.c: 440: LATE = 0x00;
 14182  0047F2  0E00               	movlw	0
 14183  0047F4  6E8D               	movwf	3981,c	;volatile
 14184                           
 14185                           ;Test.c: 441: LATD = 0x00; }
 14186  0047F6  0E00               	movlw	0
 14187  0047F8  6E8C               	movwf	3980,c	;volatile
 14188  0047FA  D7BF               	goto	l1258
 14189  0047FC                     __end_of_PortTests:
 14190                           	opt stack 0
 14191                           tblptru	equ	0xFF8
 14192                           tblptrh	equ	0xFF7
 14193                           tblptrl	equ	0xFF6
 14194                           tablat	equ	0xFF5
 14195                           prodh	equ	0xFF4
 14196                           prodl	equ	0xFF3
 14197                           intcon	equ	0xFF2
 14198                           intcon2	equ	0xFF1
 14199                           intcon3	equ	0xFF0
 14200                           postinc0	equ	0xFEE
 14201                           wreg	equ	0xFE8
 14202                           postdec1	equ	0xFE5
 14203                           fsr1l	equ	0xFE1
 14204                           indf2	equ	0xFDF
 14205                           postinc2	equ	0xFDE
 14206                           postdec2	equ	0xFDD
 14207                           fsr2h	equ	0xFDA
 14208                           fsr2l	equ	0xFD9
 14209                           status	equ	0xFD8
 14210                           
 14211 ;; *************** function _PortTestA5 *****************
 14212 ;; Defined at:
 14213 ;;		line 444 in file "Test.c"
 14214 ;; Parameters:    Size  Location     Type
 14215 ;;		None
 14216 ;; Auto vars:     Size  Location     Type
 14217 ;;		None
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  1    wreg      void 
 14220 ;; Registers used:
 14221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14222 ;; Tracked objects:
 14223 ;;		On entry : 0/0
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;Total ram usage:        1 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:   10
 14234 ;; This function calls:
 14235 ;;		_lcdInst
 14236 ;;		_printf
 14237 ;; This function is called by:
 14238 ;;		_Test
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           	psect	text45
 14243  004BC4                     __ptext45:
 14244                           	opt stack 0
 14245  004BC4                     _PortTestA5:
 14246                           	opt stack 19
 14247                           
 14248                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14249                           
 14250                           ;incstack = 0
 14251  004BC4  0E01               	movlw	1
 14252  004BC6  EC24  F02A         	call	_lcdInst
 14253  004BCA  0E68               	movlw	104
 14254  004BCC  0100               	movlb	0	; () banked
 14255  004BCE  6FAB               	movwf	??_PortTestA5& (0+255),b
 14256  004BD0  0EE4               	movlw	228
 14257  004BD2                     u9877:
 14258  004BD2  2EE8               	decfsz	wreg,f,c
 14259  004BD4  D7FE               	bra	u9877
 14260  004BD6  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14261  004BD8  D7FC               	bra	u9877
 14262  004BDA  F000               	nop	
 14263  004BDC  0E80               	movlw	128
 14264  004BDE  EC24  F02A         	call	_lcdInst
 14265                           
 14266                           ;Test.c: 446: printf("D WILL RETURN    ");
 14267  004BE2  0E37               	movlw	low STR_111
 14268  004BE4  0100               	movlb	0	; () banked
 14269  004BE6  6F8E               	movwf	printf@f& (0+255),b
 14270  004BE8  0EFB               	movlw	high STR_111
 14271  004BEA  0100               	movlb	0	; () banked
 14272  004BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14273  004BEE  EC00  F00B         	call	_printf	;wreg free
 14274                           
 14275                           ;Test.c: 447: lcdInst(0b11000000);;
 14276  004BF2  0EC0               	movlw	192
 14277  004BF4  EC24  F02A         	call	_lcdInst
 14278                           
 14279                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14280  004BF8  0E49               	movlw	low STR_112
 14281  004BFA  0100               	movlb	0	; () banked
 14282  004BFC  6F8E               	movwf	printf@f& (0+255),b
 14283  004BFE  0EFB               	movlw	high STR_112
 14284  004C00  0100               	movlb	0	; () banked
 14285  004C02  6F8F               	movwf	(printf@f+1)& (0+255),b
 14286  004C04  EC00  F00B         	call	_printf	;wreg free
 14287  004C08                     l1279:
 14288  004C08  A281               	btfss	3969,1,c	;volatile
 14289  004C0A  D7FE               	goto	l1279
 14290                           
 14291                           ;Test.c: 453: }
 14292                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14293  004C0C  3881               	swapf	3969,w,c	;volatile
 14294  004C0E  0B0F               	andlw	15
 14295  004C10  0A0F               	xorlw	15
 14296  004C12  B4D8               	btfsc	status,2,c
 14297  004C14  0012               	return	
 14298                           
 14299                           ;Test.c: 457: else{
 14300                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14301                           
 14302                           ;Test.c: 456: }
 14303                           
 14304                           ;Test.c: 455: break;
 14305  004C16  848A               	bsf	3978,2,c	;volatile
 14306  004C18                     l1285:
 14307  004C18  B281               	btfsc	3969,1,c	;volatile
 14308  004C1A  D7FE               	goto	l1285
 14309                           
 14310                           ;Test.c: 461: }
 14311                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14312  004C1C  948A               	bcf	3978,2,c	;volatile
 14313  004C1E  D7F4               	goto	l1279
 14314  004C20                     __end_of_PortTestA5:
 14315                           	opt stack 0
 14316                           tblptru	equ	0xFF8
 14317                           tblptrh	equ	0xFF7
 14318                           tblptrl	equ	0xFF6
 14319                           tablat	equ	0xFF5
 14320                           prodh	equ	0xFF4
 14321                           prodl	equ	0xFF3
 14322                           intcon	equ	0xFF2
 14323                           intcon2	equ	0xFF1
 14324                           intcon3	equ	0xFF0
 14325                           postinc0	equ	0xFEE
 14326                           wreg	equ	0xFE8
 14327                           postdec1	equ	0xFE5
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           postdec2	equ	0xFDD
 14332                           fsr2h	equ	0xFDA
 14333                           fsr2l	equ	0xFD9
 14334                           status	equ	0xFD8
 14335                           
 14336 ;; *************** function _EEPROMTest *****************
 14337 ;; Defined at:
 14338 ;;		line 577 in file "Test.c"
 14339 ;; Parameters:    Size  Location     Type
 14340 ;;		None
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;		None
 14343 ;; Return value:  Size  Location     Type
 14344 ;;                  1    wreg      void 
 14345 ;; Registers used:
 14346 ;;		None
 14347 ;; Tracked objects:
 14348 ;;		On entry : 0/0
 14349 ;;		On exit  : 0/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;Total ram usage:        0 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    7
 14359 ;; This function calls:
 14360 ;;		Nothing
 14361 ;; This function is called by:
 14362 ;;		_Test
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           	psect	text46
 14367  0054AC                     __ptext46:
 14368                           	opt stack 0
 14369  0054AC                     _EEPROMTest:
 14370                           	opt stack 22
 14371                           
 14372                           ;incstack = 0
 14373  0054AC  0012               	return		;funcret
 14374  0054AE                     __end_of_EEPROMTest:
 14375                           	opt stack 0
 14376                           tblptru	equ	0xFF8
 14377                           tblptrh	equ	0xFF7
 14378                           tblptrl	equ	0xFF6
 14379                           tablat	equ	0xFF5
 14380                           prodh	equ	0xFF4
 14381                           prodl	equ	0xFF3
 14382                           intcon	equ	0xFF2
 14383                           intcon2	equ	0xFF1
 14384                           intcon3	equ	0xFF0
 14385                           postinc0	equ	0xFEE
 14386                           wreg	equ	0xFE8
 14387                           postdec1	equ	0xFE5
 14388                           fsr1l	equ	0xFE1
 14389                           indf2	equ	0xFDF
 14390                           postinc2	equ	0xFDE
 14391                           postdec2	equ	0xFDD
 14392                           fsr2h	equ	0xFDA
 14393                           fsr2l	equ	0xFD9
 14394                           status	equ	0xFD8
 14395                           
 14396 ;; *************** function _BothServos *****************
 14397 ;; Defined at:
 14398 ;;		line 352 in file "Test.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;		None
 14401 ;; Auto vars:     Size  Location     Type
 14402 ;;		None
 14403 ;; Return value:  Size  Location     Type
 14404 ;;                  1    wreg      void 
 14405 ;; Registers used:
 14406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14407 ;; Tracked objects:
 14408 ;;		On entry : 0/0
 14409 ;;		On exit  : 0/0
 14410 ;;		Unchanged: 0/0
 14411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14414 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14416 ;;Total ram usage:        2 bytes
 14417 ;; Hardware stack levels used:    1
 14418 ;; Hardware stack levels required when called:   10
 14419 ;; This function calls:
 14420 ;;		_initServos
 14421 ;;		_lcdInst
 14422 ;;		_printf
 14423 ;;		_updateServoPosition
 14424 ;; This function is called by:
 14425 ;;		_Test
 14426 ;; This function uses a non-reentrant model
 14427 ;;
 14428                           
 14429                           	psect	text47
 14430  001A38                     __ptext47:
 14431                           	opt stack 0
 14432  001A38                     _BothServos:
 14433                           	opt stack 19
 14434                           
 14435                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14436                           
 14437                           ;incstack = 0
 14438  001A38  0E01               	movlw	1
 14439  001A3A  EC24  F02A         	call	_lcdInst
 14440  001A3E  0E68               	movlw	104
 14441  001A40  0100               	movlb	0	; () banked
 14442  001A42  6FAB               	movwf	??_BothServos& (0+255),b
 14443  001A44  0EE4               	movlw	228
 14444  001A46                     u9887:
 14445  001A46  2EE8               	decfsz	wreg,f,c
 14446  001A48  D7FE               	bra	u9887
 14447  001A4A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14448  001A4C  D7FC               	bra	u9887
 14449  001A4E  F000               	nop	
 14450  001A50  0E80               	movlw	128
 14451  001A52  EC24  F02A         	call	_lcdInst
 14452                           
 14453                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14454  001A56  0EB4               	movlw	low STR_110
 14455  001A58  0100               	movlb	0	; () banked
 14456  001A5A  6F8E               	movwf	printf@f& (0+255),b
 14457  001A5C  0EFC               	movlw	high STR_110
 14458  001A5E  0100               	movlb	0	; () banked
 14459  001A60  6F8F               	movwf	(printf@f+1)& (0+255),b
 14460  001A62  EC00  F00B         	call	_printf	;wreg free
 14461                           
 14462                           ;Test.c: 355: TMR1ON = 1;
 14463  001A66  80CD               	bsf	4045,0,c	;volatile
 14464                           
 14465                           ;Test.c: 356: TMR3ON = 1;
 14466  001A68  80B1               	bsf	4017,0,c	;volatile
 14467                           
 14468                           ;Test.c: 357: machine_state = Sorting_state;
 14469  001A6A  0E01               	movlw	1
 14470  001A6C  0100               	movlb	0	; () banked
 14471  001A6E  6FFC               	movwf	_machine_state& (0+255),b
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;Test.c: 358: was_low_1 = 0;
 14475  001A70  0E00               	movlw	0
 14476  001A72  6E7A               	movwf	_was_low_1+1,c	;volatile
 14477  001A74  0E00               	movlw	0
 14478  001A76  6E79               	movwf	_was_low_1,c	;volatile
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;Test.c: 359: was_low_3 = 0;
 14482  001A78  0E00               	movlw	0
 14483  001A7A  6E7C               	movwf	_was_low_3+1,c	;volatile
 14484  001A7C  0E00               	movlw	0
 14485  001A7E  6E7B               	movwf	_was_low_3,c	;volatile
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;Test.c: 365: initServos();
 14489  001A80  EC10  F026         	call	_initServos	;wreg free
 14490                           
 14491                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14492  001A84  0E3D               	movlw	61
 14493  001A86  0100               	movlb	0	; () banked
 14494  001A88  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14495  001A8A  0EE1               	movlw	225
 14496  001A8C  0100               	movlb	0	; () banked
 14497  001A8E  6FAB               	movwf	??_BothServos& (0+255),b
 14498  001A90  0E3F               	movlw	63
 14499  001A92                     u9897:
 14500  001A92  2EE8               	decfsz	wreg,f,c
 14501  001A94  D7FE               	bra	u9897
 14502  001A96  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14503  001A98  D7FC               	bra	u9897
 14504  001A9A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14505  001A9C  D7FA               	bra	u9897
 14506  001A9E  D000               	nop2	
 14507                           
 14508                           ;Test.c: 368: updateServoPosition(500, 1);
 14509  001AA0  0E01               	movlw	1
 14510  001AA2  0100               	movlb	0	; () banked
 14511  001AA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14512  001AA6  0EF4               	movlw	244
 14513  001AA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14514  001AAA  0E00               	movlw	0
 14515  001AAC  0100               	movlb	0	; () banked
 14516  001AAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14517  001AB0  0E01               	movlw	1
 14518  001AB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14519  001AB4  ECFE  F023         	call	_updateServoPosition	;wreg free
 14520                           
 14521                           ;Test.c: 369: updateServoPosition(1050, 3);
 14522  001AB8  0E04               	movlw	4
 14523  001ABA  0100               	movlb	0	; () banked
 14524  001ABC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14525  001ABE  0E1A               	movlw	26
 14526  001AC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14527  001AC2  0E00               	movlw	0
 14528  001AC4  0100               	movlb	0	; () banked
 14529  001AC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14530  001AC8  0E03               	movlw	3
 14531  001ACA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14532  001ACC  ECFE  F023         	call	_updateServoPosition	;wreg free
 14533                           
 14534                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14535  001AD0  0E1F               	movlw	31
 14536  001AD2  0100               	movlb	0	; () banked
 14537  001AD4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14538  001AD6  0E71               	movlw	113
 14539  001AD8  0100               	movlb	0	; () banked
 14540  001ADA  6FAB               	movwf	??_BothServos& (0+255),b
 14541  001ADC  0E1E               	movlw	30
 14542  001ADE                     u9907:
 14543  001ADE  2EE8               	decfsz	wreg,f,c
 14544  001AE0  D7FE               	bra	u9907
 14545  001AE2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14546  001AE4  D7FC               	bra	u9907
 14547  001AE6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14548  001AE8  D7FA               	bra	u9907
 14549  001AEA  F000               	nop	
 14550                           
 14551                           ;Test.c: 371: updateServoPosition(1260, 3);
 14552  001AEC  0E04               	movlw	4
 14553  001AEE  0100               	movlb	0	; () banked
 14554  001AF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14555  001AF2  0EEC               	movlw	236
 14556  001AF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14557  001AF6  0E00               	movlw	0
 14558  001AF8  0100               	movlb	0	; () banked
 14559  001AFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14560  001AFC  0E03               	movlw	3
 14561  001AFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14562  001B00  ECFE  F023         	call	_updateServoPosition	;wreg free
 14563                           
 14564                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14565  001B04  0E66               	movlw	102
 14566  001B06  0100               	movlb	0	; () banked
 14567  001B08  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14568  001B0A  0E76               	movlw	118
 14569  001B0C  0100               	movlb	0	; () banked
 14570  001B0E  6FAB               	movwf	??_BothServos& (0+255),b
 14571  001B10  0EC1               	movlw	193
 14572  001B12                     u9917:
 14573  001B12  2EE8               	decfsz	wreg,f,c
 14574  001B14  D7FE               	bra	u9917
 14575  001B16  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14576  001B18  D7FC               	bra	u9917
 14577  001B1A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14578  001B1C  D7FA               	bra	u9917
 14579                           
 14580                           ;Test.c: 373: updateServoPosition(1050, 3);
 14581  001B1E  0E04               	movlw	4
 14582  001B20  0100               	movlb	0	; () banked
 14583  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14584  001B24  0E1A               	movlw	26
 14585  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14586  001B28  0E00               	movlw	0
 14587  001B2A  0100               	movlb	0	; () banked
 14588  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14589  001B2E  0E03               	movlw	3
 14590  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14591  001B32  ECFE  F023         	call	_updateServoPosition	;wreg free
 14592                           
 14593                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14594  001B36  0E1F               	movlw	31
 14595  001B38  0100               	movlb	0	; () banked
 14596  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14597  001B3C  0E71               	movlw	113
 14598  001B3E  0100               	movlb	0	; () banked
 14599  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 14600  001B42  0E1E               	movlw	30
 14601  001B44                     u9927:
 14602  001B44  2EE8               	decfsz	wreg,f,c
 14603  001B46  D7FE               	bra	u9927
 14604  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14605  001B4A  D7FC               	bra	u9927
 14606  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14607  001B4E  D7FA               	bra	u9927
 14608  001B50  F000               	nop	
 14609                           
 14610                           ;Test.c: 376: updateServoPosition(850, 1);
 14611  001B52  0E03               	movlw	3
 14612  001B54  0100               	movlb	0	; () banked
 14613  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14614  001B58  0E52               	movlw	82
 14615  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14616  001B5C  0E00               	movlw	0
 14617  001B5E  0100               	movlb	0	; () banked
 14618  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14619  001B62  0E01               	movlw	1
 14620  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14621  001B66  ECFE  F023         	call	_updateServoPosition	;wreg free
 14622                           
 14623                           ;Test.c: 377: updateServoPosition(1050, 3);
 14624  001B6A  0E04               	movlw	4
 14625  001B6C  0100               	movlb	0	; () banked
 14626  001B6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14627  001B70  0E1A               	movlw	26
 14628  001B72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14629  001B74  0E00               	movlw	0
 14630  001B76  0100               	movlb	0	; () banked
 14631  001B78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14632  001B7A  0E03               	movlw	3
 14633  001B7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14634  001B7E  ECFE  F023         	call	_updateServoPosition	;wreg free
 14635                           
 14636                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14637  001B82  0E1F               	movlw	31
 14638  001B84  0100               	movlb	0	; () banked
 14639  001B86  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14640  001B88  0E71               	movlw	113
 14641  001B8A  0100               	movlb	0	; () banked
 14642  001B8C  6FAB               	movwf	??_BothServos& (0+255),b
 14643  001B8E  0E1E               	movlw	30
 14644  001B90                     u9937:
 14645  001B90  2EE8               	decfsz	wreg,f,c
 14646  001B92  D7FE               	bra	u9937
 14647  001B94  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14648  001B96  D7FC               	bra	u9937
 14649  001B98  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14650  001B9A  D7FA               	bra	u9937
 14651  001B9C  F000               	nop	
 14652                           
 14653                           ;Test.c: 379: updateServoPosition(1260, 3);
 14654  001B9E  0E04               	movlw	4
 14655  001BA0  0100               	movlb	0	; () banked
 14656  001BA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14657  001BA4  0EEC               	movlw	236
 14658  001BA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14659  001BA8  0E00               	movlw	0
 14660  001BAA  0100               	movlb	0	; () banked
 14661  001BAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14662  001BAE  0E03               	movlw	3
 14663  001BB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14664  001BB2  ECFE  F023         	call	_updateServoPosition	;wreg free
 14665                           
 14666                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14667  001BB6  0E66               	movlw	102
 14668  001BB8  0100               	movlb	0	; () banked
 14669  001BBA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14670  001BBC  0E76               	movlw	118
 14671  001BBE  0100               	movlb	0	; () banked
 14672  001BC0  6FAB               	movwf	??_BothServos& (0+255),b
 14673  001BC2  0EC1               	movlw	193
 14674  001BC4                     u9947:
 14675  001BC4  2EE8               	decfsz	wreg,f,c
 14676  001BC6  D7FE               	bra	u9947
 14677  001BC8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14678  001BCA  D7FC               	bra	u9947
 14679  001BCC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14680  001BCE  D7FA               	bra	u9947
 14681                           
 14682                           ;Test.c: 381: updateServoPosition(1050, 3);
 14683  001BD0  0E04               	movlw	4
 14684  001BD2  0100               	movlb	0	; () banked
 14685  001BD4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14686  001BD6  0E1A               	movlw	26
 14687  001BD8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14688  001BDA  0E00               	movlw	0
 14689  001BDC  0100               	movlb	0	; () banked
 14690  001BDE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14691  001BE0  0E03               	movlw	3
 14692  001BE2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14693  001BE4  ECFE  F023         	call	_updateServoPosition	;wreg free
 14694                           
 14695                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14696  001BE8  0E1F               	movlw	31
 14697  001BEA  0100               	movlb	0	; () banked
 14698  001BEC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14699  001BEE  0E71               	movlw	113
 14700  001BF0  0100               	movlb	0	; () banked
 14701  001BF2  6FAB               	movwf	??_BothServos& (0+255),b
 14702  001BF4  0E1E               	movlw	30
 14703  001BF6                     u9957:
 14704  001BF6  2EE8               	decfsz	wreg,f,c
 14705  001BF8  D7FE               	bra	u9957
 14706  001BFA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14707  001BFC  D7FC               	bra	u9957
 14708  001BFE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14709  001C00  D7FA               	bra	u9957
 14710  001C02  F000               	nop	
 14711                           
 14712                           ;Test.c: 384: updateServoPosition(1200, 1);
 14713  001C04  0E04               	movlw	4
 14714  001C06  0100               	movlb	0	; () banked
 14715  001C08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14716  001C0A  0EB0               	movlw	176
 14717  001C0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14718  001C0E  0E00               	movlw	0
 14719  001C10  0100               	movlb	0	; () banked
 14720  001C12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14721  001C14  0E01               	movlw	1
 14722  001C16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14723  001C18  ECFE  F023         	call	_updateServoPosition	;wreg free
 14724                           
 14725                           ;Test.c: 385: updateServoPosition(1050, 3);
 14726  001C1C  0E04               	movlw	4
 14727  001C1E  0100               	movlb	0	; () banked
 14728  001C20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14729  001C22  0E1A               	movlw	26
 14730  001C24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14731  001C26  0E00               	movlw	0
 14732  001C28  0100               	movlb	0	; () banked
 14733  001C2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14734  001C2C  0E03               	movlw	3
 14735  001C2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14736  001C30  ECFE  F023         	call	_updateServoPosition	;wreg free
 14737                           
 14738                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14739  001C34  0E3D               	movlw	61
 14740  001C36  0100               	movlb	0	; () banked
 14741  001C38  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14742  001C3A  0EE1               	movlw	225
 14743  001C3C  0100               	movlb	0	; () banked
 14744  001C3E  6FAB               	movwf	??_BothServos& (0+255),b
 14745  001C40  0E3F               	movlw	63
 14746  001C42                     u9967:
 14747  001C42  2EE8               	decfsz	wreg,f,c
 14748  001C44  D7FE               	bra	u9967
 14749  001C46  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14750  001C48  D7FC               	bra	u9967
 14751  001C4A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14752  001C4C  D7FA               	bra	u9967
 14753  001C4E  D000               	nop2	
 14754                           
 14755                           ;Test.c: 388: updateServoPosition(1670, 1);
 14756  001C50  0E06               	movlw	6
 14757  001C52  0100               	movlb	0	; () banked
 14758  001C54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14759  001C56  0E86               	movlw	134
 14760  001C58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14761  001C5A  0E00               	movlw	0
 14762  001C5C  0100               	movlb	0	; () banked
 14763  001C5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14764  001C60  0E01               	movlw	1
 14765  001C62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14766  001C64  ECFE  F023         	call	_updateServoPosition	;wreg free
 14767                           
 14768                           ;Test.c: 389: updateServoPosition(1050, 3);
 14769  001C68  0E04               	movlw	4
 14770  001C6A  0100               	movlb	0	; () banked
 14771  001C6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14772  001C6E  0E1A               	movlw	26
 14773  001C70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14774  001C72  0E00               	movlw	0
 14775  001C74  0100               	movlb	0	; () banked
 14776  001C76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14777  001C78  0E03               	movlw	3
 14778  001C7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14779  001C7C  ECFE  F023         	call	_updateServoPosition	;wreg free
 14780                           
 14781                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14782  001C80  0E1F               	movlw	31
 14783  001C82  0100               	movlb	0	; () banked
 14784  001C84  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14785  001C86  0E71               	movlw	113
 14786  001C88  0100               	movlb	0	; () banked
 14787  001C8A  6FAB               	movwf	??_BothServos& (0+255),b
 14788  001C8C  0E1E               	movlw	30
 14789  001C8E                     u9977:
 14790  001C8E  2EE8               	decfsz	wreg,f,c
 14791  001C90  D7FE               	bra	u9977
 14792  001C92  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14793  001C94  D7FC               	bra	u9977
 14794  001C96  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14795  001C98  D7FA               	bra	u9977
 14796  001C9A  F000               	nop	
 14797                           
 14798                           ;Test.c: 391: updateServoPosition(1390, 3);
 14799  001C9C  0E05               	movlw	5
 14800  001C9E  0100               	movlb	0	; () banked
 14801  001CA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14802  001CA2  0E6E               	movlw	110
 14803  001CA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14804  001CA6  0E00               	movlw	0
 14805  001CA8  0100               	movlb	0	; () banked
 14806  001CAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14807  001CAC  0E03               	movlw	3
 14808  001CAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14809  001CB0  ECFE  F023         	call	_updateServoPosition	;wreg free
 14810                           
 14811                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14812  001CB4  0E66               	movlw	102
 14813  001CB6  0100               	movlb	0	; () banked
 14814  001CB8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14815  001CBA  0E76               	movlw	118
 14816  001CBC  0100               	movlb	0	; () banked
 14817  001CBE  6FAB               	movwf	??_BothServos& (0+255),b
 14818  001CC0  0EC1               	movlw	193
 14819  001CC2                     u9987:
 14820  001CC2  2EE8               	decfsz	wreg,f,c
 14821  001CC4  D7FE               	bra	u9987
 14822  001CC6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14823  001CC8  D7FC               	bra	u9987
 14824  001CCA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14825  001CCC  D7FA               	bra	u9987
 14826                           
 14827                           ;Test.c: 393: updateServoPosition(1050, 3);
 14828  001CCE  0E04               	movlw	4
 14829  001CD0  0100               	movlb	0	; () banked
 14830  001CD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14831  001CD4  0E1A               	movlw	26
 14832  001CD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14833  001CD8  0E00               	movlw	0
 14834  001CDA  0100               	movlb	0	; () banked
 14835  001CDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14836  001CDE  0E03               	movlw	3
 14837  001CE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14838  001CE2  ECFE  F023         	call	_updateServoPosition	;wreg free
 14839                           
 14840                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14841  001CE6  0E1F               	movlw	31
 14842  001CE8  0100               	movlb	0	; () banked
 14843  001CEA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14844  001CEC  0E71               	movlw	113
 14845  001CEE  0100               	movlb	0	; () banked
 14846  001CF0  6FAB               	movwf	??_BothServos& (0+255),b
 14847  001CF2  0E1E               	movlw	30
 14848  001CF4                     u9997:
 14849  001CF4  2EE8               	decfsz	wreg,f,c
 14850  001CF6  D7FE               	bra	u9997
 14851  001CF8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14852  001CFA  D7FC               	bra	u9997
 14853  001CFC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14854  001CFE  D7FA               	bra	u9997
 14855  001D00  F000               	nop	
 14856                           
 14857                           ;Test.c: 396: updateServoPosition(2400, 1);
 14858  001D02  0E09               	movlw	9
 14859  001D04  0100               	movlb	0	; () banked
 14860  001D06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14861  001D08  0E60               	movlw	96
 14862  001D0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14863  001D0C  0E00               	movlw	0
 14864  001D0E  0100               	movlb	0	; () banked
 14865  001D10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14866  001D12  0E01               	movlw	1
 14867  001D14  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14868  001D16  ECFE  F023         	call	_updateServoPosition	;wreg free
 14869                           
 14870                           ;Test.c: 397: updateServoPosition(1050, 3);
 14871  001D1A  0E04               	movlw	4
 14872  001D1C  0100               	movlb	0	; () banked
 14873  001D1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14874  001D20  0E1A               	movlw	26
 14875  001D22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14876  001D24  0E00               	movlw	0
 14877  001D26  0100               	movlb	0	; () banked
 14878  001D28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14879  001D2A  0E03               	movlw	3
 14880  001D2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14881  001D2E  ECFE  F023         	call	_updateServoPosition	;wreg free
 14882                           
 14883                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14884  001D32  0E1F               	movlw	31
 14885  001D34  0100               	movlb	0	; () banked
 14886  001D36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14887  001D38  0E71               	movlw	113
 14888  001D3A  0100               	movlb	0	; () banked
 14889  001D3C  6FAB               	movwf	??_BothServos& (0+255),b
 14890  001D3E  0E1E               	movlw	30
 14891  001D40                     u10007:
 14892  001D40  2EE8               	decfsz	wreg,f,c
 14893  001D42  D7FE               	bra	u10007
 14894  001D44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14895  001D46  D7FC               	bra	u10007
 14896  001D48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14897  001D4A  D7FA               	bra	u10007
 14898  001D4C  F000               	nop	
 14899                           
 14900                           ;Test.c: 399: updateServoPosition(1390, 3);
 14901  001D4E  0E05               	movlw	5
 14902  001D50  0100               	movlb	0	; () banked
 14903  001D52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14904  001D54  0E6E               	movlw	110
 14905  001D56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14906  001D58  0E00               	movlw	0
 14907  001D5A  0100               	movlb	0	; () banked
 14908  001D5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14909  001D5E  0E03               	movlw	3
 14910  001D60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14911  001D62  ECFE  F023         	call	_updateServoPosition	;wreg free
 14912                           
 14913                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14914  001D66  0E66               	movlw	102
 14915  001D68  0100               	movlb	0	; () banked
 14916  001D6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14917  001D6C  0E76               	movlw	118
 14918  001D6E  0100               	movlb	0	; () banked
 14919  001D70  6FAB               	movwf	??_BothServos& (0+255),b
 14920  001D72  0EC1               	movlw	193
 14921  001D74                     u10017:
 14922  001D74  2EE8               	decfsz	wreg,f,c
 14923  001D76  D7FE               	bra	u10017
 14924  001D78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14925  001D7A  D7FC               	bra	u10017
 14926  001D7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14927  001D7E  D7FA               	bra	u10017
 14928                           
 14929                           ;Test.c: 401: updateServoPosition(1050, 3);
 14930  001D80  0E04               	movlw	4
 14931  001D82  0100               	movlb	0	; () banked
 14932  001D84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14933  001D86  0E1A               	movlw	26
 14934  001D88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14935  001D8A  0E00               	movlw	0
 14936  001D8C  0100               	movlb	0	; () banked
 14937  001D8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14938  001D90  0E03               	movlw	3
 14939  001D92  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14940  001D94  ECFE  F023         	call	_updateServoPosition	;wreg free
 14941                           
 14942                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14943  001D98  0E1F               	movlw	31
 14944  001D9A  0100               	movlb	0	; () banked
 14945  001D9C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14946  001D9E  0E71               	movlw	113
 14947  001DA0  0100               	movlb	0	; () banked
 14948  001DA2  6FAB               	movwf	??_BothServos& (0+255),b
 14949  001DA4  0E1E               	movlw	30
 14950  001DA6                     u10027:
 14951  001DA6  2EE8               	decfsz	wreg,f,c
 14952  001DA8  D7FE               	bra	u10027
 14953  001DAA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14954  001DAC  D7FC               	bra	u10027
 14955  001DAE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14956  001DB0  D7FA               	bra	u10027
 14957  001DB2  F000               	nop	
 14958                           
 14959                           ;Test.c: 404: TMR1ON = 0;
 14960  001DB4  90CD               	bcf	4045,0,c	;volatile
 14961                           
 14962                           ;Test.c: 405: TMR3ON = 0;
 14963  001DB6  90B1               	bcf	4017,0,c	;volatile
 14964                           
 14965                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14966  001DB8  9EF2               	bcf	intcon,7,c	;volatile
 14967  001DBA  0012               	return		;funcret
 14968  001DBC                     __end_of_BothServos:
 14969                           	opt stack 0
 14970                           tblptru	equ	0xFF8
 14971                           tblptrh	equ	0xFF7
 14972                           tblptrl	equ	0xFF6
 14973                           tablat	equ	0xFF5
 14974                           prodh	equ	0xFF4
 14975                           prodl	equ	0xFF3
 14976                           intcon	equ	0xFF2
 14977                           intcon2	equ	0xFF1
 14978                           intcon3	equ	0xFF0
 14979                           postinc0	equ	0xFEE
 14980                           wreg	equ	0xFE8
 14981                           postdec1	equ	0xFE5
 14982                           fsr1l	equ	0xFE1
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           fsr2h	equ	0xFDA
 14987                           fsr2l	equ	0xFD9
 14988                           status	equ	0xFD8
 14989                           
 14990 ;; *************** function _initServos *****************
 14991 ;; Defined at:
 14992 ;;		line 440 in file "sort.c"
 14993 ;; Parameters:    Size  Location     Type
 14994 ;;		None
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;		None
 14997 ;; Return value:  Size  Location     Type
 14998 ;;                  1    wreg      void 
 14999 ;; Registers used:
 15000 ;;		wreg, status,2, status,0, cstack
 15001 ;; Tracked objects:
 15002 ;;		On entry : 0/0
 15003 ;;		On exit  : 0/0
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;Total ram usage:        1 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; Hardware stack levels required when called:    8
 15013 ;; This function calls:
 15014 ;;		_updateServoPosition
 15015 ;; This function is called by:
 15016 ;;		_Loading
 15017 ;;		_BothServos
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           	psect	text48
 15022  004C20                     __ptext48:
 15023                           	opt stack 0
 15024  004C20                     _initServos:
 15025                           	opt stack 20
 15026                           
 15027                           ;sort.c: 441: updateServoPosition(1200, 1);
 15028                           
 15029                           ;incstack = 0
 15030  004C20  0E04               	movlw	4
 15031  004C22  0100               	movlb	0	; () banked
 15032  004C24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15033  004C26  0EB0               	movlw	176
 15034  004C28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15035  004C2A  0E00               	movlw	0
 15036  004C2C  0100               	movlb	0	; () banked
 15037  004C2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15038  004C30  0E01               	movlw	1
 15039  004C32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15040  004C34  ECFE  F023         	call	_updateServoPosition	;wreg free
 15041                           
 15042                           ;sort.c: 442: updateServoPosition(1050, 3);
 15043  004C38  0E04               	movlw	4
 15044  004C3A  0100               	movlb	0	; () banked
 15045  004C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15046  004C3E  0E1A               	movlw	26
 15047  004C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15048  004C42  0E00               	movlw	0
 15049  004C44  0100               	movlb	0	; () banked
 15050  004C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15051  004C48  0E03               	movlw	3
 15052  004C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15053  004C4C  ECFE  F023         	call	_updateServoPosition	;wreg free
 15054                           
 15055                           ;sort.c: 443: TMR1ON = 1;
 15056  004C50  80CD               	bsf	4045,0,c	;volatile
 15057                           
 15058                           ;sort.c: 444: was_low_1 = 0;
 15059  004C52  0E00               	movlw	0
 15060  004C54  6E7A               	movwf	_was_low_1+1,c	;volatile
 15061  004C56  0E00               	movlw	0
 15062  004C58  6E79               	movwf	_was_low_1,c	;volatile
 15063                           
 15064                           ;sort.c: 445: _delay((unsigned long)((5)*(32000000/4000.0)));
 15065  004C5A  0E34               	movlw	52
 15066  004C5C  0100               	movlb	0	; () banked
 15067  004C5E  6F88               	movwf	??_initServos& (0+255),b
 15068  004C60  0EF1               	movlw	241
 15069  004C62                     u10037:
 15070  004C62  2EE8               	decfsz	wreg,f,c
 15071  004C64  D7FE               	bra	u10037
 15072  004C66  2F88               	decfsz	??_initServos& (0+255),f,b
 15073  004C68  D7FC               	bra	u10037
 15074  004C6A  D000               	nop2	
 15075                           
 15076                           ;sort.c: 446: TMR3ON = 1;
 15077  004C6C  80B1               	bsf	4017,0,c	;volatile
 15078                           
 15079                           ;sort.c: 447: was_low_3 = 0;
 15080  004C6E  0E00               	movlw	0
 15081  004C70  6E7C               	movwf	_was_low_3+1,c	;volatile
 15082  004C72  0E00               	movlw	0
 15083  004C74  6E7B               	movwf	_was_low_3,c	;volatile
 15084                           
 15085                           ;sort.c: 449: LATCbits.LATC0 = 1;
 15086  004C76  808B               	bsf	3979,0,c	;volatile
 15087  004C78  0012               	return		;funcret
 15088  004C7A                     __end_of_initServos:
 15089                           	opt stack 0
 15090                           tblptru	equ	0xFF8
 15091                           tblptrh	equ	0xFF7
 15092                           tblptrl	equ	0xFF6
 15093                           tablat	equ	0xFF5
 15094                           prodh	equ	0xFF4
 15095                           prodl	equ	0xFF3
 15096                           intcon	equ	0xFF2
 15097                           intcon2	equ	0xFF1
 15098                           intcon3	equ	0xFF0
 15099                           postinc0	equ	0xFEE
 15100                           wreg	equ	0xFE8
 15101                           postdec1	equ	0xFE5
 15102                           fsr1l	equ	0xFE1
 15103                           indf2	equ	0xFDF
 15104                           postinc2	equ	0xFDE
 15105                           postdec2	equ	0xFDD
 15106                           fsr2h	equ	0xFDA
 15107                           fsr2l	equ	0xFD9
 15108                           status	equ	0xFD8
 15109                           
 15110 ;; *************** function _updateServoPosition *****************
 15111 ;; Defined at:
 15112 ;;		line 517 in file "sort.c"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;  time_us         2    0[BANK0 ] int 
 15115 ;;  timer           2    2[BANK0 ] int 
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;  my_time         2    6[BANK0 ] unsigned int 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;                  1    wreg      void 
 15120 ;; Registers used:
 15121 ;;		wreg, status,2, status,0
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15130 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;Total ram usage:        8 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    7
 15134 ;; This function calls:
 15135 ;;		Nothing
 15136 ;; This function is called by:
 15137 ;;		_Distribution
 15138 ;;		_initServos
 15139 ;;		_actuatorTest
 15140 ;;		_BothServos
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           	psect	text49
 15145  0047FC                     __ptext49:
 15146                           	opt stack 0
 15147  0047FC                     _updateServoPosition:
 15148                           	opt stack 20
 15149                           
 15150                           ;sort.c: 518: unsigned int my_time = 65535 - time_us;
 15151                           
 15152                           ;incstack = 0
 15153  0047FC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15154  004800  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15155  004804  0100               	movlb	0	; () banked
 15156  004806  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15157  004808  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15158  00480A  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15159  00480C  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15160  00480E  0EFF               	movlw	255
 15161  004810  0100               	movlb	0	; () banked
 15162  004812  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15163  004814  0100               	movlb	0	; () banked
 15164  004816  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15165  004818  0EFF               	movlw	255
 15166  00481A  0100               	movlb	0	; () banked
 15167  00481C  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15168  00481E  0100               	movlb	0	; () banked
 15169  004820  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15170                           
 15171                           ;sort.c: 519: switch(timer){
 15172  004822  D015               	goto	l6436
 15173  004824                     l6434:
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;sort.c: 521: servoTimes[0] = my_time >> 8;
 15177  004824  0100               	movlb	0	; () banked
 15178  004826  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15179  004828  0100               	movlb	0	; () banked
 15180  00482A  6FDA               	movwf	_servoTimes& (0+255),b
 15181  00482C  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15182                           
 15183                           ;sort.c: 522: servoTimes[1] = my_time & 0xFF;
 15184  00482E  0100               	movlb	0	; () banked
 15185  004830  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15186  004832  0100               	movlb	0	; () banked
 15187  004834  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15188  004836  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15189  004838                     l863:
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;sort.c: 524: servoTimes[2] = my_time >> 8;
 15193  004838  0100               	movlb	0	; () banked
 15194  00483A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15195  00483C  0100               	movlb	0	; () banked
 15196  00483E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15197  004840  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15198                           
 15199                           ;sort.c: 525: servoTimes[3] = my_time & 0xFF;
 15200  004842  0100               	movlb	0	; () banked
 15201  004844  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15202  004846  0100               	movlb	0	; () banked
 15203  004848  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15204  00484A  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15205                           
 15206                           ;sort.c: 526: }
 15207  00484C  D011               	goto	l864
 15208  00484E                     l6436:
 15209                           
 15210                           ; BSR set to: 0
 15211  00484E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15212  004852  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15213                           
 15214                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15215                           ; Switch size 1, requested type "space"
 15216                           ; Number of cases is 1, Range of values is 0 to 0
 15217                           ; switch strategies available:
 15218                           ; Name         Instructions Cycles
 15219                           ; simple_byte            4     3 (average)
 15220                           ;	Chosen strategy is simple_byte
 15221  004856  0100               	movlb	0	; () banked
 15222  004858  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15223  00485A  0A00               	xorlw	0	; case 0
 15224  00485C  A4D8               	btfss	status,2,c
 15225  00485E  D008               	goto	l864
 15226                           
 15227                           ; BSR set to: 0
 15228                           ; Switch size 1, requested type "space"
 15229                           ; Number of cases is 2, Range of values is 1 to 3
 15230                           ; switch strategies available:
 15231                           ; Name         Instructions Cycles
 15232                           ; simple_byte            7     4 (average)
 15233                           ;	Chosen strategy is simple_byte
 15234  004860  0100               	movlb	0	; () banked
 15235  004862  5184               	movf	??_updateServoPosition& (0+255),w,b
 15236  004864  0A01               	xorlw	1	; case 1
 15237  004866  B4D8               	btfsc	status,2,c
 15238  004868  D7DD               	goto	l6434
 15239  00486A  0A02               	xorlw	2	; case 3
 15240  00486C  B4D8               	btfsc	status,2,c
 15241  00486E  D7E4               	goto	l863
 15242  004870                     l864:
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;sort.c: 527: servo_state = time_us;
 15246  004870  C080  F073         	movff	updateServoPosition@time_us,_servo_state	;volatile
 15247  004874  C081  F074         	movff	updateServoPosition@time_us+1,_servo_state+1	;volatile
 15248                           
 15249                           ; BSR set to: 0
 15250  004878  0012               	return		;funcret
 15251  00487A                     __end_of_updateServoPosition:
 15252                           	opt stack 0
 15253                           tblptru	equ	0xFF8
 15254                           tblptrh	equ	0xFF7
 15255                           tblptrl	equ	0xFF6
 15256                           tablat	equ	0xFF5
 15257                           prodh	equ	0xFF4
 15258                           prodl	equ	0xFF3
 15259                           intcon	equ	0xFF2
 15260                           intcon2	equ	0xFF1
 15261                           intcon3	equ	0xFF0
 15262                           postinc0	equ	0xFEE
 15263                           wreg	equ	0xFE8
 15264                           postdec1	equ	0xFE5
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           fsr2h	equ	0xFDA
 15270                           fsr2l	equ	0xFD9
 15271                           status	equ	0xFD8
 15272                           
 15273 ;; *************** function _BlockerTest *****************
 15274 ;; Defined at:
 15275 ;;		line 589 in file "Test.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;		None
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;  i               2   44[BANK0 ] int 
 15280 ;;  cond_flag       2   48[BANK0 ] int 
 15281 ;;  cam_flag        2   46[BANK0 ] int 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  1    wreg      void 
 15284 ;; Registers used:
 15285 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15292 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15294 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15295 ;;Total ram usage:        7 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:   10
 15298 ;; This function calls:
 15299 ;;		_lcdInst
 15300 ;;		_printf
 15301 ;; This function is called by:
 15302 ;;		_Test
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           	psect	text50
 15307  003A92                     __ptext50:
 15308                           	opt stack 0
 15309  003A92                     _BlockerTest:
 15310                           	opt stack 19
 15311                           
 15312                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;incstack = 0
 15316  003A92  0E01               	movlw	1
 15317  003A94  EC24  F02A         	call	_lcdInst
 15318  003A98  0E68               	movlw	104
 15319  003A9A  0100               	movlb	0	; () banked
 15320  003A9C  6FAB               	movwf	??_BlockerTest& (0+255),b
 15321  003A9E  0EE4               	movlw	228
 15322  003AA0                     u10047:
 15323  003AA0  2EE8               	decfsz	wreg,f,c
 15324  003AA2  D7FE               	bra	u10047
 15325  003AA4  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15326  003AA6  D7FC               	bra	u10047
 15327  003AA8  F000               	nop	
 15328  003AAA  0E80               	movlw	128
 15329  003AAC  EC24  F02A         	call	_lcdInst
 15330                           
 15331                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15332  003AB0  0E7F               	movlw	low STR_122
 15333  003AB2  0100               	movlb	0	; () banked
 15334  003AB4  6F8E               	movwf	printf@f& (0+255),b
 15335  003AB6  0EFB               	movlw	high STR_122
 15336  003AB8  0100               	movlb	0	; () banked
 15337  003ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15338  003ABC  A480               	btfss	3968,2,c	;volatile
 15339  003ABE  D004               	goto	u6950
 15340  003AC0  0100               	movlb	0	; () banked
 15341  003AC2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15342  003AC4  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15343  003AC6  D002               	goto	u6958
 15344  003AC8                     u6950:
 15345  003AC8  0100               	movlb	0	; () banked
 15346  003ACA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15347  003ACC                     u6958:
 15348  003ACC  0100               	movlb	0	; () banked
 15349  003ACE  51AB               	movf	??_BlockerTest& (0+255),w,b
 15350  003AD0  0100               	movlb	0	; () banked
 15351  003AD2  6F90               	movwf	(?_printf+2)& (0+255),b
 15352  003AD4  6B91               	clrf	(?_printf+3)& (0+255),b
 15353  003AD6  EC00  F00B         	call	_printf	;wreg free
 15354                           
 15355                           ;Test.c: 592: lcdInst(0b11000000);;
 15356  003ADA  0EC0               	movlw	192
 15357  003ADC  EC24  F02A         	call	_lcdInst
 15358                           
 15359                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15360  003AE0  0E6D               	movlw	low STR_123
 15361  003AE2  0100               	movlb	0	; () banked
 15362  003AE4  6F8E               	movwf	printf@f& (0+255),b
 15363  003AE6  0EFB               	movlw	high STR_123
 15364  003AE8  0100               	movlb	0	; () banked
 15365  003AEA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15366  003AEC  EC00  F00B         	call	_printf	;wreg free
 15367                           
 15368                           ;Test.c: 594: int cam_flag = 1;
 15369  003AF0  0E00               	movlw	0
 15370  003AF2  0100               	movlb	0	; () banked
 15371  003AF4  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15372  003AF6  0E01               	movlw	1
 15373  003AF8  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;Test.c: 595: int cond_flag = 0;
 15377  003AFA  0E00               	movlw	0
 15378  003AFC  0100               	movlb	0	; () banked
 15379  003AFE  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15380  003B00  0E00               	movlw	0
 15381  003B02  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15382                           
 15383                           ; BSR set to: 0
 15384                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15385                           
 15386                           ;Test.c: 596: while(1){
 15387  003B04  D018               	goto	l8376
 15388  003B06                     l8372:
 15389                           
 15390                           ;Test.c: 598: lcdInst(0b10000000);;
 15391  003B06  0E80               	movlw	128
 15392  003B08  EC24  F02A         	call	_lcdInst
 15393                           
 15394                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15395  003B0C  0E7F               	movlw	low STR_122
 15396  003B0E  0100               	movlb	0	; () banked
 15397  003B10  6F8E               	movwf	printf@f& (0+255),b
 15398  003B12  0EFB               	movlw	high STR_122
 15399  003B14  0100               	movlb	0	; () banked
 15400  003B16  6F8F               	movwf	(printf@f+1)& (0+255),b
 15401  003B18  A480               	btfss	3968,2,c	;volatile
 15402  003B1A  D004               	goto	u6960
 15403  003B1C  0100               	movlb	0	; () banked
 15404  003B1E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15405  003B20  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15406  003B22  D002               	goto	u6968
 15407  003B24                     u6960:
 15408  003B24  0100               	movlb	0	; () banked
 15409  003B26  6BAB               	clrf	??_BlockerTest& (0+255),b
 15410  003B28                     u6968:
 15411  003B28  0100               	movlb	0	; () banked
 15412  003B2A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15413  003B2C  0100               	movlb	0	; () banked
 15414  003B2E  6F90               	movwf	(?_printf+2)& (0+255),b
 15415  003B30  6B91               	clrf	(?_printf+3)& (0+255),b
 15416  003B32  EC00  F00B         	call	_printf	;wreg free
 15417  003B36                     l8376:
 15418  003B36  A281               	btfss	3969,1,c	;volatile
 15419  003B38  D7E6               	goto	l8372
 15420                           
 15421                           ;Test.c: 600: }
 15422                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15423  003B3A  3881               	swapf	3969,w,c	;volatile
 15424  003B3C  0B0F               	andlw	15
 15425  003B3E  0A0F               	xorlw	15
 15426  003B40  B4D8               	btfsc	status,2,c
 15427  003B42  0012               	return	
 15428                           
 15429                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15430                           
 15431                           ;Test.c: 603: }
 15432                           
 15433                           ;Test.c: 602: break;
 15434  003B44  3881               	swapf	3969,w,c	;volatile
 15435  003B46  0B0F               	andlw	15
 15436  003B48  06E8               	decf	wreg,f,c
 15437  003B4A  A4D8               	btfss	status,2,c
 15438  003B4C  D016               	goto	l8394
 15439                           
 15440                           ;Test.c: 605: if(cond_flag){
 15441  003B4E  0100               	movlb	0	; () banked
 15442  003B50  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15443  003B52  0100               	movlb	0	; () banked
 15444  003B54  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15445  003B56  B4D8               	btfsc	status,2,c
 15446  003B58  D007               	goto	l1355
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15450  003B5A  8689               	bsf	3977,3,c	;volatile
 15451  003B5C  D006               	goto	l8392
 15452  003B5E                     u7011:
 15453  003B5E  0E01               	movlw	1
 15454  003B60                     u7020:
 15455  003B60  0100               	movlb	0	; () banked
 15456  003B62  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15457  003B64  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15458                           
 15459                           ;Test.c: 608: }
 15460  003B66  D054               	goto	l8418
 15461  003B68                     l1355:
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;Test.c: 609: else{
 15465                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15466  003B68  9689               	bcf	3977,3,c	;volatile
 15467  003B6A                     l8392:
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;Test.c: 611: cond_flag = !cond_flag;
 15471  003B6A  0100               	movlb	0	; () banked
 15472  003B6C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15473  003B6E  0100               	movlb	0	; () banked
 15474  003B70  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15475  003B72  B4D8               	btfsc	status,2,c
 15476  003B74  D7F4               	goto	u7011
 15477  003B76  0E00               	movlw	0
 15478  003B78  D7F3               	goto	u7020
 15479  003B7A                     l8394:
 15480                           
 15481                           ;Test.c: 614: else{
 15482                           ;Test.c: 615: if(cam_flag){
 15483  003B7A  0100               	movlb	0	; () banked
 15484  003B7C  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15485  003B7E  0100               	movlb	0	; () banked
 15486  003B80  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15487  003B82  B4D8               	btfsc	status,2,c
 15488  003B84  D007               	goto	l8400
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15492  003B86  808B               	bsf	3979,0,c	;volatile
 15493  003B88  D023               	goto	l8412
 15494  003B8A                     u7061:
 15495  003B8A  0E01               	movlw	1
 15496  003B8C                     u7070:
 15497  003B8C  0100               	movlb	0	; () banked
 15498  003B8E  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15499  003B90  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15500                           
 15501                           ;Test.c: 618: }
 15502  003B92  D03E               	goto	l8418
 15503  003B94                     l8400:
 15504                           
 15505                           ; BSR set to: 0
 15506                           ;Test.c: 619: else{
 15507                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15508  003B94  0E00               	movlw	0
 15509  003B96  0100               	movlb	0	; () banked
 15510  003B98  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15511  003B9A  0E00               	movlw	0
 15512  003B9C  6FAC               	movwf	BlockerTest@i& (0+255),b
 15513  003B9E                     l8402:
 15514                           
 15515                           ; BSR set to: 0
 15516  003B9E  0100               	movlb	0	; () banked
 15517  003BA0  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15518  003BA2  D008               	goto	l1360
 15519  003BA4  0E88               	movlw	136
 15520  003BA6  0100               	movlb	0	; () banked
 15521  003BA8  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15522  003BAA  0E13               	movlw	19
 15523  003BAC  0100               	movlb	0	; () banked
 15524  003BAE  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15525  003BB0  B0D8               	btfsc	status,0,c
 15526  003BB2  D00D               	goto	l1361
 15527  003BB4                     l1360:
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;Test.c: 621: {
 15531                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15532  003BB4  808B               	bsf	3979,0,c	;volatile
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15536  003BB6  0E1A               	movlw	26
 15537  003BB8                     u10057:
 15538  003BB8  2EE8               	decfsz	wreg,f,c
 15539  003BBA  D7FE               	bra	u10057
 15540  003BBC  D000               	nop2	
 15541                           
 15542                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15543  003BBE  908B               	bcf	3979,0,c	;volatile
 15544                           
 15545                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15546  003BC0  0EF0               	movlw	240
 15547  003BC2                     u10067:
 15548  003BC2  2EE8               	decfsz	wreg,f,c
 15549  003BC4  D7FE               	bra	u10067
 15550  003BC6  0100               	movlb	0	; () banked
 15551  003BC8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15552  003BCA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15553  003BCC  D7E8               	goto	l8402
 15554  003BCE                     l1361:
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Test.c: 626: }
 15558                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15559  003BCE  908B               	bcf	3979,0,c	;volatile
 15560  003BD0                     l8412:
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;Test.c: 628: cam_flag = !cam_flag;
 15564  003BD0  0100               	movlb	0	; () banked
 15565  003BD2  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15566  003BD4  0100               	movlb	0	; () banked
 15567  003BD6  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15568  003BD8  B4D8               	btfsc	status,2,c
 15569  003BDA  D7D7               	goto	u7061
 15570  003BDC  0E00               	movlw	0
 15571  003BDE  D7D6               	goto	u7070
 15572  003BE0                     l8414:
 15573                           
 15574                           ;Test.c: 633: lcdInst(0b10000000);;
 15575  003BE0  0E80               	movlw	128
 15576  003BE2  EC24  F02A         	call	_lcdInst
 15577                           
 15578                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15579  003BE6  0E7F               	movlw	low STR_122
 15580  003BE8  0100               	movlb	0	; () banked
 15581  003BEA  6F8E               	movwf	printf@f& (0+255),b
 15582  003BEC  0EFB               	movlw	high STR_122
 15583  003BEE  0100               	movlb	0	; () banked
 15584  003BF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15585  003BF2  A480               	btfss	3968,2,c	;volatile
 15586  003BF4  D004               	goto	u7120
 15587  003BF6  0100               	movlb	0	; () banked
 15588  003BF8  6BAB               	clrf	??_BlockerTest& (0+255),b
 15589  003BFA  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15590  003BFC  D002               	goto	u7128
 15591  003BFE                     u7120:
 15592  003BFE  0100               	movlb	0	; () banked
 15593  003C00  6BAB               	clrf	??_BlockerTest& (0+255),b
 15594  003C02                     u7128:
 15595  003C02  0100               	movlb	0	; () banked
 15596  003C04  51AB               	movf	??_BlockerTest& (0+255),w,b
 15597  003C06  0100               	movlb	0	; () banked
 15598  003C08  6F90               	movwf	(?_printf+2)& (0+255),b
 15599  003C0A  6B91               	clrf	(?_printf+3)& (0+255),b
 15600  003C0C  EC00  F00B         	call	_printf	;wreg free
 15601  003C10                     l8418:
 15602  003C10  A281               	btfss	3969,1,c	;volatile
 15603  003C12  D791               	goto	l8376
 15604  003C14  D7E5               	goto	l8414
 15605  003C16                     __end_of_BlockerTest:
 15606                           	opt stack 0
 15607                           tblptru	equ	0xFF8
 15608                           tblptrh	equ	0xFF7
 15609                           tblptrl	equ	0xFF6
 15610                           tablat	equ	0xFF5
 15611                           prodh	equ	0xFF4
 15612                           prodl	equ	0xFF3
 15613                           intcon	equ	0xFF2
 15614                           intcon2	equ	0xFF1
 15615                           intcon3	equ	0xFF0
 15616                           postinc0	equ	0xFEE
 15617                           wreg	equ	0xFE8
 15618                           postdec1	equ	0xFE5
 15619                           fsr1l	equ	0xFE1
 15620                           indf2	equ	0xFDF
 15621                           postinc2	equ	0xFDE
 15622                           postdec2	equ	0xFDD
 15623                           fsr2h	equ	0xFDA
 15624                           fsr2l	equ	0xFD9
 15625                           status	equ	0xFD8
 15626                           
 15627 ;; *************** function _printf *****************
 15628 ;; Defined at:
 15629 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15630 ;; Parameters:    Size  Location     Type
 15631 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15632 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15633 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15634 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15635 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15636 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15637 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15638 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15639 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15640 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15641 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15642 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15643 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15644 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15645 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15646 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15647 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15648 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15649 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15650 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15651 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15652 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15653 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15654 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15655 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15656 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;  tmpval          4    0        struct .
 15659 ;;  width           2   41[BANK0 ] int 
 15660 ;;  val             2   37[BANK0 ] unsigned int 
 15661 ;;  len             2   35[BANK0 ] unsigned int 
 15662 ;;  ap              2   33[BANK0 ] PTR void [1]
 15663 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15664 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15665 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15666 ;;  c               1   40[BANK0 ] char 
 15667 ;;  flag            1   39[BANK0 ] unsigned char 
 15668 ;;  prec            1   30[BANK0 ] char 
 15669 ;; Return value:  Size  Location     Type
 15670 ;;                  2   14[BANK0 ] int 
 15671 ;; Registers used:
 15672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15673 ;; Tracked objects:
 15674 ;;		On entry : 0/0
 15675 ;;		On exit  : 0/0
 15676 ;;		Unchanged: 0/0
 15677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15678 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15679 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;Total ram usage:       29 bytes
 15683 ;; Hardware stack levels used:    1
 15684 ;; Hardware stack levels required when called:    9
 15685 ;; This function calls:
 15686 ;;		___lwdiv
 15687 ;;		___lwmod
 15688 ;;		___wmul
 15689 ;;		_isdigit
 15690 ;;		_putch
 15691 ;; This function is called by:
 15692 ;;		_UI
 15693 ;;		_change_state_to_menu_start
 15694 ;;		_change_state_to_menu_12
 15695 ;;		_change_state_to_menu_22
 15696 ;;		_printRTC
 15697 ;;		_EEPROM_write
 15698 ;;		_Test
 15699 ;;		_algorithmTest
 15700 ;;		_sensorTest
 15701 ;;		_actuatorTest
 15702 ;;		_BothServos
 15703 ;;		_PortTestA5
 15704 ;;		_PusherTest
 15705 ;;		_SpeedTest
 15706 ;;		_BlockerTest
 15707 ;;		_ToggleTestA5
 15708 ;; This function uses a non-reentrant model
 15709 ;;
 15710                           
 15711                           	psect	text51
 15712  001600                     __ptext51:
 15713                           	opt stack 0
 15714  001600                     _printf:
 15715                           	opt stack 18
 15716                           
 15717                           ;doprnt.c: 466: va_list ap;
 15718                           ;doprnt.c: 499: signed char c;
 15719                           ;doprnt.c: 501: int width;
 15720                           ;doprnt.c: 506: signed char prec;
 15721                           ;doprnt.c: 508: unsigned char flag;
 15722                           ;doprnt.c: 523: union {
 15723                           ;doprnt.c: 524: unsigned long vd;
 15724                           ;doprnt.c: 525: double integ;
 15725                           ;doprnt.c: 526: } tmpval;
 15726                           ;doprnt.c: 528: unsigned int val;
 15727                           ;doprnt.c: 529: unsigned len;
 15728                           ;doprnt.c: 530: const char * cp;
 15729                           ;doprnt.c: 533: *ap = __va_start();
 15730                           
 15731                           ;incstack = 0
 15732  001600  0E90               	movlw	low (?_printf+2)
 15733  001602  0100               	movlb	0	; () banked
 15734  001604  6FA1               	movwf	printf@ap& (0+255),b
 15735  001606  0E00               	movlw	high (?_printf+2)
 15736  001608  0100               	movlb	0	; () banked
 15737  00160A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15738                           
 15739                           ;doprnt.c: 536: while(c = *f++) {
 15740  00160C  D205               	goto	l6394
 15741  00160E                     l6264:
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;doprnt.c: 538: if(c != '%')
 15745  00160E  0E25               	movlw	37
 15746  001610  0100               	movlb	0	; () banked
 15747  001612  19A8               	xorwf	printf@c& (0+255),w,b
 15748  001614  B4D8               	btfsc	status,2,c
 15749  001616  D005               	goto	l6268
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;doprnt.c: 540: {
 15753                           ;doprnt.c: 541: (putch(c) );
 15754  001618  0100               	movlb	0	; () banked
 15755  00161A  51A8               	movf	printf@c& (0+255),w,b
 15756  00161C  EC1C  F02A         	call	_putch
 15757                           
 15758                           ;doprnt.c: 542: continue;
 15759  001620  D1FB               	goto	l6394
 15760  001622                     l6268:
 15761                           
 15762                           ;doprnt.c: 543: }
 15763                           ;doprnt.c: 546: width = 0;
 15764  001622  0E00               	movlw	0
 15765  001624  0100               	movlb	0	; () banked
 15766  001626  6FAA               	movwf	(printf@width+1)& (0+255),b
 15767  001628  0E00               	movlw	0
 15768  00162A  6FA9               	movwf	printf@width& (0+255),b
 15769                           
 15770                           ;doprnt.c: 548: flag = 0;
 15771  00162C  0E00               	movlw	0
 15772  00162E  0100               	movlb	0	; () banked
 15773  001630  6FA7               	movwf	printf@flag& (0+255),b
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;doprnt.c: 551: switch(*f) {
 15777                           
 15778                           ;doprnt.c: 550: for(;;) {
 15779  001632  D005               	goto	l6274
 15780  001634                     l6270:
 15781                           
 15782                           ;doprnt.c: 580: flag |= 0x04;
 15783  001634  0100               	movlb	0	; () banked
 15784  001636  85A7               	bsf	printf@flag& (0+255),2,b
 15785                           
 15786                           ;doprnt.c: 581: f++;
 15787  001638  0100               	movlb	0	; () banked
 15788  00163A  4B8E               	infsnz	printf@f& (0+255),f,b
 15789  00163C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15790  00163E                     l6274:
 15791  00163E  C08E  FFF6         	movff	printf@f,tblptrl
 15792  001642  C08F  FFF7         	movff	printf@f+1,tblptrh
 15793  001646                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15794  001646  6AF8               	clrf	tblptru,c
 15795  001648                     	endif
 15796  001648                     	if	0	;tblptru may be non-zero
 15797  001648                     	endif
 15798  001648  0008               	tblrd		*
 15799  00164A  50F5               	movf	tablat,w,c
 15800                           
 15801                           ; Switch size 1, requested type "space"
 15802                           ; Number of cases is 1, Range of values is 48 to 48
 15803                           ; switch strategies available:
 15804                           ; Name         Instructions Cycles
 15805                           ; simple_byte            4     3 (average)
 15806                           ;	Chosen strategy is simple_byte
 15807  00164C  0A30               	xorlw	48	; case 48
 15808  00164E  B4D8               	btfsc	status,2,c
 15809  001650  D7F1               	goto	l6270
 15810                           
 15811                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15812                           
 15813                           ;doprnt.c: 586: }
 15814                           
 15815                           ;doprnt.c: 585: break;
 15816  001652  C08E  FFF6         	movff	printf@f,tblptrl
 15817  001656  C08F  FFF7         	movff	printf@f+1,tblptrh
 15818  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15819  00165A  6AF8               	clrf	tblptru,c
 15820  00165C                     	endif
 15821  00165C                     	if	0	;tblptru may be non-zero
 15822  00165C                     	endif
 15823  00165C  0008               	tblrd		*
 15824  00165E  50F5               	movf	tablat,w,c
 15825  001660  EC31  F029         	call	_isdigit
 15826  001664  A0D8               	btfss	status,0,c
 15827  001666  D0D2               	goto	l6322
 15828                           
 15829                           ;doprnt.c: 598: width = 0;
 15830  001668  0E00               	movlw	0
 15831  00166A  0100               	movlb	0	; () banked
 15832  00166C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15833  00166E  0E00               	movlw	0
 15834  001670  6FA9               	movwf	printf@width& (0+255),b
 15835  001672                     l6280:
 15836                           
 15837                           ;doprnt.c: 600: width *= 10;
 15838  001672  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15839  001676  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15840  00167A  0E00               	movlw	0
 15841  00167C  0100               	movlb	0	; () banked
 15842  00167E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15843  001680  0E0A               	movlw	10
 15844  001682  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15845  001684  EC9B  F027         	call	___wmul	;wreg free
 15846  001688  C080  F0A9         	movff	?___wmul,printf@width
 15847  00168C  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15848                           
 15849                           ;doprnt.c: 601: width += *f++ - '0';
 15850  001690  0ED0               	movlw	208
 15851  001692  0100               	movlb	0	; () banked
 15852  001694  6F9A               	movwf	??_printf& (0+255),b
 15853  001696  0EFF               	movlw	255
 15854  001698  0100               	movlb	0	; () banked
 15855  00169A  6F9B               	movwf	(??_printf+1)& (0+255),b
 15856  00169C  C08E  FFF6         	movff	printf@f,tblptrl
 15857  0016A0  C08F  FFF7         	movff	printf@f+1,tblptrh
 15858  0016A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15859  0016A4  6AF8               	clrf	tblptru,c
 15860  0016A6                     	endif
 15861  0016A6                     	if	0	;tblptru may be non-zero
 15862  0016A6                     	endif
 15863  0016A6  0008               	tblrd		*
 15864  0016A8  50F5               	movf	tablat,w,c
 15865  0016AA  0100               	movlb	0	; () banked
 15866  0016AC  6F9C               	movwf	(??_printf+2)& (0+255),b
 15867  0016AE  6B9D               	clrf	(??_printf+3)& (0+255),b
 15868  0016B0  0100               	movlb	0	; () banked
 15869  0016B2  519A               	movf	??_printf& (0+255),w,b
 15870  0016B4  0100               	movlb	0	; () banked
 15871  0016B6  279C               	addwf	(??_printf+2)& (0+255),f,b
 15872  0016B8  0100               	movlb	0	; () banked
 15873  0016BA  519B               	movf	(??_printf+1)& (0+255),w,b
 15874  0016BC  0100               	movlb	0	; () banked
 15875  0016BE  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15876  0016C0  0100               	movlb	0	; () banked
 15877  0016C2  519C               	movf	(??_printf+2)& (0+255),w,b
 15878  0016C4  0100               	movlb	0	; () banked
 15879  0016C6  27A9               	addwf	printf@width& (0+255),f,b
 15880  0016C8  0100               	movlb	0	; () banked
 15881  0016CA  519D               	movf	(??_printf+3)& (0+255),w,b
 15882  0016CC  0100               	movlb	0	; () banked
 15883  0016CE  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15884                           
 15885                           ; BSR set to: 0
 15886  0016D0  0100               	movlb	0	; () banked
 15887  0016D2  4B8E               	infsnz	printf@f& (0+255),f,b
 15888  0016D4  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15892  0016D6  C08E  FFF6         	movff	printf@f,tblptrl
 15893  0016DA  C08F  FFF7         	movff	printf@f+1,tblptrh
 15894  0016DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15895  0016DE  6AF8               	clrf	tblptru,c
 15896  0016E0                     	endif
 15897  0016E0                     	if	0	;tblptru may be non-zero
 15898  0016E0                     	endif
 15899  0016E0  0008               	tblrd		*
 15900  0016E2  50F5               	movf	tablat,w,c
 15901  0016E4  EC31  F029         	call	_isdigit
 15902  0016E8  A0D8               	btfss	status,0,c
 15903  0016EA  D090               	goto	l6322
 15904  0016EC  D7C2               	goto	l6280
 15905  0016EE                     l6288:
 15906                           
 15907                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15908  0016EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15909  0016F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15910  0016F6  CFDE F09F          	movff	postinc2,printf@cp
 15911  0016FA  CFDD F0A0          	movff	postdec2,printf@cp+1
 15912  0016FE  0E02               	movlw	2
 15913  001700  0100               	movlb	0	; () banked
 15914  001702  27A1               	addwf	printf@ap& (0+255),f,b
 15915  001704  0E00               	movlw	0
 15916  001706  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;doprnt.c: 740: if(!cp)
 15920  001708  0100               	movlb	0	; () banked
 15921  00170A  519F               	movf	printf@cp& (0+255),w,b
 15922  00170C  0100               	movlb	0	; () banked
 15923  00170E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15924  001710  A4D8               	btfss	status,2,c
 15925  001712  D006               	goto	l6296
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;doprnt.c: 741: cp = "(null)";
 15929  001714  0EB6               	movlw	low STR_126
 15930  001716  0100               	movlb	0	; () banked
 15931  001718  6F9F               	movwf	printf@cp& (0+255),b
 15932  00171A  0EFF               	movlw	high STR_126
 15933  00171C  0100               	movlb	0	; () banked
 15934  00171E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15935  001720                     l6296:
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;doprnt.c: 745: len = 0;
 15939  001720  0E00               	movlw	0
 15940  001722  0100               	movlb	0	; () banked
 15941  001724  6FA4               	movwf	(printf@len+1)& (0+255),b
 15942  001726  0E00               	movlw	0
 15943  001728  6FA3               	movwf	printf@len& (0+255),b
 15944                           
 15945                           ;doprnt.c: 746: while(cp[len])
 15946  00172A  D003               	goto	l6300
 15947  00172C                     l6298:
 15948                           
 15949                           ;doprnt.c: 747: len++;
 15950  00172C  0100               	movlb	0	; () banked
 15951  00172E  4BA3               	infsnz	printf@len& (0+255),f,b
 15952  001730  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15953  001732                     l6300:
 15954                           
 15955                           ; BSR set to: 0
 15956  001732  0100               	movlb	0	; () banked
 15957  001734  51A3               	movf	printf@len& (0+255),w,b
 15958  001736  0100               	movlb	0	; () banked
 15959  001738  259F               	addwf	printf@cp& (0+255),w,b
 15960  00173A  0100               	movlb	0	; () banked
 15961  00173C  6F9A               	movwf	??_printf& (0+255),b
 15962  00173E  0100               	movlb	0	; () banked
 15963  001740  51A4               	movf	(printf@len+1)& (0+255),w,b
 15964  001742  0100               	movlb	0	; () banked
 15965  001744  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15966  001746  0100               	movlb	0	; () banked
 15967  001748  6F9B               	movwf	(??_printf+1)& (0+255),b
 15968  00174A  C09A  FFF6         	movff	??_printf,tblptrl
 15969  00174E  C09B  FFF7         	movff	??_printf+1,tblptrh
 15970  001752  0E00               	movlw	low (__mediumconst shr (0+16))
 15971  001754  6EF8               	movwf	tblptru,c
 15972  001756  0E0F               	movlw	(high __ramtop+-1)
 15973  001758  64F7               	cpfsgt	tblptrh,c
 15974  00175A  D003               	bra	u4607
 15975  00175C  0008               	tblrd		*
 15976  00175E  50F5               	movf	tablat,w,c
 15977  001760  D005               	bra	u4600
 15978  001762                     u4607:
 15979  001762  CFF6 FFE9          	movff	tblptrl,fsr0l
 15980  001766  CFF7 FFEA          	movff	tblptrh,fsr0h
 15981  00176A  50EF               	movf	indf0,w,c
 15982  00176C                     u4600:
 15983  00176C  0900               	iorlw	0
 15984  00176E  A4D8               	btfss	status,2,c
 15985  001770  D7DD               	goto	l6298
 15986                           
 15987                           ;doprnt.c: 757: if(width > len)
 15988  001772  0100               	movlb	0	; () banked
 15989  001774  51A9               	movf	printf@width& (0+255),w,b
 15990  001776  0100               	movlb	0	; () banked
 15991  001778  5DA3               	subwf	printf@len& (0+255),w,b
 15992  00177A  0100               	movlb	0	; () banked
 15993  00177C  51AA               	movf	(printf@width+1)& (0+255),w,b
 15994  00177E  0100               	movlb	0	; () banked
 15995  001780  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15996  001782  B0D8               	btfsc	status,0,c
 15997  001784  D009               	goto	l6306
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;doprnt.c: 758: width -= len;
 16001  001786  0100               	movlb	0	; () banked
 16002  001788  51A3               	movf	printf@len& (0+255),w,b
 16003  00178A  0100               	movlb	0	; () banked
 16004  00178C  5FA9               	subwf	printf@width& (0+255),f,b
 16005  00178E  0100               	movlb	0	; () banked
 16006  001790  51A4               	movf	(printf@len+1)& (0+255),w,b
 16007  001792  0100               	movlb	0	; () banked
 16008  001794  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16009  001796  D009               	goto	l6310
 16010  001798                     l6306:
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;doprnt.c: 759: else
 16014                           ;doprnt.c: 760: width = 0;
 16015  001798  0E00               	movlw	0
 16016  00179A  0100               	movlb	0	; () banked
 16017  00179C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16018  00179E  0E00               	movlw	0
 16019  0017A0  6FA9               	movwf	printf@width& (0+255),b
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;doprnt.c: 764: while(width--)
 16023  0017A2  D003               	goto	l6310
 16024  0017A4                     l6308:
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;doprnt.c: 765: (putch(' ') );
 16028  0017A4  0E20               	movlw	32
 16029  0017A6  EC1C  F02A         	call	_putch
 16030  0017AA                     l6310:
 16031  0017AA  0100               	movlb	0	; () banked
 16032  0017AC  07A9               	decf	printf@width& (0+255),f,b
 16033  0017AE  A0D8               	btfss	status,0,c
 16034  0017B0  07AA               	decf	(printf@width+1)& (0+255),f,b
 16035  0017B2  0100               	movlb	0	; () banked
 16036  0017B4  29A9               	incf	printf@width& (0+255),w,b
 16037  0017B6  E1F6               	bnz	l6308
 16038  0017B8  0100               	movlb	0	; () banked
 16039  0017BA  29AA               	incf	(printf@width+1)& (0+255),w,b
 16040  0017BC  B4D8               	btfsc	status,2,c
 16041  0017BE  D017               	goto	l6316
 16042  0017C0  D7F1               	goto	l6308
 16043  0017C2                     l6312:
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;doprnt.c: 768: (putch(*cp++) );
 16047  0017C2  C09F  FFF6         	movff	printf@cp,tblptrl
 16048  0017C6  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16049  0017CA  0E00               	movlw	low (__mediumconst shr (0+16))
 16050  0017CC  6EF8               	movwf	tblptru,c
 16051  0017CE  0E0F               	movlw	(high __ramtop+-1)
 16052  0017D0  64F7               	cpfsgt	tblptrh,c
 16053  0017D2  D003               	bra	u4647
 16054  0017D4  0008               	tblrd		*
 16055  0017D6  50F5               	movf	tablat,w,c
 16056  0017D8  D005               	bra	u4640
 16057  0017DA                     u4647:
 16058  0017DA  CFF6 FFE9          	movff	tblptrl,fsr0l
 16059  0017DE  CFF7 FFEA          	movff	tblptrh,fsr0h
 16060  0017E2  50EF               	movf	indf0,w,c
 16061  0017E4                     u4640:
 16062  0017E4  EC1C  F02A         	call	_putch
 16063  0017E8  0100               	movlb	0	; () banked
 16064  0017EA  4B9F               	infsnz	printf@cp& (0+255),f,b
 16065  0017EC  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16066  0017EE                     l6316:
 16067                           
 16068                           ; BSR set to: 0
 16069  0017EE  0100               	movlb	0	; () banked
 16070  0017F0  07A3               	decf	printf@len& (0+255),f,b
 16071  0017F2  A0D8               	btfss	status,0,c
 16072  0017F4  07A4               	decf	(printf@len+1)& (0+255),f,b
 16073  0017F6  0100               	movlb	0	; () banked
 16074  0017F8  29A3               	incf	printf@len& (0+255),w,b
 16075  0017FA  E1E3               	bnz	l6312
 16076  0017FC  0100               	movlb	0	; () banked
 16077  0017FE  29A4               	incf	(printf@len+1)& (0+255),w,b
 16078  001800  B4D8               	btfsc	status,2,c
 16079  001802  D10A               	goto	l6394
 16080  001804  D7DE               	goto	l6312
 16081  001806                     l6318:
 16082                           
 16083                           ; BSR set to: 0
 16084                           ;doprnt.c: 818: flag |= 0x40;
 16085  001806  0100               	movlb	0	; () banked
 16086  001808  8DA7               	bsf	printf@flag& (0+255),6,b
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;doprnt.c: 822: }
 16090                           
 16091                           ;doprnt.c: 819: break;
 16092  00180A  D01D               	goto	l1396
 16093  00180C                     l6322:
 16094  00180C  C08E  FFF6         	movff	printf@f,tblptrl
 16095  001810  C08F  FFF7         	movff	printf@f+1,tblptrh
 16096  001814  0100               	movlb	0	; () banked
 16097  001816  4B8E               	infsnz	printf@f& (0+255),f,b
 16098  001818  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16099  00181A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16100  00181A  6AF8               	clrf	tblptru,c
 16101  00181C                     	endif
 16102  00181C                     	if	0	;tblptru may be non-zero
 16103  00181C                     	endif
 16104  00181C  0008               	tblrd		*
 16105  00181E  CFF5 F0A8          	movff	tablat,printf@c
 16106  001822  0100               	movlb	0	; () banked
 16107  001824  51A8               	movf	printf@c& (0+255),w,b
 16108                           
 16109                           ; Switch size 1, requested type "space"
 16110                           ; Number of cases is 5, Range of values is 0 to 117
 16111                           ; switch strategies available:
 16112                           ; Name         Instructions Cycles
 16113                           ; simple_byte           16     9 (average)
 16114                           ;	Chosen strategy is simple_byte
 16115  001826  0A00               	xorlw	0	; case 0
 16116  001828  B4D8               	btfsc	status,2,c
 16117  00182A  0012               	return	
 16118  00182C  0A64               	xorlw	100	; case 100
 16119  00182E  B4D8               	btfsc	status,2,c
 16120  001830  D00A               	goto	l1396
 16121  001832  0A0D               	xorlw	13	; case 105
 16122  001834  B4D8               	btfsc	status,2,c
 16123  001836  D007               	goto	l1396
 16124  001838  0A1A               	xorlw	26	; case 115
 16125  00183A  B4D8               	btfsc	status,2,c
 16126  00183C  D758               	goto	l6288
 16127  00183E  0A06               	xorlw	6	; case 117
 16128  001840  B4D8               	btfsc	status,2,c
 16129  001842  D7E1               	goto	l6318
 16130  001844  D0E9               	goto	l6394
 16131  001846                     l1396:
 16132                           
 16133                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16134  001846  0100               	movlb	0	; () banked
 16135  001848  BDA7               	btfsc	printf@flag& (0+255),6,b
 16136  00184A  D019               	goto	l6334
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;doprnt.c: 1253: {
 16140                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16141  00184C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16142  001850  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16143  001854  CFDE F0A5          	movff	postinc2,printf@val
 16144  001858  CFDD F0A6          	movff	postdec2,printf@val+1
 16145                           
 16146                           ; BSR set to: 0
 16147  00185C  0E02               	movlw	2
 16148  00185E  0100               	movlb	0	; () banked
 16149  001860  27A1               	addwf	printf@ap& (0+255),f,b
 16150  001862  0E00               	movlw	0
 16151  001864  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;doprnt.c: 1261: if((int)val < 0) {
 16155  001866  0100               	movlb	0	; () banked
 16156  001868  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16157  00186A  D016               	goto	l6338
 16158                           
 16159                           ; BSR set to: 0
 16160                           ;doprnt.c: 1262: flag |= 0x03;
 16161  00186C  0E03               	movlw	3
 16162  00186E  0100               	movlb	0	; () banked
 16163  001870  13A7               	iorwf	printf@flag& (0+255),f,b
 16164                           
 16165                           ; BSR set to: 0
 16166                           ;doprnt.c: 1263: val = -val;
 16167  001872  0100               	movlb	0	; () banked
 16168  001874  6DA5               	negf	printf@val& (0+255),b
 16169  001876  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16170  001878  B0D8               	btfsc	status,0,c
 16171  00187A  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;doprnt.c: 1264: }
 16175                           ;doprnt.c: 1266: }
 16176  00187C  D00D               	goto	l6338
 16177  00187E                     l6334:
 16178                           
 16179                           ; BSR set to: 0
 16180                           ;doprnt.c: 1268: else
 16181                           ;doprnt.c: 1273: {
 16182                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16183  00187E  C0A1  FFD9         	movff	printf@ap,fsr2l
 16184  001882  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16185  001886  CFDE F0A5          	movff	postinc2,printf@val
 16186  00188A  CFDD F0A6          	movff	postdec2,printf@val+1
 16187                           
 16188                           ; BSR set to: 0
 16189  00188E  0E02               	movlw	2
 16190  001890  0100               	movlb	0	; () banked
 16191  001892  27A1               	addwf	printf@ap& (0+255),f,b
 16192  001894  0E00               	movlw	0
 16193  001896  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16194  001898                     l6338:
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;doprnt.c: 1287: }
 16198                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16199  001898  0E01               	movlw	1
 16200  00189A  0100               	movlb	0	; () banked
 16201  00189C  6FA8               	movwf	printf@c& (0+255),b
 16202  00189E                     l6340:
 16203                           
 16204                           ; BSR set to: 0
 16205  00189E  0E05               	movlw	5
 16206  0018A0  0100               	movlb	0	; () banked
 16207  0018A2  19A8               	xorwf	printf@c& (0+255),w,b
 16208  0018A4  B4D8               	btfsc	status,2,c
 16209  0018A6  D019               	goto	l6352
 16210                           
 16211                           ; BSR set to: 0
 16212                           ;doprnt.c: 1306: if(val < dpowers[c])
 16213                           
 16214                           ; BSR set to: 0
 16215                           
 16216                           ; BSR set to: 0
 16217  0018A8  0100               	movlb	0	; () banked
 16218  0018AA  51A8               	movf	printf@c& (0+255),w,b
 16219  0018AC  0D02               	mullw	2
 16220  0018AE  0E00               	movlw	low _dpowers
 16221  0018B0  24F3               	addwf	prodl,w,c
 16222  0018B2  6EF6               	movwf	tblptrl,c
 16223  0018B4  0EFB               	movlw	high _dpowers
 16224  0018B6  20F4               	addwfc	prodh,w,c
 16225  0018B8  6EF7               	movwf	tblptrh,c
 16226  0018BA                     	if	1	;There are 3 active tblptr bytes
 16227  0018BA  6AF8               	clrf	tblptru,c
 16228  0018BC  0E00               	movlw	low (__mediumconst shr (0+16))
 16229  0018BE  22F8               	addwfc	tblptru,f,c
 16230  0018C0                     	endif
 16231  0018C0  0009               	tblrd		*+
 16232  0018C2  50F5               	movf	tablat,w,c
 16233  0018C4  0100               	movlb	0	; () banked
 16234  0018C6  5DA5               	subwf	printf@val& (0+255),w,b
 16235  0018C8  0009               	tblrd		*+
 16236  0018CA  50F5               	movf	tablat,w,c
 16237  0018CC  0100               	movlb	0	; () banked
 16238  0018CE  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16239  0018D0  A0D8               	btfss	status,0,c
 16240  0018D2  D003               	goto	l6352
 16241                           
 16242                           ; BSR set to: 0
 16243                           
 16244                           ; BSR set to: 0
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;doprnt.c: 1307: break;
 16248  0018D4  0100               	movlb	0	; () banked
 16249  0018D6  2BA8               	incf	printf@c& (0+255),f,b
 16250  0018D8  D7E2               	goto	l6340
 16251  0018DA                     l6352:
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16255  0018DA  0100               	movlb	0	; () banked
 16256  0018DC  51A9               	movf	printf@width& (0+255),w,b
 16257  0018DE  0100               	movlb	0	; () banked
 16258  0018E0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16259  0018E2  B4D8               	btfsc	status,2,c
 16260  0018E4  D00B               	goto	l6358
 16261                           
 16262                           ; BSR set to: 0
 16263  0018E6  C0A7  F09A         	movff	printf@flag,??_printf
 16264  0018EA  0E03               	movlw	3
 16265  0018EC  0100               	movlb	0	; () banked
 16266  0018EE  179A               	andwf	??_printf& (0+255),f,b
 16267  0018F0  B4D8               	btfsc	status,2,c
 16268  0018F2  D004               	goto	l6358
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;doprnt.c: 1346: width--;
 16272  0018F4  0100               	movlb	0	; () banked
 16273  0018F6  07A9               	decf	printf@width& (0+255),f,b
 16274  0018F8  A0D8               	btfss	status,0,c
 16275  0018FA  07AA               	decf	(printf@width+1)& (0+255),f,b
 16276  0018FC                     l6358:
 16277                           
 16278                           ; BSR set to: 0
 16279                           ;doprnt.c: 1381: if(width > c)
 16280  0018FC  0E80               	movlw	128
 16281  0018FE  0100               	movlb	0	; () banked
 16282  001900  BFA8               	btfsc	printf@c& (0+255),7,b
 16283  001902  0E7F               	movlw	127
 16284  001904  0100               	movlb	0	; () banked
 16285  001906  6F9A               	movwf	??_printf& (0+255),b
 16286  001908  0100               	movlb	0	; () banked
 16287  00190A  51A9               	movf	printf@width& (0+255),w,b
 16288  00190C  0100               	movlb	0	; () banked
 16289  00190E  5DA8               	subwf	printf@c& (0+255),w,b
 16290  001910  0100               	movlb	0	; () banked
 16291  001912  51AA               	movf	(printf@width+1)& (0+255),w,b
 16292  001914  0A80               	xorlw	128
 16293  001916  0100               	movlb	0	; () banked
 16294  001918  599A               	subwfb	??_printf& (0+255),w,b
 16295  00191A  B0D8               	btfsc	status,0,c
 16296  00191C  D00B               	goto	l6362
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;doprnt.c: 1382: width -= c;
 16300  00191E  0100               	movlb	0	; () banked
 16301  001920  51A8               	movf	printf@c& (0+255),w,b
 16302  001922  0100               	movlb	0	; () banked
 16303  001924  5FA9               	subwf	printf@width& (0+255),f,b
 16304  001926  0E00               	movlw	0
 16305  001928  0100               	movlb	0	; () banked
 16306  00192A  BFA8               	btfsc	printf@c& (0+255),7,b
 16307  00192C  0EFF               	movlw	255
 16308  00192E  0100               	movlb	0	; () banked
 16309  001930  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16310  001932  D005               	goto	l6364
 16311  001934                     l6362:
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;doprnt.c: 1383: else
 16315                           ;doprnt.c: 1384: width = 0;
 16316  001934  0E00               	movlw	0
 16317  001936  0100               	movlb	0	; () banked
 16318  001938  6FAA               	movwf	(printf@width+1)& (0+255),b
 16319  00193A  0E00               	movlw	0
 16320  00193C  6FA9               	movwf	printf@width& (0+255),b
 16321  00193E                     l6364:
 16322                           
 16323                           ; BSR set to: 0
 16324                           ;doprnt.c: 1387: if(flag & 0x04) {
 16325  00193E  0100               	movlb	0	; () banked
 16326  001940  A5A7               	btfss	printf@flag& (0+255),2,b
 16327  001942  D018               	goto	l6376
 16328                           
 16329                           ; BSR set to: 0
 16330                           ;doprnt.c: 1392: if(flag & 0x03)
 16331  001944  C0A7  F09A         	movff	printf@flag,??_printf
 16332  001948  0E03               	movlw	3
 16333  00194A  0100               	movlb	0	; () banked
 16334  00194C  179A               	andwf	??_printf& (0+255),f,b
 16335  00194E  B4D8               	btfsc	status,2,c
 16336  001950  D003               	goto	l6370
 16337                           
 16338                           ; BSR set to: 0
 16339                           ;doprnt.c: 1393: (putch('-') );
 16340  001952  0E2D               	movlw	45
 16341  001954  EC1C  F02A         	call	_putch
 16342  001958                     l6370:
 16343                           
 16344                           ;doprnt.c: 1415: if(width)
 16345  001958  0100               	movlb	0	; () banked
 16346  00195A  51A9               	movf	printf@width& (0+255),w,b
 16347  00195C  0100               	movlb	0	; () banked
 16348  00195E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16349  001960  B4D8               	btfsc	status,2,c
 16350  001962  D025               	goto	l6386
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;doprnt.c: 1417: (putch('0') );
 16354                           
 16355                           ; BSR set to: 0
 16356                           
 16357                           ;doprnt.c: 1416: do
 16358  001964  0E30               	movlw	48
 16359  001966  EC1C  F02A         	call	_putch
 16360                           
 16361                           ;doprnt.c: 1418: while(--width);
 16362  00196A  0100               	movlb	0	; () banked
 16363  00196C  07A9               	decf	printf@width& (0+255),f,b
 16364  00196E  A0D8               	btfss	status,0,c
 16365  001970  07AA               	decf	(printf@width+1)& (0+255),f,b
 16366  001972  D7F2               	goto	l6370
 16367  001974                     l6376:
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;doprnt.c: 1422: {
 16371                           ;doprnt.c: 1424: if(width
 16372                           ;doprnt.c: 1428: )
 16373  001974  0100               	movlb	0	; () banked
 16374  001976  51A9               	movf	printf@width& (0+255),w,b
 16375  001978  0100               	movlb	0	; () banked
 16376  00197A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16377  00197C  B4D8               	btfsc	status,2,c
 16378  00197E  D00D               	goto	l6382
 16379  001980                     l6378:
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;doprnt.c: 1430: (putch(' ') );
 16383  001980  0E20               	movlw	32
 16384  001982  EC1C  F02A         	call	_putch
 16385                           
 16386                           ;doprnt.c: 1431: while(--width);
 16387  001986  0100               	movlb	0	; () banked
 16388  001988  07A9               	decf	printf@width& (0+255),f,b
 16389  00198A  A0D8               	btfss	status,0,c
 16390  00198C  07AA               	decf	(printf@width+1)& (0+255),f,b
 16391  00198E  0100               	movlb	0	; () banked
 16392  001990  51A9               	movf	printf@width& (0+255),w,b
 16393  001992  0100               	movlb	0	; () banked
 16394  001994  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16395  001996  A4D8               	btfss	status,2,c
 16396  001998  D7F3               	goto	l6378
 16397  00199A                     l6382:
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;doprnt.c: 1438: if(flag & 0x03)
 16401  00199A  C0A7  F09A         	movff	printf@flag,??_printf
 16402  00199E  0E03               	movlw	3
 16403  0019A0  0100               	movlb	0	; () banked
 16404  0019A2  179A               	andwf	??_printf& (0+255),f,b
 16405  0019A4  B4D8               	btfsc	status,2,c
 16406  0019A6  D003               	goto	l6386
 16407                           
 16408                           ; BSR set to: 0
 16409                           ;doprnt.c: 1439: (putch('-') );
 16410  0019A8  0E2D               	movlw	45
 16411  0019AA  EC1C  F02A         	call	_putch
 16412  0019AE                     l6386:
 16413                           
 16414                           ;doprnt.c: 1469: }
 16415                           ;doprnt.c: 1472: prec = c;
 16416  0019AE  C0A8  F09E         	movff	printf@c,printf@prec
 16417                           
 16418                           ;doprnt.c: 1474: while(prec--) {
 16419  0019B2  D02C               	goto	l6392
 16420  0019B4                     l6388:
 16421                           
 16422                           ;doprnt.c: 1478: {
 16423                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16424  0019B4  0100               	movlb	0	; () banked
 16425  0019B6  519E               	movf	printf@prec& (0+255),w,b
 16426  0019B8  0D02               	mullw	2
 16427  0019BA  0E00               	movlw	low _dpowers
 16428  0019BC  24F3               	addwf	prodl,w,c
 16429  0019BE  6EF6               	movwf	tblptrl,c
 16430  0019C0  0EFB               	movlw	high _dpowers
 16431  0019C2  20F4               	addwfc	prodh,w,c
 16432  0019C4  6EF7               	movwf	tblptrh,c
 16433  0019C6                     	if	1	;There are 3 active tblptr bytes
 16434  0019C6  6AF8               	clrf	tblptru,c
 16435  0019C8  0E00               	movlw	low (__mediumconst shr (0+16))
 16436  0019CA  22F8               	addwfc	tblptru,f,c
 16437  0019CC                     	endif
 16438  0019CC  0009               	tblrd		*+
 16439  0019CE  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16440  0019D2  000A               	tblrd		*-
 16441  0019D4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16442  0019D8  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16443  0019DC  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16444  0019E0  EC3D  F024         	call	___lwdiv	;wreg free
 16445  0019E4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16446  0019E8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16447  0019EC  0E00               	movlw	0
 16448  0019EE  0100               	movlb	0	; () banked
 16449  0019F0  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16450  0019F2  0E0A               	movlw	10
 16451  0019F4  6F89               	movwf	___lwmod@divisor& (0+255),b
 16452  0019F6  EC53  F025         	call	___lwmod	;wreg free
 16453  0019FA  0100               	movlb	0	; () banked
 16454  0019FC  5187               	movf	?___lwmod& (0+255),w,b
 16455  0019FE  0F30               	addlw	48
 16456  001A00  0100               	movlb	0	; () banked
 16457  001A02  6FA8               	movwf	printf@c& (0+255),b
 16458                           
 16459                           ; BSR set to: 0
 16460                           ;doprnt.c: 1523: }
 16461                           ;doprnt.c: 1524: (putch(c) );
 16462  001A04  0100               	movlb	0	; () banked
 16463  001A06  51A8               	movf	printf@c& (0+255),w,b
 16464  001A08  EC1C  F02A         	call	_putch
 16465  001A0C                     l6392:
 16466  001A0C  0100               	movlb	0	; () banked
 16467  001A0E  079E               	decf	printf@prec& (0+255),f,b
 16468  001A10  0100               	movlb	0	; () banked
 16469  001A12  299E               	incf	printf@prec& (0+255),w,b
 16470  001A14  A4D8               	btfss	status,2,c
 16471  001A16  D7CE               	goto	l6388
 16472  001A18                     l6394:
 16473  001A18  C08E  FFF6         	movff	printf@f,tblptrl
 16474  001A1C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16475  001A20  0100               	movlb	0	; () banked
 16476  001A22  4B8E               	infsnz	printf@f& (0+255),f,b
 16477  001A24  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16478  001A26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16479  001A26  6AF8               	clrf	tblptru,c
 16480  001A28                     	endif
 16481  001A28                     	if	0	;tblptru may be non-zero
 16482  001A28                     	endif
 16483  001A28  0008               	tblrd		*
 16484  001A2A  CFF5 F0A8          	movff	tablat,printf@c
 16485  001A2E  0100               	movlb	0	; () banked
 16486  001A30  51A8               	movf	printf@c& (0+255),w,b
 16487  001A32  B4D8               	btfsc	status,2,c
 16488  001A34  0012               	return	
 16489  001A36  D5EB               	goto	l6264
 16490  001A38                     __end_of_printf:
 16491                           	opt stack 0
 16492                           tblptru	equ	0xFF8
 16493                           tblptrh	equ	0xFF7
 16494                           tblptrl	equ	0xFF6
 16495                           tablat	equ	0xFF5
 16496                           prodh	equ	0xFF4
 16497                           prodl	equ	0xFF3
 16498                           intcon	equ	0xFF2
 16499                           intcon2	equ	0xFF1
 16500                           intcon3	equ	0xFF0
 16501                           indf0	equ	0xFEF
 16502                           postinc0	equ	0xFEE
 16503                           fsr0h	equ	0xFEA
 16504                           fsr0l	equ	0xFE9
 16505                           wreg	equ	0xFE8
 16506                           postdec1	equ	0xFE5
 16507                           fsr1l	equ	0xFE1
 16508                           indf2	equ	0xFDF
 16509                           postinc2	equ	0xFDE
 16510                           postdec2	equ	0xFDD
 16511                           fsr2h	equ	0xFDA
 16512                           fsr2l	equ	0xFD9
 16513                           status	equ	0xFD8
 16514                           
 16515 ;; *************** function _putch *****************
 16516 ;; Defined at:
 16517 ;;		line 20 in file "lcd.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;  data            1    wreg     unsigned char 
 16520 ;; Auto vars:     Size  Location     Type
 16521 ;;  data            1    2[BANK0 ] unsigned char 
 16522 ;; Return value:  Size  Location     Type
 16523 ;;                  1    wreg      void 
 16524 ;; Registers used:
 16525 ;;		wreg, status,2, status,0, cstack
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16535 ;;Total ram usage:        1 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; Hardware stack levels required when called:    8
 16538 ;; This function calls:
 16539 ;;		_lcdNibble
 16540 ;; This function is called by:
 16541 ;;		_printf
 16542 ;; This function uses a non-reentrant model
 16543 ;;
 16544                           
 16545                           	psect	text52
 16546  005438                     __ptext52:
 16547                           	opt stack 0
 16548  005438                     _putch:
 16549                           	opt stack 18
 16550                           
 16551                           ;incstack = 0
 16552                           ;putch@data stored from wreg
 16553  005438  0100               	movlb	0	; () banked
 16554  00543A  6F82               	movwf	putch@data& (0+255),b
 16555                           
 16556                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16557  00543C  848C               	bsf	3980,2,c	;volatile
 16558                           
 16559                           ;lcd.c: 22: lcdNibble(data);
 16560  00543E  0100               	movlb	0	; () banked
 16561  005440  5182               	movf	putch@data& (0+255),w,b
 16562  005442  ECEB  F024         	call	_lcdNibble
 16563  005446  0012               	return		;funcret
 16564  005448                     __end_of_putch:
 16565                           	opt stack 0
 16566                           tblptru	equ	0xFF8
 16567                           tblptrh	equ	0xFF7
 16568                           tblptrl	equ	0xFF6
 16569                           tablat	equ	0xFF5
 16570                           prodh	equ	0xFF4
 16571                           prodl	equ	0xFF3
 16572                           intcon	equ	0xFF2
 16573                           intcon2	equ	0xFF1
 16574                           intcon3	equ	0xFF0
 16575                           indf0	equ	0xFEF
 16576                           postinc0	equ	0xFEE
 16577                           fsr0h	equ	0xFEA
 16578                           fsr0l	equ	0xFE9
 16579                           wreg	equ	0xFE8
 16580                           postdec1	equ	0xFE5
 16581                           fsr1l	equ	0xFE1
 16582                           indf2	equ	0xFDF
 16583                           postinc2	equ	0xFDE
 16584                           postdec2	equ	0xFDD
 16585                           fsr2h	equ	0xFDA
 16586                           fsr2l	equ	0xFD9
 16587                           status	equ	0xFD8
 16588                           
 16589 ;; *************** function _isdigit *****************
 16590 ;; Defined at:
 16591 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16592 ;; Parameters:    Size  Location     Type
 16593 ;;  c               1    wreg     unsigned char 
 16594 ;; Auto vars:     Size  Location     Type
 16595 ;;  c               1    2[BANK0 ] unsigned char 
 16596 ;; Return value:  Size  Location     Type
 16597 ;;		None               void
 16598 ;; Registers used:
 16599 ;;		wreg, status,2, status,0
 16600 ;; Tracked objects:
 16601 ;;		On entry : 0/0
 16602 ;;		On exit  : 0/0
 16603 ;;		Unchanged: 0/0
 16604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16606 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16608 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16609 ;;Total ram usage:        3 bytes
 16610 ;; Hardware stack levels used:    1
 16611 ;; Hardware stack levels required when called:    7
 16612 ;; This function calls:
 16613 ;;		Nothing
 16614 ;; This function is called by:
 16615 ;;		_printf
 16616 ;; This function uses a non-reentrant model
 16617 ;;
 16618                           
 16619                           	psect	text53
 16620  005262                     __ptext53:
 16621                           	opt stack 0
 16622  005262                     _isdigit:
 16623                           	opt stack 19
 16624                           
 16625                           ;incstack = 0
 16626                           ;isdigit@c stored from wreg
 16627  005262  0100               	movlb	0	; () banked
 16628  005264  6F82               	movwf	isdigit@c& (0+255),b
 16629  005266  0E00               	movlw	0
 16630  005268  0100               	movlb	0	; () banked
 16631  00526A  6F81               	movwf	_isdigit$2054& (0+255),b
 16632                           
 16633                           ; BSR set to: 0
 16634  00526C  0E3A               	movlw	58
 16635  00526E  0100               	movlb	0	; () banked
 16636  005270  6182               	cpfslt	isdigit@c& (0+255),b
 16637  005272  D007               	goto	l6112
 16638                           
 16639                           ; BSR set to: 0
 16640  005274  0E2F               	movlw	47
 16641  005276  0100               	movlb	0	; () banked
 16642  005278  6582               	cpfsgt	isdigit@c& (0+255),b
 16643  00527A  D003               	goto	l6112
 16644                           
 16645                           ; BSR set to: 0
 16646  00527C  0E01               	movlw	1
 16647  00527E  0100               	movlb	0	; () banked
 16648  005280  6F81               	movwf	_isdigit$2054& (0+255),b
 16649  005282                     l6112:
 16650                           
 16651                           ; BSR set to: 0
 16652  005282  C081  F080         	movff	_isdigit$2054,??_isdigit
 16653  005286  0100               	movlb	0	; () banked
 16654  005288  3180               	rrcf	??_isdigit& (0+255),w,b
 16655  00528A  0012               	return	
 16656  00528C                     __end_of_isdigit:
 16657                           	opt stack 0
 16658                           tblptru	equ	0xFF8
 16659                           tblptrh	equ	0xFF7
 16660                           tblptrl	equ	0xFF6
 16661                           tablat	equ	0xFF5
 16662                           prodh	equ	0xFF4
 16663                           prodl	equ	0xFF3
 16664                           intcon	equ	0xFF2
 16665                           intcon2	equ	0xFF1
 16666                           intcon3	equ	0xFF0
 16667                           indf0	equ	0xFEF
 16668                           postinc0	equ	0xFEE
 16669                           fsr0h	equ	0xFEA
 16670                           fsr0l	equ	0xFE9
 16671                           wreg	equ	0xFE8
 16672                           postdec1	equ	0xFE5
 16673                           fsr1l	equ	0xFE1
 16674                           indf2	equ	0xFDF
 16675                           postinc2	equ	0xFDE
 16676                           postdec2	equ	0xFDD
 16677                           fsr2h	equ	0xFDA
 16678                           fsr2l	equ	0xFD9
 16679                           status	equ	0xFD8
 16680                           
 16681 ;; *************** function ___wmul *****************
 16682 ;; Defined at:
 16683 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16686 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16687 ;; Auto vars:     Size  Location     Type
 16688 ;;  product         2    4[BANK0 ] unsigned int 
 16689 ;; Return value:  Size  Location     Type
 16690 ;;                  2    0[BANK0 ] unsigned int 
 16691 ;; Registers used:
 16692 ;;		wreg, status,2, status,0, prodl, prodh
 16693 ;; Tracked objects:
 16694 ;;		On entry : 0/0
 16695 ;;		On exit  : 0/0
 16696 ;;		Unchanged: 0/0
 16697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16701 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;Total ram usage:        6 bytes
 16703 ;; Hardware stack levels used:    1
 16704 ;; Hardware stack levels required when called:    7
 16705 ;; This function calls:
 16706 ;;		Nothing
 16707 ;; This function is called by:
 16708 ;;		_printf
 16709 ;; This function uses a non-reentrant model
 16710 ;;
 16711                           
 16712                           	psect	text54
 16713  004F36                     __ptext54:
 16714                           	opt stack 0
 16715  004F36                     ___wmul:
 16716                           	opt stack 19
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;incstack = 0
 16720  004F36  0100               	movlb	0	; () banked
 16721  004F38  5180               	movf	___wmul@multiplier& (0+255),w,b
 16722  004F3A  0100               	movlb	0	; () banked
 16723  004F3C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16724  004F3E  CFF3 F084          	movff	prodl,___wmul@product
 16725  004F42  CFF4 F085          	movff	prodh,___wmul@product+1
 16726  004F46  0100               	movlb	0	; () banked
 16727  004F48  5180               	movf	___wmul@multiplier& (0+255),w,b
 16728  004F4A  0100               	movlb	0	; () banked
 16729  004F4C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16730  004F4E  50F3               	movf	prodl,w,c
 16731  004F50  0100               	movlb	0	; () banked
 16732  004F52  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16733  004F54  0100               	movlb	0	; () banked
 16734  004F56  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16735  004F58  0100               	movlb	0	; () banked
 16736  004F5A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16737  004F5C  50F3               	movf	prodl,w,c
 16738  004F5E  0100               	movlb	0	; () banked
 16739  004F60  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16740                           
 16741                           ; BSR set to: 0
 16742  004F62  C084  F080         	movff	___wmul@product,?___wmul
 16743  004F66  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16744  004F6A  0012               	return	
 16745  004F6C                     __end_of___wmul:
 16746                           	opt stack 0
 16747                           tblptru	equ	0xFF8
 16748                           tblptrh	equ	0xFF7
 16749                           tblptrl	equ	0xFF6
 16750                           tablat	equ	0xFF5
 16751                           prodh	equ	0xFF4
 16752                           prodl	equ	0xFF3
 16753                           intcon	equ	0xFF2
 16754                           intcon2	equ	0xFF1
 16755                           intcon3	equ	0xFF0
 16756                           indf0	equ	0xFEF
 16757                           postinc0	equ	0xFEE
 16758                           fsr0h	equ	0xFEA
 16759                           fsr0l	equ	0xFE9
 16760                           wreg	equ	0xFE8
 16761                           postdec1	equ	0xFE5
 16762                           fsr1l	equ	0xFE1
 16763                           indf2	equ	0xFDF
 16764                           postinc2	equ	0xFDE
 16765                           postdec2	equ	0xFDD
 16766                           fsr2h	equ	0xFDA
 16767                           fsr2l	equ	0xFD9
 16768                           status	equ	0xFD8
 16769                           
 16770 ;; *************** function ___lwmod *****************
 16771 ;; Defined at:
 16772 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16773 ;; Parameters:    Size  Location     Type
 16774 ;;  dividend        2    7[BANK0 ] unsigned int 
 16775 ;;  divisor         2    9[BANK0 ] unsigned int 
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;  counter         1   11[BANK0 ] unsigned char 
 16778 ;; Return value:  Size  Location     Type
 16779 ;;                  2    7[BANK0 ] unsigned int 
 16780 ;; Registers used:
 16781 ;;		wreg, status,2, status,0
 16782 ;; Tracked objects:
 16783 ;;		On entry : 0/0
 16784 ;;		On exit  : 0/0
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16790 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16791 ;;Total ram usage:        5 bytes
 16792 ;; Hardware stack levels used:    1
 16793 ;; Hardware stack levels required when called:    7
 16794 ;; This function calls:
 16795 ;;		Nothing
 16796 ;; This function is called by:
 16797 ;;		_printf
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           	psect	text55
 16802  004AA6                     __ptext55:
 16803                           	opt stack 0
 16804  004AA6                     ___lwmod:
 16805                           	opt stack 19
 16806                           
 16807                           ; BSR set to: 0
 16808                           ;incstack = 0
 16809  004AA6  0100               	movlb	0	; () banked
 16810  004AA8  5189               	movf	___lwmod@divisor& (0+255),w,b
 16811  004AAA  0100               	movlb	0	; () banked
 16812  004AAC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16813  004AAE  B4D8               	btfsc	status,2,c
 16814  004AB0  D026               	goto	l1853
 16815                           
 16816                           ; BSR set to: 0
 16817  004AB2  0E01               	movlw	1
 16818  004AB4  0100               	movlb	0	; () banked
 16819  004AB6  6F8B               	movwf	___lwmod@counter& (0+255),b
 16820  004AB8  D006               	goto	l6150
 16821  004ABA                     l6148:
 16822                           
 16823                           ; BSR set to: 0
 16824  004ABA  0100               	movlb	0	; () banked
 16825  004ABC  90D8               	bcf	status,0,c
 16826  004ABE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16827  004AC0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16828  004AC2  0100               	movlb	0	; () banked
 16829  004AC4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16830  004AC6                     l6150:
 16831                           
 16832                           ; BSR set to: 0
 16833  004AC6  0100               	movlb	0	; () banked
 16834  004AC8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16835  004ACA  D7F7               	goto	l6148
 16836  004ACC                     l6152:
 16837                           
 16838                           ; BSR set to: 0
 16839  004ACC  0100               	movlb	0	; () banked
 16840  004ACE  5189               	movf	___lwmod@divisor& (0+255),w,b
 16841  004AD0  0100               	movlb	0	; () banked
 16842  004AD2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16843  004AD4  0100               	movlb	0	; () banked
 16844  004AD6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16845  004AD8  0100               	movlb	0	; () banked
 16846  004ADA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16847  004ADC  A0D8               	btfss	status,0,c
 16848  004ADE  D008               	goto	l6156
 16849                           
 16850                           ; BSR set to: 0
 16851  004AE0  0100               	movlb	0	; () banked
 16852  004AE2  5189               	movf	___lwmod@divisor& (0+255),w,b
 16853  004AE4  0100               	movlb	0	; () banked
 16854  004AE6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16855  004AE8  0100               	movlb	0	; () banked
 16856  004AEA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16857  004AEC  0100               	movlb	0	; () banked
 16858  004AEE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16859  004AF0                     l6156:
 16860                           
 16861                           ; BSR set to: 0
 16862  004AF0  0100               	movlb	0	; () banked
 16863  004AF2  90D8               	bcf	status,0,c
 16864  004AF4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16865  004AF6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16866                           
 16867                           ; BSR set to: 0
 16868  004AF8  0100               	movlb	0	; () banked
 16869  004AFA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16870  004AFC  D7E7               	goto	l6152
 16871  004AFE                     l1853:
 16872                           
 16873                           ; BSR set to: 0
 16874  004AFE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16875  004B02  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16876                           
 16877                           ; BSR set to: 0
 16878  004B06  0012               	return		;funcret
 16879  004B08                     __end_of___lwmod:
 16880                           	opt stack 0
 16881                           tblptru	equ	0xFF8
 16882                           tblptrh	equ	0xFF7
 16883                           tblptrl	equ	0xFF6
 16884                           tablat	equ	0xFF5
 16885                           prodh	equ	0xFF4
 16886                           prodl	equ	0xFF3
 16887                           intcon	equ	0xFF2
 16888                           intcon2	equ	0xFF1
 16889                           intcon3	equ	0xFF0
 16890                           indf0	equ	0xFEF
 16891                           postinc0	equ	0xFEE
 16892                           fsr0h	equ	0xFEA
 16893                           fsr0l	equ	0xFE9
 16894                           wreg	equ	0xFE8
 16895                           postdec1	equ	0xFE5
 16896                           fsr1l	equ	0xFE1
 16897                           indf2	equ	0xFDF
 16898                           postinc2	equ	0xFDE
 16899                           postdec2	equ	0xFDD
 16900                           fsr2h	equ	0xFDA
 16901                           fsr2l	equ	0xFD9
 16902                           status	equ	0xFD8
 16903                           
 16904 ;; *************** function ___lwdiv *****************
 16905 ;; Defined at:
 16906 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16907 ;; Parameters:    Size  Location     Type
 16908 ;;  dividend        2    0[BANK0 ] unsigned int 
 16909 ;;  divisor         2    2[BANK0 ] unsigned int 
 16910 ;; Auto vars:     Size  Location     Type
 16911 ;;  quotient        2    4[BANK0 ] unsigned int 
 16912 ;;  counter         1    6[BANK0 ] unsigned char 
 16913 ;; Return value:  Size  Location     Type
 16914 ;;                  2    0[BANK0 ] unsigned int 
 16915 ;; Registers used:
 16916 ;;		wreg, status,2, status,0
 16917 ;; Tracked objects:
 16918 ;;		On entry : 0/0
 16919 ;;		On exit  : 0/0
 16920 ;;		Unchanged: 0/0
 16921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16922 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16925 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16926 ;;Total ram usage:        7 bytes
 16927 ;; Hardware stack levels used:    1
 16928 ;; Hardware stack levels required when called:    7
 16929 ;; This function calls:
 16930 ;;		Nothing
 16931 ;; This function is called by:
 16932 ;;		_printf
 16933 ;; This function uses a non-reentrant model
 16934 ;;
 16935                           
 16936                           	psect	text56
 16937  00487A                     __ptext56:
 16938                           	opt stack 0
 16939  00487A                     ___lwdiv:
 16940                           	opt stack 19
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;incstack = 0
 16944  00487A  0E00               	movlw	0
 16945  00487C  0100               	movlb	0	; () banked
 16946  00487E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16947  004880  0E00               	movlw	0
 16948  004882  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16949                           
 16950                           ; BSR set to: 0
 16951  004884  0100               	movlb	0	; () banked
 16952  004886  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16953  004888  0100               	movlb	0	; () banked
 16954  00488A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16955  00488C  B4D8               	btfsc	status,2,c
 16956  00488E  D02C               	goto	l1843
 16957                           
 16958                           ; BSR set to: 0
 16959  004890  0E01               	movlw	1
 16960  004892  0100               	movlb	0	; () banked
 16961  004894  6F86               	movwf	___lwdiv@counter& (0+255),b
 16962  004896  D006               	goto	l6130
 16963  004898                     l6128:
 16964                           
 16965                           ; BSR set to: 0
 16966  004898  0100               	movlb	0	; () banked
 16967  00489A  90D8               	bcf	status,0,c
 16968  00489C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16969  00489E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16970  0048A0  0100               	movlb	0	; () banked
 16971  0048A2  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16972  0048A4                     l6130:
 16973                           
 16974                           ; BSR set to: 0
 16975  0048A4  0100               	movlb	0	; () banked
 16976  0048A6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16977  0048A8  D7F7               	goto	l6128
 16978  0048AA                     l6132:
 16979                           
 16980                           ; BSR set to: 0
 16981  0048AA  0100               	movlb	0	; () banked
 16982  0048AC  90D8               	bcf	status,0,c
 16983  0048AE  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16984  0048B0  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16985                           
 16986                           ; BSR set to: 0
 16987  0048B2  0100               	movlb	0	; () banked
 16988  0048B4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16989  0048B6  0100               	movlb	0	; () banked
 16990  0048B8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16991  0048BA  0100               	movlb	0	; () banked
 16992  0048BC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16993  0048BE  0100               	movlb	0	; () banked
 16994  0048C0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16995  0048C2  A0D8               	btfss	status,0,c
 16996  0048C4  D00A               	goto	l6140
 16997                           
 16998                           ; BSR set to: 0
 16999  0048C6  0100               	movlb	0	; () banked
 17000  0048C8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17001  0048CA  0100               	movlb	0	; () banked
 17002  0048CC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17003  0048CE  0100               	movlb	0	; () banked
 17004  0048D0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17005  0048D2  0100               	movlb	0	; () banked
 17006  0048D4  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17007                           
 17008                           ; BSR set to: 0
 17009  0048D6  0100               	movlb	0	; () banked
 17010  0048D8  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17011  0048DA                     l6140:
 17012                           
 17013                           ; BSR set to: 0
 17014  0048DA  0100               	movlb	0	; () banked
 17015  0048DC  90D8               	bcf	status,0,c
 17016  0048DE  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17017  0048E0  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17018                           
 17019                           ; BSR set to: 0
 17020  0048E2  0100               	movlb	0	; () banked
 17021  0048E4  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17022  0048E6  D7E1               	goto	l6132
 17023  0048E8                     l1843:
 17024                           
 17025                           ; BSR set to: 0
 17026  0048E8  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17027  0048EC  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17028                           
 17029                           ; BSR set to: 0
 17030  0048F0  0012               	return		;funcret
 17031  0048F2                     __end_of___lwdiv:
 17032                           	opt stack 0
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           intcon2	equ	0xFF1
 17041                           intcon3	equ	0xFF0
 17042                           indf0	equ	0xFEF
 17043                           postinc0	equ	0xFEE
 17044                           fsr0h	equ	0xFEA
 17045                           fsr0l	equ	0xFE9
 17046                           wreg	equ	0xFE8
 17047                           postdec1	equ	0xFE5
 17048                           fsr1l	equ	0xFE1
 17049                           indf2	equ	0xFDF
 17050                           postinc2	equ	0xFDE
 17051                           postdec2	equ	0xFDD
 17052                           fsr2h	equ	0xFDA
 17053                           fsr2l	equ	0xFD9
 17054                           status	equ	0xFD8
 17055                           
 17056 ;; *************** function _lcdInst *****************
 17057 ;; Defined at:
 17058 ;;		line 15 in file "lcd.c"
 17059 ;; Parameters:    Size  Location     Type
 17060 ;;  data            1    wreg     unsigned char 
 17061 ;; Auto vars:     Size  Location     Type
 17062 ;;  data            1    2[BANK0 ] unsigned char 
 17063 ;; Return value:  Size  Location     Type
 17064 ;;                  1    wreg      void 
 17065 ;; Registers used:
 17066 ;;		wreg, status,2, status,0, cstack
 17067 ;; Tracked objects:
 17068 ;;		On entry : 0/0
 17069 ;;		On exit  : 0/0
 17070 ;;		Unchanged: 0/0
 17071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;Total ram usage:        1 bytes
 17077 ;; Hardware stack levels used:    1
 17078 ;; Hardware stack levels required when called:    8
 17079 ;; This function calls:
 17080 ;;		_lcdNibble
 17081 ;; This function is called by:
 17082 ;;		_UI
 17083 ;;		_change_state_to_menu_start
 17084 ;;		_change_state_to_menu_12
 17085 ;;		_change_state_to_menu_22
 17086 ;;		_initLCD
 17087 ;;		_printRTC
 17088 ;;		_Loading
 17089 ;;		_EEPROM_write
 17090 ;;		_Test
 17091 ;;		_algorithmTest
 17092 ;;		_sensorTest
 17093 ;;		_actuatorTest
 17094 ;;		_BothServos
 17095 ;;		_PortTestA5
 17096 ;;		_PusherTest
 17097 ;;		_SpeedTest
 17098 ;;		_BlockerTest
 17099 ;;		_ToggleTestA5
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           	psect	text57
 17104  005448                     __ptext57:
 17105                           	opt stack 0
 17106  005448                     _lcdInst:
 17107                           	opt stack 20
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;incstack = 0
 17111                           ;lcdInst@data stored from wreg
 17112  005448  0100               	movlb	0	; () banked
 17113  00544A  6F82               	movwf	lcdInst@data& (0+255),b
 17114                           
 17115                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17116  00544C  948C               	bcf	3980,2,c	;volatile
 17117                           
 17118                           ;lcd.c: 17: lcdNibble(data);
 17119  00544E  0100               	movlb	0	; () banked
 17120  005450  5182               	movf	lcdInst@data& (0+255),w,b
 17121  005452  ECEB  F024         	call	_lcdNibble
 17122  005456  0012               	return		;funcret
 17123  005458                     __end_of_lcdInst:
 17124                           	opt stack 0
 17125                           tblptru	equ	0xFF8
 17126                           tblptrh	equ	0xFF7
 17127                           tblptrl	equ	0xFF6
 17128                           tablat	equ	0xFF5
 17129                           prodh	equ	0xFF4
 17130                           prodl	equ	0xFF3
 17131                           intcon	equ	0xFF2
 17132                           intcon2	equ	0xFF1
 17133                           intcon3	equ	0xFF0
 17134                           indf0	equ	0xFEF
 17135                           postinc0	equ	0xFEE
 17136                           fsr0h	equ	0xFEA
 17137                           fsr0l	equ	0xFE9
 17138                           wreg	equ	0xFE8
 17139                           postdec1	equ	0xFE5
 17140                           fsr1l	equ	0xFE1
 17141                           indf2	equ	0xFDF
 17142                           postinc2	equ	0xFDE
 17143                           postdec2	equ	0xFDD
 17144                           fsr2h	equ	0xFDA
 17145                           fsr2l	equ	0xFD9
 17146                           status	equ	0xFD8
 17147                           
 17148 ;; *************** function _lcdNibble *****************
 17149 ;; Defined at:
 17150 ;;		line 25 in file "lcd.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  data            1    wreg     unsigned char 
 17153 ;; Auto vars:     Size  Location     Type
 17154 ;;  data            1    1[BANK0 ] unsigned char 
 17155 ;;  temp            1    0[BANK0 ] unsigned char 
 17156 ;; Return value:  Size  Location     Type
 17157 ;;                  1    wreg      void 
 17158 ;; Registers used:
 17159 ;;		wreg, status,2, status,0
 17160 ;; Tracked objects:
 17161 ;;		On entry : 0/0
 17162 ;;		On exit  : 0/0
 17163 ;;		Unchanged: 0/0
 17164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17169 ;;Total ram usage:        2 bytes
 17170 ;; Hardware stack levels used:    1
 17171 ;; Hardware stack levels required when called:    7
 17172 ;; This function calls:
 17173 ;;		Nothing
 17174 ;; This function is called by:
 17175 ;;		_lcdInst
 17176 ;;		_putch
 17177 ;; This function uses a non-reentrant model
 17178 ;;
 17179                           
 17180                           	psect	text58
 17181  0049D6                     __ptext58:
 17182                           	opt stack 0
 17183  0049D6                     _lcdNibble:
 17184                           	opt stack 20
 17185                           
 17186                           ;incstack = 0
 17187                           ;lcdNibble@data stored from wreg
 17188  0049D6  0100               	movlb	0	; () banked
 17189  0049D8  6F81               	movwf	lcdNibble@data& (0+255),b
 17190                           
 17191                           ;lcd.c: 27: char temp = data & 0xF0;
 17192  0049DA  0100               	movlb	0	; () banked
 17193  0049DC  5181               	movf	lcdNibble@data& (0+255),w,b
 17194  0049DE  0BF0               	andlw	240
 17195  0049E0  0100               	movlb	0	; () banked
 17196  0049E2  6F80               	movwf	lcdNibble@temp& (0+255),b
 17197                           
 17198                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17199  0049E4  508C               	movf	3980,w,c	;volatile
 17200  0049E6  0B0F               	andlw	15
 17201  0049E8  6E8C               	movwf	3980,c	;volatile
 17202                           
 17203                           ;lcd.c: 29: LATD = temp | LATD;
 17204  0049EA  0100               	movlb	0	; () banked
 17205  0049EC  5180               	movf	lcdNibble@temp& (0+255),w,b
 17206  0049EE  108C               	iorwf	3980,w,c	;volatile
 17207  0049F0  6E8C               	movwf	3980,c	;volatile
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17211  0049F2  868C               	bsf	3980,3,c	;volatile
 17212                           
 17213                           ; BSR set to: 0
 17214                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17215  0049F4  0E42               	movlw	66
 17216  0049F6                     u10077:
 17217  0049F6  2EE8               	decfsz	wreg,f,c
 17218  0049F8  D7FE               	bra	u10077
 17219  0049FA  D000               	nop2	
 17220                           
 17221                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17222  0049FC  968C               	bcf	3980,3,c	;volatile
 17223                           
 17224                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17225  0049FE  0E42               	movlw	66
 17226  004A00                     u10087:
 17227  004A00  2EE8               	decfsz	wreg,f,c
 17228  004A02  D7FE               	bra	u10087
 17229  004A04  D000               	nop2	
 17230                           
 17231                           ;lcd.c: 36: data = data << 4;
 17232  004A06  0100               	movlb	0	; () banked
 17233  004A08  3981               	swapf	lcdNibble@data& (0+255),w,b
 17234  004A0A  0BF0               	andlw	240
 17235  004A0C  0100               	movlb	0	; () banked
 17236  004A0E  6F81               	movwf	lcdNibble@data& (0+255),b
 17237                           
 17238                           ;lcd.c: 38: temp = data & 0xF0;
 17239  004A10  0100               	movlb	0	; () banked
 17240  004A12  5181               	movf	lcdNibble@data& (0+255),w,b
 17241  004A14  0BF0               	andlw	240
 17242  004A16  0100               	movlb	0	; () banked
 17243  004A18  6F80               	movwf	lcdNibble@temp& (0+255),b
 17244                           
 17245                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17246  004A1A  508C               	movf	3980,w,c	;volatile
 17247  004A1C  0B0F               	andlw	15
 17248  004A1E  6E8C               	movwf	3980,c	;volatile
 17249                           
 17250                           ;lcd.c: 40: LATD = temp | LATD;
 17251  004A20  0100               	movlb	0	; () banked
 17252  004A22  5180               	movf	lcdNibble@temp& (0+255),w,b
 17253  004A24  108C               	iorwf	3980,w,c	;volatile
 17254  004A26  6E8C               	movwf	3980,c	;volatile
 17255                           
 17256                           ; BSR set to: 0
 17257                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17258  004A28  868C               	bsf	3980,3,c	;volatile
 17259                           
 17260                           ; BSR set to: 0
 17261                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17262  004A2A  0E42               	movlw	66
 17263  004A2C                     u10097:
 17264  004A2C  2EE8               	decfsz	wreg,f,c
 17265  004A2E  D7FE               	bra	u10097
 17266  004A30  D000               	nop2	
 17267                           
 17268                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17269  004A32  968C               	bcf	3980,3,c	;volatile
 17270                           
 17271                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17272  004A34  0E42               	movlw	66
 17273  004A36                     u10107:
 17274  004A36  2EE8               	decfsz	wreg,f,c
 17275  004A38  D7FE               	bra	u10107
 17276  004A3A  D000               	nop2	
 17277  004A3C  0012               	return		;funcret
 17278  004A3E                     __end_of_lcdNibble:
 17279                           	opt stack 0
 17280                           tblptru	equ	0xFF8
 17281                           tblptrh	equ	0xFF7
 17282                           tblptrl	equ	0xFF6
 17283                           tablat	equ	0xFF5
 17284                           prodh	equ	0xFF4
 17285                           prodl	equ	0xFF3
 17286                           intcon	equ	0xFF2
 17287                           intcon2	equ	0xFF1
 17288                           intcon3	equ	0xFF0
 17289                           indf0	equ	0xFEF
 17290                           postinc0	equ	0xFEE
 17291                           fsr0h	equ	0xFEA
 17292                           fsr0l	equ	0xFE9
 17293                           wreg	equ	0xFE8
 17294                           postdec1	equ	0xFE5
 17295                           fsr1l	equ	0xFE1
 17296                           indf2	equ	0xFDF
 17297                           postinc2	equ	0xFDE
 17298                           postdec2	equ	0xFDD
 17299                           fsr2h	equ	0xFDA
 17300                           fsr2l	equ	0xFD9
 17301                           status	equ	0xFD8
 17302                           
 17303 ;; *************** function _handler *****************
 17304 ;; Defined at:
 17305 ;;		line 16 in file "interruptHandler.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;		None
 17308 ;; Auto vars:     Size  Location     Type
 17309 ;;		None
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      void 
 17312 ;; Registers used:
 17313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17314 ;; Tracked objects:
 17315 ;;		On entry : 0/0
 17316 ;;		On exit  : 0/0
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17322 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17323 ;;Total ram usage:       16 bytes
 17324 ;; Hardware stack levels used:    1
 17325 ;; Hardware stack levels required when called:    6
 17326 ;; This function calls:
 17327 ;;		_printSortTimer
 17328 ;;		_updateMenu
 17329 ;;		_updateServoStates
 17330 ;;		i2___awdiv
 17331 ;; This function is called by:
 17332 ;;		Interrupt level 2
 17333 ;; This function uses a non-reentrant model
 17334 ;;
 17335                           
 17336                           	psect	intcode
 17337  000008                     __pintcode:
 17338                           	opt stack 0
 17339  000008                     _handler:
 17340                           	opt stack 18
 17341                           
 17342                           ;incstack = 0
 17343  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17344  00000A  ED88  F01B         	call	int_func,f	;refresh shadow registers
 17345                           tblptru	equ	0xFF8
 17346                           tblptrh	equ	0xFF7
 17347                           tblptrl	equ	0xFF6
 17348                           tablat	equ	0xFF5
 17349                           prodh	equ	0xFF4
 17350                           prodl	equ	0xFF3
 17351                           intcon	equ	0xFF2
 17352                           intcon2	equ	0xFF1
 17353                           intcon3	equ	0xFF0
 17354                           indf0	equ	0xFEF
 17355                           postinc0	equ	0xFEE
 17356                           fsr0h	equ	0xFEA
 17357                           fsr0l	equ	0xFE9
 17358                           wreg	equ	0xFE8
 17359                           postdec1	equ	0xFE5
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           fsr2h	equ	0xFDA
 17365                           fsr2l	equ	0xFD9
 17366                           status	equ	0xFD8
 17367                           
 17368                           	psect	intcode_body
 17369  003710                     __pintcode_body:
 17370                           	opt stack 18
 17371  003710                     int_func:
 17372                           	opt stack 18
 17373  003710  0006               	pop		; remove dummy address from shadow register refresh
 17374  003712  CFFA F04D          	movff	pclath,??_handler+2
 17375  003716  CFFB F04E          	movff	pclatu,??_handler+3
 17376  00371A  CFE9 F04F          	movff	fsr0l,??_handler+4
 17377  00371E  CFEA F050          	movff	fsr0h,??_handler+5
 17378  003722  CFE1 F051          	movff	fsr1l,??_handler+6
 17379  003726  CFE2 F052          	movff	fsr1h,??_handler+7
 17380  00372A  CFD9 F053          	movff	fsr2l,??_handler+8
 17381  00372E  CFDA F054          	movff	fsr2h,??_handler+9
 17382  003732  CFF3 F055          	movff	prodl,??_handler+10
 17383  003736  CFF4 F056          	movff	prodh,??_handler+11
 17384  00373A  CFF6 F057          	movff	tblptrl,??_handler+12
 17385  00373E  CFF7 F058          	movff	tblptrh,??_handler+13
 17386  003742  CFF8 F059          	movff	tblptru,??_handler+14
 17387  003746  CFF5 F05A          	movff	tablat,??_handler+15
 17388                           
 17389                           ;interruptHandler.c: 18: if(INT1IF){
 17390  00374A  A0F0               	btfss	intcon3,0,c	;volatile
 17391  00374C  D02B               	goto	i2l9450
 17392                           
 17393                           ;interruptHandler.c: 19: INT1IF = 0;
 17394  00374E  90F0               	bcf	intcon3,0,c	;volatile
 17395                           
 17396                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17397  003750  0100               	movlb	0	; () banked
 17398  003752  51FC               	movf	_machine_state& (0+255),w,b
 17399  003754  A4D8               	btfss	status,2,c
 17400  003756  D01B               	goto	i2l9444
 17401                           
 17402                           ; BSR set to: 0
 17403                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17404  003758  3881               	swapf	3969,w,c	;volatile
 17405  00375A  0B0F               	andlw	15
 17406  00375C  0B0F               	andlw	15
 17407  00375E  6E4B               	movwf	??_handler& (0+255),c
 17408  003760  6A4C               	clrf	(??_handler+1)& (0+255),c
 17409  003762  0EEF               	movlw	low _keys
 17410  003764  244B               	addwf	??_handler,w,c
 17411  003766  6EF6               	movwf	tblptrl,c
 17412  003768  0EFA               	movlw	high _keys
 17413  00376A  204C               	addwfc	??_handler+1,w,c
 17414  00376C  6EF7               	movwf	tblptrh,c
 17415  00376E                     	if	1	;There are 3 active tblptr bytes
 17416  00376E  6AF8               	clrf	tblptru,c
 17417  003770  0E00               	movlw	low (__mediumconst shr (0+16))
 17418  003772  22F8               	addwfc	tblptru,f,c
 17419  003774                     	endif
 17420  003774  0008               	tblrd		*
 17421  003776  CFF5 F07D          	movff	tablat,_input	;volatile
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;interruptHandler.c: 23: if(input == '*'){
 17425  00377A  0E2A               	movlw	42
 17426  00377C  187D               	xorwf	_input,w,c	;volatile
 17427  00377E  A4D8               	btfss	status,2,c
 17428  003780  D004               	goto	i2l9442
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17432  003782  0E03               	movlw	3
 17433  003784  0100               	movlb	0	; () banked
 17434  003786  6FFC               	movwf	_machine_state& (0+255),b
 17435                           
 17436                           ;interruptHandler.c: 25: }
 17437  003788  D002               	goto	i2l9444
 17438  00378A                     i2l9442:
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;interruptHandler.c: 26: else{
 17442                           ;interruptHandler.c: 27: updateMenu();
 17443  00378A  EC79  F013         	call	_updateMenu	;wreg free
 17444  00378E                     i2l9444:
 17445                           
 17446                           ;interruptHandler.c: 28: }
 17447                           ;interruptHandler.c: 29: }
 17448                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17449  00378E  0100               	movlb	0	; () banked
 17450  003790  05FC               	decf	_machine_state& (0+255),w,b
 17451  003792  A4D8               	btfss	status,2,c
 17452  003794  D007               	goto	i2l9450
 17453                           
 17454                           ; BSR set to: 0
 17455                           ;interruptHandler.c: 31: if(input == '*'){
 17456  003796  0E2A               	movlw	42
 17457  003798  187D               	xorwf	_input,w,c	;volatile
 17458  00379A  A4D8               	btfss	status,2,c
 17459  00379C  D003               	goto	i2l9450
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17463  00379E  0E02               	movlw	2
 17464  0037A0  0100               	movlb	0	; () banked
 17465  0037A2  6FFC               	movwf	_machine_state& (0+255),b
 17466  0037A4                     i2l9450:
 17467                           
 17468                           ;interruptHandler.c: 33: }
 17469                           ;interruptHandler.c: 34: }
 17470                           ;interruptHandler.c: 35: }
 17471                           ;interruptHandler.c: 38: if(TMR0IF){
 17472  0037A4  A4F2               	btfss	intcon,2,c	;volatile
 17473  0037A6  D00C               	goto	i2l9464
 17474                           
 17475                           ;interruptHandler.c: 39: TMR0IF = 0;
 17476  0037A8  94F2               	bcf	intcon,2,c	;volatile
 17477                           
 17478                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17479  0037AA  0100               	movlb	0	; () banked
 17480  0037AC  05FC               	decf	_machine_state& (0+255),w,b
 17481  0037AE  A4D8               	btfss	status,2,c
 17482  0037B0  D007               	goto	i2l9464
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;interruptHandler.c: 41: printSortTimer();
 17486  0037B2  ECD9  F014         	call	_printSortTimer	;wreg free
 17487                           
 17488                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17489  0037B6  0E85               	movlw	133
 17490  0037B8  6ED7               	movwf	4055,c	;volatile
 17491                           
 17492                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17493  0037BA  0EEE               	movlw	238
 17494  0037BC  6ED6               	movwf	4054,c	;volatile
 17495                           
 17496                           ;interruptHandler.c: 45: TMR0ON = 1;
 17497  0037BE  8ED5               	bsf	4053,7,c	;volatile
 17498  0037C0                     i2l9464:
 17499                           
 17500                           ;interruptHandler.c: 46: }
 17501                           ;interruptHandler.c: 47: }
 17502                           ;interruptHandler.c: 50: if(TMR1IF){
 17503  0037C0  A09E               	btfss	3998,0,c	;volatile
 17504  0037C2  D047               	goto	i2l9492
 17505                           
 17506                           ;interruptHandler.c: 51: TMR1IF = 0;
 17507  0037C4  909E               	bcf	3998,0,c	;volatile
 17508                           
 17509                           ;interruptHandler.c: 52: TMR1ON = 0;
 17510  0037C6  90CD               	bcf	4045,0,c	;volatile
 17511                           
 17512                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17513  0037C8  0100               	movlb	0	; () banked
 17514  0037CA  05FC               	decf	_machine_state& (0+255),w,b
 17515  0037CC  A4D8               	btfss	status,2,c
 17516  0037CE  D041               	goto	i2l9492
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;interruptHandler.c: 54: if(was_low_1){
 17520  0037D0  5079               	movf	_was_low_1,w,c	;volatile
 17521  0037D2  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17522  0037D4  B4D8               	btfsc	status,2,c
 17523  0037D6  D00A               	goto	i2l947
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17527  0037D8  828B               	bsf	3979,1,c	;volatile
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;interruptHandler.c: 56: was_low_1 = 0;
 17531  0037DA  0E00               	movlw	0
 17532  0037DC  6E7A               	movwf	_was_low_1+1,c	;volatile
 17533  0037DE  0E00               	movlw	0
 17534  0037E0  6E79               	movwf	_was_low_1,c	;volatile
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17538  0037E2  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17542  0037E6  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17543                           
 17544                           ;interruptHandler.c: 59: }
 17545  0037EA  D00F               	goto	i2l9486
 17546  0037EC                     i2l947:
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;interruptHandler.c: 60: else{
 17550                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17551  0037EC  928B               	bcf	3979,1,c	;volatile
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;interruptHandler.c: 62: was_low_1 = 1;
 17555  0037EE  0E00               	movlw	0
 17556  0037F0  6E7A               	movwf	_was_low_1+1,c	;volatile
 17557  0037F2  0E01               	movlw	1
 17558  0037F4  6E79               	movwf	_was_low_1,c	;volatile
 17559                           
 17560                           ; BSR set to: 0
 17561                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17562  0037F6  0100               	movlb	0	; () banked
 17563  0037F8  51DA               	movf	_servoTimes& (0+255),w,b
 17564  0037FA  0800               	sublw	0
 17565  0037FC  0F20               	addlw	32
 17566  0037FE  6ECF               	movwf	4047,c	;volatile
 17567                           
 17568                           ; BSR set to: 0
 17569                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17570  003800  0100               	movlb	0	; () banked
 17571  003802  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17572  003804  0800               	sublw	0
 17573  003806  0F20               	addlw	32
 17574  003808  6ECE               	movwf	4046,c	;volatile
 17575  00380A                     i2l9486:
 17576                           
 17577                           ; BSR set to: 0
 17578                           ;interruptHandler.c: 65: }
 17579                           ;interruptHandler.c: 66: TMR1ON = 1;
 17580  00380A  80CD               	bsf	4045,0,c	;volatile
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;interruptHandler.c: 67: servo_timer_counter += (int)(servoTimes[0] << 4 | servoTimes[1]
      +                          )/1000;
 17584  00380C  C0DA  F04B         	movff	_servoTimes,??_handler
 17585  003810  C0DB  F04C         	movff	_servoTimes+1,??_handler+1
 17586  003814  3A4B               	swapf	??_handler,f,c
 17587  003816  3A4C               	swapf	??_handler+1,f,c
 17588  003818  0EF0               	movlw	240
 17589  00381A  164C               	andwf	??_handler+1,f,c
 17590  00381C  504B               	movf	??_handler,w,c
 17591  00381E  0B0F               	andlw	15
 17592  003820  124C               	iorwf	??_handler+1,f,c
 17593  003822  0EF0               	movlw	240
 17594  003824  164B               	andwf	??_handler,f,c
 17595  003826  0100               	movlb	0	; () banked
 17596  003828  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17597  00382A  104B               	iorwf	??_handler,w,c
 17598  00382C  6E01               	movwf	i2___awdiv@dividend,c
 17599  00382E  0100               	movlb	0	; () banked
 17600  003830  51DD               	movf	(_servoTimes+3)& (0+255),w,b
 17601  003832  104C               	iorwf	??_handler+1,w,c
 17602  003834  6E02               	movwf	i2___awdiv@dividend+1,c
 17603  003836  0E03               	movlw	3
 17604  003838  6E04               	movwf	i2___awdiv@divisor+1,c
 17605  00383A  0EE8               	movlw	232
 17606  00383C  6E03               	movwf	i2___awdiv@divisor,c
 17607  00383E  EC7B  F023         	call	i2___awdiv	;wreg free
 17608  003842  5001               	movf	?i2___awdiv,w,c
 17609  003844  0101               	movlb	1	; () banked
 17610  003846  2739               	addwf	_servo_timer_counter& (0+255),f,b	;volatile
 17611  003848  5002               	movf	?i2___awdiv+1,w,c
 17612  00384A  0101               	movlb	1	; () banked
 17613  00384C  233A               	addwfc	(_servo_timer_counter+1)& (0+255),f,b	;volatile
 17614                           
 17615                           ; BSR set to: 1
 17616                           ;interruptHandler.c: 68: updateServoStates();
 17617  00384E  EC6D  F01C         	call	_updateServoStates	;wreg free
 17618  003852                     i2l9492:
 17619                           
 17620                           ;interruptHandler.c: 69: }
 17621                           ;interruptHandler.c: 70: }
 17622                           ;interruptHandler.c: 72: if(TMR3IF){
 17623  003852  A2A1               	btfss	4001,1,c	;volatile
 17624  003854  D024               	goto	i2l953
 17625                           
 17626                           ;interruptHandler.c: 73: TMR3IF = 0;
 17627  003856  92A1               	bcf	4001,1,c	;volatile
 17628                           
 17629                           ;interruptHandler.c: 74: TMR3ON = 0;
 17630  003858  90B1               	bcf	4017,0,c	;volatile
 17631                           
 17632                           ;interruptHandler.c: 75: if(machine_state == Sorting_state){
 17633  00385A  0100               	movlb	0	; () banked
 17634  00385C  05FC               	decf	_machine_state& (0+255),w,b
 17635  00385E  A4D8               	btfss	status,2,c
 17636  003860  D01E               	goto	i2l953
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;interruptHandler.c: 76: if(was_low_3){
 17640  003862  507B               	movf	_was_low_3,w,c	;volatile
 17641  003864  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17642  003866  B4D8               	btfsc	status,2,c
 17643  003868  D00A               	goto	i2l951
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;interruptHandler.c: 77: LATCbits.LATC2 = 1;
 17647  00386A  848B               	bsf	3979,2,c	;volatile
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;interruptHandler.c: 78: was_low_3 = 0;
 17651  00386C  0E00               	movlw	0
 17652  00386E  6E7C               	movwf	_was_low_3+1,c	;volatile
 17653  003870  0E00               	movlw	0
 17654  003872  6E7B               	movwf	_was_low_3,c	;volatile
 17655                           
 17656                           ; BSR set to: 0
 17657                           ;interruptHandler.c: 79: TMR3H = servoTimes[2];
 17658  003874  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;interruptHandler.c: 80: TMR3L = servoTimes[3];
 17662  003878  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17663                           
 17664                           ;interruptHandler.c: 81: }
 17665  00387C  D00F               	goto	i2l9514
 17666  00387E                     i2l951:
 17667                           
 17668                           ; BSR set to: 0
 17669                           ;interruptHandler.c: 82: else{
 17670                           ;interruptHandler.c: 83: LATCbits.LATC2 = 0;
 17671  00387E  948B               	bcf	3979,2,c	;volatile
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;interruptHandler.c: 84: was_low_3 = 1;
 17675  003880  0E00               	movlw	0
 17676  003882  6E7C               	movwf	_was_low_3+1,c	;volatile
 17677  003884  0E01               	movlw	1
 17678  003886  6E7B               	movwf	_was_low_3,c	;volatile
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;interruptHandler.c: 85: TMR3H = 20000 - servoTimes[2];
 17682  003888  0100               	movlb	0	; () banked
 17683  00388A  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17684  00388C  0800               	sublw	0
 17685  00388E  0F20               	addlw	32
 17686  003890  6EB3               	movwf	4019,c	;volatile
 17687                           
 17688                           ; BSR set to: 0
 17689                           ;interruptHandler.c: 86: TMR3L = 20000 - servoTimes[3];
 17690  003892  0100               	movlb	0	; () banked
 17691  003894  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17692  003896  0800               	sublw	0
 17693  003898  0F20               	addlw	32
 17694  00389A  6EB2               	movwf	4018,c	;volatile
 17695  00389C                     i2l9514:
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;interruptHandler.c: 87: }
 17699                           ;interruptHandler.c: 88: TMR3ON = 1;
 17700  00389C  80B1               	bsf	4017,0,c	;volatile
 17701  00389E                     i2l953:
 17702  00389E  C05A  FFF5         	movff	??_handler+15,tablat
 17703  0038A2  C059  FFF8         	movff	??_handler+14,tblptru
 17704  0038A6  C058  FFF7         	movff	??_handler+13,tblptrh
 17705  0038AA  C057  FFF6         	movff	??_handler+12,tblptrl
 17706  0038AE  C056  FFF4         	movff	??_handler+11,prodh
 17707  0038B2  C055  FFF3         	movff	??_handler+10,prodl
 17708  0038B6  C054  FFDA         	movff	??_handler+9,fsr2h
 17709  0038BA  C053  FFD9         	movff	??_handler+8,fsr2l
 17710  0038BE  C052  FFE2         	movff	??_handler+7,fsr1h
 17711  0038C2  C051  FFE1         	movff	??_handler+6,fsr1l
 17712  0038C6  C050  FFEA         	movff	??_handler+5,fsr0h
 17713  0038CA  C04F  FFE9         	movff	??_handler+4,fsr0l
 17714  0038CE  C04E  FFFB         	movff	??_handler+3,pclatu
 17715  0038D2  C04D  FFFA         	movff	??_handler+2,pclath
 17716  0038D6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17717  0038D8  0011               	retfie		f
 17718  0038DA                     __end_of_handler:
 17719                           	opt stack 0
 17720                           pclatu	equ	0xFFB
 17721                           pclath	equ	0xFFA
 17722                           tblptru	equ	0xFF8
 17723                           tblptrh	equ	0xFF7
 17724                           tblptrl	equ	0xFF6
 17725                           tablat	equ	0xFF5
 17726                           prodh	equ	0xFF4
 17727                           prodl	equ	0xFF3
 17728                           intcon	equ	0xFF2
 17729                           intcon2	equ	0xFF1
 17730                           intcon3	equ	0xFF0
 17731                           indf0	equ	0xFEF
 17732                           postinc0	equ	0xFEE
 17733                           fsr0h	equ	0xFEA
 17734                           fsr0l	equ	0xFE9
 17735                           wreg	equ	0xFE8
 17736                           postdec1	equ	0xFE5
 17737                           fsr1h	equ	0xFE2
 17738                           fsr1l	equ	0xFE1
 17739                           indf2	equ	0xFDF
 17740                           postinc2	equ	0xFDE
 17741                           postdec2	equ	0xFDD
 17742                           fsr2h	equ	0xFDA
 17743                           fsr2l	equ	0xFD9
 17744                           status	equ	0xFD8
 17745                           
 17746 ;; *************** function i2___awdiv *****************
 17747 ;; Defined at:
 17748 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 17749 ;; Parameters:    Size  Location     Type
 17750 ;;  dividend        2    0[COMRAM] int 
 17751 ;;  divisor         2    2[COMRAM] int 
 17752 ;; Auto vars:     Size  Location     Type
 17753 ;;  __awdiv         2    6[COMRAM] int 
 17754 ;;  __awdiv         1    5[COMRAM] unsigned char 
 17755 ;;  __awdiv         1    4[COMRAM] unsigned char 
 17756 ;; Return value:  Size  Location     Type
 17757 ;;                  2    0[COMRAM] int 
 17758 ;; Registers used:
 17759 ;;		wreg, status,2, status,0
 17760 ;; Tracked objects:
 17761 ;;		On entry : 0/0
 17762 ;;		On exit  : 0/0
 17763 ;;		Unchanged: 0/0
 17764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17766 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;Total ram usage:        8 bytes
 17770 ;; Hardware stack levels used:    1
 17771 ;; This function calls:
 17772 ;;		Nothing
 17773 ;; This function is called by:
 17774 ;;		_handler
 17775 ;; This function uses a non-reentrant model
 17776 ;;
 17777                           
 17778                           	psect	text60
 17779  0046F6                     __ptext60:
 17780                           	opt stack 0
 17781  0046F6                     i2___awdiv:
 17782                           	opt stack 23
 17783                           
 17784                           ;incstack = 0
 17785  0046F6  0E00               	movlw	0
 17786  0046F8  6E06               	movwf	i2___awdiv@sign,c
 17787  0046FA  AE04               	btfss	i2___awdiv@divisor+1,7,c
 17788  0046FC  D006               	goto	i2l9356
 17789  0046FE  6C03               	negf	i2___awdiv@divisor,c
 17790  004700  1E04               	comf	i2___awdiv@divisor+1,f,c
 17791  004702  B0D8               	btfsc	status,0,c
 17792  004704  2A04               	incf	i2___awdiv@divisor+1,f,c
 17793  004706  0E01               	movlw	1
 17794  004708  6E06               	movwf	i2___awdiv@sign,c
 17795  00470A                     i2l9356:
 17796  00470A  AE02               	btfss	i2___awdiv@dividend+1,7,c
 17797  00470C  D006               	goto	i2l9362
 17798  00470E  6C01               	negf	i2___awdiv@dividend,c
 17799  004710  1E02               	comf	i2___awdiv@dividend+1,f,c
 17800  004712  B0D8               	btfsc	status,0,c
 17801  004714  2A02               	incf	i2___awdiv@dividend+1,f,c
 17802  004716  0E01               	movlw	1
 17803  004718  1A06               	xorwf	i2___awdiv@sign,f,c
 17804  00471A                     i2l9362:
 17805  00471A  0E00               	movlw	0
 17806  00471C  6E08               	movwf	i2___awdiv@quotient+1,c
 17807  00471E  0E00               	movlw	0
 17808  004720  6E07               	movwf	i2___awdiv@quotient,c
 17809  004722  5003               	movf	i2___awdiv@divisor,w,c
 17810  004724  1004               	iorwf	i2___awdiv@divisor+1,w,c
 17811  004726  B4D8               	btfsc	status,2,c
 17812  004728  D01C               	goto	i2l9384
 17813  00472A  0E01               	movlw	1
 17814  00472C  6E05               	movwf	i2___awdiv@counter,c
 17815  00472E  D004               	goto	i2l9370
 17816  004730                     i2l9368:
 17817  004730  90D8               	bcf	status,0,c
 17818  004732  3603               	rlcf	i2___awdiv@divisor,f,c
 17819  004734  3604               	rlcf	i2___awdiv@divisor+1,f,c
 17820  004736  2A05               	incf	i2___awdiv@counter,f,c
 17821  004738                     i2l9370:
 17822  004738  AE04               	btfss	i2___awdiv@divisor+1,7,c
 17823  00473A  D7FA               	goto	i2l9368
 17824  00473C                     i2l9372:
 17825  00473C  90D8               	bcf	status,0,c
 17826  00473E  3607               	rlcf	i2___awdiv@quotient,f,c
 17827  004740  3608               	rlcf	i2___awdiv@quotient+1,f,c
 17828  004742  5003               	movf	i2___awdiv@divisor,w,c
 17829  004744  5C01               	subwf	i2___awdiv@dividend,w,c
 17830  004746  5004               	movf	i2___awdiv@divisor+1,w,c
 17831  004748  5802               	subwfb	i2___awdiv@dividend+1,w,c
 17832  00474A  A0D8               	btfss	status,0,c
 17833  00474C  D005               	goto	i2l9380
 17834  00474E  5003               	movf	i2___awdiv@divisor,w,c
 17835  004750  5E01               	subwf	i2___awdiv@dividend,f,c
 17836  004752  5004               	movf	i2___awdiv@divisor+1,w,c
 17837  004754  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 17838  004756  8007               	bsf	i2___awdiv@quotient,0,c
 17839  004758                     i2l9380:
 17840  004758  90D8               	bcf	status,0,c
 17841  00475A  3204               	rrcf	i2___awdiv@divisor+1,f,c
 17842  00475C  3203               	rrcf	i2___awdiv@divisor,f,c
 17843  00475E  2E05               	decfsz	i2___awdiv@counter,f,c
 17844  004760  D7ED               	goto	i2l9372
 17845  004762                     i2l9384:
 17846  004762  5006               	movf	i2___awdiv@sign,w,c
 17847  004764  B4D8               	btfsc	status,2,c
 17848  004766  D004               	goto	i2l9388
 17849  004768  6C07               	negf	i2___awdiv@quotient,c
 17850  00476A  1E08               	comf	i2___awdiv@quotient+1,f,c
 17851  00476C  B0D8               	btfsc	status,0,c
 17852  00476E  2A08               	incf	i2___awdiv@quotient+1,f,c
 17853  004770                     i2l9388:
 17854  004770  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 17855  004774  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17856  004778  0012               	return	
 17857  00477A                     __end_ofi2___awdiv:
 17858                           	opt stack 0
 17859                           pclatu	equ	0xFFB
 17860                           pclath	equ	0xFFA
 17861                           tblptru	equ	0xFF8
 17862                           tblptrh	equ	0xFF7
 17863                           tblptrl	equ	0xFF6
 17864                           tablat	equ	0xFF5
 17865                           prodh	equ	0xFF4
 17866                           prodl	equ	0xFF3
 17867                           intcon	equ	0xFF2
 17868                           intcon2	equ	0xFF1
 17869                           intcon3	equ	0xFF0
 17870                           indf0	equ	0xFEF
 17871                           postinc0	equ	0xFEE
 17872                           fsr0h	equ	0xFEA
 17873                           fsr0l	equ	0xFE9
 17874                           wreg	equ	0xFE8
 17875                           postdec1	equ	0xFE5
 17876                           fsr1h	equ	0xFE2
 17877                           fsr1l	equ	0xFE1
 17878                           indf2	equ	0xFDF
 17879                           postinc2	equ	0xFDE
 17880                           postdec2	equ	0xFDD
 17881                           fsr2h	equ	0xFDA
 17882                           fsr2l	equ	0xFD9
 17883                           status	equ	0xFD8
 17884                           
 17885 ;; *************** function _updateServoStates *****************
 17886 ;; Defined at:
 17887 ;;		line 529 in file "sort.c"
 17888 ;; Parameters:    Size  Location     Type
 17889 ;;		None
 17890 ;; Auto vars:     Size  Location     Type
 17891 ;;		None
 17892 ;; Return value:  Size  Location     Type
 17893 ;;                  1    wreg      void 
 17894 ;; Registers used:
 17895 ;;		wreg, status,2, status,0, cstack
 17896 ;; Tracked objects:
 17897 ;;		On entry : 0/0
 17898 ;;		On exit  : 0/0
 17899 ;;		Unchanged: 0/0
 17900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17905 ;;Total ram usage:        2 bytes
 17906 ;; Hardware stack levels used:    1
 17907 ;; Hardware stack levels required when called:    1
 17908 ;; This function calls:
 17909 ;;		i2_updateServoPosition
 17910 ;; This function is called by:
 17911 ;;		_handler
 17912 ;; This function uses a non-reentrant model
 17913 ;;
 17914                           
 17915                           	psect	text61
 17916  0038DA                     __ptext61:
 17917                           	opt stack 0
 17918  0038DA                     _updateServoStates:
 17919                           	opt stack 22
 17920                           
 17921                           ;sort.c: 537: switch(servo_state){
 17922                           
 17923                           ;incstack = 0
 17924  0038DA  D0A2               	goto	i2l9322
 17925  0038DC                     i2l9292:
 17926                           
 17927                           ;sort.c: 539: updateServoPosition(1260, 3);
 17928  0038DC  0E04               	movlw	4
 17929  0038DE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17930  0038E0  0EEC               	movlw	236
 17931  0038E2  6E01               	movwf	i2updateServoPosition@time_us,c
 17932  0038E4  0E00               	movlw	0
 17933  0038E6  6E04               	movwf	i2updateServoPosition@timer+1,c
 17934  0038E8  0E03               	movlw	3
 17935  0038EA  6E03               	movwf	i2updateServoPosition@timer,c
 17936  0038EC  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 17937                           
 17938                           ;sort.c: 540: updateServoPosition(1050, 3);
 17939  0038F0  0E04               	movlw	4
 17940  0038F2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17941  0038F4  0E1A               	movlw	26
 17942  0038F6  6E01               	movwf	i2updateServoPosition@time_us,c
 17943  0038F8  0E00               	movlw	0
 17944  0038FA  6E04               	movwf	i2updateServoPosition@timer+1,c
 17945  0038FC  0E03               	movlw	3
 17946  0038FE  6E03               	movwf	i2updateServoPosition@timer,c
 17947  003900  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 17948                           
 17949                           ;sort.c: 541: servo_timer_counter = 0;
 17950  003904  0E00               	movlw	0
 17951  003906  0101               	movlb	1	; () banked
 17952  003908  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 17953  00390A  0E00               	movlw	0
 17954  00390C  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 17955                           
 17956                           ;sort.c: 542: break;
 17957  00390E  0012               	return	
 17958  003910                     i2l9296:
 17959                           
 17960                           ;sort.c: 544: updateServoPosition(1260, 3);
 17961  003910  0E04               	movlw	4
 17962  003912  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17963  003914  0EEC               	movlw	236
 17964  003916  6E01               	movwf	i2updateServoPosition@time_us,c
 17965  003918  0E00               	movlw	0
 17966  00391A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17967  00391C  0E03               	movlw	3
 17968  00391E  6E03               	movwf	i2updateServoPosition@timer,c
 17969  003920  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 17970                           
 17971                           ;sort.c: 545: updateServoPosition(1050, 3);
 17972  003924  0E04               	movlw	4
 17973  003926  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17974  003928  0E1A               	movlw	26
 17975  00392A  6E01               	movwf	i2updateServoPosition@time_us,c
 17976  00392C  0E00               	movlw	0
 17977  00392E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17978  003930  0E03               	movlw	3
 17979  003932  6E03               	movwf	i2updateServoPosition@timer,c
 17980  003934  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 17981                           
 17982                           ;sort.c: 546: servo_timer_counter = 0;
 17983  003938  0E00               	movlw	0
 17984  00393A  0101               	movlb	1	; () banked
 17985  00393C  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 17986  00393E  0E00               	movlw	0
 17987  003940  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 17988                           
 17989                           ;sort.c: 547: break;
 17990  003942  0012               	return	
 17991  003944                     i2l9300:
 17992                           
 17993                           ;sort.c: 549: updateServoPosition(1390, 3);
 17994  003944  0E05               	movlw	5
 17995  003946  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17996  003948  0E6E               	movlw	110
 17997  00394A  6E01               	movwf	i2updateServoPosition@time_us,c
 17998  00394C  0E00               	movlw	0
 17999  00394E  6E04               	movwf	i2updateServoPosition@timer+1,c
 18000  003950  0E03               	movlw	3
 18001  003952  6E03               	movwf	i2updateServoPosition@timer,c
 18002  003954  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18003                           
 18004                           ;sort.c: 550: updateServoPosition(1050, 3);
 18005  003958  0E04               	movlw	4
 18006  00395A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18007  00395C  0E1A               	movlw	26
 18008  00395E  6E01               	movwf	i2updateServoPosition@time_us,c
 18009  003960  0E00               	movlw	0
 18010  003962  6E04               	movwf	i2updateServoPosition@timer+1,c
 18011  003964  0E03               	movlw	3
 18012  003966  6E03               	movwf	i2updateServoPosition@timer,c
 18013  003968  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18014                           
 18015                           ;sort.c: 551: servo_timer_counter = 0;
 18016  00396C  0E00               	movlw	0
 18017  00396E  0101               	movlb	1	; () banked
 18018  003970  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 18019  003972  0E00               	movlw	0
 18020  003974  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 18021                           
 18022                           ;sort.c: 552: break;
 18023  003976  0012               	return	
 18024  003978                     i2l9304:
 18025                           
 18026                           ;sort.c: 554: updateServoPosition(1390, 3);
 18027  003978  0E05               	movlw	5
 18028  00397A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18029  00397C  0E6E               	movlw	110
 18030  00397E  6E01               	movwf	i2updateServoPosition@time_us,c
 18031  003980  0E00               	movlw	0
 18032  003982  6E04               	movwf	i2updateServoPosition@timer+1,c
 18033  003984  0E03               	movlw	3
 18034  003986  6E03               	movwf	i2updateServoPosition@timer,c
 18035  003988  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18036                           
 18037                           ;sort.c: 555: updateServoPosition(1050, 3);
 18038  00398C  0E04               	movlw	4
 18039  00398E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18040  003990  0E1A               	movlw	26
 18041  003992  6E01               	movwf	i2updateServoPosition@time_us,c
 18042  003994  0E00               	movlw	0
 18043  003996  6E04               	movwf	i2updateServoPosition@timer+1,c
 18044  003998  0E03               	movlw	3
 18045  00399A  6E03               	movwf	i2updateServoPosition@timer,c
 18046  00399C  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18047                           
 18048                           ;sort.c: 556: servo_timer_counter = 0;
 18049  0039A0  0E00               	movlw	0
 18050  0039A2  0101               	movlb	1	; () banked
 18051  0039A4  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 18052  0039A6  0E00               	movlw	0
 18053  0039A8  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 18054                           
 18055                           ;sort.c: 557: break;
 18056  0039AA  0012               	return	
 18057  0039AC                     i2l9308:
 18058                           
 18059                           ;sort.c: 560: updateServoPosition(1050, 3);
 18060  0039AC  0E04               	movlw	4
 18061  0039AE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18062  0039B0  0E1A               	movlw	26
 18063  0039B2  6E01               	movwf	i2updateServoPosition@time_us,c
 18064  0039B4  0E00               	movlw	0
 18065  0039B6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18066  0039B8  0E03               	movlw	3
 18067  0039BA  6E03               	movwf	i2updateServoPosition@timer,c
 18068  0039BC  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18069                           
 18070                           ;sort.c: 561: servo_timer_counter = 0;
 18071  0039C0  0E00               	movlw	0
 18072  0039C2  0101               	movlb	1	; () banked
 18073  0039C4  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 18074  0039C6  0E00               	movlw	0
 18075  0039C8  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 18076                           
 18077                           ;sort.c: 562: break;
 18078  0039CA  0012               	return	
 18079  0039CC                     i2l9312:
 18080                           
 18081                           ;sort.c: 564: updateServoPosition(1050, 3);
 18082  0039CC  0E04               	movlw	4
 18083  0039CE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18084  0039D0  0E1A               	movlw	26
 18085  0039D2  6E01               	movwf	i2updateServoPosition@time_us,c
 18086  0039D4  0E00               	movlw	0
 18087  0039D6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18088  0039D8  0E03               	movlw	3
 18089  0039DA  6E03               	movwf	i2updateServoPosition@timer,c
 18090  0039DC  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18091                           
 18092                           ;sort.c: 565: servo_timer_counter = 0;
 18093  0039E0  0E00               	movlw	0
 18094  0039E2  0101               	movlb	1	; () banked
 18095  0039E4  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 18096  0039E6  0E00               	movlw	0
 18097  0039E8  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 18098                           
 18099                           ;sort.c: 566: break;
 18100  0039EA  0012               	return	
 18101  0039EC                     i2l9316:
 18102                           
 18103                           ;sort.c: 569: updateServoPosition(1200, 1);
 18104  0039EC  0E04               	movlw	4
 18105  0039EE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18106  0039F0  0EB0               	movlw	176
 18107  0039F2  6E01               	movwf	i2updateServoPosition@time_us,c
 18108  0039F4  0E00               	movlw	0
 18109  0039F6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18110  0039F8  0E01               	movlw	1
 18111  0039FA  6E03               	movwf	i2updateServoPosition@timer,c
 18112  0039FC  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18113                           
 18114                           ;sort.c: 570: updateServoPosition(1050, 3);
 18115  003A00  0E04               	movlw	4
 18116  003A02  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18117  003A04  0E1A               	movlw	26
 18118  003A06  6E01               	movwf	i2updateServoPosition@time_us,c
 18119  003A08  0E00               	movlw	0
 18120  003A0A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18121  003A0C  0E03               	movlw	3
 18122  003A0E  6E03               	movwf	i2updateServoPosition@timer,c
 18123  003A10  EC1F  F025         	call	i2_updateServoPosition	;wreg free
 18124                           
 18125                           ;sort.c: 571: servo_timer_counter = 0;
 18126  003A14  0E00               	movlw	0
 18127  003A16  0101               	movlb	1	; () banked
 18128  003A18  6F3A               	movwf	(_servo_timer_counter+1)& (0+255),b	;volatile
 18129  003A1A  0E00               	movlw	0
 18130  003A1C  6F39               	movwf	_servo_timer_counter& (0+255),b	;volatile
 18131                           
 18132                           ; BSR set to: 1
 18133                           ;sort.c: 576: }
 18134                           
 18135                           ; BSR set to: 1
 18136                           ;sort.c: 575: break;
 18137                           
 18138                           ;sort.c: 574: default:
 18139                           
 18140                           ;sort.c: 572: break;
 18141  003A1E  0012               	return	
 18142  003A20                     i2l9322:
 18143  003A20  C073  F009         	movff	_servo_state,??_updateServoStates	;volatile
 18144  003A24  C074  F00A         	movff	_servo_state+1,??_updateServoStates+1	;volatile
 18145                           
 18146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 18147                           ; Switch size 1, requested type "space"
 18148                           ; Number of cases is 6, Range of values is 1 to 9
 18149                           ; switch strategies available:
 18150                           ; Name         Instructions Cycles
 18151                           ; simple_byte           19    10 (average)
 18152                           ;	Chosen strategy is simple_byte
 18153  003A28  500A               	movf	??_updateServoStates+1,w,c
 18154  003A2A  0A01               	xorlw	1	; case 1
 18155  003A2C  B4D8               	btfsc	status,2,c
 18156  003A2E  D010               	goto	i2l9996
 18157  003A30  0A02               	xorlw	2	; case 3
 18158  003A32  B4D8               	btfsc	status,2,c
 18159  003A34  D012               	goto	i2l9998
 18160  003A36  0A07               	xorlw	7	; case 4
 18161  003A38  B4D8               	btfsc	status,2,c
 18162  003A3A  D014               	goto	i2l10000
 18163  003A3C  0A01               	xorlw	1	; case 5
 18164  003A3E  B4D8               	btfsc	status,2,c
 18165  003A40  D019               	goto	i2l10002
 18166  003A42  0A03               	xorlw	3	; case 6
 18167  003A44  B4D8               	btfsc	status,2,c
 18168  003A46  D01B               	goto	i2l10004
 18169  003A48  0A0F               	xorlw	15	; case 9
 18170  003A4A  A4D8               	btfss	status,2,c
 18171  003A4C  0012               	return	
 18172  003A4E  D01C               	goto	i2l10006
 18173  003A50                     i2l9996:
 18174                           
 18175                           ; Switch size 1, requested type "space"
 18176                           ; Number of cases is 1, Range of values is 244 to 244
 18177                           ; switch strategies available:
 18178                           ; Name         Instructions Cycles
 18179                           ; simple_byte            4     3 (average)
 18180                           ;	Chosen strategy is simple_byte
 18181  003A50  5009               	movf	??_updateServoStates,w,c
 18182  003A52  0AF4               	xorlw	244	; case 244
 18183  003A54  A4D8               	btfss	status,2,c
 18184  003A56  0012               	return	
 18185  003A58  D741               	goto	i2l9292
 18186  003A5A                     i2l9998:
 18187                           
 18188                           ; Switch size 1, requested type "space"
 18189                           ; Number of cases is 1, Range of values is 82 to 82
 18190                           ; switch strategies available:
 18191                           ; Name         Instructions Cycles
 18192                           ; simple_byte            4     3 (average)
 18193                           ;	Chosen strategy is simple_byte
 18194  003A5A  5009               	movf	??_updateServoStates,w,c
 18195  003A5C  0A52               	xorlw	82	; case 82
 18196  003A5E  A4D8               	btfss	status,2,c
 18197  003A60  0012               	return	
 18198  003A62  D756               	goto	i2l9296
 18199  003A64                     i2l10000:
 18200                           
 18201                           ; Switch size 1, requested type "space"
 18202                           ; Number of cases is 2, Range of values is 26 to 236
 18203                           ; switch strategies available:
 18204                           ; Name         Instructions Cycles
 18205                           ; simple_byte            7     4 (average)
 18206                           ;	Chosen strategy is simple_byte
 18207  003A64  5009               	movf	??_updateServoStates,w,c
 18208  003A66  0A1A               	xorlw	26	; case 26
 18209  003A68  B4D8               	btfsc	status,2,c
 18210  003A6A  D7C0               	goto	i2l9316
 18211  003A6C  0AF6               	xorlw	246	; case 236
 18212  003A6E  A4D8               	btfss	status,2,c
 18213  003A70  0012               	return	
 18214  003A72  D79C               	goto	i2l9308
 18215  003A74                     i2l10002:
 18216                           
 18217                           ; Switch size 1, requested type "space"
 18218                           ; Number of cases is 1, Range of values is 110 to 110
 18219                           ; switch strategies available:
 18220                           ; Name         Instructions Cycles
 18221                           ; simple_byte            4     3 (average)
 18222                           ;	Chosen strategy is simple_byte
 18223  003A74  5009               	movf	??_updateServoStates,w,c
 18224  003A76  0A6E               	xorlw	110	; case 110
 18225  003A78  A4D8               	btfss	status,2,c
 18226  003A7A  0012               	return	
 18227  003A7C  D7A7               	goto	i2l9312
 18228  003A7E                     i2l10004:
 18229                           
 18230                           ; Switch size 1, requested type "space"
 18231                           ; Number of cases is 1, Range of values is 134 to 134
 18232                           ; switch strategies available:
 18233                           ; Name         Instructions Cycles
 18234                           ; simple_byte            4     3 (average)
 18235                           ;	Chosen strategy is simple_byte
 18236  003A7E  5009               	movf	??_updateServoStates,w,c
 18237  003A80  0A86               	xorlw	134	; case 134
 18238  003A82  A4D8               	btfss	status,2,c
 18239  003A84  0012               	return	
 18240  003A86  D75E               	goto	i2l9300
 18241  003A88                     i2l10006:
 18242                           
 18243                           ; Switch size 1, requested type "space"
 18244                           ; Number of cases is 1, Range of values is 96 to 96
 18245                           ; switch strategies available:
 18246                           ; Name         Instructions Cycles
 18247                           ; simple_byte            4     3 (average)
 18248                           ;	Chosen strategy is simple_byte
 18249  003A88  5009               	movf	??_updateServoStates,w,c
 18250  003A8A  0A60               	xorlw	96	; case 96
 18251  003A8C  A4D8               	btfss	status,2,c
 18252  003A8E  0012               	return	
 18253  003A90  D773               	goto	i2l9304
 18254  003A92                     __end_of_updateServoStates:
 18255                           	opt stack 0
 18256                           pclatu	equ	0xFFB
 18257                           pclath	equ	0xFFA
 18258                           tblptru	equ	0xFF8
 18259                           tblptrh	equ	0xFF7
 18260                           tblptrl	equ	0xFF6
 18261                           tablat	equ	0xFF5
 18262                           prodh	equ	0xFF4
 18263                           prodl	equ	0xFF3
 18264                           intcon	equ	0xFF2
 18265                           intcon2	equ	0xFF1
 18266                           intcon3	equ	0xFF0
 18267                           indf0	equ	0xFEF
 18268                           postinc0	equ	0xFEE
 18269                           fsr0h	equ	0xFEA
 18270                           fsr0l	equ	0xFE9
 18271                           wreg	equ	0xFE8
 18272                           postdec1	equ	0xFE5
 18273                           fsr1h	equ	0xFE2
 18274                           fsr1l	equ	0xFE1
 18275                           indf2	equ	0xFDF
 18276                           postinc2	equ	0xFDE
 18277                           postdec2	equ	0xFDD
 18278                           fsr2h	equ	0xFDA
 18279                           fsr2l	equ	0xFD9
 18280                           status	equ	0xFD8
 18281                           
 18282 ;; *************** function i2_updateServoPosition *****************
 18283 ;; Defined at:
 18284 ;;		line 517 in file "sort.c"
 18285 ;; Parameters:    Size  Location     Type
 18286 ;;  time_us         2    0[COMRAM] int 
 18287 ;;  timer           2    2[COMRAM] int 
 18288 ;; Auto vars:     Size  Location     Type
 18289 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18290 ;; Return value:  Size  Location     Type
 18291 ;;                  1    wreg      void 
 18292 ;; Registers used:
 18293 ;;		wreg, status,2, status,0
 18294 ;; Tracked objects:
 18295 ;;		On entry : 0/0
 18296 ;;		On exit  : 0/0
 18297 ;;		Unchanged: 0/0
 18298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18301 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18302 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18303 ;;Total ram usage:        8 bytes
 18304 ;; Hardware stack levels used:    1
 18305 ;; This function calls:
 18306 ;;		Nothing
 18307 ;; This function is called by:
 18308 ;;		_updateServoStates
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text62
 18313  004A3E                     __ptext62:
 18314                           	opt stack 0
 18315  004A3E                     i2_updateServoPosition:
 18316                           	opt stack 22
 18317                           
 18318                           ;sort.c: 518: unsigned int my_time = 65535 - time_us;
 18319                           
 18320                           ;incstack = 0
 18321  004A3E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18322  004A42  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18323  004A46  1E05               	comf	??i2_updateServoPosition,f,c
 18324  004A48  1E06               	comf	??i2_updateServoPosition+1,f,c
 18325  004A4A  4A05               	infsnz	??i2_updateServoPosition,f,c
 18326  004A4C  2A06               	incf	??i2_updateServoPosition+1,f,c
 18327  004A4E  0EFF               	movlw	255
 18328  004A50  2405               	addwf	??i2_updateServoPosition,w,c
 18329  004A52  6E07               	movwf	i2updateServoPosition@my_time,c
 18330  004A54  0EFF               	movlw	255
 18331  004A56  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18332  004A58  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18333                           
 18334                           ;sort.c: 519: switch(timer){
 18335  004A5A  D011               	goto	i2l8514
 18336  004A5C                     i2l8512:
 18337                           
 18338                           ;sort.c: 521: servoTimes[0] = my_time >> 8;
 18339  004A5C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18340  004A5E  0100               	movlb	0	; () banked
 18341  004A60  6FDA               	movwf	_servoTimes& (0+255),b
 18342  004A62  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18343                           
 18344                           ;sort.c: 522: servoTimes[1] = my_time & 0xFF;
 18345  004A64  5007               	movf	i2updateServoPosition@my_time,w,c
 18346  004A66  0100               	movlb	0	; () banked
 18347  004A68  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18348  004A6A  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18349  004A6C                     i2l863:
 18350                           
 18351                           ;sort.c: 524: servoTimes[2] = my_time >> 8;
 18352  004A6C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18353  004A6E  0100               	movlb	0	; () banked
 18354  004A70  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18355  004A72  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18356                           
 18357                           ;sort.c: 525: servoTimes[3] = my_time & 0xFF;
 18358  004A74  5007               	movf	i2updateServoPosition@my_time,w,c
 18359  004A76  0100               	movlb	0	; () banked
 18360  004A78  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18361  004A7A  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18362                           
 18363                           ;sort.c: 526: }
 18364  004A7C  D00F               	goto	i2l864
 18365  004A7E                     i2l8514:
 18366  004A7E  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18367  004A82  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18368                           
 18369                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18370                           ; Switch size 1, requested type "space"
 18371                           ; Number of cases is 1, Range of values is 0 to 0
 18372                           ; switch strategies available:
 18373                           ; Name         Instructions Cycles
 18374                           ; simple_byte            4     3 (average)
 18375                           ;	Chosen strategy is simple_byte
 18376  004A86  5006               	movf	??i2_updateServoPosition+1,w,c
 18377  004A88  0A00               	xorlw	0	; case 0
 18378  004A8A  A4D8               	btfss	status,2,c
 18379  004A8C  D007               	goto	i2l864
 18380                           
 18381                           ; Switch size 1, requested type "space"
 18382                           ; Number of cases is 2, Range of values is 1 to 3
 18383                           ; switch strategies available:
 18384                           ; Name         Instructions Cycles
 18385                           ; simple_byte            7     4 (average)
 18386                           ;	Chosen strategy is simple_byte
 18387  004A8E  5005               	movf	??i2_updateServoPosition,w,c
 18388  004A90  0A01               	xorlw	1	; case 1
 18389  004A92  B4D8               	btfsc	status,2,c
 18390  004A94  D7E3               	goto	i2l8512
 18391  004A96  0A02               	xorlw	2	; case 3
 18392  004A98  B4D8               	btfsc	status,2,c
 18393  004A9A  D7E8               	goto	i2l863
 18394  004A9C                     i2l864:
 18395                           
 18396                           ;sort.c: 527: servo_state = time_us;
 18397  004A9C  C001  F073         	movff	i2updateServoPosition@time_us,_servo_state	;volatile
 18398  004AA0  C002  F074         	movff	i2updateServoPosition@time_us+1,_servo_state+1	;volatile
 18399  004AA4  0012               	return		;funcret
 18400  004AA6                     __end_ofi2_updateServoPosition:
 18401                           	opt stack 0
 18402                           pclatu	equ	0xFFB
 18403                           pclath	equ	0xFFA
 18404                           tblptru	equ	0xFF8
 18405                           tblptrh	equ	0xFF7
 18406                           tblptrl	equ	0xFF6
 18407                           tablat	equ	0xFF5
 18408                           prodh	equ	0xFF4
 18409                           prodl	equ	0xFF3
 18410                           intcon	equ	0xFF2
 18411                           intcon2	equ	0xFF1
 18412                           intcon3	equ	0xFF0
 18413                           indf0	equ	0xFEF
 18414                           postinc0	equ	0xFEE
 18415                           fsr0h	equ	0xFEA
 18416                           fsr0l	equ	0xFE9
 18417                           wreg	equ	0xFE8
 18418                           postdec1	equ	0xFE5
 18419                           fsr1h	equ	0xFE2
 18420                           fsr1l	equ	0xFE1
 18421                           indf2	equ	0xFDF
 18422                           postinc2	equ	0xFDE
 18423                           postdec2	equ	0xFDD
 18424                           fsr2h	equ	0xFDA
 18425                           fsr2l	equ	0xFD9
 18426                           status	equ	0xFD8
 18427                           
 18428 ;; *************** function _updateMenu *****************
 18429 ;; Defined at:
 18430 ;;		line 213 in file "UI.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;		None
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;		None
 18435 ;; Return value:  Size  Location     Type
 18436 ;;                  1    wreg      void 
 18437 ;; Registers used:
 18438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;Total ram usage:        2 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:    5
 18451 ;; This function calls:
 18452 ;;		_change_state_to_logs_11
 18453 ;;		_change_state_to_logs_12
 18454 ;;		_change_state_to_logs_22
 18455 ;;		_change_state_to_logs_23
 18456 ;;		_change_state_to_logs_33
 18457 ;;		_change_state_to_logs_34
 18458 ;;		_change_state_to_menu_11
 18459 ;;		_change_state_to_menu_23
 18460 ;;		_dispLogs
 18461 ;;		_inputHandler
 18462 ;;		i2_change_state_to_menu_12
 18463 ;;		i2_change_state_to_menu_22
 18464 ;;		i2_change_state_to_menu_start
 18465 ;; This function is called by:
 18466 ;;		_handler
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           	psect	text63
 18471  0026F2                     __ptext63:
 18472                           	opt stack 0
 18473  0026F2                     _updateMenu:
 18474                           	opt stack 18
 18475                           
 18476                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18477                           
 18478                           ;incstack = 0
 18479  0026F2  0E00               	movlw	0
 18480  0026F4  6E76               	movwf	_up+1,c
 18481  0026F6  0E00               	movlw	0
 18482  0026F8  6E75               	movwf	_up,c
 18483  0026FA  0E00               	movlw	0
 18484  0026FC  6E5E               	movwf	_down+1,c
 18485  0026FE  0E00               	movlw	0
 18486  002700  6E5D               	movwf	_down,c
 18487  002702  0E00               	movlw	0
 18488  002704  6E60               	movwf	_enter+1,c
 18489  002706  0E00               	movlw	0
 18490  002708  6E5F               	movwf	_enter,c
 18491  00270A  0E00               	movlw	0
 18492  00270C  6E5C               	movwf	_back+1,c
 18493  00270E  0E00               	movlw	0
 18494  002710  6E5B               	movwf	_back,c
 18495                           
 18496                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18497  002712  9EF2               	bcf	intcon,7,c	;volatile
 18498                           
 18499                           ;UI.c: 217: if (inputHandler()
 18500                           ;UI.c: 220: ){
 18501  002714  EC95  F01A         	call	_inputHandler	;wreg free
 18502  002718  502A               	movf	?_inputHandler,w,c
 18503  00271A  102B               	iorwf	?_inputHandler+1,w,c
 18504  00271C  A4D8               	btfss	status,2,c
 18505  00271E  D112               	goto	i2l9046
 18506  002720  D146               	goto	i2l257
 18507  002722                     i2l8898:
 18508                           
 18509                           ;UI.c: 224: change_state_to_menu_11();
 18510  002722  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 18511                           
 18512                           ;UI.c: 225: break;
 18513  002726  D143               	goto	i2l257
 18514  002728                     i2l8900:
 18515                           
 18516                           ;UI.c: 228: if(up){
 18517  002728  5075               	movf	_up,w,c
 18518  00272A  1076               	iorwf	_up+1,w,c
 18519  00272C  B4D8               	btfsc	status,2,c
 18520  00272E  D003               	goto	i2l8904
 18521                           
 18522                           ;UI.c: 229: change_state_to_menu_23();
 18523  002730  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18524                           
 18525                           ;UI.c: 230: }
 18526  002734  D13C               	goto	i2l257
 18527  002736                     i2l8904:
 18528                           
 18529                           ;UI.c: 231: else if(down){
 18530  002736  505D               	movf	_down,w,c
 18531  002738  105E               	iorwf	_down+1,w,c
 18532  00273A  B4D8               	btfsc	status,2,c
 18533  00273C  D003               	goto	i2l8908
 18534                           
 18535                           ;UI.c: 232: change_state_to_menu_12();
 18536  00273E  EC00  F028         	call	i2_change_state_to_menu_12	;wreg free
 18537                           
 18538                           ;UI.c: 233: }
 18539  002742  D135               	goto	i2l257
 18540  002744                     i2l8908:
 18541                           
 18542                           ;UI.c: 234: else if(enter){
 18543  002744  505F               	movf	_enter,w,c
 18544  002746  1060               	iorwf	_enter+1,w,c
 18545  002748  B4D8               	btfsc	status,2,c
 18546  00274A  D131               	goto	i2l257
 18547                           
 18548                           ;UI.c: 235: change_state_to_menu_start();
 18549  00274C  EC5A  F029         	call	i2_change_state_to_menu_start	;wreg free
 18550                           
 18551                           ;UI.c: 236: }
 18552                           ;UI.c: 237: break;
 18553  002750  D12E               	goto	i2l257
 18554  002752                     i2l8912:
 18555                           
 18556                           ;UI.c: 240: if(up){
 18557  002752  5075               	movf	_up,w,c
 18558  002754  1076               	iorwf	_up+1,w,c
 18559  002756  B4D8               	btfsc	status,2,c
 18560  002758  D003               	goto	i2l8916
 18561                           
 18562                           ;UI.c: 241: change_state_to_menu_11();
 18563  00275A  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 18564                           
 18565                           ;UI.c: 242: }
 18566  00275E  D127               	goto	i2l257
 18567  002760                     i2l8916:
 18568                           
 18569                           ;UI.c: 243: else if(down){
 18570  002760  505D               	movf	_down,w,c
 18571  002762  105E               	iorwf	_down+1,w,c
 18572  002764  B4D8               	btfsc	status,2,c
 18573  002766  D011               	goto	i2l8932
 18574                           
 18575                           ;UI.c: 244: change_state_to_menu_23();
 18576  002768  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18577                           
 18578                           ;UI.c: 245: }
 18579  00276C  D120               	goto	i2l257
 18580  00276E                     i2l8924:
 18581                           
 18582                           ;UI.c: 252: if(up){
 18583  00276E  5075               	movf	_up,w,c
 18584  002770  1076               	iorwf	_up+1,w,c
 18585  002772  B4D8               	btfsc	status,2,c
 18586  002774  D003               	goto	i2l8928
 18587                           
 18588                           ;UI.c: 253: change_state_to_menu_11();
 18589  002776  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 18590                           
 18591                           ;UI.c: 254: }
 18592  00277A  D119               	goto	i2l257
 18593  00277C                     i2l8928:
 18594                           
 18595                           ;UI.c: 255: else if(down){
 18596  00277C  505D               	movf	_down,w,c
 18597  00277E  105E               	iorwf	_down+1,w,c
 18598  002780  B4D8               	btfsc	status,2,c
 18599  002782  D003               	goto	i2l8932
 18600                           
 18601                           ;UI.c: 256: change_state_to_menu_23();
 18602  002784  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18603                           
 18604                           ;UI.c: 257: }
 18605  002788  D112               	goto	i2l257
 18606  00278A                     i2l8932:
 18607                           
 18608                           ;UI.c: 258: else if(enter){
 18609  00278A  505F               	movf	_enter,w,c
 18610  00278C  1060               	iorwf	_enter+1,w,c
 18611  00278E  B4D8               	btfsc	status,2,c
 18612  002790  D10E               	goto	i2l257
 18613                           
 18614                           ;UI.c: 259: machine_state = Sorting_state;
 18615  002792  0E01               	movlw	1
 18616  002794  0100               	movlb	0	; () banked
 18617  002796  6FFC               	movwf	_machine_state& (0+255),b
 18618                           
 18619                           ; BSR set to: 0
 18620                           ;UI.c: 260: }
 18621                           ;UI.c: 261: break;
 18622                           
 18623                           ; BSR set to: 0
 18624                           
 18625                           ; BSR set to: 0
 18626  002798  D10A               	goto	i2l257
 18627  00279A                     i2l8936:
 18628                           
 18629                           ;UI.c: 264: if(up){
 18630  00279A  5075               	movf	_up,w,c
 18631  00279C  1076               	iorwf	_up+1,w,c
 18632  00279E  B4D8               	btfsc	status,2,c
 18633  0027A0  D003               	goto	i2l8940
 18634                           
 18635                           ;UI.c: 265: change_state_to_menu_22();
 18636  0027A2  ECE8  F027         	call	i2_change_state_to_menu_22	;wreg free
 18637                           
 18638                           ;UI.c: 266: }
 18639  0027A6  D103               	goto	i2l257
 18640  0027A8                     i2l8940:
 18641                           
 18642                           ;UI.c: 267: else if(down){
 18643  0027A8  505D               	movf	_down,w,c
 18644  0027AA  105E               	iorwf	_down+1,w,c
 18645  0027AC  B4D8               	btfsc	status,2,c
 18646  0027AE  D003               	goto	i2l8944
 18647                           
 18648                           ;UI.c: 268: change_state_to_menu_11();
 18649  0027B0  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 18650                           
 18651                           ;UI.c: 269: }
 18652  0027B4  D0FC               	goto	i2l257
 18653  0027B6                     i2l8944:
 18654                           
 18655                           ;UI.c: 270: else if(enter){
 18656  0027B6  505F               	movf	_enter,w,c
 18657  0027B8  1060               	iorwf	_enter+1,w,c
 18658  0027BA  B4D8               	btfsc	status,2,c
 18659  0027BC  D0F8               	goto	i2l257
 18660                           
 18661                           ;UI.c: 271: change_state_to_logs_11();
 18662  0027BE  ECA8  F028         	call	_change_state_to_logs_11	;wreg free
 18663                           
 18664                           ;UI.c: 272: }
 18665                           ;UI.c: 273: break;
 18666  0027C2  D0F5               	goto	i2l257
 18667  0027C4                     i2l8948:
 18668                           
 18669                           ;UI.c: 276: if(up){
 18670  0027C4  5075               	movf	_up,w,c
 18671  0027C6  1076               	iorwf	_up+1,w,c
 18672  0027C8  B4D8               	btfsc	status,2,c
 18673  0027CA  D003               	goto	i2l8952
 18674                           
 18675                           ;UI.c: 277: change_state_to_logs_34();
 18676  0027CC  EC48  F028         	call	_change_state_to_logs_34	;wreg free
 18677                           
 18678                           ;UI.c: 278: }
 18679  0027D0  D0EE               	goto	i2l257
 18680  0027D2                     i2l8952:
 18681                           
 18682                           ;UI.c: 279: else if(down){
 18683  0027D2  505D               	movf	_down,w,c
 18684  0027D4  105E               	iorwf	_down+1,w,c
 18685  0027D6  B4D8               	btfsc	status,2,c
 18686  0027D8  D003               	goto	i2l8956
 18687                           
 18688                           ;UI.c: 280: change_state_to_logs_12();
 18689  0027DA  EC90  F028         	call	_change_state_to_logs_12	;wreg free
 18690                           
 18691                           ;UI.c: 281: }
 18692  0027DE  D0E7               	goto	i2l257
 18693  0027E0                     i2l8956:
 18694                           
 18695                           ;UI.c: 282: else if(enter){
 18696  0027E0  505F               	movf	_enter,w,c
 18697  0027E2  1060               	iorwf	_enter+1,w,c
 18698  0027E4  B4D8               	btfsc	status,2,c
 18699  0027E6  D007               	goto	i2l8960
 18700                           
 18701                           ;UI.c: 283: dispLogs(1);
 18702  0027E8  0E00               	movlw	0
 18703  0027EA  6E13               	movwf	dispLogs@myLog+1,c
 18704  0027EC  0E01               	movlw	1
 18705  0027EE  6E12               	movwf	dispLogs@myLog,c
 18706  0027F0  EC94  F029         	call	_dispLogs	;wreg free
 18707                           
 18708                           ;UI.c: 284: }
 18709  0027F4  D0DC               	goto	i2l257
 18710  0027F6                     i2l8960:
 18711                           
 18712                           ;UI.c: 285: else if(back){
 18713  0027F6  505B               	movf	_back,w,c
 18714  0027F8  105C               	iorwf	_back+1,w,c
 18715  0027FA  B4D8               	btfsc	status,2,c
 18716  0027FC  D0D8               	goto	i2l257
 18717                           
 18718                           ;UI.c: 286: change_state_to_menu_23();
 18719  0027FE  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18720                           
 18721                           ;UI.c: 287: }
 18722                           ;UI.c: 288: break;
 18723  002802  D0D5               	goto	i2l257
 18724  002804                     i2l8964:
 18725                           
 18726                           ;UI.c: 291: if(up){
 18727  002804  5075               	movf	_up,w,c
 18728  002806  1076               	iorwf	_up+1,w,c
 18729  002808  B4D8               	btfsc	status,2,c
 18730  00280A  D003               	goto	i2l8968
 18731                           
 18732                           ;UI.c: 292: change_state_to_logs_11();
 18733  00280C  ECA8  F028         	call	_change_state_to_logs_11	;wreg free
 18734                           
 18735                           ;UI.c: 293: }
 18736  002810  D0CE               	goto	i2l257
 18737  002812                     i2l8968:
 18738                           
 18739                           ;UI.c: 294: else if(down){
 18740  002812  505D               	movf	_down,w,c
 18741  002814  105E               	iorwf	_down+1,w,c
 18742  002816  B4D8               	btfsc	status,2,c
 18743  002818  D003               	goto	i2l8972
 18744                           
 18745                           ;UI.c: 295: change_state_to_logs_23();
 18746  00281A  ECEE  F028         	call	_change_state_to_logs_23	;wreg free
 18747                           
 18748                           ;UI.c: 296: }
 18749  00281E  D0C7               	goto	i2l257
 18750  002820                     i2l8972:
 18751                           
 18752                           ;UI.c: 297: else if(enter){
 18753  002820  505F               	movf	_enter,w,c
 18754  002822  1060               	iorwf	_enter+1,w,c
 18755  002824  B4D8               	btfsc	status,2,c
 18756  002826  D007               	goto	i2l8976
 18757                           
 18758                           ;UI.c: 298: dispLogs(2);
 18759  002828  0E00               	movlw	0
 18760  00282A  6E13               	movwf	dispLogs@myLog+1,c
 18761  00282C  0E02               	movlw	2
 18762  00282E  6E12               	movwf	dispLogs@myLog,c
 18763  002830  EC94  F029         	call	_dispLogs	;wreg free
 18764                           
 18765                           ;UI.c: 299: }
 18766  002834  D0BC               	goto	i2l257
 18767  002836                     i2l8976:
 18768                           
 18769                           ;UI.c: 300: else if(back){
 18770  002836  505B               	movf	_back,w,c
 18771  002838  105C               	iorwf	_back+1,w,c
 18772  00283A  B4D8               	btfsc	status,2,c
 18773  00283C  D0B8               	goto	i2l257
 18774                           
 18775                           ;UI.c: 301: change_state_to_menu_23();
 18776  00283E  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18777                           
 18778                           ;UI.c: 302: }
 18779                           ;UI.c: 303: break;
 18780  002842  D0B5               	goto	i2l257
 18781  002844                     i2l8980:
 18782                           
 18783                           ;UI.c: 306: if(up){
 18784  002844  5075               	movf	_up,w,c
 18785  002846  1076               	iorwf	_up+1,w,c
 18786  002848  B4D8               	btfsc	status,2,c
 18787  00284A  D003               	goto	i2l8984
 18788                           
 18789                           ;UI.c: 307: change_state_to_logs_11();
 18790  00284C  ECA8  F028         	call	_change_state_to_logs_11	;wreg free
 18791                           
 18792                           ;UI.c: 308: }
 18793  002850  D0AE               	goto	i2l257
 18794  002852                     i2l8984:
 18795                           
 18796                           ;UI.c: 309: else if(down){
 18797  002852  505D               	movf	_down,w,c
 18798  002854  105E               	iorwf	_down+1,w,c
 18799  002856  B4D8               	btfsc	status,2,c
 18800  002858  D003               	goto	i2l8988
 18801                           
 18802                           ;UI.c: 310: change_state_to_logs_23();
 18803  00285A  ECEE  F028         	call	_change_state_to_logs_23	;wreg free
 18804                           
 18805                           ;UI.c: 311: }
 18806  00285E  D0A7               	goto	i2l257
 18807  002860                     i2l8988:
 18808                           
 18809                           ;UI.c: 312: else if(enter){
 18810  002860  505F               	movf	_enter,w,c
 18811  002862  1060               	iorwf	_enter+1,w,c
 18812  002864  B4D8               	btfsc	status,2,c
 18813  002866  D007               	goto	i2l8992
 18814                           
 18815                           ;UI.c: 313: dispLogs(2);
 18816  002868  0E00               	movlw	0
 18817  00286A  6E13               	movwf	dispLogs@myLog+1,c
 18818  00286C  0E02               	movlw	2
 18819  00286E  6E12               	movwf	dispLogs@myLog,c
 18820  002870  EC94  F029         	call	_dispLogs	;wreg free
 18821                           
 18822                           ;UI.c: 314: }
 18823  002874  D09C               	goto	i2l257
 18824  002876                     i2l8992:
 18825                           
 18826                           ;UI.c: 315: else if(back){
 18827  002876  505B               	movf	_back,w,c
 18828  002878  105C               	iorwf	_back+1,w,c
 18829  00287A  B4D8               	btfsc	status,2,c
 18830  00287C  D098               	goto	i2l257
 18831                           
 18832                           ;UI.c: 316: change_state_to_menu_23();
 18833  00287E  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18834                           
 18835                           ;UI.c: 317: }
 18836                           ;UI.c: 318: break;
 18837  002882  D095               	goto	i2l257
 18838  002884                     i2l8996:
 18839                           
 18840                           ;UI.c: 321: if(up){
 18841  002884  5075               	movf	_up,w,c
 18842  002886  1076               	iorwf	_up+1,w,c
 18843  002888  B4D8               	btfsc	status,2,c
 18844  00288A  D003               	goto	i2l9000
 18845                           
 18846                           ;UI.c: 322: change_state_to_logs_22();
 18847  00288C  EC78  F028         	call	_change_state_to_logs_22	;wreg free
 18848                           
 18849                           ;UI.c: 323: }
 18850  002890  D08E               	goto	i2l257
 18851  002892                     i2l9000:
 18852                           
 18853                           ;UI.c: 324: else if(down){
 18854  002892  505D               	movf	_down,w,c
 18855  002894  105E               	iorwf	_down+1,w,c
 18856  002896  B4D8               	btfsc	status,2,c
 18857  002898  D003               	goto	i2l9004
 18858                           
 18859                           ;UI.c: 325: change_state_to_logs_34();
 18860  00289A  EC48  F028         	call	_change_state_to_logs_34	;wreg free
 18861                           
 18862                           ;UI.c: 326: }
 18863  00289E  D087               	goto	i2l257
 18864  0028A0                     i2l9004:
 18865                           
 18866                           ;UI.c: 327: else if(enter){
 18867  0028A0  505F               	movf	_enter,w,c
 18868  0028A2  1060               	iorwf	_enter+1,w,c
 18869  0028A4  B4D8               	btfsc	status,2,c
 18870  0028A6  D007               	goto	i2l9008
 18871                           
 18872                           ;UI.c: 328: dispLogs(3);
 18873  0028A8  0E00               	movlw	0
 18874  0028AA  6E13               	movwf	dispLogs@myLog+1,c
 18875  0028AC  0E03               	movlw	3
 18876  0028AE  6E12               	movwf	dispLogs@myLog,c
 18877  0028B0  EC94  F029         	call	_dispLogs	;wreg free
 18878                           
 18879                           ;UI.c: 329: }
 18880  0028B4  D07C               	goto	i2l257
 18881  0028B6                     i2l9008:
 18882                           
 18883                           ;UI.c: 330: else if(back){
 18884  0028B6  505B               	movf	_back,w,c
 18885  0028B8  105C               	iorwf	_back+1,w,c
 18886  0028BA  B4D8               	btfsc	status,2,c
 18887  0028BC  D078               	goto	i2l257
 18888                           
 18889                           ;UI.c: 331: change_state_to_menu_23();
 18890  0028BE  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18891                           
 18892                           ;UI.c: 332: }
 18893                           ;UI.c: 333: break;
 18894  0028C2  D075               	goto	i2l257
 18895  0028C4                     i2l9012:
 18896                           
 18897                           ;UI.c: 336: if(up){
 18898  0028C4  5075               	movf	_up,w,c
 18899  0028C6  1076               	iorwf	_up+1,w,c
 18900  0028C8  B4D8               	btfsc	status,2,c
 18901  0028CA  D003               	goto	i2l9016
 18902                           
 18903                           ;UI.c: 337: change_state_to_logs_22();
 18904  0028CC  EC78  F028         	call	_change_state_to_logs_22	;wreg free
 18905                           
 18906                           ;UI.c: 338: }
 18907  0028D0  D06E               	goto	i2l257
 18908  0028D2                     i2l9016:
 18909                           
 18910                           ;UI.c: 339: else if(down){
 18911  0028D2  505D               	movf	_down,w,c
 18912  0028D4  105E               	iorwf	_down+1,w,c
 18913  0028D6  B4D8               	btfsc	status,2,c
 18914  0028D8  D003               	goto	i2l9020
 18915                           
 18916                           ;UI.c: 340: change_state_to_logs_34();
 18917  0028DA  EC48  F028         	call	_change_state_to_logs_34	;wreg free
 18918                           
 18919                           ;UI.c: 341: }
 18920  0028DE  D067               	goto	i2l257
 18921  0028E0                     i2l9020:
 18922                           
 18923                           ;UI.c: 342: else if(enter){
 18924  0028E0  505F               	movf	_enter,w,c
 18925  0028E2  1060               	iorwf	_enter+1,w,c
 18926  0028E4  B4D8               	btfsc	status,2,c
 18927  0028E6  D007               	goto	i2l9024
 18928                           
 18929                           ;UI.c: 343: dispLogs(3);
 18930  0028E8  0E00               	movlw	0
 18931  0028EA  6E13               	movwf	dispLogs@myLog+1,c
 18932  0028EC  0E03               	movlw	3
 18933  0028EE  6E12               	movwf	dispLogs@myLog,c
 18934  0028F0  EC94  F029         	call	_dispLogs	;wreg free
 18935                           
 18936                           ;UI.c: 344: }
 18937  0028F4  D05C               	goto	i2l257
 18938  0028F6                     i2l9024:
 18939                           
 18940                           ;UI.c: 345: else if(back){
 18941  0028F6  505B               	movf	_back,w,c
 18942  0028F8  105C               	iorwf	_back+1,w,c
 18943  0028FA  B4D8               	btfsc	status,2,c
 18944  0028FC  D058               	goto	i2l257
 18945                           
 18946                           ;UI.c: 346: change_state_to_menu_23();
 18947  0028FE  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 18948                           
 18949                           ;UI.c: 347: }
 18950                           ;UI.c: 348: break;
 18951  002902  D055               	goto	i2l257
 18952  002904                     i2l9028:
 18953                           
 18954                           ;UI.c: 351: if(up){
 18955  002904  5075               	movf	_up,w,c
 18956  002906  1076               	iorwf	_up+1,w,c
 18957  002908  B4D8               	btfsc	status,2,c
 18958  00290A  D003               	goto	i2l9032
 18959                           
 18960                           ;UI.c: 352: change_state_to_logs_33();
 18961  00290C  EC60  F028         	call	_change_state_to_logs_33	;wreg free
 18962                           
 18963                           ;UI.c: 353: }
 18964  002910  D04E               	goto	i2l257
 18965  002912                     i2l9032:
 18966                           
 18967                           ;UI.c: 354: else if(down){
 18968  002912  505D               	movf	_down,w,c
 18969  002914  105E               	iorwf	_down+1,w,c
 18970  002916  B4D8               	btfsc	status,2,c
 18971  002918  D003               	goto	i2l9036
 18972                           
 18973                           ;UI.c: 355: change_state_to_logs_11();
 18974  00291A  ECA8  F028         	call	_change_state_to_logs_11	;wreg free
 18975                           
 18976                           ;UI.c: 356: }
 18977  00291E  D047               	goto	i2l257
 18978  002920                     i2l9036:
 18979                           
 18980                           ;UI.c: 357: else if(enter){
 18981  002920  505F               	movf	_enter,w,c
 18982  002922  1060               	iorwf	_enter+1,w,c
 18983  002924  B4D8               	btfsc	status,2,c
 18984  002926  D007               	goto	i2l9040
 18985                           
 18986                           ;UI.c: 358: dispLogs(4);
 18987  002928  0E00               	movlw	0
 18988  00292A  6E13               	movwf	dispLogs@myLog+1,c
 18989  00292C  0E04               	movlw	4
 18990  00292E  6E12               	movwf	dispLogs@myLog,c
 18991  002930  EC94  F029         	call	_dispLogs	;wreg free
 18992                           
 18993                           ;UI.c: 359: }
 18994  002934  D03C               	goto	i2l257
 18995  002936                     i2l9040:
 18996                           
 18997                           ;UI.c: 360: else if(back){
 18998  002936  505B               	movf	_back,w,c
 18999  002938  105C               	iorwf	_back+1,w,c
 19000  00293A  B4D8               	btfsc	status,2,c
 19001  00293C  D038               	goto	i2l257
 19002                           
 19003                           ;UI.c: 361: change_state_to_menu_23();
 19004  00293E  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 19005                           
 19006                           ;UI.c: 367: }
 19007                           
 19008                           ;UI.c: 366: break;
 19009                           
 19010                           ;UI.c: 365: default:
 19011                           
 19012                           ;UI.c: 362: }
 19013                           ;UI.c: 363: break;
 19014  002942  D035               	goto	i2l257
 19015  002944                     i2l9046:
 19016  002944  C0EE  F043         	movff	_cur_state,??_updateMenu
 19017  002948  C0EF  F044         	movff	_cur_state+1,??_updateMenu+1
 19018                           
 19019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19020                           ; Switch size 1, requested type "space"
 19021                           ; Number of cases is 3, Range of values is 0 to 4
 19022                           ; switch strategies available:
 19023                           ; Name         Instructions Cycles
 19024                           ; simple_byte           10     6 (average)
 19025                           ;	Chosen strategy is simple_byte
 19026  00294C  5044               	movf	??_updateMenu+1,w,c
 19027  00294E  0A00               	xorlw	0	; case 0
 19028  002950  B4D8               	btfsc	status,2,c
 19029  002952  D007               	goto	i2l10010
 19030  002954  0A03               	xorlw	3	; case 3
 19031  002956  B4D8               	btfsc	status,2,c
 19032  002958  D015               	goto	i2l10012
 19033  00295A  0A07               	xorlw	7	; case 4
 19034  00295C  B4D8               	btfsc	status,2,c
 19035  00295E  D020               	goto	i2l10014
 19036  002960  D026               	goto	i2l257
 19037  002962                     i2l10010:
 19038                           
 19039                           ; Switch size 1, requested type "space"
 19040                           ; Number of cases is 5, Range of values is 0 to 23
 19041                           ; switch strategies available:
 19042                           ; Name         Instructions Cycles
 19043                           ; simple_byte           16     9 (average)
 19044                           ;	Chosen strategy is simple_byte
 19045  002962  5043               	movf	??_updateMenu,w,c
 19046  002964  0A00               	xorlw	0	; case 0
 19047  002966  B4D8               	btfsc	status,2,c
 19048  002968  D6DC               	goto	i2l8898
 19049  00296A  0A0B               	xorlw	11	; case 11
 19050  00296C  B4D8               	btfsc	status,2,c
 19051  00296E  D6DC               	goto	i2l8900
 19052  002970  0A07               	xorlw	7	; case 12
 19053  002972  B4D8               	btfsc	status,2,c
 19054  002974  D6EE               	goto	i2l8912
 19055  002976  0A1A               	xorlw	26	; case 22
 19056  002978  B4D8               	btfsc	status,2,c
 19057  00297A  D6F9               	goto	i2l8924
 19058  00297C  0A01               	xorlw	1	; case 23
 19059  00297E  B4D8               	btfsc	status,2,c
 19060  002980  D70C               	goto	i2l8936
 19061  002982  D015               	goto	i2l257
 19062  002984                     i2l10012:
 19063                           
 19064                           ; Switch size 1, requested type "space"
 19065                           ; Number of cases is 4, Range of values is 243 to 255
 19066                           ; switch strategies available:
 19067                           ; Name         Instructions Cycles
 19068                           ; simple_byte           13     7 (average)
 19069                           ;	Chosen strategy is simple_byte
 19070  002984  5043               	movf	??_updateMenu,w,c
 19071  002986  0AF3               	xorlw	243	; case 243
 19072  002988  B4D8               	btfsc	status,2,c
 19073  00298A  D71C               	goto	i2l8948
 19074  00298C  0A07               	xorlw	7	; case 244
 19075  00298E  B4D8               	btfsc	status,2,c
 19076  002990  D739               	goto	i2l8964
 19077  002992  0A0A               	xorlw	10	; case 254
 19078  002994  B4D8               	btfsc	status,2,c
 19079  002996  D756               	goto	i2l8980
 19080  002998  0A01               	xorlw	1	; case 255
 19081  00299A  B4D8               	btfsc	status,2,c
 19082  00299C  D773               	goto	i2l8996
 19083  00299E  D007               	goto	i2l257
 19084  0029A0                     i2l10014:
 19085                           
 19086                           ; Switch size 1, requested type "space"
 19087                           ; Number of cases is 2, Range of values is 9 to 10
 19088                           ; switch strategies available:
 19089                           ; Name         Instructions Cycles
 19090                           ; simple_byte            7     4 (average)
 19091                           ;	Chosen strategy is simple_byte
 19092  0029A0  5043               	movf	??_updateMenu,w,c
 19093  0029A2  0A09               	xorlw	9	; case 9
 19094  0029A4  B4D8               	btfsc	status,2,c
 19095  0029A6  D78E               	goto	i2l9012
 19096  0029A8  0A03               	xorlw	3	; case 10
 19097  0029AA  B4D8               	btfsc	status,2,c
 19098  0029AC  D7AB               	goto	i2l9028
 19099  0029AE                     i2l257:
 19100                           
 19101                           ;UI.c: 368: }
 19102                           ;UI.c: 369: (INTCONbits.GIE = 1);
 19103  0029AE  8EF2               	bsf	intcon,7,c	;volatile
 19104  0029B0  0012               	return		;funcret
 19105  0029B2                     __end_of_updateMenu:
 19106                           	opt stack 0
 19107                           pclatu	equ	0xFFB
 19108                           pclath	equ	0xFFA
 19109                           tblptru	equ	0xFF8
 19110                           tblptrh	equ	0xFF7
 19111                           tblptrl	equ	0xFF6
 19112                           tablat	equ	0xFF5
 19113                           prodh	equ	0xFF4
 19114                           prodl	equ	0xFF3
 19115                           intcon	equ	0xFF2
 19116                           intcon2	equ	0xFF1
 19117                           intcon3	equ	0xFF0
 19118                           indf0	equ	0xFEF
 19119                           postinc0	equ	0xFEE
 19120                           fsr0h	equ	0xFEA
 19121                           fsr0l	equ	0xFE9
 19122                           wreg	equ	0xFE8
 19123                           postdec1	equ	0xFE5
 19124                           fsr1h	equ	0xFE2
 19125                           fsr1l	equ	0xFE1
 19126                           indf2	equ	0xFDF
 19127                           postinc2	equ	0xFDE
 19128                           postdec2	equ	0xFDD
 19129                           fsr2h	equ	0xFDA
 19130                           fsr2l	equ	0xFD9
 19131                           status	equ	0xFD8
 19132                           
 19133 ;; *************** function i2_change_state_to_menu_start *****************
 19134 ;; Defined at:
 19135 ;;		line 474 in file "UI.c"
 19136 ;; Parameters:    Size  Location     Type
 19137 ;;		None
 19138 ;; Auto vars:     Size  Location     Type
 19139 ;;		None
 19140 ;; Return value:  Size  Location     Type
 19141 ;;                  1    wreg      void 
 19142 ;; Registers used:
 19143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19144 ;; Tracked objects:
 19145 ;;		On entry : 0/0
 19146 ;;		On exit  : 0/0
 19147 ;;		Unchanged: 0/0
 19148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19153 ;;Total ram usage:        0 bytes
 19154 ;; Hardware stack levels used:    1
 19155 ;; Hardware stack levels required when called:    4
 19156 ;; This function calls:
 19157 ;;		i2_lcdInst
 19158 ;;		i2_printRTC
 19159 ;;		i2_printf
 19160 ;; This function is called by:
 19161 ;;		_updateMenu
 19162 ;; This function uses a non-reentrant model
 19163 ;;
 19164                           
 19165                           	psect	text64
 19166  0052B4                     __ptext64:
 19167                           	opt stack 0
 19168  0052B4                     i2_change_state_to_menu_start:
 19169                           	opt stack 18
 19170                           
 19171                           ;UI.c: 475: cur_state = 0;
 19172                           
 19173                           ;incstack = 0
 19174  0052B4  0E00               	movlw	0
 19175  0052B6  0100               	movlb	0	; () banked
 19176  0052B8  6FEF               	movwf	(_cur_state+1)& (0+255),b
 19177  0052BA  0E00               	movlw	0
 19178  0052BC  6FEE               	movwf	_cur_state& (0+255),b
 19179                           
 19180                           ; BSR set to: 0
 19181                           ;UI.c: 477: lcdInst(0b10000000);;
 19182  0052BE  0E80               	movlw	128
 19183  0052C0  EC32  F02A         	call	i2_lcdInst
 19184                           
 19185                           ;UI.c: 478: printRTC();
 19186  0052C4  EC51  F017         	call	i2_printRTC	;wreg free
 19187                           
 19188                           ;UI.c: 479: lcdInst(0b11000000);;
 19189  0052C8  0EC0               	movlw	192
 19190  0052CA  EC32  F02A         	call	i2_lcdInst
 19191                           
 19192                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 19193  0052CE  0EF7               	movlw	low STR_30
 19194  0052D0  6E0D               	movwf	i2printf@f,c
 19195  0052D2  0EFD               	movlw	high STR_30
 19196  0052D4  6E0E               	movwf	i2printf@f+1,c
 19197  0052D6  ECDE  F00E         	call	i2_printf	;wreg free
 19198  0052DA  0012               	return		;funcret
 19199  0052DC                     __end_ofi2_change_state_to_menu_start:
 19200                           	opt stack 0
 19201                           pclatu	equ	0xFFB
 19202                           pclath	equ	0xFFA
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           intcon2	equ	0xFF1
 19211                           intcon3	equ	0xFF0
 19212                           indf0	equ	0xFEF
 19213                           postinc0	equ	0xFEE
 19214                           fsr0h	equ	0xFEA
 19215                           fsr0l	equ	0xFE9
 19216                           wreg	equ	0xFE8
 19217                           postdec1	equ	0xFE5
 19218                           fsr1h	equ	0xFE2
 19219                           fsr1l	equ	0xFE1
 19220                           indf2	equ	0xFDF
 19221                           postinc2	equ	0xFDE
 19222                           postdec2	equ	0xFDD
 19223                           fsr2h	equ	0xFDA
 19224                           fsr2l	equ	0xFD9
 19225                           status	equ	0xFD8
 19226                           
 19227 ;; *************** function i2_printRTC *****************
 19228 ;; Defined at:
 19229 ;;		line 63 in file "RTC.c"
 19230 ;; Parameters:    Size  Location     Type
 19231 ;;		None
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;  printRTC       14   44[COMRAM] int [7]
 19234 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19235 ;;  printRTC        2   64[COMRAM] int 
 19236 ;;  printRTC        2   58[COMRAM] int 
 19237 ;; Return value:  Size  Location     Type
 19238 ;;                  1    wreg      void 
 19239 ;; Registers used:
 19240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19241 ;; Tracked objects:
 19242 ;;		On entry : 0/0
 19243 ;;		On exit  : 0/0
 19244 ;;		Unchanged: 0/0
 19245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19249 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19250 ;;Total ram usage:       25 bytes
 19251 ;; Hardware stack levels used:    1
 19252 ;; Hardware stack levels required when called:    3
 19253 ;; This function calls:
 19254 ;;		i2_getRTC
 19255 ;;		i2_lcdInst
 19256 ;;		i2_printf
 19257 ;;		i2_strcpy
 19258 ;; This function is called by:
 19259 ;;		i2_change_state_to_menu_start
 19260 ;; This function uses a non-reentrant model
 19261 ;;
 19262                           
 19263                           	psect	text65
 19264  002EA2                     __ptext65:
 19265                           	opt stack 0
 19266  002EA2                     i2_printRTC:
 19267                           	opt stack 18
 19268                           
 19269                           ;RTC.c: 64: getRTC();
 19270                           
 19271                           ;incstack = 0
 19272  002EA2  ECB2  F024         	call	i2_getRTC	;wreg free
 19273                           
 19274                           ;RTC.c: 65: char month[] = "MMM";
 19275  002EA6  C13F  F03D         	movff	printRTC@F3223,i2printRTC@month
 19276  002EAA  C140  F03E         	movff	printRTC@F3223+1,i2printRTC@month+1
 19277  002EAE  C141  F03F         	movff	printRTC@F3223+2,i2printRTC@month+2
 19278  002EB2  C142  F040         	movff	printRTC@F3223+3,i2printRTC@month+3
 19279                           
 19280                           ;RTC.c: 66: int INT_time[7];
 19281                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19282  002EB6  0E00               	movlw	0
 19283  002EB8  6E42               	movwf	i2printRTC@i+1,c
 19284  002EBA  0E00               	movlw	0
 19285  002EBC  6E41               	movwf	i2printRTC@i,c
 19286  002EBE  BE42               	btfsc	i2printRTC@i+1,7,c
 19287  002EC0  D006               	goto	i2l6980
 19288  002EC2  5042               	movf	i2printRTC@i+1,w,c
 19289  002EC4  E135               	bnz	i2l606
 19290  002EC6  0E07               	movlw	7
 19291  002EC8  5C41               	subwf	i2printRTC@i,w,c
 19292  002ECA  B0D8               	btfsc	status,0,c
 19293  002ECC  D031               	goto	i2l606
 19294  002ECE                     i2l6980:
 19295                           
 19296                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19297  002ECE  0E1C               	movlw	low _time
 19298  002ED0  2441               	addwf	i2printRTC@i,w,c
 19299  002ED2  6ED9               	movwf	fsr2l,c
 19300  002ED4  0E01               	movlw	high _time
 19301  002ED6  2042               	addwfc	i2printRTC@i+1,w,c
 19302  002ED8  6EDA               	movwf	fsr2h,c
 19303  002EDA  50DF               	movf	indf2,w,c
 19304  002EDC  6E2A               	movwf	??i2_printRTC& (0+255),c
 19305  002EDE  3A2A               	swapf	??i2_printRTC,f,c
 19306  002EE0  0E0F               	movlw	15
 19307  002EE2  162A               	andwf	??i2_printRTC,f,c
 19308  002EE4  0E0F               	movlw	15
 19309  002EE6  162A               	andwf	??i2_printRTC,f,c
 19310  002EE8  502A               	movf	??i2_printRTC,w,c
 19311  002EEA  0D0A               	mullw	10
 19312  002EEC  0E1C               	movlw	low _time
 19313  002EEE  2441               	addwf	i2printRTC@i,w,c
 19314  002EF0  6ED9               	movwf	fsr2l,c
 19315  002EF2  0E01               	movlw	high _time
 19316  002EF4  2042               	addwfc	i2printRTC@i+1,w,c
 19317  002EF6  6EDA               	movwf	fsr2h,c
 19318  002EF8  50DF               	movf	indf2,w,c
 19319  002EFA  0B0F               	andlw	15
 19320  002EFC  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19321  002EFE  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19322  002F00  50F3               	movf	prodl,w,c
 19323  002F02  262B               	addwf	??i2_printRTC+1,f,c
 19324  002F04  50F4               	movf	prodh,w,c
 19325  002F06  222C               	addwfc	??i2_printRTC+2,f,c
 19326  002F08  90D8               	bcf	status,0,c
 19327  002F0A  3441               	rlcf	i2printRTC@i,w,c
 19328  002F0C  6ED9               	movwf	fsr2l,c
 19329  002F0E  3442               	rlcf	i2printRTC@i+1,w,c
 19330  002F10  6EDA               	movwf	fsr2h,c
 19331  002F12  0E2D               	movlw	low i2printRTC@INT_time
 19332  002F14  26D9               	addwf	fsr2l,f,c
 19333  002F16  0E00               	movlw	high i2printRTC@INT_time
 19334  002F18  22DA               	addwfc	fsr2h,f,c
 19335  002F1A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19336  002F1E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19337  002F22  4A41               	infsnz	i2printRTC@i,f,c
 19338  002F24  2A42               	incf	i2printRTC@i+1,f,c
 19339  002F26  BE42               	btfsc	i2printRTC@i+1,7,c
 19340  002F28  D7D2               	goto	i2l6980
 19341  002F2A  5042               	movf	i2printRTC@i+1,w,c
 19342  002F2C  E101               	bnz	i2u542_40
 19343  002F2E  D7CB               	goto	L13
 19344  002F30                     i2u542_40:
 19345  002F30                     i2l606:
 19346                           
 19347                           ;RTC.c: 69: }
 19348                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19349  002F30  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19350  002F34  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19351                           
 19352                           ;RTC.c: 71: switch(RTC_month){
 19353  002F38  D084               	goto	i2l7012
 19354  002F3A                     i2l6986:
 19355                           
 19356                           ;RTC.c: 73: strcpy(month, "JAN");
 19357  002F3A  0E3D               	movlw	low i2printRTC@month
 19358  002F3C  6E01               	movwf	i2strcpy@to,c
 19359  002F3E  0E00               	movlw	high i2printRTC@month
 19360  002F40  6E02               	movwf	i2strcpy@to+1,c
 19361  002F42  0EDB               	movlw	low STR_8
 19362  002F44  6E03               	movwf	i2strcpy@from,c
 19363  002F46  0EFF               	movlw	high STR_8
 19364  002F48  6E04               	movwf	i2strcpy@from+1,c
 19365  002F4A  ECCF  F027         	call	i2_strcpy	;wreg free
 19366                           
 19367                           ;RTC.c: 74: break;
 19368  002F4E  D0A6               	goto	i2l7014
 19369  002F50                     i2l6988:
 19370                           
 19371                           ;RTC.c: 76: strcpy(month, "FEB");
 19372  002F50  0E3D               	movlw	low i2printRTC@month
 19373  002F52  6E01               	movwf	i2strcpy@to,c
 19374  002F54  0E00               	movlw	high i2printRTC@month
 19375  002F56  6E02               	movwf	i2strcpy@to+1,c
 19376  002F58  0ECB               	movlw	low STR_9
 19377  002F5A  6E03               	movwf	i2strcpy@from,c
 19378  002F5C  0EFF               	movlw	high STR_9
 19379  002F5E  6E04               	movwf	i2strcpy@from+1,c
 19380  002F60  ECCF  F027         	call	i2_strcpy	;wreg free
 19381                           
 19382                           ;RTC.c: 77: break;
 19383  002F64  D09B               	goto	i2l7014
 19384  002F66                     i2l6990:
 19385                           
 19386                           ;RTC.c: 79: strcpy(month, "MAR");
 19387  002F66  0E3D               	movlw	low i2printRTC@month
 19388  002F68  6E01               	movwf	i2strcpy@to,c
 19389  002F6A  0E00               	movlw	high i2printRTC@month
 19390  002F6C  6E02               	movwf	i2strcpy@to+1,c
 19391  002F6E  0EE7               	movlw	low STR_10
 19392  002F70  6E03               	movwf	i2strcpy@from,c
 19393  002F72  0EFF               	movlw	high STR_10
 19394  002F74  6E04               	movwf	i2strcpy@from+1,c
 19395  002F76  ECCF  F027         	call	i2_strcpy	;wreg free
 19396                           
 19397                           ;RTC.c: 80: break;
 19398  002F7A  D090               	goto	i2l7014
 19399  002F7C                     i2l6992:
 19400                           
 19401                           ;RTC.c: 82: strcpy(month, "APR");
 19402  002F7C  0E3D               	movlw	low i2printRTC@month
 19403  002F7E  6E01               	movwf	i2strcpy@to,c
 19404  002F80  0E00               	movlw	high i2printRTC@month
 19405  002F82  6E02               	movwf	i2strcpy@to+1,c
 19406  002F84  0EEB               	movlw	low STR_11
 19407  002F86  6E03               	movwf	i2strcpy@from,c
 19408  002F88  0EFF               	movlw	high STR_11
 19409  002F8A  6E04               	movwf	i2strcpy@from+1,c
 19410  002F8C  ECCF  F027         	call	i2_strcpy	;wreg free
 19411                           
 19412                           ;RTC.c: 83: break;
 19413  002F90  D085               	goto	i2l7014
 19414  002F92                     i2l6994:
 19415                           
 19416                           ;RTC.c: 85: strcpy(month, "MAY");
 19417  002F92  0E3D               	movlw	low i2printRTC@month
 19418  002F94  6E01               	movwf	i2strcpy@to,c
 19419  002F96  0E00               	movlw	high i2printRTC@month
 19420  002F98  6E02               	movwf	i2strcpy@to+1,c
 19421  002F9A  0EFB               	movlw	low STR_12
 19422  002F9C  6E03               	movwf	i2strcpy@from,c
 19423  002F9E  0EFF               	movlw	high STR_12
 19424  002FA0  6E04               	movwf	i2strcpy@from+1,c
 19425  002FA2  ECCF  F027         	call	i2_strcpy	;wreg free
 19426                           
 19427                           ;RTC.c: 86: break;
 19428  002FA6  D07A               	goto	i2l7014
 19429  002FA8                     i2l6996:
 19430                           
 19431                           ;RTC.c: 88: strcpy(month, "JUN");
 19432  002FA8  0E3D               	movlw	low i2printRTC@month
 19433  002FAA  6E01               	movwf	i2strcpy@to,c
 19434  002FAC  0E00               	movlw	high i2printRTC@month
 19435  002FAE  6E02               	movwf	i2strcpy@to+1,c
 19436  002FB0  0EDF               	movlw	low STR_13
 19437  002FB2  6E03               	movwf	i2strcpy@from,c
 19438  002FB4  0EFF               	movlw	high STR_13
 19439  002FB6  6E04               	movwf	i2strcpy@from+1,c
 19440  002FB8  ECCF  F027         	call	i2_strcpy	;wreg free
 19441                           
 19442                           ;RTC.c: 89: break;
 19443  002FBC  D06F               	goto	i2l7014
 19444  002FBE                     i2l6998:
 19445                           
 19446                           ;RTC.c: 91: strcpy(month, "JUL");
 19447  002FBE  0E3D               	movlw	low i2printRTC@month
 19448  002FC0  6E01               	movwf	i2strcpy@to,c
 19449  002FC2  0E00               	movlw	high i2printRTC@month
 19450  002FC4  6E02               	movwf	i2strcpy@to+1,c
 19451  002FC6  0ED7               	movlw	low STR_14
 19452  002FC8  6E03               	movwf	i2strcpy@from,c
 19453  002FCA  0EFF               	movlw	high STR_14
 19454  002FCC  6E04               	movwf	i2strcpy@from+1,c
 19455  002FCE  ECCF  F027         	call	i2_strcpy	;wreg free
 19456                           
 19457                           ;RTC.c: 92: break;
 19458  002FD2  D064               	goto	i2l7014
 19459  002FD4                     i2l7000:
 19460                           
 19461                           ;RTC.c: 94: strcpy(month, "AUG");
 19462  002FD4  0E3D               	movlw	low i2printRTC@month
 19463  002FD6  6E01               	movwf	i2strcpy@to,c
 19464  002FD8  0E00               	movlw	high i2printRTC@month
 19465  002FDA  6E02               	movwf	i2strcpy@to+1,c
 19466  002FDC  0ED3               	movlw	low STR_15
 19467  002FDE  6E03               	movwf	i2strcpy@from,c
 19468  002FE0  0EFF               	movlw	high STR_15
 19469  002FE2  6E04               	movwf	i2strcpy@from+1,c
 19470  002FE4  ECCF  F027         	call	i2_strcpy	;wreg free
 19471                           
 19472                           ;RTC.c: 95: break;
 19473  002FE8  D059               	goto	i2l7014
 19474  002FEA                     i2l7002:
 19475                           
 19476                           ;RTC.c: 97: strcpy(month, "SEP");
 19477  002FEA  0E3D               	movlw	low i2printRTC@month
 19478  002FEC  6E01               	movwf	i2strcpy@to,c
 19479  002FEE  0E00               	movlw	high i2printRTC@month
 19480  002FF0  6E02               	movwf	i2strcpy@to+1,c
 19481  002FF2  0EE3               	movlw	low STR_16
 19482  002FF4  6E03               	movwf	i2strcpy@from,c
 19483  002FF6  0EFF               	movlw	high STR_16
 19484  002FF8  6E04               	movwf	i2strcpy@from+1,c
 19485  002FFA  ECCF  F027         	call	i2_strcpy	;wreg free
 19486                           
 19487                           ;RTC.c: 98: break;
 19488  002FFE  D04E               	goto	i2l7014
 19489  003000                     i2l7004:
 19490                           
 19491                           ;RTC.c: 100: strcpy(month, "OCT");
 19492  003000  0E3D               	movlw	low i2printRTC@month
 19493  003002  6E01               	movwf	i2strcpy@to,c
 19494  003004  0E00               	movlw	high i2printRTC@month
 19495  003006  6E02               	movwf	i2strcpy@to+1,c
 19496  003008  0EF3               	movlw	low STR_17
 19497  00300A  6E03               	movwf	i2strcpy@from,c
 19498  00300C  0EFF               	movlw	high STR_17
 19499  00300E  6E04               	movwf	i2strcpy@from+1,c
 19500  003010  ECCF  F027         	call	i2_strcpy	;wreg free
 19501                           
 19502                           ;RTC.c: 101: break;
 19503  003014  D043               	goto	i2l7014
 19504  003016                     i2l7006:
 19505                           
 19506                           ;RTC.c: 103: strcpy(month, "NOV");
 19507  003016  0E3D               	movlw	low i2printRTC@month
 19508  003018  6E01               	movwf	i2strcpy@to,c
 19509  00301A  0E00               	movlw	high i2printRTC@month
 19510  00301C  6E02               	movwf	i2strcpy@to+1,c
 19511  00301E  0EF7               	movlw	low STR_18
 19512  003020  6E03               	movwf	i2strcpy@from,c
 19513  003022  0EFF               	movlw	high STR_18
 19514  003024  6E04               	movwf	i2strcpy@from+1,c
 19515  003026  ECCF  F027         	call	i2_strcpy	;wreg free
 19516                           
 19517                           ;RTC.c: 104: break;
 19518  00302A  D038               	goto	i2l7014
 19519  00302C                     i2l7008:
 19520                           
 19521                           ;RTC.c: 106: strcpy(month, "DEC");
 19522  00302C  0E3D               	movlw	low i2printRTC@month
 19523  00302E  6E01               	movwf	i2strcpy@to,c
 19524  003030  0E00               	movlw	high i2printRTC@month
 19525  003032  6E02               	movwf	i2strcpy@to+1,c
 19526  003034  0ECF               	movlw	low STR_19
 19527  003036  6E03               	movwf	i2strcpy@from,c
 19528  003038  0EFF               	movlw	high STR_19
 19529  00303A  6E04               	movwf	i2strcpy@from+1,c
 19530  00303C  ECCF  F027         	call	i2_strcpy	;wreg free
 19531                           
 19532                           ;RTC.c: 108: }
 19533                           
 19534                           ;RTC.c: 107: break;
 19535  003040  D02D               	goto	i2l7014
 19536  003042                     i2l7012:
 19537  003042  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19538  003046  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19539                           
 19540                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19541                           ; Switch size 1, requested type "space"
 19542                           ; Number of cases is 1, Range of values is 0 to 0
 19543                           ; switch strategies available:
 19544                           ; Name         Instructions Cycles
 19545                           ; simple_byte            4     3 (average)
 19546                           ;	Chosen strategy is simple_byte
 19547  00304A  502B               	movf	??i2_printRTC+1,w,c
 19548  00304C  0A00               	xorlw	0	; case 0
 19549  00304E  A4D8               	btfss	status,2,c
 19550  003050  D025               	goto	i2l7014
 19551                           
 19552                           ; Switch size 1, requested type "space"
 19553                           ; Number of cases is 12, Range of values is 1 to 12
 19554                           ; switch strategies available:
 19555                           ; Name         Instructions Cycles
 19556                           ; simple_byte           37    19 (average)
 19557                           ;	Chosen strategy is simple_byte
 19558  003052  502A               	movf	??i2_printRTC,w,c
 19559  003054  0A01               	xorlw	1	; case 1
 19560  003056  B4D8               	btfsc	status,2,c
 19561  003058  D770               	goto	i2l6986
 19562  00305A  0A03               	xorlw	3	; case 2
 19563  00305C  B4D8               	btfsc	status,2,c
 19564  00305E  D778               	goto	i2l6988
 19565  003060  0A01               	xorlw	1	; case 3
 19566  003062  B4D8               	btfsc	status,2,c
 19567  003064  D780               	goto	i2l6990
 19568  003066  0A07               	xorlw	7	; case 4
 19569  003068  B4D8               	btfsc	status,2,c
 19570  00306A  D788               	goto	i2l6992
 19571  00306C  0A01               	xorlw	1	; case 5
 19572  00306E  B4D8               	btfsc	status,2,c
 19573  003070  D790               	goto	i2l6994
 19574  003072  0A03               	xorlw	3	; case 6
 19575  003074  B4D8               	btfsc	status,2,c
 19576  003076  D798               	goto	i2l6996
 19577  003078  0A01               	xorlw	1	; case 7
 19578  00307A  B4D8               	btfsc	status,2,c
 19579  00307C  D7A0               	goto	i2l6998
 19580  00307E  0A0F               	xorlw	15	; case 8
 19581  003080  B4D8               	btfsc	status,2,c
 19582  003082  D7A8               	goto	i2l7000
 19583  003084  0A01               	xorlw	1	; case 9
 19584  003086  B4D8               	btfsc	status,2,c
 19585  003088  D7B0               	goto	i2l7002
 19586  00308A  0A03               	xorlw	3	; case 10
 19587  00308C  B4D8               	btfsc	status,2,c
 19588  00308E  D7B8               	goto	i2l7004
 19589  003090  0A01               	xorlw	1	; case 11
 19590  003092  B4D8               	btfsc	status,2,c
 19591  003094  D7C0               	goto	i2l7006
 19592  003096  0A07               	xorlw	7	; case 12
 19593  003098  B4D8               	btfsc	status,2,c
 19594  00309A  D7C8               	goto	i2l7008
 19595  00309C                     i2l7014:
 19596                           
 19597                           ;RTC.c: 109: lcdInst(0b10000000);;
 19598  00309C  0E80               	movlw	128
 19599  00309E  EC32  F02A         	call	i2_lcdInst
 19600                           
 19601                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19602  0030A2  0E0A               	movlw	low STR_21
 19603  0030A4  6E0D               	movwf	i2printf@f,c
 19604  0030A6  0EFB               	movlw	high STR_21
 19605  0030A8  6E0E               	movwf	i2printf@f+1,c
 19606  0030AA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19607  0030AE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19608  0030B2  0E3D               	movlw	low i2printRTC@month
 19609  0030B4  6E11               	movwf	?i2_printf+4,c
 19610  0030B6  0E00               	movlw	high i2printRTC@month
 19611  0030B8  6E12               	movwf	?i2_printf+5,c
 19612  0030BA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19613  0030BE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19614  0030C2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19615  0030C6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19616  0030CA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19617  0030CE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19618  0030D2  ECDE  F00E         	call	i2_printf	;wreg free
 19619  0030D6  0012               	return		;funcret
 19620  0030D8                     __end_ofi2_printRTC:
 19621                           	opt stack 0
 19622                           pclatu	equ	0xFFB
 19623                           pclath	equ	0xFFA
 19624                           tblptru	equ	0xFF8
 19625                           tblptrh	equ	0xFF7
 19626                           tblptrl	equ	0xFF6
 19627                           tablat	equ	0xFF5
 19628                           prodh	equ	0xFF4
 19629                           prodl	equ	0xFF3
 19630                           intcon	equ	0xFF2
 19631                           intcon2	equ	0xFF1
 19632                           intcon3	equ	0xFF0
 19633                           indf0	equ	0xFEF
 19634                           postinc0	equ	0xFEE
 19635                           fsr0h	equ	0xFEA
 19636                           fsr0l	equ	0xFE9
 19637                           wreg	equ	0xFE8
 19638                           postdec1	equ	0xFE5
 19639                           fsr1h	equ	0xFE2
 19640                           fsr1l	equ	0xFE1
 19641                           indf2	equ	0xFDF
 19642                           postinc2	equ	0xFDE
 19643                           postdec2	equ	0xFDD
 19644                           fsr2h	equ	0xFDA
 19645                           fsr2l	equ	0xFD9
 19646                           status	equ	0xFD8
 19647                           
 19648 ;; *************** function i2_strcpy *****************
 19649 ;; Defined at:
 19650 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;  to              2    0[COMRAM] PTR unsigned char 
 19653 ;;		 -> printRTC@month(4), UI@month(4), 
 19654 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19655 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19656 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19657 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19658 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19659 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19660 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19661 ;;		 -> STR_8(4), 
 19662 ;; Auto vars:     Size  Location     Type
 19663 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19664 ;;		 -> printRTC@month(4), UI@month(4), 
 19665 ;; Return value:  Size  Location     Type
 19666 ;;                  2    0[COMRAM] PTR unsigned char 
 19667 ;; Registers used:
 19668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19669 ;; Tracked objects:
 19670 ;;		On entry : 0/0
 19671 ;;		On exit  : 0/0
 19672 ;;		Unchanged: 0/0
 19673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;Total ram usage:        6 bytes
 19679 ;; Hardware stack levels used:    1
 19680 ;; This function calls:
 19681 ;;		Nothing
 19682 ;; This function is called by:
 19683 ;;		i2_printRTC
 19684 ;; This function uses a non-reentrant model
 19685 ;;
 19686                           
 19687                           	psect	text66
 19688  004F9E                     __ptext66:
 19689                           	opt stack 0
 19690  004F9E                     i2_strcpy:
 19691                           	opt stack 20
 19692                           
 19693                           ;incstack = 0
 19694  004F9E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19695  004FA2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19696  004FA6  D004               	goto	i2l6636
 19697  004FA8                     i2l6634:
 19698  004FA8  4A05               	infsnz	i2strcpy@cp,f,c
 19699  004FAA  2A06               	incf	i2strcpy@cp+1,f,c
 19700  004FAC  4A03               	infsnz	i2strcpy@from,f,c
 19701  004FAE  2A04               	incf	i2strcpy@from+1,f,c
 19702  004FB0                     i2l6636:
 19703  004FB0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19704  004FB4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19705  004FB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19706  004FB8  6AF8               	clrf	tblptru,c
 19707  004FBA                     	endif
 19708  004FBA                     	if	0	;tblptru may be non-zero
 19709  004FBA                     	endif
 19710  004FBA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19711  004FBE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19712  004FC2  0008               	tblrd		*
 19713  004FC4  CFF5 FFDF          	movff	tablat,indf2
 19714  004FC8  50DF               	movf	indf2,w,c
 19715  004FCA  B4D8               	btfsc	status,2,c
 19716  004FCC  0012               	return	
 19717  004FCE  D7EC               	goto	i2l6634
 19718  004FD0                     __end_ofi2_strcpy:
 19719                           	opt stack 0
 19720                           pclatu	equ	0xFFB
 19721                           pclath	equ	0xFFA
 19722                           tblptru	equ	0xFF8
 19723                           tblptrh	equ	0xFF7
 19724                           tblptrl	equ	0xFF6
 19725                           tablat	equ	0xFF5
 19726                           prodh	equ	0xFF4
 19727                           prodl	equ	0xFF3
 19728                           intcon	equ	0xFF2
 19729                           intcon2	equ	0xFF1
 19730                           intcon3	equ	0xFF0
 19731                           indf0	equ	0xFEF
 19732                           postinc0	equ	0xFEE
 19733                           fsr0h	equ	0xFEA
 19734                           fsr0l	equ	0xFE9
 19735                           wreg	equ	0xFE8
 19736                           postdec1	equ	0xFE5
 19737                           fsr1h	equ	0xFE2
 19738                           fsr1l	equ	0xFE1
 19739                           indf2	equ	0xFDF
 19740                           postinc2	equ	0xFDE
 19741                           postdec2	equ	0xFDD
 19742                           fsr2h	equ	0xFDA
 19743                           fsr2l	equ	0xFD9
 19744                           status	equ	0xFD8
 19745                           
 19746 ;; *************** function _inputHandler *****************
 19747 ;; Defined at:
 19748 ;;		line 372 in file "UI.c"
 19749 ;; Parameters:    Size  Location     Type
 19750 ;;		None
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;		None
 19753 ;; Return value:  Size  Location     Type
 19754 ;;                  2   41[COMRAM] int 
 19755 ;; Registers used:
 19756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19757 ;; Tracked objects:
 19758 ;;		On entry : 0/0
 19759 ;;		On exit  : 0/0
 19760 ;;		Unchanged: 0/0
 19761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19764 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;Total ram usage:        4 bytes
 19767 ;; Hardware stack levels used:    1
 19768 ;; Hardware stack levels required when called:    4
 19769 ;; This function calls:
 19770 ;;		_change_state_to_logs_11
 19771 ;;		_change_state_to_logs_12
 19772 ;;		_change_state_to_logs_22
 19773 ;;		_change_state_to_logs_23
 19774 ;;		_change_state_to_logs_33
 19775 ;;		_change_state_to_logs_34
 19776 ;;		_change_state_to_menu_11
 19777 ;;		_change_state_to_menu_23
 19778 ;;		i2_change_state_to_menu_12
 19779 ;;		i2_change_state_to_menu_22
 19780 ;; This function is called by:
 19781 ;;		_updateMenu
 19782 ;; This function uses a non-reentrant model
 19783 ;;
 19784                           
 19785                           	psect	text67
 19786  00352A                     __ptext67:
 19787                           	opt stack 0
 19788  00352A                     _inputHandler:
 19789                           	opt stack 18
 19790                           
 19791                           ;UI.c: 377: if(firstboot){
 19792                           
 19793                           ;incstack = 0
 19794  00352A  5063               	movf	_firstboot,w,c
 19795  00352C  1064               	iorwf	_firstboot+1,w,c
 19796  00352E  B4D8               	btfsc	status,2,c
 19797  003530  D00B               	goto	i2l7082
 19798                           
 19799                           ;UI.c: 378: change_state_to_menu_11();
 19800  003532  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 19801                           
 19802                           ;UI.c: 379: firstboot = 0;
 19803  003536  0E00               	movlw	0
 19804  003538  6E64               	movwf	_firstboot+1,c
 19805  00353A  0E00               	movlw	0
 19806  00353C  6E63               	movwf	_firstboot,c
 19807                           
 19808                           ;UI.c: 380: return 0;
 19809  00353E  0E00               	movlw	0
 19810  003540  6E2B               	movwf	?_inputHandler+1,c
 19811  003542  0E00               	movlw	0
 19812  003544  6E2A               	movwf	?_inputHandler,c
 19813  003546  0012               	return	
 19814  003548                     i2l7082:
 19815                           
 19816                           ;UI.c: 381: }
 19817                           ;UI.c: 382: if (logstate){
 19818  003548  0100               	movlb	0	; () banked
 19819  00354A  51F8               	movf	_logstate& (0+255),w,b
 19820  00354C  0100               	movlb	0	; () banked
 19821  00354E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 19822  003550  B4D8               	btfsc	status,2,c
 19823  003552  D0C7               	goto	i2l7200
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19827  003554  0E43               	movlw	67
 19828  003556  187D               	xorwf	_input,w,c	;volatile
 19829  003558  A4D8               	btfss	status,2,c
 19830  00355A  D012               	goto	i2l7100
 19831                           
 19832                           ; BSR set to: 0
 19833  00355C  B281               	btfsc	3969,1,c	;volatile
 19834  00355E  D009               	goto	i2l7092
 19835  003560  D00F               	goto	i2l7100
 19836  003562                     i2l7090:
 19837                           
 19838                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19839  003562  0E68               	movlw	104
 19840  003564  6E2C               	movwf	??_inputHandler& (0+255),c
 19841  003566  0EE4               	movlw	228
 19842  003568                     i2u1011_47:
 19843  003568  2EE8               	decfsz	wreg,f,c
 19844  00356A  D7FE               	bra	i2u1011_47
 19845  00356C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19846  00356E  D7FC               	bra	i2u1011_47
 19847  003570  D000               	nop2	
 19848  003572                     i2l7092:
 19849  003572  B281               	btfsc	3969,1,c	;volatile
 19850  003574  D7F6               	goto	i2l7090
 19851  003576                     i2l7094:
 19852                           
 19853                           ;UI.c: 387: }
 19854                           ;UI.c: 388: return 0;
 19855  003576  0E00               	movlw	0
 19856  003578  6E2B               	movwf	?_inputHandler+1,c
 19857  00357A  0E00               	movlw	0
 19858  00357C  6E2A               	movwf	?_inputHandler,c
 19859  00357E  0012               	return	
 19860  003580                     i2l7100:
 19861                           
 19862                           ;UI.c: 390: else if (input == 'D'){
 19863  003580  0E44               	movlw	68
 19864  003582  187D               	xorwf	_input,w,c	;volatile
 19865  003584  A4D8               	btfss	status,2,c
 19866  003586  D7F7               	goto	i2l7094
 19867                           
 19868                           ;UI.c: 392: logstate = 0;
 19869  003588  0E00               	movlw	0
 19870  00358A  0100               	movlb	0	; () banked
 19871  00358C  6FF9               	movwf	(_logstate+1)& (0+255),b
 19872  00358E  0E00               	movlw	0
 19873  003590  6FF8               	movwf	_logstate& (0+255),b
 19874                           
 19875                           ;UI.c: 393: switch(cur_state){
 19876  003592  D012               	goto	i2l7118
 19877  003594                     i2l7104:
 19878                           
 19879                           ;UI.c: 395: change_state_to_logs_11();
 19880  003594  ECA8  F028         	call	_change_state_to_logs_11	;wreg free
 19881                           
 19882                           ;UI.c: 396: break;
 19883  003598  D7EE               	goto	i2l7094
 19884  00359A                     i2l7106:
 19885                           
 19886                           ;UI.c: 398: change_state_to_logs_12();
 19887  00359A  EC90  F028         	call	_change_state_to_logs_12	;wreg free
 19888                           
 19889                           ;UI.c: 399: break;
 19890  00359E  D7EB               	goto	i2l7094
 19891  0035A0                     i2l7108:
 19892                           
 19893                           ;UI.c: 401: change_state_to_logs_22();
 19894  0035A0  EC78  F028         	call	_change_state_to_logs_22	;wreg free
 19895                           
 19896                           ;UI.c: 402: break;
 19897  0035A4  D7E8               	goto	i2l7094
 19898  0035A6                     i2l7110:
 19899                           
 19900                           ;UI.c: 404: change_state_to_logs_23();
 19901  0035A6  ECEE  F028         	call	_change_state_to_logs_23	;wreg free
 19902                           
 19903                           ;UI.c: 405: break;
 19904  0035AA  D7E5               	goto	i2l7094
 19905  0035AC                     i2l7112:
 19906                           
 19907                           ;UI.c: 407: change_state_to_logs_33();
 19908  0035AC  EC60  F028         	call	_change_state_to_logs_33	;wreg free
 19909                           
 19910                           ;UI.c: 408: break;
 19911  0035B0  D7E2               	goto	i2l7094
 19912  0035B2                     i2l7114:
 19913                           
 19914                           ;UI.c: 410: change_state_to_logs_34();
 19915  0035B2  EC48  F028         	call	_change_state_to_logs_34	;wreg free
 19916                           
 19917                           ;UI.c: 412: }
 19918                           
 19919                           ;UI.c: 411: break;
 19920  0035B6  D7DF               	goto	i2l7094
 19921  0035B8                     i2l7118:
 19922  0035B8  C0EE  F02C         	movff	_cur_state,??_inputHandler
 19923  0035BC  C0EF  F02D         	movff	_cur_state+1,??_inputHandler+1
 19924                           
 19925                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19926                           ; Switch size 1, requested type "space"
 19927                           ; Number of cases is 2, Range of values is 3 to 4
 19928                           ; switch strategies available:
 19929                           ; Name         Instructions Cycles
 19930                           ; simple_byte            7     4 (average)
 19931                           ;	Chosen strategy is simple_byte
 19932  0035C0  502D               	movf	??_inputHandler+1,w,c
 19933  0035C2  0A03               	xorlw	3	; case 3
 19934  0035C4  B4D8               	btfsc	status,2,c
 19935  0035C6  D004               	goto	i2l10018
 19936  0035C8  0A07               	xorlw	7	; case 4
 19937  0035CA  B4D8               	btfsc	status,2,c
 19938  0035CC  D00F               	goto	i2l10020
 19939  0035CE  D7D3               	goto	i2l7094
 19940  0035D0                     i2l10018:
 19941                           
 19942                           ; Switch size 1, requested type "space"
 19943                           ; Number of cases is 4, Range of values is 243 to 255
 19944                           ; switch strategies available:
 19945                           ; Name         Instructions Cycles
 19946                           ; simple_byte           13     7 (average)
 19947                           ;	Chosen strategy is simple_byte
 19948  0035D0  502C               	movf	??_inputHandler,w,c
 19949  0035D2  0AF3               	xorlw	243	; case 243
 19950  0035D4  B4D8               	btfsc	status,2,c
 19951  0035D6  D7DE               	goto	i2l7104
 19952  0035D8  0A07               	xorlw	7	; case 244
 19953  0035DA  B4D8               	btfsc	status,2,c
 19954  0035DC  D7DE               	goto	i2l7106
 19955  0035DE  0A0A               	xorlw	10	; case 254
 19956  0035E0  B4D8               	btfsc	status,2,c
 19957  0035E2  D7DE               	goto	i2l7108
 19958  0035E4  0A01               	xorlw	1	; case 255
 19959  0035E6  B4D8               	btfsc	status,2,c
 19960  0035E8  D7DE               	goto	i2l7110
 19961  0035EA  D7C5               	goto	i2l7094
 19962  0035EC                     i2l10020:
 19963                           
 19964                           ; Switch size 1, requested type "space"
 19965                           ; Number of cases is 2, Range of values is 9 to 10
 19966                           ; switch strategies available:
 19967                           ; Name         Instructions Cycles
 19968                           ; simple_byte            7     4 (average)
 19969                           ;	Chosen strategy is simple_byte
 19970  0035EC  502C               	movf	??_inputHandler,w,c
 19971  0035EE  0A09               	xorlw	9	; case 9
 19972  0035F0  B4D8               	btfsc	status,2,c
 19973  0035F2  D7DC               	goto	i2l7112
 19974  0035F4  0A03               	xorlw	3	; case 10
 19975  0035F6  B4D8               	btfsc	status,2,c
 19976  0035F8  D7DC               	goto	i2l7114
 19977  0035FA  D7BD               	goto	i2l7094
 19978  0035FC                     i2l7130:
 19979                           
 19980                           ;UI.c: 422: if(cur_state == 11){
 19981  0035FC  0E0B               	movlw	11
 19982  0035FE  0100               	movlb	0	; () banked
 19983  003600  19EE               	xorwf	_cur_state& (0+255),w,b
 19984  003602  0100               	movlb	0	; () banked
 19985  003604  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 19986  003606  A4D8               	btfss	status,2,c
 19987  003608  D005               	goto	i2l7138
 19988                           
 19989                           ; BSR set to: 0
 19990                           ;UI.c: 423: return 0;
 19991  00360A  0E00               	movlw	0
 19992  00360C  6E2B               	movwf	?_inputHandler+1,c
 19993  00360E  0E00               	movlw	0
 19994  003610  6E2A               	movwf	?_inputHandler,c
 19995                           
 19996                           ; BSR set to: 0
 19997  003612  0012               	return	
 19998  003614                     i2l7138:
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;UI.c: 425: else{
 20002                           ;UI.c: 426: change_state_to_menu_11();
 20003  003614  EC30  F028         	call	_change_state_to_menu_11	;wreg free
 20004                           
 20005                           ;UI.c: 427: }
 20006                           ;UI.c: 428: return 0;
 20007  003618  0E00               	movlw	0
 20008  00361A  6E2B               	movwf	?_inputHandler+1,c
 20009  00361C  0E00               	movlw	0
 20010  00361E  6E2A               	movwf	?_inputHandler,c
 20011  003620  0012               	return	
 20012  003622                     i2l7144:
 20013                           
 20014                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 20015  003622  0E16               	movlw	22
 20016  003624  0100               	movlb	0	; () banked
 20017  003626  19EE               	xorwf	_cur_state& (0+255),w,b
 20018  003628  0100               	movlb	0	; () banked
 20019  00362A  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 20020  00362C  B4D8               	btfsc	status,2,c
 20021  00362E  D007               	goto	i2l7148
 20022                           
 20023                           ; BSR set to: 0
 20024  003630  0E0C               	movlw	12
 20025  003632  0100               	movlb	0	; () banked
 20026  003634  19EE               	xorwf	_cur_state& (0+255),w,b
 20027  003636  0100               	movlb	0	; () banked
 20028  003638  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 20029  00363A  A4D8               	btfss	status,2,c
 20030  00363C  D005               	goto	i2l7154
 20031  00363E                     i2l7148:
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;UI.c: 431: return 0;
 20035  00363E  0E00               	movlw	0
 20036  003640  6E2B               	movwf	?_inputHandler+1,c
 20037  003642  0E00               	movlw	0
 20038  003644  6E2A               	movwf	?_inputHandler,c
 20039                           
 20040                           ; BSR set to: 0
 20041  003646  0012               	return	
 20042  003648                     i2l7154:
 20043                           
 20044                           ; BSR set to: 0
 20045                           ;UI.c: 433: else if(cur_state == 23){
 20046  003648  0E17               	movlw	23
 20047  00364A  0100               	movlb	0	; () banked
 20048  00364C  19EE               	xorwf	_cur_state& (0+255),w,b
 20049  00364E  0100               	movlb	0	; () banked
 20050  003650  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 20051  003652  A4D8               	btfss	status,2,c
 20052  003654  D003               	goto	i2l7158
 20053                           
 20054                           ; BSR set to: 0
 20055                           ;UI.c: 434: change_state_to_menu_22();
 20056  003656  ECE8  F027         	call	i2_change_state_to_menu_22	;wreg free
 20057                           
 20058                           ;UI.c: 435: }
 20059  00365A  D002               	goto	i2l7160
 20060  00365C                     i2l7158:
 20061                           
 20062                           ;UI.c: 436: else{
 20063                           ;UI.c: 437: change_state_to_menu_12();
 20064  00365C  EC00  F028         	call	i2_change_state_to_menu_12	;wreg free
 20065  003660                     i2l7160:
 20066                           
 20067                           ;UI.c: 438: }
 20068                           ;UI.c: 439: return 0;
 20069  003660  0E00               	movlw	0
 20070  003662  6E2B               	movwf	?_inputHandler+1,c
 20071  003664  0E00               	movlw	0
 20072  003666  6E2A               	movwf	?_inputHandler,c
 20073  003668  0012               	return	
 20074  00366A                     i2l7164:
 20075                           
 20076                           ;UI.c: 441: if(cur_state == 23){
 20077  00366A  0E17               	movlw	23
 20078  00366C  0100               	movlb	0	; () banked
 20079  00366E  19EE               	xorwf	_cur_state& (0+255),w,b
 20080  003670  0100               	movlb	0	; () banked
 20081  003672  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 20082  003674  A4D8               	btfss	status,2,c
 20083  003676  D005               	goto	i2l7172
 20084                           
 20085                           ; BSR set to: 0
 20086                           ;UI.c: 442: return 0;
 20087  003678  0E00               	movlw	0
 20088  00367A  6E2B               	movwf	?_inputHandler+1,c
 20089  00367C  0E00               	movlw	0
 20090  00367E  6E2A               	movwf	?_inputHandler,c
 20091                           
 20092                           ; BSR set to: 0
 20093  003680  0012               	return	
 20094  003682                     i2l7172:
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;UI.c: 444: else{
 20098                           ;UI.c: 445: change_state_to_menu_23();
 20099  003682  EC18  F028         	call	_change_state_to_menu_23	;wreg free
 20100                           
 20101                           ;UI.c: 446: }
 20102                           ;UI.c: 447: return 0;
 20103  003686  0E00               	movlw	0
 20104  003688  6E2B               	movwf	?_inputHandler+1,c
 20105  00368A  0E00               	movlw	0
 20106  00368C  6E2A               	movwf	?_inputHandler,c
 20107  00368E  0012               	return	
 20108  003690                     i2l7178:
 20109                           
 20110                           ;UI.c: 450: up = 1;
 20111  003690  0E00               	movlw	0
 20112  003692  6E76               	movwf	_up+1,c
 20113  003694  0E01               	movlw	1
 20114  003696  6E75               	movwf	_up,c
 20115                           
 20116                           ;UI.c: 451: return 1;
 20117  003698  0E00               	movlw	0
 20118  00369A  6E2B               	movwf	?_inputHandler+1,c
 20119  00369C  0E01               	movlw	1
 20120  00369E  6E2A               	movwf	?_inputHandler,c
 20121  0036A0  0012               	return	
 20122  0036A2                     i2l7182:
 20123                           
 20124                           ;UI.c: 453: down = 1;
 20125  0036A2  0E00               	movlw	0
 20126  0036A4  6E5E               	movwf	_down+1,c
 20127  0036A6  0E01               	movlw	1
 20128  0036A8  6E5D               	movwf	_down,c
 20129                           
 20130                           ;UI.c: 454: return 1;
 20131  0036AA  0E00               	movlw	0
 20132  0036AC  6E2B               	movwf	?_inputHandler+1,c
 20133  0036AE  0E01               	movlw	1
 20134  0036B0  6E2A               	movwf	?_inputHandler,c
 20135  0036B2  0012               	return	
 20136  0036B4                     i2l7186:
 20137                           
 20138                           ;UI.c: 456: enter = 1;
 20139  0036B4  0E00               	movlw	0
 20140  0036B6  6E60               	movwf	_enter+1,c
 20141  0036B8  0E01               	movlw	1
 20142  0036BA  6E5F               	movwf	_enter,c
 20143                           
 20144                           ;UI.c: 457: return 1;
 20145  0036BC  0E00               	movlw	0
 20146  0036BE  6E2B               	movwf	?_inputHandler+1,c
 20147  0036C0  0E01               	movlw	1
 20148  0036C2  6E2A               	movwf	?_inputHandler,c
 20149  0036C4  0012               	return	
 20150  0036C6                     i2l7190:
 20151                           
 20152                           ;UI.c: 459: back = 1;
 20153  0036C6  0E00               	movlw	0
 20154  0036C8  6E5C               	movwf	_back+1,c
 20155  0036CA  0E01               	movlw	1
 20156  0036CC  6E5B               	movwf	_back,c
 20157                           
 20158                           ;UI.c: 460: return 1;
 20159  0036CE  0E00               	movlw	0
 20160  0036D0  6E2B               	movwf	?_inputHandler+1,c
 20161  0036D2  0E01               	movlw	1
 20162  0036D4  6E2A               	movwf	?_inputHandler,c
 20163  0036D6  0012               	return	
 20164  0036D8                     i2l7194:
 20165                           
 20166                           ;UI.c: 463: return 1;
 20167  0036D8  0E00               	movlw	0
 20168  0036DA  6E2B               	movwf	?_inputHandler+1,c
 20169  0036DC  0E01               	movlw	1
 20170  0036DE  6E2A               	movwf	?_inputHandler,c
 20171                           
 20172                           ;UI.c: 464: }
 20173  0036E0  0012               	return	
 20174  0036E2                     i2l7200:
 20175  0036E2  507D               	movf	_input,w,c	;volatile
 20176                           
 20177                           ; Switch size 1, requested type "space"
 20178                           ; Number of cases is 7, Range of values is 49 to 68
 20179                           ; switch strategies available:
 20180                           ; Name         Instructions Cycles
 20181                           ; simple_byte           22    12 (average)
 20182                           ;	Chosen strategy is simple_byte
 20183  0036E4  0A31               	xorlw	49	; case 49
 20184  0036E6  B4D8               	btfsc	status,2,c
 20185  0036E8  D789               	goto	i2l7130
 20186  0036EA  0A03               	xorlw	3	; case 50
 20187  0036EC  B4D8               	btfsc	status,2,c
 20188  0036EE  D799               	goto	i2l7144
 20189  0036F0  0A01               	xorlw	1	; case 51
 20190  0036F2  B4D8               	btfsc	status,2,c
 20191  0036F4  D7BA               	goto	i2l7164
 20192  0036F6  0A72               	xorlw	114	; case 65
 20193  0036F8  B4D8               	btfsc	status,2,c
 20194  0036FA  D7CA               	goto	i2l7178
 20195  0036FC  0A03               	xorlw	3	; case 66
 20196  0036FE  B4D8               	btfsc	status,2,c
 20197  003700  D7D0               	goto	i2l7182
 20198  003702  0A01               	xorlw	1	; case 67
 20199  003704  B4D8               	btfsc	status,2,c
 20200  003706  D7D6               	goto	i2l7186
 20201  003708  0A07               	xorlw	7	; case 68
 20202  00370A  B4D8               	btfsc	status,2,c
 20203  00370C  D7DC               	goto	i2l7190
 20204  00370E  D7E4               	goto	i2l7194
 20205  003710                     __end_of_inputHandler:
 20206                           	opt stack 0
 20207                           pclatu	equ	0xFFB
 20208                           pclath	equ	0xFFA
 20209                           tblptru	equ	0xFF8
 20210                           tblptrh	equ	0xFF7
 20211                           tblptrl	equ	0xFF6
 20212                           tablat	equ	0xFF5
 20213                           prodh	equ	0xFF4
 20214                           prodl	equ	0xFF3
 20215                           intcon	equ	0xFF2
 20216                           intcon2	equ	0xFF1
 20217                           intcon3	equ	0xFF0
 20218                           indf0	equ	0xFEF
 20219                           postinc0	equ	0xFEE
 20220                           fsr0h	equ	0xFEA
 20221                           fsr0l	equ	0xFE9
 20222                           wreg	equ	0xFE8
 20223                           postdec1	equ	0xFE5
 20224                           fsr1h	equ	0xFE2
 20225                           fsr1l	equ	0xFE1
 20226                           indf2	equ	0xFDF
 20227                           postinc2	equ	0xFDE
 20228                           postdec2	equ	0xFDD
 20229                           fsr2h	equ	0xFDA
 20230                           fsr2l	equ	0xFD9
 20231                           status	equ	0xFD8
 20232                           
 20233 ;; *************** function i2_change_state_to_menu_22 *****************
 20234 ;; Defined at:
 20235 ;;		line 498 in file "UI.c"
 20236 ;; Parameters:    Size  Location     Type
 20237 ;;		None
 20238 ;; Auto vars:     Size  Location     Type
 20239 ;;		None
 20240 ;; Return value:  Size  Location     Type
 20241 ;;                  1    wreg      void 
 20242 ;; Registers used:
 20243 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20244 ;; Tracked objects:
 20245 ;;		On entry : 0/0
 20246 ;;		On exit  : 0/0
 20247 ;;		Unchanged: 0/0
 20248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20253 ;;Total ram usage:        0 bytes
 20254 ;; Hardware stack levels used:    1
 20255 ;; Hardware stack levels required when called:    3
 20256 ;; This function calls:
 20257 ;;		i2_lcdInst
 20258 ;;		i2_printf
 20259 ;; This function is called by:
 20260 ;;		_updateMenu
 20261 ;;		_inputHandler
 20262 ;; This function uses a non-reentrant model
 20263 ;;
 20264                           
 20265                           	psect	text68
 20266  004FD0                     __ptext68:
 20267                           	opt stack 0
 20268  004FD0                     i2_change_state_to_menu_22:
 20269                           	opt stack 19
 20270                           
 20271                           ;UI.c: 499: cur_state = 22;
 20272                           
 20273                           ;incstack = 0
 20274  004FD0  0E00               	movlw	0
 20275  004FD2  0100               	movlb	0	; () banked
 20276  004FD4  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20277  004FD6  0E16               	movlw	22
 20278  004FD8  6FEE               	movwf	_cur_state& (0+255),b
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;UI.c: 501: lcdInst(0b10000000);;
 20282  004FDA  0E80               	movlw	128
 20283  004FDC  EC32  F02A         	call	i2_lcdInst
 20284                           
 20285                           ;UI.c: 502: printf("2. SORT        <");
 20286  004FE0  0EC4               	movlw	low STR_34
 20287  004FE2  6E0D               	movwf	i2printf@f,c
 20288  004FE4  0EFD               	movlw	high STR_34
 20289  004FE6  6E0E               	movwf	i2printf@f+1,c
 20290  004FE8  ECDE  F00E         	call	i2_printf	;wreg free
 20291                           
 20292                           ;UI.c: 503: lcdInst(0b11000000);;
 20293  004FEC  0EC0               	movlw	192
 20294  004FEE  EC32  F02A         	call	i2_lcdInst
 20295                           
 20296                           ;UI.c: 504: printf("3. LOGS         ");
 20297  004FF2  0E09               	movlw	low STR_36
 20298  004FF4  6E0D               	movwf	i2printf@f,c
 20299  004FF6  0EFD               	movlw	high STR_36
 20300  004FF8  6E0E               	movwf	i2printf@f+1,c
 20301  004FFA  ECDE  F00E         	call	i2_printf	;wreg free
 20302  004FFE  0012               	return		;funcret
 20303  005000                     __end_ofi2_change_state_to_menu_22:
 20304                           	opt stack 0
 20305                           pclatu	equ	0xFFB
 20306                           pclath	equ	0xFFA
 20307                           tblptru	equ	0xFF8
 20308                           tblptrh	equ	0xFF7
 20309                           tblptrl	equ	0xFF6
 20310                           tablat	equ	0xFF5
 20311                           prodh	equ	0xFF4
 20312                           prodl	equ	0xFF3
 20313                           intcon	equ	0xFF2
 20314                           intcon2	equ	0xFF1
 20315                           intcon3	equ	0xFF0
 20316                           indf0	equ	0xFEF
 20317                           postinc0	equ	0xFEE
 20318                           fsr0h	equ	0xFEA
 20319                           fsr0l	equ	0xFE9
 20320                           wreg	equ	0xFE8
 20321                           postdec1	equ	0xFE5
 20322                           fsr1h	equ	0xFE2
 20323                           fsr1l	equ	0xFE1
 20324                           indf2	equ	0xFDF
 20325                           postinc2	equ	0xFDE
 20326                           postdec2	equ	0xFDD
 20327                           fsr2h	equ	0xFDA
 20328                           fsr2l	equ	0xFD9
 20329                           status	equ	0xFD8
 20330                           
 20331 ;; *************** function i2_change_state_to_menu_12 *****************
 20332 ;; Defined at:
 20333 ;;		line 490 in file "UI.c"
 20334 ;; Parameters:    Size  Location     Type
 20335 ;;		None
 20336 ;; Auto vars:     Size  Location     Type
 20337 ;;		None
 20338 ;; Return value:  Size  Location     Type
 20339 ;;                  1    wreg      void 
 20340 ;; Registers used:
 20341 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20342 ;; Tracked objects:
 20343 ;;		On entry : 0/0
 20344 ;;		On exit  : 0/0
 20345 ;;		Unchanged: 0/0
 20346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20351 ;;Total ram usage:        0 bytes
 20352 ;; Hardware stack levels used:    1
 20353 ;; Hardware stack levels required when called:    3
 20354 ;; This function calls:
 20355 ;;		i2_lcdInst
 20356 ;;		i2_printf
 20357 ;; This function is called by:
 20358 ;;		_updateMenu
 20359 ;;		_inputHandler
 20360 ;; This function uses a non-reentrant model
 20361 ;;
 20362                           
 20363                           	psect	text69
 20364  005000                     __ptext69:
 20365                           	opt stack 0
 20366  005000                     i2_change_state_to_menu_12:
 20367                           	opt stack 19
 20368                           
 20369                           ;UI.c: 491: cur_state = 12;
 20370                           
 20371                           ;incstack = 0
 20372  005000  0E00               	movlw	0
 20373  005002  0100               	movlb	0	; () banked
 20374  005004  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20375  005006  0E0C               	movlw	12
 20376  005008  6FEE               	movwf	_cur_state& (0+255),b
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;UI.c: 493: lcdInst(0b10000000);;
 20380  00500A  0E80               	movlw	128
 20381  00500C  EC32  F02A         	call	i2_lcdInst
 20382                           
 20383                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20384  005010  0E2B               	movlw	low STR_33
 20385  005012  6E0D               	movwf	i2printf@f,c
 20386  005014  0EFD               	movlw	high STR_33
 20387  005016  6E0E               	movwf	i2printf@f+1,c
 20388  005018  ECDE  F00E         	call	i2_printf	;wreg free
 20389                           
 20390                           ;UI.c: 495: lcdInst(0b11000000);;
 20391  00501C  0EC0               	movlw	192
 20392  00501E  EC32  F02A         	call	i2_lcdInst
 20393                           
 20394                           ;UI.c: 496: printf("2. SORT        <");
 20395  005022  0EC4               	movlw	low STR_34
 20396  005024  6E0D               	movwf	i2printf@f,c
 20397  005026  0EFD               	movlw	high STR_34
 20398  005028  6E0E               	movwf	i2printf@f+1,c
 20399  00502A  ECDE  F00E         	call	i2_printf	;wreg free
 20400  00502E  0012               	return		;funcret
 20401  005030                     __end_ofi2_change_state_to_menu_12:
 20402                           	opt stack 0
 20403                           pclatu	equ	0xFFB
 20404                           pclath	equ	0xFFA
 20405                           tblptru	equ	0xFF8
 20406                           tblptrh	equ	0xFF7
 20407                           tblptrl	equ	0xFF6
 20408                           tablat	equ	0xFF5
 20409                           prodh	equ	0xFF4
 20410                           prodl	equ	0xFF3
 20411                           intcon	equ	0xFF2
 20412                           intcon2	equ	0xFF1
 20413                           intcon3	equ	0xFF0
 20414                           indf0	equ	0xFEF
 20415                           postinc0	equ	0xFEE
 20416                           fsr0h	equ	0xFEA
 20417                           fsr0l	equ	0xFE9
 20418                           wreg	equ	0xFE8
 20419                           postdec1	equ	0xFE5
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           indf2	equ	0xFDF
 20423                           postinc2	equ	0xFDE
 20424                           postdec2	equ	0xFDD
 20425                           fsr2h	equ	0xFDA
 20426                           fsr2l	equ	0xFD9
 20427                           status	equ	0xFD8
 20428                           
 20429 ;; *************** function _change_state_to_menu_23 *****************
 20430 ;; Defined at:
 20431 ;;		line 506 in file "UI.c"
 20432 ;; Parameters:    Size  Location     Type
 20433 ;;		None
 20434 ;; Auto vars:     Size  Location     Type
 20435 ;;		None
 20436 ;; Return value:  Size  Location     Type
 20437 ;;                  1    wreg      void 
 20438 ;; Registers used:
 20439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20440 ;; Tracked objects:
 20441 ;;		On entry : 0/0
 20442 ;;		On exit  : 0/0
 20443 ;;		Unchanged: 0/0
 20444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;Total ram usage:        0 bytes
 20450 ;; Hardware stack levels used:    1
 20451 ;; Hardware stack levels required when called:    3
 20452 ;; This function calls:
 20453 ;;		i2_lcdInst
 20454 ;;		i2_printf
 20455 ;; This function is called by:
 20456 ;;		_updateMenu
 20457 ;;		_inputHandler
 20458 ;; This function uses a non-reentrant model
 20459 ;;
 20460                           
 20461                           	psect	text70
 20462  005030                     __ptext70:
 20463                           	opt stack 0
 20464  005030                     _change_state_to_menu_23:
 20465                           	opt stack 18
 20466                           
 20467                           ;UI.c: 507: cur_state = 23;
 20468                           
 20469                           ;incstack = 0
 20470  005030  0E00               	movlw	0
 20471  005032  0100               	movlb	0	; () banked
 20472  005034  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20473  005036  0E17               	movlw	23
 20474  005038  6FEE               	movwf	_cur_state& (0+255),b
 20475                           
 20476                           ; BSR set to: 0
 20477                           ;UI.c: 509: lcdInst(0b10000000);;
 20478  00503A  0E80               	movlw	128
 20479  00503C  EC32  F02A         	call	i2_lcdInst
 20480                           
 20481                           ;UI.c: 510: printf("2. SORT         ");
 20482  005040  0E1A               	movlw	low STR_32
 20483  005042  6E0D               	movwf	i2printf@f,c
 20484  005044  0EFD               	movlw	high STR_32
 20485  005046  6E0E               	movwf	i2printf@f+1,c
 20486  005048  ECDE  F00E         	call	i2_printf	;wreg free
 20487                           
 20488                           ;UI.c: 511: lcdInst(0b11000000);;
 20489  00504C  0EC0               	movlw	192
 20490  00504E  EC32  F02A         	call	i2_lcdInst
 20491                           
 20492                           ;UI.c: 512: printf("3. LOGS        <");
 20493  005052  0EB3               	movlw	low STR_38
 20494  005054  6E0D               	movwf	i2printf@f,c
 20495  005056  0EFD               	movlw	high STR_38
 20496  005058  6E0E               	movwf	i2printf@f+1,c
 20497  00505A  ECDE  F00E         	call	i2_printf	;wreg free
 20498  00505E  0012               	return		;funcret
 20499  005060                     __end_of_change_state_to_menu_23:
 20500                           	opt stack 0
 20501                           pclatu	equ	0xFFB
 20502                           pclath	equ	0xFFA
 20503                           tblptru	equ	0xFF8
 20504                           tblptrh	equ	0xFF7
 20505                           tblptrl	equ	0xFF6
 20506                           tablat	equ	0xFF5
 20507                           prodh	equ	0xFF4
 20508                           prodl	equ	0xFF3
 20509                           intcon	equ	0xFF2
 20510                           intcon2	equ	0xFF1
 20511                           intcon3	equ	0xFF0
 20512                           indf0	equ	0xFEF
 20513                           postinc0	equ	0xFEE
 20514                           fsr0h	equ	0xFEA
 20515                           fsr0l	equ	0xFE9
 20516                           wreg	equ	0xFE8
 20517                           postdec1	equ	0xFE5
 20518                           fsr1h	equ	0xFE2
 20519                           fsr1l	equ	0xFE1
 20520                           indf2	equ	0xFDF
 20521                           postinc2	equ	0xFDE
 20522                           postdec2	equ	0xFDD
 20523                           fsr2h	equ	0xFDA
 20524                           fsr2l	equ	0xFD9
 20525                           status	equ	0xFD8
 20526                           
 20527 ;; *************** function _change_state_to_menu_11 *****************
 20528 ;; Defined at:
 20529 ;;		line 482 in file "UI.c"
 20530 ;; Parameters:    Size  Location     Type
 20531 ;;		None
 20532 ;; Auto vars:     Size  Location     Type
 20533 ;;		None
 20534 ;; Return value:  Size  Location     Type
 20535 ;;                  1    wreg      void 
 20536 ;; Registers used:
 20537 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20538 ;; Tracked objects:
 20539 ;;		On entry : 0/0
 20540 ;;		On exit  : 0/0
 20541 ;;		Unchanged: 0/0
 20542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20547 ;;Total ram usage:        0 bytes
 20548 ;; Hardware stack levels used:    1
 20549 ;; Hardware stack levels required when called:    3
 20550 ;; This function calls:
 20551 ;;		i2_lcdInst
 20552 ;;		i2_printf
 20553 ;; This function is called by:
 20554 ;;		_updateMenu
 20555 ;;		_inputHandler
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           	psect	text71
 20560  005060                     __ptext71:
 20561                           	opt stack 0
 20562  005060                     _change_state_to_menu_11:
 20563                           	opt stack 18
 20564                           
 20565                           ;UI.c: 483: cur_state = 11;
 20566                           
 20567                           ;incstack = 0
 20568  005060  0E00               	movlw	0
 20569  005062  0100               	movlb	0	; () banked
 20570  005064  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20571  005066  0E0B               	movlw	11
 20572  005068  6FEE               	movwf	_cur_state& (0+255),b
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;UI.c: 485: lcdInst(0b10000000);;
 20576  00506A  0E80               	movlw	128
 20577  00506C  EC32  F02A         	call	i2_lcdInst
 20578                           
 20579                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20580  005070  0ED5               	movlw	low STR_31
 20581  005072  6E0D               	movwf	i2printf@f,c
 20582  005074  0EFD               	movlw	high STR_31
 20583  005076  6E0E               	movwf	i2printf@f+1,c
 20584  005078  ECDE  F00E         	call	i2_printf	;wreg free
 20585                           
 20586                           ;UI.c: 487: lcdInst(0b11000000);;
 20587  00507C  0EC0               	movlw	192
 20588  00507E  EC32  F02A         	call	i2_lcdInst
 20589                           
 20590                           ;UI.c: 488: printf("2. SORT         ");
 20591  005082  0E1A               	movlw	low STR_32
 20592  005084  6E0D               	movwf	i2printf@f,c
 20593  005086  0EFD               	movlw	high STR_32
 20594  005088  6E0E               	movwf	i2printf@f+1,c
 20595  00508A  ECDE  F00E         	call	i2_printf	;wreg free
 20596  00508E  0012               	return		;funcret
 20597  005090                     __end_of_change_state_to_menu_11:
 20598                           	opt stack 0
 20599                           pclatu	equ	0xFFB
 20600                           pclath	equ	0xFFA
 20601                           tblptru	equ	0xFF8
 20602                           tblptrh	equ	0xFF7
 20603                           tblptrl	equ	0xFF6
 20604                           tablat	equ	0xFF5
 20605                           prodh	equ	0xFF4
 20606                           prodl	equ	0xFF3
 20607                           intcon	equ	0xFF2
 20608                           intcon2	equ	0xFF1
 20609                           intcon3	equ	0xFF0
 20610                           indf0	equ	0xFEF
 20611                           postinc0	equ	0xFEE
 20612                           fsr0h	equ	0xFEA
 20613                           fsr0l	equ	0xFE9
 20614                           wreg	equ	0xFE8
 20615                           postdec1	equ	0xFE5
 20616                           fsr1h	equ	0xFE2
 20617                           fsr1l	equ	0xFE1
 20618                           indf2	equ	0xFDF
 20619                           postinc2	equ	0xFDE
 20620                           postdec2	equ	0xFDD
 20621                           fsr2h	equ	0xFDA
 20622                           fsr2l	equ	0xFD9
 20623                           status	equ	0xFD8
 20624                           
 20625 ;; *************** function _change_state_to_logs_34 *****************
 20626 ;; Defined at:
 20627 ;;		line 549 in file "UI.c"
 20628 ;; Parameters:    Size  Location     Type
 20629 ;;		None
 20630 ;; Auto vars:     Size  Location     Type
 20631 ;;		None
 20632 ;; Return value:  Size  Location     Type
 20633 ;;                  1    wreg      void 
 20634 ;; Registers used:
 20635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20636 ;; Tracked objects:
 20637 ;;		On entry : 0/0
 20638 ;;		On exit  : 0/0
 20639 ;;		Unchanged: 0/0
 20640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20645 ;;Total ram usage:        0 bytes
 20646 ;; Hardware stack levels used:    1
 20647 ;; Hardware stack levels required when called:    3
 20648 ;; This function calls:
 20649 ;;		i2_lcdInst
 20650 ;;		i2_printf
 20651 ;; This function is called by:
 20652 ;;		_updateMenu
 20653 ;;		_inputHandler
 20654 ;; This function uses a non-reentrant model
 20655 ;;
 20656                           
 20657                           	psect	text72
 20658  005090                     __ptext72:
 20659                           	opt stack 0
 20660  005090                     _change_state_to_logs_34:
 20661                           	opt stack 18
 20662                           
 20663                           ;UI.c: 550: cur_state = 1034;
 20664                           
 20665                           ;incstack = 0
 20666  005090  0E04               	movlw	4
 20667  005092  0100               	movlb	0	; () banked
 20668  005094  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20669  005096  0E0A               	movlw	10
 20670  005098  6FEE               	movwf	_cur_state& (0+255),b
 20671                           
 20672                           ; BSR set to: 0
 20673                           ;UI.c: 551: lcdInst(0b10000000);;
 20674  00509A  0E80               	movlw	128
 20675  00509C  EC32  F02A         	call	i2_lcdInst
 20676                           
 20677                           ;UI.c: 552: printf("LOG 3           ");
 20678  0050A0  0EE7               	movlw	low STR_44
 20679  0050A2  6E0D               	movwf	i2printf@f,c
 20680  0050A4  0EFC               	movlw	high STR_44
 20681  0050A6  6E0E               	movwf	i2printf@f+1,c
 20682  0050A8  ECDE  F00E         	call	i2_printf	;wreg free
 20683                           
 20684                           ;UI.c: 553: lcdInst(0b11000000);;
 20685  0050AC  0EC0               	movlw	192
 20686  0050AE  EC32  F02A         	call	i2_lcdInst
 20687                           
 20688                           ;UI.c: 554: printf("LOG 4          <");
 20689  0050B2  0EA2               	movlw	low STR_50
 20690  0050B4  6E0D               	movwf	i2printf@f,c
 20691  0050B6  0EFD               	movlw	high STR_50
 20692  0050B8  6E0E               	movwf	i2printf@f+1,c
 20693  0050BA  ECDE  F00E         	call	i2_printf	;wreg free
 20694  0050BE  0012               	return		;funcret
 20695  0050C0                     __end_of_change_state_to_logs_34:
 20696                           	opt stack 0
 20697                           pclatu	equ	0xFFB
 20698                           pclath	equ	0xFFA
 20699                           tblptru	equ	0xFF8
 20700                           tblptrh	equ	0xFF7
 20701                           tblptrl	equ	0xFF6
 20702                           tablat	equ	0xFF5
 20703                           prodh	equ	0xFF4
 20704                           prodl	equ	0xFF3
 20705                           intcon	equ	0xFF2
 20706                           intcon2	equ	0xFF1
 20707                           intcon3	equ	0xFF0
 20708                           indf0	equ	0xFEF
 20709                           postinc0	equ	0xFEE
 20710                           fsr0h	equ	0xFEA
 20711                           fsr0l	equ	0xFE9
 20712                           wreg	equ	0xFE8
 20713                           postdec1	equ	0xFE5
 20714                           fsr1h	equ	0xFE2
 20715                           fsr1l	equ	0xFE1
 20716                           indf2	equ	0xFDF
 20717                           postinc2	equ	0xFDE
 20718                           postdec2	equ	0xFDD
 20719                           fsr2h	equ	0xFDA
 20720                           fsr2l	equ	0xFD9
 20721                           status	equ	0xFD8
 20722                           
 20723 ;; *************** function _change_state_to_logs_33 *****************
 20724 ;; Defined at:
 20725 ;;		line 542 in file "UI.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;		None
 20728 ;; Auto vars:     Size  Location     Type
 20729 ;;		None
 20730 ;; Return value:  Size  Location     Type
 20731 ;;                  1    wreg      void 
 20732 ;; Registers used:
 20733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20734 ;; Tracked objects:
 20735 ;;		On entry : 0/0
 20736 ;;		On exit  : 0/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20743 ;;Total ram usage:        0 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; Hardware stack levels required when called:    3
 20746 ;; This function calls:
 20747 ;;		i2_lcdInst
 20748 ;;		i2_printf
 20749 ;; This function is called by:
 20750 ;;		_updateMenu
 20751 ;;		_inputHandler
 20752 ;; This function uses a non-reentrant model
 20753 ;;
 20754                           
 20755                           	psect	text73
 20756  0050C0                     __ptext73:
 20757                           	opt stack 0
 20758  0050C0                     _change_state_to_logs_33:
 20759                           	opt stack 18
 20760                           
 20761                           ;UI.c: 543: cur_state = 1033;
 20762                           
 20763                           ;incstack = 0
 20764  0050C0  0E04               	movlw	4
 20765  0050C2  0100               	movlb	0	; () banked
 20766  0050C4  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20767  0050C6  0E09               	movlw	9
 20768  0050C8  6FEE               	movwf	_cur_state& (0+255),b
 20769                           
 20770                           ; BSR set to: 0
 20771                           ;UI.c: 544: lcdInst(0b10000000);;
 20772  0050CA  0E80               	movlw	128
 20773  0050CC  EC32  F02A         	call	i2_lcdInst
 20774                           
 20775                           ;UI.c: 545: printf("LOG 3          <");
 20776  0050D0  0E91               	movlw	low STR_46
 20777  0050D2  6E0D               	movwf	i2printf@f,c
 20778  0050D4  0EFD               	movlw	high STR_46
 20779  0050D6  6E0E               	movwf	i2printf@f+1,c
 20780  0050D8  ECDE  F00E         	call	i2_printf	;wreg free
 20781                           
 20782                           ;UI.c: 546: lcdInst(0b11000000);;
 20783  0050DC  0EC0               	movlw	192
 20784  0050DE  EC32  F02A         	call	i2_lcdInst
 20785                           
 20786                           ;UI.c: 547: printf("LOG 4           ");
 20787  0050E2  0EF8               	movlw	low STR_48
 20788  0050E4  6E0D               	movwf	i2printf@f,c
 20789  0050E6  0EFC               	movlw	high STR_48
 20790  0050E8  6E0E               	movwf	i2printf@f+1,c
 20791  0050EA  ECDE  F00E         	call	i2_printf	;wreg free
 20792  0050EE  0012               	return		;funcret
 20793  0050F0                     __end_of_change_state_to_logs_33:
 20794                           	opt stack 0
 20795                           pclatu	equ	0xFFB
 20796                           pclath	equ	0xFFA
 20797                           tblptru	equ	0xFF8
 20798                           tblptrh	equ	0xFF7
 20799                           tblptrl	equ	0xFF6
 20800                           tablat	equ	0xFF5
 20801                           prodh	equ	0xFF4
 20802                           prodl	equ	0xFF3
 20803                           intcon	equ	0xFF2
 20804                           intcon2	equ	0xFF1
 20805                           intcon3	equ	0xFF0
 20806                           indf0	equ	0xFEF
 20807                           postinc0	equ	0xFEE
 20808                           fsr0h	equ	0xFEA
 20809                           fsr0l	equ	0xFE9
 20810                           wreg	equ	0xFE8
 20811                           postdec1	equ	0xFE5
 20812                           fsr1h	equ	0xFE2
 20813                           fsr1l	equ	0xFE1
 20814                           indf2	equ	0xFDF
 20815                           postinc2	equ	0xFDE
 20816                           postdec2	equ	0xFDD
 20817                           fsr2h	equ	0xFDA
 20818                           fsr2l	equ	0xFD9
 20819                           status	equ	0xFD8
 20820                           
 20821 ;; *************** function _change_state_to_logs_23 *****************
 20822 ;; Defined at:
 20823 ;;		line 535 in file "UI.c"
 20824 ;; Parameters:    Size  Location     Type
 20825 ;;		None
 20826 ;; Auto vars:     Size  Location     Type
 20827 ;;		None
 20828 ;; Return value:  Size  Location     Type
 20829 ;;                  1    wreg      void 
 20830 ;; Registers used:
 20831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20832 ;; Tracked objects:
 20833 ;;		On entry : 0/0
 20834 ;;		On exit  : 0/0
 20835 ;;		Unchanged: 0/0
 20836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20841 ;;Total ram usage:        0 bytes
 20842 ;; Hardware stack levels used:    1
 20843 ;; Hardware stack levels required when called:    3
 20844 ;; This function calls:
 20845 ;;		i2_lcdInst
 20846 ;;		i2_printf
 20847 ;; This function is called by:
 20848 ;;		_updateMenu
 20849 ;;		_inputHandler
 20850 ;; This function uses a non-reentrant model
 20851 ;;
 20852                           
 20853                           	psect	text74
 20854  0051DC                     __ptext74:
 20855                           	opt stack 0
 20856  0051DC                     _change_state_to_logs_23:
 20857                           	opt stack 18
 20858                           
 20859                           ;UI.c: 536: cur_state = 1023;
 20860                           
 20861                           ;incstack = 0
 20862  0051DC  0E03               	movlw	3
 20863  0051DE  0100               	movlb	0	; () banked
 20864  0051E0  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20865  0051E2  69EE               	setf	_cur_state& (0+255),b
 20866                           
 20867                           ; BSR set to: 0
 20868                           ;UI.c: 537: lcdInst(0b10000000);;
 20869  0051E4  0E80               	movlw	128
 20870  0051E6  EC32  F02A         	call	i2_lcdInst
 20871                           
 20872                           ;UI.c: 538: printf("LOG 2           ");
 20873  0051EA  0ED6               	movlw	low STR_40
 20874  0051EC  6E0D               	movwf	i2printf@f,c
 20875  0051EE  0EFC               	movlw	high STR_40
 20876  0051F0  6E0E               	movwf	i2printf@f+1,c
 20877  0051F2  ECDE  F00E         	call	i2_printf	;wreg free
 20878                           
 20879                           ;UI.c: 539: lcdInst(0b11000000);;
 20880  0051F6  0EC0               	movlw	192
 20881  0051F8  EC32  F02A         	call	i2_lcdInst
 20882                           
 20883                           ;UI.c: 540: printf("LOG 3          <");
 20884  0051FC  0E91               	movlw	low STR_46
 20885  0051FE  6E0D               	movwf	i2printf@f,c
 20886  005200  0EFD               	movlw	high STR_46
 20887  005202  6E0E               	movwf	i2printf@f+1,c
 20888  005204  ECDE  F00E         	call	i2_printf	;wreg free
 20889  005208  0012               	return		;funcret
 20890  00520A                     __end_of_change_state_to_logs_23:
 20891                           	opt stack 0
 20892                           pclatu	equ	0xFFB
 20893                           pclath	equ	0xFFA
 20894                           tblptru	equ	0xFF8
 20895                           tblptrh	equ	0xFF7
 20896                           tblptrl	equ	0xFF6
 20897                           tablat	equ	0xFF5
 20898                           prodh	equ	0xFF4
 20899                           prodl	equ	0xFF3
 20900                           intcon	equ	0xFF2
 20901                           intcon2	equ	0xFF1
 20902                           intcon3	equ	0xFF0
 20903                           indf0	equ	0xFEF
 20904                           postinc0	equ	0xFEE
 20905                           fsr0h	equ	0xFEA
 20906                           fsr0l	equ	0xFE9
 20907                           wreg	equ	0xFE8
 20908                           postdec1	equ	0xFE5
 20909                           fsr1h	equ	0xFE2
 20910                           fsr1l	equ	0xFE1
 20911                           indf2	equ	0xFDF
 20912                           postinc2	equ	0xFDE
 20913                           postdec2	equ	0xFDD
 20914                           fsr2h	equ	0xFDA
 20915                           fsr2l	equ	0xFD9
 20916                           status	equ	0xFD8
 20917                           
 20918 ;; *************** function _change_state_to_logs_22 *****************
 20919 ;; Defined at:
 20920 ;;		line 528 in file "UI.c"
 20921 ;; Parameters:    Size  Location     Type
 20922 ;;		None
 20923 ;; Auto vars:     Size  Location     Type
 20924 ;;		None
 20925 ;; Return value:  Size  Location     Type
 20926 ;;                  1    wreg      void 
 20927 ;; Registers used:
 20928 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20929 ;; Tracked objects:
 20930 ;;		On entry : 0/0
 20931 ;;		On exit  : 0/0
 20932 ;;		Unchanged: 0/0
 20933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20938 ;;Total ram usage:        0 bytes
 20939 ;; Hardware stack levels used:    1
 20940 ;; Hardware stack levels required when called:    3
 20941 ;; This function calls:
 20942 ;;		i2_lcdInst
 20943 ;;		i2_printf
 20944 ;; This function is called by:
 20945 ;;		_updateMenu
 20946 ;;		_inputHandler
 20947 ;; This function uses a non-reentrant model
 20948 ;;
 20949                           
 20950                           	psect	text75
 20951  0050F0                     __ptext75:
 20952                           	opt stack 0
 20953  0050F0                     _change_state_to_logs_22:
 20954                           	opt stack 18
 20955                           
 20956                           ;UI.c: 529: cur_state = 1022;
 20957                           
 20958                           ;incstack = 0
 20959  0050F0  0E03               	movlw	3
 20960  0050F2  0100               	movlb	0	; () banked
 20961  0050F4  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20962  0050F6  0EFE               	movlw	254
 20963  0050F8  6FEE               	movwf	_cur_state& (0+255),b
 20964                           
 20965                           ; BSR set to: 0
 20966                           ;UI.c: 530: lcdInst(0b10000000);;
 20967  0050FA  0E80               	movlw	128
 20968  0050FC  EC32  F02A         	call	i2_lcdInst
 20969                           
 20970                           ;UI.c: 531: printf("LOG 2          <");
 20971  005100  0E80               	movlw	low STR_42
 20972  005102  6E0D               	movwf	i2printf@f,c
 20973  005104  0EFD               	movlw	high STR_42
 20974  005106  6E0E               	movwf	i2printf@f+1,c
 20975  005108  ECDE  F00E         	call	i2_printf	;wreg free
 20976                           
 20977                           ;UI.c: 532: lcdInst(0b11000000);;
 20978  00510C  0EC0               	movlw	192
 20979  00510E  EC32  F02A         	call	i2_lcdInst
 20980                           
 20981                           ;UI.c: 533: printf("LOG 3           ");
 20982  005112  0EE7               	movlw	low STR_44
 20983  005114  6E0D               	movwf	i2printf@f,c
 20984  005116  0EFC               	movlw	high STR_44
 20985  005118  6E0E               	movwf	i2printf@f+1,c
 20986  00511A  ECDE  F00E         	call	i2_printf	;wreg free
 20987  00511E  0012               	return		;funcret
 20988  005120                     __end_of_change_state_to_logs_22:
 20989                           	opt stack 0
 20990                           pclatu	equ	0xFFB
 20991                           pclath	equ	0xFFA
 20992                           tblptru	equ	0xFF8
 20993                           tblptrh	equ	0xFF7
 20994                           tblptrl	equ	0xFF6
 20995                           tablat	equ	0xFF5
 20996                           prodh	equ	0xFF4
 20997                           prodl	equ	0xFF3
 20998                           intcon	equ	0xFF2
 20999                           intcon2	equ	0xFF1
 21000                           intcon3	equ	0xFF0
 21001                           indf0	equ	0xFEF
 21002                           postinc0	equ	0xFEE
 21003                           fsr0h	equ	0xFEA
 21004                           fsr0l	equ	0xFE9
 21005                           wreg	equ	0xFE8
 21006                           postdec1	equ	0xFE5
 21007                           fsr1h	equ	0xFE2
 21008                           fsr1l	equ	0xFE1
 21009                           indf2	equ	0xFDF
 21010                           postinc2	equ	0xFDE
 21011                           postdec2	equ	0xFDD
 21012                           fsr2h	equ	0xFDA
 21013                           fsr2l	equ	0xFD9
 21014                           status	equ	0xFD8
 21015                           
 21016 ;; *************** function _change_state_to_logs_12 *****************
 21017 ;; Defined at:
 21018 ;;		line 521 in file "UI.c"
 21019 ;; Parameters:    Size  Location     Type
 21020 ;;		None
 21021 ;; Auto vars:     Size  Location     Type
 21022 ;;		None
 21023 ;; Return value:  Size  Location     Type
 21024 ;;                  1    wreg      void 
 21025 ;; Registers used:
 21026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21027 ;; Tracked objects:
 21028 ;;		On entry : 0/0
 21029 ;;		On exit  : 0/0
 21030 ;;		Unchanged: 0/0
 21031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21036 ;;Total ram usage:        0 bytes
 21037 ;; Hardware stack levels used:    1
 21038 ;; Hardware stack levels required when called:    3
 21039 ;; This function calls:
 21040 ;;		i2_lcdInst
 21041 ;;		i2_printf
 21042 ;; This function is called by:
 21043 ;;		_updateMenu
 21044 ;;		_inputHandler
 21045 ;; This function uses a non-reentrant model
 21046 ;;
 21047                           
 21048                           	psect	text76
 21049  005120                     __ptext76:
 21050                           	opt stack 0
 21051  005120                     _change_state_to_logs_12:
 21052                           	opt stack 18
 21053                           
 21054                           ;UI.c: 522: cur_state = 1012;
 21055                           
 21056                           ;incstack = 0
 21057  005120  0E03               	movlw	3
 21058  005122  0100               	movlb	0	; () banked
 21059  005124  6FEF               	movwf	(_cur_state+1)& (0+255),b
 21060  005126  0EF4               	movlw	244
 21061  005128  6FEE               	movwf	_cur_state& (0+255),b
 21062                           
 21063                           ; BSR set to: 0
 21064                           ;UI.c: 523: lcdInst(0b10000000);;
 21065  00512A  0E80               	movlw	128
 21066  00512C  EC32  F02A         	call	i2_lcdInst
 21067                           
 21068                           ;UI.c: 524: printf("LOG 1           ");
 21069  005130  0EC5               	movlw	low STR_41
 21070  005132  6E0D               	movwf	i2printf@f,c
 21071  005134  0EFC               	movlw	high STR_41
 21072  005136  6E0E               	movwf	i2printf@f+1,c
 21073  005138  ECDE  F00E         	call	i2_printf	;wreg free
 21074                           
 21075                           ;UI.c: 525: lcdInst(0b11000000);;
 21076  00513C  0EC0               	movlw	192
 21077  00513E  EC32  F02A         	call	i2_lcdInst
 21078                           
 21079                           ;UI.c: 526: printf("LOG 2          <");
 21080  005142  0E80               	movlw	low STR_42
 21081  005144  6E0D               	movwf	i2printf@f,c
 21082  005146  0EFD               	movlw	high STR_42
 21083  005148  6E0E               	movwf	i2printf@f+1,c
 21084  00514A  ECDE  F00E         	call	i2_printf	;wreg free
 21085  00514E  0012               	return		;funcret
 21086  005150                     __end_of_change_state_to_logs_12:
 21087                           	opt stack 0
 21088                           pclatu	equ	0xFFB
 21089                           pclath	equ	0xFFA
 21090                           tblptru	equ	0xFF8
 21091                           tblptrh	equ	0xFF7
 21092                           tblptrl	equ	0xFF6
 21093                           tablat	equ	0xFF5
 21094                           prodh	equ	0xFF4
 21095                           prodl	equ	0xFF3
 21096                           intcon	equ	0xFF2
 21097                           intcon2	equ	0xFF1
 21098                           intcon3	equ	0xFF0
 21099                           indf0	equ	0xFEF
 21100                           postinc0	equ	0xFEE
 21101                           fsr0h	equ	0xFEA
 21102                           fsr0l	equ	0xFE9
 21103                           wreg	equ	0xFE8
 21104                           postdec1	equ	0xFE5
 21105                           fsr1h	equ	0xFE2
 21106                           fsr1l	equ	0xFE1
 21107                           indf2	equ	0xFDF
 21108                           postinc2	equ	0xFDE
 21109                           postdec2	equ	0xFDD
 21110                           fsr2h	equ	0xFDA
 21111                           fsr2l	equ	0xFD9
 21112                           status	equ	0xFD8
 21113                           
 21114 ;; *************** function _change_state_to_logs_11 *****************
 21115 ;; Defined at:
 21116 ;;		line 514 in file "UI.c"
 21117 ;; Parameters:    Size  Location     Type
 21118 ;;		None
 21119 ;; Auto vars:     Size  Location     Type
 21120 ;;		None
 21121 ;; Return value:  Size  Location     Type
 21122 ;;                  1    wreg      void 
 21123 ;; Registers used:
 21124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21125 ;; Tracked objects:
 21126 ;;		On entry : 0/0
 21127 ;;		On exit  : 0/0
 21128 ;;		Unchanged: 0/0
 21129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21134 ;;Total ram usage:        0 bytes
 21135 ;; Hardware stack levels used:    1
 21136 ;; Hardware stack levels required when called:    3
 21137 ;; This function calls:
 21138 ;;		i2_lcdInst
 21139 ;;		i2_printf
 21140 ;; This function is called by:
 21141 ;;		_updateMenu
 21142 ;;		_inputHandler
 21143 ;; This function uses a non-reentrant model
 21144 ;;
 21145                           
 21146                           	psect	text77
 21147  005150                     __ptext77:
 21148                           	opt stack 0
 21149  005150                     _change_state_to_logs_11:
 21150                           	opt stack 18
 21151                           
 21152                           ;UI.c: 515: cur_state = 1011;
 21153                           
 21154                           ;incstack = 0
 21155  005150  0E03               	movlw	3
 21156  005152  0100               	movlb	0	; () banked
 21157  005154  6FEF               	movwf	(_cur_state+1)& (0+255),b
 21158  005156  0EF3               	movlw	243
 21159  005158  6FEE               	movwf	_cur_state& (0+255),b
 21160                           
 21161                           ; BSR set to: 0
 21162                           ;UI.c: 516: lcdInst(0b10000000);;
 21163  00515A  0E80               	movlw	128
 21164  00515C  EC32  F02A         	call	i2_lcdInst
 21165                           
 21166                           ;UI.c: 517: printf("LOG 1          <");
 21167  005160  0E6F               	movlw	low STR_39
 21168  005162  6E0D               	movwf	i2printf@f,c
 21169  005164  0EFD               	movlw	high STR_39
 21170  005166  6E0E               	movwf	i2printf@f+1,c
 21171  005168  ECDE  F00E         	call	i2_printf	;wreg free
 21172                           
 21173                           ;UI.c: 518: lcdInst(0b11000000);;
 21174  00516C  0EC0               	movlw	192
 21175  00516E  EC32  F02A         	call	i2_lcdInst
 21176                           
 21177                           ;UI.c: 519: printf("LOG 2           ");
 21178  005172  0ED6               	movlw	low STR_40
 21179  005174  6E0D               	movwf	i2printf@f,c
 21180  005176  0EFC               	movlw	high STR_40
 21181  005178  6E0E               	movwf	i2printf@f+1,c
 21182  00517A  ECDE  F00E         	call	i2_printf	;wreg free
 21183  00517E  0012               	return		;funcret
 21184  005180                     __end_of_change_state_to_logs_11:
 21185                           	opt stack 0
 21186                           pclatu	equ	0xFFB
 21187                           pclath	equ	0xFFA
 21188                           tblptru	equ	0xFF8
 21189                           tblptrh	equ	0xFF7
 21190                           tblptrl	equ	0xFF6
 21191                           tablat	equ	0xFF5
 21192                           prodh	equ	0xFF4
 21193                           prodl	equ	0xFF3
 21194                           intcon	equ	0xFF2
 21195                           intcon2	equ	0xFF1
 21196                           intcon3	equ	0xFF0
 21197                           indf0	equ	0xFEF
 21198                           postinc0	equ	0xFEE
 21199                           fsr0h	equ	0xFEA
 21200                           fsr0l	equ	0xFE9
 21201                           wreg	equ	0xFE8
 21202                           postdec1	equ	0xFE5
 21203                           fsr1h	equ	0xFE2
 21204                           fsr1l	equ	0xFE1
 21205                           indf2	equ	0xFDF
 21206                           postinc2	equ	0xFDE
 21207                           postdec2	equ	0xFDD
 21208                           fsr2h	equ	0xFDA
 21209                           fsr2l	equ	0xFD9
 21210                           status	equ	0xFD8
 21211                           
 21212 ;; *************** function _dispLogs *****************
 21213 ;; Defined at:
 21214 ;;		line 467 in file "UI.c"
 21215 ;; Parameters:    Size  Location     Type
 21216 ;;  myLog           2   17[COMRAM] int 
 21217 ;; Auto vars:     Size  Location     Type
 21218 ;;		None
 21219 ;; Return value:  Size  Location     Type
 21220 ;;                  1    wreg      void 
 21221 ;; Registers used:
 21222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21223 ;; Tracked objects:
 21224 ;;		On entry : 0/0
 21225 ;;		On exit  : 0/0
 21226 ;;		Unchanged: 0/0
 21227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21232 ;;Total ram usage:        2 bytes
 21233 ;; Hardware stack levels used:    1
 21234 ;; Hardware stack levels required when called:    2
 21235 ;; This function calls:
 21236 ;;		_retrieveLog
 21237 ;; This function is called by:
 21238 ;;		_updateMenu
 21239 ;; This function uses a non-reentrant model
 21240 ;;
 21241                           
 21242                           	psect	text78
 21243  005328                     __ptext78:
 21244                           	opt stack 0
 21245  005328                     _dispLogs:
 21246                           	opt stack 20
 21247                           
 21248                           ;UI.c: 468: logstate = 1;
 21249                           
 21250                           ;incstack = 0
 21251  005328  0E00               	movlw	0
 21252  00532A  0100               	movlb	0	; () banked
 21253  00532C  6FF9               	movwf	(_logstate+1)& (0+255),b
 21254  00532E  0E01               	movlw	1
 21255  005330  6FF8               	movwf	_logstate& (0+255),b
 21256                           
 21257                           ; BSR set to: 0
 21258                           ;UI.c: 469: log = myLog;
 21259  005332  C012  F0F4         	movff	dispLogs@myLog,_log
 21260  005336  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21261                           
 21262                           ; BSR set to: 0
 21263                           ;UI.c: 470: retrieveLog(myLog - 1);
 21264  00533A  0EFF               	movlw	255
 21265  00533C  2412               	addwf	dispLogs@myLog,w,c
 21266  00533E  6E07               	movwf	retrieveLog@logNum,c
 21267  005340  0EFF               	movlw	255
 21268  005342  2013               	addwfc	dispLogs@myLog+1,w,c
 21269  005344  6E08               	movwf	retrieveLog@logNum+1,c
 21270  005346  ECAD  F01E         	call	_retrieveLog	;wreg free
 21271  00534A  0012               	return		;funcret
 21272  00534C                     __end_of_dispLogs:
 21273                           	opt stack 0
 21274                           pclatu	equ	0xFFB
 21275                           pclath	equ	0xFFA
 21276                           tblptru	equ	0xFF8
 21277                           tblptrh	equ	0xFF7
 21278                           tblptrl	equ	0xFF6
 21279                           tablat	equ	0xFF5
 21280                           prodh	equ	0xFF4
 21281                           prodl	equ	0xFF3
 21282                           intcon	equ	0xFF2
 21283                           intcon2	equ	0xFF1
 21284                           intcon3	equ	0xFF0
 21285                           indf0	equ	0xFEF
 21286                           postinc0	equ	0xFEE
 21287                           fsr0h	equ	0xFEA
 21288                           fsr0l	equ	0xFE9
 21289                           wreg	equ	0xFE8
 21290                           postdec1	equ	0xFE5
 21291                           fsr1h	equ	0xFE2
 21292                           fsr1l	equ	0xFE1
 21293                           indf2	equ	0xFDF
 21294                           postinc2	equ	0xFDE
 21295                           postdec2	equ	0xFDD
 21296                           fsr2h	equ	0xFDA
 21297                           fsr2l	equ	0xFD9
 21298                           status	equ	0xFD8
 21299                           
 21300 ;; *************** function _retrieveLog *****************
 21301 ;; Defined at:
 21302 ;;		line 134 in file "EEPROM.c"
 21303 ;; Parameters:    Size  Location     Type
 21304 ;;  logNum          2    6[COMRAM] int 
 21305 ;; Auto vars:     Size  Location     Type
 21306 ;;  i               2   13[COMRAM] int 
 21307 ;;  addr            2   15[COMRAM] unsigned short 
 21308 ;;  byte3           1   12[COMRAM] unsigned char 
 21309 ;;  byte2           1   11[COMRAM] unsigned char 
 21310 ;;  byte1           1   10[COMRAM] unsigned char 
 21311 ;; Return value:  Size  Location     Type
 21312 ;;                  1    wreg      void 
 21313 ;; Registers used:
 21314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21315 ;; Tracked objects:
 21316 ;;		On entry : 0/0
 21317 ;;		On exit  : 0/0
 21318 ;;		Unchanged: 0/0
 21319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21321 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21323 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21324 ;;Total ram usage:       11 bytes
 21325 ;; Hardware stack levels used:    1
 21326 ;; Hardware stack levels required when called:    1
 21327 ;; This function calls:
 21328 ;;		i2_EEPROM_read
 21329 ;;		i2___wmul
 21330 ;; This function is called by:
 21331 ;;		_dispLogs
 21332 ;; This function uses a non-reentrant model
 21333 ;;
 21334                           
 21335                           	psect	text79
 21336  003D5A                     __ptext79:
 21337                           	opt stack 0
 21338  003D5A                     _retrieveLog:
 21339                           	opt stack 20
 21340                           
 21341                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21342                           
 21343                           ;incstack = 0
 21344  003D5A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21345  003D5E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21346  003D62  0E00               	movlw	0
 21347  003D64  6E04               	movwf	i2___wmul@multiplicand+1,c
 21348  003D66  0E0B               	movlw	11
 21349  003D68  6E03               	movwf	i2___wmul@multiplicand,c
 21350  003D6A  EC6E  F029         	call	i2___wmul	;wreg free
 21351  003D6E  0E01               	movlw	1
 21352  003D70  2401               	addwf	?i2___wmul,w,c
 21353  003D72  6E10               	movwf	retrieveLog@addr,c
 21354  003D74  0E00               	movlw	0
 21355  003D76  2002               	addwfc	?i2___wmul+1,w,c
 21356  003D78  6E11               	movwf	retrieveLog@addr+1,c
 21357                           
 21358                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21359  003D7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21360  003D7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21361  003D82  ECFE  F029         	call	i2_EEPROM_read	;wreg free
 21362  003D86  6E0B               	movwf	retrieveLog@byte1,c
 21363                           
 21364                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21365  003D88  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21366  003D8C  0E80               	movlw	128
 21367  003D8E  1609               	andwf	??_retrieveLog,f,c
 21368  003D90  5009               	movf	??_retrieveLog,w,c
 21369  003D92  6E65               	movwf	_log_completion,c
 21370  003D94  6A66               	clrf	_log_completion+1,c
 21371                           
 21372                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21373  003D96  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21374  003D9A  0E0F               	movlw	15
 21375  003D9C  1609               	andwf	??_retrieveLog,f,c
 21376  003D9E  5009               	movf	??_retrieveLog,w,c
 21377  003DA0  6E6F               	movwf	_log_count_total,c
 21378  003DA2  6A70               	clrf	_log_count_total+1,c
 21379                           
 21380                           ;EEPROM.c: 146: addr++;
 21381  003DA4  4A10               	infsnz	retrieveLog@addr,f,c
 21382  003DA6  2A11               	incf	retrieveLog@addr+1,f,c
 21383                           
 21384                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21385  003DA8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21386  003DAC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21387  003DB0  ECFE  F029         	call	i2_EEPROM_read	;wreg free
 21388  003DB4  6E0C               	movwf	retrieveLog@byte2,c
 21389                           
 21390                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21391  003DB6  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21392  003DBA  3A09               	swapf	??_retrieveLog,f,c
 21393  003DBC  0E0F               	movlw	15
 21394  003DBE  1609               	andwf	??_retrieveLog,f,c
 21395  003DC0  0E0F               	movlw	15
 21396  003DC2  1609               	andwf	??_retrieveLog,f,c
 21397  003DC4  5009               	movf	??_retrieveLog,w,c
 21398  003DC6  6E6B               	movwf	_log_count_pop_no_tab,c
 21399  003DC8  6A6C               	clrf	_log_count_pop_no_tab+1,c
 21400                           
 21401                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21402  003DCA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21403  003DCE  0E0F               	movlw	15
 21404  003DD0  1609               	andwf	??_retrieveLog,f,c
 21405  003DD2  5009               	movf	??_retrieveLog,w,c
 21406  003DD4  6E6D               	movwf	_log_count_pop_w_tab,c
 21407  003DD6  6A6E               	clrf	_log_count_pop_w_tab+1,c
 21408                           
 21409                           ;EEPROM.c: 152: addr++;
 21410  003DD8  4A10               	infsnz	retrieveLog@addr,f,c
 21411  003DDA  2A11               	incf	retrieveLog@addr+1,f,c
 21412                           
 21413                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21414  003DDC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21415  003DE0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21416  003DE4  ECFE  F029         	call	i2_EEPROM_read	;wreg free
 21417  003DE8  6E0D               	movwf	retrieveLog@byte3,c
 21418                           
 21419                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21420  003DEA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21421  003DEE  3A09               	swapf	??_retrieveLog,f,c
 21422  003DF0  0E0F               	movlw	15
 21423  003DF2  1609               	andwf	??_retrieveLog,f,c
 21424  003DF4  0E0F               	movlw	15
 21425  003DF6  1609               	andwf	??_retrieveLog,f,c
 21426  003DF8  5009               	movf	??_retrieveLog,w,c
 21427  003DFA  6E69               	movwf	_log_count_can_w_lab,c
 21428  003DFC  6A6A               	clrf	_log_count_can_w_lab+1,c
 21429                           
 21430                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21431  003DFE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21432  003E02  0E0F               	movlw	15
 21433  003E04  1609               	andwf	??_retrieveLog,f,c
 21434  003E06  5009               	movf	??_retrieveLog,w,c
 21435  003E08  6E67               	movwf	_log_count_can_no_lab,c
 21436  003E0A  6A68               	clrf	_log_count_can_no_lab+1,c
 21437                           
 21438                           ;EEPROM.c: 156: addr++;
 21439  003E0C  4A10               	infsnz	retrieveLog@addr,f,c
 21440  003E0E  2A11               	incf	retrieveLog@addr+1,f,c
 21441                           
 21442                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21443  003E10  0E00               	movlw	0
 21444  003E12  6E0F               	movwf	retrieveLog@i+1,c
 21445  003E14  0E00               	movlw	0
 21446  003E16  6E0E               	movwf	retrieveLog@i,c
 21447  003E18                     i2l6806:
 21448  003E18  BE0F               	btfsc	retrieveLog@i+1,7,c
 21449  003E1A  D006               	goto	i2l6810
 21450  003E1C  500F               	movf	retrieveLog@i+1,w,c
 21451  003E1E  E11E               	bnz	i2l6818
 21452  003E20  0E07               	movlw	7
 21453  003E22  5C0E               	subwf	retrieveLog@i,w,c
 21454  003E24  B0D8               	btfsc	status,0,c
 21455  003E26  D01A               	goto	i2l6818
 21456  003E28                     i2l6810:
 21457                           
 21458                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21459  003E28  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21460  003E2C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21461  003E30  ECFE  F029         	call	i2_EEPROM_read	;wreg free
 21462  003E34  6E09               	movwf	??_retrieveLog& (0+255),c
 21463  003E36  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21464  003E38  90D8               	bcf	status,0,c
 21465  003E3A  340E               	rlcf	retrieveLog@i,w,c
 21466  003E3C  6ED9               	movwf	fsr2l,c
 21467  003E3E  340F               	rlcf	retrieveLog@i+1,w,c
 21468  003E40  6EDA               	movwf	fsr2h,c
 21469  003E42  0E00               	movlw	low _log_startTime
 21470  003E44  26D9               	addwf	fsr2l,f,c
 21471  003E46  0E01               	movlw	high _log_startTime
 21472  003E48  22DA               	addwfc	fsr2h,f,c
 21473  003E4A  C009  FFDE         	movff	??_retrieveLog,postinc2
 21474  003E4E  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21475                           
 21476                           ;EEPROM.c: 161: addr++;
 21477  003E52  4A10               	infsnz	retrieveLog@addr,f,c
 21478  003E54  2A11               	incf	retrieveLog@addr+1,f,c
 21479  003E56  4A0E               	infsnz	retrieveLog@i,f,c
 21480  003E58  2A0F               	incf	retrieveLog@i+1,f,c
 21481  003E5A  D7DE               	goto	i2l6806
 21482  003E5C                     i2l6818:
 21483                           
 21484                           ;EEPROM.c: 162: }
 21485                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21486  003E5C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21487  003E60  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21488  003E64  ECFE  F029         	call	i2_EEPROM_read	;wreg free
 21489  003E68  6E09               	movwf	??_retrieveLog& (0+255),c
 21490  003E6A  5009               	movf	??_retrieveLog,w,c
 21491  003E6C  0100               	movlb	0	; () banked
 21492  003E6E  6FF6               	movwf	_log_total_time& (0+255),b
 21493  003E70  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 21494                           
 21495                           ; BSR set to: 0
 21496  003E72  0012               	return		;funcret
 21497  003E74                     __end_of_retrieveLog:
 21498                           	opt stack 0
 21499                           pclatu	equ	0xFFB
 21500                           pclath	equ	0xFFA
 21501                           tblptru	equ	0xFF8
 21502                           tblptrh	equ	0xFF7
 21503                           tblptrl	equ	0xFF6
 21504                           tablat	equ	0xFF5
 21505                           prodh	equ	0xFF4
 21506                           prodl	equ	0xFF3
 21507                           intcon	equ	0xFF2
 21508                           intcon2	equ	0xFF1
 21509                           intcon3	equ	0xFF0
 21510                           indf0	equ	0xFEF
 21511                           postinc0	equ	0xFEE
 21512                           fsr0h	equ	0xFEA
 21513                           fsr0l	equ	0xFE9
 21514                           wreg	equ	0xFE8
 21515                           postdec1	equ	0xFE5
 21516                           fsr1h	equ	0xFE2
 21517                           fsr1l	equ	0xFE1
 21518                           indf2	equ	0xFDF
 21519                           postinc2	equ	0xFDE
 21520                           postdec2	equ	0xFDD
 21521                           fsr2h	equ	0xFDA
 21522                           fsr2l	equ	0xFD9
 21523                           status	equ	0xFD8
 21524                           
 21525 ;; *************** function i2_EEPROM_read *****************
 21526 ;; Defined at:
 21527 ;;		line 68 in file "EEPROM.c"
 21528 ;; Parameters:    Size  Location     Type
 21529 ;;  address         2    0[COMRAM] unsigned short 
 21530 ;; Auto vars:     Size  Location     Type
 21531 ;;		None
 21532 ;; Return value:  Size  Location     Type
 21533 ;;                  1    wreg      unsigned char 
 21534 ;; Registers used:
 21535 ;;		wreg, status,2
 21536 ;; Tracked objects:
 21537 ;;		On entry : 0/0
 21538 ;;		On exit  : 0/0
 21539 ;;		Unchanged: 0/0
 21540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21541 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21545 ;;Total ram usage:        2 bytes
 21546 ;; Hardware stack levels used:    1
 21547 ;; This function calls:
 21548 ;;		Nothing
 21549 ;; This function is called by:
 21550 ;;		_retrieveLog
 21551 ;; This function uses a non-reentrant model
 21552 ;;
 21553                           
 21554                           	psect	text80
 21555  0053FC                     __ptext80:
 21556                           	opt stack 0
 21557  0053FC                     i2_EEPROM_read:
 21558                           	opt stack 20
 21559                           
 21560                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21561                           
 21562                           ; BSR set to: 0
 21563                           ;incstack = 0
 21564  0053FC  5002               	movf	i2EEPROM_read@address+1,w,c
 21565  0053FE  6EAA               	movwf	4010,c	;volatile
 21566                           
 21567                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21568  005400  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21569                           
 21570                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21571  005404  9EA6               	bcf	4006,7,c	;volatile
 21572                           
 21573                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21574  005406  9CA6               	bcf	4006,6,c	;volatile
 21575                           
 21576                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21577  005408  80A6               	bsf	4006,0,c	;volatile
 21578  00540A                     i2l1029:
 21579  00540A  B0A6               	btfsc	4006,0,c	;volatile
 21580  00540C  D7FE               	goto	i2l1029
 21581                           
 21582                           ;EEPROM.c: 81: return EEDATA;
 21583  00540E  50A8               	movf	4008,w,c	;volatile
 21584  005410  0012               	return	
 21585  005412                     __end_ofi2_EEPROM_read:
 21586                           	opt stack 0
 21587                           pclatu	equ	0xFFB
 21588                           pclath	equ	0xFFA
 21589                           tblptru	equ	0xFF8
 21590                           tblptrh	equ	0xFF7
 21591                           tblptrl	equ	0xFF6
 21592                           tablat	equ	0xFF5
 21593                           prodh	equ	0xFF4
 21594                           prodl	equ	0xFF3
 21595                           intcon	equ	0xFF2
 21596                           intcon2	equ	0xFF1
 21597                           intcon3	equ	0xFF0
 21598                           indf0	equ	0xFEF
 21599                           postinc0	equ	0xFEE
 21600                           fsr0h	equ	0xFEA
 21601                           fsr0l	equ	0xFE9
 21602                           wreg	equ	0xFE8
 21603                           postdec1	equ	0xFE5
 21604                           fsr1h	equ	0xFE2
 21605                           fsr1l	equ	0xFE1
 21606                           indf2	equ	0xFDF
 21607                           postinc2	equ	0xFDE
 21608                           postdec2	equ	0xFDD
 21609                           fsr2h	equ	0xFDA
 21610                           fsr2l	equ	0xFD9
 21611                           status	equ	0xFD8
 21612                           
 21613 ;; *************** function _printSortTimer *****************
 21614 ;; Defined at:
 21615 ;;		line 451 in file "sort.c"
 21616 ;; Parameters:    Size  Location     Type
 21617 ;;		None
 21618 ;; Auto vars:     Size  Location     Type
 21619 ;;  i               2   70[COMRAM] int 
 21620 ;;  i               2   72[COMRAM] int 
 21621 ;;  curTime        14   44[COMRAM] int [7]
 21622 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21623 ;;  sec             2   64[COMRAM] int 
 21624 ;;  min             2   62[COMRAM] int 
 21625 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21626 ;;  start_sec       2   58[COMRAM] unsigned int 
 21627 ;; Return value:  Size  Location     Type
 21628 ;;                  1    wreg      void 
 21629 ;; Registers used:
 21630 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21631 ;; Tracked objects:
 21632 ;;		On entry : 0/0
 21633 ;;		On exit  : 0/0
 21634 ;;		Unchanged: 0/0
 21635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21637 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21638 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21639 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21640 ;;Total ram usage:       33 bytes
 21641 ;; Hardware stack levels used:    1
 21642 ;; Hardware stack levels required when called:    3
 21643 ;; This function calls:
 21644 ;;		i2___lwdiv
 21645 ;;		i2___lwmod
 21646 ;;		i2___wmul
 21647 ;;		i2_delay_ms
 21648 ;;		i2_getRTC
 21649 ;;		i2_lcdInst
 21650 ;;		i2_printf
 21651 ;; This function is called by:
 21652 ;;		_handler
 21653 ;; This function uses a non-reentrant model
 21654 ;;
 21655                           
 21656                           	psect	text81
 21657  0029B2                     __ptext81:
 21658                           	opt stack 0
 21659  0029B2                     _printSortTimer:
 21660                           	opt stack 20
 21661                           
 21662                           ;sort.c: 452: getRTC();
 21663                           
 21664                           ;incstack = 0
 21665  0029B2  ECB2  F024         	call	i2_getRTC	;wreg free
 21666                           
 21667                           ;sort.c: 453: int curTime[7];
 21668                           ;sort.c: 454: for(int i = 0; i < 7; i++){
 21669  0029B6  0E00               	movlw	0
 21670  0029B8  6E4A               	movwf	printSortTimer@i+1,c
 21671  0029BA  0E00               	movlw	0
 21672  0029BC  6E49               	movwf	printSortTimer@i,c
 21673  0029BE                     i2l9228:
 21674  0029BE  BE4A               	btfsc	printSortTimer@i+1,7,c
 21675  0029C0  D006               	goto	i2l9232
 21676  0029C2  504A               	movf	printSortTimer@i+1,w,c
 21677  0029C4  E131               	bnz	i2l9238
 21678  0029C6  0E07               	movlw	7
 21679  0029C8  5C49               	subwf	printSortTimer@i,w,c
 21680  0029CA  B0D8               	btfsc	status,0,c
 21681  0029CC  D02D               	goto	i2l9238
 21682  0029CE                     i2l9232:
 21683                           
 21684                           ;sort.c: 455: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21685  0029CE  0E1C               	movlw	low _time
 21686  0029D0  2449               	addwf	printSortTimer@i,w,c
 21687  0029D2  6ED9               	movwf	fsr2l,c
 21688  0029D4  0E01               	movlw	high _time
 21689  0029D6  204A               	addwfc	printSortTimer@i+1,w,c
 21690  0029D8  6EDA               	movwf	fsr2h,c
 21691  0029DA  50DF               	movf	indf2,w,c
 21692  0029DC  6E2A               	movwf	??_printSortTimer& (0+255),c
 21693  0029DE  3A2A               	swapf	??_printSortTimer,f,c
 21694  0029E0  0E0F               	movlw	15
 21695  0029E2  162A               	andwf	??_printSortTimer,f,c
 21696  0029E4  0E0F               	movlw	15
 21697  0029E6  162A               	andwf	??_printSortTimer,f,c
 21698  0029E8  502A               	movf	??_printSortTimer,w,c
 21699  0029EA  0D0A               	mullw	10
 21700  0029EC  0E1C               	movlw	low _time
 21701  0029EE  2449               	addwf	printSortTimer@i,w,c
 21702  0029F0  6ED9               	movwf	fsr2l,c
 21703  0029F2  0E01               	movlw	high _time
 21704  0029F4  204A               	addwfc	printSortTimer@i+1,w,c
 21705  0029F6  6EDA               	movwf	fsr2h,c
 21706  0029F8  50DF               	movf	indf2,w,c
 21707  0029FA  0B0F               	andlw	15
 21708  0029FC  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21709  0029FE  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21710  002A00  50F3               	movf	prodl,w,c
 21711  002A02  262B               	addwf	??_printSortTimer+1,f,c
 21712  002A04  50F4               	movf	prodh,w,c
 21713  002A06  222C               	addwfc	??_printSortTimer+2,f,c
 21714  002A08  90D8               	bcf	status,0,c
 21715  002A0A  3449               	rlcf	printSortTimer@i,w,c
 21716  002A0C  6ED9               	movwf	fsr2l,c
 21717  002A0E  344A               	rlcf	printSortTimer@i+1,w,c
 21718  002A10  6EDA               	movwf	fsr2h,c
 21719  002A12  0E2D               	movlw	low printSortTimer@curTime
 21720  002A14  26D9               	addwf	fsr2l,f,c
 21721  002A16  0E00               	movlw	high printSortTimer@curTime
 21722  002A18  22DA               	addwfc	fsr2h,f,c
 21723  002A1A  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21724  002A1E  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21725  002A22  4A49               	infsnz	printSortTimer@i,f,c
 21726  002A24  2A4A               	incf	printSortTimer@i+1,f,c
 21727  002A26  D7CB               	goto	i2l9228
 21728  002A28                     i2l9238:
 21729                           
 21730                           ;sort.c: 456: }
 21731                           ;sort.c: 457: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21732  002A28  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21733  002A2C  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21734  002A30  0E00               	movlw	0
 21735  002A32  6E04               	movwf	i2___wmul@multiplicand+1,c
 21736  002A34  0E3C               	movlw	60
 21737  002A36  6E03               	movwf	i2___wmul@multiplicand,c
 21738  002A38  EC6E  F029         	call	i2___wmul	;wreg free
 21739  002A3C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21740  002A40  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21741  002A44  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21742  002A48  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21743  002A4C  0E0E               	movlw	14
 21744  002A4E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21745  002A50  0E10               	movlw	16
 21746  002A52  6E03               	movwf	i2___wmul@multiplicand,c
 21747  002A54  EC6E  F029         	call	i2___wmul	;wreg free
 21748  002A58  5001               	movf	?i2___wmul,w,c
 21749  002A5A  262A               	addwf	??_printSortTimer,f,c
 21750  002A5C  5002               	movf	?i2___wmul+1,w,c
 21751  002A5E  222B               	addwfc	??_printSortTimer+1,f,c
 21752  002A60  0101               	movlb	1	; () banked
 21753  002A62  510E               	movf	_startTime& (0+255),w,b
 21754  002A64  242A               	addwf	??_printSortTimer,w,c
 21755  002A66  6E3B               	movwf	printSortTimer@start_sec,c
 21756  002A68  0101               	movlb	1	; () banked
 21757  002A6A  510F               	movf	(_startTime+1)& (0+255),w,b
 21758  002A6C  202B               	addwfc	??_printSortTimer+1,w,c
 21759  002A6E  6E3C               	movwf	printSortTimer@start_sec+1,c
 21760                           
 21761                           ;sort.c: 458: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21762  002A70  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21763  002A74  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21764  002A78  0E00               	movlw	0
 21765  002A7A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21766  002A7C  0E3C               	movlw	60
 21767  002A7E  6E03               	movwf	i2___wmul@multiplicand,c
 21768  002A80  EC6E  F029         	call	i2___wmul	;wreg free
 21769  002A84  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21770  002A88  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21771  002A8C  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21772  002A90  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21773  002A94  0E0E               	movlw	14
 21774  002A96  6E04               	movwf	i2___wmul@multiplicand+1,c
 21775  002A98  0E10               	movlw	16
 21776  002A9A  6E03               	movwf	i2___wmul@multiplicand,c
 21777  002A9C  EC6E  F029         	call	i2___wmul	;wreg free
 21778  002AA0  5001               	movf	?i2___wmul,w,c
 21779  002AA2  262A               	addwf	??_printSortTimer,f,c
 21780  002AA4  5002               	movf	?i2___wmul+1,w,c
 21781  002AA6  222B               	addwfc	??_printSortTimer+1,f,c
 21782  002AA8  502D               	movf	printSortTimer@curTime,w,c
 21783  002AAA  242A               	addwf	??_printSortTimer,w,c
 21784  002AAC  6E3D               	movwf	printSortTimer@cur_sec,c
 21785  002AAE  502E               	movf	printSortTimer@curTime+1,w,c
 21786  002AB0  202B               	addwfc	??_printSortTimer+1,w,c
 21787  002AB2  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21788                           
 21789                           ;sort.c: 459: unsigned int timeDiff = cur_sec - start_sec;
 21790  002AB4  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21791  002AB8  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21792  002ABC  1E2A               	comf	??_printSortTimer,f,c
 21793  002ABE  1E2B               	comf	??_printSortTimer+1,f,c
 21794  002AC0  4A2A               	infsnz	??_printSortTimer,f,c
 21795  002AC2  2A2B               	incf	??_printSortTimer+1,f,c
 21796  002AC4  503D               	movf	printSortTimer@cur_sec,w,c
 21797  002AC6  242A               	addwf	??_printSortTimer,w,c
 21798  002AC8  6E45               	movwf	printSortTimer@timeDiff,c
 21799  002ACA  503E               	movf	printSortTimer@cur_sec+1,w,c
 21800  002ACC  202B               	addwfc	??_printSortTimer+1,w,c
 21801  002ACE  6E46               	movwf	printSortTimer@timeDiff+1,c
 21802                           
 21803                           ;sort.c: 461: total_time = timeDiff;
 21804  002AD0  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 21805  002AD4  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 21806                           
 21807                           ;sort.c: 463: if(f_most_recent_sort_time){
 21808  002AD8  0101               	movlb	1	; () banked
 21809  002ADA  5135               	movf	_f_most_recent_sort_time& (0+255),w,b
 21810  002ADC  0101               	movlb	1	; () banked
 21811  002ADE  1136               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21812  002AE0  B4D8               	btfsc	status,2,c
 21813  002AE2  D009               	goto	i2l9250
 21814                           
 21815                           ; BSR set to: 1
 21816                           ;sort.c: 464: most_recent_sort_time = total_time;
 21817  002AE4  C0FA  F071         	movff	_total_time,_most_recent_sort_time
 21818  002AE8  C0FB  F072         	movff	_total_time+1,_most_recent_sort_time+1
 21819                           
 21820                           ; BSR set to: 1
 21821                           ;sort.c: 465: f_most_recent_sort_time = 0;
 21822  002AEC  0E00               	movlw	0
 21823  002AEE  0101               	movlb	1	; () banked
 21824  002AF0  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21825  002AF2  0E00               	movlw	0
 21826  002AF4  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
 21827  002AF6                     i2l9250:
 21828                           
 21829                           ; BSR set to: 1
 21830                           ;sort.c: 466: }
 21831                           ;sort.c: 468: if(total_time - most_recent_sort_time == 20){
 21832  002AF6  C071  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21833  002AFA  C072  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21834  002AFE  1E2A               	comf	??_printSortTimer,f,c
 21835  002B00  1E2B               	comf	??_printSortTimer+1,f,c
 21836  002B02  4A2A               	infsnz	??_printSortTimer,f,c
 21837  002B04  2A2B               	incf	??_printSortTimer+1,f,c
 21838  002B06  0100               	movlb	0	; () banked
 21839  002B08  51FA               	movf	_total_time& (0+255),w,b
 21840  002B0A  262A               	addwf	??_printSortTimer,f,c
 21841  002B0C  0100               	movlb	0	; () banked
 21842  002B0E  51FB               	movf	(_total_time+1)& (0+255),w,b
 21843  002B10  222B               	addwfc	??_printSortTimer+1,f,c
 21844  002B12  0E14               	movlw	20
 21845  002B14  182A               	xorwf	??_printSortTimer,w,c
 21846  002B16  102B               	iorwf	??_printSortTimer+1,w,c
 21847  002B18  A4D8               	btfss	status,2,c
 21848  002B1A  D033               	goto	i2l9270
 21849                           
 21850                           ; BSR set to: 0
 21851                           ;sort.c: 469: LATBbits.LATB2 = 0;
 21852  002B1C  948A               	bcf	3978,2,c	;volatile
 21853                           
 21854                           ; BSR set to: 0
 21855                           ;sort.c: 470: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21856  002B1E  0E52               	movlw	82
 21857  002B20  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21858  002B22  0E2B               	movlw	43
 21859  002B24  6E2A               	movwf	??_printSortTimer& (0+255),c
 21860  002B26  0E00               	movlw	0
 21861  002B28                     i2u1012_47:
 21862  002B28  2EE8               	decfsz	wreg,f,c
 21863  002B2A  D7FE               	bra	i2u1012_47
 21864  002B2C  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21865  002B2E  D7FC               	bra	i2u1012_47
 21866  002B30  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21867  002B32  D7FA               	bra	i2u1012_47
 21868  002B34  D000               	nop2	
 21869                           
 21870                           ;sort.c: 471: for(int i=0; i<46; i++){
 21871  002B36  0E00               	movlw	0
 21872  002B38  6E48               	movwf	printSortTimer@i_1182+1,c
 21873  002B3A  0E00               	movlw	0
 21874  002B3C  6E47               	movwf	printSortTimer@i_1182,c
 21875  002B3E  BE48               	btfsc	printSortTimer@i_1182+1,7,c
 21876  002B40  D006               	goto	i2l9262
 21877  002B42  5048               	movf	printSortTimer@i_1182+1,w,c
 21878  002B44  E11D               	bnz	i2l842
 21879  002B46  0E2E               	movlw	46
 21880  002B48  5C47               	subwf	printSortTimer@i_1182,w,c
 21881  002B4A  B0D8               	btfsc	status,0,c
 21882  002B4C  D019               	goto	i2l842
 21883  002B4E                     i2l9262:
 21884                           
 21885                           ;sort.c: 472: LATBbits.LATB2 = !LATBbits.LATB2;
 21886  002B4E  B48A               	btfsc	3978,2,c	;volatile
 21887  002B50  D003               	goto	i2u826_40
 21888  002B52  6A2A               	clrf	??_printSortTimer& (0+255),c
 21889  002B54  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21890  002B56  D001               	goto	i2u827_48
 21891  002B58                     i2u826_40:
 21892  002B58  6A2A               	clrf	??_printSortTimer& (0+255),c
 21893  002B5A                     i2u827_48:
 21894  002B5A  462A               	rlncf	??_printSortTimer,f,c
 21895  002B5C  462A               	rlncf	??_printSortTimer,f,c
 21896  002B5E  508A               	movf	3978,w,c	;volatile
 21897  002B60  182A               	xorwf	??_printSortTimer,w,c
 21898  002B62  0BFB               	andlw	-5
 21899  002B64  182A               	xorwf	??_printSortTimer,w,c
 21900  002B66  6E8A               	movwf	3978,c	;volatile
 21901                           
 21902                           ;sort.c: 473: delay_ms(45-i);
 21903  002B68  5047               	movf	printSortTimer@i_1182,w,c
 21904  002B6A  0800               	sublw	0
 21905  002B6C  0F2D               	addlw	45
 21906  002B6E  ECD7  F029         	call	i2_delay_ms
 21907  002B72  4A47               	infsnz	printSortTimer@i_1182,f,c
 21908  002B74  2A48               	incf	printSortTimer@i_1182+1,f,c
 21909  002B76  BE48               	btfsc	printSortTimer@i_1182+1,7,c
 21910  002B78  D7EA               	goto	i2l9262
 21911  002B7A  5048               	movf	printSortTimer@i_1182+1,w,c
 21912  002B7C  E101               	bnz	i2u828_40
 21913  002B7E  D7E3               	goto	L14
 21914  002B80                     i2u828_40:
 21915  002B80                     i2l842:
 21916                           
 21917                           ;sort.c: 474: }
 21918                           ;sort.c: 475: LATBbits.LATB2 = 1;
 21919  002B80  848A               	bsf	3978,2,c	;volatile
 21920  002B82                     i2l9270:
 21921                           
 21922                           ;sort.c: 476: }
 21923                           ;sort.c: 478: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21924  002B82  C071  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21925  002B86  C072  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21926  002B8A  1E2A               	comf	??_printSortTimer,f,c
 21927  002B8C  1E2B               	comf	??_printSortTimer+1,f,c
 21928  002B8E  4A2A               	infsnz	??_printSortTimer,f,c
 21929  002B90  2A2B               	incf	??_printSortTimer+1,f,c
 21930  002B92  0100               	movlb	0	; () banked
 21931  002B94  51FA               	movf	_total_time& (0+255),w,b
 21932  002B96  262A               	addwf	??_printSortTimer,f,c
 21933  002B98  0100               	movlb	0	; () banked
 21934  002B9A  51FB               	movf	(_total_time+1)& (0+255),w,b
 21935  002B9C  222B               	addwfc	??_printSortTimer+1,f,c
 21936  002B9E  0E2A               	movlw	42
 21937  002BA0  182A               	xorwf	??_printSortTimer,w,c
 21938  002BA2  102B               	iorwf	??_printSortTimer+1,w,c
 21939  002BA4  B4D8               	btfsc	status,2,c
 21940  002BA6  D007               	goto	i2l9274
 21941                           
 21942                           ; BSR set to: 0
 21943  002BA8  0EB3               	movlw	179
 21944  002BAA  0100               	movlb	0	; () banked
 21945  002BAC  19FA               	xorwf	_total_time& (0+255),w,b
 21946  002BAE  0100               	movlb	0	; () banked
 21947  002BB0  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 21948  002BB2  A4D8               	btfss	status,2,c
 21949  002BB4  D003               	goto	i2l9276
 21950  002BB6                     i2l9274:
 21951                           
 21952                           ; BSR set to: 0
 21953                           ;sort.c: 479: machine_state = DoneSorting_state;
 21954  002BB6  0E02               	movlw	2
 21955  002BB8  0100               	movlb	0	; () banked
 21956  002BBA  6FFC               	movwf	_machine_state& (0+255),b
 21957  002BBC                     i2l9276:
 21958                           
 21959                           ; BSR set to: 0
 21960                           ;sort.c: 481: }
 21961                           ;sort.c: 483: int min = (timeDiff % 3600) / 60;
 21962  002BBC  0E0E               	movlw	14
 21963  002BBE  6E04               	movwf	i2___lwmod@divisor+1,c
 21964  002BC0  0E10               	movlw	16
 21965  002BC2  6E03               	movwf	i2___lwmod@divisor,c
 21966  002BC4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21967  002BC8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21968  002BCC  EC27  F027         	call	i2___lwmod	;wreg free
 21969  002BD0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21970  002BD4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21971  002BD8  0E00               	movlw	0
 21972  002BDA  6E09               	movwf	i2___lwdiv@divisor+1,c
 21973  002BDC  0E3C               	movlw	60
 21974  002BDE  6E08               	movwf	i2___lwdiv@divisor,c
 21975  002BE0  EC68  F026         	call	i2___lwdiv	;wreg free
 21976  002BE4  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21977  002BE8  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21978                           
 21979                           ;sort.c: 484: int sec = (timeDiff % 3600) % 60;
 21980  002BEC  0E0E               	movlw	14
 21981  002BEE  6E04               	movwf	i2___lwmod@divisor+1,c
 21982  002BF0  0E10               	movlw	16
 21983  002BF2  6E03               	movwf	i2___lwmod@divisor,c
 21984  002BF4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21985  002BF8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21986  002BFC  EC27  F027         	call	i2___lwmod	;wreg free
 21987  002C00  C001  F043         	movff	?i2___lwmod,_printSortTimer$2553
 21988  002C04  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2553+1
 21989                           
 21990                           ;sort.c: 484: int sec = (timeDiff % 3600) % 60;
 21991  002C08  C043  F001         	movff	_printSortTimer$2553,i2___lwmod@dividend
 21992  002C0C  C044  F002         	movff	_printSortTimer$2553+1,i2___lwmod@dividend+1
 21993  002C10  0E00               	movlw	0
 21994  002C12  6E04               	movwf	i2___lwmod@divisor+1,c
 21995  002C14  0E3C               	movlw	60
 21996  002C16  6E03               	movwf	i2___lwmod@divisor,c
 21997  002C18  EC27  F027         	call	i2___lwmod	;wreg free
 21998  002C1C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21999  002C20  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22000                           
 22001                           ;sort.c: 486: lcdInst(0b10000000);;
 22002  002C24  0E80               	movlw	128
 22003  002C26  EC32  F02A         	call	i2_lcdInst
 22004                           
 22005                           ;sort.c: 487: printf("SORTING...");
 22006  002C2A  0E7C               	movlw	low STR_64
 22007  002C2C  6E0D               	movwf	i2printf@f,c
 22008  002C2E  0EFF               	movlw	high STR_64
 22009  002C30  6E0E               	movwf	i2printf@f+1,c
 22010  002C32  ECDE  F00E         	call	i2_printf	;wreg free
 22011                           
 22012                           ;sort.c: 488: lcdInst(0b11000000);;
 22013  002C36  0EC0               	movlw	192
 22014  002C38  EC32  F02A         	call	i2_lcdInst
 22015                           
 22016                           ;sort.c: 489: printf("TIME %d:%02d", min, sec);
 22017  002C3C  0E42               	movlw	low STR_65
 22018  002C3E  6E0D               	movwf	i2printf@f,c
 22019  002C40  0EFF               	movlw	high STR_65
 22020  002C42  6E0E               	movwf	i2printf@f+1,c
 22021  002C44  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22022  002C48  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22023  002C4C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22024  002C50  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22025  002C54  ECDE  F00E         	call	i2_printf	;wreg free
 22026  002C58  0012               	return		;funcret
 22027  002C5A                     __end_of_printSortTimer:
 22028                           	opt stack 0
 22029                           pclatu	equ	0xFFB
 22030                           pclath	equ	0xFFA
 22031                           tblptru	equ	0xFF8
 22032                           tblptrh	equ	0xFF7
 22033                           tblptrl	equ	0xFF6
 22034                           tablat	equ	0xFF5
 22035                           prodh	equ	0xFF4
 22036                           prodl	equ	0xFF3
 22037                           intcon	equ	0xFF2
 22038                           intcon2	equ	0xFF1
 22039                           intcon3	equ	0xFF0
 22040                           indf0	equ	0xFEF
 22041                           postinc0	equ	0xFEE
 22042                           fsr0h	equ	0xFEA
 22043                           fsr0l	equ	0xFE9
 22044                           wreg	equ	0xFE8
 22045                           postdec1	equ	0xFE5
 22046                           fsr1h	equ	0xFE2
 22047                           fsr1l	equ	0xFE1
 22048                           indf2	equ	0xFDF
 22049                           postinc2	equ	0xFDE
 22050                           postdec2	equ	0xFDD
 22051                           fsr2h	equ	0xFDA
 22052                           fsr2l	equ	0xFD9
 22053                           status	equ	0xFD8
 22054                           
 22055 ;; *************** function i2_printf *****************
 22056 ;; Defined at:
 22057 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22058 ;; Parameters:    Size  Location     Type
 22059 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22060 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 22061 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 22062 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 22063 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 22064 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 22065 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 22066 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 22067 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 22068 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 22069 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 22070 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 22071 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 22072 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 22073 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 22074 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 22075 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 22076 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 22077 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 22078 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 22079 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 22080 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 22081 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 22082 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 22083 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 22084 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 22085 ;; Auto vars:     Size  Location     Type
 22086 ;;  printf          4    0        struct .
 22087 ;;  printf          2   39[COMRAM] int 
 22088 ;;  printf          2   35[COMRAM] unsigned int 
 22089 ;;  printf          2   33[COMRAM] unsigned int 
 22090 ;;  printf          2   31[COMRAM] PTR void [1]
 22091 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22092 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22093 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 22094 ;;  printf          1   38[COMRAM] char 
 22095 ;;  printf          1   37[COMRAM] unsigned char 
 22096 ;;  printf          1   28[COMRAM] char 
 22097 ;; Return value:  Size  Location     Type
 22098 ;;                  2   12[COMRAM] int 
 22099 ;; Registers used:
 22100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22101 ;; Tracked objects:
 22102 ;;		On entry : 0/0
 22103 ;;		On exit  : 0/0
 22104 ;;		Unchanged: 0/0
 22105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22106 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22107 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22108 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22109 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22110 ;;Total ram usage:       29 bytes
 22111 ;; Hardware stack levels used:    1
 22112 ;; Hardware stack levels required when called:    2
 22113 ;; This function calls:
 22114 ;;		i2___lwdiv
 22115 ;;		i2___lwmod
 22116 ;;		i2___wmul
 22117 ;;		i2_isdigit
 22118 ;;		i2_putch
 22119 ;; This function is called by:
 22120 ;;		_change_state_to_menu_11
 22121 ;;		_change_state_to_menu_23
 22122 ;;		_change_state_to_logs_11
 22123 ;;		_change_state_to_logs_12
 22124 ;;		_change_state_to_logs_22
 22125 ;;		_change_state_to_logs_23
 22126 ;;		_change_state_to_logs_33
 22127 ;;		_change_state_to_logs_34
 22128 ;;		_printSortTimer
 22129 ;;		i2_change_state_to_menu_start
 22130 ;;		i2_change_state_to_menu_12
 22131 ;;		i2_change_state_to_menu_22
 22132 ;;		i2_printRTC
 22133 ;; This function uses a non-reentrant model
 22134 ;;
 22135                           
 22136                           	psect	text82
 22137  001DBC                     __ptext82:
 22138                           	opt stack 0
 22139  001DBC                     i2_printf:
 22140                           	opt stack 19
 22141                           
 22142                           ;doprnt.c: 466: va_list ap;
 22143                           ;doprnt.c: 499: signed char c;
 22144                           ;doprnt.c: 501: int width;
 22145                           ;doprnt.c: 506: signed char prec;
 22146                           ;doprnt.c: 508: unsigned char flag;
 22147                           ;doprnt.c: 523: union {
 22148                           ;doprnt.c: 524: unsigned long vd;
 22149                           ;doprnt.c: 525: double integ;
 22150                           ;doprnt.c: 526: } tmpval;
 22151                           ;doprnt.c: 528: unsigned int val;
 22152                           ;doprnt.c: 529: unsigned len;
 22153                           ;doprnt.c: 530: const char * cp;
 22154                           ;doprnt.c: 533: *ap = __va_start();
 22155                           
 22156                           ;incstack = 0
 22157  001DBC  0E0F               	movlw	low (?i2_printf+2)
 22158  001DBE  6E20               	movwf	i2printf@ap,c
 22159  001DC0  0E00               	movlw	high (?i2_printf+2)
 22160  001DC2  6E21               	movwf	i2printf@ap+1,c
 22161                           
 22162                           ;doprnt.c: 536: while(c = *f++) {
 22163  001DC4  D1A4               	goto	i2l6630
 22164  001DC6                     i2l6500:
 22165                           
 22166                           ;doprnt.c: 538: if(c != '%')
 22167  001DC6  0E25               	movlw	37
 22168  001DC8  1827               	xorwf	i2printf@c,w,c
 22169  001DCA  B4D8               	btfsc	status,2,c
 22170  001DCC  D004               	goto	i2l6504
 22171                           
 22172                           ;doprnt.c: 540: {
 22173                           ;doprnt.c: 541: (putch(c) );
 22174  001DCE  5027               	movf	i2printf@c,w,c
 22175  001DD0  EC2C  F02A         	call	i2_putch
 22176                           
 22177                           ;doprnt.c: 542: continue;
 22178  001DD4  D19C               	goto	i2l6630
 22179  001DD6                     i2l6504:
 22180                           
 22181                           ;doprnt.c: 543: }
 22182                           ;doprnt.c: 546: width = 0;
 22183  001DD6  0E00               	movlw	0
 22184  001DD8  6E29               	movwf	i2printf@width+1,c
 22185  001DDA  0E00               	movlw	0
 22186  001DDC  6E28               	movwf	i2printf@width,c
 22187                           
 22188                           ;doprnt.c: 548: flag = 0;
 22189  001DDE  0E00               	movlw	0
 22190  001DE0  6E26               	movwf	i2printf@flag,c
 22191                           
 22192                           ;doprnt.c: 551: switch(*f) {
 22193                           
 22194                           ;doprnt.c: 550: for(;;) {
 22195  001DE2  D003               	goto	i2l6510
 22196  001DE4                     i2l6506:
 22197                           
 22198                           ;doprnt.c: 580: flag |= 0x04;
 22199  001DE4  8426               	bsf	i2printf@flag,2,c
 22200                           
 22201                           ;doprnt.c: 581: f++;
 22202  001DE6  4A0D               	infsnz	i2printf@f,f,c
 22203  001DE8  2A0E               	incf	i2printf@f+1,f,c
 22204  001DEA                     i2l6510:
 22205  001DEA  C00D  FFF6         	movff	i2printf@f,tblptrl
 22206  001DEE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22207  001DF2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22208  001DF2  6AF8               	clrf	tblptru,c
 22209  001DF4                     	endif
 22210  001DF4                     	if	0	;tblptru may be non-zero
 22211  001DF4                     	endif
 22212  001DF4  0008               	tblrd		*
 22213  001DF6  50F5               	movf	tablat,w,c
 22214                           
 22215                           ; Switch size 1, requested type "space"
 22216                           ; Number of cases is 1, Range of values is 48 to 48
 22217                           ; switch strategies available:
 22218                           ; Name         Instructions Cycles
 22219                           ; simple_byte            4     3 (average)
 22220                           ;	Chosen strategy is simple_byte
 22221  001DF8  0A30               	xorlw	48	; case 48
 22222  001DFA  B4D8               	btfsc	status,2,c
 22223  001DFC  D7F3               	goto	i2l6506
 22224                           
 22225                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22226                           
 22227                           ;doprnt.c: 586: }
 22228                           
 22229                           ;doprnt.c: 585: break;
 22230  001DFE  C00D  FFF6         	movff	i2printf@f,tblptrl
 22231  001E02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22232  001E06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22233  001E06  6AF8               	clrf	tblptru,c
 22234  001E08                     	endif
 22235  001E08                     	if	0	;tblptru may be non-zero
 22236  001E08                     	endif
 22237  001E08  0008               	tblrd		*
 22238  001E0A  50F5               	movf	tablat,w,c
 22239  001E0C  ECC8  F029         	call	i2_isdigit
 22240  001E10  A0D8               	btfss	status,0,c
 22241  001E12  D0A6               	goto	i2l6558
 22242                           
 22243                           ;doprnt.c: 598: width = 0;
 22244  001E14  0E00               	movlw	0
 22245  001E16  6E29               	movwf	i2printf@width+1,c
 22246  001E18  0E00               	movlw	0
 22247  001E1A  6E28               	movwf	i2printf@width,c
 22248  001E1C                     i2l6516:
 22249                           
 22250                           ;doprnt.c: 600: width *= 10;
 22251  001E1C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22252  001E20  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22253  001E24  0E00               	movlw	0
 22254  001E26  6E04               	movwf	i2___wmul@multiplicand+1,c
 22255  001E28  0E0A               	movlw	10
 22256  001E2A  6E03               	movwf	i2___wmul@multiplicand,c
 22257  001E2C  EC6E  F029         	call	i2___wmul	;wreg free
 22258  001E30  C001  F028         	movff	?i2___wmul,i2printf@width
 22259  001E34  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22260                           
 22261                           ;doprnt.c: 601: width += *f++ - '0';
 22262  001E38  0ED0               	movlw	208
 22263  001E3A  6E19               	movwf	??i2_printf& (0+255),c
 22264  001E3C  0EFF               	movlw	255
 22265  001E3E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22266  001E40  C00D  FFF6         	movff	i2printf@f,tblptrl
 22267  001E44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22268  001E48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22269  001E48  6AF8               	clrf	tblptru,c
 22270  001E4A                     	endif
 22271  001E4A                     	if	0	;tblptru may be non-zero
 22272  001E4A                     	endif
 22273  001E4A  0008               	tblrd		*
 22274  001E4C  50F5               	movf	tablat,w,c
 22275  001E4E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22276  001E50  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22277  001E52  5019               	movf	??i2_printf,w,c
 22278  001E54  261B               	addwf	??i2_printf+2,f,c
 22279  001E56  501A               	movf	??i2_printf+1,w,c
 22280  001E58  221C               	addwfc	??i2_printf+3,f,c
 22281  001E5A  501B               	movf	??i2_printf+2,w,c
 22282  001E5C  2628               	addwf	i2printf@width,f,c
 22283  001E5E  501C               	movf	??i2_printf+3,w,c
 22284  001E60  2229               	addwfc	i2printf@width+1,f,c
 22285  001E62  4A0D               	infsnz	i2printf@f,f,c
 22286  001E64  2A0E               	incf	i2printf@f+1,f,c
 22287                           
 22288                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22289  001E66  C00D  FFF6         	movff	i2printf@f,tblptrl
 22290  001E6A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22291  001E6E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22292  001E6E  6AF8               	clrf	tblptru,c
 22293  001E70                     	endif
 22294  001E70                     	if	0	;tblptru may be non-zero
 22295  001E70                     	endif
 22296  001E70  0008               	tblrd		*
 22297  001E72  50F5               	movf	tablat,w,c
 22298  001E74  ECC8  F029         	call	i2_isdigit
 22299  001E78  A0D8               	btfss	status,0,c
 22300  001E7A  D072               	goto	i2l6558
 22301  001E7C  D7CF               	goto	i2l6516
 22302  001E7E                     i2l6524:
 22303                           
 22304                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22305  001E7E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22306  001E82  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22307  001E86  CFDE F01E          	movff	postinc2,i2printf@cp
 22308  001E8A  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22309  001E8E  0E02               	movlw	2
 22310  001E90  2620               	addwf	i2printf@ap,f,c
 22311  001E92  0E00               	movlw	0
 22312  001E94  2221               	addwfc	i2printf@ap+1,f,c
 22313                           
 22314                           ;doprnt.c: 740: if(!cp)
 22315  001E96  501E               	movf	i2printf@cp,w,c
 22316  001E98  101F               	iorwf	i2printf@cp+1,w,c
 22317  001E9A  A4D8               	btfss	status,2,c
 22318  001E9C  D004               	goto	i2l6532
 22319                           
 22320                           ;doprnt.c: 741: cp = "(null)";
 22321  001E9E  0EB6               	movlw	low STR_126
 22322  001EA0  6E1E               	movwf	i2printf@cp,c
 22323  001EA2  0EFF               	movlw	high STR_126
 22324  001EA4  6E1F               	movwf	i2printf@cp+1,c
 22325  001EA6                     i2l6532:
 22326                           
 22327                           ;doprnt.c: 745: len = 0;
 22328  001EA6  0E00               	movlw	0
 22329  001EA8  6E23               	movwf	i2printf@len+1,c
 22330  001EAA  0E00               	movlw	0
 22331  001EAC  6E22               	movwf	i2printf@len,c
 22332                           
 22333                           ;doprnt.c: 746: while(cp[len])
 22334  001EAE  D002               	goto	i2l6536
 22335  001EB0                     i2l6534:
 22336                           
 22337                           ;doprnt.c: 747: len++;
 22338  001EB0  4A22               	infsnz	i2printf@len,f,c
 22339  001EB2  2A23               	incf	i2printf@len+1,f,c
 22340  001EB4                     i2l6536:
 22341  001EB4  5022               	movf	i2printf@len,w,c
 22342  001EB6  241E               	addwf	i2printf@cp,w,c
 22343  001EB8  6E19               	movwf	??i2_printf& (0+255),c
 22344  001EBA  5023               	movf	i2printf@len+1,w,c
 22345  001EBC  201F               	addwfc	i2printf@cp+1,w,c
 22346  001EBE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22347  001EC0  C019  FFF6         	movff	??i2_printf,tblptrl
 22348  001EC4  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22349  001EC8  0E00               	movlw	low (__mediumconst shr (0+16))
 22350  001ECA  6EF8               	movwf	tblptru,c
 22351  001ECC  0E0F               	movlw	(high __ramtop+-1)
 22352  001ECE  64F7               	cpfsgt	tblptrh,c
 22353  001ED0  D003               	bra	i2u497_47
 22354  001ED2  0008               	tblrd		*
 22355  001ED4  50F5               	movf	tablat,w,c
 22356  001ED6  D005               	bra	i2u497_40
 22357  001ED8                     i2u497_47:
 22358  001ED8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22359  001EDC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22360  001EE0  50EF               	movf	indf0,w,c
 22361  001EE2                     i2u497_40:
 22362  001EE2  0900               	iorlw	0
 22363  001EE4  A4D8               	btfss	status,2,c
 22364  001EE6  D7E4               	goto	i2l6534
 22365                           
 22366                           ;doprnt.c: 757: if(width > len)
 22367  001EE8  5028               	movf	i2printf@width,w,c
 22368  001EEA  5C22               	subwf	i2printf@len,w,c
 22369  001EEC  5029               	movf	i2printf@width+1,w,c
 22370  001EEE  5823               	subwfb	i2printf@len+1,w,c
 22371  001EF0  B0D8               	btfsc	status,0,c
 22372  001EF2  D005               	goto	i2l6542
 22373                           
 22374                           ;doprnt.c: 758: width -= len;
 22375  001EF4  5022               	movf	i2printf@len,w,c
 22376  001EF6  5E28               	subwf	i2printf@width,f,c
 22377  001EF8  5023               	movf	i2printf@len+1,w,c
 22378  001EFA  5A29               	subwfb	i2printf@width+1,f,c
 22379  001EFC  D008               	goto	i2l6546
 22380  001EFE                     i2l6542:
 22381                           
 22382                           ;doprnt.c: 759: else
 22383                           ;doprnt.c: 760: width = 0;
 22384  001EFE  0E00               	movlw	0
 22385  001F00  6E29               	movwf	i2printf@width+1,c
 22386  001F02  0E00               	movlw	0
 22387  001F04  6E28               	movwf	i2printf@width,c
 22388                           
 22389                           ;doprnt.c: 764: while(width--)
 22390  001F06  D003               	goto	i2l6546
 22391  001F08                     i2l6544:
 22392                           
 22393                           ;doprnt.c: 765: (putch(' ') );
 22394  001F08  0E20               	movlw	32
 22395  001F0A  EC2C  F02A         	call	i2_putch
 22396  001F0E                     i2l6546:
 22397  001F0E  0628               	decf	i2printf@width,f,c
 22398  001F10  A0D8               	btfss	status,0,c
 22399  001F12  0629               	decf	i2printf@width+1,f,c
 22400  001F14  2828               	incf	i2printf@width,w,c
 22401  001F16  E1F8               	bnz	i2l6544
 22402  001F18  2829               	incf	i2printf@width+1,w,c
 22403  001F1A  B4D8               	btfsc	status,2,c
 22404  001F1C  D016               	goto	i2l6552
 22405  001F1E  D7F4               	goto	i2l6544
 22406  001F20                     i2l6548:
 22407                           
 22408                           ;doprnt.c: 768: (putch(*cp++) );
 22409  001F20  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22410  001F24  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22411  001F28  0E00               	movlw	low (__mediumconst shr (0+16))
 22412  001F2A  6EF8               	movwf	tblptru,c
 22413  001F2C  0E0F               	movlw	(high __ramtop+-1)
 22414  001F2E  64F7               	cpfsgt	tblptrh,c
 22415  001F30  D003               	bra	i2u501_47
 22416  001F32  0008               	tblrd		*
 22417  001F34  50F5               	movf	tablat,w,c
 22418  001F36  D005               	bra	i2u501_40
 22419  001F38                     i2u501_47:
 22420  001F38  CFF6 FFE9          	movff	tblptrl,fsr0l
 22421  001F3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 22422  001F40  50EF               	movf	indf0,w,c
 22423  001F42                     i2u501_40:
 22424  001F42  EC2C  F02A         	call	i2_putch
 22425  001F46  4A1E               	infsnz	i2printf@cp,f,c
 22426  001F48  2A1F               	incf	i2printf@cp+1,f,c
 22427  001F4A                     i2l6552:
 22428  001F4A  0622               	decf	i2printf@len,f,c
 22429  001F4C  A0D8               	btfss	status,0,c
 22430  001F4E  0623               	decf	i2printf@len+1,f,c
 22431  001F50  2822               	incf	i2printf@len,w,c
 22432  001F52  E1E6               	bnz	i2l6548
 22433  001F54  2823               	incf	i2printf@len+1,w,c
 22434  001F56  B4D8               	btfsc	status,2,c
 22435  001F58  D0DA               	goto	i2l6630
 22436  001F5A  D7E2               	goto	i2l6548
 22437  001F5C                     i2l6554:
 22438                           
 22439                           ;doprnt.c: 818: flag |= 0x40;
 22440  001F5C  8C26               	bsf	i2printf@flag,6,c
 22441                           
 22442                           ;doprnt.c: 822: }
 22443                           
 22444                           ;doprnt.c: 819: break;
 22445  001F5E  D01B               	goto	i2l1396
 22446  001F60                     i2l6558:
 22447  001F60  C00D  FFF6         	movff	i2printf@f,tblptrl
 22448  001F64  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22449  001F68  4A0D               	infsnz	i2printf@f,f,c
 22450  001F6A  2A0E               	incf	i2printf@f+1,f,c
 22451  001F6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22452  001F6C  6AF8               	clrf	tblptru,c
 22453  001F6E                     	endif
 22454  001F6E                     	if	0	;tblptru may be non-zero
 22455  001F6E                     	endif
 22456  001F6E  0008               	tblrd		*
 22457  001F70  CFF5 F027          	movff	tablat,i2printf@c
 22458  001F74  5027               	movf	i2printf@c,w,c
 22459                           
 22460                           ; Switch size 1, requested type "space"
 22461                           ; Number of cases is 5, Range of values is 0 to 117
 22462                           ; switch strategies available:
 22463                           ; Name         Instructions Cycles
 22464                           ; simple_byte           16     9 (average)
 22465                           ;	Chosen strategy is simple_byte
 22466  001F76  0A00               	xorlw	0	; case 0
 22467  001F78  B4D8               	btfsc	status,2,c
 22468  001F7A  0012               	return	
 22469  001F7C  0A64               	xorlw	100	; case 100
 22470  001F7E  B4D8               	btfsc	status,2,c
 22471  001F80  D00A               	goto	i2l1396
 22472  001F82  0A0D               	xorlw	13	; case 105
 22473  001F84  B4D8               	btfsc	status,2,c
 22474  001F86  D007               	goto	i2l1396
 22475  001F88  0A1A               	xorlw	26	; case 115
 22476  001F8A  B4D8               	btfsc	status,2,c
 22477  001F8C  D778               	goto	i2l6524
 22478  001F8E  0A06               	xorlw	6	; case 117
 22479  001F90  B4D8               	btfsc	status,2,c
 22480  001F92  D7E4               	goto	i2l6554
 22481  001F94  D0BC               	goto	i2l6630
 22482  001F96                     i2l1396:
 22483                           
 22484                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22485  001F96  BC26               	btfsc	i2printf@flag,6,c
 22486  001F98  D015               	goto	i2l6570
 22487                           
 22488                           ;doprnt.c: 1253: {
 22489                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22490  001F9A  C020  FFD9         	movff	i2printf@ap,fsr2l
 22491  001F9E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22492  001FA2  CFDE F024          	movff	postinc2,i2printf@val
 22493  001FA6  CFDD F025          	movff	postdec2,i2printf@val+1
 22494  001FAA  0E02               	movlw	2
 22495  001FAC  2620               	addwf	i2printf@ap,f,c
 22496  001FAE  0E00               	movlw	0
 22497  001FB0  2221               	addwfc	i2printf@ap+1,f,c
 22498                           
 22499                           ;doprnt.c: 1261: if((int)val < 0) {
 22500  001FB2  AE25               	btfss	i2printf@val+1,7,c
 22501  001FB4  D013               	goto	i2l6574
 22502                           
 22503                           ;doprnt.c: 1262: flag |= 0x03;
 22504  001FB6  0E03               	movlw	3
 22505  001FB8  1226               	iorwf	i2printf@flag,f,c
 22506                           
 22507                           ;doprnt.c: 1263: val = -val;
 22508  001FBA  6C24               	negf	i2printf@val,c
 22509  001FBC  1E25               	comf	i2printf@val+1,f,c
 22510  001FBE  B0D8               	btfsc	status,0,c
 22511  001FC0  2A25               	incf	i2printf@val+1,f,c
 22512                           
 22513                           ;doprnt.c: 1264: }
 22514                           ;doprnt.c: 1266: }
 22515  001FC2  D00C               	goto	i2l6574
 22516  001FC4                     i2l6570:
 22517                           
 22518                           ;doprnt.c: 1268: else
 22519                           ;doprnt.c: 1273: {
 22520                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22521  001FC4  C020  FFD9         	movff	i2printf@ap,fsr2l
 22522  001FC8  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22523  001FCC  CFDE F024          	movff	postinc2,i2printf@val
 22524  001FD0  CFDD F025          	movff	postdec2,i2printf@val+1
 22525  001FD4  0E02               	movlw	2
 22526  001FD6  2620               	addwf	i2printf@ap,f,c
 22527  001FD8  0E00               	movlw	0
 22528  001FDA  2221               	addwfc	i2printf@ap+1,f,c
 22529  001FDC                     i2l6574:
 22530                           
 22531                           ;doprnt.c: 1287: }
 22532                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22533  001FDC  0E01               	movlw	1
 22534  001FDE  6E27               	movwf	i2printf@c,c
 22535  001FE0                     i2l6576:
 22536  001FE0  0E05               	movlw	5
 22537  001FE2  1827               	xorwf	i2printf@c,w,c
 22538  001FE4  B4D8               	btfsc	status,2,c
 22539  001FE6  D015               	goto	i2l6588
 22540                           
 22541                           ;doprnt.c: 1306: if(val < dpowers[c])
 22542  001FE8  5027               	movf	i2printf@c,w,c
 22543  001FEA  0D02               	mullw	2
 22544  001FEC  0E00               	movlw	low _dpowers
 22545  001FEE  24F3               	addwf	prodl,w,c
 22546  001FF0  6EF6               	movwf	tblptrl,c
 22547  001FF2  0EFB               	movlw	high _dpowers
 22548  001FF4  20F4               	addwfc	prodh,w,c
 22549  001FF6  6EF7               	movwf	tblptrh,c
 22550  001FF8                     	if	1	;There are 3 active tblptr bytes
 22551  001FF8  6AF8               	clrf	tblptru,c
 22552  001FFA  0E00               	movlw	low (__mediumconst shr (0+16))
 22553  001FFC  22F8               	addwfc	tblptru,f,c
 22554  001FFE                     	endif
 22555  001FFE  0009               	tblrd		*+
 22556  002000  50F5               	movf	tablat,w,c
 22557  002002  5C24               	subwf	i2printf@val,w,c
 22558  002004  0009               	tblrd		*+
 22559  002006  50F5               	movf	tablat,w,c
 22560  002008  5825               	subwfb	i2printf@val+1,w,c
 22561  00200A  A0D8               	btfss	status,0,c
 22562  00200C  D002               	goto	i2l6588
 22563                           
 22564                           ;doprnt.c: 1307: break;
 22565  00200E  2A27               	incf	i2printf@c,f,c
 22566  002010  D7E7               	goto	i2l6576
 22567  002012                     i2l6588:
 22568                           
 22569                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22570  002012  5028               	movf	i2printf@width,w,c
 22571  002014  1029               	iorwf	i2printf@width+1,w,c
 22572  002016  B4D8               	btfsc	status,2,c
 22573  002018  D009               	goto	i2l6594
 22574  00201A  C026  F019         	movff	i2printf@flag,??i2_printf
 22575  00201E  0E03               	movlw	3
 22576  002020  1619               	andwf	??i2_printf,f,c
 22577  002022  B4D8               	btfsc	status,2,c
 22578  002024  D003               	goto	i2l6594
 22579                           
 22580                           ;doprnt.c: 1346: width--;
 22581  002026  0628               	decf	i2printf@width,f,c
 22582  002028  A0D8               	btfss	status,0,c
 22583  00202A  0629               	decf	i2printf@width+1,f,c
 22584  00202C                     i2l6594:
 22585                           
 22586                           ;doprnt.c: 1381: if(width > c)
 22587  00202C  0E80               	movlw	128
 22588  00202E  BE27               	btfsc	i2printf@c,7,c
 22589  002030  0E7F               	movlw	127
 22590  002032  6E19               	movwf	??i2_printf& (0+255),c
 22591  002034  5028               	movf	i2printf@width,w,c
 22592  002036  5C27               	subwf	i2printf@c,w,c
 22593  002038  5029               	movf	i2printf@width+1,w,c
 22594  00203A  0A80               	xorlw	128
 22595  00203C  5819               	subwfb	??i2_printf& (0+255),w,c
 22596  00203E  B0D8               	btfsc	status,0,c
 22597  002040  D007               	goto	i2l6598
 22598                           
 22599                           ;doprnt.c: 1382: width -= c;
 22600  002042  5027               	movf	i2printf@c,w,c
 22601  002044  5E28               	subwf	i2printf@width,f,c
 22602  002046  0E00               	movlw	0
 22603  002048  BE27               	btfsc	i2printf@c,7,c
 22604  00204A  0EFF               	movlw	255
 22605  00204C  5A29               	subwfb	i2printf@width+1,f,c
 22606  00204E  D004               	goto	i2l6600
 22607  002050                     i2l6598:
 22608                           
 22609                           ;doprnt.c: 1383: else
 22610                           ;doprnt.c: 1384: width = 0;
 22611  002050  0E00               	movlw	0
 22612  002052  6E29               	movwf	i2printf@width+1,c
 22613  002054  0E00               	movlw	0
 22614  002056  6E28               	movwf	i2printf@width,c
 22615  002058                     i2l6600:
 22616                           
 22617                           ;doprnt.c: 1387: if(flag & 0x04) {
 22618  002058  A426               	btfss	i2printf@flag,2,c
 22619  00205A  D014               	goto	i2l6612
 22620                           
 22621                           ;doprnt.c: 1392: if(flag & 0x03)
 22622  00205C  C026  F019         	movff	i2printf@flag,??i2_printf
 22623  002060  0E03               	movlw	3
 22624  002062  1619               	andwf	??i2_printf,f,c
 22625  002064  B4D8               	btfsc	status,2,c
 22626  002066  D003               	goto	i2l6606
 22627                           
 22628                           ;doprnt.c: 1393: (putch('-') );
 22629  002068  0E2D               	movlw	45
 22630  00206A  EC2C  F02A         	call	i2_putch
 22631  00206E                     i2l6606:
 22632                           
 22633                           ;doprnt.c: 1415: if(width)
 22634  00206E  5028               	movf	i2printf@width,w,c
 22635  002070  1029               	iorwf	i2printf@width+1,w,c
 22636  002072  B4D8               	btfsc	status,2,c
 22637  002074  D01E               	goto	i2l6622
 22638                           
 22639                           ;doprnt.c: 1417: (putch('0') );
 22640                           
 22641                           ;doprnt.c: 1416: do
 22642  002076  0E30               	movlw	48
 22643  002078  EC2C  F02A         	call	i2_putch
 22644                           
 22645                           ;doprnt.c: 1418: while(--width);
 22646  00207C  0628               	decf	i2printf@width,f,c
 22647  00207E  A0D8               	btfss	status,0,c
 22648  002080  0629               	decf	i2printf@width+1,f,c
 22649  002082  D7F5               	goto	i2l6606
 22650  002084                     i2l6612:
 22651                           
 22652                           ;doprnt.c: 1422: {
 22653                           ;doprnt.c: 1424: if(width
 22654                           ;doprnt.c: 1428: )
 22655  002084  5028               	movf	i2printf@width,w,c
 22656  002086  1029               	iorwf	i2printf@width+1,w,c
 22657  002088  B4D8               	btfsc	status,2,c
 22658  00208A  D00A               	goto	i2l6618
 22659  00208C                     i2l6614:
 22660                           
 22661                           ;doprnt.c: 1430: (putch(' ') );
 22662  00208C  0E20               	movlw	32
 22663  00208E  EC2C  F02A         	call	i2_putch
 22664                           
 22665                           ;doprnt.c: 1431: while(--width);
 22666  002092  0628               	decf	i2printf@width,f,c
 22667  002094  A0D8               	btfss	status,0,c
 22668  002096  0629               	decf	i2printf@width+1,f,c
 22669  002098  5028               	movf	i2printf@width,w,c
 22670  00209A  1029               	iorwf	i2printf@width+1,w,c
 22671  00209C  A4D8               	btfss	status,2,c
 22672  00209E  D7F6               	goto	i2l6614
 22673  0020A0                     i2l6618:
 22674                           
 22675                           ;doprnt.c: 1438: if(flag & 0x03)
 22676  0020A0  C026  F019         	movff	i2printf@flag,??i2_printf
 22677  0020A4  0E03               	movlw	3
 22678  0020A6  1619               	andwf	??i2_printf,f,c
 22679  0020A8  B4D8               	btfsc	status,2,c
 22680  0020AA  D003               	goto	i2l6622
 22681                           
 22682                           ;doprnt.c: 1439: (putch('-') );
 22683  0020AC  0E2D               	movlw	45
 22684  0020AE  EC2C  F02A         	call	i2_putch
 22685  0020B2                     i2l6622:
 22686                           
 22687                           ;doprnt.c: 1469: }
 22688                           ;doprnt.c: 1472: prec = c;
 22689  0020B2  C027  F01D         	movff	i2printf@c,i2printf@prec
 22690                           
 22691                           ;doprnt.c: 1474: while(prec--) {
 22692  0020B6  D027               	goto	i2l6628
 22693  0020B8                     i2l6624:
 22694                           
 22695                           ;doprnt.c: 1478: {
 22696                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22697  0020B8  501D               	movf	i2printf@prec,w,c
 22698  0020BA  0D02               	mullw	2
 22699  0020BC  0E00               	movlw	low _dpowers
 22700  0020BE  24F3               	addwf	prodl,w,c
 22701  0020C0  6EF6               	movwf	tblptrl,c
 22702  0020C2  0EFB               	movlw	high _dpowers
 22703  0020C4  20F4               	addwfc	prodh,w,c
 22704  0020C6  6EF7               	movwf	tblptrh,c
 22705  0020C8                     	if	1	;There are 3 active tblptr bytes
 22706  0020C8  6AF8               	clrf	tblptru,c
 22707  0020CA  0E00               	movlw	low (__mediumconst shr (0+16))
 22708  0020CC  22F8               	addwfc	tblptru,f,c
 22709  0020CE                     	endif
 22710  0020CE  0009               	tblrd		*+
 22711  0020D0  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22712  0020D4  000A               	tblrd		*-
 22713  0020D6  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22714  0020DA  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22715  0020DE  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22716  0020E2  EC68  F026         	call	i2___lwdiv	;wreg free
 22717  0020E6  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22718  0020EA  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22719  0020EE  0E00               	movlw	0
 22720  0020F0  6E04               	movwf	i2___lwmod@divisor+1,c
 22721  0020F2  0E0A               	movlw	10
 22722  0020F4  6E03               	movwf	i2___lwmod@divisor,c
 22723  0020F6  EC27  F027         	call	i2___lwmod	;wreg free
 22724  0020FA  5001               	movf	?i2___lwmod,w,c
 22725  0020FC  0F30               	addlw	48
 22726  0020FE  6E27               	movwf	i2printf@c,c
 22727                           
 22728                           ;doprnt.c: 1523: }
 22729                           ;doprnt.c: 1524: (putch(c) );
 22730  002100  5027               	movf	i2printf@c,w,c
 22731  002102  EC2C  F02A         	call	i2_putch
 22732  002106                     i2l6628:
 22733  002106  061D               	decf	i2printf@prec,f,c
 22734  002108  281D               	incf	i2printf@prec,w,c
 22735  00210A  A4D8               	btfss	status,2,c
 22736  00210C  D7D5               	goto	i2l6624
 22737  00210E                     i2l6630:
 22738  00210E  C00D  FFF6         	movff	i2printf@f,tblptrl
 22739  002112  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22740  002116  4A0D               	infsnz	i2printf@f,f,c
 22741  002118  2A0E               	incf	i2printf@f+1,f,c
 22742  00211A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22743  00211A  6AF8               	clrf	tblptru,c
 22744  00211C                     	endif
 22745  00211C                     	if	0	;tblptru may be non-zero
 22746  00211C                     	endif
 22747  00211C  0008               	tblrd		*
 22748  00211E  CFF5 F027          	movff	tablat,i2printf@c
 22749  002122  5027               	movf	i2printf@c,w,c
 22750  002124  B4D8               	btfsc	status,2,c
 22751  002126  0012               	return	
 22752  002128  D64E               	goto	i2l6500
 22753  00212A                     __end_ofi2_printf:
 22754                           	opt stack 0
 22755                           pclatu	equ	0xFFB
 22756                           pclath	equ	0xFFA
 22757                           tblptru	equ	0xFF8
 22758                           tblptrh	equ	0xFF7
 22759                           tblptrl	equ	0xFF6
 22760                           tablat	equ	0xFF5
 22761                           prodh	equ	0xFF4
 22762                           prodl	equ	0xFF3
 22763                           intcon	equ	0xFF2
 22764                           intcon2	equ	0xFF1
 22765                           intcon3	equ	0xFF0
 22766                           indf0	equ	0xFEF
 22767                           postinc0	equ	0xFEE
 22768                           fsr0h	equ	0xFEA
 22769                           fsr0l	equ	0xFE9
 22770                           wreg	equ	0xFE8
 22771                           postdec1	equ	0xFE5
 22772                           fsr1h	equ	0xFE2
 22773                           fsr1l	equ	0xFE1
 22774                           indf2	equ	0xFDF
 22775                           postinc2	equ	0xFDE
 22776                           postdec2	equ	0xFDD
 22777                           fsr2h	equ	0xFDA
 22778                           fsr2l	equ	0xFD9
 22779                           status	equ	0xFD8
 22780                           
 22781 ;; *************** function i2_putch *****************
 22782 ;; Defined at:
 22783 ;;		line 20 in file "lcd.c"
 22784 ;; Parameters:    Size  Location     Type
 22785 ;;  data            1    wreg     unsigned char 
 22786 ;; Auto vars:     Size  Location     Type
 22787 ;;  data            1    2[COMRAM] unsigned char 
 22788 ;; Return value:  Size  Location     Type
 22789 ;;                  1    wreg      void 
 22790 ;; Registers used:
 22791 ;;		wreg, status,2, status,0, cstack
 22792 ;; Tracked objects:
 22793 ;;		On entry : 0/0
 22794 ;;		On exit  : 0/0
 22795 ;;		Unchanged: 0/0
 22796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22801 ;;Total ram usage:        1 bytes
 22802 ;; Hardware stack levels used:    1
 22803 ;; Hardware stack levels required when called:    1
 22804 ;; This function calls:
 22805 ;;		i2_lcdNibble
 22806 ;; This function is called by:
 22807 ;;		i2_printf
 22808 ;; This function uses a non-reentrant model
 22809 ;;
 22810                           
 22811                           	psect	text83
 22812  005458                     __ptext83:
 22813                           	opt stack 0
 22814  005458                     i2_putch:
 22815                           	opt stack 19
 22816                           
 22817                           ;incstack = 0
 22818                           ;i2putch@data stored from wreg
 22819  005458  6E03               	movwf	i2putch@data,c
 22820                           
 22821                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22822  00545A  848C               	bsf	3980,2,c	;volatile
 22823                           
 22824                           ;lcd.c: 22: lcdNibble(data);
 22825  00545C  5003               	movf	i2putch@data,w,c
 22826  00545E  EC3D  F026         	call	i2_lcdNibble
 22827  005462  0012               	return		;funcret
 22828  005464                     __end_ofi2_putch:
 22829                           	opt stack 0
 22830                           pclatu	equ	0xFFB
 22831                           pclath	equ	0xFFA
 22832                           tblptru	equ	0xFF8
 22833                           tblptrh	equ	0xFF7
 22834                           tblptrl	equ	0xFF6
 22835                           tablat	equ	0xFF5
 22836                           prodh	equ	0xFF4
 22837                           prodl	equ	0xFF3
 22838                           intcon	equ	0xFF2
 22839                           intcon2	equ	0xFF1
 22840                           intcon3	equ	0xFF0
 22841                           indf0	equ	0xFEF
 22842                           postinc0	equ	0xFEE
 22843                           fsr0h	equ	0xFEA
 22844                           fsr0l	equ	0xFE9
 22845                           wreg	equ	0xFE8
 22846                           postdec1	equ	0xFE5
 22847                           fsr1h	equ	0xFE2
 22848                           fsr1l	equ	0xFE1
 22849                           indf2	equ	0xFDF
 22850                           postinc2	equ	0xFDE
 22851                           postdec2	equ	0xFDD
 22852                           fsr2h	equ	0xFDA
 22853                           fsr2l	equ	0xFD9
 22854                           status	equ	0xFD8
 22855                           
 22856 ;; *************** function i2_isdigit *****************
 22857 ;; Defined at:
 22858 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22859 ;; Parameters:    Size  Location     Type
 22860 ;;  c               1    wreg     unsigned char 
 22861 ;; Auto vars:     Size  Location     Type
 22862 ;;  c               1    2[COMRAM] unsigned char 
 22863 ;; Return value:  Size  Location     Type
 22864 ;;		None               void
 22865 ;; Registers used:
 22866 ;;		wreg, status,2, status,0
 22867 ;; Tracked objects:
 22868 ;;		On entry : 0/0
 22869 ;;		On exit  : 0/0
 22870 ;;		Unchanged: 0/0
 22871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22875 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22876 ;;Total ram usage:        3 bytes
 22877 ;; Hardware stack levels used:    1
 22878 ;; This function calls:
 22879 ;;		Nothing
 22880 ;; This function is called by:
 22881 ;;		i2_printf
 22882 ;; This function uses a non-reentrant model
 22883 ;;
 22884                           
 22885                           	psect	text84
 22886  005390                     __ptext84:
 22887                           	opt stack 0
 22888  005390                     i2_isdigit:
 22889                           	opt stack 20
 22890                           
 22891                           ;incstack = 0
 22892                           ;i2isdigit@c stored from wreg
 22893  005390  6E03               	movwf	i2isdigit@c,c
 22894  005392  0E00               	movlw	0
 22895  005394  6E02               	movwf	i2_isdigit$2054,c
 22896  005396  0E3A               	movlw	58
 22897  005398  6003               	cpfslt	i2isdigit@c,c
 22898  00539A  D005               	goto	i2l6204
 22899  00539C  0E2F               	movlw	47
 22900  00539E  6403               	cpfsgt	i2isdigit@c,c
 22901  0053A0  D002               	goto	i2l6204
 22902  0053A2  0E01               	movlw	1
 22903  0053A4  6E02               	movwf	i2_isdigit$2054,c
 22904  0053A6                     i2l6204:
 22905  0053A6  C002  F001         	movff	i2_isdigit$2054,??i2_isdigit
 22906  0053AA  3001               	rrcf	??i2_isdigit,w,c
 22907  0053AC  0012               	return	
 22908  0053AE                     __end_ofi2_isdigit:
 22909                           	opt stack 0
 22910                           pclatu	equ	0xFFB
 22911                           pclath	equ	0xFFA
 22912                           tblptru	equ	0xFF8
 22913                           tblptrh	equ	0xFF7
 22914                           tblptrl	equ	0xFF6
 22915                           tablat	equ	0xFF5
 22916                           prodh	equ	0xFF4
 22917                           prodl	equ	0xFF3
 22918                           intcon	equ	0xFF2
 22919                           intcon2	equ	0xFF1
 22920                           intcon3	equ	0xFF0
 22921                           indf0	equ	0xFEF
 22922                           postinc0	equ	0xFEE
 22923                           fsr0h	equ	0xFEA
 22924                           fsr0l	equ	0xFE9
 22925                           wreg	equ	0xFE8
 22926                           postdec1	equ	0xFE5
 22927                           fsr1h	equ	0xFE2
 22928                           fsr1l	equ	0xFE1
 22929                           indf2	equ	0xFDF
 22930                           postinc2	equ	0xFDE
 22931                           postdec2	equ	0xFDD
 22932                           fsr2h	equ	0xFDA
 22933                           fsr2l	equ	0xFD9
 22934                           status	equ	0xFD8
 22935                           
 22936 ;; *************** function i2___wmul *****************
 22937 ;; Defined at:
 22938 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22939 ;; Parameters:    Size  Location     Type
 22940 ;;  multiplier      2    0[COMRAM] unsigned int 
 22941 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22942 ;; Auto vars:     Size  Location     Type
 22943 ;;  __wmul          2    4[COMRAM] unsigned int 
 22944 ;; Return value:  Size  Location     Type
 22945 ;;                  2    0[COMRAM] unsigned int 
 22946 ;; Registers used:
 22947 ;;		wreg, status,2, status,0, prodl, prodh
 22948 ;; Tracked objects:
 22949 ;;		On entry : 0/0
 22950 ;;		On exit  : 0/0
 22951 ;;		Unchanged: 0/0
 22952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22957 ;;Total ram usage:        6 bytes
 22958 ;; Hardware stack levels used:    1
 22959 ;; This function calls:
 22960 ;;		Nothing
 22961 ;; This function is called by:
 22962 ;;		_printSortTimer
 22963 ;;		_retrieveLog
 22964 ;;		i2_printf
 22965 ;; This function uses a non-reentrant model
 22966 ;;
 22967                           
 22968                           	psect	text85
 22969  0052DC                     __ptext85:
 22970                           	opt stack 0
 22971  0052DC                     i2___wmul:
 22972                           	opt stack 20
 22973                           
 22974                           ;incstack = 0
 22975  0052DC  5001               	movf	i2___wmul@multiplier,w,c
 22976  0052DE  0203               	mulwf	i2___wmul@multiplicand,c
 22977  0052E0  CFF3 F005          	movff	prodl,i2___wmul@product
 22978  0052E4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22979  0052E8  5001               	movf	i2___wmul@multiplier,w,c
 22980  0052EA  0204               	mulwf	i2___wmul@multiplicand+1,c
 22981  0052EC  50F3               	movf	prodl,w,c
 22982  0052EE  2606               	addwf	i2___wmul@product+1,f,c
 22983  0052F0  5002               	movf	i2___wmul@multiplier+1,w,c
 22984  0052F2  0203               	mulwf	i2___wmul@multiplicand,c
 22985  0052F4  50F3               	movf	prodl,w,c
 22986  0052F6  2606               	addwf	i2___wmul@product+1,f,c
 22987  0052F8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22988  0052FC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22989  005300  0012               	return	
 22990  005302                     __end_ofi2___wmul:
 22991                           	opt stack 0
 22992                           pclatu	equ	0xFFB
 22993                           pclath	equ	0xFFA
 22994                           tblptru	equ	0xFF8
 22995                           tblptrh	equ	0xFF7
 22996                           tblptrl	equ	0xFF6
 22997                           tablat	equ	0xFF5
 22998                           prodh	equ	0xFF4
 22999                           prodl	equ	0xFF3
 23000                           intcon	equ	0xFF2
 23001                           intcon2	equ	0xFF1
 23002                           intcon3	equ	0xFF0
 23003                           indf0	equ	0xFEF
 23004                           postinc0	equ	0xFEE
 23005                           fsr0h	equ	0xFEA
 23006                           fsr0l	equ	0xFE9
 23007                           wreg	equ	0xFE8
 23008                           postdec1	equ	0xFE5
 23009                           fsr1h	equ	0xFE2
 23010                           fsr1l	equ	0xFE1
 23011                           indf2	equ	0xFDF
 23012                           postinc2	equ	0xFDE
 23013                           postdec2	equ	0xFDD
 23014                           fsr2h	equ	0xFDA
 23015                           fsr2l	equ	0xFD9
 23016                           status	equ	0xFD8
 23017                           
 23018 ;; *************** function i2___lwmod *****************
 23019 ;; Defined at:
 23020 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23021 ;; Parameters:    Size  Location     Type
 23022 ;;  dividend        2    0[COMRAM] unsigned int 
 23023 ;;  divisor         2    2[COMRAM] unsigned int 
 23024 ;; Auto vars:     Size  Location     Type
 23025 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23026 ;; Return value:  Size  Location     Type
 23027 ;;                  2    0[COMRAM] unsigned int 
 23028 ;; Registers used:
 23029 ;;		wreg, status,2, status,0
 23030 ;; Tracked objects:
 23031 ;;		On entry : 0/0
 23032 ;;		On exit  : 0/0
 23033 ;;		Unchanged: 0/0
 23034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23038 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23039 ;;Total ram usage:        5 bytes
 23040 ;; Hardware stack levels used:    1
 23041 ;; This function calls:
 23042 ;;		Nothing
 23043 ;; This function is called by:
 23044 ;;		_printSortTimer
 23045 ;;		i2_printf
 23046 ;; This function uses a non-reentrant model
 23047 ;;
 23048                           
 23049                           	psect	text86
 23050  004E4E                     __ptext86:
 23051                           	opt stack 0
 23052  004E4E                     i2___lwmod:
 23053                           	opt stack 20
 23054                           
 23055                           ;incstack = 0
 23056  004E4E  5003               	movf	i2___lwmod@divisor,w,c
 23057  004E50  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23058  004E52  B4D8               	btfsc	status,2,c
 23059  004E54  D018               	goto	i2l1853
 23060  004E56  0E01               	movlw	1
 23061  004E58  6E05               	movwf	i2___lwmod@counter,c
 23062  004E5A  D004               	goto	i2l6236
 23063  004E5C                     i2l6234:
 23064  004E5C  90D8               	bcf	status,0,c
 23065  004E5E  3603               	rlcf	i2___lwmod@divisor,f,c
 23066  004E60  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23067  004E62  2A05               	incf	i2___lwmod@counter,f,c
 23068  004E64                     i2l6236:
 23069  004E64  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23070  004E66  D7FA               	goto	i2l6234
 23071  004E68                     i2l6238:
 23072  004E68  5003               	movf	i2___lwmod@divisor,w,c
 23073  004E6A  5C01               	subwf	i2___lwmod@dividend,w,c
 23074  004E6C  5004               	movf	i2___lwmod@divisor+1,w,c
 23075  004E6E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23076  004E70  A0D8               	btfss	status,0,c
 23077  004E72  D004               	goto	i2l6242
 23078  004E74  5003               	movf	i2___lwmod@divisor,w,c
 23079  004E76  5E01               	subwf	i2___lwmod@dividend,f,c
 23080  004E78  5004               	movf	i2___lwmod@divisor+1,w,c
 23081  004E7A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23082  004E7C                     i2l6242:
 23083  004E7C  90D8               	bcf	status,0,c
 23084  004E7E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23085  004E80  3203               	rrcf	i2___lwmod@divisor,f,c
 23086  004E82  2E05               	decfsz	i2___lwmod@counter,f,c
 23087  004E84  D7F1               	goto	i2l6238
 23088  004E86                     i2l1853:
 23089  004E86  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23090  004E8A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23091  004E8E  0012               	return		;funcret
 23092  004E90                     __end_ofi2___lwmod:
 23093                           	opt stack 0
 23094                           pclatu	equ	0xFFB
 23095                           pclath	equ	0xFFA
 23096                           tblptru	equ	0xFF8
 23097                           tblptrh	equ	0xFF7
 23098                           tblptrl	equ	0xFF6
 23099                           tablat	equ	0xFF5
 23100                           prodh	equ	0xFF4
 23101                           prodl	equ	0xFF3
 23102                           intcon	equ	0xFF2
 23103                           intcon2	equ	0xFF1
 23104                           intcon3	equ	0xFF0
 23105                           indf0	equ	0xFEF
 23106                           postinc0	equ	0xFEE
 23107                           fsr0h	equ	0xFEA
 23108                           fsr0l	equ	0xFE9
 23109                           wreg	equ	0xFE8
 23110                           postdec1	equ	0xFE5
 23111                           fsr1h	equ	0xFE2
 23112                           fsr1l	equ	0xFE1
 23113                           indf2	equ	0xFDF
 23114                           postinc2	equ	0xFDE
 23115                           postdec2	equ	0xFDD
 23116                           fsr2h	equ	0xFDA
 23117                           fsr2l	equ	0xFD9
 23118                           status	equ	0xFD8
 23119                           
 23120 ;; *************** function i2___lwdiv *****************
 23121 ;; Defined at:
 23122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23123 ;; Parameters:    Size  Location     Type
 23124 ;;  dividend        2    5[COMRAM] unsigned int 
 23125 ;;  divisor         2    7[COMRAM] unsigned int 
 23126 ;; Auto vars:     Size  Location     Type
 23127 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23128 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23129 ;; Return value:  Size  Location     Type
 23130 ;;                  2    5[COMRAM] unsigned int 
 23131 ;; Registers used:
 23132 ;;		wreg, status,2, status,0
 23133 ;; Tracked objects:
 23134 ;;		On entry : 0/0
 23135 ;;		On exit  : 0/0
 23136 ;;		Unchanged: 0/0
 23137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23139 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23141 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23142 ;;Total ram usage:        7 bytes
 23143 ;; Hardware stack levels used:    1
 23144 ;; This function calls:
 23145 ;;		Nothing
 23146 ;; This function is called by:
 23147 ;;		_printSortTimer
 23148 ;;		i2_printf
 23149 ;; This function uses a non-reentrant model
 23150 ;;
 23151                           
 23152                           	psect	text87
 23153  004CD0                     __ptext87:
 23154                           	opt stack 0
 23155  004CD0                     i2___lwdiv:
 23156                           	opt stack 20
 23157                           
 23158                           ;incstack = 0
 23159  004CD0  0E00               	movlw	0
 23160  004CD2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23161  004CD4  0E00               	movlw	0
 23162  004CD6  6E0A               	movwf	i2___lwdiv@quotient,c
 23163  004CD8  5008               	movf	i2___lwdiv@divisor,w,c
 23164  004CDA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23165  004CDC  B4D8               	btfsc	status,2,c
 23166  004CDE  D01C               	goto	i2l1843
 23167  004CE0  0E01               	movlw	1
 23168  004CE2  6E0C               	movwf	i2___lwdiv@counter,c
 23169  004CE4  D004               	goto	i2l6216
 23170  004CE6                     i2l6214:
 23171  004CE6  90D8               	bcf	status,0,c
 23172  004CE8  3608               	rlcf	i2___lwdiv@divisor,f,c
 23173  004CEA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23174  004CEC  2A0C               	incf	i2___lwdiv@counter,f,c
 23175  004CEE                     i2l6216:
 23176  004CEE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23177  004CF0  D7FA               	goto	i2l6214
 23178  004CF2                     i2l6218:
 23179  004CF2  90D8               	bcf	status,0,c
 23180  004CF4  360A               	rlcf	i2___lwdiv@quotient,f,c
 23181  004CF6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23182  004CF8  5008               	movf	i2___lwdiv@divisor,w,c
 23183  004CFA  5C06               	subwf	i2___lwdiv@dividend,w,c
 23184  004CFC  5009               	movf	i2___lwdiv@divisor+1,w,c
 23185  004CFE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23186  004D00  A0D8               	btfss	status,0,c
 23187  004D02  D005               	goto	i2l6226
 23188  004D04  5008               	movf	i2___lwdiv@divisor,w,c
 23189  004D06  5E06               	subwf	i2___lwdiv@dividend,f,c
 23190  004D08  5009               	movf	i2___lwdiv@divisor+1,w,c
 23191  004D0A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23192  004D0C  800A               	bsf	i2___lwdiv@quotient,0,c
 23193  004D0E                     i2l6226:
 23194  004D0E  90D8               	bcf	status,0,c
 23195  004D10  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23196  004D12  3208               	rrcf	i2___lwdiv@divisor,f,c
 23197  004D14  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23198  004D16  D7ED               	goto	i2l6218
 23199  004D18                     i2l1843:
 23200  004D18  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23201  004D1C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23202  004D20  0012               	return		;funcret
 23203  004D22                     __end_ofi2___lwdiv:
 23204                           	opt stack 0
 23205                           pclatu	equ	0xFFB
 23206                           pclath	equ	0xFFA
 23207                           tblptru	equ	0xFF8
 23208                           tblptrh	equ	0xFF7
 23209                           tblptrl	equ	0xFF6
 23210                           tablat	equ	0xFF5
 23211                           prodh	equ	0xFF4
 23212                           prodl	equ	0xFF3
 23213                           intcon	equ	0xFF2
 23214                           intcon2	equ	0xFF1
 23215                           intcon3	equ	0xFF0
 23216                           indf0	equ	0xFEF
 23217                           postinc0	equ	0xFEE
 23218                           fsr0h	equ	0xFEA
 23219                           fsr0l	equ	0xFE9
 23220                           wreg	equ	0xFE8
 23221                           postdec1	equ	0xFE5
 23222                           fsr1h	equ	0xFE2
 23223                           fsr1l	equ	0xFE1
 23224                           indf2	equ	0xFDF
 23225                           postinc2	equ	0xFDE
 23226                           postdec2	equ	0xFDD
 23227                           fsr2h	equ	0xFDA
 23228                           fsr2l	equ	0xFD9
 23229                           status	equ	0xFD8
 23230                           
 23231 ;; *************** function i2_lcdInst *****************
 23232 ;; Defined at:
 23233 ;;		line 15 in file "lcd.c"
 23234 ;; Parameters:    Size  Location     Type
 23235 ;;  data            1    wreg     unsigned char 
 23236 ;; Auto vars:     Size  Location     Type
 23237 ;;  data            1    2[COMRAM] unsigned char 
 23238 ;; Return value:  Size  Location     Type
 23239 ;;                  1    wreg      void 
 23240 ;; Registers used:
 23241 ;;		wreg, status,2, status,0, cstack
 23242 ;; Tracked objects:
 23243 ;;		On entry : 0/0
 23244 ;;		On exit  : 0/0
 23245 ;;		Unchanged: 0/0
 23246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23251 ;;Total ram usage:        1 bytes
 23252 ;; Hardware stack levels used:    1
 23253 ;; Hardware stack levels required when called:    1
 23254 ;; This function calls:
 23255 ;;		i2_lcdNibble
 23256 ;; This function is called by:
 23257 ;;		_change_state_to_menu_11
 23258 ;;		_change_state_to_menu_23
 23259 ;;		_change_state_to_logs_11
 23260 ;;		_change_state_to_logs_12
 23261 ;;		_change_state_to_logs_22
 23262 ;;		_change_state_to_logs_23
 23263 ;;		_change_state_to_logs_33
 23264 ;;		_change_state_to_logs_34
 23265 ;;		_printSortTimer
 23266 ;;		i2_change_state_to_menu_start
 23267 ;;		i2_change_state_to_menu_12
 23268 ;;		i2_change_state_to_menu_22
 23269 ;;		i2_printRTC
 23270 ;; This function uses a non-reentrant model
 23271 ;;
 23272                           
 23273                           	psect	text88
 23274  005464                     __ptext88:
 23275                           	opt stack 0
 23276  005464                     i2_lcdInst:
 23277                           	opt stack 19
 23278                           
 23279                           ;incstack = 0
 23280                           ;i2lcdInst@data stored from wreg
 23281  005464  6E03               	movwf	i2lcdInst@data,c
 23282                           
 23283                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23284  005466  948C               	bcf	3980,2,c	;volatile
 23285                           
 23286                           ;lcd.c: 17: lcdNibble(data);
 23287  005468  5003               	movf	i2lcdInst@data,w,c
 23288  00546A  EC3D  F026         	call	i2_lcdNibble
 23289  00546E  0012               	return		;funcret
 23290  005470                     __end_ofi2_lcdInst:
 23291                           	opt stack 0
 23292                           pclatu	equ	0xFFB
 23293                           pclath	equ	0xFFA
 23294                           tblptru	equ	0xFF8
 23295                           tblptrh	equ	0xFF7
 23296                           tblptrl	equ	0xFF6
 23297                           tablat	equ	0xFF5
 23298                           prodh	equ	0xFF4
 23299                           prodl	equ	0xFF3
 23300                           intcon	equ	0xFF2
 23301                           intcon2	equ	0xFF1
 23302                           intcon3	equ	0xFF0
 23303                           indf0	equ	0xFEF
 23304                           postinc0	equ	0xFEE
 23305                           fsr0h	equ	0xFEA
 23306                           fsr0l	equ	0xFE9
 23307                           wreg	equ	0xFE8
 23308                           postdec1	equ	0xFE5
 23309                           fsr1h	equ	0xFE2
 23310                           fsr1l	equ	0xFE1
 23311                           indf2	equ	0xFDF
 23312                           postinc2	equ	0xFDE
 23313                           postdec2	equ	0xFDD
 23314                           fsr2h	equ	0xFDA
 23315                           fsr2l	equ	0xFD9
 23316                           status	equ	0xFD8
 23317                           
 23318 ;; *************** function i2_lcdNibble *****************
 23319 ;; Defined at:
 23320 ;;		line 25 in file "lcd.c"
 23321 ;; Parameters:    Size  Location     Type
 23322 ;;  data            1    wreg     unsigned char 
 23323 ;; Auto vars:     Size  Location     Type
 23324 ;;  data            1    1[COMRAM] unsigned char 
 23325 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23326 ;; Return value:  Size  Location     Type
 23327 ;;                  1    wreg      void 
 23328 ;; Registers used:
 23329 ;;		wreg, status,2, status,0
 23330 ;; Tracked objects:
 23331 ;;		On entry : 0/0
 23332 ;;		On exit  : 0/0
 23333 ;;		Unchanged: 0/0
 23334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23339 ;;Total ram usage:        2 bytes
 23340 ;; Hardware stack levels used:    1
 23341 ;; This function calls:
 23342 ;;		Nothing
 23343 ;; This function is called by:
 23344 ;;		i2_lcdInst
 23345 ;;		i2_putch
 23346 ;; This function uses a non-reentrant model
 23347 ;;
 23348                           
 23349                           	psect	text89
 23350  004C7A                     __ptext89:
 23351                           	opt stack 0
 23352  004C7A                     i2_lcdNibble:
 23353                           	opt stack 19
 23354                           
 23355                           ;incstack = 0
 23356                           ;i2lcdNibble@data stored from wreg
 23357  004C7A  6E02               	movwf	i2lcdNibble@data,c
 23358                           
 23359                           ;lcd.c: 27: char temp = data & 0xF0;
 23360  004C7C  5002               	movf	i2lcdNibble@data,w,c
 23361  004C7E  0BF0               	andlw	240
 23362  004C80  6E01               	movwf	i2lcdNibble@temp,c
 23363                           
 23364                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23365  004C82  508C               	movf	3980,w,c	;volatile
 23366  004C84  0B0F               	andlw	15
 23367  004C86  6E8C               	movwf	3980,c	;volatile
 23368                           
 23369                           ;lcd.c: 29: LATD = temp | LATD;
 23370  004C88  5001               	movf	i2lcdNibble@temp,w,c
 23371  004C8A  108C               	iorwf	3980,w,c	;volatile
 23372  004C8C  6E8C               	movwf	3980,c	;volatile
 23373                           
 23374                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23375  004C8E  868C               	bsf	3980,3,c	;volatile
 23376                           
 23377                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23378  004C90  0E42               	movlw	66
 23379  004C92                     i2u1013_47:
 23380  004C92  2EE8               	decfsz	wreg,f,c
 23381  004C94  D7FE               	bra	i2u1013_47
 23382  004C96  D000               	nop2	
 23383                           
 23384                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23385  004C98  968C               	bcf	3980,3,c	;volatile
 23386                           
 23387                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23388  004C9A  0E42               	movlw	66
 23389  004C9C                     i2u1014_47:
 23390  004C9C  2EE8               	decfsz	wreg,f,c
 23391  004C9E  D7FE               	bra	i2u1014_47
 23392  004CA0  D000               	nop2	
 23393                           
 23394                           ;lcd.c: 36: data = data << 4;
 23395  004CA2  3802               	swapf	i2lcdNibble@data,w,c
 23396  004CA4  0BF0               	andlw	240
 23397  004CA6  6E02               	movwf	i2lcdNibble@data,c
 23398                           
 23399                           ;lcd.c: 38: temp = data & 0xF0;
 23400  004CA8  5002               	movf	i2lcdNibble@data,w,c
 23401  004CAA  0BF0               	andlw	240
 23402  004CAC  6E01               	movwf	i2lcdNibble@temp,c
 23403                           
 23404                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23405  004CAE  508C               	movf	3980,w,c	;volatile
 23406  004CB0  0B0F               	andlw	15
 23407  004CB2  6E8C               	movwf	3980,c	;volatile
 23408                           
 23409                           ;lcd.c: 40: LATD = temp | LATD;
 23410  004CB4  5001               	movf	i2lcdNibble@temp,w,c
 23411  004CB6  108C               	iorwf	3980,w,c	;volatile
 23412  004CB8  6E8C               	movwf	3980,c	;volatile
 23413                           
 23414                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23415  004CBA  868C               	bsf	3980,3,c	;volatile
 23416                           
 23417                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23418  004CBC  0E42               	movlw	66
 23419  004CBE                     i2u1015_47:
 23420  004CBE  2EE8               	decfsz	wreg,f,c
 23421  004CC0  D7FE               	bra	i2u1015_47
 23422  004CC2  D000               	nop2	
 23423                           
 23424                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23425  004CC4  968C               	bcf	3980,3,c	;volatile
 23426                           
 23427                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23428  004CC6  0E42               	movlw	66
 23429  004CC8                     i2u1016_47:
 23430  004CC8  2EE8               	decfsz	wreg,f,c
 23431  004CCA  D7FE               	bra	i2u1016_47
 23432  004CCC  D000               	nop2	
 23433  004CCE  0012               	return		;funcret
 23434  004CD0                     __end_ofi2_lcdNibble:
 23435                           	opt stack 0
 23436                           pclatu	equ	0xFFB
 23437                           pclath	equ	0xFFA
 23438                           tblptru	equ	0xFF8
 23439                           tblptrh	equ	0xFF7
 23440                           tblptrl	equ	0xFF6
 23441                           tablat	equ	0xFF5
 23442                           prodh	equ	0xFF4
 23443                           prodl	equ	0xFF3
 23444                           intcon	equ	0xFF2
 23445                           intcon2	equ	0xFF1
 23446                           intcon3	equ	0xFF0
 23447                           indf0	equ	0xFEF
 23448                           postinc0	equ	0xFEE
 23449                           fsr0h	equ	0xFEA
 23450                           fsr0l	equ	0xFE9
 23451                           wreg	equ	0xFE8
 23452                           postdec1	equ	0xFE5
 23453                           fsr1h	equ	0xFE2
 23454                           fsr1l	equ	0xFE1
 23455                           indf2	equ	0xFDF
 23456                           postinc2	equ	0xFDE
 23457                           postdec2	equ	0xFDD
 23458                           fsr2h	equ	0xFDA
 23459                           fsr2l	equ	0xFD9
 23460                           status	equ	0xFD8
 23461                           
 23462 ;; *************** function i2_getRTC *****************
 23463 ;; Defined at:
 23464 ;;		line 44 in file "RTC.c"
 23465 ;; Parameters:    Size  Location     Type
 23466 ;;		None
 23467 ;; Auto vars:     Size  Location     Type
 23468 ;;  getRTC          2    3[COMRAM] int 
 23469 ;; Return value:  Size  Location     Type
 23470 ;;                  1    wreg      void 
 23471 ;; Registers used:
 23472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23473 ;; Tracked objects:
 23474 ;;		On entry : 0/0
 23475 ;;		On exit  : 0/0
 23476 ;;		Unchanged: 0/0
 23477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23482 ;;Total ram usage:        2 bytes
 23483 ;; Hardware stack levels used:    1
 23484 ;; Hardware stack levels required when called:    2
 23485 ;; This function calls:
 23486 ;;		i2_I2C_Master_Read
 23487 ;;		i2_I2C_Master_Start
 23488 ;;		i2_I2C_Master_Stop
 23489 ;;		i2_I2C_Master_Write
 23490 ;; This function is called by:
 23491 ;;		_printSortTimer
 23492 ;;		i2_printRTC
 23493 ;; This function uses a non-reentrant model
 23494 ;;
 23495                           
 23496                           	psect	text90
 23497  004964                     __ptext90:
 23498                           	opt stack 0
 23499  004964                     i2_getRTC:
 23500                           	opt stack 18
 23501                           
 23502                           ;RTC.c: 48: I2C_Master_Start();
 23503                           
 23504                           ;incstack = 0
 23505  004964  EC52  F02A         	call	i2_I2C_Master_Start	;wreg free
 23506                           
 23507                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23508  004968  0E00               	movlw	0
 23509  00496A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23510  00496C  0ED0               	movlw	208
 23511  00496E  6E02               	movwf	i2I2C_Master_Write@d,c
 23512  004970  EC3D  F02A         	call	i2_I2C_Master_Write	;wreg free
 23513                           
 23514                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23515  004974  0E00               	movlw	0
 23516  004976  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23517  004978  0E00               	movlw	0
 23518  00497A  6E02               	movwf	i2I2C_Master_Write@d,c
 23519  00497C  EC3D  F02A         	call	i2_I2C_Master_Write	;wreg free
 23520                           
 23521                           ;RTC.c: 51: I2C_Master_Stop();
 23522  004980  EC4E  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23523                           
 23524                           ;RTC.c: 54: I2C_Master_Start();
 23525  004984  EC52  F02A         	call	i2_I2C_Master_Start	;wreg free
 23526                           
 23527                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23528  004988  0E00               	movlw	0
 23529  00498A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23530  00498C  0ED1               	movlw	209
 23531  00498E  6E02               	movwf	i2I2C_Master_Write@d,c
 23532  004990  EC3D  F02A         	call	i2_I2C_Master_Write	;wreg free
 23533                           
 23534                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23535  004994  0E00               	movlw	0
 23536  004996  6E05               	movwf	i2getRTC@i+1,c
 23537  004998  0E00               	movlw	0
 23538  00499A  6E04               	movwf	i2getRTC@i,c
 23539  00499C                     i2l6472:
 23540  00499C  BE05               	btfsc	i2getRTC@i+1,7,c
 23541  00499E  D006               	goto	i2l6476
 23542  0049A0  5005               	movf	i2getRTC@i+1,w,c
 23543  0049A2  E111               	bnz	i2l6482
 23544  0049A4  0E06               	movlw	6
 23545  0049A6  5C04               	subwf	i2getRTC@i,w,c
 23546  0049A8  B0D8               	btfsc	status,0,c
 23547  0049AA  D00D               	goto	i2l6482
 23548  0049AC                     i2l6476:
 23549                           
 23550                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23551  0049AC  0E1C               	movlw	low _time
 23552  0049AE  2404               	addwf	i2getRTC@i,w,c
 23553  0049B0  6ED9               	movwf	fsr2l,c
 23554  0049B2  0E01               	movlw	high _time
 23555  0049B4  2005               	addwfc	i2getRTC@i+1,w,c
 23556  0049B6  6EDA               	movwf	fsr2h,c
 23557  0049B8  0E01               	movlw	1
 23558  0049BA  EC81  F029         	call	i2_I2C_Master_Read
 23559  0049BE  6EDF               	movwf	indf2,c
 23560  0049C0  4A04               	infsnz	i2getRTC@i,f,c
 23561  0049C2  2A05               	incf	i2getRTC@i+1,f,c
 23562  0049C4  D7EB               	goto	i2l6472
 23563  0049C6                     i2l6482:
 23564                           
 23565                           ;RTC.c: 58: }
 23566                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23567  0049C6  0E00               	movlw	0
 23568  0049C8  EC81  F029         	call	i2_I2C_Master_Read
 23569  0049CC  0101               	movlb	1	; () banked
 23570  0049CE  6F22               	movwf	(_time+6)& (0+255),b
 23571                           
 23572                           ;RTC.c: 60: I2C_Master_Stop();
 23573  0049D0  EC4E  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23574  0049D4  0012               	return		;funcret
 23575  0049D6                     __end_ofi2_getRTC:
 23576                           	opt stack 0
 23577                           pclatu	equ	0xFFB
 23578                           pclath	equ	0xFFA
 23579                           tblptru	equ	0xFF8
 23580                           tblptrh	equ	0xFF7
 23581                           tblptrl	equ	0xFF6
 23582                           tablat	equ	0xFF5
 23583                           prodh	equ	0xFF4
 23584                           prodl	equ	0xFF3
 23585                           intcon	equ	0xFF2
 23586                           intcon2	equ	0xFF1
 23587                           intcon3	equ	0xFF0
 23588                           indf0	equ	0xFEF
 23589                           postinc0	equ	0xFEE
 23590                           fsr0h	equ	0xFEA
 23591                           fsr0l	equ	0xFE9
 23592                           wreg	equ	0xFE8
 23593                           postdec1	equ	0xFE5
 23594                           fsr1h	equ	0xFE2
 23595                           fsr1l	equ	0xFE1
 23596                           indf2	equ	0xFDF
 23597                           postinc2	equ	0xFDE
 23598                           postdec2	equ	0xFDD
 23599                           fsr2h	equ	0xFDA
 23600                           fsr2l	equ	0xFD9
 23601                           status	equ	0xFD8
 23602                           
 23603 ;; *************** function i2_I2C_Master_Write *****************
 23604 ;; Defined at:
 23605 ;;		line 49 in file "I2C.c"
 23606 ;; Parameters:    Size  Location     Type
 23607 ;;  d               2    1[COMRAM] unsigned int 
 23608 ;; Auto vars:     Size  Location     Type
 23609 ;;		None
 23610 ;; Return value:  Size  Location     Type
 23611 ;;                  1    wreg      void 
 23612 ;; Registers used:
 23613 ;;		wreg, status,2, status,0, cstack
 23614 ;; Tracked objects:
 23615 ;;		On entry : 0/0
 23616 ;;		On exit  : 0/0
 23617 ;;		Unchanged: 0/0
 23618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23623 ;;Total ram usage:        2 bytes
 23624 ;; Hardware stack levels used:    1
 23625 ;; Hardware stack levels required when called:    1
 23626 ;; This function calls:
 23627 ;;		i2_I2C_Master_Wait
 23628 ;; This function is called by:
 23629 ;;		i2_getRTC
 23630 ;; This function uses a non-reentrant model
 23631 ;;
 23632                           
 23633                           	psect	text91
 23634  00547A                     __ptext91:
 23635                           	opt stack 0
 23636  00547A                     i2_I2C_Master_Write:
 23637                           	opt stack 18
 23638                           
 23639                           ;I2C.c: 51: I2C_Master_Wait();
 23640                           
 23641                           ;incstack = 0
 23642  00547A  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23643                           
 23644                           ;I2C.c: 52: SSPBUF = d;
 23645  00547E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23646  005482  0012               	return		;funcret
 23647  005484                     __end_ofi2_I2C_Master_Write:
 23648                           	opt stack 0
 23649                           pclatu	equ	0xFFB
 23650                           pclath	equ	0xFFA
 23651                           tblptru	equ	0xFF8
 23652                           tblptrh	equ	0xFF7
 23653                           tblptrl	equ	0xFF6
 23654                           tablat	equ	0xFF5
 23655                           prodh	equ	0xFF4
 23656                           prodl	equ	0xFF3
 23657                           intcon	equ	0xFF2
 23658                           intcon2	equ	0xFF1
 23659                           intcon3	equ	0xFF0
 23660                           indf0	equ	0xFEF
 23661                           postinc0	equ	0xFEE
 23662                           fsr0h	equ	0xFEA
 23663                           fsr0l	equ	0xFE9
 23664                           wreg	equ	0xFE8
 23665                           postdec1	equ	0xFE5
 23666                           fsr1h	equ	0xFE2
 23667                           fsr1l	equ	0xFE1
 23668                           indf2	equ	0xFDF
 23669                           postinc2	equ	0xFDE
 23670                           postdec2	equ	0xFDD
 23671                           fsr2h	equ	0xFDA
 23672                           fsr2l	equ	0xFD9
 23673                           status	equ	0xFD8
 23674                           
 23675 ;; *************** function i2_I2C_Master_Stop *****************
 23676 ;; Defined at:
 23677 ;;		line 43 in file "I2C.c"
 23678 ;; Parameters:    Size  Location     Type
 23679 ;;		None
 23680 ;; Auto vars:     Size  Location     Type
 23681 ;;		None
 23682 ;; Return value:  Size  Location     Type
 23683 ;;                  1    wreg      void 
 23684 ;; Registers used:
 23685 ;;		wreg, status,2, status,0, cstack
 23686 ;; Tracked objects:
 23687 ;;		On entry : 0/0
 23688 ;;		On exit  : 0/0
 23689 ;;		Unchanged: 0/0
 23690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23695 ;;Total ram usage:        0 bytes
 23696 ;; Hardware stack levels used:    1
 23697 ;; Hardware stack levels required when called:    1
 23698 ;; This function calls:
 23699 ;;		i2_I2C_Master_Wait
 23700 ;; This function is called by:
 23701 ;;		i2_getRTC
 23702 ;; This function uses a non-reentrant model
 23703 ;;
 23704                           
 23705                           	psect	text92
 23706  00549C                     __ptext92:
 23707                           	opt stack 0
 23708  00549C                     i2_I2C_Master_Stop:
 23709                           	opt stack 18
 23710                           
 23711                           ;I2C.c: 45: I2C_Master_Wait();
 23712                           
 23713                           ;incstack = 0
 23714  00549C  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23715                           
 23716                           ;I2C.c: 46: PEN = 1;
 23717  0054A0  84C5               	bsf	4037,2,c	;volatile
 23718  0054A2  0012               	return		;funcret
 23719  0054A4                     __end_ofi2_I2C_Master_Stop:
 23720                           	opt stack 0
 23721                           pclatu	equ	0xFFB
 23722                           pclath	equ	0xFFA
 23723                           tblptru	equ	0xFF8
 23724                           tblptrh	equ	0xFF7
 23725                           tblptrl	equ	0xFF6
 23726                           tablat	equ	0xFF5
 23727                           prodh	equ	0xFF4
 23728                           prodl	equ	0xFF3
 23729                           intcon	equ	0xFF2
 23730                           intcon2	equ	0xFF1
 23731                           intcon3	equ	0xFF0
 23732                           indf0	equ	0xFEF
 23733                           postinc0	equ	0xFEE
 23734                           fsr0h	equ	0xFEA
 23735                           fsr0l	equ	0xFE9
 23736                           wreg	equ	0xFE8
 23737                           postdec1	equ	0xFE5
 23738                           fsr1h	equ	0xFE2
 23739                           fsr1l	equ	0xFE1
 23740                           indf2	equ	0xFDF
 23741                           postinc2	equ	0xFDE
 23742                           postdec2	equ	0xFDD
 23743                           fsr2h	equ	0xFDA
 23744                           fsr2l	equ	0xFD9
 23745                           status	equ	0xFD8
 23746                           
 23747 ;; *************** function i2_I2C_Master_Start *****************
 23748 ;; Defined at:
 23749 ;;		line 31 in file "I2C.c"
 23750 ;; Parameters:    Size  Location     Type
 23751 ;;		None
 23752 ;; Auto vars:     Size  Location     Type
 23753 ;;		None
 23754 ;; Return value:  Size  Location     Type
 23755 ;;                  1    wreg      void 
 23756 ;; Registers used:
 23757 ;;		wreg, status,2, status,0, cstack
 23758 ;; Tracked objects:
 23759 ;;		On entry : 0/0
 23760 ;;		On exit  : 0/0
 23761 ;;		Unchanged: 0/0
 23762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23767 ;;Total ram usage:        0 bytes
 23768 ;; Hardware stack levels used:    1
 23769 ;; Hardware stack levels required when called:    1
 23770 ;; This function calls:
 23771 ;;		i2_I2C_Master_Wait
 23772 ;; This function is called by:
 23773 ;;		i2_getRTC
 23774 ;; This function uses a non-reentrant model
 23775 ;;
 23776                           
 23777                           	psect	text93
 23778  0054A4                     __ptext93:
 23779                           	opt stack 0
 23780  0054A4                     i2_I2C_Master_Start:
 23781                           	opt stack 18
 23782                           
 23783                           ;I2C.c: 33: I2C_Master_Wait();
 23784                           
 23785                           ;incstack = 0
 23786  0054A4  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23787                           
 23788                           ;I2C.c: 34: SEN = 1;
 23789  0054A8  80C5               	bsf	4037,0,c	;volatile
 23790  0054AA  0012               	return		;funcret
 23791  0054AC                     __end_ofi2_I2C_Master_Start:
 23792                           	opt stack 0
 23793                           pclatu	equ	0xFFB
 23794                           pclath	equ	0xFFA
 23795                           tblptru	equ	0xFF8
 23796                           tblptrh	equ	0xFF7
 23797                           tblptrl	equ	0xFF6
 23798                           tablat	equ	0xFF5
 23799                           prodh	equ	0xFF4
 23800                           prodl	equ	0xFF3
 23801                           intcon	equ	0xFF2
 23802                           intcon2	equ	0xFF1
 23803                           intcon3	equ	0xFF0
 23804                           indf0	equ	0xFEF
 23805                           postinc0	equ	0xFEE
 23806                           fsr0h	equ	0xFEA
 23807                           fsr0l	equ	0xFE9
 23808                           wreg	equ	0xFE8
 23809                           postdec1	equ	0xFE5
 23810                           fsr1h	equ	0xFE2
 23811                           fsr1l	equ	0xFE1
 23812                           indf2	equ	0xFDF
 23813                           postinc2	equ	0xFDE
 23814                           postdec2	equ	0xFDD
 23815                           fsr2h	equ	0xFDA
 23816                           fsr2l	equ	0xFD9
 23817                           status	equ	0xFD8
 23818                           
 23819 ;; *************** function i2_I2C_Master_Read *****************
 23820 ;; Defined at:
 23821 ;;		line 55 in file "I2C.c"
 23822 ;; Parameters:    Size  Location     Type
 23823 ;;  a               1    wreg     unsigned char 
 23824 ;; Auto vars:     Size  Location     Type
 23825 ;;  a               1    1[COMRAM] unsigned char 
 23826 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23827 ;; Return value:  Size  Location     Type
 23828 ;;                  1    wreg      unsigned char 
 23829 ;; Registers used:
 23830 ;;		wreg, status,2, status,0, cstack
 23831 ;; Tracked objects:
 23832 ;;		On entry : 0/0
 23833 ;;		On exit  : 0/0
 23834 ;;		Unchanged: 0/0
 23835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23840 ;;Total ram usage:        2 bytes
 23841 ;; Hardware stack levels used:    1
 23842 ;; Hardware stack levels required when called:    1
 23843 ;; This function calls:
 23844 ;;		i2_I2C_Master_Wait
 23845 ;; This function is called by:
 23846 ;;		i2_getRTC
 23847 ;; This function uses a non-reentrant model
 23848 ;;
 23849                           
 23850                           	psect	text94
 23851  005302                     __ptext94:
 23852                           	opt stack 0
 23853  005302                     i2_I2C_Master_Read:
 23854                           	opt stack 18
 23855                           
 23856                           ;incstack = 0
 23857                           ;i2I2C_Master_Read@a stored from wreg
 23858  005302  6E02               	movwf	i2I2C_Master_Read@a,c
 23859                           
 23860                           ;I2C.c: 57: unsigned char temp;
 23861                           ;I2C.c: 58: I2C_Master_Wait();
 23862  005304  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23863                           
 23864                           ;I2C.c: 59: RCEN = 1;
 23865  005308  86C5               	bsf	4037,3,c	;volatile
 23866                           
 23867                           ;I2C.c: 60: I2C_Master_Wait();
 23868  00530A  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23869                           
 23870                           ;I2C.c: 61: temp = SSPBUF;
 23871  00530E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23872                           
 23873                           ;I2C.c: 62: I2C_Master_Wait();
 23874  005312  EC13  F02A         	call	i2_I2C_Master_Wait	;wreg free
 23875                           
 23876                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23877  005316  5002               	movf	i2I2C_Master_Read@a,w,c
 23878  005318  A4D8               	btfss	status,2,c
 23879  00531A  D002               	goto	i2u442_40
 23880  00531C  8AC5               	bsf	4037,5,c	;volatile
 23881  00531E  D001               	goto	i2l6180
 23882  005320                     i2u442_40:
 23883  005320  9AC5               	bcf	4037,5,c	;volatile
 23884  005322                     i2l6180:
 23885                           
 23886                           ;I2C.c: 64: ACKEN = 1;
 23887  005322  88C5               	bsf	4037,4,c	;volatile
 23888                           
 23889                           ;I2C.c: 65: return temp;
 23890  005324  5003               	movf	i2I2C_Master_Read@temp,w,c
 23891  005326  0012               	return	
 23892  005328                     __end_ofi2_I2C_Master_Read:
 23893                           	opt stack 0
 23894                           pclatu	equ	0xFFB
 23895                           pclath	equ	0xFFA
 23896                           tblptru	equ	0xFF8
 23897                           tblptrh	equ	0xFF7
 23898                           tblptrl	equ	0xFF6
 23899                           tablat	equ	0xFF5
 23900                           prodh	equ	0xFF4
 23901                           prodl	equ	0xFF3
 23902                           intcon	equ	0xFF2
 23903                           intcon2	equ	0xFF1
 23904                           intcon3	equ	0xFF0
 23905                           indf0	equ	0xFEF
 23906                           postinc0	equ	0xFEE
 23907                           fsr0h	equ	0xFEA
 23908                           fsr0l	equ	0xFE9
 23909                           wreg	equ	0xFE8
 23910                           postdec1	equ	0xFE5
 23911                           fsr1h	equ	0xFE2
 23912                           fsr1l	equ	0xFE1
 23913                           indf2	equ	0xFDF
 23914                           postinc2	equ	0xFDE
 23915                           postdec2	equ	0xFDD
 23916                           fsr2h	equ	0xFDA
 23917                           fsr2l	equ	0xFD9
 23918                           status	equ	0xFD8
 23919                           
 23920 ;; *************** function i2_I2C_Master_Wait *****************
 23921 ;; Defined at:
 23922 ;;		line 26 in file "I2C.c"
 23923 ;; Parameters:    Size  Location     Type
 23924 ;;		None
 23925 ;; Auto vars:     Size  Location     Type
 23926 ;;		None
 23927 ;; Return value:  Size  Location     Type
 23928 ;;                  1    wreg      void 
 23929 ;; Registers used:
 23930 ;;		wreg, status,2, status,0
 23931 ;; Tracked objects:
 23932 ;;		On entry : 0/0
 23933 ;;		On exit  : 0/0
 23934 ;;		Unchanged: 0/0
 23935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23939 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23940 ;;Total ram usage:        1 bytes
 23941 ;; Hardware stack levels used:    1
 23942 ;; This function calls:
 23943 ;;		Nothing
 23944 ;; This function is called by:
 23945 ;;		i2_I2C_Master_Start
 23946 ;;		i2_I2C_Master_Stop
 23947 ;;		i2_I2C_Master_Write
 23948 ;;		i2_I2C_Master_Read
 23949 ;; This function uses a non-reentrant model
 23950 ;;
 23951                           
 23952                           	psect	text95
 23953  005426                     __ptext95:
 23954                           	opt stack 0
 23955  005426                     i2_I2C_Master_Wait:
 23956                           	opt stack 18
 23957  005426                     i2l66:
 23958  005426  B4C7               	btfsc	4039,2,c	;volatile
 23959  005428  D7FE               	goto	i2l66
 23960  00542A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23961  00542E  0E1F               	movlw	31
 23962  005430  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23963  005432  B4D8               	btfsc	status,2,c
 23964  005434  0012               	return	
 23965  005436  D7F7               	goto	i2l66
 23966  005438                     __end_ofi2_I2C_Master_Wait:
 23967                           	opt stack 0
 23968                           pclatu	equ	0xFFB
 23969                           pclath	equ	0xFFA
 23970                           tblptru	equ	0xFF8
 23971                           tblptrh	equ	0xFF7
 23972                           tblptrl	equ	0xFF6
 23973                           tablat	equ	0xFF5
 23974                           prodh	equ	0xFF4
 23975                           prodl	equ	0xFF3
 23976                           intcon	equ	0xFF2
 23977                           intcon2	equ	0xFF1
 23978                           intcon3	equ	0xFF0
 23979                           indf0	equ	0xFEF
 23980                           postinc0	equ	0xFEE
 23981                           fsr0h	equ	0xFEA
 23982                           fsr0l	equ	0xFE9
 23983                           wreg	equ	0xFE8
 23984                           postdec1	equ	0xFE5
 23985                           fsr1h	equ	0xFE2
 23986                           fsr1l	equ	0xFE1
 23987                           indf2	equ	0xFDF
 23988                           postinc2	equ	0xFDE
 23989                           postdec2	equ	0xFDD
 23990                           fsr2h	equ	0xFDA
 23991                           fsr2l	equ	0xFD9
 23992                           status	equ	0xFD8
 23993                           
 23994 ;; *************** function i2_delay_ms *****************
 23995 ;; Defined at:
 23996 ;;		line 579 in file "sort.c"
 23997 ;; Parameters:    Size  Location     Type
 23998 ;;  milliseconds    1    wreg     unsigned char 
 23999 ;; Auto vars:     Size  Location     Type
 24000 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24001 ;; Return value:  Size  Location     Type
 24002 ;;                  1    wreg      void 
 24003 ;; Registers used:
 24004 ;;		wreg, status,2, status,0, cstack
 24005 ;; Tracked objects:
 24006 ;;		On entry : 0/0
 24007 ;;		On exit  : 0/0
 24008 ;;		Unchanged: 0/0
 24009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24012 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24014 ;;Total ram usage:        2 bytes
 24015 ;; Hardware stack levels used:    1
 24016 ;; This function calls:
 24017 ;;		Nothing
 24018 ;; This function is called by:
 24019 ;;		_printSortTimer
 24020 ;; This function uses a non-reentrant model
 24021 ;;
 24022                           
 24023                           	psect	text96
 24024  0053AE                     __ptext96:
 24025                           	opt stack 0
 24026  0053AE                     i2_delay_ms:
 24027                           	opt stack 22
 24028                           
 24029                           ;incstack = 0
 24030                           ;i2delay_ms@milliseconds stored from wreg
 24031  0053AE  6E02               	movwf	i2delay_ms@milliseconds,c
 24032                           
 24033                           ;sort.c: 580: while(milliseconds > 0)
 24034  0053B0  D008               	goto	i2l8526
 24035  0053B2                     i2l8522:
 24036                           
 24037                           ;sort.c: 581: {
 24038                           ;sort.c: 582: milliseconds--;
 24039  0053B2  0602               	decf	i2delay_ms@milliseconds,f,c
 24040                           
 24041                           ;sort.c: 583: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24042  0053B4  0E0B               	movlw	11
 24043  0053B6  6E01               	movwf	??i2_delay_ms& (0+255),c
 24044  0053B8  0E48               	movlw	72
 24045  0053BA                     i2u1017_47:
 24046  0053BA  2EE8               	decfsz	wreg,f,c
 24047  0053BC  D7FE               	bra	i2u1017_47
 24048  0053BE  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24049  0053C0  D7FC               	bra	i2u1017_47
 24050  0053C2                     i2l8526:
 24051  0053C2  5002               	movf	i2delay_ms@milliseconds,w,c
 24052  0053C4  B4D8               	btfsc	status,2,c
 24053  0053C6  0012               	return	
 24054  0053C8  D7F4               	goto	i2l8522
 24055  0053CA                     __end_ofi2_delay_ms:
 24056                           	opt stack 0
 24057                           pclatu	equ	0xFFB
 24058                           pclath	equ	0xFFA
 24059                           tblptru	equ	0xFF8
 24060                           tblptrh	equ	0xFF7
 24061                           tblptrl	equ	0xFF6
 24062                           tablat	equ	0xFF5
 24063                           prodh	equ	0xFF4
 24064                           prodl	equ	0xFF3
 24065                           intcon	equ	0xFF2
 24066                           intcon2	equ	0xFF1
 24067                           intcon3	equ	0xFF0
 24068                           indf0	equ	0xFEF
 24069                           postinc0	equ	0xFEE
 24070                           fsr0h	equ	0xFEA
 24071                           fsr0l	equ	0xFE9
 24072                           wreg	equ	0xFE8
 24073                           postdec1	equ	0xFE5
 24074                           fsr1h	equ	0xFE2
 24075                           fsr1l	equ	0xFE1
 24076                           indf2	equ	0xFDF
 24077                           postinc2	equ	0xFDE
 24078                           postdec2	equ	0xFDD
 24079                           fsr2h	equ	0xFDA
 24080                           fsr2l	equ	0xFD9
 24081                           status	equ	0xFD8
 24082                           pclatu	equ	0xFFB
 24083                           pclath	equ	0xFFA
 24084                           tblptru	equ	0xFF8
 24085                           tblptrh	equ	0xFF7
 24086                           tblptrl	equ	0xFF6
 24087                           tablat	equ	0xFF5
 24088                           prodh	equ	0xFF4
 24089                           prodl	equ	0xFF3
 24090                           intcon	equ	0xFF2
 24091                           intcon2	equ	0xFF1
 24092                           intcon3	equ	0xFF0
 24093                           indf0	equ	0xFEF
 24094                           postinc0	equ	0xFEE
 24095                           fsr0h	equ	0xFEA
 24096                           fsr0l	equ	0xFE9
 24097                           wreg	equ	0xFE8
 24098                           postdec1	equ	0xFE5
 24099                           fsr1h	equ	0xFE2
 24100                           fsr1l	equ	0xFE1
 24101                           indf2	equ	0xFDF
 24102                           postinc2	equ	0xFDE
 24103                           postdec2	equ	0xFDD
 24104                           fsr2h	equ	0xFDA
 24105                           fsr2l	equ	0xFD9
 24106                           status	equ	0xFD8
 24107                           
 24108                           	psect	rparam
 24109  0000                     pclatu	equ	0xFFB
 24110                           pclath	equ	0xFFA
 24111                           tblptru	equ	0xFF8
 24112                           tblptrh	equ	0xFF7
 24113                           tblptrl	equ	0xFF6
 24114                           tablat	equ	0xFF5
 24115                           prodh	equ	0xFF4
 24116                           prodl	equ	0xFF3
 24117                           intcon	equ	0xFF2
 24118                           intcon2	equ	0xFF1
 24119                           intcon3	equ	0xFF0
 24120                           indf0	equ	0xFEF
 24121                           postinc0	equ	0xFEE
 24122                           fsr0h	equ	0xFEA
 24123                           fsr0l	equ	0xFE9
 24124                           wreg	equ	0xFE8
 24125                           postdec1	equ	0xFE5
 24126                           fsr1h	equ	0xFE2
 24127                           fsr1l	equ	0xFE1
 24128                           indf2	equ	0xFDF
 24129                           postinc2	equ	0xFDE
 24130                           postdec2	equ	0xFDD
 24131                           fsr2h	equ	0xFDA
 24132                           fsr2l	equ	0xFD9
 24133                           status	equ	0xFD8
 24134                           
 24135                           	psect	temp
 24136  00007E                     btemp:
 24137                           	opt stack 0
 24138  00007E                     	ds	1
 24139  0000                     int$flags	set	btemp
 24140                           pclatu	equ	0xFFB
 24141                           pclath	equ	0xFFA
 24142                           tblptru	equ	0xFF8
 24143                           tblptrh	equ	0xFF7
 24144                           tblptrl	equ	0xFF6
 24145                           tablat	equ	0xFF5
 24146                           prodh	equ	0xFF4
 24147                           prodl	equ	0xFF3
 24148                           intcon	equ	0xFF2
 24149                           intcon2	equ	0xFF1
 24150                           intcon3	equ	0xFF0
 24151                           indf0	equ	0xFEF
 24152                           postinc0	equ	0xFEE
 24153                           fsr0h	equ	0xFEA
 24154                           fsr0l	equ	0xFE9
 24155                           wreg	equ	0xFE8
 24156                           postdec1	equ	0xFE5
 24157                           fsr1h	equ	0xFE2
 24158                           fsr1l	equ	0xFE1
 24159                           indf2	equ	0xFDF
 24160                           postinc2	equ	0xFDE
 24161                           postdec2	equ	0xFDD
 24162                           fsr2h	equ	0xFDA
 24163                           fsr2l	equ	0xFD9
 24164                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      67
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  206499
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   25093
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18641
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    6315
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45764
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     632
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  100275
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   16401
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   21473
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    6315
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    6315
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76865
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     779
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     779
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      43       7       26.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     140      34        0.0%
DATA                 0      0     140       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 17:56:46 2017

                                    _i 0137                     i2_I2C_Master_Start 54A4  
                   i2_I2C_Master_Write 547A                                     l66 5412  
                                   _ID 30D8                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0075                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 24DE                                    l800 3262  
                                  l803 32FC                                    l491 41DC  
                                  l746 1238                                    l764 13BC  
                                  l756 12E8                                    l781 150C  
                                  l773 15A8                                    l782 1520  
                                  l863 4838                                    l783 1534  
                                  l767 13F6                                    l759 1322  
                                  l864 4870                                    l784 1548  
                                  l785 155E                                    l779 14FA  
                                  l789 15F2                                    l799 3248  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3A92                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F4  
                                  _sel 00FD                                    _var 0077  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3C16  
                  _log_count_can_w_lab 0069                             i2_delay_ms 53AE  
      __end_of_change_state_to_menu_11 5090        __end_of_change_state_to_menu_12 4F00  
      __end_of_change_state_to_menu_22 4EC8        __end_of_change_state_to_menu_23 5060  
         _f_can_coming_to_distribution 0131                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5180        __end_of_change_state_to_logs_12 5150  
      __end_of_change_state_to_logs_22 5120        __end_of_change_state_to_logs_23 520A  
      __end_of_change_state_to_logs_33 50F0        __end_of_change_state_to_logs_34 50C0  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1016 3FA6                                   l1201 018C  
                                 l1202 01DA                                   l1203 0240  
                                 l1300 2E9E                                   l1204 028E  
                                 l1132 3ED2                                   l1029 53F4  
                                 l1038 3D44                                   l1303 2E3A  
                                 l1135 3EEE                                   l1240 0782  
                                 l1307 2E7E                                   l1331 46B6  
                                 l1228 05E8                                   l1156 40CA  
                                 l1309 2E98                                   l1245 0858  
                                 l1165 2188                                   l1270 47E6  
                                 l1262 4794                                   l1191 007C  
                                 l1159 40CE                                   l1360 3BB4  
                                 l1264 4798                                   l1168 218C  
                                 l1361 3BCE                                   l1265 479C  
                                 l1266 47A0                                   l1258 477A  
                                 l1338 46C6                                   l1194 0080  
                                 l1355 3B68                                   l1267 47A4  
                                 l1268 47A8                                   l1285 4C18  
                                 l1198 0126                                   l1279 4C08  
                                 l1396 1846                                   l1843 48E8  
                                 l1853 4AFE                                   l1790 436A  
                                 l6112 5282                                   l6130 48A4  
                                 l6140 48DA                                   l6132 48AA  
                                 l6300 1732                                   l6150 4AC6  
                                 l6310 17AA                                   l6070 524A  
                                 l6128 4898                                   l6152 4ACC  
                                 l6312 17C2                                   l6072 525C  
                                 l6400 4F16                                   l7032 45B8  
                                 l6306 1798                                   l6322 180C  
                                 l8010 06B4                                   l8002 067A  
                                 l6410 4642                                   l6156 4AF0  
                                 l6148 4ABA                                   l6340 189E  
                                 l6316 17EE                                   l6308 17A4  
                                 l8020 06DC                                   l7028 45A2  
                                 l6334 187E                                   l6318 1806  
                                 l6270 1634                                   l8110 0882  
                                 l8014 06BE                                   l6094 51D4  
                                 l6406 462C                                   l7038 45E4  
                                 l6352 18DA                                   l6280 1672  
                                 l6264 160E                                   l8120 08AA  
                                 l8104 0872                                   l8040 0742  
                                 l8024 06E6                                   l6416 4662  
                                 l6370 1958                                   l6362 1934  
                                 l6338 1898                                   l6274 163E  
                                 l6434 4824                                   l8114 089A  
                                 l8106 0878                                   l8050 076A  
                                 l8018 06D6                                   l6450 42FE  
                                 l6364 193E                                   l6268 1622  
                                 l6436 484E                                   l8124 08C2  
                                 l8116 08A0                                   l8044 075A  
                                 l8036 0738                                   l8028 06FE  
                                 l6460 4358                                   l6452 4304  
                                 l7404 156A                                   l7412 15B0  
                                 l7324 13A6                                   l7308 133C  
                                 l7244 11F6                                   l6382 199A  
                                 l6358 18FC                                   l8070 07D2  
                                 l8046 0760                                   l7406 15A0  
                                 l7350 1436                                   l7334 13D6  
                                 l7270 127C                                   l7254 1240  
                                 _ADIE 007CEE                                   l6392 1A0C  
                                 l6376 1974                                   l6296 1720  
                                 l6288 16EE                                   l8400 3B94  
                                 l8216 2E02                                   l8080 07FA  
                                 l9200 3F00                                   l6448 42EE  
                                 l7520 3318                                   l7424 15E6  
                                 l7336 13E0                                   l6378 1980  
                                 l6386 19AE                                   l6298 172C  
                                 l6394 1A18                                   l8402 3B9E  
                                 l8242 2E68                                   l8074 07DC  
                                 l9210 3F1E                                   l9202 3F06  
                                 l7522 3332                                   l7530 3380  
                                 l7506 32BA                                   l7514 32FE  
                                 l7346 1410                                   l7426 15F4  
                                 l6388 19B4                                   l8412 3BD0  
                                 l8228 2E24                                   l8084 0804  
                                 l7700 2420                                   l9212 3F24  
                                 l9204 3F0C                                   l9140 3C62  
                                 l7540 3418                                   l7524 334C  
                                 l7532 33AE                                   l6900 52A8  
                                 l7460 31C0                                   l8414 3BE0  
                                 l8238 2E54                                   l8166 46EE  
                                 l8094 0842                                   l8078 07F4  
                                 l9214 3F2A                                   l9206 3F12  
                                 l6398 4F0A                                   l6670 2560  
                                 l6662 24E8                                   l9142 3C76  
                                 l7542 3432                                   l7526 3366  
                                 l7374 14D8                                   l7358 1474  
                                 l7286 12D2                                   l8256 47AC  
                                 l8088 081C                                   l9208 3F18  
                                 l8440 4252                                   l6680 25F6  
                                 l6672 257E                                   l6664 2506  
                                 l6656 245C                                   l8600 0A68  
                                 l7536 33E4                                   l7472 31F8  
                                 l7464 31D0                                   l6920 4900  
                                 l6832 43A0                                   l7376 14E2  
                                 l7296 1302                                   l8418 3C10  
                                 l8178 2C8C                                   l9218 3F30  
                                 l8442 425E                                   l8434 4234  
                                 l6682 2614                                   l6674 259C  
                                 l6666 2524                                   l6690 26AE  
                                 l8610 0A8E                                   l7538 33FE  
                                 l7546 344C                                   l7298 130C  
                                 l9410 41B0                                   l8372 3B06  
                                 l8196 2D44                                   l7740 00EA  
                                 l7628 21DC                                   l8460 42B6  
                                 l8452 4294                                   l8444 4264  
                                 l8428 421E                                   l6684 2632  
                                 l6676 25BA                                   l6668 2542  
                                 l8700 0DBE                                   l8604 0A80  
                                 l7548 347A                                   l7476 3208  
                                 l6940 4958                                   l6924 4916  
                                 l6828 438A                                   l9412 41B6  
                                 l9404 418C                                   l8198 2D4A  
                                 l7830 0314                                   l7750 0112  
                                 l7742 00F0                                   l7646 2294  
                                 l6678 25D8                                   l8710 0DE8  
                                 l9166 3CFE                                   l6838 4416  
                                 l9422 41D2                                   l9414 41BC  
                                 l9406 41A2                                   l8392 3B6A  
                                 l8376 3B36                                   l7912 04B8  
                                 l7904 0496                                   l7840 033C  
                                 l7664 2326                                   l8456 42A2  
                                 l8480 4466                                   l8472 4442  
                                 l6688 2650                                   l8800 0FE2  
                                 l8704 0DD6                                   l8632 0B02  
                                 l8624 0AE0                                   l6936 4940  
                                 l9424 41D8                                   l8394 3B7A  
                                 l7930 051A                                   l7922 04E0  
                                 l7914 04BE                                   l7834 032C  
                                 l7826 030A                                   l7746 00FA  
                                 l7658 22E4                                   l9178 3E74  
                                 l8482 4472                                   l8714 0DF2  
                                 l8642 0B1E                                   l8562 09B8  
                                 l6890 4054                                   l6874 4012  
                                 l6882 4034                                   l7940 0542  
                                 l7908 04A0                                   l7860 03B0  
                                 l7852 038E                                   l7844 0354  
                                 l7836 0332                                   l7684 23A2  
                                 l7676 2372                                   l9196 3EF4  
                                 l8484 4478                                   l8492 44AA  
                                 l8476 4452                                   l8628 0AEA  
                                 l8580 0A04                                   l8572 09DA  
                                 l8564 09BE                                   l9428 41DE  
                                 l7934 0524                                   l7918 04C8  
                                 l7870 03D8                                   l7862 03B6  
                                 l9198 3EFA                                   l8822 1052  
                                 l8742 0EDA                                   l8718 0E0A  
                                 l8670 0C00                                   l8662 0B88  
                                 l8646 0B36                                   l8638 0B14  
                                 l6886 404A                                   l6878 401C  
                                 l7960 05A8                                   l7944 054C  
                                 l7856 0398                                   l7696 23EA  
                                 l7688 23D8                                   l8496 44BE  
                                 l8488 449C                                   l8840 109E  
                                 l8832 107C                                   l8760 0F26  
                                 l8752 0F04                                   l8680 0C96  
                                 l8672 0C1E                                   l8664 0BA6  
                                 l8576 09F2                                   l8568 09D0  
                                 l6896 5292                                   l7970 05D0  
                                 l7938 053C                                   l7882 041C  
                                 l7866 03C0                                   l8826 106A  
                                 l8818 1048                                   l8746 0EF2  
                                 l8738 0ED0                                   l8682 0CB4  
                                 l8674 0C3C                                   l8666 0BC4  
                                 l8690 0D0E                                   l8594 0A58  
                                 l7964 05C0                                   l7956 059E  
                                 l7948 0564                                   l7892 0444  
                                 l8836 1086                                   l8756 0F0E  
                                 l8684 0CD2                                   l8676 0C5A  
                                 l8668 0BE2                                   l8692 0D72  
                                 l8596 0A5E                                   l7966 05C6  
                                 l7886 0434                                   l7878 0412  
                                 l8862 1106                                   l8782 0F96  
                                 l8686 0CF0                                   l8678 0C78  
                                 l7992 0652                                   l7984 0630  
                                 l7896 045C                                   l7888 043A  
                                 l8880 1152                                   l8872 1130  
                                 l8792 0FC0                                   l8696 0DB4  
                                 l7994 0658                                   l8866 111E  
                                 l8858 10FC                                   l8786 0FAE  
                                 l8778 0F8C                                   l7988 063A  
                                 l8876 113A                                   l8796 0FCA  
                                 l8884 115E                                   l7998 0662  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4320 51D2  
                                 u6010 32FC                                   u5230 24DE  
                                 u5215 4B38                                   u4600 176C  
                                 u6120 23C6                                   u6008 32CA  
                                 u4520 4DB2                                   u4530 4DB4  
                                 u7011 3B5E                                   _PEIE 007F96  
                                 u7020 3B60                                   u6220 0126  
                                 u4540 4DFE                                   u4541 4DFA  
                                 u4550 4E00                                   u6150 240E  
                                 u4607 1762                                   u4640 17E4  
                                 u7120 3BFE                                   u6240 01DA  
                                 u6128 23CA                                   u6080 221E  
                                 u5600 1238                                   u6090 2220  
                                 u6260 028E                                   _RCEN 007E2B  
                                 u7061 3B8A                                   u7070 3B8C  
                                 u6158 2412                                   u4647 17DA  
                                 u7128 3C02                                   u5900 3180  
                                 u5580 1202                                   u9007 09E2  
                                 u6800 2CD0                                   u9017 0A1A  
                                 i2l66 5426                                   u9107 0EE2  
                                 u9027 0A70                                   u6820 2D8C  
                                 u8180 3D44                                   u5908 3184  
                                 u5780 1454                                   u9117 0F16  
                                 u9037 0A9C                                   u6830 2D8E  
                                 u5598 1206                                   u9207 1142  
                                 u9127 0F40                                   u9047 0AF2  
                                 u9217 3E82                                   u9137 0F9E  
                                 u9057 0B26                                   u5890 312A  
                                 u9307 22D6                                   u9227 3EC6  
                                 u9147 0FD2                                   u9067 0B50  
                                 u9317 231A                                   u9237 2138  
                                 u9157 0FFC                                   u9077 0DC6  
                                 u6950 3AC8                                   u6790 2CCE  
                                 u5990 32C6                                   u5798 1458  
                                 u9407 0092                                   u9327 2338  
                                 u9247 217C                                   u9167 105A  
                                 u9087 0DFA                                   u8607 1374  
                                 u6960 3B24                                   u9417 0102  
                                 u9337 2366                                   u9257 219E  
                                 u9177 108E                                   u9097 0E24  
                                 u8617 13C0                                   u8537 1186  
                                 u5898 312E                                   u9507 0344  
                                 u9427 0136                                   u9347 2380  
                                 u9267 21CC                                   u9187 10B8  
                                 u8707 1510                                   u8627 13C8  
                                 u8547 12A0                                   u9517 03A0  
                                 u9437 019C                                   u9357 407A  
                                 u9277 2234                                   u9197 110E  
                                 u8717 151A                                   u8637 13FA  
                                 u8557 12EC                                   u6958 3ACC  
                                 u9607 05D8                                   u9527 03C8  
                                 u9447 01BA                                   u9367 40BE  
                                 u9287 2288                                   u8807 4F8A  
                                 u8727 1524                                   u8647 1404  
                                 u8567 12F4                                   u6968 3B28  
                                 u9617 0642                                   u9537 0424  
                                 u9457 01EA                                   u9377 40E0  
                                 u9297 22A8                                   u8817 491E  
                                 u8737 152E                                   u8657 141E  
                                 u8577 1326                                   u9707 085C  
                                 u9627 066A                                   u9547 044C  
                                 u9467 0250                                   u9387 002C  
                                 u8907 529E                                   u8827 30F2  
                                 u8747 1538                                   u8667 148E  
                                 u8587 1330                                   u9717 0866  
                                 u9637 06C6                                   u9557 04A8  
                                 u9477 026E                                   u9397 0070  
                                 u8917 33D4                                   u8837 3110  
                                 u8757 1540                                   u8677 14C6  
                                 u8597 134A                                   u9807 2DA2  
                                 u9727 088A                                   u9647 06EE  
                                 u9567 04D0                                   u9487 029E  
                                 u8927 3488                                   u8847 3148  
                                 u8767 154C                                   u8687 14FE  
                                 u9817 2DF6                                   u9737 08B2  
                                 u9657 074A                                   u9577 052C  
                                 u9497 031C                                   u8937 34BA  
                                 u8857 3166                                   u8777 1556  
                                 u8697 1506                                   u9907 1ADE  
                                 u9827 2E3E                                   u9747 4680  
                                 u9667 0772                                   u9587 0554  
                                 u8947 3FC8                                   u8867 3218  
                                 u8787 1562                                   u9917 1B12  
                                 u9837 2E46                                   u9757 46D0  
                                 u9677 0794                                   u9597 05B0  
                                 u8957 4024                                   u8877 324C  
                                 u8797 15CA                                   u9927 1B44  
                                 u9847 2E82                                   u9767 46E4  
                                 u9687 07E4                                   u8967 405C  
                                 u8887 3256                                   u9937 1B90  
                                 u9857 2E8C                                   u9777 2C68  
                                 u9697 080C                                   u8977 4E10  
                                 u8897 327E                                   u9947 1BC4  
                                 u9867 5252                                   u9787 2CE4  
                                 u8987 4E44                                   u9957 1BF6  
                                 u9877 4BD2                                   u9797 2D38  
                                 u8997 08E2                                   u9967 1C42  
                                 u9887 1A46                                   u9977 1C8E  
                                 u9897 1A92                                   u9987 1CC2  
                                 _RSEN 007E29                                   u9997 1CF4  
                          _stopSignals 53CA                                   _Test 3E74  
                                 _back 005B                                   _main 4142  
                                 _down 005D                                   _keys FAEF  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 534C                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0067                        __end_ofi2_putch 5464  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2EA2  
                          i2_lcdNibble 4C7A                        __end_of_Loading 1600  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 406C  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 42C0  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 44C8                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 437C           i2updateServoPosition@time_us 0001  
                                u10007 1D40                                  u10017 1D74  
                                u10107 4A36                                  u10027 1DA6  
                                u10037 4C62                                  u10047 3AA0  
                                u10057 3BB8                                  u10067 3BC2  
                                u10077 49F6                                  u10087 4A00  
                                _T0CON 000FD5                                  u10097 4A2C  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 48F2  
                      __end_of___lwmod 4B08                                  i2l257 29AE  
                                i2l606 2F30                                  i2l842 2B80  
                                i2l863 4A6C                                  i2l951 387E  
                                i2l864 4A9C                                  i2l953 389E  
                                i2l947 37EC                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A38                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5458                        __end_of_handler 38DA  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5262  
                      __end_of_initLCD 4E4E                         __CFG_EBTRB$OFF 000000  
                                _debug 012B                             i2isdigit@c 0003  
                                _getIR 48F2                        __end_of_loadRTC 45EC  
                      __end_of_readMAG 4E08                        __end_of_dpowers FB0A  
                                _first 0061                                  _enter 005F  
                      __end_of_isdigit 528C                                  _input 007D  
                                _putch 5438                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5302  
                     __end_ofi2_getRTC 49D6                    _log_count_pop_w_tab 006D  
                                status 000FD8                     __size_ofi2___awdiv 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 212A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4FD0  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1182 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4D22                           __end_of_Test 3F84  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4202  
                         __end_of_keys FB00                           __end_of_sort 536E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1789 00B3                            _BlockerTest 3A92  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01B8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5000  
            i2_change_state_to_menu_22 4FD0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1029 540A                                 i2l1396 1F96  
                               i2l1843 4D18                                 i2l1853 4E86  
                               i2l7000 2FD4                                 i2l7002 2FEA  
                               i2l6204 53A6                                 i2l7100 3580  
                               i2l7004 3000                                 i2l7012 3042  
                               i2l6214 4CE6                                 i2l7110 35A6  
                               i2l7006 3016                                 i2l7014 309C  
                               i2l6216 4CEE                                 i2l7112 35AC  
                               i2l7104 3594                                 i2l7200 36E2  
                               i2l7008 302C                                 i2l6226 4D0E  
                               i2l6218 4CF2                                 i2l6242 4E7C  
                               i2l6234 4E5C                                 i2l7130 35FC  
                               i2l7114 35B2                                 i2l7106 359A  
                               i2l6180 5322                                 i2l6236 4E64  
                               i2l6500 1DC6                                 i2l7108 35A0  
                               i2l6238 4E68                                 i2l6510 1DEA  
                               i2l7118 35B8                                 i2l6600 2058  
                               i2l6504 1DD6                                 i2l7160 3660  
                               i2l7144 3622                                 i2l9000 2892  
                               i2l6506 1DE4                                 i2l7154 3648  
                               i2l7138 3614                                 i2l7090 3562  
                               i2l7082 3548                                 i2l6612 2084  
                               i2l6532 1EA6                                 i2l6524 1E7E  
                               i2l6516 1E1C                                 i2l7172 3682  
                               i2l7164 366A                                 i2l7148 363E  
                               i2l7092 3572                                 i2l9020 28E0  
                               i2l9012 28C4                                 i2l9004 28A0  
                               i2l6614 208C                                 i2l6622 20B2  
                               i2l6606 206E                                 i2l6542 1EFE  
                               i2l6534 1EB0                                 i2l6630 210E  
                               i2l7190 36C6                                 i2l7182 36A2  
                               i2l7158 365C                                 i2l7094 3576  
                               i2l6472 499C                                 i2l6624 20B8  
                               i2l6552 1F4A                                 i2l6544 1F08  
                               i2l6536 1EB4                                 i2l9040 2936  
                               i2l9032 2912                                 i2l9024 28F6  
                               i2l9016 28D2                                 i2l9008 28B6  
                               i2l6482 49C6                                 i2l6618 20A0  
                               i2l6570 1FC4                                 i2l6554 1F5C  
                               i2l6546 1F0E                                 i2l6810 3E28  
                               i2l7194 36D8                                 i2l7186 36B4  
                               i2l7178 3690                                 i2l6634 4FA8  
                               i2l6476 49AC                                 i2l6628 2106  
                               i2l6548 1F20                                 i2l6636 4FB0  
                               i2l9036 2920                                 i2l9028 2904  
                               i2l9300 3944                                 i2l6574 1FDC  
                               i2l6558 1F60                                 i2l6806 3E18  
                               i2l9046 2944                                 i2l6576 1FE0  
                               i2l9232 29CE                                 i2l8512 4A5C  
                               i2l9312 39CC                                 i2l9304 3978  
                               i2l8522 53B2                                 i2l6594 202C  
                               i2l9250 2AF6                                 i2l6818 3E5C  
                               i2l8514 4A7E                                 i2l9322 3A20  
                               i2l6588 2012                                 i2l9228 29BE  
                               i2l9316 39EC                                 i2l9308 39AC  
                               i2l8526 53C2                                 i2l6598 2050  
                               i2l9262 2B4E                                 i2l9270 2B82  
                               i2l9238 2A28                                 i2l9274 2BB6  
                               i2l9370 4738                                 i2l9362 471A  
                               i2l9514 389C                                 i2l9442 378A  
                               i2l9450 37A4                                 i2l9276 2BBC  
                               i2l6980 2ECE                                 i2l8900 2728  
                               i2l9292 38DC                                 i2l9380 4758  
                               i2l9372 473C                                 i2l9356 470A  
                               i2l9444 378E                                 i2l6990 2F66  
                               i2l6992 2F7C                                 i2l8912 2752  
                               i2l8904 2736                                 i2l9296 3910  
                               i2l9368 4730                                 i2l9384 4762  
                               i2l9464 37C0                                 i2l6994 2F92  
                               i2l6986 2F3A                                 i2l6996 2FA8  
                               i2l6988 2F50                                 i2l8940 27A8  
                               i2l8932 278A                                 i2l8924 276E  
                               i2l8916 2760                                 i2l8908 2744  
                               i2l9388 4770                                 i2l9492 3852  
                               i2l6998 2FBE                                 i2l9486 380A  
                               i2l8960 27F6                                 i2l8952 27D2  
                               i2l8944 27B6                                 i2l8936 279A  
                               i2l8928 277C                                 i2l8980 2844  
                               i2l8972 2820                                 i2l8964 2804  
                               i2l8956 27E0                                 i2l8948 27C4  
                               i2l8992 2876                                 i2l8984 2852  
                               i2l8976 2836                                 i2l8968 2812  
                               i2l8898 2722                                 i2l8996 2884  
                               i2l8988 2860                _f_most_recent_sort_time 0135  
                               i2l9996 3A50                                 i2l9998 3A5A  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 52B4  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 534C                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 352A  
                               ___wmul 4F36                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4F6C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 45EC                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5390  
                               _initUI 5180                                 _readIR 4D70  
                               _logRun 3C16                                 getIR@i 0087  
                               clear_0 4D48                                 clear_1 4D54  
                               clear_2 4D60                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4BC4  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1600                              ??_handler 004B  
              __size_of_initGlobalVars 0098                           ?_retrieveLog 0007  
                               _strcpy 4F00                         i2___awdiv@sign 0006  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 52DC  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 52B4  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                      __end_ofi2___awdiv 477A  
                   __size_of_PortTests 0082                      __end_ofi2___lwdiv 4D22  
                     __end_of_printRTC 26F2                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4E90                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 006B                  __end_of_algorithmTest 4142  
                    __end_ofi2_lcdInst 5470                             _PusherTest 2C5A  
                    __end_ofi2_isdigit 53AE                             __accesstop 0080  
              __end_of__initialization 4D66                          ?_inputHandler 002A  
                _most_recent_sort_time 0071                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 53FC                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 54AE  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5484  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 4964  
                          i2printRTC@i 0041                          _initSortTimer 437C  
          __end_of_updateServoPosition 487A                          __end_of_putch 5448  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 330A                             __end_of_UI 116C  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5236  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 520A  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0068          __end_ofi2_updateServoPosition 4AA6  
                         _EEPROM_write 3F84               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3232 013B  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 46F6                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 47FC  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2412 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10000 3A64                                i2l10010 2962  
                              i2l10002 3A74                                i2l10020 35EC  
                              i2l10012 2984                                i2l10004 3A7E  
                              i2l10014 29A0                                i2l10006 3A88  
                              i2l10018 35D0                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 5458                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 0220            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4A3E                                _Loading 116C  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 4202  
                              ___awmod 4426                             _initServos 4C20  
                              ___lldiv 42C0                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 487A  
                              ___lwmod 4AA6                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4D22  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 44C8                                _lcdInst 5448  
                              _handler 0008                                __ptext0 4142  
                              __ptext1 53CA                                __ptext2 534C  
                              __ptext3 116C                                __ptext4 437C  
                              __ptext5 44C8                                __ptext6 4F6C  
                              __ptext7 48F2                                __ptext8 4D70  
                              __ptext9 30D8                        __size_of_printf 0438  
                              _readADC 5236                        __size_of_strcpy 0036  
                              _initLCD 4E08                                _cur_can 00EC  
                              _loadRTC 4560                                _readMAG 4DBC  
                              _dpowers FB00                     actuatorTest@i_1730 00AD  
                   actuatorTest@i_1740 00B0                     actuatorTest@i_1741 00B1  
                   actuatorTest@i_1750 00B7                     actuatorTest@i_1743 00B2  
                   actuatorTest@i_1760 00BD                     actuatorTest@i_1752 00B8  
                   actuatorTest@i_1744 00B3                     actuatorTest@i_1753 00B9  
                   actuatorTest@i_1737 00AE                     actuatorTest@i_1770 00C3  
                   actuatorTest@i_1762 00BE                     actuatorTest@i_1746 00B4  
                   actuatorTest@i_1738 00AF                     actuatorTest@i_1763 00BF  
                   actuatorTest@i_1747 00B5                     actuatorTest@i_1756 00BA  
                   actuatorTest@i_1757 00BB                     actuatorTest@i_1749 00B6  
                   actuatorTest@i_1766 00C0                     actuatorTest@i_1767 00C1  
                   actuatorTest@i_1759 00BC                     actuatorTest@i_1769 00C2  
                              _isdigit 5262                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 330A                         __pintcode_body 3710  
                 end_of_initialization 4D66                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3710                    i2___wmul@multiplier 0001  
                            i2u1011_47 3568                              i2u1012_47 2B28  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1013_47 4C92                              i2u1014_47 4C9C  
                            i2u1015_47 4CBE                              i2u1016_47 4CC8  
                            i2u1017_47 53BA              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 53CA                 __end_of_initGlobalVars 4560  
                           _sensorTest 212A                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3710  
                         ??_BothServos 00AB                  __end_of_machineConfig 4BC4  
                           _updateMenu 26F2                      i2_I2C_Master_Read 5302  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5426  
                    i2_I2C_Master_Stop 549C                              i2___awdiv 46F6  
                    i2___lwdiv@divisor 0008                        _log_count_total 006F  
                            i2___lwdiv 4CD0                              i2___lwmod 4E4E  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 30D8  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5464  
                        Loading@i_1145 00B6                          Loading@i_1154 00B8  
                        Loading@i_1156 00BA                          Loading@i_1157 00BC  
                        Loading@i_1159 00BE                             _total_time 00FA  
                          printf@width 00A9                     i2___awdiv@dividend 0001  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5390                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DBC                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 53FC                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4F6C  
                       __end_of_getMAG 4F9E                         __end_of_getRTC 4672  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 51AE  
                       __end_of_readIR 4DBC                         __end_of_logRun 3D5A  
                     i2___wmul@product 0005                         __end_of_printf 1A38  
                         i2printf@flag 0026                         __end_of_strcpy 4F36  
            __end_ofi2_I2C_Master_Read 5328              __end_ofi2_I2C_Master_Wait 5438  
                         i2printf@prec 001D                    start_initialization 4D22  
            __end_ofi2_I2C_Master_Stop 54A4                             readMAG@res 0084  
                   i2___awdiv@quotient 0007                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1394 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awdiv 0001  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 4672  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 477A                            ?_sensorTest 0001  
                          __pdataBANK1 013B                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1170 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2553 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2054 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1785 00AF                        _count_pop_w_tab 0129  
                          _EEPROM_read 53E4                     __end_of_PortTestA5 4C20  
                     _I2C_Master_Start 5494                              _f_lastCan 00F0  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5470                      __size_of_initTime 0022  
                i2_updateServoPosition 4A3E                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 49D6                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00E2  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 2EA2                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0063  
                            _cur_state 00EE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                            ??i2___awdiv 0005  
                        _algorithmTest 406C                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0232                            __size_of_UI 08A2  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 54AC  
           __end_ofi2_I2C_Master_Write 5484                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 352A                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u501_40 1F42  
                             i2u501_47 1F38                               i2u442_40 5320  
                             _PIR2bits 000FA1                               i2u542_40 2F30  
                             i2u497_40 1EE2                               i2u497_47 1ED8  
                             i2u826_40 2B58                               i2u828_40 2B80  
                             i2u827_48 2B5A                    __size_of_updateMenu 02C0  
                       _log_completion 0065                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 52DC  
                        lcdNibble@data 0081                               i2_getRTC 4964  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                      i2___awdiv@divisor 0003  
                    i2___awdiv@counter 0005                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1DBC  
                             i2_strcpy 4F9E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4D36  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5412                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0494  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4426                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5060  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4EC8  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4E90  
              _change_state_to_menu_23 5030                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5150                _change_state_to_logs_12 5120  
              _change_state_to_logs_22 50F0                _change_state_to_logs_23 51DC  
              _change_state_to_logs_33 50C0                _change_state_to_logs_34 5090  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 38D2                             _EEPROMTest 54AC  
                      _I2C_Master_Init 4B08                       __size_of_readADC 002C  
                      _I2C_Master_Read 51AE                       __size_of_initLCD 0046  
                         _f_ID_receive 012D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5412  
                      _I2C_Master_Stop 548C                       __size_of_isdigit 002A  
                             _delay_ms 528C                         _printSortTimer 29B2  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3E74                               __ptext10 528C  
                             __ptext11 330A                               __ptext20 520A  
                             __ptext12 4B68                               __ptext21 536E  
                             __ptext13 3C16                               __ptext30 51AE  
                             __ptext22 4E08                               __ptext14 3F84  
                             __ptext31 5412                               __ptext23 08CA  
                             __ptext15 53E4                               __ptext40 0012  
                             __ptext32 4E90                               __ptext24 2428  
                             __ptext16 5180                               __ptext41 4672  
                             __ptext33 4EC8                               __ptext25 4F00  
                             __ptext17 4560                               __ptext50 3A92  
                             __ptext42 2C5A                               __ptext34 4426  
                             __ptext26 45EC                               __ptext18 4B08  
                             __ptext51 1600                               __ptext43 5236  
                             __ptext35 4202                               __ptext27 5470  
                             __ptext19 42C0                               __ptext60 46F6  
                             __ptext52 5438                               __ptext44 477A  
                             __ptext36 3E74                               __ptext28 548C  
                             __ptext61 38DA                               __ptext53 5262  
                             __ptext45 4BC4                               __ptext37 212A  
                             __ptext29 5494                               __ptext70 5030  
                             __ptext62 4A3E                               __ptext54 4F36  
                             __ptext46 54AC                               __ptext38 4DBC  
                             __ptext71 5060                               __ptext63 26F2  
                             __ptext55 4AA6                               __ptext47 1A38  
                             __ptext39 406C                               __ptext80 53FC  
                             __ptext72 5090                               __ptext64 52B4  
                             __ptext56 487A                               __ptext48 4C20  
                             __ptext81 29B2                               __ptext73 50C0  
                             __ptext65 2EA2                               __ptext57 5448  
                             __ptext49 47FC                               __ptext90 4964  
                             __ptext82 1DBC                               __ptext74 51DC  
                             __ptext66 4F9E                               __ptext58 49D6  
                             __ptext91 547A                               __ptext83 5458  
                             __ptext75 50F0                               __ptext67 352A  
                             __ptext92 549C                               __ptext84 5390  
                             __ptext76 5120                               __ptext68 4FD0  
                             __ptext93 54A4                               __ptext85 52DC  
                             __ptext77 5150                               __ptext69 5000  
                             __ptext94 5302                               __ptext86 4E4E  
                             __ptext78 5328                               __ptext95 5426  
                             __ptext87 4CD0                               __ptext79 3D5A  
                             __ptext96 53AE                               __ptext88 5464  
                             __ptext89 4C7A                               _dispLogs 5328  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2054 0002  
                   __end_of_initServos 4C7A                          __size_of_Test 0110  
                        ?_EEPROM_write 00AB                               _initTime 536E  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 47FC                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 2428  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 012F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5030      __end_ofi2_change_state_to_menu_22 5000  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C5A  
                            putch@data 0082               __end_of_I2C_Master_Start 549C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 547A  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 0139                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2428  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 53E4  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29B2                __end_of_I2C_Master_Init 4B68  
              __end_of_I2C_Master_Read 51DC                __end_of_I2C_Master_Wait 5426  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5494  
                        printRTC@F3223 013F                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3D5A  
                  __end_ofi2_lcdNibble 4CD0                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0133  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4B68                        ___lwmod@counter 008B  
                    _updateServoStates 38DA                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                          _servo_state 0073                          _machine_state 00FC  
                        dispLogs@myLog 0012                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
