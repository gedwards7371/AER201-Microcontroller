

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 23 17:37:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.40
    94                           ; Generated 01/12/2016 GMT
    95                           ; 
    96                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  002972                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _timer1_20ms_high
   133  002972  00B1               	dw	177
   134                           
   135                           ;initializer for _timer1_20ms_low
   136  002974  00E0               	dw	224
   137                           
   138                           	psect	idataBANK0
   139  00294A                     __pidataBANK0:
   140                           	opt stack 0
   141                           
   142                           ;initializer for printRTC@F3189
   143  00294A  4D                 	db	77
   144  00294B  4D                 	db	77
   145  00294C  4D                 	db	77
   146  00294D  00                 	db	0
   147                           
   148                           ;initializer for _f_ID_receive
   149  00294E  0001               	dw	1
   150                           
   151                           ;initializer for _first
   152  002950  0001               	dw	1
   153                           
   154                           	psect	mediumconst
   155  00FDB0                     __pmediumconst:
   156                           	opt stack 0
   157  00FDB0  00                 	db	0
   158  00FDB1                     _keys:
   159                           	opt stack 0
   160  00FDB1  31                 	db	49
   161  00FDB2  32                 	db	50
   162  00FDB3  33                 	db	51
   163  00FDB4  41                 	db	65
   164  00FDB5  34                 	db	52
   165  00FDB6  35                 	db	53
   166  00FDB7  36                 	db	54
   167  00FDB8  42                 	db	66
   168  00FDB9  37                 	db	55
   169  00FDBA  38                 	db	56
   170  00FDBB  39                 	db	57
   171  00FDBC  43                 	db	67
   172  00FDBD  2A                 	db	42
   173  00FDBE  30                 	db	48
   174  00FDBF  23                 	db	35
   175  00FDC0  44                 	db	68
   176  00FDC1  00                 	db	0
   177  00FDC2                     __end_of_keys:
   178                           	opt stack 0
   179  00FDC2                     _dpowers:
   180                           	opt stack 0
   181  00FDC2  0001               	dw	1
   182  00FDC4  000A               	dw	10
   183  00FDC6  0064               	dw	100
   184  00FDC8  03E8               	dw	1000
   185  00FDCA  2710               	dw	10000
   186  00FDCC                     __end_of_dpowers:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON1	set	4033
   191  0000                     _CMCONbits	set	4020
   192  0000                     _CVRCON	set	4021
   193  0000                     _INTCONbits	set	4082
   194  0000                     _LATA	set	3977
   195  0000                     _LATAbits	set	3977
   196  0000                     _LATB	set	3978
   197  0000                     _LATC	set	3979
   198  0000                     _LATCbits	set	3979
   199  0000                     _LATD	set	3980
   200  0000                     _LATDbits	set	3980
   201  0000                     _LATE	set	3981
   202  0000                     _OSCCON	set	4051
   203  0000                     _OSCTUNEbits	set	3995
   204  0000                     _PORTAbits	set	3968
   205  0000                     _PORTB	set	3969
   206  0000                     _PORTBbits	set	3969
   207  0000                     _SSPADD	set	4040
   208  0000                     _SSPBUF	set	4041
   209  0000                     _SSPCON1	set	4038
   210  0000                     _SSPCON2	set	4037
   211  0000                     _SSPSTAT	set	4039
   212  0000                     _T0CON	set	4053
   213  0000                     _T1CON	set	4045
   214  0000                     _T3CON	set	4017
   215  0000                     _TMR0H	set	4055
   216  0000                     _TMR0L	set	4054
   217  0000                     _TMR1H	set	4047
   218  0000                     _TMR1L	set	4046
   219  0000                     _TMR3H	set	4019
   220  0000                     _TMR3L	set	4018
   221  0000                     _TRISA	set	3986
   222  0000                     _TRISB	set	3987
   223  0000                     _TRISC	set	3988
   224  0000                     _TRISD	set	3989
   225  0000                     _TRISE	set	3990
   226  0000                     _ACKDT	set	32301
   227  0000                     _ACKEN	set	32300
   228  0000                     _ADFM	set	32263
   229  0000                     _ADON	set	32272
   230  0000                     _INT1IE	set	32643
   231  0000                     _INT1IF	set	32640
   232  0000                     _PEIE	set	32662
   233  0000                     _PEN	set	32298
   234  0000                     _RCEN	set	32299
   235  0000                     _RSEN	set	32297
   236  0000                     _SEN	set	32296
   237  0000                     _TMR0IE	set	32661
   238  0000                     _TMR0IF	set	32658
   239  0000                     _TMR0ON	set	32431
   240  0000                     _TMR1IE	set	31976
   241  0000                     _TMR1IF	set	31984
   242  0000                     _TMR1ON	set	32360
   243  0000                     _TMR2IE	set	31977
   244  0000                     _TMR3IE	set	32001
   245  0000                     _TMR3ON	set	32136
   246  0000                     _TRISC3	set	31907
   247  0000                     _TRISC4	set	31908
   248  00FDCC                     STR_48:
   249  00FDCC  25                 	db	37
   250  00FDCD  30                 	db	48	;'0'
   251  00FDCE  32                 	db	50	;'2'
   252  00FDCF  64                 	db	100	;'d'
   253  00FDD0  25                 	db	37
   254  00FDD1  73                 	db	115	;'s'
   255  00FDD2  20                 	db	32
   256  00FDD3  7C                 	db	124
   257  00FDD4  20                 	db	32
   258  00FDD5  25                 	db	37
   259  00FDD6  30                 	db	48	;'0'
   260  00FDD7  32                 	db	50	;'2'
   261  00FDD8  64                 	db	100	;'d'
   262  00FDD9  3A                 	db	58	;':'
   263  00FDDA  25                 	db	37
   264  00FDDB  30                 	db	48	;'0'
   265  00FDDC  32                 	db	50	;'2'
   266  00FDDD  64                 	db	100	;'d'
   267  00FDDE  3A                 	db	58	;':'
   268  00FDDF  25                 	db	37
   269  00FDE0  30                 	db	48	;'0'
   270  00FDE1  32                 	db	50	;'2'
   271  00FDE2  64                 	db	100	;'d'
   272  00FDE3  00                 	db	0
   273  00FDE4                     STR_2:
   274  00FDE4  54                 	db	84	;'T'
   275  00FDE5  69                 	db	105	;'i'
   276  00FDE6  6D                 	db	109	;'m'
   277  00FDE7  65                 	db	101	;'e'
   278  00FDE8  3A                 	db	58	;':'
   279  00FDE9  20                 	db	32
   280  00FDEA  25                 	db	37
   281  00FDEB  30                 	db	48	;'0'
   282  00FDEC  32                 	db	50	;'2'
   283  00FDED  64                 	db	100	;'d'
   284  00FDEE  3A                 	db	58	;':'
   285  00FDEF  25                 	db	37
   286  00FDF0  30                 	db	48	;'0'
   287  00FDF1  32                 	db	50	;'2'
   288  00FDF2  64                 	db	100	;'d'
   289  00FDF3  3A                 	db	58	;':'
   290  00FDF4  25                 	db	37
   291  00FDF5  30                 	db	48	;'0'
   292  00FDF6  32                 	db	50	;'2'
   293  00FDF7  64                 	db	100	;'d'
   294  00FDF8  00                 	db	0
   295  00FDF9                     STR_3:
   296  00FDF9  2D                 	db	45
   297  00FDFA  2D                 	db	45
   298  00FDFB  20                 	db	32
   299  00FDFC  4C                 	db	76	;'L'
   300  00FDFD  6F                 	db	111	;'o'
   301  00FDFE  67                 	db	103	;'g'
   302  00FDFF  20                 	db	32
   303  00FE00  25                 	db	37
   304  00FE01  32                 	db	50	;'2'
   305  00FE02  64                 	db	100	;'d'
   306  00FE03  20                 	db	32
   307  00FE04  68                 	db	104	;'h'
   308  00FE05  65                 	db	101	;'e'
   309  00FE06  72                 	db	114	;'r'
   310  00FE07  65                 	db	101	;'e'
   311  00FE08  2D                 	db	45
   312  00FE09  2D                 	db	45
   313  00FE0A  00                 	db	0
   314  00FE0B                     STR_8:
   315  00FE0B  25                 	db	37
   316  00FE0C  64                 	db	100	;'d'
   317  00FE0D  20                 	db	32
   318  00FE0E  6D                 	db	109	;'m'
   319  00FE0F  69                 	db	105	;'i'
   320  00FE10  6E                 	db	110	;'n'
   321  00FE11  28                 	db	40
   322  00FE12  73                 	db	115	;'s'
   323  00FE13  29                 	db	41
   324  00FE14  20                 	db	32
   325  00FE15  25                 	db	37
   326  00FE16  64                 	db	100	;'d'
   327  00FE17  20                 	db	32
   328  00FE18  73                 	db	115	;'s'
   329  00FE19  65                 	db	101	;'e'
   330  00FE1A  63                 	db	99	;'c'
   331  00FE1B  73                 	db	115	;'s'
   332  00FE1C  00                 	db	0
   333  00FE1D                     STR_26:
   334  00FE1D  4C                 	db	76	;'L'
   335  00FE1E  4F                 	db	79	;'O'
   336  00FE1F  47                 	db	71	;'G'
   337  00FE20  20                 	db	32
   338  00FE21  31                 	db	49	;'1'
   339  00FE22  20                 	db	32
   340  00FE23  20                 	db	32
   341  00FE24  20                 	db	32
   342  00FE25  20                 	db	32
   343  00FE26  20                 	db	32
   344  00FE27  20                 	db	32
   345  00FE28  20                 	db	32
   346  00FE29  20                 	db	32
   347  00FE2A  20                 	db	32
   348  00FE2B  20                 	db	32
   349  00FE2C  20                 	db	32
   350  00FE2D  00                 	db	0
   351  00FE2E                     STR_25:
   352  00FE2E  4C                 	db	76	;'L'
   353  00FE2F  4F                 	db	79	;'O'
   354  00FE30  47                 	db	71	;'G'
   355  00FE31  20                 	db	32
   356  00FE32  32                 	db	50	;'2'
   357  00FE33  20                 	db	32
   358  00FE34  20                 	db	32
   359  00FE35  20                 	db	32
   360  00FE36  20                 	db	32
   361  00FE37  20                 	db	32
   362  00FE38  20                 	db	32
   363  00FE39  20                 	db	32
   364  00FE3A  20                 	db	32
   365  00FE3B  20                 	db	32
   366  00FE3C  20                 	db	32
   367  00FE3D  20                 	db	32
   368  00FE3E  00                 	db	0
   369  00FE3F                     STR_29:
   370  00FE3F  4C                 	db	76	;'L'
   371  00FE40  4F                 	db	79	;'O'
   372  00FE41  47                 	db	71	;'G'
   373  00FE42  20                 	db	32
   374  00FE43  33                 	db	51	;'3'
   375  00FE44  20                 	db	32
   376  00FE45  20                 	db	32
   377  00FE46  20                 	db	32
   378  00FE47  20                 	db	32
   379  00FE48  20                 	db	32
   380  00FE49  20                 	db	32
   381  00FE4A  20                 	db	32
   382  00FE4B  20                 	db	32
   383  00FE4C  20                 	db	32
   384  00FE4D  20                 	db	32
   385  00FE4E  20                 	db	32
   386  00FE4F  00                 	db	0
   387  00FE50                     STR_33:
   388  00FE50  4C                 	db	76	;'L'
   389  00FE51  4F                 	db	79	;'O'
   390  00FE52  47                 	db	71	;'G'
   391  00FE53  20                 	db	32
   392  00FE54  34                 	db	52	;'4'
   393  00FE55  20                 	db	32
   394  00FE56  20                 	db	32
   395  00FE57  20                 	db	32
   396  00FE58  20                 	db	32
   397  00FE59  20                 	db	32
   398  00FE5A  20                 	db	32
   399  00FE5B  20                 	db	32
   400  00FE5C  20                 	db	32
   401  00FE5D  20                 	db	32
   402  00FE5E  20                 	db	32
   403  00FE5F  20                 	db	32
   404  00FE60  00                 	db	0
   405  00FE61                     STR_21:
   406  00FE61  33                 	db	51	;'3'
   407  00FE62  2E                 	db	46
   408  00FE63  20                 	db	32
   409  00FE64  4C                 	db	76	;'L'
   410  00FE65  4F                 	db	79	;'O'
   411  00FE66  47                 	db	71	;'G'
   412  00FE67  53                 	db	83	;'S'
   413  00FE68  20                 	db	32
   414  00FE69  20                 	db	32
   415  00FE6A  20                 	db	32
   416  00FE6B  20                 	db	32
   417  00FE6C  20                 	db	32
   418  00FE6D  20                 	db	32
   419  00FE6E  20                 	db	32
   420  00FE6F  20                 	db	32
   421  00FE70  20                 	db	32
   422  00FE71  00                 	db	0
   423  00FE72                     STR_17:
   424  00FE72  32                 	db	50	;'2'
   425  00FE73  2E                 	db	46
   426  00FE74  20                 	db	32
   427  00FE75  53                 	db	83	;'S'
   428  00FE76  4F                 	db	79	;'O'
   429  00FE77  52                 	db	82	;'R'
   430  00FE78  54                 	db	84	;'T'
   431  00FE79  20                 	db	32
   432  00FE7A  20                 	db	32
   433  00FE7B  20                 	db	32
   434  00FE7C  20                 	db	32
   435  00FE7D  20                 	db	32
   436  00FE7E  20                 	db	32
   437  00FE7F  20                 	db	32
   438  00FE80  20                 	db	32
   439  00FE81  20                 	db	32
   440  00FE82  00                 	db	0
   441  00FE83                     STR_18:
   442  00FE83  31                 	db	49	;'1'
   443  00FE84  2E                 	db	46
   444  00FE85  20                 	db	32
   445  00FE86  44                 	db	68	;'D'
   446  00FE87  41                 	db	65	;'A'
   447  00FE88  54                 	db	84	;'T'
   448  00FE89  45                 	db	69	;'E'
   449  00FE8A  2F                 	db	47
   450  00FE8B  54                 	db	84	;'T'
   451  00FE8C  49                 	db	73	;'I'
   452  00FE8D  4D                 	db	77	;'M'
   453  00FE8E  45                 	db	69	;'E'
   454  00FE8F  20                 	db	32
   455  00FE90  20                 	db	32
   456  00FE91  20                 	db	32
   457  00FE92  20                 	db	32
   458  00FE93  00                 	db	0
   459  00FE94                     STR_9:
   460  00FE94  20                 	db	32
   461  00FE95  2D                 	db	45
   462  00FE96  2D                 	db	45
   463  00FE97  20                 	db	32
   464  00FE98  50                 	db	80	;'P'
   465  00FE99  6F                 	db	111	;'o'
   466  00FE9A  70                 	db	112	;'p'
   467  00FE9B  20                 	db	32
   468  00FE9C  20                 	db	32
   469  00FE9D  63                 	db	99	;'c'
   470  00FE9E  61                 	db	97	;'a'
   471  00FE9F  6E                 	db	110	;'n'
   472  00FEA0  20                 	db	32
   473  00FEA1  2D                 	db	45
   474  00FEA2  2D                 	db	45
   475  00FEA3  20                 	db	32
   476  00FEA4  00                 	db	0
   477  00FEA5                     STR_11:
   478  00FEA5  20                 	db	32
   479  00FEA6  2D                 	db	45
   480  00FEA7  2D                 	db	45
   481  00FEA8  20                 	db	32
   482  00FEA9  53                 	db	83	;'S'
   483  00FEAA  6F                 	db	111	;'o'
   484  00FEAB  75                 	db	117	;'u'
   485  00FEAC  70                 	db	112	;'p'
   486  00FEAD  20                 	db	32
   487  00FEAE  63                 	db	99	;'c'
   488  00FEAF  61                 	db	97	;'a'
   489  00FEB0  6E                 	db	110	;'n'
   490  00FEB1  20                 	db	32
   491  00FEB2  2D                 	db	45
   492  00FEB3  2D                 	db	45
   493  00FEB4  20                 	db	32
   494  00FEB5  00                 	db	0
   495  00FEB6                     STR_1:
   496  00FEB6  21                 	db	33
   497  00FEB7  53                 	db	83	;'S'
   498  00FEB8  4F                 	db	79	;'O'
   499  00FEB9  52                 	db	82	;'R'
   500  00FEBA  54                 	db	84	;'T'
   501  00FEBB  20                 	db	32
   502  00FEBC  43                 	db	67	;'C'
   503  00FEBD  4F                 	db	79	;'O'
   504  00FEBE  4E                 	db	78	;'N'
   505  00FEBF  43                 	db	67	;'C'
   506  00FEC0  4C                 	db	76	;'L'
   507  00FEC1  55                 	db	85	;'U'
   508  00FEC2  44                 	db	68	;'D'
   509  00FEC3  45                 	db	69	;'E'
   510  00FEC4  44                 	db	68	;'D'
   511  00FEC5  21                 	db	33
   512  00FEC6  00                 	db	0
   513  00FEC7                     STR_13:
   514  00FEC7  2D                 	db	45
   515  00FEC8  2D                 	db	45
   516  00FEC9  20                 	db	32
   517  00FECA  54                 	db	84	;'T'
   518  00FECB  6F                 	db	111	;'o'
   519  00FECC  74                 	db	116	;'t'
   520  00FECD  61                 	db	97	;'a'
   521  00FECE  6C                 	db	108	;'l'
   522  00FECF  20                 	db	32
   523  00FED0  63                 	db	99	;'c'
   524  00FED1  61                 	db	97	;'a'
   525  00FED2  6E                 	db	110	;'n'
   526  00FED3  73                 	db	115	;'s'
   527  00FED4  20                 	db	32
   528  00FED5  2D                 	db	45
   529  00FED6  2D                 	db	45
   530  00FED7  00                 	db	0
   531  00FED8                     STR_10:
   532  00FED8  4E                 	db	78	;'N'
   533  00FED9  6F                 	db	111	;'o'
   534  00FEDA  20                 	db	32
   535  00FEDB  74                 	db	116	;'t'
   536  00FEDC  61                 	db	97	;'a'
   537  00FEDD  62                 	db	98	;'b'
   538  00FEDE  3A                 	db	58	;':'
   539  00FEDF  20                 	db	32
   540  00FEE0  39                 	db	57	;'9'
   541  00FEE1  7C                 	db	124
   542  00FEE2  54                 	db	84	;'T'
   543  00FEE3  61                 	db	97	;'a'
   544  00FEE4  62                 	db	98	;'b'
   545  00FEE5  3A                 	db	58	;':'
   546  00FEE6  20                 	db	32
   547  00FEE7  31                 	db	49	;'1'
   548  00FEE8  00                 	db	0
   549  00FEE9                     STR_12:
   550  00FEE9  4E                 	db	78	;'N'
   551  00FEEA  6F                 	db	111	;'o'
   552  00FEEB  20                 	db	32
   553  00FEEC  6C                 	db	108	;'l'
   554  00FEED  62                 	db	98	;'b'
   555  00FEEE  6C                 	db	108	;'l'
   556  00FEEF  3A                 	db	58	;':'
   557  00FEF0  20                 	db	32
   558  00FEF1  31                 	db	49	;'1'
   559  00FEF2  7C                 	db	124
   560  00FEF3  6C                 	db	108	;'l'
   561  00FEF4  62                 	db	98	;'b'
   562  00FEF5  6C                 	db	108	;'l'
   563  00FEF6  3A                 	db	58	;':'
   564  00FEF7  20                 	db	32
   565  00FEF8  31                 	db	49	;'1'
   566  00FEF9  00                 	db	0
   567  00FEFA                     STR_6:
   568  00FEFA  30                 	db	48	;'0'
   569  00FEFB  36                 	db	54	;'6'
   570  00FEFC  46                 	db	70	;'F'
   571  00FEFD  65                 	db	101	;'e'
   572  00FEFE  62                 	db	98	;'b'
   573  00FEFF  20                 	db	32
   574  00FF00  7C                 	db	124
   575  00FF01  20                 	db	32
   576  00FF02  30                 	db	48	;'0'
   577  00FF03  31                 	db	49	;'1'
   578  00FF04  3A                 	db	58	;':'
   579  00FF05  30                 	db	48	;'0'
   580  00FF06  38                 	db	56	;'8'
   581  00FF07  3A                 	db	58	;':'
   582  00FF08  35                 	db	53	;'5'
   583  00FF09  36                 	db	54	;'6'
   584  00FF0A  00                 	db	0
   585  00FF0B                     STR_24:
   586  00FF0B  4C                 	db	76	;'L'
   587  00FF0C  4F                 	db	79	;'O'
   588  00FF0D  47                 	db	71	;'G'
   589  00FF0E  20                 	db	32
   590  00FF0F  31                 	db	49	;'1'
   591  00FF10  20                 	db	32
   592  00FF11  20                 	db	32
   593  00FF12  20                 	db	32
   594  00FF13  20                 	db	32
   595  00FF14  20                 	db	32
   596  00FF15  20                 	db	32
   597  00FF16  20                 	db	32
   598  00FF17  20                 	db	32
   599  00FF18  20                 	db	32
   600  00FF19  20                 	db	32
   601  00FF1A  3C                 	db	60	;'<'
   602  00FF1B  00                 	db	0
   603  00FF1C                     STR_27:
   604  00FF1C  4C                 	db	76	;'L'
   605  00FF1D  4F                 	db	79	;'O'
   606  00FF1E  47                 	db	71	;'G'
   607  00FF1F  20                 	db	32
   608  00FF20  32                 	db	50	;'2'
   609  00FF21  20                 	db	32
   610  00FF22  20                 	db	32
   611  00FF23  20                 	db	32
   612  00FF24  20                 	db	32
   613  00FF25  20                 	db	32
   614  00FF26  20                 	db	32
   615  00FF27  20                 	db	32
   616  00FF28  20                 	db	32
   617  00FF29  20                 	db	32
   618  00FF2A  20                 	db	32
   619  00FF2B  3C                 	db	60	;'<'
   620  00FF2C  00                 	db	0
   621  00FF2D                     STR_31:
   622  00FF2D  4C                 	db	76	;'L'
   623  00FF2E  4F                 	db	79	;'O'
   624  00FF2F  47                 	db	71	;'G'
   625  00FF30  20                 	db	32
   626  00FF31  33                 	db	51	;'3'
   627  00FF32  20                 	db	32
   628  00FF33  20                 	db	32
   629  00FF34  20                 	db	32
   630  00FF35  20                 	db	32
   631  00FF36  20                 	db	32
   632  00FF37  20                 	db	32
   633  00FF38  20                 	db	32
   634  00FF39  20                 	db	32
   635  00FF3A  20                 	db	32
   636  00FF3B  20                 	db	32
   637  00FF3C  3C                 	db	60	;'<'
   638  00FF3D  00                 	db	0
   639  00FF3E                     STR_35:
   640  00FF3E  4C                 	db	76	;'L'
   641  00FF3F  4F                 	db	79	;'O'
   642  00FF40  47                 	db	71	;'G'
   643  00FF41  20                 	db	32
   644  00FF42  34                 	db	52	;'4'
   645  00FF43  20                 	db	32
   646  00FF44  20                 	db	32
   647  00FF45  20                 	db	32
   648  00FF46  20                 	db	32
   649  00FF47  20                 	db	32
   650  00FF48  20                 	db	32
   651  00FF49  20                 	db	32
   652  00FF4A  20                 	db	32
   653  00FF4B  20                 	db	32
   654  00FF4C  20                 	db	32
   655  00FF4D  3C                 	db	60	;'<'
   656  00FF4E  00                 	db	0
   657  00FF4F                     STR_23:
   658  00FF4F  33                 	db	51	;'3'
   659  00FF50  2E                 	db	46
   660  00FF51  20                 	db	32
   661  00FF52  4C                 	db	76	;'L'
   662  00FF53  4F                 	db	79	;'O'
   663  00FF54  47                 	db	71	;'G'
   664  00FF55  53                 	db	83	;'S'
   665  00FF56  20                 	db	32
   666  00FF57  20                 	db	32
   667  00FF58  20                 	db	32
   668  00FF59  20                 	db	32
   669  00FF5A  20                 	db	32
   670  00FF5B  20                 	db	32
   671  00FF5C  20                 	db	32
   672  00FF5D  20                 	db	32
   673  00FF5E  3C                 	db	60	;'<'
   674  00FF5F  00                 	db	0
   675  00FF60                     STR_19:
   676  00FF60  32                 	db	50	;'2'
   677  00FF61  2E                 	db	46
   678  00FF62  20                 	db	32
   679  00FF63  53                 	db	83	;'S'
   680  00FF64  4F                 	db	79	;'O'
   681  00FF65  52                 	db	82	;'R'
   682  00FF66  54                 	db	84	;'T'
   683  00FF67  20                 	db	32
   684  00FF68  20                 	db	32
   685  00FF69  20                 	db	32
   686  00FF6A  20                 	db	32
   687  00FF6B  20                 	db	32
   688  00FF6C  20                 	db	32
   689  00FF6D  20                 	db	32
   690  00FF6E  20                 	db	32
   691  00FF6F  3C                 	db	60	;'<'
   692  00FF70  00                 	db	0
   693  00FF71                     STR_16:
   694  00FF71  31                 	db	49	;'1'
   695  00FF72  2E                 	db	46
   696  00FF73  20                 	db	32
   697  00FF74  44                 	db	68	;'D'
   698  00FF75  41                 	db	65	;'A'
   699  00FF76  54                 	db	84	;'T'
   700  00FF77  45                 	db	69	;'E'
   701  00FF78  2F                 	db	47
   702  00FF79  54                 	db	84	;'T'
   703  00FF7A  49                 	db	73	;'I'
   704  00FF7B  4D                 	db	77	;'M'
   705  00FF7C  45                 	db	69	;'E'
   706  00FF7D  20                 	db	32
   707  00FF7E  20                 	db	32
   708  00FF7F  20                 	db	32
   709  00FF80  3C                 	db	60	;'<'
   710  00FF81  00                 	db	0
   711  00FF82                     STR_4:
   712  00FF82  50                 	db	80	;'P'
   713  00FF83  61                 	db	97	;'a'
   714  00FF84  75                 	db	117	;'u'
   715  00FF85  73                 	db	115	;'s'
   716  00FF86  65                 	db	101	;'e'
   717  00FF87  3A                 	db	58	;':'
   718  00FF88  3C                 	db	60	;'<'
   719  00FF89  20                 	db	32
   720  00FF8A  7C                 	db	124
   721  00FF8B  20                 	db	32
   722  00FF8C  42                 	db	66	;'B'
   723  00FF8D  61                 	db	97	;'a'
   724  00FF8E  63                 	db	99	;'c'
   725  00FF8F  6B                 	db	107	;'k'
   726  00FF90  3A                 	db	58	;':'
   727  00FF91  3E                 	db	62	;'>'
   728  00FF92  00                 	db	0
   729  00FF93                     STR_15:
   730  00FF93  50                 	db	80	;'P'
   731  00FF94  55                 	db	85	;'U'
   732  00FF95  53                 	db	83	;'S'
   733  00FF96  48                 	db	72	;'H'
   734  00FF97  20                 	db	32
   735  00FF98  54                 	db	84	;'T'
   736  00FF99  4F                 	db	79	;'O'
   737  00FF9A  20                 	db	32
   738  00FF9B  43                 	db	67	;'C'
   739  00FF9C  4F                 	db	79	;'O'
   740  00FF9D  4E                 	db	78	;'N'
   741  00FF9E  54                 	db	84	;'T'
   742  00FF9F  49                 	db	73	;'I'
   743  00FFA0  4E                 	db	78	;'N'
   744  00FFA1  55                 	db	85	;'U'
   745  00FFA2  45                 	db	69	;'E'
   746  00FFA3  00                 	db	0
   747  00FFA4                     STR_49:
   748  00FFA4  53                 	db	83	;'S'
   749  00FFA5  6F                 	db	111	;'o'
   750  00FFA6  72                 	db	114	;'r'
   751  00FFA7  74                 	db	116	;'t'
   752  00FFA8  69                 	db	105	;'i'
   753  00FFA9  6E                 	db	110	;'n'
   754  00FFAA  67                 	db	103	;'g'
   755  00FFAB  2E                 	db	46
   756  00FFAC  2E                 	db	46
   757  00FFAD  2E                 	db	46
   758  00FFAE  00                 	db	0
   759  00FFAF                     STR_7:
   760  00FFAF  44                 	db	68	;'D'
   761  00FFB0  75                 	db	117	;'u'
   762  00FFB1  72                 	db	114	;'r'
   763  00FFB2  61                 	db	97	;'a'
   764  00FFB3  74                 	db	116	;'t'
   765  00FFB4  69                 	db	105	;'i'
   766  00FFB5  6F                 	db	111	;'o'
   767  00FFB6  6E                 	db	110	;'n'
   768  00FFB7  3A                 	db	58	;':'
   769  00FFB8  00                 	db	0
   770  00FFB9                     STR_52:
   771  00FFB9  28                 	db	40
   772  00FFBA  6E                 	db	110	;'n'
   773  00FFBB  75                 	db	117	;'u'
   774  00FFBC  6C                 	db	108	;'l'
   775  00FFBD  6C                 	db	108	;'l'
   776  00FFBE  29                 	db	41
   777  00FFBF  00                 	db	0
   778  00FFC0                     STR_5:
   779  00FFC0  53                 	db	83	;'S'
   780  00FFC1  74                 	db	116	;'t'
   781  00FFC2  61                 	db	97	;'a'
   782  00FFC3  72                 	db	114	;'r'
   783  00FFC4  74                 	db	116	;'t'
   784  00FFC5  3A                 	db	58	;':'
   785  00FFC6  00                 	db	0
   786  00FFC7                     STR_51:
   787  00FFC7  4C                 	db	76	;'L'
   788  00FFC8  45                 	db	69	;'E'
   789  00FFC9  4C                 	db	76	;'L'
   790  00FFCA  00                 	db	0
   791  00FFCB                     STR_37:
   792  00FFCB  46                 	db	70	;'F'
   793  00FFCC  65                 	db	101	;'e'
   794  00FFCD  62                 	db	98	;'b'
   795  00FFCE  00                 	db	0
   796  00FFCF                     STR_47:
   797  00FFCF  44                 	db	68	;'D'
   798  00FFD0  65                 	db	101	;'e'
   799  00FFD1  63                 	db	99	;'c'
   800  00FFD2  00                 	db	0
   801  00FFD3                     STR_43:
   802  00FFD3  41                 	db	65	;'A'
   803  00FFD4  75                 	db	117	;'u'
   804  00FFD5  67                 	db	103	;'g'
   805  00FFD6  00                 	db	0
   806  00FFD7                     STR_42:
   807  00FFD7  4A                 	db	74	;'J'
   808  00FFD8  75                 	db	117	;'u'
   809  00FFD9  6C                 	db	108	;'l'
   810  00FFDA  00                 	db	0
   811  00FFDB                     STR_36:
   812  00FFDB  4A                 	db	74	;'J'
   813  00FFDC  61                 	db	97	;'a'
   814  00FFDD  6E                 	db	110	;'n'
   815  00FFDE  00                 	db	0
   816  00FFDF                     STR_41:
   817  00FFDF  4A                 	db	74	;'J'
   818  00FFE0  75                 	db	117	;'u'
   819  00FFE1  6E                 	db	110	;'n'
   820  00FFE2  00                 	db	0
   821  00FFE3                     STR_44:
   822  00FFE3  53                 	db	83	;'S'
   823  00FFE4  65                 	db	101	;'e'
   824  00FFE5  70                 	db	112	;'p'
   825  00FFE6  00                 	db	0
   826  00FFE7                     STR_38:
   827  00FFE7  4D                 	db	77	;'M'
   828  00FFE8  61                 	db	97	;'a'
   829  00FFE9  72                 	db	114	;'r'
   830  00FFEA  00                 	db	0
   831  00FFEB                     STR_39:
   832  00FFEB  41                 	db	65	;'A'
   833  00FFEC  70                 	db	112	;'p'
   834  00FFED  72                 	db	114	;'r'
   835  00FFEE  00                 	db	0
   836  00FFEF                     STR_45:
   837  00FFEF  4F                 	db	79	;'O'
   838  00FFF0  63                 	db	99	;'c'
   839  00FFF1  74                 	db	116	;'t'
   840  00FFF2  00                 	db	0
   841  00FFF3                     STR_46:
   842  00FFF3  4E                 	db	78	;'N'
   843  00FFF4  6F                 	db	111	;'o'
   844  00FFF5  76                 	db	118	;'v'
   845  00FFF6  00                 	db	0
   846  00FFF7                     STR_40:
   847  00FFF7  4D                 	db	77	;'M'
   848  00FFF8  61                 	db	97	;'a'
   849  00FFF9  79                 	db	121	;'y'
   850  00FFFA  00                 	db	0
   851  00FFFB                     STR_14:
   852  00FFFB  31                 	db	49	;'1'
   853  00FFFC  32                 	db	50	;'2'
   854  00FFFD  00                 	db	0
   855  0000                     
   856                           ; #config settings
   857  00FFFE  00                 	db	0	; dummy byte at the end
   858  0000                     
   859                           	psect	cinit
   860  00209C                     __pcinit:
   861                           	opt stack 0
   862  00209C                     start_initialization:
   863                           	opt stack 0
   864  00209C                     __initialization:
   865                           	opt stack 0
   866                           
   867                           ; Initialize objects allocated to BANK0 (8 bytes)
   868                           ; load TBLPTR registers with __pidataBANK0
   869  00209C  0E4A               	movlw	low __pidataBANK0
   870  00209E  6EF6               	movwf	tblptrl,c
   871  0020A0  0E29               	movlw	high __pidataBANK0
   872  0020A2  6EF7               	movwf	tblptrh,c
   873  0020A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   874  0020A6  6EF8               	movwf	tblptru,c
   875  0020A8  EE00  F0F6         	lfsr	0,__pdataBANK0
   876  0020AC  EE10 F008          	lfsr	1,8
   877  0020B0                     copy_data0:
   878  0020B0  0009               	tblrd		*+
   879  0020B2  CFF5 FFEE          	movff	tablat,postinc0
   880  0020B6  50E5               	movf	postdec1,w,c
   881  0020B8  50E1               	movf	fsr1l,w,c
   882  0020BA  E1FA               	bnz	copy_data0
   883                           
   884                           ; Initialize objects allocated to COMRAM (4 bytes)
   885                           ; load TBLPTR registers with __pidataCOMRAM
   886  0020BC  0E72               	movlw	low __pidataCOMRAM
   887  0020BE  6EF6               	movwf	tblptrl,c
   888  0020C0  0E29               	movlw	high __pidataCOMRAM
   889  0020C2  6EF7               	movwf	tblptrh,c
   890  0020C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   891  0020C6  6EF8               	movwf	tblptru,c
   892  0020C8  EE00  F07A         	lfsr	0,__pdataCOMRAM
   893  0020CC  EE10 F004          	lfsr	1,4
   894  0020D0                     copy_data1:
   895  0020D0  0009               	tblrd		*+
   896  0020D2  CFF5 FFEE          	movff	tablat,postinc0
   897  0020D6  50E5               	movf	postdec1,w,c
   898  0020D8  50E1               	movf	fsr1l,w,c
   899  0020DA  E1FA               	bnz	copy_data1
   900                           
   901                           ; Clear objects allocated to BANK1 (14 bytes)
   902  0020DC  EE01  F000         	lfsr	0,__pbssBANK1
   903  0020E0  0E0E               	movlw	14
   904  0020E2                     clear_0:
   905  0020E2  6AEE               	clrf	postinc0,c
   906  0020E4  06E8               	decf	wreg,f,c
   907  0020E6  E1FD               	bnz	clear_0
   908                           
   909                           ; Clear objects allocated to BANK0 (34 bytes)
   910  0020E8  EE00  F0D4         	lfsr	0,__pbssBANK0
   911  0020EC  0E22               	movlw	34
   912  0020EE                     clear_1:
   913  0020EE  6AEE               	clrf	postinc0,c
   914  0020F0  06E8               	decf	wreg,f,c
   915  0020F2  E1FD               	bnz	clear_1
   916                           
   917                           ; Clear objects allocated to COMRAM (31 bytes)
   918  0020F4  EE00  F05B         	lfsr	0,__pbssCOMRAM
   919  0020F8  0E1F               	movlw	31
   920  0020FA                     clear_2:
   921  0020FA  6AEE               	clrf	postinc0,c
   922  0020FC  06E8               	decf	wreg,f,c
   923  0020FE  E1FD               	bnz	clear_2
   924  002100                     end_of_initialization:
   925                           	opt stack 0
   926  002100                     __end_of__initialization:
   927                           	opt stack 0
   928  002100  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   929  002102  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   930  002104  0100               	movlb	0
   931  002106  EF9A  F00F         	goto	_main	;jump to C main() function
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           postdec1	equ	0xFE5
   939                           fsr1l	equ	0xFE1
   940                           
   941                           	psect	bssCOMRAM
   942  00005B                     __pbssCOMRAM:
   943                           	opt stack 0
   944  00005B                     _UIenabled:
   945                           	opt stack 0
   946  00005B                     	ds	2
   947  00005D                     _back:
   948                           	opt stack 0
   949  00005D                     	ds	2
   950  00005F                     _count_pop_no_tab:
   951                           	opt stack 0
   952  00005F                     	ds	2
   953  000061                     _count_pop_w_tab:
   954                           	opt stack 0
   955  000061                     	ds	2
   956  000063                     _down:
   957                           	opt stack 0
   958  000063                     	ds	2
   959  000065                     _enter:
   960                           	opt stack 0
   961  000065                     	ds	2
   962  000067                     _firstboot:
   963                           	opt stack 0
   964  000067                     	ds	2
   965  000069                     _sortTimerCounter:
   966                           	opt stack 0
   967  000069                     	ds	2
   968  00006B                     _timer1highbits:
   969                           	opt stack 0
   970  00006B                     	ds	2
   971  00006D                     _timer1lowbits:
   972                           	opt stack 0
   973  00006D                     	ds	2
   974  00006F                     _timer3highbits:
   975                           	opt stack 0
   976  00006F                     	ds	2
   977  000071                     _timer3lowbits:
   978                           	opt stack 0
   979  000071                     	ds	2
   980  000073                     _up:
   981                           	opt stack 0
   982  000073                     	ds	2
   983  000075                     _was_low:
   984                           	opt stack 0
   985  000075                     	ds	2
   986  000077                     _block:
   987                           	opt stack 0
   988  000077                     	ds	1
   989  000078                     _canType:
   990                           	opt stack 0
   991  000078                     	ds	1
   992  000079                     _input:
   993                           	opt stack 0
   994  000079                     	ds	1
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           
  1004                           	psect	dataCOMRAM
  1005  00007A                     __pdataCOMRAM:
  1006                           	opt stack 0
  1007  00007A                     _timer1_20ms_high:
  1008                           	opt stack 0
  1009  00007A                     	ds	2
  1010  00007C                     _timer1_20ms_low:
  1011                           	opt stack 0
  1012  00007C                     	ds	2
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022                           	psect	bssBANK0
  1023  0000D4                     __pbssBANK0:
  1024                           	opt stack 0
  1025  0000D4                     _time:
  1026                           	opt stack 0
  1027  0000D4                     	ds	7
  1028  0000DB                     _count_can_no_lab:
  1029                           	opt stack 0
  1030  0000DB                     	ds	2
  1031  0000DD                     _count_can_w_lab:
  1032                           	opt stack 0
  1033  0000DD                     	ds	2
  1034  0000DF                     _count_total:
  1035                           	opt stack 0
  1036  0000DF                     	ds	2
  1037  0000E1                     _cur_state:
  1038                           	opt stack 0
  1039  0000E1                     	ds	2
  1040  0000E3                     _f_can_coming_to_ID:
  1041                           	opt stack 0
  1042  0000E3                     	ds	2
  1043  0000E5                     _f_can_coming_to_distribution:
  1044                           	opt stack 0
  1045  0000E5                     	ds	2
  1046  0000E7                     _f_can_distributed:
  1047                           	opt stack 0
  1048  0000E7                     	ds	2
  1049  0000E9                     _f_lastCan:
  1050                           	opt stack 0
  1051  0000E9                     	ds	2
  1052  0000EB                     _f_loadingNewCan:
  1053                           	opt stack 0
  1054  0000EB                     	ds	2
  1055  0000ED                     _log:
  1056                           	opt stack 0
  1057  0000ED                     	ds	2
  1058  0000EF                     _logstate:
  1059                           	opt stack 0
  1060  0000EF                     	ds	2
  1061  0000F1                     _q:
  1062                           	opt stack 0
  1063  0000F1                     	ds	2
  1064  0000F3                     _total_time:
  1065                           	opt stack 0
  1066  0000F3                     	ds	2
  1067  0000F5                     _machine_state:
  1068                           	opt stack 0
  1069  0000F5                     	ds	1
  1070                           tblptru	equ	0xFF8
  1071                           tblptrh	equ	0xFF7
  1072                           tblptrl	equ	0xFF6
  1073                           tablat	equ	0xFF5
  1074                           postinc0	equ	0xFEE
  1075                           wreg	equ	0xFE8
  1076                           postdec1	equ	0xFE5
  1077                           fsr1l	equ	0xFE1
  1078                           
  1079                           	psect	dataBANK0
  1080  0000F6                     __pdataBANK0:
  1081                           	opt stack 0
  1082  0000F6                     printRTC@F3189:
  1083                           	opt stack 0
  1084  0000F6                     	ds	4
  1085  0000FA                     _f_ID_receive:
  1086                           	opt stack 0
  1087  0000FA                     	ds	2
  1088  0000FC                     _first:
  1089                           	opt stack 0
  1090  0000FC                     	ds	2
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100                           	psect	bssBANK1
  1101  000100                     __pbssBANK1:
  1102                           	opt stack 0
  1103  000100                     _startTime:
  1104                           	opt stack 0
  1105  000100                     	ds	14
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1l	equ	0xFE1
  1114                           
  1115                           	psect	cstackBANK0
  1116  000080                     __pcstackBANK0:
  1117                           	opt stack 0
  1118  000080                     ??_isdigit:
  1119  000080                     ??_I2C_Master_Wait:
  1120  000080                     ?_MAGNETISM_in:
  1121                           	opt stack 0
  1122  000080                     ?___wmul:
  1123                           	opt stack 0
  1124  000080                     ?___awmod:
  1125                           	opt stack 0
  1126  000080                     ?___lwdiv:
  1127                           	opt stack 0
  1128  000080                     ?___lldiv:
  1129                           	opt stack 0
  1130  000080                     lcdNibble@temp:
  1131                           	opt stack 0
  1132  000080                     initTime@m:
  1133                           	opt stack 0
  1134  000080                     moveServoBlock@myPosition:
  1135                           	opt stack 0
  1136  000080                     moveServoCup@myPosition:
  1137                           	opt stack 0
  1138  000080                     ___wmul@multiplier:
  1139                           	opt stack 0
  1140  000080                     ___awmod@dividend:
  1141                           	opt stack 0
  1142  000080                     ___lwdiv@dividend:
  1143                           	opt stack 0
  1144  000080                     strcpy@to:
  1145                           	opt stack 0
  1146  000080                     ___lldiv@dividend:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x0
  1150  000080                     	ds	1
  1151  000081                     I2C_Master_Read@a:
  1152                           	opt stack 0
  1153  000081                     lcdNibble@data:
  1154                           	opt stack 0
  1155  000081                     initTime@h:
  1156                           	opt stack 0
  1157  000081                     _isdigit$1710:
  1158                           	opt stack 0
  1159  000081                     I2C_Master_Write@d:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x1
  1163  000081                     	ds	1
  1164  000082                     ??_ID:
  1165  000082                     I2C_Master_Read@temp:
  1166                           	opt stack 0
  1167  000082                     lcdInst@data:
  1168                           	opt stack 0
  1169  000082                     putch@data:
  1170                           	opt stack 0
  1171  000082                     initTime@w:
  1172                           	opt stack 0
  1173  000082                     isdigit@c:
  1174                           	opt stack 0
  1175  000082                     ___wmul@multiplicand:
  1176                           	opt stack 0
  1177  000082                     ___awmod@divisor:
  1178                           	opt stack 0
  1179  000082                     ___lwdiv@divisor:
  1180                           	opt stack 0
  1181  000082                     strcpy@from:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x2
  1185  000082                     	ds	1
  1186  000083                     ??_initLCD:
  1187  000083                     initTime@DD:
  1188                           	opt stack 0
  1189  000083                     getRTC@i:
  1190                           	opt stack 0
  1191  000083                     ID@top_bottom_conductivity:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x3
  1195  000083                     	ds	1
  1196  000084                     initTime@MM:
  1197                           	opt stack 0
  1198  000084                     ___awmod@counter:
  1199                           	opt stack 0
  1200  000084                     ___wmul@product:
  1201                           	opt stack 0
  1202  000084                     ___lwdiv@quotient:
  1203                           	opt stack 0
  1204  000084                     strcpy@cp:
  1205                           	opt stack 0
  1206  000084                     ___lldiv@divisor:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x4
  1210  000084                     	ds	1
  1211  000085                     ??_initSortTimer:
  1212  000085                     initTime@YY:
  1213                           	opt stack 0
  1214  000085                     ___awmod@sign:
  1215                           	opt stack 0
  1216  000085                     ID@side_conductivity:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x5
  1220  000085                     	ds	1
  1221  000086                     ?___awdiv:
  1222                           	opt stack 0
  1223  000086                     initTime@s:
  1224                           	opt stack 0
  1225  000086                     ___lwdiv@counter:
  1226                           	opt stack 0
  1227  000086                     ___awdiv@dividend:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x6
  1231  000086                     	ds	1
  1232  000087                     ?___lwmod:
  1233                           	opt stack 0
  1234  000087                     ID@magnetic:
  1235                           	opt stack 0
  1236  000087                     ___lwmod@dividend:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x7
  1240  000087                     	ds	1
  1241  000088                     initSortTimer@i:
  1242                           	opt stack 0
  1243  000088                     ___awdiv@divisor:
  1244                           	opt stack 0
  1245  000088                     ___lldiv@quotient:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x8
  1249  000088                     	ds	1
  1250  000089                     ___lwmod@divisor:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x9
  1254  000089                     	ds	1
  1255  00008A                     ??_Loading:
  1256  00008A                     ___awdiv@counter:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0xA
  1260  00008A                     	ds	1
  1261  00008B                     ___awdiv@sign:
  1262                           	opt stack 0
  1263  00008B                     ___lwmod@counter:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0xB
  1267  00008B                     	ds	1
  1268  00008C                     ___lldiv@counter:
  1269                           	opt stack 0
  1270  00008C                     ___awdiv@quotient:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0xC
  1274  00008C                     	ds	1
  1275  00008D                     I2C_Master_Init@c:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0xD
  1279  00008D                     	ds	1
  1280  00008E                     ?_printf:
  1281                           	opt stack 0
  1282  00008E                     printf@f:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0xE
  1286  00008E                     	ds	3
  1287  000091                     ??_I2C_Master_Init:
  1288                           
  1289                           ; 1 bytes @ 0x11
  1290  000091                     	ds	4
  1291  000095                     ??_loadRTC:
  1292                           
  1293                           ; 1 bytes @ 0x15
  1294  000095                     	ds	1
  1295  000096                     loadRTC@i:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x16
  1299  000096                     	ds	4
  1300  00009A                     ??_printf:
  1301                           
  1302                           ; 1 bytes @ 0x1A
  1303  00009A                     	ds	4
  1304  00009E                     printf@prec:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x1E
  1308  00009E                     	ds	1
  1309  00009F                     printf@ap:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1F
  1313  00009F                     	ds	2
  1314  0000A1                     printf@cp:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x21
  1318  0000A1                     	ds	2
  1319  0000A3                     printf@val:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x23
  1323  0000A3                     	ds	2
  1324  0000A5                     printf@len:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x25
  1328  0000A5                     	ds	2
  1329  0000A7                     printf@flag:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x27
  1333  0000A7                     	ds	1
  1334  0000A8                     printf@c:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x28
  1338  0000A8                     	ds	1
  1339  0000A9                     printf@width:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x29
  1343  0000A9                     	ds	2
  1344  0000AB                     ??_printRTC:
  1345                           
  1346                           ; 1 bytes @ 0x2B
  1347  0000AB                     	ds	3
  1348  0000AE                     printRTC@INT_time:
  1349                           	opt stack 0
  1350                           
  1351                           ; 14 bytes @ 0x2E
  1352  0000AE                     	ds	14
  1353  0000BC                     printRTC@RTC_month:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x3C
  1357  0000BC                     	ds	2
  1358  0000BE                     printRTC@month:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x3E
  1362  0000BE                     	ds	4
  1363  0000C2                     printRTC@i:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x42
  1367  0000C2                     	ds	2
  1368  0000C4                     ??_UI:
  1369                           
  1370                           ; 1 bytes @ 0x44
  1371  0000C4                     	ds	1
  1372  0000C5                     _UI$2068:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x45
  1376  0000C5                     	ds	2
  1377  0000C7                     UI@i:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x47
  1381  0000C7                     	ds	1
  1382  0000C8                     UI@i_644:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x48
  1386  0000C8                     	ds	1
  1387  0000C9                     UI@i_645:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x49
  1391  0000C9                     	ds	1
  1392  0000CA                     UI@i_648:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x4A
  1396  0000CA                     	ds	1
  1397  0000CB                     UI@i_649:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x4B
  1401  0000CB                     	ds	1
  1402  0000CC                     UI@i_652:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x4C
  1406  0000CC                     	ds	1
  1407  0000CD                     UI@i_653:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x4D
  1411  0000CD                     	ds	1
  1412  0000CE                     UI@i_656:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x4E
  1416  0000CE                     	ds	1
  1417  0000CF                     UI@i_657:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x4F
  1421  0000CF                     	ds	1
  1422  0000D0                     UI@i_660:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x50
  1426  0000D0                     	ds	1
  1427  0000D1                     UI@i_661:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x51
  1431  0000D1                     	ds	1
  1432  0000D2                     UI@i_664:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x52
  1436  0000D2                     	ds	1
  1437  0000D3                     UI@i_665:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x53
  1441  0000D3                     	ds	1
  1442  0000D4                     tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           
  1451                           ; 1 bytes @ 0x54
  1452                           
  1453                           	psect	cstackCOMRAM
  1454  000001                     __pcstackCOMRAM:
  1455                           	opt stack 0
  1456  000001                     ??i2_I2C_Master_Wait:
  1457  000001                     ??i2_isdigit:
  1458  000001                     ?i2___wmul:
  1459                           	opt stack 0
  1460  000001                     ?i2___lwmod:
  1461                           	opt stack 0
  1462  000001                     i2lcdNibble@temp:
  1463                           	opt stack 0
  1464  000001                     dispLogs@myLog:
  1465                           	opt stack 0
  1466  000001                     i2___wmul@multiplier:
  1467                           	opt stack 0
  1468  000001                     i2___lwmod@dividend:
  1469                           	opt stack 0
  1470  000001                     i2strcpy@to:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x0
  1474  000001                     	ds	1
  1475  000002                     i2I2C_Master_Read@a:
  1476                           	opt stack 0
  1477  000002                     i2lcdNibble@data:
  1478                           	opt stack 0
  1479  000002                     i2_isdigit$1710:
  1480                           	opt stack 0
  1481  000002                     i2I2C_Master_Write@d:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x1
  1485  000002                     	ds	1
  1486  000003                     i2I2C_Master_Read@temp:
  1487                           	opt stack 0
  1488  000003                     i2lcdInst@data:
  1489                           	opt stack 0
  1490  000003                     i2putch@data:
  1491                           	opt stack 0
  1492  000003                     i2isdigit@c:
  1493                           	opt stack 0
  1494  000003                     i2___wmul@multiplicand:
  1495                           	opt stack 0
  1496  000003                     i2___lwmod@divisor:
  1497                           	opt stack 0
  1498  000003                     i2strcpy@from:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x2
  1502  000003                     	ds	1
  1503  000004                     i2getRTC@i:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x3
  1507  000004                     	ds	1
  1508  000005                     i2___lwmod@counter:
  1509                           	opt stack 0
  1510  000005                     i2___wmul@product:
  1511                           	opt stack 0
  1512  000005                     i2strcpy@cp:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x4
  1516  000005                     	ds	1
  1517  000006                     ?i2___lwdiv:
  1518                           	opt stack 0
  1519  000006                     i2___lwdiv@dividend:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x5
  1523  000006                     	ds	2
  1524  000008                     i2___lwdiv@divisor:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x7
  1528  000008                     	ds	2
  1529  00000A                     i2___lwdiv@quotient:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x9
  1533  00000A                     	ds	2
  1534  00000C                     i2___lwdiv@counter:
  1535                           	opt stack 0
  1536                           
  1537                           ; 1 bytes @ 0xB
  1538  00000C                     	ds	1
  1539  00000D                     ?i2_printf:
  1540                           	opt stack 0
  1541  00000D                     i2printf@f:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0xC
  1545  00000D                     	ds	12
  1546  000019                     ??i2_printf:
  1547                           
  1548                           ; 1 bytes @ 0x18
  1549  000019                     	ds	4
  1550  00001D                     i2printf@prec:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x1C
  1554  00001D                     	ds	1
  1555  00001E                     i2printf@ap:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x1D
  1559  00001E                     	ds	2
  1560  000020                     i2printf@cp:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x1F
  1564  000020                     	ds	2
  1565  000022                     i2printf@val:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x21
  1569  000022                     	ds	2
  1570  000024                     i2printf@len:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x23
  1574  000024                     	ds	2
  1575  000026                     i2printf@flag:
  1576                           	opt stack 0
  1577                           
  1578                           ; 1 bytes @ 0x25
  1579  000026                     	ds	1
  1580  000027                     i2printf@c:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x26
  1584  000027                     	ds	1
  1585  000028                     i2printf@width:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x27
  1589  000028                     	ds	2
  1590  00002A                     ??_printSortTimer:
  1591  00002A                     ??i2_printRTC:
  1592  00002A                     ?_inputHandler:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x29
  1596  00002A                     	ds	2
  1597  00002C                     ??_inputHandler:
  1598                           
  1599                           ; 1 bytes @ 0x2B
  1600  00002C                     	ds	1
  1601  00002D                     printSortTimer@curTime:
  1602                           	opt stack 0
  1603  00002D                     i2printRTC@INT_time:
  1604                           	opt stack 0
  1605                           
  1606                           ; 14 bytes @ 0x2C
  1607  00002D                     	ds	14
  1608  00003B                     printSortTimer@start_sec:
  1609                           	opt stack 0
  1610  00003B                     i2printRTC@RTC_month:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x3A
  1614  00003B                     	ds	2
  1615  00003D                     printSortTimer@cur_sec:
  1616                           	opt stack 0
  1617  00003D                     i2printRTC@month:
  1618                           	opt stack 0
  1619                           
  1620                           ; 4 bytes @ 0x3C
  1621  00003D                     	ds	2
  1622  00003F                     printSortTimer@hour:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x3E
  1626  00003F                     	ds	2
  1627  000041                     printSortTimer@min:
  1628                           	opt stack 0
  1629  000041                     i2printRTC@i:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x40
  1633  000041                     	ds	2
  1634  000043                     ??_updateMenu:
  1635  000043                     printSortTimer@sec:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x42
  1639  000043                     	ds	2
  1640  000045                     _printSortTimer$2183:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x44
  1644  000045                     	ds	2
  1645  000047                     printSortTimer@timeDiff:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x46
  1649  000047                     	ds	2
  1650  000049                     printSortTimer@i:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x48
  1654  000049                     	ds	2
  1655  00004B                     ??_handler:
  1656                           
  1657                           ; 1 bytes @ 0x4A
  1658  00004B                     	ds	16
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           fsr1l	equ	0xFE1
  1667                           
  1668 ;;
  1669 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1670 ;;
  1671 ;; *************** function _main *****************
  1672 ;; Defined at:
  1673 ;;		line 16 in file "main.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels required when called:   13
  1693 ;; This function calls:
  1694 ;;		_PortTestA5
  1695 ;;		_UI
  1696 ;;		_initLCD
  1697 ;;		_initTime
  1698 ;;		_initUI
  1699 ;;		_machineConfig
  1700 ;;		_sort
  1701 ;;		_stopSignals
  1702 ;; This function is called by:
  1703 ;;		Startup code after reset
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text0
  1708  001F34                     __ptext0:
  1709                           	opt stack 0
  1710  001F34                     _main:
  1711                           	opt stack 18
  1712                           
  1713                           ;main.c: 17: machineConfig();
  1714                           
  1715                           ;incstack = 0
  1716  001F34  EC96  F011         	call	_machineConfig	;wreg free
  1717                           
  1718                           ;main.c: 18: initLCD();
  1719  001F38  ECBD  F011         	call	_initLCD	;wreg free
  1720                           
  1721                           ;main.c: 19: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1722  001F3C  0E32               	movlw	50
  1723  001F3E  0100               	movlb	0	; () banked
  1724  001F40  6F80               	movwf	initTime@m& (0+255),b
  1725  001F42  0E13               	movlw	19
  1726  001F44  0100               	movlb	0	; () banked
  1727  001F46  6F81               	movwf	initTime@h& (0+255),b
  1728  001F48  0E04               	movlw	4
  1729  001F4A  0100               	movlb	0	; () banked
  1730  001F4C  6F82               	movwf	initTime@w& (0+255),b
  1731  001F4E  0E09               	movlw	9
  1732  001F50  0100               	movlb	0	; () banked
  1733  001F52  6F83               	movwf	initTime@DD& (0+255),b
  1734  001F54  0E02               	movlw	2
  1735  001F56  0100               	movlb	0	; () banked
  1736  001F58  6F84               	movwf	initTime@MM& (0+255),b
  1737  001F5A  0E17               	movlw	23
  1738  001F5C  0100               	movlb	0	; () banked
  1739  001F5E  6F85               	movwf	initTime@YY& (0+255),b
  1740  001F60  0E42               	movlw	66
  1741  001F62  EC1B  F014         	call	_initTime
  1742                           
  1743                           ;main.c: 20: initUI();
  1744  001F66  EC3B  F014         	call	_initUI	;wreg free
  1745                           
  1746                           ;main.c: 24: switch(machine_state){
  1747                           
  1748                           ;main.c: 23: while(1){
  1749  001F6A  D011               	goto	l5599
  1750  001F6C                     l5585:
  1751                           
  1752                           ;main.c: 26: UI();
  1753  001F6C  EC09  F000         	call	_UI	;wreg free
  1754                           
  1755                           ;main.c: 27: break;
  1756  001F70  D00E               	goto	l5599
  1757  001F72                     l5587:
  1758                           
  1759                           ;main.c: 29: sort();
  1760  001F72  EC0A  F014         	call	_sort	;wreg free
  1761                           
  1762                           ;main.c: 30: break;
  1763  001F76  D00B               	goto	l5599
  1764  001F78                     l5589:
  1765                           
  1766                           ;main.c: 32: stopSignals();
  1767  001F78  EC48  F014         	call	_stopSignals	;wreg free
  1768                           
  1769                           ;main.c: 33: UI();
  1770  001F7C  EC09  F000         	call	_UI	;wreg free
  1771                           
  1772                           ;main.c: 34: break;
  1773  001F80  D006               	goto	l5599
  1774  001F82                     l5593:
  1775                           
  1776                           ;main.c: 36: PortTestA5();
  1777  001F82  EC67  F014         	call	_PortTestA5	;wreg free
  1778                           
  1779                           ;main.c: 37: break;
  1780  001F86  D003               	goto	l5599
  1781  001F88                     l5595:
  1782                           
  1783                           ;main.c: 39: stopSignals();
  1784  001F88  EC48  F014         	call	_stopSignals	;wreg free
  1785  001F8C                     l701:
  1786  001F8C  D7FF               	goto	l701
  1787  001F8E                     l5599:
  1788  001F8E  0100               	movlb	0	; () banked
  1789  001F90  51F5               	movf	_machine_state& (0+255),w,b
  1790                           
  1791                           ; Switch size 1, requested type "space"
  1792                           ; Number of cases is 5, Range of values is 0 to 4
  1793                           ; switch strategies available:
  1794                           ; Name         Instructions Cycles
  1795                           ; simple_byte           16     9 (average)
  1796                           ;	Chosen strategy is simple_byte
  1797  001F92  0A00               	xorlw	0	; case 0
  1798  001F94  B4D8               	btfsc	status,2,c
  1799  001F96  D7EA               	goto	l5585
  1800  001F98  0A01               	xorlw	1	; case 1
  1801  001F9A  B4D8               	btfsc	status,2,c
  1802  001F9C  D7EA               	goto	l5587
  1803  001F9E  0A03               	xorlw	3	; case 2
  1804  001FA0  B4D8               	btfsc	status,2,c
  1805  001FA2  D7EA               	goto	l5589
  1806  001FA4  0A01               	xorlw	1	; case 3
  1807  001FA6  B4D8               	btfsc	status,2,c
  1808  001FA8  D7EC               	goto	l5593
  1809  001FAA  0A07               	xorlw	7	; case 4
  1810  001FAC  B4D8               	btfsc	status,2,c
  1811  001FAE  D7EC               	goto	l5595
  1812                           
  1813                           ; BSR set to: 0
  1814                           
  1815                           ; BSR set to: 0
  1816  001FB0  D7EE               	goto	l5599
  1817  001FB2                     __end_of_main:
  1818                           	opt stack 0
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           status	equ	0xFD8
  1828                           
  1829 ;; *************** function _stopSignals *****************
  1830 ;; Defined at:
  1831 ;;		line 48 in file "main.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    7
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text1
  1860  002890                     __ptext1:
  1861                           	opt stack 0
  1862  002890                     _stopSignals:
  1863                           	opt stack 23
  1864                           
  1865                           ;main.c: 49: LATA = 0x00;
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;incstack = 0
  1869  002890  0E00               	movlw	0
  1870  002892  6E89               	movwf	3977,c	;volatile
  1871                           
  1872                           ;main.c: 50: LATB = 0x00;
  1873  002894  0E00               	movlw	0
  1874  002896  6E8A               	movwf	3978,c	;volatile
  1875                           
  1876                           ;main.c: 51: LATC = 0x00;
  1877  002898  0E00               	movlw	0
  1878  00289A  6E8B               	movwf	3979,c	;volatile
  1879                           
  1880                           ;main.c: 52: LATD = 0x00;
  1881  00289C  0E00               	movlw	0
  1882  00289E  6E8C               	movwf	3980,c	;volatile
  1883                           
  1884                           ;main.c: 53: LATE = 0x00;
  1885  0028A0  0E00               	movlw	0
  1886  0028A2  6E8D               	movwf	3981,c	;volatile
  1887  0028A4  0012               	return		;funcret
  1888  0028A6                     __end_of_stopSignals:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _sort *****************
  1901 ;; Defined at:
  1902 ;;		line 27 in file "sort.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:   12
  1923 ;; This function calls:
  1924 ;;		_Distribution
  1925 ;;		_ID
  1926 ;;		_Loading
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text2
  1933  002814                     __ptext2:
  1934                           	opt stack 0
  1935  002814                     _sort:
  1936                           	opt stack 18
  1937                           
  1938                           ;sort.c: 28: if(machine_state == Sorting_state){
  1939                           
  1940                           ;incstack = 0
  1941  002814  0100               	movlb	0	; () banked
  1942  002816  05F5               	decf	_machine_state& (0+255),w,b
  1943  002818  B4D8               	btfsc	status,2,c
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;sort.c: 29: Loading();
  1947  00281A  EC7B  F00E         	call	_Loading	;wreg free
  1948                           
  1949                           ;sort.c: 30: }
  1950                           ;sort.c: 31: if(machine_state == Sorting_state){
  1951  00281E  0100               	movlb	0	; () banked
  1952  002820  05F5               	decf	_machine_state& (0+255),w,b
  1953  002822  B4D8               	btfsc	status,2,c
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;sort.c: 32: ID();
  1957  002824  ECD6  F00D         	call	_ID	;wreg free
  1958                           
  1959                           ;sort.c: 33: }
  1960                           ;sort.c: 34: if(machine_state == Sorting_state){
  1961  002828  0100               	movlb	0	; () banked
  1962  00282A  05F5               	decf	_machine_state& (0+255),w,b
  1963  00282C  A4D8               	btfss	status,2,c
  1964  00282E  0012               	return	
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;sort.c: 35: Distribution();
  1968  002830  EC60  F013         	call	_Distribution	;wreg free
  1969  002834  0012               	return	
  1970  002836                     __end_of_sort:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1l	equ	0xFE1
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _Loading *****************
  1983 ;; Defined at:
  1984 ;;		line 38 in file "sort.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;Total ram usage:        1 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:   11
  2005 ;; This function calls:
  2006 ;;		_initSortTimer
  2007 ;;		_lcdInst
  2008 ;;		_moveServoCup
  2009 ;; This function is called by:
  2010 ;;		_sort
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text3
  2015  001CF6                     __ptext3:
  2016                           	opt stack 0
  2017  001CF6                     _Loading:
  2018                           	opt stack 18
  2019                           
  2020                           ;sort.c: 39: if(first){
  2021                           
  2022                           ;incstack = 0
  2023  001CF6  0100               	movlb	0	; () banked
  2024  001CF8  51FC               	movf	_first& (0+255),w,b
  2025  001CFA  0100               	movlb	0	; () banked
  2026  001CFC  11FD               	iorwf	(_first+1)& (0+255),w,b
  2027  001CFE  B4D8               	btfsc	status,2,c
  2028  001D00  D018               	goto	l4863
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;sort.c: 40: first = 0;
  2032  001D02  0E00               	movlw	0
  2033  001D04  0100               	movlb	0	; () banked
  2034  001D06  6FFD               	movwf	(_first+1)& (0+255),b
  2035  001D08  0E00               	movlw	0
  2036  001D0A  6FFC               	movwf	_first& (0+255),b
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;sort.c: 41: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2040  001D0C  0E01               	movlw	1
  2041  001D0E  EC81  F014         	call	_lcdInst
  2042  001D12  0E68               	movlw	104
  2043  001D14  0100               	movlb	0	; () banked
  2044  001D16  6F8A               	movwf	??_Loading& (0+255),b
  2045  001D18  0EE4               	movlw	228
  2046  001D1A                     u4587:
  2047  001D1A  2EE8               	decfsz	wreg,f,c
  2048  001D1C  D7FE               	bra	u4587
  2049  001D1E  2F8A               	decfsz	??_Loading& (0+255),f,b
  2050  001D20  D7FC               	bra	u4587
  2051  001D22  F000               	nop	
  2052                           
  2053                           ;sort.c: 42: initSortTimer();
  2054  001D24  EC7F  F00D         	call	_initSortTimer	;wreg free
  2055                           
  2056                           ;sort.c: 45: LATAbits.LATA5 = 1;
  2057  001D28  8A89               	bsf	3977,5,c	;volatile
  2058                           
  2059                           ;sort.c: 48: moveServoCup(Home);
  2060  001D2A  0E00               	movlw	0
  2061  001D2C  ECC8  F00E         	call	_moveServoCup
  2062                           
  2063                           ;sort.c: 50: }
  2064  001D30  0012               	return	
  2065  001D32                     l4863:
  2066                           
  2067                           ;sort.c: 51: else{
  2068                           ;sort.c: 55: if(!f_loadingNewCan){
  2069  001D32  0100               	movlb	0	; () banked
  2070  001D34  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2071  001D36  0100               	movlb	0	; () banked
  2072  001D38  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2073  001D3A  A4D8               	btfss	status,2,c
  2074  001D3C  D016               	goto	l4877
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;sort.c: 59: if(!f_loadingNewCan){
  2078  001D3E  0100               	movlb	0	; () banked
  2079  001D40  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2080  001D42  0100               	movlb	0	; () banked
  2081  001D44  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2082  001D46  B4D8               	btfsc	status,2,c
  2083  001D48  0012               	return	
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;sort.c: 64: else{
  2087                           ;sort.c: 65: count_total++;
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;sort.c: 61: }
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;sort.c: 60: return;
  2096  001D4A  0100               	movlb	0	; () banked
  2097  001D4C  4BDF               	infsnz	_count_total& (0+255),f,b
  2098  001D4E  2BE0               	incf	(_count_total+1)& (0+255),f,b
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;sort.c: 66: if(count_total == 12){
  2102  001D50  0E0C               	movlw	12
  2103  001D52  0100               	movlb	0	; () banked
  2104  001D54  19DF               	xorwf	_count_total& (0+255),w,b
  2105  001D56  0100               	movlb	0	; () banked
  2106  001D58  11E0               	iorwf	(_count_total+1)& (0+255),w,b
  2107  001D5A  A4D8               	btfss	status,2,c
  2108  001D5C  0012               	return	
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;sort.c: 67: f_lastCan = 1;
  2112  001D5E  0E00               	movlw	0
  2113  001D60  0100               	movlb	0	; () banked
  2114  001D62  6FEA               	movwf	(_f_lastCan+1)& (0+255),b
  2115  001D64  0E01               	movlw	1
  2116  001D66  6FE9               	movwf	_f_lastCan& (0+255),b
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;sort.c: 68: }
  2120                           ;sort.c: 69: }
  2121                           ;sort.c: 70: }
  2122                           
  2123                           ; BSR set to: 0
  2124  001D68  0012               	return	
  2125  001D6A                     l4877:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;sort.c: 73: else if(f_ID_receive){
  2129  001D6A  0100               	movlb	0	; () banked
  2130  001D6C  51FA               	movf	_f_ID_receive& (0+255),w,b
  2131  001D6E  0100               	movlb	0	; () banked
  2132  001D70  11FB               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2133  001D72  B4D8               	btfsc	status,2,c
  2134  001D74  0012               	return	
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;sort.c: 74: f_loadingNewCan = 0;
  2138  001D76  0E00               	movlw	0
  2139  001D78  0100               	movlb	0	; () banked
  2140  001D7A  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2141  001D7C  0E00               	movlw	0
  2142  001D7E  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;sort.c: 75: LATAbits.LATA4 = 1;
  2146  001D80  8889               	bsf	3977,4,c	;volatile
  2147                           
  2148                           ;sort.c: 76: f_can_coming_to_ID = 1;
  2149  001D82  0E00               	movlw	0
  2150  001D84  0100               	movlb	0	; () banked
  2151  001D86  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2152  001D88  0E01               	movlw	1
  2153  001D8A  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;sort.c: 79: LATAbits.LATA4 = 0;
  2157  001D8C  9889               	bcf	3977,4,c	;volatile
  2158                           
  2159                           ; BSR set to: 0
  2160                           
  2161                           ; BSR set to: 0
  2162  001D8E  0012               	return	
  2163  001D90                     __end_of_Loading:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           postinc0	equ	0xFEE
  2170                           wreg	equ	0xFE8
  2171                           postdec1	equ	0xFE5
  2172                           fsr1l	equ	0xFE1
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _initSortTimer *****************
  2176 ;; Defined at:
  2177 ;;		line 123 in file "sort.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  i               2    8[BANK0 ] int 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;Total ram usage:        5 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:   10
  2198 ;; This function calls:
  2199 ;;		_getRTC
  2200 ;; This function is called by:
  2201 ;;		_Loading
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text4
  2206  001AFE                     __ptext4:
  2207                           	opt stack 0
  2208  001AFE                     _initSortTimer:
  2209                           	opt stack 18
  2210                           
  2211                           ;sort.c: 126: getRTC();
  2212                           
  2213                           ;incstack = 0
  2214  001AFE  EC57  F00F         	call	_getRTC	;wreg free
  2215                           
  2216                           ;sort.c: 127: for(int i = 0; i < 7; i++){
  2217  001B02  0E00               	movlw	0
  2218  001B04  0100               	movlb	0	; () banked
  2219  001B06  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2220  001B08  0E00               	movlw	0
  2221  001B0A  6F88               	movwf	initSortTimer@i& (0+255),b
  2222  001B0C                     l4537:
  2223                           
  2224                           ; BSR set to: 0
  2225  001B0C  0100               	movlb	0	; () banked
  2226  001B0E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2227  001B10  D008               	goto	l4541
  2228  001B12  0100               	movlb	0	; () banked
  2229  001B14  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2230  001B16  E140               	bnz	l4547
  2231  001B18  0E07               	movlw	7
  2232  001B1A  0100               	movlb	0	; () banked
  2233  001B1C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2234  001B1E  B0D8               	btfsc	status,0,c
  2235  001B20  D03B               	goto	l4547
  2236  001B22                     l4541:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;sort.c: 128: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2240  001B22  0ED4               	movlw	low _time
  2241  001B24  0100               	movlb	0	; () banked
  2242  001B26  2588               	addwf	initSortTimer@i& (0+255),w,b
  2243  001B28  6ED9               	movwf	fsr2l,c
  2244  001B2A  0E00               	movlw	high _time
  2245  001B2C  0100               	movlb	0	; () banked
  2246  001B2E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2247  001B30  6EDA               	movwf	fsr2h,c
  2248  001B32  50DF               	movf	indf2,w,c
  2249  001B34  0100               	movlb	0	; () banked
  2250  001B36  6F85               	movwf	??_initSortTimer& (0+255),b
  2251  001B38  0100               	movlb	0	; () banked
  2252  001B3A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2253  001B3C  0E0F               	movlw	15
  2254  001B3E  1785               	andwf	??_initSortTimer& (0+255),f,b
  2255  001B40  0E0F               	movlw	15
  2256  001B42  0100               	movlb	0	; () banked
  2257  001B44  1785               	andwf	??_initSortTimer& (0+255),f,b
  2258  001B46  0100               	movlb	0	; () banked
  2259  001B48  5185               	movf	??_initSortTimer& (0+255),w,b
  2260  001B4A  0D0A               	mullw	10
  2261  001B4C  0ED4               	movlw	low _time
  2262  001B4E  0100               	movlb	0	; () banked
  2263  001B50  2588               	addwf	initSortTimer@i& (0+255),w,b
  2264  001B52  6ED9               	movwf	fsr2l,c
  2265  001B54  0E00               	movlw	high _time
  2266  001B56  0100               	movlb	0	; () banked
  2267  001B58  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2268  001B5A  6EDA               	movwf	fsr2h,c
  2269  001B5C  50DF               	movf	indf2,w,c
  2270  001B5E  0B0F               	andlw	15
  2271  001B60  0100               	movlb	0	; () banked
  2272  001B62  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2273  001B64  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2274  001B66  50F3               	movf	prodl,w,c
  2275  001B68  0100               	movlb	0	; () banked
  2276  001B6A  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2277  001B6C  50F4               	movf	prodh,w,c
  2278  001B6E  0100               	movlb	0	; () banked
  2279  001B70  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2280  001B72  90D8               	bcf	status,0,c
  2281  001B74  0100               	movlb	0	; () banked
  2282  001B76  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2283  001B78  6ED9               	movwf	fsr2l,c
  2284  001B7A  0100               	movlb	0	; () banked
  2285  001B7C  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2286  001B7E  6EDA               	movwf	fsr2h,c
  2287  001B80  0E00               	movlw	low _startTime
  2288  001B82  26D9               	addwf	fsr2l,f,c
  2289  001B84  0E01               	movlw	high _startTime
  2290  001B86  22DA               	addwfc	fsr2h,f,c
  2291  001B88  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2292  001B8C  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2293                           
  2294                           ; BSR set to: 0
  2295  001B90  0100               	movlb	0	; () banked
  2296  001B92  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2297  001B94  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2298  001B96  D7BA               	goto	l4537
  2299  001B98                     l4547:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;sort.c: 129: }
  2303                           ;sort.c: 132: T0CON = 0b00010111;
  2304  001B98  0E17               	movlw	23
  2305  001B9A  6ED5               	movwf	4053,c	;volatile
  2306                           
  2307                           ;sort.c: 142: TMR0H = 0b10000101;
  2308  001B9C  0E85               	movlw	133
  2309  001B9E  6ED7               	movwf	4055,c	;volatile
  2310                           
  2311                           ;sort.c: 143: TMR0L = 0b11101110;
  2312  001BA0  0EEE               	movlw	238
  2313  001BA2  6ED6               	movwf	4054,c	;volatile
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;sort.c: 145: T0CON = T0CON | 0b10000000;
  2317  001BA4  50D5               	movf	4053,w,c	;volatile
  2318  001BA6  0980               	iorlw	128
  2319  001BA8  6ED5               	movwf	4053,c	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322  001BAA  0012               	return		;funcret
  2323  001BAC                     __end_of_initSortTimer:
  2324                           	opt stack 0
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           indf2	equ	0xFDF
  2336                           postinc2	equ	0xFDE
  2337                           postdec2	equ	0xFDD
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _ID *****************
  2343 ;; Defined at:
  2344 ;;		line 83 in file "sort.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  magnetic        2    7[BANK0 ] int 
  2349 ;;  side_conduct    2    5[BANK0 ] int 
  2350 ;;  top_bottom_c    2    3[BANK0 ] int 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;Total ram usage:        7 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    8
  2367 ;; This function calls:
  2368 ;;		_MAGNETISM_in
  2369 ;;		_moveServoBlock
  2370 ;; This function is called by:
  2371 ;;		_sort
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text5
  2376  001BAC                     __ptext5:
  2377                           	opt stack 0
  2378  001BAC                     _ID:
  2379                           	opt stack 21
  2380                           
  2381                           ;sort.c: 84: if(f_can_coming_to_ID){
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;incstack = 0
  2385  001BAC  0100               	movlb	0	; () banked
  2386  001BAE  51E3               	movf	_f_can_coming_to_ID& (0+255),w,b
  2387  001BB0  0100               	movlb	0	; () banked
  2388  001BB2  11E4               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2389  001BB4  B4D8               	btfsc	status,2,c
  2390  001BB6  0012               	return	
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;sort.c: 89: int side_conductivity = 0;
  2394  001BB8  0E00               	movlw	0
  2395  001BBA  0100               	movlb	0	; () banked
  2396  001BBC  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2397  001BBE  0E00               	movlw	0
  2398  001BC0  6F85               	movwf	ID@side_conductivity& (0+255),b
  2399                           
  2400                           ;sort.c: 90: int magnetic = 0;
  2401  001BC2  0E00               	movlw	0
  2402  001BC4  0100               	movlb	0	; () banked
  2403  001BC6  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2404  001BC8  0E00               	movlw	0
  2405  001BCA  6F87               	movwf	ID@magnetic& (0+255),b
  2406                           
  2407                           ;sort.c: 91: int top_bottom_conductivity = 0;
  2408  001BCC  0E00               	movlw	0
  2409  001BCE  0100               	movlb	0	; () banked
  2410  001BD0  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2411  001BD2  0E00               	movlw	0
  2412  001BD4  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2413                           
  2414                           ;sort.c: 93: side_conductivity = PORTAbits.RA2;
  2415  001BD6  A480               	btfss	3968,2,c	;volatile
  2416  001BD8  D004               	goto	u3420
  2417  001BDA  0100               	movlb	0	; () banked
  2418  001BDC  6B82               	clrf	??_ID& (0+255),b
  2419  001BDE  2B82               	incf	??_ID& (0+255),f,b
  2420  001BE0  D002               	goto	u3428
  2421  001BE2                     u3420:
  2422  001BE2  0100               	movlb	0	; () banked
  2423  001BE4  6B82               	clrf	??_ID& (0+255),b
  2424  001BE6                     u3428:
  2425  001BE6  0100               	movlb	0	; () banked
  2426  001BE8  5182               	movf	??_ID& (0+255),w,b
  2427  001BEA  0100               	movlb	0	; () banked
  2428  001BEC  6F85               	movwf	ID@side_conductivity& (0+255),b
  2429  001BEE  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;sort.c: 94: if(!side_conductivity){
  2433  001BF0  0100               	movlb	0	; () banked
  2434  001BF2  5185               	movf	ID@side_conductivity& (0+255),w,b
  2435  001BF4  0100               	movlb	0	; () banked
  2436  001BF6  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2437  001BF8  A4D8               	btfss	status,2,c
  2438  001BFA  D01B               	goto	l4901
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;sort.c: 95: magnetic = MAGNETISM_in();
  2442  001BFC  EC89  F014         	call	_MAGNETISM_in	;wreg free
  2443  001C00  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2444  001C04  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2445                           
  2446                           ;sort.c: 96: if(!magnetic){
  2447  001C08  0100               	movlb	0	; () banked
  2448  001C0A  5187               	movf	ID@magnetic& (0+255),w,b
  2449  001C0C  0100               	movlb	0	; () banked
  2450  001C0E  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2451  001C10  A4D8               	btfss	status,2,c
  2452  001C12  D00F               	goto	l4901
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;sort.c: 97: LATAbits.LATA3 = 1;
  2456  001C14  8689               	bsf	3977,3,c	;volatile
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;sort.c: 99: top_bottom_conductivity = PORTAbits.RA2;
  2460  001C16  A480               	btfss	3968,2,c	;volatile
  2461  001C18  D004               	goto	u3450
  2462  001C1A  0100               	movlb	0	; () banked
  2463  001C1C  6B82               	clrf	??_ID& (0+255),b
  2464  001C1E  2B82               	incf	??_ID& (0+255),f,b
  2465  001C20  D002               	goto	u3458
  2466  001C22                     u3450:
  2467  001C22  0100               	movlb	0	; () banked
  2468  001C24  6B82               	clrf	??_ID& (0+255),b
  2469  001C26                     u3458:
  2470  001C26  0100               	movlb	0	; () banked
  2471  001C28  5182               	movf	??_ID& (0+255),w,b
  2472  001C2A  0100               	movlb	0	; () banked
  2473  001C2C  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2474  001C2E  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;sort.c: 100: LATAbits.LATA3 = 0;
  2478  001C30  9689               	bcf	3977,3,c	;volatile
  2479  001C32                     l4901:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;sort.c: 101: }
  2483                           ;sort.c: 102: }
  2484                           ;sort.c: 105: moveServoBlock(Lower);
  2485  001C32  0E01               	movlw	1
  2486  001C34  EC6E  F011         	call	_moveServoBlock
  2487                           
  2488                           ;sort.c: 107: f_can_coming_to_distribution = 1;
  2489  001C38  0E00               	movlw	0
  2490  001C3A  0100               	movlb	0	; () banked
  2491  001C3C  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2492  001C3E  0E01               	movlw	1
  2493  001C40  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2494                           
  2495                           ;sort.c: 108: moveServoBlock(Raise);
  2496  001C42  0E00               	movlw	0
  2497  001C44  EC6E  F011         	call	_moveServoBlock
  2498                           
  2499                           ;sort.c: 109: f_can_coming_to_ID = 0;
  2500  001C48  0E00               	movlw	0
  2501  001C4A  0100               	movlb	0	; () banked
  2502  001C4C  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2503  001C4E  0E00               	movlw	0
  2504  001C50  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2505  001C52  0012               	return	
  2506  001C54                     __end_of_ID:
  2507                           	opt stack 0
  2508                           tblptru	equ	0xFF8
  2509                           tblptrh	equ	0xFF7
  2510                           tblptrl	equ	0xFF6
  2511                           tablat	equ	0xFF5
  2512                           prodh	equ	0xFF4
  2513                           prodl	equ	0xFF3
  2514                           postinc0	equ	0xFEE
  2515                           wreg	equ	0xFE8
  2516                           postdec1	equ	0xFE5
  2517                           fsr1l	equ	0xFE1
  2518                           indf2	equ	0xFDF
  2519                           postinc2	equ	0xFDE
  2520                           postdec2	equ	0xFDD
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _moveServoBlock *****************
  2526 ;; Defined at:
  2527 ;;		line 195 in file "sort.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  myPosition      1    wreg     enum E3138
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  myPosition      1    0[BANK0 ] enum E3138
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;Total ram usage:        1 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    7
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_ID
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text6
  2556  0022DC                     __ptext6:
  2557                           	opt stack 0
  2558  0022DC                     _moveServoBlock:
  2559                           	opt stack 21
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;incstack = 0
  2563                           ;moveServoBlock@myPosition stored from wreg
  2564  0022DC  0100               	movlb	0	; () banked
  2565  0022DE  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  2566                           
  2567                           ;sort.c: 198: T3CON = 0b10110000;
  2568  0022E0  0EB0               	movlw	176
  2569  0022E2  6EB1               	movwf	4017,c	;volatile
  2570                           
  2571                           ;sort.c: 200: switch(myPosition){
  2572  0022E4  D011               	goto	l4581
  2573  0022E6                     l4575:
  2574                           
  2575                           ;sort.c: 203: timer3highbits = 0b11111000;
  2576  0022E6  0E00               	movlw	0
  2577  0022E8  6E70               	movwf	_timer3highbits+1,c
  2578  0022EA  0EF8               	movlw	248
  2579  0022EC  6E6F               	movwf	_timer3highbits,c
  2580                           
  2581                           ;sort.c: 204: timer3lowbits = 0b00110000;
  2582  0022EE  0E00               	movlw	0
  2583  0022F0  6E72               	movwf	_timer3lowbits+1,c
  2584  0022F2  0E30               	movlw	48
  2585  0022F4  D007               	goto	L1
  2586  0022F6                     l4577:
  2587                           
  2588                           ;sort.c: 208: timer3highbits = 0b11111100;
  2589  0022F6  0E00               	movlw	0
  2590  0022F8  6E70               	movwf	_timer3highbits+1,c
  2591  0022FA  0EFC               	movlw	252
  2592  0022FC  6E6F               	movwf	_timer3highbits,c
  2593                           
  2594                           ;sort.c: 209: timer3lowbits = 0b00011000;
  2595  0022FE  0E00               	movlw	0
  2596  002300  6E72               	movwf	_timer3lowbits+1,c
  2597  002302  0E18               	movlw	24
  2598  002304                     L1:
  2599  002304  6E71               	movwf	_timer3lowbits,c
  2600                           
  2601                           ;sort.c: 213: }
  2602                           
  2603                           ;sort.c: 212: break;
  2604                           
  2605                           ;sort.c: 211: default:
  2606                           
  2607                           ;sort.c: 210: break;
  2608  002306  D008               	goto	l1071
  2609  002308                     l4581:
  2610  002308  0100               	movlb	0	; () banked
  2611  00230A  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  2612                           
  2613                           ; Switch size 1, requested type "space"
  2614                           ; Number of cases is 2, Range of values is 0 to 1
  2615                           ; switch strategies available:
  2616                           ; Name         Instructions Cycles
  2617                           ; simple_byte            7     4 (average)
  2618                           ;	Chosen strategy is simple_byte
  2619  00230C  0A00               	xorlw	0	; case 0
  2620  00230E  B4D8               	btfsc	status,2,c
  2621  002310  D7EA               	goto	l4575
  2622  002312  0A01               	xorlw	1	; case 1
  2623  002314  B4D8               	btfsc	status,2,c
  2624  002316  D7EF               	goto	l4577
  2625  002318                     l1071:
  2626                           
  2627                           ;sort.c: 215: TMR3H = timer3highbits;
  2628  002318  C06F  FFB3         	movff	_timer3highbits,4019	;volatile
  2629                           
  2630                           ;sort.c: 216: TMR3L = timer3lowbits;
  2631  00231C  C071  FFB2         	movff	_timer3lowbits,4018	;volatile
  2632                           
  2633                           ;sort.c: 217: TMR3ON = 1;
  2634  002320  80B1               	bsf	4017,0,c	;volatile
  2635                           
  2636                           ;sort.c: 218: was_low = 0;
  2637  002322  0E00               	movlw	0
  2638  002324  6E76               	movwf	_was_low+1,c
  2639  002326  0E00               	movlw	0
  2640  002328  6E75               	movwf	_was_low,c
  2641  00232A  0012               	return		;funcret
  2642  00232C                     __end_of_moveServoBlock:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           postdec1	equ	0xFE5
  2653                           fsr1l	equ	0xFE1
  2654                           indf2	equ	0xFDF
  2655                           postinc2	equ	0xFDE
  2656                           postdec2	equ	0xFDD
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _MAGNETISM_in *****************
  2662 ;; Defined at:
  2663 ;;		line 190 in file "sort.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2    0[BANK0 ] int 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        2 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    7
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_ID
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text7
  2692  002912                     __ptext7:
  2693                           	opt stack 0
  2694  002912                     _MAGNETISM_in:
  2695                           	opt stack 21
  2696                           
  2697                           ;sort.c: 192: return 0;
  2698                           
  2699                           ;incstack = 0
  2700  002912  0E00               	movlw	0
  2701  002914  0100               	movlb	0	; () banked
  2702  002916  6F81               	movwf	(?_MAGNETISM_in+1)& (0+255),b
  2703  002918  0E00               	movlw	0
  2704  00291A  6F80               	movwf	?_MAGNETISM_in& (0+255),b
  2705  00291C  0012               	return	
  2706  00291E                     __end_of_MAGNETISM_in:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           postdec1	equ	0xFE5
  2717                           fsr1l	equ	0xFE1
  2718                           indf2	equ	0xFDF
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _Distribution *****************
  2726 ;; Defined at:
  2727 ;;		line 112 in file "sort.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;Total ram usage:        0 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    8
  2748 ;; This function calls:
  2749 ;;		_moveServoCup
  2750 ;; This function is called by:
  2751 ;;		_sort
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text8
  2756  0026C0                     __ptext8:
  2757                           	opt stack 0
  2758  0026C0                     _Distribution:
  2759                           	opt stack 21
  2760                           
  2761                           ;sort.c: 113: if(f_can_coming_to_distribution){
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;incstack = 0
  2765  0026C0  0100               	movlb	0	; () banked
  2766  0026C2  51E5               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2767  0026C4  0100               	movlb	0	; () banked
  2768  0026C6  11E6               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2769  0026C8  B4D8               	btfsc	status,2,c
  2770  0026CA  0012               	return	
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;sort.c: 115: moveServoCup(canType);
  2774  0026CC  5078               	movf	_canType,w,c
  2775  0026CE  ECC8  F00E         	call	_moveServoCup
  2776                           
  2777                           ;sort.c: 117: moveServoCup(Home);
  2778  0026D2  0E00               	movlw	0
  2779  0026D4  ECC8  F00E         	call	_moveServoCup
  2780                           
  2781                           ;sort.c: 118: f_can_coming_to_distribution = 0;
  2782  0026D8  0E00               	movlw	0
  2783  0026DA  0100               	movlb	0	; () banked
  2784  0026DC  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2785  0026DE  0E00               	movlw	0
  2786  0026E0  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;sort.c: 119: f_can_distributed = 1;
  2790  0026E2  0E00               	movlw	0
  2791  0026E4  0100               	movlb	0	; () banked
  2792  0026E6  6FE8               	movwf	(_f_can_distributed+1)& (0+255),b
  2793  0026E8  0E01               	movlw	1
  2794  0026EA  6FE7               	movwf	_f_can_distributed& (0+255),b
  2795  0026EC  0012               	return	
  2796  0026EE                     __end_of_Distribution:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           prodh	equ	0xFF4
  2803                           prodl	equ	0xFF3
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           indf2	equ	0xFDF
  2809                           postinc2	equ	0xFDE
  2810                           postdec2	equ	0xFDD
  2811                           fsr2h	equ	0xFDA
  2812                           fsr2l	equ	0xFD9
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _moveServoCup *****************
  2816 ;; Defined at:
  2817 ;;		line 221 in file "sort.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  myPosition      1    wreg     enum E3131
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  myPosition      1    0[BANK0 ] enum E3131
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;Total ram usage:        1 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    7
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_Loading
  2842 ;;		_Distribution
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text9
  2847  001D90                     __ptext9:
  2848                           	opt stack 0
  2849  001D90                     _moveServoCup:
  2850                           	opt stack 21
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;incstack = 0
  2854                           ;moveServoCup@myPosition stored from wreg
  2855  001D90  0100               	movlb	0	; () banked
  2856  001D92  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2857                           
  2858                           ;sort.c: 225: T1CON = 0b10110000;
  2859  001D94  0EB0               	movlw	176
  2860  001D96  6ECD               	movwf	4045,c	;volatile
  2861                           
  2862                           ;sort.c: 232: switch(myPosition){
  2863  001D98  D029               	goto	l4565
  2864  001D9A                     l4553:
  2865                           
  2866                           ;sort.c: 235: timer1highbits = 0b11111010;
  2867  001D9A  0E00               	movlw	0
  2868  001D9C  6E6C               	movwf	_timer1highbits+1,c
  2869  001D9E  0EFA               	movlw	250
  2870  001DA0  6E6B               	movwf	_timer1highbits,c
  2871                           
  2872                           ;sort.c: 236: timer1lowbits = 0b00100100;
  2873  001DA2  0E00               	movlw	0
  2874  001DA4  6E6E               	movwf	_timer1lowbits+1,c
  2875  001DA6  0E24               	movlw	36
  2876  001DA8  D01F               	goto	L5
  2877  001DAA                     l4555:
  2878                           
  2879                           ;sort.c: 240: timer1highbits = 0b11111100;
  2880  001DAA  0E00               	movlw	0
  2881  001DAC  6E6C               	movwf	_timer1highbits+1,c
  2882  001DAE  0EFC               	movlw	252
  2883  001DB0  6E6B               	movwf	_timer1highbits,c
  2884                           
  2885                           ;sort.c: 241: timer1lowbits = 0b00011000;
  2886  001DB2  0E00               	movlw	0
  2887  001DB4  6E6E               	movwf	_timer1lowbits+1,c
  2888  001DB6  0E18               	movlw	24
  2889  001DB8  D017               	goto	L5
  2890  001DBA                     l4557:
  2891                           
  2892                           ;sort.c: 245: timer1highbits = 0b11111010;
  2893  001DBA  0E00               	movlw	0
  2894  001DBC  6E6C               	movwf	_timer1highbits+1,c
  2895  001DBE  0EFA               	movlw	250
  2896  001DC0  6E6B               	movwf	_timer1highbits,c
  2897                           
  2898                           ;sort.c: 246: timer1lowbits = 0b11001011;
  2899  001DC2  0E00               	movlw	0
  2900  001DC4  6E6E               	movwf	_timer1lowbits+1,c
  2901  001DC6  0ECB               	movlw	203
  2902  001DC8  D00F               	goto	L5
  2903  001DCA                     l4559:
  2904                           
  2905                           ;sort.c: 250: timer1highbits = 0b11111001;
  2906  001DCA  0E00               	movlw	0
  2907  001DCC  6E6C               	movwf	_timer1highbits+1,c
  2908  001DCE  0EF9               	movlw	249
  2909  001DD0  6E6B               	movwf	_timer1highbits,c
  2910                           
  2911                           ;sort.c: 251: timer1lowbits = 0b01111101;
  2912  001DD2  0E00               	movlw	0
  2913  001DD4  6E6E               	movwf	_timer1lowbits+1,c
  2914  001DD6  0E7D               	movlw	125
  2915  001DD8  D007               	goto	L5
  2916  001DDA                     l4561:
  2917                           
  2918                           ;sort.c: 255: timer1highbits = 0b11111000;
  2919  001DDA  0E00               	movlw	0
  2920  001DDC  6E6C               	movwf	_timer1highbits+1,c
  2921  001DDE  0EF8               	movlw	248
  2922  001DE0  6E6B               	movwf	_timer1highbits,c
  2923                           
  2924                           ;sort.c: 256: timer1lowbits = 0b00110000;
  2925  001DE2  0E00               	movlw	0
  2926  001DE4  6E6E               	movwf	_timer1lowbits+1,c
  2927  001DE6  0E30               	movlw	48
  2928  001DE8                     L5:
  2929  001DE8  6E6D               	movwf	_timer1lowbits,c
  2930                           
  2931                           ;sort.c: 260: }
  2932                           
  2933                           ;sort.c: 259: break;
  2934                           
  2935                           ;sort.c: 258: default:
  2936                           
  2937                           ;sort.c: 257: break;
  2938  001DEA  D011               	goto	l1079
  2939  001DEC                     l4565:
  2940  001DEC  0100               	movlb	0	; () banked
  2941  001DEE  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  2942                           
  2943                           ; Switch size 1, requested type "space"
  2944                           ; Number of cases is 5, Range of values is 0 to 4
  2945                           ; switch strategies available:
  2946                           ; Name         Instructions Cycles
  2947                           ; simple_byte           16     9 (average)
  2948                           ;	Chosen strategy is simple_byte
  2949  001DF0  0A00               	xorlw	0	; case 0
  2950  001DF2  B4D8               	btfsc	status,2,c
  2951  001DF4  D7D2               	goto	l4553
  2952  001DF6  0A01               	xorlw	1	; case 1
  2953  001DF8  B4D8               	btfsc	status,2,c
  2954  001DFA  D7D7               	goto	l4555
  2955  001DFC  0A03               	xorlw	3	; case 2
  2956  001DFE  B4D8               	btfsc	status,2,c
  2957  001E00  D7DC               	goto	l4557
  2958  001E02  0A01               	xorlw	1	; case 3
  2959  001E04  B4D8               	btfsc	status,2,c
  2960  001E06  D7E1               	goto	l4559
  2961  001E08  0A07               	xorlw	7	; case 4
  2962  001E0A  B4D8               	btfsc	status,2,c
  2963  001E0C  D7E6               	goto	l4561
  2964  001E0E                     l1079:
  2965                           
  2966                           ;sort.c: 262: TMR1H = timer1highbits;
  2967  001E0E  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  2968                           
  2969                           ;sort.c: 263: TMR1L = timer1lowbits;
  2970  001E12  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  2971                           
  2972                           ;sort.c: 264: TMR1ON = 1;
  2973  001E16  80CD               	bsf	4045,0,c	;volatile
  2974                           
  2975                           ;sort.c: 265: was_low = 0;
  2976  001E18  0E00               	movlw	0
  2977  001E1A  6E76               	movwf	_was_low+1,c
  2978  001E1C  0E00               	movlw	0
  2979  001E1E  6E75               	movwf	_was_low,c
  2980  001E20  0012               	return		;funcret
  2981  001E22                     __end_of_moveServoCup:
  2982                           	opt stack 0
  2983                           tblptru	equ	0xFF8
  2984                           tblptrh	equ	0xFF7
  2985                           tblptrl	equ	0xFF6
  2986                           tablat	equ	0xFF5
  2987                           prodh	equ	0xFF4
  2988                           prodl	equ	0xFF3
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           postdec1	equ	0xFE5
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _machineConfig *****************
  3001 ;; Defined at:
  3002 ;;		line 13 in file "MachineConfig.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;Total ram usage:        0 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    7
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text10
  3031  00232C                     __ptext10:
  3032                           	opt stack 0
  3033  00232C                     _machineConfig:
  3034                           	opt stack 23
  3035                           
  3036                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  3037                           
  3038                           ;incstack = 0
  3039  00232C  0EF0               	movlw	240
  3040  00232E  6ED3               	movwf	4051,c	;volatile
  3041                           
  3042                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  3043  002330  8C9B               	bsf	3995,6,c	;volatile
  3044                           
  3045                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  3046  002332  0E47               	movlw	71
  3047  002334  6E92               	movwf	3986,c	;volatile
  3048                           
  3049                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  3050  002336  0EF2               	movlw	242
  3051  002338  6E93               	movwf	3987,c	;volatile
  3052                           
  3053                           ;MachineConfig.c: 25: TRISC = 0x00;
  3054  00233A  0E00               	movlw	0
  3055  00233C  6E94               	movwf	3988,c	;volatile
  3056                           
  3057                           ;MachineConfig.c: 29: TRISD = 0x00;
  3058  00233E  0E00               	movlw	0
  3059  002340  6E95               	movwf	3989,c	;volatile
  3060                           
  3061                           ;MachineConfig.c: 32: TRISE = 0x00;
  3062  002342  0E00               	movlw	0
  3063  002344  6E96               	movwf	3990,c	;volatile
  3064                           
  3065                           ;MachineConfig.c: 35: LATA = 0x00;
  3066  002346  0E00               	movlw	0
  3067  002348  6E89               	movwf	3977,c	;volatile
  3068                           
  3069                           ;MachineConfig.c: 36: LATB = 0x00;
  3070  00234A  0E00               	movlw	0
  3071  00234C  6E8A               	movwf	3978,c	;volatile
  3072                           
  3073                           ;MachineConfig.c: 37: LATC = 0x00;
  3074  00234E  0E00               	movlw	0
  3075  002350  6E8B               	movwf	3979,c	;volatile
  3076                           
  3077                           ;MachineConfig.c: 38: LATD = 0x00;
  3078  002352  0E00               	movlw	0
  3079  002354  6E8C               	movwf	3980,c	;volatile
  3080                           
  3081                           ;MachineConfig.c: 39: LATE = 0x00;
  3082  002356  0E00               	movlw	0
  3083  002358  6E8D               	movwf	3981,c	;volatile
  3084                           
  3085                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  3086  00235A  0E00               	movlw	0
  3087  00235C  6EC2               	movwf	4034,c	;volatile
  3088                           
  3089                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  3090  00235E  0E0D               	movlw	13
  3091  002360  6EC1               	movwf	4033,c	;volatile
  3092                           
  3093                           ;MachineConfig.c: 46: CVRCON = 0x00;
  3094  002362  0E00               	movlw	0
  3095  002364  6EB5               	movwf	4021,c	;volatile
  3096                           
  3097                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  3098  002366  96B4               	bcf	4020,3,c	;volatile
  3099                           
  3100                           ;MachineConfig.c: 48: ADFM = 1;
  3101  002368  8EC0               	bsf	4032,7,c	;volatile
  3102                           
  3103                           ;MachineConfig.c: 51: INT1IE = 1;
  3104  00236A  86F0               	bsf	intcon3,3,c	;volatile
  3105                           
  3106                           ;MachineConfig.c: 52: TMR0IE = 1;
  3107  00236C  8AF2               	bsf	intcon,5,c	;volatile
  3108                           
  3109                           ;MachineConfig.c: 53: TMR1IE = 1;
  3110  00236E  809D               	bsf	3997,0,c	;volatile
  3111                           
  3112                           ;MachineConfig.c: 54: TMR2IE = 1;
  3113  002370  829D               	bsf	3997,1,c	;volatile
  3114                           
  3115                           ;MachineConfig.c: 55: TMR3IE = 1;
  3116  002372  82A0               	bsf	4000,1,c	;volatile
  3117                           
  3118                           ;MachineConfig.c: 56: PEIE = 1;
  3119  002374  8CF2               	bsf	intcon,6,c	;volatile
  3120                           
  3121                           ;MachineConfig.c: 57: (INTCONbits.GIE = 0);
  3122  002376  9EF2               	bcf	intcon,7,c	;volatile
  3123  002378  0012               	return		;funcret
  3124  00237A                     __end_of_machineConfig:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           intcon3	equ	0xFF0
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postdec1	equ	0xFE5
  3137                           fsr1l	equ	0xFE1
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _initUI *****************
  3146 ;; Defined at:
  3147 ;;		line 60 in file "UI.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        0 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:   12
  3168 ;; This function calls:
  3169 ;;		_change_state_to_menu_start
  3170 ;;		_loadRTC
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text11
  3177  002876                     __ptext11:
  3178                           	opt stack 0
  3179  002876                     _initUI:
  3180                           	opt stack 18
  3181                           
  3182                           ;UI.c: 61: (INTCONbits.GIE = 1);
  3183                           
  3184                           ;incstack = 0
  3185  002876  8EF2               	bsf	intcon,7,c	;volatile
  3186                           
  3187                           ;UI.c: 62: machine_state = UI_state;
  3188  002878  0E00               	movlw	0
  3189  00287A  0100               	movlb	0	; () banked
  3190  00287C  6FF5               	movwf	_machine_state& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;UI.c: 64: loadRTC();
  3194  00287E  EC11  F00F         	call	_loadRTC	;wreg free
  3195                           
  3196                           ;UI.c: 66: change_state_to_menu_start();
  3197  002882  ECA5  F013         	call	_change_state_to_menu_start	;wreg free
  3198                           
  3199                           ;UI.c: 67: firstboot = 1;
  3200  002886  0E00               	movlw	0
  3201  002888  6E68               	movwf	_firstboot+1,c
  3202  00288A  0E01               	movlw	1
  3203  00288C  6E67               	movwf	_firstboot,c
  3204  00288E  0012               	return		;funcret
  3205  002890                     __end_of_initUI:
  3206                           	opt stack 0
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           prodh	equ	0xFF4
  3212                           prodl	equ	0xFF3
  3213                           intcon	equ	0xFF2
  3214                           intcon3	equ	0xFF0
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postdec1	equ	0xFE5
  3218                           fsr1l	equ	0xFE1
  3219                           indf2	equ	0xFDF
  3220                           postinc2	equ	0xFDE
  3221                           postdec2	equ	0xFDD
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function _loadRTC *****************
  3227 ;; Defined at:
  3228 ;;		line 26 in file "RTC.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  i               2   22[BANK0 ] int 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;Total ram usage:        3 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    9
  3249 ;; This function calls:
  3250 ;;		_I2C_Master_Init
  3251 ;;		_I2C_Master_Start
  3252 ;;		_I2C_Master_Stop
  3253 ;;		_I2C_Master_Write
  3254 ;; This function is called by:
  3255 ;;		_initUI
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text12
  3260  001E22                     __ptext12:
  3261                           	opt stack 0
  3262  001E22                     _loadRTC:
  3263                           	opt stack 20
  3264                           
  3265                           ;RTC.c: 28: I2C_Master_Init(10000);
  3266                           
  3267                           ;incstack = 0
  3268  001E22  0E10               	movlw	16
  3269  001E24  0100               	movlb	0	; () banked
  3270  001E26  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3271  001E28  0E27               	movlw	39
  3272  001E2A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3273  001E2C  0E00               	movlw	0
  3274  001E2E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3275  001E30  0E00               	movlw	0
  3276  001E32  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3277  001E34  ECEA  F010         	call	_I2C_Master_Init	;wreg free
  3278                           
  3279                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3280  001E38  9EF2               	bcf	intcon,7,c	;volatile
  3281                           
  3282                           ;RTC.c: 32: I2C_Master_Start();
  3283  001E3A  ECAD  F014         	call	_I2C_Master_Start	;wreg free
  3284                           
  3285                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3286  001E3E  0E00               	movlw	0
  3287  001E40  0100               	movlb	0	; () banked
  3288  001E42  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3289  001E44  0ED0               	movlw	208
  3290  001E46  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3291  001E48  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  3292                           
  3293                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3294  001E4C  0E00               	movlw	0
  3295  001E4E  0100               	movlb	0	; () banked
  3296  001E50  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3297  001E52  0E00               	movlw	0
  3298  001E54  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3299  001E56  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  3300                           
  3301                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3302  001E5A  0E00               	movlw	0
  3303  001E5C  0100               	movlb	0	; () banked
  3304  001E5E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3305  001E60  0E00               	movlw	0
  3306  001E62  6F96               	movwf	loadRTC@i& (0+255),b
  3307  001E64                     l4663:
  3308                           
  3309                           ; BSR set to: 0
  3310  001E64  0100               	movlb	0	; () banked
  3311  001E66  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3312  001E68  D008               	goto	l4667
  3313  001E6A  0100               	movlb	0	; () banked
  3314  001E6C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3315  001E6E  E11B               	bnz	l4673
  3316  001E70  0E07               	movlw	7
  3317  001E72  0100               	movlb	0	; () banked
  3318  001E74  5D96               	subwf	loadRTC@i& (0+255),w,b
  3319  001E76  B0D8               	btfsc	status,0,c
  3320  001E78  D016               	goto	l4673
  3321  001E7A                     l4667:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3325  001E7A  0ED4               	movlw	low _time
  3326  001E7C  0100               	movlb	0	; () banked
  3327  001E7E  2596               	addwf	loadRTC@i& (0+255),w,b
  3328  001E80  6ED9               	movwf	fsr2l,c
  3329  001E82  0E00               	movlw	high _time
  3330  001E84  0100               	movlb	0	; () banked
  3331  001E86  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3332  001E88  6EDA               	movwf	fsr2h,c
  3333  001E8A  50DF               	movf	indf2,w,c
  3334  001E8C  0100               	movlb	0	; () banked
  3335  001E8E  6F95               	movwf	??_loadRTC& (0+255),b
  3336  001E90  0100               	movlb	0	; () banked
  3337  001E92  5195               	movf	??_loadRTC& (0+255),w,b
  3338  001E94  0100               	movlb	0	; () banked
  3339  001E96  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3340  001E98  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3341  001E9A  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  3342  001E9E  0100               	movlb	0	; () banked
  3343  001EA0  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3344  001EA2  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3345  001EA4  D7DF               	goto	l4663
  3346  001EA6                     l4673:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;RTC.c: 37: }
  3350                           ;RTC.c: 38: I2C_Master_Stop();
  3351  001EA6  ECA9  F014         	call	_I2C_Master_Stop	;wreg free
  3352                           
  3353                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3354  001EAA  8EF2               	bsf	intcon,7,c	;volatile
  3355  001EAC  0012               	return		;funcret
  3356  001EAE                     __end_of_loadRTC:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon3	equ	0xFF0
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postdec1	equ	0xFE5
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _I2C_Master_Init *****************
  3378 ;; Defined at:
  3379 ;;		line 13 in file "I2C.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  c               4   13[BANK0 ] const unsigned long 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3393 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;Total ram usage:        8 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    8
  3400 ;; This function calls:
  3401 ;;		___lldiv
  3402 ;; This function is called by:
  3403 ;;		_loadRTC
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text13
  3408  0021D4                     __ptext13:
  3409                           	opt stack 0
  3410  0021D4                     _I2C_Master_Init:
  3411                           	opt stack 20
  3412                           
  3413                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3414                           
  3415                           ;incstack = 0
  3416  0021D4  0E00               	movlw	0
  3417  0021D6  6EC7               	movwf	4039,c	;volatile
  3418                           
  3419                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3420  0021D8  0E28               	movlw	40
  3421  0021DA  6EC6               	movwf	4038,c	;volatile
  3422                           
  3423                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3424  0021DC  0E00               	movlw	0
  3425  0021DE  6EC5               	movwf	4037,c	;volatile
  3426                           
  3427                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3428  0021E0  0E00               	movlw	0
  3429  0021E2  0100               	movlb	0	; () banked
  3430  0021E4  6F80               	movwf	___lldiv@dividend& (0+255),b
  3431  0021E6  0E48               	movlw	72
  3432  0021E8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3433  0021EA  0EE8               	movlw	232
  3434  0021EC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3435  0021EE  0E01               	movlw	1
  3436  0021F0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3437  0021F2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3438  0021F6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3439  0021FA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3440  0021FE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3441  002202  0E02               	movlw	2
  3442  002204                     u3165:
  3443  002204  90D8               	bcf	status,0,c
  3444  002206  0100               	movlb	0	; () banked
  3445  002208  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3446  00220A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3447  00220C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3448  00220E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3449  002210  2EE8               	decfsz	wreg,f,c
  3450  002212  D7F8               	goto	u3165
  3451  002214  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3452  002218  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3453  00221C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3454  002220  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3455  002224  EC21  F00D         	call	___lldiv	;wreg free
  3456  002228  0100               	movlb	0	; () banked
  3457  00222A  0580               	decf	?___lldiv& (0+255),w,b
  3458  00222C  6EC8               	movwf	4040,c	;volatile
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;I2C.c: 20: TRISC3 = 1;
  3462  00222E  8694               	bsf	3988,3,c	;volatile
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;I2C.c: 21: TRISC4 = 1;
  3466  002230  8894               	bsf	3988,4,c	;volatile
  3467                           
  3468                           ; BSR set to: 0
  3469  002232  0012               	return		;funcret
  3470  002234                     __end_of_I2C_Master_Init:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           intcon3	equ	0xFF0
  3480                           postinc0	equ	0xFEE
  3481                           wreg	equ	0xFE8
  3482                           postdec1	equ	0xFE5
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function ___lldiv *****************
  3492 ;; Defined at:
  3493 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  dividend        4    0[BANK0 ] unsigned long 
  3496 ;;  divisor         4    4[BANK0 ] unsigned long 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  quotient        4    8[BANK0 ] unsigned long 
  3499 ;;  counter         1   12[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  4    0[BANK0 ] unsigned long 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:       13 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    7
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_I2C_Master_Init
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text14
  3524  001A42                     __ptext14:
  3525                           	opt stack 0
  3526  001A42                     ___lldiv:
  3527                           	opt stack 20
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;incstack = 0
  3531  001A42  0E00               	movlw	0
  3532  001A44  0100               	movlb	0	; () banked
  3533  001A46  6F88               	movwf	___lldiv@quotient& (0+255),b
  3534  001A48  0E00               	movlw	0
  3535  001A4A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3536  001A4C  0E00               	movlw	0
  3537  001A4E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3538  001A50  0E00               	movlw	0
  3539  001A52  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3540                           
  3541                           ; BSR set to: 0
  3542  001A54  0100               	movlb	0	; () banked
  3543  001A56  5184               	movf	___lldiv@divisor& (0+255),w,b
  3544  001A58  0100               	movlb	0	; () banked
  3545  001A5A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3546  001A5C  0100               	movlb	0	; () banked
  3547  001A5E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3548  001A60  0100               	movlb	0	; () banked
  3549  001A62  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3550  001A64  B4D8               	btfsc	status,2,c
  3551  001A66  D042               	goto	l1599
  3552                           
  3553                           ; BSR set to: 0
  3554  001A68  0E01               	movlw	1
  3555  001A6A  0100               	movlb	0	; () banked
  3556  001A6C  6F8C               	movwf	___lldiv@counter& (0+255),b
  3557  001A6E  D008               	goto	l4225
  3558  001A70                     l4223:
  3559                           
  3560                           ; BSR set to: 0
  3561  001A70  0100               	movlb	0	; () banked
  3562  001A72  90D8               	bcf	status,0,c
  3563  001A74  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3564  001A76  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3565  001A78  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3566  001A7A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3567  001A7C  0100               	movlb	0	; () banked
  3568  001A7E  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3569  001A80                     l4225:
  3570                           
  3571                           ; BSR set to: 0
  3572  001A80  0100               	movlb	0	; () banked
  3573  001A82  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3574  001A84  D7F5               	goto	l4223
  3575  001A86                     l4227:
  3576                           
  3577                           ; BSR set to: 0
  3578  001A86  0100               	movlb	0	; () banked
  3579  001A88  90D8               	bcf	status,0,c
  3580  001A8A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3581  001A8C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3582  001A8E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3583  001A90  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 0
  3586  001A92  0100               	movlb	0	; () banked
  3587  001A94  5184               	movf	___lldiv@divisor& (0+255),w,b
  3588  001A96  0100               	movlb	0	; () banked
  3589  001A98  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3590  001A9A  0100               	movlb	0	; () banked
  3591  001A9C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3592  001A9E  0100               	movlb	0	; () banked
  3593  001AA0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3594  001AA2  0100               	movlb	0	; () banked
  3595  001AA4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3596  001AA6  0100               	movlb	0	; () banked
  3597  001AA8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3598  001AAA  0100               	movlb	0	; () banked
  3599  001AAC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3600  001AAE  0100               	movlb	0	; () banked
  3601  001AB0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3602  001AB2  A0D8               	btfss	status,0,c
  3603  001AB4  D012               	goto	l4235
  3604                           
  3605                           ; BSR set to: 0
  3606  001AB6  0100               	movlb	0	; () banked
  3607  001AB8  5184               	movf	___lldiv@divisor& (0+255),w,b
  3608  001ABA  0100               	movlb	0	; () banked
  3609  001ABC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3610  001ABE  0100               	movlb	0	; () banked
  3611  001AC0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3612  001AC2  0100               	movlb	0	; () banked
  3613  001AC4  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3614  001AC6  0100               	movlb	0	; () banked
  3615  001AC8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3616  001ACA  0100               	movlb	0	; () banked
  3617  001ACC  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3618  001ACE  0100               	movlb	0	; () banked
  3619  001AD0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3620  001AD2  0100               	movlb	0	; () banked
  3621  001AD4  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3622                           
  3623                           ; BSR set to: 0
  3624  001AD6  0100               	movlb	0	; () banked
  3625  001AD8  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3626  001ADA                     l4235:
  3627                           
  3628                           ; BSR set to: 0
  3629  001ADA  0100               	movlb	0	; () banked
  3630  001ADC  90D8               	bcf	status,0,c
  3631  001ADE  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3632  001AE0  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3633  001AE2  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3634  001AE4  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3635                           
  3636                           ; BSR set to: 0
  3637  001AE6  0100               	movlb	0	; () banked
  3638  001AE8  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3639  001AEA  D7CD               	goto	l4227
  3640  001AEC                     l1599:
  3641                           
  3642                           ; BSR set to: 0
  3643  001AEC  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3644  001AF0  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3645  001AF4  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3646  001AF8  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3647                           
  3648                           ; BSR set to: 0
  3649  001AFC  0012               	return		;funcret
  3650  001AFE                     __end_of___lldiv:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           intcon3	equ	0xFF0
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postdec1	equ	0xFE5
  3663                           fsr1l	equ	0xFE1
  3664                           indf2	equ	0xFDF
  3665                           postinc2	equ	0xFDE
  3666                           postdec2	equ	0xFDD
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _change_state_to_menu_start *****************
  3672 ;; Defined at:
  3673 ;;		line 415 in file "UI.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:   11
  3694 ;; This function calls:
  3695 ;;		_lcdInst
  3696 ;;		_printRTC
  3697 ;;		_printf
  3698 ;; This function is called by:
  3699 ;;		_initUI
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text15
  3704  00274A                     __ptext15:
  3705                           	opt stack 0
  3706  00274A                     _change_state_to_menu_start:
  3707                           	opt stack 18
  3708                           
  3709                           ;UI.c: 416: cur_state = 0;
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;incstack = 0
  3713  00274A  0E00               	movlw	0
  3714  00274C  0100               	movlb	0	; () banked
  3715  00274E  6FE2               	movwf	(_cur_state+1)& (0+255),b
  3716  002750  0E00               	movlw	0
  3717  002752  6FE1               	movwf	_cur_state& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;UI.c: 418: lcdInst(0b10000000);;
  3721  002754  0E80               	movlw	128
  3722  002756  EC81  F014         	call	_lcdInst
  3723                           
  3724                           ;UI.c: 419: printRTC();
  3725  00275A  EC63  F006         	call	_printRTC	;wreg free
  3726                           
  3727                           ;UI.c: 420: lcdInst(0b11000000);;
  3728  00275E  0EC0               	movlw	192
  3729  002760  EC81  F014         	call	_lcdInst
  3730                           
  3731                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  3732  002764  0E93               	movlw	low STR_15
  3733  002766  0100               	movlb	0	; () banked
  3734  002768  6F8E               	movwf	printf@f& (0+255),b
  3735  00276A  0EFF               	movlw	high STR_15
  3736  00276C  0100               	movlb	0	; () banked
  3737  00276E  6F8F               	movwf	(printf@f+1)& (0+255),b
  3738  002770  ECBB  F002         	call	_printf	;wreg free
  3739  002774  0012               	return		;funcret
  3740  002776                     __end_of_change_state_to_menu_start:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           intcon3	equ	0xFF0
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           postdec1	equ	0xFE5
  3753                           fsr1l	equ	0xFE1
  3754                           indf2	equ	0xFDF
  3755                           postinc2	equ	0xFDE
  3756                           postdec2	equ	0xFDD
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _initTime *****************
  3762 ;; Defined at:
  3763 ;;		line 15 in file "RTC.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  s               1    wreg     unsigned char 
  3766 ;;  m               1    0[BANK0 ] unsigned char 
  3767 ;;  h               1    1[BANK0 ] unsigned char 
  3768 ;;  w               1    2[BANK0 ] unsigned char 
  3769 ;;  DD              1    3[BANK0 ] unsigned char 
  3770 ;;  MM              1    4[BANK0 ] unsigned char 
  3771 ;;  YY              1    5[BANK0 ] unsigned char 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  s               1    6[BANK0 ] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3783 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;Total ram usage:        7 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    7
  3790 ;; This function calls:
  3791 ;;		Nothing
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text16
  3798  002836                     __ptext16:
  3799                           	opt stack 0
  3800  002836                     _initTime:
  3801                           	opt stack 23
  3802                           
  3803                           ;incstack = 0
  3804                           ;initTime@s stored from wreg
  3805  002836  0100               	movlb	0	; () banked
  3806  002838  6F86               	movwf	initTime@s& (0+255),b
  3807                           
  3808                           ;RTC.c: 17: time[0] = s;
  3809  00283A  C086  F0D4         	movff	initTime@s,_time
  3810                           
  3811                           ;RTC.c: 18: time[1] = m;
  3812  00283E  C080  F0D5         	movff	initTime@m,_time+1
  3813                           
  3814                           ;RTC.c: 19: time[2] = h;
  3815  002842  C081  F0D6         	movff	initTime@h,_time+2
  3816                           
  3817                           ;RTC.c: 20: time[3] = w;
  3818  002846  C082  F0D7         	movff	initTime@w,_time+3
  3819                           
  3820                           ;RTC.c: 21: time[4] = DD;
  3821  00284A  C083  F0D8         	movff	initTime@DD,_time+4
  3822                           
  3823                           ;RTC.c: 22: time[5] = MM;
  3824  00284E  C084  F0D9         	movff	initTime@MM,_time+5
  3825                           
  3826                           ;RTC.c: 23: time[6] = YY;
  3827  002852  C085  F0DA         	movff	initTime@YY,_time+6
  3828  002856  0012               	return		;funcret
  3829  002858                     __end_of_initTime:
  3830                           	opt stack 0
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           intcon3	equ	0xFF0
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           postdec1	equ	0xFE5
  3842                           fsr1l	equ	0xFE1
  3843                           indf2	equ	0xFDF
  3844                           postinc2	equ	0xFDE
  3845                           postdec2	equ	0xFDD
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _initLCD *****************
  3851 ;; Defined at:
  3852 ;;		line 46 in file "lcd.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:        1 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    9
  3873 ;; This function calls:
  3874 ;;		_lcdInst
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text17
  3881  00237A                     __ptext17:
  3882                           	opt stack 0
  3883  00237A                     _initLCD:
  3884                           	opt stack 21
  3885                           
  3886                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3887                           
  3888                           ;incstack = 0
  3889  00237A  0E9C               	movlw	156
  3890  00237C  0100               	movlb	0	; () banked
  3891  00237E  6F83               	movwf	??_initLCD& (0+255),b
  3892  002380  0ED7               	movlw	215
  3893  002382                     u4597:
  3894  002382  2EE8               	decfsz	wreg,f,c
  3895  002384  D7FE               	bra	u4597
  3896  002386  2F83               	decfsz	??_initLCD& (0+255),f,b
  3897  002388  D7FC               	bra	u4597
  3898                           
  3899                           ;lcd.c: 48: lcdInst(0b00110011);
  3900  00238A  0E33               	movlw	51
  3901  00238C  EC81  F014         	call	_lcdInst
  3902                           
  3903                           ;lcd.c: 49: lcdInst(0b00110010);
  3904  002390  0E32               	movlw	50
  3905  002392  EC81  F014         	call	_lcdInst
  3906                           
  3907                           ;lcd.c: 51: lcdInst(0b00101000);
  3908  002396  0E28               	movlw	40
  3909  002398  EC81  F014         	call	_lcdInst
  3910                           
  3911                           ;lcd.c: 52: lcdInst(0b00001100);
  3912  00239C  0E0C               	movlw	12
  3913  00239E  EC81  F014         	call	_lcdInst
  3914                           
  3915                           ;lcd.c: 53: lcdInst(0b00000110);
  3916  0023A2  0E06               	movlw	6
  3917  0023A4  EC81  F014         	call	_lcdInst
  3918                           
  3919                           ;lcd.c: 54: lcdInst(0b00000001);
  3920  0023A8  0E01               	movlw	1
  3921  0023AA  EC81  F014         	call	_lcdInst
  3922                           
  3923                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3924  0023AE  0E9C               	movlw	156
  3925  0023B0  0100               	movlb	0	; () banked
  3926  0023B2  6F83               	movwf	??_initLCD& (0+255),b
  3927  0023B4  0ED7               	movlw	215
  3928  0023B6                     u4607:
  3929  0023B6  2EE8               	decfsz	wreg,f,c
  3930  0023B8  D7FE               	bra	u4607
  3931  0023BA  2F83               	decfsz	??_initLCD& (0+255),f,b
  3932  0023BC  D7FC               	bra	u4607
  3933  0023BE  0012               	return		;funcret
  3934  0023C0                     __end_of_initLCD:
  3935                           	opt stack 0
  3936                           tblptru	equ	0xFF8
  3937                           tblptrh	equ	0xFF7
  3938                           tblptrl	equ	0xFF6
  3939                           tablat	equ	0xFF5
  3940                           prodh	equ	0xFF4
  3941                           prodl	equ	0xFF3
  3942                           intcon	equ	0xFF2
  3943                           intcon3	equ	0xFF0
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           fsr1l	equ	0xFE1
  3948                           indf2	equ	0xFDF
  3949                           postinc2	equ	0xFDE
  3950                           postdec2	equ	0xFDD
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function _UI *****************
  3956 ;; Defined at:
  3957 ;;		line 71 in file "UI.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;		None
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  i               1   83[BANK0 ] unsigned char 
  3962 ;;  i               1   82[BANK0 ] unsigned char 
  3963 ;;  i               1   81[BANK0 ] unsigned char 
  3964 ;;  i               1   80[BANK0 ] unsigned char 
  3965 ;;  i               1   79[BANK0 ] unsigned char 
  3966 ;;  i               1   78[BANK0 ] unsigned char 
  3967 ;;  i               1   77[BANK0 ] unsigned char 
  3968 ;;  i               1   76[BANK0 ] unsigned char 
  3969 ;;  i               1   75[BANK0 ] unsigned char 
  3970 ;;  i               1   74[BANK0 ] unsigned char 
  3971 ;;  i               1   73[BANK0 ] unsigned char 
  3972 ;;  i               1   72[BANK0 ] unsigned char 
  3973 ;;  i               1   71[BANK0 ] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;Total ram usage:       16 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:   11
  3990 ;; This function calls:
  3991 ;;		___awdiv
  3992 ;;		___awmod
  3993 ;;		_change_state_to_menu_12
  3994 ;;		_change_state_to_menu_22
  3995 ;;		_lcdInst
  3996 ;;		_printRTC
  3997 ;;		_printf
  3998 ;; This function is called by:
  3999 ;;		_main
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text18
  4004  000012                     __ptext18:
  4005                           	opt stack 0
  4006  000012                     _UI:
  4007                           	opt stack 19
  4008                           
  4009                           ;UI.c: 72: if(machine_state == DoneSorting_state){
  4010                           
  4011                           ;incstack = 0
  4012  000012  0E02               	movlw	2
  4013  000014  0100               	movlb	0	; () banked
  4014  000016  19F5               	xorwf	_machine_state& (0+255),w,b
  4015  000018  A4D8               	btfss	status,2,c
  4016  00001A  D071               	goto	l5041
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;UI.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4020  00001C  0E01               	movlw	1
  4021  00001E  EC81  F014         	call	_lcdInst
  4022  000022  0E68               	movlw	104
  4023  000024  0100               	movlb	0	; () banked
  4024  000026  6FC4               	movwf	??_UI& (0+255),b
  4025  000028  0EE4               	movlw	228
  4026  00002A                     u4617:
  4027  00002A  2EE8               	decfsz	wreg,f,c
  4028  00002C  D7FE               	bra	u4617
  4029  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4030  000030  D7FC               	bra	u4617
  4031  000032  F000               	nop	
  4032                           
  4033                           ;UI.c: 74: lcdInst(0b10000000);;
  4034  000034  0E80               	movlw	128
  4035  000036  EC81  F014         	call	_lcdInst
  4036                           
  4037                           ;UI.c: 75: printf("!SORT CONCLUDED!");
  4038  00003A  0EB6               	movlw	low STR_1
  4039  00003C  0100               	movlb	0	; () banked
  4040  00003E  6F8E               	movwf	printf@f& (0+255),b
  4041  000040  0EFE               	movlw	high STR_1
  4042  000042  0100               	movlb	0	; () banked
  4043  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4044  000046  ECBB  F002         	call	_printf	;wreg free
  4045                           
  4046                           ;UI.c: 76: lcdInst(0b11000000);;
  4047  00004A  0EC0               	movlw	192
  4048  00004C  EC81  F014         	call	_lcdInst
  4049                           
  4050                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4051  000050  0E0E               	movlw	14
  4052  000052  0100               	movlb	0	; () banked
  4053  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4054  000056  0E10               	movlw	16
  4055  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4056  00005A  C0F3  F080         	movff	_total_time,___awmod@dividend
  4057  00005E  C0F4  F081         	movff	_total_time+1,___awmod@dividend+1
  4058  000062  EC2A  F00E         	call	___awmod	;wreg free
  4059  000066  C080  F0C5         	movff	?___awmod,_UI$2068
  4060  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2068+1
  4061                           
  4062                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4063  00006E  0EE4               	movlw	low STR_2
  4064  000070  0100               	movlb	0	; () banked
  4065  000072  6F8E               	movwf	printf@f& (0+255),b
  4066  000074  0EFD               	movlw	high STR_2
  4067  000076  0100               	movlb	0	; () banked
  4068  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4069  00007A  0E00               	movlw	0
  4070  00007C  0100               	movlb	0	; () banked
  4071  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4072  000080  0E00               	movlw	0
  4073  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4074  000084  0E0E               	movlw	14
  4075  000086  0100               	movlb	0	; () banked
  4076  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4077  00008A  0E10               	movlw	16
  4078  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4079  00008E  C0F3  F080         	movff	_total_time,___awmod@dividend
  4080  000092  C0F4  F081         	movff	_total_time+1,___awmod@dividend+1
  4081  000096  EC2A  F00E         	call	___awmod	;wreg free
  4082  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4083  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4084  0000A2  0E00               	movlw	0
  4085  0000A4  0100               	movlb	0	; () banked
  4086  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4087  0000A8  0E3C               	movlw	60
  4088  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4089  0000AC  ECC2  F00C         	call	___awdiv	;wreg free
  4090  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4091  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4092  0000B8  C0C5  F080         	movff	_UI$2068,___awmod@dividend
  4093  0000BC  C0C6  F081         	movff	_UI$2068+1,___awmod@dividend+1
  4094  0000C0  0E00               	movlw	0
  4095  0000C2  0100               	movlb	0	; () banked
  4096  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4097  0000C6  0E3C               	movlw	60
  4098  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4099  0000CA  EC2A  F00E         	call	___awmod	;wreg free
  4100  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4101  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4102  0000D6  ECBB  F002         	call	_printf	;wreg free
  4103                           
  4104                           ;UI.c: 78: machine_state = UI_state;
  4105  0000DA  0E00               	movlw	0
  4106  0000DC  0100               	movlb	0	; () banked
  4107  0000DE  6FF5               	movwf	_machine_state& (0+255),b
  4108  0000E0                     l343:
  4109  0000E0  A281               	btfss	3969,1,c	;volatile
  4110  0000E2  D7FE               	goto	l343
  4111                           
  4112                           ;UI.c: 81: }
  4113                           ;UI.c: 82: if(cur_state==12){
  4114  0000E4  0E0C               	movlw	12
  4115  0000E6  0100               	movlb	0	; () banked
  4116  0000E8  19E1               	xorwf	_cur_state& (0+255),w,b
  4117  0000EA  0100               	movlb	0	; () banked
  4118  0000EC  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4119  0000EE  A4D8               	btfss	status,2,c
  4120  0000F0  D003               	goto	l5039
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;UI.c: 83: change_state_to_menu_12();
  4124  0000F2  EC1D  F012         	call	_change_state_to_menu_12	;wreg free
  4125                           
  4126                           ;UI.c: 84: }
  4127  0000F6  D238               	goto	l5297
  4128  0000F8                     l5039:
  4129                           
  4130                           ;UI.c: 85: else{
  4131                           ;UI.c: 86: change_state_to_menu_22();
  4132  0000F8  EC01  F012         	call	_change_state_to_menu_22	;wreg free
  4133                           
  4134                           ;UI.c: 87: }
  4135                           ;UI.c: 88: }
  4136  0000FC  D235               	goto	l5297
  4137  0000FE                     l5041:
  4138                           
  4139                           ;UI.c: 89: else if(cur_state == 0){
  4140  0000FE  0100               	movlb	0	; () banked
  4141  000100  51E1               	movf	_cur_state& (0+255),w,b
  4142  000102  0100               	movlb	0	; () banked
  4143  000104  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4144  000106  A4D8               	btfss	status,2,c
  4145  000108  D22F               	goto	l5297
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;UI.c: 90: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4149  00010A  0E00               	movlw	0
  4150  00010C  0100               	movlb	0	; () banked
  4151  00010E  6FC7               	movwf	UI@i& (0+255),b
  4152  000110                     l5045:
  4153                           
  4154                           ; BSR set to: 0
  4155  000110  0E63               	movlw	99
  4156  000112  0100               	movlb	0	; () banked
  4157  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4158  000116  D001               	goto	l5049
  4159  000118  D00C               	goto	l5053
  4160  00011A                     l5049:
  4161                           
  4162                           ; BSR set to: 0
  4163  00011A  0E68               	movlw	104
  4164  00011C  0100               	movlb	0	; () banked
  4165  00011E  6FC4               	movwf	??_UI& (0+255),b
  4166  000120  0EE4               	movlw	228
  4167  000122                     u4627:
  4168  000122  2EE8               	decfsz	wreg,f,c
  4169  000124  D7FE               	bra	u4627
  4170  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4171  000128  D7FC               	bra	u4627
  4172  00012A  F000               	nop	
  4173  00012C  0100               	movlb	0	; () banked
  4174  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4175  000130  D7EF               	goto	l5045
  4176  000132                     l5053:
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;UI.c: 91: if(cur_state == 0){
  4180  000132  0100               	movlb	0	; () banked
  4181  000134  51E1               	movf	_cur_state& (0+255),w,b
  4182  000136  0100               	movlb	0	; () banked
  4183  000138  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4184  00013A  A4D8               	btfss	status,2,c
  4185  00013C  D215               	goto	l5297
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;UI.c: 92: printRTC();
  4189  00013E  EC63  F006         	call	_printRTC	;wreg free
  4190                           
  4191                           ;UI.c: 93: }
  4192                           ;UI.c: 94: }
  4193                           ;UI.c: 95: while(logstate){
  4194  000142  D212               	goto	l5297
  4195  000144                     l5057:
  4196                           
  4197                           ;UI.c: 97: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4198  000144  0E01               	movlw	1
  4199  000146  EC81  F014         	call	_lcdInst
  4200  00014A  0E68               	movlw	104
  4201  00014C  0100               	movlb	0	; () banked
  4202  00014E  6FC4               	movwf	??_UI& (0+255),b
  4203  000150  0EE4               	movlw	228
  4204  000152                     u4637:
  4205  000152  2EE8               	decfsz	wreg,f,c
  4206  000154  D7FE               	bra	u4637
  4207  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4208  000158  D7FC               	bra	u4637
  4209  00015A  F000               	nop	
  4210                           
  4211                           ;UI.c: 98: lcdInst(0b10000000);;
  4212  00015C  0E80               	movlw	128
  4213  00015E  EC81  F014         	call	_lcdInst
  4214                           
  4215                           ;UI.c: 99: printf("-- Log %2d here--", log);
  4216  000162  0EF9               	movlw	low STR_3
  4217  000164  0100               	movlb	0	; () banked
  4218  000166  6F8E               	movwf	printf@f& (0+255),b
  4219  000168  0EFD               	movlw	high STR_3
  4220  00016A  0100               	movlb	0	; () banked
  4221  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4222  00016E  C0ED  F090         	movff	_log,?_printf+2
  4223  000172  C0EE  F091         	movff	_log+1,?_printf+3
  4224  000176  ECBB  F002         	call	_printf	;wreg free
  4225                           
  4226                           ;UI.c: 100: lcdInst(0b11000000);;
  4227  00017A  0EC0               	movlw	192
  4228  00017C  EC81  F014         	call	_lcdInst
  4229                           
  4230                           ;UI.c: 101: printf("Pause:< | Back:>");
  4231  000180  0E82               	movlw	low STR_4
  4232  000182  0100               	movlb	0	; () banked
  4233  000184  6F8E               	movwf	printf@f& (0+255),b
  4234  000186  0EFF               	movlw	high STR_4
  4235  000188  0100               	movlb	0	; () banked
  4236  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4237  00018C  ECBB  F002         	call	_printf	;wreg free
  4238                           
  4239                           ;UI.c: 103: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4240  000190  0E00               	movlw	0
  4241  000192  0100               	movlb	0	; () banked
  4242  000194  6FC8               	movwf	UI@i_644& (0+255),b
  4243  000196                     l5071:
  4244                           
  4245                           ; BSR set to: 0
  4246  000196  0E63               	movlw	99
  4247  000198  0100               	movlb	0	; () banked
  4248  00019A  65C8               	cpfsgt	UI@i_644& (0+255),b
  4249  00019C  D001               	goto	l5075
  4250  00019E  D00C               	goto	l5079
  4251  0001A0                     l5075:
  4252                           
  4253                           ; BSR set to: 0
  4254  0001A0  0E68               	movlw	104
  4255  0001A2  0100               	movlb	0	; () banked
  4256  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4257  0001A6  0EE4               	movlw	228
  4258  0001A8                     u4647:
  4259  0001A8  2EE8               	decfsz	wreg,f,c
  4260  0001AA  D7FE               	bra	u4647
  4261  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4262  0001AE  D7FC               	bra	u4647
  4263  0001B0  F000               	nop	
  4264  0001B2  0100               	movlb	0	; () banked
  4265  0001B4  2BC8               	incf	UI@i_644& (0+255),f,b
  4266  0001B6  D7EF               	goto	l5071
  4267  0001B8                     l5079:
  4268                           
  4269                           ; BSR set to: 0
  4270  0001B8  0100               	movlb	0	; () banked
  4271  0001BA  51EF               	movf	_logstate& (0+255),w,b
  4272  0001BC  0100               	movlb	0	; () banked
  4273  0001BE  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4274  0001C0  B4D8               	btfsc	status,2,c
  4275  0001C2  0012               	return	
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4279                           
  4280                           ; BSR set to: 0
  4281                           
  4282                           ; BSR set to: 0
  4283  0001C4  0E00               	movlw	0
  4284  0001C6  0100               	movlb	0	; () banked
  4285  0001C8  6FC9               	movwf	UI@i_645& (0+255),b
  4286  0001CA                     l5085:
  4287                           
  4288                           ; BSR set to: 0
  4289  0001CA  0E63               	movlw	99
  4290  0001CC  0100               	movlb	0	; () banked
  4291  0001CE  65C9               	cpfsgt	UI@i_645& (0+255),b
  4292  0001D0  D001               	goto	l5089
  4293  0001D2  D00C               	goto	l5093
  4294  0001D4                     l5089:
  4295                           
  4296                           ; BSR set to: 0
  4297  0001D4  0E68               	movlw	104
  4298  0001D6  0100               	movlb	0	; () banked
  4299  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4300  0001DA  0EE4               	movlw	228
  4301  0001DC                     u4657:
  4302  0001DC  2EE8               	decfsz	wreg,f,c
  4303  0001DE  D7FE               	bra	u4657
  4304  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4305  0001E2  D7FC               	bra	u4657
  4306  0001E4  F000               	nop	
  4307  0001E6  0100               	movlb	0	; () banked
  4308  0001E8  2BC9               	incf	UI@i_645& (0+255),f,b
  4309  0001EA  D7EF               	goto	l5085
  4310  0001EC                     l5093:
  4311                           
  4312                           ; BSR set to: 0
  4313  0001EC  0100               	movlb	0	; () banked
  4314  0001EE  51EF               	movf	_logstate& (0+255),w,b
  4315  0001F0  0100               	movlb	0	; () banked
  4316  0001F2  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4317  0001F4  B4D8               	btfsc	status,2,c
  4318  0001F6  0012               	return	
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4322                           
  4323                           ; BSR set to: 0
  4324                           
  4325                           ; BSR set to: 0
  4326  0001F8  0E01               	movlw	1
  4327  0001FA  EC81  F014         	call	_lcdInst
  4328  0001FE  0E68               	movlw	104
  4329  000200  0100               	movlb	0	; () banked
  4330  000202  6FC4               	movwf	??_UI& (0+255),b
  4331  000204  0EE4               	movlw	228
  4332  000206                     u4667:
  4333  000206  2EE8               	decfsz	wreg,f,c
  4334  000208  D7FE               	bra	u4667
  4335  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4336  00020C  D7FC               	bra	u4667
  4337  00020E  F000               	nop	
  4338                           
  4339                           ;UI.c: 107: lcdInst(0b10000000);;
  4340  000210  0E80               	movlw	128
  4341  000212  EC81  F014         	call	_lcdInst
  4342                           
  4343                           ;UI.c: 108: printf("Start:");
  4344  000216  0EC0               	movlw	low STR_5
  4345  000218  0100               	movlb	0	; () banked
  4346  00021A  6F8E               	movwf	printf@f& (0+255),b
  4347  00021C  0EFF               	movlw	high STR_5
  4348  00021E  0100               	movlb	0	; () banked
  4349  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4350  000222  ECBB  F002         	call	_printf	;wreg free
  4351                           
  4352                           ;UI.c: 109: lcdInst(0b11000000);;
  4353  000226  0EC0               	movlw	192
  4354  000228  EC81  F014         	call	_lcdInst
  4355                           
  4356                           ;UI.c: 110: printf("06Feb | 01:08:56");
  4357  00022C  0EFA               	movlw	low STR_6
  4358  00022E  0100               	movlb	0	; () banked
  4359  000230  6F8E               	movwf	printf@f& (0+255),b
  4360  000232  0EFE               	movlw	high STR_6
  4361  000234  0100               	movlb	0	; () banked
  4362  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4363  000238  ECBB  F002         	call	_printf	;wreg free
  4364                           
  4365                           ;UI.c: 112: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4366  00023C  0E00               	movlw	0
  4367  00023E  0100               	movlb	0	; () banked
  4368  000240  6FCA               	movwf	UI@i_648& (0+255),b
  4369  000242                     l5111:
  4370                           
  4371                           ; BSR set to: 0
  4372  000242  0E63               	movlw	99
  4373  000244  0100               	movlb	0	; () banked
  4374  000246  65CA               	cpfsgt	UI@i_648& (0+255),b
  4375  000248  D001               	goto	l5115
  4376  00024A  D00C               	goto	l5119
  4377  00024C                     l5115:
  4378                           
  4379                           ; BSR set to: 0
  4380  00024C  0E68               	movlw	104
  4381  00024E  0100               	movlb	0	; () banked
  4382  000250  6FC4               	movwf	??_UI& (0+255),b
  4383  000252  0EE4               	movlw	228
  4384  000254                     u4677:
  4385  000254  2EE8               	decfsz	wreg,f,c
  4386  000256  D7FE               	bra	u4677
  4387  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4388  00025A  D7FC               	bra	u4677
  4389  00025C  F000               	nop	
  4390  00025E  0100               	movlb	0	; () banked
  4391  000260  2BCA               	incf	UI@i_648& (0+255),f,b
  4392  000262  D7EF               	goto	l5111
  4393  000264                     l5119:
  4394                           
  4395                           ; BSR set to: 0
  4396  000264  0100               	movlb	0	; () banked
  4397  000266  51EF               	movf	_logstate& (0+255),w,b
  4398  000268  0100               	movlb	0	; () banked
  4399  00026A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4400  00026C  B4D8               	btfsc	status,2,c
  4401  00026E  0012               	return	
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409  000270  0E00               	movlw	0
  4410  000272  0100               	movlb	0	; () banked
  4411  000274  6FCB               	movwf	UI@i_649& (0+255),b
  4412  000276                     l5125:
  4413                           
  4414                           ; BSR set to: 0
  4415  000276  0E63               	movlw	99
  4416  000278  0100               	movlb	0	; () banked
  4417  00027A  65CB               	cpfsgt	UI@i_649& (0+255),b
  4418  00027C  D001               	goto	l5129
  4419  00027E  D00C               	goto	l5133
  4420  000280                     l5129:
  4421                           
  4422                           ; BSR set to: 0
  4423  000280  0E68               	movlw	104
  4424  000282  0100               	movlb	0	; () banked
  4425  000284  6FC4               	movwf	??_UI& (0+255),b
  4426  000286  0EE4               	movlw	228
  4427  000288                     u4687:
  4428  000288  2EE8               	decfsz	wreg,f,c
  4429  00028A  D7FE               	bra	u4687
  4430  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4431  00028E  D7FC               	bra	u4687
  4432  000290  F000               	nop	
  4433  000292  0100               	movlb	0	; () banked
  4434  000294  2BCB               	incf	UI@i_649& (0+255),f,b
  4435  000296  D7EF               	goto	l5125
  4436  000298                     l5133:
  4437                           
  4438                           ; BSR set to: 0
  4439  000298  0100               	movlb	0	; () banked
  4440  00029A  51EF               	movf	_logstate& (0+255),w,b
  4441  00029C  0100               	movlb	0	; () banked
  4442  00029E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4443  0002A0  B4D8               	btfsc	status,2,c
  4444  0002A2  0012               	return	
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4448                           
  4449                           ; BSR set to: 0
  4450                           
  4451                           ; BSR set to: 0
  4452  0002A4  0E01               	movlw	1
  4453  0002A6  EC81  F014         	call	_lcdInst
  4454  0002AA  0E68               	movlw	104
  4455  0002AC  0100               	movlb	0	; () banked
  4456  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4457  0002B0  0EE4               	movlw	228
  4458  0002B2                     u4697:
  4459  0002B2  2EE8               	decfsz	wreg,f,c
  4460  0002B4  D7FE               	bra	u4697
  4461  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4462  0002B8  D7FC               	bra	u4697
  4463  0002BA  F000               	nop	
  4464                           
  4465                           ;UI.c: 116: lcdInst(0b10000000);;
  4466  0002BC  0E80               	movlw	128
  4467  0002BE  EC81  F014         	call	_lcdInst
  4468                           
  4469                           ;UI.c: 117: printf("Duration:");
  4470  0002C2  0EAF               	movlw	low STR_7
  4471  0002C4  0100               	movlb	0	; () banked
  4472  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4473  0002C8  0EFF               	movlw	high STR_7
  4474  0002CA  0100               	movlb	0	; () banked
  4475  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4476  0002CE  ECBB  F002         	call	_printf	;wreg free
  4477                           
  4478                           ;UI.c: 118: lcdInst(0b11000000);;
  4479  0002D2  0EC0               	movlw	192
  4480  0002D4  EC81  F014         	call	_lcdInst
  4481                           
  4482                           ;UI.c: 119: printf("%d min(s) %d secs", 2, 42);
  4483  0002D8  0E0B               	movlw	low STR_8
  4484  0002DA  0100               	movlb	0	; () banked
  4485  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4486  0002DE  0EFE               	movlw	high STR_8
  4487  0002E0  0100               	movlb	0	; () banked
  4488  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4489  0002E4  0E00               	movlw	0
  4490  0002E6  0100               	movlb	0	; () banked
  4491  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4492  0002EA  0E02               	movlw	2
  4493  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4494  0002EE  0E00               	movlw	0
  4495  0002F0  0100               	movlb	0	; () banked
  4496  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4497  0002F4  0E2A               	movlw	42
  4498  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4499  0002F8  ECBB  F002         	call	_printf	;wreg free
  4500                           
  4501                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4502  0002FC  0E00               	movlw	0
  4503  0002FE  0100               	movlb	0	; () banked
  4504  000300  6FCC               	movwf	UI@i_652& (0+255),b
  4505  000302                     l5151:
  4506                           
  4507                           ; BSR set to: 0
  4508  000302  0E63               	movlw	99
  4509  000304  0100               	movlb	0	; () banked
  4510  000306  65CC               	cpfsgt	UI@i_652& (0+255),b
  4511  000308  D001               	goto	l5155
  4512  00030A  D00C               	goto	l5159
  4513  00030C                     l5155:
  4514                           
  4515                           ; BSR set to: 0
  4516  00030C  0E68               	movlw	104
  4517  00030E  0100               	movlb	0	; () banked
  4518  000310  6FC4               	movwf	??_UI& (0+255),b
  4519  000312  0EE4               	movlw	228
  4520  000314                     u4707:
  4521  000314  2EE8               	decfsz	wreg,f,c
  4522  000316  D7FE               	bra	u4707
  4523  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4524  00031A  D7FC               	bra	u4707
  4525  00031C  F000               	nop	
  4526  00031E  0100               	movlb	0	; () banked
  4527  000320  2BCC               	incf	UI@i_652& (0+255),f,b
  4528  000322  D7EF               	goto	l5151
  4529  000324                     l5159:
  4530                           
  4531                           ; BSR set to: 0
  4532  000324  0100               	movlb	0	; () banked
  4533  000326  51EF               	movf	_logstate& (0+255),w,b
  4534  000328  0100               	movlb	0	; () banked
  4535  00032A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4536  00032C  B4D8               	btfsc	status,2,c
  4537  00032E  0012               	return	
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4541                           
  4542                           ; BSR set to: 0
  4543                           
  4544                           ; BSR set to: 0
  4545  000330  0E00               	movlw	0
  4546  000332  0100               	movlb	0	; () banked
  4547  000334  6FCD               	movwf	UI@i_653& (0+255),b
  4548  000336                     l5165:
  4549                           
  4550                           ; BSR set to: 0
  4551  000336  0E63               	movlw	99
  4552  000338  0100               	movlb	0	; () banked
  4553  00033A  65CD               	cpfsgt	UI@i_653& (0+255),b
  4554  00033C  D001               	goto	l5169
  4555  00033E  D00C               	goto	l5173
  4556  000340                     l5169:
  4557                           
  4558                           ; BSR set to: 0
  4559  000340  0E68               	movlw	104
  4560  000342  0100               	movlb	0	; () banked
  4561  000344  6FC4               	movwf	??_UI& (0+255),b
  4562  000346  0EE4               	movlw	228
  4563  000348                     u4717:
  4564  000348  2EE8               	decfsz	wreg,f,c
  4565  00034A  D7FE               	bra	u4717
  4566  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  4567  00034E  D7FC               	bra	u4717
  4568  000350  F000               	nop	
  4569  000352  0100               	movlb	0	; () banked
  4570  000354  2BCD               	incf	UI@i_653& (0+255),f,b
  4571  000356  D7EF               	goto	l5165
  4572  000358                     l5173:
  4573                           
  4574                           ; BSR set to: 0
  4575  000358  0100               	movlb	0	; () banked
  4576  00035A  51EF               	movf	_logstate& (0+255),w,b
  4577  00035C  0100               	movlb	0	; () banked
  4578  00035E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4579  000360  B4D8               	btfsc	status,2,c
  4580  000362  0012               	return	
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4584                           
  4585                           ; BSR set to: 0
  4586                           
  4587                           ; BSR set to: 0
  4588  000364  0E01               	movlw	1
  4589  000366  EC81  F014         	call	_lcdInst
  4590  00036A  0E68               	movlw	104
  4591  00036C  0100               	movlb	0	; () banked
  4592  00036E  6FC4               	movwf	??_UI& (0+255),b
  4593  000370  0EE4               	movlw	228
  4594  000372                     u4727:
  4595  000372  2EE8               	decfsz	wreg,f,c
  4596  000374  D7FE               	bra	u4727
  4597  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  4598  000378  D7FC               	bra	u4727
  4599  00037A  F000               	nop	
  4600                           
  4601                           ;UI.c: 125: lcdInst(0b10000000);;
  4602  00037C  0E80               	movlw	128
  4603  00037E  EC81  F014         	call	_lcdInst
  4604                           
  4605                           ;UI.c: 126: printf(" -- Pop  can -- ");
  4606  000382  0E94               	movlw	low STR_9
  4607  000384  0100               	movlb	0	; () banked
  4608  000386  6F8E               	movwf	printf@f& (0+255),b
  4609  000388  0EFE               	movlw	high STR_9
  4610  00038A  0100               	movlb	0	; () banked
  4611  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4612  00038E  ECBB  F002         	call	_printf	;wreg free
  4613                           
  4614                           ;UI.c: 127: lcdInst(0b11000000);;
  4615  000392  0EC0               	movlw	192
  4616  000394  EC81  F014         	call	_lcdInst
  4617                           
  4618                           ;UI.c: 128: printf("No tab: 9|Tab: 1");
  4619  000398  0ED8               	movlw	low STR_10
  4620  00039A  0100               	movlb	0	; () banked
  4621  00039C  6F8E               	movwf	printf@f& (0+255),b
  4622  00039E  0EFE               	movlw	high STR_10
  4623  0003A0  0100               	movlb	0	; () banked
  4624  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4625  0003A4  ECBB  F002         	call	_printf	;wreg free
  4626                           
  4627                           ;UI.c: 130: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4628  0003A8  0E00               	movlw	0
  4629  0003AA  0100               	movlb	0	; () banked
  4630  0003AC  6FCE               	movwf	UI@i_656& (0+255),b
  4631  0003AE                     l5191:
  4632                           
  4633                           ; BSR set to: 0
  4634  0003AE  0E63               	movlw	99
  4635  0003B0  0100               	movlb	0	; () banked
  4636  0003B2  65CE               	cpfsgt	UI@i_656& (0+255),b
  4637  0003B4  D001               	goto	l5195
  4638  0003B6  D00C               	goto	l5199
  4639  0003B8                     l5195:
  4640                           
  4641                           ; BSR set to: 0
  4642  0003B8  0E68               	movlw	104
  4643  0003BA  0100               	movlb	0	; () banked
  4644  0003BC  6FC4               	movwf	??_UI& (0+255),b
  4645  0003BE  0EE4               	movlw	228
  4646  0003C0                     u4737:
  4647  0003C0  2EE8               	decfsz	wreg,f,c
  4648  0003C2  D7FE               	bra	u4737
  4649  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  4650  0003C6  D7FC               	bra	u4737
  4651  0003C8  F000               	nop	
  4652  0003CA  0100               	movlb	0	; () banked
  4653  0003CC  2BCE               	incf	UI@i_656& (0+255),f,b
  4654  0003CE  D7EF               	goto	l5191
  4655  0003D0                     l5199:
  4656                           
  4657                           ; BSR set to: 0
  4658  0003D0  0100               	movlb	0	; () banked
  4659  0003D2  51EF               	movf	_logstate& (0+255),w,b
  4660  0003D4  0100               	movlb	0	; () banked
  4661  0003D6  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4662  0003D8  B4D8               	btfsc	status,2,c
  4663  0003DA  0012               	return	
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671  0003DC  0E00               	movlw	0
  4672  0003DE  0100               	movlb	0	; () banked
  4673  0003E0  6FCF               	movwf	UI@i_657& (0+255),b
  4674  0003E2                     l5205:
  4675                           
  4676                           ; BSR set to: 0
  4677  0003E2  0E63               	movlw	99
  4678  0003E4  0100               	movlb	0	; () banked
  4679  0003E6  65CF               	cpfsgt	UI@i_657& (0+255),b
  4680  0003E8  D001               	goto	l5209
  4681  0003EA  D00C               	goto	l5213
  4682  0003EC                     l5209:
  4683                           
  4684                           ; BSR set to: 0
  4685  0003EC  0E68               	movlw	104
  4686  0003EE  0100               	movlb	0	; () banked
  4687  0003F0  6FC4               	movwf	??_UI& (0+255),b
  4688  0003F2  0EE4               	movlw	228
  4689  0003F4                     u4747:
  4690  0003F4  2EE8               	decfsz	wreg,f,c
  4691  0003F6  D7FE               	bra	u4747
  4692  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  4693  0003FA  D7FC               	bra	u4747
  4694  0003FC  F000               	nop	
  4695  0003FE  0100               	movlb	0	; () banked
  4696  000400  2BCF               	incf	UI@i_657& (0+255),f,b
  4697  000402  D7EF               	goto	l5205
  4698  000404                     l5213:
  4699                           
  4700                           ; BSR set to: 0
  4701  000404  0100               	movlb	0	; () banked
  4702  000406  51EF               	movf	_logstate& (0+255),w,b
  4703  000408  0100               	movlb	0	; () banked
  4704  00040A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4705  00040C  B4D8               	btfsc	status,2,c
  4706  00040E  0012               	return	
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;UI.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4710                           
  4711                           ; BSR set to: 0
  4712                           
  4713                           ; BSR set to: 0
  4714  000410  0E01               	movlw	1
  4715  000412  EC81  F014         	call	_lcdInst
  4716  000416  0E68               	movlw	104
  4717  000418  0100               	movlb	0	; () banked
  4718  00041A  6FC4               	movwf	??_UI& (0+255),b
  4719  00041C  0EE4               	movlw	228
  4720  00041E                     u4757:
  4721  00041E  2EE8               	decfsz	wreg,f,c
  4722  000420  D7FE               	bra	u4757
  4723  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  4724  000424  D7FC               	bra	u4757
  4725  000426  F000               	nop	
  4726                           
  4727                           ;UI.c: 134: lcdInst(0b10000000);;
  4728  000428  0E80               	movlw	128
  4729  00042A  EC81  F014         	call	_lcdInst
  4730                           
  4731                           ;UI.c: 135: printf(" -- Soup can -- ");
  4732  00042E  0EA5               	movlw	low STR_11
  4733  000430  0100               	movlb	0	; () banked
  4734  000432  6F8E               	movwf	printf@f& (0+255),b
  4735  000434  0EFE               	movlw	high STR_11
  4736  000436  0100               	movlb	0	; () banked
  4737  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  4738  00043A  ECBB  F002         	call	_printf	;wreg free
  4739                           
  4740                           ;UI.c: 136: lcdInst(0b11000000);;
  4741  00043E  0EC0               	movlw	192
  4742  000440  EC81  F014         	call	_lcdInst
  4743                           
  4744                           ;UI.c: 137: printf("No lbl: 1|lbl: 1");
  4745  000444  0EE9               	movlw	low STR_12
  4746  000446  0100               	movlb	0	; () banked
  4747  000448  6F8E               	movwf	printf@f& (0+255),b
  4748  00044A  0EFE               	movlw	high STR_12
  4749  00044C  0100               	movlb	0	; () banked
  4750  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4751  000450  ECBB  F002         	call	_printf	;wreg free
  4752                           
  4753                           ;UI.c: 139: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4754  000454  0E00               	movlw	0
  4755  000456  0100               	movlb	0	; () banked
  4756  000458  6FD0               	movwf	UI@i_660& (0+255),b
  4757  00045A                     l5231:
  4758                           
  4759                           ; BSR set to: 0
  4760  00045A  0E63               	movlw	99
  4761  00045C  0100               	movlb	0	; () banked
  4762  00045E  65D0               	cpfsgt	UI@i_660& (0+255),b
  4763  000460  D001               	goto	l5235
  4764  000462  D00C               	goto	l5239
  4765  000464                     l5235:
  4766                           
  4767                           ; BSR set to: 0
  4768  000464  0E68               	movlw	104
  4769  000466  0100               	movlb	0	; () banked
  4770  000468  6FC4               	movwf	??_UI& (0+255),b
  4771  00046A  0EE4               	movlw	228
  4772  00046C                     u4767:
  4773  00046C  2EE8               	decfsz	wreg,f,c
  4774  00046E  D7FE               	bra	u4767
  4775  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  4776  000472  D7FC               	bra	u4767
  4777  000474  F000               	nop	
  4778  000476  0100               	movlb	0	; () banked
  4779  000478  2BD0               	incf	UI@i_660& (0+255),f,b
  4780  00047A  D7EF               	goto	l5231
  4781  00047C                     l5239:
  4782                           
  4783                           ; BSR set to: 0
  4784  00047C  0100               	movlb	0	; () banked
  4785  00047E  51EF               	movf	_logstate& (0+255),w,b
  4786  000480  0100               	movlb	0	; () banked
  4787  000482  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4788  000484  B4D8               	btfsc	status,2,c
  4789  000486  0012               	return	
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4793                           
  4794                           ; BSR set to: 0
  4795                           
  4796                           ; BSR set to: 0
  4797  000488  0E00               	movlw	0
  4798  00048A  0100               	movlb	0	; () banked
  4799  00048C  6FD1               	movwf	UI@i_661& (0+255),b
  4800  00048E                     l5245:
  4801                           
  4802                           ; BSR set to: 0
  4803  00048E  0E63               	movlw	99
  4804  000490  0100               	movlb	0	; () banked
  4805  000492  65D1               	cpfsgt	UI@i_661& (0+255),b
  4806  000494  D001               	goto	l5249
  4807  000496  D00C               	goto	l5253
  4808  000498                     l5249:
  4809                           
  4810                           ; BSR set to: 0
  4811  000498  0E68               	movlw	104
  4812  00049A  0100               	movlb	0	; () banked
  4813  00049C  6FC4               	movwf	??_UI& (0+255),b
  4814  00049E  0EE4               	movlw	228
  4815  0004A0                     u4777:
  4816  0004A0  2EE8               	decfsz	wreg,f,c
  4817  0004A2  D7FE               	bra	u4777
  4818  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  4819  0004A6  D7FC               	bra	u4777
  4820  0004A8  F000               	nop	
  4821  0004AA  0100               	movlb	0	; () banked
  4822  0004AC  2BD1               	incf	UI@i_661& (0+255),f,b
  4823  0004AE  D7EF               	goto	l5245
  4824  0004B0                     l5253:
  4825                           
  4826                           ; BSR set to: 0
  4827  0004B0  0100               	movlb	0	; () banked
  4828  0004B2  51EF               	movf	_logstate& (0+255),w,b
  4829  0004B4  0100               	movlb	0	; () banked
  4830  0004B6  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4831  0004B8  B4D8               	btfsc	status,2,c
  4832  0004BA  0012               	return	
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;UI.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4836                           
  4837                           ; BSR set to: 0
  4838                           
  4839                           ; BSR set to: 0
  4840  0004BC  0E01               	movlw	1
  4841  0004BE  EC81  F014         	call	_lcdInst
  4842  0004C2  0E68               	movlw	104
  4843  0004C4  0100               	movlb	0	; () banked
  4844  0004C6  6FC4               	movwf	??_UI& (0+255),b
  4845  0004C8  0EE4               	movlw	228
  4846  0004CA                     u4787:
  4847  0004CA  2EE8               	decfsz	wreg,f,c
  4848  0004CC  D7FE               	bra	u4787
  4849  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  4850  0004D0  D7FC               	bra	u4787
  4851  0004D2  F000               	nop	
  4852                           
  4853                           ;UI.c: 143: lcdInst(0b10000000);;
  4854  0004D4  0E80               	movlw	128
  4855  0004D6  EC81  F014         	call	_lcdInst
  4856                           
  4857                           ;UI.c: 144: printf("-- Total cans --");
  4858  0004DA  0EC7               	movlw	low STR_13
  4859  0004DC  0100               	movlb	0	; () banked
  4860  0004DE  6F8E               	movwf	printf@f& (0+255),b
  4861  0004E0  0EFE               	movlw	high STR_13
  4862  0004E2  0100               	movlb	0	; () banked
  4863  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  4864  0004E6  ECBB  F002         	call	_printf	;wreg free
  4865                           
  4866                           ;UI.c: 145: lcdInst(0b11000000);;
  4867  0004EA  0EC0               	movlw	192
  4868  0004EC  EC81  F014         	call	_lcdInst
  4869                           
  4870                           ;UI.c: 146: printf("12");
  4871  0004F0  0EFB               	movlw	low STR_14
  4872  0004F2  0100               	movlb	0	; () banked
  4873  0004F4  6F8E               	movwf	printf@f& (0+255),b
  4874  0004F6  0EFF               	movlw	high STR_14
  4875  0004F8  0100               	movlb	0	; () banked
  4876  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4877  0004FC  ECBB  F002         	call	_printf	;wreg free
  4878                           
  4879                           ;UI.c: 148: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4880  000500  0E00               	movlw	0
  4881  000502  0100               	movlb	0	; () banked
  4882  000504  6FD2               	movwf	UI@i_664& (0+255),b
  4883  000506                     l5271:
  4884                           
  4885                           ; BSR set to: 0
  4886  000506  0E63               	movlw	99
  4887  000508  0100               	movlb	0	; () banked
  4888  00050A  65D2               	cpfsgt	UI@i_664& (0+255),b
  4889  00050C  D001               	goto	l5275
  4890  00050E  D00C               	goto	l5279
  4891  000510                     l5275:
  4892                           
  4893                           ; BSR set to: 0
  4894  000510  0E68               	movlw	104
  4895  000512  0100               	movlb	0	; () banked
  4896  000514  6FC4               	movwf	??_UI& (0+255),b
  4897  000516  0EE4               	movlw	228
  4898  000518                     u4797:
  4899  000518  2EE8               	decfsz	wreg,f,c
  4900  00051A  D7FE               	bra	u4797
  4901  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  4902  00051E  D7FC               	bra	u4797
  4903  000520  F000               	nop	
  4904  000522  0100               	movlb	0	; () banked
  4905  000524  2BD2               	incf	UI@i_664& (0+255),f,b
  4906  000526  D7EF               	goto	l5271
  4907  000528                     l5279:
  4908                           
  4909                           ; BSR set to: 0
  4910  000528  0100               	movlb	0	; () banked
  4911  00052A  51EF               	movf	_logstate& (0+255),w,b
  4912  00052C  0100               	movlb	0	; () banked
  4913  00052E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4914  000530  B4D8               	btfsc	status,2,c
  4915  000532  0012               	return	
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4919                           
  4920                           ; BSR set to: 0
  4921                           
  4922                           ; BSR set to: 0
  4923  000534  0E00               	movlw	0
  4924  000536  0100               	movlb	0	; () banked
  4925  000538  6FD3               	movwf	UI@i_665& (0+255),b
  4926  00053A                     l5285:
  4927                           
  4928                           ; BSR set to: 0
  4929  00053A  0E63               	movlw	99
  4930  00053C  0100               	movlb	0	; () banked
  4931  00053E  65D3               	cpfsgt	UI@i_665& (0+255),b
  4932  000540  D001               	goto	l5289
  4933  000542  D00C               	goto	l5293
  4934  000544                     l5289:
  4935                           
  4936                           ; BSR set to: 0
  4937  000544  0E68               	movlw	104
  4938  000546  0100               	movlb	0	; () banked
  4939  000548  6FC4               	movwf	??_UI& (0+255),b
  4940  00054A  0EE4               	movlw	228
  4941  00054C                     u4807:
  4942  00054C  2EE8               	decfsz	wreg,f,c
  4943  00054E  D7FE               	bra	u4807
  4944  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  4945  000552  D7FC               	bra	u4807
  4946  000554  F000               	nop	
  4947  000556  0100               	movlb	0	; () banked
  4948  000558  2BD3               	incf	UI@i_665& (0+255),f,b
  4949  00055A  D7EF               	goto	l5285
  4950  00055C                     l5293:
  4951                           
  4952                           ; BSR set to: 0
  4953  00055C  0100               	movlb	0	; () banked
  4954  00055E  51EF               	movf	_logstate& (0+255),w,b
  4955  000560  0100               	movlb	0	; () banked
  4956  000562  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4957  000564  B4D8               	btfsc	status,2,c
  4958  000566  0012               	return	
  4959  000568                     l5297:
  4960  000568  0100               	movlb	0	; () banked
  4961  00056A  51EF               	movf	_logstate& (0+255),w,b
  4962  00056C  0100               	movlb	0	; () banked
  4963  00056E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4964  000570  B4D8               	btfsc	status,2,c
  4965  000572  0012               	return	
  4966  000574  D5E7               	goto	l5057
  4967  000576                     __end_of_UI:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon3	equ	0xFF0
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _printRTC *****************
  4989 ;; Defined at:
  4990 ;;		line 61 in file "RTC.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  i               2   66[BANK0 ] int 
  4995 ;;  INT_time       14   46[BANK0 ] int [7]
  4996 ;;  month           4   62[BANK0 ] unsigned char [4]
  4997 ;;  RTC_month       2   60[BANK0 ] int 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  1    wreg      void 
  5000 ;; Registers used:
  5001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;Total ram usage:       25 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:   10
  5014 ;; This function calls:
  5015 ;;		_getRTC
  5016 ;;		_lcdInst
  5017 ;;		_printf
  5018 ;;		_strcpy
  5019 ;; This function is called by:
  5020 ;;		_UI
  5021 ;;		_change_state_to_menu_start
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text19
  5026  000CC6                     __ptext19:
  5027                           	opt stack 0
  5028  000CC6                     _printRTC:
  5029                           	opt stack 18
  5030                           
  5031                           ;RTC.c: 62: getRTC();
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;incstack = 0
  5035  000CC6  EC57  F00F         	call	_getRTC	;wreg free
  5036                           
  5037                           ;RTC.c: 63: char month[] = "MMM";
  5038  000CCA  C0F6  F0BE         	movff	printRTC@F3189,printRTC@month
  5039  000CCE  C0F7  F0BF         	movff	printRTC@F3189+1,printRTC@month+1
  5040  000CD2  C0F8  F0C0         	movff	printRTC@F3189+2,printRTC@month+2
  5041  000CD6  C0F9  F0C1         	movff	printRTC@F3189+3,printRTC@month+3
  5042                           
  5043                           ;RTC.c: 64: int INT_time[7];
  5044                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  5045  000CDA  0E00               	movlw	0
  5046  000CDC  0100               	movlb	0	; () banked
  5047  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5048  000CE0  0E00               	movlw	0
  5049  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5050                           
  5051                           ; BSR set to: 0
  5052  000CE4  0100               	movlb	0	; () banked
  5053  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5054  000CE8  D008               	goto	l4411
  5055  000CEA  0100               	movlb	0	; () banked
  5056  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5057  000CEE  E146               	bnz	l894
  5058  000CF0  0E07               	movlw	7
  5059  000CF2  0100               	movlb	0	; () banked
  5060  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5061  000CF6  B0D8               	btfsc	status,0,c
  5062  000CF8  D041               	goto	l894
  5063  000CFA                     l4411:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5067  000CFA  0ED4               	movlw	low _time
  5068  000CFC  0100               	movlb	0	; () banked
  5069  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5070  000D00  6ED9               	movwf	fsr2l,c
  5071  000D02  0E00               	movlw	high _time
  5072  000D04  0100               	movlb	0	; () banked
  5073  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5074  000D08  6EDA               	movwf	fsr2h,c
  5075  000D0A  50DF               	movf	indf2,w,c
  5076  000D0C  0100               	movlb	0	; () banked
  5077  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5078  000D10  0100               	movlb	0	; () banked
  5079  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5080  000D14  0E0F               	movlw	15
  5081  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5082  000D18  0E0F               	movlw	15
  5083  000D1A  0100               	movlb	0	; () banked
  5084  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5085  000D1E  0100               	movlb	0	; () banked
  5086  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5087  000D22  0D0A               	mullw	10
  5088  000D24  0ED4               	movlw	low _time
  5089  000D26  0100               	movlb	0	; () banked
  5090  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5091  000D2A  6ED9               	movwf	fsr2l,c
  5092  000D2C  0E00               	movlw	high _time
  5093  000D2E  0100               	movlb	0	; () banked
  5094  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5095  000D32  6EDA               	movwf	fsr2h,c
  5096  000D34  50DF               	movf	indf2,w,c
  5097  000D36  0B0F               	andlw	15
  5098  000D38  0100               	movlb	0	; () banked
  5099  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5100  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5101  000D3E  50F3               	movf	prodl,w,c
  5102  000D40  0100               	movlb	0	; () banked
  5103  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5104  000D44  50F4               	movf	prodh,w,c
  5105  000D46  0100               	movlb	0	; () banked
  5106  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5107  000D4A  90D8               	bcf	status,0,c
  5108  000D4C  0100               	movlb	0	; () banked
  5109  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5110  000D50  6ED9               	movwf	fsr2l,c
  5111  000D52  0100               	movlb	0	; () banked
  5112  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5113  000D56  6EDA               	movwf	fsr2h,c
  5114  000D58  0EAE               	movlw	low printRTC@INT_time
  5115  000D5A  26D9               	addwf	fsr2l,f,c
  5116  000D5C  0E00               	movlw	high printRTC@INT_time
  5117  000D5E  22DA               	addwfc	fsr2h,f,c
  5118  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5119  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5120                           
  5121                           ; BSR set to: 0
  5122  000D68  0100               	movlb	0	; () banked
  5123  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5124  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5125                           
  5126                           ; BSR set to: 0
  5127  000D6E  0100               	movlb	0	; () banked
  5128  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5129  000D72  D7C3               	goto	l4411
  5130  000D74  0100               	movlb	0	; () banked
  5131  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5132  000D78  E101               	bnz	u3180
  5133  000D7A  D7BA               	goto	L6
  5134  000D7C                     u3180:
  5135  000D7C                     l894:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;RTC.c: 67: }
  5139                           ;RTC.c: 68: int RTC_month = INT_time[5];
  5140  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5141  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5142                           
  5143                           ;RTC.c: 69: switch(RTC_month){
  5144  000D84  D0B4               	goto	l4443
  5145  000D86                     l4417:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;RTC.c: 71: strcpy(month, "Jan");
  5149  000D86  0EBE               	movlw	low printRTC@month
  5150  000D88  0100               	movlb	0	; () banked
  5151  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5152  000D8C  0E00               	movlw	high printRTC@month
  5153  000D8E  0100               	movlb	0	; () banked
  5154  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5155  000D92  0EDB               	movlw	low STR_36
  5156  000D94  0100               	movlb	0	; () banked
  5157  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5158  000D98  0EFF               	movlw	high STR_36
  5159  000D9A  0100               	movlb	0	; () banked
  5160  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5161  000D9E  EC39  F012         	call	_strcpy	;wreg free
  5162                           
  5163                           ;RTC.c: 72: break;
  5164  000DA2  D0D4               	goto	l4445
  5165  000DA4                     l4419:
  5166                           
  5167                           ;RTC.c: 74: strcpy(month, "Feb");
  5168  000DA4  0EBE               	movlw	low printRTC@month
  5169  000DA6  0100               	movlb	0	; () banked
  5170  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5171  000DAA  0E00               	movlw	high printRTC@month
  5172  000DAC  0100               	movlb	0	; () banked
  5173  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5174  000DB0  0ECB               	movlw	low STR_37
  5175  000DB2  0100               	movlb	0	; () banked
  5176  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5177  000DB6  0EFF               	movlw	high STR_37
  5178  000DB8  0100               	movlb	0	; () banked
  5179  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5180  000DBC  EC39  F012         	call	_strcpy	;wreg free
  5181                           
  5182                           ;RTC.c: 75: break;
  5183  000DC0  D0C5               	goto	l4445
  5184  000DC2                     l4421:
  5185                           
  5186                           ;RTC.c: 77: strcpy(month, "Mar");
  5187  000DC2  0EBE               	movlw	low printRTC@month
  5188  000DC4  0100               	movlb	0	; () banked
  5189  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5190  000DC8  0E00               	movlw	high printRTC@month
  5191  000DCA  0100               	movlb	0	; () banked
  5192  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5193  000DCE  0EE7               	movlw	low STR_38
  5194  000DD0  0100               	movlb	0	; () banked
  5195  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5196  000DD4  0EFF               	movlw	high STR_38
  5197  000DD6  0100               	movlb	0	; () banked
  5198  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5199  000DDA  EC39  F012         	call	_strcpy	;wreg free
  5200                           
  5201                           ;RTC.c: 78: break;
  5202  000DDE  D0B6               	goto	l4445
  5203  000DE0                     l4423:
  5204                           
  5205                           ;RTC.c: 80: strcpy(month, "Apr");
  5206  000DE0  0EBE               	movlw	low printRTC@month
  5207  000DE2  0100               	movlb	0	; () banked
  5208  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5209  000DE6  0E00               	movlw	high printRTC@month
  5210  000DE8  0100               	movlb	0	; () banked
  5211  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5212  000DEC  0EEB               	movlw	low STR_39
  5213  000DEE  0100               	movlb	0	; () banked
  5214  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5215  000DF2  0EFF               	movlw	high STR_39
  5216  000DF4  0100               	movlb	0	; () banked
  5217  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5218  000DF8  EC39  F012         	call	_strcpy	;wreg free
  5219                           
  5220                           ;RTC.c: 81: break;
  5221  000DFC  D0A7               	goto	l4445
  5222  000DFE                     l4425:
  5223                           
  5224                           ;RTC.c: 83: strcpy(month, "May");
  5225  000DFE  0EBE               	movlw	low printRTC@month
  5226  000E00  0100               	movlb	0	; () banked
  5227  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5228  000E04  0E00               	movlw	high printRTC@month
  5229  000E06  0100               	movlb	0	; () banked
  5230  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5231  000E0A  0EF7               	movlw	low STR_40
  5232  000E0C  0100               	movlb	0	; () banked
  5233  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5234  000E10  0EFF               	movlw	high STR_40
  5235  000E12  0100               	movlb	0	; () banked
  5236  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5237  000E16  EC39  F012         	call	_strcpy	;wreg free
  5238                           
  5239                           ;RTC.c: 84: break;
  5240  000E1A  D098               	goto	l4445
  5241  000E1C                     l4427:
  5242                           
  5243                           ;RTC.c: 86: strcpy(month, "Jun");
  5244  000E1C  0EBE               	movlw	low printRTC@month
  5245  000E1E  0100               	movlb	0	; () banked
  5246  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5247  000E22  0E00               	movlw	high printRTC@month
  5248  000E24  0100               	movlb	0	; () banked
  5249  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5250  000E28  0EDF               	movlw	low STR_41
  5251  000E2A  0100               	movlb	0	; () banked
  5252  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5253  000E2E  0EFF               	movlw	high STR_41
  5254  000E30  0100               	movlb	0	; () banked
  5255  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5256  000E34  EC39  F012         	call	_strcpy	;wreg free
  5257                           
  5258                           ;RTC.c: 87: break;
  5259  000E38  D089               	goto	l4445
  5260  000E3A                     l4429:
  5261                           
  5262                           ;RTC.c: 89: strcpy(month, "Jul");
  5263  000E3A  0EBE               	movlw	low printRTC@month
  5264  000E3C  0100               	movlb	0	; () banked
  5265  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5266  000E40  0E00               	movlw	high printRTC@month
  5267  000E42  0100               	movlb	0	; () banked
  5268  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5269  000E46  0ED7               	movlw	low STR_42
  5270  000E48  0100               	movlb	0	; () banked
  5271  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5272  000E4C  0EFF               	movlw	high STR_42
  5273  000E4E  0100               	movlb	0	; () banked
  5274  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5275  000E52  EC39  F012         	call	_strcpy	;wreg free
  5276                           
  5277                           ;RTC.c: 90: break;
  5278  000E56  D07A               	goto	l4445
  5279  000E58                     l4431:
  5280                           
  5281                           ;RTC.c: 92: strcpy(month, "Aug");
  5282  000E58  0EBE               	movlw	low printRTC@month
  5283  000E5A  0100               	movlb	0	; () banked
  5284  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5285  000E5E  0E00               	movlw	high printRTC@month
  5286  000E60  0100               	movlb	0	; () banked
  5287  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5288  000E64  0ED3               	movlw	low STR_43
  5289  000E66  0100               	movlb	0	; () banked
  5290  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5291  000E6A  0EFF               	movlw	high STR_43
  5292  000E6C  0100               	movlb	0	; () banked
  5293  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5294  000E70  EC39  F012         	call	_strcpy	;wreg free
  5295                           
  5296                           ;RTC.c: 93: break;
  5297  000E74  D06B               	goto	l4445
  5298  000E76                     l4433:
  5299                           
  5300                           ;RTC.c: 95: strcpy(month, "Sep");
  5301  000E76  0EBE               	movlw	low printRTC@month
  5302  000E78  0100               	movlb	0	; () banked
  5303  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5304  000E7C  0E00               	movlw	high printRTC@month
  5305  000E7E  0100               	movlb	0	; () banked
  5306  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5307  000E82  0EE3               	movlw	low STR_44
  5308  000E84  0100               	movlb	0	; () banked
  5309  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5310  000E88  0EFF               	movlw	high STR_44
  5311  000E8A  0100               	movlb	0	; () banked
  5312  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5313  000E8E  EC39  F012         	call	_strcpy	;wreg free
  5314                           
  5315                           ;RTC.c: 96: break;
  5316  000E92  D05C               	goto	l4445
  5317  000E94                     l4435:
  5318                           
  5319                           ;RTC.c: 98: strcpy(month, "Oct");
  5320  000E94  0EBE               	movlw	low printRTC@month
  5321  000E96  0100               	movlb	0	; () banked
  5322  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5323  000E9A  0E00               	movlw	high printRTC@month
  5324  000E9C  0100               	movlb	0	; () banked
  5325  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5326  000EA0  0EEF               	movlw	low STR_45
  5327  000EA2  0100               	movlb	0	; () banked
  5328  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5329  000EA6  0EFF               	movlw	high STR_45
  5330  000EA8  0100               	movlb	0	; () banked
  5331  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5332  000EAC  EC39  F012         	call	_strcpy	;wreg free
  5333                           
  5334                           ;RTC.c: 99: break;
  5335  000EB0  D04D               	goto	l4445
  5336  000EB2                     l4437:
  5337                           
  5338                           ;RTC.c: 101: strcpy(month, "Nov");
  5339  000EB2  0EBE               	movlw	low printRTC@month
  5340  000EB4  0100               	movlb	0	; () banked
  5341  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5342  000EB8  0E00               	movlw	high printRTC@month
  5343  000EBA  0100               	movlb	0	; () banked
  5344  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5345  000EBE  0EF3               	movlw	low STR_46
  5346  000EC0  0100               	movlb	0	; () banked
  5347  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5348  000EC4  0EFF               	movlw	high STR_46
  5349  000EC6  0100               	movlb	0	; () banked
  5350  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5351  000ECA  EC39  F012         	call	_strcpy	;wreg free
  5352                           
  5353                           ;RTC.c: 102: break;
  5354  000ECE  D03E               	goto	l4445
  5355  000ED0                     l4439:
  5356                           
  5357                           ;RTC.c: 104: strcpy(month, "Dec");
  5358  000ED0  0EBE               	movlw	low printRTC@month
  5359  000ED2  0100               	movlb	0	; () banked
  5360  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5361  000ED6  0E00               	movlw	high printRTC@month
  5362  000ED8  0100               	movlb	0	; () banked
  5363  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5364  000EDC  0ECF               	movlw	low STR_47
  5365  000EDE  0100               	movlb	0	; () banked
  5366  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5367  000EE2  0EFF               	movlw	high STR_47
  5368  000EE4  0100               	movlb	0	; () banked
  5369  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5370  000EE8  EC39  F012         	call	_strcpy	;wreg free
  5371                           
  5372                           ;RTC.c: 106: }
  5373                           
  5374                           ;RTC.c: 105: break;
  5375  000EEC  D02F               	goto	l4445
  5376  000EEE                     l4443:
  5377  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5378  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5379                           
  5380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 1, Range of values is 0 to 0
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte            4     3 (average)
  5386                           ;	Chosen strategy is simple_byte
  5387  000EF6  0100               	movlb	0	; () banked
  5388  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5389  000EFA  0A00               	xorlw	0	; case 0
  5390  000EFC  A4D8               	btfss	status,2,c
  5391  000EFE  D026               	goto	l4445
  5392                           
  5393                           ; BSR set to: 0
  5394                           ; Switch size 1, requested type "space"
  5395                           ; Number of cases is 12, Range of values is 1 to 12
  5396                           ; switch strategies available:
  5397                           ; Name         Instructions Cycles
  5398                           ; simple_byte           37    19 (average)
  5399                           ;	Chosen strategy is simple_byte
  5400  000F00  0100               	movlb	0	; () banked
  5401  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5402  000F04  0A01               	xorlw	1	; case 1
  5403  000F06  B4D8               	btfsc	status,2,c
  5404  000F08  D73E               	goto	l4417
  5405  000F0A  0A03               	xorlw	3	; case 2
  5406  000F0C  B4D8               	btfsc	status,2,c
  5407  000F0E  D74A               	goto	l4419
  5408  000F10  0A01               	xorlw	1	; case 3
  5409  000F12  B4D8               	btfsc	status,2,c
  5410  000F14  D756               	goto	l4421
  5411  000F16  0A07               	xorlw	7	; case 4
  5412  000F18  B4D8               	btfsc	status,2,c
  5413  000F1A  D762               	goto	l4423
  5414  000F1C  0A01               	xorlw	1	; case 5
  5415  000F1E  B4D8               	btfsc	status,2,c
  5416  000F20  D76E               	goto	l4425
  5417  000F22  0A03               	xorlw	3	; case 6
  5418  000F24  B4D8               	btfsc	status,2,c
  5419  000F26  D77A               	goto	l4427
  5420  000F28  0A01               	xorlw	1	; case 7
  5421  000F2A  B4D8               	btfsc	status,2,c
  5422  000F2C  D786               	goto	l4429
  5423  000F2E  0A0F               	xorlw	15	; case 8
  5424  000F30  B4D8               	btfsc	status,2,c
  5425  000F32  D792               	goto	l4431
  5426  000F34  0A01               	xorlw	1	; case 9
  5427  000F36  B4D8               	btfsc	status,2,c
  5428  000F38  D79E               	goto	l4433
  5429  000F3A  0A03               	xorlw	3	; case 10
  5430  000F3C  B4D8               	btfsc	status,2,c
  5431  000F3E  D7AA               	goto	l4435
  5432  000F40  0A01               	xorlw	1	; case 11
  5433  000F42  B4D8               	btfsc	status,2,c
  5434  000F44  D7B6               	goto	l4437
  5435  000F46  0A07               	xorlw	7	; case 12
  5436  000F48  B4D8               	btfsc	status,2,c
  5437  000F4A  D7C2               	goto	l4439
  5438  000F4C                     l4445:
  5439                           
  5440                           ;RTC.c: 107: lcdInst(0b10000000);;
  5441  000F4C  0E80               	movlw	128
  5442  000F4E  EC81  F014         	call	_lcdInst
  5443                           
  5444                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5445  000F52  0ECC               	movlw	low STR_48
  5446  000F54  0100               	movlb	0	; () banked
  5447  000F56  6F8E               	movwf	printf@f& (0+255),b
  5448  000F58  0EFD               	movlw	high STR_48
  5449  000F5A  0100               	movlb	0	; () banked
  5450  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5451  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5452  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5453  000F66  0EBE               	movlw	low printRTC@month
  5454  000F68  0100               	movlb	0	; () banked
  5455  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5456  000F6C  0E00               	movlw	high printRTC@month
  5457  000F6E  0100               	movlb	0	; () banked
  5458  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5459  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5460  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5461  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5462  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5463  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5464  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5465  000F8A  ECBB  F002         	call	_printf	;wreg free
  5466  000F8E  0012               	return		;funcret
  5467  000F90                     __end_of_printRTC:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon3	equ	0xFF0
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           postdec1	equ	0xFE5
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _strcpy *****************
  5489 ;; Defined at:
  5490 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5493 ;;		 -> printRTC@month(4), 
  5494 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5495 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5496 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5497 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5500 ;;		 -> printRTC@month(4), 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  2    0[BANK0 ] PTR unsigned char 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;Total ram usage:        6 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_printRTC
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text20
  5525  002472                     __ptext20:
  5526                           	opt stack 0
  5527  002472                     _strcpy:
  5528                           	opt stack 20
  5529                           
  5530                           ;incstack = 0
  5531  002472  C080  F084         	movff	strcpy@to,strcpy@cp
  5532  002476  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5533  00247A  D006               	goto	l4215
  5534  00247C                     l4213:
  5535  00247C  0100               	movlb	0	; () banked
  5536  00247E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5537  002480  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5538  002482  0100               	movlb	0	; () banked
  5539  002484  4B82               	infsnz	strcpy@from& (0+255),f,b
  5540  002486  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5541  002488                     l4215:
  5542  002488  C082  FFF6         	movff	strcpy@from,tblptrl
  5543  00248C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5544  002490                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5545  002490  6AF8               	clrf	tblptru,c
  5546  002492                     	endif
  5547  002492                     	if	0	;tblptru may be non-zero
  5548  002492                     	endif
  5549  002492  C084  FFD9         	movff	strcpy@cp,fsr2l
  5550  002496  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5551  00249A  0008               	tblrd		*
  5552  00249C  CFF5 FFDF          	movff	tablat,indf2
  5553  0024A0  50DF               	movf	indf2,w,c
  5554  0024A2  B4D8               	btfsc	status,2,c
  5555  0024A4  0012               	return	
  5556  0024A6  D7EA               	goto	l4213
  5557  0024A8                     __end_of_strcpy:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon3	equ	0xFF0
  5567                           postinc0	equ	0xFEE
  5568                           wreg	equ	0xFE8
  5569                           postdec1	equ	0xFE5
  5570                           fsr1l	equ	0xFE1
  5571                           indf2	equ	0xFDF
  5572                           postinc2	equ	0xFDE
  5573                           postdec2	equ	0xFDD
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function _getRTC *****************
  5579 ;; Defined at:
  5580 ;;		line 42 in file "RTC.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  i               2    3[BANK0 ] int 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;Total ram usage:        2 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    9
  5601 ;; This function calls:
  5602 ;;		_I2C_Master_Read
  5603 ;;		_I2C_Master_Start
  5604 ;;		_I2C_Master_Stop
  5605 ;;		_I2C_Master_Write
  5606 ;; This function is called by:
  5607 ;;		_printRTC
  5608 ;;		_initSortTimer
  5609 ;;		_getIR
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text21
  5614  001EAE                     __ptext21:
  5615                           	opt stack 0
  5616  001EAE                     _getRTC:
  5617                           	opt stack 18
  5618                           
  5619                           ;RTC.c: 46: I2C_Master_Start();
  5620                           
  5621                           ;incstack = 0
  5622  001EAE  ECAD  F014         	call	_I2C_Master_Start	;wreg free
  5623                           
  5624                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  5625  001EB2  0E00               	movlw	0
  5626  001EB4  0100               	movlb	0	; () banked
  5627  001EB6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5628  001EB8  0ED0               	movlw	208
  5629  001EBA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5630  001EBC  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  5631                           
  5632                           ;RTC.c: 48: I2C_Master_Write(0x00);
  5633  001EC0  0E00               	movlw	0
  5634  001EC2  0100               	movlb	0	; () banked
  5635  001EC4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5636  001EC6  0E00               	movlw	0
  5637  001EC8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5638  001ECA  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  5639                           
  5640                           ;RTC.c: 49: I2C_Master_Stop();
  5641  001ECE  ECA9  F014         	call	_I2C_Master_Stop	;wreg free
  5642                           
  5643                           ;RTC.c: 52: I2C_Master_Start();
  5644  001ED2  ECAD  F014         	call	_I2C_Master_Start	;wreg free
  5645                           
  5646                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  5647  001ED6  0E00               	movlw	0
  5648  001ED8  0100               	movlb	0	; () banked
  5649  001EDA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5650  001EDC  0ED1               	movlw	209
  5651  001EDE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5652  001EE0  EC9B  F014         	call	_I2C_Master_Write	;wreg free
  5653                           
  5654                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  5655  001EE4  0E00               	movlw	0
  5656  001EE6  0100               	movlb	0	; () banked
  5657  001EE8  6F84               	movwf	(getRTC@i+1)& (0+255),b
  5658  001EEA  0E00               	movlw	0
  5659  001EEC  6F83               	movwf	getRTC@i& (0+255),b
  5660  001EEE                     l4199:
  5661                           
  5662                           ; BSR set to: 0
  5663  001EEE  0100               	movlb	0	; () banked
  5664  001EF0  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  5665  001EF2  D008               	goto	l4203
  5666  001EF4  0100               	movlb	0	; () banked
  5667  001EF6  5184               	movf	(getRTC@i+1)& (0+255),w,b
  5668  001EF8  E115               	bnz	l4209
  5669  001EFA  0E06               	movlw	6
  5670  001EFC  0100               	movlb	0	; () banked
  5671  001EFE  5D83               	subwf	getRTC@i& (0+255),w,b
  5672  001F00  B0D8               	btfsc	status,0,c
  5673  001F02  D010               	goto	l4209
  5674  001F04                     l4203:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  5678  001F04  0ED4               	movlw	low _time
  5679  001F06  0100               	movlb	0	; () banked
  5680  001F08  2583               	addwf	getRTC@i& (0+255),w,b
  5681  001F0A  6ED9               	movwf	fsr2l,c
  5682  001F0C  0E00               	movlw	high _time
  5683  001F0E  0100               	movlb	0	; () banked
  5684  001F10  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  5685  001F12  6EDA               	movwf	fsr2h,c
  5686  001F14  0E01               	movlw	1
  5687  001F16  EC77  F013         	call	_I2C_Master_Read
  5688  001F1A  6EDF               	movwf	indf2,c
  5689  001F1C  0100               	movlb	0	; () banked
  5690  001F1E  4B83               	infsnz	getRTC@i& (0+255),f,b
  5691  001F20  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  5692  001F22  D7E5               	goto	l4199
  5693  001F24                     l4209:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;RTC.c: 56: }
  5697                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  5698  001F24  0E00               	movlw	0
  5699  001F26  EC77  F013         	call	_I2C_Master_Read
  5700  001F2A  0100               	movlb	0	; () banked
  5701  001F2C  6FDA               	movwf	(_time+6)& (0+255),b
  5702                           
  5703                           ;RTC.c: 58: I2C_Master_Stop();
  5704  001F2E  ECA9  F014         	call	_I2C_Master_Stop	;wreg free
  5705  001F32  0012               	return		;funcret
  5706  001F34                     __end_of_getRTC:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           intcon3	equ	0xFF0
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           postdec1	equ	0xFE5
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _I2C_Master_Write *****************
  5728 ;; Defined at:
  5729 ;;		line 47 in file "I2C.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  d               2    1[BANK0 ] unsigned int 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5743 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;Total ram usage:        2 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    8
  5750 ;; This function calls:
  5751 ;;		_I2C_Master_Wait
  5752 ;; This function is called by:
  5753 ;;		_loadRTC
  5754 ;;		_getRTC
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text22
  5759  002936                     __ptext22:
  5760                           	opt stack 0
  5761  002936                     _I2C_Master_Write:
  5762                           	opt stack 18
  5763                           
  5764                           ;I2C.c: 49: I2C_Master_Wait();
  5765                           
  5766                           ;incstack = 0
  5767  002936  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5768                           
  5769                           ;I2C.c: 50: SSPBUF = d;
  5770  00293A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5771  00293E  0012               	return		;funcret
  5772  002940                     __end_of_I2C_Master_Write:
  5773                           	opt stack 0
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           prodh	equ	0xFF4
  5779                           prodl	equ	0xFF3
  5780                           intcon	equ	0xFF2
  5781                           intcon3	equ	0xFF0
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _I2C_Master_Stop *****************
  5794 ;; Defined at:
  5795 ;;		line 41 in file "I2C.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    8
  5816 ;; This function calls:
  5817 ;;		_I2C_Master_Wait
  5818 ;; This function is called by:
  5819 ;;		_loadRTC
  5820 ;;		_getRTC
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text23
  5825  002952                     __ptext23:
  5826                           	opt stack 0
  5827  002952                     _I2C_Master_Stop:
  5828                           	opt stack 18
  5829                           
  5830                           ;I2C.c: 43: I2C_Master_Wait();
  5831                           
  5832                           ;incstack = 0
  5833  002952  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5834                           
  5835                           ;I2C.c: 44: PEN = 1;
  5836  002956  84C5               	bsf	4037,2,c	;volatile
  5837  002958  0012               	return		;funcret
  5838  00295A                     __end_of_I2C_Master_Stop:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           intcon3	equ	0xFF0
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           postdec1	equ	0xFE5
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _I2C_Master_Start *****************
  5860 ;; Defined at:
  5861 ;;		line 29 in file "I2C.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;Total ram usage:        0 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    8
  5882 ;; This function calls:
  5883 ;;		_I2C_Master_Wait
  5884 ;; This function is called by:
  5885 ;;		_loadRTC
  5886 ;;		_getRTC
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text24
  5891  00295A                     __ptext24:
  5892                           	opt stack 0
  5893  00295A                     _I2C_Master_Start:
  5894                           	opt stack 18
  5895                           
  5896                           ;I2C.c: 31: I2C_Master_Wait();
  5897                           
  5898                           ;incstack = 0
  5899  00295A  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5900                           
  5901                           ;I2C.c: 32: SEN = 1;
  5902  00295E  80C5               	bsf	4037,0,c	;volatile
  5903  002960  0012               	return		;funcret
  5904  002962                     __end_of_I2C_Master_Start:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           intcon3	equ	0xFF0
  5914                           postinc0	equ	0xFEE
  5915                           wreg	equ	0xFE8
  5916                           postdec1	equ	0xFE5
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _I2C_Master_Read *****************
  5926 ;; Defined at:
  5927 ;;		line 53 in file "I2C.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  a               1    wreg     unsigned char 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  a               1    1[BANK0 ] unsigned char 
  5932 ;;  temp            1    2[BANK0 ] unsigned char 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      unsigned char 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;Total ram usage:        2 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    8
  5949 ;; This function calls:
  5950 ;;		_I2C_Master_Wait
  5951 ;; This function is called by:
  5952 ;;		_getRTC
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text25
  5957  0026EE                     __ptext25:
  5958                           	opt stack 0
  5959  0026EE                     _I2C_Master_Read:
  5960                           	opt stack 18
  5961                           
  5962                           ;incstack = 0
  5963                           ;I2C_Master_Read@a stored from wreg
  5964  0026EE  0100               	movlb	0	; () banked
  5965  0026F0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  5966                           
  5967                           ;I2C.c: 55: unsigned char temp;
  5968                           ;I2C.c: 56: I2C_Master_Wait();
  5969  0026F2  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5970                           
  5971                           ;I2C.c: 57: RCEN = 1;
  5972  0026F6  86C5               	bsf	4037,3,c	;volatile
  5973                           
  5974                           ;I2C.c: 58: I2C_Master_Wait();
  5975  0026F8  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5976                           
  5977                           ;I2C.c: 59: temp = SSPBUF;
  5978  0026FC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  5979                           
  5980                           ;I2C.c: 60: I2C_Master_Wait();
  5981  002700  EC53  F014         	call	_I2C_Master_Wait	;wreg free
  5982                           
  5983                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5984  002704  0100               	movlb	0	; () banked
  5985  002706  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  5986  002708  0100               	movlb	0	; () banked
  5987  00270A  A4D8               	btfss	status,2,c
  5988  00270C  D002               	goto	u2350
  5989  00270E  8AC5               	bsf	4037,5,c	;volatile
  5990  002710  D001               	goto	l3911
  5991  002712                     u2350:
  5992  002712  9AC5               	bcf	4037,5,c	;volatile
  5993  002714                     l3911:
  5994                           
  5995                           ;I2C.c: 62: ACKEN = 1;
  5996  002714  88C5               	bsf	4037,4,c	;volatile
  5997                           
  5998                           ;I2C.c: 63: return temp;
  5999  002716  0100               	movlb	0	; () banked
  6000  002718  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6001  00271A  0012               	return	
  6002  00271C                     __end_of_I2C_Master_Read:
  6003                           	opt stack 0
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           intcon3	equ	0xFF0
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           postdec1	equ	0xFE5
  6015                           fsr1l	equ	0xFE1
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           postdec2	equ	0xFDD
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _I2C_Master_Wait *****************
  6024 ;; Defined at:
  6025 ;;		line 24 in file "I2C.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;Total ram usage:        1 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    7
  6046 ;; This function calls:
  6047 ;;		Nothing
  6048 ;; This function is called by:
  6049 ;;		_I2C_Master_Start
  6050 ;;		_I2C_Master_Stop
  6051 ;;		_I2C_Master_Write
  6052 ;;		_I2C_Master_Read
  6053 ;;		_I2C_Master_RepeatedStart
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           	psect	text26
  6058  0028A6                     __ptext26:
  6059                           	opt stack 0
  6060  0028A6                     _I2C_Master_Wait:
  6061                           	opt stack 18
  6062  0028A6                     l142:
  6063  0028A6  B4C7               	btfsc	4039,2,c	;volatile
  6064  0028A8  D7FE               	goto	l142
  6065  0028AA  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6066  0028AE  0E1F               	movlw	31
  6067  0028B0  0100               	movlb	0	; () banked
  6068  0028B2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6069  0028B4  B4D8               	btfsc	status,2,c
  6070  0028B6  0012               	return	
  6071  0028B8  D7F6               	goto	l142
  6072  0028BA                     __end_of_I2C_Master_Wait:
  6073                           	opt stack 0
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon3	equ	0xFF0
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function _change_state_to_menu_22 *****************
  6094 ;; Defined at:
  6095 ;;		line 439 in file "UI.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;		None
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:        0 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:   10
  6116 ;; This function calls:
  6117 ;;		_lcdInst
  6118 ;;		_printf
  6119 ;; This function is called by:
  6120 ;;		_UI
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text27
  6125  002402                     __ptext27:
  6126                           	opt stack 0
  6127  002402                     _change_state_to_menu_22:
  6128                           	opt stack 19
  6129                           
  6130                           ;UI.c: 440: cur_state = 22;
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;incstack = 0
  6134  002402  0E00               	movlw	0
  6135  002404  0100               	movlb	0	; () banked
  6136  002406  6FE2               	movwf	(_cur_state+1)& (0+255),b
  6137  002408  0E16               	movlw	22
  6138  00240A  6FE1               	movwf	_cur_state& (0+255),b
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;UI.c: 442: lcdInst(0b10000000);;
  6142  00240C  0E80               	movlw	128
  6143  00240E  EC81  F014         	call	_lcdInst
  6144                           
  6145                           ;UI.c: 443: printf("2. SORT        <");
  6146  002412  0E60               	movlw	low STR_19
  6147  002414  0100               	movlb	0	; () banked
  6148  002416  6F8E               	movwf	printf@f& (0+255),b
  6149  002418  0EFF               	movlw	high STR_19
  6150  00241A  0100               	movlb	0	; () banked
  6151  00241C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6152  00241E  ECBB  F002         	call	_printf	;wreg free
  6153                           
  6154                           ;UI.c: 444: lcdInst(0b11000000);;
  6155  002422  0EC0               	movlw	192
  6156  002424  EC81  F014         	call	_lcdInst
  6157                           
  6158                           ;UI.c: 445: printf("3. LOGS         ");
  6159  002428  0E61               	movlw	low STR_21
  6160  00242A  0100               	movlb	0	; () banked
  6161  00242C  6F8E               	movwf	printf@f& (0+255),b
  6162  00242E  0EFE               	movlw	high STR_21
  6163  002430  0100               	movlb	0	; () banked
  6164  002432  6F8F               	movwf	(printf@f+1)& (0+255),b
  6165  002434  ECBB  F002         	call	_printf	;wreg free
  6166  002438  0012               	return		;funcret
  6167  00243A                     __end_of_change_state_to_menu_22:
  6168                           	opt stack 0
  6169                           tblptru	equ	0xFF8
  6170                           tblptrh	equ	0xFF7
  6171                           tblptrl	equ	0xFF6
  6172                           tablat	equ	0xFF5
  6173                           prodh	equ	0xFF4
  6174                           prodl	equ	0xFF3
  6175                           intcon	equ	0xFF2
  6176                           intcon3	equ	0xFF0
  6177                           postinc0	equ	0xFEE
  6178                           wreg	equ	0xFE8
  6179                           postdec1	equ	0xFE5
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _change_state_to_menu_12 *****************
  6189 ;; Defined at:
  6190 ;;		line 431 in file "UI.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      void 
  6197 ;; Registers used:
  6198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;Total ram usage:        0 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:   10
  6211 ;; This function calls:
  6212 ;;		_lcdInst
  6213 ;;		_printf
  6214 ;; This function is called by:
  6215 ;;		_UI
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text28
  6220  00243A                     __ptext28:
  6221                           	opt stack 0
  6222  00243A                     _change_state_to_menu_12:
  6223                           	opt stack 19
  6224                           
  6225                           ;UI.c: 432: cur_state = 12;
  6226                           
  6227                           ;incstack = 0
  6228  00243A  0E00               	movlw	0
  6229  00243C  0100               	movlb	0	; () banked
  6230  00243E  6FE2               	movwf	(_cur_state+1)& (0+255),b
  6231  002440  0E0C               	movlw	12
  6232  002442  6FE1               	movwf	_cur_state& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;UI.c: 434: lcdInst(0b10000000);;
  6236  002444  0E80               	movlw	128
  6237  002446  EC81  F014         	call	_lcdInst
  6238                           
  6239                           ;UI.c: 435: printf("1. DATE/TIME    ");
  6240  00244A  0E83               	movlw	low STR_18
  6241  00244C  0100               	movlb	0	; () banked
  6242  00244E  6F8E               	movwf	printf@f& (0+255),b
  6243  002450  0EFE               	movlw	high STR_18
  6244  002452  0100               	movlb	0	; () banked
  6245  002454  6F8F               	movwf	(printf@f+1)& (0+255),b
  6246  002456  ECBB  F002         	call	_printf	;wreg free
  6247                           
  6248                           ;UI.c: 436: lcdInst(0b11000000);;
  6249  00245A  0EC0               	movlw	192
  6250  00245C  EC81  F014         	call	_lcdInst
  6251                           
  6252                           ;UI.c: 437: printf("2. SORT        <");
  6253  002460  0E60               	movlw	low STR_19
  6254  002462  0100               	movlb	0	; () banked
  6255  002464  6F8E               	movwf	printf@f& (0+255),b
  6256  002466  0EFF               	movlw	high STR_19
  6257  002468  0100               	movlb	0	; () banked
  6258  00246A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6259  00246C  ECBB  F002         	call	_printf	;wreg free
  6260  002470  0012               	return		;funcret
  6261  002472                     __end_of_change_state_to_menu_12:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon3	equ	0xFF0
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           postdec1	equ	0xFE5
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           postdec2	equ	0xFDD
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _printf *****************
  6283 ;; Defined at:
  6284 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6287 ;;		 -> STR_51(4), STR_50(21), STR_49(11), STR_48(24), 
  6288 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
  6289 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
  6290 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
  6291 ;;		 -> STR_23(17), STR_22(17), STR_21(17), STR_20(17), 
  6292 ;;		 -> STR_19(17), STR_18(17), STR_17(17), STR_16(17), 
  6293 ;;		 -> STR_15(17), STR_14(3), STR_13(17), STR_12(17), 
  6294 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(18), 
  6295 ;;		 -> STR_7(10), STR_6(17), STR_5(7), STR_4(17), 
  6296 ;;		 -> STR_3(18), STR_2(21), STR_1(17), 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  tmpval          4    0        struct .
  6299 ;;  width           2   41[BANK0 ] int 
  6300 ;;  len             2   37[BANK0 ] unsigned int 
  6301 ;;  val             2   35[BANK0 ] unsigned int 
  6302 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6303 ;;		 -> STR_52(7), printRTC@month(4), 
  6304 ;;  ap              2   31[BANK0 ] PTR void [1]
  6305 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6306 ;;  c               1   40[BANK0 ] char 
  6307 ;;  flag            1   39[BANK0 ] unsigned char 
  6308 ;;  prec            1   30[BANK0 ] char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  2   14[BANK0 ] int 
  6311 ;; Registers used:
  6312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6318 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;Total ram usage:       29 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    9
  6325 ;; This function calls:
  6326 ;;		___lwdiv
  6327 ;;		___lwmod
  6328 ;;		___wmul
  6329 ;;		_isdigit
  6330 ;;		_putch
  6331 ;; This function is called by:
  6332 ;;		_UI
  6333 ;;		_change_state_to_menu_start
  6334 ;;		_change_state_to_menu_12
  6335 ;;		_change_state_to_menu_22
  6336 ;;		_printRTC
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text29
  6341  000576                     __ptext29:
  6342                           	opt stack 0
  6343  000576                     _printf:
  6344                           	opt stack 19
  6345                           
  6346                           ;doprnt.c: 466: va_list ap;
  6347                           ;doprnt.c: 499: signed char c;
  6348                           ;doprnt.c: 501: int width;
  6349                           ;doprnt.c: 506: signed char prec;
  6350                           ;doprnt.c: 508: unsigned char flag;
  6351                           ;doprnt.c: 523: union {
  6352                           ;doprnt.c: 524: unsigned long vd;
  6353                           ;doprnt.c: 525: double integ;
  6354                           ;doprnt.c: 526: } tmpval;
  6355                           ;doprnt.c: 528: unsigned int val;
  6356                           ;doprnt.c: 529: unsigned len;
  6357                           ;doprnt.c: 530: const char * cp;
  6358                           ;doprnt.c: 533: *ap = __va_start();
  6359                           
  6360                           ;incstack = 0
  6361  000576  0E90               	movlw	low (?_printf+2)
  6362  000578  0100               	movlb	0	; () banked
  6363  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6364  00057C  0E00               	movlw	high (?_printf+2)
  6365  00057E  0100               	movlb	0	; () banked
  6366  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6367                           
  6368                           ;doprnt.c: 536: while(c = *f++) {
  6369  000582  D1EE               	goto	l4193
  6370  000584                     l4069:
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;doprnt.c: 538: if(c != '%')
  6374  000584  0E25               	movlw	37
  6375  000586  0100               	movlb	0	; () banked
  6376  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6377  00058A  B4D8               	btfsc	status,2,c
  6378  00058C  D005               	goto	l4073
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;doprnt.c: 540: {
  6382                           ;doprnt.c: 541: (putch(c) );
  6383  00058E  0100               	movlb	0	; () banked
  6384  000590  51A8               	movf	printf@c& (0+255),w,b
  6385  000592  EC79  F014         	call	_putch
  6386                           
  6387                           ;doprnt.c: 542: continue;
  6388  000596  D1E4               	goto	l4193
  6389  000598                     l4073:
  6390                           
  6391                           ;doprnt.c: 543: }
  6392                           ;doprnt.c: 546: width = 0;
  6393  000598  0E00               	movlw	0
  6394  00059A  0100               	movlb	0	; () banked
  6395  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6396  00059E  0E00               	movlw	0
  6397  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6398                           
  6399                           ;doprnt.c: 548: flag = 0;
  6400  0005A2  0E00               	movlw	0
  6401  0005A4  0100               	movlb	0	; () banked
  6402  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;doprnt.c: 551: switch(*f) {
  6406                           
  6407                           ;doprnt.c: 550: for(;;) {
  6408  0005A8  D005               	goto	l4079
  6409  0005AA                     l4075:
  6410                           
  6411                           ;doprnt.c: 580: flag |= 0x04;
  6412  0005AA  0100               	movlb	0	; () banked
  6413  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6414                           
  6415                           ;doprnt.c: 581: f++;
  6416  0005AE  0100               	movlb	0	; () banked
  6417  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6418  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6419  0005B4                     l4079:
  6420  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6421  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6422  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6423  0005BC  6AF8               	clrf	tblptru,c
  6424  0005BE                     	endif
  6425  0005BE                     	if	0	;tblptru may be non-zero
  6426  0005BE                     	endif
  6427  0005BE  0008               	tblrd		*
  6428  0005C0  50F5               	movf	tablat,w,c
  6429                           
  6430                           ; Switch size 1, requested type "space"
  6431                           ; Number of cases is 1, Range of values is 48 to 48
  6432                           ; switch strategies available:
  6433                           ; Name         Instructions Cycles
  6434                           ; simple_byte            4     3 (average)
  6435                           ;	Chosen strategy is simple_byte
  6436  0005C2  0A30               	xorlw	48	; case 48
  6437  0005C4  B4D8               	btfsc	status,2,c
  6438  0005C6  D7F1               	goto	l4075
  6439                           
  6440                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6441                           
  6442                           ;doprnt.c: 586: }
  6443                           
  6444                           ;doprnt.c: 585: break;
  6445  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6446  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6447  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6448  0005D0  6AF8               	clrf	tblptru,c
  6449  0005D2                     	endif
  6450  0005D2                     	if	0	;tblptru may be non-zero
  6451  0005D2                     	endif
  6452  0005D2  0008               	tblrd		*
  6453  0005D4  50F5               	movf	tablat,w,c
  6454  0005D6  ECBB  F013         	call	_isdigit
  6455  0005DA  A0D8               	btfss	status,0,c
  6456  0005DC  D0CF               	goto	l4125
  6457                           
  6458                           ;doprnt.c: 598: width = 0;
  6459  0005DE  0E00               	movlw	0
  6460  0005E0  0100               	movlb	0	; () banked
  6461  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6462  0005E4  0E00               	movlw	0
  6463  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6464  0005E8                     l4085:
  6465                           
  6466                           ;doprnt.c: 600: width *= 10;
  6467  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6468  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6469  0005F0  0E00               	movlw	0
  6470  0005F2  0100               	movlb	0	; () banked
  6471  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6472  0005F6  0E0A               	movlw	10
  6473  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6474  0005FA  EC54  F012         	call	___wmul	;wreg free
  6475  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6476  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6477                           
  6478                           ;doprnt.c: 601: width += *f++ - '0';
  6479  000606  0ED0               	movlw	208
  6480  000608  0100               	movlb	0	; () banked
  6481  00060A  6F9A               	movwf	??_printf& (0+255),b
  6482  00060C  0EFF               	movlw	255
  6483  00060E  0100               	movlb	0	; () banked
  6484  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6485  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6486  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6487  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6488  00061A  6AF8               	clrf	tblptru,c
  6489  00061C                     	endif
  6490  00061C                     	if	0	;tblptru may be non-zero
  6491  00061C                     	endif
  6492  00061C  0008               	tblrd		*
  6493  00061E  50F5               	movf	tablat,w,c
  6494  000620  0100               	movlb	0	; () banked
  6495  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6496  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6497  000626  0100               	movlb	0	; () banked
  6498  000628  519A               	movf	??_printf& (0+255),w,b
  6499  00062A  0100               	movlb	0	; () banked
  6500  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6501  00062E  0100               	movlb	0	; () banked
  6502  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6503  000632  0100               	movlb	0	; () banked
  6504  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6505  000636  0100               	movlb	0	; () banked
  6506  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6507  00063A  0100               	movlb	0	; () banked
  6508  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6509  00063E  0100               	movlb	0	; () banked
  6510  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6511  000642  0100               	movlb	0	; () banked
  6512  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6513                           
  6514                           ; BSR set to: 0
  6515  000646  0100               	movlb	0	; () banked
  6516  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6517  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6521  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6522  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6523  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6524  000654  6AF8               	clrf	tblptru,c
  6525  000656                     	endif
  6526  000656                     	if	0	;tblptru may be non-zero
  6527  000656                     	endif
  6528  000656  0008               	tblrd		*
  6529  000658  50F5               	movf	tablat,w,c
  6530  00065A  ECBB  F013         	call	_isdigit
  6531  00065E  A0D8               	btfss	status,0,c
  6532  000660  D08D               	goto	l4125
  6533  000662  D7C2               	goto	l4085
  6534  000664                     l4093:
  6535                           
  6536                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6537  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  6538  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6539  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  6540  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  6541  000674  0E02               	movlw	2
  6542  000676  0100               	movlb	0	; () banked
  6543  000678  279F               	addwf	printf@ap& (0+255),f,b
  6544  00067A  0E00               	movlw	0
  6545  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;doprnt.c: 740: if(!cp)
  6549  00067E  0100               	movlb	0	; () banked
  6550  000680  51A1               	movf	printf@cp& (0+255),w,b
  6551  000682  0100               	movlb	0	; () banked
  6552  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  6553  000686  A4D8               	btfss	status,2,c
  6554  000688  D006               	goto	l4101
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;doprnt.c: 741: cp = "(null)";
  6558  00068A  0EB9               	movlw	low STR_52
  6559  00068C  0100               	movlb	0	; () banked
  6560  00068E  6FA1               	movwf	printf@cp& (0+255),b
  6561  000690  0EFF               	movlw	high STR_52
  6562  000692  0100               	movlb	0	; () banked
  6563  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  6564  000696                     l4101:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;doprnt.c: 745: len = 0;
  6568  000696  0E00               	movlw	0
  6569  000698  0100               	movlb	0	; () banked
  6570  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  6571  00069C  0E00               	movlw	0
  6572  00069E  6FA5               	movwf	printf@len& (0+255),b
  6573                           
  6574                           ;doprnt.c: 746: while(cp[len])
  6575  0006A0  D003               	goto	l4105
  6576  0006A2                     l4103:
  6577                           
  6578                           ;doprnt.c: 747: len++;
  6579  0006A2  0100               	movlb	0	; () banked
  6580  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  6581  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  6582  0006A8                     l4105:
  6583                           
  6584                           ; BSR set to: 0
  6585  0006A8  0100               	movlb	0	; () banked
  6586  0006AA  51A5               	movf	printf@len& (0+255),w,b
  6587  0006AC  0100               	movlb	0	; () banked
  6588  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  6589  0006B0  0100               	movlb	0	; () banked
  6590  0006B2  6F9A               	movwf	??_printf& (0+255),b
  6591  0006B4  0100               	movlb	0	; () banked
  6592  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  6593  0006B8  0100               	movlb	0	; () banked
  6594  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  6595  0006BC  0100               	movlb	0	; () banked
  6596  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  6597  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  6598  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  6599  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  6600  0006CA  6EF8               	movwf	tblptru,c
  6601  0006CC  0E0F               	movlw	(high __ramtop+-1)
  6602  0006CE  64F7               	cpfsgt	tblptrh,c
  6603  0006D0  D003               	bra	u2597
  6604  0006D2  0008               	tblrd		*
  6605  0006D4  50F5               	movf	tablat,w,c
  6606  0006D6  D005               	bra	u2590
  6607  0006D8                     u2597:
  6608  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6609  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6610  0006E0  50EF               	movf	indf0,w,c
  6611  0006E2                     u2590:
  6612  0006E2  0900               	iorlw	0
  6613  0006E4  A4D8               	btfss	status,2,c
  6614  0006E6  D7DD               	goto	l4103
  6615                           
  6616                           ;doprnt.c: 757: if(width > len)
  6617  0006E8  0100               	movlb	0	; () banked
  6618  0006EA  51A9               	movf	printf@width& (0+255),w,b
  6619  0006EC  0100               	movlb	0	; () banked
  6620  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  6621  0006F0  0100               	movlb	0	; () banked
  6622  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  6623  0006F4  0100               	movlb	0	; () banked
  6624  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  6625  0006F8  B0D8               	btfsc	status,0,c
  6626  0006FA  D009               	goto	l4111
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;doprnt.c: 758: width -= len;
  6630  0006FC  0100               	movlb	0	; () banked
  6631  0006FE  51A5               	movf	printf@len& (0+255),w,b
  6632  000700  0100               	movlb	0	; () banked
  6633  000702  5FA9               	subwf	printf@width& (0+255),f,b
  6634  000704  0100               	movlb	0	; () banked
  6635  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  6636  000708  0100               	movlb	0	; () banked
  6637  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6638  00070C  D009               	goto	l4115
  6639  00070E                     l4111:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;doprnt.c: 759: else
  6643                           ;doprnt.c: 760: width = 0;
  6644  00070E  0E00               	movlw	0
  6645  000710  0100               	movlb	0	; () banked
  6646  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  6647  000714  0E00               	movlw	0
  6648  000716  6FA9               	movwf	printf@width& (0+255),b
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;doprnt.c: 764: while(width--)
  6652  000718  D003               	goto	l4115
  6653  00071A                     l4113:
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;doprnt.c: 765: (putch(' ') );
  6657  00071A  0E20               	movlw	32
  6658  00071C  EC79  F014         	call	_putch
  6659  000720                     l4115:
  6660  000720  0100               	movlb	0	; () banked
  6661  000722  07A9               	decf	printf@width& (0+255),f,b
  6662  000724  A0D8               	btfss	status,0,c
  6663  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  6664  000728  0100               	movlb	0	; () banked
  6665  00072A  29A9               	incf	printf@width& (0+255),w,b
  6666  00072C  E1F6               	bnz	l4113
  6667  00072E  0100               	movlb	0	; () banked
  6668  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  6669  000732  B4D8               	btfsc	status,2,c
  6670  000734  D017               	goto	l4121
  6671  000736  D7F1               	goto	l4113
  6672  000738                     l4117:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;doprnt.c: 768: (putch(*cp++) );
  6676  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  6677  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6678  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  6679  000742  6EF8               	movwf	tblptru,c
  6680  000744  0E0F               	movlw	(high __ramtop+-1)
  6681  000746  64F7               	cpfsgt	tblptrh,c
  6682  000748  D003               	bra	u2637
  6683  00074A  0008               	tblrd		*
  6684  00074C  50F5               	movf	tablat,w,c
  6685  00074E  D005               	bra	u2630
  6686  000750                     u2637:
  6687  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  6688  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  6689  000758  50EF               	movf	indf0,w,c
  6690  00075A                     u2630:
  6691  00075A  EC79  F014         	call	_putch
  6692  00075E  0100               	movlb	0	; () banked
  6693  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  6694  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6695  000764                     l4121:
  6696                           
  6697                           ; BSR set to: 0
  6698  000764  0100               	movlb	0	; () banked
  6699  000766  07A5               	decf	printf@len& (0+255),f,b
  6700  000768  A0D8               	btfss	status,0,c
  6701  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  6702  00076C  0100               	movlb	0	; () banked
  6703  00076E  29A5               	incf	printf@len& (0+255),w,b
  6704  000770  E1E3               	bnz	l4117
  6705  000772  0100               	movlb	0	; () banked
  6706  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  6707  000776  B4D8               	btfsc	status,2,c
  6708  000778  D0F3               	goto	l4193
  6709  00077A  D7DE               	goto	l4117
  6710  00077C                     l4125:
  6711  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  6712  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  6713  000784  0100               	movlb	0	; () banked
  6714  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  6715  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6716  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6717  00078A  6AF8               	clrf	tblptru,c
  6718  00078C                     	endif
  6719  00078C                     	if	0	;tblptru may be non-zero
  6720  00078C                     	endif
  6721  00078C  0008               	tblrd		*
  6722  00078E  CFF5 F0A8          	movff	tablat,printf@c
  6723  000792  0100               	movlb	0	; () banked
  6724  000794  51A8               	movf	printf@c& (0+255),w,b
  6725                           
  6726                           ; Switch size 1, requested type "space"
  6727                           ; Number of cases is 4, Range of values is 0 to 115
  6728                           ; switch strategies available:
  6729                           ; Name         Instructions Cycles
  6730                           ; simple_byte           13     7 (average)
  6731                           ;	Chosen strategy is simple_byte
  6732  000796  0A00               	xorlw	0	; case 0
  6733  000798  B4D8               	btfsc	status,2,c
  6734  00079A  0012               	return	
  6735  00079C  0A64               	xorlw	100	; case 100
  6736  00079E  B4D8               	btfsc	status,2,c
  6737  0007A0  D007               	goto	l4127
  6738  0007A2  0A0D               	xorlw	13	; case 105
  6739  0007A4  B4D8               	btfsc	status,2,c
  6740  0007A6  D004               	goto	l4127
  6741  0007A8  0A1A               	xorlw	26	; case 115
  6742  0007AA  B4D8               	btfsc	status,2,c
  6743  0007AC  D75B               	goto	l4093
  6744  0007AE  D0D8               	goto	l4193
  6745  0007B0                     l4127:
  6746                           
  6747                           ;doprnt.c: 1253: {
  6748                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6749  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  6750  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6751  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  6752  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  6753  0007C0  0E02               	movlw	2
  6754  0007C2  0100               	movlb	0	; () banked
  6755  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  6756  0007C6  0E00               	movlw	0
  6757  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;doprnt.c: 1261: if((int)val < 0) {
  6761  0007CA  0100               	movlb	0	; () banked
  6762  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6763  0007CE  D008               	goto	l4137
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;doprnt.c: 1262: flag |= 0x03;
  6767  0007D0  0E03               	movlw	3
  6768  0007D2  0100               	movlb	0	; () banked
  6769  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;doprnt.c: 1263: val = -val;
  6773  0007D6  0100               	movlb	0	; () banked
  6774  0007D8  6DA3               	negf	printf@val& (0+255),b
  6775  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6776  0007DC  B0D8               	btfsc	status,0,c
  6777  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6778  0007E0                     l4137:
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;doprnt.c: 1264: }
  6782                           ;doprnt.c: 1266: }
  6783                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6784  0007E0  0E01               	movlw	1
  6785  0007E2  0100               	movlb	0	; () banked
  6786  0007E4  6FA8               	movwf	printf@c& (0+255),b
  6787  0007E6                     l4139:
  6788                           
  6789                           ; BSR set to: 0
  6790  0007E6  0E05               	movlw	5
  6791  0007E8  0100               	movlb	0	; () banked
  6792  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  6793  0007EC  B4D8               	btfsc	status,2,c
  6794  0007EE  D019               	goto	l4151
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 1306: if(val < dpowers[c])
  6798                           
  6799                           ; BSR set to: 0
  6800                           
  6801                           ; BSR set to: 0
  6802  0007F0  0100               	movlb	0	; () banked
  6803  0007F2  51A8               	movf	printf@c& (0+255),w,b
  6804  0007F4  0D02               	mullw	2
  6805  0007F6  0EC2               	movlw	low _dpowers
  6806  0007F8  24F3               	addwf	prodl,w,c
  6807  0007FA  6EF6               	movwf	tblptrl,c
  6808  0007FC  0EFD               	movlw	high _dpowers
  6809  0007FE  20F4               	addwfc	prodh,w,c
  6810  000800  6EF7               	movwf	tblptrh,c
  6811  000802                     	if	1	;There are 3 active tblptr bytes
  6812  000802  6AF8               	clrf	tblptru,c
  6813  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  6814  000806  22F8               	addwfc	tblptru,f,c
  6815  000808                     	endif
  6816  000808  0009               	tblrd		*+
  6817  00080A  50F5               	movf	tablat,w,c
  6818  00080C  0100               	movlb	0	; () banked
  6819  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  6820  000810  0009               	tblrd		*+
  6821  000812  50F5               	movf	tablat,w,c
  6822  000814  0100               	movlb	0	; () banked
  6823  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6824  000818  A0D8               	btfss	status,0,c
  6825  00081A  D003               	goto	l4151
  6826                           
  6827                           ; BSR set to: 0
  6828                           
  6829                           ; BSR set to: 0
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;doprnt.c: 1307: break;
  6833  00081C  0100               	movlb	0	; () banked
  6834  00081E  2BA8               	incf	printf@c& (0+255),f,b
  6835  000820  D7E2               	goto	l4139
  6836  000822                     l4151:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6840  000822  0100               	movlb	0	; () banked
  6841  000824  51A9               	movf	printf@width& (0+255),w,b
  6842  000826  0100               	movlb	0	; () banked
  6843  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6844  00082A  B4D8               	btfsc	status,2,c
  6845  00082C  D00B               	goto	l4157
  6846                           
  6847                           ; BSR set to: 0
  6848  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  6849  000832  0E03               	movlw	3
  6850  000834  0100               	movlb	0	; () banked
  6851  000836  179A               	andwf	??_printf& (0+255),f,b
  6852  000838  B4D8               	btfsc	status,2,c
  6853  00083A  D004               	goto	l4157
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;doprnt.c: 1346: width--;
  6857  00083C  0100               	movlb	0	; () banked
  6858  00083E  07A9               	decf	printf@width& (0+255),f,b
  6859  000840  A0D8               	btfss	status,0,c
  6860  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  6861  000844                     l4157:
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;doprnt.c: 1381: if(width > c)
  6865  000844  0E80               	movlw	128
  6866  000846  0100               	movlb	0	; () banked
  6867  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  6868  00084A  0E7F               	movlw	127
  6869  00084C  0100               	movlb	0	; () banked
  6870  00084E  6F9A               	movwf	??_printf& (0+255),b
  6871  000850  0100               	movlb	0	; () banked
  6872  000852  51A9               	movf	printf@width& (0+255),w,b
  6873  000854  0100               	movlb	0	; () banked
  6874  000856  5DA8               	subwf	printf@c& (0+255),w,b
  6875  000858  0100               	movlb	0	; () banked
  6876  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  6877  00085C  0A80               	xorlw	128
  6878  00085E  0100               	movlb	0	; () banked
  6879  000860  599A               	subwfb	??_printf& (0+255),w,b
  6880  000862  B0D8               	btfsc	status,0,c
  6881  000864  D00B               	goto	l4161
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;doprnt.c: 1382: width -= c;
  6885  000866  0100               	movlb	0	; () banked
  6886  000868  51A8               	movf	printf@c& (0+255),w,b
  6887  00086A  0100               	movlb	0	; () banked
  6888  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  6889  00086E  0E00               	movlw	0
  6890  000870  0100               	movlb	0	; () banked
  6891  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  6892  000874  0EFF               	movlw	255
  6893  000876  0100               	movlb	0	; () banked
  6894  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6895  00087A  D005               	goto	l4163
  6896  00087C                     l4161:
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;doprnt.c: 1383: else
  6900                           ;doprnt.c: 1384: width = 0;
  6901  00087C  0E00               	movlw	0
  6902  00087E  0100               	movlb	0	; () banked
  6903  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  6904  000882  0E00               	movlw	0
  6905  000884  6FA9               	movwf	printf@width& (0+255),b
  6906  000886                     l4163:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;doprnt.c: 1387: if(flag & 0x04) {
  6910  000886  0100               	movlb	0	; () banked
  6911  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  6912  00088A  D018               	goto	l4175
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;doprnt.c: 1392: if(flag & 0x03)
  6916  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  6917  000890  0E03               	movlw	3
  6918  000892  0100               	movlb	0	; () banked
  6919  000894  179A               	andwf	??_printf& (0+255),f,b
  6920  000896  B4D8               	btfsc	status,2,c
  6921  000898  D003               	goto	l4169
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;doprnt.c: 1393: (putch('-') );
  6925  00089A  0E2D               	movlw	45
  6926  00089C  EC79  F014         	call	_putch
  6927  0008A0                     l4169:
  6928                           
  6929                           ;doprnt.c: 1415: if(width)
  6930  0008A0  0100               	movlb	0	; () banked
  6931  0008A2  51A9               	movf	printf@width& (0+255),w,b
  6932  0008A4  0100               	movlb	0	; () banked
  6933  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6934  0008A8  B4D8               	btfsc	status,2,c
  6935  0008AA  D025               	goto	l4185
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;doprnt.c: 1417: (putch('0') );
  6939                           
  6940                           ; BSR set to: 0
  6941                           
  6942                           ;doprnt.c: 1416: do
  6943  0008AC  0E30               	movlw	48
  6944  0008AE  EC79  F014         	call	_putch
  6945                           
  6946                           ;doprnt.c: 1418: while(--width);
  6947  0008B2  0100               	movlb	0	; () banked
  6948  0008B4  07A9               	decf	printf@width& (0+255),f,b
  6949  0008B6  A0D8               	btfss	status,0,c
  6950  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  6951  0008BA  D7F2               	goto	l4169
  6952  0008BC                     l4175:
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;doprnt.c: 1422: {
  6956                           ;doprnt.c: 1424: if(width
  6957                           ;doprnt.c: 1428: )
  6958  0008BC  0100               	movlb	0	; () banked
  6959  0008BE  51A9               	movf	printf@width& (0+255),w,b
  6960  0008C0  0100               	movlb	0	; () banked
  6961  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6962  0008C4  B4D8               	btfsc	status,2,c
  6963  0008C6  D00D               	goto	l4181
  6964  0008C8                     l4177:
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;doprnt.c: 1430: (putch(' ') );
  6968  0008C8  0E20               	movlw	32
  6969  0008CA  EC79  F014         	call	_putch
  6970                           
  6971                           ;doprnt.c: 1431: while(--width);
  6972  0008CE  0100               	movlb	0	; () banked
  6973  0008D0  07A9               	decf	printf@width& (0+255),f,b
  6974  0008D2  A0D8               	btfss	status,0,c
  6975  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  6976  0008D6  0100               	movlb	0	; () banked
  6977  0008D8  51A9               	movf	printf@width& (0+255),w,b
  6978  0008DA  0100               	movlb	0	; () banked
  6979  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6980  0008DE  A4D8               	btfss	status,2,c
  6981  0008E0  D7F3               	goto	l4177
  6982  0008E2                     l4181:
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;doprnt.c: 1438: if(flag & 0x03)
  6986  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  6987  0008E6  0E03               	movlw	3
  6988  0008E8  0100               	movlb	0	; () banked
  6989  0008EA  179A               	andwf	??_printf& (0+255),f,b
  6990  0008EC  B4D8               	btfsc	status,2,c
  6991  0008EE  D003               	goto	l4185
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;doprnt.c: 1439: (putch('-') );
  6995  0008F0  0E2D               	movlw	45
  6996  0008F2  EC79  F014         	call	_putch
  6997  0008F6                     l4185:
  6998                           
  6999                           ;doprnt.c: 1469: }
  7000                           ;doprnt.c: 1472: prec = c;
  7001  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7002                           
  7003                           ;doprnt.c: 1474: while(prec--) {
  7004  0008FA  D02C               	goto	l4191
  7005  0008FC                     l4187:
  7006                           
  7007                           ;doprnt.c: 1478: {
  7008                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7009  0008FC  0100               	movlb	0	; () banked
  7010  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7011  000900  0D02               	mullw	2
  7012  000902  0EC2               	movlw	low _dpowers
  7013  000904  24F3               	addwf	prodl,w,c
  7014  000906  6EF6               	movwf	tblptrl,c
  7015  000908  0EFD               	movlw	high _dpowers
  7016  00090A  20F4               	addwfc	prodh,w,c
  7017  00090C  6EF7               	movwf	tblptrh,c
  7018  00090E                     	if	1	;There are 3 active tblptr bytes
  7019  00090E  6AF8               	clrf	tblptru,c
  7020  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7021  000912  22F8               	addwfc	tblptru,f,c
  7022  000914                     	endif
  7023  000914  0009               	tblrd		*+
  7024  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7025  00091A  000A               	tblrd		*-
  7026  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7027  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7028  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7029  000928  ECD9  F00F         	call	___lwdiv	;wreg free
  7030  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7031  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7032  000934  0E00               	movlw	0
  7033  000936  0100               	movlb	0	; () banked
  7034  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7035  00093A  0E0A               	movlw	10
  7036  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7037  00093E  ECB9  F010         	call	___lwmod	;wreg free
  7038  000942  0100               	movlb	0	; () banked
  7039  000944  5187               	movf	?___lwmod& (0+255),w,b
  7040  000946  0F30               	addlw	48
  7041  000948  0100               	movlb	0	; () banked
  7042  00094A  6FA8               	movwf	printf@c& (0+255),b
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;doprnt.c: 1523: }
  7046                           ;doprnt.c: 1524: (putch(c) );
  7047  00094C  0100               	movlb	0	; () banked
  7048  00094E  51A8               	movf	printf@c& (0+255),w,b
  7049  000950  EC79  F014         	call	_putch
  7050  000954                     l4191:
  7051  000954  0100               	movlb	0	; () banked
  7052  000956  079E               	decf	printf@prec& (0+255),f,b
  7053  000958  0100               	movlb	0	; () banked
  7054  00095A  299E               	incf	printf@prec& (0+255),w,b
  7055  00095C  A4D8               	btfss	status,2,c
  7056  00095E  D7CE               	goto	l4187
  7057  000960                     l4193:
  7058  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7059  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7060  000968  0100               	movlb	0	; () banked
  7061  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7062  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7063  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7064  00096E  6AF8               	clrf	tblptru,c
  7065  000970                     	endif
  7066  000970                     	if	0	;tblptru may be non-zero
  7067  000970                     	endif
  7068  000970  0008               	tblrd		*
  7069  000972  CFF5 F0A8          	movff	tablat,printf@c
  7070  000976  0100               	movlb	0	; () banked
  7071  000978  51A8               	movf	printf@c& (0+255),w,b
  7072  00097A  B4D8               	btfsc	status,2,c
  7073  00097C  0012               	return	
  7074  00097E  D602               	goto	l4069
  7075  000980                     __end_of_printf:
  7076                           	opt stack 0
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           intcon3	equ	0xFF0
  7085                           indf0	equ	0xFEF
  7086                           postinc0	equ	0xFEE
  7087                           fsr0h	equ	0xFEA
  7088                           fsr0l	equ	0xFE9
  7089                           wreg	equ	0xFE8
  7090                           postdec1	equ	0xFE5
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _putch *****************
  7100 ;; Defined at:
  7101 ;;		line 18 in file "lcd.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  data            1    wreg     unsigned char 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  data            1    2[BANK0 ] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        1 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    8
  7122 ;; This function calls:
  7123 ;;		_lcdNibble
  7124 ;; This function is called by:
  7125 ;;		_printf
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text30
  7130  0028F2                     __ptext30:
  7131                           	opt stack 0
  7132  0028F2                     _putch:
  7133                           	opt stack 19
  7134                           
  7135                           ;incstack = 0
  7136                           ;putch@data stored from wreg
  7137  0028F2  0100               	movlb	0	; () banked
  7138  0028F4  6F82               	movwf	putch@data& (0+255),b
  7139                           
  7140                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  7141  0028F6  848C               	bsf	3980,2,c	;volatile
  7142                           
  7143                           ;lcd.c: 20: lcdNibble(data);
  7144  0028F8  0100               	movlb	0	; () banked
  7145  0028FA  5182               	movf	putch@data& (0+255),w,b
  7146  0028FC  EC85  F010         	call	_lcdNibble
  7147  002900  0012               	return		;funcret
  7148  002902                     __end_of_putch:
  7149                           	opt stack 0
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           intcon	equ	0xFF2
  7157                           intcon3	equ	0xFF0
  7158                           indf0	equ	0xFEF
  7159                           postinc0	equ	0xFEE
  7160                           fsr0h	equ	0xFEA
  7161                           fsr0l	equ	0xFE9
  7162                           wreg	equ	0xFE8
  7163                           postdec1	equ	0xFE5
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _isdigit *****************
  7173 ;; Defined at:
  7174 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  c               1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  c               1    2[BANK0 ] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;		None               void
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;Total ram usage:        3 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    7
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_printf
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text31
  7203  002776                     __ptext31:
  7204                           	opt stack 0
  7205  002776                     _isdigit:
  7206                           	opt stack 20
  7207                           
  7208                           ;incstack = 0
  7209                           ;isdigit@c stored from wreg
  7210  002776  0100               	movlb	0	; () banked
  7211  002778  6F82               	movwf	isdigit@c& (0+255),b
  7212  00277A  0E00               	movlw	0
  7213  00277C  0100               	movlb	0	; () banked
  7214  00277E  6F81               	movwf	_isdigit$1710& (0+255),b
  7215                           
  7216                           ; BSR set to: 0
  7217  002780  0E3A               	movlw	58
  7218  002782  0100               	movlb	0	; () banked
  7219  002784  6182               	cpfslt	isdigit@c& (0+255),b
  7220  002786  D007               	goto	l3929
  7221                           
  7222                           ; BSR set to: 0
  7223  002788  0E2F               	movlw	47
  7224  00278A  0100               	movlb	0	; () banked
  7225  00278C  6582               	cpfsgt	isdigit@c& (0+255),b
  7226  00278E  D003               	goto	l3929
  7227                           
  7228                           ; BSR set to: 0
  7229  002790  0E01               	movlw	1
  7230  002792  0100               	movlb	0	; () banked
  7231  002794  6F81               	movwf	_isdigit$1710& (0+255),b
  7232  002796                     l3929:
  7233                           
  7234                           ; BSR set to: 0
  7235  002796  C081  F080         	movff	_isdigit$1710,??_isdigit
  7236  00279A  0100               	movlb	0	; () banked
  7237  00279C  3180               	rrcf	??_isdigit& (0+255),w,b
  7238  00279E  0012               	return	
  7239  0027A0                     __end_of_isdigit:
  7240                           	opt stack 0
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           intcon3	equ	0xFF0
  7249                           indf0	equ	0xFEF
  7250                           postinc0	equ	0xFEE
  7251                           fsr0h	equ	0xFEA
  7252                           fsr0l	equ	0xFE9
  7253                           wreg	equ	0xFE8
  7254                           postdec1	equ	0xFE5
  7255                           fsr1l	equ	0xFE1
  7256                           indf2	equ	0xFDF
  7257                           postinc2	equ	0xFDE
  7258                           postdec2	equ	0xFDD
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function ___wmul *****************
  7264 ;; Defined at:
  7265 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7268 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;  product         2    4[BANK0 ] unsigned int 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  2    0[BANK0 ] unsigned int 
  7273 ;; Registers used:
  7274 ;;		wreg, status,2, status,0, prodl, prodh
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:        6 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    7
  7287 ;; This function calls:
  7288 ;;		Nothing
  7289 ;; This function is called by:
  7290 ;;		_printf
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           	psect	text32
  7295  0024A8                     __ptext32:
  7296                           	opt stack 0
  7297  0024A8                     ___wmul:
  7298                           	opt stack 20
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;incstack = 0
  7302  0024A8  0100               	movlb	0	; () banked
  7303  0024AA  5180               	movf	___wmul@multiplier& (0+255),w,b
  7304  0024AC  0100               	movlb	0	; () banked
  7305  0024AE  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7306  0024B0  CFF3 F084          	movff	prodl,___wmul@product
  7307  0024B4  CFF4 F085          	movff	prodh,___wmul@product+1
  7308  0024B8  0100               	movlb	0	; () banked
  7309  0024BA  5180               	movf	___wmul@multiplier& (0+255),w,b
  7310  0024BC  0100               	movlb	0	; () banked
  7311  0024BE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7312  0024C0  50F3               	movf	prodl,w,c
  7313  0024C2  0100               	movlb	0	; () banked
  7314  0024C4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7315  0024C6  0100               	movlb	0	; () banked
  7316  0024C8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7317  0024CA  0100               	movlb	0	; () banked
  7318  0024CC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7319  0024CE  50F3               	movf	prodl,w,c
  7320  0024D0  0100               	movlb	0	; () banked
  7321  0024D2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7322                           
  7323                           ; BSR set to: 0
  7324  0024D4  C084  F080         	movff	___wmul@product,?___wmul
  7325  0024D8  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7326  0024DC  0012               	return	
  7327  0024DE                     __end_of___wmul:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon3	equ	0xFF0
  7337                           indf0	equ	0xFEF
  7338                           postinc0	equ	0xFEE
  7339                           fsr0h	equ	0xFEA
  7340                           fsr0l	equ	0xFE9
  7341                           wreg	equ	0xFE8
  7342                           postdec1	equ	0xFE5
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function ___lwmod *****************
  7352 ;; Defined at:
  7353 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  dividend        2    7[BANK0 ] unsigned int 
  7356 ;;  divisor         2    9[BANK0 ] unsigned int 
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;  counter         1   11[BANK0 ] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  2    7[BANK0 ] unsigned int 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        5 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    7
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		_printf
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text33
  7383  002172                     __ptext33:
  7384                           	opt stack 0
  7385  002172                     ___lwmod:
  7386                           	opt stack 20
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;incstack = 0
  7390  002172  0100               	movlb	0	; () banked
  7391  002174  5189               	movf	___lwmod@divisor& (0+255),w,b
  7392  002176  0100               	movlb	0	; () banked
  7393  002178  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7394  00217A  B4D8               	btfsc	status,2,c
  7395  00217C  D026               	goto	l1662
  7396                           
  7397                           ; BSR set to: 0
  7398  00217E  0E01               	movlw	1
  7399  002180  0100               	movlb	0	; () banked
  7400  002182  6F8B               	movwf	___lwmod@counter& (0+255),b
  7401  002184  D006               	goto	l3967
  7402  002186                     l3965:
  7403                           
  7404                           ; BSR set to: 0
  7405  002186  0100               	movlb	0	; () banked
  7406  002188  90D8               	bcf	status,0,c
  7407  00218A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7408  00218C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7409  00218E  0100               	movlb	0	; () banked
  7410  002190  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7411  002192                     l3967:
  7412                           
  7413                           ; BSR set to: 0
  7414  002192  0100               	movlb	0	; () banked
  7415  002194  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7416  002196  D7F7               	goto	l3965
  7417  002198                     l3969:
  7418                           
  7419                           ; BSR set to: 0
  7420  002198  0100               	movlb	0	; () banked
  7421  00219A  5189               	movf	___lwmod@divisor& (0+255),w,b
  7422  00219C  0100               	movlb	0	; () banked
  7423  00219E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7424  0021A0  0100               	movlb	0	; () banked
  7425  0021A2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7426  0021A4  0100               	movlb	0	; () banked
  7427  0021A6  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7428  0021A8  A0D8               	btfss	status,0,c
  7429  0021AA  D008               	goto	l3973
  7430                           
  7431                           ; BSR set to: 0
  7432  0021AC  0100               	movlb	0	; () banked
  7433  0021AE  5189               	movf	___lwmod@divisor& (0+255),w,b
  7434  0021B0  0100               	movlb	0	; () banked
  7435  0021B2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7436  0021B4  0100               	movlb	0	; () banked
  7437  0021B6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7438  0021B8  0100               	movlb	0	; () banked
  7439  0021BA  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7440  0021BC                     l3973:
  7441                           
  7442                           ; BSR set to: 0
  7443  0021BC  0100               	movlb	0	; () banked
  7444  0021BE  90D8               	bcf	status,0,c
  7445  0021C0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7446  0021C2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7447                           
  7448                           ; BSR set to: 0
  7449  0021C4  0100               	movlb	0	; () banked
  7450  0021C6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7451  0021C8  D7E7               	goto	l3969
  7452  0021CA                     l1662:
  7453                           
  7454                           ; BSR set to: 0
  7455  0021CA  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7456  0021CE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7457                           
  7458                           ; BSR set to: 0
  7459  0021D2  0012               	return		;funcret
  7460  0021D4                     __end_of___lwmod:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           intcon3	equ	0xFF0
  7470                           indf0	equ	0xFEF
  7471                           postinc0	equ	0xFEE
  7472                           fsr0h	equ	0xFEA
  7473                           fsr0l	equ	0xFE9
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function ___lwdiv *****************
  7485 ;; Defined at:
  7486 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  dividend        2    0[BANK0 ] unsigned int 
  7489 ;;  divisor         2    2[BANK0 ] unsigned int 
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;  quotient        2    4[BANK0 ] unsigned int 
  7492 ;;  counter         1    6[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  2    0[BANK0 ] unsigned int 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7502 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7505 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;Total ram usage:        7 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    7
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_printf
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text34
  7517  001FB2                     __ptext34:
  7518                           	opt stack 0
  7519  001FB2                     ___lwdiv:
  7520                           	opt stack 20
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;incstack = 0
  7524  001FB2  0E00               	movlw	0
  7525  001FB4  0100               	movlb	0	; () banked
  7526  001FB6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7527  001FB8  0E00               	movlw	0
  7528  001FBA  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531  001FBC  0100               	movlb	0	; () banked
  7532  001FBE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7533  001FC0  0100               	movlb	0	; () banked
  7534  001FC2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7535  001FC4  B4D8               	btfsc	status,2,c
  7536  001FC6  D02C               	goto	l1652
  7537                           
  7538                           ; BSR set to: 0
  7539  001FC8  0E01               	movlw	1
  7540  001FCA  0100               	movlb	0	; () banked
  7541  001FCC  6F86               	movwf	___lwdiv@counter& (0+255),b
  7542  001FCE  D006               	goto	l3947
  7543  001FD0                     l3945:
  7544                           
  7545                           ; BSR set to: 0
  7546  001FD0  0100               	movlb	0	; () banked
  7547  001FD2  90D8               	bcf	status,0,c
  7548  001FD4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7549  001FD6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7550  001FD8  0100               	movlb	0	; () banked
  7551  001FDA  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7552  001FDC                     l3947:
  7553                           
  7554                           ; BSR set to: 0
  7555  001FDC  0100               	movlb	0	; () banked
  7556  001FDE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7557  001FE0  D7F7               	goto	l3945
  7558  001FE2                     l3949:
  7559                           
  7560                           ; BSR set to: 0
  7561  001FE2  0100               	movlb	0	; () banked
  7562  001FE4  90D8               	bcf	status,0,c
  7563  001FE6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7564  001FE8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7565                           
  7566                           ; BSR set to: 0
  7567  001FEA  0100               	movlb	0	; () banked
  7568  001FEC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7569  001FEE  0100               	movlb	0	; () banked
  7570  001FF0  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7571  001FF2  0100               	movlb	0	; () banked
  7572  001FF4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7573  001FF6  0100               	movlb	0	; () banked
  7574  001FF8  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7575  001FFA  A0D8               	btfss	status,0,c
  7576  001FFC  D00A               	goto	l3957
  7577                           
  7578                           ; BSR set to: 0
  7579  001FFE  0100               	movlb	0	; () banked
  7580  002000  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7581  002002  0100               	movlb	0	; () banked
  7582  002004  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7583  002006  0100               	movlb	0	; () banked
  7584  002008  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7585  00200A  0100               	movlb	0	; () banked
  7586  00200C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7587                           
  7588                           ; BSR set to: 0
  7589  00200E  0100               	movlb	0	; () banked
  7590  002010  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7591  002012                     l3957:
  7592                           
  7593                           ; BSR set to: 0
  7594  002012  0100               	movlb	0	; () banked
  7595  002014  90D8               	bcf	status,0,c
  7596  002016  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7597  002018  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7598                           
  7599                           ; BSR set to: 0
  7600  00201A  0100               	movlb	0	; () banked
  7601  00201C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  7602  00201E  D7E1               	goto	l3949
  7603  002020                     l1652:
  7604                           
  7605                           ; BSR set to: 0
  7606  002020  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  7607  002024  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7608                           
  7609                           ; BSR set to: 0
  7610  002028  0012               	return		;funcret
  7611  00202A                     __end_of___lwdiv:
  7612                           	opt stack 0
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon3	equ	0xFF0
  7621                           indf0	equ	0xFEF
  7622                           postinc0	equ	0xFEE
  7623                           fsr0h	equ	0xFEA
  7624                           fsr0l	equ	0xFE9
  7625                           wreg	equ	0xFE8
  7626                           postdec1	equ	0xFE5
  7627                           fsr1l	equ	0xFE1
  7628                           indf2	equ	0xFDF
  7629                           postinc2	equ	0xFDE
  7630                           postdec2	equ	0xFDD
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function _lcdInst *****************
  7636 ;; Defined at:
  7637 ;;		line 13 in file "lcd.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  data            1    wreg     unsigned char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  data            1    2[BANK0 ] unsigned char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;Total ram usage:        1 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    8
  7658 ;; This function calls:
  7659 ;;		_lcdNibble
  7660 ;; This function is called by:
  7661 ;;		_UI
  7662 ;;		_change_state_to_menu_start
  7663 ;;		_change_state_to_menu_12
  7664 ;;		_change_state_to_menu_22
  7665 ;;		_initLCD
  7666 ;;		_printRTC
  7667 ;;		_Loading
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text35
  7672  002902                     __ptext35:
  7673                           	opt stack 0
  7674  002902                     _lcdInst:
  7675                           	opt stack 20
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;incstack = 0
  7679                           ;lcdInst@data stored from wreg
  7680  002902  0100               	movlb	0	; () banked
  7681  002904  6F82               	movwf	lcdInst@data& (0+255),b
  7682                           
  7683                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7684  002906  948C               	bcf	3980,2,c	;volatile
  7685                           
  7686                           ;lcd.c: 15: lcdNibble(data);
  7687  002908  0100               	movlb	0	; () banked
  7688  00290A  5182               	movf	lcdInst@data& (0+255),w,b
  7689  00290C  EC85  F010         	call	_lcdNibble
  7690  002910  0012               	return		;funcret
  7691  002912                     __end_of_lcdInst:
  7692                           	opt stack 0
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodh	equ	0xFF4
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           intcon3	equ	0xFF0
  7701                           indf0	equ	0xFEF
  7702                           postinc0	equ	0xFEE
  7703                           fsr0h	equ	0xFEA
  7704                           fsr0l	equ	0xFE9
  7705                           wreg	equ	0xFE8
  7706                           postdec1	equ	0xFE5
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _lcdNibble *****************
  7716 ;; Defined at:
  7717 ;;		line 23 in file "lcd.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  data            1    wreg     unsigned char 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  data            1    1[BANK0 ] unsigned char 
  7722 ;;  temp            1    0[BANK0 ] unsigned char 
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      void 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;Total ram usage:        2 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    7
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_lcdInst
  7743 ;;		_putch
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text36
  7748  00210A                     __ptext36:
  7749                           	opt stack 0
  7750  00210A                     _lcdNibble:
  7751                           	opt stack 20
  7752                           
  7753                           ;incstack = 0
  7754                           ;lcdNibble@data stored from wreg
  7755  00210A  0100               	movlb	0	; () banked
  7756  00210C  6F81               	movwf	lcdNibble@data& (0+255),b
  7757                           
  7758                           ;lcd.c: 25: char temp = data & 0xF0;
  7759  00210E  0100               	movlb	0	; () banked
  7760  002110  5181               	movf	lcdNibble@data& (0+255),w,b
  7761  002112  0BF0               	andlw	240
  7762  002114  0100               	movlb	0	; () banked
  7763  002116  6F80               	movwf	lcdNibble@temp& (0+255),b
  7764                           
  7765                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7766  002118  508C               	movf	3980,w,c	;volatile
  7767  00211A  0B0F               	andlw	15
  7768  00211C  6E8C               	movwf	3980,c	;volatile
  7769                           
  7770                           ;lcd.c: 27: LATD = temp | LATD;
  7771  00211E  0100               	movlb	0	; () banked
  7772  002120  5180               	movf	lcdNibble@temp& (0+255),w,b
  7773  002122  108C               	iorwf	3980,w,c	;volatile
  7774  002124  6E8C               	movwf	3980,c	;volatile
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7778  002126  868C               	bsf	3980,3,c	;volatile
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7782  002128  0E42               	movlw	66
  7783  00212A                     u4817:
  7784  00212A  2EE8               	decfsz	wreg,f,c
  7785  00212C  D7FE               	bra	u4817
  7786  00212E  D000               	nop2	
  7787                           
  7788                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7789  002130  968C               	bcf	3980,3,c	;volatile
  7790                           
  7791                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7792  002132  0E42               	movlw	66
  7793  002134                     u4827:
  7794  002134  2EE8               	decfsz	wreg,f,c
  7795  002136  D7FE               	bra	u4827
  7796  002138  D000               	nop2	
  7797                           
  7798                           ;lcd.c: 34: data = data << 4;
  7799  00213A  0100               	movlb	0	; () banked
  7800  00213C  3981               	swapf	lcdNibble@data& (0+255),w,b
  7801  00213E  0BF0               	andlw	240
  7802  002140  0100               	movlb	0	; () banked
  7803  002142  6F81               	movwf	lcdNibble@data& (0+255),b
  7804                           
  7805                           ;lcd.c: 36: temp = data & 0xF0;
  7806  002144  0100               	movlb	0	; () banked
  7807  002146  5181               	movf	lcdNibble@data& (0+255),w,b
  7808  002148  0BF0               	andlw	240
  7809  00214A  0100               	movlb	0	; () banked
  7810  00214C  6F80               	movwf	lcdNibble@temp& (0+255),b
  7811                           
  7812                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7813  00214E  508C               	movf	3980,w,c	;volatile
  7814  002150  0B0F               	andlw	15
  7815  002152  6E8C               	movwf	3980,c	;volatile
  7816                           
  7817                           ;lcd.c: 38: LATD = temp | LATD;
  7818  002154  0100               	movlb	0	; () banked
  7819  002156  5180               	movf	lcdNibble@temp& (0+255),w,b
  7820  002158  108C               	iorwf	3980,w,c	;volatile
  7821  00215A  6E8C               	movwf	3980,c	;volatile
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7825  00215C  868C               	bsf	3980,3,c	;volatile
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7829  00215E  0E42               	movlw	66
  7830  002160                     u4837:
  7831  002160  2EE8               	decfsz	wreg,f,c
  7832  002162  D7FE               	bra	u4837
  7833  002164  D000               	nop2	
  7834                           
  7835                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7836  002166  968C               	bcf	3980,3,c	;volatile
  7837                           
  7838                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7839  002168  0E42               	movlw	66
  7840  00216A                     u4847:
  7841  00216A  2EE8               	decfsz	wreg,f,c
  7842  00216C  D7FE               	bra	u4847
  7843  00216E  D000               	nop2	
  7844  002170  0012               	return		;funcret
  7845  002172                     __end_of_lcdNibble:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           intcon3	equ	0xFF0
  7855                           indf0	equ	0xFEF
  7856                           postinc0	equ	0xFEE
  7857                           fsr0h	equ	0xFEA
  7858                           fsr0l	equ	0xFE9
  7859                           wreg	equ	0xFE8
  7860                           postdec1	equ	0xFE5
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function ___awmod *****************
  7870 ;; Defined at:
  7871 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  dividend        2    0[BANK0 ] int 
  7874 ;;  divisor         2    2[BANK0 ] int 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  sign            1    5[BANK0 ] unsigned char 
  7877 ;;  counter         1    4[BANK0 ] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  2    0[BANK0 ] int 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7887 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;Total ram usage:        6 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    7
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_UI
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text37
  7902  001C54                     __ptext37:
  7903                           	opt stack 0
  7904  001C54                     ___awmod:
  7905                           	opt stack 22
  7906                           
  7907                           ;incstack = 0
  7908  001C54  0E00               	movlw	0
  7909  001C56  0100               	movlb	0	; () banked
  7910  001C58  6F85               	movwf	___awmod@sign& (0+255),b
  7911                           
  7912                           ; BSR set to: 0
  7913  001C5A  0100               	movlb	0	; () banked
  7914  001C5C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7915  001C5E  D008               	goto	l4967
  7916                           
  7917                           ; BSR set to: 0
  7918  001C60  0100               	movlb	0	; () banked
  7919  001C62  6D80               	negf	___awmod@dividend& (0+255),b
  7920  001C64  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7921  001C66  B0D8               	btfsc	status,0,c
  7922  001C68  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7923                           
  7924                           ; BSR set to: 0
  7925  001C6A  0E01               	movlw	1
  7926  001C6C  0100               	movlb	0	; () banked
  7927  001C6E  6F85               	movwf	___awmod@sign& (0+255),b
  7928  001C70                     l4967:
  7929                           
  7930                           ; BSR set to: 0
  7931  001C70  0100               	movlb	0	; () banked
  7932  001C72  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7933  001C74  D005               	goto	l4971
  7934                           
  7935                           ; BSR set to: 0
  7936  001C76  0100               	movlb	0	; () banked
  7937  001C78  6D82               	negf	___awmod@divisor& (0+255),b
  7938  001C7A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7939  001C7C  B0D8               	btfsc	status,0,c
  7940  001C7E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7941  001C80                     l4971:
  7942                           
  7943                           ; BSR set to: 0
  7944  001C80  0100               	movlb	0	; () banked
  7945  001C82  5182               	movf	___awmod@divisor& (0+255),w,b
  7946  001C84  0100               	movlb	0	; () banked
  7947  001C86  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7948  001C88  B4D8               	btfsc	status,2,c
  7949  001C8A  D026               	goto	l4987
  7950                           
  7951                           ; BSR set to: 0
  7952  001C8C  0E01               	movlw	1
  7953  001C8E  0100               	movlb	0	; () banked
  7954  001C90  6F84               	movwf	___awmod@counter& (0+255),b
  7955  001C92  D006               	goto	l4977
  7956  001C94                     l4975:
  7957                           
  7958                           ; BSR set to: 0
  7959  001C94  0100               	movlb	0	; () banked
  7960  001C96  90D8               	bcf	status,0,c
  7961  001C98  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7962  001C9A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7963  001C9C  0100               	movlb	0	; () banked
  7964  001C9E  2B84               	incf	___awmod@counter& (0+255),f,b
  7965  001CA0                     l4977:
  7966                           
  7967                           ; BSR set to: 0
  7968  001CA0  0100               	movlb	0	; () banked
  7969  001CA2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7970  001CA4  D7F7               	goto	l4975
  7971  001CA6                     l4979:
  7972                           
  7973                           ; BSR set to: 0
  7974  001CA6  0100               	movlb	0	; () banked
  7975  001CA8  5182               	movf	___awmod@divisor& (0+255),w,b
  7976  001CAA  0100               	movlb	0	; () banked
  7977  001CAC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7978  001CAE  0100               	movlb	0	; () banked
  7979  001CB0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7980  001CB2  0100               	movlb	0	; () banked
  7981  001CB4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7982  001CB6  A0D8               	btfss	status,0,c
  7983  001CB8  D008               	goto	l4983
  7984                           
  7985                           ; BSR set to: 0
  7986  001CBA  0100               	movlb	0	; () banked
  7987  001CBC  5182               	movf	___awmod@divisor& (0+255),w,b
  7988  001CBE  0100               	movlb	0	; () banked
  7989  001CC0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7990  001CC2  0100               	movlb	0	; () banked
  7991  001CC4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7992  001CC6  0100               	movlb	0	; () banked
  7993  001CC8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7994  001CCA                     l4983:
  7995                           
  7996                           ; BSR set to: 0
  7997  001CCA  0100               	movlb	0	; () banked
  7998  001CCC  90D8               	bcf	status,0,c
  7999  001CCE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8000  001CD0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8001                           
  8002                           ; BSR set to: 0
  8003  001CD2  0100               	movlb	0	; () banked
  8004  001CD4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8005  001CD6  D7E7               	goto	l4979
  8006  001CD8                     l4987:
  8007                           
  8008                           ; BSR set to: 0
  8009  001CD8  0100               	movlb	0	; () banked
  8010  001CDA  5185               	movf	___awmod@sign& (0+255),w,b
  8011  001CDC  0100               	movlb	0	; () banked
  8012  001CDE  B4D8               	btfsc	status,2,c
  8013  001CE0  D005               	goto	l4991
  8014                           
  8015                           ; BSR set to: 0
  8016  001CE2  0100               	movlb	0	; () banked
  8017  001CE4  6D80               	negf	___awmod@dividend& (0+255),b
  8018  001CE6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8019  001CE8  B0D8               	btfsc	status,0,c
  8020  001CEA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8021  001CEC                     l4991:
  8022                           
  8023                           ; BSR set to: 0
  8024  001CEC  C080  F080         	movff	___awmod@dividend,?___awmod
  8025  001CF0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8026  001CF4  0012               	return	
  8027  001CF6                     __end_of___awmod:
  8028                           	opt stack 0
  8029                           tblptru	equ	0xFF8
  8030                           tblptrh	equ	0xFF7
  8031                           tblptrl	equ	0xFF6
  8032                           tablat	equ	0xFF5
  8033                           prodh	equ	0xFF4
  8034                           prodl	equ	0xFF3
  8035                           intcon	equ	0xFF2
  8036                           intcon3	equ	0xFF0
  8037                           indf0	equ	0xFEF
  8038                           postinc0	equ	0xFEE
  8039                           fsr0h	equ	0xFEA
  8040                           fsr0l	equ	0xFE9
  8041                           wreg	equ	0xFE8
  8042                           postdec1	equ	0xFE5
  8043                           fsr1l	equ	0xFE1
  8044                           indf2	equ	0xFDF
  8045                           postinc2	equ	0xFDE
  8046                           postdec2	equ	0xFDD
  8047                           fsr2h	equ	0xFDA
  8048                           fsr2l	equ	0xFD9
  8049                           status	equ	0xFD8
  8050                           
  8051 ;; *************** function ___awdiv *****************
  8052 ;; Defined at:
  8053 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  dividend        2    6[BANK0 ] int 
  8056 ;;  divisor         2    8[BANK0 ] int 
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;  quotient        2   12[BANK0 ] int 
  8059 ;;  sign            1   11[BANK0 ] unsigned char 
  8060 ;;  counter         1   10[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  2    6[BANK0 ] int 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;Total ram usage:        8 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    7
  8077 ;; This function calls:
  8078 ;;		Nothing
  8079 ;; This function is called by:
  8080 ;;		_UI
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           	psect	text38
  8085  001984                     __ptext38:
  8086                           	opt stack 0
  8087  001984                     ___awdiv:
  8088                           	opt stack 22
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;incstack = 0
  8092  001984  0E00               	movlw	0
  8093  001986  0100               	movlb	0	; () banked
  8094  001988  6F8B               	movwf	___awdiv@sign& (0+255),b
  8095                           
  8096                           ; BSR set to: 0
  8097  00198A  0100               	movlb	0	; () banked
  8098  00198C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8099  00198E  D008               	goto	l4923
  8100                           
  8101                           ; BSR set to: 0
  8102  001990  0100               	movlb	0	; () banked
  8103  001992  6D88               	negf	___awdiv@divisor& (0+255),b
  8104  001994  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8105  001996  B0D8               	btfsc	status,0,c
  8106  001998  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8107                           
  8108                           ; BSR set to: 0
  8109  00199A  0E01               	movlw	1
  8110  00199C  0100               	movlb	0	; () banked
  8111  00199E  6F8B               	movwf	___awdiv@sign& (0+255),b
  8112  0019A0                     l4923:
  8113                           
  8114                           ; BSR set to: 0
  8115  0019A0  0100               	movlb	0	; () banked
  8116  0019A2  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8117  0019A4  D008               	goto	l4929
  8118                           
  8119                           ; BSR set to: 0
  8120  0019A6  0100               	movlb	0	; () banked
  8121  0019A8  6D86               	negf	___awdiv@dividend& (0+255),b
  8122  0019AA  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8123  0019AC  B0D8               	btfsc	status,0,c
  8124  0019AE  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8125                           
  8126                           ; BSR set to: 0
  8127  0019B0  0E01               	movlw	1
  8128  0019B2  0100               	movlb	0	; () banked
  8129  0019B4  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8130  0019B6                     l4929:
  8131                           
  8132                           ; BSR set to: 0
  8133  0019B6  0E00               	movlw	0
  8134  0019B8  0100               	movlb	0	; () banked
  8135  0019BA  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8136  0019BC  0E00               	movlw	0
  8137  0019BE  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140  0019C0  0100               	movlb	0	; () banked
  8141  0019C2  5188               	movf	___awdiv@divisor& (0+255),w,b
  8142  0019C4  0100               	movlb	0	; () banked
  8143  0019C6  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8144  0019C8  B4D8               	btfsc	status,2,c
  8145  0019CA  D02C               	goto	l4951
  8146                           
  8147                           ; BSR set to: 0
  8148  0019CC  0E01               	movlw	1
  8149  0019CE  0100               	movlb	0	; () banked
  8150  0019D0  6F8A               	movwf	___awdiv@counter& (0+255),b
  8151  0019D2  D006               	goto	l4937
  8152  0019D4                     l4935:
  8153                           
  8154                           ; BSR set to: 0
  8155  0019D4  0100               	movlb	0	; () banked
  8156  0019D6  90D8               	bcf	status,0,c
  8157  0019D8  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8158  0019DA  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8159  0019DC  0100               	movlb	0	; () banked
  8160  0019DE  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8161  0019E0                     l4937:
  8162                           
  8163                           ; BSR set to: 0
  8164  0019E0  0100               	movlb	0	; () banked
  8165  0019E2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8166  0019E4  D7F7               	goto	l4935
  8167  0019E6                     l4939:
  8168                           
  8169                           ; BSR set to: 0
  8170  0019E6  0100               	movlb	0	; () banked
  8171  0019E8  90D8               	bcf	status,0,c
  8172  0019EA  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8173  0019EC  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8174                           
  8175                           ; BSR set to: 0
  8176  0019EE  0100               	movlb	0	; () banked
  8177  0019F0  5188               	movf	___awdiv@divisor& (0+255),w,b
  8178  0019F2  0100               	movlb	0	; () banked
  8179  0019F4  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8180  0019F6  0100               	movlb	0	; () banked
  8181  0019F8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8182  0019FA  0100               	movlb	0	; () banked
  8183  0019FC  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8184  0019FE  A0D8               	btfss	status,0,c
  8185  001A00  D00A               	goto	l4947
  8186                           
  8187                           ; BSR set to: 0
  8188  001A02  0100               	movlb	0	; () banked
  8189  001A04  5188               	movf	___awdiv@divisor& (0+255),w,b
  8190  001A06  0100               	movlb	0	; () banked
  8191  001A08  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8192  001A0A  0100               	movlb	0	; () banked
  8193  001A0C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8194  001A0E  0100               	movlb	0	; () banked
  8195  001A10  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8196                           
  8197                           ; BSR set to: 0
  8198  001A12  0100               	movlb	0	; () banked
  8199  001A14  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8200  001A16                     l4947:
  8201                           
  8202                           ; BSR set to: 0
  8203  001A16  0100               	movlb	0	; () banked
  8204  001A18  90D8               	bcf	status,0,c
  8205  001A1A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8206  001A1C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8207                           
  8208                           ; BSR set to: 0
  8209  001A1E  0100               	movlb	0	; () banked
  8210  001A20  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8211  001A22  D7E1               	goto	l4939
  8212  001A24                     l4951:
  8213                           
  8214                           ; BSR set to: 0
  8215  001A24  0100               	movlb	0	; () banked
  8216  001A26  518B               	movf	___awdiv@sign& (0+255),w,b
  8217  001A28  0100               	movlb	0	; () banked
  8218  001A2A  B4D8               	btfsc	status,2,c
  8219  001A2C  D005               	goto	l4955
  8220                           
  8221                           ; BSR set to: 0
  8222  001A2E  0100               	movlb	0	; () banked
  8223  001A30  6D8C               	negf	___awdiv@quotient& (0+255),b
  8224  001A32  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8225  001A34  B0D8               	btfsc	status,0,c
  8226  001A36  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8227  001A38                     l4955:
  8228                           
  8229                           ; BSR set to: 0
  8230  001A38  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8231  001A3C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8232  001A40  0012               	return	
  8233  001A42                     __end_of___awdiv:
  8234                           	opt stack 0
  8235                           tblptru	equ	0xFF8
  8236                           tblptrh	equ	0xFF7
  8237                           tblptrl	equ	0xFF6
  8238                           tablat	equ	0xFF5
  8239                           prodh	equ	0xFF4
  8240                           prodl	equ	0xFF3
  8241                           intcon	equ	0xFF2
  8242                           intcon3	equ	0xFF0
  8243                           indf0	equ	0xFEF
  8244                           postinc0	equ	0xFEE
  8245                           fsr0h	equ	0xFEA
  8246                           fsr0l	equ	0xFE9
  8247                           wreg	equ	0xFE8
  8248                           postdec1	equ	0xFE5
  8249                           fsr1l	equ	0xFE1
  8250                           indf2	equ	0xFDF
  8251                           postinc2	equ	0xFDE
  8252                           postdec2	equ	0xFDD
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function _PortTestA5 *****************
  8258 ;; Defined at:
  8259 ;;		line 27 in file "PortHigh.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		None
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    7
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_main
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text39
  8288  0028CE                     __ptext39:
  8289                           	opt stack 0
  8290  0028CE                     _PortTestA5:
  8291                           	opt stack 23
  8292  0028CE                     l228:
  8293  0028CE  A281               	btfss	3969,1,c	;volatile
  8294  0028D0  D7FE               	goto	l228
  8295                           
  8296                           ;PortHigh.c: 31: }
  8297                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8298  0028D2  8A89               	bsf	3977,5,c	;volatile
  8299  0028D4                     l231:
  8300  0028D4  B281               	btfsc	3969,1,c	;volatile
  8301  0028D6  D7FE               	goto	l231
  8302                           
  8303                           ;PortHigh.c: 35: }
  8304                           ;PortHigh.c: 36: __nop();
  8305  0028D8  F000               	nop	
  8306                           
  8307                           ;PortHigh.c: 37: __nop();
  8308  0028DA  F000               	nop	
  8309                           
  8310                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8311  0028DC  9A89               	bcf	3977,5,c	;volatile
  8312  0028DE  0012               	return		;funcret
  8313  0028E0                     __end_of_PortTestA5:
  8314                           	opt stack 0
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodh	equ	0xFF4
  8320                           prodl	equ	0xFF3
  8321                           intcon	equ	0xFF2
  8322                           intcon3	equ	0xFF0
  8323                           indf0	equ	0xFEF
  8324                           postinc0	equ	0xFEE
  8325                           fsr0h	equ	0xFEA
  8326                           fsr0l	equ	0xFE9
  8327                           wreg	equ	0xFE8
  8328                           postdec1	equ	0xFE5
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           postdec2	equ	0xFDD
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function _handler *****************
  8338 ;; Defined at:
  8339 ;;		line 14 in file "interruptHandler.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:       16 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    6
  8360 ;; This function calls:
  8361 ;;		_printSortTimer
  8362 ;;		_updateMenu
  8363 ;;		i2_printf
  8364 ;; This function is called by:
  8365 ;;		Interrupt level 2
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	intcode
  8370  000008                     __pintcode:
  8371                           	opt stack 0
  8372  000008                     _handler:
  8373                           	opt stack 18
  8374                           
  8375                           ;incstack = 0
  8376  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8377  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon3	equ	0xFF0
  8386                           indf0	equ	0xFEF
  8387                           postinc0	equ	0xFEE
  8388                           fsr0h	equ	0xFEA
  8389                           fsr0l	equ	0xFE9
  8390                           wreg	equ	0xFE8
  8391                           postdec1	equ	0xFE5
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400                           	psect	intcode_body
  8401  001866                     __pintcode_body:
  8402                           	opt stack 18
  8403  001866                     int_func:
  8404                           	opt stack 18
  8405  001866  0006               	pop		; remove dummy address from shadow register refresh
  8406  001868  CFFA F04D          	movff	pclath,??_handler+2
  8407  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8408  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8409  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8410  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8411  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8412  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8413  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8414  001888  CFF3 F055          	movff	prodl,??_handler+10
  8415  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8416  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8417  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8418  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8419  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8420                           
  8421                           ;interruptHandler.c: 16: if(INT1IF){
  8422  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8423  0018A2  D018               	goto	i2l5625
  8424                           
  8425                           ;interruptHandler.c: 17: INT1IF = 0;
  8426  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8427                           
  8428                           ;interruptHandler.c: 18: if(machine_state == UI_state) {
  8429  0018A6  0100               	movlb	0	; () banked
  8430  0018A8  51F5               	movf	_machine_state& (0+255),w,b
  8431  0018AA  A4D8               	btfss	status,2,c
  8432  0018AC  D013               	goto	i2l5625
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;interruptHandler.c: 19: input = keys[(PORTB & 0xF0) >> 4];
  8436  0018AE  3881               	swapf	3969,w,c	;volatile
  8437  0018B0  0B0F               	andlw	15
  8438  0018B2  0B0F               	andlw	15
  8439  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8440  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8441  0018B8  0EB1               	movlw	low _keys
  8442  0018BA  244B               	addwf	??_handler,w,c
  8443  0018BC  6EF6               	movwf	tblptrl,c
  8444  0018BE  0EFD               	movlw	high _keys
  8445  0018C0  204C               	addwfc	??_handler+1,w,c
  8446  0018C2  6EF7               	movwf	tblptrh,c
  8447  0018C4                     	if	1	;There are 3 active tblptr bytes
  8448  0018C4  6AF8               	clrf	tblptru,c
  8449  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8450  0018C8  22F8               	addwfc	tblptru,f,c
  8451  0018CA                     	endif
  8452  0018CA  0008               	tblrd		*
  8453  0018CC  CFF5 F079          	movff	tablat,_input
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;interruptHandler.c: 20: updateMenu();
  8457  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8458  0018D4                     i2l5625:
  8459                           
  8460                           ;interruptHandler.c: 21: }
  8461                           ;interruptHandler.c: 22: }
  8462                           ;interruptHandler.c: 25: if(TMR0IF){
  8463  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8464  0018D6  D00E               	goto	i2l5641
  8465                           
  8466                           ;interruptHandler.c: 26: TMR0IF = 0;
  8467  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8468                           
  8469                           ;interruptHandler.c: 27: if(machine_state == Sorting_state){
  8470  0018DA  0100               	movlb	0	; () banked
  8471  0018DC  05F5               	decf	_machine_state& (0+255),w,b
  8472  0018DE  A4D8               	btfss	status,2,c
  8473  0018E0  D009               	goto	i2l5641
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;interruptHandler.c: 28: printSortTimer();
  8477  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8478                           
  8479                           ;interruptHandler.c: 31: T0CON = 0b00010111;
  8480  0018E6  0E17               	movlw	23
  8481  0018E8  6ED5               	movwf	4053,c	;volatile
  8482                           
  8483                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
  8484  0018EA  0E85               	movlw	133
  8485  0018EC  6ED7               	movwf	4055,c	;volatile
  8486                           
  8487                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
  8488  0018EE  0EEE               	movlw	238
  8489  0018F0  6ED6               	movwf	4054,c	;volatile
  8490                           
  8491                           ;interruptHandler.c: 34: TMR0ON = 1;
  8492  0018F2  8ED5               	bsf	4053,7,c	;volatile
  8493  0018F4                     i2l5641:
  8494                           
  8495                           ;interruptHandler.c: 35: }
  8496                           ;interruptHandler.c: 36: }
  8497                           ;interruptHandler.c: 39: if(TMR1IF){
  8498  0018F4  A09E               	btfss	3998,0,c	;volatile
  8499  0018F6  D028               	goto	i2l1178
  8500                           
  8501                           ;interruptHandler.c: 40: TMR1IF = 1;
  8502  0018F8  809E               	bsf	3998,0,c	;volatile
  8503                           
  8504                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  8505  0018FA  0100               	movlb	0	; () banked
  8506  0018FC  05F5               	decf	_machine_state& (0+255),w,b
  8507  0018FE  A4D8               	btfss	status,2,c
  8508  001900  D023               	goto	i2l1178
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;interruptHandler.c: 42: TMR1ON = 0;
  8512  001902  90CD               	bcf	4045,0,c	;volatile
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;interruptHandler.c: 43: T1CON = 0b10110000;
  8516  001904  0EB0               	movlw	176
  8517  001906  6ECD               	movwf	4045,c	;volatile
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;interruptHandler.c: 44: if(was_low){
  8521  001908  5075               	movf	_was_low,w,c
  8522  00190A  1076               	iorwf	_was_low+1,w,c
  8523  00190C  B4D8               	btfsc	status,2,c
  8524  00190E  D00B               	goto	i2l1176
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;interruptHandler.c: 45: LATCbits.LATC1 = 1;
  8528  001910  828B               	bsf	3979,1,c	;volatile
  8529                           
  8530                           ;interruptHandler.c: 46: LATCbits.LATC2 = 1;
  8531  001912  848B               	bsf	3979,2,c	;volatile
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;interruptHandler.c: 47: was_low = 0;
  8535  001914  0E00               	movlw	0
  8536  001916  6E76               	movwf	_was_low+1,c
  8537  001918  0E00               	movlw	0
  8538  00191A  6E75               	movwf	_was_low,c
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;interruptHandler.c: 50: TMR1H = timer1highbits;
  8542  00191C  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;interruptHandler.c: 51: TMR1L = timer1lowbits;
  8546  001920  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  8547  001924  D010               	goto	i2l5671
  8548  001926                     i2l1176:
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;interruptHandler.c: 54: else{
  8552                           ;interruptHandler.c: 55: LATCbits.LATC1 = 0;
  8553  001926  928B               	bcf	3979,1,c	;volatile
  8554                           
  8555                           ;interruptHandler.c: 56: LATCbits.LATC2 = 0;
  8556  001928  948B               	bcf	3979,2,c	;volatile
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;interruptHandler.c: 57: was_low = 1;
  8560  00192A  0E00               	movlw	0
  8561  00192C  6E76               	movwf	_was_low+1,c
  8562  00192E  0E01               	movlw	1
  8563  001930  6E75               	movwf	_was_low,c
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;interruptHandler.c: 58: printf("LEL");
  8567  001932  0EC7               	movlw	low STR_51
  8568  001934  6E0D               	movwf	i2printf@f,c
  8569  001936  0EFF               	movlw	high STR_51
  8570  001938  6E0E               	movwf	i2printf@f+1,c
  8571  00193A  ECC0  F004         	call	i2_printf	;wreg free
  8572                           
  8573                           ;interruptHandler.c: 60: TMR1H = timer1_20ms_high;
  8574  00193E  C07A  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  8575                           
  8576                           ;interruptHandler.c: 61: TMR1L = timer1_20ms_low;
  8577  001942  C07C  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  8578  001946                     i2l5671:
  8579                           
  8580                           ;interruptHandler.c: 62: TMR1ON = 1;
  8581  001946  80CD               	bsf	4045,0,c	;volatile
  8582  001948                     i2l1178:
  8583  001948  C05A  FFF5         	movff	??_handler+15,tablat
  8584  00194C  C059  FFF8         	movff	??_handler+14,tblptru
  8585  001950  C058  FFF7         	movff	??_handler+13,tblptrh
  8586  001954  C057  FFF6         	movff	??_handler+12,tblptrl
  8587  001958  C056  FFF4         	movff	??_handler+11,prodh
  8588  00195C  C055  FFF3         	movff	??_handler+10,prodl
  8589  001960  C054  FFDA         	movff	??_handler+9,fsr2h
  8590  001964  C053  FFD9         	movff	??_handler+8,fsr2l
  8591  001968  C052  FFE2         	movff	??_handler+7,fsr1h
  8592  00196C  C051  FFE1         	movff	??_handler+6,fsr1l
  8593  001970  C050  FFEA         	movff	??_handler+5,fsr0h
  8594  001974  C04F  FFE9         	movff	??_handler+4,fsr0l
  8595  001978  C04E  FFFB         	movff	??_handler+3,pclatu
  8596  00197C  C04D  FFFA         	movff	??_handler+2,pclath
  8597  001980  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8598  001982  0011               	retfie		f
  8599  001984                     __end_of_handler:
  8600                           	opt stack 0
  8601                           pclatu	equ	0xFFB
  8602                           pclath	equ	0xFFA
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           intcon	equ	0xFF2
  8610                           intcon3	equ	0xFF0
  8611                           indf0	equ	0xFEF
  8612                           postinc0	equ	0xFEE
  8613                           fsr0h	equ	0xFEA
  8614                           fsr0l	equ	0xFE9
  8615                           wreg	equ	0xFE8
  8616                           postdec1	equ	0xFE5
  8617                           fsr1h	equ	0xFE2
  8618                           fsr1l	equ	0xFE1
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           fsr2h	equ	0xFDA
  8623                           fsr2l	equ	0xFD9
  8624                           status	equ	0xFD8
  8625                           
  8626 ;; *************** function _updateMenu *****************
  8627 ;; Defined at:
  8628 ;;		line 155 in file "UI.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;		None
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;Total ram usage:        2 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    5
  8649 ;; This function calls:
  8650 ;;		_change_state_to_logs_11
  8651 ;;		_change_state_to_logs_12
  8652 ;;		_change_state_to_logs_22
  8653 ;;		_change_state_to_logs_23
  8654 ;;		_change_state_to_logs_33
  8655 ;;		_change_state_to_logs_34
  8656 ;;		_change_state_to_menu_11
  8657 ;;		_change_state_to_menu_23
  8658 ;;		_dispLogs
  8659 ;;		_inputHandler
  8660 ;;		i2_change_state_to_menu_12
  8661 ;;		i2_change_state_to_menu_22
  8662 ;;		i2_change_state_to_menu_start
  8663 ;; This function is called by:
  8664 ;;		_handler
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text41
  8669  000F90                     __ptext41:
  8670                           	opt stack 0
  8671  000F90                     _updateMenu:
  8672                           	opt stack 18
  8673                           
  8674                           ;UI.c: 156: up = 0; down = 0; enter = 0; back = 0;
  8675                           
  8676                           ;incstack = 0
  8677  000F90  0E00               	movlw	0
  8678  000F92  6E74               	movwf	_up+1,c
  8679  000F94  0E00               	movlw	0
  8680  000F96  6E73               	movwf	_up,c
  8681  000F98  0E00               	movlw	0
  8682  000F9A  6E64               	movwf	_down+1,c
  8683  000F9C  0E00               	movlw	0
  8684  000F9E  6E63               	movwf	_down,c
  8685  000FA0  0E00               	movlw	0
  8686  000FA2  6E66               	movwf	_enter+1,c
  8687  000FA4  0E00               	movlw	0
  8688  000FA6  6E65               	movwf	_enter,c
  8689  000FA8  0E00               	movlw	0
  8690  000FAA  6E5E               	movwf	_back+1,c
  8691  000FAC  0E00               	movlw	0
  8692  000FAE  6E5D               	movwf	_back,c
  8693                           
  8694                           ;UI.c: 157: (INTCONbits.GIE = 0);
  8695  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  8696                           
  8697                           ;UI.c: 159: if (inputHandler()
  8698                           ;UI.c: 162: ){
  8699  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  8700  000FB6  502A               	movf	?_inputHandler,w,c
  8701  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  8702  000FBA  A4D8               	btfss	status,2,c
  8703  000FBC  D112               	goto	i2l5455
  8704  000FBE  D146               	goto	i2l395
  8705  000FC0                     i2l5307:
  8706                           
  8707                           ;UI.c: 166: change_state_to_menu_11();
  8708  000FC0  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
  8709                           
  8710                           ;UI.c: 167: break;
  8711  000FC4  D143               	goto	i2l395
  8712  000FC6                     i2l5309:
  8713                           
  8714                           ;UI.c: 170: if(up){
  8715  000FC6  5073               	movf	_up,w,c
  8716  000FC8  1074               	iorwf	_up+1,w,c
  8717  000FCA  B4D8               	btfsc	status,2,c
  8718  000FCC  D003               	goto	i2l5313
  8719                           
  8720                           ;UI.c: 171: change_state_to_menu_23();
  8721  000FCE  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  8722                           
  8723                           ;UI.c: 172: }
  8724  000FD2  D13C               	goto	i2l395
  8725  000FD4                     i2l5313:
  8726                           
  8727                           ;UI.c: 173: else if(down){
  8728  000FD4  5063               	movf	_down,w,c
  8729  000FD6  1064               	iorwf	_down+1,w,c
  8730  000FD8  B4D8               	btfsc	status,2,c
  8731  000FDA  D003               	goto	i2l5317
  8732                           
  8733                           ;UI.c: 174: change_state_to_menu_12();
  8734  000FDC  ECA0  F012         	call	i2_change_state_to_menu_12	;wreg free
  8735                           
  8736                           ;UI.c: 175: }
  8737  000FE0  D135               	goto	i2l395
  8738  000FE2                     i2l5317:
  8739                           
  8740                           ;UI.c: 176: else if(enter){
  8741  000FE2  5065               	movf	_enter,w,c
  8742  000FE4  1066               	iorwf	_enter+1,w,c
  8743  000FE6  B4D8               	btfsc	status,2,c
  8744  000FE8  D131               	goto	i2l395
  8745                           
  8746                           ;UI.c: 177: change_state_to_menu_start();
  8747  000FEA  ECD0  F013         	call	i2_change_state_to_menu_start	;wreg free
  8748                           
  8749                           ;UI.c: 178: }
  8750                           ;UI.c: 179: break;
  8751  000FEE  D12E               	goto	i2l395
  8752  000FF0                     i2l5321:
  8753                           
  8754                           ;UI.c: 182: if(up){
  8755  000FF0  5073               	movf	_up,w,c
  8756  000FF2  1074               	iorwf	_up+1,w,c
  8757  000FF4  B4D8               	btfsc	status,2,c
  8758  000FF6  D003               	goto	i2l5325
  8759                           
  8760                           ;UI.c: 183: change_state_to_menu_11();
  8761  000FF8  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
  8762                           
  8763                           ;UI.c: 184: }
  8764  000FFC  D127               	goto	i2l395
  8765  000FFE                     i2l5325:
  8766                           
  8767                           ;UI.c: 185: else if(down){
  8768  000FFE  5063               	movf	_down,w,c
  8769  001000  1064               	iorwf	_down+1,w,c
  8770  001002  B4D8               	btfsc	status,2,c
  8771  001004  D011               	goto	i2l5341
  8772                           
  8773                           ;UI.c: 186: change_state_to_menu_23();
  8774  001006  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  8775                           
  8776                           ;UI.c: 187: }
  8777  00100A  D120               	goto	i2l395
  8778  00100C                     i2l5333:
  8779                           
  8780                           ;UI.c: 194: if(up){
  8781  00100C  5073               	movf	_up,w,c
  8782  00100E  1074               	iorwf	_up+1,w,c
  8783  001010  B4D8               	btfsc	status,2,c
  8784  001012  D003               	goto	i2l5337
  8785                           
  8786                           ;UI.c: 195: change_state_to_menu_11();
  8787  001014  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
  8788                           
  8789                           ;UI.c: 196: }
  8790  001018  D119               	goto	i2l395
  8791  00101A                     i2l5337:
  8792                           
  8793                           ;UI.c: 197: else if(down){
  8794  00101A  5063               	movf	_down,w,c
  8795  00101C  1064               	iorwf	_down+1,w,c
  8796  00101E  B4D8               	btfsc	status,2,c
  8797  001020  D003               	goto	i2l5341
  8798                           
  8799                           ;UI.c: 198: change_state_to_menu_23();
  8800  001022  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  8801                           
  8802                           ;UI.c: 199: }
  8803  001026  D112               	goto	i2l395
  8804  001028                     i2l5341:
  8805                           
  8806                           ;UI.c: 200: else if(enter){
  8807  001028  5065               	movf	_enter,w,c
  8808  00102A  1066               	iorwf	_enter+1,w,c
  8809  00102C  B4D8               	btfsc	status,2,c
  8810  00102E  D10E               	goto	i2l395
  8811                           
  8812                           ;UI.c: 201: machine_state = Sorting_state;
  8813  001030  0E01               	movlw	1
  8814  001032  0100               	movlb	0	; () banked
  8815  001034  6FF5               	movwf	_machine_state& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;UI.c: 202: }
  8819                           ;UI.c: 203: break;
  8820                           
  8821                           ; BSR set to: 0
  8822                           
  8823                           ; BSR set to: 0
  8824  001036  D10A               	goto	i2l395
  8825  001038                     i2l5345:
  8826                           
  8827                           ;UI.c: 206: if(up){
  8828  001038  5073               	movf	_up,w,c
  8829  00103A  1074               	iorwf	_up+1,w,c
  8830  00103C  B4D8               	btfsc	status,2,c
  8831  00103E  D003               	goto	i2l5349
  8832                           
  8833                           ;UI.c: 207: change_state_to_menu_22();
  8834  001040  EC88  F012         	call	i2_change_state_to_menu_22	;wreg free
  8835                           
  8836                           ;UI.c: 208: }
  8837  001044  D103               	goto	i2l395
  8838  001046                     i2l5349:
  8839                           
  8840                           ;UI.c: 209: else if(down){
  8841  001046  5063               	movf	_down,w,c
  8842  001048  1064               	iorwf	_down+1,w,c
  8843  00104A  B4D8               	btfsc	status,2,c
  8844  00104C  D003               	goto	i2l5353
  8845                           
  8846                           ;UI.c: 210: change_state_to_menu_11();
  8847  00104E  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
  8848                           
  8849                           ;UI.c: 211: }
  8850  001052  D0FC               	goto	i2l395
  8851  001054                     i2l5353:
  8852                           
  8853                           ;UI.c: 212: else if(enter){
  8854  001054  5065               	movf	_enter,w,c
  8855  001056  1066               	iorwf	_enter+1,w,c
  8856  001058  B4D8               	btfsc	status,2,c
  8857  00105A  D0F8               	goto	i2l395
  8858                           
  8859                           ;UI.c: 213: change_state_to_logs_11();
  8860  00105C  EC48  F013         	call	_change_state_to_logs_11	;wreg free
  8861                           
  8862                           ;UI.c: 214: }
  8863                           ;UI.c: 215: break;
  8864  001060  D0F5               	goto	i2l395
  8865  001062                     i2l5357:
  8866                           
  8867                           ;UI.c: 218: if(up){
  8868  001062  5073               	movf	_up,w,c
  8869  001064  1074               	iorwf	_up+1,w,c
  8870  001066  B4D8               	btfsc	status,2,c
  8871  001068  D003               	goto	i2l5361
  8872                           
  8873                           ;UI.c: 219: change_state_to_logs_34();
  8874  00106A  ECE8  F012         	call	_change_state_to_logs_34	;wreg free
  8875                           
  8876                           ;UI.c: 220: }
  8877  00106E  D0EE               	goto	i2l395
  8878  001070                     i2l5361:
  8879                           
  8880                           ;UI.c: 221: else if(down){
  8881  001070  5063               	movf	_down,w,c
  8882  001072  1064               	iorwf	_down+1,w,c
  8883  001074  B4D8               	btfsc	status,2,c
  8884  001076  D003               	goto	i2l5365
  8885                           
  8886                           ;UI.c: 222: change_state_to_logs_12();
  8887  001078  EC30  F013         	call	_change_state_to_logs_12	;wreg free
  8888                           
  8889                           ;UI.c: 223: }
  8890  00107C  D0E7               	goto	i2l395
  8891  00107E                     i2l5365:
  8892                           
  8893                           ;UI.c: 224: else if(enter){
  8894  00107E  5065               	movf	_enter,w,c
  8895  001080  1066               	iorwf	_enter+1,w,c
  8896  001082  B4D8               	btfsc	status,2,c
  8897  001084  D007               	goto	i2l5369
  8898                           
  8899                           ;UI.c: 225: dispLogs(1);
  8900  001086  0E00               	movlw	0
  8901  001088  6E02               	movwf	dispLogs@myLog+1,c
  8902  00108A  0E01               	movlw	1
  8903  00108C  6E01               	movwf	dispLogs@myLog,c
  8904  00108E  EC5D  F014         	call	_dispLogs	;wreg free
  8905                           
  8906                           ;UI.c: 226: }
  8907  001092  D0DC               	goto	i2l395
  8908  001094                     i2l5369:
  8909                           
  8910                           ;UI.c: 227: else if(back){
  8911  001094  505D               	movf	_back,w,c
  8912  001096  105E               	iorwf	_back+1,w,c
  8913  001098  B4D8               	btfsc	status,2,c
  8914  00109A  D0D8               	goto	i2l395
  8915                           
  8916                           ;UI.c: 228: change_state_to_menu_23();
  8917  00109C  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  8918                           
  8919                           ;UI.c: 229: }
  8920                           ;UI.c: 230: break;
  8921  0010A0  D0D5               	goto	i2l395
  8922  0010A2                     i2l5373:
  8923                           
  8924                           ;UI.c: 233: if(up){
  8925  0010A2  5073               	movf	_up,w,c
  8926  0010A4  1074               	iorwf	_up+1,w,c
  8927  0010A6  B4D8               	btfsc	status,2,c
  8928  0010A8  D003               	goto	i2l5377
  8929                           
  8930                           ;UI.c: 234: change_state_to_logs_11();
  8931  0010AA  EC48  F013         	call	_change_state_to_logs_11	;wreg free
  8932                           
  8933                           ;UI.c: 235: }
  8934  0010AE  D0CE               	goto	i2l395
  8935  0010B0                     i2l5377:
  8936                           
  8937                           ;UI.c: 236: else if(down){
  8938  0010B0  5063               	movf	_down,w,c
  8939  0010B2  1064               	iorwf	_down+1,w,c
  8940  0010B4  B4D8               	btfsc	status,2,c
  8941  0010B6  D003               	goto	i2l5381
  8942                           
  8943                           ;UI.c: 237: change_state_to_logs_23();
  8944  0010B8  EC8E  F013         	call	_change_state_to_logs_23	;wreg free
  8945                           
  8946                           ;UI.c: 238: }
  8947  0010BC  D0C7               	goto	i2l395
  8948  0010BE                     i2l5381:
  8949                           
  8950                           ;UI.c: 239: else if(enter){
  8951  0010BE  5065               	movf	_enter,w,c
  8952  0010C0  1066               	iorwf	_enter+1,w,c
  8953  0010C2  B4D8               	btfsc	status,2,c
  8954  0010C4  D007               	goto	i2l5385
  8955                           
  8956                           ;UI.c: 240: dispLogs(2);
  8957  0010C6  0E00               	movlw	0
  8958  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  8959  0010CA  0E02               	movlw	2
  8960  0010CC  6E01               	movwf	dispLogs@myLog,c
  8961  0010CE  EC5D  F014         	call	_dispLogs	;wreg free
  8962                           
  8963                           ;UI.c: 241: }
  8964  0010D2  D0BC               	goto	i2l395
  8965  0010D4                     i2l5385:
  8966                           
  8967                           ;UI.c: 242: else if(back){
  8968  0010D4  505D               	movf	_back,w,c
  8969  0010D6  105E               	iorwf	_back+1,w,c
  8970  0010D8  B4D8               	btfsc	status,2,c
  8971  0010DA  D0B8               	goto	i2l395
  8972                           
  8973                           ;UI.c: 243: change_state_to_menu_23();
  8974  0010DC  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  8975                           
  8976                           ;UI.c: 244: }
  8977                           ;UI.c: 245: break;
  8978  0010E0  D0B5               	goto	i2l395
  8979  0010E2                     i2l5389:
  8980                           
  8981                           ;UI.c: 248: if(up){
  8982  0010E2  5073               	movf	_up,w,c
  8983  0010E4  1074               	iorwf	_up+1,w,c
  8984  0010E6  B4D8               	btfsc	status,2,c
  8985  0010E8  D003               	goto	i2l5393
  8986                           
  8987                           ;UI.c: 249: change_state_to_logs_11();
  8988  0010EA  EC48  F013         	call	_change_state_to_logs_11	;wreg free
  8989                           
  8990                           ;UI.c: 250: }
  8991  0010EE  D0AE               	goto	i2l395
  8992  0010F0                     i2l5393:
  8993                           
  8994                           ;UI.c: 251: else if(down){
  8995  0010F0  5063               	movf	_down,w,c
  8996  0010F2  1064               	iorwf	_down+1,w,c
  8997  0010F4  B4D8               	btfsc	status,2,c
  8998  0010F6  D003               	goto	i2l5397
  8999                           
  9000                           ;UI.c: 252: change_state_to_logs_23();
  9001  0010F8  EC8E  F013         	call	_change_state_to_logs_23	;wreg free
  9002                           
  9003                           ;UI.c: 253: }
  9004  0010FC  D0A7               	goto	i2l395
  9005  0010FE                     i2l5397:
  9006                           
  9007                           ;UI.c: 254: else if(enter){
  9008  0010FE  5065               	movf	_enter,w,c
  9009  001100  1066               	iorwf	_enter+1,w,c
  9010  001102  B4D8               	btfsc	status,2,c
  9011  001104  D007               	goto	i2l5401
  9012                           
  9013                           ;UI.c: 255: dispLogs(2);
  9014  001106  0E00               	movlw	0
  9015  001108  6E02               	movwf	dispLogs@myLog+1,c
  9016  00110A  0E02               	movlw	2
  9017  00110C  6E01               	movwf	dispLogs@myLog,c
  9018  00110E  EC5D  F014         	call	_dispLogs	;wreg free
  9019                           
  9020                           ;UI.c: 256: }
  9021  001112  D09C               	goto	i2l395
  9022  001114                     i2l5401:
  9023                           
  9024                           ;UI.c: 257: else if(back){
  9025  001114  505D               	movf	_back,w,c
  9026  001116  105E               	iorwf	_back+1,w,c
  9027  001118  B4D8               	btfsc	status,2,c
  9028  00111A  D098               	goto	i2l395
  9029                           
  9030                           ;UI.c: 258: change_state_to_menu_23();
  9031  00111C  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  9032                           
  9033                           ;UI.c: 259: }
  9034                           ;UI.c: 260: break;
  9035  001120  D095               	goto	i2l395
  9036  001122                     i2l5405:
  9037                           
  9038                           ;UI.c: 263: if(up){
  9039  001122  5073               	movf	_up,w,c
  9040  001124  1074               	iorwf	_up+1,w,c
  9041  001126  B4D8               	btfsc	status,2,c
  9042  001128  D003               	goto	i2l5409
  9043                           
  9044                           ;UI.c: 264: change_state_to_logs_22();
  9045  00112A  EC18  F013         	call	_change_state_to_logs_22	;wreg free
  9046                           
  9047                           ;UI.c: 265: }
  9048  00112E  D08E               	goto	i2l395
  9049  001130                     i2l5409:
  9050                           
  9051                           ;UI.c: 266: else if(down){
  9052  001130  5063               	movf	_down,w,c
  9053  001132  1064               	iorwf	_down+1,w,c
  9054  001134  B4D8               	btfsc	status,2,c
  9055  001136  D003               	goto	i2l5413
  9056                           
  9057                           ;UI.c: 267: change_state_to_logs_34();
  9058  001138  ECE8  F012         	call	_change_state_to_logs_34	;wreg free
  9059                           
  9060                           ;UI.c: 268: }
  9061  00113C  D087               	goto	i2l395
  9062  00113E                     i2l5413:
  9063                           
  9064                           ;UI.c: 269: else if(enter){
  9065  00113E  5065               	movf	_enter,w,c
  9066  001140  1066               	iorwf	_enter+1,w,c
  9067  001142  B4D8               	btfsc	status,2,c
  9068  001144  D007               	goto	i2l5417
  9069                           
  9070                           ;UI.c: 270: dispLogs(3);
  9071  001146  0E00               	movlw	0
  9072  001148  6E02               	movwf	dispLogs@myLog+1,c
  9073  00114A  0E03               	movlw	3
  9074  00114C  6E01               	movwf	dispLogs@myLog,c
  9075  00114E  EC5D  F014         	call	_dispLogs	;wreg free
  9076                           
  9077                           ;UI.c: 271: }
  9078  001152  D07C               	goto	i2l395
  9079  001154                     i2l5417:
  9080                           
  9081                           ;UI.c: 272: else if(back){
  9082  001154  505D               	movf	_back,w,c
  9083  001156  105E               	iorwf	_back+1,w,c
  9084  001158  B4D8               	btfsc	status,2,c
  9085  00115A  D078               	goto	i2l395
  9086                           
  9087                           ;UI.c: 273: change_state_to_menu_23();
  9088  00115C  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  9089                           
  9090                           ;UI.c: 274: }
  9091                           ;UI.c: 275: break;
  9092  001160  D075               	goto	i2l395
  9093  001162                     i2l5421:
  9094                           
  9095                           ;UI.c: 278: if(up){
  9096  001162  5073               	movf	_up,w,c
  9097  001164  1074               	iorwf	_up+1,w,c
  9098  001166  B4D8               	btfsc	status,2,c
  9099  001168  D003               	goto	i2l5425
  9100                           
  9101                           ;UI.c: 279: change_state_to_logs_22();
  9102  00116A  EC18  F013         	call	_change_state_to_logs_22	;wreg free
  9103                           
  9104                           ;UI.c: 280: }
  9105  00116E  D06E               	goto	i2l395
  9106  001170                     i2l5425:
  9107                           
  9108                           ;UI.c: 281: else if(down){
  9109  001170  5063               	movf	_down,w,c
  9110  001172  1064               	iorwf	_down+1,w,c
  9111  001174  B4D8               	btfsc	status,2,c
  9112  001176  D003               	goto	i2l5429
  9113                           
  9114                           ;UI.c: 282: change_state_to_logs_34();
  9115  001178  ECE8  F012         	call	_change_state_to_logs_34	;wreg free
  9116                           
  9117                           ;UI.c: 283: }
  9118  00117C  D067               	goto	i2l395
  9119  00117E                     i2l5429:
  9120                           
  9121                           ;UI.c: 284: else if(enter){
  9122  00117E  5065               	movf	_enter,w,c
  9123  001180  1066               	iorwf	_enter+1,w,c
  9124  001182  B4D8               	btfsc	status,2,c
  9125  001184  D007               	goto	i2l5433
  9126                           
  9127                           ;UI.c: 285: dispLogs(3);
  9128  001186  0E00               	movlw	0
  9129  001188  6E02               	movwf	dispLogs@myLog+1,c
  9130  00118A  0E03               	movlw	3
  9131  00118C  6E01               	movwf	dispLogs@myLog,c
  9132  00118E  EC5D  F014         	call	_dispLogs	;wreg free
  9133                           
  9134                           ;UI.c: 286: }
  9135  001192  D05C               	goto	i2l395
  9136  001194                     i2l5433:
  9137                           
  9138                           ;UI.c: 287: else if(back){
  9139  001194  505D               	movf	_back,w,c
  9140  001196  105E               	iorwf	_back+1,w,c
  9141  001198  B4D8               	btfsc	status,2,c
  9142  00119A  D058               	goto	i2l395
  9143                           
  9144                           ;UI.c: 288: change_state_to_menu_23();
  9145  00119C  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  9146                           
  9147                           ;UI.c: 289: }
  9148                           ;UI.c: 290: break;
  9149  0011A0  D055               	goto	i2l395
  9150  0011A2                     i2l5437:
  9151                           
  9152                           ;UI.c: 293: if(up){
  9153  0011A2  5073               	movf	_up,w,c
  9154  0011A4  1074               	iorwf	_up+1,w,c
  9155  0011A6  B4D8               	btfsc	status,2,c
  9156  0011A8  D003               	goto	i2l5441
  9157                           
  9158                           ;UI.c: 294: change_state_to_logs_33();
  9159  0011AA  EC00  F013         	call	_change_state_to_logs_33	;wreg free
  9160                           
  9161                           ;UI.c: 295: }
  9162  0011AE  D04E               	goto	i2l395
  9163  0011B0                     i2l5441:
  9164                           
  9165                           ;UI.c: 296: else if(down){
  9166  0011B0  5063               	movf	_down,w,c
  9167  0011B2  1064               	iorwf	_down+1,w,c
  9168  0011B4  B4D8               	btfsc	status,2,c
  9169  0011B6  D003               	goto	i2l5445
  9170                           
  9171                           ;UI.c: 297: change_state_to_logs_11();
  9172  0011B8  EC48  F013         	call	_change_state_to_logs_11	;wreg free
  9173                           
  9174                           ;UI.c: 298: }
  9175  0011BC  D047               	goto	i2l395
  9176  0011BE                     i2l5445:
  9177                           
  9178                           ;UI.c: 299: else if(enter){
  9179  0011BE  5065               	movf	_enter,w,c
  9180  0011C0  1066               	iorwf	_enter+1,w,c
  9181  0011C2  B4D8               	btfsc	status,2,c
  9182  0011C4  D007               	goto	i2l5449
  9183                           
  9184                           ;UI.c: 300: dispLogs(4);
  9185  0011C6  0E00               	movlw	0
  9186  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9187  0011CA  0E04               	movlw	4
  9188  0011CC  6E01               	movwf	dispLogs@myLog,c
  9189  0011CE  EC5D  F014         	call	_dispLogs	;wreg free
  9190                           
  9191                           ;UI.c: 301: }
  9192  0011D2  D03C               	goto	i2l395
  9193  0011D4                     i2l5449:
  9194                           
  9195                           ;UI.c: 302: else if(back){
  9196  0011D4  505D               	movf	_back,w,c
  9197  0011D6  105E               	iorwf	_back+1,w,c
  9198  0011D8  B4D8               	btfsc	status,2,c
  9199  0011DA  D038               	goto	i2l395
  9200                           
  9201                           ;UI.c: 303: change_state_to_menu_23();
  9202  0011DC  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
  9203                           
  9204                           ;UI.c: 309: }
  9205                           
  9206                           ;UI.c: 308: break;
  9207                           
  9208                           ;UI.c: 307: default:
  9209                           
  9210                           ;UI.c: 304: }
  9211                           ;UI.c: 305: break;
  9212  0011E0  D035               	goto	i2l395
  9213  0011E2                     i2l5455:
  9214  0011E2  C0E1  F043         	movff	_cur_state,??_updateMenu
  9215  0011E6  C0E2  F044         	movff	_cur_state+1,??_updateMenu+1
  9216                           
  9217                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9218                           ; Switch size 1, requested type "space"
  9219                           ; Number of cases is 3, Range of values is 0 to 4
  9220                           ; switch strategies available:
  9221                           ; Name         Instructions Cycles
  9222                           ; simple_byte           10     6 (average)
  9223                           ;	Chosen strategy is simple_byte
  9224  0011EA  5044               	movf	??_updateMenu+1,w,c
  9225  0011EC  0A00               	xorlw	0	; case 0
  9226  0011EE  B4D8               	btfsc	status,2,c
  9227  0011F0  D007               	goto	i2l5815
  9228  0011F2  0A03               	xorlw	3	; case 3
  9229  0011F4  B4D8               	btfsc	status,2,c
  9230  0011F6  D015               	goto	i2l5817
  9231  0011F8  0A07               	xorlw	7	; case 4
  9232  0011FA  B4D8               	btfsc	status,2,c
  9233  0011FC  D020               	goto	i2l5819
  9234  0011FE  D026               	goto	i2l395
  9235  001200                     i2l5815:
  9236                           
  9237                           ; Switch size 1, requested type "space"
  9238                           ; Number of cases is 5, Range of values is 0 to 23
  9239                           ; switch strategies available:
  9240                           ; Name         Instructions Cycles
  9241                           ; simple_byte           16     9 (average)
  9242                           ;	Chosen strategy is simple_byte
  9243  001200  5043               	movf	??_updateMenu,w,c
  9244  001202  0A00               	xorlw	0	; case 0
  9245  001204  B4D8               	btfsc	status,2,c
  9246  001206  D6DC               	goto	i2l5307
  9247  001208  0A0B               	xorlw	11	; case 11
  9248  00120A  B4D8               	btfsc	status,2,c
  9249  00120C  D6DC               	goto	i2l5309
  9250  00120E  0A07               	xorlw	7	; case 12
  9251  001210  B4D8               	btfsc	status,2,c
  9252  001212  D6EE               	goto	i2l5321
  9253  001214  0A1A               	xorlw	26	; case 22
  9254  001216  B4D8               	btfsc	status,2,c
  9255  001218  D6F9               	goto	i2l5333
  9256  00121A  0A01               	xorlw	1	; case 23
  9257  00121C  B4D8               	btfsc	status,2,c
  9258  00121E  D70C               	goto	i2l5345
  9259  001220  D015               	goto	i2l395
  9260  001222                     i2l5817:
  9261                           
  9262                           ; Switch size 1, requested type "space"
  9263                           ; Number of cases is 4, Range of values is 243 to 255
  9264                           ; switch strategies available:
  9265                           ; Name         Instructions Cycles
  9266                           ; simple_byte           13     7 (average)
  9267                           ;	Chosen strategy is simple_byte
  9268  001222  5043               	movf	??_updateMenu,w,c
  9269  001224  0AF3               	xorlw	243	; case 243
  9270  001226  B4D8               	btfsc	status,2,c
  9271  001228  D71C               	goto	i2l5357
  9272  00122A  0A07               	xorlw	7	; case 244
  9273  00122C  B4D8               	btfsc	status,2,c
  9274  00122E  D739               	goto	i2l5373
  9275  001230  0A0A               	xorlw	10	; case 254
  9276  001232  B4D8               	btfsc	status,2,c
  9277  001234  D756               	goto	i2l5389
  9278  001236  0A01               	xorlw	1	; case 255
  9279  001238  B4D8               	btfsc	status,2,c
  9280  00123A  D773               	goto	i2l5405
  9281  00123C  D007               	goto	i2l395
  9282  00123E                     i2l5819:
  9283                           
  9284                           ; Switch size 1, requested type "space"
  9285                           ; Number of cases is 2, Range of values is 9 to 10
  9286                           ; switch strategies available:
  9287                           ; Name         Instructions Cycles
  9288                           ; simple_byte            7     4 (average)
  9289                           ;	Chosen strategy is simple_byte
  9290  00123E  5043               	movf	??_updateMenu,w,c
  9291  001240  0A09               	xorlw	9	; case 9
  9292  001242  B4D8               	btfsc	status,2,c
  9293  001244  D78E               	goto	i2l5421
  9294  001246  0A03               	xorlw	3	; case 10
  9295  001248  B4D8               	btfsc	status,2,c
  9296  00124A  D7AB               	goto	i2l5437
  9297  00124C                     i2l395:
  9298                           
  9299                           ;UI.c: 310: }
  9300                           ;UI.c: 311: (INTCONbits.GIE = 1);
  9301  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9302  00124E  0012               	return		;funcret
  9303  001250                     __end_of_updateMenu:
  9304                           	opt stack 0
  9305                           pclatu	equ	0xFFB
  9306                           pclath	equ	0xFFA
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon3	equ	0xFF0
  9315                           indf0	equ	0xFEF
  9316                           postinc0	equ	0xFEE
  9317                           fsr0h	equ	0xFEA
  9318                           fsr0l	equ	0xFE9
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function i2_change_state_to_menu_start *****************
  9331 ;; Defined at:
  9332 ;;		line 415 in file "UI.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;Total ram usage:        0 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    4
  9353 ;; This function calls:
  9354 ;;		i2_lcdInst
  9355 ;;		i2_printRTC
  9356 ;;		i2_printf
  9357 ;; This function is called by:
  9358 ;;		_updateMenu
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text42
  9363  0027A0                     __ptext42:
  9364                           	opt stack 0
  9365  0027A0                     i2_change_state_to_menu_start:
  9366                           	opt stack 18
  9367                           
  9368                           ;UI.c: 416: cur_state = 0;
  9369                           
  9370                           ;incstack = 0
  9371  0027A0  0E00               	movlw	0
  9372  0027A2  0100               	movlb	0	; () banked
  9373  0027A4  6FE2               	movwf	(_cur_state+1)& (0+255),b
  9374  0027A6  0E00               	movlw	0
  9375  0027A8  6FE1               	movwf	_cur_state& (0+255),b
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;UI.c: 418: lcdInst(0b10000000);;
  9379  0027AA  0E80               	movlw	128
  9380  0027AC  EC95  F014         	call	i2_lcdInst
  9381                           
  9382                           ;UI.c: 419: printRTC();
  9383  0027B0  EC28  F009         	call	i2_printRTC	;wreg free
  9384                           
  9385                           ;UI.c: 420: lcdInst(0b11000000);;
  9386  0027B4  0EC0               	movlw	192
  9387  0027B6  EC95  F014         	call	i2_lcdInst
  9388                           
  9389                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  9390  0027BA  0E93               	movlw	low STR_15
  9391  0027BC  6E0D               	movwf	i2printf@f,c
  9392  0027BE  0EFF               	movlw	high STR_15
  9393  0027C0  6E0E               	movwf	i2printf@f+1,c
  9394  0027C2  ECC0  F004         	call	i2_printf	;wreg free
  9395  0027C6  0012               	return		;funcret
  9396  0027C8                     __end_ofi2_change_state_to_menu_start:
  9397                           	opt stack 0
  9398                           pclatu	equ	0xFFB
  9399                           pclath	equ	0xFFA
  9400                           tblptru	equ	0xFF8
  9401                           tblptrh	equ	0xFF7
  9402                           tblptrl	equ	0xFF6
  9403                           tablat	equ	0xFF5
  9404                           prodh	equ	0xFF4
  9405                           prodl	equ	0xFF3
  9406                           intcon	equ	0xFF2
  9407                           intcon3	equ	0xFF0
  9408                           indf0	equ	0xFEF
  9409                           postinc0	equ	0xFEE
  9410                           fsr0h	equ	0xFEA
  9411                           fsr0l	equ	0xFE9
  9412                           wreg	equ	0xFE8
  9413                           postdec1	equ	0xFE5
  9414                           fsr1h	equ	0xFE2
  9415                           fsr1l	equ	0xFE1
  9416                           indf2	equ	0xFDF
  9417                           postinc2	equ	0xFDE
  9418                           postdec2	equ	0xFDD
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function i2_printRTC *****************
  9424 ;; Defined at:
  9425 ;;		line 61 in file "RTC.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  printRTC       14   44[COMRAM] int [7]
  9430 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9431 ;;  printRTC        2   64[COMRAM] int 
  9432 ;;  printRTC        2   58[COMRAM] int 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      void 
  9435 ;; Registers used:
  9436 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;Total ram usage:       25 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    3
  9449 ;; This function calls:
  9450 ;;		i2_getRTC
  9451 ;;		i2_lcdInst
  9452 ;;		i2_printf
  9453 ;;		i2_strcpy
  9454 ;; This function is called by:
  9455 ;;		i2_change_state_to_menu_start
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           	psect	text43
  9460  001250                     __ptext43:
  9461                           	opt stack 0
  9462  001250                     i2_printRTC:
  9463                           	opt stack 18
  9464                           
  9465                           ;RTC.c: 62: getRTC();
  9466                           
  9467                           ;incstack = 0
  9468  001250  EC15  F010         	call	i2_getRTC	;wreg free
  9469                           
  9470                           ;RTC.c: 63: char month[] = "MMM";
  9471  001254  C0F6  F03D         	movff	printRTC@F3189,i2printRTC@month
  9472  001258  C0F7  F03E         	movff	printRTC@F3189+1,i2printRTC@month+1
  9473  00125C  C0F8  F03F         	movff	printRTC@F3189+2,i2printRTC@month+2
  9474  001260  C0F9  F040         	movff	printRTC@F3189+3,i2printRTC@month+3
  9475                           
  9476                           ;RTC.c: 64: int INT_time[7];
  9477                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9478  001264  0E00               	movlw	0
  9479  001266  6E42               	movwf	i2printRTC@i+1,c
  9480  001268  0E00               	movlw	0
  9481  00126A  6E41               	movwf	i2printRTC@i,c
  9482  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
  9483  00126E  D006               	goto	i2l4615
  9484  001270  5042               	movf	i2printRTC@i+1,w,c
  9485  001272  E135               	bnz	i2l894
  9486  001274  0E07               	movlw	7
  9487  001276  5C41               	subwf	i2printRTC@i,w,c
  9488  001278  B0D8               	btfsc	status,0,c
  9489  00127A  D031               	goto	i2l894
  9490  00127C                     i2l4615:
  9491                           
  9492                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9493  00127C  0ED4               	movlw	low _time
  9494  00127E  2441               	addwf	i2printRTC@i,w,c
  9495  001280  6ED9               	movwf	fsr2l,c
  9496  001282  0E00               	movlw	high _time
  9497  001284  2042               	addwfc	i2printRTC@i+1,w,c
  9498  001286  6EDA               	movwf	fsr2h,c
  9499  001288  50DF               	movf	indf2,w,c
  9500  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
  9501  00128C  3A2A               	swapf	??i2_printRTC,f,c
  9502  00128E  0E0F               	movlw	15
  9503  001290  162A               	andwf	??i2_printRTC,f,c
  9504  001292  0E0F               	movlw	15
  9505  001294  162A               	andwf	??i2_printRTC,f,c
  9506  001296  502A               	movf	??i2_printRTC,w,c
  9507  001298  0D0A               	mullw	10
  9508  00129A  0ED4               	movlw	low _time
  9509  00129C  2441               	addwf	i2printRTC@i,w,c
  9510  00129E  6ED9               	movwf	fsr2l,c
  9511  0012A0  0E00               	movlw	high _time
  9512  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
  9513  0012A4  6EDA               	movwf	fsr2h,c
  9514  0012A6  50DF               	movf	indf2,w,c
  9515  0012A8  0B0F               	andlw	15
  9516  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9517  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9518  0012AE  50F3               	movf	prodl,w,c
  9519  0012B0  262B               	addwf	??i2_printRTC+1,f,c
  9520  0012B2  50F4               	movf	prodh,w,c
  9521  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
  9522  0012B6  90D8               	bcf	status,0,c
  9523  0012B8  3441               	rlcf	i2printRTC@i,w,c
  9524  0012BA  6ED9               	movwf	fsr2l,c
  9525  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
  9526  0012BE  6EDA               	movwf	fsr2h,c
  9527  0012C0  0E2D               	movlw	low i2printRTC@INT_time
  9528  0012C2  26D9               	addwf	fsr2l,f,c
  9529  0012C4  0E00               	movlw	high i2printRTC@INT_time
  9530  0012C6  22DA               	addwfc	fsr2h,f,c
  9531  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9532  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9533  0012D0  4A41               	infsnz	i2printRTC@i,f,c
  9534  0012D2  2A42               	incf	i2printRTC@i+1,f,c
  9535  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
  9536  0012D6  D7D2               	goto	i2l4615
  9537  0012D8  5042               	movf	i2printRTC@i+1,w,c
  9538  0012DA  E101               	bnz	i2u322_40
  9539  0012DC  D7CB               	goto	L7
  9540  0012DE                     i2u322_40:
  9541  0012DE                     i2l894:
  9542                           
  9543                           ;RTC.c: 67: }
  9544                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9545  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9546  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9547                           
  9548                           ;RTC.c: 69: switch(RTC_month){
  9549  0012E6  D084               	goto	i2l4647
  9550  0012E8                     i2l4621:
  9551                           
  9552                           ;RTC.c: 71: strcpy(month, "Jan");
  9553  0012E8  0E3D               	movlw	low i2printRTC@month
  9554  0012EA  6E01               	movwf	i2strcpy@to,c
  9555  0012EC  0E00               	movlw	high i2printRTC@month
  9556  0012EE  6E02               	movwf	i2strcpy@to+1,c
  9557  0012F0  0EDB               	movlw	low STR_36
  9558  0012F2  6E03               	movwf	i2strcpy@from,c
  9559  0012F4  0EFF               	movlw	high STR_36
  9560  0012F6  6E04               	movwf	i2strcpy@from+1,c
  9561  0012F8  EC6F  F012         	call	i2_strcpy	;wreg free
  9562                           
  9563                           ;RTC.c: 72: break;
  9564  0012FC  D0A6               	goto	i2l4649
  9565  0012FE                     i2l4623:
  9566                           
  9567                           ;RTC.c: 74: strcpy(month, "Feb");
  9568  0012FE  0E3D               	movlw	low i2printRTC@month
  9569  001300  6E01               	movwf	i2strcpy@to,c
  9570  001302  0E00               	movlw	high i2printRTC@month
  9571  001304  6E02               	movwf	i2strcpy@to+1,c
  9572  001306  0ECB               	movlw	low STR_37
  9573  001308  6E03               	movwf	i2strcpy@from,c
  9574  00130A  0EFF               	movlw	high STR_37
  9575  00130C  6E04               	movwf	i2strcpy@from+1,c
  9576  00130E  EC6F  F012         	call	i2_strcpy	;wreg free
  9577                           
  9578                           ;RTC.c: 75: break;
  9579  001312  D09B               	goto	i2l4649
  9580  001314                     i2l4625:
  9581                           
  9582                           ;RTC.c: 77: strcpy(month, "Mar");
  9583  001314  0E3D               	movlw	low i2printRTC@month
  9584  001316  6E01               	movwf	i2strcpy@to,c
  9585  001318  0E00               	movlw	high i2printRTC@month
  9586  00131A  6E02               	movwf	i2strcpy@to+1,c
  9587  00131C  0EE7               	movlw	low STR_38
  9588  00131E  6E03               	movwf	i2strcpy@from,c
  9589  001320  0EFF               	movlw	high STR_38
  9590  001322  6E04               	movwf	i2strcpy@from+1,c
  9591  001324  EC6F  F012         	call	i2_strcpy	;wreg free
  9592                           
  9593                           ;RTC.c: 78: break;
  9594  001328  D090               	goto	i2l4649
  9595  00132A                     i2l4627:
  9596                           
  9597                           ;RTC.c: 80: strcpy(month, "Apr");
  9598  00132A  0E3D               	movlw	low i2printRTC@month
  9599  00132C  6E01               	movwf	i2strcpy@to,c
  9600  00132E  0E00               	movlw	high i2printRTC@month
  9601  001330  6E02               	movwf	i2strcpy@to+1,c
  9602  001332  0EEB               	movlw	low STR_39
  9603  001334  6E03               	movwf	i2strcpy@from,c
  9604  001336  0EFF               	movlw	high STR_39
  9605  001338  6E04               	movwf	i2strcpy@from+1,c
  9606  00133A  EC6F  F012         	call	i2_strcpy	;wreg free
  9607                           
  9608                           ;RTC.c: 81: break;
  9609  00133E  D085               	goto	i2l4649
  9610  001340                     i2l4629:
  9611                           
  9612                           ;RTC.c: 83: strcpy(month, "May");
  9613  001340  0E3D               	movlw	low i2printRTC@month
  9614  001342  6E01               	movwf	i2strcpy@to,c
  9615  001344  0E00               	movlw	high i2printRTC@month
  9616  001346  6E02               	movwf	i2strcpy@to+1,c
  9617  001348  0EF7               	movlw	low STR_40
  9618  00134A  6E03               	movwf	i2strcpy@from,c
  9619  00134C  0EFF               	movlw	high STR_40
  9620  00134E  6E04               	movwf	i2strcpy@from+1,c
  9621  001350  EC6F  F012         	call	i2_strcpy	;wreg free
  9622                           
  9623                           ;RTC.c: 84: break;
  9624  001354  D07A               	goto	i2l4649
  9625  001356                     i2l4631:
  9626                           
  9627                           ;RTC.c: 86: strcpy(month, "Jun");
  9628  001356  0E3D               	movlw	low i2printRTC@month
  9629  001358  6E01               	movwf	i2strcpy@to,c
  9630  00135A  0E00               	movlw	high i2printRTC@month
  9631  00135C  6E02               	movwf	i2strcpy@to+1,c
  9632  00135E  0EDF               	movlw	low STR_41
  9633  001360  6E03               	movwf	i2strcpy@from,c
  9634  001362  0EFF               	movlw	high STR_41
  9635  001364  6E04               	movwf	i2strcpy@from+1,c
  9636  001366  EC6F  F012         	call	i2_strcpy	;wreg free
  9637                           
  9638                           ;RTC.c: 87: break;
  9639  00136A  D06F               	goto	i2l4649
  9640  00136C                     i2l4633:
  9641                           
  9642                           ;RTC.c: 89: strcpy(month, "Jul");
  9643  00136C  0E3D               	movlw	low i2printRTC@month
  9644  00136E  6E01               	movwf	i2strcpy@to,c
  9645  001370  0E00               	movlw	high i2printRTC@month
  9646  001372  6E02               	movwf	i2strcpy@to+1,c
  9647  001374  0ED7               	movlw	low STR_42
  9648  001376  6E03               	movwf	i2strcpy@from,c
  9649  001378  0EFF               	movlw	high STR_42
  9650  00137A  6E04               	movwf	i2strcpy@from+1,c
  9651  00137C  EC6F  F012         	call	i2_strcpy	;wreg free
  9652                           
  9653                           ;RTC.c: 90: break;
  9654  001380  D064               	goto	i2l4649
  9655  001382                     i2l4635:
  9656                           
  9657                           ;RTC.c: 92: strcpy(month, "Aug");
  9658  001382  0E3D               	movlw	low i2printRTC@month
  9659  001384  6E01               	movwf	i2strcpy@to,c
  9660  001386  0E00               	movlw	high i2printRTC@month
  9661  001388  6E02               	movwf	i2strcpy@to+1,c
  9662  00138A  0ED3               	movlw	low STR_43
  9663  00138C  6E03               	movwf	i2strcpy@from,c
  9664  00138E  0EFF               	movlw	high STR_43
  9665  001390  6E04               	movwf	i2strcpy@from+1,c
  9666  001392  EC6F  F012         	call	i2_strcpy	;wreg free
  9667                           
  9668                           ;RTC.c: 93: break;
  9669  001396  D059               	goto	i2l4649
  9670  001398                     i2l4637:
  9671                           
  9672                           ;RTC.c: 95: strcpy(month, "Sep");
  9673  001398  0E3D               	movlw	low i2printRTC@month
  9674  00139A  6E01               	movwf	i2strcpy@to,c
  9675  00139C  0E00               	movlw	high i2printRTC@month
  9676  00139E  6E02               	movwf	i2strcpy@to+1,c
  9677  0013A0  0EE3               	movlw	low STR_44
  9678  0013A2  6E03               	movwf	i2strcpy@from,c
  9679  0013A4  0EFF               	movlw	high STR_44
  9680  0013A6  6E04               	movwf	i2strcpy@from+1,c
  9681  0013A8  EC6F  F012         	call	i2_strcpy	;wreg free
  9682                           
  9683                           ;RTC.c: 96: break;
  9684  0013AC  D04E               	goto	i2l4649
  9685  0013AE                     i2l4639:
  9686                           
  9687                           ;RTC.c: 98: strcpy(month, "Oct");
  9688  0013AE  0E3D               	movlw	low i2printRTC@month
  9689  0013B0  6E01               	movwf	i2strcpy@to,c
  9690  0013B2  0E00               	movlw	high i2printRTC@month
  9691  0013B4  6E02               	movwf	i2strcpy@to+1,c
  9692  0013B6  0EEF               	movlw	low STR_45
  9693  0013B8  6E03               	movwf	i2strcpy@from,c
  9694  0013BA  0EFF               	movlw	high STR_45
  9695  0013BC  6E04               	movwf	i2strcpy@from+1,c
  9696  0013BE  EC6F  F012         	call	i2_strcpy	;wreg free
  9697                           
  9698                           ;RTC.c: 99: break;
  9699  0013C2  D043               	goto	i2l4649
  9700  0013C4                     i2l4641:
  9701                           
  9702                           ;RTC.c: 101: strcpy(month, "Nov");
  9703  0013C4  0E3D               	movlw	low i2printRTC@month
  9704  0013C6  6E01               	movwf	i2strcpy@to,c
  9705  0013C8  0E00               	movlw	high i2printRTC@month
  9706  0013CA  6E02               	movwf	i2strcpy@to+1,c
  9707  0013CC  0EF3               	movlw	low STR_46
  9708  0013CE  6E03               	movwf	i2strcpy@from,c
  9709  0013D0  0EFF               	movlw	high STR_46
  9710  0013D2  6E04               	movwf	i2strcpy@from+1,c
  9711  0013D4  EC6F  F012         	call	i2_strcpy	;wreg free
  9712                           
  9713                           ;RTC.c: 102: break;
  9714  0013D8  D038               	goto	i2l4649
  9715  0013DA                     i2l4643:
  9716                           
  9717                           ;RTC.c: 104: strcpy(month, "Dec");
  9718  0013DA  0E3D               	movlw	low i2printRTC@month
  9719  0013DC  6E01               	movwf	i2strcpy@to,c
  9720  0013DE  0E00               	movlw	high i2printRTC@month
  9721  0013E0  6E02               	movwf	i2strcpy@to+1,c
  9722  0013E2  0ECF               	movlw	low STR_47
  9723  0013E4  6E03               	movwf	i2strcpy@from,c
  9724  0013E6  0EFF               	movlw	high STR_47
  9725  0013E8  6E04               	movwf	i2strcpy@from+1,c
  9726  0013EA  EC6F  F012         	call	i2_strcpy	;wreg free
  9727                           
  9728                           ;RTC.c: 106: }
  9729                           
  9730                           ;RTC.c: 105: break;
  9731  0013EE  D02D               	goto	i2l4649
  9732  0013F0                     i2l4647:
  9733  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9734  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9735                           
  9736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9737                           ; Switch size 1, requested type "space"
  9738                           ; Number of cases is 1, Range of values is 0 to 0
  9739                           ; switch strategies available:
  9740                           ; Name         Instructions Cycles
  9741                           ; simple_byte            4     3 (average)
  9742                           ;	Chosen strategy is simple_byte
  9743  0013F8  502B               	movf	??i2_printRTC+1,w,c
  9744  0013FA  0A00               	xorlw	0	; case 0
  9745  0013FC  A4D8               	btfss	status,2,c
  9746  0013FE  D025               	goto	i2l4649
  9747                           
  9748                           ; Switch size 1, requested type "space"
  9749                           ; Number of cases is 12, Range of values is 1 to 12
  9750                           ; switch strategies available:
  9751                           ; Name         Instructions Cycles
  9752                           ; simple_byte           37    19 (average)
  9753                           ;	Chosen strategy is simple_byte
  9754  001400  502A               	movf	??i2_printRTC,w,c
  9755  001402  0A01               	xorlw	1	; case 1
  9756  001404  B4D8               	btfsc	status,2,c
  9757  001406  D770               	goto	i2l4621
  9758  001408  0A03               	xorlw	3	; case 2
  9759  00140A  B4D8               	btfsc	status,2,c
  9760  00140C  D778               	goto	i2l4623
  9761  00140E  0A01               	xorlw	1	; case 3
  9762  001410  B4D8               	btfsc	status,2,c
  9763  001412  D780               	goto	i2l4625
  9764  001414  0A07               	xorlw	7	; case 4
  9765  001416  B4D8               	btfsc	status,2,c
  9766  001418  D788               	goto	i2l4627
  9767  00141A  0A01               	xorlw	1	; case 5
  9768  00141C  B4D8               	btfsc	status,2,c
  9769  00141E  D790               	goto	i2l4629
  9770  001420  0A03               	xorlw	3	; case 6
  9771  001422  B4D8               	btfsc	status,2,c
  9772  001424  D798               	goto	i2l4631
  9773  001426  0A01               	xorlw	1	; case 7
  9774  001428  B4D8               	btfsc	status,2,c
  9775  00142A  D7A0               	goto	i2l4633
  9776  00142C  0A0F               	xorlw	15	; case 8
  9777  00142E  B4D8               	btfsc	status,2,c
  9778  001430  D7A8               	goto	i2l4635
  9779  001432  0A01               	xorlw	1	; case 9
  9780  001434  B4D8               	btfsc	status,2,c
  9781  001436  D7B0               	goto	i2l4637
  9782  001438  0A03               	xorlw	3	; case 10
  9783  00143A  B4D8               	btfsc	status,2,c
  9784  00143C  D7B8               	goto	i2l4639
  9785  00143E  0A01               	xorlw	1	; case 11
  9786  001440  B4D8               	btfsc	status,2,c
  9787  001442  D7C0               	goto	i2l4641
  9788  001444  0A07               	xorlw	7	; case 12
  9789  001446  B4D8               	btfsc	status,2,c
  9790  001448  D7C8               	goto	i2l4643
  9791  00144A                     i2l4649:
  9792                           
  9793                           ;RTC.c: 107: lcdInst(0b10000000);;
  9794  00144A  0E80               	movlw	128
  9795  00144C  EC95  F014         	call	i2_lcdInst
  9796                           
  9797                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9798  001450  0ECC               	movlw	low STR_48
  9799  001452  6E0D               	movwf	i2printf@f,c
  9800  001454  0EFD               	movlw	high STR_48
  9801  001456  6E0E               	movwf	i2printf@f+1,c
  9802  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9803  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9804  001460  0E3D               	movlw	low i2printRTC@month
  9805  001462  6E11               	movwf	?i2_printf+4,c
  9806  001464  0E00               	movlw	high i2printRTC@month
  9807  001466  6E12               	movwf	?i2_printf+5,c
  9808  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9809  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9810  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9811  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9812  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9813  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9814  001480  ECC0  F004         	call	i2_printf	;wreg free
  9815  001484  0012               	return		;funcret
  9816  001486                     __end_ofi2_printRTC:
  9817                           	opt stack 0
  9818                           pclatu	equ	0xFFB
  9819                           pclath	equ	0xFFA
  9820                           tblptru	equ	0xFF8
  9821                           tblptrh	equ	0xFF7
  9822                           tblptrl	equ	0xFF6
  9823                           tablat	equ	0xFF5
  9824                           prodh	equ	0xFF4
  9825                           prodl	equ	0xFF3
  9826                           intcon	equ	0xFF2
  9827                           intcon3	equ	0xFF0
  9828                           indf0	equ	0xFEF
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           postdec1	equ	0xFE5
  9834                           fsr1h	equ	0xFE2
  9835                           fsr1l	equ	0xFE1
  9836                           indf2	equ	0xFDF
  9837                           postinc2	equ	0xFDE
  9838                           postdec2	equ	0xFDD
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function i2_strcpy *****************
  9844 ;; Defined at:
  9845 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  to              2    0[COMRAM] PTR unsigned char 
  9848 ;;		 -> printRTC@month(4), 
  9849 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9850 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9851 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9852 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9855 ;;		 -> printRTC@month(4), 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  2    0[COMRAM] PTR unsigned char 
  9858 ;; Registers used:
  9859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;Total ram usage:        6 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; This function calls:
  9872 ;;		Nothing
  9873 ;; This function is called by:
  9874 ;;		i2_printRTC
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text44
  9879  0024DE                     __ptext44:
  9880                           	opt stack 0
  9881  0024DE                     i2_strcpy:
  9882                           	opt stack 20
  9883                           
  9884                           ;incstack = 0
  9885  0024DE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9886  0024E2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9887  0024E6  D004               	goto	i2l4391
  9888  0024E8                     i2l4389:
  9889  0024E8  4A05               	infsnz	i2strcpy@cp,f,c
  9890  0024EA  2A06               	incf	i2strcpy@cp+1,f,c
  9891  0024EC  4A03               	infsnz	i2strcpy@from,f,c
  9892  0024EE  2A04               	incf	i2strcpy@from+1,f,c
  9893  0024F0                     i2l4391:
  9894  0024F0  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9895  0024F4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9896  0024F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9897  0024F8  6AF8               	clrf	tblptru,c
  9898  0024FA                     	endif
  9899  0024FA                     	if	0	;tblptru may be non-zero
  9900  0024FA                     	endif
  9901  0024FA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9902  0024FE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9903  002502  0008               	tblrd		*
  9904  002504  CFF5 FFDF          	movff	tablat,indf2
  9905  002508  50DF               	movf	indf2,w,c
  9906  00250A  B4D8               	btfsc	status,2,c
  9907  00250C  0012               	return	
  9908  00250E  D7EC               	goto	i2l4389
  9909  002510                     __end_ofi2_strcpy:
  9910                           	opt stack 0
  9911                           pclatu	equ	0xFFB
  9912                           pclath	equ	0xFFA
  9913                           tblptru	equ	0xFF8
  9914                           tblptrh	equ	0xFF7
  9915                           tblptrl	equ	0xFF6
  9916                           tablat	equ	0xFF5
  9917                           prodh	equ	0xFF4
  9918                           prodl	equ	0xFF3
  9919                           intcon	equ	0xFF2
  9920                           intcon3	equ	0xFF0
  9921                           indf0	equ	0xFEF
  9922                           postinc0	equ	0xFEE
  9923                           fsr0h	equ	0xFEA
  9924                           fsr0l	equ	0xFE9
  9925                           wreg	equ	0xFE8
  9926                           postdec1	equ	0xFE5
  9927                           fsr1h	equ	0xFE2
  9928                           fsr1l	equ	0xFE1
  9929                           indf2	equ	0xFDF
  9930                           postinc2	equ	0xFDE
  9931                           postdec2	equ	0xFDD
  9932                           fsr2h	equ	0xFDA
  9933                           fsr2l	equ	0xFD9
  9934                           status	equ	0xFD8
  9935                           
  9936 ;; *************** function _inputHandler *****************
  9937 ;; Defined at:
  9938 ;;		line 314 in file "UI.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  2   41[COMRAM] int 
  9945 ;; Registers used:
  9946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9952 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;Total ram usage:        4 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    4
  9959 ;; This function calls:
  9960 ;;		_change_state_to_logs_11
  9961 ;;		_change_state_to_logs_12
  9962 ;;		_change_state_to_logs_22
  9963 ;;		_change_state_to_logs_23
  9964 ;;		_change_state_to_logs_33
  9965 ;;		_change_state_to_logs_34
  9966 ;;		_change_state_to_menu_11
  9967 ;;		_change_state_to_menu_23
  9968 ;;		i2_change_state_to_menu_12
  9969 ;;		i2_change_state_to_menu_22
  9970 ;; This function is called by:
  9971 ;;		_updateMenu
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           	psect	text45
  9976  001680                     __ptext45:
  9977                           	opt stack 0
  9978  001680                     _inputHandler:
  9979                           	opt stack 18
  9980                           
  9981                           ;UI.c: 319: if(firstboot){
  9982                           
  9983                           ;incstack = 0
  9984  001680  5067               	movf	_firstboot,w,c
  9985  001682  1068               	iorwf	_firstboot+1,w,c
  9986  001684  B4D8               	btfsc	status,2,c
  9987  001686  D00B               	goto	i2l4717
  9988                           
  9989                           ;UI.c: 320: change_state_to_menu_11();
  9990  001688  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
  9991                           
  9992                           ;UI.c: 321: firstboot = 0;
  9993  00168C  0E00               	movlw	0
  9994  00168E  6E68               	movwf	_firstboot+1,c
  9995  001690  0E00               	movlw	0
  9996  001692  6E67               	movwf	_firstboot,c
  9997                           
  9998                           ;UI.c: 322: return 0;
  9999  001694  0E00               	movlw	0
 10000  001696  6E2B               	movwf	?_inputHandler+1,c
 10001  001698  0E00               	movlw	0
 10002  00169A  6E2A               	movwf	?_inputHandler,c
 10003  00169C  0012               	return	
 10004  00169E                     i2l4717:
 10005                           
 10006                           ;UI.c: 323: }
 10007                           ;UI.c: 324: if (logstate){
 10008  00169E  0100               	movlb	0	; () banked
 10009  0016A0  51EF               	movf	_logstate& (0+255),w,b
 10010  0016A2  0100               	movlb	0	; () banked
 10011  0016A4  11F0               	iorwf	(_logstate+1)& (0+255),w,b
 10012  0016A6  B4D8               	btfsc	status,2,c
 10013  0016A8  D0C7               	goto	i2l4835
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;UI.c: 325: if(input == 'C' && PORTBbits.RB1 == 1){
 10017  0016AA  0E43               	movlw	67
 10018  0016AC  1879               	xorwf	_input,w,c
 10019  0016AE  A4D8               	btfss	status,2,c
 10020  0016B0  D012               	goto	i2l4735
 10021                           
 10022                           ; BSR set to: 0
 10023  0016B2  B281               	btfsc	3969,1,c	;volatile
 10024  0016B4  D009               	goto	i2l4727
 10025  0016B6  D00F               	goto	i2l4735
 10026  0016B8                     i2l4725:
 10027                           
 10028                           ;UI.c: 328: _delay((unsigned long)((10)*(32000000/4000.0)));
 10029  0016B8  0E68               	movlw	104
 10030  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10031  0016BC  0EE4               	movlw	228
 10032  0016BE                     i2u485_47:
 10033  0016BE  2EE8               	decfsz	wreg,f,c
 10034  0016C0  D7FE               	bra	i2u485_47
 10035  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10036  0016C4  D7FC               	bra	i2u485_47
 10037  0016C6  D000               	nop2	
 10038  0016C8                     i2l4727:
 10039  0016C8  B281               	btfsc	3969,1,c	;volatile
 10040  0016CA  D7F6               	goto	i2l4725
 10041  0016CC                     i2l4729:
 10042                           
 10043                           ;UI.c: 329: }
 10044                           ;UI.c: 330: return 0;
 10045  0016CC  0E00               	movlw	0
 10046  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10047  0016D0  0E00               	movlw	0
 10048  0016D2  6E2A               	movwf	?_inputHandler,c
 10049  0016D4  0012               	return	
 10050  0016D6                     i2l4735:
 10051                           
 10052                           ;UI.c: 332: else if (input == 'D'){
 10053  0016D6  0E44               	movlw	68
 10054  0016D8  1879               	xorwf	_input,w,c
 10055  0016DA  A4D8               	btfss	status,2,c
 10056  0016DC  D7F7               	goto	i2l4729
 10057                           
 10058                           ;UI.c: 334: logstate = 0;
 10059  0016DE  0E00               	movlw	0
 10060  0016E0  0100               	movlb	0	; () banked
 10061  0016E2  6FF0               	movwf	(_logstate+1)& (0+255),b
 10062  0016E4  0E00               	movlw	0
 10063  0016E6  6FEF               	movwf	_logstate& (0+255),b
 10064                           
 10065                           ;UI.c: 335: switch(cur_state){
 10066  0016E8  D012               	goto	i2l4753
 10067  0016EA                     i2l4739:
 10068                           
 10069                           ;UI.c: 337: change_state_to_logs_11();
 10070  0016EA  EC48  F013         	call	_change_state_to_logs_11	;wreg free
 10071                           
 10072                           ;UI.c: 338: break;
 10073  0016EE  D7EE               	goto	i2l4729
 10074  0016F0                     i2l4741:
 10075                           
 10076                           ;UI.c: 340: change_state_to_logs_12();
 10077  0016F0  EC30  F013         	call	_change_state_to_logs_12	;wreg free
 10078                           
 10079                           ;UI.c: 341: break;
 10080  0016F4  D7EB               	goto	i2l4729
 10081  0016F6                     i2l4743:
 10082                           
 10083                           ;UI.c: 343: change_state_to_logs_22();
 10084  0016F6  EC18  F013         	call	_change_state_to_logs_22	;wreg free
 10085                           
 10086                           ;UI.c: 344: break;
 10087  0016FA  D7E8               	goto	i2l4729
 10088  0016FC                     i2l4745:
 10089                           
 10090                           ;UI.c: 346: change_state_to_logs_23();
 10091  0016FC  EC8E  F013         	call	_change_state_to_logs_23	;wreg free
 10092                           
 10093                           ;UI.c: 347: break;
 10094  001700  D7E5               	goto	i2l4729
 10095  001702                     i2l4747:
 10096                           
 10097                           ;UI.c: 349: change_state_to_logs_33();
 10098  001702  EC00  F013         	call	_change_state_to_logs_33	;wreg free
 10099                           
 10100                           ;UI.c: 350: break;
 10101  001706  D7E2               	goto	i2l4729
 10102  001708                     i2l4749:
 10103                           
 10104                           ;UI.c: 352: change_state_to_logs_34();
 10105  001708  ECE8  F012         	call	_change_state_to_logs_34	;wreg free
 10106                           
 10107                           ;UI.c: 354: }
 10108                           
 10109                           ;UI.c: 353: break;
 10110  00170C  D7DF               	goto	i2l4729
 10111  00170E                     i2l4753:
 10112  00170E  C0E1  F02C         	movff	_cur_state,??_inputHandler
 10113  001712  C0E2  F02D         	movff	_cur_state+1,??_inputHandler+1
 10114                           
 10115                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10116                           ; Switch size 1, requested type "space"
 10117                           ; Number of cases is 2, Range of values is 3 to 4
 10118                           ; switch strategies available:
 10119                           ; Name         Instructions Cycles
 10120                           ; simple_byte            7     4 (average)
 10121                           ;	Chosen strategy is simple_byte
 10122  001716  502D               	movf	??_inputHandler+1,w,c
 10123  001718  0A03               	xorlw	3	; case 3
 10124  00171A  B4D8               	btfsc	status,2,c
 10125  00171C  D004               	goto	i2l5823
 10126  00171E  0A07               	xorlw	7	; case 4
 10127  001720  B4D8               	btfsc	status,2,c
 10128  001722  D00F               	goto	i2l5825
 10129  001724  D7D3               	goto	i2l4729
 10130  001726                     i2l5823:
 10131                           
 10132                           ; Switch size 1, requested type "space"
 10133                           ; Number of cases is 4, Range of values is 243 to 255
 10134                           ; switch strategies available:
 10135                           ; Name         Instructions Cycles
 10136                           ; simple_byte           13     7 (average)
 10137                           ;	Chosen strategy is simple_byte
 10138  001726  502C               	movf	??_inputHandler,w,c
 10139  001728  0AF3               	xorlw	243	; case 243
 10140  00172A  B4D8               	btfsc	status,2,c
 10141  00172C  D7DE               	goto	i2l4739
 10142  00172E  0A07               	xorlw	7	; case 244
 10143  001730  B4D8               	btfsc	status,2,c
 10144  001732  D7DE               	goto	i2l4741
 10145  001734  0A0A               	xorlw	10	; case 254
 10146  001736  B4D8               	btfsc	status,2,c
 10147  001738  D7DE               	goto	i2l4743
 10148  00173A  0A01               	xorlw	1	; case 255
 10149  00173C  B4D8               	btfsc	status,2,c
 10150  00173E  D7DE               	goto	i2l4745
 10151  001740  D7C5               	goto	i2l4729
 10152  001742                     i2l5825:
 10153                           
 10154                           ; Switch size 1, requested type "space"
 10155                           ; Number of cases is 2, Range of values is 9 to 10
 10156                           ; switch strategies available:
 10157                           ; Name         Instructions Cycles
 10158                           ; simple_byte            7     4 (average)
 10159                           ;	Chosen strategy is simple_byte
 10160  001742  502C               	movf	??_inputHandler,w,c
 10161  001744  0A09               	xorlw	9	; case 9
 10162  001746  B4D8               	btfsc	status,2,c
 10163  001748  D7DC               	goto	i2l4747
 10164  00174A  0A03               	xorlw	3	; case 10
 10165  00174C  B4D8               	btfsc	status,2,c
 10166  00174E  D7DC               	goto	i2l4749
 10167  001750  D7BD               	goto	i2l4729
 10168  001752                     i2l4765:
 10169                           
 10170                           ;UI.c: 364: if(cur_state == 11){
 10171  001752  0E0B               	movlw	11
 10172  001754  0100               	movlb	0	; () banked
 10173  001756  19E1               	xorwf	_cur_state& (0+255),w,b
 10174  001758  0100               	movlb	0	; () banked
 10175  00175A  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10176  00175C  A4D8               	btfss	status,2,c
 10177  00175E  D005               	goto	i2l4773
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;UI.c: 365: return 0;
 10181  001760  0E00               	movlw	0
 10182  001762  6E2B               	movwf	?_inputHandler+1,c
 10183  001764  0E00               	movlw	0
 10184  001766  6E2A               	movwf	?_inputHandler,c
 10185                           
 10186                           ; BSR set to: 0
 10187  001768  0012               	return	
 10188  00176A                     i2l4773:
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;UI.c: 367: else{
 10192                           ;UI.c: 368: change_state_to_menu_11();
 10193  00176A  ECD0  F012         	call	_change_state_to_menu_11	;wreg free
 10194                           
 10195                           ;UI.c: 369: }
 10196                           ;UI.c: 370: return 0;
 10197  00176E  0E00               	movlw	0
 10198  001770  6E2B               	movwf	?_inputHandler+1,c
 10199  001772  0E00               	movlw	0
 10200  001774  6E2A               	movwf	?_inputHandler,c
 10201  001776  0012               	return	
 10202  001778                     i2l4779:
 10203                           
 10204                           ;UI.c: 372: if(cur_state == 22 | cur_state == 12){
 10205  001778  0E16               	movlw	22
 10206  00177A  0100               	movlb	0	; () banked
 10207  00177C  19E1               	xorwf	_cur_state& (0+255),w,b
 10208  00177E  0100               	movlb	0	; () banked
 10209  001780  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10210  001782  B4D8               	btfsc	status,2,c
 10211  001784  D007               	goto	i2l4783
 10212                           
 10213                           ; BSR set to: 0
 10214  001786  0E0C               	movlw	12
 10215  001788  0100               	movlb	0	; () banked
 10216  00178A  19E1               	xorwf	_cur_state& (0+255),w,b
 10217  00178C  0100               	movlb	0	; () banked
 10218  00178E  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10219  001790  A4D8               	btfss	status,2,c
 10220  001792  D005               	goto	i2l4789
 10221  001794                     i2l4783:
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;UI.c: 373: return 0;
 10225  001794  0E00               	movlw	0
 10226  001796  6E2B               	movwf	?_inputHandler+1,c
 10227  001798  0E00               	movlw	0
 10228  00179A  6E2A               	movwf	?_inputHandler,c
 10229                           
 10230                           ; BSR set to: 0
 10231  00179C  0012               	return	
 10232  00179E                     i2l4789:
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;UI.c: 375: else if(cur_state == 23){
 10236  00179E  0E17               	movlw	23
 10237  0017A0  0100               	movlb	0	; () banked
 10238  0017A2  19E1               	xorwf	_cur_state& (0+255),w,b
 10239  0017A4  0100               	movlb	0	; () banked
 10240  0017A6  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10241  0017A8  A4D8               	btfss	status,2,c
 10242  0017AA  D003               	goto	i2l4793
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;UI.c: 376: change_state_to_menu_22();
 10246  0017AC  EC88  F012         	call	i2_change_state_to_menu_22	;wreg free
 10247                           
 10248                           ;UI.c: 377: }
 10249  0017B0  D002               	goto	i2l4795
 10250  0017B2                     i2l4793:
 10251                           
 10252                           ;UI.c: 378: else{
 10253                           ;UI.c: 379: change_state_to_menu_12();
 10254  0017B2  ECA0  F012         	call	i2_change_state_to_menu_12	;wreg free
 10255  0017B6                     i2l4795:
 10256                           
 10257                           ;UI.c: 380: }
 10258                           ;UI.c: 381: return 0;
 10259  0017B6  0E00               	movlw	0
 10260  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10261  0017BA  0E00               	movlw	0
 10262  0017BC  6E2A               	movwf	?_inputHandler,c
 10263  0017BE  0012               	return	
 10264  0017C0                     i2l4799:
 10265                           
 10266                           ;UI.c: 383: if(cur_state == 23){
 10267  0017C0  0E17               	movlw	23
 10268  0017C2  0100               	movlb	0	; () banked
 10269  0017C4  19E1               	xorwf	_cur_state& (0+255),w,b
 10270  0017C6  0100               	movlb	0	; () banked
 10271  0017C8  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10272  0017CA  A4D8               	btfss	status,2,c
 10273  0017CC  D005               	goto	i2l4807
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;UI.c: 384: return 0;
 10277  0017CE  0E00               	movlw	0
 10278  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10279  0017D2  0E00               	movlw	0
 10280  0017D4  6E2A               	movwf	?_inputHandler,c
 10281                           
 10282                           ; BSR set to: 0
 10283  0017D6  0012               	return	
 10284  0017D8                     i2l4807:
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;UI.c: 386: else{
 10288                           ;UI.c: 387: change_state_to_menu_23();
 10289  0017D8  ECB8  F012         	call	_change_state_to_menu_23	;wreg free
 10290                           
 10291                           ;UI.c: 388: }
 10292                           ;UI.c: 389: return 0;
 10293  0017DC  0E00               	movlw	0
 10294  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10295  0017E0  0E00               	movlw	0
 10296  0017E2  6E2A               	movwf	?_inputHandler,c
 10297  0017E4  0012               	return	
 10298  0017E6                     i2l4813:
 10299                           
 10300                           ;UI.c: 392: up = 1;
 10301  0017E6  0E00               	movlw	0
 10302  0017E8  6E74               	movwf	_up+1,c
 10303  0017EA  0E01               	movlw	1
 10304  0017EC  6E73               	movwf	_up,c
 10305                           
 10306                           ;UI.c: 393: return 1;
 10307  0017EE  0E00               	movlw	0
 10308  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10309  0017F2  0E01               	movlw	1
 10310  0017F4  6E2A               	movwf	?_inputHandler,c
 10311  0017F6  0012               	return	
 10312  0017F8                     i2l4817:
 10313                           
 10314                           ;UI.c: 395: down = 1;
 10315  0017F8  0E00               	movlw	0
 10316  0017FA  6E64               	movwf	_down+1,c
 10317  0017FC  0E01               	movlw	1
 10318  0017FE  6E63               	movwf	_down,c
 10319                           
 10320                           ;UI.c: 396: return 1;
 10321  001800  0E00               	movlw	0
 10322  001802  6E2B               	movwf	?_inputHandler+1,c
 10323  001804  0E01               	movlw	1
 10324  001806  6E2A               	movwf	?_inputHandler,c
 10325  001808  0012               	return	
 10326  00180A                     i2l4821:
 10327                           
 10328                           ;UI.c: 398: enter = 1;
 10329  00180A  0E00               	movlw	0
 10330  00180C  6E66               	movwf	_enter+1,c
 10331  00180E  0E01               	movlw	1
 10332  001810  6E65               	movwf	_enter,c
 10333                           
 10334                           ;UI.c: 399: return 1;
 10335  001812  0E00               	movlw	0
 10336  001814  6E2B               	movwf	?_inputHandler+1,c
 10337  001816  0E01               	movlw	1
 10338  001818  6E2A               	movwf	?_inputHandler,c
 10339  00181A  0012               	return	
 10340  00181C                     i2l4825:
 10341                           
 10342                           ;UI.c: 401: back = 1;
 10343  00181C  0E00               	movlw	0
 10344  00181E  6E5E               	movwf	_back+1,c
 10345  001820  0E01               	movlw	1
 10346  001822  6E5D               	movwf	_back,c
 10347                           
 10348                           ;UI.c: 402: return 1;
 10349  001824  0E00               	movlw	0
 10350  001826  6E2B               	movwf	?_inputHandler+1,c
 10351  001828  0E01               	movlw	1
 10352  00182A  6E2A               	movwf	?_inputHandler,c
 10353  00182C  0012               	return	
 10354  00182E                     i2l4829:
 10355                           
 10356                           ;UI.c: 405: return 1;
 10357  00182E  0E00               	movlw	0
 10358  001830  6E2B               	movwf	?_inputHandler+1,c
 10359  001832  0E01               	movlw	1
 10360  001834  6E2A               	movwf	?_inputHandler,c
 10361                           
 10362                           ;UI.c: 406: }
 10363  001836  0012               	return	
 10364  001838                     i2l4835:
 10365  001838  5079               	movf	_input,w,c
 10366                           
 10367                           ; Switch size 1, requested type "space"
 10368                           ; Number of cases is 7, Range of values is 49 to 68
 10369                           ; switch strategies available:
 10370                           ; Name         Instructions Cycles
 10371                           ; simple_byte           22    12 (average)
 10372                           ;	Chosen strategy is simple_byte
 10373  00183A  0A31               	xorlw	49	; case 49
 10374  00183C  B4D8               	btfsc	status,2,c
 10375  00183E  D789               	goto	i2l4765
 10376  001840  0A03               	xorlw	3	; case 50
 10377  001842  B4D8               	btfsc	status,2,c
 10378  001844  D799               	goto	i2l4779
 10379  001846  0A01               	xorlw	1	; case 51
 10380  001848  B4D8               	btfsc	status,2,c
 10381  00184A  D7BA               	goto	i2l4799
 10382  00184C  0A72               	xorlw	114	; case 65
 10383  00184E  B4D8               	btfsc	status,2,c
 10384  001850  D7CA               	goto	i2l4813
 10385  001852  0A03               	xorlw	3	; case 66
 10386  001854  B4D8               	btfsc	status,2,c
 10387  001856  D7D0               	goto	i2l4817
 10388  001858  0A01               	xorlw	1	; case 67
 10389  00185A  B4D8               	btfsc	status,2,c
 10390  00185C  D7D6               	goto	i2l4821
 10391  00185E  0A07               	xorlw	7	; case 68
 10392  001860  B4D8               	btfsc	status,2,c
 10393  001862  D7DC               	goto	i2l4825
 10394  001864  D7E4               	goto	i2l4829
 10395  001866                     __end_of_inputHandler:
 10396                           	opt stack 0
 10397                           pclatu	equ	0xFFB
 10398                           pclath	equ	0xFFA
 10399                           tblptru	equ	0xFF8
 10400                           tblptrh	equ	0xFF7
 10401                           tblptrl	equ	0xFF6
 10402                           tablat	equ	0xFF5
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           intcon	equ	0xFF2
 10406                           intcon3	equ	0xFF0
 10407                           indf0	equ	0xFEF
 10408                           postinc0	equ	0xFEE
 10409                           fsr0h	equ	0xFEA
 10410                           fsr0l	equ	0xFE9
 10411                           wreg	equ	0xFE8
 10412                           postdec1	equ	0xFE5
 10413                           fsr1h	equ	0xFE2
 10414                           fsr1l	equ	0xFE1
 10415                           indf2	equ	0xFDF
 10416                           postinc2	equ	0xFDE
 10417                           postdec2	equ	0xFDD
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function i2_change_state_to_menu_22 *****************
 10423 ;; Defined at:
 10424 ;;		line 439 in file "UI.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;		None
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      void 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;Total ram usage:        0 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    3
 10445 ;; This function calls:
 10446 ;;		i2_lcdInst
 10447 ;;		i2_printf
 10448 ;; This function is called by:
 10449 ;;		_updateMenu
 10450 ;;		_inputHandler
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           	psect	text46
 10455  002510                     __ptext46:
 10456                           	opt stack 0
 10457  002510                     i2_change_state_to_menu_22:
 10458                           	opt stack 19
 10459                           
 10460                           ;UI.c: 440: cur_state = 22;
 10461                           
 10462                           ;incstack = 0
 10463  002510  0E00               	movlw	0
 10464  002512  0100               	movlb	0	; () banked
 10465  002514  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10466  002516  0E16               	movlw	22
 10467  002518  6FE1               	movwf	_cur_state& (0+255),b
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;UI.c: 442: lcdInst(0b10000000);;
 10471  00251A  0E80               	movlw	128
 10472  00251C  EC95  F014         	call	i2_lcdInst
 10473                           
 10474                           ;UI.c: 443: printf("2. SORT        <");
 10475  002520  0E60               	movlw	low STR_19
 10476  002522  6E0D               	movwf	i2printf@f,c
 10477  002524  0EFF               	movlw	high STR_19
 10478  002526  6E0E               	movwf	i2printf@f+1,c
 10479  002528  ECC0  F004         	call	i2_printf	;wreg free
 10480                           
 10481                           ;UI.c: 444: lcdInst(0b11000000);;
 10482  00252C  0EC0               	movlw	192
 10483  00252E  EC95  F014         	call	i2_lcdInst
 10484                           
 10485                           ;UI.c: 445: printf("3. LOGS         ");
 10486  002532  0E61               	movlw	low STR_21
 10487  002534  6E0D               	movwf	i2printf@f,c
 10488  002536  0EFE               	movlw	high STR_21
 10489  002538  6E0E               	movwf	i2printf@f+1,c
 10490  00253A  ECC0  F004         	call	i2_printf	;wreg free
 10491  00253E  0012               	return		;funcret
 10492  002540                     __end_ofi2_change_state_to_menu_22:
 10493                           	opt stack 0
 10494                           pclatu	equ	0xFFB
 10495                           pclath	equ	0xFFA
 10496                           tblptru	equ	0xFF8
 10497                           tblptrh	equ	0xFF7
 10498                           tblptrl	equ	0xFF6
 10499                           tablat	equ	0xFF5
 10500                           prodh	equ	0xFF4
 10501                           prodl	equ	0xFF3
 10502                           intcon	equ	0xFF2
 10503                           intcon3	equ	0xFF0
 10504                           indf0	equ	0xFEF
 10505                           postinc0	equ	0xFEE
 10506                           fsr0h	equ	0xFEA
 10507                           fsr0l	equ	0xFE9
 10508                           wreg	equ	0xFE8
 10509                           postdec1	equ	0xFE5
 10510                           fsr1h	equ	0xFE2
 10511                           fsr1l	equ	0xFE1
 10512                           indf2	equ	0xFDF
 10513                           postinc2	equ	0xFDE
 10514                           postdec2	equ	0xFDD
 10515                           fsr2h	equ	0xFDA
 10516                           fsr2l	equ	0xFD9
 10517                           status	equ	0xFD8
 10518                           
 10519 ;; *************** function i2_change_state_to_menu_12 *****************
 10520 ;; Defined at:
 10521 ;;		line 431 in file "UI.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;		None
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;		None
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  1    wreg      void 
 10528 ;; Registers used:
 10529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;Total ram usage:        0 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    3
 10542 ;; This function calls:
 10543 ;;		i2_lcdInst
 10544 ;;		i2_printf
 10545 ;; This function is called by:
 10546 ;;		_updateMenu
 10547 ;;		_inputHandler
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           	psect	text47
 10552  002540                     __ptext47:
 10553                           	opt stack 0
 10554  002540                     i2_change_state_to_menu_12:
 10555                           	opt stack 19
 10556                           
 10557                           ;UI.c: 432: cur_state = 12;
 10558                           
 10559                           ;incstack = 0
 10560  002540  0E00               	movlw	0
 10561  002542  0100               	movlb	0	; () banked
 10562  002544  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10563  002546  0E0C               	movlw	12
 10564  002548  6FE1               	movwf	_cur_state& (0+255),b
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;UI.c: 434: lcdInst(0b10000000);;
 10568  00254A  0E80               	movlw	128
 10569  00254C  EC95  F014         	call	i2_lcdInst
 10570                           
 10571                           ;UI.c: 435: printf("1. DATE/TIME    ");
 10572  002550  0E83               	movlw	low STR_18
 10573  002552  6E0D               	movwf	i2printf@f,c
 10574  002554  0EFE               	movlw	high STR_18
 10575  002556  6E0E               	movwf	i2printf@f+1,c
 10576  002558  ECC0  F004         	call	i2_printf	;wreg free
 10577                           
 10578                           ;UI.c: 436: lcdInst(0b11000000);;
 10579  00255C  0EC0               	movlw	192
 10580  00255E  EC95  F014         	call	i2_lcdInst
 10581                           
 10582                           ;UI.c: 437: printf("2. SORT        <");
 10583  002562  0E60               	movlw	low STR_19
 10584  002564  6E0D               	movwf	i2printf@f,c
 10585  002566  0EFF               	movlw	high STR_19
 10586  002568  6E0E               	movwf	i2printf@f+1,c
 10587  00256A  ECC0  F004         	call	i2_printf	;wreg free
 10588  00256E  0012               	return		;funcret
 10589  002570                     __end_ofi2_change_state_to_menu_12:
 10590                           	opt stack 0
 10591                           pclatu	equ	0xFFB
 10592                           pclath	equ	0xFFA
 10593                           tblptru	equ	0xFF8
 10594                           tblptrh	equ	0xFF7
 10595                           tblptrl	equ	0xFF6
 10596                           tablat	equ	0xFF5
 10597                           prodh	equ	0xFF4
 10598                           prodl	equ	0xFF3
 10599                           intcon	equ	0xFF2
 10600                           intcon3	equ	0xFF0
 10601                           indf0	equ	0xFEF
 10602                           postinc0	equ	0xFEE
 10603                           fsr0h	equ	0xFEA
 10604                           fsr0l	equ	0xFE9
 10605                           wreg	equ	0xFE8
 10606                           postdec1	equ	0xFE5
 10607                           fsr1h	equ	0xFE2
 10608                           fsr1l	equ	0xFE1
 10609                           indf2	equ	0xFDF
 10610                           postinc2	equ	0xFDE
 10611                           postdec2	equ	0xFDD
 10612                           fsr2h	equ	0xFDA
 10613                           fsr2l	equ	0xFD9
 10614                           status	equ	0xFD8
 10615                           
 10616 ;; *************** function _change_state_to_menu_23 *****************
 10617 ;; Defined at:
 10618 ;;		line 447 in file "UI.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;		None
 10621 ;; Auto vars:     Size  Location     Type
 10622 ;;		None
 10623 ;; Return value:  Size  Location     Type
 10624 ;;                  1    wreg      void 
 10625 ;; Registers used:
 10626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;Total ram usage:        0 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:    3
 10639 ;; This function calls:
 10640 ;;		i2_lcdInst
 10641 ;;		i2_printf
 10642 ;; This function is called by:
 10643 ;;		_updateMenu
 10644 ;;		_inputHandler
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           	psect	text48
 10649  002570                     __ptext48:
 10650                           	opt stack 0
 10651  002570                     _change_state_to_menu_23:
 10652                           	opt stack 18
 10653                           
 10654                           ;UI.c: 448: cur_state = 23;
 10655                           
 10656                           ;incstack = 0
 10657  002570  0E00               	movlw	0
 10658  002572  0100               	movlb	0	; () banked
 10659  002574  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10660  002576  0E17               	movlw	23
 10661  002578  6FE1               	movwf	_cur_state& (0+255),b
 10662                           
 10663                           ; BSR set to: 0
 10664                           ;UI.c: 450: lcdInst(0b10000000);;
 10665  00257A  0E80               	movlw	128
 10666  00257C  EC95  F014         	call	i2_lcdInst
 10667                           
 10668                           ;UI.c: 451: printf("2. SORT         ");
 10669  002580  0E72               	movlw	low STR_17
 10670  002582  6E0D               	movwf	i2printf@f,c
 10671  002584  0EFE               	movlw	high STR_17
 10672  002586  6E0E               	movwf	i2printf@f+1,c
 10673  002588  ECC0  F004         	call	i2_printf	;wreg free
 10674                           
 10675                           ;UI.c: 452: lcdInst(0b11000000);;
 10676  00258C  0EC0               	movlw	192
 10677  00258E  EC95  F014         	call	i2_lcdInst
 10678                           
 10679                           ;UI.c: 453: printf("3. LOGS        <");
 10680  002592  0E4F               	movlw	low STR_23
 10681  002594  6E0D               	movwf	i2printf@f,c
 10682  002596  0EFF               	movlw	high STR_23
 10683  002598  6E0E               	movwf	i2printf@f+1,c
 10684  00259A  ECC0  F004         	call	i2_printf	;wreg free
 10685  00259E  0012               	return		;funcret
 10686  0025A0                     __end_of_change_state_to_menu_23:
 10687                           	opt stack 0
 10688                           pclatu	equ	0xFFB
 10689                           pclath	equ	0xFFA
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           prodh	equ	0xFF4
 10695                           prodl	equ	0xFF3
 10696                           intcon	equ	0xFF2
 10697                           intcon3	equ	0xFF0
 10698                           indf0	equ	0xFEF
 10699                           postinc0	equ	0xFEE
 10700                           fsr0h	equ	0xFEA
 10701                           fsr0l	equ	0xFE9
 10702                           wreg	equ	0xFE8
 10703                           postdec1	equ	0xFE5
 10704                           fsr1h	equ	0xFE2
 10705                           fsr1l	equ	0xFE1
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           postdec2	equ	0xFDD
 10709                           fsr2h	equ	0xFDA
 10710                           fsr2l	equ	0xFD9
 10711                           status	equ	0xFD8
 10712                           
 10713 ;; *************** function _change_state_to_menu_11 *****************
 10714 ;; Defined at:
 10715 ;;		line 423 in file "UI.c"
 10716 ;; Parameters:    Size  Location     Type
 10717 ;;		None
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;		None
 10720 ;; Return value:  Size  Location     Type
 10721 ;;                  1    wreg      void 
 10722 ;; Registers used:
 10723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;Total ram usage:        0 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    3
 10736 ;; This function calls:
 10737 ;;		i2_lcdInst
 10738 ;;		i2_printf
 10739 ;; This function is called by:
 10740 ;;		_updateMenu
 10741 ;;		_inputHandler
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           	psect	text49
 10746  0025A0                     __ptext49:
 10747                           	opt stack 0
 10748  0025A0                     _change_state_to_menu_11:
 10749                           	opt stack 18
 10750                           
 10751                           ;UI.c: 424: cur_state = 11;
 10752                           
 10753                           ;incstack = 0
 10754  0025A0  0E00               	movlw	0
 10755  0025A2  0100               	movlb	0	; () banked
 10756  0025A4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10757  0025A6  0E0B               	movlw	11
 10758  0025A8  6FE1               	movwf	_cur_state& (0+255),b
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;UI.c: 426: lcdInst(0b10000000);;
 10762  0025AA  0E80               	movlw	128
 10763  0025AC  EC95  F014         	call	i2_lcdInst
 10764                           
 10765                           ;UI.c: 427: printf("1. DATE/TIME   <");
 10766  0025B0  0E71               	movlw	low STR_16
 10767  0025B2  6E0D               	movwf	i2printf@f,c
 10768  0025B4  0EFF               	movlw	high STR_16
 10769  0025B6  6E0E               	movwf	i2printf@f+1,c
 10770  0025B8  ECC0  F004         	call	i2_printf	;wreg free
 10771                           
 10772                           ;UI.c: 428: lcdInst(0b11000000);;
 10773  0025BC  0EC0               	movlw	192
 10774  0025BE  EC95  F014         	call	i2_lcdInst
 10775                           
 10776                           ;UI.c: 429: printf("2. SORT         ");
 10777  0025C2  0E72               	movlw	low STR_17
 10778  0025C4  6E0D               	movwf	i2printf@f,c
 10779  0025C6  0EFE               	movlw	high STR_17
 10780  0025C8  6E0E               	movwf	i2printf@f+1,c
 10781  0025CA  ECC0  F004         	call	i2_printf	;wreg free
 10782  0025CE  0012               	return		;funcret
 10783  0025D0                     __end_of_change_state_to_menu_11:
 10784                           	opt stack 0
 10785                           pclatu	equ	0xFFB
 10786                           pclath	equ	0xFFA
 10787                           tblptru	equ	0xFF8
 10788                           tblptrh	equ	0xFF7
 10789                           tblptrl	equ	0xFF6
 10790                           tablat	equ	0xFF5
 10791                           prodh	equ	0xFF4
 10792                           prodl	equ	0xFF3
 10793                           intcon	equ	0xFF2
 10794                           intcon3	equ	0xFF0
 10795                           indf0	equ	0xFEF
 10796                           postinc0	equ	0xFEE
 10797                           fsr0h	equ	0xFEA
 10798                           fsr0l	equ	0xFE9
 10799                           wreg	equ	0xFE8
 10800                           postdec1	equ	0xFE5
 10801                           fsr1h	equ	0xFE2
 10802                           fsr1l	equ	0xFE1
 10803                           indf2	equ	0xFDF
 10804                           postinc2	equ	0xFDE
 10805                           postdec2	equ	0xFDD
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810 ;; *************** function _change_state_to_logs_34 *****************
 10811 ;; Defined at:
 10812 ;;		line 490 in file "UI.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;Total ram usage:        0 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    3
 10833 ;; This function calls:
 10834 ;;		i2_lcdInst
 10835 ;;		i2_printf
 10836 ;; This function is called by:
 10837 ;;		_updateMenu
 10838 ;;		_inputHandler
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text50
 10843  0025D0                     __ptext50:
 10844                           	opt stack 0
 10845  0025D0                     _change_state_to_logs_34:
 10846                           	opt stack 18
 10847                           
 10848                           ;UI.c: 491: cur_state = 1034;
 10849                           
 10850                           ;incstack = 0
 10851  0025D0  0E04               	movlw	4
 10852  0025D2  0100               	movlb	0	; () banked
 10853  0025D4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10854  0025D6  0E0A               	movlw	10
 10855  0025D8  6FE1               	movwf	_cur_state& (0+255),b
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;UI.c: 492: lcdInst(0b10000000);;
 10859  0025DA  0E80               	movlw	128
 10860  0025DC  EC95  F014         	call	i2_lcdInst
 10861                           
 10862                           ;UI.c: 493: printf("LOG 3           ");
 10863  0025E0  0E3F               	movlw	low STR_29
 10864  0025E2  6E0D               	movwf	i2printf@f,c
 10865  0025E4  0EFE               	movlw	high STR_29
 10866  0025E6  6E0E               	movwf	i2printf@f+1,c
 10867  0025E8  ECC0  F004         	call	i2_printf	;wreg free
 10868                           
 10869                           ;UI.c: 494: lcdInst(0b11000000);;
 10870  0025EC  0EC0               	movlw	192
 10871  0025EE  EC95  F014         	call	i2_lcdInst
 10872                           
 10873                           ;UI.c: 495: printf("LOG 4          <");
 10874  0025F2  0E3E               	movlw	low STR_35
 10875  0025F4  6E0D               	movwf	i2printf@f,c
 10876  0025F6  0EFF               	movlw	high STR_35
 10877  0025F8  6E0E               	movwf	i2printf@f+1,c
 10878  0025FA  ECC0  F004         	call	i2_printf	;wreg free
 10879  0025FE  0012               	return		;funcret
 10880  002600                     __end_of_change_state_to_logs_34:
 10881                           	opt stack 0
 10882                           pclatu	equ	0xFFB
 10883                           pclath	equ	0xFFA
 10884                           tblptru	equ	0xFF8
 10885                           tblptrh	equ	0xFF7
 10886                           tblptrl	equ	0xFF6
 10887                           tablat	equ	0xFF5
 10888                           prodh	equ	0xFF4
 10889                           prodl	equ	0xFF3
 10890                           intcon	equ	0xFF2
 10891                           intcon3	equ	0xFF0
 10892                           indf0	equ	0xFEF
 10893                           postinc0	equ	0xFEE
 10894                           fsr0h	equ	0xFEA
 10895                           fsr0l	equ	0xFE9
 10896                           wreg	equ	0xFE8
 10897                           postdec1	equ	0xFE5
 10898                           fsr1h	equ	0xFE2
 10899                           fsr1l	equ	0xFE1
 10900                           indf2	equ	0xFDF
 10901                           postinc2	equ	0xFDE
 10902                           postdec2	equ	0xFDD
 10903                           fsr2h	equ	0xFDA
 10904                           fsr2l	equ	0xFD9
 10905                           status	equ	0xFD8
 10906                           
 10907 ;; *************** function _change_state_to_logs_33 *****************
 10908 ;; Defined at:
 10909 ;;		line 483 in file "UI.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  1    wreg      void 
 10916 ;; Registers used:
 10917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;Total ram usage:        0 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    3
 10930 ;; This function calls:
 10931 ;;		i2_lcdInst
 10932 ;;		i2_printf
 10933 ;; This function is called by:
 10934 ;;		_updateMenu
 10935 ;;		_inputHandler
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           	psect	text51
 10940  002600                     __ptext51:
 10941                           	opt stack 0
 10942  002600                     _change_state_to_logs_33:
 10943                           	opt stack 18
 10944                           
 10945                           ;UI.c: 484: cur_state = 1033;
 10946                           
 10947                           ;incstack = 0
 10948  002600  0E04               	movlw	4
 10949  002602  0100               	movlb	0	; () banked
 10950  002604  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10951  002606  0E09               	movlw	9
 10952  002608  6FE1               	movwf	_cur_state& (0+255),b
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;UI.c: 485: lcdInst(0b10000000);;
 10956  00260A  0E80               	movlw	128
 10957  00260C  EC95  F014         	call	i2_lcdInst
 10958                           
 10959                           ;UI.c: 486: printf("LOG 3          <");
 10960  002610  0E2D               	movlw	low STR_31
 10961  002612  6E0D               	movwf	i2printf@f,c
 10962  002614  0EFF               	movlw	high STR_31
 10963  002616  6E0E               	movwf	i2printf@f+1,c
 10964  002618  ECC0  F004         	call	i2_printf	;wreg free
 10965                           
 10966                           ;UI.c: 487: lcdInst(0b11000000);;
 10967  00261C  0EC0               	movlw	192
 10968  00261E  EC95  F014         	call	i2_lcdInst
 10969                           
 10970                           ;UI.c: 488: printf("LOG 4           ");
 10971  002622  0E50               	movlw	low STR_33
 10972  002624  6E0D               	movwf	i2printf@f,c
 10973  002626  0EFE               	movlw	high STR_33
 10974  002628  6E0E               	movwf	i2printf@f+1,c
 10975  00262A  ECC0  F004         	call	i2_printf	;wreg free
 10976  00262E  0012               	return		;funcret
 10977  002630                     __end_of_change_state_to_logs_33:
 10978                           	opt stack 0
 10979                           pclatu	equ	0xFFB
 10980                           pclath	equ	0xFFA
 10981                           tblptru	equ	0xFF8
 10982                           tblptrh	equ	0xFF7
 10983                           tblptrl	equ	0xFF6
 10984                           tablat	equ	0xFF5
 10985                           prodh	equ	0xFF4
 10986                           prodl	equ	0xFF3
 10987                           intcon	equ	0xFF2
 10988                           intcon3	equ	0xFF0
 10989                           indf0	equ	0xFEF
 10990                           postinc0	equ	0xFEE
 10991                           fsr0h	equ	0xFEA
 10992                           fsr0l	equ	0xFE9
 10993                           wreg	equ	0xFE8
 10994                           postdec1	equ	0xFE5
 10995                           fsr1h	equ	0xFE2
 10996                           fsr1l	equ	0xFE1
 10997                           indf2	equ	0xFDF
 10998                           postinc2	equ	0xFDE
 10999                           postdec2	equ	0xFDD
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function _change_state_to_logs_23 *****************
 11005 ;; Defined at:
 11006 ;;		line 476 in file "UI.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;		None
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;		None
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  1    wreg      void 
 11013 ;; Registers used:
 11014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;Total ram usage:        0 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    3
 11027 ;; This function calls:
 11028 ;;		i2_lcdInst
 11029 ;;		i2_printf
 11030 ;; This function is called by:
 11031 ;;		_updateMenu
 11032 ;;		_inputHandler
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           	psect	text52
 11037  00271C                     __ptext52:
 11038                           	opt stack 0
 11039  00271C                     _change_state_to_logs_23:
 11040                           	opt stack 18
 11041                           
 11042                           ;UI.c: 477: cur_state = 1023;
 11043                           
 11044                           ;incstack = 0
 11045  00271C  0E03               	movlw	3
 11046  00271E  0100               	movlb	0	; () banked
 11047  002720  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11048  002722  69E1               	setf	_cur_state& (0+255),b
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;UI.c: 478: lcdInst(0b10000000);;
 11052  002724  0E80               	movlw	128
 11053  002726  EC95  F014         	call	i2_lcdInst
 11054                           
 11055                           ;UI.c: 479: printf("LOG 2           ");
 11056  00272A  0E2E               	movlw	low STR_25
 11057  00272C  6E0D               	movwf	i2printf@f,c
 11058  00272E  0EFE               	movlw	high STR_25
 11059  002730  6E0E               	movwf	i2printf@f+1,c
 11060  002732  ECC0  F004         	call	i2_printf	;wreg free
 11061                           
 11062                           ;UI.c: 480: lcdInst(0b11000000);;
 11063  002736  0EC0               	movlw	192
 11064  002738  EC95  F014         	call	i2_lcdInst
 11065                           
 11066                           ;UI.c: 481: printf("LOG 3          <");
 11067  00273C  0E2D               	movlw	low STR_31
 11068  00273E  6E0D               	movwf	i2printf@f,c
 11069  002740  0EFF               	movlw	high STR_31
 11070  002742  6E0E               	movwf	i2printf@f+1,c
 11071  002744  ECC0  F004         	call	i2_printf	;wreg free
 11072  002748  0012               	return		;funcret
 11073  00274A                     __end_of_change_state_to_logs_23:
 11074                           	opt stack 0
 11075                           pclatu	equ	0xFFB
 11076                           pclath	equ	0xFFA
 11077                           tblptru	equ	0xFF8
 11078                           tblptrh	equ	0xFF7
 11079                           tblptrl	equ	0xFF6
 11080                           tablat	equ	0xFF5
 11081                           prodh	equ	0xFF4
 11082                           prodl	equ	0xFF3
 11083                           intcon	equ	0xFF2
 11084                           intcon3	equ	0xFF0
 11085                           indf0	equ	0xFEF
 11086                           postinc0	equ	0xFEE
 11087                           fsr0h	equ	0xFEA
 11088                           fsr0l	equ	0xFE9
 11089                           wreg	equ	0xFE8
 11090                           postdec1	equ	0xFE5
 11091                           fsr1h	equ	0xFE2
 11092                           fsr1l	equ	0xFE1
 11093                           indf2	equ	0xFDF
 11094                           postinc2	equ	0xFDE
 11095                           postdec2	equ	0xFDD
 11096                           fsr2h	equ	0xFDA
 11097                           fsr2l	equ	0xFD9
 11098                           status	equ	0xFD8
 11099                           
 11100 ;; *************** function _change_state_to_logs_22 *****************
 11101 ;; Defined at:
 11102 ;;		line 469 in file "UI.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;		None
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;		None
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      void 
 11109 ;; Registers used:
 11110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;Total ram usage:        0 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    3
 11123 ;; This function calls:
 11124 ;;		i2_lcdInst
 11125 ;;		i2_printf
 11126 ;; This function is called by:
 11127 ;;		_updateMenu
 11128 ;;		_inputHandler
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           	psect	text53
 11133  002630                     __ptext53:
 11134                           	opt stack 0
 11135  002630                     _change_state_to_logs_22:
 11136                           	opt stack 18
 11137                           
 11138                           ;UI.c: 470: cur_state = 1022;
 11139                           
 11140                           ;incstack = 0
 11141  002630  0E03               	movlw	3
 11142  002632  0100               	movlb	0	; () banked
 11143  002634  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11144  002636  0EFE               	movlw	254
 11145  002638  6FE1               	movwf	_cur_state& (0+255),b
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;UI.c: 471: lcdInst(0b10000000);;
 11149  00263A  0E80               	movlw	128
 11150  00263C  EC95  F014         	call	i2_lcdInst
 11151                           
 11152                           ;UI.c: 472: printf("LOG 2          <");
 11153  002640  0E1C               	movlw	low STR_27
 11154  002642  6E0D               	movwf	i2printf@f,c
 11155  002644  0EFF               	movlw	high STR_27
 11156  002646  6E0E               	movwf	i2printf@f+1,c
 11157  002648  ECC0  F004         	call	i2_printf	;wreg free
 11158                           
 11159                           ;UI.c: 473: lcdInst(0b11000000);;
 11160  00264C  0EC0               	movlw	192
 11161  00264E  EC95  F014         	call	i2_lcdInst
 11162                           
 11163                           ;UI.c: 474: printf("LOG 3           ");
 11164  002652  0E3F               	movlw	low STR_29
 11165  002654  6E0D               	movwf	i2printf@f,c
 11166  002656  0EFE               	movlw	high STR_29
 11167  002658  6E0E               	movwf	i2printf@f+1,c
 11168  00265A  ECC0  F004         	call	i2_printf	;wreg free
 11169  00265E  0012               	return		;funcret
 11170  002660                     __end_of_change_state_to_logs_22:
 11171                           	opt stack 0
 11172                           pclatu	equ	0xFFB
 11173                           pclath	equ	0xFFA
 11174                           tblptru	equ	0xFF8
 11175                           tblptrh	equ	0xFF7
 11176                           tblptrl	equ	0xFF6
 11177                           tablat	equ	0xFF5
 11178                           prodh	equ	0xFF4
 11179                           prodl	equ	0xFF3
 11180                           intcon	equ	0xFF2
 11181                           intcon3	equ	0xFF0
 11182                           indf0	equ	0xFEF
 11183                           postinc0	equ	0xFEE
 11184                           fsr0h	equ	0xFEA
 11185                           fsr0l	equ	0xFE9
 11186                           wreg	equ	0xFE8
 11187                           postdec1	equ	0xFE5
 11188                           fsr1h	equ	0xFE2
 11189                           fsr1l	equ	0xFE1
 11190                           indf2	equ	0xFDF
 11191                           postinc2	equ	0xFDE
 11192                           postdec2	equ	0xFDD
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _change_state_to_logs_12 *****************
 11198 ;; Defined at:
 11199 ;;		line 462 in file "UI.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        0 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    3
 11220 ;; This function calls:
 11221 ;;		i2_lcdInst
 11222 ;;		i2_printf
 11223 ;; This function is called by:
 11224 ;;		_updateMenu
 11225 ;;		_inputHandler
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text54
 11230  002660                     __ptext54:
 11231                           	opt stack 0
 11232  002660                     _change_state_to_logs_12:
 11233                           	opt stack 18
 11234                           
 11235                           ;UI.c: 463: cur_state = 1012;
 11236                           
 11237                           ;incstack = 0
 11238  002660  0E03               	movlw	3
 11239  002662  0100               	movlb	0	; () banked
 11240  002664  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11241  002666  0EF4               	movlw	244
 11242  002668  6FE1               	movwf	_cur_state& (0+255),b
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;UI.c: 464: lcdInst(0b10000000);;
 11246  00266A  0E80               	movlw	128
 11247  00266C  EC95  F014         	call	i2_lcdInst
 11248                           
 11249                           ;UI.c: 465: printf("LOG 1           ");
 11250  002670  0E1D               	movlw	low STR_26
 11251  002672  6E0D               	movwf	i2printf@f,c
 11252  002674  0EFE               	movlw	high STR_26
 11253  002676  6E0E               	movwf	i2printf@f+1,c
 11254  002678  ECC0  F004         	call	i2_printf	;wreg free
 11255                           
 11256                           ;UI.c: 466: lcdInst(0b11000000);;
 11257  00267C  0EC0               	movlw	192
 11258  00267E  EC95  F014         	call	i2_lcdInst
 11259                           
 11260                           ;UI.c: 467: printf("LOG 2          <");
 11261  002682  0E1C               	movlw	low STR_27
 11262  002684  6E0D               	movwf	i2printf@f,c
 11263  002686  0EFF               	movlw	high STR_27
 11264  002688  6E0E               	movwf	i2printf@f+1,c
 11265  00268A  ECC0  F004         	call	i2_printf	;wreg free
 11266  00268E  0012               	return		;funcret
 11267  002690                     __end_of_change_state_to_logs_12:
 11268                           	opt stack 0
 11269                           pclatu	equ	0xFFB
 11270                           pclath	equ	0xFFA
 11271                           tblptru	equ	0xFF8
 11272                           tblptrh	equ	0xFF7
 11273                           tblptrl	equ	0xFF6
 11274                           tablat	equ	0xFF5
 11275                           prodh	equ	0xFF4
 11276                           prodl	equ	0xFF3
 11277                           intcon	equ	0xFF2
 11278                           intcon3	equ	0xFF0
 11279                           indf0	equ	0xFEF
 11280                           postinc0	equ	0xFEE
 11281                           fsr0h	equ	0xFEA
 11282                           fsr0l	equ	0xFE9
 11283                           wreg	equ	0xFE8
 11284                           postdec1	equ	0xFE5
 11285                           fsr1h	equ	0xFE2
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _change_state_to_logs_11 *****************
 11295 ;; Defined at:
 11296 ;;		line 455 in file "UI.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      void 
 11303 ;; Registers used:
 11304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;Total ram usage:        0 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    3
 11317 ;; This function calls:
 11318 ;;		i2_lcdInst
 11319 ;;		i2_printf
 11320 ;; This function is called by:
 11321 ;;		_updateMenu
 11322 ;;		_inputHandler
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text55
 11327  002690                     __ptext55:
 11328                           	opt stack 0
 11329  002690                     _change_state_to_logs_11:
 11330                           	opt stack 18
 11331                           
 11332                           ;UI.c: 456: cur_state = 1011;
 11333                           
 11334                           ;incstack = 0
 11335  002690  0E03               	movlw	3
 11336  002692  0100               	movlb	0	; () banked
 11337  002694  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11338  002696  0EF3               	movlw	243
 11339  002698  6FE1               	movwf	_cur_state& (0+255),b
 11340                           
 11341                           ; BSR set to: 0
 11342                           ;UI.c: 457: lcdInst(0b10000000);;
 11343  00269A  0E80               	movlw	128
 11344  00269C  EC95  F014         	call	i2_lcdInst
 11345                           
 11346                           ;UI.c: 458: printf("LOG 1          <");
 11347  0026A0  0E0B               	movlw	low STR_24
 11348  0026A2  6E0D               	movwf	i2printf@f,c
 11349  0026A4  0EFF               	movlw	high STR_24
 11350  0026A6  6E0E               	movwf	i2printf@f+1,c
 11351  0026A8  ECC0  F004         	call	i2_printf	;wreg free
 11352                           
 11353                           ;UI.c: 459: lcdInst(0b11000000);;
 11354  0026AC  0EC0               	movlw	192
 11355  0026AE  EC95  F014         	call	i2_lcdInst
 11356                           
 11357                           ;UI.c: 460: printf("LOG 2           ");
 11358  0026B2  0E2E               	movlw	low STR_25
 11359  0026B4  6E0D               	movwf	i2printf@f,c
 11360  0026B6  0EFE               	movlw	high STR_25
 11361  0026B8  6E0E               	movwf	i2printf@f+1,c
 11362  0026BA  ECC0  F004         	call	i2_printf	;wreg free
 11363  0026BE  0012               	return		;funcret
 11364  0026C0                     __end_of_change_state_to_logs_11:
 11365                           	opt stack 0
 11366                           pclatu	equ	0xFFB
 11367                           pclath	equ	0xFFA
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           intcon3	equ	0xFF0
 11376                           indf0	equ	0xFEF
 11377                           postinc0	equ	0xFEE
 11378                           fsr0h	equ	0xFEA
 11379                           fsr0l	equ	0xFE9
 11380                           wreg	equ	0xFE8
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           
 11391 ;; *************** function _dispLogs *****************
 11392 ;; Defined at:
 11393 ;;		line 409 in file "UI.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  myLog           2    0[COMRAM] int 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1    wreg      void 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;Total ram usage:        2 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		_updateMenu
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text56
 11421  0028BA                     __ptext56:
 11422                           	opt stack 0
 11423  0028BA                     _dispLogs:
 11424                           	opt stack 22
 11425                           
 11426                           ;UI.c: 410: logstate = 1;
 11427                           
 11428                           ;incstack = 0
 11429  0028BA  0E00               	movlw	0
 11430  0028BC  0100               	movlb	0	; () banked
 11431  0028BE  6FF0               	movwf	(_logstate+1)& (0+255),b
 11432  0028C0  0E01               	movlw	1
 11433  0028C2  6FEF               	movwf	_logstate& (0+255),b
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;UI.c: 411: log = myLog;
 11437  0028C4  C001  F0ED         	movff	dispLogs@myLog,_log
 11438  0028C8  C002  F0EE         	movff	dispLogs@myLog+1,_log+1
 11439                           
 11440                           ; BSR set to: 0
 11441  0028CC  0012               	return		;funcret
 11442  0028CE                     __end_of_dispLogs:
 11443                           	opt stack 0
 11444                           pclatu	equ	0xFFB
 11445                           pclath	equ	0xFFA
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           intcon3	equ	0xFF0
 11454                           indf0	equ	0xFEF
 11455                           postinc0	equ	0xFEE
 11456                           fsr0h	equ	0xFEA
 11457                           fsr0l	equ	0xFE9
 11458                           wreg	equ	0xFE8
 11459                           postdec1	equ	0xFE5
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function _printSortTimer *****************
 11470 ;; Defined at:
 11471 ;;		line 148 in file "sort.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;		None
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  i               2   72[COMRAM] int 
 11476 ;;  curTime        14   44[COMRAM] int [7]
 11477 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11478 ;;  sec             2   66[COMRAM] int 
 11479 ;;  min             2   64[COMRAM] int 
 11480 ;;  hour            2   62[COMRAM] int 
 11481 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11482 ;;  start_sec       2   58[COMRAM] unsigned int 
 11483 ;; Return value:  Size  Location     Type
 11484 ;;                  1    wreg      void 
 11485 ;; Registers used:
 11486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11487 ;; Tracked objects:
 11488 ;;		On entry : 0/0
 11489 ;;		On exit  : 0/0
 11490 ;;		Unchanged: 0/0
 11491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;Total ram usage:       33 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; Hardware stack levels required when called:    3
 11499 ;; This function calls:
 11500 ;;		i2___lwdiv
 11501 ;;		i2___lwmod
 11502 ;;		i2___wmul
 11503 ;;		i2_getRTC
 11504 ;;		i2_lcdInst
 11505 ;;		i2_printf
 11506 ;; This function is called by:
 11507 ;;		_handler
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text57
 11512  001486                     __ptext57:
 11513                           	opt stack 0
 11514  001486                     _printSortTimer:
 11515                           	opt stack 20
 11516                           
 11517                           ;sort.c: 149: getRTC();
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;incstack = 0
 11521  001486  EC15  F010         	call	i2_getRTC	;wreg free
 11522                           
 11523                           ;sort.c: 150: int curTime[7];
 11524                           ;sort.c: 151: for(int i = 0; i < 7; i++){
 11525  00148A  0E00               	movlw	0
 11526  00148C  6E4A               	movwf	printSortTimer@i+1,c
 11527  00148E  0E00               	movlw	0
 11528  001490  6E49               	movwf	printSortTimer@i,c
 11529  001492                     i2l5537:
 11530  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 11531  001494  D006               	goto	i2l5541
 11532  001496  504A               	movf	printSortTimer@i+1,w,c
 11533  001498  E131               	bnz	i2l5547
 11534  00149A  0E07               	movlw	7
 11535  00149C  5C49               	subwf	printSortTimer@i,w,c
 11536  00149E  B0D8               	btfsc	status,0,c
 11537  0014A0  D02D               	goto	i2l5547
 11538  0014A2                     i2l5541:
 11539                           
 11540                           ;sort.c: 152: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11541  0014A2  0ED4               	movlw	low _time
 11542  0014A4  2449               	addwf	printSortTimer@i,w,c
 11543  0014A6  6ED9               	movwf	fsr2l,c
 11544  0014A8  0E00               	movlw	high _time
 11545  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 11546  0014AC  6EDA               	movwf	fsr2h,c
 11547  0014AE  50DF               	movf	indf2,w,c
 11548  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 11549  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 11550  0014B4  0E0F               	movlw	15
 11551  0014B6  162A               	andwf	??_printSortTimer,f,c
 11552  0014B8  0E0F               	movlw	15
 11553  0014BA  162A               	andwf	??_printSortTimer,f,c
 11554  0014BC  502A               	movf	??_printSortTimer,w,c
 11555  0014BE  0D0A               	mullw	10
 11556  0014C0  0ED4               	movlw	low _time
 11557  0014C2  2449               	addwf	printSortTimer@i,w,c
 11558  0014C4  6ED9               	movwf	fsr2l,c
 11559  0014C6  0E00               	movlw	high _time
 11560  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 11561  0014CA  6EDA               	movwf	fsr2h,c
 11562  0014CC  50DF               	movf	indf2,w,c
 11563  0014CE  0B0F               	andlw	15
 11564  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11565  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11566  0014D4  50F3               	movf	prodl,w,c
 11567  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 11568  0014D8  50F4               	movf	prodh,w,c
 11569  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 11570  0014DC  90D8               	bcf	status,0,c
 11571  0014DE  3449               	rlcf	printSortTimer@i,w,c
 11572  0014E0  6ED9               	movwf	fsr2l,c
 11573  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 11574  0014E4  6EDA               	movwf	fsr2h,c
 11575  0014E6  0E2D               	movlw	low printSortTimer@curTime
 11576  0014E8  26D9               	addwf	fsr2l,f,c
 11577  0014EA  0E00               	movlw	high printSortTimer@curTime
 11578  0014EC  22DA               	addwfc	fsr2h,f,c
 11579  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11580  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11581  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 11582  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 11583  0014FA  D7CB               	goto	i2l5537
 11584  0014FC                     i2l5547:
 11585                           
 11586                           ;sort.c: 153: }
 11587                           ;sort.c: 154: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11588  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11589  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11590  001504  0E00               	movlw	0
 11591  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 11592  001508  0E3C               	movlw	60
 11593  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 11594  00150C  ECE4  F013         	call	i2___wmul	;wreg free
 11595  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11596  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11597  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11598  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11599  001520  0E0E               	movlw	14
 11600  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 11601  001524  0E10               	movlw	16
 11602  001526  6E03               	movwf	i2___wmul@multiplicand,c
 11603  001528  ECE4  F013         	call	i2___wmul	;wreg free
 11604  00152C  5001               	movf	?i2___wmul,w,c
 11605  00152E  262A               	addwf	??_printSortTimer,f,c
 11606  001530  5002               	movf	?i2___wmul+1,w,c
 11607  001532  222B               	addwfc	??_printSortTimer+1,f,c
 11608  001534  0101               	movlb	1	; () banked
 11609  001536  5100               	movf	_startTime& (0+255),w,b
 11610  001538  242A               	addwf	??_printSortTimer,w,c
 11611  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 11612  00153C  0101               	movlb	1	; () banked
 11613  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 11614  001540  202B               	addwfc	??_printSortTimer+1,w,c
 11615  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 11616                           
 11617                           ;sort.c: 155: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11618  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11619  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11620  00154C  0E00               	movlw	0
 11621  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11622  001550  0E3C               	movlw	60
 11623  001552  6E03               	movwf	i2___wmul@multiplicand,c
 11624  001554  ECE4  F013         	call	i2___wmul	;wreg free
 11625  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11626  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11627  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11628  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11629  001568  0E0E               	movlw	14
 11630  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11631  00156C  0E10               	movlw	16
 11632  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 11633  001570  ECE4  F013         	call	i2___wmul	;wreg free
 11634  001574  5001               	movf	?i2___wmul,w,c
 11635  001576  262A               	addwf	??_printSortTimer,f,c
 11636  001578  5002               	movf	?i2___wmul+1,w,c
 11637  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 11638  00157C  502D               	movf	printSortTimer@curTime,w,c
 11639  00157E  242A               	addwf	??_printSortTimer,w,c
 11640  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 11641  001582  502E               	movf	printSortTimer@curTime+1,w,c
 11642  001584  202B               	addwfc	??_printSortTimer+1,w,c
 11643  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11644                           
 11645                           ;sort.c: 156: unsigned int timeDiff = cur_sec - start_sec;
 11646  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11647  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11648  001590  1E2A               	comf	??_printSortTimer,f,c
 11649  001592  1E2B               	comf	??_printSortTimer+1,f,c
 11650  001594  4A2A               	infsnz	??_printSortTimer,f,c
 11651  001596  2A2B               	incf	??_printSortTimer+1,f,c
 11652  001598  503D               	movf	printSortTimer@cur_sec,w,c
 11653  00159A  242A               	addwf	??_printSortTimer,w,c
 11654  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 11655  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 11656  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 11657  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 11658                           
 11659                           ;sort.c: 158: total_time = timeDiff;
 11660  0015A4  C047  F0F3         	movff	printSortTimer@timeDiff,_total_time
 11661  0015A8  C048  F0F4         	movff	printSortTimer@timeDiff+1,_total_time+1
 11662                           
 11663                           ;sort.c: 160: if(timeDiff >= 10){
 11664  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 11665  0015AE  E104               	bnz	i2u447_40
 11666  0015B0  0E0A               	movlw	10
 11667  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 11668  0015B4  A0D8               	btfss	status,0,c
 11669  0015B6  D003               	goto	i2l5557
 11670  0015B8                     i2u447_40:
 11671                           
 11672                           ;sort.c: 161: machine_state = DoneSorting_state;
 11673  0015B8  0E02               	movlw	2
 11674  0015BA  0100               	movlb	0	; () banked
 11675  0015BC  6FF5               	movwf	_machine_state& (0+255),b
 11676  0015BE                     i2l5557:
 11677                           
 11678                           ;sort.c: 163: }
 11679                           ;sort.c: 165: int hour = timeDiff / 3600;
 11680  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11681  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11682  0015C6  0E0E               	movlw	14
 11683  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11684  0015CA  0E10               	movlw	16
 11685  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 11686  0015CE  EC45  F011         	call	i2___lwdiv	;wreg free
 11687  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11688  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11689                           
 11690                           ;sort.c: 166: int min = (timeDiff % 3600) / 60;
 11691  0015DA  0E0E               	movlw	14
 11692  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 11693  0015DE  0E10               	movlw	16
 11694  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 11695  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11696  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11697  0015EA  ECE0  F011         	call	i2___lwmod	;wreg free
 11698  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11699  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11700  0015F6  0E00               	movlw	0
 11701  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11702  0015FA  0E3C               	movlw	60
 11703  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 11704  0015FE  EC45  F011         	call	i2___lwdiv	;wreg free
 11705  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11706  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11707                           
 11708                           ;sort.c: 167: int sec = (timeDiff % 3600) % 60;
 11709  00160A  0E0E               	movlw	14
 11710  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 11711  00160E  0E10               	movlw	16
 11712  001610  6E03               	movwf	i2___lwmod@divisor,c
 11713  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11714  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11715  00161A  ECE0  F011         	call	i2___lwmod	;wreg free
 11716  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2183
 11717  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2183+1
 11718                           
 11719                           ;sort.c: 167: int sec = (timeDiff % 3600) % 60;
 11720  001626  C045  F001         	movff	_printSortTimer$2183,i2___lwmod@dividend
 11721  00162A  C046  F002         	movff	_printSortTimer$2183+1,i2___lwmod@dividend+1
 11722  00162E  0E00               	movlw	0
 11723  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 11724  001632  0E3C               	movlw	60
 11725  001634  6E03               	movwf	i2___lwmod@divisor,c
 11726  001636  ECE0  F011         	call	i2___lwmod	;wreg free
 11727  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11728  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11729                           
 11730                           ;sort.c: 169: lcdInst(0b10000000);;
 11731  001642  0E80               	movlw	128
 11732  001644  EC95  F014         	call	i2_lcdInst
 11733                           
 11734                           ;sort.c: 170: printf("Sorting...");
 11735  001648  0EA4               	movlw	low STR_49
 11736  00164A  6E0D               	movwf	i2printf@f,c
 11737  00164C  0EFF               	movlw	high STR_49
 11738  00164E  6E0E               	movwf	i2printf@f+1,c
 11739  001650  ECC0  F004         	call	i2_printf	;wreg free
 11740                           
 11741                           ;sort.c: 171: lcdInst(0b11000000);;
 11742  001654  0EC0               	movlw	192
 11743  001656  EC95  F014         	call	i2_lcdInst
 11744                           
 11745                           ;sort.c: 172: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11746  00165A  0EE4               	movlw	low STR_2
 11747  00165C  6E0D               	movwf	i2printf@f,c
 11748  00165E  0EFD               	movlw	high STR_2
 11749  001660  6E0E               	movwf	i2printf@f+1,c
 11750  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11751  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11752  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11753  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11754  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11755  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11756  00167A  ECC0  F004         	call	i2_printf	;wreg free
 11757  00167E  0012               	return		;funcret
 11758  001680                     __end_of_printSortTimer:
 11759                           	opt stack 0
 11760                           pclatu	equ	0xFFB
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           intcon3	equ	0xFF0
 11770                           indf0	equ	0xFEF
 11771                           postinc0	equ	0xFEE
 11772                           fsr0h	equ	0xFEA
 11773                           fsr0l	equ	0xFE9
 11774                           wreg	equ	0xFE8
 11775                           postdec1	equ	0xFE5
 11776                           fsr1h	equ	0xFE2
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8
 11784                           
 11785 ;; *************** function i2_printf *****************
 11786 ;; Defined at:
 11787 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11788 ;; Parameters:    Size  Location     Type
 11789 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11790 ;;		 -> STR_51(4), STR_50(21), STR_49(11), STR_48(24), 
 11791 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 11792 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
 11793 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 11794 ;;		 -> STR_23(17), STR_22(17), STR_21(17), STR_20(17), 
 11795 ;;		 -> STR_19(17), STR_18(17), STR_17(17), STR_16(17), 
 11796 ;;		 -> STR_15(17), STR_14(3), STR_13(17), STR_12(17), 
 11797 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(18), 
 11798 ;;		 -> STR_7(10), STR_6(17), STR_5(7), STR_4(17), 
 11799 ;;		 -> STR_3(18), STR_2(21), STR_1(17), 
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;  printf          4    0        struct .
 11802 ;;  printf          2   39[COMRAM] int 
 11803 ;;  printf          2   35[COMRAM] unsigned int 
 11804 ;;  printf          2   33[COMRAM] unsigned int 
 11805 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11806 ;;		 -> STR_52(7), printRTC@month(4), 
 11807 ;;  printf          2   29[COMRAM] PTR void [1]
 11808 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11809 ;;  printf          1   38[COMRAM] char 
 11810 ;;  printf          1   37[COMRAM] unsigned char 
 11811 ;;  printf          1   28[COMRAM] char 
 11812 ;; Return value:  Size  Location     Type
 11813 ;;                  2   12[COMRAM] int 
 11814 ;; Registers used:
 11815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11816 ;; Tracked objects:
 11817 ;;		On entry : 0/0
 11818 ;;		On exit  : 0/0
 11819 ;;		Unchanged: 0/0
 11820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11821 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;Total ram usage:       29 bytes
 11826 ;; Hardware stack levels used:    1
 11827 ;; Hardware stack levels required when called:    2
 11828 ;; This function calls:
 11829 ;;		i2___lwdiv
 11830 ;;		i2___lwmod
 11831 ;;		i2___wmul
 11832 ;;		i2_isdigit
 11833 ;;		i2_putch
 11834 ;; This function is called by:
 11835 ;;		_change_state_to_menu_11
 11836 ;;		_change_state_to_menu_23
 11837 ;;		_change_state_to_logs_11
 11838 ;;		_change_state_to_logs_12
 11839 ;;		_change_state_to_logs_22
 11840 ;;		_change_state_to_logs_23
 11841 ;;		_change_state_to_logs_33
 11842 ;;		_change_state_to_logs_34
 11843 ;;		_printSortTimer
 11844 ;;		_handler
 11845 ;;		i2_change_state_to_menu_start
 11846 ;;		i2_change_state_to_menu_12
 11847 ;;		i2_change_state_to_menu_22
 11848 ;;		i2_printRTC
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           	psect	text58
 11853  000980                     __ptext58:
 11854                           	opt stack 0
 11855  000980                     i2_printf:
 11856                           	opt stack 21
 11857                           
 11858                           ;doprnt.c: 466: va_list ap;
 11859                           ;doprnt.c: 499: signed char c;
 11860                           ;doprnt.c: 501: int width;
 11861                           ;doprnt.c: 506: signed char prec;
 11862                           ;doprnt.c: 508: unsigned char flag;
 11863                           ;doprnt.c: 523: union {
 11864                           ;doprnt.c: 524: unsigned long vd;
 11865                           ;doprnt.c: 525: double integ;
 11866                           ;doprnt.c: 526: } tmpval;
 11867                           ;doprnt.c: 528: unsigned int val;
 11868                           ;doprnt.c: 529: unsigned len;
 11869                           ;doprnt.c: 530: const char * cp;
 11870                           ;doprnt.c: 533: *ap = __va_start();
 11871                           
 11872                           ;incstack = 0
 11873  000980  0E0F               	movlw	low (?i2_printf+2)
 11874  000982  6E1E               	movwf	i2printf@ap,c
 11875  000984  0E00               	movlw	high (?i2_printf+2)
 11876  000986  6E1F               	movwf	i2printf@ap+1,c
 11877                           
 11878                           ;doprnt.c: 536: while(c = *f++) {
 11879  000988  D190               	goto	i2l4385
 11880  00098A                     i2l4261:
 11881                           
 11882                           ;doprnt.c: 538: if(c != '%')
 11883  00098A  0E25               	movlw	37
 11884  00098C  1827               	xorwf	i2printf@c,w,c
 11885  00098E  B4D8               	btfsc	status,2,c
 11886  000990  D004               	goto	i2l4265
 11887                           
 11888                           ;doprnt.c: 540: {
 11889                           ;doprnt.c: 541: (putch(c) );
 11890  000992  5027               	movf	i2printf@c,w,c
 11891  000994  EC8F  F014         	call	i2_putch
 11892                           
 11893                           ;doprnt.c: 542: continue;
 11894  000998  D188               	goto	i2l4385
 11895  00099A                     i2l4265:
 11896                           
 11897                           ;doprnt.c: 543: }
 11898                           ;doprnt.c: 546: width = 0;
 11899  00099A  0E00               	movlw	0
 11900  00099C  6E29               	movwf	i2printf@width+1,c
 11901  00099E  0E00               	movlw	0
 11902  0009A0  6E28               	movwf	i2printf@width,c
 11903                           
 11904                           ;doprnt.c: 548: flag = 0;
 11905  0009A2  0E00               	movlw	0
 11906  0009A4  6E26               	movwf	i2printf@flag,c
 11907                           
 11908                           ;doprnt.c: 551: switch(*f) {
 11909                           
 11910                           ;doprnt.c: 550: for(;;) {
 11911  0009A6  D003               	goto	i2l4271
 11912  0009A8                     i2l4267:
 11913                           
 11914                           ;doprnt.c: 580: flag |= 0x04;
 11915  0009A8  8426               	bsf	i2printf@flag,2,c
 11916                           
 11917                           ;doprnt.c: 581: f++;
 11918  0009AA  4A0D               	infsnz	i2printf@f,f,c
 11919  0009AC  2A0E               	incf	i2printf@f+1,f,c
 11920  0009AE                     i2l4271:
 11921  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11922  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11923  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11924  0009B6  6AF8               	clrf	tblptru,c
 11925  0009B8                     	endif
 11926  0009B8                     	if	0	;tblptru may be non-zero
 11927  0009B8                     	endif
 11928  0009B8  0008               	tblrd		*
 11929  0009BA  50F5               	movf	tablat,w,c
 11930                           
 11931                           ; Switch size 1, requested type "space"
 11932                           ; Number of cases is 1, Range of values is 48 to 48
 11933                           ; switch strategies available:
 11934                           ; Name         Instructions Cycles
 11935                           ; simple_byte            4     3 (average)
 11936                           ;	Chosen strategy is simple_byte
 11937  0009BC  0A30               	xorlw	48	; case 48
 11938  0009BE  B4D8               	btfsc	status,2,c
 11939  0009C0  D7F3               	goto	i2l4267
 11940                           
 11941                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11942                           
 11943                           ;doprnt.c: 586: }
 11944                           
 11945                           ;doprnt.c: 585: break;
 11946  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11947  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11948  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11949  0009CA  6AF8               	clrf	tblptru,c
 11950  0009CC                     	endif
 11951  0009CC                     	if	0	;tblptru may be non-zero
 11952  0009CC                     	endif
 11953  0009CC  0008               	tblrd		*
 11954  0009CE  50F5               	movf	tablat,w,c
 11955  0009D0  EC2C  F014         	call	i2_isdigit
 11956  0009D4  A0D8               	btfss	status,0,c
 11957  0009D6  D0A4               	goto	i2l4317
 11958                           
 11959                           ;doprnt.c: 598: width = 0;
 11960  0009D8  0E00               	movlw	0
 11961  0009DA  6E29               	movwf	i2printf@width+1,c
 11962  0009DC  0E00               	movlw	0
 11963  0009DE  6E28               	movwf	i2printf@width,c
 11964  0009E0                     i2l4277:
 11965                           
 11966                           ;doprnt.c: 600: width *= 10;
 11967  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11968  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11969  0009E8  0E00               	movlw	0
 11970  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11971  0009EC  0E0A               	movlw	10
 11972  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 11973  0009F0  ECE4  F013         	call	i2___wmul	;wreg free
 11974  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 11975  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11976                           
 11977                           ;doprnt.c: 601: width += *f++ - '0';
 11978  0009FC  0ED0               	movlw	208
 11979  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 11980  000A00  0EFF               	movlw	255
 11981  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11982  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 11983  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11984  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11985  000A0C  6AF8               	clrf	tblptru,c
 11986  000A0E                     	endif
 11987  000A0E                     	if	0	;tblptru may be non-zero
 11988  000A0E                     	endif
 11989  000A0E  0008               	tblrd		*
 11990  000A10  50F5               	movf	tablat,w,c
 11991  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11992  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11993  000A16  5019               	movf	??i2_printf,w,c
 11994  000A18  261B               	addwf	??i2_printf+2,f,c
 11995  000A1A  501A               	movf	??i2_printf+1,w,c
 11996  000A1C  221C               	addwfc	??i2_printf+3,f,c
 11997  000A1E  501B               	movf	??i2_printf+2,w,c
 11998  000A20  2628               	addwf	i2printf@width,f,c
 11999  000A22  501C               	movf	??i2_printf+3,w,c
 12000  000A24  2229               	addwfc	i2printf@width+1,f,c
 12001  000A26  4A0D               	infsnz	i2printf@f,f,c
 12002  000A28  2A0E               	incf	i2printf@f+1,f,c
 12003                           
 12004                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12005  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12006  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12007  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12008  000A32  6AF8               	clrf	tblptru,c
 12009  000A34                     	endif
 12010  000A34                     	if	0	;tblptru may be non-zero
 12011  000A34                     	endif
 12012  000A34  0008               	tblrd		*
 12013  000A36  50F5               	movf	tablat,w,c
 12014  000A38  EC2C  F014         	call	i2_isdigit
 12015  000A3C  A0D8               	btfss	status,0,c
 12016  000A3E  D070               	goto	i2l4317
 12017  000A40  D7CF               	goto	i2l4277
 12018  000A42                     i2l4285:
 12019                           
 12020                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12021  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12022  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12023  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12024  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12025  000A52  0E02               	movlw	2
 12026  000A54  261E               	addwf	i2printf@ap,f,c
 12027  000A56  0E00               	movlw	0
 12028  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12029                           
 12030                           ;doprnt.c: 740: if(!cp)
 12031  000A5A  5020               	movf	i2printf@cp,w,c
 12032  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12033  000A5E  A4D8               	btfss	status,2,c
 12034  000A60  D004               	goto	i2l4293
 12035                           
 12036                           ;doprnt.c: 741: cp = "(null)";
 12037  000A62  0EB9               	movlw	low STR_52
 12038  000A64  6E20               	movwf	i2printf@cp,c
 12039  000A66  0EFF               	movlw	high STR_52
 12040  000A68  6E21               	movwf	i2printf@cp+1,c
 12041  000A6A                     i2l4293:
 12042                           
 12043                           ;doprnt.c: 745: len = 0;
 12044  000A6A  0E00               	movlw	0
 12045  000A6C  6E25               	movwf	i2printf@len+1,c
 12046  000A6E  0E00               	movlw	0
 12047  000A70  6E24               	movwf	i2printf@len,c
 12048                           
 12049                           ;doprnt.c: 746: while(cp[len])
 12050  000A72  D002               	goto	i2l4297
 12051  000A74                     i2l4295:
 12052                           
 12053                           ;doprnt.c: 747: len++;
 12054  000A74  4A24               	infsnz	i2printf@len,f,c
 12055  000A76  2A25               	incf	i2printf@len+1,f,c
 12056  000A78                     i2l4297:
 12057  000A78  5024               	movf	i2printf@len,w,c
 12058  000A7A  2420               	addwf	i2printf@cp,w,c
 12059  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12060  000A7E  5025               	movf	i2printf@len+1,w,c
 12061  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12062  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12063  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12064  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12065  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12066  000A8E  6EF8               	movwf	tblptru,c
 12067  000A90  0E0F               	movlw	(high __ramtop+-1)
 12068  000A92  64F7               	cpfsgt	tblptrh,c
 12069  000A94  D003               	bra	i2u293_47
 12070  000A96  0008               	tblrd		*
 12071  000A98  50F5               	movf	tablat,w,c
 12072  000A9A  D005               	bra	i2u293_40
 12073  000A9C                     i2u293_47:
 12074  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12075  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12076  000AA4  50EF               	movf	indf0,w,c
 12077  000AA6                     i2u293_40:
 12078  000AA6  0900               	iorlw	0
 12079  000AA8  A4D8               	btfss	status,2,c
 12080  000AAA  D7E4               	goto	i2l4295
 12081                           
 12082                           ;doprnt.c: 757: if(width > len)
 12083  000AAC  5028               	movf	i2printf@width,w,c
 12084  000AAE  5C24               	subwf	i2printf@len,w,c
 12085  000AB0  5029               	movf	i2printf@width+1,w,c
 12086  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12087  000AB4  B0D8               	btfsc	status,0,c
 12088  000AB6  D005               	goto	i2l4303
 12089                           
 12090                           ;doprnt.c: 758: width -= len;
 12091  000AB8  5024               	movf	i2printf@len,w,c
 12092  000ABA  5E28               	subwf	i2printf@width,f,c
 12093  000ABC  5025               	movf	i2printf@len+1,w,c
 12094  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12095  000AC0  D008               	goto	i2l4307
 12096  000AC2                     i2l4303:
 12097                           
 12098                           ;doprnt.c: 759: else
 12099                           ;doprnt.c: 760: width = 0;
 12100  000AC2  0E00               	movlw	0
 12101  000AC4  6E29               	movwf	i2printf@width+1,c
 12102  000AC6  0E00               	movlw	0
 12103  000AC8  6E28               	movwf	i2printf@width,c
 12104                           
 12105                           ;doprnt.c: 764: while(width--)
 12106  000ACA  D003               	goto	i2l4307
 12107  000ACC                     i2l4305:
 12108                           
 12109                           ;doprnt.c: 765: (putch(' ') );
 12110  000ACC  0E20               	movlw	32
 12111  000ACE  EC8F  F014         	call	i2_putch
 12112  000AD2                     i2l4307:
 12113  000AD2  0628               	decf	i2printf@width,f,c
 12114  000AD4  A0D8               	btfss	status,0,c
 12115  000AD6  0629               	decf	i2printf@width+1,f,c
 12116  000AD8  2828               	incf	i2printf@width,w,c
 12117  000ADA  E1F8               	bnz	i2l4305
 12118  000ADC  2829               	incf	i2printf@width+1,w,c
 12119  000ADE  B4D8               	btfsc	status,2,c
 12120  000AE0  D016               	goto	i2l4313
 12121  000AE2  D7F4               	goto	i2l4305
 12122  000AE4                     i2l4309:
 12123                           
 12124                           ;doprnt.c: 768: (putch(*cp++) );
 12125  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12126  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12127  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12128  000AEE  6EF8               	movwf	tblptru,c
 12129  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12130  000AF2  64F7               	cpfsgt	tblptrh,c
 12131  000AF4  D003               	bra	i2u297_47
 12132  000AF6  0008               	tblrd		*
 12133  000AF8  50F5               	movf	tablat,w,c
 12134  000AFA  D005               	bra	i2u297_40
 12135  000AFC                     i2u297_47:
 12136  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12137  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12138  000B04  50EF               	movf	indf0,w,c
 12139  000B06                     i2u297_40:
 12140  000B06  EC8F  F014         	call	i2_putch
 12141  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12142  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12143  000B0E                     i2l4313:
 12144  000B0E  0624               	decf	i2printf@len,f,c
 12145  000B10  A0D8               	btfss	status,0,c
 12146  000B12  0625               	decf	i2printf@len+1,f,c
 12147  000B14  2824               	incf	i2printf@len,w,c
 12148  000B16  E1E6               	bnz	i2l4309
 12149  000B18  2825               	incf	i2printf@len+1,w,c
 12150  000B1A  B4D8               	btfsc	status,2,c
 12151  000B1C  D0C6               	goto	i2l4385
 12152  000B1E  D7E2               	goto	i2l4309
 12153  000B20                     i2l4317:
 12154  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12155  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12156  000B28  4A0D               	infsnz	i2printf@f,f,c
 12157  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12158  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12159  000B2C  6AF8               	clrf	tblptru,c
 12160  000B2E                     	endif
 12161  000B2E                     	if	0	;tblptru may be non-zero
 12162  000B2E                     	endif
 12163  000B2E  0008               	tblrd		*
 12164  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12165  000B34  5027               	movf	i2printf@c,w,c
 12166                           
 12167                           ; Switch size 1, requested type "space"
 12168                           ; Number of cases is 4, Range of values is 0 to 115
 12169                           ; switch strategies available:
 12170                           ; Name         Instructions Cycles
 12171                           ; simple_byte           13     7 (average)
 12172                           ;	Chosen strategy is simple_byte
 12173  000B36  0A00               	xorlw	0	; case 0
 12174  000B38  B4D8               	btfsc	status,2,c
 12175  000B3A  0012               	return	
 12176  000B3C  0A64               	xorlw	100	; case 100
 12177  000B3E  B4D8               	btfsc	status,2,c
 12178  000B40  D007               	goto	i2l4319
 12179  000B42  0A0D               	xorlw	13	; case 105
 12180  000B44  B4D8               	btfsc	status,2,c
 12181  000B46  D004               	goto	i2l4319
 12182  000B48  0A1A               	xorlw	26	; case 115
 12183  000B4A  B4D8               	btfsc	status,2,c
 12184  000B4C  D77A               	goto	i2l4285
 12185  000B4E  D0AD               	goto	i2l4385
 12186  000B50                     i2l4319:
 12187                           
 12188                           ;doprnt.c: 1253: {
 12189                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12190  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12191  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12192  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12193  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12194  000B60  0E02               	movlw	2
 12195  000B62  261E               	addwf	i2printf@ap,f,c
 12196  000B64  0E00               	movlw	0
 12197  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12198                           
 12199                           ;doprnt.c: 1261: if((int)val < 0) {
 12200  000B68  AE23               	btfss	i2printf@val+1,7,c
 12201  000B6A  D006               	goto	i2l4329
 12202                           
 12203                           ;doprnt.c: 1262: flag |= 0x03;
 12204  000B6C  0E03               	movlw	3
 12205  000B6E  1226               	iorwf	i2printf@flag,f,c
 12206                           
 12207                           ;doprnt.c: 1263: val = -val;
 12208  000B70  6C22               	negf	i2printf@val,c
 12209  000B72  1E23               	comf	i2printf@val+1,f,c
 12210  000B74  B0D8               	btfsc	status,0,c
 12211  000B76  2A23               	incf	i2printf@val+1,f,c
 12212  000B78                     i2l4329:
 12213                           
 12214                           ;doprnt.c: 1264: }
 12215                           ;doprnt.c: 1266: }
 12216                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12217  000B78  0E01               	movlw	1
 12218  000B7A  6E27               	movwf	i2printf@c,c
 12219  000B7C                     i2l4331:
 12220  000B7C  0E05               	movlw	5
 12221  000B7E  1827               	xorwf	i2printf@c,w,c
 12222  000B80  B4D8               	btfsc	status,2,c
 12223  000B82  D015               	goto	i2l4343
 12224                           
 12225                           ;doprnt.c: 1306: if(val < dpowers[c])
 12226  000B84  5027               	movf	i2printf@c,w,c
 12227  000B86  0D02               	mullw	2
 12228  000B88  0EC2               	movlw	low _dpowers
 12229  000B8A  24F3               	addwf	prodl,w,c
 12230  000B8C  6EF6               	movwf	tblptrl,c
 12231  000B8E  0EFD               	movlw	high _dpowers
 12232  000B90  20F4               	addwfc	prodh,w,c
 12233  000B92  6EF7               	movwf	tblptrh,c
 12234  000B94                     	if	1	;There are 3 active tblptr bytes
 12235  000B94  6AF8               	clrf	tblptru,c
 12236  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12237  000B98  22F8               	addwfc	tblptru,f,c
 12238  000B9A                     	endif
 12239  000B9A  0009               	tblrd		*+
 12240  000B9C  50F5               	movf	tablat,w,c
 12241  000B9E  5C22               	subwf	i2printf@val,w,c
 12242  000BA0  0009               	tblrd		*+
 12243  000BA2  50F5               	movf	tablat,w,c
 12244  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12245  000BA6  A0D8               	btfss	status,0,c
 12246  000BA8  D002               	goto	i2l4343
 12247                           
 12248                           ;doprnt.c: 1307: break;
 12249  000BAA  2A27               	incf	i2printf@c,f,c
 12250  000BAC  D7E7               	goto	i2l4331
 12251  000BAE                     i2l4343:
 12252                           
 12253                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12254  000BAE  5028               	movf	i2printf@width,w,c
 12255  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12256  000BB2  B4D8               	btfsc	status,2,c
 12257  000BB4  D009               	goto	i2l4349
 12258  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12259  000BBA  0E03               	movlw	3
 12260  000BBC  1619               	andwf	??i2_printf,f,c
 12261  000BBE  B4D8               	btfsc	status,2,c
 12262  000BC0  D003               	goto	i2l4349
 12263                           
 12264                           ;doprnt.c: 1346: width--;
 12265  000BC2  0628               	decf	i2printf@width,f,c
 12266  000BC4  A0D8               	btfss	status,0,c
 12267  000BC6  0629               	decf	i2printf@width+1,f,c
 12268  000BC8                     i2l4349:
 12269                           
 12270                           ;doprnt.c: 1381: if(width > c)
 12271  000BC8  0E80               	movlw	128
 12272  000BCA  BE27               	btfsc	i2printf@c,7,c
 12273  000BCC  0E7F               	movlw	127
 12274  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12275  000BD0  5028               	movf	i2printf@width,w,c
 12276  000BD2  5C27               	subwf	i2printf@c,w,c
 12277  000BD4  5029               	movf	i2printf@width+1,w,c
 12278  000BD6  0A80               	xorlw	128
 12279  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12280  000BDA  B0D8               	btfsc	status,0,c
 12281  000BDC  D007               	goto	i2l4353
 12282                           
 12283                           ;doprnt.c: 1382: width -= c;
 12284  000BDE  5027               	movf	i2printf@c,w,c
 12285  000BE0  5E28               	subwf	i2printf@width,f,c
 12286  000BE2  0E00               	movlw	0
 12287  000BE4  BE27               	btfsc	i2printf@c,7,c
 12288  000BE6  0EFF               	movlw	255
 12289  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12290  000BEA  D004               	goto	i2l4355
 12291  000BEC                     i2l4353:
 12292                           
 12293                           ;doprnt.c: 1383: else
 12294                           ;doprnt.c: 1384: width = 0;
 12295  000BEC  0E00               	movlw	0
 12296  000BEE  6E29               	movwf	i2printf@width+1,c
 12297  000BF0  0E00               	movlw	0
 12298  000BF2  6E28               	movwf	i2printf@width,c
 12299  000BF4                     i2l4355:
 12300                           
 12301                           ;doprnt.c: 1387: if(flag & 0x04) {
 12302  000BF4  A426               	btfss	i2printf@flag,2,c
 12303  000BF6  D014               	goto	i2l4367
 12304                           
 12305                           ;doprnt.c: 1392: if(flag & 0x03)
 12306  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12307  000BFC  0E03               	movlw	3
 12308  000BFE  1619               	andwf	??i2_printf,f,c
 12309  000C00  B4D8               	btfsc	status,2,c
 12310  000C02  D003               	goto	i2l4361
 12311                           
 12312                           ;doprnt.c: 1393: (putch('-') );
 12313  000C04  0E2D               	movlw	45
 12314  000C06  EC8F  F014         	call	i2_putch
 12315  000C0A                     i2l4361:
 12316                           
 12317                           ;doprnt.c: 1415: if(width)
 12318  000C0A  5028               	movf	i2printf@width,w,c
 12319  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12320  000C0E  B4D8               	btfsc	status,2,c
 12321  000C10  D01E               	goto	i2l4377
 12322                           
 12323                           ;doprnt.c: 1417: (putch('0') );
 12324                           
 12325                           ;doprnt.c: 1416: do
 12326  000C12  0E30               	movlw	48
 12327  000C14  EC8F  F014         	call	i2_putch
 12328                           
 12329                           ;doprnt.c: 1418: while(--width);
 12330  000C18  0628               	decf	i2printf@width,f,c
 12331  000C1A  A0D8               	btfss	status,0,c
 12332  000C1C  0629               	decf	i2printf@width+1,f,c
 12333  000C1E  D7F5               	goto	i2l4361
 12334  000C20                     i2l4367:
 12335                           
 12336                           ;doprnt.c: 1422: {
 12337                           ;doprnt.c: 1424: if(width
 12338                           ;doprnt.c: 1428: )
 12339  000C20  5028               	movf	i2printf@width,w,c
 12340  000C22  1029               	iorwf	i2printf@width+1,w,c
 12341  000C24  B4D8               	btfsc	status,2,c
 12342  000C26  D00A               	goto	i2l4373
 12343  000C28                     i2l4369:
 12344                           
 12345                           ;doprnt.c: 1430: (putch(' ') );
 12346  000C28  0E20               	movlw	32
 12347  000C2A  EC8F  F014         	call	i2_putch
 12348                           
 12349                           ;doprnt.c: 1431: while(--width);
 12350  000C2E  0628               	decf	i2printf@width,f,c
 12351  000C30  A0D8               	btfss	status,0,c
 12352  000C32  0629               	decf	i2printf@width+1,f,c
 12353  000C34  5028               	movf	i2printf@width,w,c
 12354  000C36  1029               	iorwf	i2printf@width+1,w,c
 12355  000C38  A4D8               	btfss	status,2,c
 12356  000C3A  D7F6               	goto	i2l4369
 12357  000C3C                     i2l4373:
 12358                           
 12359                           ;doprnt.c: 1438: if(flag & 0x03)
 12360  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12361  000C40  0E03               	movlw	3
 12362  000C42  1619               	andwf	??i2_printf,f,c
 12363  000C44  B4D8               	btfsc	status,2,c
 12364  000C46  D003               	goto	i2l4377
 12365                           
 12366                           ;doprnt.c: 1439: (putch('-') );
 12367  000C48  0E2D               	movlw	45
 12368  000C4A  EC8F  F014         	call	i2_putch
 12369  000C4E                     i2l4377:
 12370                           
 12371                           ;doprnt.c: 1469: }
 12372                           ;doprnt.c: 1472: prec = c;
 12373  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12374                           
 12375                           ;doprnt.c: 1474: while(prec--) {
 12376  000C52  D027               	goto	i2l4383
 12377  000C54                     i2l4379:
 12378                           
 12379                           ;doprnt.c: 1478: {
 12380                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12381  000C54  501D               	movf	i2printf@prec,w,c
 12382  000C56  0D02               	mullw	2
 12383  000C58  0EC2               	movlw	low _dpowers
 12384  000C5A  24F3               	addwf	prodl,w,c
 12385  000C5C  6EF6               	movwf	tblptrl,c
 12386  000C5E  0EFD               	movlw	high _dpowers
 12387  000C60  20F4               	addwfc	prodh,w,c
 12388  000C62  6EF7               	movwf	tblptrh,c
 12389  000C64                     	if	1	;There are 3 active tblptr bytes
 12390  000C64  6AF8               	clrf	tblptru,c
 12391  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12392  000C68  22F8               	addwfc	tblptru,f,c
 12393  000C6A                     	endif
 12394  000C6A  0009               	tblrd		*+
 12395  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12396  000C70  000A               	tblrd		*-
 12397  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12398  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12399  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12400  000C7E  EC45  F011         	call	i2___lwdiv	;wreg free
 12401  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12402  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12403  000C8A  0E00               	movlw	0
 12404  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12405  000C8E  0E0A               	movlw	10
 12406  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12407  000C92  ECE0  F011         	call	i2___lwmod	;wreg free
 12408  000C96  5001               	movf	?i2___lwmod,w,c
 12409  000C98  0F30               	addlw	48
 12410  000C9A  6E27               	movwf	i2printf@c,c
 12411                           
 12412                           ;doprnt.c: 1523: }
 12413                           ;doprnt.c: 1524: (putch(c) );
 12414  000C9C  5027               	movf	i2printf@c,w,c
 12415  000C9E  EC8F  F014         	call	i2_putch
 12416  000CA2                     i2l4383:
 12417  000CA2  061D               	decf	i2printf@prec,f,c
 12418  000CA4  281D               	incf	i2printf@prec,w,c
 12419  000CA6  A4D8               	btfss	status,2,c
 12420  000CA8  D7D5               	goto	i2l4379
 12421  000CAA                     i2l4385:
 12422  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12423  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12424  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12425  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12426  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12427  000CB6  6AF8               	clrf	tblptru,c
 12428  000CB8                     	endif
 12429  000CB8                     	if	0	;tblptru may be non-zero
 12430  000CB8                     	endif
 12431  000CB8  0008               	tblrd		*
 12432  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12433  000CBE  5027               	movf	i2printf@c,w,c
 12434  000CC0  B4D8               	btfsc	status,2,c
 12435  000CC2  0012               	return	
 12436  000CC4  D662               	goto	i2l4261
 12437  000CC6                     __end_ofi2_printf:
 12438                           	opt stack 0
 12439                           pclatu	equ	0xFFB
 12440                           pclath	equ	0xFFA
 12441                           tblptru	equ	0xFF8
 12442                           tblptrh	equ	0xFF7
 12443                           tblptrl	equ	0xFF6
 12444                           tablat	equ	0xFF5
 12445                           prodh	equ	0xFF4
 12446                           prodl	equ	0xFF3
 12447                           intcon	equ	0xFF2
 12448                           intcon3	equ	0xFF0
 12449                           indf0	equ	0xFEF
 12450                           postinc0	equ	0xFEE
 12451                           fsr0h	equ	0xFEA
 12452                           fsr0l	equ	0xFE9
 12453                           wreg	equ	0xFE8
 12454                           postdec1	equ	0xFE5
 12455                           fsr1h	equ	0xFE2
 12456                           fsr1l	equ	0xFE1
 12457                           indf2	equ	0xFDF
 12458                           postinc2	equ	0xFDE
 12459                           postdec2	equ	0xFDD
 12460                           fsr2h	equ	0xFDA
 12461                           fsr2l	equ	0xFD9
 12462                           status	equ	0xFD8
 12463                           
 12464 ;; *************** function i2_putch *****************
 12465 ;; Defined at:
 12466 ;;		line 18 in file "lcd.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;  data            1    wreg     unsigned char 
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  data            1    2[COMRAM] unsigned char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, status,2, status,0, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;Total ram usage:        1 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    1
 12487 ;; This function calls:
 12488 ;;		i2_lcdNibble
 12489 ;; This function is called by:
 12490 ;;		i2_printf
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text59
 12495  00291E                     __ptext59:
 12496                           	opt stack 0
 12497  00291E                     i2_putch:
 12498                           	opt stack 21
 12499                           
 12500                           ;incstack = 0
 12501                           ;i2putch@data stored from wreg
 12502  00291E  6E03               	movwf	i2putch@data,c
 12503                           
 12504                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12505  002920  848C               	bsf	3980,2,c	;volatile
 12506                           
 12507                           ;lcd.c: 20: lcdNibble(data);
 12508  002922  5003               	movf	i2putch@data,w,c
 12509  002924  EC1A  F011         	call	i2_lcdNibble
 12510  002928  0012               	return		;funcret
 12511  00292A                     __end_ofi2_putch:
 12512                           	opt stack 0
 12513                           pclatu	equ	0xFFB
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon3	equ	0xFF0
 12523                           indf0	equ	0xFEF
 12524                           postinc0	equ	0xFEE
 12525                           fsr0h	equ	0xFEA
 12526                           fsr0l	equ	0xFE9
 12527                           wreg	equ	0xFE8
 12528                           postdec1	equ	0xFE5
 12529                           fsr1h	equ	0xFE2
 12530                           fsr1l	equ	0xFE1
 12531                           indf2	equ	0xFDF
 12532                           postinc2	equ	0xFDE
 12533                           postdec2	equ	0xFDD
 12534                           fsr2h	equ	0xFDA
 12535                           fsr2l	equ	0xFD9
 12536                           status	equ	0xFD8
 12537                           
 12538 ;; *************** function i2_isdigit *****************
 12539 ;; Defined at:
 12540 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  c               1    wreg     unsigned char 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  c               1    2[COMRAM] unsigned char 
 12545 ;; Return value:  Size  Location     Type
 12546 ;;		None               void
 12547 ;; Registers used:
 12548 ;;		wreg, status,2, status,0
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12558 ;;Total ram usage:        3 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; This function calls:
 12561 ;;		Nothing
 12562 ;; This function is called by:
 12563 ;;		i2_printf
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           	psect	text60
 12568  002858                     __ptext60:
 12569                           	opt stack 0
 12570  002858                     i2_isdigit:
 12571                           	opt stack 22
 12572                           
 12573                           ;incstack = 0
 12574                           ;i2isdigit@c stored from wreg
 12575  002858  6E03               	movwf	i2isdigit@c,c
 12576  00285A  0E00               	movlw	0
 12577  00285C  6E02               	movwf	i2_isdigit$1710,c
 12578  00285E  0E3A               	movlw	58
 12579  002860  6003               	cpfslt	i2isdigit@c,c
 12580  002862  D005               	goto	i2l4021
 12581  002864  0E2F               	movlw	47
 12582  002866  6403               	cpfsgt	i2isdigit@c,c
 12583  002868  D002               	goto	i2l4021
 12584  00286A  0E01               	movlw	1
 12585  00286C  6E02               	movwf	i2_isdigit$1710,c
 12586  00286E                     i2l4021:
 12587  00286E  C002  F001         	movff	i2_isdigit$1710,??i2_isdigit
 12588  002872  3001               	rrcf	??i2_isdigit,w,c
 12589  002874  0012               	return	
 12590  002876                     __end_ofi2_isdigit:
 12591                           	opt stack 0
 12592                           pclatu	equ	0xFFB
 12593                           pclath	equ	0xFFA
 12594                           tblptru	equ	0xFF8
 12595                           tblptrh	equ	0xFF7
 12596                           tblptrl	equ	0xFF6
 12597                           tablat	equ	0xFF5
 12598                           prodh	equ	0xFF4
 12599                           prodl	equ	0xFF3
 12600                           intcon	equ	0xFF2
 12601                           intcon3	equ	0xFF0
 12602                           indf0	equ	0xFEF
 12603                           postinc0	equ	0xFEE
 12604                           fsr0h	equ	0xFEA
 12605                           fsr0l	equ	0xFE9
 12606                           wreg	equ	0xFE8
 12607                           postdec1	equ	0xFE5
 12608                           fsr1h	equ	0xFE2
 12609                           fsr1l	equ	0xFE1
 12610                           indf2	equ	0xFDF
 12611                           postinc2	equ	0xFDE
 12612                           postdec2	equ	0xFDD
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           
 12617 ;; *************** function i2___wmul *****************
 12618 ;; Defined at:
 12619 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  multiplier      2    0[COMRAM] unsigned int 
 12622 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  __wmul          2    4[COMRAM] unsigned int 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  2    0[COMRAM] unsigned int 
 12627 ;; Registers used:
 12628 ;;		wreg, status,2, status,0, prodl, prodh
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12637 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12638 ;;Total ram usage:        6 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; This function calls:
 12641 ;;		Nothing
 12642 ;; This function is called by:
 12643 ;;		_printSortTimer
 12644 ;;		i2_printf
 12645 ;; This function uses a non-reentrant model
 12646 ;;
 12647                           
 12648                           	psect	text61
 12649  0027C8                     __ptext61:
 12650                           	opt stack 0
 12651  0027C8                     i2___wmul:
 12652                           	opt stack 22
 12653                           
 12654                           ;incstack = 0
 12655  0027C8  5001               	movf	i2___wmul@multiplier,w,c
 12656  0027CA  0203               	mulwf	i2___wmul@multiplicand,c
 12657  0027CC  CFF3 F005          	movff	prodl,i2___wmul@product
 12658  0027D0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12659  0027D4  5001               	movf	i2___wmul@multiplier,w,c
 12660  0027D6  0204               	mulwf	i2___wmul@multiplicand+1,c
 12661  0027D8  50F3               	movf	prodl,w,c
 12662  0027DA  2606               	addwf	i2___wmul@product+1,f,c
 12663  0027DC  5002               	movf	i2___wmul@multiplier+1,w,c
 12664  0027DE  0203               	mulwf	i2___wmul@multiplicand,c
 12665  0027E0  50F3               	movf	prodl,w,c
 12666  0027E2  2606               	addwf	i2___wmul@product+1,f,c
 12667  0027E4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12668  0027E8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12669  0027EC  0012               	return	
 12670  0027EE                     __end_ofi2___wmul:
 12671                           	opt stack 0
 12672                           pclatu	equ	0xFFB
 12673                           pclath	equ	0xFFA
 12674                           tblptru	equ	0xFF8
 12675                           tblptrh	equ	0xFF7
 12676                           tblptrl	equ	0xFF6
 12677                           tablat	equ	0xFF5
 12678                           prodh	equ	0xFF4
 12679                           prodl	equ	0xFF3
 12680                           intcon	equ	0xFF2
 12681                           intcon3	equ	0xFF0
 12682                           indf0	equ	0xFEF
 12683                           postinc0	equ	0xFEE
 12684                           fsr0h	equ	0xFEA
 12685                           fsr0l	equ	0xFE9
 12686                           wreg	equ	0xFE8
 12687                           postdec1	equ	0xFE5
 12688                           fsr1h	equ	0xFE2
 12689                           fsr1l	equ	0xFE1
 12690                           indf2	equ	0xFDF
 12691                           postinc2	equ	0xFDE
 12692                           postdec2	equ	0xFDD
 12693                           fsr2h	equ	0xFDA
 12694                           fsr2l	equ	0xFD9
 12695                           status	equ	0xFD8
 12696                           
 12697 ;; *************** function i2___lwmod *****************
 12698 ;; Defined at:
 12699 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12700 ;; Parameters:    Size  Location     Type
 12701 ;;  dividend        2    0[COMRAM] unsigned int 
 12702 ;;  divisor         2    2[COMRAM] unsigned int 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12705 ;; Return value:  Size  Location     Type
 12706 ;;                  2    0[COMRAM] unsigned int 
 12707 ;; Registers used:
 12708 ;;		wreg, status,2, status,0
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12717 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12718 ;;Total ram usage:        5 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; This function calls:
 12721 ;;		Nothing
 12722 ;; This function is called by:
 12723 ;;		_printSortTimer
 12724 ;;		i2_printf
 12725 ;; This function uses a non-reentrant model
 12726 ;;
 12727                           
 12728                           	psect	text62
 12729  0023C0                     __ptext62:
 12730                           	opt stack 0
 12731  0023C0                     i2___lwmod:
 12732                           	opt stack 22
 12733                           
 12734                           ;incstack = 0
 12735  0023C0  5003               	movf	i2___lwmod@divisor,w,c
 12736  0023C2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12737  0023C4  B4D8               	btfsc	status,2,c
 12738  0023C6  D018               	goto	i2l1662
 12739  0023C8  0E01               	movlw	1
 12740  0023CA  6E05               	movwf	i2___lwmod@counter,c
 12741  0023CC  D004               	goto	i2l4053
 12742  0023CE                     i2l4051:
 12743  0023CE  90D8               	bcf	status,0,c
 12744  0023D0  3603               	rlcf	i2___lwmod@divisor,f,c
 12745  0023D2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12746  0023D4  2A05               	incf	i2___lwmod@counter,f,c
 12747  0023D6                     i2l4053:
 12748  0023D6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12749  0023D8  D7FA               	goto	i2l4051
 12750  0023DA                     i2l4055:
 12751  0023DA  5003               	movf	i2___lwmod@divisor,w,c
 12752  0023DC  5C01               	subwf	i2___lwmod@dividend,w,c
 12753  0023DE  5004               	movf	i2___lwmod@divisor+1,w,c
 12754  0023E0  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12755  0023E2  A0D8               	btfss	status,0,c
 12756  0023E4  D004               	goto	i2l4059
 12757  0023E6  5003               	movf	i2___lwmod@divisor,w,c
 12758  0023E8  5E01               	subwf	i2___lwmod@dividend,f,c
 12759  0023EA  5004               	movf	i2___lwmod@divisor+1,w,c
 12760  0023EC  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12761  0023EE                     i2l4059:
 12762  0023EE  90D8               	bcf	status,0,c
 12763  0023F0  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12764  0023F2  3203               	rrcf	i2___lwmod@divisor,f,c
 12765  0023F4  2E05               	decfsz	i2___lwmod@counter,f,c
 12766  0023F6  D7F1               	goto	i2l4055
 12767  0023F8                     i2l1662:
 12768  0023F8  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12769  0023FC  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12770  002400  0012               	return		;funcret
 12771  002402                     __end_ofi2___lwmod:
 12772                           	opt stack 0
 12773                           pclatu	equ	0xFFB
 12774                           pclath	equ	0xFFA
 12775                           tblptru	equ	0xFF8
 12776                           tblptrh	equ	0xFF7
 12777                           tblptrl	equ	0xFF6
 12778                           tablat	equ	0xFF5
 12779                           prodh	equ	0xFF4
 12780                           prodl	equ	0xFF3
 12781                           intcon	equ	0xFF2
 12782                           intcon3	equ	0xFF0
 12783                           indf0	equ	0xFEF
 12784                           postinc0	equ	0xFEE
 12785                           fsr0h	equ	0xFEA
 12786                           fsr0l	equ	0xFE9
 12787                           wreg	equ	0xFE8
 12788                           postdec1	equ	0xFE5
 12789                           fsr1h	equ	0xFE2
 12790                           fsr1l	equ	0xFE1
 12791                           indf2	equ	0xFDF
 12792                           postinc2	equ	0xFDE
 12793                           postdec2	equ	0xFDD
 12794                           fsr2h	equ	0xFDA
 12795                           fsr2l	equ	0xFD9
 12796                           status	equ	0xFD8
 12797                           
 12798 ;; *************** function i2___lwdiv *****************
 12799 ;; Defined at:
 12800 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;  dividend        2    5[COMRAM] unsigned int 
 12803 ;;  divisor         2    7[COMRAM] unsigned int 
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12806 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12807 ;; Return value:  Size  Location     Type
 12808 ;;                  2    5[COMRAM] unsigned int 
 12809 ;; Registers used:
 12810 ;;		wreg, status,2, status,0
 12811 ;; Tracked objects:
 12812 ;;		On entry : 0/0
 12813 ;;		On exit  : 0/0
 12814 ;;		Unchanged: 0/0
 12815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;Total ram usage:        7 bytes
 12821 ;; Hardware stack levels used:    1
 12822 ;; This function calls:
 12823 ;;		Nothing
 12824 ;; This function is called by:
 12825 ;;		_printSortTimer
 12826 ;;		i2_printf
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           	psect	text63
 12831  00228A                     __ptext63:
 12832                           	opt stack 0
 12833  00228A                     i2___lwdiv:
 12834                           	opt stack 22
 12835                           
 12836                           ;incstack = 0
 12837  00228A  0E00               	movlw	0
 12838  00228C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12839  00228E  0E00               	movlw	0
 12840  002290  6E0A               	movwf	i2___lwdiv@quotient,c
 12841  002292  5008               	movf	i2___lwdiv@divisor,w,c
 12842  002294  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12843  002296  B4D8               	btfsc	status,2,c
 12844  002298  D01C               	goto	i2l1652
 12845  00229A  0E01               	movlw	1
 12846  00229C  6E0C               	movwf	i2___lwdiv@counter,c
 12847  00229E  D004               	goto	i2l4033
 12848  0022A0                     i2l4031:
 12849  0022A0  90D8               	bcf	status,0,c
 12850  0022A2  3608               	rlcf	i2___lwdiv@divisor,f,c
 12851  0022A4  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12852  0022A6  2A0C               	incf	i2___lwdiv@counter,f,c
 12853  0022A8                     i2l4033:
 12854  0022A8  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12855  0022AA  D7FA               	goto	i2l4031
 12856  0022AC                     i2l4035:
 12857  0022AC  90D8               	bcf	status,0,c
 12858  0022AE  360A               	rlcf	i2___lwdiv@quotient,f,c
 12859  0022B0  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12860  0022B2  5008               	movf	i2___lwdiv@divisor,w,c
 12861  0022B4  5C06               	subwf	i2___lwdiv@dividend,w,c
 12862  0022B6  5009               	movf	i2___lwdiv@divisor+1,w,c
 12863  0022B8  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12864  0022BA  A0D8               	btfss	status,0,c
 12865  0022BC  D005               	goto	i2l4043
 12866  0022BE  5008               	movf	i2___lwdiv@divisor,w,c
 12867  0022C0  5E06               	subwf	i2___lwdiv@dividend,f,c
 12868  0022C2  5009               	movf	i2___lwdiv@divisor+1,w,c
 12869  0022C4  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12870  0022C6  800A               	bsf	i2___lwdiv@quotient,0,c
 12871  0022C8                     i2l4043:
 12872  0022C8  90D8               	bcf	status,0,c
 12873  0022CA  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12874  0022CC  3208               	rrcf	i2___lwdiv@divisor,f,c
 12875  0022CE  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12876  0022D0  D7ED               	goto	i2l4035
 12877  0022D2                     i2l1652:
 12878  0022D2  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12879  0022D6  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12880  0022DA  0012               	return		;funcret
 12881  0022DC                     __end_ofi2___lwdiv:
 12882                           	opt stack 0
 12883                           pclatu	equ	0xFFB
 12884                           pclath	equ	0xFFA
 12885                           tblptru	equ	0xFF8
 12886                           tblptrh	equ	0xFF7
 12887                           tblptrl	equ	0xFF6
 12888                           tablat	equ	0xFF5
 12889                           prodh	equ	0xFF4
 12890                           prodl	equ	0xFF3
 12891                           intcon	equ	0xFF2
 12892                           intcon3	equ	0xFF0
 12893                           indf0	equ	0xFEF
 12894                           postinc0	equ	0xFEE
 12895                           fsr0h	equ	0xFEA
 12896                           fsr0l	equ	0xFE9
 12897                           wreg	equ	0xFE8
 12898                           postdec1	equ	0xFE5
 12899                           fsr1h	equ	0xFE2
 12900                           fsr1l	equ	0xFE1
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           fsr2h	equ	0xFDA
 12905                           fsr2l	equ	0xFD9
 12906                           status	equ	0xFD8
 12907                           
 12908 ;; *************** function i2_lcdInst *****************
 12909 ;; Defined at:
 12910 ;;		line 13 in file "lcd.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;  data            1    wreg     unsigned char 
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;  data            1    2[COMRAM] unsigned char 
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      void 
 12917 ;; Registers used:
 12918 ;;		wreg, status,2, status,0, cstack
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12928 ;;Total ram usage:        1 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    1
 12931 ;; This function calls:
 12932 ;;		i2_lcdNibble
 12933 ;; This function is called by:
 12934 ;;		_change_state_to_menu_11
 12935 ;;		_change_state_to_menu_23
 12936 ;;		_change_state_to_logs_11
 12937 ;;		_change_state_to_logs_12
 12938 ;;		_change_state_to_logs_22
 12939 ;;		_change_state_to_logs_23
 12940 ;;		_change_state_to_logs_33
 12941 ;;		_change_state_to_logs_34
 12942 ;;		_printSortTimer
 12943 ;;		i2_change_state_to_menu_start
 12944 ;;		i2_change_state_to_menu_12
 12945 ;;		i2_change_state_to_menu_22
 12946 ;;		i2_printRTC
 12947 ;; This function uses a non-reentrant model
 12948 ;;
 12949                           
 12950                           	psect	text64
 12951  00292A                     __ptext64:
 12952                           	opt stack 0
 12953  00292A                     i2_lcdInst:
 12954                           	opt stack 19
 12955                           
 12956                           ;incstack = 0
 12957                           ;i2lcdInst@data stored from wreg
 12958  00292A  6E03               	movwf	i2lcdInst@data,c
 12959                           
 12960                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12961  00292C  948C               	bcf	3980,2,c	;volatile
 12962                           
 12963                           ;lcd.c: 15: lcdNibble(data);
 12964  00292E  5003               	movf	i2lcdInst@data,w,c
 12965  002930  EC1A  F011         	call	i2_lcdNibble
 12966  002934  0012               	return		;funcret
 12967  002936                     __end_ofi2_lcdInst:
 12968                           	opt stack 0
 12969                           pclatu	equ	0xFFB
 12970                           pclath	equ	0xFFA
 12971                           tblptru	equ	0xFF8
 12972                           tblptrh	equ	0xFF7
 12973                           tblptrl	equ	0xFF6
 12974                           tablat	equ	0xFF5
 12975                           prodh	equ	0xFF4
 12976                           prodl	equ	0xFF3
 12977                           intcon	equ	0xFF2
 12978                           intcon3	equ	0xFF0
 12979                           indf0	equ	0xFEF
 12980                           postinc0	equ	0xFEE
 12981                           fsr0h	equ	0xFEA
 12982                           fsr0l	equ	0xFE9
 12983                           wreg	equ	0xFE8
 12984                           postdec1	equ	0xFE5
 12985                           fsr1h	equ	0xFE2
 12986                           fsr1l	equ	0xFE1
 12987                           indf2	equ	0xFDF
 12988                           postinc2	equ	0xFDE
 12989                           postdec2	equ	0xFDD
 12990                           fsr2h	equ	0xFDA
 12991                           fsr2l	equ	0xFD9
 12992                           status	equ	0xFD8
 12993                           
 12994 ;; *************** function i2_lcdNibble *****************
 12995 ;; Defined at:
 12996 ;;		line 23 in file "lcd.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  data            1    wreg     unsigned char 
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;  data            1    1[COMRAM] unsigned char 
 13001 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  1    wreg      void 
 13004 ;; Registers used:
 13005 ;;		wreg, status,2, status,0
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;Total ram usage:        2 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		i2_lcdInst
 13021 ;;		i2_putch
 13022 ;; This function uses a non-reentrant model
 13023 ;;
 13024                           
 13025                           	psect	text65
 13026  002234                     __ptext65:
 13027                           	opt stack 0
 13028  002234                     i2_lcdNibble:
 13029                           	opt stack 21
 13030                           
 13031                           ;incstack = 0
 13032                           ;i2lcdNibble@data stored from wreg
 13033  002234  6E02               	movwf	i2lcdNibble@data,c
 13034                           
 13035                           ;lcd.c: 25: char temp = data & 0xF0;
 13036  002236  5002               	movf	i2lcdNibble@data,w,c
 13037  002238  0BF0               	andlw	240
 13038  00223A  6E01               	movwf	i2lcdNibble@temp,c
 13039                           
 13040                           ;lcd.c: 26: LATD = LATD & 0x0F;
 13041  00223C  508C               	movf	3980,w,c	;volatile
 13042  00223E  0B0F               	andlw	15
 13043  002240  6E8C               	movwf	3980,c	;volatile
 13044                           
 13045                           ;lcd.c: 27: LATD = temp | LATD;
 13046  002242  5001               	movf	i2lcdNibble@temp,w,c
 13047  002244  108C               	iorwf	3980,w,c	;volatile
 13048  002246  6E8C               	movwf	3980,c	;volatile
 13049                           
 13050                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 13051  002248  868C               	bsf	3980,3,c	;volatile
 13052                           
 13053                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13054  00224A  0E42               	movlw	66
 13055  00224C                     i2u486_47:
 13056  00224C  2EE8               	decfsz	wreg,f,c
 13057  00224E  D7FE               	bra	i2u486_47
 13058  002250  D000               	nop2	
 13059                           
 13060                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 13061  002252  968C               	bcf	3980,3,c	;volatile
 13062                           
 13063                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13064  002254  0E42               	movlw	66
 13065  002256                     i2u487_47:
 13066  002256  2EE8               	decfsz	wreg,f,c
 13067  002258  D7FE               	bra	i2u487_47
 13068  00225A  D000               	nop2	
 13069                           
 13070                           ;lcd.c: 34: data = data << 4;
 13071  00225C  3802               	swapf	i2lcdNibble@data,w,c
 13072  00225E  0BF0               	andlw	240
 13073  002260  6E02               	movwf	i2lcdNibble@data,c
 13074                           
 13075                           ;lcd.c: 36: temp = data & 0xF0;
 13076  002262  5002               	movf	i2lcdNibble@data,w,c
 13077  002264  0BF0               	andlw	240
 13078  002266  6E01               	movwf	i2lcdNibble@temp,c
 13079                           
 13080                           ;lcd.c: 37: LATD = LATD & 0x0F;
 13081  002268  508C               	movf	3980,w,c	;volatile
 13082  00226A  0B0F               	andlw	15
 13083  00226C  6E8C               	movwf	3980,c	;volatile
 13084                           
 13085                           ;lcd.c: 38: LATD = temp | LATD;
 13086  00226E  5001               	movf	i2lcdNibble@temp,w,c
 13087  002270  108C               	iorwf	3980,w,c	;volatile
 13088  002272  6E8C               	movwf	3980,c	;volatile
 13089                           
 13090                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 13091  002274  868C               	bsf	3980,3,c	;volatile
 13092                           
 13093                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13094  002276  0E42               	movlw	66
 13095  002278                     i2u488_47:
 13096  002278  2EE8               	decfsz	wreg,f,c
 13097  00227A  D7FE               	bra	i2u488_47
 13098  00227C  D000               	nop2	
 13099                           
 13100                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 13101  00227E  968C               	bcf	3980,3,c	;volatile
 13102                           
 13103                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13104  002280  0E42               	movlw	66
 13105  002282                     i2u489_47:
 13106  002282  2EE8               	decfsz	wreg,f,c
 13107  002284  D7FE               	bra	i2u489_47
 13108  002286  D000               	nop2	
 13109  002288  0012               	return		;funcret
 13110  00228A                     __end_ofi2_lcdNibble:
 13111                           	opt stack 0
 13112                           pclatu	equ	0xFFB
 13113                           pclath	equ	0xFFA
 13114                           tblptru	equ	0xFF8
 13115                           tblptrh	equ	0xFF7
 13116                           tblptrl	equ	0xFF6
 13117                           tablat	equ	0xFF5
 13118                           prodh	equ	0xFF4
 13119                           prodl	equ	0xFF3
 13120                           intcon	equ	0xFF2
 13121                           intcon3	equ	0xFF0
 13122                           indf0	equ	0xFEF
 13123                           postinc0	equ	0xFEE
 13124                           fsr0h	equ	0xFEA
 13125                           fsr0l	equ	0xFE9
 13126                           wreg	equ	0xFE8
 13127                           postdec1	equ	0xFE5
 13128                           fsr1h	equ	0xFE2
 13129                           fsr1l	equ	0xFE1
 13130                           indf2	equ	0xFDF
 13131                           postinc2	equ	0xFDE
 13132                           postdec2	equ	0xFDD
 13133                           fsr2h	equ	0xFDA
 13134                           fsr2l	equ	0xFD9
 13135                           status	equ	0xFD8
 13136                           
 13137 ;; *************** function i2_getRTC *****************
 13138 ;; Defined at:
 13139 ;;		line 42 in file "RTC.c"
 13140 ;; Parameters:    Size  Location     Type
 13141 ;;		None
 13142 ;; Auto vars:     Size  Location     Type
 13143 ;;  getRTC          2    3[COMRAM] int 
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  1    wreg      void 
 13146 ;; Registers used:
 13147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13157 ;;Total ram usage:        2 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    2
 13160 ;; This function calls:
 13161 ;;		i2_I2C_Master_Read
 13162 ;;		i2_I2C_Master_Start
 13163 ;;		i2_I2C_Master_Stop
 13164 ;;		i2_I2C_Master_Write
 13165 ;; This function is called by:
 13166 ;;		_printSortTimer
 13167 ;;		i2_printRTC
 13168 ;; This function uses a non-reentrant model
 13169 ;;
 13170                           
 13171                           	psect	text66
 13172  00202A                     __ptext66:
 13173                           	opt stack 0
 13174  00202A                     i2_getRTC:
 13175                           	opt stack 18
 13176                           
 13177                           ;RTC.c: 46: I2C_Master_Start();
 13178                           
 13179                           ;incstack = 0
 13180  00202A  ECB5  F014         	call	i2_I2C_Master_Start	;wreg free
 13181                           
 13182                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 13183  00202E  0E00               	movlw	0
 13184  002030  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13185  002032  0ED0               	movlw	208
 13186  002034  6E02               	movwf	i2I2C_Master_Write@d,c
 13187  002036  ECA0  F014         	call	i2_I2C_Master_Write	;wreg free
 13188                           
 13189                           ;RTC.c: 48: I2C_Master_Write(0x00);
 13190  00203A  0E00               	movlw	0
 13191  00203C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13192  00203E  0E00               	movlw	0
 13193  002040  6E02               	movwf	i2I2C_Master_Write@d,c
 13194  002042  ECA0  F014         	call	i2_I2C_Master_Write	;wreg free
 13195                           
 13196                           ;RTC.c: 49: I2C_Master_Stop();
 13197  002046  ECB1  F014         	call	i2_I2C_Master_Stop	;wreg free
 13198                           
 13199                           ;RTC.c: 52: I2C_Master_Start();
 13200  00204A  ECB5  F014         	call	i2_I2C_Master_Start	;wreg free
 13201                           
 13202                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 13203  00204E  0E00               	movlw	0
 13204  002050  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13205  002052  0ED1               	movlw	209
 13206  002054  6E02               	movwf	i2I2C_Master_Write@d,c
 13207  002056  ECA0  F014         	call	i2_I2C_Master_Write	;wreg free
 13208                           
 13209                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 13210  00205A  0E00               	movlw	0
 13211  00205C  6E05               	movwf	i2getRTC@i+1,c
 13212  00205E  0E00               	movlw	0
 13213  002060  6E04               	movwf	i2getRTC@i,c
 13214  002062                     i2l4247:
 13215  002062  BE05               	btfsc	i2getRTC@i+1,7,c
 13216  002064  D006               	goto	i2l4251
 13217  002066  5005               	movf	i2getRTC@i+1,w,c
 13218  002068  E111               	bnz	i2l4257
 13219  00206A  0E06               	movlw	6
 13220  00206C  5C04               	subwf	i2getRTC@i,w,c
 13221  00206E  B0D8               	btfsc	status,0,c
 13222  002070  D00D               	goto	i2l4257
 13223  002072                     i2l4251:
 13224                           
 13225                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 13226  002072  0ED4               	movlw	low _time
 13227  002074  2404               	addwf	i2getRTC@i,w,c
 13228  002076  6ED9               	movwf	fsr2l,c
 13229  002078  0E00               	movlw	high _time
 13230  00207A  2005               	addwfc	i2getRTC@i+1,w,c
 13231  00207C  6EDA               	movwf	fsr2h,c
 13232  00207E  0E01               	movlw	1
 13233  002080  ECF7  F013         	call	i2_I2C_Master_Read
 13234  002084  6EDF               	movwf	indf2,c
 13235  002086  4A04               	infsnz	i2getRTC@i,f,c
 13236  002088  2A05               	incf	i2getRTC@i+1,f,c
 13237  00208A  D7EB               	goto	i2l4247
 13238  00208C                     i2l4257:
 13239                           
 13240                           ;RTC.c: 56: }
 13241                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13242  00208C  0E00               	movlw	0
 13243  00208E  ECF7  F013         	call	i2_I2C_Master_Read
 13244  002092  0100               	movlb	0	; () banked
 13245  002094  6FDA               	movwf	(_time+6)& (0+255),b
 13246                           
 13247                           ;RTC.c: 58: I2C_Master_Stop();
 13248  002096  ECB1  F014         	call	i2_I2C_Master_Stop	;wreg free
 13249  00209A  0012               	return		;funcret
 13250  00209C                     __end_ofi2_getRTC:
 13251                           	opt stack 0
 13252                           pclatu	equ	0xFFB
 13253                           pclath	equ	0xFFA
 13254                           tblptru	equ	0xFF8
 13255                           tblptrh	equ	0xFF7
 13256                           tblptrl	equ	0xFF6
 13257                           tablat	equ	0xFF5
 13258                           prodh	equ	0xFF4
 13259                           prodl	equ	0xFF3
 13260                           intcon	equ	0xFF2
 13261                           intcon3	equ	0xFF0
 13262                           indf0	equ	0xFEF
 13263                           postinc0	equ	0xFEE
 13264                           fsr0h	equ	0xFEA
 13265                           fsr0l	equ	0xFE9
 13266                           wreg	equ	0xFE8
 13267                           postdec1	equ	0xFE5
 13268                           fsr1h	equ	0xFE2
 13269                           fsr1l	equ	0xFE1
 13270                           indf2	equ	0xFDF
 13271                           postinc2	equ	0xFDE
 13272                           postdec2	equ	0xFDD
 13273                           fsr2h	equ	0xFDA
 13274                           fsr2l	equ	0xFD9
 13275                           status	equ	0xFD8
 13276                           
 13277 ;; *************** function i2_I2C_Master_Write *****************
 13278 ;; Defined at:
 13279 ;;		line 47 in file "I2C.c"
 13280 ;; Parameters:    Size  Location     Type
 13281 ;;  d               2    1[COMRAM] unsigned int 
 13282 ;; Auto vars:     Size  Location     Type
 13283 ;;		None
 13284 ;; Return value:  Size  Location     Type
 13285 ;;                  1    wreg      void 
 13286 ;; Registers used:
 13287 ;;		wreg, status,2, status,0, cstack
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13297 ;;Total ram usage:        2 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; Hardware stack levels required when called:    1
 13300 ;; This function calls:
 13301 ;;		i2_I2C_Master_Wait
 13302 ;; This function is called by:
 13303 ;;		i2_getRTC
 13304 ;; This function uses a non-reentrant model
 13305 ;;
 13306                           
 13307                           	psect	text67
 13308  002940                     __ptext67:
 13309                           	opt stack 0
 13310  002940                     i2_I2C_Master_Write:
 13311                           	opt stack 18
 13312                           
 13313                           ;I2C.c: 49: I2C_Master_Wait();
 13314                           
 13315                           ;incstack = 0
 13316  002940  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13317                           
 13318                           ;I2C.c: 50: SSPBUF = d;
 13319  002944  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13320  002948  0012               	return		;funcret
 13321  00294A                     __end_ofi2_I2C_Master_Write:
 13322                           	opt stack 0
 13323                           pclatu	equ	0xFFB
 13324                           pclath	equ	0xFFA
 13325                           tblptru	equ	0xFF8
 13326                           tblptrh	equ	0xFF7
 13327                           tblptrl	equ	0xFF6
 13328                           tablat	equ	0xFF5
 13329                           prodh	equ	0xFF4
 13330                           prodl	equ	0xFF3
 13331                           intcon	equ	0xFF2
 13332                           intcon3	equ	0xFF0
 13333                           indf0	equ	0xFEF
 13334                           postinc0	equ	0xFEE
 13335                           fsr0h	equ	0xFEA
 13336                           fsr0l	equ	0xFE9
 13337                           wreg	equ	0xFE8
 13338                           postdec1	equ	0xFE5
 13339                           fsr1h	equ	0xFE2
 13340                           fsr1l	equ	0xFE1
 13341                           indf2	equ	0xFDF
 13342                           postinc2	equ	0xFDE
 13343                           postdec2	equ	0xFDD
 13344                           fsr2h	equ	0xFDA
 13345                           fsr2l	equ	0xFD9
 13346                           status	equ	0xFD8
 13347                           
 13348 ;; *************** function i2_I2C_Master_Stop *****************
 13349 ;; Defined at:
 13350 ;;		line 41 in file "I2C.c"
 13351 ;; Parameters:    Size  Location     Type
 13352 ;;		None
 13353 ;; Auto vars:     Size  Location     Type
 13354 ;;		None
 13355 ;; Return value:  Size  Location     Type
 13356 ;;                  1    wreg      void 
 13357 ;; Registers used:
 13358 ;;		wreg, status,2, status,0, cstack
 13359 ;; Tracked objects:
 13360 ;;		On entry : 0/0
 13361 ;;		On exit  : 0/0
 13362 ;;		Unchanged: 0/0
 13363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13368 ;;Total ram usage:        0 bytes
 13369 ;; Hardware stack levels used:    1
 13370 ;; Hardware stack levels required when called:    1
 13371 ;; This function calls:
 13372 ;;		i2_I2C_Master_Wait
 13373 ;; This function is called by:
 13374 ;;		i2_getRTC
 13375 ;; This function uses a non-reentrant model
 13376 ;;
 13377                           
 13378                           	psect	text68
 13379  002962                     __ptext68:
 13380                           	opt stack 0
 13381  002962                     i2_I2C_Master_Stop:
 13382                           	opt stack 18
 13383                           
 13384                           ;I2C.c: 43: I2C_Master_Wait();
 13385                           
 13386                           ;incstack = 0
 13387  002962  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13388                           
 13389                           ;I2C.c: 44: PEN = 1;
 13390  002966  84C5               	bsf	4037,2,c	;volatile
 13391  002968  0012               	return		;funcret
 13392  00296A                     __end_ofi2_I2C_Master_Stop:
 13393                           	opt stack 0
 13394                           pclatu	equ	0xFFB
 13395                           pclath	equ	0xFFA
 13396                           tblptru	equ	0xFF8
 13397                           tblptrh	equ	0xFF7
 13398                           tblptrl	equ	0xFF6
 13399                           tablat	equ	0xFF5
 13400                           prodh	equ	0xFF4
 13401                           prodl	equ	0xFF3
 13402                           intcon	equ	0xFF2
 13403                           intcon3	equ	0xFF0
 13404                           indf0	equ	0xFEF
 13405                           postinc0	equ	0xFEE
 13406                           fsr0h	equ	0xFEA
 13407                           fsr0l	equ	0xFE9
 13408                           wreg	equ	0xFE8
 13409                           postdec1	equ	0xFE5
 13410                           fsr1h	equ	0xFE2
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function i2_I2C_Master_Start *****************
 13420 ;; Defined at:
 13421 ;;		line 29 in file "I2C.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;		None
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;		None
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  1    wreg      void 
 13428 ;; Registers used:
 13429 ;;		wreg, status,2, status,0, cstack
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;Total ram usage:        0 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    1
 13442 ;; This function calls:
 13443 ;;		i2_I2C_Master_Wait
 13444 ;; This function is called by:
 13445 ;;		i2_getRTC
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           	psect	text69
 13450  00296A                     __ptext69:
 13451                           	opt stack 0
 13452  00296A                     i2_I2C_Master_Start:
 13453                           	opt stack 18
 13454                           
 13455                           ;I2C.c: 31: I2C_Master_Wait();
 13456                           
 13457                           ;incstack = 0
 13458  00296A  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13459                           
 13460                           ;I2C.c: 32: SEN = 1;
 13461  00296E  80C5               	bsf	4037,0,c	;volatile
 13462  002970  0012               	return		;funcret
 13463  002972                     __end_ofi2_I2C_Master_Start:
 13464                           	opt stack 0
 13465                           pclatu	equ	0xFFB
 13466                           pclath	equ	0xFFA
 13467                           tblptru	equ	0xFF8
 13468                           tblptrh	equ	0xFF7
 13469                           tblptrl	equ	0xFF6
 13470                           tablat	equ	0xFF5
 13471                           prodh	equ	0xFF4
 13472                           prodl	equ	0xFF3
 13473                           intcon	equ	0xFF2
 13474                           intcon3	equ	0xFF0
 13475                           indf0	equ	0xFEF
 13476                           postinc0	equ	0xFEE
 13477                           fsr0h	equ	0xFEA
 13478                           fsr0l	equ	0xFE9
 13479                           wreg	equ	0xFE8
 13480                           postdec1	equ	0xFE5
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           fsr2h	equ	0xFDA
 13487                           fsr2l	equ	0xFD9
 13488                           status	equ	0xFD8
 13489                           
 13490 ;; *************** function i2_I2C_Master_Read *****************
 13491 ;; Defined at:
 13492 ;;		line 53 in file "I2C.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  a               1    wreg     unsigned char 
 13495 ;; Auto vars:     Size  Location     Type
 13496 ;;  a               1    1[COMRAM] unsigned char 
 13497 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      unsigned char 
 13500 ;; Registers used:
 13501 ;;		wreg, status,2, status,0, cstack
 13502 ;; Tracked objects:
 13503 ;;		On entry : 0/0
 13504 ;;		On exit  : 0/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;Total ram usage:        2 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; Hardware stack levels required when called:    1
 13514 ;; This function calls:
 13515 ;;		i2_I2C_Master_Wait
 13516 ;; This function is called by:
 13517 ;;		i2_getRTC
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text70
 13522  0027EE                     __ptext70:
 13523                           	opt stack 0
 13524  0027EE                     i2_I2C_Master_Read:
 13525                           	opt stack 18
 13526                           
 13527                           ;incstack = 0
 13528                           ;i2I2C_Master_Read@a stored from wreg
 13529  0027EE  6E02               	movwf	i2I2C_Master_Read@a,c
 13530                           
 13531                           ;I2C.c: 55: unsigned char temp;
 13532                           ;I2C.c: 56: I2C_Master_Wait();
 13533  0027F0  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13534                           
 13535                           ;I2C.c: 57: RCEN = 1;
 13536  0027F4  86C5               	bsf	4037,3,c	;volatile
 13537                           
 13538                           ;I2C.c: 58: I2C_Master_Wait();
 13539  0027F6  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13540                           
 13541                           ;I2C.c: 59: temp = SSPBUF;
 13542  0027FA  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13543                           
 13544                           ;I2C.c: 60: I2C_Master_Wait();
 13545  0027FE  EC70  F014         	call	i2_I2C_Master_Wait	;wreg free
 13546                           
 13547                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13548  002802  5002               	movf	i2I2C_Master_Read@a,w,c
 13549  002804  A4D8               	btfss	status,2,c
 13550  002806  D002               	goto	i2u245_40
 13551  002808  8AC5               	bsf	4037,5,c	;volatile
 13552  00280A  D001               	goto	i2l3997
 13553  00280C                     i2u245_40:
 13554  00280C  9AC5               	bcf	4037,5,c	;volatile
 13555  00280E                     i2l3997:
 13556                           
 13557                           ;I2C.c: 62: ACKEN = 1;
 13558  00280E  88C5               	bsf	4037,4,c	;volatile
 13559                           
 13560                           ;I2C.c: 63: return temp;
 13561  002810  5003               	movf	i2I2C_Master_Read@temp,w,c
 13562  002812  0012               	return	
 13563  002814                     __end_ofi2_I2C_Master_Read:
 13564                           	opt stack 0
 13565                           pclatu	equ	0xFFB
 13566                           pclath	equ	0xFFA
 13567                           tblptru	equ	0xFF8
 13568                           tblptrh	equ	0xFF7
 13569                           tblptrl	equ	0xFF6
 13570                           tablat	equ	0xFF5
 13571                           prodh	equ	0xFF4
 13572                           prodl	equ	0xFF3
 13573                           intcon	equ	0xFF2
 13574                           intcon3	equ	0xFF0
 13575                           indf0	equ	0xFEF
 13576                           postinc0	equ	0xFEE
 13577                           fsr0h	equ	0xFEA
 13578                           fsr0l	equ	0xFE9
 13579                           wreg	equ	0xFE8
 13580                           postdec1	equ	0xFE5
 13581                           fsr1h	equ	0xFE2
 13582                           fsr1l	equ	0xFE1
 13583                           indf2	equ	0xFDF
 13584                           postinc2	equ	0xFDE
 13585                           postdec2	equ	0xFDD
 13586                           fsr2h	equ	0xFDA
 13587                           fsr2l	equ	0xFD9
 13588                           status	equ	0xFD8
 13589                           
 13590 ;; *************** function i2_I2C_Master_Wait *****************
 13591 ;; Defined at:
 13592 ;;		line 24 in file "I2C.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;		None
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;		None
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  1    wreg      void 
 13599 ;; Registers used:
 13600 ;;		wreg, status,2, status,0
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;Total ram usage:        1 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; This function calls:
 13613 ;;		Nothing
 13614 ;; This function is called by:
 13615 ;;		i2_I2C_Master_Start
 13616 ;;		i2_I2C_Master_Stop
 13617 ;;		i2_I2C_Master_Write
 13618 ;;		i2_I2C_Master_Read
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           	psect	text71
 13623  0028E0                     __ptext71:
 13624                           	opt stack 0
 13625  0028E0                     i2_I2C_Master_Wait:
 13626                           	opt stack 18
 13627  0028E0                     i2l142:
 13628  0028E0  B4C7               	btfsc	4039,2,c	;volatile
 13629  0028E2  D7FE               	goto	i2l142
 13630  0028E4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13631  0028E8  0E1F               	movlw	31
 13632  0028EA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13633  0028EC  B4D8               	btfsc	status,2,c
 13634  0028EE  0012               	return	
 13635  0028F0  D7F7               	goto	i2l142
 13636  0028F2                     __end_ofi2_I2C_Master_Wait:
 13637                           	opt stack 0
 13638                           pclatu	equ	0xFFB
 13639                           pclath	equ	0xFFA
 13640                           tblptru	equ	0xFF8
 13641                           tblptrh	equ	0xFF7
 13642                           tblptrl	equ	0xFF6
 13643                           tablat	equ	0xFF5
 13644                           prodh	equ	0xFF4
 13645                           prodl	equ	0xFF3
 13646                           intcon	equ	0xFF2
 13647                           intcon3	equ	0xFF0
 13648                           indf0	equ	0xFEF
 13649                           postinc0	equ	0xFEE
 13650                           fsr0h	equ	0xFEA
 13651                           fsr0l	equ	0xFE9
 13652                           wreg	equ	0xFE8
 13653                           postdec1	equ	0xFE5
 13654                           fsr1h	equ	0xFE2
 13655                           fsr1l	equ	0xFE1
 13656                           indf2	equ	0xFDF
 13657                           postinc2	equ	0xFDE
 13658                           postdec2	equ	0xFDD
 13659                           fsr2h	equ	0xFDA
 13660                           fsr2l	equ	0xFD9
 13661                           status	equ	0xFD8
 13662                           pclatu	equ	0xFFB
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           intcon3	equ	0xFF0
 13672                           indf0	equ	0xFEF
 13673                           postinc0	equ	0xFEE
 13674                           fsr0h	equ	0xFEA
 13675                           fsr0l	equ	0xFE9
 13676                           wreg	equ	0xFE8
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           fsr2h	equ	0xFDA
 13684                           fsr2l	equ	0xFD9
 13685                           status	equ	0xFD8
 13686                           
 13687                           	psect	rparam
 13688  0000                     pclatu	equ	0xFFB
 13689                           pclath	equ	0xFFA
 13690                           tblptru	equ	0xFF8
 13691                           tblptrh	equ	0xFF7
 13692                           tblptrl	equ	0xFF6
 13693                           tablat	equ	0xFF5
 13694                           prodh	equ	0xFF4
 13695                           prodl	equ	0xFF3
 13696                           intcon	equ	0xFF2
 13697                           intcon3	equ	0xFF0
 13698                           indf0	equ	0xFEF
 13699                           postinc0	equ	0xFEE
 13700                           fsr0h	equ	0xFEA
 13701                           fsr0l	equ	0xFE9
 13702                           wreg	equ	0xFE8
 13703                           postdec1	equ	0xFE5
 13704                           fsr1h	equ	0xFE2
 13705                           fsr1l	equ	0xFE1
 13706                           indf2	equ	0xFDF
 13707                           postinc2	equ	0xFDE
 13708                           postdec2	equ	0xFDD
 13709                           fsr2h	equ	0xFDA
 13710                           fsr2l	equ	0xFD9
 13711                           status	equ	0xFD8
 13712                           
 13713                           	psect	temp
 13714  00007E                     btemp:
 13715                           	opt stack 0
 13716  00007E                     	ds	1
 13717  0000                     int$flags	set	btemp
 13718                           pclatu	equ	0xFFB
 13719                           pclath	equ	0xFFA
 13720                           tblptru	equ	0xFF8
 13721                           tblptrh	equ	0xFF7
 13722                           tblptrl	equ	0xFF6
 13723                           tablat	equ	0xFF5
 13724                           prodh	equ	0xFF4
 13725                           prodl	equ	0xFF3
 13726                           intcon	equ	0xFF2
 13727                           intcon3	equ	0xFF0
 13728                           indf0	equ	0xFEF
 13729                           postinc0	equ	0xFEE
 13730                           fsr0h	equ	0xFEA
 13731                           fsr0l	equ	0xFE9
 13732                           wreg	equ	0xFE8
 13733                           postdec1	equ	0xFE5
 13734                           fsr1h	equ	0xFE2
 13735                           fsr1l	equ	0xFE1
 13736                           indf2	equ	0xFDF
 13737                           postinc2	equ	0xFDE
 13738                           postdec2	equ	0xFDD
 13739                           fsr2h	equ	0xFDA
 13740                           fsr2l	equ	0xFD9
 13741                           status	equ	0xFD8


Data Sizes:
    Strings     562
    Constant    27
    Data        12
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     126
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_52(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_51(CODE[4]), STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[17]), STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), 
		 -> STR_7(CODE[10]), STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), 
		 -> STR_3(CODE[18]), STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _ID->_MAGNETISM_in
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38738
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     882
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     788
                                             10 BANK0      1     1      0
                      _initSortTimer
                            _lcdInst
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      72
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13286
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12436
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23897
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7570
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4866
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4866
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4731
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   77089
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   69324
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7598
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4532
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30660
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3066
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4834
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            33    21     12    2931
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _moveServoCup
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   i2_printf
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     109      34        0.0%
DATA                 0      0     109       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 23 17:37:05 2017

                                    _q 00F1                     i2_I2C_Master_Start 296A  
                   i2_I2C_Master_Write 2940                                     _ID 1BAC  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0073                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C7                                    l142 28A6  
                                  l231 28D4                                    l228 28CE  
                                  l343 00E0                                    l701 1F8C  
                                  l894 0D7C                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00ED                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 25D0        __end_of_change_state_to_menu_12 2472  
      __end_of_change_state_to_menu_22 243A        __end_of_change_state_to_menu_23 25A0  
         _f_can_coming_to_distribution 00E5                         ??_Distribution 0081  
      __end_of_change_state_to_logs_11 26C0        __end_of_change_state_to_logs_12 2690  
      __end_of_change_state_to_logs_22 2660        __end_of_change_state_to_logs_23 274A  
      __end_of_change_state_to_logs_33 2630        __end_of_change_state_to_logs_34 2600  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1071 2318                                   l1079 1E0E  
                                 l4101 0696                                   l4111 070E  
                                 l4103 06A2                                   l4121 0764  
                                 l4113 071A                                   l4105 06A8  
                                 l4115 0720                                   l4203 1F04  
                                 l1652 2020                                   l4117 0738  
                                 l4125 077C                                   l4213 247C  
                                 l1662 21CA                                   l4151 0822  
                                 l4127 07B0                                   l4215 2488  
                                 l5111 0242                                   l4223 1A70  
                                 l4161 087C                                   l4137 07E0  
                                 l4073 0598                                   l4209 1F24  
                                 l5041 00FE                                   l4225 1A80  
                                 l4163 0886                                   l4139 07E6  
                                 l4075 05AA                                   l4411 0CFA  
                                 l5115 024C                                   l4235 1ADA  
                                 l4227 1A86                                   l4181 08E2  
                                 l4157 0844                                   l4093 0664  
                                 l4085 05E8                                   l4069 0584  
                                 l4421 0DC2                                   l5213 0404  
                                 l5205 03E2                                   l5133 0298  
                                 l5125 0276                                   l5053 0132  
                                 l5045 0110                                   l4191 0954  
                                 l4175 08BC                                   l4079 05B4  
                                 l4431 0E58                                   l4423 0DE0  
                                 l5231 045A                                   l5151 0302  
                                 l5119 0264                                   l5071 0196  
                                 l5039 00F8                                   l1599 1AEC  
                                 l4177 08C8                                   l4185 08F6  
                                 l4169 08A0                                   l4193 0960  
                                 l4433 0E76                                   l4425 0DFE  
                                 l4417 0D86                                   l5209 03EC  
                                 l5129 0280                                   l5057 0144  
                                 l5049 011A                                   l4187 08FC  
                                 l4435 0E94                                   l4427 0E1C  
                                 l4419 0DA4                                   l4443 0EEE  
                                 l5235 0464                                   l5155 030C  
                                 l5075 01A0                                   l4437 0EB2  
                                 l4429 0E3A                                   l4445 0F4C  
                                 l5253 04B0                                   l5245 048E  
                                 l5173 0358                                   l5165 0336  
                                 l5093 01EC                                   l5085 01CA  
                                 l4541 1B22                                   l3911 2714  
                                 l4199 1EEE                                   l4439 0ED0  
                                 l5271 0506                                   l5239 047C  
                                 l5191 03AE                                   l5159 0324  
                                 l5079 01B8                                   l5249 0498  
                                 l5169 0340                                   l5089 01D4  
                                 l4561 1DDA                                   l4553 1D9A  
                                 l4537 1B0C                                   l5275 0510  
                                 l5195 03B8                                   l4555 1DAA  
                                 l4547 1B98                                   l5293 055C  
                                 l5285 053A                                   l4557 1DBA  
                                 l4565 1DEC                                   l4581 2308  
                                 l4901 1C32                                   l5279 0528  
                                 l5199 03D0                                   l4663 1E64  
                                 l4559 1DCA                                   l4575 22E6  
                                 l3945 1FD0                                   l3929 2796  
                                 l5289 0544                                   l5297 0568  
                                 l4673 1EA6                                   l4577 22F6  
                                 l4923 19A0                                   l3947 1FDC  
                                 l4667 1E7A                                   l3957 2012  
                                 l3949 1FE2                                   l3973 21BC  
                                 l3965 2186                                   l4935 19D4  
                                 l4951 1A24                                   l3967 2192  
                                 l4863 1D32                                   l4937 19E0  
                                 l4929 19B6                                   l3969 2198  
                                 l5593 1F82                                   l5585 1F6C  
                                 _ADFM 007E07                                   l4955 1A38  
                                 l4947 1A16                                   l4939 19E6  
                                 l4971 1C80                                   l5595 1F88  
                                 l5587 1F72                                   l4877 1D6A  
                                 l5589 1F78                                   l4991 1CEC  
                                 l4983 1CCA                                   l4975 1C94  
                                 l4967 1C70                                   l5599 1F8E  
                                 l4977 1CA0                                   l4979 1CA6  
                                 l4987 1CD8                                   _ADON 007E10  
                                 STR_1 FEB6                                   STR_2 FDE4  
                                 STR_3 FDF9                                   STR_4 FF82  
                                 STR_5 FFC0                                   STR_6 FEFA  
                                 STR_7 FFAF                                   STR_8 FE0B  
                                 STR_9 FE94                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u2350 2712                                   u3180 0D7C  
                                 u3420 1BE2                                   u3165 2204  
                                 u2630 075A                                   u3450 1C22  
                                 u3428 1BE6                                   u2637 0750  
                                 u2590 06E2                                   u3458 1C26  
                                 _PEIE 007F96                                   u2597 06D8  
                                 u4607 23B6                                   u4617 002A  
                                 u4707 0314                                   u4627 0122  
                                 _RCEN 007E2B                                   u4717 0348  
                                 u4637 0152                                   u4807 054C  
                                 u4727 0372                                   u4647 01A8  
                                 u4817 212A                                   u4737 03C0  
                                 u4657 01DC                                   u4827 2134  
                                 u4747 03F4                                   u4667 0206  
                                 u4587 1D1A                                   u4837 2160  
                                 u4757 041E                                   u4677 0254  
                                 u4597 2382                                   u4847 216A  
                                 u4767 046C                                   u4687 0288  
                                 u4777 04A0                                   u4697 02B2  
                                 u4787 04CA                                   u4797 0518  
                                 _RSEN 007E29                            _stopSignals 2890  
                                 _back 005D                                   _main 1F34  
                                 _down 0063                                   _keys FDB1  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 2814                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 292A                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1250  
                          i2_lcdNibble 2234                        __end_of_Loading 1D90  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1A42  
                                STR_10 FED8                                  STR_11 FEA5  
                                STR_20 FF60                                  STR_12 FEE9  
                                STR_13 FEC7                                  STR_21 FE61  
                                STR_30 FE2E                                  STR_22 FE72  
                                STR_14 FFFB                                  STR_15 FF93  
                                STR_23 FF4F                                  STR_31 FF2D  
                                STR_32 FF2D                                  STR_40 FFF7  
                                STR_16 FF71                                  STR_24 FF0B  
                                STR_41 FFDF                                  STR_17 FE72  
                                STR_33 FE50                                  STR_25 FE2E  
                                STR_34 FE3F                                  STR_50 FDE4  
                                STR_42 FFD7                                  STR_18 FE83  
                                STR_26 FE1D                                  STR_43 FFD3  
                                STR_51 FFC7                                  STR_19 FF60  
                                STR_35 FF3E                                  STR_27 FF1C  
                                STR_28 FF1C                                  STR_44 FFE3  
                                STR_36 FFDB                                  STR_52 FFB9  
                      __end_of___awmod 1CF6                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE3F  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDCC                                  STR_49 FFA4  
                                ?_sort 0001                        __end_of___lldiv 1AFE  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 202A                        __end_of___lwmod 21D4  
                                i2l142 28E0                                  i2l395 124C  
                      ___awdiv@counter 008A                                  i2l894 12DE  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2912  
                      __end_of_handler 1984                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 23C0  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 1EAE                                  _block 0077  
                      __end_of_dpowers FDCC                                  _first 00FC  
                                _enter 0065                        __end_of_isdigit 27A0  
                                _input 0079                                  _putch 28F2  
                                pclath 000FFA                                  tablat 000FF5  
              __size_of_moveServoBlock 0050                       __end_ofi2___wmul 27EE  
                     __end_ofi2_getRTC 209C                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 0CC6                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                 moveServoCup@myPosition 0080  
                     __end_ofi2_strcpy 2510                       _count_can_no_lab 00DB  
                      __initialization 209C                     __size_ofi2_lcdInst 000C  
                         __end_of_main 1FB2                           __end_of_keys FDC2  
                         __end_of_sort 2836                             i2printf@ap 001E  
                           i2printf@cp 0020                     __size_ofi2_isdigit 001E  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00D4                   __end_of_MAGNETISM_in 291E  
                               ??_sort 008B                          __activetblptr 000003  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AE  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 2540  
            i2_change_state_to_menu_22 2510                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1176 1926                                 i2l1178 1948  
                               i2l4021 286E                                 i2l4031 22A0  
                               i2l4033 22A8                                 i2l4043 22C8  
                               i2l4035 22AC                                 i2l4051 23CE  
                               i2l1652 22D2                                 i2l4053 23D6  
                               i2l1662 23F8                                 i2l4055 23DA  
                               i2l4303 0AC2                                 i2l4313 0B0E  
                               i2l4305 0ACC                                 i2l4251 2072  
                               i2l4059 23EE                                 i2l4331 0B7C  
                               i2l4307 0AD2                                 i2l4309 0AE4  
                               i2l4317 0B20                                 i2l4261 098A  
                               i2l4247 2062                                 i2l4343 0BAE  
                               i2l4319 0B50                                 i2l4271 09AE  
                               i2l4257 208C                                 i2l4361 0C0A  
                               i2l4353 0BEC                                 i2l4329 0B78  
                               i2l4265 099A                                 i2l5401 1114  
                               i2l5321 0FF0                                 i2l5313 0FD4  
                               i2l4355 0BF4                                 i2l4267 09A8  
                               i2l5307 0FC0                                 i2l4373 0C3C  
                               i2l4349 0BC8                                 i2l4293 0A6A  
                               i2l4285 0A42                                 i2l4277 09E0  
                               i2l4621 12E8                                 i2l5421 1162  
                               i2l5413 113E                                 i2l5405 1122  
                               i2l5341 1028                                 i2l5333 100C  
                               i2l5325 0FFE                                 i2l5317 0FE2  
                               i2l5309 0FC6                                 i2l4383 0CA2  
                               i2l4367 0C20                                 i2l4295 0A74  
                               i2l4391 24F0                                 i2l4631 1356  
                               i2l4623 12FE                                 i2l4615 127C  
                               i2l4369 0C28                                 i2l4377 0C4E  
                               i2l4297 0A78                                 i2l4385 0CAA  
                               i2l4641 13C4                                 i2l4633 136C  
                               i2l4625 1314                                 i2l5441 11B0  
                               i2l5433 1194                                 i2l5425 1170  
                               i2l5417 1154                                 i2l5409 1130  
                               i2l5361 1070                                 i2l5353 1054  
                               i2l5345 1038                                 i2l5337 101A  
                               i2l4379 0C54                                 i2l4643 13DA  
                               i2l4635 1382                                 i2l4627 132A  
                               i2l5541 14A2                                 i2l4821 180A  
                               i2l4813 17E6                                 i2l4741 16F0  
                               i2l4725 16B8                                 i2l4717 169E  
                               i2l4389 24E8                                 i2l4637 1398  
                               i2l4629 1340                                 i2l5445 11BE  
                               i2l5437 11A2                                 i2l5429 117E  
                               i2l5381 10BE                                 i2l5373 10A2  
                               i2l5365 107E                                 i2l5357 1062  
                               i2l5349 1046                                 i2l4807 17D8  
                               i2l4743 16F6                                 i2l4727 16C8  
                               i2l4735 16D6                                 i2l4639 13AE  
                               i2l4647 13F0                                 i2l5455 11E2  
                               i2l5537 1492                                 i2l4825 181C  
                               i2l4817 17F8                                 i2l4745 16FC  
                               i2l4753 170E                                 i2l4729 16CC  
                               i2l4649 144A                                 i2l5449 11D4  
                               i2l5393 10F0                                 i2l5385 10D4  
                               i2l5377 10B0                                 i2l5369 1094  
                               i2l5641 18F4                                 i2l5625 18D4  
                               i2l5547 14FC                                 i2l4747 1702  
                               i2l4739 16EA                                 i2l4835 1838  
                               i2l5557 15BE                                 i2l4829 182E  
                               i2l4773 176A                                 i2l4765 1752  
                               i2l4749 1708                                 i2l5397 10FE  
                               i2l5389 10E2                                 i2l4783 1794  
                               i2l5823 1726                                 i2l5815 1200  
                               i2l5671 1946                                 i2l4793 17B2  
                               i2l5825 1742                                 i2l5817 1222  
                               i2l4795 17B6                                 i2l4779 1778  
                               i2l5819 123E                                 i2l3997 280E  
                               i2l4789 179E                                 i2l4799 17C0  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 28CE  
                          ?i2_printRTC 0001                   __end_of_Distribution 26EE  
                               ___wmul 24A8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1EAE                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 2858  
                               _initUI 2876                                 clear_0 20E2  
                               clear_1 20EE                                 clear_2 20FA  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 28CE                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 2472  
                            ??_initLCD 0083                              ??_loadRTC 0095  
 __end_ofi2_change_state_to_menu_start 27C8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 27A0                           __pdataCOMRAM 007A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 22DC  
                     __end_of_printRTC 0F90                           __mediumconst FDB0  
                    __end_ofi2___lwmod 2402                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 2936                      __end_ofi2_isdigit 2876  
                           __accesstop 0080                __end_of__initialization 2100  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 294A  
                          i2printRTC@i 0041                          _initSortTimer 1AFE  
                        __end_of_putch 2902                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1C54  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2776  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 274A  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005F  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 22DC                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                         ?_initSortTimer 0001  
                              UI@i_660 00D0                                UI@i_652 00CC  
                              UI@i_644 00C8                                UI@i_661 00D1  
                              UI@i_653 00CD                                UI@i_645 00C9  
                              UI@i_664 00D2                                UI@i_656 00CE  
                              UI@i_648 00CA                                UI@i_665 00D3  
                              UI@i_657 00CF                                UI@i_649 00CB  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 000C  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0083                                _UI$2068 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 232C  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 291E  
                            ?_initTime 0080                           _MAGNETISM_in 2912  
                      _f_loadingNewCan 00EB                        i2printRTC@month 003D  
                __size_of_Distribution 002E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 2172                                _Loading 1CF6  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1984                                ___awmod 1C54  
                              ___lldiv 1A42                        __size_of___wmul 0036  
                              ___lwdiv 1FB2                                ___lwmod 2172  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 0078  
                      __size_of_initUI 001A                                __pcinit 209C  
                              __ramtop 1000                                _lcdInst 2902  
                              _handler 0008                                __ptext0 1F34  
                              __ptext1 2890                                __ptext2 2814  
                              __ptext3 1CF6                                __ptext4 1AFE  
                              __ptext5 1BAC                                __ptext6 22DC  
                              __ptext7 2912                                __ptext8 26C0  
                              __ptext9 1D90                        __size_of_printf 040A  
                       ??_moveServoCup 0080                        __size_of_strcpy 0036  
                              _initLCD 237A                                _loadRTC 1E22  
                              _dpowers FDC2                                _isdigit 2776  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0075                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 26C0  
                       __pintcode_body 1866                   end_of_initialization 2100  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 237A                             _updateMenu 0F90  
                    i2_I2C_Master_Read 27EE                      i2_I2C_Master_Wait 28E0  
                    i2_I2C_Master_Stop 2962                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 228A                              i2___lwmod 23C0  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1486  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 292A                             _total_time 00F3  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                           ID@magnetic 0087                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 2858                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005B                         __end_of___wmul 24DE  
                       __end_of_getRTC 1F34                   __size_ofi2_lcdNibble 0056  
                        __pidataCOMRAM 2972                          i2lcdInst@data 0003  
                       __end_of_initUI 2890                       i2___wmul@product 0005  
                       __end_of_printf 0980                         _timer1highbits 006B  
                         i2printf@flag 0026                         __end_of_strcpy 24A8  
            __end_ofi2_I2C_Master_Read 2814              __end_ofi2_I2C_Master_Wait 28F2  
                         i2printf@prec 001D                    start_initialization 209C  
            __end_ofi2_I2C_Master_Stop 296A                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 00DD            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                         _timer3highbits 006F  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 1E22  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F6                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2183 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1710 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0061                     __end_of_PortTestA5 28E0  
                     _I2C_Master_Start 295A                              _f_lastCan 00E9  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2936                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB0  
                            _lcdNibble 210A                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0067  
                            _cur_state 00E1                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00A8  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 2972  
           __end_ofi2_I2C_Master_Write 294A                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u322_40 12DE                               i2u245_40 280C  
                             i2u293_40 0AA6                               i2u293_47 0A9C  
                             i2u447_40 15B8                               i2u297_40 0B06  
                             i2u297_47 0AFC                               i2u485_47 16BE  
                             i2u486_47 224C                               i2u487_47 2256  
                             i2u488_47 2278                               i2u489_47 2282  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0085  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 27C8  
                        lcdNibble@data 0081                               i2_getRTC 202A  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0980  
                             i2_strcpy 24DE                    I2C_Master_Read@temp 0082  
                            copy_data0 20B0                              copy_data1 20D0  
                __size_of_moveServoCup 0092                       __size_ofi2_putch 000C  
                        _timer1lowbits 006D                            _count_total 00DF  
                             __Hrparam 0000                          _timer3lowbits 0071  
                     __size_of_Loading 009A                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1BAC  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 25A0             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 243A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 2402                _change_state_to_menu_23 2570  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2690  
              _change_state_to_logs_12 2660                _change_state_to_logs_22 2630  
              _change_state_to_logs_23 271C                _change_state_to_logs_33 2600  
              _change_state_to_logs_34 25D0                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 197C                       _timer1_20ms_high 007A  
                      _I2C_Master_Init 21D4                        _I2C_Master_Read 26EE  
                     __size_of_initLCD 0046                           _f_ID_receive 00FA  
                         _moveServoCup 1D90                       __size_of_loadRTC 008C  
                      _I2C_Master_Wait 28A6                        _I2C_Master_Stop 2952  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 232C                               __ptext11 2876  
                             __ptext20 2472                               __ptext12 1E22  
                             __ptext21 1EAE                               __ptext13 21D4  
                             __ptext30 28F2                               __ptext22 2936  
                             __ptext14 1A42                               __ptext31 2776  
                             __ptext23 2952                               __ptext15 274A  
                             __ptext32 24A8                               __ptext24 295A  
                             __ptext16 2836                               __ptext41 0F90  
                             __ptext33 2172                               __ptext25 26EE  
                             __ptext17 237A                               __ptext50 25D0  
                             __ptext42 27A0                               __ptext34 1FB2  
                             __ptext26 28A6                               __ptext18 0012  
                             __ptext51 2600                               __ptext43 1250  
                             __ptext35 2902                               __ptext27 2402  
                             __ptext19 0CC6                               __ptext60 2858  
                             __ptext52 271C                               __ptext44 24DE  
                             __ptext36 210A                               __ptext28 243A  
                             __ptext61 27C8                               __ptext53 2630  
                             __ptext45 1680                               __ptext37 1C54  
                             __ptext29 0576                               __ptext70 27EE  
                             __ptext62 23C0                               __ptext54 2660  
                             __ptext46 2510                               __ptext38 1984  
                             __ptext71 28E0                               __ptext63 228A  
                             __ptext55 2690                               __ptext47 2540  
                             __ptext39 28CE                               __ptext64 292A  
                             __ptext56 28BA                               __ptext48 2570  
                             __ptext65 2234                               __ptext57 1486  
                             __ptext49 25A0                               __ptext66 202A  
                             __ptext58 0980                               __ptext67 2940  
                             __ptext59 291E                               __ptext68 2962  
                             __ptext69 296A                               _dispLogs 28BA  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1710 0002                               _initTime 2836  
                        __size_of_main 007E                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00EF  
               __size_of_machineConfig 004E                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                   _f_can_coming_to_ID 00E3                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 2570  
    __end_ofi2_change_state_to_menu_22 2540                               loadRTC@i 0096  
               __end_of_printSortTimer 1680                              putch@data 0082  
             __end_of_I2C_Master_Start 2962                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 2940                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                        _timer1_20ms_low 007C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                        ?_MAGNETISM_in 0080                    __end_of_stopSignals 28A6  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2234  
              __end_of_I2C_Master_Read 271C                __end_of_I2C_Master_Wait 28BA  
              __end_of_I2C_Master_Stop 295A                            lcdInst@data 0082  
                        printRTC@F3189 00F6                    __end_ofi2_lcdNibble 228A  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 00E7                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 232C  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0080  
                     _sortTimerCounter 0069                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F5  
                       ??_MAGNETISM_in 0082                          dispLogs@myLog 0001  
                   i2printRTC@INT_time 002D  
