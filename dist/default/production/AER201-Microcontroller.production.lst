

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 12:28:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  005040                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  005040  4D                 	db	77
   153  005041  4D                 	db	77
   154  005042  4D                 	db	77
   155  005043  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  005044  4D                 	db	77
   159  005045  4D                 	db	77
   160  005046  4D                 	db	77
   161  005047  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB0A                     STR_21:
   269  00FB0A  25                 	db	37
   270  00FB0B  30                 	db	48	;'0'
   271  00FB0C  32                 	db	50	;'2'
   272  00FB0D  64                 	db	100	;'d'
   273  00FB0E  25                 	db	37
   274  00FB0F  73                 	db	115	;'s'
   275  00FB10  20                 	db	32
   276  00FB11  7C                 	db	124
   277  00FB12  20                 	db	32
   278  00FB13  25                 	db	37
   279  00FB14  30                 	db	48	;'0'
   280  00FB15  32                 	db	50	;'2'
   281  00FB16  64                 	db	100	;'d'
   282  00FB17  3A                 	db	58	;':'
   283  00FB18  25                 	db	37
   284  00FB19  30                 	db	48	;'0'
   285  00FB1A  32                 	db	50	;'2'
   286  00FB1B  64                 	db	100	;'d'
   287  00FB1C  3A                 	db	58	;':'
   288  00FB1D  25                 	db	37
   289  00FB1E  30                 	db	48	;'0'
   290  00FB1F  32                 	db	50	;'2'
   291  00FB20  64                 	db	100	;'d'
   292  00FB21  00                 	db	0
   293  00FB22                     STR_66:
   294  00FB22  28                 	db	40
   295  00FB23  64                 	db	100	;'d'
   296  00FB24  61                 	db	97	;'a'
   297  00FB25  74                 	db	116	;'t'
   298  00FB26  61                 	db	97	;'a'
   299  00FB27  3A                 	db	58	;':'
   300  00FB28  20                 	db	32
   301  00FB29  25                 	db	37
   302  00FB2A  75                 	db	117	;'u'
   303  00FB2B  2C                 	db	44
   304  00FB2C  20                 	db	32
   305  00FB2D  61                 	db	97	;'a'
   306  00FB2E  64                 	db	100	;'d'
   307  00FB2F  64                 	db	100	;'d'
   308  00FB30  72                 	db	114	;'r'
   309  00FB31  3A                 	db	58	;':'
   310  00FB32  20                 	db	32
   311  00FB33  25                 	db	37
   312  00FB34  75                 	db	117	;'u'
   313  00FB35  29                 	db	41
   314  00FB36  00                 	db	0
   315  00FB37                     STR_111:
   316  00FB37  44                 	db	68	;'D'
   317  00FB38  20                 	db	32
   318  00FB39  57                 	db	87	;'W'
   319  00FB3A  49                 	db	73	;'I'
   320  00FB3B  4C                 	db	76	;'L'
   321  00FB3C  4C                 	db	76	;'L'
   322  00FB3D  20                 	db	32
   323  00FB3E  52                 	db	82	;'R'
   324  00FB3F  45                 	db	69	;'E'
   325  00FB40  54                 	db	84	;'T'
   326  00FB41  55                 	db	85	;'U'
   327  00FB42  52                 	db	82	;'R'
   328  00FB43  4E                 	db	78	;'N'
   329  00FB44  20                 	db	32
   330  00FB45  20                 	db	32
   331  00FB46  20                 	db	32
   332  00FB47  20                 	db	32
   333  00FB48  00                 	db	0
   334  00FB49                     STR_112:
   335  00FB49  4F                 	db	79	;'O'
   336  00FB4A  54                 	db	84	;'T'
   337  00FB4B  48                 	db	72	;'H'
   338  00FB4C  45                 	db	69	;'E'
   339  00FB4D  52                 	db	82	;'R'
   340  00FB4E  20                 	db	32
   341  00FB4F  53                 	db	83	;'S'
   342  00FB50  45                 	db	69	;'E'
   343  00FB51  54                 	db	84	;'T'
   344  00FB52  53                 	db	83	;'S'
   345  00FB53  20                 	db	32
   346  00FB54  52                 	db	82	;'R'
   347  00FB55  41                 	db	65	;'A'
   348  00FB56  35                 	db	53	;'5'
   349  00FB57  20                 	db	32
   350  00FB58  20                 	db	32
   351  00FB59  20                 	db	32
   352  00FB5A  00                 	db	0
   353  00FB5B                     STR_120:
   354  00FB5B  53                 	db	83	;'S'
   355  00FB5C  3A                 	db	58	;':'
   356  00FB5D  20                 	db	32
   357  00FB5E  44                 	db	68	;'D'
   358  00FB5F  20                 	db	32
   359  00FB60  57                 	db	87	;'W'
   360  00FB61  49                 	db	73	;'I'
   361  00FB62  4C                 	db	76	;'L'
   362  00FB63  4C                 	db	76	;'L'
   363  00FB64  20                 	db	32
   364  00FB65  52                 	db	82	;'R'
   365  00FB66  45                 	db	69	;'E'
   366  00FB67  54                 	db	84	;'T'
   367  00FB68  55                 	db	85	;'U'
   368  00FB69  52                 	db	82	;'R'
   369  00FB6A  4E                 	db	78	;'N'
   370  00FB6B  20                 	db	32
   371  00FB6C  00                 	db	0
   372  00FB6D                     STR_123:
   373  00FB6D  4F                 	db	79	;'O'
   374  00FB6E  54                 	db	84	;'T'
   375  00FB6F  48                 	db	72	;'H'
   376  00FB70  45                 	db	69	;'E'
   377  00FB71  52                 	db	82	;'R'
   378  00FB72  3A                 	db	58	;':'
   379  00FB73  20                 	db	32
   380  00FB74  43                 	db	67	;'C'
   381  00FB75  41                 	db	65	;'A'
   382  00FB76  4D                 	db	77	;'M'
   383  00FB77  20                 	db	32
   384  00FB78  54                 	db	84	;'T'
   385  00FB79  4F                 	db	79	;'O'
   386  00FB7A  47                 	db	71	;'G'
   387  00FB7B  47                 	db	71	;'G'
   388  00FB7C  4C                 	db	76	;'L'
   389  00FB7D  45                 	db	69	;'E'
   390  00FB7E  00                 	db	0
   391  00FB7F                     STR_122:
   392  00FB7F  44                 	db	68	;'D'
   393  00FB80  3A                 	db	58	;':'
   394  00FB81  20                 	db	32
   395  00FB82  52                 	db	82	;'R'
   396  00FB83  45                 	db	69	;'E'
   397  00FB84  54                 	db	84	;'T'
   398  00FB85  7C                 	db	124
   399  00FB86  32                 	db	50	;'2'
   400  00FB87  3A                 	db	58	;':'
   401  00FB88  20                 	db	32
   402  00FB89  43                 	db	67	;'C'
   403  00FB8A  4F                 	db	79	;'O'
   404  00FB8B  4E                 	db	78	;'N'
   405  00FB8C  44                 	db	68	;'D'
   406  00FB8D  20                 	db	32
   407  00FB8E  25                 	db	37
   408  00FB8F  64                 	db	100	;'d'
   409  00FB90  00                 	db	0
   410  00FB91                     STR_3:
   411  00FB91  2D                 	db	45
   412  00FB92  2D                 	db	45
   413  00FB93  20                 	db	32
   414  00FB94  4C                 	db	76	;'L'
   415  00FB95  4F                 	db	79	;'O'
   416  00FB96  47                 	db	71	;'G'
   417  00FB97  20                 	db	32
   418  00FB98  25                 	db	37
   419  00FB99  32                 	db	50	;'2'
   420  00FB9A  64                 	db	100	;'d'
   421  00FB9B  20                 	db	32
   422  00FB9C  48                 	db	72	;'H'
   423  00FB9D  45                 	db	69	;'E'
   424  00FB9E  52                 	db	82	;'R'
   425  00FB9F  45                 	db	69	;'E'
   426  00FBA0  2D                 	db	45
   427  00FBA1  2D                 	db	45
   428  00FBA2  00                 	db	0
   429  00FBA3                     STR_1:
   430  00FBA3  52                 	db	82	;'R'
   431  00FBA4  45                 	db	69	;'E'
   432  00FBA5  53                 	db	83	;'S'
   433  00FBA6  55                 	db	85	;'U'
   434  00FBA7  4C                 	db	76	;'L'
   435  00FBA8  54                 	db	84	;'T'
   436  00FBA9  53                 	db	83	;'S'
   437  00FBAA  20                 	db	32
   438  00FBAB  49                 	db	73	;'I'
   439  00FBAC  4E                 	db	78	;'N'
   440  00FBAD  20                 	db	32
   441  00FBAE  4C                 	db	76	;'L'
   442  00FBAF  4F                 	db	79	;'O'
   443  00FBB0  47                 	db	71	;'G'
   444  00FBB1  20                 	db	32
   445  00FBB2  25                 	db	37
   446  00FBB3  64                 	db	100	;'d'
   447  00FBB4  00                 	db	0
   448  00FBB5                     STR_102:
   449  00FBB5  4D                 	db	77	;'M'
   450  00FBB6  49                 	db	73	;'I'
   451  00FBB7  44                 	db	68	;'D'
   452  00FBB8  20                 	db	32
   453  00FBB9  2D                 	db	45
   454  00FBBA  2D                 	db	45
   455  00FBBB  20                 	db	32
   456  00FBBC  32                 	db	50	;'2'
   457  00FBBD  73                 	db	115	;'s'
   458  00FBBE  20                 	db	32
   459  00FBBF  20                 	db	32
   460  00FBC0  20                 	db	32
   461  00FBC1  20                 	db	32
   462  00FBC2  20                 	db	32
   463  00FBC3  20                 	db	32
   464  00FBC4  20                 	db	32
   465  00FBC5  00                 	db	0
   466  00FBC6                     STR_105:
   467  00FBC6  44                 	db	68	;'D'
   468  00FBC7  52                 	db	82	;'R'
   469  00FBC8  4F                 	db	79	;'O'
   470  00FBC9  50                 	db	80	;'P'
   471  00FBCA  20                 	db	32
   472  00FBCB  2D                 	db	45
   473  00FBCC  2D                 	db	45
   474  00FBCD  20                 	db	32
   475  00FBCE  32                 	db	50	;'2'
   476  00FBCF  73                 	db	115	;'s'
   477  00FBD0  20                 	db	32
   478  00FBD1  20                 	db	32
   479  00FBD2  20                 	db	32
   480  00FBD3  20                 	db	32
   481  00FBD4  20                 	db	32
   482  00FBD5  20                 	db	32
   483  00FBD6  00                 	db	0
   484  00FBD7                     STR_99:
   485  00FBD7  4C                 	db	76	;'L'
   486  00FBD8  45                 	db	69	;'E'
   487  00FBD9  46                 	db	70	;'F'
   488  00FBDA  54                 	db	84	;'T'
   489  00FBDB  20                 	db	32
   490  00FBDC  2D                 	db	45
   491  00FBDD  2D                 	db	45
   492  00FBDE  20                 	db	32
   493  00FBDF  32                 	db	50	;'2'
   494  00FBE0  73                 	db	115	;'s'
   495  00FBE1  20                 	db	32
   496  00FBE2  20                 	db	32
   497  00FBE3  20                 	db	32
   498  00FBE4  20                 	db	32
   499  00FBE5  20                 	db	32
   500  00FBE6  20                 	db	32
   501  00FBE7  00                 	db	0
   502  00FBE8                     STR_104:
   503  00FBE8  4C                 	db	76	;'L'
   504  00FBE9  45                 	db	69	;'E'
   505  00FBEA  56                 	db	86	;'V'
   506  00FBEB  45                 	db	69	;'E'
   507  00FBEC  4C                 	db	76	;'L'
   508  00FBED  20                 	db	32
   509  00FBEE  2D                 	db	45
   510  00FBEF  2D                 	db	45
   511  00FBF0  20                 	db	32
   512  00FBF1  32                 	db	50	;'2'
   513  00FBF2  73                 	db	115	;'s'
   514  00FBF3  20                 	db	32
   515  00FBF4  20                 	db	32
   516  00FBF5  20                 	db	32
   517  00FBF6  20                 	db	32
   518  00FBF7  20                 	db	32
   519  00FBF8  00                 	db	0
   520  00FBF9                     STR_98:
   521  00FBF9  52                 	db	82	;'R'
   522  00FBFA  49                 	db	73	;'I'
   523  00FBFB  47                 	db	71	;'G'
   524  00FBFC  48                 	db	72	;'H'
   525  00FBFD  54                 	db	84	;'T'
   526  00FBFE  20                 	db	32
   527  00FBFF  2D                 	db	45
   528  00FC00  2D                 	db	45
   529  00FC01  20                 	db	32
   530  00FC02  32                 	db	50	;'2'
   531  00FC03  73                 	db	115	;'s'
   532  00FC04  20                 	db	32
   533  00FC05  20                 	db	32
   534  00FC06  20                 	db	32
   535  00FC07  20                 	db	32
   536  00FC08  20                 	db	32
   537  00FC09  00                 	db	0
   538  00FC0A                     STR_97:
   539  00FC0A  4D                 	db	77	;'M'
   540  00FC0B  49                 	db	73	;'I'
   541  00FC0C  44                 	db	68	;'D'
   542  00FC0D  44                 	db	68	;'D'
   543  00FC0E  4C                 	db	76	;'L'
   544  00FC0F  45                 	db	69	;'E'
   545  00FC10  20                 	db	32
   546  00FC11  2D                 	db	45
   547  00FC12  2D                 	db	45
   548  00FC13  20                 	db	32
   549  00FC14  32                 	db	50	;'2'
   550  00FC15  73                 	db	115	;'s'
   551  00FC16  20                 	db	32
   552  00FC17  20                 	db	32
   553  00FC18  20                 	db	32
   554  00FC19  20                 	db	32
   555  00FC1A  00                 	db	0
   556  00FC1B  44                 	db	68	;'D'
   557  00FC1C  20                 	db	32
   558  00FC1D  57                 	db	87	;'W'
   559  00FC1E  49                 	db	73	;'I'
   560  00FC1F  4C                 	db	76	;'L'
   561  00FC20  4C                 	db	76	;'L'
   562  00FC21  20                 	db	32
   563  00FC22  52                 	db	82	;'R'
   564  00FC23  45                 	db	69	;'E'
   565  00FC24  54                 	db	84	;'T'
   566  00FC25  55                 	db	85	;'U'
   567  00FC26  52                 	db	82	;'R'
   568  00FC27  4E                 	db	78	;'N'
   569  00FC28  20                 	db	32
   570  00FC29  20                 	db	32
   571  00FC2A  20                 	db	32
   572  00FC2B  00                 	db	0
   573  00FC2C                     STR_100:
   574  00FC2C  4D                 	db	77	;'M'
   575  00FC2D  49                 	db	73	;'I'
   576  00FC2E  44                 	db	68	;'D'
   577  00FC2F  2D                 	db	45
   578  00FC30  4C                 	db	76	;'L'
   579  00FC31  45                 	db	69	;'E'
   580  00FC32  46                 	db	70	;'F'
   581  00FC33  54                 	db	84	;'T'
   582  00FC34  20                 	db	32
   583  00FC35  2D                 	db	45
   584  00FC36  2D                 	db	45
   585  00FC37  20                 	db	32
   586  00FC38  32                 	db	50	;'2'
   587  00FC39  73                 	db	115	;'s'
   588  00FC3A  20                 	db	32
   589  00FC3B  20                 	db	32
   590  00FC3C  00                 	db	0
   591  00FC3D                     STR_101:
   592  00FC3D  4D                 	db	77	;'M'
   593  00FC3E  49                 	db	73	;'I'
   594  00FC3F  44                 	db	68	;'D'
   595  00FC40  2D                 	db	45
   596  00FC41  52                 	db	82	;'R'
   597  00FC42  49                 	db	73	;'I'
   598  00FC43  47                 	db	71	;'G'
   599  00FC44  48                 	db	72	;'H'
   600  00FC45  54                 	db	84	;'T'
   601  00FC46  20                 	db	32
   602  00FC47  2D                 	db	45
   603  00FC48  2D                 	db	45
   604  00FC49  20                 	db	32
   605  00FC4A  32                 	db	50	;'2'
   606  00FC4B  73                 	db	115	;'s'
   607  00FC4C  20                 	db	32
   608  00FC4D  00                 	db	0
   609  00FC4E  45                 	db	69	;'E'
   610  00FC4F  4C                 	db	76	;'L'
   611  00FC50  53                 	db	83	;'S'
   612  00FC51  45                 	db	69	;'E'
   613  00FC52  20                 	db	32
   614  00FC53  54                 	db	84	;'T'
   615  00FC54  4F                 	db	79	;'O'
   616  00FC55  47                 	db	71	;'G'
   617  00FC56  47                 	db	71	;'G'
   618  00FC57  4C                 	db	76	;'L'
   619  00FC58  45                 	db	69	;'E'
   620  00FC59  53                 	db	83	;'S'
   621  00FC5A  20                 	db	32
   622  00FC5B  52                 	db	82	;'R'
   623  00FC5C  41                 	db	65	;'A'
   624  00FC5D  35                 	db	53	;'5'
   625  00FC5E  00                 	db	0
   626  00FC5F                     STR_72:
   627  00FC5F  41                 	db	65	;'A'
   628  00FC60  4C                 	db	76	;'L'
   629  00FC61  47                 	db	71	;'G'
   630  00FC62  31                 	db	49	;'1'
   631  00FC63  3A                 	db	58	;':'
   632  00FC64  20                 	db	32
   633  00FC65  39                 	db	57	;'9'
   634  00FC66  20                 	db	32
   635  00FC67  50                 	db	80	;'P'
   636  00FC68  4F                 	db	79	;'O'
   637  00FC69  50                 	db	80	;'P'
   638  00FC6A  4E                 	db	78	;'N'
   639  00FC6B  4F                 	db	79	;'O'
   640  00FC6C  54                 	db	84	;'T'
   641  00FC6D  41                 	db	65	;'A'
   642  00FC6E  42                 	db	66	;'B'
   643  00FC6F  00                 	db	0
   644  00FC70                     STR_92:
   645  00FC70  54                 	db	84	;'T'
   646  00FC71  53                 	db	83	;'S'
   647  00FC72  54                 	db	84	;'T'
   648  00FC73  3A                 	db	58	;':'
   649  00FC74  20                 	db	32
   650  00FC75  43                 	db	67	;'C'
   651  00FC76  4F                 	db	79	;'O'
   652  00FC77  4E                 	db	78	;'N'
   653  00FC78  44                 	db	68	;'D'
   654  00FC79  20                 	db	32
   655  00FC7A  53                 	db	83	;'S'
   656  00FC7B  4F                 	db	79	;'O'
   657  00FC7C  4C                 	db	76	;'L'
   658  00FC7D  4E                 	db	78	;'N'
   659  00FC7E  27                 	db	39
   660  00FC7F  44                 	db	68	;'D'
   661  00FC80  00                 	db	0
   662  00FC81                     STR_94:
   663  00FC81  54                 	db	84	;'T'
   664  00FC82  53                 	db	83	;'S'
   665  00FC83  54                 	db	84	;'T'
   666  00FC84  3A                 	db	58	;':'
   667  00FC85  20                 	db	32
   668  00FC86  50                 	db	80	;'P'
   669  00FC87  55                 	db	85	;'U'
   670  00FC88  53                 	db	83	;'S'
   671  00FC89  48                 	db	72	;'H'
   672  00FC8A  20                 	db	32
   673  00FC8B  53                 	db	83	;'S'
   674  00FC8C  4F                 	db	79	;'O'
   675  00FC8D  4C                 	db	76	;'L'
   676  00FC8E  4E                 	db	78	;'N'
   677  00FC8F  27                 	db	39
   678  00FC90  44                 	db	68	;'D'
   679  00FC91  00                 	db	0
   680  00FC92                     STR_68:
   681  00FC92  32                 	db	50	;'2'
   682  00FC93  2E                 	db	46
   683  00FC94  53                 	db	83	;'S'
   684  00FC95  4E                 	db	78	;'N'
   685  00FC96  52                 	db	82	;'R'
   686  00FC97  7C                 	db	124
   687  00FC98  34                 	db	52	;'4'
   688  00FC99  2E                 	db	46
   689  00FC9A  48                 	db	72	;'H'
   690  00FC9B  49                 	db	73	;'I'
   691  00FC9C  7C                 	db	124
   692  00FC9D  35                 	db	53	;'5'
   693  00FC9E  2E                 	db	46
   694  00FC9F  4D                 	db	77	;'M'
   695  00FCA0  45                 	db	69	;'E'
   696  00FCA1  44                 	db	68	;'D'
   697  00FCA2  00                 	db	0
   698  00FCA3                     STR_69:
   699  00FCA3  42                 	db	66	;'B'
   700  00FCA4  2E                 	db	46
   701  00FCA5  50                 	db	80	;'P'
   702  00FCA6  53                 	db	83	;'S'
   703  00FCA7  48                 	db	72	;'H'
   704  00FCA8  7C                 	db	124
   705  00FCA9  38                 	db	56	;'8'
   706  00FCAA  2E                 	db	46
   707  00FCAB  53                 	db	83	;'S'
   708  00FCAC  56                 	db	86	;'V'
   709  00FCAD  7C                 	db	124
   710  00FCAE  39                 	db	57	;'9'
   711  00FCAF  2E                 	db	46
   712  00FCB0  42                 	db	66	;'B'
   713  00FCB1  4C                 	db	76	;'L'
   714  00FCB2  4B                 	db	75	;'K'
   715  00FCB3  00                 	db	0
   716  00FCB4                     STR_110:
   717  00FCB4  54                 	db	84	;'T'
   718  00FCB5  53                 	db	83	;'S'
   719  00FCB6  54                 	db	84	;'T'
   720  00FCB7  3A                 	db	58	;':'
   721  00FCB8  20                 	db	32
   722  00FCB9  42                 	db	66	;'B'
   723  00FCBA  4F                 	db	79	;'O'
   724  00FCBB  54                 	db	84	;'T'
   725  00FCBC  48                 	db	72	;'H'
   726  00FCBD  20                 	db	32
   727  00FCBE  53                 	db	83	;'S'
   728  00FCBF  45                 	db	69	;'E'
   729  00FCC0  52                 	db	82	;'R'
   730  00FCC1  56                 	db	86	;'V'
   731  00FCC2  4F                 	db	79	;'O'
   732  00FCC3  53                 	db	83	;'S'
   733  00FCC4  00                 	db	0
   734  00FCC5                     STR_41:
   735  00FCC5  4C                 	db	76	;'L'
   736  00FCC6  4F                 	db	79	;'O'
   737  00FCC7  47                 	db	71	;'G'
   738  00FCC8  20                 	db	32
   739  00FCC9  31                 	db	49	;'1'
   740  00FCCA  20                 	db	32
   741  00FCCB  20                 	db	32
   742  00FCCC  20                 	db	32
   743  00FCCD  20                 	db	32
   744  00FCCE  20                 	db	32
   745  00FCCF  20                 	db	32
   746  00FCD0  20                 	db	32
   747  00FCD1  20                 	db	32
   748  00FCD2  20                 	db	32
   749  00FCD3  20                 	db	32
   750  00FCD4  20                 	db	32
   751  00FCD5  00                 	db	0
   752  00FCD6                     STR_40:
   753  00FCD6  4C                 	db	76	;'L'
   754  00FCD7  4F                 	db	79	;'O'
   755  00FCD8  47                 	db	71	;'G'
   756  00FCD9  20                 	db	32
   757  00FCDA  32                 	db	50	;'2'
   758  00FCDB  20                 	db	32
   759  00FCDC  20                 	db	32
   760  00FCDD  20                 	db	32
   761  00FCDE  20                 	db	32
   762  00FCDF  20                 	db	32
   763  00FCE0  20                 	db	32
   764  00FCE1  20                 	db	32
   765  00FCE2  20                 	db	32
   766  00FCE3  20                 	db	32
   767  00FCE4  20                 	db	32
   768  00FCE5  20                 	db	32
   769  00FCE6  00                 	db	0
   770  00FCE7                     STR_44:
   771  00FCE7  4C                 	db	76	;'L'
   772  00FCE8  4F                 	db	79	;'O'
   773  00FCE9  47                 	db	71	;'G'
   774  00FCEA  20                 	db	32
   775  00FCEB  33                 	db	51	;'3'
   776  00FCEC  20                 	db	32
   777  00FCED  20                 	db	32
   778  00FCEE  20                 	db	32
   779  00FCEF  20                 	db	32
   780  00FCF0  20                 	db	32
   781  00FCF1  20                 	db	32
   782  00FCF2  20                 	db	32
   783  00FCF3  20                 	db	32
   784  00FCF4  20                 	db	32
   785  00FCF5  20                 	db	32
   786  00FCF6  20                 	db	32
   787  00FCF7  00                 	db	0
   788  00FCF8                     STR_48:
   789  00FCF8  4C                 	db	76	;'L'
   790  00FCF9  4F                 	db	79	;'O'
   791  00FCFA  47                 	db	71	;'G'
   792  00FCFB  20                 	db	32
   793  00FCFC  34                 	db	52	;'4'
   794  00FCFD  20                 	db	32
   795  00FCFE  20                 	db	32
   796  00FCFF  20                 	db	32
   797  00FD00  20                 	db	32
   798  00FD01  20                 	db	32
   799  00FD02  20                 	db	32
   800  00FD03  20                 	db	32
   801  00FD04  20                 	db	32
   802  00FD05  20                 	db	32
   803  00FD06  20                 	db	32
   804  00FD07  20                 	db	32
   805  00FD08  00                 	db	0
   806  00FD09                     STR_36:
   807  00FD09  33                 	db	51	;'3'
   808  00FD0A  2E                 	db	46
   809  00FD0B  20                 	db	32
   810  00FD0C  4C                 	db	76	;'L'
   811  00FD0D  4F                 	db	79	;'O'
   812  00FD0E  47                 	db	71	;'G'
   813  00FD0F  53                 	db	83	;'S'
   814  00FD10  20                 	db	32
   815  00FD11  20                 	db	32
   816  00FD12  20                 	db	32
   817  00FD13  20                 	db	32
   818  00FD14  20                 	db	32
   819  00FD15  20                 	db	32
   820  00FD16  20                 	db	32
   821  00FD17  20                 	db	32
   822  00FD18  20                 	db	32
   823  00FD19  00                 	db	0
   824  00FD1A                     STR_32:
   825  00FD1A  32                 	db	50	;'2'
   826  00FD1B  2E                 	db	46
   827  00FD1C  20                 	db	32
   828  00FD1D  53                 	db	83	;'S'
   829  00FD1E  4F                 	db	79	;'O'
   830  00FD1F  52                 	db	82	;'R'
   831  00FD20  54                 	db	84	;'T'
   832  00FD21  20                 	db	32
   833  00FD22  20                 	db	32
   834  00FD23  20                 	db	32
   835  00FD24  20                 	db	32
   836  00FD25  20                 	db	32
   837  00FD26  20                 	db	32
   838  00FD27  20                 	db	32
   839  00FD28  20                 	db	32
   840  00FD29  20                 	db	32
   841  00FD2A  00                 	db	0
   842  00FD2B                     STR_33:
   843  00FD2B  31                 	db	49	;'1'
   844  00FD2C  2E                 	db	46
   845  00FD2D  20                 	db	32
   846  00FD2E  44                 	db	68	;'D'
   847  00FD2F  41                 	db	65	;'A'
   848  00FD30  54                 	db	84	;'T'
   849  00FD31  45                 	db	69	;'E'
   850  00FD32  2F                 	db	47
   851  00FD33  54                 	db	84	;'T'
   852  00FD34  49                 	db	73	;'I'
   853  00FD35  4D                 	db	77	;'M'
   854  00FD36  45                 	db	69	;'E'
   855  00FD37  20                 	db	32
   856  00FD38  20                 	db	32
   857  00FD39  20                 	db	32
   858  00FD3A  20                 	db	32
   859  00FD3B  00                 	db	0
   860  00FD3C                     STR_24:
   861  00FD3C  20                 	db	32
   862  00FD3D  2D                 	db	45
   863  00FD3E  2D                 	db	45
   864  00FD3F  20                 	db	32
   865  00FD40  50                 	db	80	;'P'
   866  00FD41  4F                 	db	79	;'O'
   867  00FD42  50                 	db	80	;'P'
   868  00FD43  20                 	db	32
   869  00FD44  20                 	db	32
   870  00FD45  43                 	db	67	;'C'
   871  00FD46  41                 	db	65	;'A'
   872  00FD47  4E                 	db	78	;'N'
   873  00FD48  20                 	db	32
   874  00FD49  2D                 	db	45
   875  00FD4A  2D                 	db	45
   876  00FD4B  20                 	db	32
   877  00FD4C  00                 	db	0
   878  00FD4D                     STR_26:
   879  00FD4D  20                 	db	32
   880  00FD4E  2D                 	db	45
   881  00FD4F  2D                 	db	45
   882  00FD50  20                 	db	32
   883  00FD51  53                 	db	83	;'S'
   884  00FD52  4F                 	db	79	;'O'
   885  00FD53  55                 	db	85	;'U'
   886  00FD54  50                 	db	80	;'P'
   887  00FD55  20                 	db	32
   888  00FD56  43                 	db	67	;'C'
   889  00FD57  41                 	db	65	;'A'
   890  00FD58  4E                 	db	78	;'N'
   891  00FD59  20                 	db	32
   892  00FD5A  2D                 	db	45
   893  00FD5B  2D                 	db	45
   894  00FD5C  20                 	db	32
   895  00FD5D  00                 	db	0
   896  00FD5E                     STR_28:
   897  00FD5E  2D                 	db	45
   898  00FD5F  2D                 	db	45
   899  00FD60  20                 	db	32
   900  00FD61  54                 	db	84	;'T'
   901  00FD62  4F                 	db	79	;'O'
   902  00FD63  54                 	db	84	;'T'
   903  00FD64  41                 	db	65	;'A'
   904  00FD65  4C                 	db	76	;'L'
   905  00FD66  20                 	db	32
   906  00FD67  43                 	db	67	;'C'
   907  00FD68  41                 	db	65	;'A'
   908  00FD69  4E                 	db	78	;'N'
   909  00FD6A  53                 	db	83	;'S'
   910  00FD6B  20                 	db	32
   911  00FD6C  2D                 	db	45
   912  00FD6D  2D                 	db	45
   913  00FD6E  00                 	db	0
   914  00FD6F                     STR_39:
   915  00FD6F  4C                 	db	76	;'L'
   916  00FD70  4F                 	db	79	;'O'
   917  00FD71  47                 	db	71	;'G'
   918  00FD72  20                 	db	32
   919  00FD73  31                 	db	49	;'1'
   920  00FD74  20                 	db	32
   921  00FD75  20                 	db	32
   922  00FD76  20                 	db	32
   923  00FD77  20                 	db	32
   924  00FD78  20                 	db	32
   925  00FD79  20                 	db	32
   926  00FD7A  20                 	db	32
   927  00FD7B  20                 	db	32
   928  00FD7C  20                 	db	32
   929  00FD7D  20                 	db	32
   930  00FD7E  3C                 	db	60	;'<'
   931  00FD7F  00                 	db	0
   932  00FD80                     STR_42:
   933  00FD80  4C                 	db	76	;'L'
   934  00FD81  4F                 	db	79	;'O'
   935  00FD82  47                 	db	71	;'G'
   936  00FD83  20                 	db	32
   937  00FD84  32                 	db	50	;'2'
   938  00FD85  20                 	db	32
   939  00FD86  20                 	db	32
   940  00FD87  20                 	db	32
   941  00FD88  20                 	db	32
   942  00FD89  20                 	db	32
   943  00FD8A  20                 	db	32
   944  00FD8B  20                 	db	32
   945  00FD8C  20                 	db	32
   946  00FD8D  20                 	db	32
   947  00FD8E  20                 	db	32
   948  00FD8F  3C                 	db	60	;'<'
   949  00FD90  00                 	db	0
   950  00FD91                     STR_46:
   951  00FD91  4C                 	db	76	;'L'
   952  00FD92  4F                 	db	79	;'O'
   953  00FD93  47                 	db	71	;'G'
   954  00FD94  20                 	db	32
   955  00FD95  33                 	db	51	;'3'
   956  00FD96  20                 	db	32
   957  00FD97  20                 	db	32
   958  00FD98  20                 	db	32
   959  00FD99  20                 	db	32
   960  00FD9A  20                 	db	32
   961  00FD9B  20                 	db	32
   962  00FD9C  20                 	db	32
   963  00FD9D  20                 	db	32
   964  00FD9E  20                 	db	32
   965  00FD9F  20                 	db	32
   966  00FDA0  3C                 	db	60	;'<'
   967  00FDA1  00                 	db	0
   968  00FDA2                     STR_50:
   969  00FDA2  4C                 	db	76	;'L'
   970  00FDA3  4F                 	db	79	;'O'
   971  00FDA4  47                 	db	71	;'G'
   972  00FDA5  20                 	db	32
   973  00FDA6  34                 	db	52	;'4'
   974  00FDA7  20                 	db	32
   975  00FDA8  20                 	db	32
   976  00FDA9  20                 	db	32
   977  00FDAA  20                 	db	32
   978  00FDAB  20                 	db	32
   979  00FDAC  20                 	db	32
   980  00FDAD  20                 	db	32
   981  00FDAE  20                 	db	32
   982  00FDAF  20                 	db	32
   983  00FDB0  20                 	db	32
   984  00FDB1  3C                 	db	60	;'<'
   985  00FDB2  00                 	db	0
   986  00FDB3                     STR_38:
   987  00FDB3  33                 	db	51	;'3'
   988  00FDB4  2E                 	db	46
   989  00FDB5  20                 	db	32
   990  00FDB6  4C                 	db	76	;'L'
   991  00FDB7  4F                 	db	79	;'O'
   992  00FDB8  47                 	db	71	;'G'
   993  00FDB9  53                 	db	83	;'S'
   994  00FDBA  20                 	db	32
   995  00FDBB  20                 	db	32
   996  00FDBC  20                 	db	32
   997  00FDBD  20                 	db	32
   998  00FDBE  20                 	db	32
   999  00FDBF  20                 	db	32
  1000  00FDC0  20                 	db	32
  1001  00FDC1  20                 	db	32
  1002  00FDC2  3C                 	db	60	;'<'
  1003  00FDC3  00                 	db	0
  1004  00FDC4                     STR_34:
  1005  00FDC4  32                 	db	50	;'2'
  1006  00FDC5  2E                 	db	46
  1007  00FDC6  20                 	db	32
  1008  00FDC7  53                 	db	83	;'S'
  1009  00FDC8  4F                 	db	79	;'O'
  1010  00FDC9  52                 	db	82	;'R'
  1011  00FDCA  54                 	db	84	;'T'
  1012  00FDCB  20                 	db	32
  1013  00FDCC  20                 	db	32
  1014  00FDCD  20                 	db	32
  1015  00FDCE  20                 	db	32
  1016  00FDCF  20                 	db	32
  1017  00FDD0  20                 	db	32
  1018  00FDD1  20                 	db	32
  1019  00FDD2  20                 	db	32
  1020  00FDD3  3C                 	db	60	;'<'
  1021  00FDD4  00                 	db	0
  1022  00FDD5                     STR_31:
  1023  00FDD5  31                 	db	49	;'1'
  1024  00FDD6  2E                 	db	46
  1025  00FDD7  20                 	db	32
  1026  00FDD8  44                 	db	68	;'D'
  1027  00FDD9  41                 	db	65	;'A'
  1028  00FDDA  54                 	db	84	;'T'
  1029  00FDDB  45                 	db	69	;'E'
  1030  00FDDC  2F                 	db	47
  1031  00FDDD  54                 	db	84	;'T'
  1032  00FDDE  49                 	db	73	;'I'
  1033  00FDDF  4D                 	db	77	;'M'
  1034  00FDE0  45                 	db	69	;'E'
  1035  00FDE1  20                 	db	32
  1036  00FDE2  20                 	db	32
  1037  00FDE3  20                 	db	32
  1038  00FDE4  3C                 	db	60	;'<'
  1039  00FDE5  00                 	db	0
  1040  00FDE6                     STR_6:
  1041  00FDE6  50                 	db	80	;'P'
  1042  00FDE7  41                 	db	65	;'A'
  1043  00FDE8  55                 	db	85	;'U'
  1044  00FDE9  53                 	db	83	;'S'
  1045  00FDEA  45                 	db	69	;'E'
  1046  00FDEB  20                 	db	32
  1047  00FDEC  3C                 	db	60	;'<'
  1048  00FDED  20                 	db	32
  1049  00FDEE  7C                 	db	124
  1050  00FDEF  20                 	db	32
  1051  00FDF0  42                 	db	66	;'B'
  1052  00FDF1  41                 	db	65	;'A'
  1053  00FDF2  43                 	db	67	;'C'
  1054  00FDF3  4B                 	db	75	;'K'
  1055  00FDF4  20                 	db	32
  1056  00FDF5  3E                 	db	62	;'>'
  1057  00FDF6  00                 	db	0
  1058  00FDF7                     STR_30:
  1059  00FDF7  50                 	db	80	;'P'
  1060  00FDF8  55                 	db	85	;'U'
  1061  00FDF9  53                 	db	83	;'S'
  1062  00FDFA  48                 	db	72	;'H'
  1063  00FDFB  20                 	db	32
  1064  00FDFC  54                 	db	84	;'T'
  1065  00FDFD  4F                 	db	79	;'O'
  1066  00FDFE  20                 	db	32
  1067  00FDFF  43                 	db	67	;'C'
  1068  00FE00  4F                 	db	79	;'O'
  1069  00FE01  4E                 	db	78	;'N'
  1070  00FE02  54                 	db	84	;'T'
  1071  00FE03  49                 	db	73	;'I'
  1072  00FE04  4E                 	db	78	;'N'
  1073  00FE05  55                 	db	85	;'U'
  1074  00FE06  45                 	db	69	;'E'
  1075  00FE07  00                 	db	0
  1076  00FE08                     STR_27:
  1077  00FE08  4E                 	db	78	;'N'
  1078  00FE09  4C                 	db	76	;'L'
  1079  00FE0A  41                 	db	65	;'A'
  1080  00FE0B  42                 	db	66	;'B'
  1081  00FE0C  3A                 	db	58	;':'
  1082  00FE0D  20                 	db	32
  1083  00FE0E  25                 	db	37
  1084  00FE0F  64                 	db	100	;'d'
  1085  00FE10  7C                 	db	124
  1086  00FE11  4C                 	db	76	;'L'
  1087  00FE12  41                 	db	65	;'A'
  1088  00FE13  42                 	db	66	;'B'
  1089  00FE14  3A                 	db	58	;':'
  1090  00FE15  20                 	db	32
  1091  00FE16  25                 	db	37
  1092  00FE17  64                 	db	100	;'d'
  1093  00FE18  00                 	db	0
  1094  00FE19                     STR_25:
  1095  00FE19  4E                 	db	78	;'N'
  1096  00FE1A  54                 	db	84	;'T'
  1097  00FE1B  41                 	db	65	;'A'
  1098  00FE1C  42                 	db	66	;'B'
  1099  00FE1D  3A                 	db	58	;':'
  1100  00FE1E  20                 	db	32
  1101  00FE1F  25                 	db	37
  1102  00FE20  64                 	db	100	;'d'
  1103  00FE21  7C                 	db	124
  1104  00FE22  54                 	db	84	;'T'
  1105  00FE23  41                 	db	65	;'A'
  1106  00FE24  42                 	db	66	;'B'
  1107  00FE25  3A                 	db	58	;':'
  1108  00FE26  20                 	db	32
  1109  00FE27  25                 	db	37
  1110  00FE28  64                 	db	100	;'d'
  1111  00FE29  00                 	db	0
  1112  00FE2A                     STR_83:
  1113  00FE2A  4D                 	db	77	;'M'
  1114  00FE2B  41                 	db	65	;'A'
  1115  00FE2C  47                 	db	71	;'G'
  1116  00FE2D  5F                 	db	95	;'_'
  1117  00FE2E  73                 	db	115	;'s'
  1118  00FE2F  69                 	db	105	;'i'
  1119  00FE30  67                 	db	103	;'g'
  1120  00FE31  6E                 	db	110	;'n'
  1121  00FE32  61                 	db	97	;'a'
  1122  00FE33  6C                 	db	108	;'l'
  1123  00FE34  3A                 	db	58	;':'
  1124  00FE35  20                 	db	32
  1125  00FE36  25                 	db	37
  1126  00FE37  64                 	db	100	;'d'
  1127  00FE38  20                 	db	32
  1128  00FE39  00                 	db	0
  1129  00FE3A                     STR_103:
  1130  00FE3A  54                 	db	84	;'T'
  1131  00FE3B  53                 	db	83	;'S'
  1132  00FE3C  54                 	db	84	;'T'
  1133  00FE3D  3A                 	db	58	;':'
  1134  00FE3E  20                 	db	32
  1135  00FE3F  54                 	db	84	;'T'
  1136  00FE40  49                 	db	73	;'I'
  1137  00FE41  4C                 	db	76	;'L'
  1138  00FE42  54                 	db	84	;'T'
  1139  00FE43  20                 	db	32
  1140  00FE44  53                 	db	83	;'S'
  1141  00FE45  45                 	db	69	;'E'
  1142  00FE46  52                 	db	82	;'R'
  1143  00FE47  56                 	db	86	;'V'
  1144  00FE48  4F                 	db	79	;'O'
  1145  00FE49  00                 	db	0
  1146  00FE4A                     STR_4:
  1147  00FE4A  44                 	db	68	;'D'
  1148  00FE4B  49                 	db	73	;'I'
  1149  00FE4C  44                 	db	68	;'D'
  1150  00FE4D  4E                 	db	78	;'N'
  1151  00FE4E  27                 	db	39
  1152  00FE4F  54                 	db	84	;'T'
  1153  00FE50  20                 	db	32
  1154  00FE51  43                 	db	67	;'C'
  1155  00FE52  4F                 	db	79	;'O'
  1156  00FE53  4D                 	db	77	;'M'
  1157  00FE54  50                 	db	80	;'P'
  1158  00FE55  4C                 	db	76	;'L'
  1159  00FE56  45                 	db	69	;'E'
  1160  00FE57  54                 	db	84	;'T'
  1161  00FE58  45                 	db	69	;'E'
  1162  00FE59  00                 	db	0
  1163  00FE5A                     STR_80:
  1164  00FE5A  49                 	db	73	;'I'
  1165  00FE5B  52                 	db	82	;'R'
  1166  00FE5C  5F                 	db	95	;'_'
  1167  00FE5D  73                 	db	115	;'s'
  1168  00FE5E  69                 	db	105	;'i'
  1169  00FE5F  67                 	db	103	;'g'
  1170  00FE60  6E                 	db	110	;'n'
  1171  00FE61  61                 	db	97	;'a'
  1172  00FE62  6C                 	db	108	;'l'
  1173  00FE63  3A                 	db	58	;':'
  1174  00FE64  20                 	db	32
  1175  00FE65  25                 	db	37
  1176  00FE66  64                 	db	100	;'d'
  1177  00FE67  20                 	db	32
  1178  00FE68  00                 	db	0
  1179  00FE69                     STR_109:
  1180  00FE69  43                 	db	67	;'C'
  1181  00FE6A  41                 	db	65	;'A'
  1182  00FE6B  4D                 	db	77	;'M'
  1183  00FE6C  20                 	db	32
  1184  00FE6D  44                 	db	68	;'D'
  1185  00FE6E  57                 	db	87	;'W'
  1186  00FE6F  4E                 	db	78	;'N'
  1187  00FE70  20                 	db	32
  1188  00FE71  7C                 	db	124
  1189  00FE72  52                 	db	82	;'R'
  1190  00FE73  43                 	db	67	;'C'
  1191  00FE74  30                 	db	48	;'0'
  1192  00FE75  3D                 	db	61	;'='
  1193  00FE76  30                 	db	48	;'0'
  1194  00FE77  00                 	db	0
  1195  00FE78                     STR_108:
  1196  00FE78  43                 	db	67	;'C'
  1197  00FE79  41                 	db	65	;'A'
  1198  00FE7A  4D                 	db	77	;'M'
  1199  00FE7B  20                 	db	32
  1200  00FE7C  55                 	db	85	;'U'
  1201  00FE7D  50                 	db	80	;'P'
  1202  00FE7E  20                 	db	32
  1203  00FE7F  20                 	db	32
  1204  00FE80  7C                 	db	124
  1205  00FE81  52                 	db	82	;'R'
  1206  00FE82  43                 	db	67	;'C'
  1207  00FE83  30                 	db	48	;'0'
  1208  00FE84  3D                 	db	61	;'='
  1209  00FE85  31                 	db	49	;'1'
  1210  00FE86  00                 	db	0
  1211  00FE87                     STR_82:
  1212  00FE87  54                 	db	84	;'T'
  1213  00FE88  53                 	db	83	;'S'
  1214  00FE89  54                 	db	84	;'T'
  1215  00FE8A  3A                 	db	58	;':'
  1216  00FE8B  20                 	db	32
  1217  00FE8C  4D                 	db	77	;'M'
  1218  00FE8D  41                 	db	65	;'A'
  1219  00FE8E  47                 	db	71	;'G'
  1220  00FE8F  4E                 	db	78	;'N'
  1221  00FE90  45                 	db	69	;'E'
  1222  00FE91  54                 	db	84	;'T'
  1223  00FE92  49                 	db	73	;'I'
  1224  00FE93  53                 	db	83	;'S'
  1225  00FE94  4D                 	db	77	;'M'
  1226  00FE95  00                 	db	0
  1227  00FE96                     STR_107:
  1228  00FE96  54                 	db	84	;'T'
  1229  00FE97  53                 	db	83	;'S'
  1230  00FE98  54                 	db	84	;'T'
  1231  00FE99  3A                 	db	58	;':'
  1232  00FE9A  20                 	db	32
  1233  00FE9B  43                 	db	67	;'C'
  1234  00FE9C  41                 	db	65	;'A'
  1235  00FE9D  4D                 	db	77	;'M'
  1236  00FE9E  20                 	db	32
  1237  00FE9F  53                 	db	83	;'S'
  1238  00FEA0  45                 	db	69	;'E'
  1239  00FEA1  52                 	db	82	;'R'
  1240  00FEA2  56                 	db	86	;'V'
  1241  00FEA3  4F                 	db	79	;'O'
  1242  00FEA4  00                 	db	0
  1243  00FEA5                     STR_96:
  1244  00FEA5  54                 	db	84	;'T'
  1245  00FEA6  53                 	db	83	;'S'
  1246  00FEA7  54                 	db	84	;'T'
  1247  00FEA8  3A                 	db	58	;':'
  1248  00FEA9  20                 	db	32
  1249  00FEAA  50                 	db	80	;'P'
  1250  00FEAB  41                 	db	65	;'A'
  1251  00FEAC  4E                 	db	78	;'N'
  1252  00FEAD  20                 	db	32
  1253  00FEAE  53                 	db	83	;'S'
  1254  00FEAF  45                 	db	69	;'E'
  1255  00FEB0  52                 	db	82	;'R'
  1256  00FEB1  56                 	db	86	;'V'
  1257  00FEB2  4F                 	db	79	;'O'
  1258  00FEB3  00                 	db	0
  1259  00FEB4                     STR_75:
  1260  00FEB4  41                 	db	65	;'A'
  1261  00FEB5  4C                 	db	76	;'L'
  1262  00FEB6  47                 	db	71	;'G'
  1263  00FEB7  34                 	db	52	;'4'
  1264  00FEB8  3A                 	db	58	;':'
  1265  00FEB9  20                 	db	32
  1266  00FEBA  41                 	db	65	;'A'
  1267  00FEBB  4C                 	db	76	;'L'
  1268  00FEBC  4C                 	db	76	;'L'
  1269  00FEBD  20                 	db	32
  1270  00FEBE  43                 	db	67	;'C'
  1271  00FEBF  41                 	db	65	;'A'
  1272  00FEC0  4E                 	db	78	;'N'
  1273  00FEC1  53                 	db	83	;'S'
  1274  00FEC2  00                 	db	0
  1275  00FEC3                     STR_90:
  1276  00FEC3  54                 	db	84	;'T'
  1277  00FEC4  53                 	db	83	;'S'
  1278  00FEC5  54                 	db	84	;'T'
  1279  00FEC6  3A                 	db	58	;':'
  1280  00FEC7  20                 	db	32
  1281  00FEC8  44                 	db	68	;'D'
  1282  00FEC9  43                 	db	67	;'C'
  1283  00FECA  20                 	db	32
  1284  00FECB  4D                 	db	77	;'M'
  1285  00FECC  4F                 	db	79	;'O'
  1286  00FECD  54                 	db	84	;'T'
  1287  00FECE  4F                 	db	79	;'O'
  1288  00FECF  52                 	db	82	;'R'
  1289  00FED0  53                 	db	83	;'S'
  1290  00FED1  00                 	db	0
  1291  00FED2                     STR_70:
  1292  00FED2  41                 	db	65	;'A'
  1293  00FED3  4C                 	db	76	;'L'
  1294  00FED4  47                 	db	71	;'G'
  1295  00FED5  4F                 	db	79	;'O'
  1296  00FED6  52                 	db	82	;'R'
  1297  00FED7  49                 	db	73	;'I'
  1298  00FED8  54                 	db	84	;'T'
  1299  00FED9  48                 	db	72	;'H'
  1300  00FEDA  4D                 	db	77	;'M'
  1301  00FEDB  20                 	db	32
  1302  00FEDC  54                 	db	84	;'T'
  1303  00FEDD  45                 	db	69	;'E'
  1304  00FEDE  53                 	db	83	;'S'
  1305  00FEDF  54                 	db	84	;'T'
  1306  00FEE0  00                 	db	0
  1307  00FEE1                     STR_91:
  1308  00FEE1  50                 	db	80	;'P'
  1309  00FEE2  49                 	db	73	;'I'
  1310  00FEE3  4E                 	db	78	;'N'
  1311  00FEE4  20                 	db	32
  1312  00FEE5  52                 	db	82	;'R'
  1313  00FEE6  41                 	db	65	;'A'
  1314  00FEE7  35                 	db	53	;'5'
  1315  00FEE8  20                 	db	32
  1316  00FEE9  48                 	db	72	;'H'
  1317  00FEEA  49                 	db	73	;'I'
  1318  00FEEB  47                 	db	71	;'G'
  1319  00FEEC  48                 	db	72	;'H'
  1320  00FEED  2E                 	db	46
  1321  00FEEE  00                 	db	0
  1322  00FEEF                     STR_73:
  1323  00FEEF  41                 	db	65	;'A'
  1324  00FEF0  4C                 	db	76	;'L'
  1325  00FEF1  47                 	db	71	;'G'
  1326  00FEF2  32                 	db	50	;'2'
  1327  00FEF3  3A                 	db	58	;':'
  1328  00FEF4  20                 	db	32
  1329  00FEF5  31                 	db	49	;'1'
  1330  00FEF6  32                 	db	50	;'2'
  1331  00FEF7  20                 	db	32
  1332  00FEF8  43                 	db	67	;'C'
  1333  00FEF9  41                 	db	65	;'A'
  1334  00FEFA  4E                 	db	78	;'N'
  1335  00FEFB  53                 	db	83	;'S'
  1336  00FEFC  00                 	db	0
  1337  00FEFD                     STR_76:
  1338  00FEFD  41                 	db	65	;'A'
  1339  00FEFE  4C                 	db	76	;'L'
  1340  00FEFF  47                 	db	71	;'G'
  1341  00FF00  35                 	db	53	;'5'
  1342  00FF01  3A                 	db	58	;':'
  1343  00FF02  20                 	db	32
  1344  00FF03  4E                 	db	78	;'N'
  1345  00FF04  4F                 	db	79	;'O'
  1346  00FF05  20                 	db	32
  1347  00FF06  43                 	db	67	;'C'
  1348  00FF07  41                 	db	65	;'A'
  1349  00FF08  4E                 	db	78	;'N'
  1350  00FF09  53                 	db	83	;'S'
  1351  00FF0A  00                 	db	0
  1352  00FF0B                     STR_71:
  1353  00FF0B  50                 	db	80	;'P'
  1354  00FF0C  55                 	db	85	;'U'
  1355  00FF0D  53                 	db	83	;'S'
  1356  00FF0E  48                 	db	72	;'H'
  1357  00FF0F  20                 	db	32
  1358  00FF10  54                 	db	84	;'T'
  1359  00FF11  4F                 	db	79	;'O'
  1360  00FF12  20                 	db	32
  1361  00FF13  53                 	db	83	;'S'
  1362  00FF14  54                 	db	84	;'T'
  1363  00FF15  41                 	db	65	;'A'
  1364  00FF16  52                 	db	82	;'R'
  1365  00FF17  54                 	db	84	;'T'
  1366  00FF18  00                 	db	0
  1367  00FF19                     STR_23:
  1368  00FF19  25                 	db	37
  1369  00FF1A  64                 	db	100	;'d'
  1370  00FF1B  20                 	db	32
  1371  00FF1C  4D                 	db	77	;'M'
  1372  00FF1D  49                 	db	73	;'I'
  1373  00FF1E  4E                 	db	78	;'N'
  1374  00FF1F  20                 	db	32
  1375  00FF20  25                 	db	37
  1376  00FF21  64                 	db	100	;'d'
  1377  00FF22  20                 	db	32
  1378  00FF23  53                 	db	83	;'S'
  1379  00FF24  45                 	db	69	;'E'
  1380  00FF25  43                 	db	67	;'C'
  1381  00FF26  00                 	db	0
  1382  00FF27                     STR_2:
  1383  00FF27  54                 	db	84	;'T'
  1384  00FF28  49                 	db	73	;'I'
  1385  00FF29  4D                 	db	77	;'M'
  1386  00FF2A  45                 	db	69	;'E'
  1387  00FF2B  3A                 	db	58	;':'
  1388  00FF2C  20                 	db	32
  1389  00FF2D  25                 	db	37
  1390  00FF2E  64                 	db	100	;'d'
  1391  00FF2F  3A                 	db	58	;':'
  1392  00FF30  25                 	db	37
  1393  00FF31  30                 	db	48	;'0'
  1394  00FF32  32                 	db	50	;'2'
  1395  00FF33  64                 	db	100	;'d'
  1396  00FF34  00                 	db	0
  1397  00FF35                     STR_79:
  1398  00FF35  54                 	db	84	;'T'
  1399  00FF36  53                 	db	83	;'S'
  1400  00FF37  54                 	db	84	;'T'
  1401  00FF38  3A                 	db	58	;':'
  1402  00FF39  20                 	db	32
  1403  00FF3A  49                 	db	73	;'I'
  1404  00FF3B  52                 	db	82	;'R'
  1405  00FF3C  20                 	db	32
  1406  00FF3D  53                 	db	83	;'S'
  1407  00FF3E  4E                 	db	78	;'N'
  1408  00FF3F  53                 	db	83	;'S'
  1409  00FF40  52                 	db	82	;'R'
  1410  00FF41  00                 	db	0
  1411  00FF42                     STR_65:
  1412  00FF42  54                 	db	84	;'T'
  1413  00FF43  49                 	db	73	;'I'
  1414  00FF44  4D                 	db	77	;'M'
  1415  00FF45  45                 	db	69	;'E'
  1416  00FF46  20                 	db	32
  1417  00FF47  25                 	db	37
  1418  00FF48  64                 	db	100	;'d'
  1419  00FF49  3A                 	db	58	;':'
  1420  00FF4A  25                 	db	37
  1421  00FF4B  30                 	db	48	;'0'
  1422  00FF4C  32                 	db	50	;'2'
  1423  00FF4D  64                 	db	100	;'d'
  1424  00FF4E  00                 	db	0
  1425  00FF4F                     STR_74:
  1426  00FF4F  41                 	db	65	;'A'
  1427  00FF50  4C                 	db	76	;'L'
  1428  00FF51  47                 	db	71	;'G'
  1429  00FF52  33                 	db	51	;'3'
  1430  00FF53  3A                 	db	58	;':'
  1431  00FF54  20                 	db	32
  1432  00FF55  31                 	db	49	;'1'
  1433  00FF56  20                 	db	32
  1434  00FF57  43                 	db	67	;'C'
  1435  00FF58  41                 	db	65	;'A'
  1436  00FF59  4E                 	db	78	;'N'
  1437  00FF5A  00                 	db	0
  1438  00FF5B                     STR_93:
  1439  00FF5B  50                 	db	80	;'P'
  1440  00FF5C  49                 	db	73	;'I'
  1441  00FF5D  4E                 	db	78	;'N'
  1442  00FF5E  20                 	db	32
  1443  00FF5F  52                 	db	82	;'R'
  1444  00FF60  41                 	db	65	;'A'
  1445  00FF61  33                 	db	51	;'3'
  1446  00FF62  2E                 	db	46
  1447  00FF63  2E                 	db	46
  1448  00FF64  2E                 	db	46
  1449  00FF65  00                 	db	0
  1450  00FF66                     STR_95:
  1451  00FF66  50                 	db	80	;'P'
  1452  00FF67  49                 	db	73	;'I'
  1453  00FF68  4E                 	db	78	;'N'
  1454  00FF69  20                 	db	32
  1455  00FF6A  52                 	db	82	;'R'
  1456  00FF6B  41                 	db	65	;'A'
  1457  00FF6C  34                 	db	52	;'4'
  1458  00FF6D  2E                 	db	46
  1459  00FF6E  2E                 	db	46
  1460  00FF6F  2E                 	db	46
  1461  00FF70  00                 	db	0
  1462  00FF71                     STR_113:
  1463  00FF71  50                 	db	80	;'P'
  1464  00FF72  55                 	db	85	;'U'
  1465  00FF73  53                 	db	83	;'S'
  1466  00FF74  48                 	db	72	;'H'
  1467  00FF75  45                 	db	69	;'E'
  1468  00FF76  52                 	db	82	;'R'
  1469  00FF77  20                 	db	32
  1470  00FF78  54                 	db	84	;'T'
  1471  00FF79  53                 	db	83	;'S'
  1472  00FF7A  54                 	db	84	;'T'
  1473  00FF7B  00                 	db	0
  1474  00FF7C                     STR_64:
  1475  00FF7C  53                 	db	83	;'S'
  1476  00FF7D  4F                 	db	79	;'O'
  1477  00FF7E  52                 	db	82	;'R'
  1478  00FF7F  54                 	db	84	;'T'
  1479  00FF80  49                 	db	73	;'I'
  1480  00FF81  4E                 	db	78	;'N'
  1481  00FF82  47                 	db	71	;'G'
  1482  00FF83  2E                 	db	46
  1483  00FF84  2E                 	db	46
  1484  00FF85  2E                 	db	46
  1485  00FF86  00                 	db	0
  1486  00FF87                     STR_84:
  1487  00FF87  54                 	db	84	;'T'
  1488  00FF88  53                 	db	83	;'S'
  1489  00FF89  54                 	db	84	;'T'
  1490  00FF8A  3A                 	db	58	;':'
  1491  00FF8B  20                 	db	32
  1492  00FF8C  43                 	db	67	;'C'
  1493  00FF8D  4F                 	db	79	;'O'
  1494  00FF8E  4E                 	db	78	;'N'
  1495  00FF8F  44                 	db	68	;'D'
  1496  00FF90  00                 	db	0
  1497  00FF91                     STR_88:
  1498  00FF91  41                 	db	65	;'A'
  1499  00FF92  43                 	db	67	;'C'
  1500  00FF93  54                 	db	84	;'T'
  1501  00FF94  55                 	db	85	;'U'
  1502  00FF95  41                 	db	65	;'A'
  1503  00FF96  54                 	db	84	;'T'
  1504  00FF97  4F                 	db	79	;'O'
  1505  00FF98  52                 	db	82	;'R'
  1506  00FF99  53                 	db	83	;'S'
  1507  00FF9A  00                 	db	0
  1508  00FF9B                     STR_22:
  1509  00FF9B  44                 	db	68	;'D'
  1510  00FF9C  55                 	db	85	;'U'
  1511  00FF9D  52                 	db	82	;'R'
  1512  00FF9E  41                 	db	65	;'A'
  1513  00FF9F  54                 	db	84	;'T'
  1514  00FFA0  49                 	db	73	;'I'
  1515  00FFA1  4F                 	db	79	;'O'
  1516  00FFA2  4E                 	db	78	;'N'
  1517  00FFA3  3A                 	db	58	;':'
  1518  00FFA4  00                 	db	0
  1519  00FFA5                     STR_86:
  1520  00FFA5  43                 	db	67	;'C'
  1521  00FFA6  4F                 	db	79	;'O'
  1522  00FFA7  4E                 	db	78	;'N'
  1523  00FFA8  44                 	db	68	;'D'
  1524  00FFA9  3A                 	db	58	;':'
  1525  00FFAA  20                 	db	32
  1526  00FFAB  25                 	db	37
  1527  00FFAC  64                 	db	100	;'d'
  1528  00FFAD  00                 	db	0
  1529  00FFAE                     STR_77:
  1530  00FFAE  53                 	db	83	;'S'
  1531  00FFAF  45                 	db	69	;'E'
  1532  00FFB0  4E                 	db	78	;'N'
  1533  00FFB1  53                 	db	83	;'S'
  1534  00FFB2  4F                 	db	79	;'O'
  1535  00FFB3  52                 	db	82	;'R'
  1536  00FFB4  53                 	db	83	;'S'
  1537  00FFB5  00                 	db	0
  1538  00FFB6                     STR_126:
  1539  00FFB6  28                 	db	40
  1540  00FFB7  6E                 	db	110	;'n'
  1541  00FFB8  75                 	db	117	;'u'
  1542  00FFB9  6C                 	db	108	;'l'
  1543  00FFBA  6C                 	db	108	;'l'
  1544  00FFBB  29                 	db	41
  1545  00FFBC  00                 	db	0
  1546  00FFBD                     STR_67:
  1547  00FFBD  46                 	db	70	;'F'
  1548  00FFBE  41                 	db	65	;'A'
  1549  00FFBF  49                 	db	73	;'I'
  1550  00FFC0  4C                 	db	76	;'L'
  1551  00FFC1  45                 	db	69	;'E'
  1552  00FFC2  44                 	db	68	;'D'
  1553  00FFC3  00                 	db	0
  1554  00FFC4                     STR_7:
  1555  00FFC4  53                 	db	83	;'S'
  1556  00FFC5  54                 	db	84	;'T'
  1557  00FFC6  41                 	db	65	;'A'
  1558  00FFC7  52                 	db	82	;'R'
  1559  00FFC8  54                 	db	84	;'T'
  1560  00FFC9  3A                 	db	58	;':'
  1561  00FFCA  00                 	db	0
  1562  00FFCB                     STR_9:
  1563  00FFCB  46                 	db	70	;'F'
  1564  00FFCC  45                 	db	69	;'E'
  1565  00FFCD  42                 	db	66	;'B'
  1566  00FFCE  00                 	db	0
  1567  00FFCF                     STR_19:
  1568  00FFCF  44                 	db	68	;'D'
  1569  00FFD0  45                 	db	69	;'E'
  1570  00FFD1  43                 	db	67	;'C'
  1571  00FFD2  00                 	db	0
  1572  00FFD3                     STR_15:
  1573  00FFD3  41                 	db	65	;'A'
  1574  00FFD4  55                 	db	85	;'U'
  1575  00FFD5  47                 	db	71	;'G'
  1576  00FFD6  00                 	db	0
  1577  00FFD7                     STR_14:
  1578  00FFD7  4A                 	db	74	;'J'
  1579  00FFD8  55                 	db	85	;'U'
  1580  00FFD9  4C                 	db	76	;'L'
  1581  00FFDA  00                 	db	0
  1582  00FFDB                     STR_8:
  1583  00FFDB  4A                 	db	74	;'J'
  1584  00FFDC  41                 	db	65	;'A'
  1585  00FFDD  4E                 	db	78	;'N'
  1586  00FFDE  00                 	db	0
  1587  00FFDF                     STR_13:
  1588  00FFDF  4A                 	db	74	;'J'
  1589  00FFE0  55                 	db	85	;'U'
  1590  00FFE1  4E                 	db	78	;'N'
  1591  00FFE2  00                 	db	0
  1592  00FFE3                     STR_16:
  1593  00FFE3  53                 	db	83	;'S'
  1594  00FFE4  45                 	db	69	;'E'
  1595  00FFE5  50                 	db	80	;'P'
  1596  00FFE6  00                 	db	0
  1597  00FFE7                     STR_10:
  1598  00FFE7  4D                 	db	77	;'M'
  1599  00FFE8  41                 	db	65	;'A'
  1600  00FFE9  52                 	db	82	;'R'
  1601  00FFEA  00                 	db	0
  1602  00FFEB                     STR_11:
  1603  00FFEB  41                 	db	65	;'A'
  1604  00FFEC  50                 	db	80	;'P'
  1605  00FFED  52                 	db	82	;'R'
  1606  00FFEE  00                 	db	0
  1607  00FFEF                     STR_20:
  1608  00FFEF  45                 	db	69	;'E'
  1609  00FFF0  52                 	db	82	;'R'
  1610  00FFF1  52                 	db	82	;'R'
  1611  00FFF2  00                 	db	0
  1612  00FFF3                     STR_17:
  1613  00FFF3  4F                 	db	79	;'O'
  1614  00FFF4  43                 	db	67	;'C'
  1615  00FFF5  54                 	db	84	;'T'
  1616  00FFF6  00                 	db	0
  1617  00FFF7                     STR_18:
  1618  00FFF7  4E                 	db	78	;'N'
  1619  00FFF8  4F                 	db	79	;'O'
  1620  00FFF9  56                 	db	86	;'V'
  1621  00FFFA  00                 	db	0
  1622  00FFFB                     STR_12:
  1623  00FFFB  4D                 	db	77	;'M'
  1624  00FFFC  41                 	db	65	;'A'
  1625  00FFFD  59                 	db	89	;'Y'
  1626  00FFFE  00                 	db	0
  1627  0000                     
  1628                           ; #config settings
  1629  00FFFF  00                 	db	0	; dummy byte at the end
  1630  0000                     
  1631                           	psect	cinit
  1632  0048FA                     __pcinit:
  1633                           	opt stack 0
  1634  0048FA                     start_initialization:
  1635                           	opt stack 0
  1636  0048FA                     __initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Initialize objects allocated to BANK1 (8 bytes)
  1640                           ; load TBLPTR registers with __pidataBANK1
  1641  0048FA  0E40               	movlw	low __pidataBANK1
  1642  0048FC  6EF6               	movwf	tblptrl,c
  1643  0048FE  0E50               	movlw	high __pidataBANK1
  1644  004900  6EF7               	movwf	tblptrh,c
  1645  004902  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1646  004904  6EF8               	movwf	tblptru,c
  1647  004906  EE01  F035         	lfsr	0,__pdataBANK1
  1648  00490A  EE10 F008          	lfsr	1,8
  1649  00490E                     copy_data0:
  1650  00490E  0009               	tblrd		*+
  1651  004910  CFF5 FFEE          	movff	tablat,postinc0
  1652  004914  50E5               	movf	postdec1,w,c
  1653  004916  50E1               	movf	fsr1l,w,c
  1654  004918  E1FA               	bnz	copy_data0
  1655                           
  1656                           ; Clear objects allocated to BANK1 (53 bytes)
  1657  00491A  EE01  F000         	lfsr	0,__pbssBANK1
  1658  00491E  0E35               	movlw	53
  1659  004920                     clear_0:
  1660  004920  6AEE               	clrf	postinc0,c
  1661  004922  06E8               	decf	wreg,f,c
  1662  004924  E1FD               	bnz	clear_0
  1663                           
  1664                           ; Clear objects allocated to BANK0 (38 bytes)
  1665  004926  EE00  F0DA         	lfsr	0,__pbssBANK0
  1666  00492A  0E26               	movlw	38
  1667  00492C                     clear_1:
  1668  00492C  6AEE               	clrf	postinc0,c
  1669  00492E  06E8               	decf	wreg,f,c
  1670  004930  E1FD               	bnz	clear_1
  1671                           
  1672                           ; Clear objects allocated to COMRAM (37 bytes)
  1673  004932  EE00  F059         	lfsr	0,__pbssCOMRAM
  1674  004936  0E25               	movlw	37
  1675  004938                     clear_2:
  1676  004938  6AEE               	clrf	postinc0,c
  1677  00493A  06E8               	decf	wreg,f,c
  1678  00493C  E1FD               	bnz	clear_2
  1679  00493E                     end_of_initialization:
  1680                           	opt stack 0
  1681  00493E                     __end_of__initialization:
  1682                           	opt stack 0
  1683  00493E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1684  004940  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1685  004942  0100               	movlb	0
  1686  004944  EF12  F01F         	goto	_main	;jump to C main() function
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	bssCOMRAM
  1697  000059                     __pbssCOMRAM:
  1698                           	opt stack 0
  1699  000059                     _back:
  1700                           	opt stack 0
  1701  000059                     	ds	2
  1702  00005B                     _count_pop_no_tab:
  1703                           	opt stack 0
  1704  00005B                     	ds	2
  1705  00005D                     _count_pop_w_tab:
  1706                           	opt stack 0
  1707  00005D                     	ds	2
  1708  00005F                     _debug:
  1709                           	opt stack 0
  1710  00005F                     	ds	2
  1711  000061                     _down:
  1712                           	opt stack 0
  1713  000061                     	ds	2
  1714  000063                     _enter:
  1715                           	opt stack 0
  1716  000063                     	ds	2
  1717  000065                     _f_ID_receive:
  1718                           	opt stack 0
  1719  000065                     	ds	2
  1720  000067                     _f_can_coming_to_ID:
  1721                           	opt stack 0
  1722  000067                     	ds	2
  1723  000069                     _f_can_coming_to_distribution:
  1724                           	opt stack 0
  1725  000069                     	ds	2
  1726  00006B                     _f_most_recent_sort_time:
  1727                           	opt stack 0
  1728  00006B                     	ds	2
  1729  00006D                     _first:
  1730                           	opt stack 0
  1731  00006D                     	ds	2
  1732  00006F                     _firstboot:
  1733                           	opt stack 0
  1734  00006F                     	ds	2
  1735  000071                     _log_count_can_no_lab:
  1736                           	opt stack 0
  1737  000071                     	ds	2
  1738  000073                     _log_count_can_w_lab:
  1739                           	opt stack 0
  1740  000073                     	ds	2
  1741  000075                     _log_count_total:
  1742                           	opt stack 0
  1743  000075                     	ds	2
  1744  000077                     _up:
  1745                           	opt stack 0
  1746  000077                     	ds	2
  1747  000079                     _was_low_1:
  1748                           	opt stack 0
  1749  000079                     	ds	2
  1750  00007B                     _was_low_3:
  1751                           	opt stack 0
  1752  00007B                     	ds	2
  1753  00007D                     _input:
  1754                           	opt stack 0
  1755  00007D                     	ds	1
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK0
  1766  0000DA                     __pbssBANK0:
  1767                           	opt stack 0
  1768  0000DA                     _sensor_outputs:
  1769                           	opt stack 0
  1770  0000DA                     	ds	4
  1771  0000DE                     _IR_signal:
  1772                           	opt stack 0
  1773  0000DE                     	ds	2
  1774  0000E0                     _MAG_signal:
  1775                           	opt stack 0
  1776  0000E0                     	ds	2
  1777  0000E2                     _RTCflag:
  1778                           	opt stack 0
  1779  0000E2                     	ds	2
  1780  0000E4                     _cur_can:
  1781                           	opt stack 0
  1782  0000E4                     	ds	2
  1783  0000E6                     _cur_state:
  1784                           	opt stack 0
  1785  0000E6                     	ds	2
  1786  0000E8                     _f_lastCan:
  1787                           	opt stack 0
  1788  0000E8                     	ds	2
  1789  0000EA                     _f_loadingNewCan:
  1790                           	opt stack 0
  1791  0000EA                     	ds	2
  1792  0000EC                     _log:
  1793                           	opt stack 0
  1794  0000EC                     	ds	2
  1795  0000EE                     _log_completion:
  1796                           	opt stack 0
  1797  0000EE                     	ds	2
  1798  0000F0                     _log_count_pop_no_tab:
  1799                           	opt stack 0
  1800  0000F0                     	ds	2
  1801  0000F2                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  0000F2                     	ds	2
  1804  0000F4                     _log_total_time:
  1805                           	opt stack 0
  1806  0000F4                     	ds	2
  1807  0000F6                     _logstate:
  1808                           	opt stack 0
  1809  0000F6                     	ds	2
  1810  0000F8                     _total_time:
  1811                           	opt stack 0
  1812  0000F8                     	ds	2
  1813  0000FA                     _var:
  1814                           	opt stack 0
  1815  0000FA                     	ds	2
  1816  0000FC                     _machine_state:
  1817                           	opt stack 0
  1818  0000FC                     	ds	1
  1819  0000FD                     _sel:
  1820                           	opt stack 0
  1821  0000FD                     	ds	1
  1822  0000FE                     _count_total:
  1823                           	opt stack 0
  1824  0000FE                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	bssBANK1
  1835  000100                     __pbssBANK1:
  1836                           	opt stack 0
  1837  000100                     _log_startTime:
  1838                           	opt stack 0
  1839  000100                     	ds	14
  1840  00010E                     _startTime:
  1841                           	opt stack 0
  1842  00010E                     	ds	14
  1843  00011C                     _servoTimes:
  1844                           	opt stack 0
  1845  00011C                     	ds	8
  1846  000124                     _time:
  1847                           	opt stack 0
  1848  000124                     	ds	7
  1849  00012B                     _count_can_no_lab:
  1850                           	opt stack 0
  1851  00012B                     	ds	2
  1852  00012D                     _count_can_w_lab:
  1853                           	opt stack 0
  1854  00012D                     	ds	2
  1855  00012F                     _f_can_distributed:
  1856                           	opt stack 0
  1857  00012F                     	ds	2
  1858  000131                     _i:
  1859                           	opt stack 0
  1860  000131                     	ds	2
  1861  000133                     _most_recent_sort_time:
  1862                           	opt stack 0
  1863  000133                     	ds	2
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataBANK1
  1874  000135                     __pdataBANK1:
  1875                           	opt stack 0
  1876  000135                     UI@F3228:
  1877                           	opt stack 0
  1878  000135                     	ds	4
  1879  000139                     printRTC@F3219:
  1880                           	opt stack 0
  1881  000139                     	ds	4
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	cstackBANK0
  1892  000080                     __pcstackBANK0:
  1893                           	opt stack 0
  1894  000080                     ??_delay_ms:
  1895  000080                     ??_PortTests:
  1896  000080                     ??_isdigit:
  1897  000080                     ??_readADC:
  1898  000080                     ??_I2C_Master_Wait:
  1899  000080                     ?___wmul:
  1900                           	opt stack 0
  1901  000080                     ?___awmod:
  1902                           	opt stack 0
  1903  000080                     ?___lwdiv:
  1904                           	opt stack 0
  1905  000080                     ?___lldiv:
  1906                           	opt stack 0
  1907  000080                     lcdNibble@temp:
  1908                           	opt stack 0
  1909  000080                     initTime@m:
  1910                           	opt stack 0
  1911  000080                     updateServoPosition@time_us:
  1912                           	opt stack 0
  1913  000080                     EEPROM_read@address:
  1914                           	opt stack 0
  1915  000080                     ___wmul@multiplier:
  1916                           	opt stack 0
  1917  000080                     ___awmod@dividend:
  1918                           	opt stack 0
  1919  000080                     ___lwdiv@dividend:
  1920                           	opt stack 0
  1921  000080                     strcpy@to:
  1922                           	opt stack 0
  1923  000080                     ___lldiv@dividend:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x0
  1927  000080                     	ds	1
  1928  000081                     readADC@channel:
  1929                           	opt stack 0
  1930  000081                     I2C_Master_Read@a:
  1931                           	opt stack 0
  1932  000081                     lcdNibble@data:
  1933                           	opt stack 0
  1934  000081                     initTime@h:
  1935                           	opt stack 0
  1936  000081                     delay_ms@milliseconds:
  1937                           	opt stack 0
  1938  000081                     _isdigit$1977:
  1939                           	opt stack 0
  1940  000081                     I2C_Master_Write@d:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1
  1944  000081                     	ds	1
  1945  000082                     ??_ID:
  1946  000082                     ??_readIR:
  1947  000082                     ??_readMAG:
  1948  000082                     I2C_Master_Read@temp:
  1949                           	opt stack 0
  1950  000082                     lcdInst@data:
  1951                           	opt stack 0
  1952  000082                     putch@data:
  1953                           	opt stack 0
  1954  000082                     initTime@w:
  1955                           	opt stack 0
  1956  000082                     isdigit@c:
  1957                           	opt stack 0
  1958  000082                     updateServoPosition@timer:
  1959                           	opt stack 0
  1960  000082                     ___wmul@multiplicand:
  1961                           	opt stack 0
  1962  000082                     ___awmod@divisor:
  1963                           	opt stack 0
  1964  000082                     ___lwdiv@divisor:
  1965                           	opt stack 0
  1966  000082                     strcpy@from:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x2
  1970  000082                     	ds	1
  1971  000083                     ??_initLCD:
  1972  000083                     initTime@DD:
  1973                           	opt stack 0
  1974  000083                     getRTC@i:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x3
  1978  000083                     	ds	1
  1979  000084                     ??_updateServoPosition:
  1980  000084                     initTime@MM:
  1981                           	opt stack 0
  1982  000084                     ___awmod@counter:
  1983                           	opt stack 0
  1984  000084                     readIR@res:
  1985                           	opt stack 0
  1986  000084                     readMAG@res:
  1987                           	opt stack 0
  1988  000084                     ID@i:
  1989                           	opt stack 0
  1990  000084                     ___wmul@product:
  1991                           	opt stack 0
  1992  000084                     ___lwdiv@quotient:
  1993                           	opt stack 0
  1994  000084                     strcpy@cp:
  1995                           	opt stack 0
  1996  000084                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000084                     	ds	1
  2001  000085                     ??_initSortTimer:
  2002  000085                     initTime@YY:
  2003                           	opt stack 0
  2004  000085                     ___awmod@sign:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x5
  2008  000085                     	ds	1
  2009  000086                     ??_getIR:
  2010  000086                     ??_getMAG:
  2011  000086                     ?___awdiv:
  2012                           	opt stack 0
  2013  000086                     initTime@s:
  2014                           	opt stack 0
  2015  000086                     ___lwdiv@counter:
  2016                           	opt stack 0
  2017  000086                     ID@i_1120:
  2018                           	opt stack 0
  2019  000086                     updateServoPosition@my_time:
  2020                           	opt stack 0
  2021  000086                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  000086                     	ds	1
  2026  000087                     ?___lwmod:
  2027                           	opt stack 0
  2028  000087                     getIR@i:
  2029                           	opt stack 0
  2030  000087                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x7
  2034  000087                     	ds	1
  2035  000088                     ??_Distribution:
  2036  000088                     ??_initServos:
  2037  000088                     initSortTimer@i:
  2038                           	opt stack 0
  2039  000088                     ___awdiv@divisor:
  2040                           	opt stack 0
  2041  000088                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000088                     	ds	1
  2046  000089                     ___lwmod@divisor:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x9
  2050  000089                     	ds	1
  2051  00008A                     ___awdiv@counter:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00008A                     	ds	1
  2056  00008B                     ___awdiv@sign:
  2057                           	opt stack 0
  2058  00008B                     ___lwmod@counter:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0xB
  2062  00008B                     	ds	1
  2063  00008C                     ___lldiv@counter:
  2064                           	opt stack 0
  2065  00008C                     ___awdiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  00008C                     	ds	1
  2070  00008D                     I2C_Master_Init@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0xD
  2074  00008D                     	ds	1
  2075  00008E                     ?_printf:
  2076                           	opt stack 0
  2077  00008E                     printf@f:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0xE
  2081  00008E                     	ds	3
  2082  000091                     ??_I2C_Master_Init:
  2083                           
  2084                           ; 1 bytes @ 0x11
  2085  000091                     	ds	4
  2086  000095                     ??_loadRTC:
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000095                     	ds	1
  2090  000096                     loadRTC@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x16
  2094  000096                     	ds	4
  2095  00009A                     ??_printf:
  2096                           
  2097                           ; 1 bytes @ 0x1A
  2098  00009A                     	ds	4
  2099  00009E                     printf@prec:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1E
  2103  00009E                     	ds	1
  2104  00009F                     printf@cp:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1F
  2108  00009F                     	ds	2
  2109  0000A1                     printf@ap:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x21
  2113  0000A1                     	ds	2
  2114  0000A3                     printf@len:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x23
  2118  0000A3                     	ds	2
  2119  0000A5                     printf@val:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x25
  2123  0000A5                     	ds	2
  2124  0000A7                     printf@flag:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x27
  2128  0000A7                     	ds	1
  2129  0000A8                     printf@c:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x28
  2133  0000A8                     	ds	1
  2134  0000A9                     printf@width:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x29
  2138  0000A9                     	ds	2
  2139  0000AB                     ??_printRTC:
  2140  0000AB                     ??_algorithmTest:
  2141  0000AB                     ??_sensorTest:
  2142  0000AB                     ??_actuatorTest:
  2143  0000AB                     ??_PortTestA5:
  2144  0000AB                     ??_SpeedTest:
  2145  0000AB                     ??_PusherTest:
  2146  0000AB                     ??_BothServos:
  2147  0000AB                     ??_BlockerTest:
  2148  0000AB                     EEPROM_write@address:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x2B
  2152  0000AB                     	ds	1
  2153  0000AC                     BlockerTest@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2C
  2157  0000AC                     	ds	1
  2158  0000AD                     EEPROM_write@data:
  2159                           	opt stack 0
  2160  0000AD                     actuatorTest@i_1653:
  2161                           	opt stack 0
  2162  0000AD                     sensorTest@res:
  2163                           	opt stack 0
  2164  0000AD                     PusherTest@res:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2D
  2168  0000AD                     	ds	1
  2169  0000AE                     ??_EEPROM_write:
  2170  0000AE                     actuatorTest@i_1660:
  2171                           	opt stack 0
  2172  0000AE                     BlockerTest@cam_flag:
  2173                           	opt stack 0
  2174  0000AE                     printRTC@INT_time:
  2175                           	opt stack 0
  2176                           
  2177                           ; 14 bytes @ 0x2E
  2178  0000AE                     	ds	1
  2179  0000AF                     EEPROM_write@i:
  2180                           	opt stack 0
  2181  0000AF                     actuatorTest@i_1661:
  2182                           	opt stack 0
  2183  0000AF                     PusherTest@res_1708:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2F
  2187  0000AF                     	ds	1
  2188  0000B0                     EEPROM_write@i_1339:
  2189                           	opt stack 0
  2190  0000B0                     actuatorTest@i_1663:
  2191                           	opt stack 0
  2192  0000B0                     BlockerTest@cond_flag:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x30
  2196  0000B0                     	ds	1
  2197  0000B1                     ??_Loading:
  2198  0000B1                     logRun@num:
  2199                           	opt stack 0
  2200  0000B1                     actuatorTest@i_1664:
  2201                           	opt stack 0
  2202  0000B1                     PusherTest@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x31
  2206  0000B1                     	ds	1
  2207  0000B2                     logRun@byte1:
  2208                           	opt stack 0
  2209  0000B2                     actuatorTest@i_1666:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x32
  2213  0000B2                     	ds	1
  2214  0000B3                     logRun@byte2:
  2215                           	opt stack 0
  2216  0000B3                     actuatorTest@i_1667:
  2217                           	opt stack 0
  2218  0000B3                     Loading@addr:
  2219                           	opt stack 0
  2220  0000B3                     PusherTest@i_1712:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x33
  2224  0000B3                     	ds	1
  2225  0000B4                     logRun@byte3:
  2226                           	opt stack 0
  2227  0000B4                     actuatorTest@i_1669:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x34
  2231  0000B4                     	ds	1
  2232  0000B5                     Loading@byte1:
  2233                           	opt stack 0
  2234  0000B5                     logRun@byte_i:
  2235                           	opt stack 0
  2236  0000B5                     actuatorTest@i_1670:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x35
  2240  0000B5                     	ds	1
  2241  0000B6                     logRun@byte11:
  2242                           	opt stack 0
  2243  0000B6                     actuatorTest@i_1672:
  2244                           	opt stack 0
  2245  0000B6                     Loading@i_1103:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x36
  2249  0000B6                     	ds	1
  2250  0000B7                     actuatorTest@i_1673:
  2251                           	opt stack 0
  2252  0000B7                     logRun@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x37
  2256  0000B7                     	ds	1
  2257  0000B8                     actuatorTest@i_1675:
  2258                           	opt stack 0
  2259  0000B8                     Loading@i_1104:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x38
  2263  0000B8                     	ds	1
  2264  0000B9                     actuatorTest@i_1676:
  2265                           	opt stack 0
  2266  0000B9                     logRun@addr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x39
  2270  0000B9                     	ds	1
  2271  0000BA                     actuatorTest@i_1679:
  2272                           	opt stack 0
  2273  0000BA                     Loading@i_1106:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x3A
  2277  0000BA                     	ds	1
  2278  0000BB                     actuatorTest@i_1680:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x3B
  2282  0000BB                     	ds	1
  2283  0000BC                     actuatorTest@i_1682:
  2284                           	opt stack 0
  2285  0000BC                     printRTC@RTC_month:
  2286                           	opt stack 0
  2287  0000BC                     Loading@i_1107:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x3C
  2291  0000BC                     	ds	1
  2292  0000BD                     actuatorTest@i_1683:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  0000BD                     	ds	1
  2297  0000BE                     actuatorTest@i_1685:
  2298                           	opt stack 0
  2299  0000BE                     Loading@i_1109:
  2300                           	opt stack 0
  2301  0000BE                     printRTC@month:
  2302                           	opt stack 0
  2303                           
  2304                           ; 4 bytes @ 0x3E
  2305  0000BE                     	ds	1
  2306  0000BF                     actuatorTest@i_1686:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x3F
  2310  0000BF                     	ds	1
  2311  0000C0                     actuatorTest@i_1689:
  2312                           	opt stack 0
  2313  0000C0                     Loading@j:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x40
  2317  0000C0                     	ds	1
  2318  0000C1                     actuatorTest@i_1690:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x41
  2322  0000C1                     	ds	1
  2323  0000C2                     actuatorTest@i_1692:
  2324                           	opt stack 0
  2325  0000C2                     printRTC@i:
  2326                           	opt stack 0
  2327  0000C2                     Loading@i:
  2328                           	opt stack 0
  2329                           
  2330                           ; 2 bytes @ 0x42
  2331  0000C2                     	ds	1
  2332  0000C3                     actuatorTest@i_1693:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x43
  2336  0000C3                     	ds	1
  2337  0000C4                     ??_UI:
  2338  0000C4                     actuatorTest@i:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x44
  2342  0000C4                     	ds	2
  2343  0000C6                     ??_Test:
  2344  0000C6                     _UI$2333:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x46
  2348  0000C6                     	ds	2
  2349  0000C8                     UI@i:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x48
  2353  0000C8                     	ds	1
  2354  0000C9                     UI@i_409:
  2355                           	opt stack 0
  2356                           
  2357                           ; 1 bytes @ 0x49
  2358  0000C9                     	ds	1
  2359  0000CA                     UI@i_412:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x4A
  2363  0000CA                     	ds	1
  2364  0000CB                     UI@i_413:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x4B
  2368  0000CB                     	ds	1
  2369  0000CC                     UI@i_431:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x4C
  2373  0000CC                     	ds	1
  2374  0000CD                     UI@i_432:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0x4D
  2378  0000CD                     	ds	1
  2379  0000CE                     UI@i_435:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x4E
  2383  0000CE                     	ds	1
  2384  0000CF                     UI@i_436:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x4F
  2388  0000CF                     	ds	1
  2389  0000D0                     UI@i_439:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x50
  2393  0000D0                     	ds	1
  2394  0000D1                     UI@i_440:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x51
  2398  0000D1                     	ds	1
  2399  0000D2                     UI@i_443:
  2400                           	opt stack 0
  2401                           
  2402                           ; 1 bytes @ 0x52
  2403  0000D2                     	ds	1
  2404  0000D3                     UI@i_444:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x53
  2408  0000D3                     	ds	1
  2409  0000D4                     UI@i_447:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x54
  2413  0000D4                     	ds	1
  2414  0000D5                     UI@i_448:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x55
  2418  0000D5                     	ds	1
  2419  0000D6                     UI@month:
  2420                           	opt stack 0
  2421                           
  2422                           ; 4 bytes @ 0x56
  2423  0000D6                     	ds	4
  2424  0000DA                     tblptru	equ	0xFF8
  2425                           tblptrh	equ	0xFF7
  2426                           tblptrl	equ	0xFF6
  2427                           tablat	equ	0xFF5
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1l	equ	0xFE1
  2432                           
  2433                           ; 1 bytes @ 0x5A
  2434                           
  2435                           	psect	cstackCOMRAM
  2436  000001                     __pcstackCOMRAM:
  2437                           	opt stack 0
  2438  000001                     ??i2_I2C_Master_Wait:
  2439  000001                     ??i2_isdigit:
  2440  000001                     ?i2___wmul:
  2441                           	opt stack 0
  2442  000001                     ?i2___lwmod:
  2443                           	opt stack 0
  2444  000001                     i2lcdNibble@temp:
  2445                           	opt stack 0
  2446  000001                     i2EEPROM_read@address:
  2447                           	opt stack 0
  2448  000001                     i2___wmul@multiplier:
  2449                           	opt stack 0
  2450  000001                     i2___lwmod@dividend:
  2451                           	opt stack 0
  2452  000001                     i2strcpy@to:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x0
  2456  000001                     	ds	1
  2457  000002                     i2I2C_Master_Read@a:
  2458                           	opt stack 0
  2459  000002                     i2lcdNibble@data:
  2460                           	opt stack 0
  2461  000002                     i2_isdigit$1977:
  2462                           	opt stack 0
  2463  000002                     i2I2C_Master_Write@d:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x1
  2467  000002                     	ds	1
  2468  000003                     i2I2C_Master_Read@temp:
  2469                           	opt stack 0
  2470  000003                     i2lcdInst@data:
  2471                           	opt stack 0
  2472  000003                     i2putch@data:
  2473                           	opt stack 0
  2474  000003                     i2isdigit@c:
  2475                           	opt stack 0
  2476  000003                     i2___wmul@multiplicand:
  2477                           	opt stack 0
  2478  000003                     i2___lwmod@divisor:
  2479                           	opt stack 0
  2480  000003                     i2strcpy@from:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x2
  2484  000003                     	ds	1
  2485  000004                     i2getRTC@i:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x3
  2489  000004                     	ds	1
  2490  000005                     i2___lwmod@counter:
  2491                           	opt stack 0
  2492  000005                     i2___wmul@product:
  2493                           	opt stack 0
  2494  000005                     i2strcpy@cp:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x4
  2498  000005                     	ds	1
  2499  000006                     ?i2___lwdiv:
  2500                           	opt stack 0
  2501  000006                     i2___lwdiv@dividend:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x5
  2505  000006                     	ds	1
  2506  000007                     retrieveLog@logNum:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x6
  2510  000007                     	ds	1
  2511  000008                     i2___lwdiv@divisor:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x7
  2515  000008                     	ds	1
  2516  000009                     ??_retrieveLog:
  2517                           
  2518                           ; 1 bytes @ 0x8
  2519  000009                     	ds	1
  2520  00000A                     i2___lwdiv@quotient:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x9
  2524  00000A                     	ds	1
  2525  00000B                     retrieveLog@byte1:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0xA
  2529  00000B                     	ds	1
  2530  00000C                     retrieveLog@byte2:
  2531                           	opt stack 0
  2532  00000C                     i2___lwdiv@counter:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0xB
  2536  00000C                     	ds	1
  2537  00000D                     ?i2_printf:
  2538                           	opt stack 0
  2539  00000D                     retrieveLog@byte3:
  2540                           	opt stack 0
  2541  00000D                     i2printf@f:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0xC
  2545  00000D                     	ds	1
  2546  00000E                     retrieveLog@i:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0xD
  2550  00000E                     	ds	2
  2551  000010                     retrieveLog@addr:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0xF
  2555  000010                     	ds	2
  2556  000012                     dispLogs@myLog:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x11
  2560  000012                     	ds	2
  2561  000014                     
  2562                           ; 1 bytes @ 0x13
  2563  000014                     	ds	5
  2564  000019                     ??i2_printf:
  2565                           
  2566                           ; 1 bytes @ 0x18
  2567  000019                     	ds	4
  2568  00001D                     i2printf@prec:
  2569                           	opt stack 0
  2570                           
  2571                           ; 1 bytes @ 0x1C
  2572  00001D                     	ds	1
  2573  00001E                     i2printf@cp:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x1D
  2577  00001E                     	ds	2
  2578  000020                     i2printf@ap:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x1F
  2582  000020                     	ds	2
  2583  000022                     i2printf@len:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x21
  2587  000022                     	ds	2
  2588  000024                     i2printf@val:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x23
  2592  000024                     	ds	2
  2593  000026                     i2printf@flag:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x25
  2597  000026                     	ds	1
  2598  000027                     i2printf@c:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x26
  2602  000027                     	ds	1
  2603  000028                     i2printf@width:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x27
  2607  000028                     	ds	2
  2608  00002A                     ??_printSortTimer:
  2609  00002A                     ??i2_printRTC:
  2610  00002A                     ?_inputHandler:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x29
  2614  00002A                     	ds	2
  2615  00002C                     ??_inputHandler:
  2616                           
  2617                           ; 1 bytes @ 0x2B
  2618  00002C                     	ds	1
  2619  00002D                     printSortTimer@curTime:
  2620                           	opt stack 0
  2621  00002D                     i2printRTC@INT_time:
  2622                           	opt stack 0
  2623                           
  2624                           ; 14 bytes @ 0x2C
  2625  00002D                     	ds	14
  2626  00003B                     printSortTimer@start_sec:
  2627                           	opt stack 0
  2628  00003B                     i2printRTC@RTC_month:
  2629                           	opt stack 0
  2630                           
  2631                           ; 2 bytes @ 0x3A
  2632  00003B                     	ds	2
  2633  00003D                     printSortTimer@cur_sec:
  2634                           	opt stack 0
  2635  00003D                     i2printRTC@month:
  2636                           	opt stack 0
  2637                           
  2638                           ; 4 bytes @ 0x3C
  2639  00003D                     	ds	2
  2640  00003F                     printSortTimer@min:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x3E
  2644  00003F                     	ds	2
  2645  000041                     printSortTimer@sec:
  2646                           	opt stack 0
  2647  000041                     i2printRTC@i:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0x40
  2651  000041                     	ds	2
  2652  000043                     ??_updateMenu:
  2653  000043                     _printSortTimer$2453:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x42
  2657  000043                     	ds	2
  2658  000045                     printSortTimer@timeDiff:
  2659                           	opt stack 0
  2660                           
  2661                           ; 2 bytes @ 0x44
  2662  000045                     	ds	2
  2663  000047                     printSortTimer@i:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x46
  2667  000047                     	ds	2
  2668  000049                     ??_handler:
  2669                           
  2670                           ; 1 bytes @ 0x48
  2671  000049                     	ds	16
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           
  2681 ;;
  2682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2683 ;;
  2684 ;; *************** function _main *****************
  2685 ;; Defined at:
  2686 ;;		line 19 in file "main.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels required when called:   13
  2706 ;; This function calls:
  2707 ;;		_I2C_Master_Init
  2708 ;;		_Test
  2709 ;;		_UI
  2710 ;;		_initLCD
  2711 ;;		_initTime
  2712 ;;		_initUI
  2713 ;;		_logRun
  2714 ;;		_machineConfig
  2715 ;;		_sort
  2716 ;;		_stopSignals
  2717 ;; This function is called by:
  2718 ;;		Startup code after reset
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text0
  2723  003E24                     __ptext0:
  2724                           	opt stack 0
  2725  003E24                     _main:
  2726                           	opt stack 18
  2727                           
  2728                           ;main.c: 20: machineConfig();
  2729                           
  2730                           ;incstack = 0
  2731  003E24  ECA0  F023         	call	_machineConfig	;wreg free
  2732                           
  2733                           ;main.c: 21: initLCD();
  2734  003E28  ECF0  F024         	call	_initLCD	;wreg free
  2735                           
  2736                           ;main.c: 24: RTCflag = 0;
  2737  003E2C  0E00               	movlw	0
  2738  003E2E  0100               	movlb	0	; () banked
  2739  003E30  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2740  003E32  0E00               	movlw	0
  2741  003E34  6FE2               	movwf	_RTCflag& (0+255),b
  2742                           
  2743                           ;main.c: 25: if(RTCflag){
  2744  003E36  0100               	movlb	0	; () banked
  2745  003E38  51E2               	movf	_RTCflag& (0+255),w,b
  2746  003E3A  0100               	movlb	0	; () banked
  2747  003E3C  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2748  003E3E  B4D8               	btfsc	status,2,c
  2749  003E40  D016               	goto	l8918
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2753  003E42  0E20               	movlw	32
  2754  003E44  0100               	movlb	0	; () banked
  2755  003E46  6F80               	movwf	initTime@m& (0+255),b
  2756  003E48  0E15               	movlw	21
  2757  003E4A  0100               	movlb	0	; () banked
  2758  003E4C  6F81               	movwf	initTime@h& (0+255),b
  2759  003E4E  0E04               	movlw	4
  2760  003E50  0100               	movlb	0	; () banked
  2761  003E52  6F82               	movwf	initTime@w& (0+255),b
  2762  003E54  0E15               	movlw	21
  2763  003E56  0100               	movlb	0	; () banked
  2764  003E58  6F83               	movwf	initTime@DD& (0+255),b
  2765  003E5A  0E03               	movlw	3
  2766  003E5C  0100               	movlb	0	; () banked
  2767  003E5E  6F84               	movwf	initTime@MM& (0+255),b
  2768  003E60  0E17               	movlw	23
  2769  003E62  0100               	movlb	0	; () banked
  2770  003E64  6F85               	movwf	initTime@YY& (0+255),b
  2771  003E66  0E42               	movlw	66
  2772  003E68  ECA3  F027         	call	_initTime
  2773                           
  2774                           ;main.c: 27: }
  2775  003E6C  D00B               	goto	l8920
  2776  003E6E                     l8918:
  2777                           
  2778                           ;main.c: 28: else{
  2779                           ;main.c: 29: I2C_Master_Init(10000);
  2780  003E6E  0E10               	movlw	16
  2781  003E70  0100               	movlb	0	; () banked
  2782  003E72  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2783  003E74  0E27               	movlw	39
  2784  003E76  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2785  003E78  0E00               	movlw	0
  2786  003E7A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2787  003E7C  0E00               	movlw	0
  2788  003E7E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2789  003E80  EC70  F023         	call	_I2C_Master_Init	;wreg free
  2790  003E84                     l8920:
  2791                           
  2792                           ;main.c: 30: }
  2793                           ;main.c: 32: initUI();
  2794  003E84  ECAC  F026         	call	_initUI	;wreg free
  2795                           
  2796                           ;main.c: 33: first = 1;
  2797  003E88  0E00               	movlw	0
  2798  003E8A  6E6E               	movwf	_first+1,c
  2799  003E8C  0E01               	movlw	1
  2800  003E8E  6E6D               	movwf	_first,c
  2801                           
  2802                           ;main.c: 44: switch(machine_state){
  2803                           
  2804                           ;main.c: 43: while(1){
  2805  003E90  D017               	goto	l8942
  2806  003E92                     l8924:
  2807                           
  2808                           ;main.c: 46: UI();
  2809  003E92  EC65  F004         	call	_UI	;wreg free
  2810                           
  2811                           ;main.c: 47: break;
  2812  003E96  D014               	goto	l8942
  2813  003E98                     l8926:
  2814                           
  2815                           ;main.c: 49: sort();
  2816  003E98  EC92  F027         	call	_sort	;wreg free
  2817                           
  2818                           ;main.c: 50: break;
  2819  003E9C  D011               	goto	l8942
  2820  003E9E                     l8928:
  2821                           
  2822                           ;main.c: 52: stopSignals();
  2823  003E9E  ECC3  F027         	call	_stopSignals	;wreg free
  2824                           
  2825                           ;main.c: 53: logRun();
  2826  003EA2  EC7B  F01C         	call	_logRun	;wreg free
  2827                           
  2828                           ;main.c: 54: first = 1;
  2829  003EA6  0E00               	movlw	0
  2830  003EA8  6E6E               	movwf	_first+1,c
  2831  003EAA  0E01               	movlw	1
  2832  003EAC  6E6D               	movwf	_first,c
  2833                           
  2834                           ;main.c: 55: UI();
  2835  003EAE  EC65  F004         	call	_UI	;wreg free
  2836                           
  2837                           ;main.c: 56: break;
  2838  003EB2  D006               	goto	l8942
  2839  003EB4                     l8936:
  2840                           
  2841                           ;main.c: 58: Test();
  2842  003EB4  ECAB  F01D         	call	_Test	;wreg free
  2843                           
  2844                           ;main.c: 59: break;
  2845  003EB8  D003               	goto	l8942
  2846  003EBA                     l8938:
  2847                           
  2848                           ;main.c: 61: stopSignals();
  2849  003EBA  ECC3  F027         	call	_stopSignals	;wreg free
  2850  003EBE                     l491:
  2851  003EBE  D7FF               	goto	l491
  2852  003EC0                     l8942:
  2853  003EC0  0100               	movlb	0	; () banked
  2854  003EC2  51FC               	movf	_machine_state& (0+255),w,b
  2855                           
  2856                           ; Switch size 1, requested type "space"
  2857                           ; Number of cases is 5, Range of values is 0 to 4
  2858                           ; switch strategies available:
  2859                           ; Name         Instructions Cycles
  2860                           ; simple_byte           16     9 (average)
  2861                           ;	Chosen strategy is simple_byte
  2862  003EC4  0A00               	xorlw	0	; case 0
  2863  003EC6  B4D8               	btfsc	status,2,c
  2864  003EC8  D7E4               	goto	l8924
  2865  003ECA  0A01               	xorlw	1	; case 1
  2866  003ECC  B4D8               	btfsc	status,2,c
  2867  003ECE  D7E4               	goto	l8926
  2868  003ED0  0A03               	xorlw	3	; case 2
  2869  003ED2  B4D8               	btfsc	status,2,c
  2870  003ED4  D7E4               	goto	l8928
  2871  003ED6  0A01               	xorlw	1	; case 3
  2872  003ED8  B4D8               	btfsc	status,2,c
  2873  003EDA  D7EC               	goto	l8936
  2874  003EDC  0A07               	xorlw	7	; case 4
  2875  003EDE  B4D8               	btfsc	status,2,c
  2876  003EE0  D7EC               	goto	l8938
  2877                           
  2878                           ; BSR set to: 0
  2879                           
  2880                           ; BSR set to: 0
  2881  003EE2  D7EE               	goto	l8942
  2882  003EE4                     __end_of_main:
  2883                           	opt stack 0
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _stopSignals *****************
  2895 ;; Defined at:
  2896 ;;		line 70 in file "main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    7
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text1
  2925  004F86                     __ptext1:
  2926                           	opt stack 0
  2927  004F86                     _stopSignals:
  2928                           	opt stack 23
  2929                           
  2930                           ;main.c: 71: LATA = 0x00;
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;incstack = 0
  2934  004F86  0E00               	movlw	0
  2935  004F88  6E89               	movwf	3977,c	;volatile
  2936                           
  2937                           ;main.c: 72: LATB = 0x00;
  2938  004F8A  0E00               	movlw	0
  2939  004F8C  6E8A               	movwf	3978,c	;volatile
  2940                           
  2941                           ;main.c: 73: LATC = 0x00;
  2942  004F8E  0E00               	movlw	0
  2943  004F90  6E8B               	movwf	3979,c	;volatile
  2944                           
  2945                           ;main.c: 74: LATD = 0x00;
  2946  004F92  0E00               	movlw	0
  2947  004F94  6E8C               	movwf	3980,c	;volatile
  2948                           
  2949                           ;main.c: 75: LATE = 0x00;
  2950  004F96  0E00               	movlw	0
  2951  004F98  6E8D               	movwf	3981,c	;volatile
  2952                           
  2953                           ;main.c: 76: TMR1ON = 0;
  2954  004F9A  90CD               	bcf	4045,0,c	;volatile
  2955                           
  2956                           ;main.c: 77: TMR3ON = 0;
  2957  004F9C  90B1               	bcf	4017,0,c	;volatile
  2958  004F9E  0012               	return		;funcret
  2959  004FA0                     __end_of_stopSignals:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           postdec1	equ	0xFE5
  2968                           fsr1l	equ	0xFE1
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _sort *****************
  2972 ;; Defined at:
  2973 ;;		line 58 in file "sort.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;Total ram usage:        0 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:   12
  2994 ;; This function calls:
  2995 ;;		_Distribution
  2996 ;;		_ID
  2997 ;;		_Loading
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text2
  3004  004F24                     __ptext2:
  3005                           	opt stack 0
  3006  004F24                     _sort:
  3007                           	opt stack 18
  3008                           
  3009                           ;sort.c: 59: if(machine_state == Sorting_state){
  3010                           
  3011                           ;incstack = 0
  3012  004F24  0100               	movlb	0	; () banked
  3013  004F26  05FC               	decf	_machine_state& (0+255),w,b
  3014  004F28  B4D8               	btfsc	status,2,c
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 60: Loading();
  3018  004F2A  ECB8  F008         	call	_Loading	;wreg free
  3019                           
  3020                           ;sort.c: 61: }
  3021                           ;sort.c: 62: if(machine_state == Sorting_state){
  3022  004F2E  0100               	movlb	0	; () banked
  3023  004F30  05FC               	decf	_machine_state& (0+255),w,b
  3024  004F32  B4D8               	btfsc	status,2,c
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;sort.c: 63: ID();
  3028  004F34  EC14  F01A         	call	_ID	;wreg free
  3029                           
  3030                           ;sort.c: 64: }
  3031                           ;sort.c: 65: if(machine_state == Sorting_state){
  3032  004F38  0100               	movlb	0	; () banked
  3033  004F3A  05FC               	decf	_machine_state& (0+255),w,b
  3034  004F3C  A4D8               	btfss	status,2,c
  3035  004F3E  0012               	return	
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;sort.c: 66: Distribution();
  3039  004F40  EC0A  F017         	call	_Distribution	;wreg free
  3040  004F44  0012               	return	
  3041  004F46                     __end_of_sort:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           postdec1	equ	0xFE5
  3050                           fsr1l	equ	0xFE1
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _Loading *****************
  3054 ;; Defined at:
  3055 ;;		line 70 in file "sort.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  i               2   62[BANK0 ] int 
  3060 ;;  i               2   60[BANK0 ] int 
  3061 ;;  i               2   58[BANK0 ] int 
  3062 ;;  i               2   56[BANK0 ] int 
  3063 ;;  i               2   54[BANK0 ] int 
  3064 ;;  j               2   64[BANK0 ] int 
  3065 ;;  i               2   66[BANK0 ] int 
  3066 ;;  addr            2   51[BANK0 ] unsigned short 
  3067 ;;  byte1           1   53[BANK0 ] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:       19 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:   11
  3084 ;; This function calls:
  3085 ;;		_EEPROM_read
  3086 ;;		_EEPROM_write
  3087 ;;		_delay_ms
  3088 ;;		_getIR
  3089 ;;		_getMAG
  3090 ;;		_initGlobalVars
  3091 ;;		_initServos
  3092 ;;		_initSortTimer
  3093 ;;		_lcdInst
  3094 ;;		_readIR
  3095 ;; This function is called by:
  3096 ;;		_sort
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text3
  3101  001170                     __ptext3:
  3102                           	opt stack 0
  3103  001170                     _Loading:
  3104                           	opt stack 18
  3105                           
  3106                           ;sort.c: 71: if(first){
  3107                           
  3108                           ;incstack = 0
  3109  001170  506D               	movf	_first,w,c
  3110  001172  106E               	iorwf	_first+1,w,c
  3111  001174  B4D8               	btfsc	status,2,c
  3112  001176  D066               	goto	l6922
  3113                           
  3114                           ;sort.c: 72: initGlobalVars();
  3115  001178  ECE2  F021         	call	_initGlobalVars	;wreg free
  3116                           
  3117                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3118  00117C  0E01               	movlw	1
  3119  00117E  EC02  F028         	call	_lcdInst
  3120  001182  0E68               	movlw	104
  3121  001184  0100               	movlb	0	; () banked
  3122  001186  6FB1               	movwf	??_Loading& (0+255),b
  3123  001188  0EE4               	movlw	228
  3124  00118A                     u8217:
  3125  00118A  2EE8               	decfsz	wreg,f,c
  3126  00118C  D7FE               	bra	u8217
  3127  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3128  001190  D7FC               	bra	u8217
  3129  001192  F000               	nop	
  3130                           
  3131                           ;sort.c: 74: initSortTimer();
  3132  001194  EC2F  F020         	call	_initSortTimer	;wreg free
  3133                           
  3134                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3135  001198  8A8B               	bsf	3979,5,c	;volatile
  3136                           
  3137                           ;sort.c: 80: sel = EEPROM_read(0);
  3138  00119A  0E00               	movlw	0
  3139  00119C  0100               	movlb	0	; () banked
  3140  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3141  0011A0  0E00               	movlw	0
  3142  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3143  0011A4  ECD0  F027         	call	_EEPROM_read	;wreg free
  3144  0011A8  0100               	movlb	0	; () banked
  3145  0011AA  6FFD               	movwf	_sel& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3149  0011AC  0100               	movlb	0	; () banked
  3150  0011AE  51FD               	movf	_sel& (0+255),w,b
  3151  0011B0  0D0B               	mullw	11
  3152  0011B2  0E01               	movlw	1
  3153  0011B4  24F3               	addwf	prodl,w,c
  3154  0011B6  0100               	movlb	0	; () banked
  3155  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3156  0011BA  0E00               	movlw	0
  3157  0011BC  20F4               	addwfc	prodh,w,c
  3158  0011BE  0100               	movlb	0	; () banked
  3159  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3163  0011C2  0E7F               	movlw	127
  3164  0011C4  0100               	movlb	0	; () banked
  3165  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3169  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3170  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3171  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3172  0011D4  EC35  F01E         	call	_EEPROM_write	;wreg free
  3173                           
  3174                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3175  0011D8  9A89               	bcf	3977,5,c	;volatile
  3176                           
  3177                           ;sort.c: 88: for(int i=0; i<46; i++){
  3178  0011DA  0E00               	movlw	0
  3179  0011DC  0100               	movlb	0	; () banked
  3180  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3181  0011E0  0E00               	movlw	0
  3182  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185  0011E4  0100               	movlb	0	; () banked
  3186  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3187  0011E8  D008               	goto	l6912
  3188  0011EA  0100               	movlb	0	; () banked
  3189  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3190  0011EE  E126               	bnz	l740
  3191  0011F0  0E2E               	movlw	46
  3192  0011F2  0100               	movlb	0	; () banked
  3193  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3194  0011F6  B0D8               	btfsc	status,0,c
  3195  0011F8  D021               	goto	l740
  3196  0011FA                     l6912:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3200  0011FA  BA89               	btfsc	3977,5,c	;volatile
  3201  0011FC  D004               	goto	u5420
  3202  0011FE  0100               	movlb	0	; () banked
  3203  001200  6BB1               	clrf	??_Loading& (0+255),b
  3204  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3205  001204  D002               	goto	u5438
  3206  001206                     u5420:
  3207  001206  0100               	movlb	0	; () banked
  3208  001208  6BB1               	clrf	??_Loading& (0+255),b
  3209  00120A                     u5438:
  3210  00120A  0100               	movlb	0	; () banked
  3211  00120C  3BB1               	swapf	??_Loading& (0+255),f,b
  3212  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3213  001210  5089               	movf	3977,w,c	;volatile
  3214  001212  0100               	movlb	0	; () banked
  3215  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3216  001216  0BDF               	andlw	-33
  3217  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3218  00121A  6E89               	movwf	3977,c	;volatile
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;sort.c: 90: delay_ms(45-i);
  3222  00121C  0100               	movlb	0	; () banked
  3223  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3224  001220  0800               	sublw	0
  3225  001222  0F2D               	addlw	45
  3226  001224  EC32  F027         	call	_delay_ms
  3227  001228  0100               	movlb	0	; () banked
  3228  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3229  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3230                           
  3231                           ; BSR set to: 0
  3232  00122E  0100               	movlb	0	; () banked
  3233  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3234  001232  D7E3               	goto	l6912
  3235  001234  0100               	movlb	0	; () banked
  3236  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3237  001238  E101               	bnz	u5440
  3238  00123A  D7DA               	goto	L1
  3239  00123C                     u5440:
  3240  00123C                     l740:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 91: }
  3244                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3245  00123C  8A89               	bsf	3977,5,c	;volatile
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 95: initServos();
  3249  00123E  ECFC  F023         	call	_initServos	;wreg free
  3250                           
  3251                           ;sort.c: 96: }
  3252  001242  0012               	return	
  3253  001244                     l6922:
  3254                           
  3255                           ;sort.c: 97: else{
  3256                           ;sort.c: 100: if(!f_loadingNewCan){
  3257  001244  0100               	movlb	0	; () banked
  3258  001246  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3259  001248  0100               	movlb	0	; () banked
  3260  00124A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3261  00124C  A4D8               	btfss	status,2,c
  3262  00124E  D018               	goto	l6938
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 102: getIR();
  3266  001250  EC99  F022         	call	_getIR	;wreg free
  3267                           
  3268                           ;sort.c: 104: if(!f_loadingNewCan){
  3269  001254  0100               	movlb	0	; () banked
  3270  001256  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3271  001258  0100               	movlb	0	; () banked
  3272  00125A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3273  00125C  B4D8               	btfsc	status,2,c
  3274  00125E  0012               	return	
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;sort.c: 108: else{
  3278                           ;sort.c: 109: count_total++;
  3279                           
  3280                           ; BSR set to: 0
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;sort.c: 106: }
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 105: return;
  3287  001260  0100               	movlb	0	; () banked
  3288  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3289  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 110: if(count_total == 12){
  3293  001266  0E0C               	movlw	12
  3294  001268  0100               	movlb	0	; () banked
  3295  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3296  00126C  0100               	movlb	0	; () banked
  3297  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3298  001270  A4D8               	btfss	status,2,c
  3299  001272  0012               	return	
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;sort.c: 111: f_lastCan = 1;
  3303  001274  0E00               	movlw	0
  3304  001276  0100               	movlb	0	; () banked
  3305  001278  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3306  00127A  0E01               	movlw	1
  3307  00127C  6FE8               	movwf	_f_lastCan& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 112: }
  3311                           ;sort.c: 113: }
  3312                           ;sort.c: 114: }
  3313                           
  3314                           ; BSR set to: 0
  3315  00127E  0012               	return	
  3316  001280                     l6938:
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 117: else if(f_ID_receive){
  3320  001280  5065               	movf	_f_ID_receive,w,c
  3321  001282  1066               	iorwf	_f_ID_receive+1,w,c
  3322  001284  B4D8               	btfsc	status,2,c
  3323  001286  0012               	return	
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 118: f_loadingNewCan = 0;
  3327  001288  0E00               	movlw	0
  3328  00128A  0100               	movlb	0	; () banked
  3329  00128C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3330  00128E  0E00               	movlw	0
  3331  001290  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;sort.c: 119: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3335  001292  0E3D               	movlw	61
  3336  001294  0100               	movlb	0	; () banked
  3337  001296  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3338  001298  0EE1               	movlw	225
  3339  00129A  0100               	movlb	0	; () banked
  3340  00129C  6FB1               	movwf	??_Loading& (0+255),b
  3341  00129E  0E3F               	movlw	63
  3342  0012A0                     u8227:
  3343  0012A0  2EE8               	decfsz	wreg,f,c
  3344  0012A2  D7FE               	bra	u8227
  3345  0012A4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3346  0012A6  D7FC               	bra	u8227
  3347  0012A8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3348  0012AA  D7FA               	bra	u8227
  3349  0012AC  D000               	nop2	
  3350                           
  3351                           ;sort.c: 120: LATAbits.LATA5 = 0;
  3352  0012AE  9A89               	bcf	3977,5,c	;volatile
  3353                           
  3354                           ;sort.c: 124: getMAG();
  3355  0012B0  ECA2  F025         	call	_getMAG	;wreg free
  3356                           
  3357                           ;sort.c: 125: sensor_outputs[0] = MAG_signal;
  3358  0012B4  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3359  0012B8  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3360                           
  3361                           ;sort.c: 127: if(sensor_outputs[0]){
  3362  0012BC  0100               	movlb	0	; () banked
  3363  0012BE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3364  0012C0  0100               	movlb	0	; () banked
  3365  0012C2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3366  0012C4  B4D8               	btfsc	status,2,c
  3367  0012C6  D01D               	goto	l6964
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;sort.c: 128: for(int i = 0; i<2500; i++){
  3371  0012C8  0E00               	movlw	0
  3372  0012CA  0100               	movlb	0	; () banked
  3373  0012CC  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3374  0012CE  0E00               	movlw	0
  3375  0012D0  6FB6               	movwf	Loading@i_1103& (0+255),b
  3376  0012D2                     l6954:
  3377                           
  3378                           ; BSR set to: 0
  3379  0012D2  0100               	movlb	0	; () banked
  3380  0012D4  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3381  0012D6  D008               	goto	l750
  3382  0012D8  0EC4               	movlw	196
  3383  0012DA  0100               	movlb	0	; () banked
  3384  0012DC  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3385  0012DE  0E09               	movlw	9
  3386  0012E0  0100               	movlb	0	; () banked
  3387  0012E2  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3388  0012E4  B0D8               	btfsc	status,0,c
  3389  0012E6  D02A               	goto	l6976
  3390  0012E8                     l750:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3394  0012E8  8889               	bsf	3977,4,c	;volatile
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;sort.c: 130: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3398  0012EA  0EC8               	movlw	200
  3399  0012EC                     u8237:
  3400  0012EC  2EE8               	decfsz	wreg,f,c
  3401  0012EE  D7FE               	bra	u8237
  3402                           
  3403                           ;sort.c: 131: LATAbits.LATA4 = 0;
  3404  0012F0  9889               	bcf	3977,4,c	;volatile
  3405                           
  3406                           ;sort.c: 132: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3407  0012F2  0E42               	movlw	66
  3408  0012F4                     u8247:
  3409  0012F4  2EE8               	decfsz	wreg,f,c
  3410  0012F6  D7FE               	bra	u8247
  3411  0012F8  D000               	nop2	
  3412  0012FA  0100               	movlb	0	; () banked
  3413  0012FC  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3414  0012FE  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3415  001300  D7E8               	goto	l6954
  3416  001302                     l6964:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 135: else{
  3420                           ;sort.c: 136: for(int i = 0; i<2500; i++){
  3421  001302  0E00               	movlw	0
  3422  001304  0100               	movlb	0	; () banked
  3423  001306  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3424  001308  0E00               	movlw	0
  3425  00130A  6FB8               	movwf	Loading@i_1104& (0+255),b
  3426  00130C                     l6966:
  3427                           
  3428                           ; BSR set to: 0
  3429  00130C  0100               	movlb	0	; () banked
  3430  00130E  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3431  001310  D008               	goto	l753
  3432  001312  0EC4               	movlw	196
  3433  001314  0100               	movlb	0	; () banked
  3434  001316  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3435  001318  0E09               	movlw	9
  3436  00131A  0100               	movlb	0	; () banked
  3437  00131C  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3438  00131E  B0D8               	btfsc	status,0,c
  3439  001320  D00D               	goto	l6976
  3440  001322                     l753:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;sort.c: 137: LATAbits.LATA4 = 1;
  3444  001322  8889               	bsf	3977,4,c	;volatile
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;sort.c: 138: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3448  001324  0E9A               	movlw	154
  3449  001326                     u8257:
  3450  001326  2EE8               	decfsz	wreg,f,c
  3451  001328  D7FE               	bra	u8257
  3452  00132A  D000               	nop2	
  3453                           
  3454                           ;sort.c: 139: LATAbits.LATA4 = 0;
  3455  00132C  9889               	bcf	3977,4,c	;volatile
  3456                           
  3457                           ;sort.c: 140: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3458  00132E  0E70               	movlw	112
  3459  001330                     u8267:
  3460  001330  2EE8               	decfsz	wreg,f,c
  3461  001332  D7FE               	bra	u8267
  3462  001334  0100               	movlb	0	; () banked
  3463  001336  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3464  001338  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3465  00133A  D7E8               	goto	l6966
  3466  00133C                     l6976:
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 141: }
  3470                           ;sort.c: 142: }
  3471                           ;sort.c: 144: _delay((unsigned long)((350)*(32000000/4000.0)));
  3472  00133C  0E0F               	movlw	15
  3473  00133E  0100               	movlb	0	; () banked
  3474  001340  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3475  001342  0E35               	movlw	53
  3476  001344  0100               	movlb	0	; () banked
  3477  001346  6FB1               	movwf	??_Loading& (0+255),b
  3478  001348  0E51               	movlw	81
  3479  00134A                     u8277:
  3480  00134A  2EE8               	decfsz	wreg,f,c
  3481  00134C  D7FE               	bra	u8277
  3482  00134E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3483  001350  D7FC               	bra	u8277
  3484  001352  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3485  001354  D7FA               	bra	u8277
  3486                           
  3487                           ;sort.c: 146: readIR();
  3488  001356  ECA4  F024         	call	_readIR	;wreg free
  3489                           
  3490                           ;sort.c: 147: if(IR_signal==1){
  3491  00135A  0100               	movlb	0	; () banked
  3492  00135C  05DE               	decf	_IR_signal& (0+255),w,b
  3493  00135E  0100               	movlb	0	; () banked
  3494  001360  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3495  001362  A4D8               	btfss	status,2,c
  3496  001364  D13A               	goto	l7090
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;sort.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  3500  001366  0E05               	movlw	5
  3501  001368  0100               	movlb	0	; () banked
  3502  00136A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3503  00136C  0E0F               	movlw	15
  3504  00136E  0100               	movlb	0	; () banked
  3505  001370  6FB1               	movwf	??_Loading& (0+255),b
  3506  001372  0EF1               	movlw	241
  3507  001374                     u8287:
  3508  001374  2EE8               	decfsz	wreg,f,c
  3509  001376  D7FE               	bra	u8287
  3510  001378  2FB1               	decfsz	??_Loading& (0+255),f,b
  3511  00137A  D7FC               	bra	u8287
  3512  00137C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3513  00137E  D7FA               	bra	u8287
  3514                           
  3515                           ;sort.c: 149: readIR();
  3516  001380  ECA4  F024         	call	_readIR	;wreg free
  3517                           
  3518                           ;sort.c: 150: if(IR_signal==1){
  3519  001384  0100               	movlb	0	; () banked
  3520  001386  05DE               	decf	_IR_signal& (0+255),w,b
  3521  001388  0100               	movlb	0	; () banked
  3522  00138A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3523  00138C  A4D8               	btfss	status,2,c
  3524  00138E  D040               	goto	l7014
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;sort.c: 151: if(sensor_outputs[0]){
  3528  001390  0100               	movlb	0	; () banked
  3529  001392  51DA               	movf	_sensor_outputs& (0+255),w,b
  3530  001394  0100               	movlb	0	; () banked
  3531  001396  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3532  001398  B4D8               	btfsc	status,2,c
  3533  00139A  D01D               	goto	l7002
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;sort.c: 152: for(int i = 0; i<2500; i++){
  3537  00139C  0E00               	movlw	0
  3538  00139E  0100               	movlb	0	; () banked
  3539  0013A0  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3540  0013A2  0E00               	movlw	0
  3541  0013A4  6FBA               	movwf	Loading@i_1106& (0+255),b
  3542  0013A6                     l6992:
  3543                           
  3544                           ; BSR set to: 0
  3545  0013A6  0100               	movlb	0	; () banked
  3546  0013A8  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3547  0013AA  D008               	goto	l758
  3548  0013AC  0EC4               	movlw	196
  3549  0013AE  0100               	movlb	0	; () banked
  3550  0013B0  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3551  0013B2  0E09               	movlw	9
  3552  0013B4  0100               	movlb	0	; () banked
  3553  0013B6  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3554  0013B8  B0D8               	btfsc	status,0,c
  3555  0013BA  D02A               	goto	l7014
  3556  0013BC                     l758:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3560  0013BC  8889               	bsf	3977,4,c	;volatile
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3564  0013BE  0EC8               	movlw	200
  3565  0013C0                     u8297:
  3566  0013C0  2EE8               	decfsz	wreg,f,c
  3567  0013C2  D7FE               	bra	u8297
  3568                           
  3569                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3570  0013C4  9889               	bcf	3977,4,c	;volatile
  3571                           
  3572                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3573  0013C6  0E42               	movlw	66
  3574  0013C8                     u8307:
  3575  0013C8  2EE8               	decfsz	wreg,f,c
  3576  0013CA  D7FE               	bra	u8307
  3577  0013CC  D000               	nop2	
  3578  0013CE  0100               	movlb	0	; () banked
  3579  0013D0  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3580  0013D2  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3581  0013D4  D7E8               	goto	l6992
  3582  0013D6                     l7002:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;sort.c: 159: else{
  3586                           ;sort.c: 160: for(int i = 0; i<2500; i++){
  3587  0013D6  0E00               	movlw	0
  3588  0013D8  0100               	movlb	0	; () banked
  3589  0013DA  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3590  0013DC  0E00               	movlw	0
  3591  0013DE  6FBC               	movwf	Loading@i_1107& (0+255),b
  3592  0013E0                     l7004:
  3593                           
  3594                           ; BSR set to: 0
  3595  0013E0  0100               	movlb	0	; () banked
  3596  0013E2  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3597  0013E4  D008               	goto	l761
  3598  0013E6  0EC4               	movlw	196
  3599  0013E8  0100               	movlb	0	; () banked
  3600  0013EA  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3601  0013EC  0E09               	movlw	9
  3602  0013EE  0100               	movlb	0	; () banked
  3603  0013F0  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3604  0013F2  B0D8               	btfsc	status,0,c
  3605  0013F4  D00D               	goto	l7014
  3606  0013F6                     l761:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3610  0013F6  8889               	bsf	3977,4,c	;volatile
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3614  0013F8  0E9A               	movlw	154
  3615  0013FA                     u8317:
  3616  0013FA  2EE8               	decfsz	wreg,f,c
  3617  0013FC  D7FE               	bra	u8317
  3618  0013FE  D000               	nop2	
  3619                           
  3620                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3621  001400  9889               	bcf	3977,4,c	;volatile
  3622                           
  3623                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3624  001402  0E70               	movlw	112
  3625  001404                     u8327:
  3626  001404  2EE8               	decfsz	wreg,f,c
  3627  001406  D7FE               	bra	u8327
  3628  001408  0100               	movlb	0	; () banked
  3629  00140A  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3630  00140C  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3631  00140E  D7E8               	goto	l7004
  3632  001410                     l7014:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;sort.c: 165: }
  3636                           ;sort.c: 166: }
  3637                           ;sort.c: 167: }
  3638                           ;sort.c: 169: _delay((unsigned long)((350)*(32000000/4000.0)));
  3639  001410  0E0F               	movlw	15
  3640  001412  0100               	movlb	0	; () banked
  3641  001414  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3642  001416  0E35               	movlw	53
  3643  001418  0100               	movlb	0	; () banked
  3644  00141A  6FB1               	movwf	??_Loading& (0+255),b
  3645  00141C  0E51               	movlw	81
  3646  00141E                     u8337:
  3647  00141E  2EE8               	decfsz	wreg,f,c
  3648  001420  D7FE               	bra	u8337
  3649  001422  2FB1               	decfsz	??_Loading& (0+255),f,b
  3650  001424  D7FC               	bra	u8337
  3651  001426  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3652  001428  D7FA               	bra	u8337
  3653                           
  3654                           ;sort.c: 171: int j = 1;
  3655  00142A  0E00               	movlw	0
  3656  00142C  0100               	movlb	0	; () banked
  3657  00142E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3658  001430  0E01               	movlw	1
  3659  001432  6FC0               	movwf	Loading@j& (0+255),b
  3660                           
  3661                           ;sort.c: 172: while(IR_signal == 1){
  3662  001434  D0CC               	goto	l7088
  3663  001436                     l7018:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 173: readIR();
  3667  001436  ECA4  F024         	call	_readIR	;wreg free
  3668                           
  3669                           ;sort.c: 174: if(IR_signal==1){
  3670  00143A  0100               	movlb	0	; () banked
  3671  00143C  05DE               	decf	_IR_signal& (0+255),w,b
  3672  00143E  0100               	movlb	0	; () banked
  3673  001440  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3674  001442  A4D8               	btfss	status,2,c
  3675  001444  D0C4               	goto	l7088
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3679  001446  0E0F               	movlw	15
  3680  001448  0100               	movlb	0	; () banked
  3681  00144A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3682  00144C  0E35               	movlw	53
  3683  00144E  0100               	movlb	0	; () banked
  3684  001450  6FB1               	movwf	??_Loading& (0+255),b
  3685  001452  0E51               	movlw	81
  3686  001454                     u8347:
  3687  001454  2EE8               	decfsz	wreg,f,c
  3688  001456  D7FE               	bra	u8347
  3689  001458  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  00145A  D7FC               	bra	u8347
  3691  00145C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3692  00145E  D7FA               	bra	u8347
  3693                           
  3694                           ;sort.c: 176: readIR();
  3695  001460  ECA4  F024         	call	_readIR	;wreg free
  3696                           
  3697                           ;sort.c: 177: if(IR_signal==1){
  3698  001464  0100               	movlb	0	; () banked
  3699  001466  05DE               	decf	_IR_signal& (0+255),w,b
  3700  001468  0100               	movlb	0	; () banked
  3701  00146A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3702  00146C  A4D8               	btfss	status,2,c
  3703  00146E  D08A               	goto	l7074
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;sort.c: 178: if(sensor_outputs[0]){
  3707  001470  0100               	movlb	0	; () banked
  3708  001472  51DA               	movf	_sensor_outputs& (0+255),w,b
  3709  001474  0100               	movlb	0	; () banked
  3710  001476  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3711  001478  B4D8               	btfsc	status,2,c
  3712  00147A  D011               	goto	l7036
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 179: LATAbits.LATA4 = 1;
  3716  00147C  8889               	bsf	3977,4,c	;volatile
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 180: _delay((unsigned long)((250)*(32000000/4000.0)));
  3720  00147E  0E0B               	movlw	11
  3721  001480  0100               	movlb	0	; () banked
  3722  001482  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3723  001484  0E26               	movlw	38
  3724  001486  0100               	movlb	0	; () banked
  3725  001488  6FB1               	movwf	??_Loading& (0+255),b
  3726  00148A  0E5D               	movlw	93
  3727  00148C                     u8357:
  3728  00148C  2EE8               	decfsz	wreg,f,c
  3729  00148E  D7FE               	bra	u8357
  3730  001490  2FB1               	decfsz	??_Loading& (0+255),f,b
  3731  001492  D7FC               	bra	u8357
  3732  001494  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3733  001496  D7FA               	bra	u8357
  3734  001498  D000               	nop2	
  3735                           
  3736                           ;sort.c: 181: LATAbits.LATA4 = 0;
  3737  00149A  9889               	bcf	3977,4,c	;volatile
  3738                           
  3739                           ;sort.c: 182: }
  3740  00149C  D073               	goto	l7074
  3741  00149E                     l7036:
  3742                           
  3743                           ;sort.c: 183: else{
  3744                           ;sort.c: 184: for(int i = 0; i<2500; i++){
  3745  00149E  0E00               	movlw	0
  3746  0014A0  0100               	movlb	0	; () banked
  3747  0014A2  6FBF               	movwf	(Loading@i_1109+1)& (0+255),b
  3748  0014A4  0E00               	movlw	0
  3749  0014A6  6FBE               	movwf	Loading@i_1109& (0+255),b
  3750  0014A8                     l7038:
  3751                           
  3752                           ; BSR set to: 0
  3753  0014A8  0100               	movlb	0	; () banked
  3754  0014AA  BFBF               	btfsc	(Loading@i_1109+1)& (0+255),7,b
  3755  0014AC  D04C               	goto	l7068
  3756  0014AE  0EC4               	movlw	196
  3757  0014B0  0100               	movlb	0	; () banked
  3758  0014B2  5DBE               	subwf	Loading@i_1109& (0+255),w,b
  3759  0014B4  0E09               	movlw	9
  3760  0014B6  0100               	movlb	0	; () banked
  3761  0014B8  59BF               	subwfb	(Loading@i_1109+1)& (0+255),w,b
  3762  0014BA  B0D8               	btfsc	status,0,c
  3763  0014BC  D063               	goto	l7074
  3764  0014BE  D043               	goto	l7068
  3765  0014C0                     l772:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;sort.c: 187: LATAbits.LATA4 = 1;
  3769  0014C0  8889               	bsf	3977,4,c	;volatile
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;sort.c: 188: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3773  0014C2  0EC8               	movlw	200
  3774  0014C4                     u8367:
  3775  0014C4  2EE8               	decfsz	wreg,f,c
  3776  0014C6  D7FE               	bra	u8367
  3777                           
  3778                           ;sort.c: 189: LATAbits.LATA4 = 0;
  3779  0014C8  9889               	bcf	3977,4,c	;volatile
  3780                           
  3781                           ;sort.c: 190: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3782  0014CA  0E42               	movlw	66
  3783  0014CC                     u8377:
  3784  0014CC  2EE8               	decfsz	wreg,f,c
  3785  0014CE  D7FE               	bra	u8377
  3786  0014D0  D01C               	goto	L2
  3787  0014D2                     l774:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3791  0014D2  8889               	bsf	3977,4,c	;volatile
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;sort.c: 194: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3795  0014D4  0ED5               	movlw	213
  3796  0014D6                     u8387:
  3797  0014D6  2EE8               	decfsz	wreg,f,c
  3798  0014D8  D7FE               	bra	u8387
  3799  0014DA  F000               	nop	
  3800                           
  3801                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3802  0014DC  9889               	bcf	3977,4,c	;volatile
  3803                           
  3804                           ;sort.c: 196: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3805  0014DE  0E35               	movlw	53
  3806  0014E0                     u8397:
  3807  0014E0  2EE8               	decfsz	wreg,f,c
  3808  0014E2  D7FE               	bra	u8397
  3809  0014E4  D01D               	goto	L3
  3810  0014E6                     l775:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;sort.c: 199: LATAbits.LATA4 = 1;
  3814  0014E6  8889               	bsf	3977,4,c	;volatile
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;sort.c: 200: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3818  0014E8  0EE2               	movlw	226
  3819  0014EA                     u8407:
  3820  0014EA  2EE8               	decfsz	wreg,f,c
  3821  0014EC  D7FE               	bra	u8407
  3822  0014EE  D000               	nop2	
  3823                           
  3824                           ;sort.c: 201: LATAbits.LATA4 = 0;
  3825  0014F0  9889               	bcf	3977,4,c	;volatile
  3826                           
  3827                           ;sort.c: 202: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3828  0014F2  0E28               	movlw	40
  3829  0014F4                     u8417:
  3830  0014F4  2EE8               	decfsz	wreg,f,c
  3831  0014F6  D7FE               	bra	u8417
  3832                           
  3833                           ;sort.c: 203: break;
  3834  0014F8  D041               	goto	l7070
  3835  0014FA                     l776:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;sort.c: 205: LATAbits.LATA4 = 1;
  3839  0014FA  8889               	bsf	3977,4,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;sort.c: 206: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3843  0014FC  0EF0               	movlw	240
  3844  0014FE                     u8427:
  3845  0014FE  2EE8               	decfsz	wreg,f,c
  3846  001500  D7FE               	bra	u8427
  3847                           
  3848                           ;sort.c: 207: LATAbits.LATA4 = 0;
  3849  001502  9889               	bcf	3977,4,c	;volatile
  3850                           
  3851                           ;sort.c: 208: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3852  001504  0E1A               	movlw	26
  3853  001506                     u8437:
  3854  001506  2EE8               	decfsz	wreg,f,c
  3855  001508  D7FE               	bra	u8437
  3856  00150A                     L2:
  3857  00150A  D000               	nop2	
  3858                           
  3859                           ;sort.c: 209: break;
  3860  00150C  D037               	goto	l7070
  3861  00150E                     l777:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 211: LATAbits.LATA4 = 1;
  3865  00150E  8889               	bsf	3977,4,c	;volatile
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 212: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3869  001510  0EFD               	movlw	253
  3870  001512                     u8447:
  3871  001512  2EE8               	decfsz	wreg,f,c
  3872  001514  D7FE               	bra	u8447
  3873  001516  F000               	nop	
  3874                           
  3875                           ;sort.c: 213: LATAbits.LATA4 = 0;
  3876  001518  9889               	bcf	3977,4,c	;volatile
  3877                           
  3878                           ;sort.c: 214: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3879  00151A  0E0D               	movlw	13
  3880  00151C                     u8457:
  3881  00151C  2EE8               	decfsz	wreg,f,c
  3882  00151E  D7FE               	bra	u8457
  3883  001520                     L3:
  3884  001520  F000               	nop	
  3885                           
  3886                           ;sort.c: 215: break;
  3887  001522  D02C               	goto	l7070
  3888  001524                     l778:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 217: LATAbits.LATA4 = 1;
  3892  001524  8889               	bsf	3977,4,c	;volatile
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;sort.c: 218: _delay((unsigned long)((25)*(32000000/4000.0)));
  3896  001526  0E02               	movlw	2
  3897  001528  0100               	movlb	0	; () banked
  3898  00152A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3899  00152C  0E04               	movlw	4
  3900  00152E  0100               	movlb	0	; () banked
  3901  001530  6FB1               	movwf	??_Loading& (0+255),b
  3902  001532  0EBA               	movlw	186
  3903  001534                     u8467:
  3904  001534  2EE8               	decfsz	wreg,f,c
  3905  001536  D7FE               	bra	u8467
  3906  001538  2FB1               	decfsz	??_Loading& (0+255),f,b
  3907  00153A  D7FC               	bra	u8467
  3908  00153C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3909  00153E  D7FA               	bra	u8467
  3910  001540  F000               	nop	
  3911                           
  3912                           ;sort.c: 219: LATAbits.LATA4 = 0;
  3913  001542  9889               	bcf	3977,4,c	;volatile
  3914                           
  3915                           ;sort.c: 221: }
  3916                           
  3917                           ;sort.c: 220: break;
  3918  001544  D01B               	goto	l7070
  3919  001546                     l7068:
  3920  001546  C0C0  F0B1         	movff	Loading@j,??_Loading
  3921  00154A  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3922                           
  3923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 1, Range of values is 0 to 0
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte            4     3 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930  00154E  0100               	movlb	0	; () banked
  3931  001550  51B2               	movf	(??_Loading+1)& (0+255),w,b
  3932  001552  0A00               	xorlw	0	; case 0
  3933  001554  A4D8               	btfss	status,2,c
  3934  001556  D7E6               	goto	l778
  3935                           
  3936                           ; BSR set to: 0
  3937                           ; Switch size 1, requested type "space"
  3938                           ; Number of cases is 5, Range of values is 1 to 5
  3939                           ; switch strategies available:
  3940                           ; Name         Instructions Cycles
  3941                           ; simple_byte           16     9 (average)
  3942                           ;	Chosen strategy is simple_byte
  3943  001558  0100               	movlb	0	; () banked
  3944  00155A  51B1               	movf	??_Loading& (0+255),w,b
  3945  00155C  0A01               	xorlw	1	; case 1
  3946  00155E  B4D8               	btfsc	status,2,c
  3947  001560  D7AF               	goto	l772
  3948  001562  0A03               	xorlw	3	; case 2
  3949  001564  B4D8               	btfsc	status,2,c
  3950  001566  D7B5               	goto	l774
  3951  001568  0A01               	xorlw	1	; case 3
  3952  00156A  B4D8               	btfsc	status,2,c
  3953  00156C  D7BC               	goto	l775
  3954  00156E  0A07               	xorlw	7	; case 4
  3955  001570  B4D8               	btfsc	status,2,c
  3956  001572  D7C3               	goto	l776
  3957  001574  0A01               	xorlw	1	; case 5
  3958  001576  B4D8               	btfsc	status,2,c
  3959  001578  D7CA               	goto	l777
  3960  00157A  D7D4               	goto	l778
  3961  00157C                     l7070:
  3962  00157C  0100               	movlb	0	; () banked
  3963  00157E  4BBE               	infsnz	Loading@i_1109& (0+255),f,b
  3964  001580  2BBF               	incf	(Loading@i_1109+1)& (0+255),f,b
  3965  001582  D792               	goto	l7038
  3966  001584                     l7074:
  3967                           
  3968                           ;sort.c: 222: }
  3969                           ;sort.c: 223: }
  3970                           ;sort.c: 224: }
  3971                           ;sort.c: 225: if(IR_signal==1){
  3972  001584  0100               	movlb	0	; () banked
  3973  001586  05DE               	decf	_IR_signal& (0+255),w,b
  3974  001588  0100               	movlb	0	; () banked
  3975  00158A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3976  00158C  A4D8               	btfss	status,2,c
  3977  00158E  D01C               	goto	l7086
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;sort.c: 226: if(j == 10){
  3981  001590  0E0A               	movlw	10
  3982  001592  0100               	movlb	0	; () banked
  3983  001594  19C0               	xorwf	Loading@j& (0+255),w,b
  3984  001596  0100               	movlb	0	; () banked
  3985  001598  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3986  00159A  A4D8               	btfss	status,2,c
  3987  00159C  D015               	goto	l7086
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;sort.c: 227: LATAbits.LATA5 = 1;
  3991  00159E  8A89               	bsf	3977,5,c	;volatile
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;sort.c: 228: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3995  0015A0  0ECB               	movlw	203
  3996  0015A2  0100               	movlb	0	; () banked
  3997  0015A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3998  0015A6  0EEC               	movlw	236
  3999  0015A8  0100               	movlb	0	; () banked
  4000  0015AA  6FB1               	movwf	??_Loading& (0+255),b
  4001  0015AC  0E84               	movlw	132
  4002  0015AE                     u8477:
  4003  0015AE  2EE8               	decfsz	wreg,f,c
  4004  0015B0  D7FE               	bra	u8477
  4005  0015B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4006  0015B4  D7FC               	bra	u8477
  4007  0015B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4008  0015B8  D7FA               	bra	u8477
  4009  0015BA  F000               	nop	
  4010                           
  4011                           ;sort.c: 229: LATAbits.LATA5 = 0;
  4012  0015BC  9A89               	bcf	3977,5,c	;volatile
  4013                           
  4014                           ;sort.c: 230: j = 0;
  4015  0015BE  0E00               	movlw	0
  4016  0015C0  0100               	movlb	0	; () banked
  4017  0015C2  6FC1               	movwf	(Loading@j+1)& (0+255),b
  4018  0015C4  0E00               	movlw	0
  4019  0015C6  6FC0               	movwf	Loading@j& (0+255),b
  4020  0015C8                     l7086:
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;sort.c: 231: }
  4024                           ;sort.c: 232: }
  4025                           ;sort.c: 233: j++;
  4026  0015C8  0100               	movlb	0	; () banked
  4027  0015CA  4BC0               	infsnz	Loading@j& (0+255),f,b
  4028  0015CC  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4029  0015CE                     l7088:
  4030                           
  4031                           ; BSR set to: 0
  4032  0015CE  0100               	movlb	0	; () banked
  4033  0015D0  05DE               	decf	_IR_signal& (0+255),w,b
  4034  0015D2  0100               	movlb	0	; () banked
  4035  0015D4  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4036  0015D6  B4D8               	btfsc	status,2,c
  4037  0015D8  D72E               	goto	l7018
  4038  0015DA                     l7090:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 234: }
  4042                           ;sort.c: 235: }
  4043                           ;sort.c: 236: }
  4044                           ;sort.c: 237: f_can_coming_to_ID = 1;
  4045  0015DA  0E00               	movlw	0
  4046  0015DC  6E68               	movwf	_f_can_coming_to_ID+1,c
  4047  0015DE  0E01               	movlw	1
  4048  0015E0  6E67               	movwf	_f_can_coming_to_ID,c
  4049                           
  4050                           ; BSR set to: 0
  4051                           
  4052                           ; BSR set to: 0
  4053  0015E2  0012               	return	
  4054  0015E4                     __end_of_Loading:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _initSortTimer *****************
  4069 ;; Defined at:
  4070 ;;		line 400 in file "sort.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;		None
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  i               2    8[BANK0 ] int 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;Total ram usage:        5 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:   10
  4091 ;; This function calls:
  4092 ;;		_getRTC
  4093 ;; This function is called by:
  4094 ;;		_Loading
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text4
  4099  00405E                     __ptext4:
  4100                           	opt stack 0
  4101  00405E                     _initSortTimer:
  4102                           	opt stack 18
  4103                           
  4104                           ;sort.c: 402: getRTC();
  4105                           
  4106                           ;incstack = 0
  4107  00405E  EC1B  F021         	call	_getRTC	;wreg free
  4108                           
  4109                           ;sort.c: 403: for(int i = 0; i < 7; i++){
  4110  004062  0E00               	movlw	0
  4111  004064  0100               	movlb	0	; () banked
  4112  004066  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4113  004068  0E00               	movlw	0
  4114  00406A  6F88               	movwf	initSortTimer@i& (0+255),b
  4115  00406C                     l6496:
  4116                           
  4117                           ; BSR set to: 0
  4118  00406C  0100               	movlb	0	; () banked
  4119  00406E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4120  004070  D008               	goto	l6500
  4121  004072  0100               	movlb	0	; () banked
  4122  004074  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4123  004076  E140               	bnz	l6506
  4124  004078  0E07               	movlw	7
  4125  00407A  0100               	movlb	0	; () banked
  4126  00407C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4127  00407E  B0D8               	btfsc	status,0,c
  4128  004080  D03B               	goto	l6506
  4129  004082                     l6500:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;sort.c: 404: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4133  004082  0E24               	movlw	low _time
  4134  004084  0100               	movlb	0	; () banked
  4135  004086  2588               	addwf	initSortTimer@i& (0+255),w,b
  4136  004088  6ED9               	movwf	fsr2l,c
  4137  00408A  0E01               	movlw	high _time
  4138  00408C  0100               	movlb	0	; () banked
  4139  00408E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4140  004090  6EDA               	movwf	fsr2h,c
  4141  004092  50DF               	movf	indf2,w,c
  4142  004094  0100               	movlb	0	; () banked
  4143  004096  6F85               	movwf	??_initSortTimer& (0+255),b
  4144  004098  0100               	movlb	0	; () banked
  4145  00409A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4146  00409C  0E0F               	movlw	15
  4147  00409E  1785               	andwf	??_initSortTimer& (0+255),f,b
  4148  0040A0  0E0F               	movlw	15
  4149  0040A2  0100               	movlb	0	; () banked
  4150  0040A4  1785               	andwf	??_initSortTimer& (0+255),f,b
  4151  0040A6  0100               	movlb	0	; () banked
  4152  0040A8  5185               	movf	??_initSortTimer& (0+255),w,b
  4153  0040AA  0D0A               	mullw	10
  4154  0040AC  0E24               	movlw	low _time
  4155  0040AE  0100               	movlb	0	; () banked
  4156  0040B0  2588               	addwf	initSortTimer@i& (0+255),w,b
  4157  0040B2  6ED9               	movwf	fsr2l,c
  4158  0040B4  0E01               	movlw	high _time
  4159  0040B6  0100               	movlb	0	; () banked
  4160  0040B8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4161  0040BA  6EDA               	movwf	fsr2h,c
  4162  0040BC  50DF               	movf	indf2,w,c
  4163  0040BE  0B0F               	andlw	15
  4164  0040C0  0100               	movlb	0	; () banked
  4165  0040C2  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4166  0040C4  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4167  0040C6  50F3               	movf	prodl,w,c
  4168  0040C8  0100               	movlb	0	; () banked
  4169  0040CA  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4170  0040CC  50F4               	movf	prodh,w,c
  4171  0040CE  0100               	movlb	0	; () banked
  4172  0040D0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4173  0040D2  90D8               	bcf	status,0,c
  4174  0040D4  0100               	movlb	0	; () banked
  4175  0040D6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4176  0040D8  6ED9               	movwf	fsr2l,c
  4177  0040DA  0100               	movlb	0	; () banked
  4178  0040DC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4179  0040DE  6EDA               	movwf	fsr2h,c
  4180  0040E0  0E0E               	movlw	low _startTime
  4181  0040E2  26D9               	addwf	fsr2l,f,c
  4182  0040E4  0E01               	movlw	high _startTime
  4183  0040E6  22DA               	addwfc	fsr2h,f,c
  4184  0040E8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4185  0040EC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4186                           
  4187                           ; BSR set to: 0
  4188  0040F0  0100               	movlb	0	; () banked
  4189  0040F2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4190  0040F4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4191  0040F6  D7BA               	goto	l6496
  4192  0040F8                     l6506:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 405: }
  4196                           ;sort.c: 407: T0CON = 0b00010111;
  4197  0040F8  0E17               	movlw	23
  4198  0040FA  6ED5               	movwf	4053,c	;volatile
  4199                           
  4200                           ;sort.c: 416: TMR0H = 0b10000101;
  4201  0040FC  0E85               	movlw	133
  4202  0040FE  6ED7               	movwf	4055,c	;volatile
  4203                           
  4204                           ;sort.c: 417: TMR0L = 0b11101110;
  4205  004100  0EEE               	movlw	238
  4206  004102  6ED6               	movwf	4054,c	;volatile
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;sort.c: 418: TMR0ON = 1;
  4210  004104  8ED5               	bsf	4053,7,c	;volatile
  4211                           
  4212                           ; BSR set to: 0
  4213  004106  0012               	return		;funcret
  4214  004108                     __end_of_initSortTimer:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _initGlobalVars *****************
  4234 ;; Defined at:
  4235 ;;		line 377 in file "sort.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    7
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_Loading
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text5
  4264  0043C4                     __ptext5:
  4265                           	opt stack 0
  4266  0043C4                     _initGlobalVars:
  4267                           	opt stack 21
  4268                           
  4269                           ;sort.c: 379: first = 0;
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;incstack = 0
  4273  0043C4  0E00               	movlw	0
  4274  0043C6  6E6E               	movwf	_first+1,c
  4275  0043C8  0E00               	movlw	0
  4276  0043CA  6E6D               	movwf	_first,c
  4277                           
  4278                           ;sort.c: 382: f_loadingNewCan = 0;
  4279  0043CC  0E00               	movlw	0
  4280  0043CE  0100               	movlb	0	; () banked
  4281  0043D0  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4282  0043D2  0E00               	movlw	0
  4283  0043D4  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4284                           
  4285                           ;sort.c: 383: f_lastCan = 0;
  4286  0043D6  0E00               	movlw	0
  4287  0043D8  0100               	movlb	0	; () banked
  4288  0043DA  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  4289  0043DC  0E00               	movlw	0
  4290  0043DE  6FE8               	movwf	_f_lastCan& (0+255),b
  4291                           
  4292                           ;sort.c: 384: f_ID_receive = 1;
  4293  0043E0  0E00               	movlw	0
  4294  0043E2  6E66               	movwf	_f_ID_receive+1,c
  4295  0043E4  0E01               	movlw	1
  4296  0043E6  6E65               	movwf	_f_ID_receive,c
  4297                           
  4298                           ;sort.c: 385: f_can_coming_to_ID = 0;
  4299  0043E8  0E00               	movlw	0
  4300  0043EA  6E68               	movwf	_f_can_coming_to_ID+1,c
  4301  0043EC  0E00               	movlw	0
  4302  0043EE  6E67               	movwf	_f_can_coming_to_ID,c
  4303                           
  4304                           ;sort.c: 386: f_can_coming_to_distribution = 0;
  4305  0043F0  0E00               	movlw	0
  4306  0043F2  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4307  0043F4  0E00               	movlw	0
  4308  0043F6  6E69               	movwf	_f_can_coming_to_distribution,c
  4309                           
  4310                           ;sort.c: 387: f_can_distributed = 0;
  4311  0043F8  0E00               	movlw	0
  4312  0043FA  0101               	movlb	1	; () banked
  4313  0043FC  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4314  0043FE  0E00               	movlw	0
  4315  004400  6F2F               	movwf	_f_can_distributed& (0+255),b
  4316                           
  4317                           ;sort.c: 388: f_most_recent_sort_time = 0;
  4318  004402  0E00               	movlw	0
  4319  004404  6E6C               	movwf	_f_most_recent_sort_time+1,c
  4320  004406  0E00               	movlw	0
  4321  004408  6E6B               	movwf	_f_most_recent_sort_time,c
  4322                           
  4323                           ;sort.c: 391: count_total = 0;
  4324  00440A  0E00               	movlw	0
  4325  00440C  0100               	movlb	0	; () banked
  4326  00440E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4327  004410  0E00               	movlw	0
  4328  004412  6FFE               	movwf	_count_total& (0+255),b
  4329                           
  4330                           ;sort.c: 392: count_pop_no_tab = 0;
  4331  004414  0E00               	movlw	0
  4332  004416  6E5C               	movwf	_count_pop_no_tab+1,c
  4333  004418  0E00               	movlw	0
  4334  00441A  6E5B               	movwf	_count_pop_no_tab,c
  4335                           
  4336                           ;sort.c: 393: count_pop_w_tab = 0;
  4337  00441C  0E00               	movlw	0
  4338  00441E  6E5E               	movwf	_count_pop_w_tab+1,c
  4339  004420  0E00               	movlw	0
  4340  004422  6E5D               	movwf	_count_pop_w_tab,c
  4341                           
  4342                           ;sort.c: 394: count_can_w_lab = 0;
  4343  004424  0E00               	movlw	0
  4344  004426  0101               	movlb	1	; () banked
  4345  004428  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4346  00442A  0E00               	movlw	0
  4347  00442C  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4348                           
  4349                           ;sort.c: 395: count_can_no_lab = 0;
  4350  00442E  0E00               	movlw	0
  4351  004430  0101               	movlb	1	; () banked
  4352  004432  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4353  004434  0E00               	movlw	0
  4354  004436  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4355                           
  4356                           ;sort.c: 398: most_recent_sort_time = 999;
  4357  004438  0E03               	movlw	3
  4358  00443A  0101               	movlb	1	; () banked
  4359  00443C  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4360  00443E  0EE7               	movlw	231
  4361  004440  6F33               	movwf	_most_recent_sort_time& (0+255),b
  4362                           
  4363                           ; BSR set to: 1
  4364  004442  0012               	return		;funcret
  4365  004444                     __end_of_initGlobalVars:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           postdec1	equ	0xFE5
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _getMAG *****************
  4385 ;; Defined at:
  4386 ;;		line 479 in file "sort.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;Total ram usage:        2 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    9
  4407 ;; This function calls:
  4408 ;;		_readMAG
  4409 ;; This function is called by:
  4410 ;;		_Loading
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text6
  4415  004B44                     __ptext6:
  4416                           	opt stack 0
  4417  004B44                     _getMAG:
  4418                           	opt stack 19
  4419                           
  4420                           ;sort.c: 480: readMAG();
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;incstack = 0
  4424  004B44  ECCA  F024         	call	_readMAG	;wreg free
  4425                           
  4426                           ;sort.c: 482: if(MAG_signal==1){
  4427  004B48  0100               	movlb	0	; () banked
  4428  004B4A  05E0               	decf	_MAG_signal& (0+255),w,b
  4429  004B4C  0100               	movlb	0	; () banked
  4430  004B4E  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4431  004B50  A4D8               	btfss	status,2,c
  4432  004B52  0012               	return	
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000.0)));
  4436  004B54  0E15               	movlw	21
  4437  004B56  0100               	movlb	0	; () banked
  4438  004B58  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4439  004B5A  0E4B               	movlw	75
  4440  004B5C  0100               	movlb	0	; () banked
  4441  004B5E  6F86               	movwf	??_getMAG& (0+255),b
  4442  004B60  0EBE               	movlw	190
  4443  004B62                     u8487:
  4444  004B62  2EE8               	decfsz	wreg,f,c
  4445  004B64  D7FE               	bra	u8487
  4446  004B66  2F86               	decfsz	??_getMAG& (0+255),f,b
  4447  004B68  D7FC               	bra	u8487
  4448  004B6A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4449  004B6C  D7FA               	bra	u8487
  4450  004B6E  F000               	nop	
  4451                           
  4452                           ;sort.c: 484: readMAG();
  4453  004B70  ECCA  F024         	call	_readMAG	;wreg free
  4454  004B74  0012               	return	
  4455  004B76                     __end_of_getMAG:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1l	equ	0xFE1
  4467                           indf2	equ	0xFDF
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _getIR *****************
  4475 ;; Defined at:
  4476 ;;		line 463 in file "sort.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  i               2    7[BANK0 ] int 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;Total ram usage:        3 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    9
  4497 ;; This function calls:
  4498 ;;		_readIR
  4499 ;; This function is called by:
  4500 ;;		_Loading
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text7
  4505  004532                     __ptext7:
  4506                           	opt stack 0
  4507  004532                     _getIR:
  4508                           	opt stack 19
  4509                           
  4510                           ;sort.c: 464: readIR();
  4511                           
  4512                           ;incstack = 0
  4513  004532  ECA4  F024         	call	_readIR	;wreg free
  4514                           
  4515                           ;sort.c: 465: for(int i = 0; i < 150; i++){
  4516  004536  0E00               	movlw	0
  4517  004538  0100               	movlb	0	; () banked
  4518  00453A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4519  00453C  0E00               	movlw	0
  4520  00453E  6F87               	movwf	getIR@i& (0+255),b
  4521  004540                     l6588:
  4522                           
  4523                           ; BSR set to: 0
  4524  004540  0100               	movlb	0	; () banked
  4525  004542  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4526  004544  D008               	goto	l6592
  4527  004546  0100               	movlb	0	; () banked
  4528  004548  5188               	movf	(getIR@i+1)& (0+255),w,b
  4529  00454A  E11A               	bnz	l6604
  4530  00454C  0E96               	movlw	150
  4531  00454E  0100               	movlb	0	; () banked
  4532  004550  5D87               	subwf	getIR@i& (0+255),w,b
  4533  004552  B0D8               	btfsc	status,0,c
  4534  004554  D015               	goto	l6604
  4535  004556                     l6592:
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;sort.c: 466: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4539  004556  0E06               	movlw	6
  4540  004558  0100               	movlb	0	; () banked
  4541  00455A  6F86               	movwf	??_getIR& (0+255),b
  4542  00455C  0E30               	movlw	48
  4543  00455E                     u8497:
  4544  00455E  2EE8               	decfsz	wreg,f,c
  4545  004560  D7FE               	bra	u8497
  4546  004562  2F86               	decfsz	??_getIR& (0+255),f,b
  4547  004564  D7FC               	bra	u8497
  4548  004566  F000               	nop	
  4549                           
  4550                           ;sort.c: 467: readIR();
  4551  004568  ECA4  F024         	call	_readIR	;wreg free
  4552                           
  4553                           ;sort.c: 468: if(!IR_signal){
  4554  00456C  0100               	movlb	0	; () banked
  4555  00456E  51DE               	movf	_IR_signal& (0+255),w,b
  4556  004570  0100               	movlb	0	; () banked
  4557  004572  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4558  004574  B4D8               	btfsc	status,2,c
  4559  004576  D004               	goto	l6604
  4560                           
  4561                           ; BSR set to: 0
  4562                           
  4563                           ; BSR set to: 0
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;sort.c: 469: break;
  4567  004578  0100               	movlb	0	; () banked
  4568  00457A  4B87               	infsnz	getIR@i& (0+255),f,b
  4569  00457C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4570  00457E  D7E0               	goto	l6588
  4571  004580                     l6604:
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;sort.c: 470: }
  4575                           ;sort.c: 471: }
  4576                           ;sort.c: 472: if(IR_signal==1){
  4577  004580  0100               	movlb	0	; () banked
  4578  004582  05DE               	decf	_IR_signal& (0+255),w,b
  4579  004584  0100               	movlb	0	; () banked
  4580  004586  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4581  004588  A4D8               	btfss	status,2,c
  4582  00458A  D006               	goto	l6608
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;sort.c: 473: f_loadingNewCan = 1;
  4586  00458C  0E00               	movlw	0
  4587  00458E  0100               	movlb	0	; () banked
  4588  004590  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4589  004592  0E01               	movlw	1
  4590  004594  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4591                           
  4592                           ;sort.c: 474: }
  4593  004596  0012               	return	
  4594  004598                     l6608:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;sort.c: 475: else{
  4598                           ;sort.c: 476: f_loadingNewCan = 0;
  4599  004598  0E00               	movlw	0
  4600  00459A  0100               	movlb	0	; () banked
  4601  00459C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4602  00459E  0E00               	movlw	0
  4603  0045A0  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4604  0045A2  0012               	return	
  4605  0045A4                     __end_of_getIR:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           postinc0	equ	0xFEE
  4614                           wreg	equ	0xFE8
  4615                           postdec1	equ	0xFE5
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _readIR *****************
  4625 ;; Defined at:
  4626 ;;		line 23 in file "ADCFunctionality.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  res             2    4[BANK0 ] int 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;Total ram usage:        4 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    8
  4647 ;; This function calls:
  4648 ;;		_readADC
  4649 ;; This function is called by:
  4650 ;;		_Loading
  4651 ;;		_getIR
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text8
  4656  004948                     __ptext8:
  4657                           	opt stack 0
  4658  004948                     _readIR:
  4659                           	opt stack 20
  4660                           
  4661                           ;ADCFunctionality.c: 24: readADC(0);
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;incstack = 0
  4665  004948  0E00               	movlw	0
  4666  00494A  EC07  F027         	call	_readADC
  4667                           
  4668                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4669  00494E  50C3               	movf	4035,w,c	;volatile
  4670  004950  CFC4 F082          	movff	4036,??_readIR	;volatile
  4671  004954  0100               	movlb	0	; () banked
  4672  004956  6B83               	clrf	(??_readIR+1)& (0+255),b
  4673  004958  C082  F083         	movff	??_readIR,??_readIR+1
  4674  00495C  0100               	movlb	0	; () banked
  4675  00495E  6B82               	clrf	??_readIR& (0+255),b
  4676  004960  0100               	movlb	0	; () banked
  4677  004962  1182               	iorwf	??_readIR& (0+255),w,b
  4678  004964  0100               	movlb	0	; () banked
  4679  004966  6F84               	movwf	readIR@res& (0+255),b
  4680  004968  0100               	movlb	0	; () banked
  4681  00496A  5183               	movf	(??_readIR+1)& (0+255),w,b
  4682  00496C  0100               	movlb	0	; () banked
  4683  00496E  6F85               	movwf	(readIR@res+1)& (0+255),b
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4687  004970  0100               	movlb	0	; () banked
  4688  004972  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4689  004974  D00A               	goto	u4360
  4690  004976  0E21               	movlw	33
  4691  004978  0100               	movlb	0	; () banked
  4692  00497A  5D84               	subwf	readIR@res& (0+255),w,b
  4693  00497C  0E03               	movlw	3
  4694  00497E  0100               	movlb	0	; () banked
  4695  004980  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4696  004982  A0D8               	btfss	status,0,c
  4697  004984  D002               	goto	u4360
  4698  004986  0E01               	movlw	1
  4699  004988  D001               	goto	u4370
  4700  00498A                     u4360:
  4701  00498A  0E00               	movlw	0
  4702  00498C                     u4370:
  4703  00498C  0100               	movlb	0	; () banked
  4704  00498E  6FDE               	movwf	_IR_signal& (0+255),b
  4705  004990  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4706                           
  4707                           ; BSR set to: 0
  4708  004992  0012               	return		;funcret
  4709  004994                     __end_of_readIR:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           postinc0	equ	0xFEE
  4718                           wreg	equ	0xFE8
  4719                           postdec1	equ	0xFE5
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _ID *****************
  4729 ;; Defined at:
  4730 ;;		line 241 in file "sort.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  i               2    6[BANK0 ] int 
  4735 ;;  i               2    4[BANK0 ] int 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;Total ram usage:        6 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    8
  4752 ;; This function calls:
  4753 ;;		_delay_ms
  4754 ;; This function is called by:
  4755 ;;		_sort
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text9
  4760  003428                     __ptext9:
  4761                           	opt stack 0
  4762  003428                     _ID:
  4763                           	opt stack 21
  4764                           
  4765                           ;sort.c: 242: if(f_can_coming_to_ID){
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;incstack = 0
  4769  003428  5067               	movf	_f_can_coming_to_ID,w,c
  4770  00342A  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4771  00342C  B4D8               	btfsc	status,2,c
  4772  00342E  0012               	return	
  4773                           
  4774                           ;sort.c: 244: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4775  003430  0E3D               	movlw	61
  4776  003432  0100               	movlb	0	; () banked
  4777  003434  6F83               	movwf	(??_ID+1)& (0+255),b
  4778  003436  0EE1               	movlw	225
  4779  003438  0100               	movlb	0	; () banked
  4780  00343A  6F82               	movwf	??_ID& (0+255),b
  4781  00343C  0E3F               	movlw	63
  4782  00343E                     u8507:
  4783  00343E  2EE8               	decfsz	wreg,f,c
  4784  003440  D7FE               	bra	u8507
  4785  003442  2F82               	decfsz	??_ID& (0+255),f,b
  4786  003444  D7FC               	bra	u8507
  4787  003446  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4788  003448  D7FA               	bra	u8507
  4789  00344A  D000               	nop2	
  4790                           
  4791                           ;sort.c: 246: LATAbits.LATA3 = 1;
  4792  00344C  8689               	bsf	3977,3,c	;volatile
  4793                           
  4794                           ;sort.c: 247: _delay((unsigned long)((600)*(32000000/4000.0)));
  4795  00344E  0E19               	movlw	25
  4796  003450  0100               	movlb	0	; () banked
  4797  003452  6F83               	movwf	(??_ID+1)& (0+255),b
  4798  003454  0E5A               	movlw	90
  4799  003456  0100               	movlb	0	; () banked
  4800  003458  6F82               	movwf	??_ID& (0+255),b
  4801  00345A  0EB1               	movlw	177
  4802  00345C                     u8517:
  4803  00345C  2EE8               	decfsz	wreg,f,c
  4804  00345E  D7FE               	bra	u8517
  4805  003460  2F82               	decfsz	??_ID& (0+255),f,b
  4806  003462  D7FC               	bra	u8517
  4807  003464  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4808  003466  D7FA               	bra	u8517
  4809  003468  D000               	nop2	
  4810                           
  4811                           ;sort.c: 248: sensor_outputs[1] = PORTAbits.RA2;
  4812  00346A  A480               	btfss	3968,2,c	;volatile
  4813  00346C  D004               	goto	u5700
  4814  00346E  0100               	movlb	0	; () banked
  4815  003470  6B82               	clrf	??_ID& (0+255),b
  4816  003472  2B82               	incf	??_ID& (0+255),f,b
  4817  003474  D002               	goto	u5708
  4818  003476                     u5700:
  4819  003476  0100               	movlb	0	; () banked
  4820  003478  6B82               	clrf	??_ID& (0+255),b
  4821  00347A                     u5708:
  4822  00347A  0100               	movlb	0	; () banked
  4823  00347C  5182               	movf	??_ID& (0+255),w,b
  4824  00347E  0100               	movlb	0	; () banked
  4825  003480  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4826  003482  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;sort.c: 256: if(!sensor_outputs[0]){
  4830  003484  0100               	movlb	0	; () banked
  4831  003486  51DA               	movf	_sensor_outputs& (0+255),w,b
  4832  003488  0100               	movlb	0	; () banked
  4833  00348A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4834  00348C  A4D8               	btfss	status,2,c
  4835  00348E  D014               	goto	l7118
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;sort.c: 257: if(!sensor_outputs[1]){
  4839  003490  0100               	movlb	0	; () banked
  4840  003492  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4841  003494  0100               	movlb	0	; () banked
  4842  003496  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4843  003498  A4D8               	btfss	status,2,c
  4844  00349A  D007               	goto	l7114
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;sort.c: 258: count_pop_no_tab++;
  4848  00349C  4A5B               	infsnz	_count_pop_no_tab,f,c
  4849  00349E  2A5C               	incf	_count_pop_no_tab+1,f,c
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;sort.c: 259: cur_can = 0;
  4853  0034A0  0E00               	movlw	0
  4854  0034A2  0100               	movlb	0	; () banked
  4855  0034A4  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4856  0034A6  0E00               	movlw	0
  4857  0034A8  D006               	goto	L4
  4858  0034AA                     l7114:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;sort.c: 261: else{
  4862                           ;sort.c: 262: count_pop_w_tab++;
  4863  0034AA  4A5D               	infsnz	_count_pop_w_tab,f,c
  4864  0034AC  2A5E               	incf	_count_pop_w_tab+1,f,c
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;sort.c: 263: cur_can = 1;
  4868  0034AE  0E00               	movlw	0
  4869  0034B0  0100               	movlb	0	; () banked
  4870  0034B2  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4871  0034B4  0E01               	movlw	1
  4872  0034B6                     L4:
  4873  0034B6  6FE4               	movwf	_cur_can& (0+255),b
  4874  0034B8                     l7118:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;sort.c: 264: }
  4878                           ;sort.c: 265: }
  4879                           ;sort.c: 266: if(sensor_outputs[0]){
  4880  0034B8  0100               	movlb	0	; () banked
  4881  0034BA  51DA               	movf	_sensor_outputs& (0+255),w,b
  4882  0034BC  0100               	movlb	0	; () banked
  4883  0034BE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4884  0034C0  B4D8               	btfsc	status,2,c
  4885  0034C2  D016               	goto	l7130
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;sort.c: 267: if(!sensor_outputs[1]){
  4889  0034C4  0100               	movlb	0	; () banked
  4890  0034C6  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4891  0034C8  0100               	movlb	0	; () banked
  4892  0034CA  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4893  0034CC  A4D8               	btfss	status,2,c
  4894  0034CE  D008               	goto	l7126
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;sort.c: 268: count_can_w_lab++;
  4898  0034D0  0101               	movlb	1	; () banked
  4899  0034D2  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4900  0034D4  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4901                           
  4902                           ; BSR set to: 1
  4903                           ;sort.c: 269: cur_can = 2;
  4904  0034D6  0E00               	movlw	0
  4905  0034D8  0100               	movlb	0	; () banked
  4906  0034DA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4907  0034DC  0E02               	movlw	2
  4908  0034DE  D007               	goto	L5
  4909  0034E0                     l7126:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;sort.c: 271: else{
  4913                           ;sort.c: 272: count_can_no_lab++;
  4914  0034E0  0101               	movlb	1	; () banked
  4915  0034E2  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4916  0034E4  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4917                           
  4918                           ; BSR set to: 1
  4919                           ;sort.c: 273: cur_can = 3;
  4920  0034E6  0E00               	movlw	0
  4921  0034E8  0100               	movlb	0	; () banked
  4922  0034EA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4923  0034EC  0E03               	movlw	3
  4924  0034EE                     L5:
  4925  0034EE  6FE4               	movwf	_cur_can& (0+255),b
  4926  0034F0                     l7130:
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;sort.c: 274: }
  4930                           ;sort.c: 275: }
  4931                           ;sort.c: 276: LATAbits.LATA3 = 0;
  4932  0034F0  9689               	bcf	3977,3,c	;volatile
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 277: _delay((unsigned long)((200)*(32000000/4000.0)));
  4936  0034F2  0E09               	movlw	9
  4937  0034F4  0100               	movlb	0	; () banked
  4938  0034F6  6F83               	movwf	(??_ID+1)& (0+255),b
  4939  0034F8  0E1E               	movlw	30
  4940  0034FA  0100               	movlb	0	; () banked
  4941  0034FC  6F82               	movwf	??_ID& (0+255),b
  4942  0034FE  0EE4               	movlw	228
  4943  003500                     u8527:
  4944  003500  2EE8               	decfsz	wreg,f,c
  4945  003502  D7FE               	bra	u8527
  4946  003504  2F82               	decfsz	??_ID& (0+255),f,b
  4947  003506  D7FC               	bra	u8527
  4948  003508  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4949  00350A  D7FA               	bra	u8527
  4950  00350C  F000               	nop	
  4951                           
  4952                           ;sort.c: 278: LATAbits.LATA3 = 1;
  4953  00350E  8689               	bsf	3977,3,c	;volatile
  4954                           
  4955                           ;sort.c: 281: for(int i=0;i<10000;i++)
  4956  003510  0E00               	movlw	0
  4957  003512  0100               	movlb	0	; () banked
  4958  003514  6F85               	movwf	(ID@i+1)& (0+255),b
  4959  003516  0E00               	movlw	0
  4960  003518  6F84               	movwf	ID@i& (0+255),b
  4961  00351A  0100               	movlb	0	; () banked
  4962  00351C  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4963  00351E  D008               	goto	l791
  4964  003520  0E10               	movlw	16
  4965  003522  0100               	movlb	0	; () banked
  4966  003524  5D84               	subwf	ID@i& (0+255),w,b
  4967  003526  0E27               	movlw	39
  4968  003528  0100               	movlb	0	; () banked
  4969  00352A  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4970  00352C  B0D8               	btfsc	status,0,c
  4971  00352E  D00D               	goto	l792
  4972  003530                     l791:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;sort.c: 282: {
  4976                           ;sort.c: 283: LATCbits.LATC0 = 1;
  4977  003530  808B               	bsf	3979,0,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;sort.c: 284: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4981  003532  0E1A               	movlw	26
  4982  003534                     u8537:
  4983  003534  2EE8               	decfsz	wreg,f,c
  4984  003536  D7FE               	bra	u8537
  4985  003538  D000               	nop2	
  4986                           
  4987                           ;sort.c: 285: LATCbits.LATC0 = 0;
  4988  00353A  908B               	bcf	3979,0,c	;volatile
  4989                           
  4990                           ;sort.c: 286: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4991  00353C  0EF0               	movlw	240
  4992  00353E                     u8547:
  4993  00353E  2EE8               	decfsz	wreg,f,c
  4994  003540  D7FE               	bra	u8547
  4995  003542  0100               	movlb	0	; () banked
  4996  003544  4B84               	infsnz	ID@i& (0+255),f,b
  4997  003546  2B85               	incf	(ID@i+1)& (0+255),f,b
  4998  003548  D7E8               	goto	L6
  4999  00354A                     l792:
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;sort.c: 287: }
  5003                           ;sort.c: 288: LATCbits.LATC0 = 0;
  5004  00354A  908B               	bcf	3979,0,c	;volatile
  5005                           
  5006                           ;sort.c: 290: LATAbits.LATA3 = 0;
  5007  00354C  9689               	bcf	3977,3,c	;volatile
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;sort.c: 294: f_can_coming_to_distribution = 1;
  5011  00354E  0E00               	movlw	0
  5012  003550  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5013  003552  0E01               	movlw	1
  5014  003554  6E69               	movwf	_f_can_coming_to_distribution,c
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;sort.c: 295: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5018  003556  0E3D               	movlw	61
  5019  003558  0100               	movlb	0	; () banked
  5020  00355A  6F83               	movwf	(??_ID+1)& (0+255),b
  5021  00355C  0EE1               	movlw	225
  5022  00355E  0100               	movlb	0	; () banked
  5023  003560  6F82               	movwf	??_ID& (0+255),b
  5024  003562  0E3F               	movlw	63
  5025  003564                     u8557:
  5026  003564  2EE8               	decfsz	wreg,f,c
  5027  003566  D7FE               	bra	u8557
  5028  003568  2F82               	decfsz	??_ID& (0+255),f,b
  5029  00356A  D7FC               	bra	u8557
  5030  00356C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5031  00356E  D7FA               	bra	u8557
  5032  003570  D000               	nop2	
  5033                           
  5034                           ;sort.c: 296: LATCbits.LATC0 = 1;
  5035  003572  808B               	bsf	3979,0,c	;volatile
  5036                           
  5037                           ;sort.c: 299: if(!f_lastCan){
  5038  003574  0100               	movlb	0	; () banked
  5039  003576  51E8               	movf	_f_lastCan& (0+255),w,b
  5040  003578  0100               	movlb	0	; () banked
  5041  00357A  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5042  00357C  A4D8               	btfss	status,2,c
  5043  00357E  D032               	goto	l7168
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;sort.c: 300: for(int i=0; i<46; i++){
  5047  003580  0E00               	movlw	0
  5048  003582  0100               	movlb	0	; () banked
  5049  003584  6F87               	movwf	(ID@i_1120+1)& (0+255),b
  5050  003586  0E00               	movlw	0
  5051  003588  6F86               	movwf	ID@i_1120& (0+255),b
  5052                           
  5053                           ; BSR set to: 0
  5054  00358A  0100               	movlb	0	; () banked
  5055  00358C  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5056  00358E  D008               	goto	l7160
  5057  003590  0100               	movlb	0	; () banked
  5058  003592  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5059  003594  E126               	bnz	l795
  5060  003596  0E2E               	movlw	46
  5061  003598  0100               	movlb	0	; () banked
  5062  00359A  5D86               	subwf	ID@i_1120& (0+255),w,b
  5063  00359C  B0D8               	btfsc	status,0,c
  5064  00359E  D021               	goto	l795
  5065  0035A0                     l7160:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;sort.c: 301: LATAbits.LATA5 = !LATAbits.LATA5;
  5069  0035A0  BA89               	btfsc	3977,5,c	;volatile
  5070  0035A2  D004               	goto	u5790
  5071  0035A4  0100               	movlb	0	; () banked
  5072  0035A6  6B82               	clrf	??_ID& (0+255),b
  5073  0035A8  2B82               	incf	??_ID& (0+255),f,b
  5074  0035AA  D002               	goto	u5808
  5075  0035AC                     u5790:
  5076  0035AC  0100               	movlb	0	; () banked
  5077  0035AE  6B82               	clrf	??_ID& (0+255),b
  5078  0035B0                     u5808:
  5079  0035B0  0100               	movlb	0	; () banked
  5080  0035B2  3B82               	swapf	??_ID& (0+255),f,b
  5081  0035B4  4782               	rlncf	??_ID& (0+255),f,b
  5082  0035B6  5089               	movf	3977,w,c	;volatile
  5083  0035B8  0100               	movlb	0	; () banked
  5084  0035BA  1982               	xorwf	??_ID& (0+255),w,b
  5085  0035BC  0BDF               	andlw	-33
  5086  0035BE  1982               	xorwf	??_ID& (0+255),w,b
  5087  0035C0  6E89               	movwf	3977,c	;volatile
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;sort.c: 302: delay_ms(45-i);
  5091  0035C2  0100               	movlb	0	; () banked
  5092  0035C4  5186               	movf	ID@i_1120& (0+255),w,b
  5093  0035C6  0800               	sublw	0
  5094  0035C8  0F2D               	addlw	45
  5095  0035CA  EC32  F027         	call	_delay_ms
  5096  0035CE  0100               	movlb	0	; () banked
  5097  0035D0  4B86               	infsnz	ID@i_1120& (0+255),f,b
  5098  0035D2  2B87               	incf	(ID@i_1120+1)& (0+255),f,b
  5099                           
  5100                           ; BSR set to: 0
  5101  0035D4  0100               	movlb	0	; () banked
  5102  0035D6  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5103  0035D8  D7E3               	goto	l7160
  5104  0035DA  0100               	movlb	0	; () banked
  5105  0035DC  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5106  0035DE  E101               	bnz	u5810
  5107  0035E0  D7DA               	goto	L7
  5108  0035E2                     u5810:
  5109  0035E2                     l795:
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;sort.c: 303: }
  5113                           ;sort.c: 304: LATAbits.LATA5 = 1;
  5114  0035E2  8A89               	bsf	3977,5,c	;volatile
  5115  0035E4                     l7168:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;sort.c: 305: }
  5119                           ;sort.c: 307: f_can_coming_to_ID = 0;
  5120  0035E4  0E00               	movlw	0
  5121  0035E6  6E68               	movwf	_f_can_coming_to_ID+1,c
  5122  0035E8  0E00               	movlw	0
  5123  0035EA  6E67               	movwf	_f_can_coming_to_ID,c
  5124  0035EC  0012               	return	
  5125  0035EE                     __end_of_ID:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _delay_ms *****************
  5145 ;; Defined at:
  5146 ;;		line 500 in file "sort.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  milliseconds    1    wreg     unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      void 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;Total ram usage:        2 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    7
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_Loading
  5171 ;;		_ID
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text10
  5176  004E64                     __ptext10:
  5177                           	opt stack 0
  5178  004E64                     _delay_ms:
  5179                           	opt stack 21
  5180                           
  5181                           ;incstack = 0
  5182                           ;delay_ms@milliseconds stored from wreg
  5183  004E64  0100               	movlb	0	; () banked
  5184  004E66  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5185                           
  5186                           ;sort.c: 501: while(milliseconds > 0)
  5187  004E68  D00B               	goto	l6568
  5188  004E6A                     l6564:
  5189                           
  5190                           ;sort.c: 502: {
  5191                           ;sort.c: 503: milliseconds--;
  5192  004E6A  0100               	movlb	0	; () banked
  5193  004E6C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;sort.c: 504: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5197  004E6E  0E0B               	movlw	11
  5198  004E70  0100               	movlb	0	; () banked
  5199  004E72  6F80               	movwf	??_delay_ms& (0+255),b
  5200  004E74  0E47               	movlw	71
  5201  004E76                     u8567:
  5202  004E76  2EE8               	decfsz	wreg,f,c
  5203  004E78  D7FE               	bra	u8567
  5204  004E7A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5205  004E7C  D7FC               	bra	u8567
  5206  004E7E  D000               	nop2	
  5207  004E80                     l6568:
  5208  004E80  0100               	movlb	0	; () banked
  5209  004E82  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5210  004E84  0100               	movlb	0	; () banked
  5211  004E86  B4D8               	btfsc	status,2,c
  5212  004E88  0012               	return	
  5213  004E8A  D7EF               	goto	l6564
  5214  004E8C                     __end_of_delay_ms:
  5215                           	opt stack 0
  5216                           tblptru	equ	0xFF8
  5217                           tblptrh	equ	0xFF7
  5218                           tblptrl	equ	0xFF6
  5219                           tablat	equ	0xFF5
  5220                           prodh	equ	0xFF4
  5221                           prodl	equ	0xFF3
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           postdec1	equ	0xFE5
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           postdec2	equ	0xFDD
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _Distribution *****************
  5234 ;; Defined at:
  5235 ;;		line 310 in file "sort.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, status,0, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;Total ram usage:        2 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    8
  5256 ;; This function calls:
  5257 ;;		_updateServoPosition
  5258 ;; This function is called by:
  5259 ;;		_sort
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text11
  5264  002E14                     __ptext11:
  5265                           	opt stack 0
  5266  002E14                     _Distribution:
  5267                           	opt stack 21
  5268                           
  5269                           ;sort.c: 311: if(f_can_coming_to_distribution){
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;incstack = 0
  5273  002E14  5069               	movf	_f_can_coming_to_distribution,w,c
  5274  002E16  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  5275  002E18  B4D8               	btfsc	status,2,c
  5276  002E1A  0012               	return	
  5277  002E1C  D034               	goto	l7184
  5278  002E1E                     l7174:
  5279                           
  5280                           ;sort.c: 321: updateServoPosition(500, 1);
  5281  002E1E  0E01               	movlw	1
  5282  002E20  0100               	movlb	0	; () banked
  5283  002E22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5284  002E24  0EF4               	movlw	244
  5285  002E26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5286  002E28  0E00               	movlw	0
  5287  002E2A  0100               	movlb	0	; () banked
  5288  002E2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5289  002E2E  0E01               	movlw	1
  5290  002E30  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5291  002E32  EC5E  F022         	call	_updateServoPosition	;wreg free
  5292                           
  5293                           ;sort.c: 322: break;
  5294  002E36  D03E               	goto	l7186
  5295  002E38                     l7176:
  5296                           
  5297                           ;sort.c: 324: updateServoPosition(850, 1);
  5298  002E38  0E03               	movlw	3
  5299  002E3A  0100               	movlb	0	; () banked
  5300  002E3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5301  002E3E  0E52               	movlw	82
  5302  002E40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5303  002E42  0E00               	movlw	0
  5304  002E44  0100               	movlb	0	; () banked
  5305  002E46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5306  002E48  0E01               	movlw	1
  5307  002E4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5308  002E4C  EC5E  F022         	call	_updateServoPosition	;wreg free
  5309                           
  5310                           ;sort.c: 325: break;
  5311  002E50  D031               	goto	l7186
  5312  002E52                     l7178:
  5313                           
  5314                           ;sort.c: 327: updateServoPosition(1670, 1);
  5315  002E52  0E06               	movlw	6
  5316  002E54  0100               	movlb	0	; () banked
  5317  002E56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5318  002E58  0E86               	movlw	134
  5319  002E5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5320  002E5C  0E00               	movlw	0
  5321  002E5E  0100               	movlb	0	; () banked
  5322  002E60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5323  002E62  0E01               	movlw	1
  5324  002E64  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5325  002E66  EC5E  F022         	call	_updateServoPosition	;wreg free
  5326                           
  5327                           ;sort.c: 328: break;
  5328  002E6A  D024               	goto	l7186
  5329  002E6C                     l7180:
  5330                           
  5331                           ;sort.c: 330: updateServoPosition(2400, 1);
  5332  002E6C  0E09               	movlw	9
  5333  002E6E  0100               	movlb	0	; () banked
  5334  002E70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5335  002E72  0E60               	movlw	96
  5336  002E74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5337  002E76  0E00               	movlw	0
  5338  002E78  0100               	movlb	0	; () banked
  5339  002E7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5340  002E7C  0E01               	movlw	1
  5341  002E7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5342  002E80  EC5E  F022         	call	_updateServoPosition	;wreg free
  5343                           
  5344                           ;sort.c: 334: }
  5345                           
  5346                           ;sort.c: 333: break;
  5347                           
  5348                           ;sort.c: 332: default:
  5349                           
  5350                           ;sort.c: 331: break;
  5351  002E84  D017               	goto	l7186
  5352  002E86                     l7184:
  5353  002E86  C0E4  F088         	movff	_cur_can,??_Distribution
  5354  002E8A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5355                           
  5356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5357                           ; Switch size 1, requested type "space"
  5358                           ; Number of cases is 1, Range of values is 0 to 0
  5359                           ; switch strategies available:
  5360                           ; Name         Instructions Cycles
  5361                           ; simple_byte            4     3 (average)
  5362                           ;	Chosen strategy is simple_byte
  5363  002E8E  0100               	movlb	0	; () banked
  5364  002E90  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5365  002E92  0A00               	xorlw	0	; case 0
  5366  002E94  A4D8               	btfss	status,2,c
  5367  002E96  D00E               	goto	l7186
  5368                           
  5369                           ; BSR set to: 0
  5370                           ; Switch size 1, requested type "space"
  5371                           ; Number of cases is 4, Range of values is 0 to 3
  5372                           ; switch strategies available:
  5373                           ; Name         Instructions Cycles
  5374                           ; simple_byte           13     7 (average)
  5375                           ;	Chosen strategy is simple_byte
  5376  002E98  0100               	movlb	0	; () banked
  5377  002E9A  5188               	movf	??_Distribution& (0+255),w,b
  5378  002E9C  0A00               	xorlw	0	; case 0
  5379  002E9E  B4D8               	btfsc	status,2,c
  5380  002EA0  D7BE               	goto	l7174
  5381  002EA2  0A01               	xorlw	1	; case 1
  5382  002EA4  B4D8               	btfsc	status,2,c
  5383  002EA6  D7C8               	goto	l7176
  5384  002EA8  0A03               	xorlw	3	; case 2
  5385  002EAA  B4D8               	btfsc	status,2,c
  5386  002EAC  D7D2               	goto	l7178
  5387  002EAE  0A01               	xorlw	1	; case 3
  5388  002EB0  B4D8               	btfsc	status,2,c
  5389  002EB2  D7DC               	goto	l7180
  5390  002EB4                     l7186:
  5391                           
  5392                           ;sort.c: 335: updateServoPosition(1050, 3);
  5393  002EB4  0E04               	movlw	4
  5394  002EB6  0100               	movlb	0	; () banked
  5395  002EB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5396  002EBA  0E1A               	movlw	26
  5397  002EBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5398  002EBE  0E00               	movlw	0
  5399  002EC0  0100               	movlb	0	; () banked
  5400  002EC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5401  002EC4  0E03               	movlw	3
  5402  002EC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5403  002EC8  EC5E  F022         	call	_updateServoPosition	;wreg free
  5404                           
  5405                           ;sort.c: 336: _delay((unsigned long)((750)*(32000000/4000.0)));
  5406  002ECC  0E1F               	movlw	31
  5407  002ECE  0100               	movlb	0	; () banked
  5408  002ED0  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5409  002ED2  0E71               	movlw	113
  5410  002ED4  0100               	movlb	0	; () banked
  5411  002ED6  6F88               	movwf	??_Distribution& (0+255),b
  5412  002ED8  0E1E               	movlw	30
  5413  002EDA                     u8577:
  5414  002EDA  2EE8               	decfsz	wreg,f,c
  5415  002EDC  D7FE               	bra	u8577
  5416  002EDE  2F88               	decfsz	??_Distribution& (0+255),f,b
  5417  002EE0  D7FC               	bra	u8577
  5418  002EE2  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5419  002EE4  D7FA               	bra	u8577
  5420  002EE6  F000               	nop	
  5421                           
  5422                           ;sort.c: 344: switch(cur_can){
  5423  002EE8  D034               	goto	l7200
  5424  002EEA                     l7190:
  5425                           
  5426                           ;sort.c: 346: updateServoPosition(1260, 3);
  5427  002EEA  0E04               	movlw	4
  5428  002EEC  0100               	movlb	0	; () banked
  5429  002EEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5430  002EF0  0EEC               	movlw	236
  5431  002EF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5432  002EF4  0E00               	movlw	0
  5433  002EF6  0100               	movlb	0	; () banked
  5434  002EF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5435  002EFA  0E03               	movlw	3
  5436  002EFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5437  002EFE  EC5E  F022         	call	_updateServoPosition	;wreg free
  5438                           
  5439                           ;sort.c: 347: break;
  5440  002F02  D03E               	goto	l7202
  5441  002F04                     l7192:
  5442                           
  5443                           ;sort.c: 349: updateServoPosition(1260, 3);
  5444  002F04  0E04               	movlw	4
  5445  002F06  0100               	movlb	0	; () banked
  5446  002F08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5447  002F0A  0EEC               	movlw	236
  5448  002F0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5449  002F0E  0E00               	movlw	0
  5450  002F10  0100               	movlb	0	; () banked
  5451  002F12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5452  002F14  0E03               	movlw	3
  5453  002F16  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5454  002F18  EC5E  F022         	call	_updateServoPosition	;wreg free
  5455                           
  5456                           ;sort.c: 350: break;
  5457  002F1C  D031               	goto	l7202
  5458  002F1E                     l7194:
  5459                           
  5460                           ;sort.c: 352: updateServoPosition(1390, 3);
  5461  002F1E  0E05               	movlw	5
  5462  002F20  0100               	movlb	0	; () banked
  5463  002F22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5464  002F24  0E6E               	movlw	110
  5465  002F26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5466  002F28  0E00               	movlw	0
  5467  002F2A  0100               	movlb	0	; () banked
  5468  002F2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5469  002F2E  0E03               	movlw	3
  5470  002F30  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5471  002F32  EC5E  F022         	call	_updateServoPosition	;wreg free
  5472                           
  5473                           ;sort.c: 353: break;
  5474  002F36  D024               	goto	l7202
  5475  002F38                     l7196:
  5476                           
  5477                           ;sort.c: 355: updateServoPosition(1390, 3);
  5478  002F38  0E05               	movlw	5
  5479  002F3A  0100               	movlb	0	; () banked
  5480  002F3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5481  002F3E  0E6E               	movlw	110
  5482  002F40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5483  002F42  0E00               	movlw	0
  5484  002F44  0100               	movlb	0	; () banked
  5485  002F46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5486  002F48  0E03               	movlw	3
  5487  002F4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5488  002F4C  EC5E  F022         	call	_updateServoPosition	;wreg free
  5489                           
  5490                           ;sort.c: 359: }
  5491                           
  5492                           ;sort.c: 358: break;
  5493                           
  5494                           ;sort.c: 357: default:
  5495                           
  5496                           ;sort.c: 356: break;
  5497  002F50  D017               	goto	l7202
  5498  002F52                     l7200:
  5499  002F52  C0E4  F088         	movff	_cur_can,??_Distribution
  5500  002F56  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5501                           
  5502                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5503                           ; Switch size 1, requested type "space"
  5504                           ; Number of cases is 1, Range of values is 0 to 0
  5505                           ; switch strategies available:
  5506                           ; Name         Instructions Cycles
  5507                           ; simple_byte            4     3 (average)
  5508                           ;	Chosen strategy is simple_byte
  5509  002F5A  0100               	movlb	0	; () banked
  5510  002F5C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5511  002F5E  0A00               	xorlw	0	; case 0
  5512  002F60  A4D8               	btfss	status,2,c
  5513  002F62  D00E               	goto	l7202
  5514                           
  5515                           ; BSR set to: 0
  5516                           ; Switch size 1, requested type "space"
  5517                           ; Number of cases is 4, Range of values is 0 to 3
  5518                           ; switch strategies available:
  5519                           ; Name         Instructions Cycles
  5520                           ; simple_byte           13     7 (average)
  5521                           ;	Chosen strategy is simple_byte
  5522  002F64  0100               	movlb	0	; () banked
  5523  002F66  5188               	movf	??_Distribution& (0+255),w,b
  5524  002F68  0A00               	xorlw	0	; case 0
  5525  002F6A  B4D8               	btfsc	status,2,c
  5526  002F6C  D7BE               	goto	l7190
  5527  002F6E  0A01               	xorlw	1	; case 1
  5528  002F70  B4D8               	btfsc	status,2,c
  5529  002F72  D7C8               	goto	l7192
  5530  002F74  0A03               	xorlw	3	; case 2
  5531  002F76  B4D8               	btfsc	status,2,c
  5532  002F78  D7D2               	goto	l7194
  5533  002F7A  0A01               	xorlw	1	; case 3
  5534  002F7C  B4D8               	btfsc	status,2,c
  5535  002F7E  D7DC               	goto	l7196
  5536  002F80                     l7202:
  5537                           
  5538                           ;sort.c: 360: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5539  002F80  0E66               	movlw	102
  5540  002F82  0100               	movlb	0	; () banked
  5541  002F84  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5542  002F86  0E76               	movlw	118
  5543  002F88  0100               	movlb	0	; () banked
  5544  002F8A  6F88               	movwf	??_Distribution& (0+255),b
  5545  002F8C  0EC1               	movlw	193
  5546  002F8E                     u8587:
  5547  002F8E  2EE8               	decfsz	wreg,f,c
  5548  002F90  D7FE               	bra	u8587
  5549  002F92  2F88               	decfsz	??_Distribution& (0+255),f,b
  5550  002F94  D7FC               	bra	u8587
  5551  002F96  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5552  002F98  D7FA               	bra	u8587
  5553                           
  5554                           ;sort.c: 363: updateServoPosition(1050, 3);
  5555  002F9A  0E04               	movlw	4
  5556  002F9C  0100               	movlb	0	; () banked
  5557  002F9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5558  002FA0  0E1A               	movlw	26
  5559  002FA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5560  002FA4  0E00               	movlw	0
  5561  002FA6  0100               	movlb	0	; () banked
  5562  002FA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5563  002FAA  0E03               	movlw	3
  5564  002FAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5565  002FAE  EC5E  F022         	call	_updateServoPosition	;wreg free
  5566                           
  5567                           ;sort.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
  5568  002FB2  0E1F               	movlw	31
  5569  002FB4  0100               	movlb	0	; () banked
  5570  002FB6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5571  002FB8  0E71               	movlw	113
  5572  002FBA  0100               	movlb	0	; () banked
  5573  002FBC  6F88               	movwf	??_Distribution& (0+255),b
  5574  002FBE  0E1E               	movlw	30
  5575  002FC0                     u8597:
  5576  002FC0  2EE8               	decfsz	wreg,f,c
  5577  002FC2  D7FE               	bra	u8597
  5578  002FC4  2F88               	decfsz	??_Distribution& (0+255),f,b
  5579  002FC6  D7FC               	bra	u8597
  5580  002FC8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5581  002FCA  D7FA               	bra	u8597
  5582  002FCC  F000               	nop	
  5583                           
  5584                           ;sort.c: 365: updateServoPosition(1200, 1);
  5585  002FCE  0E04               	movlw	4
  5586  002FD0  0100               	movlb	0	; () banked
  5587  002FD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5588  002FD4  0EB0               	movlw	176
  5589  002FD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5590  002FD8  0E00               	movlw	0
  5591  002FDA  0100               	movlb	0	; () banked
  5592  002FDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5593  002FDE  0E01               	movlw	1
  5594  002FE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5595  002FE2  EC5E  F022         	call	_updateServoPosition	;wreg free
  5596                           
  5597                           ;sort.c: 366: updateServoPosition(1050, 3);
  5598  002FE6  0E04               	movlw	4
  5599  002FE8  0100               	movlb	0	; () banked
  5600  002FEA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5601  002FEC  0E1A               	movlw	26
  5602  002FEE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5603  002FF0  0E00               	movlw	0
  5604  002FF2  0100               	movlb	0	; () banked
  5605  002FF4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5606  002FF6  0E03               	movlw	3
  5607  002FF8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5608  002FFA  EC5E  F022         	call	_updateServoPosition	;wreg free
  5609                           
  5610                           ;sort.c: 368: f_can_coming_to_distribution = 0;
  5611  002FFE  0E00               	movlw	0
  5612  003000  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5613  003002  0E00               	movlw	0
  5614  003004  6E69               	movwf	_f_can_coming_to_distribution,c
  5615                           
  5616                           ;sort.c: 369: f_can_distributed = 1;
  5617  003006  0E00               	movlw	0
  5618  003008  0101               	movlb	1	; () banked
  5619  00300A  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5620  00300C  0E01               	movlw	1
  5621  00300E  6F2F               	movwf	_f_can_distributed& (0+255),b
  5622                           
  5623                           ; BSR set to: 1
  5624                           ;sort.c: 370: f_most_recent_sort_time = 1;
  5625  003010  0E00               	movlw	0
  5626  003012  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5627  003014  0E01               	movlw	1
  5628  003016  6E6B               	movwf	_f_most_recent_sort_time,c
  5629                           
  5630                           ; BSR set to: 1
  5631                           ;sort.c: 371: if(f_lastCan == 1){
  5632  003018  0100               	movlb	0	; () banked
  5633  00301A  05E8               	decf	_f_lastCan& (0+255),w,b
  5634  00301C  0100               	movlb	0	; () banked
  5635  00301E  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5636  003020  A4D8               	btfss	status,2,c
  5637  003022  0012               	return	
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;sort.c: 372: machine_state = DoneSorting_state;
  5641  003024  0E02               	movlw	2
  5642  003026  0100               	movlb	0	; () banked
  5643  003028  6FFC               	movwf	_machine_state& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646  00302A  0012               	return	
  5647  00302C                     __end_of_Distribution:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           prodh	equ	0xFF4
  5654                           prodl	equ	0xFF3
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _machineConfig *****************
  5667 ;; Defined at:
  5668 ;;		line 15 in file "MachineConfig.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;		None
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;		None
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  1    wreg      void 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;Total ram usage:        0 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    7
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		_main
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text12
  5697  004740                     __ptext12:
  5698                           	opt stack 0
  5699  004740                     _machineConfig:
  5700                           	opt stack 23
  5701                           
  5702                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5703                           
  5704                           ;incstack = 0
  5705  004740  0EF0               	movlw	240
  5706  004742  6ED3               	movwf	4051,c	;volatile
  5707                           
  5708                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5709  004744  8C9B               	bsf	3995,6,c	;volatile
  5710                           
  5711                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5712  004746  0E07               	movlw	7
  5713  004748  6E92               	movwf	3986,c	;volatile
  5714                           
  5715                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5716  00474A  0EF2               	movlw	242
  5717  00474C  6E93               	movwf	3987,c	;volatile
  5718                           
  5719                           ;MachineConfig.c: 27: TRISC = 0x00;
  5720  00474E  0E00               	movlw	0
  5721  004750  6E94               	movwf	3988,c	;volatile
  5722                           
  5723                           ;MachineConfig.c: 31: TRISD = 0x00;
  5724  004752  0E00               	movlw	0
  5725  004754  6E95               	movwf	3989,c	;volatile
  5726                           
  5727                           ;MachineConfig.c: 34: TRISE = 0x00;
  5728  004756  0E00               	movlw	0
  5729  004758  6E96               	movwf	3990,c	;volatile
  5730                           
  5731                           ;MachineConfig.c: 37: LATA = 0x00;
  5732  00475A  0E00               	movlw	0
  5733  00475C  6E89               	movwf	3977,c	;volatile
  5734                           
  5735                           ;MachineConfig.c: 38: LATB = 0x00;
  5736  00475E  0E00               	movlw	0
  5737  004760  6E8A               	movwf	3978,c	;volatile
  5738                           
  5739                           ;MachineConfig.c: 39: LATC = 0x00;
  5740  004762  0E00               	movlw	0
  5741  004764  6E8B               	movwf	3979,c	;volatile
  5742                           
  5743                           ;MachineConfig.c: 40: LATD = 0x00;
  5744  004766  0E00               	movlw	0
  5745  004768  6E8C               	movwf	3980,c	;volatile
  5746                           
  5747                           ;MachineConfig.c: 41: LATE = 0x00;
  5748  00476A  0E00               	movlw	0
  5749  00476C  6E8D               	movwf	3981,c	;volatile
  5750                           
  5751                           ;MachineConfig.c: 43: nRBPU = 0;
  5752  00476E  9EF1               	bcf	intcon2,7,c	;volatile
  5753                           
  5754                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5755  004770  0E00               	movlw	0
  5756  004772  6EC2               	movwf	4034,c	;volatile
  5757                           
  5758                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5759  004774  0E0D               	movlw	13
  5760  004776  6EC1               	movwf	4033,c	;volatile
  5761                           
  5762                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5763  004778  0E00               	movlw	0
  5764  00477A  6EB5               	movwf	4021,c	;volatile
  5765                           
  5766                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5767  00477C  96B4               	bcf	4020,3,c	;volatile
  5768                           
  5769                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5770  00477E  0EB1               	movlw	177
  5771  004780  6EC0               	movwf	4032,c	;volatile
  5772                           
  5773                           ;MachineConfig.c: 55: INT1IE = 1;
  5774  004782  86F0               	bsf	intcon3,3,c	;volatile
  5775                           
  5776                           ;MachineConfig.c: 57: TMR0IE = 1;
  5777  004784  8AF2               	bsf	intcon,5,c	;volatile
  5778                           
  5779                           ;MachineConfig.c: 58: TMR1IE = 1;
  5780  004786  809D               	bsf	3997,0,c	;volatile
  5781                           
  5782                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5783  004788  0EB0               	movlw	176
  5784  00478A  6ECD               	movwf	4045,c	;volatile
  5785                           
  5786                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5787  00478C  0EB0               	movlw	176
  5788  00478E  6EB1               	movwf	4017,c	;volatile
  5789                           
  5790                           ;MachineConfig.c: 61: TMR2IE = 1;
  5791  004790  829D               	bsf	3997,1,c	;volatile
  5792                           
  5793                           ;MachineConfig.c: 62: TMR3IE = 1;
  5794  004792  82A0               	bsf	4000,1,c	;volatile
  5795                           
  5796                           ;MachineConfig.c: 63: PEIE = 1;
  5797  004794  8CF2               	bsf	intcon,6,c	;volatile
  5798                           
  5799                           ;MachineConfig.c: 64: ADIE = 0;
  5800  004796  9C9D               	bcf	3997,6,c	;volatile
  5801                           
  5802                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5803  004798  9EF2               	bcf	intcon,7,c	;volatile
  5804  00479A  0012               	return		;funcret
  5805  00479C                     __end_of_machineConfig:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           intcon2	equ	0xFF1
  5815                           intcon3	equ	0xFF0
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           postdec1	equ	0xFE5
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           fsr2h	equ	0xFDA
  5824                           fsr2l	equ	0xFD9
  5825                           status	equ	0xFD8
  5826                           
  5827 ;; *************** function _logRun *****************
  5828 ;; Defined at:
  5829 ;;		line 84 in file "EEPROM.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5834 ;;  i               2   55[BANK0 ] int 
  5835 ;;  num             1   49[BANK0 ] unsigned char 
  5836 ;;  addr            2   57[BANK0 ] unsigned short 
  5837 ;;  byte11          1   54[BANK0 ] unsigned char 
  5838 ;;  byte3           1   52[BANK0 ] unsigned char 
  5839 ;;  byte2           1   51[BANK0 ] unsigned char 
  5840 ;;  byte1           1   50[BANK0 ] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      void 
  5843 ;; Registers used:
  5844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;Total ram usage:       10 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:   11
  5857 ;; This function calls:
  5858 ;;		_EEPROM_read
  5859 ;;		_EEPROM_write
  5860 ;; This function is called by:
  5861 ;;		_main
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text13
  5866  0038F6                     __ptext13:
  5867                           	opt stack 0
  5868  0038F6                     _logRun:
  5869                           	opt stack 19
  5870                           
  5871                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5872                           
  5873                           ;incstack = 0
  5874  0038F6  0E00               	movlw	0
  5875  0038F8  0100               	movlb	0	; () banked
  5876  0038FA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5877  0038FC  0E00               	movlw	0
  5878  0038FE  6F80               	movwf	EEPROM_read@address& (0+255),b
  5879  003900  ECD0  F027         	call	_EEPROM_read	;wreg free
  5880  003904  0100               	movlb	0	; () banked
  5881  003906  6FFD               	movwf	_sel& (0+255),b
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5885  003908  0100               	movlb	0	; () banked
  5886  00390A  51FD               	movf	_sel& (0+255),w,b
  5887  00390C  0D0B               	mullw	11
  5888  00390E  0E01               	movlw	1
  5889  003910  24F3               	addwf	prodl,w,c
  5890  003912  0100               	movlb	0	; () banked
  5891  003914  6FB9               	movwf	logRun@addr& (0+255),b
  5892  003916  0E00               	movlw	0
  5893  003918  20F4               	addwfc	prodh,w,c
  5894  00391A  0100               	movlb	0	; () banked
  5895  00391C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;EEPROM.c: 101: if (sel < 3){
  5899  00391E  0E03               	movlw	3
  5900  003920  0100               	movlb	0	; () banked
  5901  003922  61FD               	cpfslt	_sel& (0+255),b
  5902  003924  D00E               	goto	l8776
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5906  003926  0100               	movlb	0	; () banked
  5907  003928  29FD               	incf	_sel& (0+255),w,b
  5908  00392A  0100               	movlb	0	; () banked
  5909  00392C  6FB1               	movwf	logRun@num& (0+255),b
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5913  00392E  0E00               	movlw	0
  5914  003930  0100               	movlb	0	; () banked
  5915  003932  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5916  003934  0E00               	movlw	0
  5917  003936  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5918  003938  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5919  00393C  EC35  F01E         	call	_EEPROM_write	;wreg free
  5920                           
  5921                           ;EEPROM.c: 104: }
  5922  003940  D00A               	goto	l8778
  5923  003942                     l8776:
  5924                           
  5925                           ;EEPROM.c: 105: else{
  5926                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5927  003942  0E00               	movlw	0
  5928  003944  0100               	movlb	0	; () banked
  5929  003946  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5930  003948  0E00               	movlw	0
  5931  00394A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5932  00394C  0E00               	movlw	0
  5933  00394E  0100               	movlb	0	; () banked
  5934  003950  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5935  003952  EC35  F01E         	call	_EEPROM_write	;wreg free
  5936  003956                     l8778:
  5937                           
  5938                           ;EEPROM.c: 107: }
  5939                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5940  003956  0100               	movlb	0	; () banked
  5941  003958  51FE               	movf	_count_total& (0+255),w,b
  5942  00395A  0980               	iorlw	128
  5943  00395C  0100               	movlb	0	; () banked
  5944  00395E  6FB2               	movwf	logRun@byte1& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5948  003960  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5949  003964  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5950  003968  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5951  00396C  EC35  F01E         	call	_EEPROM_write	;wreg free
  5952                           
  5953                           ;EEPROM.c: 112: addr++;
  5954  003970  0100               	movlb	0	; () banked
  5955  003972  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5956  003974  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5960  003976  385B               	swapf	_count_pop_no_tab,w,c
  5961  003978  0BF0               	andlw	240
  5962  00397A  105D               	iorwf	_count_pop_w_tab,w,c
  5963  00397C  0100               	movlb	0	; () banked
  5964  00397E  6FB3               	movwf	logRun@byte2& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5968  003980  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5969  003984  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5970  003988  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5971  00398C  EC35  F01E         	call	_EEPROM_write	;wreg free
  5972                           
  5973                           ;EEPROM.c: 117: addr++;
  5974  003990  0100               	movlb	0	; () banked
  5975  003992  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5976  003994  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5980  003996  0101               	movlb	1	; () banked
  5981  003998  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5982  00399A  0BF0               	andlw	240
  5983  00399C  0101               	movlb	1	; () banked
  5984  00399E  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5985  0039A0  0100               	movlb	0	; () banked
  5986  0039A2  6FB4               	movwf	logRun@byte3& (0+255),b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5990  0039A4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5991  0039A8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5992  0039AC  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5993  0039B0  EC35  F01E         	call	_EEPROM_write	;wreg free
  5994                           
  5995                           ;EEPROM.c: 120: addr++;
  5996  0039B4  0100               	movlb	0	; () banked
  5997  0039B6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5998  0039B8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6002  0039BA  0E00               	movlw	0
  6003  0039BC  0100               	movlb	0	; () banked
  6004  0039BE  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6005  0039C0  0E00               	movlw	0
  6006  0039C2  6FB7               	movwf	logRun@i& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009  0039C4  0100               	movlb	0	; () banked
  6010  0039C6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6011  0039C8  D008               	goto	l8802
  6012  0039CA  0100               	movlb	0	; () banked
  6013  0039CC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6014  0039CE  E128               	bnz	l1010
  6015  0039D0  0E07               	movlw	7
  6016  0039D2  0100               	movlb	0	; () banked
  6017  0039D4  5DB7               	subwf	logRun@i& (0+255),w,b
  6018  0039D6  B0D8               	btfsc	status,0,c
  6019  0039D8  D023               	goto	l1010
  6020  0039DA                     l8802:
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6024  0039DA  90D8               	bcf	status,0,c
  6025  0039DC  0100               	movlb	0	; () banked
  6026  0039DE  35B7               	rlcf	logRun@i& (0+255),w,b
  6027  0039E0  6ED9               	movwf	fsr2l,c
  6028  0039E2  0100               	movlb	0	; () banked
  6029  0039E4  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6030  0039E6  6EDA               	movwf	fsr2h,c
  6031  0039E8  0E0E               	movlw	low _startTime
  6032  0039EA  26D9               	addwf	fsr2l,f,c
  6033  0039EC  0E01               	movlw	high _startTime
  6034  0039EE  22DA               	addwfc	fsr2h,f,c
  6035  0039F0  50DF               	movf	indf2,w,c
  6036  0039F2  0100               	movlb	0	; () banked
  6037  0039F4  6FB5               	movwf	logRun@byte_i& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6041  0039F6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6042  0039FA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6043  0039FE  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6044  003A02  EC35  F01E         	call	_EEPROM_write	;wreg free
  6045                           
  6046                           ;EEPROM.c: 126: addr++;
  6047  003A06  0100               	movlb	0	; () banked
  6048  003A08  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6049  003A0A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6050                           
  6051                           ; BSR set to: 0
  6052  003A0C  0100               	movlb	0	; () banked
  6053  003A0E  4BB7               	infsnz	logRun@i& (0+255),f,b
  6054  003A10  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057  003A12  0100               	movlb	0	; () banked
  6058  003A14  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6059  003A16  D7E1               	goto	l8802
  6060  003A18  0100               	movlb	0	; () banked
  6061  003A1A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6062  003A1C  E101               	bnz	u7970
  6063  003A1E  D7D8               	goto	L8
  6064  003A20                     u7970:
  6065  003A20                     l1010:
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;EEPROM.c: 127: }
  6069                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6070  003A20  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6074  003A24  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6075  003A28  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6076  003A2C  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6077  003A30  EC35  F01E         	call	_EEPROM_write	;wreg free
  6078  003A34  0012               	return		;funcret
  6079  003A36                     __end_of_logRun:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           intcon3	equ	0xFF0
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _EEPROM_write *****************
  6102 ;; Defined at:
  6103 ;;		line 32 in file "EEPROM.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  address         2   43[BANK0 ] unsigned short 
  6106 ;;  data            1   45[BANK0 ] unsigned char 
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  i               1   48[BANK0 ] unsigned char 
  6109 ;;  i               1   47[BANK0 ] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:        6 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:   10
  6126 ;; This function calls:
  6127 ;;		_EEPROM_read
  6128 ;;		_lcdInst
  6129 ;;		_printf
  6130 ;; This function is called by:
  6131 ;;		_Loading
  6132 ;;		_logRun
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text14
  6137  003C6A                     __ptext14:
  6138                           	opt stack 0
  6139  003C6A                     _EEPROM_write:
  6140                           	opt stack 18
  6141                           
  6142                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6143                           
  6144                           ;incstack = 0
  6145  003C6A  84A6               	bsf	4006,2,c	;volatile
  6146                           
  6147                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6148  003C6C  0100               	movlb	0	; () banked
  6149  003C6E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6150  003C70  6EAA               	movwf	4010,c	;volatile
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6154  003C72  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;EEPROM.c: 39: EEDATA = data;
  6158  003C76  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6162  003C7A  9EA6               	bcf	4006,7,c	;volatile
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6166  003C7C  9CA6               	bcf	4006,6,c	;volatile
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6170  003C7E  9EF2               	bcf	intcon,7,c	;volatile
  6171                           
  6172                           ;EEPROM.c: 45: EECON2 = 0x55;
  6173  003C80  0E55               	movlw	85
  6174  003C82  6EA7               	movwf	4007,c	;volatile
  6175                           
  6176                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6177  003C84  0EAA               	movlw	170
  6178  003C86  6EA7               	movwf	4007,c	;volatile
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6182  003C88  82A6               	bsf	4006,1,c	;volatile
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6186  003C8A  8EF2               	bsf	intcon,7,c	;volatile
  6187  003C8C                     l988:
  6188  003C8C  A8A1               	btfss	4001,4,c	;volatile
  6189  003C8E  D7FE               	goto	l988
  6190                           
  6191                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6192  003C90  98A1               	bcf	4001,4,c	;volatile
  6193                           
  6194                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6195  003C92  94A6               	bcf	4006,2,c	;volatile
  6196                           
  6197                           ;EEPROM.c: 57: if(debug){
  6198  003C94  505F               	movf	_debug,w,c
  6199  003C96  1060               	iorwf	_debug+1,w,c
  6200  003C98  B4D8               	btfsc	status,2,c
  6201  003C9A  0012               	return	
  6202                           
  6203                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6204  003C9C  0E01               	movlw	1
  6205  003C9E  EC02  F028         	call	_lcdInst
  6206  003CA2  0E68               	movlw	104
  6207  003CA4  0100               	movlb	0	; () banked
  6208  003CA6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6209  003CA8  0EE4               	movlw	228
  6210  003CAA                     u8607:
  6211  003CAA  2EE8               	decfsz	wreg,f,c
  6212  003CAC  D7FE               	bra	u8607
  6213  003CAE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6214  003CB0  D7FC               	bra	u8607
  6215  003CB2  F000               	nop	
  6216                           
  6217                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6218  003CB4  0E80               	movlw	128
  6219  003CB6  EC02  F028         	call	_lcdInst
  6220                           
  6221                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6222  003CBA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6223  003CBE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6224  003CC2  ECD0  F027         	call	_EEPROM_read	;wreg free
  6225  003CC6  0100               	movlb	0	; () banked
  6226  003CC8  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6227  003CCA  A4D8               	btfss	status,2,c
  6228  003CCC  D024               	goto	l6550
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6232  003CCE  0E22               	movlw	low STR_66
  6233  003CD0  0100               	movlb	0	; () banked
  6234  003CD2  6F8E               	movwf	printf@f& (0+255),b
  6235  003CD4  0EFB               	movlw	high STR_66
  6236  003CD6  0100               	movlb	0	; () banked
  6237  003CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6238  003CDA  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6239  003CDE  0100               	movlb	0	; () banked
  6240  003CE0  6B91               	clrf	(?_printf+3)& (0+255),b
  6241  003CE2  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6242  003CE6  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6243  003CEA  ECF2  F00A         	call	_printf	;wreg free
  6244                           
  6245                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6246  003CEE  0E00               	movlw	0
  6247  003CF0  0100               	movlb	0	; () banked
  6248  003CF2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6249  003CF4                     l6542:
  6250                           
  6251                           ; BSR set to: 0
  6252  003CF4  0E63               	movlw	99
  6253  003CF6  0100               	movlb	0	; () banked
  6254  003CF8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6255  003CFA  D001               	goto	l6546
  6256  003CFC  0012               	return	
  6257  003CFE                     l6546:
  6258                           
  6259                           ; BSR set to: 0
  6260  003CFE  0E68               	movlw	104
  6261  003D00  0100               	movlb	0	; () banked
  6262  003D02  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6263  003D04  0EE4               	movlw	228
  6264  003D06                     u8617:
  6265  003D06  2EE8               	decfsz	wreg,f,c
  6266  003D08  D7FE               	bra	u8617
  6267  003D0A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6268  003D0C  D7FC               	bra	u8617
  6269  003D0E  F000               	nop	
  6270  003D10  0100               	movlb	0	; () banked
  6271  003D12  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6272  003D14  D7EF               	goto	l6542
  6273  003D16                     l6550:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6277  003D16  0EBD               	movlw	low STR_67
  6278  003D18  0100               	movlb	0	; () banked
  6279  003D1A  6F8E               	movwf	printf@f& (0+255),b
  6280  003D1C  0EFF               	movlw	high STR_67
  6281  003D1E  0100               	movlb	0	; () banked
  6282  003D20  6F8F               	movwf	(printf@f+1)& (0+255),b
  6283  003D22  ECF2  F00A         	call	_printf	;wreg free
  6284  003D26  0E00               	movlw	0
  6285  003D28  0100               	movlb	0	; () banked
  6286  003D2A  6FB0               	movwf	EEPROM_write@i_1339& (0+255),b
  6287  003D2C                     l6554:
  6288                           
  6289                           ; BSR set to: 0
  6290  003D2C  0E63               	movlw	99
  6291  003D2E  0100               	movlb	0	; () banked
  6292  003D30  65B0               	cpfsgt	EEPROM_write@i_1339& (0+255),b
  6293  003D32  D001               	goto	l6558
  6294  003D34  0012               	return	
  6295  003D36                     l6558:
  6296                           
  6297                           ; BSR set to: 0
  6298  003D36  0E68               	movlw	104
  6299  003D38  0100               	movlb	0	; () banked
  6300  003D3A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6301  003D3C  0EE4               	movlw	228
  6302  003D3E                     u8627:
  6303  003D3E  2EE8               	decfsz	wreg,f,c
  6304  003D40  D7FE               	bra	u8627
  6305  003D42  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6306  003D44  D7FC               	bra	u8627
  6307  003D46  F000               	nop	
  6308  003D48  0100               	movlb	0	; () banked
  6309  003D4A  2BB0               	incf	EEPROM_write@i_1339& (0+255),f,b
  6310  003D4C  D7EF               	goto	l6554
  6311  003D4E                     __end_of_EEPROM_write:
  6312                           	opt stack 0
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           intcon2	equ	0xFF1
  6321                           intcon3	equ	0xFF0
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           postdec1	equ	0xFE5
  6325                           fsr1l	equ	0xFE1
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           postdec2	equ	0xFDD
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function _EEPROM_read *****************
  6334 ;; Defined at:
  6335 ;;		line 68 in file "EEPROM.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  address         2    0[BANK0 ] unsigned short 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      unsigned char 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;Total ram usage:        2 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    7
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_Loading
  6360 ;;		_EEPROM_write
  6361 ;;		_logRun
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text15
  6366  004FA0                     __ptext15:
  6367                           	opt stack 0
  6368  004FA0                     _EEPROM_read:
  6369                           	opt stack 20
  6370                           
  6371                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6372                           
  6373                           ;incstack = 0
  6374  004FA0  0100               	movlb	0	; () banked
  6375  004FA2  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6376  004FA4  6EAA               	movwf	4010,c	;volatile
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6380  004FA6  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6384  004FAA  9EA6               	bcf	4006,7,c	;volatile
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6388  004FAC  9CA6               	bcf	4006,6,c	;volatile
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6392  004FAE  80A6               	bsf	4006,0,c	;volatile
  6393  004FB0                     l1001:
  6394  004FB0  B0A6               	btfsc	4006,0,c	;volatile
  6395  004FB2  D7FE               	goto	l1001
  6396                           
  6397                           ;EEPROM.c: 81: return EEDATA;
  6398  004FB4  50A8               	movf	4008,w,c	;volatile
  6399  004FB6  0012               	return	
  6400  004FB8                     __end_of_EEPROM_read:
  6401                           	opt stack 0
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           intcon2	equ	0xFF1
  6410                           intcon3	equ	0xFF0
  6411                           postinc0	equ	0xFEE
  6412                           wreg	equ	0xFE8
  6413                           postdec1	equ	0xFE5
  6414                           fsr1l	equ	0xFE1
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _initUI *****************
  6423 ;; Defined at:
  6424 ;;		line 62 in file "UI.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;Total ram usage:        0 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:   12
  6445 ;; This function calls:
  6446 ;;		_change_state_to_menu_start
  6447 ;;		_loadRTC
  6448 ;; This function is called by:
  6449 ;;		_main
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text16
  6454  004D58                     __ptext16:
  6455                           	opt stack 0
  6456  004D58                     _initUI:
  6457                           	opt stack 18
  6458                           
  6459                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6460                           
  6461                           ;incstack = 0
  6462  004D58  8EF2               	bsf	intcon,7,c	;volatile
  6463                           
  6464                           ;UI.c: 64: machine_state = UI_state;
  6465  004D5A  0E00               	movlw	0
  6466  004D5C  0100               	movlb	0	; () banked
  6467  004D5E  6FFC               	movwf	_machine_state& (0+255),b
  6468                           
  6469                           ;UI.c: 65: logstate = 0;
  6470  004D60  0E00               	movlw	0
  6471  004D62  0100               	movlb	0	; () banked
  6472  004D64  6FF7               	movwf	(_logstate+1)& (0+255),b
  6473  004D66  0E00               	movlw	0
  6474  004D68  6FF6               	movwf	_logstate& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;UI.c: 67: if(RTCflag){
  6478  004D6A  0100               	movlb	0	; () banked
  6479  004D6C  51E2               	movf	_RTCflag& (0+255),w,b
  6480  004D6E  0100               	movlb	0	; () banked
  6481  004D70  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6482  004D72  A4D8               	btfss	status,2,c
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;UI.c: 68: loadRTC();
  6486  004D74  ECD5  F020         	call	_loadRTC	;wreg free
  6487                           
  6488                           ;UI.c: 69: }
  6489                           ;UI.c: 71: change_state_to_menu_start();
  6490  004D78  ECF1  F026         	call	_change_state_to_menu_start	;wreg free
  6491                           
  6492                           ;UI.c: 72: firstboot = 1;
  6493  004D7C  0E00               	movlw	0
  6494  004D7E  6E70               	movwf	_firstboot+1,c
  6495  004D80  0E01               	movlw	1
  6496  004D82  6E6F               	movwf	_firstboot,c
  6497  004D84  0012               	return		;funcret
  6498  004D86                     __end_of_initUI:
  6499                           	opt stack 0
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           intcon2	equ	0xFF1
  6508                           intcon3	equ	0xFF0
  6509                           postinc0	equ	0xFEE
  6510                           wreg	equ	0xFE8
  6511                           postdec1	equ	0xFE5
  6512                           fsr1l	equ	0xFE1
  6513                           indf2	equ	0xFDF
  6514                           postinc2	equ	0xFDE
  6515                           postdec2	equ	0xFDD
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function _loadRTC *****************
  6521 ;; Defined at:
  6522 ;;		line 28 in file "RTC.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;  i               2   22[BANK0 ] int 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        3 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    9
  6543 ;; This function calls:
  6544 ;;		_I2C_Master_Init
  6545 ;;		_I2C_Master_Start
  6546 ;;		_I2C_Master_Stop
  6547 ;;		_I2C_Master_Write
  6548 ;; This function is called by:
  6549 ;;		_initUI
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text17
  6554  0041AA                     __ptext17:
  6555                           	opt stack 0
  6556  0041AA                     _loadRTC:
  6557                           	opt stack 20
  6558                           
  6559                           ;RTC.c: 30: I2C_Master_Init(10000);
  6560                           
  6561                           ;incstack = 0
  6562  0041AA  0E10               	movlw	16
  6563  0041AC  0100               	movlb	0	; () banked
  6564  0041AE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6565  0041B0  0E27               	movlw	39
  6566  0041B2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6567  0041B4  0E00               	movlw	0
  6568  0041B6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6569  0041B8  0E00               	movlw	0
  6570  0041BA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6571  0041BC  EC70  F023         	call	_I2C_Master_Init	;wreg free
  6572                           
  6573                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6574  0041C0  9EF2               	bcf	intcon,7,c	;volatile
  6575                           
  6576                           ;RTC.c: 34: I2C_Master_Start();
  6577  0041C2  EC28  F028         	call	_I2C_Master_Start	;wreg free
  6578                           
  6579                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6580  0041C6  0E00               	movlw	0
  6581  0041C8  0100               	movlb	0	; () banked
  6582  0041CA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6583  0041CC  0ED0               	movlw	208
  6584  0041CE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6585  0041D0  EC16  F028         	call	_I2C_Master_Write	;wreg free
  6586                           
  6587                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6588  0041D4  0E00               	movlw	0
  6589  0041D6  0100               	movlb	0	; () banked
  6590  0041D8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6591  0041DA  0E00               	movlw	0
  6592  0041DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6593  0041DE  EC16  F028         	call	_I2C_Master_Write	;wreg free
  6594                           
  6595                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6596  0041E2  0E00               	movlw	0
  6597  0041E4  0100               	movlb	0	; () banked
  6598  0041E6  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6599  0041E8  0E00               	movlw	0
  6600  0041EA  6F96               	movwf	loadRTC@i& (0+255),b
  6601  0041EC                     l6696:
  6602                           
  6603                           ; BSR set to: 0
  6604  0041EC  0100               	movlb	0	; () banked
  6605  0041EE  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6606  0041F0  D008               	goto	l6700
  6607  0041F2  0100               	movlb	0	; () banked
  6608  0041F4  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6609  0041F6  E11B               	bnz	l6706
  6610  0041F8  0E07               	movlw	7
  6611  0041FA  0100               	movlb	0	; () banked
  6612  0041FC  5D96               	subwf	loadRTC@i& (0+255),w,b
  6613  0041FE  B0D8               	btfsc	status,0,c
  6614  004200  D016               	goto	l6706
  6615  004202                     l6700:
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6619  004202  0E24               	movlw	low _time
  6620  004204  0100               	movlb	0	; () banked
  6621  004206  2596               	addwf	loadRTC@i& (0+255),w,b
  6622  004208  6ED9               	movwf	fsr2l,c
  6623  00420A  0E01               	movlw	high _time
  6624  00420C  0100               	movlb	0	; () banked
  6625  00420E  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6626  004210  6EDA               	movwf	fsr2h,c
  6627  004212  50DF               	movf	indf2,w,c
  6628  004214  0100               	movlb	0	; () banked
  6629  004216  6F95               	movwf	??_loadRTC& (0+255),b
  6630  004218  0100               	movlb	0	; () banked
  6631  00421A  5195               	movf	??_loadRTC& (0+255),w,b
  6632  00421C  0100               	movlb	0	; () banked
  6633  00421E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6634  004220  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6635  004222  EC16  F028         	call	_I2C_Master_Write	;wreg free
  6636  004226  0100               	movlb	0	; () banked
  6637  004228  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6638  00422A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6639  00422C  D7DF               	goto	l6696
  6640  00422E                     l6706:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;RTC.c: 39: }
  6644                           ;RTC.c: 40: I2C_Master_Stop();
  6645  00422E  EC24  F028         	call	_I2C_Master_Stop	;wreg free
  6646                           
  6647                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6648  004232  8EF2               	bsf	intcon,7,c	;volatile
  6649  004234  0012               	return		;funcret
  6650  004236                     __end_of_loadRTC:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           intcon2	equ	0xFF1
  6660                           intcon3	equ	0xFF0
  6661                           postinc0	equ	0xFEE
  6662                           wreg	equ	0xFE8
  6663                           postdec1	equ	0xFE5
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function _I2C_Master_Init *****************
  6673 ;; Defined at:
  6674 ;;		line 15 in file "I2C.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  c               4   13[BANK0 ] const unsigned long 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:        8 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    8
  6695 ;; This function calls:
  6696 ;;		___lldiv
  6697 ;; This function is called by:
  6698 ;;		_main
  6699 ;;		_loadRTC
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text18
  6704  0046E0                     __ptext18:
  6705                           	opt stack 0
  6706  0046E0                     _I2C_Master_Init:
  6707                           	opt stack 20
  6708                           
  6709                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6710                           
  6711                           ;incstack = 0
  6712  0046E0  0E00               	movlw	0
  6713  0046E2  6EC7               	movwf	4039,c	;volatile
  6714                           
  6715                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6716  0046E4  0E28               	movlw	40
  6717  0046E6  6EC6               	movwf	4038,c	;volatile
  6718                           
  6719                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6720  0046E8  0E00               	movlw	0
  6721  0046EA  6EC5               	movwf	4037,c	;volatile
  6722                           
  6723                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6724  0046EC  0E00               	movlw	0
  6725  0046EE  0100               	movlb	0	; () banked
  6726  0046F0  6F80               	movwf	___lldiv@dividend& (0+255),b
  6727  0046F2  0E48               	movlw	72
  6728  0046F4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6729  0046F6  0EE8               	movlw	232
  6730  0046F8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6731  0046FA  0E01               	movlw	1
  6732  0046FC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6733  0046FE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6734  004702  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6735  004706  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6736  00470A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6737  00470E  0E02               	movlw	2
  6738  004710                     u5055:
  6739  004710  90D8               	bcf	status,0,c
  6740  004712  0100               	movlb	0	; () banked
  6741  004714  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6742  004716  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6743  004718  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6744  00471A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6745  00471C  2EE8               	decfsz	wreg,f,c
  6746  00471E  D7F8               	goto	u5055
  6747  004720  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6748  004724  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6749  004728  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6750  00472C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6751  004730  ECD1  F01F         	call	___lldiv	;wreg free
  6752  004734  0100               	movlb	0	; () banked
  6753  004736  0580               	decf	?___lldiv& (0+255),w,b
  6754  004738  6EC8               	movwf	4040,c	;volatile
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;I2C.c: 22: TRISC3 = 1;
  6758  00473A  8694               	bsf	3988,3,c	;volatile
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;I2C.c: 23: TRISC4 = 1;
  6762  00473C  8894               	bsf	3988,4,c	;volatile
  6763                           
  6764                           ; BSR set to: 0
  6765  00473E  0012               	return		;funcret
  6766  004740                     __end_of_I2C_Master_Init:
  6767                           	opt stack 0
  6768                           tblptru	equ	0xFF8
  6769                           tblptrh	equ	0xFF7
  6770                           tblptrl	equ	0xFF6
  6771                           tablat	equ	0xFF5
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           intcon	equ	0xFF2
  6775                           intcon2	equ	0xFF1
  6776                           intcon3	equ	0xFF0
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           postdec1	equ	0xFE5
  6780                           fsr1l	equ	0xFE1
  6781                           indf2	equ	0xFDF
  6782                           postinc2	equ	0xFDE
  6783                           postdec2	equ	0xFDD
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           
  6788 ;; *************** function ___lldiv *****************
  6789 ;; Defined at:
  6790 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;  dividend        4    0[BANK0 ] unsigned long 
  6793 ;;  divisor         4    4[BANK0 ] unsigned long 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  quotient        4    8[BANK0 ] unsigned long 
  6796 ;;  counter         1   12[BANK0 ] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  4    0[BANK0 ] unsigned long 
  6799 ;; Registers used:
  6800 ;;		wreg, status,2, status,0
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6806 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;Total ram usage:       13 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    7
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_I2C_Master_Init
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text19
  6821  003FA2                     __ptext19:
  6822                           	opt stack 0
  6823  003FA2                     ___lldiv:
  6824                           	opt stack 20
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;incstack = 0
  6828  003FA2  0E00               	movlw	0
  6829  003FA4  0100               	movlb	0	; () banked
  6830  003FA6  6F88               	movwf	___lldiv@quotient& (0+255),b
  6831  003FA8  0E00               	movlw	0
  6832  003FAA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6833  003FAC  0E00               	movlw	0
  6834  003FAE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6835  003FB0  0E00               	movlw	0
  6836  003FB2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839  003FB4  0100               	movlb	0	; () banked
  6840  003FB6  5184               	movf	___lldiv@divisor& (0+255),w,b
  6841  003FB8  0100               	movlb	0	; () banked
  6842  003FBA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6843  003FBC  0100               	movlb	0	; () banked
  6844  003FBE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6845  003FC0  0100               	movlb	0	; () banked
  6846  003FC2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6847  003FC4  B4D8               	btfsc	status,2,c
  6848  003FC6  D042               	goto	l1760
  6849                           
  6850                           ; BSR set to: 0
  6851  003FC8  0E01               	movlw	1
  6852  003FCA  0100               	movlb	0	; () banked
  6853  003FCC  6F8C               	movwf	___lldiv@counter& (0+255),b
  6854  003FCE  D008               	goto	l6120
  6855  003FD0                     l6118:
  6856                           
  6857                           ; BSR set to: 0
  6858  003FD0  0100               	movlb	0	; () banked
  6859  003FD2  90D8               	bcf	status,0,c
  6860  003FD4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6861  003FD6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6862  003FD8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6863  003FDA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6864  003FDC  0100               	movlb	0	; () banked
  6865  003FDE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6866  003FE0                     l6120:
  6867                           
  6868                           ; BSR set to: 0
  6869  003FE0  0100               	movlb	0	; () banked
  6870  003FE2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6871  003FE4  D7F5               	goto	l6118
  6872  003FE6                     l6122:
  6873                           
  6874                           ; BSR set to: 0
  6875  003FE6  0100               	movlb	0	; () banked
  6876  003FE8  90D8               	bcf	status,0,c
  6877  003FEA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6878  003FEC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6879  003FEE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6880  003FF0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6881                           
  6882                           ; BSR set to: 0
  6883  003FF2  0100               	movlb	0	; () banked
  6884  003FF4  5184               	movf	___lldiv@divisor& (0+255),w,b
  6885  003FF6  0100               	movlb	0	; () banked
  6886  003FF8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6887  003FFA  0100               	movlb	0	; () banked
  6888  003FFC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6889  003FFE  0100               	movlb	0	; () banked
  6890  004000  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6891  004002  0100               	movlb	0	; () banked
  6892  004004  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6893  004006  0100               	movlb	0	; () banked
  6894  004008  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6895  00400A  0100               	movlb	0	; () banked
  6896  00400C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6897  00400E  0100               	movlb	0	; () banked
  6898  004010  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6899  004012  A0D8               	btfss	status,0,c
  6900  004014  D012               	goto	l6130
  6901                           
  6902                           ; BSR set to: 0
  6903  004016  0100               	movlb	0	; () banked
  6904  004018  5184               	movf	___lldiv@divisor& (0+255),w,b
  6905  00401A  0100               	movlb	0	; () banked
  6906  00401C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6907  00401E  0100               	movlb	0	; () banked
  6908  004020  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6909  004022  0100               	movlb	0	; () banked
  6910  004024  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6911  004026  0100               	movlb	0	; () banked
  6912  004028  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6913  00402A  0100               	movlb	0	; () banked
  6914  00402C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6915  00402E  0100               	movlb	0	; () banked
  6916  004030  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6917  004032  0100               	movlb	0	; () banked
  6918  004034  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6919                           
  6920                           ; BSR set to: 0
  6921  004036  0100               	movlb	0	; () banked
  6922  004038  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6923  00403A                     l6130:
  6924                           
  6925                           ; BSR set to: 0
  6926  00403A  0100               	movlb	0	; () banked
  6927  00403C  90D8               	bcf	status,0,c
  6928  00403E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6929  004040  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6930  004042  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6931  004044  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6932                           
  6933                           ; BSR set to: 0
  6934  004046  0100               	movlb	0	; () banked
  6935  004048  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6936  00404A  D7CD               	goto	l6122
  6937  00404C                     l1760:
  6938                           
  6939                           ; BSR set to: 0
  6940  00404C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6941  004050  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6942  004054  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6943  004058  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6944                           
  6945                           ; BSR set to: 0
  6946  00405C  0012               	return		;funcret
  6947  00405E                     __end_of___lldiv:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           intcon	equ	0xFF2
  6956                           intcon2	equ	0xFF1
  6957                           intcon3	equ	0xFF0
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           postdec1	equ	0xFE5
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _change_state_to_menu_start *****************
  6970 ;; Defined at:
  6971 ;;		line 474 in file "UI.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;		None
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;Total ram usage:        0 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:   11
  6992 ;; This function calls:
  6993 ;;		_lcdInst
  6994 ;;		_printRTC
  6995 ;;		_printf
  6996 ;; This function is called by:
  6997 ;;		_initUI
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text20
  7002  004DE2                     __ptext20:
  7003                           	opt stack 0
  7004  004DE2                     _change_state_to_menu_start:
  7005                           	opt stack 18
  7006                           
  7007                           ;UI.c: 475: cur_state = 0;
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;incstack = 0
  7011  004DE2  0E00               	movlw	0
  7012  004DE4  0100               	movlb	0	; () banked
  7013  004DE6  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7014  004DE8  0E00               	movlw	0
  7015  004DEA  6FE6               	movwf	_cur_state& (0+255),b
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;UI.c: 477: lcdInst(0b10000000);;
  7019  004DEC  0E80               	movlw	128
  7020  004DEE  EC02  F028         	call	_lcdInst
  7021                           
  7022                           ;UI.c: 478: printRTC();
  7023  004DF2  EC06  F012         	call	_printRTC	;wreg free
  7024                           
  7025                           ;UI.c: 479: lcdInst(0b11000000);;
  7026  004DF6  0EC0               	movlw	192
  7027  004DF8  EC02  F028         	call	_lcdInst
  7028                           
  7029                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7030  004DFC  0EF7               	movlw	low STR_30
  7031  004DFE  0100               	movlb	0	; () banked
  7032  004E00  6F8E               	movwf	printf@f& (0+255),b
  7033  004E02  0EFD               	movlw	high STR_30
  7034  004E04  0100               	movlb	0	; () banked
  7035  004E06  6F8F               	movwf	(printf@f+1)& (0+255),b
  7036  004E08  ECF2  F00A         	call	_printf	;wreg free
  7037  004E0C  0012               	return		;funcret
  7038  004E0E                     __end_of_change_state_to_menu_start:
  7039                           	opt stack 0
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           intcon	equ	0xFF2
  7047                           intcon2	equ	0xFF1
  7048                           intcon3	equ	0xFF0
  7049                           postinc0	equ	0xFEE
  7050                           wreg	equ	0xFE8
  7051                           postdec1	equ	0xFE5
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _initTime *****************
  7061 ;; Defined at:
  7062 ;;		line 17 in file "RTC.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  s               1    wreg     unsigned char 
  7065 ;;  m               1    0[BANK0 ] unsigned char 
  7066 ;;  h               1    1[BANK0 ] unsigned char 
  7067 ;;  w               1    2[BANK0 ] unsigned char 
  7068 ;;  DD              1    3[BANK0 ] unsigned char 
  7069 ;;  MM              1    4[BANK0 ] unsigned char 
  7070 ;;  YY              1    5[BANK0 ] unsigned char 
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;  s               1    6[BANK0 ] unsigned char 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:        7 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    7
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_main
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text21
  7097  004F46                     __ptext21:
  7098                           	opt stack 0
  7099  004F46                     _initTime:
  7100                           	opt stack 23
  7101                           
  7102                           ;incstack = 0
  7103                           ;initTime@s stored from wreg
  7104  004F46  0100               	movlb	0	; () banked
  7105  004F48  6F86               	movwf	initTime@s& (0+255),b
  7106                           
  7107                           ;RTC.c: 19: time[0] = s;
  7108  004F4A  C086  F124         	movff	initTime@s,_time
  7109                           
  7110                           ;RTC.c: 20: time[1] = m;
  7111  004F4E  C080  F125         	movff	initTime@m,_time+1
  7112                           
  7113                           ;RTC.c: 21: time[2] = h;
  7114  004F52  C081  F126         	movff	initTime@h,_time+2
  7115                           
  7116                           ;RTC.c: 22: time[3] = w;
  7117  004F56  C082  F127         	movff	initTime@w,_time+3
  7118                           
  7119                           ;RTC.c: 23: time[4] = DD;
  7120  004F5A  C083  F128         	movff	initTime@DD,_time+4
  7121                           
  7122                           ;RTC.c: 24: time[5] = MM;
  7123  004F5E  C084  F129         	movff	initTime@MM,_time+5
  7124                           
  7125                           ;RTC.c: 25: time[6] = YY;
  7126  004F62  C085  F12A         	movff	initTime@YY,_time+6
  7127  004F66  0012               	return		;funcret
  7128  004F68                     __end_of_initTime:
  7129                           	opt stack 0
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           intcon2	equ	0xFF1
  7138                           intcon3	equ	0xFF0
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           postdec1	equ	0xFE5
  7142                           fsr1l	equ	0xFE1
  7143                           indf2	equ	0xFDF
  7144                           postinc2	equ	0xFDE
  7145                           postdec2	equ	0xFDD
  7146                           fsr2h	equ	0xFDA
  7147                           fsr2l	equ	0xFD9
  7148                           status	equ	0xFD8
  7149                           
  7150 ;; *************** function _initLCD *****************
  7151 ;; Defined at:
  7152 ;;		line 48 in file "lcd.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;		None
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      void 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;Total ram usage:        1 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    9
  7173 ;; This function calls:
  7174 ;;		_lcdInst
  7175 ;; This function is called by:
  7176 ;;		_main
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text22
  7181  0049E0                     __ptext22:
  7182                           	opt stack 0
  7183  0049E0                     _initLCD:
  7184                           	opt stack 21
  7185                           
  7186                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7187                           
  7188                           ;incstack = 0
  7189  0049E0  0E9C               	movlw	156
  7190  0049E2  0100               	movlb	0	; () banked
  7191  0049E4  6F83               	movwf	??_initLCD& (0+255),b
  7192  0049E6  0ED7               	movlw	215
  7193  0049E8                     u8637:
  7194  0049E8  2EE8               	decfsz	wreg,f,c
  7195  0049EA  D7FE               	bra	u8637
  7196  0049EC  2F83               	decfsz	??_initLCD& (0+255),f,b
  7197  0049EE  D7FC               	bra	u8637
  7198                           
  7199                           ;lcd.c: 50: lcdInst(0b00110011);
  7200  0049F0  0E33               	movlw	51
  7201  0049F2  EC02  F028         	call	_lcdInst
  7202                           
  7203                           ;lcd.c: 51: lcdInst(0b00110010);
  7204  0049F6  0E32               	movlw	50
  7205  0049F8  EC02  F028         	call	_lcdInst
  7206                           
  7207                           ;lcd.c: 53: lcdInst(0b00101000);
  7208  0049FC  0E28               	movlw	40
  7209  0049FE  EC02  F028         	call	_lcdInst
  7210                           
  7211                           ;lcd.c: 54: lcdInst(0b00001100);
  7212  004A02  0E0C               	movlw	12
  7213  004A04  EC02  F028         	call	_lcdInst
  7214                           
  7215                           ;lcd.c: 55: lcdInst(0b00000110);
  7216  004A08  0E06               	movlw	6
  7217  004A0A  EC02  F028         	call	_lcdInst
  7218                           
  7219                           ;lcd.c: 56: lcdInst(0b00000001);
  7220  004A0E  0E01               	movlw	1
  7221  004A10  EC02  F028         	call	_lcdInst
  7222                           
  7223                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7224  004A14  0E9C               	movlw	156
  7225  004A16  0100               	movlb	0	; () banked
  7226  004A18  6F83               	movwf	??_initLCD& (0+255),b
  7227  004A1A  0ED7               	movlw	215
  7228  004A1C                     u8647:
  7229  004A1C  2EE8               	decfsz	wreg,f,c
  7230  004A1E  D7FE               	bra	u8647
  7231  004A20  2F83               	decfsz	??_initLCD& (0+255),f,b
  7232  004A22  D7FC               	bra	u8647
  7233  004A24  0012               	return		;funcret
  7234  004A26                     __end_of_initLCD:
  7235                           	opt stack 0
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           prodh	equ	0xFF4
  7241                           prodl	equ	0xFF3
  7242                           intcon	equ	0xFF2
  7243                           intcon2	equ	0xFF1
  7244                           intcon3	equ	0xFF0
  7245                           postinc0	equ	0xFEE
  7246                           wreg	equ	0xFE8
  7247                           postdec1	equ	0xFE5
  7248                           fsr1l	equ	0xFE1
  7249                           indf2	equ	0xFDF
  7250                           postinc2	equ	0xFDE
  7251                           postdec2	equ	0xFDD
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256 ;; *************** function _UI *****************
  7257 ;; Defined at:
  7258 ;;		line 76 in file "UI.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  i               1   73[BANK0 ] unsigned char 
  7263 ;;  i               1   85[BANK0 ] unsigned char 
  7264 ;;  i               1   84[BANK0 ] unsigned char 
  7265 ;;  i               1   83[BANK0 ] unsigned char 
  7266 ;;  i               1   82[BANK0 ] unsigned char 
  7267 ;;  i               1   81[BANK0 ] unsigned char 
  7268 ;;  i               1   80[BANK0 ] unsigned char 
  7269 ;;  i               1   79[BANK0 ] unsigned char 
  7270 ;;  i               1   78[BANK0 ] unsigned char 
  7271 ;;  i               1   77[BANK0 ] unsigned char 
  7272 ;;  i               1   76[BANK0 ] unsigned char 
  7273 ;;  i               1   75[BANK0 ] unsigned char 
  7274 ;;  i               1   74[BANK0 ] unsigned char 
  7275 ;;  month           4   86[BANK0 ] unsigned char [4]
  7276 ;;  i               1   72[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:       22 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:   11
  7293 ;; This function calls:
  7294 ;;		___awdiv
  7295 ;;		___awmod
  7296 ;;		_change_state_to_menu_12
  7297 ;;		_change_state_to_menu_22
  7298 ;;		_lcdInst
  7299 ;;		_printRTC
  7300 ;;		_printf
  7301 ;;		_strcpy
  7302 ;; This function is called by:
  7303 ;;		_main
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text23
  7308  0008CA                     __ptext23:
  7309                           	opt stack 0
  7310  0008CA                     _UI:
  7311                           	opt stack 19
  7312                           
  7313                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7314                           
  7315                           ;incstack = 0
  7316  0008CA  0E02               	movlw	2
  7317  0008CC  0100               	movlb	0	; () banked
  7318  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7319  0008D0  A4D8               	btfss	status,2,c
  7320  0008D2  D075               	goto	l8200
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7324  0008D4  0E01               	movlw	1
  7325  0008D6  EC02  F028         	call	_lcdInst
  7326  0008DA  0E68               	movlw	104
  7327  0008DC  0100               	movlb	0	; () banked
  7328  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7329  0008E0  0EE4               	movlw	228
  7330  0008E2                     u8657:
  7331  0008E2  2EE8               	decfsz	wreg,f,c
  7332  0008E4  D7FE               	bra	u8657
  7333  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7334  0008E8  D7FC               	bra	u8657
  7335  0008EA  F000               	nop	
  7336                           
  7337                           ;UI.c: 79: lcdInst(0b10000000);;
  7338  0008EC  0E80               	movlw	128
  7339  0008EE  EC02  F028         	call	_lcdInst
  7340                           
  7341                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7342  0008F2  0EA3               	movlw	low STR_1
  7343  0008F4  0100               	movlb	0	; () banked
  7344  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7345  0008F8  0EFB               	movlw	high STR_1
  7346  0008FA  0100               	movlb	0	; () banked
  7347  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7348  0008FE  0E01               	movlw	1
  7349  000900  0100               	movlb	0	; () banked
  7350  000902  25FD               	addwf	_sel& (0+255),w,b
  7351  000904  0100               	movlb	0	; () banked
  7352  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7353  000908  0100               	movlb	0	; () banked
  7354  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7355  00090C  0E00               	movlw	0
  7356  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7357  000910  ECF2  F00A         	call	_printf	;wreg free
  7358                           
  7359                           ;UI.c: 81: lcdInst(0b11000000);;
  7360  000914  0EC0               	movlw	192
  7361  000916  EC02  F028         	call	_lcdInst
  7362                           
  7363                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7364  00091A  0E0E               	movlw	14
  7365  00091C  0100               	movlb	0	; () banked
  7366  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7367  000920  0E10               	movlw	16
  7368  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7369  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7370  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7371  00092C  EC84  F020         	call	___awmod	;wreg free
  7372  000930  C080  F0C6         	movff	?___awmod,_UI$2333
  7373  000934  C081  F0C7         	movff	?___awmod+1,_UI$2333+1
  7374                           
  7375                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7376  000938  0E27               	movlw	low STR_2
  7377  00093A  0100               	movlb	0	; () banked
  7378  00093C  6F8E               	movwf	printf@f& (0+255),b
  7379  00093E  0EFF               	movlw	high STR_2
  7380  000940  0100               	movlb	0	; () banked
  7381  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7382  000944  0E0E               	movlw	14
  7383  000946  0100               	movlb	0	; () banked
  7384  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7385  00094A  0E10               	movlw	16
  7386  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7387  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7388  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7389  000956  EC84  F020         	call	___awmod	;wreg free
  7390  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7391  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7392  000962  0E00               	movlw	0
  7393  000964  0100               	movlb	0	; () banked
  7394  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7395  000968  0E3C               	movlw	60
  7396  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7397  00096C  EC72  F01F         	call	___awdiv	;wreg free
  7398  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7399  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7400  000978  C0C6  F080         	movff	_UI$2333,___awmod@dividend
  7401  00097C  C0C7  F081         	movff	_UI$2333+1,___awmod@dividend+1
  7402  000980  0E00               	movlw	0
  7403  000982  0100               	movlb	0	; () banked
  7404  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7405  000986  0E3C               	movlw	60
  7406  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7407  00098A  EC84  F020         	call	___awmod	;wreg free
  7408  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7409  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7410  000996  ECF2  F00A         	call	_printf	;wreg free
  7411                           
  7412                           ;UI.c: 83: machine_state = UI_state;
  7413  00099A  0E00               	movlw	0
  7414  00099C  0100               	movlb	0	; () banked
  7415  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7416  0009A0                     l180:
  7417  0009A0  A281               	btfss	3969,1,c	;volatile
  7418  0009A2  D7FE               	goto	l180
  7419                           
  7420                           ;UI.c: 86: }
  7421                           ;UI.c: 87: if(cur_state==12){
  7422  0009A4  0E0C               	movlw	12
  7423  0009A6  0100               	movlb	0	; () banked
  7424  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7425  0009AA  0100               	movlb	0	; () banked
  7426  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7427  0009AE  A4D8               	btfss	status,2,c
  7428  0009B0  D003               	goto	l8198
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;UI.c: 88: change_state_to_menu_12();
  7432  0009B2  EC50  F025         	call	_change_state_to_menu_12	;wreg free
  7433                           
  7434                           ;UI.c: 89: }
  7435  0009B6  D3D5               	goto	l8520
  7436  0009B8                     l8198:
  7437                           
  7438                           ;UI.c: 90: else{
  7439                           ;UI.c: 91: change_state_to_menu_22();
  7440  0009B8  EC34  F025         	call	_change_state_to_menu_22	;wreg free
  7441                           
  7442                           ;UI.c: 92: }
  7443                           ;UI.c: 93: }
  7444  0009BC  D3D2               	goto	l8520
  7445  0009BE                     l8200:
  7446                           
  7447                           ;UI.c: 94: else if(cur_state == 0){
  7448  0009BE  0100               	movlb	0	; () banked
  7449  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7450  0009C2  0100               	movlb	0	; () banked
  7451  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7452  0009C6  A4D8               	btfss	status,2,c
  7453  0009C8  D3CC               	goto	l8520
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7457  0009CA  0E00               	movlw	0
  7458  0009CC  0100               	movlb	0	; () banked
  7459  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7460  0009D0                     l8204:
  7461                           
  7462                           ; BSR set to: 0
  7463  0009D0  0E63               	movlw	99
  7464  0009D2  0100               	movlb	0	; () banked
  7465  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7466  0009D6  D001               	goto	l8208
  7467  0009D8  D00C               	goto	l8212
  7468  0009DA                     l8208:
  7469                           
  7470                           ; BSR set to: 0
  7471  0009DA  0E68               	movlw	104
  7472  0009DC  0100               	movlb	0	; () banked
  7473  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7474  0009E0  0EE4               	movlw	228
  7475  0009E2                     u8667:
  7476  0009E2  2EE8               	decfsz	wreg,f,c
  7477  0009E4  D7FE               	bra	u8667
  7478  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7479  0009E8  D7FC               	bra	u8667
  7480  0009EA  F000               	nop	
  7481  0009EC  0100               	movlb	0	; () banked
  7482  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7483  0009F0  D7EF               	goto	l8204
  7484  0009F2                     l8212:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;UI.c: 96: if(cur_state == 0){
  7488  0009F2  0100               	movlb	0	; () banked
  7489  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7490  0009F6  0100               	movlb	0	; () banked
  7491  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7492  0009FA  A4D8               	btfss	status,2,c
  7493  0009FC  D3B2               	goto	l8520
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;UI.c: 97: printRTC();
  7497  0009FE  EC06  F012         	call	_printRTC	;wreg free
  7498                           
  7499                           ;UI.c: 98: }
  7500                           ;UI.c: 99: }
  7501                           ;UI.c: 100: while(logstate){
  7502  000A02  D3AF               	goto	l8520
  7503  000A04                     l8216:
  7504                           
  7505                           ;UI.c: 102: if(!log_completion){
  7506  000A04  0100               	movlb	0	; () banked
  7507  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7508  000A08  0100               	movlb	0	; () banked
  7509  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7510  000A0C  A4D8               	btfss	status,2,c
  7511  000A0E  D041               	goto	l8246
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7515  000A10  0E01               	movlw	1
  7516  000A12  EC02  F028         	call	_lcdInst
  7517  000A16  0E68               	movlw	104
  7518  000A18  0100               	movlb	0	; () banked
  7519  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7520  000A1C  0EE4               	movlw	228
  7521  000A1E                     u8677:
  7522  000A1E  2EE8               	decfsz	wreg,f,c
  7523  000A20  D7FE               	bra	u8677
  7524  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7525  000A24  D7FC               	bra	u8677
  7526  000A26  F000               	nop	
  7527                           
  7528                           ;UI.c: 104: lcdInst(0b10000000);;
  7529  000A28  0E80               	movlw	128
  7530  000A2A  EC02  F028         	call	_lcdInst
  7531                           
  7532                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7533  000A2E  0E91               	movlw	low STR_3
  7534  000A30  0100               	movlb	0	; () banked
  7535  000A32  6F8E               	movwf	printf@f& (0+255),b
  7536  000A34  0EFB               	movlw	high STR_3
  7537  000A36  0100               	movlb	0	; () banked
  7538  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7539  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7540  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7541  000A42  ECF2  F00A         	call	_printf	;wreg free
  7542                           
  7543                           ;UI.c: 106: lcdInst(0b11000000);;
  7544  000A46  0EC0               	movlw	192
  7545  000A48  EC02  F028         	call	_lcdInst
  7546                           
  7547                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7548  000A4C  0E4A               	movlw	low STR_4
  7549  000A4E  0100               	movlb	0	; () banked
  7550  000A50  6F8E               	movwf	printf@f& (0+255),b
  7551  000A52  0EFE               	movlw	high STR_4
  7552  000A54  0100               	movlb	0	; () banked
  7553  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7554  000A58  ECF2  F00A         	call	_printf	;wreg free
  7555  000A5C                     l8230:
  7556  000A5C  0E00               	movlw	0
  7557  000A5E  0100               	movlb	0	; () banked
  7558  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7559  000A62                     l8232:
  7560                           
  7561                           ; BSR set to: 0
  7562  000A62  0E63               	movlw	99
  7563  000A64  0100               	movlb	0	; () banked
  7564  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7565  000A68  D001               	goto	l8236
  7566  000A6A  D00C               	goto	l8240
  7567  000A6C                     l8236:
  7568                           
  7569                           ; BSR set to: 0
  7570  000A6C  0E68               	movlw	104
  7571  000A6E  0100               	movlb	0	; () banked
  7572  000A70  6FC4               	movwf	??_UI& (0+255),b
  7573  000A72  0EE4               	movlw	228
  7574  000A74                     u8687:
  7575  000A74  2EE8               	decfsz	wreg,f,c
  7576  000A76  D7FE               	bra	u8687
  7577  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7578  000A7A  D7FC               	bra	u8687
  7579  000A7C  F000               	nop	
  7580  000A7E  0100               	movlb	0	; () banked
  7581  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7582  000A82  D7EF               	goto	l8232
  7583  000A84                     l8240:
  7584                           
  7585                           ; BSR set to: 0
  7586  000A84  0100               	movlb	0	; () banked
  7587  000A86  51F6               	movf	_logstate& (0+255),w,b
  7588  000A88  0100               	movlb	0	; () banked
  7589  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7590  000A8C  B4D8               	btfsc	status,2,c
  7591  000A8E  0012               	return	
  7592  000A90  D7E5               	goto	l8230
  7593  000A92                     l8246:
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;UI.c: 111: else{
  7597                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7598  000A92  0E01               	movlw	1
  7599  000A94  EC02  F028         	call	_lcdInst
  7600  000A98  0E68               	movlw	104
  7601  000A9A  0100               	movlb	0	; () banked
  7602  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7603  000A9E  0EE4               	movlw	228
  7604  000AA0                     u8697:
  7605  000AA0  2EE8               	decfsz	wreg,f,c
  7606  000AA2  D7FE               	bra	u8697
  7607  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7608  000AA6  D7FC               	bra	u8697
  7609  000AA8  F000               	nop	
  7610                           
  7611                           ;UI.c: 113: lcdInst(0b10000000);;
  7612  000AAA  0E80               	movlw	128
  7613  000AAC  EC02  F028         	call	_lcdInst
  7614                           
  7615                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7616  000AB0  0E91               	movlw	low STR_3
  7617  000AB2  0100               	movlb	0	; () banked
  7618  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7619  000AB6  0EFB               	movlw	high STR_3
  7620  000AB8  0100               	movlb	0	; () banked
  7621  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7622  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7623  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7624  000AC4  ECF2  F00A         	call	_printf	;wreg free
  7625                           
  7626                           ;UI.c: 115: lcdInst(0b11000000);;
  7627  000AC8  0EC0               	movlw	192
  7628  000ACA  EC02  F028         	call	_lcdInst
  7629                           
  7630                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7631  000ACE  0EE6               	movlw	low STR_6
  7632  000AD0  0100               	movlb	0	; () banked
  7633  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7634  000AD4  0EFD               	movlw	high STR_6
  7635  000AD6  0100               	movlb	0	; () banked
  7636  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7637  000ADA  ECF2  F00A         	call	_printf	;wreg free
  7638                           
  7639                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7640  000ADE  0E00               	movlw	0
  7641  000AE0  0100               	movlb	0	; () banked
  7642  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7643  000AE4                     l8260:
  7644                           
  7645                           ; BSR set to: 0
  7646  000AE4  0E63               	movlw	99
  7647  000AE6  0100               	movlb	0	; () banked
  7648  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7649  000AEA  D001               	goto	l8264
  7650  000AEC  D00C               	goto	l8268
  7651  000AEE                     l8264:
  7652                           
  7653                           ; BSR set to: 0
  7654  000AEE  0E68               	movlw	104
  7655  000AF0  0100               	movlb	0	; () banked
  7656  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7657  000AF4  0EE4               	movlw	228
  7658  000AF6                     u8707:
  7659  000AF6  2EE8               	decfsz	wreg,f,c
  7660  000AF8  D7FE               	bra	u8707
  7661  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7662  000AFC  D7FC               	bra	u8707
  7663  000AFE  F000               	nop	
  7664  000B00  0100               	movlb	0	; () banked
  7665  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7666  000B04  D7EF               	goto	l8260
  7667  000B06                     l8268:
  7668                           
  7669                           ; BSR set to: 0
  7670  000B06  0100               	movlb	0	; () banked
  7671  000B08  51F6               	movf	_logstate& (0+255),w,b
  7672  000B0A  0100               	movlb	0	; () banked
  7673  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7674  000B0E  B4D8               	btfsc	status,2,c
  7675  000B10  0012               	return	
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7679                           
  7680                           ; BSR set to: 0
  7681                           
  7682                           ; BSR set to: 0
  7683  000B12  0E00               	movlw	0
  7684  000B14  0100               	movlb	0	; () banked
  7685  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7686  000B18                     l8274:
  7687                           
  7688                           ; BSR set to: 0
  7689  000B18  0E63               	movlw	99
  7690  000B1A  0100               	movlb	0	; () banked
  7691  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7692  000B1E  D001               	goto	l8278
  7693  000B20  D00C               	goto	l8282
  7694  000B22                     l8278:
  7695                           
  7696                           ; BSR set to: 0
  7697  000B22  0E68               	movlw	104
  7698  000B24  0100               	movlb	0	; () banked
  7699  000B26  6FC4               	movwf	??_UI& (0+255),b
  7700  000B28  0EE4               	movlw	228
  7701  000B2A                     u8717:
  7702  000B2A  2EE8               	decfsz	wreg,f,c
  7703  000B2C  D7FE               	bra	u8717
  7704  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7705  000B30  D7FC               	bra	u8717
  7706  000B32  F000               	nop	
  7707  000B34  0100               	movlb	0	; () banked
  7708  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7709  000B38  D7EF               	goto	l8274
  7710  000B3A                     l8282:
  7711                           
  7712                           ; BSR set to: 0
  7713  000B3A  0100               	movlb	0	; () banked
  7714  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7715  000B3E  0100               	movlb	0	; () banked
  7716  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7717  000B42  B4D8               	btfsc	status,2,c
  7718  000B44  0012               	return	
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7722                           
  7723                           ; BSR set to: 0
  7724                           
  7725                           ; BSR set to: 0
  7726  000B46  0E01               	movlw	1
  7727  000B48  EC02  F028         	call	_lcdInst
  7728  000B4C  0E68               	movlw	104
  7729  000B4E  0100               	movlb	0	; () banked
  7730  000B50  6FC4               	movwf	??_UI& (0+255),b
  7731  000B52  0EE4               	movlw	228
  7732  000B54                     u8727:
  7733  000B54  2EE8               	decfsz	wreg,f,c
  7734  000B56  D7FE               	bra	u8727
  7735  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7736  000B5A  D7FC               	bra	u8727
  7737  000B5C  F000               	nop	
  7738                           
  7739                           ;UI.c: 122: lcdInst(0b10000000);;
  7740  000B5E  0E80               	movlw	128
  7741  000B60  EC02  F028         	call	_lcdInst
  7742                           
  7743                           ;UI.c: 123: printf("START:");
  7744  000B64  0EC4               	movlw	low STR_7
  7745  000B66  0100               	movlb	0	; () banked
  7746  000B68  6F8E               	movwf	printf@f& (0+255),b
  7747  000B6A  0EFF               	movlw	high STR_7
  7748  000B6C  0100               	movlb	0	; () banked
  7749  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7750  000B70  ECF2  F00A         	call	_printf	;wreg free
  7751                           
  7752                           ;UI.c: 124: lcdInst(0b11000000);;
  7753  000B74  0EC0               	movlw	192
  7754  000B76  EC02  F028         	call	_lcdInst
  7755                           
  7756                           ;UI.c: 125: char month[] = "MMM";
  7757  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7758  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7759  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7760  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7761                           
  7762                           ;UI.c: 126: switch(log_startTime[5]){
  7763  000B8A  D0C3               	goto	l8326
  7764  000B8C                     l8298:
  7765                           
  7766                           ;UI.c: 128: strcpy(month, "JAN");
  7767  000B8C  0ED6               	movlw	low UI@month
  7768  000B8E  0100               	movlb	0	; () banked
  7769  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7770  000B92  0E00               	movlw	high UI@month
  7771  000B94  0100               	movlb	0	; () banked
  7772  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7773  000B98  0EDB               	movlw	low STR_8
  7774  000B9A  0100               	movlb	0	; () banked
  7775  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7776  000B9E  0EFF               	movlw	high STR_8
  7777  000BA0  0100               	movlb	0	; () banked
  7778  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7779  000BA4  EC6C  F025         	call	_strcpy	;wreg free
  7780                           
  7781                           ;UI.c: 129: break;
  7782  000BA8  D0E6               	goto	l8328
  7783  000BAA                     l8300:
  7784                           
  7785                           ;UI.c: 131: strcpy(month, "FEB");
  7786  000BAA  0ED6               	movlw	low UI@month
  7787  000BAC  0100               	movlb	0	; () banked
  7788  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7789  000BB0  0E00               	movlw	high UI@month
  7790  000BB2  0100               	movlb	0	; () banked
  7791  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7792  000BB6  0ECB               	movlw	low STR_9
  7793  000BB8  0100               	movlb	0	; () banked
  7794  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7795  000BBC  0EFF               	movlw	high STR_9
  7796  000BBE  0100               	movlb	0	; () banked
  7797  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7798  000BC2  EC6C  F025         	call	_strcpy	;wreg free
  7799                           
  7800                           ;UI.c: 132: break;
  7801  000BC6  D0D7               	goto	l8328
  7802  000BC8                     l8302:
  7803                           
  7804                           ;UI.c: 134: strcpy(month, "MAR");
  7805  000BC8  0ED6               	movlw	low UI@month
  7806  000BCA  0100               	movlb	0	; () banked
  7807  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7808  000BCE  0E00               	movlw	high UI@month
  7809  000BD0  0100               	movlb	0	; () banked
  7810  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7811  000BD4  0EE7               	movlw	low STR_10
  7812  000BD6  0100               	movlb	0	; () banked
  7813  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7814  000BDA  0EFF               	movlw	high STR_10
  7815  000BDC  0100               	movlb	0	; () banked
  7816  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7817  000BE0  EC6C  F025         	call	_strcpy	;wreg free
  7818                           
  7819                           ;UI.c: 135: break;
  7820  000BE4  D0C8               	goto	l8328
  7821  000BE6                     l8304:
  7822                           
  7823                           ;UI.c: 137: strcpy(month, "APR");
  7824  000BE6  0ED6               	movlw	low UI@month
  7825  000BE8  0100               	movlb	0	; () banked
  7826  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7827  000BEC  0E00               	movlw	high UI@month
  7828  000BEE  0100               	movlb	0	; () banked
  7829  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7830  000BF2  0EEB               	movlw	low STR_11
  7831  000BF4  0100               	movlb	0	; () banked
  7832  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7833  000BF8  0EFF               	movlw	high STR_11
  7834  000BFA  0100               	movlb	0	; () banked
  7835  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7836  000BFE  EC6C  F025         	call	_strcpy	;wreg free
  7837                           
  7838                           ;UI.c: 138: break;
  7839  000C02  D0B9               	goto	l8328
  7840  000C04                     l8306:
  7841                           
  7842                           ;UI.c: 140: strcpy(month, "MAY");
  7843  000C04  0ED6               	movlw	low UI@month
  7844  000C06  0100               	movlb	0	; () banked
  7845  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7846  000C0A  0E00               	movlw	high UI@month
  7847  000C0C  0100               	movlb	0	; () banked
  7848  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7849  000C10  0EFB               	movlw	low STR_12
  7850  000C12  0100               	movlb	0	; () banked
  7851  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7852  000C16  0EFF               	movlw	high STR_12
  7853  000C18  0100               	movlb	0	; () banked
  7854  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7855  000C1C  EC6C  F025         	call	_strcpy	;wreg free
  7856                           
  7857                           ;UI.c: 141: break;
  7858  000C20  D0AA               	goto	l8328
  7859  000C22                     l8308:
  7860                           
  7861                           ;UI.c: 143: strcpy(month, "JUN");
  7862  000C22  0ED6               	movlw	low UI@month
  7863  000C24  0100               	movlb	0	; () banked
  7864  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7865  000C28  0E00               	movlw	high UI@month
  7866  000C2A  0100               	movlb	0	; () banked
  7867  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7868  000C2E  0EDF               	movlw	low STR_13
  7869  000C30  0100               	movlb	0	; () banked
  7870  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7871  000C34  0EFF               	movlw	high STR_13
  7872  000C36  0100               	movlb	0	; () banked
  7873  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7874  000C3A  EC6C  F025         	call	_strcpy	;wreg free
  7875                           
  7876                           ;UI.c: 144: break;
  7877  000C3E  D09B               	goto	l8328
  7878  000C40                     l8310:
  7879                           
  7880                           ;UI.c: 146: strcpy(month, "JUL");
  7881  000C40  0ED6               	movlw	low UI@month
  7882  000C42  0100               	movlb	0	; () banked
  7883  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7884  000C46  0E00               	movlw	high UI@month
  7885  000C48  0100               	movlb	0	; () banked
  7886  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7887  000C4C  0ED7               	movlw	low STR_14
  7888  000C4E  0100               	movlb	0	; () banked
  7889  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7890  000C52  0EFF               	movlw	high STR_14
  7891  000C54  0100               	movlb	0	; () banked
  7892  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7893  000C58  EC6C  F025         	call	_strcpy	;wreg free
  7894                           
  7895                           ;UI.c: 147: break;
  7896  000C5C  D08C               	goto	l8328
  7897  000C5E                     l8312:
  7898                           
  7899                           ;UI.c: 149: strcpy(month, "AUG");
  7900  000C5E  0ED6               	movlw	low UI@month
  7901  000C60  0100               	movlb	0	; () banked
  7902  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7903  000C64  0E00               	movlw	high UI@month
  7904  000C66  0100               	movlb	0	; () banked
  7905  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7906  000C6A  0ED3               	movlw	low STR_15
  7907  000C6C  0100               	movlb	0	; () banked
  7908  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7909  000C70  0EFF               	movlw	high STR_15
  7910  000C72  0100               	movlb	0	; () banked
  7911  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7912  000C76  EC6C  F025         	call	_strcpy	;wreg free
  7913                           
  7914                           ;UI.c: 150: break;
  7915  000C7A  D07D               	goto	l8328
  7916  000C7C                     l8314:
  7917                           
  7918                           ;UI.c: 152: strcpy(month, "SEP");
  7919  000C7C  0ED6               	movlw	low UI@month
  7920  000C7E  0100               	movlb	0	; () banked
  7921  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7922  000C82  0E00               	movlw	high UI@month
  7923  000C84  0100               	movlb	0	; () banked
  7924  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7925  000C88  0EE3               	movlw	low STR_16
  7926  000C8A  0100               	movlb	0	; () banked
  7927  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7928  000C8E  0EFF               	movlw	high STR_16
  7929  000C90  0100               	movlb	0	; () banked
  7930  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7931  000C94  EC6C  F025         	call	_strcpy	;wreg free
  7932                           
  7933                           ;UI.c: 153: break;
  7934  000C98  D06E               	goto	l8328
  7935  000C9A                     l8316:
  7936                           
  7937                           ;UI.c: 155: strcpy(month, "OCT");
  7938  000C9A  0ED6               	movlw	low UI@month
  7939  000C9C  0100               	movlb	0	; () banked
  7940  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7941  000CA0  0E00               	movlw	high UI@month
  7942  000CA2  0100               	movlb	0	; () banked
  7943  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7944  000CA6  0EF3               	movlw	low STR_17
  7945  000CA8  0100               	movlb	0	; () banked
  7946  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7947  000CAC  0EFF               	movlw	high STR_17
  7948  000CAE  0100               	movlb	0	; () banked
  7949  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7950  000CB2  EC6C  F025         	call	_strcpy	;wreg free
  7951                           
  7952                           ;UI.c: 156: break;
  7953  000CB6  D05F               	goto	l8328
  7954  000CB8                     l8318:
  7955                           
  7956                           ;UI.c: 158: strcpy(month, "NOV");
  7957  000CB8  0ED6               	movlw	low UI@month
  7958  000CBA  0100               	movlb	0	; () banked
  7959  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7960  000CBE  0E00               	movlw	high UI@month
  7961  000CC0  0100               	movlb	0	; () banked
  7962  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7963  000CC4  0EF7               	movlw	low STR_18
  7964  000CC6  0100               	movlb	0	; () banked
  7965  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7966  000CCA  0EFF               	movlw	high STR_18
  7967  000CCC  0100               	movlb	0	; () banked
  7968  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7969  000CD0  EC6C  F025         	call	_strcpy	;wreg free
  7970                           
  7971                           ;UI.c: 159: break;
  7972  000CD4  D050               	goto	l8328
  7973  000CD6                     l8320:
  7974                           
  7975                           ;UI.c: 161: strcpy(month, "DEC");
  7976  000CD6  0ED6               	movlw	low UI@month
  7977  000CD8  0100               	movlb	0	; () banked
  7978  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7979  000CDC  0E00               	movlw	high UI@month
  7980  000CDE  0100               	movlb	0	; () banked
  7981  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7982  000CE2  0ECF               	movlw	low STR_19
  7983  000CE4  0100               	movlb	0	; () banked
  7984  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7985  000CE8  0EFF               	movlw	high STR_19
  7986  000CEA  0100               	movlb	0	; () banked
  7987  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7988  000CEE  EC6C  F025         	call	_strcpy	;wreg free
  7989                           
  7990                           ;UI.c: 162: break;
  7991  000CF2  D041               	goto	l8328
  7992  000CF4                     l8322:
  7993                           
  7994                           ;UI.c: 164: strcpy(month, "ERR");
  7995  000CF4  0ED6               	movlw	low UI@month
  7996  000CF6  0100               	movlb	0	; () banked
  7997  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7998  000CFA  0E00               	movlw	high UI@month
  7999  000CFC  0100               	movlb	0	; () banked
  8000  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8001  000D00  0EEF               	movlw	low STR_20
  8002  000D02  0100               	movlb	0	; () banked
  8003  000D04  6F82               	movwf	strcpy@from& (0+255),b
  8004  000D06  0EFF               	movlw	high STR_20
  8005  000D08  0100               	movlb	0	; () banked
  8006  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8007  000D0C  EC6C  F025         	call	_strcpy	;wreg free
  8008                           
  8009                           ;UI.c: 166: }
  8010                           
  8011                           ;UI.c: 165: break;
  8012  000D10  D032               	goto	l8328
  8013  000D12                     l8326:
  8014  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  8015  000D16  CFDE F0C4          	movff	postinc2,??_UI
  8016  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  8017                           
  8018                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8019                           ; Switch size 1, requested type "space"
  8020                           ; Number of cases is 1, Range of values is 0 to 0
  8021                           ; switch strategies available:
  8022                           ; Name         Instructions Cycles
  8023                           ; simple_byte            4     3 (average)
  8024                           ;	Chosen strategy is simple_byte
  8025  000D1E  0100               	movlb	0	; () banked
  8026  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  8027  000D22  0A00               	xorlw	0	; case 0
  8028  000D24  A4D8               	btfss	status,2,c
  8029  000D26  D7E6               	goto	l8322
  8030                           
  8031                           ; BSR set to: 0
  8032                           ; Switch size 1, requested type "space"
  8033                           ; Number of cases is 12, Range of values is 1 to 12
  8034                           ; switch strategies available:
  8035                           ; Name         Instructions Cycles
  8036                           ; simple_byte           37    19 (average)
  8037                           ;	Chosen strategy is simple_byte
  8038  000D28  0100               	movlb	0	; () banked
  8039  000D2A  51C4               	movf	??_UI& (0+255),w,b
  8040  000D2C  0A01               	xorlw	1	; case 1
  8041  000D2E  B4D8               	btfsc	status,2,c
  8042  000D30  D72D               	goto	l8298
  8043  000D32  0A03               	xorlw	3	; case 2
  8044  000D34  B4D8               	btfsc	status,2,c
  8045  000D36  D739               	goto	l8300
  8046  000D38  0A01               	xorlw	1	; case 3
  8047  000D3A  B4D8               	btfsc	status,2,c
  8048  000D3C  D745               	goto	l8302
  8049  000D3E  0A07               	xorlw	7	; case 4
  8050  000D40  B4D8               	btfsc	status,2,c
  8051  000D42  D751               	goto	l8304
  8052  000D44  0A01               	xorlw	1	; case 5
  8053  000D46  B4D8               	btfsc	status,2,c
  8054  000D48  D75D               	goto	l8306
  8055  000D4A  0A03               	xorlw	3	; case 6
  8056  000D4C  B4D8               	btfsc	status,2,c
  8057  000D4E  D769               	goto	l8308
  8058  000D50  0A01               	xorlw	1	; case 7
  8059  000D52  B4D8               	btfsc	status,2,c
  8060  000D54  D775               	goto	l8310
  8061  000D56  0A0F               	xorlw	15	; case 8
  8062  000D58  B4D8               	btfsc	status,2,c
  8063  000D5A  D781               	goto	l8312
  8064  000D5C  0A01               	xorlw	1	; case 9
  8065  000D5E  B4D8               	btfsc	status,2,c
  8066  000D60  D78D               	goto	l8314
  8067  000D62  0A03               	xorlw	3	; case 10
  8068  000D64  B4D8               	btfsc	status,2,c
  8069  000D66  D799               	goto	l8316
  8070  000D68  0A01               	xorlw	1	; case 11
  8071  000D6A  B4D8               	btfsc	status,2,c
  8072  000D6C  D7A5               	goto	l8318
  8073  000D6E  0A07               	xorlw	7	; case 12
  8074  000D70  B4D8               	btfsc	status,2,c
  8075  000D72  D7B1               	goto	l8320
  8076  000D74  D7BF               	goto	l8322
  8077  000D76                     l8328:
  8078                           
  8079                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8080  000D76  0E0A               	movlw	low STR_21
  8081  000D78  0100               	movlb	0	; () banked
  8082  000D7A  6F8E               	movwf	printf@f& (0+255),b
  8083  000D7C  0EFB               	movlw	high STR_21
  8084  000D7E  0100               	movlb	0	; () banked
  8085  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  8086  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  8087  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  8088  000D8A  0ED6               	movlw	low UI@month
  8089  000D8C  0100               	movlb	0	; () banked
  8090  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  8091  000D90  0E00               	movlw	high UI@month
  8092  000D92  0100               	movlb	0	; () banked
  8093  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  8094  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  8095  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  8096  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  8097  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  8098  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  8099  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  8100  000DAE  ECF2  F00A         	call	_printf	;wreg free
  8101                           
  8102                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8103  000DB2  0E00               	movlw	0
  8104  000DB4  0100               	movlb	0	; () banked
  8105  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  8106  000DB8                     l8332:
  8107                           
  8108                           ; BSR set to: 0
  8109  000DB8  0E63               	movlw	99
  8110  000DBA  0100               	movlb	0	; () banked
  8111  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  8112  000DBE  D001               	goto	l8336
  8113  000DC0  D00C               	goto	l8340
  8114  000DC2                     l8336:
  8115                           
  8116                           ; BSR set to: 0
  8117  000DC2  0E68               	movlw	104
  8118  000DC4  0100               	movlb	0	; () banked
  8119  000DC6  6FC4               	movwf	??_UI& (0+255),b
  8120  000DC8  0EE4               	movlw	228
  8121  000DCA                     u8737:
  8122  000DCA  2EE8               	decfsz	wreg,f,c
  8123  000DCC  D7FE               	bra	u8737
  8124  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  8125  000DD0  D7FC               	bra	u8737
  8126  000DD2  F000               	nop	
  8127  000DD4  0100               	movlb	0	; () banked
  8128  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  8129  000DD8  D7EF               	goto	l8332
  8130  000DDA                     l8340:
  8131                           
  8132                           ; BSR set to: 0
  8133  000DDA  0100               	movlb	0	; () banked
  8134  000DDC  51F6               	movf	_logstate& (0+255),w,b
  8135  000DDE  0100               	movlb	0	; () banked
  8136  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8137  000DE2  B4D8               	btfsc	status,2,c
  8138  000DE4  0012               	return	
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8142                           
  8143                           ; BSR set to: 0
  8144                           
  8145                           ; BSR set to: 0
  8146  000DE6  0E00               	movlw	0
  8147  000DE8  0100               	movlb	0	; () banked
  8148  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  8149  000DEC                     l8346:
  8150                           
  8151                           ; BSR set to: 0
  8152  000DEC  0E63               	movlw	99
  8153  000DEE  0100               	movlb	0	; () banked
  8154  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  8155  000DF2  D001               	goto	l8350
  8156  000DF4  D00C               	goto	l8354
  8157  000DF6                     l8350:
  8158                           
  8159                           ; BSR set to: 0
  8160  000DF6  0E68               	movlw	104
  8161  000DF8  0100               	movlb	0	; () banked
  8162  000DFA  6FC4               	movwf	??_UI& (0+255),b
  8163  000DFC  0EE4               	movlw	228
  8164  000DFE                     u8747:
  8165  000DFE  2EE8               	decfsz	wreg,f,c
  8166  000E00  D7FE               	bra	u8747
  8167  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  8168  000E04  D7FC               	bra	u8747
  8169  000E06  F000               	nop	
  8170  000E08  0100               	movlb	0	; () banked
  8171  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  8172  000E0C  D7EF               	goto	l8346
  8173  000E0E                     l8354:
  8174                           
  8175                           ; BSR set to: 0
  8176  000E0E  0100               	movlb	0	; () banked
  8177  000E10  51F6               	movf	_logstate& (0+255),w,b
  8178  000E12  0100               	movlb	0	; () banked
  8179  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8180  000E16  B4D8               	btfsc	status,2,c
  8181  000E18  0012               	return	
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8185                           
  8186                           ; BSR set to: 0
  8187                           
  8188                           ; BSR set to: 0
  8189  000E1A  0E01               	movlw	1
  8190  000E1C  EC02  F028         	call	_lcdInst
  8191  000E20  0E68               	movlw	104
  8192  000E22  0100               	movlb	0	; () banked
  8193  000E24  6FC4               	movwf	??_UI& (0+255),b
  8194  000E26  0EE4               	movlw	228
  8195  000E28                     u8757:
  8196  000E28  2EE8               	decfsz	wreg,f,c
  8197  000E2A  D7FE               	bra	u8757
  8198  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  8199  000E2E  D7FC               	bra	u8757
  8200  000E30  F000               	nop	
  8201                           
  8202                           ;UI.c: 173: lcdInst(0b10000000);;
  8203  000E32  0E80               	movlw	128
  8204  000E34  EC02  F028         	call	_lcdInst
  8205                           
  8206                           ;UI.c: 174: printf("DURATION:");
  8207  000E38  0E9B               	movlw	low STR_22
  8208  000E3A  0100               	movlb	0	; () banked
  8209  000E3C  6F8E               	movwf	printf@f& (0+255),b
  8210  000E3E  0EFF               	movlw	high STR_22
  8211  000E40  0100               	movlb	0	; () banked
  8212  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8213  000E44  ECF2  F00A         	call	_printf	;wreg free
  8214                           
  8215                           ;UI.c: 175: lcdInst(0b11000000);;
  8216  000E48  0EC0               	movlw	192
  8217  000E4A  EC02  F028         	call	_lcdInst
  8218                           
  8219                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8220  000E4E  0E0E               	movlw	14
  8221  000E50  0100               	movlb	0	; () banked
  8222  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8223  000E54  0E10               	movlw	16
  8224  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  8225  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8226  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8227  000E60  EC84  F020         	call	___awmod	;wreg free
  8228  000E64  C080  F0C6         	movff	?___awmod,_UI$2333
  8229  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2333+1
  8230                           
  8231                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8232  000E6C  0E19               	movlw	low STR_23
  8233  000E6E  0100               	movlb	0	; () banked
  8234  000E70  6F8E               	movwf	printf@f& (0+255),b
  8235  000E72  0EFF               	movlw	high STR_23
  8236  000E74  0100               	movlb	0	; () banked
  8237  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  8238  000E78  0E0E               	movlw	14
  8239  000E7A  0100               	movlb	0	; () banked
  8240  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8241  000E7E  0E10               	movlw	16
  8242  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  8243  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8244  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8245  000E8A  EC84  F020         	call	___awmod	;wreg free
  8246  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  8247  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8248  000E96  0E00               	movlw	0
  8249  000E98  0100               	movlb	0	; () banked
  8250  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8251  000E9C  0E3C               	movlw	60
  8252  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  8253  000EA0  EC72  F01F         	call	___awdiv	;wreg free
  8254  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  8255  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  8256  000EAC  C0C6  F080         	movff	_UI$2333,___awmod@dividend
  8257  000EB0  C0C7  F081         	movff	_UI$2333+1,___awmod@dividend+1
  8258  000EB4  0E00               	movlw	0
  8259  000EB6  0100               	movlb	0	; () banked
  8260  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8261  000EBA  0E3C               	movlw	60
  8262  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8263  000EBE  EC84  F020         	call	___awmod	;wreg free
  8264  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  8265  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  8266  000ECA  ECF2  F00A         	call	_printf	;wreg free
  8267                           
  8268                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8269  000ECE  0E00               	movlw	0
  8270  000ED0  0100               	movlb	0	; () banked
  8271  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  8272  000ED4                     l8374:
  8273                           
  8274                           ; BSR set to: 0
  8275  000ED4  0E63               	movlw	99
  8276  000ED6  0100               	movlb	0	; () banked
  8277  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  8278  000EDA  D001               	goto	l8378
  8279  000EDC  D00C               	goto	l8382
  8280  000EDE                     l8378:
  8281                           
  8282                           ; BSR set to: 0
  8283  000EDE  0E68               	movlw	104
  8284  000EE0  0100               	movlb	0	; () banked
  8285  000EE2  6FC4               	movwf	??_UI& (0+255),b
  8286  000EE4  0EE4               	movlw	228
  8287  000EE6                     u8767:
  8288  000EE6  2EE8               	decfsz	wreg,f,c
  8289  000EE8  D7FE               	bra	u8767
  8290  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  8291  000EEC  D7FC               	bra	u8767
  8292  000EEE  F000               	nop	
  8293  000EF0  0100               	movlb	0	; () banked
  8294  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  8295  000EF4  D7EF               	goto	l8374
  8296  000EF6                     l8382:
  8297                           
  8298                           ; BSR set to: 0
  8299  000EF6  0100               	movlb	0	; () banked
  8300  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8301  000EFA  0100               	movlb	0	; () banked
  8302  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8303  000EFE  B4D8               	btfsc	status,2,c
  8304  000F00  0012               	return	
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8308                           
  8309                           ; BSR set to: 0
  8310                           
  8311                           ; BSR set to: 0
  8312  000F02  0E00               	movlw	0
  8313  000F04  0100               	movlb	0	; () banked
  8314  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8315  000F08                     l8388:
  8316                           
  8317                           ; BSR set to: 0
  8318  000F08  0E63               	movlw	99
  8319  000F0A  0100               	movlb	0	; () banked
  8320  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8321  000F0E  D001               	goto	l8392
  8322  000F10  D00C               	goto	l8396
  8323  000F12                     l8392:
  8324                           
  8325                           ; BSR set to: 0
  8326  000F12  0E68               	movlw	104
  8327  000F14  0100               	movlb	0	; () banked
  8328  000F16  6FC4               	movwf	??_UI& (0+255),b
  8329  000F18  0EE4               	movlw	228
  8330  000F1A                     u8777:
  8331  000F1A  2EE8               	decfsz	wreg,f,c
  8332  000F1C  D7FE               	bra	u8777
  8333  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8334  000F20  D7FC               	bra	u8777
  8335  000F22  F000               	nop	
  8336  000F24  0100               	movlb	0	; () banked
  8337  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8338  000F28  D7EF               	goto	l8388
  8339  000F2A                     l8396:
  8340                           
  8341                           ; BSR set to: 0
  8342  000F2A  0100               	movlb	0	; () banked
  8343  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8344  000F2E  0100               	movlb	0	; () banked
  8345  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8346  000F32  B4D8               	btfsc	status,2,c
  8347  000F34  0012               	return	
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8351                           
  8352                           ; BSR set to: 0
  8353                           
  8354                           ; BSR set to: 0
  8355  000F36  0E01               	movlw	1
  8356  000F38  EC02  F028         	call	_lcdInst
  8357  000F3C  0E68               	movlw	104
  8358  000F3E  0100               	movlb	0	; () banked
  8359  000F40  6FC4               	movwf	??_UI& (0+255),b
  8360  000F42  0EE4               	movlw	228
  8361  000F44                     u8787:
  8362  000F44  2EE8               	decfsz	wreg,f,c
  8363  000F46  D7FE               	bra	u8787
  8364  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8365  000F4A  D7FC               	bra	u8787
  8366  000F4C  F000               	nop	
  8367                           
  8368                           ;UI.c: 182: lcdInst(0b10000000);;
  8369  000F4E  0E80               	movlw	128
  8370  000F50  EC02  F028         	call	_lcdInst
  8371                           
  8372                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8373  000F54  0E3C               	movlw	low STR_24
  8374  000F56  0100               	movlb	0	; () banked
  8375  000F58  6F8E               	movwf	printf@f& (0+255),b
  8376  000F5A  0EFD               	movlw	high STR_24
  8377  000F5C  0100               	movlb	0	; () banked
  8378  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8379  000F60  ECF2  F00A         	call	_printf	;wreg free
  8380                           
  8381                           ;UI.c: 184: lcdInst(0b11000000);;
  8382  000F64  0EC0               	movlw	192
  8383  000F66  EC02  F028         	call	_lcdInst
  8384                           
  8385                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8386  000F6A  0E19               	movlw	low STR_25
  8387  000F6C  0100               	movlb	0	; () banked
  8388  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8389  000F70  0EFE               	movlw	high STR_25
  8390  000F72  0100               	movlb	0	; () banked
  8391  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8392  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8393  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8394  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8395  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8396  000F86  ECF2  F00A         	call	_printf	;wreg free
  8397                           
  8398                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8399  000F8A  0E00               	movlw	0
  8400  000F8C  0100               	movlb	0	; () banked
  8401  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8402  000F90                     l8414:
  8403                           
  8404                           ; BSR set to: 0
  8405  000F90  0E63               	movlw	99
  8406  000F92  0100               	movlb	0	; () banked
  8407  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8408  000F96  D001               	goto	l8418
  8409  000F98  D00C               	goto	l8422
  8410  000F9A                     l8418:
  8411                           
  8412                           ; BSR set to: 0
  8413  000F9A  0E68               	movlw	104
  8414  000F9C  0100               	movlb	0	; () banked
  8415  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8416  000FA0  0EE4               	movlw	228
  8417  000FA2                     u8797:
  8418  000FA2  2EE8               	decfsz	wreg,f,c
  8419  000FA4  D7FE               	bra	u8797
  8420  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8421  000FA8  D7FC               	bra	u8797
  8422  000FAA  F000               	nop	
  8423  000FAC  0100               	movlb	0	; () banked
  8424  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8425  000FB0  D7EF               	goto	l8414
  8426  000FB2                     l8422:
  8427                           
  8428                           ; BSR set to: 0
  8429  000FB2  0100               	movlb	0	; () banked
  8430  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8431  000FB6  0100               	movlb	0	; () banked
  8432  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8433  000FBA  B4D8               	btfsc	status,2,c
  8434  000FBC  0012               	return	
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8438                           
  8439                           ; BSR set to: 0
  8440                           
  8441                           ; BSR set to: 0
  8442  000FBE  0E00               	movlw	0
  8443  000FC0  0100               	movlb	0	; () banked
  8444  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8445  000FC4                     l8428:
  8446                           
  8447                           ; BSR set to: 0
  8448  000FC4  0E63               	movlw	99
  8449  000FC6  0100               	movlb	0	; () banked
  8450  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8451  000FCA  D001               	goto	l8432
  8452  000FCC  D00C               	goto	l8436
  8453  000FCE                     l8432:
  8454                           
  8455                           ; BSR set to: 0
  8456  000FCE  0E68               	movlw	104
  8457  000FD0  0100               	movlb	0	; () banked
  8458  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8459  000FD4  0EE4               	movlw	228
  8460  000FD6                     u8807:
  8461  000FD6  2EE8               	decfsz	wreg,f,c
  8462  000FD8  D7FE               	bra	u8807
  8463  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8464  000FDC  D7FC               	bra	u8807
  8465  000FDE  F000               	nop	
  8466  000FE0  0100               	movlb	0	; () banked
  8467  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8468  000FE4  D7EF               	goto	l8428
  8469  000FE6                     l8436:
  8470                           
  8471                           ; BSR set to: 0
  8472  000FE6  0100               	movlb	0	; () banked
  8473  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8474  000FEA  0100               	movlb	0	; () banked
  8475  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8476  000FEE  B4D8               	btfsc	status,2,c
  8477  000FF0  0012               	return	
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8481                           
  8482                           ; BSR set to: 0
  8483                           
  8484                           ; BSR set to: 0
  8485  000FF2  0E01               	movlw	1
  8486  000FF4  EC02  F028         	call	_lcdInst
  8487  000FF8  0E68               	movlw	104
  8488  000FFA  0100               	movlb	0	; () banked
  8489  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8490  000FFE  0EE4               	movlw	228
  8491  001000                     u8817:
  8492  001000  2EE8               	decfsz	wreg,f,c
  8493  001002  D7FE               	bra	u8817
  8494  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8495  001006  D7FC               	bra	u8817
  8496  001008  F000               	nop	
  8497                           
  8498                           ;UI.c: 191: lcdInst(0b10000000);;
  8499  00100A  0E80               	movlw	128
  8500  00100C  EC02  F028         	call	_lcdInst
  8501                           
  8502                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8503  001010  0E4D               	movlw	low STR_26
  8504  001012  0100               	movlb	0	; () banked
  8505  001014  6F8E               	movwf	printf@f& (0+255),b
  8506  001016  0EFD               	movlw	high STR_26
  8507  001018  0100               	movlb	0	; () banked
  8508  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8509  00101C  ECF2  F00A         	call	_printf	;wreg free
  8510                           
  8511                           ;UI.c: 193: lcdInst(0b11000000);;
  8512  001020  0EC0               	movlw	192
  8513  001022  EC02  F028         	call	_lcdInst
  8514                           
  8515                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8516  001026  0E08               	movlw	low STR_27
  8517  001028  0100               	movlb	0	; () banked
  8518  00102A  6F8E               	movwf	printf@f& (0+255),b
  8519  00102C  0EFE               	movlw	high STR_27
  8520  00102E  0100               	movlb	0	; () banked
  8521  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8522  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8523  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8524  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8525  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8526  001042  ECF2  F00A         	call	_printf	;wreg free
  8527                           
  8528                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8529  001046  0E00               	movlw	0
  8530  001048  0100               	movlb	0	; () banked
  8531  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8532  00104C                     l8454:
  8533                           
  8534                           ; BSR set to: 0
  8535  00104C  0E63               	movlw	99
  8536  00104E  0100               	movlb	0	; () banked
  8537  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8538  001052  D001               	goto	l8458
  8539  001054  D00C               	goto	l8462
  8540  001056                     l8458:
  8541                           
  8542                           ; BSR set to: 0
  8543  001056  0E68               	movlw	104
  8544  001058  0100               	movlb	0	; () banked
  8545  00105A  6FC4               	movwf	??_UI& (0+255),b
  8546  00105C  0EE4               	movlw	228
  8547  00105E                     u8827:
  8548  00105E  2EE8               	decfsz	wreg,f,c
  8549  001060  D7FE               	bra	u8827
  8550  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8551  001064  D7FC               	bra	u8827
  8552  001066  F000               	nop	
  8553  001068  0100               	movlb	0	; () banked
  8554  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8555  00106C  D7EF               	goto	l8454
  8556  00106E                     l8462:
  8557                           
  8558                           ; BSR set to: 0
  8559  00106E  0100               	movlb	0	; () banked
  8560  001070  51F6               	movf	_logstate& (0+255),w,b
  8561  001072  0100               	movlb	0	; () banked
  8562  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8563  001076  B4D8               	btfsc	status,2,c
  8564  001078  0012               	return	
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8568                           
  8569                           ; BSR set to: 0
  8570                           
  8571                           ; BSR set to: 0
  8572  00107A  0E00               	movlw	0
  8573  00107C  0100               	movlb	0	; () banked
  8574  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8575  001080                     l8468:
  8576                           
  8577                           ; BSR set to: 0
  8578  001080  0E63               	movlw	99
  8579  001082  0100               	movlb	0	; () banked
  8580  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8581  001086  D001               	goto	l8472
  8582  001088  D00C               	goto	l8476
  8583  00108A                     l8472:
  8584                           
  8585                           ; BSR set to: 0
  8586  00108A  0E68               	movlw	104
  8587  00108C  0100               	movlb	0	; () banked
  8588  00108E  6FC4               	movwf	??_UI& (0+255),b
  8589  001090  0EE4               	movlw	228
  8590  001092                     u8837:
  8591  001092  2EE8               	decfsz	wreg,f,c
  8592  001094  D7FE               	bra	u8837
  8593  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8594  001098  D7FC               	bra	u8837
  8595  00109A  F000               	nop	
  8596  00109C  0100               	movlb	0	; () banked
  8597  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8598  0010A0  D7EF               	goto	l8468
  8599  0010A2                     l8476:
  8600                           
  8601                           ; BSR set to: 0
  8602  0010A2  0100               	movlb	0	; () banked
  8603  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8604  0010A6  0100               	movlb	0	; () banked
  8605  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8606  0010AA  B4D8               	btfsc	status,2,c
  8607  0010AC  0012               	return	
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8611                           
  8612                           ; BSR set to: 0
  8613                           
  8614                           ; BSR set to: 0
  8615  0010AE  0E01               	movlw	1
  8616  0010B0  EC02  F028         	call	_lcdInst
  8617  0010B4  0E68               	movlw	104
  8618  0010B6  0100               	movlb	0	; () banked
  8619  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8620  0010BA  0EE4               	movlw	228
  8621  0010BC                     u8847:
  8622  0010BC  2EE8               	decfsz	wreg,f,c
  8623  0010BE  D7FE               	bra	u8847
  8624  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8625  0010C2  D7FC               	bra	u8847
  8626  0010C4  F000               	nop	
  8627                           
  8628                           ;UI.c: 200: lcdInst(0b10000000);;
  8629  0010C6  0E80               	movlw	128
  8630  0010C8  EC02  F028         	call	_lcdInst
  8631                           
  8632                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8633  0010CC  0E5E               	movlw	low STR_28
  8634  0010CE  0100               	movlb	0	; () banked
  8635  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8636  0010D2  0EFD               	movlw	high STR_28
  8637  0010D4  0100               	movlb	0	; () banked
  8638  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8639  0010D8  ECF2  F00A         	call	_printf	;wreg free
  8640                           
  8641                           ;UI.c: 202: lcdInst(0b11000000);;
  8642  0010DC  0EC0               	movlw	192
  8643  0010DE  EC02  F028         	call	_lcdInst
  8644                           
  8645                           ;UI.c: 203: printf("%d", log_count_total);
  8646  0010E2  0E16               	movlw	low (STR_27+14)
  8647  0010E4  0100               	movlb	0	; () banked
  8648  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8649  0010E8  0EFE               	movlw	high (STR_27+14)
  8650  0010EA  0100               	movlb	0	; () banked
  8651  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8652  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8653  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8654  0010F6  ECF2  F00A         	call	_printf	;wreg free
  8655                           
  8656                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8657  0010FA  0E00               	movlw	0
  8658  0010FC  0100               	movlb	0	; () banked
  8659  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8660  001100                     l8494:
  8661                           
  8662                           ; BSR set to: 0
  8663  001100  0E63               	movlw	99
  8664  001102  0100               	movlb	0	; () banked
  8665  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8666  001106  D001               	goto	l8498
  8667  001108  D00C               	goto	l8502
  8668  00110A                     l8498:
  8669                           
  8670                           ; BSR set to: 0
  8671  00110A  0E68               	movlw	104
  8672  00110C  0100               	movlb	0	; () banked
  8673  00110E  6FC4               	movwf	??_UI& (0+255),b
  8674  001110  0EE4               	movlw	228
  8675  001112                     u8857:
  8676  001112  2EE8               	decfsz	wreg,f,c
  8677  001114  D7FE               	bra	u8857
  8678  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8679  001118  D7FC               	bra	u8857
  8680  00111A  F000               	nop	
  8681  00111C  0100               	movlb	0	; () banked
  8682  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8683  001120  D7EF               	goto	l8494
  8684  001122                     l8502:
  8685                           
  8686                           ; BSR set to: 0
  8687  001122  0100               	movlb	0	; () banked
  8688  001124  51F6               	movf	_logstate& (0+255),w,b
  8689  001126  0100               	movlb	0	; () banked
  8690  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8691  00112A  B4D8               	btfsc	status,2,c
  8692  00112C  0012               	return	
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8696                           
  8697                           ; BSR set to: 0
  8698                           
  8699                           ; BSR set to: 0
  8700  00112E  0E00               	movlw	0
  8701  001130  0100               	movlb	0	; () banked
  8702  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8703  001134                     l8508:
  8704                           
  8705                           ; BSR set to: 0
  8706  001134  0E63               	movlw	99
  8707  001136  0100               	movlb	0	; () banked
  8708  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8709  00113A  D001               	goto	l8512
  8710  00113C  D00C               	goto	l8516
  8711  00113E                     l8512:
  8712                           
  8713                           ; BSR set to: 0
  8714  00113E  0E68               	movlw	104
  8715  001140  0100               	movlb	0	; () banked
  8716  001142  6FC4               	movwf	??_UI& (0+255),b
  8717  001144  0EE4               	movlw	228
  8718  001146                     u8867:
  8719  001146  2EE8               	decfsz	wreg,f,c
  8720  001148  D7FE               	bra	u8867
  8721  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8722  00114C  D7FC               	bra	u8867
  8723  00114E  F000               	nop	
  8724  001150  0100               	movlb	0	; () banked
  8725  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8726  001154  D7EF               	goto	l8508
  8727  001156                     l8516:
  8728                           
  8729                           ; BSR set to: 0
  8730  001156  0100               	movlb	0	; () banked
  8731  001158  51F6               	movf	_logstate& (0+255),w,b
  8732  00115A  0100               	movlb	0	; () banked
  8733  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8734  00115E  B4D8               	btfsc	status,2,c
  8735  001160  0012               	return	
  8736  001162                     l8520:
  8737  001162  0100               	movlb	0	; () banked
  8738  001164  51F6               	movf	_logstate& (0+255),w,b
  8739  001166  0100               	movlb	0	; () banked
  8740  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8741  00116A  B4D8               	btfsc	status,2,c
  8742  00116C  0012               	return	
  8743  00116E  D44A               	goto	l8216
  8744  001170                     __end_of_UI:
  8745                           	opt stack 0
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon	equ	0xFF2
  8753                           intcon2	equ	0xFF1
  8754                           intcon3	equ	0xFF0
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           postdec1	equ	0xFE5
  8758                           fsr1l	equ	0xFE1
  8759                           indf2	equ	0xFDF
  8760                           postinc2	equ	0xFDE
  8761                           postdec2	equ	0xFDD
  8762                           fsr2h	equ	0xFDA
  8763                           fsr2l	equ	0xFD9
  8764                           status	equ	0xFD8
  8765                           
  8766 ;; *************** function _printRTC *****************
  8767 ;; Defined at:
  8768 ;;		line 63 in file "RTC.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  i               2   66[BANK0 ] int 
  8773 ;;  INT_time       14   46[BANK0 ] int [7]
  8774 ;;  month           4   62[BANK0 ] unsigned char [4]
  8775 ;;  RTC_month       2   60[BANK0 ] int 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:       25 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:   10
  8792 ;; This function calls:
  8793 ;;		_getRTC
  8794 ;;		_lcdInst
  8795 ;;		_printf
  8796 ;;		_strcpy
  8797 ;; This function is called by:
  8798 ;;		_UI
  8799 ;;		_change_state_to_menu_start
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text24
  8804  00240C                     __ptext24:
  8805                           	opt stack 0
  8806  00240C                     _printRTC:
  8807                           	opt stack 18
  8808                           
  8809                           ;RTC.c: 64: getRTC();
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;incstack = 0
  8813  00240C  EC1B  F021         	call	_getRTC	;wreg free
  8814                           
  8815                           ;RTC.c: 65: char month[] = "MMM";
  8816  002410  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8817  002414  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8818  002418  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8819  00241C  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8820                           
  8821                           ;RTC.c: 66: int INT_time[7];
  8822                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8823  002420  0E00               	movlw	0
  8824  002422  0100               	movlb	0	; () banked
  8825  002424  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8826  002426  0E00               	movlw	0
  8827  002428  6FC2               	movwf	printRTC@i& (0+255),b
  8828                           
  8829                           ; BSR set to: 0
  8830  00242A  0100               	movlb	0	; () banked
  8831  00242C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8832  00242E  D008               	goto	l6326
  8833  002430  0100               	movlb	0	; () banked
  8834  002432  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8835  002434  E146               	bnz	l606
  8836  002436  0E07               	movlw	7
  8837  002438  0100               	movlb	0	; () banked
  8838  00243A  5DC2               	subwf	printRTC@i& (0+255),w,b
  8839  00243C  B0D8               	btfsc	status,0,c
  8840  00243E  D041               	goto	l606
  8841  002440                     l6326:
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8845  002440  0E24               	movlw	low _time
  8846  002442  0100               	movlb	0	; () banked
  8847  002444  25C2               	addwf	printRTC@i& (0+255),w,b
  8848  002446  6ED9               	movwf	fsr2l,c
  8849  002448  0E01               	movlw	high _time
  8850  00244A  0100               	movlb	0	; () banked
  8851  00244C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8852  00244E  6EDA               	movwf	fsr2h,c
  8853  002450  50DF               	movf	indf2,w,c
  8854  002452  0100               	movlb	0	; () banked
  8855  002454  6FAB               	movwf	??_printRTC& (0+255),b
  8856  002456  0100               	movlb	0	; () banked
  8857  002458  3BAB               	swapf	??_printRTC& (0+255),f,b
  8858  00245A  0E0F               	movlw	15
  8859  00245C  17AB               	andwf	??_printRTC& (0+255),f,b
  8860  00245E  0E0F               	movlw	15
  8861  002460  0100               	movlb	0	; () banked
  8862  002462  17AB               	andwf	??_printRTC& (0+255),f,b
  8863  002464  0100               	movlb	0	; () banked
  8864  002466  51AB               	movf	??_printRTC& (0+255),w,b
  8865  002468  0D0A               	mullw	10
  8866  00246A  0E24               	movlw	low _time
  8867  00246C  0100               	movlb	0	; () banked
  8868  00246E  25C2               	addwf	printRTC@i& (0+255),w,b
  8869  002470  6ED9               	movwf	fsr2l,c
  8870  002472  0E01               	movlw	high _time
  8871  002474  0100               	movlb	0	; () banked
  8872  002476  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8873  002478  6EDA               	movwf	fsr2h,c
  8874  00247A  50DF               	movf	indf2,w,c
  8875  00247C  0B0F               	andlw	15
  8876  00247E  0100               	movlb	0	; () banked
  8877  002480  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8878  002482  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8879  002484  50F3               	movf	prodl,w,c
  8880  002486  0100               	movlb	0	; () banked
  8881  002488  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8882  00248A  50F4               	movf	prodh,w,c
  8883  00248C  0100               	movlb	0	; () banked
  8884  00248E  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8885  002490  90D8               	bcf	status,0,c
  8886  002492  0100               	movlb	0	; () banked
  8887  002494  35C2               	rlcf	printRTC@i& (0+255),w,b
  8888  002496  6ED9               	movwf	fsr2l,c
  8889  002498  0100               	movlb	0	; () banked
  8890  00249A  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8891  00249C  6EDA               	movwf	fsr2h,c
  8892  00249E  0EAE               	movlw	low printRTC@INT_time
  8893  0024A0  26D9               	addwf	fsr2l,f,c
  8894  0024A2  0E00               	movlw	high printRTC@INT_time
  8895  0024A4  22DA               	addwfc	fsr2h,f,c
  8896  0024A6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8897  0024AA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8898                           
  8899                           ; BSR set to: 0
  8900  0024AE  0100               	movlb	0	; () banked
  8901  0024B0  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8902  0024B2  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8903                           
  8904                           ; BSR set to: 0
  8905  0024B4  0100               	movlb	0	; () banked
  8906  0024B6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8907  0024B8  D7C3               	goto	l6326
  8908  0024BA  0100               	movlb	0	; () banked
  8909  0024BC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8910  0024BE  E101               	bnz	u5070
  8911  0024C0  D7BA               	goto	L9
  8912  0024C2                     u5070:
  8913  0024C2                     l606:
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;RTC.c: 69: }
  8917                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8918  0024C2  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8919  0024C6  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8920                           
  8921                           ;RTC.c: 71: switch(RTC_month){
  8922  0024CA  D0B4               	goto	l6358
  8923  0024CC                     l6332:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;RTC.c: 73: strcpy(month, "JAN");
  8927  0024CC  0EBE               	movlw	low printRTC@month
  8928  0024CE  0100               	movlb	0	; () banked
  8929  0024D0  6F80               	movwf	strcpy@to& (0+255),b
  8930  0024D2  0E00               	movlw	high printRTC@month
  8931  0024D4  0100               	movlb	0	; () banked
  8932  0024D6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8933  0024D8  0EDB               	movlw	low STR_8
  8934  0024DA  0100               	movlb	0	; () banked
  8935  0024DC  6F82               	movwf	strcpy@from& (0+255),b
  8936  0024DE  0EFF               	movlw	high STR_8
  8937  0024E0  0100               	movlb	0	; () banked
  8938  0024E2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8939  0024E4  EC6C  F025         	call	_strcpy	;wreg free
  8940                           
  8941                           ;RTC.c: 74: break;
  8942  0024E8  D0D4               	goto	l6360
  8943  0024EA                     l6334:
  8944                           
  8945                           ;RTC.c: 76: strcpy(month, "FEB");
  8946  0024EA  0EBE               	movlw	low printRTC@month
  8947  0024EC  0100               	movlb	0	; () banked
  8948  0024EE  6F80               	movwf	strcpy@to& (0+255),b
  8949  0024F0  0E00               	movlw	high printRTC@month
  8950  0024F2  0100               	movlb	0	; () banked
  8951  0024F4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8952  0024F6  0ECB               	movlw	low STR_9
  8953  0024F8  0100               	movlb	0	; () banked
  8954  0024FA  6F82               	movwf	strcpy@from& (0+255),b
  8955  0024FC  0EFF               	movlw	high STR_9
  8956  0024FE  0100               	movlb	0	; () banked
  8957  002500  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8958  002502  EC6C  F025         	call	_strcpy	;wreg free
  8959                           
  8960                           ;RTC.c: 77: break;
  8961  002506  D0C5               	goto	l6360
  8962  002508                     l6336:
  8963                           
  8964                           ;RTC.c: 79: strcpy(month, "MAR");
  8965  002508  0EBE               	movlw	low printRTC@month
  8966  00250A  0100               	movlb	0	; () banked
  8967  00250C  6F80               	movwf	strcpy@to& (0+255),b
  8968  00250E  0E00               	movlw	high printRTC@month
  8969  002510  0100               	movlb	0	; () banked
  8970  002512  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8971  002514  0EE7               	movlw	low STR_10
  8972  002516  0100               	movlb	0	; () banked
  8973  002518  6F82               	movwf	strcpy@from& (0+255),b
  8974  00251A  0EFF               	movlw	high STR_10
  8975  00251C  0100               	movlb	0	; () banked
  8976  00251E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8977  002520  EC6C  F025         	call	_strcpy	;wreg free
  8978                           
  8979                           ;RTC.c: 80: break;
  8980  002524  D0B6               	goto	l6360
  8981  002526                     l6338:
  8982                           
  8983                           ;RTC.c: 82: strcpy(month, "APR");
  8984  002526  0EBE               	movlw	low printRTC@month
  8985  002528  0100               	movlb	0	; () banked
  8986  00252A  6F80               	movwf	strcpy@to& (0+255),b
  8987  00252C  0E00               	movlw	high printRTC@month
  8988  00252E  0100               	movlb	0	; () banked
  8989  002530  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8990  002532  0EEB               	movlw	low STR_11
  8991  002534  0100               	movlb	0	; () banked
  8992  002536  6F82               	movwf	strcpy@from& (0+255),b
  8993  002538  0EFF               	movlw	high STR_11
  8994  00253A  0100               	movlb	0	; () banked
  8995  00253C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8996  00253E  EC6C  F025         	call	_strcpy	;wreg free
  8997                           
  8998                           ;RTC.c: 83: break;
  8999  002542  D0A7               	goto	l6360
  9000  002544                     l6340:
  9001                           
  9002                           ;RTC.c: 85: strcpy(month, "MAY");
  9003  002544  0EBE               	movlw	low printRTC@month
  9004  002546  0100               	movlb	0	; () banked
  9005  002548  6F80               	movwf	strcpy@to& (0+255),b
  9006  00254A  0E00               	movlw	high printRTC@month
  9007  00254C  0100               	movlb	0	; () banked
  9008  00254E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9009  002550  0EFB               	movlw	low STR_12
  9010  002552  0100               	movlb	0	; () banked
  9011  002554  6F82               	movwf	strcpy@from& (0+255),b
  9012  002556  0EFF               	movlw	high STR_12
  9013  002558  0100               	movlb	0	; () banked
  9014  00255A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9015  00255C  EC6C  F025         	call	_strcpy	;wreg free
  9016                           
  9017                           ;RTC.c: 86: break;
  9018  002560  D098               	goto	l6360
  9019  002562                     l6342:
  9020                           
  9021                           ;RTC.c: 88: strcpy(month, "JUN");
  9022  002562  0EBE               	movlw	low printRTC@month
  9023  002564  0100               	movlb	0	; () banked
  9024  002566  6F80               	movwf	strcpy@to& (0+255),b
  9025  002568  0E00               	movlw	high printRTC@month
  9026  00256A  0100               	movlb	0	; () banked
  9027  00256C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9028  00256E  0EDF               	movlw	low STR_13
  9029  002570  0100               	movlb	0	; () banked
  9030  002572  6F82               	movwf	strcpy@from& (0+255),b
  9031  002574  0EFF               	movlw	high STR_13
  9032  002576  0100               	movlb	0	; () banked
  9033  002578  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9034  00257A  EC6C  F025         	call	_strcpy	;wreg free
  9035                           
  9036                           ;RTC.c: 89: break;
  9037  00257E  D089               	goto	l6360
  9038  002580                     l6344:
  9039                           
  9040                           ;RTC.c: 91: strcpy(month, "JUL");
  9041  002580  0EBE               	movlw	low printRTC@month
  9042  002582  0100               	movlb	0	; () banked
  9043  002584  6F80               	movwf	strcpy@to& (0+255),b
  9044  002586  0E00               	movlw	high printRTC@month
  9045  002588  0100               	movlb	0	; () banked
  9046  00258A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9047  00258C  0ED7               	movlw	low STR_14
  9048  00258E  0100               	movlb	0	; () banked
  9049  002590  6F82               	movwf	strcpy@from& (0+255),b
  9050  002592  0EFF               	movlw	high STR_14
  9051  002594  0100               	movlb	0	; () banked
  9052  002596  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9053  002598  EC6C  F025         	call	_strcpy	;wreg free
  9054                           
  9055                           ;RTC.c: 92: break;
  9056  00259C  D07A               	goto	l6360
  9057  00259E                     l6346:
  9058                           
  9059                           ;RTC.c: 94: strcpy(month, "AUG");
  9060  00259E  0EBE               	movlw	low printRTC@month
  9061  0025A0  0100               	movlb	0	; () banked
  9062  0025A2  6F80               	movwf	strcpy@to& (0+255),b
  9063  0025A4  0E00               	movlw	high printRTC@month
  9064  0025A6  0100               	movlb	0	; () banked
  9065  0025A8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9066  0025AA  0ED3               	movlw	low STR_15
  9067  0025AC  0100               	movlb	0	; () banked
  9068  0025AE  6F82               	movwf	strcpy@from& (0+255),b
  9069  0025B0  0EFF               	movlw	high STR_15
  9070  0025B2  0100               	movlb	0	; () banked
  9071  0025B4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9072  0025B6  EC6C  F025         	call	_strcpy	;wreg free
  9073                           
  9074                           ;RTC.c: 95: break;
  9075  0025BA  D06B               	goto	l6360
  9076  0025BC                     l6348:
  9077                           
  9078                           ;RTC.c: 97: strcpy(month, "SEP");
  9079  0025BC  0EBE               	movlw	low printRTC@month
  9080  0025BE  0100               	movlb	0	; () banked
  9081  0025C0  6F80               	movwf	strcpy@to& (0+255),b
  9082  0025C2  0E00               	movlw	high printRTC@month
  9083  0025C4  0100               	movlb	0	; () banked
  9084  0025C6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9085  0025C8  0EE3               	movlw	low STR_16
  9086  0025CA  0100               	movlb	0	; () banked
  9087  0025CC  6F82               	movwf	strcpy@from& (0+255),b
  9088  0025CE  0EFF               	movlw	high STR_16
  9089  0025D0  0100               	movlb	0	; () banked
  9090  0025D2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9091  0025D4  EC6C  F025         	call	_strcpy	;wreg free
  9092                           
  9093                           ;RTC.c: 98: break;
  9094  0025D8  D05C               	goto	l6360
  9095  0025DA                     l6350:
  9096                           
  9097                           ;RTC.c: 100: strcpy(month, "OCT");
  9098  0025DA  0EBE               	movlw	low printRTC@month
  9099  0025DC  0100               	movlb	0	; () banked
  9100  0025DE  6F80               	movwf	strcpy@to& (0+255),b
  9101  0025E0  0E00               	movlw	high printRTC@month
  9102  0025E2  0100               	movlb	0	; () banked
  9103  0025E4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9104  0025E6  0EF3               	movlw	low STR_17
  9105  0025E8  0100               	movlb	0	; () banked
  9106  0025EA  6F82               	movwf	strcpy@from& (0+255),b
  9107  0025EC  0EFF               	movlw	high STR_17
  9108  0025EE  0100               	movlb	0	; () banked
  9109  0025F0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9110  0025F2  EC6C  F025         	call	_strcpy	;wreg free
  9111                           
  9112                           ;RTC.c: 101: break;
  9113  0025F6  D04D               	goto	l6360
  9114  0025F8                     l6352:
  9115                           
  9116                           ;RTC.c: 103: strcpy(month, "NOV");
  9117  0025F8  0EBE               	movlw	low printRTC@month
  9118  0025FA  0100               	movlb	0	; () banked
  9119  0025FC  6F80               	movwf	strcpy@to& (0+255),b
  9120  0025FE  0E00               	movlw	high printRTC@month
  9121  002600  0100               	movlb	0	; () banked
  9122  002602  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9123  002604  0EF7               	movlw	low STR_18
  9124  002606  0100               	movlb	0	; () banked
  9125  002608  6F82               	movwf	strcpy@from& (0+255),b
  9126  00260A  0EFF               	movlw	high STR_18
  9127  00260C  0100               	movlb	0	; () banked
  9128  00260E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9129  002610  EC6C  F025         	call	_strcpy	;wreg free
  9130                           
  9131                           ;RTC.c: 104: break;
  9132  002614  D03E               	goto	l6360
  9133  002616                     l6354:
  9134                           
  9135                           ;RTC.c: 106: strcpy(month, "DEC");
  9136  002616  0EBE               	movlw	low printRTC@month
  9137  002618  0100               	movlb	0	; () banked
  9138  00261A  6F80               	movwf	strcpy@to& (0+255),b
  9139  00261C  0E00               	movlw	high printRTC@month
  9140  00261E  0100               	movlb	0	; () banked
  9141  002620  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9142  002622  0ECF               	movlw	low STR_19
  9143  002624  0100               	movlb	0	; () banked
  9144  002626  6F82               	movwf	strcpy@from& (0+255),b
  9145  002628  0EFF               	movlw	high STR_19
  9146  00262A  0100               	movlb	0	; () banked
  9147  00262C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9148  00262E  EC6C  F025         	call	_strcpy	;wreg free
  9149                           
  9150                           ;RTC.c: 108: }
  9151                           
  9152                           ;RTC.c: 107: break;
  9153  002632  D02F               	goto	l6360
  9154  002634                     l6358:
  9155  002634  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9156  002638  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9157                           
  9158                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9159                           ; Switch size 1, requested type "space"
  9160                           ; Number of cases is 1, Range of values is 0 to 0
  9161                           ; switch strategies available:
  9162                           ; Name         Instructions Cycles
  9163                           ; simple_byte            4     3 (average)
  9164                           ;	Chosen strategy is simple_byte
  9165  00263C  0100               	movlb	0	; () banked
  9166  00263E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9167  002640  0A00               	xorlw	0	; case 0
  9168  002642  A4D8               	btfss	status,2,c
  9169  002644  D026               	goto	l6360
  9170                           
  9171                           ; BSR set to: 0
  9172                           ; Switch size 1, requested type "space"
  9173                           ; Number of cases is 12, Range of values is 1 to 12
  9174                           ; switch strategies available:
  9175                           ; Name         Instructions Cycles
  9176                           ; simple_byte           37    19 (average)
  9177                           ;	Chosen strategy is simple_byte
  9178  002646  0100               	movlb	0	; () banked
  9179  002648  51AB               	movf	??_printRTC& (0+255),w,b
  9180  00264A  0A01               	xorlw	1	; case 1
  9181  00264C  B4D8               	btfsc	status,2,c
  9182  00264E  D73E               	goto	l6332
  9183  002650  0A03               	xorlw	3	; case 2
  9184  002652  B4D8               	btfsc	status,2,c
  9185  002654  D74A               	goto	l6334
  9186  002656  0A01               	xorlw	1	; case 3
  9187  002658  B4D8               	btfsc	status,2,c
  9188  00265A  D756               	goto	l6336
  9189  00265C  0A07               	xorlw	7	; case 4
  9190  00265E  B4D8               	btfsc	status,2,c
  9191  002660  D762               	goto	l6338
  9192  002662  0A01               	xorlw	1	; case 5
  9193  002664  B4D8               	btfsc	status,2,c
  9194  002666  D76E               	goto	l6340
  9195  002668  0A03               	xorlw	3	; case 6
  9196  00266A  B4D8               	btfsc	status,2,c
  9197  00266C  D77A               	goto	l6342
  9198  00266E  0A01               	xorlw	1	; case 7
  9199  002670  B4D8               	btfsc	status,2,c
  9200  002672  D786               	goto	l6344
  9201  002674  0A0F               	xorlw	15	; case 8
  9202  002676  B4D8               	btfsc	status,2,c
  9203  002678  D792               	goto	l6346
  9204  00267A  0A01               	xorlw	1	; case 9
  9205  00267C  B4D8               	btfsc	status,2,c
  9206  00267E  D79E               	goto	l6348
  9207  002680  0A03               	xorlw	3	; case 10
  9208  002682  B4D8               	btfsc	status,2,c
  9209  002684  D7AA               	goto	l6350
  9210  002686  0A01               	xorlw	1	; case 11
  9211  002688  B4D8               	btfsc	status,2,c
  9212  00268A  D7B6               	goto	l6352
  9213  00268C  0A07               	xorlw	7	; case 12
  9214  00268E  B4D8               	btfsc	status,2,c
  9215  002690  D7C2               	goto	l6354
  9216  002692                     l6360:
  9217                           
  9218                           ;RTC.c: 109: lcdInst(0b10000000);;
  9219  002692  0E80               	movlw	128
  9220  002694  EC02  F028         	call	_lcdInst
  9221                           
  9222                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9223  002698  0E0A               	movlw	low STR_21
  9224  00269A  0100               	movlb	0	; () banked
  9225  00269C  6F8E               	movwf	printf@f& (0+255),b
  9226  00269E  0EFB               	movlw	high STR_21
  9227  0026A0  0100               	movlb	0	; () banked
  9228  0026A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9229  0026A4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9230  0026A8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9231  0026AC  0EBE               	movlw	low printRTC@month
  9232  0026AE  0100               	movlb	0	; () banked
  9233  0026B0  6F92               	movwf	(?_printf+4)& (0+255),b
  9234  0026B2  0E00               	movlw	high printRTC@month
  9235  0026B4  0100               	movlb	0	; () banked
  9236  0026B6  6F93               	movwf	(?_printf+5)& (0+255),b
  9237  0026B8  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9238  0026BC  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9239  0026C0  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9240  0026C4  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9241  0026C8  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9242  0026CC  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9243  0026D0  ECF2  F00A         	call	_printf	;wreg free
  9244  0026D4  0012               	return		;funcret
  9245  0026D6                     __end_of_printRTC:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           intcon	equ	0xFF2
  9254                           intcon2	equ	0xFF1
  9255                           intcon3	equ	0xFF0
  9256                           postinc0	equ	0xFEE
  9257                           wreg	equ	0xFE8
  9258                           postdec1	equ	0xFE5
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           fsr2h	equ	0xFDA
  9264                           fsr2l	equ	0xFD9
  9265                           status	equ	0xFD8
  9266                           
  9267 ;; *************** function _strcpy *****************
  9268 ;; Defined at:
  9269 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9272 ;;		 -> printRTC@month(4), UI@month(4), 
  9273 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9274 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9275 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9276 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9277 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9278 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9279 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9280 ;;		 -> STR_8(4), 
  9281 ;; Auto vars:     Size  Location     Type
  9282 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9283 ;;		 -> printRTC@month(4), UI@month(4), 
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  2    0[BANK0 ] PTR unsigned char 
  9286 ;; Registers used:
  9287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9293 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;Total ram usage:        6 bytes
  9298 ;; Hardware stack levels used:    1
  9299 ;; Hardware stack levels required when called:    7
  9300 ;; This function calls:
  9301 ;;		Nothing
  9302 ;; This function is called by:
  9303 ;;		_UI
  9304 ;;		_printRTC
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           	psect	text25
  9309  004AD8                     __ptext25:
  9310                           	opt stack 0
  9311  004AD8                     _strcpy:
  9312                           	opt stack 20
  9313                           
  9314                           ;incstack = 0
  9315  004AD8  C080  F084         	movff	strcpy@to,strcpy@cp
  9316  004ADC  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9317  004AE0  D006               	goto	l6070
  9318  004AE2                     l6068:
  9319  004AE2  0100               	movlb	0	; () banked
  9320  004AE4  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9321  004AE6  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9322  004AE8  0100               	movlb	0	; () banked
  9323  004AEA  4B82               	infsnz	strcpy@from& (0+255),f,b
  9324  004AEC  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9325  004AEE                     l6070:
  9326  004AEE  C082  FFF6         	movff	strcpy@from,tblptrl
  9327  004AF2  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9328  004AF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9329  004AF6  6AF8               	clrf	tblptru,c
  9330  004AF8                     	endif
  9331  004AF8                     	if	0	;tblptru may be non-zero
  9332  004AF8                     	endif
  9333  004AF8  C084  FFD9         	movff	strcpy@cp,fsr2l
  9334  004AFC  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9335  004B00  0008               	tblrd		*
  9336  004B02  CFF5 FFDF          	movff	tablat,indf2
  9337  004B06  50DF               	movf	indf2,w,c
  9338  004B08  B4D8               	btfsc	status,2,c
  9339  004B0A  0012               	return	
  9340  004B0C  D7EA               	goto	l6068
  9341  004B0E                     __end_of_strcpy:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           intcon2	equ	0xFF1
  9351                           intcon3	equ	0xFF0
  9352                           postinc0	equ	0xFEE
  9353                           wreg	equ	0xFE8
  9354                           postdec1	equ	0xFE5
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _getRTC *****************
  9364 ;; Defined at:
  9365 ;;		line 44 in file "RTC.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  i               2    3[BANK0 ] int 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      void 
  9372 ;; Registers used:
  9373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:        2 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    9
  9386 ;; This function calls:
  9387 ;;		_I2C_Master_Read
  9388 ;;		_I2C_Master_Start
  9389 ;;		_I2C_Master_Stop
  9390 ;;		_I2C_Master_Write
  9391 ;; This function is called by:
  9392 ;;		_printRTC
  9393 ;;		_initSortTimer
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text26
  9398  004236                     __ptext26:
  9399                           	opt stack 0
  9400  004236                     _getRTC:
  9401                           	opt stack 18
  9402                           
  9403                           ;RTC.c: 48: I2C_Master_Start();
  9404                           
  9405                           ;incstack = 0
  9406  004236  EC28  F028         	call	_I2C_Master_Start	;wreg free
  9407                           
  9408                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9409  00423A  0E00               	movlw	0
  9410  00423C  0100               	movlb	0	; () banked
  9411  00423E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9412  004240  0ED0               	movlw	208
  9413  004242  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9414  004244  EC16  F028         	call	_I2C_Master_Write	;wreg free
  9415                           
  9416                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9417  004248  0E00               	movlw	0
  9418  00424A  0100               	movlb	0	; () banked
  9419  00424C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9420  00424E  0E00               	movlw	0
  9421  004250  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9422  004252  EC16  F028         	call	_I2C_Master_Write	;wreg free
  9423                           
  9424                           ;RTC.c: 51: I2C_Master_Stop();
  9425  004256  EC24  F028         	call	_I2C_Master_Stop	;wreg free
  9426                           
  9427                           ;RTC.c: 54: I2C_Master_Start();
  9428  00425A  EC28  F028         	call	_I2C_Master_Start	;wreg free
  9429                           
  9430                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9431  00425E  0E00               	movlw	0
  9432  004260  0100               	movlb	0	; () banked
  9433  004262  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9434  004264  0ED1               	movlw	209
  9435  004266  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9436  004268  EC16  F028         	call	_I2C_Master_Write	;wreg free
  9437                           
  9438                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9439  00426C  0E00               	movlw	0
  9440  00426E  0100               	movlb	0	; () banked
  9441  004270  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9442  004272  0E00               	movlw	0
  9443  004274  6F83               	movwf	getRTC@i& (0+255),b
  9444  004276                     l6076:
  9445                           
  9446                           ; BSR set to: 0
  9447  004276  0100               	movlb	0	; () banked
  9448  004278  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9449  00427A  D008               	goto	l6080
  9450  00427C  0100               	movlb	0	; () banked
  9451  00427E  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9452  004280  E115               	bnz	l6086
  9453  004282  0E06               	movlw	6
  9454  004284  0100               	movlb	0	; () banked
  9455  004286  5D83               	subwf	getRTC@i& (0+255),w,b
  9456  004288  B0D8               	btfsc	status,0,c
  9457  00428A  D010               	goto	l6086
  9458  00428C                     l6080:
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9462  00428C  0E24               	movlw	low _time
  9463  00428E  0100               	movlb	0	; () banked
  9464  004290  2583               	addwf	getRTC@i& (0+255),w,b
  9465  004292  6ED9               	movwf	fsr2l,c
  9466  004294  0E01               	movlw	high _time
  9467  004296  0100               	movlb	0	; () banked
  9468  004298  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9469  00429A  6EDA               	movwf	fsr2h,c
  9470  00429C  0E01               	movlw	1
  9471  00429E  ECC3  F026         	call	_I2C_Master_Read
  9472  0042A2  6EDF               	movwf	indf2,c
  9473  0042A4  0100               	movlb	0	; () banked
  9474  0042A6  4B83               	infsnz	getRTC@i& (0+255),f,b
  9475  0042A8  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9476  0042AA  D7E5               	goto	l6076
  9477  0042AC                     l6086:
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;RTC.c: 58: }
  9481                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9482  0042AC  0E00               	movlw	0
  9483  0042AE  ECC3  F026         	call	_I2C_Master_Read
  9484  0042B2  0101               	movlb	1	; () banked
  9485  0042B4  6F2A               	movwf	(_time+6)& (0+255),b
  9486                           
  9487                           ;RTC.c: 60: I2C_Master_Stop();
  9488  0042B6  EC24  F028         	call	_I2C_Master_Stop	;wreg free
  9489  0042BA  0012               	return		;funcret
  9490  0042BC                     __end_of_getRTC:
  9491                           	opt stack 0
  9492                           tblptru	equ	0xFF8
  9493                           tblptrh	equ	0xFF7
  9494                           tblptrl	equ	0xFF6
  9495                           tablat	equ	0xFF5
  9496                           prodh	equ	0xFF4
  9497                           prodl	equ	0xFF3
  9498                           intcon	equ	0xFF2
  9499                           intcon2	equ	0xFF1
  9500                           intcon3	equ	0xFF0
  9501                           postinc0	equ	0xFEE
  9502                           wreg	equ	0xFE8
  9503                           postdec1	equ	0xFE5
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _I2C_Master_Write *****************
  9513 ;; Defined at:
  9514 ;;		line 49 in file "I2C.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  d               2    1[BANK0 ] unsigned int 
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;		None
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  1    wreg      void 
  9521 ;; Registers used:
  9522 ;;		wreg, status,2, status,0, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9528 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;Total ram usage:        2 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    8
  9535 ;; This function calls:
  9536 ;;		_I2C_Master_Wait
  9537 ;; This function is called by:
  9538 ;;		_loadRTC
  9539 ;;		_getRTC
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text27
  9544  00502C                     __ptext27:
  9545                           	opt stack 0
  9546  00502C                     _I2C_Master_Write:
  9547                           	opt stack 18
  9548                           
  9549                           ;I2C.c: 51: I2C_Master_Wait();
  9550                           
  9551                           ;incstack = 0
  9552  00502C  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9553                           
  9554                           ;I2C.c: 52: SSPBUF = d;
  9555  005030  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9556  005034  0012               	return		;funcret
  9557  005036                     __end_of_I2C_Master_Write:
  9558                           	opt stack 0
  9559                           tblptru	equ	0xFF8
  9560                           tblptrh	equ	0xFF7
  9561                           tblptrl	equ	0xFF6
  9562                           tablat	equ	0xFF5
  9563                           prodh	equ	0xFF4
  9564                           prodl	equ	0xFF3
  9565                           intcon	equ	0xFF2
  9566                           intcon2	equ	0xFF1
  9567                           intcon3	equ	0xFF0
  9568                           postinc0	equ	0xFEE
  9569                           wreg	equ	0xFE8
  9570                           postdec1	equ	0xFE5
  9571                           fsr1l	equ	0xFE1
  9572                           indf2	equ	0xFDF
  9573                           postinc2	equ	0xFDE
  9574                           postdec2	equ	0xFDD
  9575                           fsr2h	equ	0xFDA
  9576                           fsr2l	equ	0xFD9
  9577                           status	equ	0xFD8
  9578                           
  9579 ;; *************** function _I2C_Master_Stop *****************
  9580 ;; Defined at:
  9581 ;;		line 43 in file "I2C.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;                  1    wreg      void 
  9588 ;; Registers used:
  9589 ;;		wreg, status,2, status,0, cstack
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;Total ram usage:        0 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    8
  9602 ;; This function calls:
  9603 ;;		_I2C_Master_Wait
  9604 ;; This function is called by:
  9605 ;;		_loadRTC
  9606 ;;		_getRTC
  9607 ;; This function uses a non-reentrant model
  9608 ;;
  9609                           
  9610                           	psect	text28
  9611  005048                     __ptext28:
  9612                           	opt stack 0
  9613  005048                     _I2C_Master_Stop:
  9614                           	opt stack 18
  9615                           
  9616                           ;I2C.c: 45: I2C_Master_Wait();
  9617                           
  9618                           ;incstack = 0
  9619  005048  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9620                           
  9621                           ;I2C.c: 46: PEN = 1;
  9622  00504C  84C5               	bsf	4037,2,c	;volatile
  9623  00504E  0012               	return		;funcret
  9624  005050                     __end_of_I2C_Master_Stop:
  9625                           	opt stack 0
  9626                           tblptru	equ	0xFF8
  9627                           tblptrh	equ	0xFF7
  9628                           tblptrl	equ	0xFF6
  9629                           tablat	equ	0xFF5
  9630                           prodh	equ	0xFF4
  9631                           prodl	equ	0xFF3
  9632                           intcon	equ	0xFF2
  9633                           intcon2	equ	0xFF1
  9634                           intcon3	equ	0xFF0
  9635                           postinc0	equ	0xFEE
  9636                           wreg	equ	0xFE8
  9637                           postdec1	equ	0xFE5
  9638                           fsr1l	equ	0xFE1
  9639                           indf2	equ	0xFDF
  9640                           postinc2	equ	0xFDE
  9641                           postdec2	equ	0xFDD
  9642                           fsr2h	equ	0xFDA
  9643                           fsr2l	equ	0xFD9
  9644                           status	equ	0xFD8
  9645                           
  9646 ;; *************** function _I2C_Master_Start *****************
  9647 ;; Defined at:
  9648 ;;		line 31 in file "I2C.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;		None
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;		None
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  1    wreg      void 
  9655 ;; Registers used:
  9656 ;;		wreg, status,2, status,0, cstack
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;Total ram usage:        0 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    8
  9669 ;; This function calls:
  9670 ;;		_I2C_Master_Wait
  9671 ;; This function is called by:
  9672 ;;		_loadRTC
  9673 ;;		_getRTC
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text29
  9678  005050                     __ptext29:
  9679                           	opt stack 0
  9680  005050                     _I2C_Master_Start:
  9681                           	opt stack 18
  9682                           
  9683                           ;I2C.c: 33: I2C_Master_Wait();
  9684                           
  9685                           ;incstack = 0
  9686  005050  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9687                           
  9688                           ;I2C.c: 34: SEN = 1;
  9689  005054  80C5               	bsf	4037,0,c	;volatile
  9690  005056  0012               	return		;funcret
  9691  005058                     __end_of_I2C_Master_Start:
  9692                           	opt stack 0
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon	equ	0xFF2
  9700                           intcon2	equ	0xFF1
  9701                           intcon3	equ	0xFF0
  9702                           postinc0	equ	0xFEE
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _I2C_Master_Read *****************
  9714 ;; Defined at:
  9715 ;;		line 55 in file "I2C.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  a               1    wreg     unsigned char 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  a               1    1[BANK0 ] unsigned char 
  9720 ;;  temp            1    2[BANK0 ] unsigned char 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      unsigned char 
  9723 ;; Registers used:
  9724 ;;		wreg, status,2, status,0, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;Total ram usage:        2 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    8
  9737 ;; This function calls:
  9738 ;;		_I2C_Master_Wait
  9739 ;; This function is called by:
  9740 ;;		_getRTC
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text30
  9745  004D86                     __ptext30:
  9746                           	opt stack 0
  9747  004D86                     _I2C_Master_Read:
  9748                           	opt stack 18
  9749                           
  9750                           ;incstack = 0
  9751                           ;I2C_Master_Read@a stored from wreg
  9752  004D86  0100               	movlb	0	; () banked
  9753  004D88  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9754                           
  9755                           ;I2C.c: 57: unsigned char temp;
  9756                           ;I2C.c: 58: I2C_Master_Wait();
  9757  004D8A  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9758                           
  9759                           ;I2C.c: 59: RCEN = 1;
  9760  004D8E  86C5               	bsf	4037,3,c	;volatile
  9761                           
  9762                           ;I2C.c: 60: I2C_Master_Wait();
  9763  004D90  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9764                           
  9765                           ;I2C.c: 61: temp = SSPBUF;
  9766  004D94  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9767                           
  9768                           ;I2C.c: 62: I2C_Master_Wait();
  9769  004D98  ECE7  F027         	call	_I2C_Master_Wait	;wreg free
  9770                           
  9771                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9772  004D9C  0100               	movlb	0	; () banked
  9773  004D9E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9774  004DA0  0100               	movlb	0	; () banked
  9775  004DA2  A4D8               	btfss	status,2,c
  9776  004DA4  D002               	goto	u4160
  9777  004DA6  8AC5               	bsf	4037,5,c	;volatile
  9778  004DA8  D001               	goto	l5764
  9779  004DAA                     u4160:
  9780  004DAA  9AC5               	bcf	4037,5,c	;volatile
  9781  004DAC                     l5764:
  9782                           
  9783                           ;I2C.c: 64: ACKEN = 1;
  9784  004DAC  88C5               	bsf	4037,4,c	;volatile
  9785                           
  9786                           ;I2C.c: 65: return temp;
  9787  004DAE  0100               	movlb	0	; () banked
  9788  004DB0  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9789  004DB2  0012               	return	
  9790  004DB4                     __end_of_I2C_Master_Read:
  9791                           	opt stack 0
  9792                           tblptru	equ	0xFF8
  9793                           tblptrh	equ	0xFF7
  9794                           tblptrl	equ	0xFF6
  9795                           tablat	equ	0xFF5
  9796                           prodh	equ	0xFF4
  9797                           prodl	equ	0xFF3
  9798                           intcon	equ	0xFF2
  9799                           intcon2	equ	0xFF1
  9800                           intcon3	equ	0xFF0
  9801                           postinc0	equ	0xFEE
  9802                           wreg	equ	0xFE8
  9803                           postdec1	equ	0xFE5
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           fsr2h	equ	0xFDA
  9809                           fsr2l	equ	0xFD9
  9810                           status	equ	0xFD8
  9811                           
  9812 ;; *************** function _I2C_Master_Wait *****************
  9813 ;; Defined at:
  9814 ;;		line 26 in file "I2C.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;		None
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;		None
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  1    wreg      void 
  9821 ;; Registers used:
  9822 ;;		wreg, status,2, status,0
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;Total ram usage:        1 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    7
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		_I2C_Master_Start
  9839 ;;		_I2C_Master_Stop
  9840 ;;		_I2C_Master_Write
  9841 ;;		_I2C_Master_Read
  9842 ;;		_I2C_Master_RepeatedStart
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text31
  9847  004FCE                     __ptext31:
  9848                           	opt stack 0
  9849  004FCE                     _I2C_Master_Wait:
  9850                           	opt stack 18
  9851  004FCE                     l66:
  9852  004FCE  B4C7               	btfsc	4039,2,c	;volatile
  9853  004FD0  D7FE               	goto	l66
  9854  004FD2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9855  004FD6  0E1F               	movlw	31
  9856  004FD8  0100               	movlb	0	; () banked
  9857  004FDA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9858  004FDC  B4D8               	btfsc	status,2,c
  9859  004FDE  0012               	return	
  9860  004FE0  D7F6               	goto	l66
  9861  004FE2                     __end_of_I2C_Master_Wait:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           tblptrh	equ	0xFF7
  9865                           tblptrl	equ	0xFF6
  9866                           tablat	equ	0xFF5
  9867                           prodh	equ	0xFF4
  9868                           prodl	equ	0xFF3
  9869                           intcon	equ	0xFF2
  9870                           intcon2	equ	0xFF1
  9871                           intcon3	equ	0xFF0
  9872                           postinc0	equ	0xFEE
  9873                           wreg	equ	0xFE8
  9874                           postdec1	equ	0xFE5
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           fsr2h	equ	0xFDA
  9880                           fsr2l	equ	0xFD9
  9881                           status	equ	0xFD8
  9882                           
  9883 ;; *************** function _change_state_to_menu_22 *****************
  9884 ;; Defined at:
  9885 ;;		line 498 in file "UI.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;		None
  9890 ;; Return value:  Size  Location     Type
  9891 ;;                  1    wreg      void 
  9892 ;; Registers used:
  9893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;Total ram usage:        0 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:   10
  9906 ;; This function calls:
  9907 ;;		_lcdInst
  9908 ;;		_printf
  9909 ;; This function is called by:
  9910 ;;		_UI
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           	psect	text32
  9915  004A68                     __ptext32:
  9916                           	opt stack 0
  9917  004A68                     _change_state_to_menu_22:
  9918                           	opt stack 19
  9919                           
  9920                           ;UI.c: 499: cur_state = 22;
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;incstack = 0
  9924  004A68  0E00               	movlw	0
  9925  004A6A  0100               	movlb	0	; () banked
  9926  004A6C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9927  004A6E  0E16               	movlw	22
  9928  004A70  6FE6               	movwf	_cur_state& (0+255),b
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;UI.c: 501: lcdInst(0b10000000);;
  9932  004A72  0E80               	movlw	128
  9933  004A74  EC02  F028         	call	_lcdInst
  9934                           
  9935                           ;UI.c: 502: printf("2. SORT        <");
  9936  004A78  0EC4               	movlw	low STR_34
  9937  004A7A  0100               	movlb	0	; () banked
  9938  004A7C  6F8E               	movwf	printf@f& (0+255),b
  9939  004A7E  0EFD               	movlw	high STR_34
  9940  004A80  0100               	movlb	0	; () banked
  9941  004A82  6F8F               	movwf	(printf@f+1)& (0+255),b
  9942  004A84  ECF2  F00A         	call	_printf	;wreg free
  9943                           
  9944                           ;UI.c: 503: lcdInst(0b11000000);;
  9945  004A88  0EC0               	movlw	192
  9946  004A8A  EC02  F028         	call	_lcdInst
  9947                           
  9948                           ;UI.c: 504: printf("3. LOGS         ");
  9949  004A8E  0E09               	movlw	low STR_36
  9950  004A90  0100               	movlb	0	; () banked
  9951  004A92  6F8E               	movwf	printf@f& (0+255),b
  9952  004A94  0EFD               	movlw	high STR_36
  9953  004A96  0100               	movlb	0	; () banked
  9954  004A98  6F8F               	movwf	(printf@f+1)& (0+255),b
  9955  004A9A  ECF2  F00A         	call	_printf	;wreg free
  9956  004A9E  0012               	return		;funcret
  9957  004AA0                     __end_of_change_state_to_menu_22:
  9958                           	opt stack 0
  9959                           tblptru	equ	0xFF8
  9960                           tblptrh	equ	0xFF7
  9961                           tblptrl	equ	0xFF6
  9962                           tablat	equ	0xFF5
  9963                           prodh	equ	0xFF4
  9964                           prodl	equ	0xFF3
  9965                           intcon	equ	0xFF2
  9966                           intcon2	equ	0xFF1
  9967                           intcon3	equ	0xFF0
  9968                           postinc0	equ	0xFEE
  9969                           wreg	equ	0xFE8
  9970                           postdec1	equ	0xFE5
  9971                           fsr1l	equ	0xFE1
  9972                           indf2	equ	0xFDF
  9973                           postinc2	equ	0xFDE
  9974                           postdec2	equ	0xFDD
  9975                           fsr2h	equ	0xFDA
  9976                           fsr2l	equ	0xFD9
  9977                           status	equ	0xFD8
  9978                           
  9979 ;; *************** function _change_state_to_menu_12 *****************
  9980 ;; Defined at:
  9981 ;;		line 490 in file "UI.c"
  9982 ;; Parameters:    Size  Location     Type
  9983 ;;		None
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;		None
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      void 
  9988 ;; Registers used:
  9989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;Total ram usage:        0 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:   10
 10002 ;; This function calls:
 10003 ;;		_lcdInst
 10004 ;;		_printf
 10005 ;; This function is called by:
 10006 ;;		_UI
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           	psect	text33
 10011  004AA0                     __ptext33:
 10012                           	opt stack 0
 10013  004AA0                     _change_state_to_menu_12:
 10014                           	opt stack 19
 10015                           
 10016                           ;UI.c: 491: cur_state = 12;
 10017                           
 10018                           ;incstack = 0
 10019  004AA0  0E00               	movlw	0
 10020  004AA2  0100               	movlb	0	; () banked
 10021  004AA4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 10022  004AA6  0E0C               	movlw	12
 10023  004AA8  6FE6               	movwf	_cur_state& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;UI.c: 493: lcdInst(0b10000000);;
 10027  004AAA  0E80               	movlw	128
 10028  004AAC  EC02  F028         	call	_lcdInst
 10029                           
 10030                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10031  004AB0  0E2B               	movlw	low STR_33
 10032  004AB2  0100               	movlb	0	; () banked
 10033  004AB4  6F8E               	movwf	printf@f& (0+255),b
 10034  004AB6  0EFD               	movlw	high STR_33
 10035  004AB8  0100               	movlb	0	; () banked
 10036  004ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10037  004ABC  ECF2  F00A         	call	_printf	;wreg free
 10038                           
 10039                           ;UI.c: 495: lcdInst(0b11000000);;
 10040  004AC0  0EC0               	movlw	192
 10041  004AC2  EC02  F028         	call	_lcdInst
 10042                           
 10043                           ;UI.c: 496: printf("2. SORT        <");
 10044  004AC6  0EC4               	movlw	low STR_34
 10045  004AC8  0100               	movlb	0	; () banked
 10046  004ACA  6F8E               	movwf	printf@f& (0+255),b
 10047  004ACC  0EFD               	movlw	high STR_34
 10048  004ACE  0100               	movlb	0	; () banked
 10049  004AD0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10050  004AD2  ECF2  F00A         	call	_printf	;wreg free
 10051  004AD6  0012               	return		;funcret
 10052  004AD8                     __end_of_change_state_to_menu_12:
 10053                           	opt stack 0
 10054                           tblptru	equ	0xFF8
 10055                           tblptrh	equ	0xFF7
 10056                           tblptrl	equ	0xFF6
 10057                           tablat	equ	0xFF5
 10058                           prodh	equ	0xFF4
 10059                           prodl	equ	0xFF3
 10060                           intcon	equ	0xFF2
 10061                           intcon2	equ	0xFF1
 10062                           intcon3	equ	0xFF0
 10063                           postinc0	equ	0xFEE
 10064                           wreg	equ	0xFE8
 10065                           postdec1	equ	0xFE5
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function ___awmod *****************
 10075 ;; Defined at:
 10076 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  dividend        2    0[BANK0 ] int 
 10079 ;;  divisor         2    2[BANK0 ] int 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;  sign            1    5[BANK0 ] unsigned char 
 10082 ;;  counter         1    4[BANK0 ] unsigned char 
 10083 ;; Return value:  Size  Location     Type
 10084 ;;                  2    0[BANK0 ] int 
 10085 ;; Registers used:
 10086 ;;		wreg, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10092 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;Total ram usage:        6 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    7
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_UI
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           	psect	text34
 10107  004108                     __ptext34:
 10108                           	opt stack 0
 10109  004108                     ___awmod:
 10110                           	opt stack 22
 10111                           
 10112                           ;incstack = 0
 10113  004108  0E00               	movlw	0
 10114  00410A  0100               	movlb	0	; () banked
 10115  00410C  6F85               	movwf	___awmod@sign& (0+255),b
 10116                           
 10117                           ; BSR set to: 0
 10118  00410E  0100               	movlb	0	; () banked
 10119  004110  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10120  004112  D008               	goto	l8126
 10121                           
 10122                           ; BSR set to: 0
 10123  004114  0100               	movlb	0	; () banked
 10124  004116  6D80               	negf	___awmod@dividend& (0+255),b
 10125  004118  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10126  00411A  B0D8               	btfsc	status,0,c
 10127  00411C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10128                           
 10129                           ; BSR set to: 0
 10130  00411E  0E01               	movlw	1
 10131  004120  0100               	movlb	0	; () banked
 10132  004122  6F85               	movwf	___awmod@sign& (0+255),b
 10133  004124                     l8126:
 10134                           
 10135                           ; BSR set to: 0
 10136  004124  0100               	movlb	0	; () banked
 10137  004126  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10138  004128  D005               	goto	l8130
 10139                           
 10140                           ; BSR set to: 0
 10141  00412A  0100               	movlb	0	; () banked
 10142  00412C  6D82               	negf	___awmod@divisor& (0+255),b
 10143  00412E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10144  004130  B0D8               	btfsc	status,0,c
 10145  004132  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10146  004134                     l8130:
 10147                           
 10148                           ; BSR set to: 0
 10149  004134  0100               	movlb	0	; () banked
 10150  004136  5182               	movf	___awmod@divisor& (0+255),w,b
 10151  004138  0100               	movlb	0	; () banked
 10152  00413A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10153  00413C  B4D8               	btfsc	status,2,c
 10154  00413E  D026               	goto	l8146
 10155                           
 10156                           ; BSR set to: 0
 10157  004140  0E01               	movlw	1
 10158  004142  0100               	movlb	0	; () banked
 10159  004144  6F84               	movwf	___awmod@counter& (0+255),b
 10160  004146  D006               	goto	l8136
 10161  004148                     l8134:
 10162                           
 10163                           ; BSR set to: 0
 10164  004148  0100               	movlb	0	; () banked
 10165  00414A  90D8               	bcf	status,0,c
 10166  00414C  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10167  00414E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10168  004150  0100               	movlb	0	; () banked
 10169  004152  2B84               	incf	___awmod@counter& (0+255),f,b
 10170  004154                     l8136:
 10171                           
 10172                           ; BSR set to: 0
 10173  004154  0100               	movlb	0	; () banked
 10174  004156  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10175  004158  D7F7               	goto	l8134
 10176  00415A                     l8138:
 10177                           
 10178                           ; BSR set to: 0
 10179  00415A  0100               	movlb	0	; () banked
 10180  00415C  5182               	movf	___awmod@divisor& (0+255),w,b
 10181  00415E  0100               	movlb	0	; () banked
 10182  004160  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10183  004162  0100               	movlb	0	; () banked
 10184  004164  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10185  004166  0100               	movlb	0	; () banked
 10186  004168  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10187  00416A  A0D8               	btfss	status,0,c
 10188  00416C  D008               	goto	l8142
 10189                           
 10190                           ; BSR set to: 0
 10191  00416E  0100               	movlb	0	; () banked
 10192  004170  5182               	movf	___awmod@divisor& (0+255),w,b
 10193  004172  0100               	movlb	0	; () banked
 10194  004174  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10195  004176  0100               	movlb	0	; () banked
 10196  004178  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10197  00417A  0100               	movlb	0	; () banked
 10198  00417C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10199  00417E                     l8142:
 10200                           
 10201                           ; BSR set to: 0
 10202  00417E  0100               	movlb	0	; () banked
 10203  004180  90D8               	bcf	status,0,c
 10204  004182  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10205  004184  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10206                           
 10207                           ; BSR set to: 0
 10208  004186  0100               	movlb	0	; () banked
 10209  004188  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10210  00418A  D7E7               	goto	l8138
 10211  00418C                     l8146:
 10212                           
 10213                           ; BSR set to: 0
 10214  00418C  0100               	movlb	0	; () banked
 10215  00418E  5185               	movf	___awmod@sign& (0+255),w,b
 10216  004190  0100               	movlb	0	; () banked
 10217  004192  B4D8               	btfsc	status,2,c
 10218  004194  D005               	goto	l8150
 10219                           
 10220                           ; BSR set to: 0
 10221  004196  0100               	movlb	0	; () banked
 10222  004198  6D80               	negf	___awmod@dividend& (0+255),b
 10223  00419A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10224  00419C  B0D8               	btfsc	status,0,c
 10225  00419E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10226  0041A0                     l8150:
 10227                           
 10228                           ; BSR set to: 0
 10229  0041A0  C080  F080         	movff	___awmod@dividend,?___awmod
 10230  0041A4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10231  0041A8  0012               	return	
 10232  0041AA                     __end_of___awmod:
 10233                           	opt stack 0
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           intcon2	equ	0xFF1
 10242                           intcon3	equ	0xFF0
 10243                           postinc0	equ	0xFEE
 10244                           wreg	equ	0xFE8
 10245                           postdec1	equ	0xFE5
 10246                           fsr1l	equ	0xFE1
 10247                           indf2	equ	0xFDF
 10248                           postinc2	equ	0xFDE
 10249                           postdec2	equ	0xFDD
 10250                           fsr2h	equ	0xFDA
 10251                           fsr2l	equ	0xFD9
 10252                           status	equ	0xFD8
 10253                           
 10254 ;; *************** function ___awdiv *****************
 10255 ;; Defined at:
 10256 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;  dividend        2    6[BANK0 ] int 
 10259 ;;  divisor         2    8[BANK0 ] int 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  quotient        2   12[BANK0 ] int 
 10262 ;;  sign            1   11[BANK0 ] unsigned char 
 10263 ;;  counter         1   10[BANK0 ] unsigned char 
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  2    6[BANK0 ] int 
 10266 ;; Registers used:
 10267 ;;		wreg, status,2, status,0
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10276 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;Total ram usage:        8 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:    7
 10280 ;; This function calls:
 10281 ;;		Nothing
 10282 ;; This function is called by:
 10283 ;;		_UI
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text35
 10288  003EE4                     __ptext35:
 10289                           	opt stack 0
 10290  003EE4                     ___awdiv:
 10291                           	opt stack 22
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;incstack = 0
 10295  003EE4  0E00               	movlw	0
 10296  003EE6  0100               	movlb	0	; () banked
 10297  003EE8  6F8B               	movwf	___awdiv@sign& (0+255),b
 10298                           
 10299                           ; BSR set to: 0
 10300  003EEA  0100               	movlb	0	; () banked
 10301  003EEC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10302  003EEE  D008               	goto	l8082
 10303                           
 10304                           ; BSR set to: 0
 10305  003EF0  0100               	movlb	0	; () banked
 10306  003EF2  6D88               	negf	___awdiv@divisor& (0+255),b
 10307  003EF4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10308  003EF6  B0D8               	btfsc	status,0,c
 10309  003EF8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10310                           
 10311                           ; BSR set to: 0
 10312  003EFA  0E01               	movlw	1
 10313  003EFC  0100               	movlb	0	; () banked
 10314  003EFE  6F8B               	movwf	___awdiv@sign& (0+255),b
 10315  003F00                     l8082:
 10316                           
 10317                           ; BSR set to: 0
 10318  003F00  0100               	movlb	0	; () banked
 10319  003F02  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10320  003F04  D008               	goto	l8088
 10321                           
 10322                           ; BSR set to: 0
 10323  003F06  0100               	movlb	0	; () banked
 10324  003F08  6D86               	negf	___awdiv@dividend& (0+255),b
 10325  003F0A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10326  003F0C  B0D8               	btfsc	status,0,c
 10327  003F0E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10328                           
 10329                           ; BSR set to: 0
 10330  003F10  0E01               	movlw	1
 10331  003F12  0100               	movlb	0	; () banked
 10332  003F14  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10333  003F16                     l8088:
 10334                           
 10335                           ; BSR set to: 0
 10336  003F16  0E00               	movlw	0
 10337  003F18  0100               	movlb	0	; () banked
 10338  003F1A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10339  003F1C  0E00               	movlw	0
 10340  003F1E  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10341                           
 10342                           ; BSR set to: 0
 10343  003F20  0100               	movlb	0	; () banked
 10344  003F22  5188               	movf	___awdiv@divisor& (0+255),w,b
 10345  003F24  0100               	movlb	0	; () banked
 10346  003F26  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10347  003F28  B4D8               	btfsc	status,2,c
 10348  003F2A  D02C               	goto	l8110
 10349                           
 10350                           ; BSR set to: 0
 10351  003F2C  0E01               	movlw	1
 10352  003F2E  0100               	movlb	0	; () banked
 10353  003F30  6F8A               	movwf	___awdiv@counter& (0+255),b
 10354  003F32  D006               	goto	l8096
 10355  003F34                     l8094:
 10356                           
 10357                           ; BSR set to: 0
 10358  003F34  0100               	movlb	0	; () banked
 10359  003F36  90D8               	bcf	status,0,c
 10360  003F38  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10361  003F3A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10362  003F3C  0100               	movlb	0	; () banked
 10363  003F3E  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10364  003F40                     l8096:
 10365                           
 10366                           ; BSR set to: 0
 10367  003F40  0100               	movlb	0	; () banked
 10368  003F42  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10369  003F44  D7F7               	goto	l8094
 10370  003F46                     l8098:
 10371                           
 10372                           ; BSR set to: 0
 10373  003F46  0100               	movlb	0	; () banked
 10374  003F48  90D8               	bcf	status,0,c
 10375  003F4A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10376  003F4C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10377                           
 10378                           ; BSR set to: 0
 10379  003F4E  0100               	movlb	0	; () banked
 10380  003F50  5188               	movf	___awdiv@divisor& (0+255),w,b
 10381  003F52  0100               	movlb	0	; () banked
 10382  003F54  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10383  003F56  0100               	movlb	0	; () banked
 10384  003F58  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10385  003F5A  0100               	movlb	0	; () banked
 10386  003F5C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10387  003F5E  A0D8               	btfss	status,0,c
 10388  003F60  D00A               	goto	l8106
 10389                           
 10390                           ; BSR set to: 0
 10391  003F62  0100               	movlb	0	; () banked
 10392  003F64  5188               	movf	___awdiv@divisor& (0+255),w,b
 10393  003F66  0100               	movlb	0	; () banked
 10394  003F68  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10395  003F6A  0100               	movlb	0	; () banked
 10396  003F6C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10397  003F6E  0100               	movlb	0	; () banked
 10398  003F70  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10399                           
 10400                           ; BSR set to: 0
 10401  003F72  0100               	movlb	0	; () banked
 10402  003F74  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10403  003F76                     l8106:
 10404                           
 10405                           ; BSR set to: 0
 10406  003F76  0100               	movlb	0	; () banked
 10407  003F78  90D8               	bcf	status,0,c
 10408  003F7A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10409  003F7C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10410                           
 10411                           ; BSR set to: 0
 10412  003F7E  0100               	movlb	0	; () banked
 10413  003F80  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10414  003F82  D7E1               	goto	l8098
 10415  003F84                     l8110:
 10416                           
 10417                           ; BSR set to: 0
 10418  003F84  0100               	movlb	0	; () banked
 10419  003F86  518B               	movf	___awdiv@sign& (0+255),w,b
 10420  003F88  0100               	movlb	0	; () banked
 10421  003F8A  B4D8               	btfsc	status,2,c
 10422  003F8C  D005               	goto	l8114
 10423                           
 10424                           ; BSR set to: 0
 10425  003F8E  0100               	movlb	0	; () banked
 10426  003F90  6D8C               	negf	___awdiv@quotient& (0+255),b
 10427  003F92  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10428  003F94  B0D8               	btfsc	status,0,c
 10429  003F96  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10430  003F98                     l8114:
 10431                           
 10432                           ; BSR set to: 0
 10433  003F98  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10434  003F9C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10435  003FA0  0012               	return	
 10436  003FA2                     __end_of___awdiv:
 10437                           	opt stack 0
 10438                           tblptru	equ	0xFF8
 10439                           tblptrh	equ	0xFF7
 10440                           tblptrl	equ	0xFF6
 10441                           tablat	equ	0xFF5
 10442                           prodh	equ	0xFF4
 10443                           prodl	equ	0xFF3
 10444                           intcon	equ	0xFF2
 10445                           intcon2	equ	0xFF1
 10446                           intcon3	equ	0xFF0
 10447                           postinc0	equ	0xFEE
 10448                           wreg	equ	0xFE8
 10449                           postdec1	equ	0xFE5
 10450                           fsr1l	equ	0xFE1
 10451                           indf2	equ	0xFDF
 10452                           postinc2	equ	0xFDE
 10453                           postdec2	equ	0xFDD
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function _Test *****************
 10459 ;; Defined at:
 10460 ;;		line 30 in file "Test.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;		None
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;		None
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  1    wreg      void 
 10467 ;; Registers used:
 10468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10477 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10478 ;;Total ram usage:        2 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:   11
 10481 ;; This function calls:
 10482 ;;		_BlockerTest
 10483 ;;		_BothServos
 10484 ;;		_EEPROMTest
 10485 ;;		_PortTestA5
 10486 ;;		_PortTests
 10487 ;;		_PusherTest
 10488 ;;		_SpeedTest
 10489 ;;		_actuatorTest
 10490 ;;		_algorithmTest
 10491 ;;		_lcdInst
 10492 ;;		_printf
 10493 ;;		_sensorTest
 10494 ;; This function is called by:
 10495 ;;		_main
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	text36
 10500  003B56                     __ptext36:
 10501                           	opt stack 0
 10502  003B56                     _Test:
 10503                           	opt stack 19
 10504  003B56                     
 10505                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10506  003B56  0E01               	movlw	1
 10507  003B58  EC02  F028         	call	_lcdInst
 10508  003B5C  0E68               	movlw	104
 10509  003B5E  0100               	movlb	0	; () banked
 10510  003B60  6FC6               	movwf	??_Test& (0+255),b
 10511  003B62  0EE4               	movlw	228
 10512  003B64                     u8877:
 10513  003B64  2EE8               	decfsz	wreg,f,c
 10514  003B66  D7FE               	bra	u8877
 10515  003B68  2FC6               	decfsz	??_Test& (0+255),f,b
 10516  003B6A  D7FC               	bra	u8877
 10517  003B6C  F000               	nop	
 10518  003B6E  0E80               	movlw	128
 10519  003B70  EC02  F028         	call	_lcdInst
 10520                           
 10521                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10522  003B74  0E92               	movlw	low STR_68
 10523  003B76  0100               	movlb	0	; () banked
 10524  003B78  6F8E               	movwf	printf@f& (0+255),b
 10525  003B7A  0EFC               	movlw	high STR_68
 10526  003B7C  0100               	movlb	0	; () banked
 10527  003B7E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10528  003B80  ECF2  F00A         	call	_printf	;wreg free
 10529                           
 10530                           ;Test.c: 35: lcdInst(0b11000000);;
 10531  003B84  0EC0               	movlw	192
 10532  003B86  EC02  F028         	call	_lcdInst
 10533                           
 10534                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10535  003B8A  0EA3               	movlw	low STR_69
 10536  003B8C  0100               	movlb	0	; () banked
 10537  003B8E  6F8E               	movwf	printf@f& (0+255),b
 10538  003B90  0EFC               	movlw	high STR_69
 10539  003B92  0100               	movlb	0	; () banked
 10540  003B94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10541  003B96  ECF2  F00A         	call	_printf	;wreg free
 10542                           
 10543                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10544  003B9A  0E05               	movlw	5
 10545  003B9C  0100               	movlb	0	; () banked
 10546  003B9E  6FC7               	movwf	(??_Test+1)& (0+255),b
 10547  003BA0  0E0F               	movlw	15
 10548  003BA2  0100               	movlb	0	; () banked
 10549  003BA4  6FC6               	movwf	??_Test& (0+255),b
 10550  003BA6  0EF1               	movlw	241
 10551  003BA8                     u8887:
 10552  003BA8  2EE8               	decfsz	wreg,f,c
 10553  003BAA  D7FE               	bra	u8887
 10554  003BAC  2FC6               	decfsz	??_Test& (0+255),f,b
 10555  003BAE  D7FC               	bra	u8887
 10556  003BB0  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10557  003BB2  D7FA               	bra	u8887
 10558  003BB4                     l1102:
 10559  003BB4  A281               	btfss	3969,1,c	;volatile
 10560  003BB6  D7FE               	goto	l1102
 10561                           
 10562                           ;Test.c: 39: var = PORTB >> 4;
 10563  003BB8  CF81 F0C6          	movff	3969,??_Test	;volatile
 10564  003BBC  0100               	movlb	0	; () banked
 10565  003BBE  3BC6               	swapf	??_Test& (0+255),f,b
 10566  003BC0  0E0F               	movlw	15
 10567  003BC2  17C6               	andwf	??_Test& (0+255),f,b
 10568  003BC4  0100               	movlb	0	; () banked
 10569  003BC6  51C6               	movf	??_Test& (0+255),w,b
 10570  003BC8  0100               	movlb	0	; () banked
 10571  003BCA  6FFA               	movwf	_var& (0+255),b
 10572  003BCC  6BFB               	clrf	(_var+1)& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;Test.c: 40: var++;
 10576  003BCE  0100               	movlb	0	; () banked
 10577  003BD0  4BFA               	infsnz	_var& (0+255),f,b
 10578  003BD2  2BFB               	incf	(_var+1)& (0+255),f,b
 10579  003BD4                     l1105:
 10580  003BD4  A281               	btfss	3969,1,c	;volatile
 10581  003BD6  D01F               	goto	l8854
 10582  003BD8  D7FD               	goto	l1105
 10583  003BDA                     l8832:
 10584                           
 10585                           ;Test.c: 44: algorithmTest();
 10586  003BDA  ECA7  F01E         	call	_algorithmTest	;wreg free
 10587                           
 10588                           ;Test.c: 45: break;
 10589  003BDE  D7BB               	goto	l8814
 10590  003BE0                     l8834:
 10591                           
 10592                           ;Test.c: 47: sensorTest();
 10593  003BE0  EC87  F010         	call	_sensorTest	;wreg free
 10594                           
 10595                           ;Test.c: 48: break;
 10596  003BE4  D7B8               	goto	l8814
 10597  003BE6                     l8836:
 10598                           
 10599                           ;Test.c: 50: actuatorTest();
 10600  003BE6  EC09  F000         	call	_actuatorTest	;wreg free
 10601                           
 10602                           ;Test.c: 51: break;
 10603  003BEA  D7B5               	goto	l8814
 10604  003BEC                     l8838:
 10605                           
 10606                           ;Test.c: 53: PortTestA5();
 10607  003BEC  ECCE  F023         	call	_PortTestA5	;wreg free
 10608                           
 10609                           ;Test.c: 54: break;
 10610  003BF0  D7B2               	goto	l8814
 10611  003BF2                     l8840:
 10612                           
 10613                           ;Test.c: 57: SpeedTest();
 10614  003BF2  EC5E  F021         	call	_SpeedTest	;wreg free
 10615                           
 10616                           ;Test.c: 58: break;
 10617  003BF6  D7AF               	goto	l8814
 10618  003BF8                     l8842:
 10619                           
 10620                           ;Test.c: 60: EEPROMTest();
 10621  003BF8  EC34  F028         	call	_EEPROMTest	;wreg free
 10622                           
 10623                           ;Test.c: 61: break;
 10624  003BFC  D7AC               	goto	l8814
 10625  003BFE                     l8844:
 10626                           
 10627                           ;Test.c: 63: PusherTest();
 10628  003BFE  ECCB  F014         	call	_PusherTest	;wreg free
 10629                           
 10630                           ;Test.c: 64: break;
 10631  003C02  D7A9               	goto	l8814
 10632  003C04                     l8846:
 10633                           
 10634                           ;Test.c: 66: PortTests();
 10635  003C04  ECA0  F021         	call	_PortTests	;wreg free
 10636                           
 10637                           ;Test.c: 67: break;
 10638  003C08  D7A6               	goto	l8814
 10639  003C0A                     l8848:
 10640                           
 10641                           ;Test.c: 69: BothServos();
 10642  003C0A  EC0E  F00D         	call	_BothServos	;wreg free
 10643                           
 10644                           ;Test.c: 70: break;
 10645  003C0E  D7A3               	goto	l8814
 10646  003C10                     l8850:
 10647                           
 10648                           ;Test.c: 72: BlockerTest();
 10649  003C10  ECF7  F01A         	call	_BlockerTest	;wreg free
 10650                           
 10651                           ;Test.c: 76: }
 10652                           
 10653                           ;Test.c: 75: break;
 10654                           
 10655                           ;Test.c: 74: default:
 10656                           
 10657                           ;Test.c: 73: break;
 10658  003C14  D7A0               	goto	l8814
 10659  003C16                     l8854:
 10660  003C16  C0FA  F0C6         	movff	_var,??_Test
 10661  003C1A  C0FB  F0C7         	movff	_var+1,??_Test+1
 10662                           
 10663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10664                           ; Switch size 1, requested type "space"
 10665                           ; Number of cases is 1, Range of values is 0 to 0
 10666                           ; switch strategies available:
 10667                           ; Name         Instructions Cycles
 10668                           ; simple_byte            4     3 (average)
 10669                           ;	Chosen strategy is simple_byte
 10670  003C1E  0100               	movlb	0	; () banked
 10671  003C20  51C7               	movf	(??_Test+1)& (0+255),w,b
 10672  003C22  0A00               	xorlw	0	; case 0
 10673  003C24  A4D8               	btfss	status,2,c
 10674  003C26  D797               	goto	l8814
 10675                           
 10676                           ; BSR set to: 0
 10677                           ; Switch size 1, requested type "space"
 10678                           ; Number of cases is 10, Range of values is 1 to 11
 10679                           ; switch strategies available:
 10680                           ; Name         Instructions Cycles
 10681                           ; simple_byte           31    16 (average)
 10682                           ;	Chosen strategy is simple_byte
 10683  003C28  0100               	movlb	0	; () banked
 10684  003C2A  51C6               	movf	??_Test& (0+255),w,b
 10685  003C2C  0A01               	xorlw	1	; case 1
 10686  003C2E  B4D8               	btfsc	status,2,c
 10687  003C30  D7D4               	goto	l8832
 10688  003C32  0A03               	xorlw	3	; case 2
 10689  003C34  B4D8               	btfsc	status,2,c
 10690  003C36  D7D4               	goto	l8834
 10691  003C38  0A01               	xorlw	1	; case 3
 10692  003C3A  B4D8               	btfsc	status,2,c
 10693  003C3C  D7D4               	goto	l8836
 10694  003C3E  0A06               	xorlw	6	; case 5
 10695  003C40  B4D8               	btfsc	status,2,c
 10696  003C42  D7D4               	goto	l8838
 10697  003C44  0A03               	xorlw	3	; case 6
 10698  003C46  B4D8               	btfsc	status,2,c
 10699  003C48  D7D4               	goto	l8840
 10700  003C4A  0A01               	xorlw	1	; case 7
 10701  003C4C  B4D8               	btfsc	status,2,c
 10702  003C4E  D7D4               	goto	l8842
 10703  003C50  0A0F               	xorlw	15	; case 8
 10704  003C52  B4D8               	btfsc	status,2,c
 10705  003C54  D7D4               	goto	l8844
 10706  003C56  0A01               	xorlw	1	; case 9
 10707  003C58  B4D8               	btfsc	status,2,c
 10708  003C5A  D7D4               	goto	l8846
 10709  003C5C  0A03               	xorlw	3	; case 10
 10710  003C5E  B4D8               	btfsc	status,2,c
 10711  003C60  D7D4               	goto	l8848
 10712  003C62  0A01               	xorlw	1	; case 11
 10713  003C64  B4D8               	btfsc	status,2,c
 10714  003C66  D7D4               	goto	l8850
 10715                           
 10716                           ; BSR set to: 0
 10717                           
 10718                           ; BSR set to: 0
 10719  003C68  D776               	goto	l8814
 10720  003C6A                     __end_of_Test:
 10721                           	opt stack 0
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           intcon2	equ	0xFF1
 10730                           intcon3	equ	0xFF0
 10731                           postinc0	equ	0xFEE
 10732                           wreg	equ	0xFE8
 10733                           postdec1	equ	0xFE5
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           fsr2h	equ	0xFDA
 10739                           fsr2l	equ	0xFD9
 10740                           status	equ	0xFD8
 10741                           
 10742 ;; *************** function _sensorTest *****************
 10743 ;; Defined at:
 10744 ;;		line 124 in file "Test.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;		None
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;  res             2   45[BANK0 ] int 
 10749 ;; Return value:  Size  Location     Type
 10750 ;;                  1    wreg      void 
 10751 ;; Registers used:
 10752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : 0/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;Total ram usage:        4 bytes
 10763 ;; Hardware stack levels used:    1
 10764 ;; Hardware stack levels required when called:   10
 10765 ;; This function calls:
 10766 ;;		_lcdInst
 10767 ;;		_printf
 10768 ;;		_readADC
 10769 ;;		_readMAG
 10770 ;; This function is called by:
 10771 ;;		_Test
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           	psect	text37
 10776  00210E                     __ptext37:
 10777                           	opt stack 0
 10778  00210E                     _sensorTest:
 10779                           	opt stack 19
 10780                           
 10781                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;incstack = 0
 10785  00210E  0E01               	movlw	1
 10786  002110  EC02  F028         	call	_lcdInst
 10787  002114  0E68               	movlw	104
 10788  002116  0100               	movlb	0	; () banked
 10789  002118  6FAB               	movwf	??_sensorTest& (0+255),b
 10790  00211A  0EE4               	movlw	228
 10791  00211C                     u8897:
 10792  00211C  2EE8               	decfsz	wreg,f,c
 10793  00211E  D7FE               	bra	u8897
 10794  002120  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10795  002122  D7FC               	bra	u8897
 10796  002124  F000               	nop	
 10797  002126  0E80               	movlw	128
 10798  002128  EC02  F028         	call	_lcdInst
 10799                           
 10800                           ;Test.c: 127: printf("SENSORS");
 10801  00212C  0EAE               	movlw	low STR_77
 10802  00212E  0100               	movlb	0	; () banked
 10803  002130  6F8E               	movwf	printf@f& (0+255),b
 10804  002132  0EFF               	movlw	high STR_77
 10805  002134  0100               	movlb	0	; () banked
 10806  002136  6F8F               	movwf	(printf@f+1)& (0+255),b
 10807  002138  ECF2  F00A         	call	_printf	;wreg free
 10808                           
 10809                           ;Test.c: 128: lcdInst(0b11000000);;
 10810  00213C  0EC0               	movlw	192
 10811  00213E  EC02  F028         	call	_lcdInst
 10812                           
 10813                           ;Test.c: 129: printf("PUSH TO START");
 10814  002142  0E0B               	movlw	low STR_71
 10815  002144  0100               	movlb	0	; () banked
 10816  002146  6F8E               	movwf	printf@f& (0+255),b
 10817  002148  0EFF               	movlw	high STR_71
 10818  00214A  0100               	movlb	0	; () banked
 10819  00214C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10820  00214E  ECF2  F00A         	call	_printf	;wreg free
 10821                           
 10822                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10823  002152  0E05               	movlw	5
 10824  002154  0100               	movlb	0	; () banked
 10825  002156  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10826  002158  0E0F               	movlw	15
 10827  00215A  0100               	movlb	0	; () banked
 10828  00215C  6FAB               	movwf	??_sensorTest& (0+255),b
 10829  00215E  0EF1               	movlw	241
 10830  002160                     u8907:
 10831  002160  2EE8               	decfsz	wreg,f,c
 10832  002162  D7FE               	bra	u8907
 10833  002164  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10834  002166  D7FC               	bra	u8907
 10835  002168  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10836  00216A  D7FA               	bra	u8907
 10837  00216C                     l1135:
 10838  00216C  A281               	btfss	3969,1,c	;volatile
 10839  00216E  D7FE               	goto	l1135
 10840  002170                     l1138:
 10841  002170  B281               	btfsc	3969,1,c	;volatile
 10842  002172  D7FE               	goto	l1138
 10843                           
 10844                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10845  002174  0E01               	movlw	1
 10846  002176  EC02  F028         	call	_lcdInst
 10847  00217A  0E68               	movlw	104
 10848  00217C  0100               	movlb	0	; () banked
 10849  00217E  6FAB               	movwf	??_sensorTest& (0+255),b
 10850  002180  0EE4               	movlw	228
 10851  002182                     u8917:
 10852  002182  2EE8               	decfsz	wreg,f,c
 10853  002184  D7FE               	bra	u8917
 10854  002186  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10855  002188  D7FC               	bra	u8917
 10856  00218A  F000               	nop	
 10857  00218C  0E80               	movlw	128
 10858  00218E  EC02  F028         	call	_lcdInst
 10859                           
 10860                           ;Test.c: 138: printf("TST: IR SNSR");
 10861  002192  0E35               	movlw	low STR_79
 10862  002194  0100               	movlb	0	; () banked
 10863  002196  6F8E               	movwf	printf@f& (0+255),b
 10864  002198  0EFF               	movlw	high STR_79
 10865  00219A  0100               	movlb	0	; () banked
 10866  00219C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10867  00219E  ECF2  F00A         	call	_printf	;wreg free
 10868                           
 10869                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10870  0021A2  0E05               	movlw	5
 10871  0021A4  0100               	movlb	0	; () banked
 10872  0021A6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10873  0021A8  0E0F               	movlw	15
 10874  0021AA  0100               	movlb	0	; () banked
 10875  0021AC  6FAB               	movwf	??_sensorTest& (0+255),b
 10876  0021AE  0EF1               	movlw	241
 10877  0021B0                     u8927:
 10878  0021B0  2EE8               	decfsz	wreg,f,c
 10879  0021B2  D7FE               	bra	u8927
 10880  0021B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10881  0021B6  D7FC               	bra	u8927
 10882  0021B8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10883  0021BA  D7FA               	bra	u8927
 10884                           
 10885                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10886  0021BC  8A8B               	bsf	3979,5,c	;volatile
 10887                           
 10888                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10889  0021BE  D05C               	goto	l7300
 10890  0021C0                     l7282:
 10891                           
 10892                           ;Test.c: 143: readADC(0);
 10893  0021C0  0E00               	movlw	0
 10894  0021C2  EC07  F027         	call	_readADC
 10895                           
 10896                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10897  0021C6  50C3               	movf	4035,w,c	;volatile
 10898  0021C8  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10899  0021CC  0100               	movlb	0	; () banked
 10900  0021CE  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10901  0021D0  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10902  0021D4  0100               	movlb	0	; () banked
 10903  0021D6  6BAB               	clrf	??_sensorTest& (0+255),b
 10904  0021D8  0100               	movlb	0	; () banked
 10905  0021DA  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10906  0021DC  0100               	movlb	0	; () banked
 10907  0021DE  6FAD               	movwf	sensorTest@res& (0+255),b
 10908  0021E0  0100               	movlb	0	; () banked
 10909  0021E2  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10910  0021E4  0100               	movlb	0	; () banked
 10911  0021E6  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10915  0021E8  0100               	movlb	0	; () banked
 10916  0021EA  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10917  0021EC  D00A               	goto	u5880
 10918  0021EE  0E21               	movlw	33
 10919  0021F0  0100               	movlb	0	; () banked
 10920  0021F2  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10921  0021F4  0E03               	movlw	3
 10922  0021F6  0100               	movlb	0	; () banked
 10923  0021F8  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10924  0021FA  A0D8               	btfss	status,0,c
 10925  0021FC  D002               	goto	u5880
 10926  0021FE  0E01               	movlw	1
 10927  002200  D001               	goto	u5890
 10928  002202                     u5880:
 10929  002202  0E00               	movlw	0
 10930  002204                     u5890:
 10931  002204  0100               	movlb	0	; () banked
 10932  002206  6FDE               	movwf	_IR_signal& (0+255),b
 10933  002208  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10934                           
 10935                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10936  00220A  0E01               	movlw	1
 10937  00220C  EC02  F028         	call	_lcdInst
 10938  002210  0E68               	movlw	104
 10939  002212  0100               	movlb	0	; () banked
 10940  002214  6FAB               	movwf	??_sensorTest& (0+255),b
 10941  002216  0EE4               	movlw	228
 10942  002218                     u8937:
 10943  002218  2EE8               	decfsz	wreg,f,c
 10944  00221A  D7FE               	bra	u8937
 10945  00221C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10946  00221E  D7FC               	bra	u8937
 10947  002220  F000               	nop	
 10948  002222  0E80               	movlw	128
 10949  002224  EC02  F028         	call	_lcdInst
 10950                           
 10951                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10952  002228  0E5A               	movlw	low STR_80
 10953  00222A  0100               	movlb	0	; () banked
 10954  00222C  6F8E               	movwf	printf@f& (0+255),b
 10955  00222E  0EFE               	movlw	high STR_80
 10956  002230  0100               	movlb	0	; () banked
 10957  002232  6F8F               	movwf	(printf@f+1)& (0+255),b
 10958  002234  C0DE  F090         	movff	_IR_signal,?_printf+2
 10959  002238  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10960  00223C  ECF2  F00A         	call	_printf	;wreg free
 10961                           
 10962                           ;Test.c: 149: lcdInst(0b11000000);;
 10963  002240  0EC0               	movlw	192
 10964  002242  EC02  F028         	call	_lcdInst
 10965                           
 10966                           ;Test.c: 150: printf("%d", res);
 10967  002246  0E16               	movlw	low (STR_27+14)
 10968  002248  0100               	movlb	0	; () banked
 10969  00224A  6F8E               	movwf	printf@f& (0+255),b
 10970  00224C  0EFE               	movlw	high (STR_27+14)
 10971  00224E  0100               	movlb	0	; () banked
 10972  002250  6F8F               	movwf	(printf@f+1)& (0+255),b
 10973  002252  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10974  002256  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10975  00225A  ECF2  F00A         	call	_printf	;wreg free
 10976                           
 10977                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10978  00225E  0E05               	movlw	5
 10979  002260  0100               	movlb	0	; () banked
 10980  002262  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10981  002264  0E0F               	movlw	15
 10982  002266  0100               	movlb	0	; () banked
 10983  002268  6FAB               	movwf	??_sensorTest& (0+255),b
 10984  00226A  0EF1               	movlw	241
 10985  00226C                     u8947:
 10986  00226C  2EE8               	decfsz	wreg,f,c
 10987  00226E  D7FE               	bra	u8947
 10988  002270  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10989  002272  D7FC               	bra	u8947
 10990  002274  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10991  002276  D7FA               	bra	u8947
 10992  002278                     l7300:
 10993  002278  A281               	btfss	3969,1,c	;volatile
 10994  00227A  D7A2               	goto	l7282
 10995                           
 10996                           ;Test.c: 152: }
 10997                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10998  00227C  9A8B               	bcf	3979,5,c	;volatile
 10999                           
 11000                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11001  00227E  0E01               	movlw	1
 11002  002280  EC02  F028         	call	_lcdInst
 11003  002284  0E68               	movlw	104
 11004  002286  0100               	movlb	0	; () banked
 11005  002288  6FAB               	movwf	??_sensorTest& (0+255),b
 11006  00228A  0EE4               	movlw	228
 11007  00228C                     u8957:
 11008  00228C  2EE8               	decfsz	wreg,f,c
 11009  00228E  D7FE               	bra	u8957
 11010  002290  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11011  002292  D7FC               	bra	u8957
 11012  002294  F000               	nop	
 11013  002296  0E80               	movlw	128
 11014  002298  EC02  F028         	call	_lcdInst
 11015                           
 11016                           ;Test.c: 162: printf("TST: MAGNETISM");
 11017  00229C  0E87               	movlw	low STR_82
 11018  00229E  0100               	movlb	0	; () banked
 11019  0022A0  6F8E               	movwf	printf@f& (0+255),b
 11020  0022A2  0EFE               	movlw	high STR_82
 11021  0022A4  0100               	movlb	0	; () banked
 11022  0022A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11023  0022A8  ECF2  F00A         	call	_printf	;wreg free
 11024                           
 11025                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11026  0022AC  0E05               	movlw	5
 11027  0022AE  0100               	movlb	0	; () banked
 11028  0022B0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11029  0022B2  0E0F               	movlw	15
 11030  0022B4  0100               	movlb	0	; () banked
 11031  0022B6  6FAB               	movwf	??_sensorTest& (0+255),b
 11032  0022B8  0EF1               	movlw	241
 11033  0022BA                     u8967:
 11034  0022BA  2EE8               	decfsz	wreg,f,c
 11035  0022BC  D7FE               	bra	u8967
 11036  0022BE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11037  0022C0  D7FC               	bra	u8967
 11038  0022C2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11039  0022C4  D7FA               	bra	u8967
 11040                           
 11041                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11042  0022C6  D021               	goto	l7318
 11043  0022C8                     l7312:
 11044                           
 11045                           ;Test.c: 165: readMAG();
 11046  0022C8  ECCA  F024         	call	_readMAG	;wreg free
 11047                           
 11048                           ;Test.c: 166: lcdInst(0b10000000);;
 11049  0022CC  0E80               	movlw	128
 11050  0022CE  EC02  F028         	call	_lcdInst
 11051                           
 11052                           ;Test.c: 167: lcdInst(0b11000000);;
 11053  0022D2  0EC0               	movlw	192
 11054  0022D4  EC02  F028         	call	_lcdInst
 11055                           
 11056                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11057  0022D8  0E2A               	movlw	low STR_83
 11058  0022DA  0100               	movlb	0	; () banked
 11059  0022DC  6F8E               	movwf	printf@f& (0+255),b
 11060  0022DE  0EFE               	movlw	high STR_83
 11061  0022E0  0100               	movlb	0	; () banked
 11062  0022E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11063  0022E4  C0E0  F090         	movff	_MAG_signal,?_printf+2
 11064  0022E8  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 11065  0022EC  ECF2  F00A         	call	_printf	;wreg free
 11066                           
 11067                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11068  0022F0  0E05               	movlw	5
 11069  0022F2  0100               	movlb	0	; () banked
 11070  0022F4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11071  0022F6  0E0F               	movlw	15
 11072  0022F8  0100               	movlb	0	; () banked
 11073  0022FA  6FAB               	movwf	??_sensorTest& (0+255),b
 11074  0022FC  0EF1               	movlw	241
 11075  0022FE                     u8977:
 11076  0022FE  2EE8               	decfsz	wreg,f,c
 11077  002300  D7FE               	bra	u8977
 11078  002302  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11079  002304  D7FC               	bra	u8977
 11080  002306  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11081  002308  D7FA               	bra	u8977
 11082  00230A                     l7318:
 11083  00230A  A281               	btfss	3969,1,c	;volatile
 11084  00230C  D7DD               	goto	l7312
 11085                           
 11086                           ;Test.c: 170: }
 11087                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11088  00230E  0E01               	movlw	1
 11089  002310  EC02  F028         	call	_lcdInst
 11090  002314  0E68               	movlw	104
 11091  002316  0100               	movlb	0	; () banked
 11092  002318  6FAB               	movwf	??_sensorTest& (0+255),b
 11093  00231A  0EE4               	movlw	228
 11094  00231C                     u8987:
 11095  00231C  2EE8               	decfsz	wreg,f,c
 11096  00231E  D7FE               	bra	u8987
 11097  002320  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11098  002322  D7FC               	bra	u8987
 11099  002324  F000               	nop	
 11100  002326  0E80               	movlw	128
 11101  002328  EC02  F028         	call	_lcdInst
 11102                           
 11103                           ;Test.c: 176: printf("TST: COND");
 11104  00232C  0E87               	movlw	low STR_84
 11105  00232E  0100               	movlb	0	; () banked
 11106  002330  6F8E               	movwf	printf@f& (0+255),b
 11107  002332  0EFF               	movlw	high STR_84
 11108  002334  0100               	movlb	0	; () banked
 11109  002336  6F8F               	movwf	(printf@f+1)& (0+255),b
 11110  002338  ECF2  F00A         	call	_printf	;wreg free
 11111                           
 11112                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11113  00233C  0E05               	movlw	5
 11114  00233E  0100               	movlb	0	; () banked
 11115  002340  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11116  002342  0E0F               	movlw	15
 11117  002344  0100               	movlb	0	; () banked
 11118  002346  6FAB               	movwf	??_sensorTest& (0+255),b
 11119  002348  0EF1               	movlw	241
 11120  00234A                     u8997:
 11121  00234A  2EE8               	decfsz	wreg,f,c
 11122  00234C  D7FE               	bra	u8997
 11123  00234E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11124  002350  D7FC               	bra	u8997
 11125  002352  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11126  002354  D7FA               	bra	u8997
 11127  002356                     l7330:
 11128                           
 11129                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11130  002356  0E01               	movlw	1
 11131  002358  EC02  F028         	call	_lcdInst
 11132  00235C  0E68               	movlw	104
 11133  00235E  0100               	movlb	0	; () banked
 11134  002360  6FAB               	movwf	??_sensorTest& (0+255),b
 11135  002362  0EE4               	movlw	228
 11136  002364                     u9007:
 11137  002364  2EE8               	decfsz	wreg,f,c
 11138  002366  D7FE               	bra	u9007
 11139  002368  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11140  00236A  D7FC               	bra	u9007
 11141  00236C  F000               	nop	
 11142  00236E  0E80               	movlw	128
 11143  002370  EC02  F028         	call	_lcdInst
 11144                           
 11145                           ;Test.c: 180: printf("TST: COND");
 11146  002374  0E87               	movlw	low STR_84
 11147  002376  0100               	movlb	0	; () banked
 11148  002378  6F8E               	movwf	printf@f& (0+255),b
 11149  00237A  0EFF               	movlw	high STR_84
 11150  00237C  0100               	movlb	0	; () banked
 11151  00237E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11152  002380  ECF2  F00A         	call	_printf	;wreg free
 11153                           
 11154                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11155  002384  D01B               	goto	l7342
 11156  002386                     l7338:
 11157                           
 11158                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11159  002386  0E80               	movlw	128
 11160  002388  EC02  F028         	call	_lcdInst
 11161  00238C  0EC0               	movlw	192
 11162  00238E  EC02  F028         	call	_lcdInst
 11163                           
 11164                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11165  002392  0EA5               	movlw	low STR_86
 11166  002394  0100               	movlb	0	; () banked
 11167  002396  6F8E               	movwf	printf@f& (0+255),b
 11168  002398  0EFF               	movlw	high STR_86
 11169  00239A  0100               	movlb	0	; () banked
 11170  00239C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11171  00239E  A480               	btfss	3968,2,c	;volatile
 11172  0023A0  D004               	goto	u5920
 11173  0023A2  0100               	movlb	0	; () banked
 11174  0023A4  6BAB               	clrf	??_sensorTest& (0+255),b
 11175  0023A6  2BAB               	incf	??_sensorTest& (0+255),f,b
 11176  0023A8  D002               	goto	u5928
 11177  0023AA                     u5920:
 11178  0023AA  0100               	movlb	0	; () banked
 11179  0023AC  6BAB               	clrf	??_sensorTest& (0+255),b
 11180  0023AE                     u5928:
 11181  0023AE  0100               	movlb	0	; () banked
 11182  0023B0  51AB               	movf	??_sensorTest& (0+255),w,b
 11183  0023B2  0100               	movlb	0	; () banked
 11184  0023B4  6F90               	movwf	(?_printf+2)& (0+255),b
 11185  0023B6  6B91               	clrf	(?_printf+3)& (0+255),b
 11186  0023B8  ECF2  F00A         	call	_printf	;wreg free
 11187  0023BC                     l7342:
 11188  0023BC  A281               	btfss	3969,1,c	;volatile
 11189  0023BE  D7E3               	goto	l7338
 11190                           
 11191                           ;Test.c: 187: }
 11192                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11193  0023C0  3881               	swapf	3969,w,c	;volatile
 11194  0023C2  0B0F               	andlw	15
 11195  0023C4  0A0F               	xorlw	15
 11196  0023C6  B4D8               	btfsc	status,2,c
 11197  0023C8  0012               	return	
 11198                           
 11199                           ;Test.c: 191: else{
 11200                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11201                           
 11202                           ;Test.c: 190: }
 11203                           
 11204                           ;Test.c: 189: break;
 11205  0023CA  8689               	bsf	3977,3,c	;volatile
 11206                           
 11207                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11208  0023CC  D01B               	goto	l7354
 11209  0023CE                     l7350:
 11210                           
 11211                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11212  0023CE  0E80               	movlw	128
 11213  0023D0  EC02  F028         	call	_lcdInst
 11214  0023D4  0EC0               	movlw	192
 11215  0023D6  EC02  F028         	call	_lcdInst
 11216                           
 11217                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11218  0023DA  0EA5               	movlw	low STR_86
 11219  0023DC  0100               	movlb	0	; () banked
 11220  0023DE  6F8E               	movwf	printf@f& (0+255),b
 11221  0023E0  0EFF               	movlw	high STR_86
 11222  0023E2  0100               	movlb	0	; () banked
 11223  0023E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11224  0023E6  A480               	btfss	3968,2,c	;volatile
 11225  0023E8  D004               	goto	u5950
 11226  0023EA  0100               	movlb	0	; () banked
 11227  0023EC  6BAB               	clrf	??_sensorTest& (0+255),b
 11228  0023EE  2BAB               	incf	??_sensorTest& (0+255),f,b
 11229  0023F0  D002               	goto	u5958
 11230  0023F2                     u5950:
 11231  0023F2  0100               	movlb	0	; () banked
 11232  0023F4  6BAB               	clrf	??_sensorTest& (0+255),b
 11233  0023F6                     u5958:
 11234  0023F6  0100               	movlb	0	; () banked
 11235  0023F8  51AB               	movf	??_sensorTest& (0+255),w,b
 11236  0023FA  0100               	movlb	0	; () banked
 11237  0023FC  6F90               	movwf	(?_printf+2)& (0+255),b
 11238  0023FE  6B91               	clrf	(?_printf+3)& (0+255),b
 11239  002400  ECF2  F00A         	call	_printf	;wreg free
 11240  002404                     l7354:
 11241  002404  B281               	btfsc	3969,1,c	;volatile
 11242  002406  D7E3               	goto	l7350
 11243                           
 11244                           ;Test.c: 197: }
 11245                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11246  002408  9689               	bcf	3977,3,c	;volatile
 11247  00240A  D7A5               	goto	l7330
 11248  00240C                     __end_of_sensorTest:
 11249                           	opt stack 0
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           intcon2	equ	0xFF1
 11258                           intcon3	equ	0xFF0
 11259                           postinc0	equ	0xFEE
 11260                           wreg	equ	0xFE8
 11261                           postdec1	equ	0xFE5
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _readMAG *****************
 11271 ;; Defined at:
 11272 ;;		line 29 in file "ADCFunctionality.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  res             2    4[BANK0 ] int 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, status,2, status,0, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;Total ram usage:        4 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    8
 11293 ;; This function calls:
 11294 ;;		_readADC
 11295 ;; This function is called by:
 11296 ;;		_getMAG
 11297 ;;		_sensorTest
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           	psect	text38
 11302  004994                     __ptext38:
 11303                           	opt stack 0
 11304  004994                     _readMAG:
 11305                           	opt stack 19
 11306                           
 11307                           ;ADCFunctionality.c: 30: readADC(1);
 11308                           
 11309                           ;incstack = 0
 11310  004994  0E01               	movlw	1
 11311  004996  EC07  F027         	call	_readADC
 11312                           
 11313                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11314  00499A  50C3               	movf	4035,w,c	;volatile
 11315  00499C  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11316  0049A0  0100               	movlb	0	; () banked
 11317  0049A2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11318  0049A4  C082  F083         	movff	??_readMAG,??_readMAG+1
 11319  0049A8  0100               	movlb	0	; () banked
 11320  0049AA  6B82               	clrf	??_readMAG& (0+255),b
 11321  0049AC  0100               	movlb	0	; () banked
 11322  0049AE  1182               	iorwf	??_readMAG& (0+255),w,b
 11323  0049B0  0100               	movlb	0	; () banked
 11324  0049B2  6F84               	movwf	readMAG@res& (0+255),b
 11325  0049B4  0100               	movlb	0	; () banked
 11326  0049B6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11327  0049B8  0100               	movlb	0	; () banked
 11328  0049BA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11332  0049BC  0100               	movlb	0	; () banked
 11333  0049BE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11334  0049C0  D008               	goto	u4381
 11335  0049C2  0100               	movlb	0	; () banked
 11336  0049C4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11337  0049C6  E107               	bnz	u4380
 11338  0049C8  0E96               	movlw	150
 11339  0049CA  0100               	movlb	0	; () banked
 11340  0049CC  5D84               	subwf	readMAG@res& (0+255),w,b
 11341  0049CE  B0D8               	btfsc	status,0,c
 11342  0049D0  D002               	goto	u4380
 11343  0049D2                     u4381:
 11344  0049D2  0E01               	movlw	1
 11345  0049D4  D001               	goto	u4390
 11346  0049D6                     u4380:
 11347  0049D6  0E00               	movlw	0
 11348  0049D8                     u4390:
 11349  0049D8  0100               	movlb	0	; () banked
 11350  0049DA  6FE0               	movwf	_MAG_signal& (0+255),b
 11351  0049DC  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11352                           
 11353                           ; BSR set to: 0
 11354  0049DE  0012               	return		;funcret
 11355  0049E0                     __end_of_readMAG:
 11356                           	opt stack 0
 11357                           tblptru	equ	0xFF8
 11358                           tblptrh	equ	0xFF7
 11359                           tblptrl	equ	0xFF6
 11360                           tablat	equ	0xFF5
 11361                           prodh	equ	0xFF4
 11362                           prodl	equ	0xFF3
 11363                           intcon	equ	0xFF2
 11364                           intcon2	equ	0xFF1
 11365                           intcon3	equ	0xFF0
 11366                           postinc0	equ	0xFEE
 11367                           wreg	equ	0xFE8
 11368                           postdec1	equ	0xFE5
 11369                           fsr1l	equ	0xFE1
 11370                           indf2	equ	0xFDF
 11371                           postinc2	equ	0xFDE
 11372                           postdec2	equ	0xFDD
 11373                           fsr2h	equ	0xFDA
 11374                           fsr2l	equ	0xFD9
 11375                           status	equ	0xFD8
 11376                           
 11377 ;; *************** function _algorithmTest *****************
 11378 ;; Defined at:
 11379 ;;		line 80 in file "Test.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      void 
 11386 ;; Registers used:
 11387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;Total ram usage:        2 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:   10
 11400 ;; This function calls:
 11401 ;;		_lcdInst
 11402 ;;		_printf
 11403 ;; This function is called by:
 11404 ;;		_Test
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text39
 11409  003D4E                     __ptext39:
 11410                           	opt stack 0
 11411  003D4E                     _algorithmTest:
 11412                           	opt stack 19
 11413                           
 11414                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;incstack = 0
 11418  003D4E  0E01               	movlw	1
 11419  003D50  EC02  F028         	call	_lcdInst
 11420  003D54  0E68               	movlw	104
 11421  003D56  0100               	movlb	0	; () banked
 11422  003D58  6FAB               	movwf	??_algorithmTest& (0+255),b
 11423  003D5A  0EE4               	movlw	228
 11424  003D5C                     u9017:
 11425  003D5C  2EE8               	decfsz	wreg,f,c
 11426  003D5E  D7FE               	bra	u9017
 11427  003D60  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11428  003D62  D7FC               	bra	u9017
 11429  003D64  F000               	nop	
 11430  003D66  0E80               	movlw	128
 11431  003D68  EC02  F028         	call	_lcdInst
 11432                           
 11433                           ;Test.c: 83: printf("ALGORITHM TEST");
 11434  003D6C  0ED2               	movlw	low STR_70
 11435  003D6E  0100               	movlb	0	; () banked
 11436  003D70  6F8E               	movwf	printf@f& (0+255),b
 11437  003D72  0EFE               	movlw	high STR_70
 11438  003D74  0100               	movlb	0	; () banked
 11439  003D76  6F8F               	movwf	(printf@f+1)& (0+255),b
 11440  003D78  ECF2  F00A         	call	_printf	;wreg free
 11441                           
 11442                           ;Test.c: 84: lcdInst(0b11000000);;
 11443  003D7C  0EC0               	movlw	192
 11444  003D7E  EC02  F028         	call	_lcdInst
 11445                           
 11446                           ;Test.c: 85: printf("PUSH TO START");
 11447  003D82  0E0B               	movlw	low STR_71
 11448  003D84  0100               	movlb	0	; () banked
 11449  003D86  6F8E               	movwf	printf@f& (0+255),b
 11450  003D88  0EFF               	movlw	high STR_71
 11451  003D8A  0100               	movlb	0	; () banked
 11452  003D8C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11453  003D8E  ECF2  F00A         	call	_printf	;wreg free
 11454                           
 11455                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11456  003D92  0E05               	movlw	5
 11457  003D94  0100               	movlb	0	; () banked
 11458  003D96  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11459  003D98  0E0F               	movlw	15
 11460  003D9A  0100               	movlb	0	; () banked
 11461  003D9C  6FAB               	movwf	??_algorithmTest& (0+255),b
 11462  003D9E  0EF1               	movlw	241
 11463  003DA0                     u9027:
 11464  003DA0  2EE8               	decfsz	wreg,f,c
 11465  003DA2  D7FE               	bra	u9027
 11466  003DA4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11467  003DA6  D7FC               	bra	u9027
 11468  003DA8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11469  003DAA  D7FA               	bra	u9027
 11470  003DAC                     l1126:
 11471  003DAC  A281               	btfss	3969,1,c	;volatile
 11472  003DAE  D7FE               	goto	l1126
 11473  003DB0                     l1129:
 11474  003DB0  B281               	btfsc	3969,1,c	;volatile
 11475  003DB2  D7FE               	goto	l1129
 11476                           
 11477                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11478  003DB4  0E01               	movlw	1
 11479  003DB6  EC02  F028         	call	_lcdInst
 11480  003DBA  0E68               	movlw	104
 11481  003DBC  0100               	movlb	0	; () banked
 11482  003DBE  6FAB               	movwf	??_algorithmTest& (0+255),b
 11483  003DC0  0EE4               	movlw	228
 11484  003DC2                     u9037:
 11485  003DC2  2EE8               	decfsz	wreg,f,c
 11486  003DC4  D7FE               	bra	u9037
 11487  003DC6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11488  003DC8  D7FC               	bra	u9037
 11489  003DCA  F000               	nop	
 11490  003DCC  0E80               	movlw	128
 11491  003DCE  EC02  F028         	call	_lcdInst
 11492                           
 11493                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11494  003DD2  0E5F               	movlw	low STR_72
 11495  003DD4  0100               	movlb	0	; () banked
 11496  003DD6  6F8E               	movwf	printf@f& (0+255),b
 11497  003DD8  0EFC               	movlw	high STR_72
 11498  003DDA  0100               	movlb	0	; () banked
 11499  003DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11500  003DDE  ECF2  F00A         	call	_printf	;wreg free
 11501                           
 11502                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11503  003DE2  0EEF               	movlw	low STR_73
 11504  003DE4  0100               	movlb	0	; () banked
 11505  003DE6  6F8E               	movwf	printf@f& (0+255),b
 11506  003DE8  0EFE               	movlw	high STR_73
 11507  003DEA  0100               	movlb	0	; () banked
 11508  003DEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11509  003DEE  ECF2  F00A         	call	_printf	;wreg free
 11510                           
 11511                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11512  003DF2  0E4F               	movlw	low STR_74
 11513  003DF4  0100               	movlb	0	; () banked
 11514  003DF6  6F8E               	movwf	printf@f& (0+255),b
 11515  003DF8  0EFF               	movlw	high STR_74
 11516  003DFA  0100               	movlb	0	; () banked
 11517  003DFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11518  003DFE  ECF2  F00A         	call	_printf	;wreg free
 11519                           
 11520                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11521  003E02  0EB4               	movlw	low STR_75
 11522  003E04  0100               	movlb	0	; () banked
 11523  003E06  6F8E               	movwf	printf@f& (0+255),b
 11524  003E08  0EFE               	movlw	high STR_75
 11525  003E0A  0100               	movlb	0	; () banked
 11526  003E0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11527  003E0E  ECF2  F00A         	call	_printf	;wreg free
 11528                           
 11529                           ;Test.c: 121: printf("ALG5: NO CANS");
 11530  003E12  0EFD               	movlw	low STR_76
 11531  003E14  0100               	movlb	0	; () banked
 11532  003E16  6F8E               	movwf	printf@f& (0+255),b
 11533  003E18  0EFE               	movlw	high STR_76
 11534  003E1A  0100               	movlb	0	; () banked
 11535  003E1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11536  003E1E  ECF2  F00A         	call	_printf	;wreg free
 11537  003E22  0012               	return		;funcret
 11538  003E24                     __end_of_algorithmTest:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           intcon2	equ	0xFF1
 11548                           intcon3	equ	0xFF0
 11549                           postinc0	equ	0xFEE
 11550                           wreg	equ	0xFE8
 11551                           postdec1	equ	0xFE5
 11552                           fsr1l	equ	0xFE1
 11553                           indf2	equ	0xFDF
 11554                           postinc2	equ	0xFDE
 11555                           postdec2	equ	0xFDD
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _actuatorTest *****************
 11561 ;; Defined at:
 11562 ;;		line 203 in file "Test.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  i               1   45[BANK0 ] unsigned char 
 11567 ;;  i               1   67[BANK0 ] unsigned char 
 11568 ;;  i               1   66[BANK0 ] unsigned char 
 11569 ;;  i               1   65[BANK0 ] unsigned char 
 11570 ;;  i               1   64[BANK0 ] unsigned char 
 11571 ;;  i               1   63[BANK0 ] unsigned char 
 11572 ;;  i               1   62[BANK0 ] unsigned char 
 11573 ;;  i               1   61[BANK0 ] unsigned char 
 11574 ;;  i               1   60[BANK0 ] unsigned char 
 11575 ;;  i               1   59[BANK0 ] unsigned char 
 11576 ;;  i               1   58[BANK0 ] unsigned char 
 11577 ;;  i               1   57[BANK0 ] unsigned char 
 11578 ;;  i               1   56[BANK0 ] unsigned char 
 11579 ;;  i               1   55[BANK0 ] unsigned char 
 11580 ;;  i               1   54[BANK0 ] unsigned char 
 11581 ;;  i               1   53[BANK0 ] unsigned char 
 11582 ;;  i               1   52[BANK0 ] unsigned char 
 11583 ;;  i               1   51[BANK0 ] unsigned char 
 11584 ;;  i               1   50[BANK0 ] unsigned char 
 11585 ;;  i               1   49[BANK0 ] unsigned char 
 11586 ;;  i               1   48[BANK0 ] unsigned char 
 11587 ;;  i               1   47[BANK0 ] unsigned char 
 11588 ;;  i               1   46[BANK0 ] unsigned char 
 11589 ;;  i               2   68[BANK0 ] int 
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;Total ram usage:       27 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:   10
 11606 ;; This function calls:
 11607 ;;		_lcdInst
 11608 ;;		_printf
 11609 ;;		_updateServoPosition
 11610 ;; This function is called by:
 11611 ;;		_Test
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           	psect	text40
 11616  000012                     __ptext40:
 11617                           	opt stack 0
 11618  000012                     _actuatorTest:
 11619                           	opt stack 19
 11620                           
 11621                           ;Test.c: 205: int i = 0;
 11622                           
 11623                           ;incstack = 0
 11624  000012  0E00               	movlw	0
 11625  000014  0100               	movlb	0	; () banked
 11626  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11627  000018  0E00               	movlw	0
 11628  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11632  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11636  00001E  0E01               	movlw	1
 11637  000020  EC02  F028         	call	_lcdInst
 11638  000024  0E68               	movlw	104
 11639  000026  0100               	movlb	0	; () banked
 11640  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11641  00002A  0EE4               	movlw	228
 11642  00002C                     u9047:
 11643  00002C  2EE8               	decfsz	wreg,f,c
 11644  00002E  D7FE               	bra	u9047
 11645  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11646  000032  D7FC               	bra	u9047
 11647  000034  F000               	nop	
 11648  000036  0E80               	movlw	128
 11649  000038  EC02  F028         	call	_lcdInst
 11650                           
 11651                           ;Test.c: 209: printf("ACTUATORS");
 11652  00003C  0E91               	movlw	low STR_88
 11653  00003E  0100               	movlb	0	; () banked
 11654  000040  6F8E               	movwf	printf@f& (0+255),b
 11655  000042  0EFF               	movlw	high STR_88
 11656  000044  0100               	movlb	0	; () banked
 11657  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11658  000048  ECF2  F00A         	call	_printf	;wreg free
 11659                           
 11660                           ;Test.c: 210: lcdInst(0b11000000);;
 11661  00004C  0EC0               	movlw	192
 11662  00004E  EC02  F028         	call	_lcdInst
 11663                           
 11664                           ;Test.c: 211: printf("PUSH TO START");
 11665  000052  0E0B               	movlw	low STR_71
 11666  000054  0100               	movlb	0	; () banked
 11667  000056  6F8E               	movwf	printf@f& (0+255),b
 11668  000058  0EFF               	movlw	high STR_71
 11669  00005A  0100               	movlb	0	; () banked
 11670  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11671  00005E  ECF2  F00A         	call	_printf	;wreg free
 11672                           
 11673                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11674  000062  0E05               	movlw	5
 11675  000064  0100               	movlb	0	; () banked
 11676  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11677  000068  0E0F               	movlw	15
 11678  00006A  0100               	movlb	0	; () banked
 11679  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11680  00006E  0EF1               	movlw	241
 11681  000070                     u9057:
 11682  000070  2EE8               	decfsz	wreg,f,c
 11683  000072  D7FE               	bra	u9057
 11684  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11685  000076  D7FC               	bra	u9057
 11686  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11687  00007A  D7FA               	bra	u9057
 11688  00007C                     l1161:
 11689  00007C  A281               	btfss	3969,1,c	;volatile
 11690  00007E  D7FE               	goto	l1161
 11691  000080                     l1164:
 11692  000080  B281               	btfsc	3969,1,c	;volatile
 11693  000082  D7FE               	goto	l1164
 11694                           
 11695                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11696  000084  0E01               	movlw	1
 11697  000086  EC02  F028         	call	_lcdInst
 11698  00008A  0E68               	movlw	104
 11699  00008C  0100               	movlb	0	; () banked
 11700  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11701  000090  0EE4               	movlw	228
 11702  000092                     u9067:
 11703  000092  2EE8               	decfsz	wreg,f,c
 11704  000094  D7FE               	bra	u9067
 11705  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11706  000098  D7FC               	bra	u9067
 11707  00009A  F000               	nop	
 11708  00009C  0E80               	movlw	128
 11709  00009E  EC02  F028         	call	_lcdInst
 11710                           
 11711                           ;Test.c: 220: printf("TST: DC MOTORS");
 11712  0000A2  0EC3               	movlw	low STR_90
 11713  0000A4  0100               	movlb	0	; () banked
 11714  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11715  0000A8  0EFE               	movlw	high STR_90
 11716  0000AA  0100               	movlb	0	; () banked
 11717  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11718  0000AE  ECF2  F00A         	call	_printf	;wreg free
 11719                           
 11720                           ;Test.c: 221: lcdInst(0b11000000);;
 11721  0000B2  0EC0               	movlw	192
 11722  0000B4  EC02  F028         	call	_lcdInst
 11723                           
 11724                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11725  0000B8  0EE1               	movlw	low STR_91
 11726  0000BA  0100               	movlb	0	; () banked
 11727  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11728  0000BE  0EFE               	movlw	high STR_91
 11729  0000C0  0100               	movlb	0	; () banked
 11730  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11731  0000C4  ECF2  F00A         	call	_printf	;wreg free
 11732                           
 11733                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11734  0000C8  8A89               	bsf	3977,5,c	;volatile
 11735                           
 11736                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11737  0000CA  0E00               	movlw	0
 11738  0000CC  0100               	movlb	0	; () banked
 11739  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11740  0000D0  0E00               	movlw	0
 11741  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11742                           
 11743                           ; BSR set to: 0
 11744  0000D4  0100               	movlb	0	; () banked
 11745  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11746  0000D8  D008               	goto	l7394
 11747  0000DA  0100               	movlb	0	; () banked
 11748  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11749  0000DE  E123               	bnz	l1168
 11750  0000E0  0E05               	movlw	5
 11751  0000E2  0100               	movlb	0	; () banked
 11752  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11753  0000E6  B0D8               	btfsc	status,0,c
 11754  0000E8  D01E               	goto	l1168
 11755  0000EA                     l7394:
 11756                           
 11757                           ; BSR set to: 0
 11758  0000EA  0E00               	movlw	0
 11759  0000EC  0100               	movlb	0	; () banked
 11760  0000EE  6FAD               	movwf	actuatorTest@i_1653& (0+255),b
 11761  0000F0                     l7396:
 11762                           
 11763                           ; BSR set to: 0
 11764  0000F0  0E63               	movlw	99
 11765  0000F2  0100               	movlb	0	; () banked
 11766  0000F4  65AD               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11767  0000F6  D001               	goto	l7400
 11768  0000F8  D00C               	goto	l7404
 11769  0000FA                     l7400:
 11770                           
 11771                           ; BSR set to: 0
 11772  0000FA  0E68               	movlw	104
 11773  0000FC  0100               	movlb	0	; () banked
 11774  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11775  000100  0EE4               	movlw	228
 11776  000102                     u9077:
 11777  000102  2EE8               	decfsz	wreg,f,c
 11778  000104  D7FE               	bra	u9077
 11779  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11780  000108  D7FC               	bra	u9077
 11781  00010A  F000               	nop	
 11782  00010C  0100               	movlb	0	; () banked
 11783  00010E  2BAD               	incf	actuatorTest@i_1653& (0+255),f,b
 11784  000110  D7EF               	goto	l7396
 11785  000112                     l7404:
 11786                           
 11787                           ; BSR set to: 0
 11788  000112  0100               	movlb	0	; () banked
 11789  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11790  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11791                           
 11792                           ; BSR set to: 0
 11793  000118  0100               	movlb	0	; () banked
 11794  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11795  00011C  D7E6               	goto	l7394
 11796  00011E  0100               	movlb	0	; () banked
 11797  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11798  000122  E101               	bnz	u6020
 11799  000124  D7DD               	goto	L10
 11800  000126                     u6020:
 11801  000126                     l1168:
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11805  000126  9A89               	bcf	3977,5,c	;volatile
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11809  000128  0E01               	movlw	1
 11810  00012A  EC02  F028         	call	_lcdInst
 11811  00012E  0E68               	movlw	104
 11812  000130  0100               	movlb	0	; () banked
 11813  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11814  000134  0EE4               	movlw	228
 11815  000136                     u9087:
 11816  000136  2EE8               	decfsz	wreg,f,c
 11817  000138  D7FE               	bra	u9087
 11818  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11819  00013C  D7FC               	bra	u9087
 11820  00013E  F000               	nop	
 11821  000140  0E80               	movlw	128
 11822  000142  EC02  F028         	call	_lcdInst
 11823                           
 11824                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11825  000146  0E70               	movlw	low STR_92
 11826  000148  0100               	movlb	0	; () banked
 11827  00014A  6F8E               	movwf	printf@f& (0+255),b
 11828  00014C  0EFC               	movlw	high STR_92
 11829  00014E  0100               	movlb	0	; () banked
 11830  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11831  000152  ECF2  F00A         	call	_printf	;wreg free
 11832                           
 11833                           ;Test.c: 233: lcdInst(0b11000000);;
 11834  000156  0EC0               	movlw	192
 11835  000158  EC02  F028         	call	_lcdInst
 11836                           
 11837                           ;Test.c: 234: printf("PIN RA3...");
 11838  00015C  0E5B               	movlw	low STR_93
 11839  00015E  0100               	movlb	0	; () banked
 11840  000160  6F8E               	movwf	printf@f& (0+255),b
 11841  000162  0EFF               	movlw	high STR_93
 11842  000164  0100               	movlb	0	; () banked
 11843  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11844  000168  ECF2  F00A         	call	_printf	;wreg free
 11845                           
 11846                           ;Test.c: 235: for(i=0;i<5;i++){
 11847  00016C  0E00               	movlw	0
 11848  00016E  0100               	movlb	0	; () banked
 11849  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11850  000172  0E00               	movlw	0
 11851  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11852                           
 11853                           ; BSR set to: 0
 11854  000176  0100               	movlb	0	; () banked
 11855  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11856  00017A  D008               	goto	l1171
 11857  00017C  0100               	movlb	0	; () banked
 11858  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11859  000180  E12C               	bnz	l1172
 11860  000182  0E05               	movlw	5
 11861  000184  0100               	movlb	0	; () banked
 11862  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11863  000188  B0D8               	btfsc	status,0,c
 11864  00018A  D027               	goto	l1172
 11865  00018C                     l1171:
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11869  00018C  8689               	bsf	3977,3,c	;volatile
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11873  00018E  0E0D               	movlw	13
 11874  000190  0100               	movlb	0	; () banked
 11875  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11876  000194  0E2D               	movlw	45
 11877  000196  0100               	movlb	0	; () banked
 11878  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11879  00019A  0ED7               	movlw	215
 11880  00019C                     u9097:
 11881  00019C  2EE8               	decfsz	wreg,f,c
 11882  00019E  D7FE               	bra	u9097
 11883  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11884  0001A2  D7FC               	bra	u9097
 11885  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11886  0001A6  D7FA               	bra	u9097
 11887  0001A8  D000               	nop2	
 11888                           
 11889                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11890  0001AA  9689               	bcf	3977,3,c	;volatile
 11891                           
 11892                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11893  0001AC  0E1D               	movlw	29
 11894  0001AE  0100               	movlb	0	; () banked
 11895  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11896  0001B2  0E69               	movlw	105
 11897  0001B4  0100               	movlb	0	; () banked
 11898  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11899  0001B8  0EA5               	movlw	165
 11900  0001BA                     u9107:
 11901  0001BA  2EE8               	decfsz	wreg,f,c
 11902  0001BC  D7FE               	bra	u9107
 11903  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11904  0001C0  D7FC               	bra	u9107
 11905  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11906  0001C4  D7FA               	bra	u9107
 11907  0001C6  0100               	movlb	0	; () banked
 11908  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11909  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11910  0001CC  0100               	movlb	0	; () banked
 11911  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11912  0001D0  D7DD               	goto	l1171
 11913  0001D2  0100               	movlb	0	; () banked
 11914  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11915  0001D6  E101               	bnz	u6040
 11916  0001D8  D7D4               	goto	L11
 11917  0001DA                     u6040:
 11918  0001DA                     l1172:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;Test.c: 240: }
 11922                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11923  0001DA  9689               	bcf	3977,3,c	;volatile
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11927  0001DC  0E01               	movlw	1
 11928  0001DE  EC02  F028         	call	_lcdInst
 11929  0001E2  0E68               	movlw	104
 11930  0001E4  0100               	movlb	0	; () banked
 11931  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11932  0001E8  0EE4               	movlw	228
 11933  0001EA                     u9117:
 11934  0001EA  2EE8               	decfsz	wreg,f,c
 11935  0001EC  D7FE               	bra	u9117
 11936  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11937  0001F0  D7FC               	bra	u9117
 11938  0001F2  F000               	nop	
 11939  0001F4  0E80               	movlw	128
 11940  0001F6  EC02  F028         	call	_lcdInst
 11941                           
 11942                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11943  0001FA  0E81               	movlw	low STR_94
 11944  0001FC  0100               	movlb	0	; () banked
 11945  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11946  000200  0EFC               	movlw	high STR_94
 11947  000202  0100               	movlb	0	; () banked
 11948  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11949  000206  ECF2  F00A         	call	_printf	;wreg free
 11950                           
 11951                           ;Test.c: 249: lcdInst(0b11000000);;
 11952  00020A  0EC0               	movlw	192
 11953  00020C  EC02  F028         	call	_lcdInst
 11954                           
 11955                           ;Test.c: 250: printf("PIN RA4...");
 11956  000210  0E66               	movlw	low STR_95
 11957  000212  0100               	movlb	0	; () banked
 11958  000214  6F8E               	movwf	printf@f& (0+255),b
 11959  000216  0EFF               	movlw	high STR_95
 11960  000218  0100               	movlb	0	; () banked
 11961  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11962  00021C  ECF2  F00A         	call	_printf	;wreg free
 11963                           
 11964                           ;Test.c: 251: for(i=0;i<5;i++){
 11965  000220  0E00               	movlw	0
 11966  000222  0100               	movlb	0	; () banked
 11967  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11968  000226  0E00               	movlw	0
 11969  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11970                           
 11971                           ; BSR set to: 0
 11972  00022A  0100               	movlb	0	; () banked
 11973  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11974  00022E  D008               	goto	l1173
 11975  000230  0100               	movlb	0	; () banked
 11976  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11977  000234  E12C               	bnz	l1174
 11978  000236  0E05               	movlw	5
 11979  000238  0100               	movlb	0	; () banked
 11980  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11981  00023C  B0D8               	btfsc	status,0,c
 11982  00023E  D027               	goto	l1174
 11983  000240                     l1173:
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11987  000240  8889               	bsf	3977,4,c	;volatile
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11991  000242  0E0D               	movlw	13
 11992  000244  0100               	movlb	0	; () banked
 11993  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11994  000248  0E2D               	movlw	45
 11995  00024A  0100               	movlb	0	; () banked
 11996  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11997  00024E  0ED7               	movlw	215
 11998  000250                     u9127:
 11999  000250  2EE8               	decfsz	wreg,f,c
 12000  000252  D7FE               	bra	u9127
 12001  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12002  000256  D7FC               	bra	u9127
 12003  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12004  00025A  D7FA               	bra	u9127
 12005  00025C  D000               	nop2	
 12006                           
 12007                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12008  00025E  9889               	bcf	3977,4,c	;volatile
 12009                           
 12010                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12011  000260  0E1D               	movlw	29
 12012  000262  0100               	movlb	0	; () banked
 12013  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12014  000266  0E69               	movlw	105
 12015  000268  0100               	movlb	0	; () banked
 12016  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12017  00026C  0EA5               	movlw	165
 12018  00026E                     u9137:
 12019  00026E  2EE8               	decfsz	wreg,f,c
 12020  000270  D7FE               	bra	u9137
 12021  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12022  000274  D7FC               	bra	u9137
 12023  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12024  000278  D7FA               	bra	u9137
 12025  00027A  0100               	movlb	0	; () banked
 12026  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12027  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12028  000280  0100               	movlb	0	; () banked
 12029  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12030  000284  D7DD               	goto	l1173
 12031  000286  0100               	movlb	0	; () banked
 12032  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12033  00028A  E101               	bnz	u6060
 12034  00028C  D7D4               	goto	L12
 12035  00028E                     u6060:
 12036  00028E                     l1174:
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;Test.c: 256: }
 12040                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12041  00028E  9889               	bcf	3977,4,c	;volatile
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12045  000290  0E01               	movlw	1
 12046  000292  EC02  F028         	call	_lcdInst
 12047  000296  0E68               	movlw	104
 12048  000298  0100               	movlb	0	; () banked
 12049  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12050  00029C  0EE4               	movlw	228
 12051  00029E                     u9147:
 12052  00029E  2EE8               	decfsz	wreg,f,c
 12053  0002A0  D7FE               	bra	u9147
 12054  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12055  0002A4  D7FC               	bra	u9147
 12056  0002A6  F000               	nop	
 12057  0002A8  0E80               	movlw	128
 12058  0002AA  EC02  F028         	call	_lcdInst
 12059                           
 12060                           ;Test.c: 261: machine_state = Sorting_state;
 12061  0002AE  0E01               	movlw	1
 12062  0002B0  0100               	movlb	0	; () banked
 12063  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;Test.c: 262: was_low_1 = 0;
 12067  0002B4  0E00               	movlw	0
 12068  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12069  0002B8  0E00               	movlw	0
 12070  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;Test.c: 263: was_low_1 = 0;
 12074  0002BC  0E00               	movlw	0
 12075  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12076  0002C0  0E00               	movlw	0
 12077  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;Test.c: 270: printf("TST: PAN SERVO");
 12081  0002C4  0EA5               	movlw	low STR_96
 12082  0002C6  0100               	movlb	0	; () banked
 12083  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12084  0002CA  0EFE               	movlw	high STR_96
 12085  0002CC  0100               	movlb	0	; () banked
 12086  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12087  0002D0  ECF2  F00A         	call	_printf	;wreg free
 12088                           
 12089                           ;Test.c: 271: lcdInst(0b11000000);;
 12090  0002D4  0EC0               	movlw	192
 12091  0002D6  EC02  F028         	call	_lcdInst
 12092                           
 12093                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12094  0002DA  0E0A               	movlw	low STR_97
 12095  0002DC  0100               	movlb	0	; () banked
 12096  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12097  0002E0  0EFC               	movlw	high STR_97
 12098  0002E2  0100               	movlb	0	; () banked
 12099  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12100  0002E6  ECF2  F00A         	call	_printf	;wreg free
 12101                           
 12102                           ;Test.c: 273: updateServoPosition(1200, 1);
 12103  0002EA  0E04               	movlw	4
 12104  0002EC  0100               	movlb	0	; () banked
 12105  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12106  0002F0  0EB0               	movlw	176
 12107  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12108  0002F4  0E00               	movlw	0
 12109  0002F6  0100               	movlb	0	; () banked
 12110  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12111  0002FA  0E01               	movlw	1
 12112  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12113  0002FE  EC5E  F022         	call	_updateServoPosition	;wreg free
 12114                           
 12115                           ;Test.c: 274: TMR1ON = 1;
 12116  000302  80CD               	bsf	4045,0,c	;volatile
 12117                           
 12118                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12119  000304  0E00               	movlw	0
 12120  000306  0100               	movlb	0	; () banked
 12121  000308  6FAE               	movwf	actuatorTest@i_1660& (0+255),b
 12122  00030A                     l7480:
 12123                           
 12124                           ; BSR set to: 0
 12125  00030A  0E63               	movlw	99
 12126  00030C  0100               	movlb	0	; () banked
 12127  00030E  65AE               	cpfsgt	actuatorTest@i_1660& (0+255),b
 12128  000310  D001               	goto	l7484
 12129  000312  D00C               	goto	l7488
 12130  000314                     l7484:
 12131                           
 12132                           ; BSR set to: 0
 12133  000314  0E68               	movlw	104
 12134  000316  0100               	movlb	0	; () banked
 12135  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12136  00031A  0EE4               	movlw	228
 12137  00031C                     u9157:
 12138  00031C  2EE8               	decfsz	wreg,f,c
 12139  00031E  D7FE               	bra	u9157
 12140  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12141  000322  D7FC               	bra	u9157
 12142  000324  F000               	nop	
 12143  000326  0100               	movlb	0	; () banked
 12144  000328  2BAE               	incf	actuatorTest@i_1660& (0+255),f,b
 12145  00032A  D7EF               	goto	l7480
 12146  00032C                     l7488:
 12147                           
 12148                           ; BSR set to: 0
 12149  00032C  0E00               	movlw	0
 12150  00032E  0100               	movlb	0	; () banked
 12151  000330  6FAF               	movwf	actuatorTest@i_1661& (0+255),b
 12152  000332                     l7490:
 12153                           
 12154                           ; BSR set to: 0
 12155  000332  0E63               	movlw	99
 12156  000334  0100               	movlb	0	; () banked
 12157  000336  65AF               	cpfsgt	actuatorTest@i_1661& (0+255),b
 12158  000338  D001               	goto	l7494
 12159  00033A  D00C               	goto	l7498
 12160  00033C                     l7494:
 12161                           
 12162                           ; BSR set to: 0
 12163  00033C  0E68               	movlw	104
 12164  00033E  0100               	movlb	0	; () banked
 12165  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12166  000342  0EE4               	movlw	228
 12167  000344                     u9167:
 12168  000344  2EE8               	decfsz	wreg,f,c
 12169  000346  D7FE               	bra	u9167
 12170  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12171  00034A  D7FC               	bra	u9167
 12172  00034C  F000               	nop	
 12173  00034E  0100               	movlb	0	; () banked
 12174  000350  2BAF               	incf	actuatorTest@i_1661& (0+255),f,b
 12175  000352  D7EF               	goto	l7490
 12176  000354                     l7498:
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12180  000354  0E80               	movlw	128
 12181  000356  EC02  F028         	call	_lcdInst
 12182  00035A  0EC0               	movlw	192
 12183  00035C  EC02  F028         	call	_lcdInst
 12184                           
 12185                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12186  000360  0EF9               	movlw	low STR_98
 12187  000362  0100               	movlb	0	; () banked
 12188  000364  6F8E               	movwf	printf@f& (0+255),b
 12189  000366  0EFB               	movlw	high STR_98
 12190  000368  0100               	movlb	0	; () banked
 12191  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12192  00036C  ECF2  F00A         	call	_printf	;wreg free
 12193                           
 12194                           ;Test.c: 279: updateServoPosition(500, 1);
 12195  000370  0E01               	movlw	1
 12196  000372  0100               	movlb	0	; () banked
 12197  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12198  000376  0EF4               	movlw	244
 12199  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12200  00037A  0E00               	movlw	0
 12201  00037C  0100               	movlb	0	; () banked
 12202  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12203  000380  0E01               	movlw	1
 12204  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12205  000384  EC5E  F022         	call	_updateServoPosition	;wreg free
 12206                           
 12207                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12208  000388  0E00               	movlw	0
 12209  00038A  0100               	movlb	0	; () banked
 12210  00038C  6FB0               	movwf	actuatorTest@i_1663& (0+255),b
 12211  00038E                     l7506:
 12212                           
 12213                           ; BSR set to: 0
 12214  00038E  0E63               	movlw	99
 12215  000390  0100               	movlb	0	; () banked
 12216  000392  65B0               	cpfsgt	actuatorTest@i_1663& (0+255),b
 12217  000394  D001               	goto	l7510
 12218  000396  D00C               	goto	l7514
 12219  000398                     l7510:
 12220                           
 12221                           ; BSR set to: 0
 12222  000398  0E68               	movlw	104
 12223  00039A  0100               	movlb	0	; () banked
 12224  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12225  00039E  0EE4               	movlw	228
 12226  0003A0                     u9177:
 12227  0003A0  2EE8               	decfsz	wreg,f,c
 12228  0003A2  D7FE               	bra	u9177
 12229  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12230  0003A6  D7FC               	bra	u9177
 12231  0003A8  F000               	nop	
 12232  0003AA  0100               	movlb	0	; () banked
 12233  0003AC  2BB0               	incf	actuatorTest@i_1663& (0+255),f,b
 12234  0003AE  D7EF               	goto	l7506
 12235  0003B0                     l7514:
 12236                           
 12237                           ; BSR set to: 0
 12238  0003B0  0E00               	movlw	0
 12239  0003B2  0100               	movlb	0	; () banked
 12240  0003B4  6FB1               	movwf	actuatorTest@i_1664& (0+255),b
 12241  0003B6                     l7516:
 12242                           
 12243                           ; BSR set to: 0
 12244  0003B6  0E63               	movlw	99
 12245  0003B8  0100               	movlb	0	; () banked
 12246  0003BA  65B1               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12247  0003BC  D001               	goto	l7520
 12248  0003BE  D00C               	goto	l7524
 12249  0003C0                     l7520:
 12250                           
 12251                           ; BSR set to: 0
 12252  0003C0  0E68               	movlw	104
 12253  0003C2  0100               	movlb	0	; () banked
 12254  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12255  0003C6  0EE4               	movlw	228
 12256  0003C8                     u9187:
 12257  0003C8  2EE8               	decfsz	wreg,f,c
 12258  0003CA  D7FE               	bra	u9187
 12259  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12260  0003CE  D7FC               	bra	u9187
 12261  0003D0  F000               	nop	
 12262  0003D2  0100               	movlb	0	; () banked
 12263  0003D4  2BB1               	incf	actuatorTest@i_1664& (0+255),f,b
 12264  0003D6  D7EF               	goto	l7516
 12265  0003D8                     l7524:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12269  0003D8  0E80               	movlw	128
 12270  0003DA  EC02  F028         	call	_lcdInst
 12271  0003DE  0EC0               	movlw	192
 12272  0003E0  EC02  F028         	call	_lcdInst
 12273                           
 12274                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12275  0003E4  0ED7               	movlw	low STR_99
 12276  0003E6  0100               	movlb	0	; () banked
 12277  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12278  0003EA  0EFB               	movlw	high STR_99
 12279  0003EC  0100               	movlb	0	; () banked
 12280  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12281  0003F0  ECF2  F00A         	call	_printf	;wreg free
 12282                           
 12283                           ;Test.c: 284: updateServoPosition(2400, 1);
 12284  0003F4  0E09               	movlw	9
 12285  0003F6  0100               	movlb	0	; () banked
 12286  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12287  0003FA  0E60               	movlw	96
 12288  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12289  0003FE  0E00               	movlw	0
 12290  000400  0100               	movlb	0	; () banked
 12291  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12292  000404  0E01               	movlw	1
 12293  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12294  000408  EC5E  F022         	call	_updateServoPosition	;wreg free
 12295                           
 12296                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12297  00040C  0E00               	movlw	0
 12298  00040E  0100               	movlb	0	; () banked
 12299  000410  6FB2               	movwf	actuatorTest@i_1666& (0+255),b
 12300  000412                     l7532:
 12301                           
 12302                           ; BSR set to: 0
 12303  000412  0E63               	movlw	99
 12304  000414  0100               	movlb	0	; () banked
 12305  000416  65B2               	cpfsgt	actuatorTest@i_1666& (0+255),b
 12306  000418  D001               	goto	l7536
 12307  00041A  D00C               	goto	l7540
 12308  00041C                     l7536:
 12309                           
 12310                           ; BSR set to: 0
 12311  00041C  0E68               	movlw	104
 12312  00041E  0100               	movlb	0	; () banked
 12313  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12314  000422  0EE4               	movlw	228
 12315  000424                     u9197:
 12316  000424  2EE8               	decfsz	wreg,f,c
 12317  000426  D7FE               	bra	u9197
 12318  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12319  00042A  D7FC               	bra	u9197
 12320  00042C  F000               	nop	
 12321  00042E  0100               	movlb	0	; () banked
 12322  000430  2BB2               	incf	actuatorTest@i_1666& (0+255),f,b
 12323  000432  D7EF               	goto	l7532
 12324  000434                     l7540:
 12325                           
 12326                           ; BSR set to: 0
 12327  000434  0E00               	movlw	0
 12328  000436  0100               	movlb	0	; () banked
 12329  000438  6FB3               	movwf	actuatorTest@i_1667& (0+255),b
 12330  00043A                     l7542:
 12331                           
 12332                           ; BSR set to: 0
 12333  00043A  0E63               	movlw	99
 12334  00043C  0100               	movlb	0	; () banked
 12335  00043E  65B3               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12336  000440  D001               	goto	l7546
 12337  000442  D00C               	goto	l7550
 12338  000444                     l7546:
 12339                           
 12340                           ; BSR set to: 0
 12341  000444  0E68               	movlw	104
 12342  000446  0100               	movlb	0	; () banked
 12343  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12344  00044A  0EE4               	movlw	228
 12345  00044C                     u9207:
 12346  00044C  2EE8               	decfsz	wreg,f,c
 12347  00044E  D7FE               	bra	u9207
 12348  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12349  000452  D7FC               	bra	u9207
 12350  000454  F000               	nop	
 12351  000456  0100               	movlb	0	; () banked
 12352  000458  2BB3               	incf	actuatorTest@i_1667& (0+255),f,b
 12353  00045A  D7EF               	goto	l7542
 12354  00045C                     l7550:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12358  00045C  0E80               	movlw	128
 12359  00045E  EC02  F028         	call	_lcdInst
 12360  000462  0EC0               	movlw	192
 12361  000464  EC02  F028         	call	_lcdInst
 12362                           
 12363                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12364  000468  0E2C               	movlw	low STR_100
 12365  00046A  0100               	movlb	0	; () banked
 12366  00046C  6F8E               	movwf	printf@f& (0+255),b
 12367  00046E  0EFC               	movlw	high STR_100
 12368  000470  0100               	movlb	0	; () banked
 12369  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12370  000474  ECF2  F00A         	call	_printf	;wreg free
 12371                           
 12372                           ;Test.c: 289: updateServoPosition(1670, 1);
 12373  000478  0E06               	movlw	6
 12374  00047A  0100               	movlb	0	; () banked
 12375  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12376  00047E  0E86               	movlw	134
 12377  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12378  000482  0E00               	movlw	0
 12379  000484  0100               	movlb	0	; () banked
 12380  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12381  000488  0E01               	movlw	1
 12382  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12383  00048C  EC5E  F022         	call	_updateServoPosition	;wreg free
 12384                           
 12385                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12386  000490  0E00               	movlw	0
 12387  000492  0100               	movlb	0	; () banked
 12388  000494  6FB4               	movwf	actuatorTest@i_1669& (0+255),b
 12389  000496                     l7558:
 12390                           
 12391                           ; BSR set to: 0
 12392  000496  0E63               	movlw	99
 12393  000498  0100               	movlb	0	; () banked
 12394  00049A  65B4               	cpfsgt	actuatorTest@i_1669& (0+255),b
 12395  00049C  D001               	goto	l7562
 12396  00049E  D00C               	goto	l7566
 12397  0004A0                     l7562:
 12398                           
 12399                           ; BSR set to: 0
 12400  0004A0  0E68               	movlw	104
 12401  0004A2  0100               	movlb	0	; () banked
 12402  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12403  0004A6  0EE4               	movlw	228
 12404  0004A8                     u9217:
 12405  0004A8  2EE8               	decfsz	wreg,f,c
 12406  0004AA  D7FE               	bra	u9217
 12407  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12408  0004AE  D7FC               	bra	u9217
 12409  0004B0  F000               	nop	
 12410  0004B2  0100               	movlb	0	; () banked
 12411  0004B4  2BB4               	incf	actuatorTest@i_1669& (0+255),f,b
 12412  0004B6  D7EF               	goto	l7558
 12413  0004B8                     l7566:
 12414                           
 12415                           ; BSR set to: 0
 12416  0004B8  0E00               	movlw	0
 12417  0004BA  0100               	movlb	0	; () banked
 12418  0004BC  6FB5               	movwf	actuatorTest@i_1670& (0+255),b
 12419  0004BE                     l7568:
 12420                           
 12421                           ; BSR set to: 0
 12422  0004BE  0E63               	movlw	99
 12423  0004C0  0100               	movlb	0	; () banked
 12424  0004C2  65B5               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12425  0004C4  D001               	goto	l7572
 12426  0004C6  D00C               	goto	l7576
 12427  0004C8                     l7572:
 12428                           
 12429                           ; BSR set to: 0
 12430  0004C8  0E68               	movlw	104
 12431  0004CA  0100               	movlb	0	; () banked
 12432  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12433  0004CE  0EE4               	movlw	228
 12434  0004D0                     u9227:
 12435  0004D0  2EE8               	decfsz	wreg,f,c
 12436  0004D2  D7FE               	bra	u9227
 12437  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12438  0004D6  D7FC               	bra	u9227
 12439  0004D8  F000               	nop	
 12440  0004DA  0100               	movlb	0	; () banked
 12441  0004DC  2BB5               	incf	actuatorTest@i_1670& (0+255),f,b
 12442  0004DE  D7EF               	goto	l7568
 12443  0004E0                     l7576:
 12444                           
 12445                           ; BSR set to: 0
 12446                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12447  0004E0  0E80               	movlw	128
 12448  0004E2  EC02  F028         	call	_lcdInst
 12449  0004E6  0EC0               	movlw	192
 12450  0004E8  EC02  F028         	call	_lcdInst
 12451                           
 12452                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12453  0004EC  0E3D               	movlw	low STR_101
 12454  0004EE  0100               	movlb	0	; () banked
 12455  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12456  0004F2  0EFC               	movlw	high STR_101
 12457  0004F4  0100               	movlb	0	; () banked
 12458  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12459  0004F8  ECF2  F00A         	call	_printf	;wreg free
 12460                           
 12461                           ;Test.c: 294: updateServoPosition(850, 1);
 12462  0004FC  0E03               	movlw	3
 12463  0004FE  0100               	movlb	0	; () banked
 12464  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12465  000502  0E52               	movlw	82
 12466  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12467  000506  0E00               	movlw	0
 12468  000508  0100               	movlb	0	; () banked
 12469  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12470  00050C  0E01               	movlw	1
 12471  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12472  000510  EC5E  F022         	call	_updateServoPosition	;wreg free
 12473                           
 12474                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12475  000514  0E00               	movlw	0
 12476  000516  0100               	movlb	0	; () banked
 12477  000518  6FB6               	movwf	actuatorTest@i_1672& (0+255),b
 12478  00051A                     l7584:
 12479                           
 12480                           ; BSR set to: 0
 12481  00051A  0E63               	movlw	99
 12482  00051C  0100               	movlb	0	; () banked
 12483  00051E  65B6               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12484  000520  D001               	goto	l7588
 12485  000522  D00C               	goto	l7592
 12486  000524                     l7588:
 12487                           
 12488                           ; BSR set to: 0
 12489  000524  0E68               	movlw	104
 12490  000526  0100               	movlb	0	; () banked
 12491  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12492  00052A  0EE4               	movlw	228
 12493  00052C                     u9237:
 12494  00052C  2EE8               	decfsz	wreg,f,c
 12495  00052E  D7FE               	bra	u9237
 12496  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12497  000532  D7FC               	bra	u9237
 12498  000534  F000               	nop	
 12499  000536  0100               	movlb	0	; () banked
 12500  000538  2BB6               	incf	actuatorTest@i_1672& (0+255),f,b
 12501  00053A  D7EF               	goto	l7584
 12502  00053C                     l7592:
 12503                           
 12504                           ; BSR set to: 0
 12505  00053C  0E00               	movlw	0
 12506  00053E  0100               	movlb	0	; () banked
 12507  000540  6FB7               	movwf	actuatorTest@i_1673& (0+255),b
 12508  000542                     l7594:
 12509                           
 12510                           ; BSR set to: 0
 12511  000542  0E63               	movlw	99
 12512  000544  0100               	movlb	0	; () banked
 12513  000546  65B7               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12514  000548  D001               	goto	l7598
 12515  00054A  D00C               	goto	l7602
 12516  00054C                     l7598:
 12517                           
 12518                           ; BSR set to: 0
 12519  00054C  0E68               	movlw	104
 12520  00054E  0100               	movlb	0	; () banked
 12521  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12522  000552  0EE4               	movlw	228
 12523  000554                     u9247:
 12524  000554  2EE8               	decfsz	wreg,f,c
 12525  000556  D7FE               	bra	u9247
 12526  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12527  00055A  D7FC               	bra	u9247
 12528  00055C  F000               	nop	
 12529  00055E  0100               	movlb	0	; () banked
 12530  000560  2BB7               	incf	actuatorTest@i_1673& (0+255),f,b
 12531  000562  D7EF               	goto	l7594
 12532  000564                     l7602:
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12536  000564  0E80               	movlw	128
 12537  000566  EC02  F028         	call	_lcdInst
 12538  00056A  0EC0               	movlw	192
 12539  00056C  EC02  F028         	call	_lcdInst
 12540                           
 12541                           ;Test.c: 298: printf("MID -- 2s       ");
 12542  000570  0EB5               	movlw	low STR_102
 12543  000572  0100               	movlb	0	; () banked
 12544  000574  6F8E               	movwf	printf@f& (0+255),b
 12545  000576  0EFB               	movlw	high STR_102
 12546  000578  0100               	movlb	0	; () banked
 12547  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12548  00057C  ECF2  F00A         	call	_printf	;wreg free
 12549                           
 12550                           ;Test.c: 299: updateServoPosition(1200, 1);
 12551  000580  0E04               	movlw	4
 12552  000582  0100               	movlb	0	; () banked
 12553  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12554  000586  0EB0               	movlw	176
 12555  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12556  00058A  0E00               	movlw	0
 12557  00058C  0100               	movlb	0	; () banked
 12558  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12559  000590  0E01               	movlw	1
 12560  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12561  000594  EC5E  F022         	call	_updateServoPosition	;wreg free
 12562                           
 12563                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12564  000598  0E00               	movlw	0
 12565  00059A  0100               	movlb	0	; () banked
 12566  00059C  6FB8               	movwf	actuatorTest@i_1675& (0+255),b
 12567  00059E                     l7610:
 12568                           
 12569                           ; BSR set to: 0
 12570  00059E  0E63               	movlw	99
 12571  0005A0  0100               	movlb	0	; () banked
 12572  0005A2  65B8               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12573  0005A4  D001               	goto	l7614
 12574  0005A6  D00C               	goto	l7618
 12575  0005A8                     l7614:
 12576                           
 12577                           ; BSR set to: 0
 12578  0005A8  0E68               	movlw	104
 12579  0005AA  0100               	movlb	0	; () banked
 12580  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12581  0005AE  0EE4               	movlw	228
 12582  0005B0                     u9257:
 12583  0005B0  2EE8               	decfsz	wreg,f,c
 12584  0005B2  D7FE               	bra	u9257
 12585  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12586  0005B6  D7FC               	bra	u9257
 12587  0005B8  F000               	nop	
 12588  0005BA  0100               	movlb	0	; () banked
 12589  0005BC  2BB8               	incf	actuatorTest@i_1675& (0+255),f,b
 12590  0005BE  D7EF               	goto	l7610
 12591  0005C0                     l7618:
 12592                           
 12593                           ; BSR set to: 0
 12594  0005C0  0E00               	movlw	0
 12595  0005C2  0100               	movlb	0	; () banked
 12596  0005C4  6FB9               	movwf	actuatorTest@i_1676& (0+255),b
 12597  0005C6                     l7620:
 12598                           
 12599                           ; BSR set to: 0
 12600  0005C6  0E63               	movlw	99
 12601  0005C8  0100               	movlb	0	; () banked
 12602  0005CA  65B9               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12603  0005CC  D001               	goto	l7624
 12604  0005CE  D00C               	goto	l1198
 12605  0005D0                     l7624:
 12606                           
 12607                           ; BSR set to: 0
 12608  0005D0  0E68               	movlw	104
 12609  0005D2  0100               	movlb	0	; () banked
 12610  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12611  0005D6  0EE4               	movlw	228
 12612  0005D8                     u9267:
 12613  0005D8  2EE8               	decfsz	wreg,f,c
 12614  0005DA  D7FE               	bra	u9267
 12615  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12616  0005DE  D7FC               	bra	u9267
 12617  0005E0  F000               	nop	
 12618  0005E2  0100               	movlb	0	; () banked
 12619  0005E4  2BB9               	incf	actuatorTest@i_1676& (0+255),f,b
 12620  0005E6  D7EF               	goto	l7620
 12621  0005E8                     l1198:
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;Test.c: 301: TMR1ON = 0;
 12625  0005E8  90CD               	bcf	4045,0,c	;volatile
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;Test.c: 308: printf("TST: TILT SERVO");
 12629  0005EA  0E3A               	movlw	low STR_103
 12630  0005EC  0100               	movlb	0	; () banked
 12631  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12632  0005F0  0EFE               	movlw	high STR_103
 12633  0005F2  0100               	movlb	0	; () banked
 12634  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12635  0005F6  ECF2  F00A         	call	_printf	;wreg free
 12636                           
 12637                           ;Test.c: 309: lcdInst(0b11000000);;
 12638  0005FA  0EC0               	movlw	192
 12639  0005FC  EC02  F028         	call	_lcdInst
 12640                           
 12641                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12642  000600  0EE8               	movlw	low STR_104
 12643  000602  0100               	movlb	0	; () banked
 12644  000604  6F8E               	movwf	printf@f& (0+255),b
 12645  000606  0EFB               	movlw	high STR_104
 12646  000608  0100               	movlb	0	; () banked
 12647  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12648  00060C  ECF2  F00A         	call	_printf	;wreg free
 12649                           
 12650                           ;Test.c: 311: updateServoPosition(1050, 3);
 12651  000610  0E04               	movlw	4
 12652  000612  0100               	movlb	0	; () banked
 12653  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12654  000616  0E1A               	movlw	26
 12655  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12656  00061A  0E00               	movlw	0
 12657  00061C  0100               	movlb	0	; () banked
 12658  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12659  000620  0E03               	movlw	3
 12660  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12661  000624  EC5E  F022         	call	_updateServoPosition	;wreg free
 12662                           
 12663                           ;Test.c: 312: TMR3ON = 1;
 12664  000628  80B1               	bsf	4017,0,c	;volatile
 12665                           
 12666                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12667  00062A  0E00               	movlw	0
 12668  00062C  0100               	movlb	0	; () banked
 12669  00062E  6FBA               	movwf	actuatorTest@i_1679& (0+255),b
 12670  000630                     l7638:
 12671                           
 12672                           ; BSR set to: 0
 12673  000630  0E63               	movlw	99
 12674  000632  0100               	movlb	0	; () banked
 12675  000634  65BA               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12676  000636  D001               	goto	l7642
 12677  000638  D00C               	goto	l7646
 12678  00063A                     l7642:
 12679                           
 12680                           ; BSR set to: 0
 12681  00063A  0E68               	movlw	104
 12682  00063C  0100               	movlb	0	; () banked
 12683  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12684  000640  0EE4               	movlw	228
 12685  000642                     u9277:
 12686  000642  2EE8               	decfsz	wreg,f,c
 12687  000644  D7FE               	bra	u9277
 12688  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12689  000648  D7FC               	bra	u9277
 12690  00064A  F000               	nop	
 12691  00064C  0100               	movlb	0	; () banked
 12692  00064E  2BBA               	incf	actuatorTest@i_1679& (0+255),f,b
 12693  000650  D7EF               	goto	l7638
 12694  000652                     l7646:
 12695                           
 12696                           ; BSR set to: 0
 12697  000652  0E00               	movlw	0
 12698  000654  0100               	movlb	0	; () banked
 12699  000656  6FBB               	movwf	actuatorTest@i_1680& (0+255),b
 12700  000658                     l7648:
 12701                           
 12702                           ; BSR set to: 0
 12703  000658  0E63               	movlw	99
 12704  00065A  0100               	movlb	0	; () banked
 12705  00065C  65BB               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12706  00065E  D001               	goto	l7652
 12707  000660  D00C               	goto	l7656
 12708  000662                     l7652:
 12709                           
 12710                           ; BSR set to: 0
 12711  000662  0E68               	movlw	104
 12712  000664  0100               	movlb	0	; () banked
 12713  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12714  000668  0EE4               	movlw	228
 12715  00066A                     u9287:
 12716  00066A  2EE8               	decfsz	wreg,f,c
 12717  00066C  D7FE               	bra	u9287
 12718  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12719  000670  D7FC               	bra	u9287
 12720  000672  F000               	nop	
 12721  000674  0100               	movlb	0	; () banked
 12722  000676  2BBB               	incf	actuatorTest@i_1680& (0+255),f,b
 12723  000678  D7EF               	goto	l7648
 12724  00067A                     l7656:
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12728  00067A  0E80               	movlw	128
 12729  00067C  EC02  F028         	call	_lcdInst
 12730  000680  0EC0               	movlw	192
 12731  000682  EC02  F028         	call	_lcdInst
 12732                           
 12733                           ;Test.c: 316: printf("DROP -- 2s      ");
 12734  000686  0EC6               	movlw	low STR_105
 12735  000688  0100               	movlb	0	; () banked
 12736  00068A  6F8E               	movwf	printf@f& (0+255),b
 12737  00068C  0EFB               	movlw	high STR_105
 12738  00068E  0100               	movlb	0	; () banked
 12739  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12740  000692  ECF2  F00A         	call	_printf	;wreg free
 12741                           
 12742                           ;Test.c: 317: updateServoPosition(1260, 3);
 12743  000696  0E04               	movlw	4
 12744  000698  0100               	movlb	0	; () banked
 12745  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12746  00069C  0EEC               	movlw	236
 12747  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12748  0006A0  0E00               	movlw	0
 12749  0006A2  0100               	movlb	0	; () banked
 12750  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12751  0006A6  0E03               	movlw	3
 12752  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12753  0006AA  EC5E  F022         	call	_updateServoPosition	;wreg free
 12754                           
 12755                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12756  0006AE  0E00               	movlw	0
 12757  0006B0  0100               	movlb	0	; () banked
 12758  0006B2  6FBC               	movwf	actuatorTest@i_1682& (0+255),b
 12759  0006B4                     l7664:
 12760                           
 12761                           ; BSR set to: 0
 12762  0006B4  0E63               	movlw	99
 12763  0006B6  0100               	movlb	0	; () banked
 12764  0006B8  65BC               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12765  0006BA  D001               	goto	l7668
 12766  0006BC  D00C               	goto	l7672
 12767  0006BE                     l7668:
 12768                           
 12769                           ; BSR set to: 0
 12770  0006BE  0E68               	movlw	104
 12771  0006C0  0100               	movlb	0	; () banked
 12772  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12773  0006C4  0EE4               	movlw	228
 12774  0006C6                     u9297:
 12775  0006C6  2EE8               	decfsz	wreg,f,c
 12776  0006C8  D7FE               	bra	u9297
 12777  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12778  0006CC  D7FC               	bra	u9297
 12779  0006CE  F000               	nop	
 12780  0006D0  0100               	movlb	0	; () banked
 12781  0006D2  2BBC               	incf	actuatorTest@i_1682& (0+255),f,b
 12782  0006D4  D7EF               	goto	l7664
 12783  0006D6                     l7672:
 12784                           
 12785                           ; BSR set to: 0
 12786  0006D6  0E00               	movlw	0
 12787  0006D8  0100               	movlb	0	; () banked
 12788  0006DA  6FBD               	movwf	actuatorTest@i_1683& (0+255),b
 12789  0006DC                     l7674:
 12790                           
 12791                           ; BSR set to: 0
 12792  0006DC  0E63               	movlw	99
 12793  0006DE  0100               	movlb	0	; () banked
 12794  0006E0  65BD               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12795  0006E2  D001               	goto	l7678
 12796  0006E4  D00C               	goto	l7682
 12797  0006E6                     l7678:
 12798                           
 12799                           ; BSR set to: 0
 12800  0006E6  0E68               	movlw	104
 12801  0006E8  0100               	movlb	0	; () banked
 12802  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12803  0006EC  0EE4               	movlw	228
 12804  0006EE                     u9307:
 12805  0006EE  2EE8               	decfsz	wreg,f,c
 12806  0006F0  D7FE               	bra	u9307
 12807  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12808  0006F4  D7FC               	bra	u9307
 12809  0006F6  F000               	nop	
 12810  0006F8  0100               	movlb	0	; () banked
 12811  0006FA  2BBD               	incf	actuatorTest@i_1683& (0+255),f,b
 12812  0006FC  D7EF               	goto	l7674
 12813  0006FE                     l7682:
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12817  0006FE  0E80               	movlw	128
 12818  000700  EC02  F028         	call	_lcdInst
 12819  000704  0EC0               	movlw	192
 12820  000706  EC02  F028         	call	_lcdInst
 12821                           
 12822                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12823  00070A  0EE8               	movlw	low STR_104
 12824  00070C  0100               	movlb	0	; () banked
 12825  00070E  6F8E               	movwf	printf@f& (0+255),b
 12826  000710  0EFB               	movlw	high STR_104
 12827  000712  0100               	movlb	0	; () banked
 12828  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12829  000716  ECF2  F00A         	call	_printf	;wreg free
 12830                           
 12831                           ;Test.c: 322: updateServoPosition(1050, 3);
 12832  00071A  0E04               	movlw	4
 12833  00071C  0100               	movlb	0	; () banked
 12834  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12835  000720  0E1A               	movlw	26
 12836  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12837  000724  0E00               	movlw	0
 12838  000726  0100               	movlb	0	; () banked
 12839  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12840  00072A  0E03               	movlw	3
 12841  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12842  00072E  EC5E  F022         	call	_updateServoPosition	;wreg free
 12843                           
 12844                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12845  000732  0E00               	movlw	0
 12846  000734  0100               	movlb	0	; () banked
 12847  000736  6FBE               	movwf	actuatorTest@i_1685& (0+255),b
 12848  000738                     l7690:
 12849                           
 12850                           ; BSR set to: 0
 12851  000738  0E63               	movlw	99
 12852  00073A  0100               	movlb	0	; () banked
 12853  00073C  65BE               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12854  00073E  D001               	goto	l7694
 12855  000740  D00C               	goto	l7698
 12856  000742                     l7694:
 12857                           
 12858                           ; BSR set to: 0
 12859  000742  0E68               	movlw	104
 12860  000744  0100               	movlb	0	; () banked
 12861  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12862  000748  0EE4               	movlw	228
 12863  00074A                     u9317:
 12864  00074A  2EE8               	decfsz	wreg,f,c
 12865  00074C  D7FE               	bra	u9317
 12866  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12867  000750  D7FC               	bra	u9317
 12868  000752  F000               	nop	
 12869  000754  0100               	movlb	0	; () banked
 12870  000756  2BBE               	incf	actuatorTest@i_1685& (0+255),f,b
 12871  000758  D7EF               	goto	l7690
 12872  00075A                     l7698:
 12873                           
 12874                           ; BSR set to: 0
 12875  00075A  0E00               	movlw	0
 12876  00075C  0100               	movlb	0	; () banked
 12877  00075E  6FBF               	movwf	actuatorTest@i_1686& (0+255),b
 12878  000760                     l7700:
 12879                           
 12880                           ; BSR set to: 0
 12881  000760  0E63               	movlw	99
 12882  000762  0100               	movlb	0	; () banked
 12883  000764  65BF               	cpfsgt	actuatorTest@i_1686& (0+255),b
 12884  000766  D001               	goto	l7704
 12885  000768  D00C               	goto	l1210
 12886  00076A                     l7704:
 12887                           
 12888                           ; BSR set to: 0
 12889  00076A  0E68               	movlw	104
 12890  00076C  0100               	movlb	0	; () banked
 12891  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12892  000770  0EE4               	movlw	228
 12893  000772                     u9327:
 12894  000772  2EE8               	decfsz	wreg,f,c
 12895  000774  D7FE               	bra	u9327
 12896  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12897  000778  D7FC               	bra	u9327
 12898  00077A  F000               	nop	
 12899  00077C  0100               	movlb	0	; () banked
 12900  00077E  2BBF               	incf	actuatorTest@i_1686& (0+255),f,b
 12901  000780  D7EF               	goto	l7700
 12902  000782                     l1210:
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;Test.c: 324: TMR3ON = 0;
 12906  000782  90B1               	bcf	4017,0,c	;volatile
 12907                           
 12908                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12909  000784  9EF2               	bcf	intcon,7,c	;volatile
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12913  000786  0E01               	movlw	1
 12914  000788  EC02  F028         	call	_lcdInst
 12915  00078C  0E68               	movlw	104
 12916  00078E  0100               	movlb	0	; () banked
 12917  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12918  000792  0EE4               	movlw	228
 12919  000794                     u9337:
 12920  000794  2EE8               	decfsz	wreg,f,c
 12921  000796  D7FE               	bra	u9337
 12922  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12923  00079A  D7FC               	bra	u9337
 12924  00079C  F000               	nop	
 12925  00079E  0E80               	movlw	128
 12926  0007A0  EC02  F028         	call	_lcdInst
 12927                           
 12928                           ;Test.c: 331: printf("TST: CAM SERVO");
 12929  0007A4  0E96               	movlw	low STR_107
 12930  0007A6  0100               	movlb	0	; () banked
 12931  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12932  0007AA  0EFE               	movlw	high STR_107
 12933  0007AC  0100               	movlb	0	; () banked
 12934  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12935  0007B0  ECF2  F00A         	call	_printf	;wreg free
 12936                           
 12937                           ;Test.c: 332: lcdInst(0b11000000);;
 12938  0007B4  0EC0               	movlw	192
 12939  0007B6  EC02  F028         	call	_lcdInst
 12940                           
 12941                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12942  0007BA  0E78               	movlw	low STR_108
 12943  0007BC  0100               	movlb	0	; () banked
 12944  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12945  0007C0  0EFE               	movlw	high STR_108
 12946  0007C2  0100               	movlb	0	; () banked
 12947  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12948  0007C6  ECF2  F00A         	call	_printf	;wreg free
 12949                           
 12950                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12951  0007CA  808B               	bsf	3979,0,c	;volatile
 12952                           
 12953                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12954  0007CC  0E00               	movlw	0
 12955  0007CE  0100               	movlb	0	; () banked
 12956  0007D0  6FC0               	movwf	actuatorTest@i_1689& (0+255),b
 12957  0007D2                     l7724:
 12958                           
 12959                           ; BSR set to: 0
 12960  0007D2  0E63               	movlw	99
 12961  0007D4  0100               	movlb	0	; () banked
 12962  0007D6  65C0               	cpfsgt	actuatorTest@i_1689& (0+255),b
 12963  0007D8  D001               	goto	l7728
 12964  0007DA  D00C               	goto	l7732
 12965  0007DC                     l7728:
 12966                           
 12967                           ; BSR set to: 0
 12968  0007DC  0E68               	movlw	104
 12969  0007DE  0100               	movlb	0	; () banked
 12970  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12971  0007E2  0EE4               	movlw	228
 12972  0007E4                     u9347:
 12973  0007E4  2EE8               	decfsz	wreg,f,c
 12974  0007E6  D7FE               	bra	u9347
 12975  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12976  0007EA  D7FC               	bra	u9347
 12977  0007EC  F000               	nop	
 12978  0007EE  0100               	movlb	0	; () banked
 12979  0007F0  2BC0               	incf	actuatorTest@i_1689& (0+255),f,b
 12980  0007F2  D7EF               	goto	l7724
 12981  0007F4                     l7732:
 12982                           
 12983                           ; BSR set to: 0
 12984  0007F4  0E00               	movlw	0
 12985  0007F6  0100               	movlb	0	; () banked
 12986  0007F8  6FC1               	movwf	actuatorTest@i_1690& (0+255),b
 12987  0007FA                     l7734:
 12988                           
 12989                           ; BSR set to: 0
 12990  0007FA  0E63               	movlw	99
 12991  0007FC  0100               	movlb	0	; () banked
 12992  0007FE  65C1               	cpfsgt	actuatorTest@i_1690& (0+255),b
 12993  000800  D001               	goto	l7738
 12994  000802  D00C               	goto	l7742
 12995  000804                     l7738:
 12996                           
 12997                           ; BSR set to: 0
 12998  000804  0E68               	movlw	104
 12999  000806  0100               	movlb	0	; () banked
 13000  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13001  00080A  0EE4               	movlw	228
 13002  00080C                     u9357:
 13003  00080C  2EE8               	decfsz	wreg,f,c
 13004  00080E  D7FE               	bra	u9357
 13005  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13006  000812  D7FC               	bra	u9357
 13007  000814  F000               	nop	
 13008  000816  0100               	movlb	0	; () banked
 13009  000818  2BC1               	incf	actuatorTest@i_1690& (0+255),f,b
 13010  00081A  D7EF               	goto	l7734
 13011  00081C                     l7742:
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13015  00081C  0E80               	movlw	128
 13016  00081E  EC02  F028         	call	_lcdInst
 13017  000822  0EC0               	movlw	192
 13018  000824  EC02  F028         	call	_lcdInst
 13019                           
 13020                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13021  000828  0E69               	movlw	low STR_109
 13022  00082A  0100               	movlb	0	; () banked
 13023  00082C  6F8E               	movwf	printf@f& (0+255),b
 13024  00082E  0EFE               	movlw	high STR_109
 13025  000830  0100               	movlb	0	; () banked
 13026  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13027  000834  ECF2  F00A         	call	_printf	;wreg free
 13028                           
 13029                           ;Test.c: 340: for(i=0;i<10000;i++)
 13030  000838  0E00               	movlw	0
 13031  00083A  0100               	movlb	0	; () banked
 13032  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13033  00083E  0E00               	movlw	0
 13034  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13035  000842                     l7748:
 13036                           
 13037                           ; BSR set to: 0
 13038  000842  0100               	movlb	0	; () banked
 13039  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13040  000846  D008               	goto	l1215
 13041  000848  0E10               	movlw	16
 13042  00084A  0100               	movlb	0	; () banked
 13043  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13044  00084E  0E27               	movlw	39
 13045  000850  0100               	movlb	0	; () banked
 13046  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13047  000854  B0D8               	btfsc	status,0,c
 13048  000856  D00D               	goto	l7758
 13049  000858                     l1215:
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;Test.c: 341: {
 13053                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13054  000858  808B               	bsf	3979,0,c	;volatile
 13055                           
 13056                           ; BSR set to: 0
 13057                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13058  00085A  0E1A               	movlw	26
 13059  00085C                     u9367:
 13060  00085C  2EE8               	decfsz	wreg,f,c
 13061  00085E  D7FE               	bra	u9367
 13062  000860  D000               	nop2	
 13063                           
 13064                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13065  000862  908B               	bcf	3979,0,c	;volatile
 13066                           
 13067                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13068  000864  0EF0               	movlw	240
 13069  000866                     u9377:
 13070  000866  2EE8               	decfsz	wreg,f,c
 13071  000868  D7FE               	bra	u9377
 13072  00086A  0100               	movlb	0	; () banked
 13073  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13074  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13075  000870  D7E8               	goto	l7748
 13076  000872                     l7758:
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;Test.c: 346: }
 13080                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13081  000872  0E00               	movlw	0
 13082  000874  0100               	movlb	0	; () banked
 13083  000876  6FC2               	movwf	actuatorTest@i_1692& (0+255),b
 13084  000878                     l7760:
 13085                           
 13086                           ; BSR set to: 0
 13087  000878  0E63               	movlw	99
 13088  00087A  0100               	movlb	0	; () banked
 13089  00087C  65C2               	cpfsgt	actuatorTest@i_1692& (0+255),b
 13090  00087E  D001               	goto	l7764
 13091  000880  D00C               	goto	l7768
 13092  000882                     l7764:
 13093                           
 13094                           ; BSR set to: 0
 13095  000882  0E68               	movlw	104
 13096  000884  0100               	movlb	0	; () banked
 13097  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13098  000888  0EE4               	movlw	228
 13099  00088A                     u9387:
 13100  00088A  2EE8               	decfsz	wreg,f,c
 13101  00088C  D7FE               	bra	u9387
 13102  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13103  000890  D7FC               	bra	u9387
 13104  000892  F000               	nop	
 13105  000894  0100               	movlb	0	; () banked
 13106  000896  2BC2               	incf	actuatorTest@i_1692& (0+255),f,b
 13107  000898  D7EF               	goto	l7760
 13108  00089A                     l7768:
 13109                           
 13110                           ; BSR set to: 0
 13111  00089A  0E00               	movlw	0
 13112  00089C  0100               	movlb	0	; () banked
 13113  00089E  6FC3               	movwf	actuatorTest@i_1693& (0+255),b
 13114  0008A0                     l7770:
 13115                           
 13116                           ; BSR set to: 0
 13117  0008A0  0E63               	movlw	99
 13118  0008A2  0100               	movlb	0	; () banked
 13119  0008A4  65C3               	cpfsgt	actuatorTest@i_1693& (0+255),b
 13120  0008A6  D001               	goto	l7774
 13121  0008A8  D00C               	goto	l7778
 13122  0008AA                     l7774:
 13123                           
 13124                           ; BSR set to: 0
 13125  0008AA  0E68               	movlw	104
 13126  0008AC  0100               	movlb	0	; () banked
 13127  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13128  0008B0  0EE4               	movlw	228
 13129  0008B2                     u9397:
 13130  0008B2  2EE8               	decfsz	wreg,f,c
 13131  0008B4  D7FE               	bra	u9397
 13132  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13133  0008B8  D7FC               	bra	u9397
 13134  0008BA  F000               	nop	
 13135  0008BC  0100               	movlb	0	; () banked
 13136  0008BE  2BC3               	incf	actuatorTest@i_1693& (0+255),f,b
 13137  0008C0  D7EF               	goto	l7770
 13138  0008C2                     l7778:
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;Test.c: 349: machine_state = Testing_state;
 13142  0008C2  0E03               	movlw	3
 13143  0008C4  0100               	movlb	0	; () banked
 13144  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13145                           
 13146                           ; BSR set to: 0
 13147  0008C8  0012               	return		;funcret
 13148  0008CA                     __end_of_actuatorTest:
 13149                           	opt stack 0
 13150                           tblptru	equ	0xFF8
 13151                           tblptrh	equ	0xFF7
 13152                           tblptrl	equ	0xFF6
 13153                           tablat	equ	0xFF5
 13154                           prodh	equ	0xFF4
 13155                           prodl	equ	0xFF3
 13156                           intcon	equ	0xFF2
 13157                           intcon2	equ	0xFF1
 13158                           intcon3	equ	0xFF0
 13159                           postinc0	equ	0xFEE
 13160                           wreg	equ	0xFE8
 13161                           postdec1	equ	0xFE5
 13162                           fsr1l	equ	0xFE1
 13163                           indf2	equ	0xFDF
 13164                           postinc2	equ	0xFDE
 13165                           postdec2	equ	0xFDD
 13166                           fsr2h	equ	0xFDA
 13167                           fsr2l	equ	0xFD9
 13168                           status	equ	0xFD8
 13169                           
 13170 ;; *************** function _SpeedTest *****************
 13171 ;; Defined at:
 13172 ;;		line 549 in file "Test.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;		None
 13175 ;; Auto vars:     Size  Location     Type
 13176 ;;		None
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  1    wreg      void 
 13179 ;; Registers used:
 13180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;Total ram usage:        1 bytes
 13191 ;; Hardware stack levels used:    1
 13192 ;; Hardware stack levels required when called:   10
 13193 ;; This function calls:
 13194 ;;		_lcdInst
 13195 ;;		_printf
 13196 ;; This function is called by:
 13197 ;;		_Test
 13198 ;; This function uses a non-reentrant model
 13199 ;;
 13200                           
 13201                           	psect	text41
 13202  0042BC                     __ptext41:
 13203                           	opt stack 0
 13204  0042BC                     _SpeedTest:
 13205                           	opt stack 19
 13206                           
 13207                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;incstack = 0
 13211  0042BC  0E01               	movlw	1
 13212  0042BE  EC02  F028         	call	_lcdInst
 13213  0042C2  0E68               	movlw	104
 13214  0042C4  0100               	movlb	0	; () banked
 13215  0042C6  6FAB               	movwf	??_SpeedTest& (0+255),b
 13216  0042C8  0EE4               	movlw	228
 13217  0042CA                     u9407:
 13218  0042CA  2EE8               	decfsz	wreg,f,c
 13219  0042CC  D7FE               	bra	u9407
 13220  0042CE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13221  0042D0  D7FC               	bra	u9407
 13222  0042D2  F000               	nop	
 13223  0042D4  0E80               	movlw	128
 13224  0042D6  EC02  F028         	call	_lcdInst
 13225                           
 13226                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13227  0042DA  0E5B               	movlw	low STR_120
 13228  0042DC  0100               	movlb	0	; () banked
 13229  0042DE  6F8E               	movwf	printf@f& (0+255),b
 13230  0042E0  0EFB               	movlw	high STR_120
 13231  0042E2  0100               	movlb	0	; () banked
 13232  0042E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13233  0042E6  ECF2  F00A         	call	_printf	;wreg free
 13234                           
 13235                           ;Test.c: 553: lcdInst(0b11000000);;
 13236  0042EA  0EC0               	movlw	192
 13237  0042EC  EC02  F028         	call	_lcdInst
 13238                           
 13239                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13240  0042F0  0E49               	movlw	low STR_112
 13241  0042F2  0100               	movlb	0	; () banked
 13242  0042F4  6F8E               	movwf	printf@f& (0+255),b
 13243  0042F6  0EFB               	movlw	high STR_112
 13244  0042F8  0100               	movlb	0	; () banked
 13245  0042FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13246  0042FC  ECF2  F00A         	call	_printf	;wreg free
 13247  004300                     l1301:
 13248  004300  A281               	btfss	3969,1,c	;volatile
 13249  004302  D7FE               	goto	l1301
 13250                           
 13251                           ;Test.c: 559: }
 13252                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13253  004304  3881               	swapf	3969,w,c	;volatile
 13254  004306  0B0F               	andlw	15
 13255  004308  0A0F               	xorlw	15
 13256  00430A  B4D8               	btfsc	status,2,c
 13257  00430C  0012               	return	
 13258  00430E  D014               	goto	l7820
 13259  004310                     l1308:
 13260                           
 13261                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13262  004310  8A89               	bsf	3977,5,c	;volatile
 13263                           
 13264                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13265  004312  0E34               	movlw	52
 13266  004314  0100               	movlb	0	; () banked
 13267  004316  6FAB               	movwf	??_SpeedTest& (0+255),b
 13268  004318  0EF1               	movlw	241
 13269  00431A                     u9417:
 13270  00431A  2EE8               	decfsz	wreg,f,c
 13271  00431C  D7FE               	bra	u9417
 13272  00431E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13273  004320  D7FC               	bra	u9417
 13274  004322  D000               	nop2	
 13275                           
 13276                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13277  004324  9A89               	bcf	3977,5,c	;volatile
 13278                           
 13279                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13280  004326  0E34               	movlw	52
 13281  004328  0100               	movlb	0	; () banked
 13282  00432A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13283  00432C  0EF1               	movlw	241
 13284  00432E                     u9427:
 13285  00432E  2EE8               	decfsz	wreg,f,c
 13286  004330  D7FE               	bra	u9427
 13287  004332  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13288  004334  D7FC               	bra	u9427
 13289  004336  D000               	nop2	
 13290  004338                     l7820:
 13291  004338  B281               	btfsc	3969,1,c	;volatile
 13292  00433A  D7EA               	goto	l1308
 13293                           
 13294                           ;Test.c: 571: }
 13295                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13296  00433C  9A89               	bcf	3977,5,c	;volatile
 13297  00433E  D7E0               	goto	l1301
 13298  004340                     __end_of_SpeedTest:
 13299                           	opt stack 0
 13300                           tblptru	equ	0xFF8
 13301                           tblptrh	equ	0xFF7
 13302                           tblptrl	equ	0xFF6
 13303                           tablat	equ	0xFF5
 13304                           prodh	equ	0xFF4
 13305                           prodl	equ	0xFF3
 13306                           intcon	equ	0xFF2
 13307                           intcon2	equ	0xFF1
 13308                           intcon3	equ	0xFF0
 13309                           postinc0	equ	0xFEE
 13310                           wreg	equ	0xFE8
 13311                           postdec1	equ	0xFE5
 13312                           fsr1l	equ	0xFE1
 13313                           indf2	equ	0xFDF
 13314                           postinc2	equ	0xFDE
 13315                           postdec2	equ	0xFDD
 13316                           fsr2h	equ	0xFDA
 13317                           fsr2l	equ	0xFD9
 13318                           status	equ	0xFD8
 13319                           
 13320 ;; *************** function _PusherTest *****************
 13321 ;; Defined at:
 13322 ;;		line 467 in file "Test.c"
 13323 ;; Parameters:    Size  Location     Type
 13324 ;;		None
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;  i               2   51[BANK0 ] int 
 13327 ;;  i               2   49[BANK0 ] int 
 13328 ;;  res             2   47[BANK0 ] int 
 13329 ;;  res             2   45[BANK0 ] int 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      void 
 13332 ;; Registers used:
 13333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;Total ram usage:       10 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:   10
 13346 ;; This function calls:
 13347 ;;		_lcdInst
 13348 ;;		_printf
 13349 ;;		_readADC
 13350 ;; This function is called by:
 13351 ;;		_Test
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text42
 13356  002996                     __ptext42:
 13357                           	opt stack 0
 13358  002996                     _PusherTest:
 13359                           	opt stack 19
 13360                           
 13361                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13362                           
 13363                           ;incstack = 0
 13364  002996  0E01               	movlw	1
 13365  002998  EC02  F028         	call	_lcdInst
 13366  00299C  0E68               	movlw	104
 13367  00299E  0100               	movlb	0	; () banked
 13368  0029A0  6FAB               	movwf	??_PusherTest& (0+255),b
 13369  0029A2  0EE4               	movlw	228
 13370  0029A4                     u9437:
 13371  0029A4  2EE8               	decfsz	wreg,f,c
 13372  0029A6  D7FE               	bra	u9437
 13373  0029A8  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13374  0029AA  D7FC               	bra	u9437
 13375  0029AC  F000               	nop	
 13376  0029AE  0E80               	movlw	128
 13377  0029B0  EC02  F028         	call	_lcdInst
 13378                           
 13379                           ;Test.c: 469: printf("PUSHER TST");
 13380  0029B4  0E71               	movlw	low STR_113
 13381  0029B6  0100               	movlb	0	; () banked
 13382  0029B8  6F8E               	movwf	printf@f& (0+255),b
 13383  0029BA  0EFF               	movlw	high STR_113
 13384  0029BC  0100               	movlb	0	; () banked
 13385  0029BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13386  0029C0  ECF2  F00A         	call	_printf	;wreg free
 13387                           
 13388                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13389  0029C4  8A8B               	bsf	3979,5,c	;volatile
 13390                           
 13391                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13392  0029C6  D05C               	goto	l7850
 13393  0029C8                     l7832:
 13394                           
 13395                           ;Test.c: 473: readADC(0);
 13396  0029C8  0E00               	movlw	0
 13397  0029CA  EC07  F027         	call	_readADC
 13398                           
 13399                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13400  0029CE  50C3               	movf	4035,w,c	;volatile
 13401  0029D0  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13402  0029D4  0100               	movlb	0	; () banked
 13403  0029D6  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13404  0029D8  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13405  0029DC  0100               	movlb	0	; () banked
 13406  0029DE  6BAB               	clrf	??_PusherTest& (0+255),b
 13407  0029E0  0100               	movlb	0	; () banked
 13408  0029E2  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13409  0029E4  0100               	movlb	0	; () banked
 13410  0029E6  6FAD               	movwf	PusherTest@res& (0+255),b
 13411  0029E8  0100               	movlb	0	; () banked
 13412  0029EA  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13413  0029EC  0100               	movlb	0	; () banked
 13414  0029EE  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13415                           
 13416                           ; BSR set to: 0
 13417                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13418  0029F0  0100               	movlb	0	; () banked
 13419  0029F2  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13420  0029F4  D00A               	goto	u6590
 13421  0029F6  0E21               	movlw	33
 13422  0029F8  0100               	movlb	0	; () banked
 13423  0029FA  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13424  0029FC  0E03               	movlw	3
 13425  0029FE  0100               	movlb	0	; () banked
 13426  002A00  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13427  002A02  A0D8               	btfss	status,0,c
 13428  002A04  D002               	goto	u6590
 13429  002A06  0E01               	movlw	1
 13430  002A08  D001               	goto	u6600
 13431  002A0A                     u6590:
 13432  002A0A  0E00               	movlw	0
 13433  002A0C                     u6600:
 13434  002A0C  0100               	movlb	0	; () banked
 13435  002A0E  6FDE               	movwf	_IR_signal& (0+255),b
 13436  002A10  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13437                           
 13438                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13439  002A12  0E01               	movlw	1
 13440  002A14  EC02  F028         	call	_lcdInst
 13441  002A18  0E68               	movlw	104
 13442  002A1A  0100               	movlb	0	; () banked
 13443  002A1C  6FAB               	movwf	??_PusherTest& (0+255),b
 13444  002A1E  0EE4               	movlw	228
 13445  002A20                     u9447:
 13446  002A20  2EE8               	decfsz	wreg,f,c
 13447  002A22  D7FE               	bra	u9447
 13448  002A24  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13449  002A26  D7FC               	bra	u9447
 13450  002A28  F000               	nop	
 13451  002A2A  0E80               	movlw	128
 13452  002A2C  EC02  F028         	call	_lcdInst
 13453                           
 13454                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13455  002A30  0E5A               	movlw	low STR_80
 13456  002A32  0100               	movlb	0	; () banked
 13457  002A34  6F8E               	movwf	printf@f& (0+255),b
 13458  002A36  0EFE               	movlw	high STR_80
 13459  002A38  0100               	movlb	0	; () banked
 13460  002A3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13461  002A3C  C0DE  F090         	movff	_IR_signal,?_printf+2
 13462  002A40  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13463  002A44  ECF2  F00A         	call	_printf	;wreg free
 13464                           
 13465                           ;Test.c: 479: lcdInst(0b11000000);;
 13466  002A48  0EC0               	movlw	192
 13467  002A4A  EC02  F028         	call	_lcdInst
 13468                           
 13469                           ;Test.c: 480: printf("%d", res);
 13470  002A4E  0E16               	movlw	low (STR_27+14)
 13471  002A50  0100               	movlb	0	; () banked
 13472  002A52  6F8E               	movwf	printf@f& (0+255),b
 13473  002A54  0EFE               	movlw	high (STR_27+14)
 13474  002A56  0100               	movlb	0	; () banked
 13475  002A58  6F8F               	movwf	(printf@f+1)& (0+255),b
 13476  002A5A  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13477  002A5E  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13478  002A62  ECF2  F00A         	call	_printf	;wreg free
 13479                           
 13480                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13481  002A66  0E05               	movlw	5
 13482  002A68  0100               	movlb	0	; () banked
 13483  002A6A  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13484  002A6C  0E0F               	movlw	15
 13485  002A6E  0100               	movlb	0	; () banked
 13486  002A70  6FAB               	movwf	??_PusherTest& (0+255),b
 13487  002A72  0EF1               	movlw	241
 13488  002A74                     u9457:
 13489  002A74  2EE8               	decfsz	wreg,f,c
 13490  002A76  D7FE               	bra	u9457
 13491  002A78  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13492  002A7A  D7FC               	bra	u9457
 13493  002A7C  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13494  002A7E  D7FA               	bra	u9457
 13495  002A80                     l7850:
 13496  002A80  B281               	btfsc	3969,1,c	;volatile
 13497  002A82  D05D               	goto	l7870
 13498  002A84  D7A1               	goto	l7832
 13499  002A86                     l7852:
 13500                           
 13501                           ;Test.c: 487: readADC(0);
 13502  002A86  0E00               	movlw	0
 13503  002A88  EC07  F027         	call	_readADC
 13504                           
 13505                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13506  002A8C  50C3               	movf	4035,w,c	;volatile
 13507  002A8E  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13508  002A92  0100               	movlb	0	; () banked
 13509  002A94  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13510  002A96  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13511  002A9A  0100               	movlb	0	; () banked
 13512  002A9C  6BAB               	clrf	??_PusherTest& (0+255),b
 13513  002A9E  0100               	movlb	0	; () banked
 13514  002AA0  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13515  002AA2  0100               	movlb	0	; () banked
 13516  002AA4  6FAF               	movwf	PusherTest@res_1708& (0+255),b
 13517  002AA6  0100               	movlb	0	; () banked
 13518  002AA8  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13519  002AAA  0100               	movlb	0	; () banked
 13520  002AAC  6FB0               	movwf	(PusherTest@res_1708+1)& (0+255),b
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13524  002AAE  0100               	movlb	0	; () banked
 13525  002AB0  BFB0               	btfsc	(PusherTest@res_1708+1)& (0+255),7,b
 13526  002AB2  D00A               	goto	u6620
 13527  002AB4  0E21               	movlw	33
 13528  002AB6  0100               	movlb	0	; () banked
 13529  002AB8  5DAF               	subwf	PusherTest@res_1708& (0+255),w,b
 13530  002ABA  0E03               	movlw	3
 13531  002ABC  0100               	movlb	0	; () banked
 13532  002ABE  59B0               	subwfb	(PusherTest@res_1708+1)& (0+255),w,b
 13533  002AC0  A0D8               	btfss	status,0,c
 13534  002AC2  D002               	goto	u6620
 13535  002AC4  0E01               	movlw	1
 13536  002AC6  D001               	goto	u6630
 13537  002AC8                     u6620:
 13538  002AC8  0E00               	movlw	0
 13539  002ACA                     u6630:
 13540  002ACA  0100               	movlb	0	; () banked
 13541  002ACC  6FDE               	movwf	_IR_signal& (0+255),b
 13542  002ACE  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13543                           
 13544                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13545  002AD0  0E01               	movlw	1
 13546  002AD2  EC02  F028         	call	_lcdInst
 13547  002AD6  0E68               	movlw	104
 13548  002AD8  0100               	movlb	0	; () banked
 13549  002ADA  6FAB               	movwf	??_PusherTest& (0+255),b
 13550  002ADC  0EE4               	movlw	228
 13551  002ADE                     u9467:
 13552  002ADE  2EE8               	decfsz	wreg,f,c
 13553  002AE0  D7FE               	bra	u9467
 13554  002AE2  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13555  002AE4  D7FC               	bra	u9467
 13556  002AE6  F000               	nop	
 13557  002AE8  0E80               	movlw	128
 13558  002AEA  EC02  F028         	call	_lcdInst
 13559                           
 13560                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13561  002AEE  0E5A               	movlw	low STR_80
 13562  002AF0  0100               	movlb	0	; () banked
 13563  002AF2  6F8E               	movwf	printf@f& (0+255),b
 13564  002AF4  0EFE               	movlw	high STR_80
 13565  002AF6  0100               	movlb	0	; () banked
 13566  002AF8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13567  002AFA  C0DE  F090         	movff	_IR_signal,?_printf+2
 13568  002AFE  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13569  002B02  ECF2  F00A         	call	_printf	;wreg free
 13570                           
 13571                           ;Test.c: 492: lcdInst(0b11000000);;
 13572  002B06  0EC0               	movlw	192
 13573  002B08  EC02  F028         	call	_lcdInst
 13574                           
 13575                           ;Test.c: 493: printf("%d", res);
 13576  002B0C  0E16               	movlw	low (STR_27+14)
 13577  002B0E  0100               	movlb	0	; () banked
 13578  002B10  6F8E               	movwf	printf@f& (0+255),b
 13579  002B12  0EFE               	movlw	high (STR_27+14)
 13580  002B14  0100               	movlb	0	; () banked
 13581  002B16  6F8F               	movwf	(printf@f+1)& (0+255),b
 13582  002B18  C0AF  F090         	movff	PusherTest@res_1708,?_printf+2
 13583  002B1C  C0B0  F091         	movff	PusherTest@res_1708+1,?_printf+3
 13584  002B20  ECF2  F00A         	call	_printf	;wreg free
 13585                           
 13586                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13587  002B24  0E05               	movlw	5
 13588  002B26  0100               	movlb	0	; () banked
 13589  002B28  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13590  002B2A  0E0F               	movlw	15
 13591  002B2C  0100               	movlb	0	; () banked
 13592  002B2E  6FAB               	movwf	??_PusherTest& (0+255),b
 13593  002B30  0EF1               	movlw	241
 13594  002B32                     u9477:
 13595  002B32  2EE8               	decfsz	wreg,f,c
 13596  002B34  D7FE               	bra	u9477
 13597  002B36  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13598  002B38  D7FC               	bra	u9477
 13599  002B3A  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13600  002B3C  D7FA               	bra	u9477
 13601  002B3E                     l7870:
 13602  002B3E  A281               	btfss	3969,1,c	;volatile
 13603  002B40  D7A2               	goto	l7852
 13604                           
 13605                           ;Test.c: 495: }
 13606                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13607  002B42  3881               	swapf	3969,w,c	;volatile
 13608  002B44  0B0F               	andlw	15
 13609  002B46  0A0F               	xorlw	15
 13610  002B48  B4D8               	btfsc	status,2,c
 13611  002B4A  D047               	goto	l1270
 13612                           
 13613                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13614                           
 13615                           ;Test.c: 498: }
 13616                           
 13617                           ;Test.c: 497: break;
 13618  002B4C  3881               	swapf	3969,w,c	;volatile
 13619  002B4E  0B0F               	andlw	15
 13620  002B50  0A05               	xorlw	5
 13621  002B52  A4D8               	btfss	status,2,c
 13622  002B54  D01D               	goto	l7892
 13623                           
 13624                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13625  002B56  0E00               	movlw	0
 13626  002B58  0100               	movlb	0	; () banked
 13627  002B5A  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13628  002B5C  0E00               	movlw	0
 13629  002B5E  6FB1               	movwf	PusherTest@i& (0+255),b
 13630  002B60                     l7882:
 13631                           
 13632                           ; BSR set to: 0
 13633  002B60  0100               	movlb	0	; () banked
 13634  002B62  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13635  002B64  D008               	goto	l1273
 13636  002B66  0EB8               	movlw	184
 13637  002B68  0100               	movlb	0	; () banked
 13638  002B6A  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13639  002B6C  0E0B               	movlw	11
 13640  002B6E  0100               	movlb	0	; () banked
 13641  002B70  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13642  002B72  B0D8               	btfsc	status,0,c
 13643  002B74  D02F               	goto	l1279
 13644  002B76                     l1273:
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13648  002B76  8889               	bsf	3977,4,c	;volatile
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13652  002B78  0EC8               	movlw	200
 13653  002B7A                     u9487:
 13654  002B7A  2EE8               	decfsz	wreg,f,c
 13655  002B7C  D7FE               	bra	u9487
 13656                           
 13657                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13658  002B7E  9889               	bcf	3977,4,c	;volatile
 13659                           
 13660                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13661  002B80  0E42               	movlw	66
 13662  002B82                     u9497:
 13663  002B82  2EE8               	decfsz	wreg,f,c
 13664  002B84  D7FE               	bra	u9497
 13665  002B86  D000               	nop2	
 13666  002B88  0100               	movlb	0	; () banked
 13667  002B8A  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13668  002B8C  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13669  002B8E  D7E8               	goto	l7882
 13670  002B90                     l7892:
 13671                           
 13672                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13673  002B90  3881               	swapf	3969,w,c	;volatile
 13674  002B92  0B0F               	andlw	15
 13675  002B94  0A06               	xorlw	6
 13676  002B96  A4D8               	btfss	status,2,c
 13677  002B98  D01D               	goto	l1279
 13678                           
 13679                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13680  002B9A  0E00               	movlw	0
 13681  002B9C  0100               	movlb	0	; () banked
 13682  002B9E  6FB4               	movwf	(PusherTest@i_1712+1)& (0+255),b
 13683  002BA0  0E00               	movlw	0
 13684  002BA2  6FB3               	movwf	PusherTest@i_1712& (0+255),b
 13685  002BA4                     l7896:
 13686                           
 13687                           ; BSR set to: 0
 13688  002BA4  0100               	movlb	0	; () banked
 13689  002BA6  BFB4               	btfsc	(PusherTest@i_1712+1)& (0+255),7,b
 13690  002BA8  D008               	goto	l1277
 13691  002BAA  0EB8               	movlw	184
 13692  002BAC  0100               	movlb	0	; () banked
 13693  002BAE  5DB3               	subwf	PusherTest@i_1712& (0+255),w,b
 13694  002BB0  0E0B               	movlw	11
 13695  002BB2  0100               	movlb	0	; () banked
 13696  002BB4  59B4               	subwfb	(PusherTest@i_1712+1)& (0+255),w,b
 13697  002BB6  B0D8               	btfsc	status,0,c
 13698  002BB8  D00D               	goto	l1279
 13699  002BBA                     l1277:
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13703  002BBA  8889               	bsf	3977,4,c	;volatile
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13707  002BBC  0E9A               	movlw	154
 13708  002BBE                     u9507:
 13709  002BBE  2EE8               	decfsz	wreg,f,c
 13710  002BC0  D7FE               	bra	u9507
 13711  002BC2  D000               	nop2	
 13712                           
 13713                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13714  002BC4  9889               	bcf	3977,4,c	;volatile
 13715                           
 13716                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13717  002BC6  0E70               	movlw	112
 13718  002BC8                     u9517:
 13719  002BC8  2EE8               	decfsz	wreg,f,c
 13720  002BCA  D7FE               	bra	u9517
 13721  002BCC  0100               	movlb	0	; () banked
 13722  002BCE  4BB3               	infsnz	PusherTest@i_1712& (0+255),f,b
 13723  002BD0  2BB4               	incf	(PusherTest@i_1712+1)& (0+255),f,b
 13724  002BD2  D7E8               	goto	l7896
 13725  002BD4                     l1279:
 13726  002BD4  A281               	btfss	3969,1,c	;volatile
 13727  002BD6  D7B3               	goto	l7870
 13728  002BD8  D7FD               	goto	l1279
 13729  002BDA                     l1270:
 13730                           
 13731                           ;Test.c: 519: }
 13732                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13733  002BDA  9A8B               	bcf	3979,5,c	;volatile
 13734  002BDC  0012               	return		;funcret
 13735  002BDE                     __end_of_PusherTest:
 13736                           	opt stack 0
 13737                           tblptru	equ	0xFF8
 13738                           tblptrh	equ	0xFF7
 13739                           tblptrl	equ	0xFF6
 13740                           tablat	equ	0xFF5
 13741                           prodh	equ	0xFF4
 13742                           prodl	equ	0xFF3
 13743                           intcon	equ	0xFF2
 13744                           intcon2	equ	0xFF1
 13745                           intcon3	equ	0xFF0
 13746                           postinc0	equ	0xFEE
 13747                           wreg	equ	0xFE8
 13748                           postdec1	equ	0xFE5
 13749                           fsr1l	equ	0xFE1
 13750                           indf2	equ	0xFDF
 13751                           postinc2	equ	0xFDE
 13752                           postdec2	equ	0xFDD
 13753                           fsr2h	equ	0xFDA
 13754                           fsr2l	equ	0xFD9
 13755                           status	equ	0xFD8
 13756                           
 13757 ;; *************** function _readADC *****************
 13758 ;; Defined at:
 13759 ;;		line 15 in file "ADCFunctionality.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;  channel         1    wreg     unsigned char 
 13762 ;; Auto vars:     Size  Location     Type
 13763 ;;  channel         1    1[BANK0 ] unsigned char 
 13764 ;; Return value:  Size  Location     Type
 13765 ;;                  1    wreg      void 
 13766 ;; Registers used:
 13767 ;;		wreg, status,2, status,0, cstack
 13768 ;; Tracked objects:
 13769 ;;		On entry : 0/0
 13770 ;;		On exit  : 0/0
 13771 ;;		Unchanged: 0/0
 13772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13774 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;Total ram usage:        2 bytes
 13778 ;; Hardware stack levels used:    1
 13779 ;; Hardware stack levels required when called:    7
 13780 ;; This function calls:
 13781 ;;		Nothing
 13782 ;; This function is called by:
 13783 ;;		_readIR
 13784 ;;		_readMAG
 13785 ;;		_sensorTest
 13786 ;;		_PusherTest
 13787 ;; This function uses a non-reentrant model
 13788 ;;
 13789                           
 13790                           	psect	text43
 13791  004E0E                     __ptext43:
 13792                           	opt stack 0
 13793  004E0E                     _readADC:
 13794                           	opt stack 20
 13795                           
 13796                           ;incstack = 0
 13797                           ;readADC@channel stored from wreg
 13798  004E0E  0100               	movlb	0	; () banked
 13799  004E10  6F81               	movwf	readADC@channel& (0+255),b
 13800                           
 13801                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13802  004E12  0100               	movlb	0	; () banked
 13803  004E14  4581               	rlncf	readADC@channel& (0+255),w,b
 13804  004E16  46E8               	rlncf	wreg,f,c
 13805  004E18  0BFC               	andlw	252
 13806  004E1A  6EC2               	movwf	4034,c	;volatile
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13810  004E1C  80C2               	bsf	4034,0,c	;volatile
 13811                           
 13812                           ; BSR set to: 0
 13813                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13814  004E1E  82C2               	bsf	4034,1,c	;volatile
 13815                           
 13816                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13817  004E20  D009               	goto	l5742
 13818  004E22                     l5740:
 13819  004E22  0E34               	movlw	52
 13820  004E24  0100               	movlb	0	; () banked
 13821  004E26  6F80               	movwf	??_readADC& (0+255),b
 13822  004E28  0EF1               	movlw	241
 13823  004E2A                     u9527:
 13824  004E2A  2EE8               	decfsz	wreg,f,c
 13825  004E2C  D7FE               	bra	u9527
 13826  004E2E  2F80               	decfsz	??_readADC& (0+255),f,b
 13827  004E30  D7FC               	bra	u9527
 13828  004E32  D000               	nop2	
 13829  004E34                     l5742:
 13830  004E34  A2C2               	btfss	4034,1,c	;volatile
 13831  004E36  0012               	return	
 13832  004E38  D7F4               	goto	l5740
 13833  004E3A                     __end_of_readADC:
 13834                           	opt stack 0
 13835                           tblptru	equ	0xFF8
 13836                           tblptrh	equ	0xFF7
 13837                           tblptrl	equ	0xFF6
 13838                           tablat	equ	0xFF5
 13839                           prodh	equ	0xFF4
 13840                           prodl	equ	0xFF3
 13841                           intcon	equ	0xFF2
 13842                           intcon2	equ	0xFF1
 13843                           intcon3	equ	0xFF0
 13844                           postinc0	equ	0xFEE
 13845                           wreg	equ	0xFE8
 13846                           postdec1	equ	0xFE5
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           fsr2h	equ	0xFDA
 13852                           fsr2l	equ	0xFD9
 13853                           status	equ	0xFD8
 13854                           
 13855 ;; *************** function _PortTests *****************
 13856 ;; Defined at:
 13857 ;;		line 409 in file "Test.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;		None
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;		None
 13862 ;; Return value:  Size  Location     Type
 13863 ;;                  1    wreg      void 
 13864 ;; Registers used:
 13865 ;;		wreg, status,2, status,0
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;Total ram usage:        2 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    7
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		_Test
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           	psect	text44
 13886  004340                     __ptext44:
 13887                           	opt stack 0
 13888  004340                     _PortTests:
 13889                           	opt stack 22
 13890  004340                     l1228:
 13891  004340  A281               	btfss	3969,1,c	;volatile
 13892  004342  D7FE               	goto	l1228
 13893                           
 13894                           ;Test.c: 413: var = PORTB >> 4;
 13895  004344  CF81 F080          	movff	3969,??_PortTests	;volatile
 13896  004348  0100               	movlb	0	; () banked
 13897  00434A  3B80               	swapf	??_PortTests& (0+255),f,b
 13898  00434C  0E0F               	movlw	15
 13899  00434E  1780               	andwf	??_PortTests& (0+255),f,b
 13900  004350  0100               	movlb	0	; () banked
 13901  004352  5180               	movf	??_PortTests& (0+255),w,b
 13902  004354  0100               	movlb	0	; () banked
 13903  004356  6FFA               	movwf	_var& (0+255),b
 13904  004358  6BFB               	clrf	(_var+1)& (0+255),b
 13905                           
 13906                           ;Test.c: 414: switch(var){
 13907  00435A  D00C               	goto	l7910
 13908  00435C                     l1232:
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13912  00435C  808D               	bsf	3981,0,c	;volatile
 13913                           
 13914                           ;Test.c: 417: break;
 13915  00435E  D027               	goto	l1240
 13916  004360                     l1234:
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13920  004360  828D               	bsf	3981,1,c	;volatile
 13921                           
 13922                           ;Test.c: 420: break;
 13923  004362  D025               	goto	l1240
 13924  004364                     l1235:
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13928  004364  808C               	bsf	3980,0,c	;volatile
 13929                           
 13930                           ;Test.c: 423: break;
 13931  004366  D023               	goto	l1240
 13932  004368                     l1236:
 13933                           
 13934                           ; BSR set to: 0
 13935                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13936  004368  8689               	bsf	3977,3,c	;volatile
 13937                           
 13938                           ;Test.c: 426: break;
 13939  00436A  D021               	goto	l1240
 13940  00436C                     l1237:
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13944  00436C  8889               	bsf	3977,4,c	;volatile
 13945                           
 13946                           ;Test.c: 429: break;
 13947  00436E  D01F               	goto	l1240
 13948  004370                     l1238:
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13952  004370  8A89               	bsf	3977,5,c	;volatile
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;Test.c: 435: }
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;Test.c: 434: break;
 13959                           
 13960                           ;Test.c: 433: default:
 13961                           
 13962                           ;Test.c: 432: break;
 13963  004372  D01D               	goto	l1240
 13964  004374                     l7910:
 13965                           
 13966                           ; BSR set to: 0
 13967  004374  C0FA  F080         	movff	_var,??_PortTests
 13968  004378  C0FB  F081         	movff	_var+1,??_PortTests+1
 13969                           
 13970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13971                           ; Switch size 1, requested type "space"
 13972                           ; Number of cases is 1, Range of values is 0 to 0
 13973                           ; switch strategies available:
 13974                           ; Name         Instructions Cycles
 13975                           ; simple_byte            4     3 (average)
 13976                           ;	Chosen strategy is simple_byte
 13977  00437C  0100               	movlb	0	; () banked
 13978  00437E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13979  004380  0A00               	xorlw	0	; case 0
 13980  004382  A4D8               	btfss	status,2,c
 13981  004384  D014               	goto	l1240
 13982                           
 13983                           ; BSR set to: 0
 13984                           ; Switch size 1, requested type "space"
 13985                           ; Number of cases is 6, Range of values is 0 to 5
 13986                           ; switch strategies available:
 13987                           ; Name         Instructions Cycles
 13988                           ; simple_byte           19    10 (average)
 13989                           ;	Chosen strategy is simple_byte
 13990  004386  0100               	movlb	0	; () banked
 13991  004388  5180               	movf	??_PortTests& (0+255),w,b
 13992  00438A  0A00               	xorlw	0	; case 0
 13993  00438C  B4D8               	btfsc	status,2,c
 13994  00438E  D7E6               	goto	l1232
 13995  004390  0A01               	xorlw	1	; case 1
 13996  004392  B4D8               	btfsc	status,2,c
 13997  004394  D7E5               	goto	l1234
 13998  004396  0A03               	xorlw	3	; case 2
 13999  004398  B4D8               	btfsc	status,2,c
 14000  00439A  D7E4               	goto	l1235
 14001  00439C  0A01               	xorlw	1	; case 3
 14002  00439E  B4D8               	btfsc	status,2,c
 14003  0043A0  D7E3               	goto	l1236
 14004  0043A2  0A07               	xorlw	7	; case 4
 14005  0043A4  B4D8               	btfsc	status,2,c
 14006  0043A6  D7E2               	goto	l1237
 14007  0043A8  0A01               	xorlw	1	; case 5
 14008  0043AA  B4D8               	btfsc	status,2,c
 14009  0043AC  D7E1               	goto	l1238
 14010  0043AE                     l1240:
 14011  0043AE  B281               	btfsc	3969,1,c	;volatile
 14012  0043B0  D7FE               	goto	l1240
 14013                           
 14014                           ;Test.c: 437: __nop();
 14015  0043B2  F000               	nop	
 14016                           
 14017                           ;Test.c: 438: __nop();
 14018  0043B4  F000               	nop	
 14019                           
 14020                           ;Test.c: 439: LATA = 0x00;
 14021  0043B6  0E00               	movlw	0
 14022  0043B8  6E89               	movwf	3977,c	;volatile
 14023                           
 14024                           ;Test.c: 440: LATE = 0x00;
 14025  0043BA  0E00               	movlw	0
 14026  0043BC  6E8D               	movwf	3981,c	;volatile
 14027                           
 14028                           ;Test.c: 441: LATD = 0x00; }
 14029  0043BE  0E00               	movlw	0
 14030  0043C0  6E8C               	movwf	3980,c	;volatile
 14031  0043C2  D7BE               	goto	l1228
 14032  0043C4                     __end_of_PortTests:
 14033                           	opt stack 0
 14034                           tblptru	equ	0xFF8
 14035                           tblptrh	equ	0xFF7
 14036                           tblptrl	equ	0xFF6
 14037                           tablat	equ	0xFF5
 14038                           prodh	equ	0xFF4
 14039                           prodl	equ	0xFF3
 14040                           intcon	equ	0xFF2
 14041                           intcon2	equ	0xFF1
 14042                           intcon3	equ	0xFF0
 14043                           postinc0	equ	0xFEE
 14044                           wreg	equ	0xFE8
 14045                           postdec1	equ	0xFE5
 14046                           fsr1l	equ	0xFE1
 14047                           indf2	equ	0xFDF
 14048                           postinc2	equ	0xFDE
 14049                           postdec2	equ	0xFDD
 14050                           fsr2h	equ	0xFDA
 14051                           fsr2l	equ	0xFD9
 14052                           status	equ	0xFD8
 14053                           
 14054 ;; *************** function _PortTestA5 *****************
 14055 ;; Defined at:
 14056 ;;		line 444 in file "Test.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;		None
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;		None
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  1    wreg      void 
 14063 ;; Registers used:
 14064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;Total ram usage:        1 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:   10
 14077 ;; This function calls:
 14078 ;;		_lcdInst
 14079 ;;		_printf
 14080 ;; This function is called by:
 14081 ;;		_Test
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text45
 14086  00479C                     __ptext45:
 14087                           	opt stack 0
 14088  00479C                     _PortTestA5:
 14089                           	opt stack 19
 14090                           
 14091                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14092                           
 14093                           ;incstack = 0
 14094  00479C  0E01               	movlw	1
 14095  00479E  EC02  F028         	call	_lcdInst
 14096  0047A2  0E68               	movlw	104
 14097  0047A4  0100               	movlb	0	; () banked
 14098  0047A6  6FAB               	movwf	??_PortTestA5& (0+255),b
 14099  0047A8  0EE4               	movlw	228
 14100  0047AA                     u9537:
 14101  0047AA  2EE8               	decfsz	wreg,f,c
 14102  0047AC  D7FE               	bra	u9537
 14103  0047AE  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14104  0047B0  D7FC               	bra	u9537
 14105  0047B2  F000               	nop	
 14106  0047B4  0E80               	movlw	128
 14107  0047B6  EC02  F028         	call	_lcdInst
 14108                           
 14109                           ;Test.c: 446: printf("D WILL RETURN    ");
 14110  0047BA  0E37               	movlw	low STR_111
 14111  0047BC  0100               	movlb	0	; () banked
 14112  0047BE  6F8E               	movwf	printf@f& (0+255),b
 14113  0047C0  0EFB               	movlw	high STR_111
 14114  0047C2  0100               	movlb	0	; () banked
 14115  0047C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14116  0047C6  ECF2  F00A         	call	_printf	;wreg free
 14117                           
 14118                           ;Test.c: 447: lcdInst(0b11000000);;
 14119  0047CA  0EC0               	movlw	192
 14120  0047CC  EC02  F028         	call	_lcdInst
 14121                           
 14122                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14123  0047D0  0E49               	movlw	low STR_112
 14124  0047D2  0100               	movlb	0	; () banked
 14125  0047D4  6F8E               	movwf	printf@f& (0+255),b
 14126  0047D6  0EFB               	movlw	high STR_112
 14127  0047D8  0100               	movlb	0	; () banked
 14128  0047DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14129  0047DC  ECF2  F00A         	call	_printf	;wreg free
 14130  0047E0                     l1249:
 14131  0047E0  A281               	btfss	3969,1,c	;volatile
 14132  0047E2  D7FE               	goto	l1249
 14133                           
 14134                           ;Test.c: 453: }
 14135                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14136  0047E4  3881               	swapf	3969,w,c	;volatile
 14137  0047E6  0B0F               	andlw	15
 14138  0047E8  0A0F               	xorlw	15
 14139  0047EA  B4D8               	btfsc	status,2,c
 14140  0047EC  0012               	return	
 14141                           
 14142                           ;Test.c: 457: else{
 14143                           ;Test.c: 458: LATAbits.LATA5 = 1;
 14144                           
 14145                           ;Test.c: 456: }
 14146                           
 14147                           ;Test.c: 455: break;
 14148  0047EE  8A89               	bsf	3977,5,c	;volatile
 14149  0047F0                     l1255:
 14150  0047F0  B281               	btfsc	3969,1,c	;volatile
 14151  0047F2  D7FE               	goto	l1255
 14152                           
 14153                           ;Test.c: 461: }
 14154                           ;Test.c: 462: LATAbits.LATA5 = 0;
 14155  0047F4  9A89               	bcf	3977,5,c	;volatile
 14156  0047F6  D7F4               	goto	l1249
 14157  0047F8                     __end_of_PortTestA5:
 14158                           	opt stack 0
 14159                           tblptru	equ	0xFF8
 14160                           tblptrh	equ	0xFF7
 14161                           tblptrl	equ	0xFF6
 14162                           tablat	equ	0xFF5
 14163                           prodh	equ	0xFF4
 14164                           prodl	equ	0xFF3
 14165                           intcon	equ	0xFF2
 14166                           intcon2	equ	0xFF1
 14167                           intcon3	equ	0xFF0
 14168                           postinc0	equ	0xFEE
 14169                           wreg	equ	0xFE8
 14170                           postdec1	equ	0xFE5
 14171                           fsr1l	equ	0xFE1
 14172                           indf2	equ	0xFDF
 14173                           postinc2	equ	0xFDE
 14174                           postdec2	equ	0xFDD
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function _EEPROMTest *****************
 14180 ;; Defined at:
 14181 ;;		line 577 in file "Test.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;		None
 14184 ;; Auto vars:     Size  Location     Type
 14185 ;;		None
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  1    wreg      void 
 14188 ;; Registers used:
 14189 ;;		None
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;Total ram usage:        0 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    7
 14202 ;; This function calls:
 14203 ;;		Nothing
 14204 ;; This function is called by:
 14205 ;;		_Test
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text46
 14210  005068                     __ptext46:
 14211                           	opt stack 0
 14212  005068                     _EEPROMTest:
 14213                           	opt stack 22
 14214                           
 14215                           ;incstack = 0
 14216  005068  0012               	return		;funcret
 14217  00506A                     __end_of_EEPROMTest:
 14218                           	opt stack 0
 14219                           tblptru	equ	0xFF8
 14220                           tblptrh	equ	0xFF7
 14221                           tblptrl	equ	0xFF6
 14222                           tablat	equ	0xFF5
 14223                           prodh	equ	0xFF4
 14224                           prodl	equ	0xFF3
 14225                           intcon	equ	0xFF2
 14226                           intcon2	equ	0xFF1
 14227                           intcon3	equ	0xFF0
 14228                           postinc0	equ	0xFEE
 14229                           wreg	equ	0xFE8
 14230                           postdec1	equ	0xFE5
 14231                           fsr1l	equ	0xFE1
 14232                           indf2	equ	0xFDF
 14233                           postinc2	equ	0xFDE
 14234                           postdec2	equ	0xFDD
 14235                           fsr2h	equ	0xFDA
 14236                           fsr2l	equ	0xFD9
 14237                           status	equ	0xFD8
 14238                           
 14239 ;; *************** function _BothServos *****************
 14240 ;; Defined at:
 14241 ;;		line 352 in file "Test.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14259 ;;Total ram usage:        2 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:   10
 14262 ;; This function calls:
 14263 ;;		_initServos
 14264 ;;		_lcdInst
 14265 ;;		_printf
 14266 ;;		_updateServoPosition
 14267 ;; This function is called by:
 14268 ;;		_Test
 14269 ;; This function uses a non-reentrant model
 14270 ;;
 14271                           
 14272                           	psect	text47
 14273  001A1C                     __ptext47:
 14274                           	opt stack 0
 14275  001A1C                     _BothServos:
 14276                           	opt stack 19
 14277                           
 14278                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14279                           
 14280                           ;incstack = 0
 14281  001A1C  0E01               	movlw	1
 14282  001A1E  EC02  F028         	call	_lcdInst
 14283  001A22  0E68               	movlw	104
 14284  001A24  0100               	movlb	0	; () banked
 14285  001A26  6FAB               	movwf	??_BothServos& (0+255),b
 14286  001A28  0EE4               	movlw	228
 14287  001A2A                     u9547:
 14288  001A2A  2EE8               	decfsz	wreg,f,c
 14289  001A2C  D7FE               	bra	u9547
 14290  001A2E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14291  001A30  D7FC               	bra	u9547
 14292  001A32  F000               	nop	
 14293  001A34  0E80               	movlw	128
 14294  001A36  EC02  F028         	call	_lcdInst
 14295                           
 14296                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14297  001A3A  0EB4               	movlw	low STR_110
 14298  001A3C  0100               	movlb	0	; () banked
 14299  001A3E  6F8E               	movwf	printf@f& (0+255),b
 14300  001A40  0EFC               	movlw	high STR_110
 14301  001A42  0100               	movlb	0	; () banked
 14302  001A44  6F8F               	movwf	(printf@f+1)& (0+255),b
 14303  001A46  ECF2  F00A         	call	_printf	;wreg free
 14304                           
 14305                           ;Test.c: 355: TMR1ON = 1;
 14306  001A4A  80CD               	bsf	4045,0,c	;volatile
 14307                           
 14308                           ;Test.c: 356: TMR3ON = 1;
 14309  001A4C  80B1               	bsf	4017,0,c	;volatile
 14310                           
 14311                           ;Test.c: 357: machine_state = Sorting_state;
 14312  001A4E  0E01               	movlw	1
 14313  001A50  0100               	movlb	0	; () banked
 14314  001A52  6FFC               	movwf	_machine_state& (0+255),b
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;Test.c: 358: was_low_1 = 0;
 14318  001A54  0E00               	movlw	0
 14319  001A56  6E7A               	movwf	_was_low_1+1,c	;volatile
 14320  001A58  0E00               	movlw	0
 14321  001A5A  6E79               	movwf	_was_low_1,c	;volatile
 14322                           
 14323                           ; BSR set to: 0
 14324                           ;Test.c: 359: was_low_3 = 0;
 14325  001A5C  0E00               	movlw	0
 14326  001A5E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14327  001A60  0E00               	movlw	0
 14328  001A62  6E7B               	movwf	_was_low_3,c	;volatile
 14329                           
 14330                           ; BSR set to: 0
 14331                           ;Test.c: 365: initServos();
 14332  001A64  ECFC  F023         	call	_initServos	;wreg free
 14333                           
 14334                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14335  001A68  0E3D               	movlw	61
 14336  001A6A  0100               	movlb	0	; () banked
 14337  001A6C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14338  001A6E  0EE1               	movlw	225
 14339  001A70  0100               	movlb	0	; () banked
 14340  001A72  6FAB               	movwf	??_BothServos& (0+255),b
 14341  001A74  0E3F               	movlw	63
 14342  001A76                     u9557:
 14343  001A76  2EE8               	decfsz	wreg,f,c
 14344  001A78  D7FE               	bra	u9557
 14345  001A7A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14346  001A7C  D7FC               	bra	u9557
 14347  001A7E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14348  001A80  D7FA               	bra	u9557
 14349  001A82  D000               	nop2	
 14350                           
 14351                           ;Test.c: 368: updateServoPosition(500, 1);
 14352  001A84  0E01               	movlw	1
 14353  001A86  0100               	movlb	0	; () banked
 14354  001A88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14355  001A8A  0EF4               	movlw	244
 14356  001A8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14357  001A8E  0E00               	movlw	0
 14358  001A90  0100               	movlb	0	; () banked
 14359  001A92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14360  001A94  0E01               	movlw	1
 14361  001A96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14362  001A98  EC5E  F022         	call	_updateServoPosition	;wreg free
 14363                           
 14364                           ;Test.c: 369: updateServoPosition(1050, 3);
 14365  001A9C  0E04               	movlw	4
 14366  001A9E  0100               	movlb	0	; () banked
 14367  001AA0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14368  001AA2  0E1A               	movlw	26
 14369  001AA4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14370  001AA6  0E00               	movlw	0
 14371  001AA8  0100               	movlb	0	; () banked
 14372  001AAA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14373  001AAC  0E03               	movlw	3
 14374  001AAE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14375  001AB0  EC5E  F022         	call	_updateServoPosition	;wreg free
 14376                           
 14377                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14378  001AB4  0E1F               	movlw	31
 14379  001AB6  0100               	movlb	0	; () banked
 14380  001AB8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14381  001ABA  0E71               	movlw	113
 14382  001ABC  0100               	movlb	0	; () banked
 14383  001ABE  6FAB               	movwf	??_BothServos& (0+255),b
 14384  001AC0  0E1E               	movlw	30
 14385  001AC2                     u9567:
 14386  001AC2  2EE8               	decfsz	wreg,f,c
 14387  001AC4  D7FE               	bra	u9567
 14388  001AC6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14389  001AC8  D7FC               	bra	u9567
 14390  001ACA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14391  001ACC  D7FA               	bra	u9567
 14392  001ACE  F000               	nop	
 14393                           
 14394                           ;Test.c: 371: updateServoPosition(1260, 3);
 14395  001AD0  0E04               	movlw	4
 14396  001AD2  0100               	movlb	0	; () banked
 14397  001AD4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14398  001AD6  0EEC               	movlw	236
 14399  001AD8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14400  001ADA  0E00               	movlw	0
 14401  001ADC  0100               	movlb	0	; () banked
 14402  001ADE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14403  001AE0  0E03               	movlw	3
 14404  001AE2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14405  001AE4  EC5E  F022         	call	_updateServoPosition	;wreg free
 14406                           
 14407                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14408  001AE8  0E66               	movlw	102
 14409  001AEA  0100               	movlb	0	; () banked
 14410  001AEC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14411  001AEE  0E76               	movlw	118
 14412  001AF0  0100               	movlb	0	; () banked
 14413  001AF2  6FAB               	movwf	??_BothServos& (0+255),b
 14414  001AF4  0EC1               	movlw	193
 14415  001AF6                     u9577:
 14416  001AF6  2EE8               	decfsz	wreg,f,c
 14417  001AF8  D7FE               	bra	u9577
 14418  001AFA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14419  001AFC  D7FC               	bra	u9577
 14420  001AFE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14421  001B00  D7FA               	bra	u9577
 14422                           
 14423                           ;Test.c: 373: updateServoPosition(1050, 3);
 14424  001B02  0E04               	movlw	4
 14425  001B04  0100               	movlb	0	; () banked
 14426  001B06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14427  001B08  0E1A               	movlw	26
 14428  001B0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14429  001B0C  0E00               	movlw	0
 14430  001B0E  0100               	movlb	0	; () banked
 14431  001B10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14432  001B12  0E03               	movlw	3
 14433  001B14  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14434  001B16  EC5E  F022         	call	_updateServoPosition	;wreg free
 14435                           
 14436                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14437  001B1A  0E1F               	movlw	31
 14438  001B1C  0100               	movlb	0	; () banked
 14439  001B1E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14440  001B20  0E71               	movlw	113
 14441  001B22  0100               	movlb	0	; () banked
 14442  001B24  6FAB               	movwf	??_BothServos& (0+255),b
 14443  001B26  0E1E               	movlw	30
 14444  001B28                     u9587:
 14445  001B28  2EE8               	decfsz	wreg,f,c
 14446  001B2A  D7FE               	bra	u9587
 14447  001B2C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14448  001B2E  D7FC               	bra	u9587
 14449  001B30  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14450  001B32  D7FA               	bra	u9587
 14451  001B34  F000               	nop	
 14452                           
 14453                           ;Test.c: 376: updateServoPosition(850, 1);
 14454  001B36  0E03               	movlw	3
 14455  001B38  0100               	movlb	0	; () banked
 14456  001B3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14457  001B3C  0E52               	movlw	82
 14458  001B3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14459  001B40  0E00               	movlw	0
 14460  001B42  0100               	movlb	0	; () banked
 14461  001B44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14462  001B46  0E01               	movlw	1
 14463  001B48  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14464  001B4A  EC5E  F022         	call	_updateServoPosition	;wreg free
 14465                           
 14466                           ;Test.c: 377: updateServoPosition(1050, 3);
 14467  001B4E  0E04               	movlw	4
 14468  001B50  0100               	movlb	0	; () banked
 14469  001B52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14470  001B54  0E1A               	movlw	26
 14471  001B56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14472  001B58  0E00               	movlw	0
 14473  001B5A  0100               	movlb	0	; () banked
 14474  001B5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14475  001B5E  0E03               	movlw	3
 14476  001B60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14477  001B62  EC5E  F022         	call	_updateServoPosition	;wreg free
 14478                           
 14479                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14480  001B66  0E1F               	movlw	31
 14481  001B68  0100               	movlb	0	; () banked
 14482  001B6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14483  001B6C  0E71               	movlw	113
 14484  001B6E  0100               	movlb	0	; () banked
 14485  001B70  6FAB               	movwf	??_BothServos& (0+255),b
 14486  001B72  0E1E               	movlw	30
 14487  001B74                     u9597:
 14488  001B74  2EE8               	decfsz	wreg,f,c
 14489  001B76  D7FE               	bra	u9597
 14490  001B78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14491  001B7A  D7FC               	bra	u9597
 14492  001B7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14493  001B7E  D7FA               	bra	u9597
 14494  001B80  F000               	nop	
 14495                           
 14496                           ;Test.c: 379: updateServoPosition(1260, 3);
 14497  001B82  0E04               	movlw	4
 14498  001B84  0100               	movlb	0	; () banked
 14499  001B86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14500  001B88  0EEC               	movlw	236
 14501  001B8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14502  001B8C  0E00               	movlw	0
 14503  001B8E  0100               	movlb	0	; () banked
 14504  001B90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14505  001B92  0E03               	movlw	3
 14506  001B94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14507  001B96  EC5E  F022         	call	_updateServoPosition	;wreg free
 14508                           
 14509                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14510  001B9A  0E66               	movlw	102
 14511  001B9C  0100               	movlb	0	; () banked
 14512  001B9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14513  001BA0  0E76               	movlw	118
 14514  001BA2  0100               	movlb	0	; () banked
 14515  001BA4  6FAB               	movwf	??_BothServos& (0+255),b
 14516  001BA6  0EC1               	movlw	193
 14517  001BA8                     u9607:
 14518  001BA8  2EE8               	decfsz	wreg,f,c
 14519  001BAA  D7FE               	bra	u9607
 14520  001BAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14521  001BAE  D7FC               	bra	u9607
 14522  001BB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14523  001BB2  D7FA               	bra	u9607
 14524                           
 14525                           ;Test.c: 381: updateServoPosition(1050, 3);
 14526  001BB4  0E04               	movlw	4
 14527  001BB6  0100               	movlb	0	; () banked
 14528  001BB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14529  001BBA  0E1A               	movlw	26
 14530  001BBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14531  001BBE  0E00               	movlw	0
 14532  001BC0  0100               	movlb	0	; () banked
 14533  001BC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14534  001BC4  0E03               	movlw	3
 14535  001BC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14536  001BC8  EC5E  F022         	call	_updateServoPosition	;wreg free
 14537                           
 14538                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14539  001BCC  0E1F               	movlw	31
 14540  001BCE  0100               	movlb	0	; () banked
 14541  001BD0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14542  001BD2  0E71               	movlw	113
 14543  001BD4  0100               	movlb	0	; () banked
 14544  001BD6  6FAB               	movwf	??_BothServos& (0+255),b
 14545  001BD8  0E1E               	movlw	30
 14546  001BDA                     u9617:
 14547  001BDA  2EE8               	decfsz	wreg,f,c
 14548  001BDC  D7FE               	bra	u9617
 14549  001BDE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14550  001BE0  D7FC               	bra	u9617
 14551  001BE2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14552  001BE4  D7FA               	bra	u9617
 14553  001BE6  F000               	nop	
 14554                           
 14555                           ;Test.c: 384: updateServoPosition(1200, 1);
 14556  001BE8  0E04               	movlw	4
 14557  001BEA  0100               	movlb	0	; () banked
 14558  001BEC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14559  001BEE  0EB0               	movlw	176
 14560  001BF0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14561  001BF2  0E00               	movlw	0
 14562  001BF4  0100               	movlb	0	; () banked
 14563  001BF6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14564  001BF8  0E01               	movlw	1
 14565  001BFA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14566  001BFC  EC5E  F022         	call	_updateServoPosition	;wreg free
 14567                           
 14568                           ;Test.c: 385: updateServoPosition(1050, 3);
 14569  001C00  0E04               	movlw	4
 14570  001C02  0100               	movlb	0	; () banked
 14571  001C04  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14572  001C06  0E1A               	movlw	26
 14573  001C08  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14574  001C0A  0E00               	movlw	0
 14575  001C0C  0100               	movlb	0	; () banked
 14576  001C0E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14577  001C10  0E03               	movlw	3
 14578  001C12  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14579  001C14  EC5E  F022         	call	_updateServoPosition	;wreg free
 14580                           
 14581                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14582  001C18  0E3D               	movlw	61
 14583  001C1A  0100               	movlb	0	; () banked
 14584  001C1C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14585  001C1E  0EE1               	movlw	225
 14586  001C20  0100               	movlb	0	; () banked
 14587  001C22  6FAB               	movwf	??_BothServos& (0+255),b
 14588  001C24  0E3F               	movlw	63
 14589  001C26                     u9627:
 14590  001C26  2EE8               	decfsz	wreg,f,c
 14591  001C28  D7FE               	bra	u9627
 14592  001C2A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14593  001C2C  D7FC               	bra	u9627
 14594  001C2E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14595  001C30  D7FA               	bra	u9627
 14596  001C32  D000               	nop2	
 14597                           
 14598                           ;Test.c: 388: updateServoPosition(1670, 1);
 14599  001C34  0E06               	movlw	6
 14600  001C36  0100               	movlb	0	; () banked
 14601  001C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14602  001C3A  0E86               	movlw	134
 14603  001C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14604  001C3E  0E00               	movlw	0
 14605  001C40  0100               	movlb	0	; () banked
 14606  001C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14607  001C44  0E01               	movlw	1
 14608  001C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14609  001C48  EC5E  F022         	call	_updateServoPosition	;wreg free
 14610                           
 14611                           ;Test.c: 389: updateServoPosition(1050, 3);
 14612  001C4C  0E04               	movlw	4
 14613  001C4E  0100               	movlb	0	; () banked
 14614  001C50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14615  001C52  0E1A               	movlw	26
 14616  001C54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14617  001C56  0E00               	movlw	0
 14618  001C58  0100               	movlb	0	; () banked
 14619  001C5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14620  001C5C  0E03               	movlw	3
 14621  001C5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14622  001C60  EC5E  F022         	call	_updateServoPosition	;wreg free
 14623                           
 14624                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14625  001C64  0E1F               	movlw	31
 14626  001C66  0100               	movlb	0	; () banked
 14627  001C68  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14628  001C6A  0E71               	movlw	113
 14629  001C6C  0100               	movlb	0	; () banked
 14630  001C6E  6FAB               	movwf	??_BothServos& (0+255),b
 14631  001C70  0E1E               	movlw	30
 14632  001C72                     u9637:
 14633  001C72  2EE8               	decfsz	wreg,f,c
 14634  001C74  D7FE               	bra	u9637
 14635  001C76  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14636  001C78  D7FC               	bra	u9637
 14637  001C7A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14638  001C7C  D7FA               	bra	u9637
 14639  001C7E  F000               	nop	
 14640                           
 14641                           ;Test.c: 391: updateServoPosition(1390, 3);
 14642  001C80  0E05               	movlw	5
 14643  001C82  0100               	movlb	0	; () banked
 14644  001C84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14645  001C86  0E6E               	movlw	110
 14646  001C88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14647  001C8A  0E00               	movlw	0
 14648  001C8C  0100               	movlb	0	; () banked
 14649  001C8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14650  001C90  0E03               	movlw	3
 14651  001C92  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14652  001C94  EC5E  F022         	call	_updateServoPosition	;wreg free
 14653                           
 14654                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14655  001C98  0E66               	movlw	102
 14656  001C9A  0100               	movlb	0	; () banked
 14657  001C9C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14658  001C9E  0E76               	movlw	118
 14659  001CA0  0100               	movlb	0	; () banked
 14660  001CA2  6FAB               	movwf	??_BothServos& (0+255),b
 14661  001CA4  0EC1               	movlw	193
 14662  001CA6                     u9647:
 14663  001CA6  2EE8               	decfsz	wreg,f,c
 14664  001CA8  D7FE               	bra	u9647
 14665  001CAA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14666  001CAC  D7FC               	bra	u9647
 14667  001CAE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14668  001CB0  D7FA               	bra	u9647
 14669                           
 14670                           ;Test.c: 393: updateServoPosition(1050, 3);
 14671  001CB2  0E04               	movlw	4
 14672  001CB4  0100               	movlb	0	; () banked
 14673  001CB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14674  001CB8  0E1A               	movlw	26
 14675  001CBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14676  001CBC  0E00               	movlw	0
 14677  001CBE  0100               	movlb	0	; () banked
 14678  001CC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14679  001CC2  0E03               	movlw	3
 14680  001CC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14681  001CC6  EC5E  F022         	call	_updateServoPosition	;wreg free
 14682                           
 14683                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14684  001CCA  0E1F               	movlw	31
 14685  001CCC  0100               	movlb	0	; () banked
 14686  001CCE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14687  001CD0  0E71               	movlw	113
 14688  001CD2  0100               	movlb	0	; () banked
 14689  001CD4  6FAB               	movwf	??_BothServos& (0+255),b
 14690  001CD6  0E1E               	movlw	30
 14691  001CD8                     u9657:
 14692  001CD8  2EE8               	decfsz	wreg,f,c
 14693  001CDA  D7FE               	bra	u9657
 14694  001CDC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14695  001CDE  D7FC               	bra	u9657
 14696  001CE0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14697  001CE2  D7FA               	bra	u9657
 14698  001CE4  F000               	nop	
 14699                           
 14700                           ;Test.c: 396: updateServoPosition(2400, 1);
 14701  001CE6  0E09               	movlw	9
 14702  001CE8  0100               	movlb	0	; () banked
 14703  001CEA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14704  001CEC  0E60               	movlw	96
 14705  001CEE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14706  001CF0  0E00               	movlw	0
 14707  001CF2  0100               	movlb	0	; () banked
 14708  001CF4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14709  001CF6  0E01               	movlw	1
 14710  001CF8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14711  001CFA  EC5E  F022         	call	_updateServoPosition	;wreg free
 14712                           
 14713                           ;Test.c: 397: updateServoPosition(1050, 3);
 14714  001CFE  0E04               	movlw	4
 14715  001D00  0100               	movlb	0	; () banked
 14716  001D02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14717  001D04  0E1A               	movlw	26
 14718  001D06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14719  001D08  0E00               	movlw	0
 14720  001D0A  0100               	movlb	0	; () banked
 14721  001D0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14722  001D0E  0E03               	movlw	3
 14723  001D10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14724  001D12  EC5E  F022         	call	_updateServoPosition	;wreg free
 14725                           
 14726                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14727  001D16  0E1F               	movlw	31
 14728  001D18  0100               	movlb	0	; () banked
 14729  001D1A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14730  001D1C  0E71               	movlw	113
 14731  001D1E  0100               	movlb	0	; () banked
 14732  001D20  6FAB               	movwf	??_BothServos& (0+255),b
 14733  001D22  0E1E               	movlw	30
 14734  001D24                     u9667:
 14735  001D24  2EE8               	decfsz	wreg,f,c
 14736  001D26  D7FE               	bra	u9667
 14737  001D28  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14738  001D2A  D7FC               	bra	u9667
 14739  001D2C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14740  001D2E  D7FA               	bra	u9667
 14741  001D30  F000               	nop	
 14742                           
 14743                           ;Test.c: 399: updateServoPosition(1390, 3);
 14744  001D32  0E05               	movlw	5
 14745  001D34  0100               	movlb	0	; () banked
 14746  001D36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14747  001D38  0E6E               	movlw	110
 14748  001D3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14749  001D3C  0E00               	movlw	0
 14750  001D3E  0100               	movlb	0	; () banked
 14751  001D40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14752  001D42  0E03               	movlw	3
 14753  001D44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14754  001D46  EC5E  F022         	call	_updateServoPosition	;wreg free
 14755                           
 14756                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14757  001D4A  0E66               	movlw	102
 14758  001D4C  0100               	movlb	0	; () banked
 14759  001D4E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14760  001D50  0E76               	movlw	118
 14761  001D52  0100               	movlb	0	; () banked
 14762  001D54  6FAB               	movwf	??_BothServos& (0+255),b
 14763  001D56  0EC1               	movlw	193
 14764  001D58                     u9677:
 14765  001D58  2EE8               	decfsz	wreg,f,c
 14766  001D5A  D7FE               	bra	u9677
 14767  001D5C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14768  001D5E  D7FC               	bra	u9677
 14769  001D60  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14770  001D62  D7FA               	bra	u9677
 14771                           
 14772                           ;Test.c: 401: updateServoPosition(1050, 3);
 14773  001D64  0E04               	movlw	4
 14774  001D66  0100               	movlb	0	; () banked
 14775  001D68  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14776  001D6A  0E1A               	movlw	26
 14777  001D6C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14778  001D6E  0E00               	movlw	0
 14779  001D70  0100               	movlb	0	; () banked
 14780  001D72  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14781  001D74  0E03               	movlw	3
 14782  001D76  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14783  001D78  EC5E  F022         	call	_updateServoPosition	;wreg free
 14784                           
 14785                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14786  001D7C  0E1F               	movlw	31
 14787  001D7E  0100               	movlb	0	; () banked
 14788  001D80  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14789  001D82  0E71               	movlw	113
 14790  001D84  0100               	movlb	0	; () banked
 14791  001D86  6FAB               	movwf	??_BothServos& (0+255),b
 14792  001D88  0E1E               	movlw	30
 14793  001D8A                     u9687:
 14794  001D8A  2EE8               	decfsz	wreg,f,c
 14795  001D8C  D7FE               	bra	u9687
 14796  001D8E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14797  001D90  D7FC               	bra	u9687
 14798  001D92  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14799  001D94  D7FA               	bra	u9687
 14800  001D96  F000               	nop	
 14801                           
 14802                           ;Test.c: 404: TMR1ON = 0;
 14803  001D98  90CD               	bcf	4045,0,c	;volatile
 14804                           
 14805                           ;Test.c: 405: TMR3ON = 0;
 14806  001D9A  90B1               	bcf	4017,0,c	;volatile
 14807                           
 14808                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14809  001D9C  9EF2               	bcf	intcon,7,c	;volatile
 14810  001D9E  0012               	return		;funcret
 14811  001DA0                     __end_of_BothServos:
 14812                           	opt stack 0
 14813                           tblptru	equ	0xFF8
 14814                           tblptrh	equ	0xFF7
 14815                           tblptrl	equ	0xFF6
 14816                           tablat	equ	0xFF5
 14817                           prodh	equ	0xFF4
 14818                           prodl	equ	0xFF3
 14819                           intcon	equ	0xFF2
 14820                           intcon2	equ	0xFF1
 14821                           intcon3	equ	0xFF0
 14822                           postinc0	equ	0xFEE
 14823                           wreg	equ	0xFE8
 14824                           postdec1	equ	0xFE5
 14825                           fsr1l	equ	0xFE1
 14826                           indf2	equ	0xFDF
 14827                           postinc2	equ	0xFDE
 14828                           postdec2	equ	0xFDD
 14829                           fsr2h	equ	0xFDA
 14830                           fsr2l	equ	0xFD9
 14831                           status	equ	0xFD8
 14832                           
 14833 ;; *************** function _initServos *****************
 14834 ;; Defined at:
 14835 ;;		line 420 in file "sort.c"
 14836 ;; Parameters:    Size  Location     Type
 14837 ;;		None
 14838 ;; Auto vars:     Size  Location     Type
 14839 ;;		None
 14840 ;; Return value:  Size  Location     Type
 14841 ;;                  1    wreg      void 
 14842 ;; Registers used:
 14843 ;;		wreg, status,2, status,0, cstack
 14844 ;; Tracked objects:
 14845 ;;		On entry : 0/0
 14846 ;;		On exit  : 0/0
 14847 ;;		Unchanged: 0/0
 14848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14853 ;;Total ram usage:        1 bytes
 14854 ;; Hardware stack levels used:    1
 14855 ;; Hardware stack levels required when called:    8
 14856 ;; This function calls:
 14857 ;;		_updateServoPosition
 14858 ;; This function is called by:
 14859 ;;		_Loading
 14860 ;;		_BothServos
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           	psect	text48
 14865  0047F8                     __ptext48:
 14866                           	opt stack 0
 14867  0047F8                     _initServos:
 14868                           	opt stack 20
 14869                           
 14870                           ;sort.c: 421: updateServoPosition(1200, 1);
 14871                           
 14872                           ;incstack = 0
 14873  0047F8  0E04               	movlw	4
 14874  0047FA  0100               	movlb	0	; () banked
 14875  0047FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14876  0047FE  0EB0               	movlw	176
 14877  004800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14878  004802  0E00               	movlw	0
 14879  004804  0100               	movlb	0	; () banked
 14880  004806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14881  004808  0E01               	movlw	1
 14882  00480A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14883  00480C  EC5E  F022         	call	_updateServoPosition	;wreg free
 14884                           
 14885                           ;sort.c: 422: updateServoPosition(1050, 3);
 14886  004810  0E04               	movlw	4
 14887  004812  0100               	movlb	0	; () banked
 14888  004814  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14889  004816  0E1A               	movlw	26
 14890  004818  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14891  00481A  0E00               	movlw	0
 14892  00481C  0100               	movlb	0	; () banked
 14893  00481E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14894  004820  0E03               	movlw	3
 14895  004822  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14896  004824  EC5E  F022         	call	_updateServoPosition	;wreg free
 14897                           
 14898                           ;sort.c: 423: TMR1ON = 1;
 14899  004828  80CD               	bsf	4045,0,c	;volatile
 14900                           
 14901                           ;sort.c: 424: was_low_1 = 0;
 14902  00482A  0E00               	movlw	0
 14903  00482C  6E7A               	movwf	_was_low_1+1,c	;volatile
 14904  00482E  0E00               	movlw	0
 14905  004830  6E79               	movwf	_was_low_1,c	;volatile
 14906                           
 14907                           ;sort.c: 425: _delay((unsigned long)((5)*(32000000/4000.0)));
 14908  004832  0E34               	movlw	52
 14909  004834  0100               	movlb	0	; () banked
 14910  004836  6F88               	movwf	??_initServos& (0+255),b
 14911  004838  0EF1               	movlw	241
 14912  00483A                     u9697:
 14913  00483A  2EE8               	decfsz	wreg,f,c
 14914  00483C  D7FE               	bra	u9697
 14915  00483E  2F88               	decfsz	??_initServos& (0+255),f,b
 14916  004840  D7FC               	bra	u9697
 14917  004842  D000               	nop2	
 14918                           
 14919                           ;sort.c: 426: TMR3ON = 1;
 14920  004844  80B1               	bsf	4017,0,c	;volatile
 14921                           
 14922                           ;sort.c: 427: was_low_3 = 0;
 14923  004846  0E00               	movlw	0
 14924  004848  6E7C               	movwf	_was_low_3+1,c	;volatile
 14925  00484A  0E00               	movlw	0
 14926  00484C  6E7B               	movwf	_was_low_3,c	;volatile
 14927                           
 14928                           ;sort.c: 429: LATCbits.LATC0 = 1;
 14929  00484E  808B               	bsf	3979,0,c	;volatile
 14930  004850  0012               	return		;funcret
 14931  004852                     __end_of_initServos:
 14932                           	opt stack 0
 14933                           tblptru	equ	0xFF8
 14934                           tblptrh	equ	0xFF7
 14935                           tblptrl	equ	0xFF6
 14936                           tablat	equ	0xFF5
 14937                           prodh	equ	0xFF4
 14938                           prodl	equ	0xFF3
 14939                           intcon	equ	0xFF2
 14940                           intcon2	equ	0xFF1
 14941                           intcon3	equ	0xFF0
 14942                           postinc0	equ	0xFEE
 14943                           wreg	equ	0xFE8
 14944                           postdec1	equ	0xFE5
 14945                           fsr1l	equ	0xFE1
 14946                           indf2	equ	0xFDF
 14947                           postinc2	equ	0xFDE
 14948                           postdec2	equ	0xFDD
 14949                           fsr2h	equ	0xFDA
 14950                           fsr2l	equ	0xFD9
 14951                           status	equ	0xFD8
 14952                           
 14953 ;; *************** function _updateServoPosition *****************
 14954 ;; Defined at:
 14955 ;;		line 488 in file "sort.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;  time_us         2    0[BANK0 ] int 
 14958 ;;  timer           2    2[BANK0 ] int 
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;  my_time         2    6[BANK0 ] unsigned int 
 14961 ;; Return value:  Size  Location     Type
 14962 ;;                  1    wreg      void 
 14963 ;; Registers used:
 14964 ;;		wreg, status,2, status,0
 14965 ;; Tracked objects:
 14966 ;;		On entry : 0/0
 14967 ;;		On exit  : 0/0
 14968 ;;		Unchanged: 0/0
 14969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14973 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14974 ;;Total ram usage:        8 bytes
 14975 ;; Hardware stack levels used:    1
 14976 ;; Hardware stack levels required when called:    7
 14977 ;; This function calls:
 14978 ;;		Nothing
 14979 ;; This function is called by:
 14980 ;;		_Distribution
 14981 ;;		_initServos
 14982 ;;		_actuatorTest
 14983 ;;		_BothServos
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           	psect	text49
 14988  0044BC                     __ptext49:
 14989                           	opt stack 0
 14990  0044BC                     _updateServoPosition:
 14991                           	opt stack 20
 14992                           
 14993                           ;sort.c: 489: unsigned int my_time = 65535 - time_us;
 14994                           
 14995                           ;incstack = 0
 14996  0044BC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14997  0044C0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14998  0044C4  0100               	movlb	0	; () banked
 14999  0044C6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15000  0044C8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15001  0044CA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15002  0044CC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15003  0044CE  0EFF               	movlw	255
 15004  0044D0  0100               	movlb	0	; () banked
 15005  0044D2  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15006  0044D4  0100               	movlb	0	; () banked
 15007  0044D6  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15008  0044D8  0EFF               	movlw	255
 15009  0044DA  0100               	movlb	0	; () banked
 15010  0044DC  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15011  0044DE  0100               	movlb	0	; () banked
 15012  0044E0  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15013                           
 15014                           ;sort.c: 490: switch(timer){
 15015  0044E2  D015               	goto	l6106
 15016  0044E4                     l6104:
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;sort.c: 492: servoTimes[0] = my_time >> 8;
 15020  0044E4  0100               	movlb	0	; () banked
 15021  0044E6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15022  0044E8  0101               	movlb	1	; () banked
 15023  0044EA  6F1C               	movwf	_servoTimes& (0+255),b
 15024  0044EC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15025                           
 15026                           ;sort.c: 493: servoTimes[1] = my_time & 0xFF;
 15027  0044EE  0100               	movlb	0	; () banked
 15028  0044F0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15029  0044F2  0101               	movlb	1	; () banked
 15030  0044F4  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15031  0044F6  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15032  0044F8                     l852:
 15033                           
 15034                           ;sort.c: 495: servoTimes[2] = my_time >> 8;
 15035  0044F8  0100               	movlb	0	; () banked
 15036  0044FA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15037  0044FC  0101               	movlb	1	; () banked
 15038  0044FE  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15039  004500  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15040                           
 15041                           ;sort.c: 496: servoTimes[3] = my_time & 0xFF;
 15042  004502  0100               	movlb	0	; () banked
 15043  004504  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15044  004506  0101               	movlb	1	; () banked
 15045  004508  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15046  00450A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15047                           
 15048                           ;sort.c: 497: }
 15049  00450C  0012               	return	
 15050  00450E                     l6106:
 15051  00450E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15052  004512  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15053                           
 15054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15055                           ; Switch size 1, requested type "space"
 15056                           ; Number of cases is 1, Range of values is 0 to 0
 15057                           ; switch strategies available:
 15058                           ; Name         Instructions Cycles
 15059                           ; simple_byte            4     3 (average)
 15060                           ;	Chosen strategy is simple_byte
 15061  004516  0100               	movlb	0	; () banked
 15062  004518  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15063  00451A  0A00               	xorlw	0	; case 0
 15064  00451C  A4D8               	btfss	status,2,c
 15065  00451E  0012               	return	
 15066                           
 15067                           ; BSR set to: 0
 15068                           ; Switch size 1, requested type "space"
 15069                           ; Number of cases is 2, Range of values is 1 to 3
 15070                           ; switch strategies available:
 15071                           ; Name         Instructions Cycles
 15072                           ; simple_byte            7     4 (average)
 15073                           ;	Chosen strategy is simple_byte
 15074  004520  0100               	movlb	0	; () banked
 15075  004522  5184               	movf	??_updateServoPosition& (0+255),w,b
 15076  004524  0A01               	xorlw	1	; case 1
 15077  004526  B4D8               	btfsc	status,2,c
 15078  004528  D7DD               	goto	l6104
 15079  00452A  0A02               	xorlw	2	; case 3
 15080  00452C  A4D8               	btfss	status,2,c
 15081  00452E  0012               	return	
 15082  004530  D7E3               	goto	l852
 15083  004532                     __end_of_updateServoPosition:
 15084                           	opt stack 0
 15085                           tblptru	equ	0xFF8
 15086                           tblptrh	equ	0xFF7
 15087                           tblptrl	equ	0xFF6
 15088                           tablat	equ	0xFF5
 15089                           prodh	equ	0xFF4
 15090                           prodl	equ	0xFF3
 15091                           intcon	equ	0xFF2
 15092                           intcon2	equ	0xFF1
 15093                           intcon3	equ	0xFF0
 15094                           postinc0	equ	0xFEE
 15095                           wreg	equ	0xFE8
 15096                           postdec1	equ	0xFE5
 15097                           fsr1l	equ	0xFE1
 15098                           indf2	equ	0xFDF
 15099                           postinc2	equ	0xFDE
 15100                           postdec2	equ	0xFDD
 15101                           fsr2h	equ	0xFDA
 15102                           fsr2l	equ	0xFD9
 15103                           status	equ	0xFD8
 15104                           
 15105 ;; *************** function _BlockerTest *****************
 15106 ;; Defined at:
 15107 ;;		line 589 in file "Test.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;		None
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  i               2   44[BANK0 ] int 
 15112 ;;  cond_flag       2   48[BANK0 ] int 
 15113 ;;  cam_flag        2   46[BANK0 ] int 
 15114 ;; Return value:  Size  Location     Type
 15115 ;;                  1    wreg      void 
 15116 ;; Registers used:
 15117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15118 ;; Tracked objects:
 15119 ;;		On entry : 0/0
 15120 ;;		On exit  : 0/0
 15121 ;;		Unchanged: 0/0
 15122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15124 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15126 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15127 ;;Total ram usage:        7 bytes
 15128 ;; Hardware stack levels used:    1
 15129 ;; Hardware stack levels required when called:   10
 15130 ;; This function calls:
 15131 ;;		_lcdInst
 15132 ;;		_printf
 15133 ;; This function is called by:
 15134 ;;		_Test
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           	psect	text50
 15139  0035EE                     __ptext50:
 15140                           	opt stack 0
 15141  0035EE                     _BlockerTest:
 15142                           	opt stack 19
 15143                           
 15144                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15145                           
 15146                           ;incstack = 0
 15147  0035EE  0E01               	movlw	1
 15148  0035F0  EC02  F028         	call	_lcdInst
 15149  0035F4  0E68               	movlw	104
 15150  0035F6  0100               	movlb	0	; () banked
 15151  0035F8  6FAB               	movwf	??_BlockerTest& (0+255),b
 15152  0035FA  0EE4               	movlw	228
 15153  0035FC                     u9707:
 15154  0035FC  2EE8               	decfsz	wreg,f,c
 15155  0035FE  D7FE               	bra	u9707
 15156  003600  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15157  003602  D7FC               	bra	u9707
 15158  003604  F000               	nop	
 15159  003606  0E80               	movlw	128
 15160  003608  EC02  F028         	call	_lcdInst
 15161                           
 15162                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15163  00360C  0E7F               	movlw	low STR_122
 15164  00360E  0100               	movlb	0	; () banked
 15165  003610  6F8E               	movwf	printf@f& (0+255),b
 15166  003612  0EFB               	movlw	high STR_122
 15167  003614  0100               	movlb	0	; () banked
 15168  003616  6F8F               	movwf	(printf@f+1)& (0+255),b
 15169  003618  A480               	btfss	3968,2,c	;volatile
 15170  00361A  D004               	goto	u6750
 15171  00361C  0100               	movlb	0	; () banked
 15172  00361E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15173  003620  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15174  003622  D002               	goto	u6758
 15175  003624                     u6750:
 15176  003624  0100               	movlb	0	; () banked
 15177  003626  6BAB               	clrf	??_BlockerTest& (0+255),b
 15178  003628                     u6758:
 15179  003628  0100               	movlb	0	; () banked
 15180  00362A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15181  00362C  0100               	movlb	0	; () banked
 15182  00362E  6F90               	movwf	(?_printf+2)& (0+255),b
 15183  003630  6B91               	clrf	(?_printf+3)& (0+255),b
 15184  003632  ECF2  F00A         	call	_printf	;wreg free
 15185                           
 15186                           ;Test.c: 592: lcdInst(0b11000000);;
 15187  003636  0EC0               	movlw	192
 15188  003638  EC02  F028         	call	_lcdInst
 15189                           
 15190                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15191  00363C  0E6D               	movlw	low STR_123
 15192  00363E  0100               	movlb	0	; () banked
 15193  003640  6F8E               	movwf	printf@f& (0+255),b
 15194  003642  0EFB               	movlw	high STR_123
 15195  003644  0100               	movlb	0	; () banked
 15196  003646  6F8F               	movwf	(printf@f+1)& (0+255),b
 15197  003648  ECF2  F00A         	call	_printf	;wreg free
 15198                           
 15199                           ;Test.c: 594: int cam_flag = 1;
 15200  00364C  0E00               	movlw	0
 15201  00364E  0100               	movlb	0	; () banked
 15202  003650  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15203  003652  0E01               	movlw	1
 15204  003654  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;Test.c: 595: int cond_flag = 0;
 15208  003656  0E00               	movlw	0
 15209  003658  0100               	movlb	0	; () banked
 15210  00365A  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15211  00365C  0E00               	movlw	0
 15212  00365E  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15213                           
 15214                           ; BSR set to: 0
 15215                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15216                           
 15217                           ;Test.c: 596: while(1){
 15218  003660  D018               	goto	l8030
 15219  003662                     l8026:
 15220                           
 15221                           ;Test.c: 598: lcdInst(0b10000000);;
 15222  003662  0E80               	movlw	128
 15223  003664  EC02  F028         	call	_lcdInst
 15224                           
 15225                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15226  003668  0E7F               	movlw	low STR_122
 15227  00366A  0100               	movlb	0	; () banked
 15228  00366C  6F8E               	movwf	printf@f& (0+255),b
 15229  00366E  0EFB               	movlw	high STR_122
 15230  003670  0100               	movlb	0	; () banked
 15231  003672  6F8F               	movwf	(printf@f+1)& (0+255),b
 15232  003674  A480               	btfss	3968,2,c	;volatile
 15233  003676  D004               	goto	u6760
 15234  003678  0100               	movlb	0	; () banked
 15235  00367A  6BAB               	clrf	??_BlockerTest& (0+255),b
 15236  00367C  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15237  00367E  D002               	goto	u6768
 15238  003680                     u6760:
 15239  003680  0100               	movlb	0	; () banked
 15240  003682  6BAB               	clrf	??_BlockerTest& (0+255),b
 15241  003684                     u6768:
 15242  003684  0100               	movlb	0	; () banked
 15243  003686  51AB               	movf	??_BlockerTest& (0+255),w,b
 15244  003688  0100               	movlb	0	; () banked
 15245  00368A  6F90               	movwf	(?_printf+2)& (0+255),b
 15246  00368C  6B91               	clrf	(?_printf+3)& (0+255),b
 15247  00368E  ECF2  F00A         	call	_printf	;wreg free
 15248  003692                     l8030:
 15249  003692  A281               	btfss	3969,1,c	;volatile
 15250  003694  D7E6               	goto	l8026
 15251                           
 15252                           ;Test.c: 600: }
 15253                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15254  003696  3881               	swapf	3969,w,c	;volatile
 15255  003698  0B0F               	andlw	15
 15256  00369A  0A0F               	xorlw	15
 15257  00369C  B4D8               	btfsc	status,2,c
 15258  00369E  0012               	return	
 15259                           
 15260                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15261                           
 15262                           ;Test.c: 603: }
 15263                           
 15264                           ;Test.c: 602: break;
 15265  0036A0  3881               	swapf	3969,w,c	;volatile
 15266  0036A2  0B0F               	andlw	15
 15267  0036A4  06E8               	decf	wreg,f,c
 15268  0036A6  A4D8               	btfss	status,2,c
 15269  0036A8  D016               	goto	l8048
 15270                           
 15271                           ;Test.c: 605: if(cond_flag){
 15272  0036AA  0100               	movlb	0	; () banked
 15273  0036AC  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15274  0036AE  0100               	movlb	0	; () banked
 15275  0036B0  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15276  0036B2  B4D8               	btfsc	status,2,c
 15277  0036B4  D007               	goto	l1325
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15281  0036B6  8689               	bsf	3977,3,c	;volatile
 15282  0036B8  D006               	goto	l8046
 15283  0036BA                     u6811:
 15284  0036BA  0E01               	movlw	1
 15285  0036BC                     u6820:
 15286  0036BC  0100               	movlb	0	; () banked
 15287  0036BE  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15288  0036C0  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15289                           
 15290                           ;Test.c: 608: }
 15291  0036C2  D054               	goto	l8072
 15292  0036C4                     l1325:
 15293                           
 15294                           ; BSR set to: 0
 15295                           ;Test.c: 609: else{
 15296                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15297  0036C4  9689               	bcf	3977,3,c	;volatile
 15298  0036C6                     l8046:
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;Test.c: 611: cond_flag = !cond_flag;
 15302  0036C6  0100               	movlb	0	; () banked
 15303  0036C8  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15304  0036CA  0100               	movlb	0	; () banked
 15305  0036CC  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15306  0036CE  B4D8               	btfsc	status,2,c
 15307  0036D0  D7F4               	goto	u6811
 15308  0036D2  0E00               	movlw	0
 15309  0036D4  D7F3               	goto	u6820
 15310  0036D6                     l8048:
 15311                           
 15312                           ;Test.c: 614: else{
 15313                           ;Test.c: 615: if(cam_flag){
 15314  0036D6  0100               	movlb	0	; () banked
 15315  0036D8  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15316  0036DA  0100               	movlb	0	; () banked
 15317  0036DC  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15318  0036DE  B4D8               	btfsc	status,2,c
 15319  0036E0  D007               	goto	l8054
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15323  0036E2  808B               	bsf	3979,0,c	;volatile
 15324  0036E4  D023               	goto	l8066
 15325  0036E6                     u6861:
 15326  0036E6  0E01               	movlw	1
 15327  0036E8                     u6870:
 15328  0036E8  0100               	movlb	0	; () banked
 15329  0036EA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15330  0036EC  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15331                           
 15332                           ;Test.c: 618: }
 15333  0036EE  D03E               	goto	l8072
 15334  0036F0                     l8054:
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;Test.c: 619: else{
 15338                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15339  0036F0  0E00               	movlw	0
 15340  0036F2  0100               	movlb	0	; () banked
 15341  0036F4  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15342  0036F6  0E00               	movlw	0
 15343  0036F8  6FAC               	movwf	BlockerTest@i& (0+255),b
 15344  0036FA                     l8056:
 15345                           
 15346                           ; BSR set to: 0
 15347  0036FA  0100               	movlb	0	; () banked
 15348  0036FC  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15349  0036FE  D008               	goto	l1330
 15350  003700  0E88               	movlw	136
 15351  003702  0100               	movlb	0	; () banked
 15352  003704  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15353  003706  0E13               	movlw	19
 15354  003708  0100               	movlb	0	; () banked
 15355  00370A  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15356  00370C  B0D8               	btfsc	status,0,c
 15357  00370E  D00D               	goto	l1331
 15358  003710                     l1330:
 15359                           
 15360                           ; BSR set to: 0
 15361                           ;Test.c: 621: {
 15362                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15363  003710  808B               	bsf	3979,0,c	;volatile
 15364                           
 15365                           ; BSR set to: 0
 15366                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15367  003712  0E1A               	movlw	26
 15368  003714                     u9717:
 15369  003714  2EE8               	decfsz	wreg,f,c
 15370  003716  D7FE               	bra	u9717
 15371  003718  D000               	nop2	
 15372                           
 15373                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15374  00371A  908B               	bcf	3979,0,c	;volatile
 15375                           
 15376                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15377  00371C  0EF0               	movlw	240
 15378  00371E                     u9727:
 15379  00371E  2EE8               	decfsz	wreg,f,c
 15380  003720  D7FE               	bra	u9727
 15381  003722  0100               	movlb	0	; () banked
 15382  003724  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15383  003726  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15384  003728  D7E8               	goto	l8056
 15385  00372A                     l1331:
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;Test.c: 626: }
 15389                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15390  00372A  908B               	bcf	3979,0,c	;volatile
 15391  00372C                     l8066:
 15392                           
 15393                           ; BSR set to: 0
 15394                           ;Test.c: 628: cam_flag = !cam_flag;
 15395  00372C  0100               	movlb	0	; () banked
 15396  00372E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15397  003730  0100               	movlb	0	; () banked
 15398  003732  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15399  003734  B4D8               	btfsc	status,2,c
 15400  003736  D7D7               	goto	u6861
 15401  003738  0E00               	movlw	0
 15402  00373A  D7D6               	goto	u6870
 15403  00373C                     l8068:
 15404                           
 15405                           ;Test.c: 633: lcdInst(0b10000000);;
 15406  00373C  0E80               	movlw	128
 15407  00373E  EC02  F028         	call	_lcdInst
 15408                           
 15409                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15410  003742  0E7F               	movlw	low STR_122
 15411  003744  0100               	movlb	0	; () banked
 15412  003746  6F8E               	movwf	printf@f& (0+255),b
 15413  003748  0EFB               	movlw	high STR_122
 15414  00374A  0100               	movlb	0	; () banked
 15415  00374C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15416  00374E  A480               	btfss	3968,2,c	;volatile
 15417  003750  D004               	goto	u6920
 15418  003752  0100               	movlb	0	; () banked
 15419  003754  6BAB               	clrf	??_BlockerTest& (0+255),b
 15420  003756  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15421  003758  D002               	goto	u6928
 15422  00375A                     u6920:
 15423  00375A  0100               	movlb	0	; () banked
 15424  00375C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15425  00375E                     u6928:
 15426  00375E  0100               	movlb	0	; () banked
 15427  003760  51AB               	movf	??_BlockerTest& (0+255),w,b
 15428  003762  0100               	movlb	0	; () banked
 15429  003764  6F90               	movwf	(?_printf+2)& (0+255),b
 15430  003766  6B91               	clrf	(?_printf+3)& (0+255),b
 15431  003768  ECF2  F00A         	call	_printf	;wreg free
 15432  00376C                     l8072:
 15433  00376C  A281               	btfss	3969,1,c	;volatile
 15434  00376E  D791               	goto	l8030
 15435  003770  D7E5               	goto	l8068
 15436  003772                     __end_of_BlockerTest:
 15437                           	opt stack 0
 15438                           tblptru	equ	0xFF8
 15439                           tblptrh	equ	0xFF7
 15440                           tblptrl	equ	0xFF6
 15441                           tablat	equ	0xFF5
 15442                           prodh	equ	0xFF4
 15443                           prodl	equ	0xFF3
 15444                           intcon	equ	0xFF2
 15445                           intcon2	equ	0xFF1
 15446                           intcon3	equ	0xFF0
 15447                           postinc0	equ	0xFEE
 15448                           wreg	equ	0xFE8
 15449                           postdec1	equ	0xFE5
 15450                           fsr1l	equ	0xFE1
 15451                           indf2	equ	0xFDF
 15452                           postinc2	equ	0xFDE
 15453                           postdec2	equ	0xFDD
 15454                           fsr2h	equ	0xFDA
 15455                           fsr2l	equ	0xFD9
 15456                           status	equ	0xFD8
 15457                           
 15458 ;; *************** function _printf *****************
 15459 ;; Defined at:
 15460 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15463 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15464 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15465 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15466 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15467 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15468 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15469 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15470 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15471 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15472 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15473 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15474 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15475 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15476 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15477 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15478 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15479 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15480 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15481 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15482 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15483 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15484 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15485 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15486 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15487 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  tmpval          4    0        struct .
 15490 ;;  width           2   41[BANK0 ] int 
 15491 ;;  val             2   37[BANK0 ] unsigned int 
 15492 ;;  len             2   35[BANK0 ] unsigned int 
 15493 ;;  ap              2   33[BANK0 ] PTR void [1]
 15494 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15495 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15496 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15497 ;;  c               1   40[BANK0 ] char 
 15498 ;;  flag            1   39[BANK0 ] unsigned char 
 15499 ;;  prec            1   30[BANK0 ] char 
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  2   14[BANK0 ] int 
 15502 ;; Registers used:
 15503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15509 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15510 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15511 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15512 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15513 ;;Total ram usage:       29 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    9
 15516 ;; This function calls:
 15517 ;;		___lwdiv
 15518 ;;		___lwmod
 15519 ;;		___wmul
 15520 ;;		_isdigit
 15521 ;;		_putch
 15522 ;; This function is called by:
 15523 ;;		_UI
 15524 ;;		_change_state_to_menu_start
 15525 ;;		_change_state_to_menu_12
 15526 ;;		_change_state_to_menu_22
 15527 ;;		_printRTC
 15528 ;;		_EEPROM_write
 15529 ;;		_Test
 15530 ;;		_algorithmTest
 15531 ;;		_sensorTest
 15532 ;;		_actuatorTest
 15533 ;;		_BothServos
 15534 ;;		_PortTestA5
 15535 ;;		_PusherTest
 15536 ;;		_SpeedTest
 15537 ;;		_BlockerTest
 15538 ;;		_ToggleTestA5
 15539 ;; This function uses a non-reentrant model
 15540 ;;
 15541                           
 15542                           	psect	text51
 15543  0015E4                     __ptext51:
 15544                           	opt stack 0
 15545  0015E4                     _printf:
 15546                           	opt stack 18
 15547                           
 15548                           ;doprnt.c: 466: va_list ap;
 15549                           ;doprnt.c: 499: signed char c;
 15550                           ;doprnt.c: 501: int width;
 15551                           ;doprnt.c: 506: signed char prec;
 15552                           ;doprnt.c: 508: unsigned char flag;
 15553                           ;doprnt.c: 523: union {
 15554                           ;doprnt.c: 524: unsigned long vd;
 15555                           ;doprnt.c: 525: double integ;
 15556                           ;doprnt.c: 526: } tmpval;
 15557                           ;doprnt.c: 528: unsigned int val;
 15558                           ;doprnt.c: 529: unsigned len;
 15559                           ;doprnt.c: 530: const char * cp;
 15560                           ;doprnt.c: 533: *ap = __va_start();
 15561                           
 15562                           ;incstack = 0
 15563  0015E4  0E90               	movlw	low (?_printf+2)
 15564  0015E6  0100               	movlb	0	; () banked
 15565  0015E8  6FA1               	movwf	printf@ap& (0+255),b
 15566  0015EA  0E00               	movlw	high (?_printf+2)
 15567  0015EC  0100               	movlb	0	; () banked
 15568  0015EE  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15569                           
 15570                           ;doprnt.c: 536: while(c = *f++) {
 15571  0015F0  D205               	goto	l6064
 15572  0015F2                     l5934:
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;doprnt.c: 538: if(c != '%')
 15576  0015F2  0E25               	movlw	37
 15577  0015F4  0100               	movlb	0	; () banked
 15578  0015F6  19A8               	xorwf	printf@c& (0+255),w,b
 15579  0015F8  B4D8               	btfsc	status,2,c
 15580  0015FA  D005               	goto	l5938
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;doprnt.c: 540: {
 15584                           ;doprnt.c: 541: (putch(c) );
 15585  0015FC  0100               	movlb	0	; () banked
 15586  0015FE  51A8               	movf	printf@c& (0+255),w,b
 15587  001600  ECFA  F027         	call	_putch
 15588                           
 15589                           ;doprnt.c: 542: continue;
 15590  001604  D1FB               	goto	l6064
 15591  001606                     l5938:
 15592                           
 15593                           ;doprnt.c: 543: }
 15594                           ;doprnt.c: 546: width = 0;
 15595  001606  0E00               	movlw	0
 15596  001608  0100               	movlb	0	; () banked
 15597  00160A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15598  00160C  0E00               	movlw	0
 15599  00160E  6FA9               	movwf	printf@width& (0+255),b
 15600                           
 15601                           ;doprnt.c: 548: flag = 0;
 15602  001610  0E00               	movlw	0
 15603  001612  0100               	movlb	0	; () banked
 15604  001614  6FA7               	movwf	printf@flag& (0+255),b
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;doprnt.c: 551: switch(*f) {
 15608                           
 15609                           ;doprnt.c: 550: for(;;) {
 15610  001616  D005               	goto	l5944
 15611  001618                     l5940:
 15612                           
 15613                           ;doprnt.c: 580: flag |= 0x04;
 15614  001618  0100               	movlb	0	; () banked
 15615  00161A  85A7               	bsf	printf@flag& (0+255),2,b
 15616                           
 15617                           ;doprnt.c: 581: f++;
 15618  00161C  0100               	movlb	0	; () banked
 15619  00161E  4B8E               	infsnz	printf@f& (0+255),f,b
 15620  001620  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15621  001622                     l5944:
 15622  001622  C08E  FFF6         	movff	printf@f,tblptrl
 15623  001626  C08F  FFF7         	movff	printf@f+1,tblptrh
 15624  00162A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15625  00162A  6AF8               	clrf	tblptru,c
 15626  00162C                     	endif
 15627  00162C                     	if	0	;tblptru may be non-zero
 15628  00162C                     	endif
 15629  00162C  0008               	tblrd		*
 15630  00162E  50F5               	movf	tablat,w,c
 15631                           
 15632                           ; Switch size 1, requested type "space"
 15633                           ; Number of cases is 1, Range of values is 48 to 48
 15634                           ; switch strategies available:
 15635                           ; Name         Instructions Cycles
 15636                           ; simple_byte            4     3 (average)
 15637                           ;	Chosen strategy is simple_byte
 15638  001630  0A30               	xorlw	48	; case 48
 15639  001632  B4D8               	btfsc	status,2,c
 15640  001634  D7F1               	goto	l5940
 15641                           
 15642                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15643                           
 15644                           ;doprnt.c: 586: }
 15645                           
 15646                           ;doprnt.c: 585: break;
 15647  001636  C08E  FFF6         	movff	printf@f,tblptrl
 15648  00163A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15649  00163E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15650  00163E  6AF8               	clrf	tblptru,c
 15651  001640                     	endif
 15652  001640                     	if	0	;tblptru may be non-zero
 15653  001640                     	endif
 15654  001640  0008               	tblrd		*
 15655  001642  50F5               	movf	tablat,w,c
 15656  001644  EC1D  F027         	call	_isdigit
 15657  001648  A0D8               	btfss	status,0,c
 15658  00164A  D0D2               	goto	l5992
 15659                           
 15660                           ;doprnt.c: 598: width = 0;
 15661  00164C  0E00               	movlw	0
 15662  00164E  0100               	movlb	0	; () banked
 15663  001650  6FAA               	movwf	(printf@width+1)& (0+255),b
 15664  001652  0E00               	movlw	0
 15665  001654  6FA9               	movwf	printf@width& (0+255),b
 15666  001656                     l5950:
 15667                           
 15668                           ;doprnt.c: 600: width *= 10;
 15669  001656  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15670  00165A  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15671  00165E  0E00               	movlw	0
 15672  001660  0100               	movlb	0	; () banked
 15673  001662  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15674  001664  0E0A               	movlw	10
 15675  001666  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15676  001668  EC87  F025         	call	___wmul	;wreg free
 15677  00166C  C080  F0A9         	movff	?___wmul,printf@width
 15678  001670  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15679                           
 15680                           ;doprnt.c: 601: width += *f++ - '0';
 15681  001674  0ED0               	movlw	208
 15682  001676  0100               	movlb	0	; () banked
 15683  001678  6F9A               	movwf	??_printf& (0+255),b
 15684  00167A  0EFF               	movlw	255
 15685  00167C  0100               	movlb	0	; () banked
 15686  00167E  6F9B               	movwf	(??_printf+1)& (0+255),b
 15687  001680  C08E  FFF6         	movff	printf@f,tblptrl
 15688  001684  C08F  FFF7         	movff	printf@f+1,tblptrh
 15689  001688                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15690  001688  6AF8               	clrf	tblptru,c
 15691  00168A                     	endif
 15692  00168A                     	if	0	;tblptru may be non-zero
 15693  00168A                     	endif
 15694  00168A  0008               	tblrd		*
 15695  00168C  50F5               	movf	tablat,w,c
 15696  00168E  0100               	movlb	0	; () banked
 15697  001690  6F9C               	movwf	(??_printf+2)& (0+255),b
 15698  001692  6B9D               	clrf	(??_printf+3)& (0+255),b
 15699  001694  0100               	movlb	0	; () banked
 15700  001696  519A               	movf	??_printf& (0+255),w,b
 15701  001698  0100               	movlb	0	; () banked
 15702  00169A  279C               	addwf	(??_printf+2)& (0+255),f,b
 15703  00169C  0100               	movlb	0	; () banked
 15704  00169E  519B               	movf	(??_printf+1)& (0+255),w,b
 15705  0016A0  0100               	movlb	0	; () banked
 15706  0016A2  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15707  0016A4  0100               	movlb	0	; () banked
 15708  0016A6  519C               	movf	(??_printf+2)& (0+255),w,b
 15709  0016A8  0100               	movlb	0	; () banked
 15710  0016AA  27A9               	addwf	printf@width& (0+255),f,b
 15711  0016AC  0100               	movlb	0	; () banked
 15712  0016AE  519D               	movf	(??_printf+3)& (0+255),w,b
 15713  0016B0  0100               	movlb	0	; () banked
 15714  0016B2  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15715                           
 15716                           ; BSR set to: 0
 15717  0016B4  0100               	movlb	0	; () banked
 15718  0016B6  4B8E               	infsnz	printf@f& (0+255),f,b
 15719  0016B8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15723  0016BA  C08E  FFF6         	movff	printf@f,tblptrl
 15724  0016BE  C08F  FFF7         	movff	printf@f+1,tblptrh
 15725  0016C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15726  0016C2  6AF8               	clrf	tblptru,c
 15727  0016C4                     	endif
 15728  0016C4                     	if	0	;tblptru may be non-zero
 15729  0016C4                     	endif
 15730  0016C4  0008               	tblrd		*
 15731  0016C6  50F5               	movf	tablat,w,c
 15732  0016C8  EC1D  F027         	call	_isdigit
 15733  0016CC  A0D8               	btfss	status,0,c
 15734  0016CE  D090               	goto	l5992
 15735  0016D0  D7C2               	goto	l5950
 15736  0016D2                     l5958:
 15737                           
 15738                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15739  0016D2  C0A1  FFD9         	movff	printf@ap,fsr2l
 15740  0016D6  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15741  0016DA  CFDE F09F          	movff	postinc2,printf@cp
 15742  0016DE  CFDD F0A0          	movff	postdec2,printf@cp+1
 15743  0016E2  0E02               	movlw	2
 15744  0016E4  0100               	movlb	0	; () banked
 15745  0016E6  27A1               	addwf	printf@ap& (0+255),f,b
 15746  0016E8  0E00               	movlw	0
 15747  0016EA  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;doprnt.c: 740: if(!cp)
 15751  0016EC  0100               	movlb	0	; () banked
 15752  0016EE  519F               	movf	printf@cp& (0+255),w,b
 15753  0016F0  0100               	movlb	0	; () banked
 15754  0016F2  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15755  0016F4  A4D8               	btfss	status,2,c
 15756  0016F6  D006               	goto	l5966
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;doprnt.c: 741: cp = "(null)";
 15760  0016F8  0EB6               	movlw	low STR_126
 15761  0016FA  0100               	movlb	0	; () banked
 15762  0016FC  6F9F               	movwf	printf@cp& (0+255),b
 15763  0016FE  0EFF               	movlw	high STR_126
 15764  001700  0100               	movlb	0	; () banked
 15765  001702  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15766  001704                     l5966:
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;doprnt.c: 745: len = 0;
 15770  001704  0E00               	movlw	0
 15771  001706  0100               	movlb	0	; () banked
 15772  001708  6FA4               	movwf	(printf@len+1)& (0+255),b
 15773  00170A  0E00               	movlw	0
 15774  00170C  6FA3               	movwf	printf@len& (0+255),b
 15775                           
 15776                           ;doprnt.c: 746: while(cp[len])
 15777  00170E  D003               	goto	l5970
 15778  001710                     l5968:
 15779                           
 15780                           ;doprnt.c: 747: len++;
 15781  001710  0100               	movlb	0	; () banked
 15782  001712  4BA3               	infsnz	printf@len& (0+255),f,b
 15783  001714  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15784  001716                     l5970:
 15785                           
 15786                           ; BSR set to: 0
 15787  001716  0100               	movlb	0	; () banked
 15788  001718  51A3               	movf	printf@len& (0+255),w,b
 15789  00171A  0100               	movlb	0	; () banked
 15790  00171C  259F               	addwf	printf@cp& (0+255),w,b
 15791  00171E  0100               	movlb	0	; () banked
 15792  001720  6F9A               	movwf	??_printf& (0+255),b
 15793  001722  0100               	movlb	0	; () banked
 15794  001724  51A4               	movf	(printf@len+1)& (0+255),w,b
 15795  001726  0100               	movlb	0	; () banked
 15796  001728  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15797  00172A  0100               	movlb	0	; () banked
 15798  00172C  6F9B               	movwf	(??_printf+1)& (0+255),b
 15799  00172E  C09A  FFF6         	movff	??_printf,tblptrl
 15800  001732  C09B  FFF7         	movff	??_printf+1,tblptrh
 15801  001736  0E00               	movlw	low (__mediumconst shr (0+16))
 15802  001738  6EF8               	movwf	tblptru,c
 15803  00173A  0E0F               	movlw	(high __ramtop+-1)
 15804  00173C  64F7               	cpfsgt	tblptrh,c
 15805  00173E  D003               	bra	u4447
 15806  001740  0008               	tblrd		*
 15807  001742  50F5               	movf	tablat,w,c
 15808  001744  D005               	bra	u4440
 15809  001746                     u4447:
 15810  001746  CFF6 FFE9          	movff	tblptrl,fsr0l
 15811  00174A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15812  00174E  50EF               	movf	indf0,w,c
 15813  001750                     u4440:
 15814  001750  0900               	iorlw	0
 15815  001752  A4D8               	btfss	status,2,c
 15816  001754  D7DD               	goto	l5968
 15817                           
 15818                           ;doprnt.c: 757: if(width > len)
 15819  001756  0100               	movlb	0	; () banked
 15820  001758  51A9               	movf	printf@width& (0+255),w,b
 15821  00175A  0100               	movlb	0	; () banked
 15822  00175C  5DA3               	subwf	printf@len& (0+255),w,b
 15823  00175E  0100               	movlb	0	; () banked
 15824  001760  51AA               	movf	(printf@width+1)& (0+255),w,b
 15825  001762  0100               	movlb	0	; () banked
 15826  001764  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15827  001766  B0D8               	btfsc	status,0,c
 15828  001768  D009               	goto	l5976
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;doprnt.c: 758: width -= len;
 15832  00176A  0100               	movlb	0	; () banked
 15833  00176C  51A3               	movf	printf@len& (0+255),w,b
 15834  00176E  0100               	movlb	0	; () banked
 15835  001770  5FA9               	subwf	printf@width& (0+255),f,b
 15836  001772  0100               	movlb	0	; () banked
 15837  001774  51A4               	movf	(printf@len+1)& (0+255),w,b
 15838  001776  0100               	movlb	0	; () banked
 15839  001778  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15840  00177A  D009               	goto	l5980
 15841  00177C                     l5976:
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;doprnt.c: 759: else
 15845                           ;doprnt.c: 760: width = 0;
 15846  00177C  0E00               	movlw	0
 15847  00177E  0100               	movlb	0	; () banked
 15848  001780  6FAA               	movwf	(printf@width+1)& (0+255),b
 15849  001782  0E00               	movlw	0
 15850  001784  6FA9               	movwf	printf@width& (0+255),b
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;doprnt.c: 764: while(width--)
 15854  001786  D003               	goto	l5980
 15855  001788                     l5978:
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;doprnt.c: 765: (putch(' ') );
 15859  001788  0E20               	movlw	32
 15860  00178A  ECFA  F027         	call	_putch
 15861  00178E                     l5980:
 15862  00178E  0100               	movlb	0	; () banked
 15863  001790  07A9               	decf	printf@width& (0+255),f,b
 15864  001792  A0D8               	btfss	status,0,c
 15865  001794  07AA               	decf	(printf@width+1)& (0+255),f,b
 15866  001796  0100               	movlb	0	; () banked
 15867  001798  29A9               	incf	printf@width& (0+255),w,b
 15868  00179A  E1F6               	bnz	l5978
 15869  00179C  0100               	movlb	0	; () banked
 15870  00179E  29AA               	incf	(printf@width+1)& (0+255),w,b
 15871  0017A0  B4D8               	btfsc	status,2,c
 15872  0017A2  D017               	goto	l5986
 15873  0017A4  D7F1               	goto	l5978
 15874  0017A6                     l5982:
 15875                           
 15876                           ; BSR set to: 0
 15877                           ;doprnt.c: 768: (putch(*cp++) );
 15878  0017A6  C09F  FFF6         	movff	printf@cp,tblptrl
 15879  0017AA  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15880  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 15881  0017B0  6EF8               	movwf	tblptru,c
 15882  0017B2  0E0F               	movlw	(high __ramtop+-1)
 15883  0017B4  64F7               	cpfsgt	tblptrh,c
 15884  0017B6  D003               	bra	u4487
 15885  0017B8  0008               	tblrd		*
 15886  0017BA  50F5               	movf	tablat,w,c
 15887  0017BC  D005               	bra	u4480
 15888  0017BE                     u4487:
 15889  0017BE  CFF6 FFE9          	movff	tblptrl,fsr0l
 15890  0017C2  CFF7 FFEA          	movff	tblptrh,fsr0h
 15891  0017C6  50EF               	movf	indf0,w,c
 15892  0017C8                     u4480:
 15893  0017C8  ECFA  F027         	call	_putch
 15894  0017CC  0100               	movlb	0	; () banked
 15895  0017CE  4B9F               	infsnz	printf@cp& (0+255),f,b
 15896  0017D0  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15897  0017D2                     l5986:
 15898                           
 15899                           ; BSR set to: 0
 15900  0017D2  0100               	movlb	0	; () banked
 15901  0017D4  07A3               	decf	printf@len& (0+255),f,b
 15902  0017D6  A0D8               	btfss	status,0,c
 15903  0017D8  07A4               	decf	(printf@len+1)& (0+255),f,b
 15904  0017DA  0100               	movlb	0	; () banked
 15905  0017DC  29A3               	incf	printf@len& (0+255),w,b
 15906  0017DE  E1E3               	bnz	l5982
 15907  0017E0  0100               	movlb	0	; () banked
 15908  0017E2  29A4               	incf	(printf@len+1)& (0+255),w,b
 15909  0017E4  B4D8               	btfsc	status,2,c
 15910  0017E6  D10A               	goto	l6064
 15911  0017E8  D7DE               	goto	l5982
 15912  0017EA                     l5988:
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;doprnt.c: 818: flag |= 0x40;
 15916  0017EA  0100               	movlb	0	; () banked
 15917  0017EC  8DA7               	bsf	printf@flag& (0+255),6,b
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;doprnt.c: 822: }
 15921                           
 15922                           ;doprnt.c: 819: break;
 15923  0017EE  D01D               	goto	l1366
 15924  0017F0                     l5992:
 15925  0017F0  C08E  FFF6         	movff	printf@f,tblptrl
 15926  0017F4  C08F  FFF7         	movff	printf@f+1,tblptrh
 15927  0017F8  0100               	movlb	0	; () banked
 15928  0017FA  4B8E               	infsnz	printf@f& (0+255),f,b
 15929  0017FC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15930  0017FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15931  0017FE  6AF8               	clrf	tblptru,c
 15932  001800                     	endif
 15933  001800                     	if	0	;tblptru may be non-zero
 15934  001800                     	endif
 15935  001800  0008               	tblrd		*
 15936  001802  CFF5 F0A8          	movff	tablat,printf@c
 15937  001806  0100               	movlb	0	; () banked
 15938  001808  51A8               	movf	printf@c& (0+255),w,b
 15939                           
 15940                           ; Switch size 1, requested type "space"
 15941                           ; Number of cases is 5, Range of values is 0 to 117
 15942                           ; switch strategies available:
 15943                           ; Name         Instructions Cycles
 15944                           ; simple_byte           16     9 (average)
 15945                           ;	Chosen strategy is simple_byte
 15946  00180A  0A00               	xorlw	0	; case 0
 15947  00180C  B4D8               	btfsc	status,2,c
 15948  00180E  0012               	return	
 15949  001810  0A64               	xorlw	100	; case 100
 15950  001812  B4D8               	btfsc	status,2,c
 15951  001814  D00A               	goto	l1366
 15952  001816  0A0D               	xorlw	13	; case 105
 15953  001818  B4D8               	btfsc	status,2,c
 15954  00181A  D007               	goto	l1366
 15955  00181C  0A1A               	xorlw	26	; case 115
 15956  00181E  B4D8               	btfsc	status,2,c
 15957  001820  D758               	goto	l5958
 15958  001822  0A06               	xorlw	6	; case 117
 15959  001824  B4D8               	btfsc	status,2,c
 15960  001826  D7E1               	goto	l5988
 15961  001828  D0E9               	goto	l6064
 15962  00182A                     l1366:
 15963                           
 15964                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15965  00182A  0100               	movlb	0	; () banked
 15966  00182C  BDA7               	btfsc	printf@flag& (0+255),6,b
 15967  00182E  D019               	goto	l6004
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;doprnt.c: 1253: {
 15971                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15972  001830  C0A1  FFD9         	movff	printf@ap,fsr2l
 15973  001834  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15974  001838  CFDE F0A5          	movff	postinc2,printf@val
 15975  00183C  CFDD F0A6          	movff	postdec2,printf@val+1
 15976                           
 15977                           ; BSR set to: 0
 15978  001840  0E02               	movlw	2
 15979  001842  0100               	movlb	0	; () banked
 15980  001844  27A1               	addwf	printf@ap& (0+255),f,b
 15981  001846  0E00               	movlw	0
 15982  001848  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;doprnt.c: 1261: if((int)val < 0) {
 15986  00184A  0100               	movlb	0	; () banked
 15987  00184C  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15988  00184E  D016               	goto	l6008
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;doprnt.c: 1262: flag |= 0x03;
 15992  001850  0E03               	movlw	3
 15993  001852  0100               	movlb	0	; () banked
 15994  001854  13A7               	iorwf	printf@flag& (0+255),f,b
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;doprnt.c: 1263: val = -val;
 15998  001856  0100               	movlb	0	; () banked
 15999  001858  6DA5               	negf	printf@val& (0+255),b
 16000  00185A  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16001  00185C  B0D8               	btfsc	status,0,c
 16002  00185E  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16003                           
 16004                           ; BSR set to: 0
 16005                           ;doprnt.c: 1264: }
 16006                           ;doprnt.c: 1266: }
 16007  001860  D00D               	goto	l6008
 16008  001862                     l6004:
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;doprnt.c: 1268: else
 16012                           ;doprnt.c: 1273: {
 16013                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16014  001862  C0A1  FFD9         	movff	printf@ap,fsr2l
 16015  001866  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16016  00186A  CFDE F0A5          	movff	postinc2,printf@val
 16017  00186E  CFDD F0A6          	movff	postdec2,printf@val+1
 16018                           
 16019                           ; BSR set to: 0
 16020  001872  0E02               	movlw	2
 16021  001874  0100               	movlb	0	; () banked
 16022  001876  27A1               	addwf	printf@ap& (0+255),f,b
 16023  001878  0E00               	movlw	0
 16024  00187A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16025  00187C                     l6008:
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;doprnt.c: 1287: }
 16029                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16030  00187C  0E01               	movlw	1
 16031  00187E  0100               	movlb	0	; () banked
 16032  001880  6FA8               	movwf	printf@c& (0+255),b
 16033  001882                     l6010:
 16034                           
 16035                           ; BSR set to: 0
 16036  001882  0E05               	movlw	5
 16037  001884  0100               	movlb	0	; () banked
 16038  001886  19A8               	xorwf	printf@c& (0+255),w,b
 16039  001888  B4D8               	btfsc	status,2,c
 16040  00188A  D019               	goto	l6022
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;doprnt.c: 1306: if(val < dpowers[c])
 16044                           
 16045                           ; BSR set to: 0
 16046                           
 16047                           ; BSR set to: 0
 16048  00188C  0100               	movlb	0	; () banked
 16049  00188E  51A8               	movf	printf@c& (0+255),w,b
 16050  001890  0D02               	mullw	2
 16051  001892  0E00               	movlw	low _dpowers
 16052  001894  24F3               	addwf	prodl,w,c
 16053  001896  6EF6               	movwf	tblptrl,c
 16054  001898  0EFB               	movlw	high _dpowers
 16055  00189A  20F4               	addwfc	prodh,w,c
 16056  00189C  6EF7               	movwf	tblptrh,c
 16057  00189E                     	if	1	;There are 3 active tblptr bytes
 16058  00189E  6AF8               	clrf	tblptru,c
 16059  0018A0  0E00               	movlw	low (__mediumconst shr (0+16))
 16060  0018A2  22F8               	addwfc	tblptru,f,c
 16061  0018A4                     	endif
 16062  0018A4  0009               	tblrd		*+
 16063  0018A6  50F5               	movf	tablat,w,c
 16064  0018A8  0100               	movlb	0	; () banked
 16065  0018AA  5DA5               	subwf	printf@val& (0+255),w,b
 16066  0018AC  0009               	tblrd		*+
 16067  0018AE  50F5               	movf	tablat,w,c
 16068  0018B0  0100               	movlb	0	; () banked
 16069  0018B2  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16070  0018B4  A0D8               	btfss	status,0,c
 16071  0018B6  D003               	goto	l6022
 16072                           
 16073                           ; BSR set to: 0
 16074                           
 16075                           ; BSR set to: 0
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;doprnt.c: 1307: break;
 16079  0018B8  0100               	movlb	0	; () banked
 16080  0018BA  2BA8               	incf	printf@c& (0+255),f,b
 16081  0018BC  D7E2               	goto	l6010
 16082  0018BE                     l6022:
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16086  0018BE  0100               	movlb	0	; () banked
 16087  0018C0  51A9               	movf	printf@width& (0+255),w,b
 16088  0018C2  0100               	movlb	0	; () banked
 16089  0018C4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16090  0018C6  B4D8               	btfsc	status,2,c
 16091  0018C8  D00B               	goto	l6028
 16092                           
 16093                           ; BSR set to: 0
 16094  0018CA  C0A7  F09A         	movff	printf@flag,??_printf
 16095  0018CE  0E03               	movlw	3
 16096  0018D0  0100               	movlb	0	; () banked
 16097  0018D2  179A               	andwf	??_printf& (0+255),f,b
 16098  0018D4  B4D8               	btfsc	status,2,c
 16099  0018D6  D004               	goto	l6028
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;doprnt.c: 1346: width--;
 16103  0018D8  0100               	movlb	0	; () banked
 16104  0018DA  07A9               	decf	printf@width& (0+255),f,b
 16105  0018DC  A0D8               	btfss	status,0,c
 16106  0018DE  07AA               	decf	(printf@width+1)& (0+255),f,b
 16107  0018E0                     l6028:
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;doprnt.c: 1381: if(width > c)
 16111  0018E0  0E80               	movlw	128
 16112  0018E2  0100               	movlb	0	; () banked
 16113  0018E4  BFA8               	btfsc	printf@c& (0+255),7,b
 16114  0018E6  0E7F               	movlw	127
 16115  0018E8  0100               	movlb	0	; () banked
 16116  0018EA  6F9A               	movwf	??_printf& (0+255),b
 16117  0018EC  0100               	movlb	0	; () banked
 16118  0018EE  51A9               	movf	printf@width& (0+255),w,b
 16119  0018F0  0100               	movlb	0	; () banked
 16120  0018F2  5DA8               	subwf	printf@c& (0+255),w,b
 16121  0018F4  0100               	movlb	0	; () banked
 16122  0018F6  51AA               	movf	(printf@width+1)& (0+255),w,b
 16123  0018F8  0A80               	xorlw	128
 16124  0018FA  0100               	movlb	0	; () banked
 16125  0018FC  599A               	subwfb	??_printf& (0+255),w,b
 16126  0018FE  B0D8               	btfsc	status,0,c
 16127  001900  D00B               	goto	l6032
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;doprnt.c: 1382: width -= c;
 16131  001902  0100               	movlb	0	; () banked
 16132  001904  51A8               	movf	printf@c& (0+255),w,b
 16133  001906  0100               	movlb	0	; () banked
 16134  001908  5FA9               	subwf	printf@width& (0+255),f,b
 16135  00190A  0E00               	movlw	0
 16136  00190C  0100               	movlb	0	; () banked
 16137  00190E  BFA8               	btfsc	printf@c& (0+255),7,b
 16138  001910  0EFF               	movlw	255
 16139  001912  0100               	movlb	0	; () banked
 16140  001914  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16141  001916  D005               	goto	l6034
 16142  001918                     l6032:
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;doprnt.c: 1383: else
 16146                           ;doprnt.c: 1384: width = 0;
 16147  001918  0E00               	movlw	0
 16148  00191A  0100               	movlb	0	; () banked
 16149  00191C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16150  00191E  0E00               	movlw	0
 16151  001920  6FA9               	movwf	printf@width& (0+255),b
 16152  001922                     l6034:
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;doprnt.c: 1387: if(flag & 0x04) {
 16156  001922  0100               	movlb	0	; () banked
 16157  001924  A5A7               	btfss	printf@flag& (0+255),2,b
 16158  001926  D018               	goto	l6046
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;doprnt.c: 1392: if(flag & 0x03)
 16162  001928  C0A7  F09A         	movff	printf@flag,??_printf
 16163  00192C  0E03               	movlw	3
 16164  00192E  0100               	movlb	0	; () banked
 16165  001930  179A               	andwf	??_printf& (0+255),f,b
 16166  001932  B4D8               	btfsc	status,2,c
 16167  001934  D003               	goto	l6040
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;doprnt.c: 1393: (putch('-') );
 16171  001936  0E2D               	movlw	45
 16172  001938  ECFA  F027         	call	_putch
 16173  00193C                     l6040:
 16174                           
 16175                           ;doprnt.c: 1415: if(width)
 16176  00193C  0100               	movlb	0	; () banked
 16177  00193E  51A9               	movf	printf@width& (0+255),w,b
 16178  001940  0100               	movlb	0	; () banked
 16179  001942  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16180  001944  B4D8               	btfsc	status,2,c
 16181  001946  D025               	goto	l6056
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;doprnt.c: 1417: (putch('0') );
 16185                           
 16186                           ; BSR set to: 0
 16187                           
 16188                           ;doprnt.c: 1416: do
 16189  001948  0E30               	movlw	48
 16190  00194A  ECFA  F027         	call	_putch
 16191                           
 16192                           ;doprnt.c: 1418: while(--width);
 16193  00194E  0100               	movlb	0	; () banked
 16194  001950  07A9               	decf	printf@width& (0+255),f,b
 16195  001952  A0D8               	btfss	status,0,c
 16196  001954  07AA               	decf	(printf@width+1)& (0+255),f,b
 16197  001956  D7F2               	goto	l6040
 16198  001958                     l6046:
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;doprnt.c: 1422: {
 16202                           ;doprnt.c: 1424: if(width
 16203                           ;doprnt.c: 1428: )
 16204  001958  0100               	movlb	0	; () banked
 16205  00195A  51A9               	movf	printf@width& (0+255),w,b
 16206  00195C  0100               	movlb	0	; () banked
 16207  00195E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16208  001960  B4D8               	btfsc	status,2,c
 16209  001962  D00D               	goto	l6052
 16210  001964                     l6048:
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;doprnt.c: 1430: (putch(' ') );
 16214  001964  0E20               	movlw	32
 16215  001966  ECFA  F027         	call	_putch
 16216                           
 16217                           ;doprnt.c: 1431: while(--width);
 16218  00196A  0100               	movlb	0	; () banked
 16219  00196C  07A9               	decf	printf@width& (0+255),f,b
 16220  00196E  A0D8               	btfss	status,0,c
 16221  001970  07AA               	decf	(printf@width+1)& (0+255),f,b
 16222  001972  0100               	movlb	0	; () banked
 16223  001974  51A9               	movf	printf@width& (0+255),w,b
 16224  001976  0100               	movlb	0	; () banked
 16225  001978  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16226  00197A  A4D8               	btfss	status,2,c
 16227  00197C  D7F3               	goto	l6048
 16228  00197E                     l6052:
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;doprnt.c: 1438: if(flag & 0x03)
 16232  00197E  C0A7  F09A         	movff	printf@flag,??_printf
 16233  001982  0E03               	movlw	3
 16234  001984  0100               	movlb	0	; () banked
 16235  001986  179A               	andwf	??_printf& (0+255),f,b
 16236  001988  B4D8               	btfsc	status,2,c
 16237  00198A  D003               	goto	l6056
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;doprnt.c: 1439: (putch('-') );
 16241  00198C  0E2D               	movlw	45
 16242  00198E  ECFA  F027         	call	_putch
 16243  001992                     l6056:
 16244                           
 16245                           ;doprnt.c: 1469: }
 16246                           ;doprnt.c: 1472: prec = c;
 16247  001992  C0A8  F09E         	movff	printf@c,printf@prec
 16248                           
 16249                           ;doprnt.c: 1474: while(prec--) {
 16250  001996  D02C               	goto	l6062
 16251  001998                     l6058:
 16252                           
 16253                           ;doprnt.c: 1478: {
 16254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16255  001998  0100               	movlb	0	; () banked
 16256  00199A  519E               	movf	printf@prec& (0+255),w,b
 16257  00199C  0D02               	mullw	2
 16258  00199E  0E00               	movlw	low _dpowers
 16259  0019A0  24F3               	addwf	prodl,w,c
 16260  0019A2  6EF6               	movwf	tblptrl,c
 16261  0019A4  0EFB               	movlw	high _dpowers
 16262  0019A6  20F4               	addwfc	prodh,w,c
 16263  0019A8  6EF7               	movwf	tblptrh,c
 16264  0019AA                     	if	1	;There are 3 active tblptr bytes
 16265  0019AA  6AF8               	clrf	tblptru,c
 16266  0019AC  0E00               	movlw	low (__mediumconst shr (0+16))
 16267  0019AE  22F8               	addwfc	tblptru,f,c
 16268  0019B0                     	endif
 16269  0019B0  0009               	tblrd		*+
 16270  0019B2  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16271  0019B6  000A               	tblrd		*-
 16272  0019B8  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16273  0019BC  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16274  0019C0  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16275  0019C4  EC22  F022         	call	___lwdiv	;wreg free
 16276  0019C8  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16277  0019CC  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16278  0019D0  0E00               	movlw	0
 16279  0019D2  0100               	movlb	0	; () banked
 16280  0019D4  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16281  0019D6  0E0A               	movlw	10
 16282  0019D8  6F89               	movwf	___lwmod@divisor& (0+255),b
 16283  0019DA  EC3F  F023         	call	___lwmod	;wreg free
 16284  0019DE  0100               	movlb	0	; () banked
 16285  0019E0  5187               	movf	?___lwmod& (0+255),w,b
 16286  0019E2  0F30               	addlw	48
 16287  0019E4  0100               	movlb	0	; () banked
 16288  0019E6  6FA8               	movwf	printf@c& (0+255),b
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;doprnt.c: 1523: }
 16292                           ;doprnt.c: 1524: (putch(c) );
 16293  0019E8  0100               	movlb	0	; () banked
 16294  0019EA  51A8               	movf	printf@c& (0+255),w,b
 16295  0019EC  ECFA  F027         	call	_putch
 16296  0019F0                     l6062:
 16297  0019F0  0100               	movlb	0	; () banked
 16298  0019F2  079E               	decf	printf@prec& (0+255),f,b
 16299  0019F4  0100               	movlb	0	; () banked
 16300  0019F6  299E               	incf	printf@prec& (0+255),w,b
 16301  0019F8  A4D8               	btfss	status,2,c
 16302  0019FA  D7CE               	goto	l6058
 16303  0019FC                     l6064:
 16304  0019FC  C08E  FFF6         	movff	printf@f,tblptrl
 16305  001A00  C08F  FFF7         	movff	printf@f+1,tblptrh
 16306  001A04  0100               	movlb	0	; () banked
 16307  001A06  4B8E               	infsnz	printf@f& (0+255),f,b
 16308  001A08  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16309  001A0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16310  001A0A  6AF8               	clrf	tblptru,c
 16311  001A0C                     	endif
 16312  001A0C                     	if	0	;tblptru may be non-zero
 16313  001A0C                     	endif
 16314  001A0C  0008               	tblrd		*
 16315  001A0E  CFF5 F0A8          	movff	tablat,printf@c
 16316  001A12  0100               	movlb	0	; () banked
 16317  001A14  51A8               	movf	printf@c& (0+255),w,b
 16318  001A16  B4D8               	btfsc	status,2,c
 16319  001A18  0012               	return	
 16320  001A1A  D5EB               	goto	l5934
 16321  001A1C                     __end_of_printf:
 16322                           	opt stack 0
 16323                           tblptru	equ	0xFF8
 16324                           tblptrh	equ	0xFF7
 16325                           tblptrl	equ	0xFF6
 16326                           tablat	equ	0xFF5
 16327                           prodh	equ	0xFF4
 16328                           prodl	equ	0xFF3
 16329                           intcon	equ	0xFF2
 16330                           intcon2	equ	0xFF1
 16331                           intcon3	equ	0xFF0
 16332                           indf0	equ	0xFEF
 16333                           postinc0	equ	0xFEE
 16334                           fsr0h	equ	0xFEA
 16335                           fsr0l	equ	0xFE9
 16336                           wreg	equ	0xFE8
 16337                           postdec1	equ	0xFE5
 16338                           fsr1l	equ	0xFE1
 16339                           indf2	equ	0xFDF
 16340                           postinc2	equ	0xFDE
 16341                           postdec2	equ	0xFDD
 16342                           fsr2h	equ	0xFDA
 16343                           fsr2l	equ	0xFD9
 16344                           status	equ	0xFD8
 16345                           
 16346 ;; *************** function _putch *****************
 16347 ;; Defined at:
 16348 ;;		line 20 in file "lcd.c"
 16349 ;; Parameters:    Size  Location     Type
 16350 ;;  data            1    wreg     unsigned char 
 16351 ;; Auto vars:     Size  Location     Type
 16352 ;;  data            1    2[BANK0 ] unsigned char 
 16353 ;; Return value:  Size  Location     Type
 16354 ;;                  1    wreg      void 
 16355 ;; Registers used:
 16356 ;;		wreg, status,2, status,0, cstack
 16357 ;; Tracked objects:
 16358 ;;		On entry : 0/0
 16359 ;;		On exit  : 0/0
 16360 ;;		Unchanged: 0/0
 16361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16366 ;;Total ram usage:        1 bytes
 16367 ;; Hardware stack levels used:    1
 16368 ;; Hardware stack levels required when called:    8
 16369 ;; This function calls:
 16370 ;;		_lcdNibble
 16371 ;; This function is called by:
 16372 ;;		_printf
 16373 ;; This function uses a non-reentrant model
 16374 ;;
 16375                           
 16376                           	psect	text52
 16377  004FF4                     __ptext52:
 16378                           	opt stack 0
 16379  004FF4                     _putch:
 16380                           	opt stack 18
 16381                           
 16382                           ;incstack = 0
 16383                           ;putch@data stored from wreg
 16384  004FF4  0100               	movlb	0	; () banked
 16385  004FF6  6F82               	movwf	putch@data& (0+255),b
 16386                           
 16387                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16388  004FF8  848C               	bsf	3980,2,c	;volatile
 16389                           
 16390                           ;lcd.c: 22: lcdNibble(data);
 16391  004FFA  0100               	movlb	0	; () banked
 16392  004FFC  5182               	movf	putch@data& (0+255),w,b
 16393  004FFE  EC0B  F023         	call	_lcdNibble
 16394  005002  0012               	return		;funcret
 16395  005004                     __end_of_putch:
 16396                           	opt stack 0
 16397                           tblptru	equ	0xFF8
 16398                           tblptrh	equ	0xFF7
 16399                           tblptrl	equ	0xFF6
 16400                           tablat	equ	0xFF5
 16401                           prodh	equ	0xFF4
 16402                           prodl	equ	0xFF3
 16403                           intcon	equ	0xFF2
 16404                           intcon2	equ	0xFF1
 16405                           intcon3	equ	0xFF0
 16406                           indf0	equ	0xFEF
 16407                           postinc0	equ	0xFEE
 16408                           fsr0h	equ	0xFEA
 16409                           fsr0l	equ	0xFE9
 16410                           wreg	equ	0xFE8
 16411                           postdec1	equ	0xFE5
 16412                           fsr1l	equ	0xFE1
 16413                           indf2	equ	0xFDF
 16414                           postinc2	equ	0xFDE
 16415                           postdec2	equ	0xFDD
 16416                           fsr2h	equ	0xFDA
 16417                           fsr2l	equ	0xFD9
 16418                           status	equ	0xFD8
 16419                           
 16420 ;; *************** function _isdigit *****************
 16421 ;; Defined at:
 16422 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16423 ;; Parameters:    Size  Location     Type
 16424 ;;  c               1    wreg     unsigned char 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  c               1    2[BANK0 ] unsigned char 
 16427 ;; Return value:  Size  Location     Type
 16428 ;;		None               void
 16429 ;; Registers used:
 16430 ;;		wreg, status,2, status,0
 16431 ;; Tracked objects:
 16432 ;;		On entry : 0/0
 16433 ;;		On exit  : 0/0
 16434 ;;		Unchanged: 0/0
 16435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16437 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16439 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16440 ;;Total ram usage:        3 bytes
 16441 ;; Hardware stack levels used:    1
 16442 ;; Hardware stack levels required when called:    7
 16443 ;; This function calls:
 16444 ;;		Nothing
 16445 ;; This function is called by:
 16446 ;;		_printf
 16447 ;; This function uses a non-reentrant model
 16448 ;;
 16449                           
 16450                           	psect	text53
 16451  004E3A                     __ptext53:
 16452                           	opt stack 0
 16453  004E3A                     _isdigit:
 16454                           	opt stack 19
 16455                           
 16456                           ;incstack = 0
 16457                           ;isdigit@c stored from wreg
 16458  004E3A  0100               	movlb	0	; () banked
 16459  004E3C  6F82               	movwf	isdigit@c& (0+255),b
 16460  004E3E  0E00               	movlw	0
 16461  004E40  0100               	movlb	0	; () banked
 16462  004E42  6F81               	movwf	_isdigit$1977& (0+255),b
 16463                           
 16464                           ; BSR set to: 0
 16465  004E44  0E3A               	movlw	58
 16466  004E46  0100               	movlb	0	; () banked
 16467  004E48  6182               	cpfslt	isdigit@c& (0+255),b
 16468  004E4A  D007               	goto	l5782
 16469                           
 16470                           ; BSR set to: 0
 16471  004E4C  0E2F               	movlw	47
 16472  004E4E  0100               	movlb	0	; () banked
 16473  004E50  6582               	cpfsgt	isdigit@c& (0+255),b
 16474  004E52  D003               	goto	l5782
 16475                           
 16476                           ; BSR set to: 0
 16477  004E54  0E01               	movlw	1
 16478  004E56  0100               	movlb	0	; () banked
 16479  004E58  6F81               	movwf	_isdigit$1977& (0+255),b
 16480  004E5A                     l5782:
 16481                           
 16482                           ; BSR set to: 0
 16483  004E5A  C081  F080         	movff	_isdigit$1977,??_isdigit
 16484  004E5E  0100               	movlb	0	; () banked
 16485  004E60  3180               	rrcf	??_isdigit& (0+255),w,b
 16486  004E62  0012               	return	
 16487  004E64                     __end_of_isdigit:
 16488                           	opt stack 0
 16489                           tblptru	equ	0xFF8
 16490                           tblptrh	equ	0xFF7
 16491                           tblptrl	equ	0xFF6
 16492                           tablat	equ	0xFF5
 16493                           prodh	equ	0xFF4
 16494                           prodl	equ	0xFF3
 16495                           intcon	equ	0xFF2
 16496                           intcon2	equ	0xFF1
 16497                           intcon3	equ	0xFF0
 16498                           indf0	equ	0xFEF
 16499                           postinc0	equ	0xFEE
 16500                           fsr0h	equ	0xFEA
 16501                           fsr0l	equ	0xFE9
 16502                           wreg	equ	0xFE8
 16503                           postdec1	equ	0xFE5
 16504                           fsr1l	equ	0xFE1
 16505                           indf2	equ	0xFDF
 16506                           postinc2	equ	0xFDE
 16507                           postdec2	equ	0xFDD
 16508                           fsr2h	equ	0xFDA
 16509                           fsr2l	equ	0xFD9
 16510                           status	equ	0xFD8
 16511                           
 16512 ;; *************** function ___wmul *****************
 16513 ;; Defined at:
 16514 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16517 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16518 ;; Auto vars:     Size  Location     Type
 16519 ;;  product         2    4[BANK0 ] unsigned int 
 16520 ;; Return value:  Size  Location     Type
 16521 ;;                  2    0[BANK0 ] unsigned int 
 16522 ;; Registers used:
 16523 ;;		wreg, status,2, status,0, prodl, prodh
 16524 ;; Tracked objects:
 16525 ;;		On entry : 0/0
 16526 ;;		On exit  : 0/0
 16527 ;;		Unchanged: 0/0
 16528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;Total ram usage:        6 bytes
 16534 ;; Hardware stack levels used:    1
 16535 ;; Hardware stack levels required when called:    7
 16536 ;; This function calls:
 16537 ;;		Nothing
 16538 ;; This function is called by:
 16539 ;;		_printf
 16540 ;; This function uses a non-reentrant model
 16541 ;;
 16542                           
 16543                           	psect	text54
 16544  004B0E                     __ptext54:
 16545                           	opt stack 0
 16546  004B0E                     ___wmul:
 16547                           	opt stack 19
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;incstack = 0
 16551  004B0E  0100               	movlb	0	; () banked
 16552  004B10  5180               	movf	___wmul@multiplier& (0+255),w,b
 16553  004B12  0100               	movlb	0	; () banked
 16554  004B14  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16555  004B16  CFF3 F084          	movff	prodl,___wmul@product
 16556  004B1A  CFF4 F085          	movff	prodh,___wmul@product+1
 16557  004B1E  0100               	movlb	0	; () banked
 16558  004B20  5180               	movf	___wmul@multiplier& (0+255),w,b
 16559  004B22  0100               	movlb	0	; () banked
 16560  004B24  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16561  004B26  50F3               	movf	prodl,w,c
 16562  004B28  0100               	movlb	0	; () banked
 16563  004B2A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16564  004B2C  0100               	movlb	0	; () banked
 16565  004B2E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16566  004B30  0100               	movlb	0	; () banked
 16567  004B32  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16568  004B34  50F3               	movf	prodl,w,c
 16569  004B36  0100               	movlb	0	; () banked
 16570  004B38  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16571                           
 16572                           ; BSR set to: 0
 16573  004B3A  C084  F080         	movff	___wmul@product,?___wmul
 16574  004B3E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16575  004B42  0012               	return	
 16576  004B44                     __end_of___wmul:
 16577                           	opt stack 0
 16578                           tblptru	equ	0xFF8
 16579                           tblptrh	equ	0xFF7
 16580                           tblptrl	equ	0xFF6
 16581                           tablat	equ	0xFF5
 16582                           prodh	equ	0xFF4
 16583                           prodl	equ	0xFF3
 16584                           intcon	equ	0xFF2
 16585                           intcon2	equ	0xFF1
 16586                           intcon3	equ	0xFF0
 16587                           indf0	equ	0xFEF
 16588                           postinc0	equ	0xFEE
 16589                           fsr0h	equ	0xFEA
 16590                           fsr0l	equ	0xFE9
 16591                           wreg	equ	0xFE8
 16592                           postdec1	equ	0xFE5
 16593                           fsr1l	equ	0xFE1
 16594                           indf2	equ	0xFDF
 16595                           postinc2	equ	0xFDE
 16596                           postdec2	equ	0xFDD
 16597                           fsr2h	equ	0xFDA
 16598                           fsr2l	equ	0xFD9
 16599                           status	equ	0xFD8
 16600                           
 16601 ;; *************** function ___lwmod *****************
 16602 ;; Defined at:
 16603 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  dividend        2    7[BANK0 ] unsigned int 
 16606 ;;  divisor         2    9[BANK0 ] unsigned int 
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  counter         1   11[BANK0 ] unsigned char 
 16609 ;; Return value:  Size  Location     Type
 16610 ;;                  2    7[BANK0 ] unsigned int 
 16611 ;; Registers used:
 16612 ;;		wreg, status,2, status,0
 16613 ;; Tracked objects:
 16614 ;;		On entry : 0/0
 16615 ;;		On exit  : 0/0
 16616 ;;		Unchanged: 0/0
 16617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16621 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16622 ;;Total ram usage:        5 bytes
 16623 ;; Hardware stack levels used:    1
 16624 ;; Hardware stack levels required when called:    7
 16625 ;; This function calls:
 16626 ;;		Nothing
 16627 ;; This function is called by:
 16628 ;;		_printf
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632                           	psect	text55
 16633  00467E                     __ptext55:
 16634                           	opt stack 0
 16635  00467E                     ___lwmod:
 16636                           	opt stack 19
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;incstack = 0
 16640  00467E  0100               	movlb	0	; () banked
 16641  004680  5189               	movf	___lwmod@divisor& (0+255),w,b
 16642  004682  0100               	movlb	0	; () banked
 16643  004684  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16644  004686  B4D8               	btfsc	status,2,c
 16645  004688  D026               	goto	l1823
 16646                           
 16647                           ; BSR set to: 0
 16648  00468A  0E01               	movlw	1
 16649  00468C  0100               	movlb	0	; () banked
 16650  00468E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16651  004690  D006               	goto	l5820
 16652  004692                     l5818:
 16653                           
 16654                           ; BSR set to: 0
 16655  004692  0100               	movlb	0	; () banked
 16656  004694  90D8               	bcf	status,0,c
 16657  004696  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16658  004698  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16659  00469A  0100               	movlb	0	; () banked
 16660  00469C  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16661  00469E                     l5820:
 16662                           
 16663                           ; BSR set to: 0
 16664  00469E  0100               	movlb	0	; () banked
 16665  0046A0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16666  0046A2  D7F7               	goto	l5818
 16667  0046A4                     l5822:
 16668                           
 16669                           ; BSR set to: 0
 16670  0046A4  0100               	movlb	0	; () banked
 16671  0046A6  5189               	movf	___lwmod@divisor& (0+255),w,b
 16672  0046A8  0100               	movlb	0	; () banked
 16673  0046AA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16674  0046AC  0100               	movlb	0	; () banked
 16675  0046AE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16676  0046B0  0100               	movlb	0	; () banked
 16677  0046B2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16678  0046B4  A0D8               	btfss	status,0,c
 16679  0046B6  D008               	goto	l5826
 16680                           
 16681                           ; BSR set to: 0
 16682  0046B8  0100               	movlb	0	; () banked
 16683  0046BA  5189               	movf	___lwmod@divisor& (0+255),w,b
 16684  0046BC  0100               	movlb	0	; () banked
 16685  0046BE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16686  0046C0  0100               	movlb	0	; () banked
 16687  0046C2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16688  0046C4  0100               	movlb	0	; () banked
 16689  0046C6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16690  0046C8                     l5826:
 16691                           
 16692                           ; BSR set to: 0
 16693  0046C8  0100               	movlb	0	; () banked
 16694  0046CA  90D8               	bcf	status,0,c
 16695  0046CC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16696  0046CE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16697                           
 16698                           ; BSR set to: 0
 16699  0046D0  0100               	movlb	0	; () banked
 16700  0046D2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16701  0046D4  D7E7               	goto	l5822
 16702  0046D6                     l1823:
 16703                           
 16704                           ; BSR set to: 0
 16705  0046D6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16706  0046DA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16707                           
 16708                           ; BSR set to: 0
 16709  0046DE  0012               	return		;funcret
 16710  0046E0                     __end_of___lwmod:
 16711                           	opt stack 0
 16712                           tblptru	equ	0xFF8
 16713                           tblptrh	equ	0xFF7
 16714                           tblptrl	equ	0xFF6
 16715                           tablat	equ	0xFF5
 16716                           prodh	equ	0xFF4
 16717                           prodl	equ	0xFF3
 16718                           intcon	equ	0xFF2
 16719                           intcon2	equ	0xFF1
 16720                           intcon3	equ	0xFF0
 16721                           indf0	equ	0xFEF
 16722                           postinc0	equ	0xFEE
 16723                           fsr0h	equ	0xFEA
 16724                           fsr0l	equ	0xFE9
 16725                           wreg	equ	0xFE8
 16726                           postdec1	equ	0xFE5
 16727                           fsr1l	equ	0xFE1
 16728                           indf2	equ	0xFDF
 16729                           postinc2	equ	0xFDE
 16730                           postdec2	equ	0xFDD
 16731                           fsr2h	equ	0xFDA
 16732                           fsr2l	equ	0xFD9
 16733                           status	equ	0xFD8
 16734                           
 16735 ;; *************** function ___lwdiv *****************
 16736 ;; Defined at:
 16737 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  dividend        2    0[BANK0 ] unsigned int 
 16740 ;;  divisor         2    2[BANK0 ] unsigned int 
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;  quotient        2    4[BANK0 ] unsigned int 
 16743 ;;  counter         1    6[BANK0 ] unsigned char 
 16744 ;; Return value:  Size  Location     Type
 16745 ;;                  2    0[BANK0 ] unsigned int 
 16746 ;; Registers used:
 16747 ;;		wreg, status,2, status,0
 16748 ;; Tracked objects:
 16749 ;;		On entry : 0/0
 16750 ;;		On exit  : 0/0
 16751 ;;		Unchanged: 0/0
 16752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16753 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16754 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16756 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16757 ;;Total ram usage:        7 bytes
 16758 ;; Hardware stack levels used:    1
 16759 ;; Hardware stack levels required when called:    7
 16760 ;; This function calls:
 16761 ;;		Nothing
 16762 ;; This function is called by:
 16763 ;;		_printf
 16764 ;; This function uses a non-reentrant model
 16765 ;;
 16766                           
 16767                           	psect	text56
 16768  004444                     __ptext56:
 16769                           	opt stack 0
 16770  004444                     ___lwdiv:
 16771                           	opt stack 19
 16772                           
 16773                           ; BSR set to: 0
 16774                           ;incstack = 0
 16775  004444  0E00               	movlw	0
 16776  004446  0100               	movlb	0	; () banked
 16777  004448  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16778  00444A  0E00               	movlw	0
 16779  00444C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16780                           
 16781                           ; BSR set to: 0
 16782  00444E  0100               	movlb	0	; () banked
 16783  004450  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16784  004452  0100               	movlb	0	; () banked
 16785  004454  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16786  004456  B4D8               	btfsc	status,2,c
 16787  004458  D02C               	goto	l1813
 16788                           
 16789                           ; BSR set to: 0
 16790  00445A  0E01               	movlw	1
 16791  00445C  0100               	movlb	0	; () banked
 16792  00445E  6F86               	movwf	___lwdiv@counter& (0+255),b
 16793  004460  D006               	goto	l5800
 16794  004462                     l5798:
 16795                           
 16796                           ; BSR set to: 0
 16797  004462  0100               	movlb	0	; () banked
 16798  004464  90D8               	bcf	status,0,c
 16799  004466  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16800  004468  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16801  00446A  0100               	movlb	0	; () banked
 16802  00446C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16803  00446E                     l5800:
 16804                           
 16805                           ; BSR set to: 0
 16806  00446E  0100               	movlb	0	; () banked
 16807  004470  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16808  004472  D7F7               	goto	l5798
 16809  004474                     l5802:
 16810                           
 16811                           ; BSR set to: 0
 16812  004474  0100               	movlb	0	; () banked
 16813  004476  90D8               	bcf	status,0,c
 16814  004478  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16815  00447A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16816                           
 16817                           ; BSR set to: 0
 16818  00447C  0100               	movlb	0	; () banked
 16819  00447E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16820  004480  0100               	movlb	0	; () banked
 16821  004482  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16822  004484  0100               	movlb	0	; () banked
 16823  004486  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16824  004488  0100               	movlb	0	; () banked
 16825  00448A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16826  00448C  A0D8               	btfss	status,0,c
 16827  00448E  D00A               	goto	l5810
 16828                           
 16829                           ; BSR set to: 0
 16830  004490  0100               	movlb	0	; () banked
 16831  004492  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16832  004494  0100               	movlb	0	; () banked
 16833  004496  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16834  004498  0100               	movlb	0	; () banked
 16835  00449A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16836  00449C  0100               	movlb	0	; () banked
 16837  00449E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16838                           
 16839                           ; BSR set to: 0
 16840  0044A0  0100               	movlb	0	; () banked
 16841  0044A2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16842  0044A4                     l5810:
 16843                           
 16844                           ; BSR set to: 0
 16845  0044A4  0100               	movlb	0	; () banked
 16846  0044A6  90D8               	bcf	status,0,c
 16847  0044A8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16848  0044AA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16849                           
 16850                           ; BSR set to: 0
 16851  0044AC  0100               	movlb	0	; () banked
 16852  0044AE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16853  0044B0  D7E1               	goto	l5802
 16854  0044B2                     l1813:
 16855                           
 16856                           ; BSR set to: 0
 16857  0044B2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16858  0044B6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16859                           
 16860                           ; BSR set to: 0
 16861  0044BA  0012               	return		;funcret
 16862  0044BC                     __end_of___lwdiv:
 16863                           	opt stack 0
 16864                           tblptru	equ	0xFF8
 16865                           tblptrh	equ	0xFF7
 16866                           tblptrl	equ	0xFF6
 16867                           tablat	equ	0xFF5
 16868                           prodh	equ	0xFF4
 16869                           prodl	equ	0xFF3
 16870                           intcon	equ	0xFF2
 16871                           intcon2	equ	0xFF1
 16872                           intcon3	equ	0xFF0
 16873                           indf0	equ	0xFEF
 16874                           postinc0	equ	0xFEE
 16875                           fsr0h	equ	0xFEA
 16876                           fsr0l	equ	0xFE9
 16877                           wreg	equ	0xFE8
 16878                           postdec1	equ	0xFE5
 16879                           fsr1l	equ	0xFE1
 16880                           indf2	equ	0xFDF
 16881                           postinc2	equ	0xFDE
 16882                           postdec2	equ	0xFDD
 16883                           fsr2h	equ	0xFDA
 16884                           fsr2l	equ	0xFD9
 16885                           status	equ	0xFD8
 16886                           
 16887 ;; *************** function _lcdInst *****************
 16888 ;; Defined at:
 16889 ;;		line 15 in file "lcd.c"
 16890 ;; Parameters:    Size  Location     Type
 16891 ;;  data            1    wreg     unsigned char 
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;  data            1    2[BANK0 ] unsigned char 
 16894 ;; Return value:  Size  Location     Type
 16895 ;;                  1    wreg      void 
 16896 ;; Registers used:
 16897 ;;		wreg, status,2, status,0, cstack
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16907 ;;Total ram usage:        1 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    8
 16910 ;; This function calls:
 16911 ;;		_lcdNibble
 16912 ;; This function is called by:
 16913 ;;		_UI
 16914 ;;		_change_state_to_menu_start
 16915 ;;		_change_state_to_menu_12
 16916 ;;		_change_state_to_menu_22
 16917 ;;		_initLCD
 16918 ;;		_printRTC
 16919 ;;		_Loading
 16920 ;;		_EEPROM_write
 16921 ;;		_Test
 16922 ;;		_algorithmTest
 16923 ;;		_sensorTest
 16924 ;;		_actuatorTest
 16925 ;;		_BothServos
 16926 ;;		_PortTestA5
 16927 ;;		_PusherTest
 16928 ;;		_SpeedTest
 16929 ;;		_BlockerTest
 16930 ;;		_ToggleTestA5
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           	psect	text57
 16935  005004                     __ptext57:
 16936                           	opt stack 0
 16937  005004                     _lcdInst:
 16938                           	opt stack 20
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;incstack = 0
 16942                           ;lcdInst@data stored from wreg
 16943  005004  0100               	movlb	0	; () banked
 16944  005006  6F82               	movwf	lcdInst@data& (0+255),b
 16945                           
 16946                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16947  005008  948C               	bcf	3980,2,c	;volatile
 16948                           
 16949                           ;lcd.c: 17: lcdNibble(data);
 16950  00500A  0100               	movlb	0	; () banked
 16951  00500C  5182               	movf	lcdInst@data& (0+255),w,b
 16952  00500E  EC0B  F023         	call	_lcdNibble
 16953  005012  0012               	return		;funcret
 16954  005014                     __end_of_lcdInst:
 16955                           	opt stack 0
 16956                           tblptru	equ	0xFF8
 16957                           tblptrh	equ	0xFF7
 16958                           tblptrl	equ	0xFF6
 16959                           tablat	equ	0xFF5
 16960                           prodh	equ	0xFF4
 16961                           prodl	equ	0xFF3
 16962                           intcon	equ	0xFF2
 16963                           intcon2	equ	0xFF1
 16964                           intcon3	equ	0xFF0
 16965                           indf0	equ	0xFEF
 16966                           postinc0	equ	0xFEE
 16967                           fsr0h	equ	0xFEA
 16968                           fsr0l	equ	0xFE9
 16969                           wreg	equ	0xFE8
 16970                           postdec1	equ	0xFE5
 16971                           fsr1l	equ	0xFE1
 16972                           indf2	equ	0xFDF
 16973                           postinc2	equ	0xFDE
 16974                           postdec2	equ	0xFDD
 16975                           fsr2h	equ	0xFDA
 16976                           fsr2l	equ	0xFD9
 16977                           status	equ	0xFD8
 16978                           
 16979 ;; *************** function _lcdNibble *****************
 16980 ;; Defined at:
 16981 ;;		line 25 in file "lcd.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  data            1    wreg     unsigned char 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  data            1    1[BANK0 ] unsigned char 
 16986 ;;  temp            1    0[BANK0 ] unsigned char 
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  1    wreg      void 
 16989 ;; Registers used:
 16990 ;;		wreg, status,2, status,0
 16991 ;; Tracked objects:
 16992 ;;		On entry : 0/0
 16993 ;;		On exit  : 0/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17000 ;;Total ram usage:        2 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    7
 17003 ;; This function calls:
 17004 ;;		Nothing
 17005 ;; This function is called by:
 17006 ;;		_lcdInst
 17007 ;;		_putch
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text58
 17012  004616                     __ptext58:
 17013                           	opt stack 0
 17014  004616                     _lcdNibble:
 17015                           	opt stack 20
 17016                           
 17017                           ;incstack = 0
 17018                           ;lcdNibble@data stored from wreg
 17019  004616  0100               	movlb	0	; () banked
 17020  004618  6F81               	movwf	lcdNibble@data& (0+255),b
 17021                           
 17022                           ;lcd.c: 27: char temp = data & 0xF0;
 17023  00461A  0100               	movlb	0	; () banked
 17024  00461C  5181               	movf	lcdNibble@data& (0+255),w,b
 17025  00461E  0BF0               	andlw	240
 17026  004620  0100               	movlb	0	; () banked
 17027  004622  6F80               	movwf	lcdNibble@temp& (0+255),b
 17028                           
 17029                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17030  004624  508C               	movf	3980,w,c	;volatile
 17031  004626  0B0F               	andlw	15
 17032  004628  6E8C               	movwf	3980,c	;volatile
 17033                           
 17034                           ;lcd.c: 29: LATD = temp | LATD;
 17035  00462A  0100               	movlb	0	; () banked
 17036  00462C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17037  00462E  108C               	iorwf	3980,w,c	;volatile
 17038  004630  6E8C               	movwf	3980,c	;volatile
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17042  004632  868C               	bsf	3980,3,c	;volatile
 17043                           
 17044                           ; BSR set to: 0
 17045                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17046  004634  0E42               	movlw	66
 17047  004636                     u9737:
 17048  004636  2EE8               	decfsz	wreg,f,c
 17049  004638  D7FE               	bra	u9737
 17050  00463A  D000               	nop2	
 17051                           
 17052                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17053  00463C  968C               	bcf	3980,3,c	;volatile
 17054                           
 17055                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17056  00463E  0E42               	movlw	66
 17057  004640                     u9747:
 17058  004640  2EE8               	decfsz	wreg,f,c
 17059  004642  D7FE               	bra	u9747
 17060  004644  D000               	nop2	
 17061                           
 17062                           ;lcd.c: 36: data = data << 4;
 17063  004646  0100               	movlb	0	; () banked
 17064  004648  3981               	swapf	lcdNibble@data& (0+255),w,b
 17065  00464A  0BF0               	andlw	240
 17066  00464C  0100               	movlb	0	; () banked
 17067  00464E  6F81               	movwf	lcdNibble@data& (0+255),b
 17068                           
 17069                           ;lcd.c: 38: temp = data & 0xF0;
 17070  004650  0100               	movlb	0	; () banked
 17071  004652  5181               	movf	lcdNibble@data& (0+255),w,b
 17072  004654  0BF0               	andlw	240
 17073  004656  0100               	movlb	0	; () banked
 17074  004658  6F80               	movwf	lcdNibble@temp& (0+255),b
 17075                           
 17076                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17077  00465A  508C               	movf	3980,w,c	;volatile
 17078  00465C  0B0F               	andlw	15
 17079  00465E  6E8C               	movwf	3980,c	;volatile
 17080                           
 17081                           ;lcd.c: 40: LATD = temp | LATD;
 17082  004660  0100               	movlb	0	; () banked
 17083  004662  5180               	movf	lcdNibble@temp& (0+255),w,b
 17084  004664  108C               	iorwf	3980,w,c	;volatile
 17085  004666  6E8C               	movwf	3980,c	;volatile
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17089  004668  868C               	bsf	3980,3,c	;volatile
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17093  00466A  0E42               	movlw	66
 17094  00466C                     u9757:
 17095  00466C  2EE8               	decfsz	wreg,f,c
 17096  00466E  D7FE               	bra	u9757
 17097  004670  D000               	nop2	
 17098                           
 17099                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17100  004672  968C               	bcf	3980,3,c	;volatile
 17101                           
 17102                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17103  004674  0E42               	movlw	66
 17104  004676                     u9767:
 17105  004676  2EE8               	decfsz	wreg,f,c
 17106  004678  D7FE               	bra	u9767
 17107  00467A  D000               	nop2	
 17108  00467C  0012               	return		;funcret
 17109  00467E                     __end_of_lcdNibble:
 17110                           	opt stack 0
 17111                           tblptru	equ	0xFF8
 17112                           tblptrh	equ	0xFF7
 17113                           tblptrl	equ	0xFF6
 17114                           tablat	equ	0xFF5
 17115                           prodh	equ	0xFF4
 17116                           prodl	equ	0xFF3
 17117                           intcon	equ	0xFF2
 17118                           intcon2	equ	0xFF1
 17119                           intcon3	equ	0xFF0
 17120                           indf0	equ	0xFEF
 17121                           postinc0	equ	0xFEE
 17122                           fsr0h	equ	0xFEA
 17123                           fsr0l	equ	0xFE9
 17124                           wreg	equ	0xFE8
 17125                           postdec1	equ	0xFE5
 17126                           fsr1l	equ	0xFE1
 17127                           indf2	equ	0xFDF
 17128                           postinc2	equ	0xFDE
 17129                           postdec2	equ	0xFDD
 17130                           fsr2h	equ	0xFDA
 17131                           fsr2l	equ	0xFD9
 17132                           status	equ	0xFD8
 17133                           
 17134 ;; *************** function _handler *****************
 17135 ;; Defined at:
 17136 ;;		line 16 in file "interruptHandler.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;		None
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;		None
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  1    wreg      void 
 17143 ;; Registers used:
 17144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;Total ram usage:       16 bytes
 17155 ;; Hardware stack levels used:    1
 17156 ;; Hardware stack levels required when called:    6
 17157 ;; This function calls:
 17158 ;;		_printSortTimer
 17159 ;;		_updateMenu
 17160 ;; This function is called by:
 17161 ;;		Interrupt level 2
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           	psect	intcode
 17166  000008                     __pintcode:
 17167                           	opt stack 0
 17168  000008                     _handler:
 17169                           	opt stack 18
 17170                           
 17171                           ;incstack = 0
 17172  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17173  00000A  EDB9  F01B         	call	int_func,f	;refresh shadow registers
 17174                           tblptru	equ	0xFF8
 17175                           tblptrh	equ	0xFF7
 17176                           tblptrl	equ	0xFF6
 17177                           tablat	equ	0xFF5
 17178                           prodh	equ	0xFF4
 17179                           prodl	equ	0xFF3
 17180                           intcon	equ	0xFF2
 17181                           intcon2	equ	0xFF1
 17182                           intcon3	equ	0xFF0
 17183                           indf0	equ	0xFEF
 17184                           postinc0	equ	0xFEE
 17185                           fsr0h	equ	0xFEA
 17186                           fsr0l	equ	0xFE9
 17187                           wreg	equ	0xFE8
 17188                           postdec1	equ	0xFE5
 17189                           fsr1l	equ	0xFE1
 17190                           indf2	equ	0xFDF
 17191                           postinc2	equ	0xFDE
 17192                           postdec2	equ	0xFDD
 17193                           fsr2h	equ	0xFDA
 17194                           fsr2l	equ	0xFD9
 17195                           status	equ	0xFD8
 17196                           
 17197                           	psect	intcode_body
 17198  003772                     __pintcode_body:
 17199                           	opt stack 18
 17200  003772                     int_func:
 17201                           	opt stack 18
 17202  003772  0006               	pop		; remove dummy address from shadow register refresh
 17203  003774  CFFA F04B          	movff	pclath,??_handler+2
 17204  003778  CFFB F04C          	movff	pclatu,??_handler+3
 17205  00377C  CFE9 F04D          	movff	fsr0l,??_handler+4
 17206  003780  CFEA F04E          	movff	fsr0h,??_handler+5
 17207  003784  CFE1 F04F          	movff	fsr1l,??_handler+6
 17208  003788  CFE2 F050          	movff	fsr1h,??_handler+7
 17209  00378C  CFD9 F051          	movff	fsr2l,??_handler+8
 17210  003790  CFDA F052          	movff	fsr2h,??_handler+9
 17211  003794  CFF3 F053          	movff	prodl,??_handler+10
 17212  003798  CFF4 F054          	movff	prodh,??_handler+11
 17213  00379C  CFF6 F055          	movff	tblptrl,??_handler+12
 17214  0037A0  CFF7 F056          	movff	tblptrh,??_handler+13
 17215  0037A4  CFF8 F057          	movff	tblptru,??_handler+14
 17216  0037A8  CFF5 F058          	movff	tablat,??_handler+15
 17217                           
 17218                           ;interruptHandler.c: 18: if(INT1IF){
 17219  0037AC  A0F0               	btfss	intcon3,0,c	;volatile
 17220  0037AE  D02B               	goto	i2l8964
 17221                           
 17222                           ;interruptHandler.c: 19: INT1IF = 0;
 17223  0037B0  90F0               	bcf	intcon3,0,c	;volatile
 17224                           
 17225                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17226  0037B2  0100               	movlb	0	; () banked
 17227  0037B4  51FC               	movf	_machine_state& (0+255),w,b
 17228  0037B6  A4D8               	btfss	status,2,c
 17229  0037B8  D01B               	goto	i2l8958
 17230                           
 17231                           ; BSR set to: 0
 17232                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17233  0037BA  3881               	swapf	3969,w,c	;volatile
 17234  0037BC  0B0F               	andlw	15
 17235  0037BE  0B0F               	andlw	15
 17236  0037C0  6E49               	movwf	??_handler& (0+255),c
 17237  0037C2  6A4A               	clrf	(??_handler+1)& (0+255),c
 17238  0037C4  0EEF               	movlw	low _keys
 17239  0037C6  2449               	addwf	??_handler,w,c
 17240  0037C8  6EF6               	movwf	tblptrl,c
 17241  0037CA  0EFA               	movlw	high _keys
 17242  0037CC  204A               	addwfc	??_handler+1,w,c
 17243  0037CE  6EF7               	movwf	tblptrh,c
 17244  0037D0                     	if	1	;There are 3 active tblptr bytes
 17245  0037D0  6AF8               	clrf	tblptru,c
 17246  0037D2  0E00               	movlw	low (__mediumconst shr (0+16))
 17247  0037D4  22F8               	addwfc	tblptru,f,c
 17248  0037D6                     	endif
 17249  0037D6  0008               	tblrd		*
 17250  0037D8  CFF5 F07D          	movff	tablat,_input	;volatile
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;interruptHandler.c: 23: if(input == '*'){
 17254  0037DC  0E2A               	movlw	42
 17255  0037DE  187D               	xorwf	_input,w,c	;volatile
 17256  0037E0  A4D8               	btfss	status,2,c
 17257  0037E2  D004               	goto	i2l8956
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17261  0037E4  0E03               	movlw	3
 17262  0037E6  0100               	movlb	0	; () banked
 17263  0037E8  6FFC               	movwf	_machine_state& (0+255),b
 17264                           
 17265                           ;interruptHandler.c: 25: }
 17266  0037EA  D002               	goto	i2l8958
 17267  0037EC                     i2l8956:
 17268                           
 17269                           ; BSR set to: 0
 17270                           ;interruptHandler.c: 26: else{
 17271                           ;interruptHandler.c: 27: updateMenu();
 17272  0037EC  EC6B  F013         	call	_updateMenu	;wreg free
 17273  0037F0                     i2l8958:
 17274                           
 17275                           ;interruptHandler.c: 28: }
 17276                           ;interruptHandler.c: 29: }
 17277                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17278  0037F0  0100               	movlb	0	; () banked
 17279  0037F2  05FC               	decf	_machine_state& (0+255),w,b
 17280  0037F4  A4D8               	btfss	status,2,c
 17281  0037F6  D007               	goto	i2l8964
 17282                           
 17283                           ; BSR set to: 0
 17284                           ;interruptHandler.c: 31: if(input == '*'){
 17285  0037F8  0E2A               	movlw	42
 17286  0037FA  187D               	xorwf	_input,w,c	;volatile
 17287  0037FC  A4D8               	btfss	status,2,c
 17288  0037FE  D003               	goto	i2l8964
 17289                           
 17290                           ; BSR set to: 0
 17291                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17292  003800  0E02               	movlw	2
 17293  003802  0100               	movlb	0	; () banked
 17294  003804  6FFC               	movwf	_machine_state& (0+255),b
 17295  003806                     i2l8964:
 17296                           
 17297                           ;interruptHandler.c: 33: }
 17298                           ;interruptHandler.c: 34: }
 17299                           ;interruptHandler.c: 35: }
 17300                           ;interruptHandler.c: 38: if(TMR0IF){
 17301  003806  A4F2               	btfss	intcon,2,c	;volatile
 17302  003808  D00C               	goto	i2l8978
 17303                           
 17304                           ;interruptHandler.c: 39: TMR0IF = 0;
 17305  00380A  94F2               	bcf	intcon,2,c	;volatile
 17306                           
 17307                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17308  00380C  0100               	movlb	0	; () banked
 17309  00380E  05FC               	decf	_machine_state& (0+255),w,b
 17310  003810  A4D8               	btfss	status,2,c
 17311  003812  D007               	goto	i2l8978
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;interruptHandler.c: 41: printSortTimer();
 17315  003814  EC16  F018         	call	_printSortTimer	;wreg free
 17316                           
 17317                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17318  003818  0E85               	movlw	133
 17319  00381A  6ED7               	movwf	4055,c	;volatile
 17320                           
 17321                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17322  00381C  0EEE               	movlw	238
 17323  00381E  6ED6               	movwf	4054,c	;volatile
 17324                           
 17325                           ;interruptHandler.c: 45: TMR0ON = 1;
 17326  003820  8ED5               	bsf	4053,7,c	;volatile
 17327  003822                     i2l8978:
 17328                           
 17329                           ;interruptHandler.c: 46: }
 17330                           ;interruptHandler.c: 47: }
 17331                           ;interruptHandler.c: 50: if(TMR1IF){
 17332  003822  A09E               	btfss	3998,0,c	;volatile
 17333  003824  D024               	goto	i2l9002
 17334                           
 17335                           ;interruptHandler.c: 51: TMR1IF = 0;
 17336  003826  909E               	bcf	3998,0,c	;volatile
 17337                           
 17338                           ;interruptHandler.c: 52: TMR1ON = 0;
 17339  003828  90CD               	bcf	4045,0,c	;volatile
 17340                           
 17341                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17342  00382A  0100               	movlb	0	; () banked
 17343  00382C  05FC               	decf	_machine_state& (0+255),w,b
 17344  00382E  A4D8               	btfss	status,2,c
 17345  003830  D01E               	goto	i2l9002
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;interruptHandler.c: 54: if(was_low_1){
 17349  003832  5079               	movf	_was_low_1,w,c	;volatile
 17350  003834  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17351  003836  B4D8               	btfsc	status,2,c
 17352  003838  D00A               	goto	i2l919
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17356  00383A  828B               	bsf	3979,1,c	;volatile
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;interruptHandler.c: 56: was_low_1 = 0;
 17360  00383C  0E00               	movlw	0
 17361  00383E  6E7A               	movwf	_was_low_1+1,c	;volatile
 17362  003840  0E00               	movlw	0
 17363  003842  6E79               	movwf	_was_low_1,c	;volatile
 17364                           
 17365                           ; BSR set to: 0
 17366                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17367  003844  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17371  003848  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17372                           
 17373                           ;interruptHandler.c: 59: }
 17374  00384C  D00F               	goto	i2l9000
 17375  00384E                     i2l919:
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;interruptHandler.c: 60: else{
 17379                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17380  00384E  928B               	bcf	3979,1,c	;volatile
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;interruptHandler.c: 62: was_low_1 = 1;
 17384  003850  0E00               	movlw	0
 17385  003852  6E7A               	movwf	_was_low_1+1,c	;volatile
 17386  003854  0E01               	movlw	1
 17387  003856  6E79               	movwf	_was_low_1,c	;volatile
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17391  003858  0101               	movlb	1	; () banked
 17392  00385A  511C               	movf	_servoTimes& (0+255),w,b
 17393  00385C  0800               	sublw	0
 17394  00385E  0F20               	addlw	32
 17395  003860  6ECF               	movwf	4047,c	;volatile
 17396                           
 17397                           ; BSR set to: 1
 17398                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17399  003862  0101               	movlb	1	; () banked
 17400  003864  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17401  003866  0800               	sublw	0
 17402  003868  0F20               	addlw	32
 17403  00386A  6ECE               	movwf	4046,c	;volatile
 17404  00386C                     i2l9000:
 17405                           
 17406                           ;interruptHandler.c: 65: }
 17407                           ;interruptHandler.c: 66: TMR1ON = 1;
 17408  00386C  80CD               	bsf	4045,0,c	;volatile
 17409  00386E                     i2l9002:
 17410                           
 17411                           ;interruptHandler.c: 67: }
 17412                           ;interruptHandler.c: 68: }
 17413                           ;interruptHandler.c: 70: if(TMR3IF){
 17414  00386E  A2A1               	btfss	4001,1,c	;volatile
 17415  003870  D024               	goto	i2l925
 17416                           
 17417                           ;interruptHandler.c: 71: TMR3IF = 0;
 17418  003872  92A1               	bcf	4001,1,c	;volatile
 17419                           
 17420                           ;interruptHandler.c: 72: TMR3ON = 0;
 17421  003874  90B1               	bcf	4017,0,c	;volatile
 17422                           
 17423                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17424  003876  0100               	movlb	0	; () banked
 17425  003878  05FC               	decf	_machine_state& (0+255),w,b
 17426  00387A  A4D8               	btfss	status,2,c
 17427  00387C  D01E               	goto	i2l925
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;interruptHandler.c: 74: if(was_low_3){
 17431  00387E  507B               	movf	_was_low_3,w,c	;volatile
 17432  003880  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17433  003882  B4D8               	btfsc	status,2,c
 17434  003884  D00A               	goto	i2l923
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17438  003886  848B               	bsf	3979,2,c	;volatile
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;interruptHandler.c: 76: was_low_3 = 0;
 17442  003888  0E00               	movlw	0
 17443  00388A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17444  00388C  0E00               	movlw	0
 17445  00388E  6E7B               	movwf	_was_low_3,c	;volatile
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17449  003890  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17453  003894  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17454                           
 17455                           ;interruptHandler.c: 79: }
 17456  003898  D00F               	goto	i2l9024
 17457  00389A                     i2l923:
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;interruptHandler.c: 80: else{
 17461                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17462  00389A  948B               	bcf	3979,2,c	;volatile
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;interruptHandler.c: 82: was_low_3 = 1;
 17466  00389C  0E00               	movlw	0
 17467  00389E  6E7C               	movwf	_was_low_3+1,c	;volatile
 17468  0038A0  0E01               	movlw	1
 17469  0038A2  6E7B               	movwf	_was_low_3,c	;volatile
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17473  0038A4  0101               	movlb	1	; () banked
 17474  0038A6  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17475  0038A8  0800               	sublw	0
 17476  0038AA  0F20               	addlw	32
 17477  0038AC  6EB3               	movwf	4019,c	;volatile
 17478                           
 17479                           ; BSR set to: 1
 17480                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17481  0038AE  0101               	movlb	1	; () banked
 17482  0038B0  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17483  0038B2  0800               	sublw	0
 17484  0038B4  0F20               	addlw	32
 17485  0038B6  6EB2               	movwf	4018,c	;volatile
 17486  0038B8                     i2l9024:
 17487                           
 17488                           ;interruptHandler.c: 85: }
 17489                           ;interruptHandler.c: 86: TMR3ON = 1;
 17490  0038B8  80B1               	bsf	4017,0,c	;volatile
 17491  0038BA                     i2l925:
 17492  0038BA  C058  FFF5         	movff	??_handler+15,tablat
 17493  0038BE  C057  FFF8         	movff	??_handler+14,tblptru
 17494  0038C2  C056  FFF7         	movff	??_handler+13,tblptrh
 17495  0038C6  C055  FFF6         	movff	??_handler+12,tblptrl
 17496  0038CA  C054  FFF4         	movff	??_handler+11,prodh
 17497  0038CE  C053  FFF3         	movff	??_handler+10,prodl
 17498  0038D2  C052  FFDA         	movff	??_handler+9,fsr2h
 17499  0038D6  C051  FFD9         	movff	??_handler+8,fsr2l
 17500  0038DA  C050  FFE2         	movff	??_handler+7,fsr1h
 17501  0038DE  C04F  FFE1         	movff	??_handler+6,fsr1l
 17502  0038E2  C04E  FFEA         	movff	??_handler+5,fsr0h
 17503  0038E6  C04D  FFE9         	movff	??_handler+4,fsr0l
 17504  0038EA  C04C  FFFB         	movff	??_handler+3,pclatu
 17505  0038EE  C04B  FFFA         	movff	??_handler+2,pclath
 17506  0038F2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17507  0038F4  0011               	retfie		f
 17508  0038F6                     __end_of_handler:
 17509                           	opt stack 0
 17510                           pclatu	equ	0xFFB
 17511                           pclath	equ	0xFFA
 17512                           tblptru	equ	0xFF8
 17513                           tblptrh	equ	0xFF7
 17514                           tblptrl	equ	0xFF6
 17515                           tablat	equ	0xFF5
 17516                           prodh	equ	0xFF4
 17517                           prodl	equ	0xFF3
 17518                           intcon	equ	0xFF2
 17519                           intcon2	equ	0xFF1
 17520                           intcon3	equ	0xFF0
 17521                           indf0	equ	0xFEF
 17522                           postinc0	equ	0xFEE
 17523                           fsr0h	equ	0xFEA
 17524                           fsr0l	equ	0xFE9
 17525                           wreg	equ	0xFE8
 17526                           postdec1	equ	0xFE5
 17527                           fsr1h	equ	0xFE2
 17528                           fsr1l	equ	0xFE1
 17529                           indf2	equ	0xFDF
 17530                           postinc2	equ	0xFDE
 17531                           postdec2	equ	0xFDD
 17532                           fsr2h	equ	0xFDA
 17533                           fsr2l	equ	0xFD9
 17534                           status	equ	0xFD8
 17535                           
 17536 ;; *************** function _updateMenu *****************
 17537 ;; Defined at:
 17538 ;;		line 213 in file "UI.c"
 17539 ;; Parameters:    Size  Location     Type
 17540 ;;		None
 17541 ;; Auto vars:     Size  Location     Type
 17542 ;;		None
 17543 ;; Return value:  Size  Location     Type
 17544 ;;                  1    wreg      void 
 17545 ;; Registers used:
 17546 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17547 ;; Tracked objects:
 17548 ;;		On entry : 0/0
 17549 ;;		On exit  : 0/0
 17550 ;;		Unchanged: 0/0
 17551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17556 ;;Total ram usage:        2 bytes
 17557 ;; Hardware stack levels used:    1
 17558 ;; Hardware stack levels required when called:    5
 17559 ;; This function calls:
 17560 ;;		_change_state_to_logs_11
 17561 ;;		_change_state_to_logs_12
 17562 ;;		_change_state_to_logs_22
 17563 ;;		_change_state_to_logs_23
 17564 ;;		_change_state_to_logs_33
 17565 ;;		_change_state_to_logs_34
 17566 ;;		_change_state_to_menu_11
 17567 ;;		_change_state_to_menu_23
 17568 ;;		_dispLogs
 17569 ;;		_inputHandler
 17570 ;;		i2_change_state_to_menu_12
 17571 ;;		i2_change_state_to_menu_22
 17572 ;;		i2_change_state_to_menu_start
 17573 ;; This function is called by:
 17574 ;;		_handler
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           	psect	text60
 17579  0026D6                     __ptext60:
 17580                           	opt stack 0
 17581  0026D6                     _updateMenu:
 17582                           	opt stack 18
 17583                           
 17584                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17585                           
 17586                           ;incstack = 0
 17587  0026D6  0E00               	movlw	0
 17588  0026D8  6E78               	movwf	_up+1,c
 17589  0026DA  0E00               	movlw	0
 17590  0026DC  6E77               	movwf	_up,c
 17591  0026DE  0E00               	movlw	0
 17592  0026E0  6E62               	movwf	_down+1,c
 17593  0026E2  0E00               	movlw	0
 17594  0026E4  6E61               	movwf	_down,c
 17595  0026E6  0E00               	movlw	0
 17596  0026E8  6E64               	movwf	_enter+1,c
 17597  0026EA  0E00               	movlw	0
 17598  0026EC  6E63               	movwf	_enter,c
 17599  0026EE  0E00               	movlw	0
 17600  0026F0  6E5A               	movwf	_back+1,c
 17601  0026F2  0E00               	movlw	0
 17602  0026F4  6E59               	movwf	_back,c
 17603                           
 17604                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17605  0026F6  9EF2               	bcf	intcon,7,c	;volatile
 17606                           
 17607                           ;UI.c: 217: if (inputHandler()
 17608                           ;UI.c: 220: ){
 17609  0026F8  EC21  F019         	call	_inputHandler	;wreg free
 17610  0026FC  502A               	movf	?_inputHandler,w,c
 17611  0026FE  102B               	iorwf	?_inputHandler+1,w,c
 17612  002700  A4D8               	btfss	status,2,c
 17613  002702  D112               	goto	i2l8682
 17614  002704  D146               	goto	i2l257
 17615  002706                     i2l8534:
 17616                           
 17617                           ;UI.c: 224: change_state_to_menu_11();
 17618  002706  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 17619                           
 17620                           ;UI.c: 225: break;
 17621  00270A  D143               	goto	i2l257
 17622  00270C                     i2l8536:
 17623                           
 17624                           ;UI.c: 228: if(up){
 17625  00270C  5077               	movf	_up,w,c
 17626  00270E  1078               	iorwf	_up+1,w,c
 17627  002710  B4D8               	btfsc	status,2,c
 17628  002712  D003               	goto	i2l8540
 17629                           
 17630                           ;UI.c: 229: change_state_to_menu_23();
 17631  002714  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17632                           
 17633                           ;UI.c: 230: }
 17634  002718  D13C               	goto	i2l257
 17635  00271A                     i2l8540:
 17636                           
 17637                           ;UI.c: 231: else if(down){
 17638  00271A  5061               	movf	_down,w,c
 17639  00271C  1062               	iorwf	_down+1,w,c
 17640  00271E  B4D8               	btfsc	status,2,c
 17641  002720  D003               	goto	i2l8544
 17642                           
 17643                           ;UI.c: 232: change_state_to_menu_12();
 17644  002722  ECEC  F025         	call	i2_change_state_to_menu_12	;wreg free
 17645                           
 17646                           ;UI.c: 233: }
 17647  002726  D135               	goto	i2l257
 17648  002728                     i2l8544:
 17649                           
 17650                           ;UI.c: 234: else if(enter){
 17651  002728  5063               	movf	_enter,w,c
 17652  00272A  1064               	iorwf	_enter+1,w,c
 17653  00272C  B4D8               	btfsc	status,2,c
 17654  00272E  D131               	goto	i2l257
 17655                           
 17656                           ;UI.c: 235: change_state_to_menu_start();
 17657  002730  EC46  F027         	call	i2_change_state_to_menu_start	;wreg free
 17658                           
 17659                           ;UI.c: 236: }
 17660                           ;UI.c: 237: break;
 17661  002734  D12E               	goto	i2l257
 17662  002736                     i2l8548:
 17663                           
 17664                           ;UI.c: 240: if(up){
 17665  002736  5077               	movf	_up,w,c
 17666  002738  1078               	iorwf	_up+1,w,c
 17667  00273A  B4D8               	btfsc	status,2,c
 17668  00273C  D003               	goto	i2l8552
 17669                           
 17670                           ;UI.c: 241: change_state_to_menu_11();
 17671  00273E  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 17672                           
 17673                           ;UI.c: 242: }
 17674  002742  D127               	goto	i2l257
 17675  002744                     i2l8552:
 17676                           
 17677                           ;UI.c: 243: else if(down){
 17678  002744  5061               	movf	_down,w,c
 17679  002746  1062               	iorwf	_down+1,w,c
 17680  002748  B4D8               	btfsc	status,2,c
 17681  00274A  D011               	goto	i2l8568
 17682                           
 17683                           ;UI.c: 244: change_state_to_menu_23();
 17684  00274C  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17685                           
 17686                           ;UI.c: 245: }
 17687  002750  D120               	goto	i2l257
 17688  002752                     i2l8560:
 17689                           
 17690                           ;UI.c: 252: if(up){
 17691  002752  5077               	movf	_up,w,c
 17692  002754  1078               	iorwf	_up+1,w,c
 17693  002756  B4D8               	btfsc	status,2,c
 17694  002758  D003               	goto	i2l8564
 17695                           
 17696                           ;UI.c: 253: change_state_to_menu_11();
 17697  00275A  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 17698                           
 17699                           ;UI.c: 254: }
 17700  00275E  D119               	goto	i2l257
 17701  002760                     i2l8564:
 17702                           
 17703                           ;UI.c: 255: else if(down){
 17704  002760  5061               	movf	_down,w,c
 17705  002762  1062               	iorwf	_down+1,w,c
 17706  002764  B4D8               	btfsc	status,2,c
 17707  002766  D003               	goto	i2l8568
 17708                           
 17709                           ;UI.c: 256: change_state_to_menu_23();
 17710  002768  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17711                           
 17712                           ;UI.c: 257: }
 17713  00276C  D112               	goto	i2l257
 17714  00276E                     i2l8568:
 17715                           
 17716                           ;UI.c: 258: else if(enter){
 17717  00276E  5063               	movf	_enter,w,c
 17718  002770  1064               	iorwf	_enter+1,w,c
 17719  002772  B4D8               	btfsc	status,2,c
 17720  002774  D10E               	goto	i2l257
 17721                           
 17722                           ;UI.c: 259: machine_state = Sorting_state;
 17723  002776  0E01               	movlw	1
 17724  002778  0100               	movlb	0	; () banked
 17725  00277A  6FFC               	movwf	_machine_state& (0+255),b
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;UI.c: 260: }
 17729                           ;UI.c: 261: break;
 17730                           
 17731                           ; BSR set to: 0
 17732                           
 17733                           ; BSR set to: 0
 17734  00277C  D10A               	goto	i2l257
 17735  00277E                     i2l8572:
 17736                           
 17737                           ;UI.c: 264: if(up){
 17738  00277E  5077               	movf	_up,w,c
 17739  002780  1078               	iorwf	_up+1,w,c
 17740  002782  B4D8               	btfsc	status,2,c
 17741  002784  D003               	goto	i2l8576
 17742                           
 17743                           ;UI.c: 265: change_state_to_menu_22();
 17744  002786  ECD4  F025         	call	i2_change_state_to_menu_22	;wreg free
 17745                           
 17746                           ;UI.c: 266: }
 17747  00278A  D103               	goto	i2l257
 17748  00278C                     i2l8576:
 17749                           
 17750                           ;UI.c: 267: else if(down){
 17751  00278C  5061               	movf	_down,w,c
 17752  00278E  1062               	iorwf	_down+1,w,c
 17753  002790  B4D8               	btfsc	status,2,c
 17754  002792  D003               	goto	i2l8580
 17755                           
 17756                           ;UI.c: 268: change_state_to_menu_11();
 17757  002794  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 17758                           
 17759                           ;UI.c: 269: }
 17760  002798  D0FC               	goto	i2l257
 17761  00279A                     i2l8580:
 17762                           
 17763                           ;UI.c: 270: else if(enter){
 17764  00279A  5063               	movf	_enter,w,c
 17765  00279C  1064               	iorwf	_enter+1,w,c
 17766  00279E  B4D8               	btfsc	status,2,c
 17767  0027A0  D0F8               	goto	i2l257
 17768                           
 17769                           ;UI.c: 271: change_state_to_logs_11();
 17770  0027A2  EC94  F026         	call	_change_state_to_logs_11	;wreg free
 17771                           
 17772                           ;UI.c: 272: }
 17773                           ;UI.c: 273: break;
 17774  0027A6  D0F5               	goto	i2l257
 17775  0027A8                     i2l8584:
 17776                           
 17777                           ;UI.c: 276: if(up){
 17778  0027A8  5077               	movf	_up,w,c
 17779  0027AA  1078               	iorwf	_up+1,w,c
 17780  0027AC  B4D8               	btfsc	status,2,c
 17781  0027AE  D003               	goto	i2l8588
 17782                           
 17783                           ;UI.c: 277: change_state_to_logs_34();
 17784  0027B0  EC34  F026         	call	_change_state_to_logs_34	;wreg free
 17785                           
 17786                           ;UI.c: 278: }
 17787  0027B4  D0EE               	goto	i2l257
 17788  0027B6                     i2l8588:
 17789                           
 17790                           ;UI.c: 279: else if(down){
 17791  0027B6  5061               	movf	_down,w,c
 17792  0027B8  1062               	iorwf	_down+1,w,c
 17793  0027BA  B4D8               	btfsc	status,2,c
 17794  0027BC  D003               	goto	i2l8592
 17795                           
 17796                           ;UI.c: 280: change_state_to_logs_12();
 17797  0027BE  EC7C  F026         	call	_change_state_to_logs_12	;wreg free
 17798                           
 17799                           ;UI.c: 281: }
 17800  0027C2  D0E7               	goto	i2l257
 17801  0027C4                     i2l8592:
 17802                           
 17803                           ;UI.c: 282: else if(enter){
 17804  0027C4  5063               	movf	_enter,w,c
 17805  0027C6  1064               	iorwf	_enter+1,w,c
 17806  0027C8  B4D8               	btfsc	status,2,c
 17807  0027CA  D007               	goto	i2l8596
 17808                           
 17809                           ;UI.c: 283: dispLogs(1);
 17810  0027CC  0E00               	movlw	0
 17811  0027CE  6E13               	movwf	dispLogs@myLog+1,c
 17812  0027D0  0E01               	movlw	1
 17813  0027D2  6E12               	movwf	dispLogs@myLog,c
 17814  0027D4  EC80  F027         	call	_dispLogs	;wreg free
 17815                           
 17816                           ;UI.c: 284: }
 17817  0027D8  D0DC               	goto	i2l257
 17818  0027DA                     i2l8596:
 17819                           
 17820                           ;UI.c: 285: else if(back){
 17821  0027DA  5059               	movf	_back,w,c
 17822  0027DC  105A               	iorwf	_back+1,w,c
 17823  0027DE  B4D8               	btfsc	status,2,c
 17824  0027E0  D0D8               	goto	i2l257
 17825                           
 17826                           ;UI.c: 286: change_state_to_menu_23();
 17827  0027E2  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17828                           
 17829                           ;UI.c: 287: }
 17830                           ;UI.c: 288: break;
 17831  0027E6  D0D5               	goto	i2l257
 17832  0027E8                     i2l8600:
 17833                           
 17834                           ;UI.c: 291: if(up){
 17835  0027E8  5077               	movf	_up,w,c
 17836  0027EA  1078               	iorwf	_up+1,w,c
 17837  0027EC  B4D8               	btfsc	status,2,c
 17838  0027EE  D003               	goto	i2l8604
 17839                           
 17840                           ;UI.c: 292: change_state_to_logs_11();
 17841  0027F0  EC94  F026         	call	_change_state_to_logs_11	;wreg free
 17842                           
 17843                           ;UI.c: 293: }
 17844  0027F4  D0CE               	goto	i2l257
 17845  0027F6                     i2l8604:
 17846                           
 17847                           ;UI.c: 294: else if(down){
 17848  0027F6  5061               	movf	_down,w,c
 17849  0027F8  1062               	iorwf	_down+1,w,c
 17850  0027FA  B4D8               	btfsc	status,2,c
 17851  0027FC  D003               	goto	i2l8608
 17852                           
 17853                           ;UI.c: 295: change_state_to_logs_23();
 17854  0027FE  ECDA  F026         	call	_change_state_to_logs_23	;wreg free
 17855                           
 17856                           ;UI.c: 296: }
 17857  002802  D0C7               	goto	i2l257
 17858  002804                     i2l8608:
 17859                           
 17860                           ;UI.c: 297: else if(enter){
 17861  002804  5063               	movf	_enter,w,c
 17862  002806  1064               	iorwf	_enter+1,w,c
 17863  002808  B4D8               	btfsc	status,2,c
 17864  00280A  D007               	goto	i2l8612
 17865                           
 17866                           ;UI.c: 298: dispLogs(2);
 17867  00280C  0E00               	movlw	0
 17868  00280E  6E13               	movwf	dispLogs@myLog+1,c
 17869  002810  0E02               	movlw	2
 17870  002812  6E12               	movwf	dispLogs@myLog,c
 17871  002814  EC80  F027         	call	_dispLogs	;wreg free
 17872                           
 17873                           ;UI.c: 299: }
 17874  002818  D0BC               	goto	i2l257
 17875  00281A                     i2l8612:
 17876                           
 17877                           ;UI.c: 300: else if(back){
 17878  00281A  5059               	movf	_back,w,c
 17879  00281C  105A               	iorwf	_back+1,w,c
 17880  00281E  B4D8               	btfsc	status,2,c
 17881  002820  D0B8               	goto	i2l257
 17882                           
 17883                           ;UI.c: 301: change_state_to_menu_23();
 17884  002822  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17885                           
 17886                           ;UI.c: 302: }
 17887                           ;UI.c: 303: break;
 17888  002826  D0B5               	goto	i2l257
 17889  002828                     i2l8616:
 17890                           
 17891                           ;UI.c: 306: if(up){
 17892  002828  5077               	movf	_up,w,c
 17893  00282A  1078               	iorwf	_up+1,w,c
 17894  00282C  B4D8               	btfsc	status,2,c
 17895  00282E  D003               	goto	i2l8620
 17896                           
 17897                           ;UI.c: 307: change_state_to_logs_11();
 17898  002830  EC94  F026         	call	_change_state_to_logs_11	;wreg free
 17899                           
 17900                           ;UI.c: 308: }
 17901  002834  D0AE               	goto	i2l257
 17902  002836                     i2l8620:
 17903                           
 17904                           ;UI.c: 309: else if(down){
 17905  002836  5061               	movf	_down,w,c
 17906  002838  1062               	iorwf	_down+1,w,c
 17907  00283A  B4D8               	btfsc	status,2,c
 17908  00283C  D003               	goto	i2l8624
 17909                           
 17910                           ;UI.c: 310: change_state_to_logs_23();
 17911  00283E  ECDA  F026         	call	_change_state_to_logs_23	;wreg free
 17912                           
 17913                           ;UI.c: 311: }
 17914  002842  D0A7               	goto	i2l257
 17915  002844                     i2l8624:
 17916                           
 17917                           ;UI.c: 312: else if(enter){
 17918  002844  5063               	movf	_enter,w,c
 17919  002846  1064               	iorwf	_enter+1,w,c
 17920  002848  B4D8               	btfsc	status,2,c
 17921  00284A  D007               	goto	i2l8628
 17922                           
 17923                           ;UI.c: 313: dispLogs(2);
 17924  00284C  0E00               	movlw	0
 17925  00284E  6E13               	movwf	dispLogs@myLog+1,c
 17926  002850  0E02               	movlw	2
 17927  002852  6E12               	movwf	dispLogs@myLog,c
 17928  002854  EC80  F027         	call	_dispLogs	;wreg free
 17929                           
 17930                           ;UI.c: 314: }
 17931  002858  D09C               	goto	i2l257
 17932  00285A                     i2l8628:
 17933                           
 17934                           ;UI.c: 315: else if(back){
 17935  00285A  5059               	movf	_back,w,c
 17936  00285C  105A               	iorwf	_back+1,w,c
 17937  00285E  B4D8               	btfsc	status,2,c
 17938  002860  D098               	goto	i2l257
 17939                           
 17940                           ;UI.c: 316: change_state_to_menu_23();
 17941  002862  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17942                           
 17943                           ;UI.c: 317: }
 17944                           ;UI.c: 318: break;
 17945  002866  D095               	goto	i2l257
 17946  002868                     i2l8632:
 17947                           
 17948                           ;UI.c: 321: if(up){
 17949  002868  5077               	movf	_up,w,c
 17950  00286A  1078               	iorwf	_up+1,w,c
 17951  00286C  B4D8               	btfsc	status,2,c
 17952  00286E  D003               	goto	i2l8636
 17953                           
 17954                           ;UI.c: 322: change_state_to_logs_22();
 17955  002870  EC64  F026         	call	_change_state_to_logs_22	;wreg free
 17956                           
 17957                           ;UI.c: 323: }
 17958  002874  D08E               	goto	i2l257
 17959  002876                     i2l8636:
 17960                           
 17961                           ;UI.c: 324: else if(down){
 17962  002876  5061               	movf	_down,w,c
 17963  002878  1062               	iorwf	_down+1,w,c
 17964  00287A  B4D8               	btfsc	status,2,c
 17965  00287C  D003               	goto	i2l8640
 17966                           
 17967                           ;UI.c: 325: change_state_to_logs_34();
 17968  00287E  EC34  F026         	call	_change_state_to_logs_34	;wreg free
 17969                           
 17970                           ;UI.c: 326: }
 17971  002882  D087               	goto	i2l257
 17972  002884                     i2l8640:
 17973                           
 17974                           ;UI.c: 327: else if(enter){
 17975  002884  5063               	movf	_enter,w,c
 17976  002886  1064               	iorwf	_enter+1,w,c
 17977  002888  B4D8               	btfsc	status,2,c
 17978  00288A  D007               	goto	i2l8644
 17979                           
 17980                           ;UI.c: 328: dispLogs(3);
 17981  00288C  0E00               	movlw	0
 17982  00288E  6E13               	movwf	dispLogs@myLog+1,c
 17983  002890  0E03               	movlw	3
 17984  002892  6E12               	movwf	dispLogs@myLog,c
 17985  002894  EC80  F027         	call	_dispLogs	;wreg free
 17986                           
 17987                           ;UI.c: 329: }
 17988  002898  D07C               	goto	i2l257
 17989  00289A                     i2l8644:
 17990                           
 17991                           ;UI.c: 330: else if(back){
 17992  00289A  5059               	movf	_back,w,c
 17993  00289C  105A               	iorwf	_back+1,w,c
 17994  00289E  B4D8               	btfsc	status,2,c
 17995  0028A0  D078               	goto	i2l257
 17996                           
 17997                           ;UI.c: 331: change_state_to_menu_23();
 17998  0028A2  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 17999                           
 18000                           ;UI.c: 332: }
 18001                           ;UI.c: 333: break;
 18002  0028A6  D075               	goto	i2l257
 18003  0028A8                     i2l8648:
 18004                           
 18005                           ;UI.c: 336: if(up){
 18006  0028A8  5077               	movf	_up,w,c
 18007  0028AA  1078               	iorwf	_up+1,w,c
 18008  0028AC  B4D8               	btfsc	status,2,c
 18009  0028AE  D003               	goto	i2l8652
 18010                           
 18011                           ;UI.c: 337: change_state_to_logs_22();
 18012  0028B0  EC64  F026         	call	_change_state_to_logs_22	;wreg free
 18013                           
 18014                           ;UI.c: 338: }
 18015  0028B4  D06E               	goto	i2l257
 18016  0028B6                     i2l8652:
 18017                           
 18018                           ;UI.c: 339: else if(down){
 18019  0028B6  5061               	movf	_down,w,c
 18020  0028B8  1062               	iorwf	_down+1,w,c
 18021  0028BA  B4D8               	btfsc	status,2,c
 18022  0028BC  D003               	goto	i2l8656
 18023                           
 18024                           ;UI.c: 340: change_state_to_logs_34();
 18025  0028BE  EC34  F026         	call	_change_state_to_logs_34	;wreg free
 18026                           
 18027                           ;UI.c: 341: }
 18028  0028C2  D067               	goto	i2l257
 18029  0028C4                     i2l8656:
 18030                           
 18031                           ;UI.c: 342: else if(enter){
 18032  0028C4  5063               	movf	_enter,w,c
 18033  0028C6  1064               	iorwf	_enter+1,w,c
 18034  0028C8  B4D8               	btfsc	status,2,c
 18035  0028CA  D007               	goto	i2l8660
 18036                           
 18037                           ;UI.c: 343: dispLogs(3);
 18038  0028CC  0E00               	movlw	0
 18039  0028CE  6E13               	movwf	dispLogs@myLog+1,c
 18040  0028D0  0E03               	movlw	3
 18041  0028D2  6E12               	movwf	dispLogs@myLog,c
 18042  0028D4  EC80  F027         	call	_dispLogs	;wreg free
 18043                           
 18044                           ;UI.c: 344: }
 18045  0028D8  D05C               	goto	i2l257
 18046  0028DA                     i2l8660:
 18047                           
 18048                           ;UI.c: 345: else if(back){
 18049  0028DA  5059               	movf	_back,w,c
 18050  0028DC  105A               	iorwf	_back+1,w,c
 18051  0028DE  B4D8               	btfsc	status,2,c
 18052  0028E0  D058               	goto	i2l257
 18053                           
 18054                           ;UI.c: 346: change_state_to_menu_23();
 18055  0028E2  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 18056                           
 18057                           ;UI.c: 347: }
 18058                           ;UI.c: 348: break;
 18059  0028E6  D055               	goto	i2l257
 18060  0028E8                     i2l8664:
 18061                           
 18062                           ;UI.c: 351: if(up){
 18063  0028E8  5077               	movf	_up,w,c
 18064  0028EA  1078               	iorwf	_up+1,w,c
 18065  0028EC  B4D8               	btfsc	status,2,c
 18066  0028EE  D003               	goto	i2l8668
 18067                           
 18068                           ;UI.c: 352: change_state_to_logs_33();
 18069  0028F0  EC4C  F026         	call	_change_state_to_logs_33	;wreg free
 18070                           
 18071                           ;UI.c: 353: }
 18072  0028F4  D04E               	goto	i2l257
 18073  0028F6                     i2l8668:
 18074                           
 18075                           ;UI.c: 354: else if(down){
 18076  0028F6  5061               	movf	_down,w,c
 18077  0028F8  1062               	iorwf	_down+1,w,c
 18078  0028FA  B4D8               	btfsc	status,2,c
 18079  0028FC  D003               	goto	i2l8672
 18080                           
 18081                           ;UI.c: 355: change_state_to_logs_11();
 18082  0028FE  EC94  F026         	call	_change_state_to_logs_11	;wreg free
 18083                           
 18084                           ;UI.c: 356: }
 18085  002902  D047               	goto	i2l257
 18086  002904                     i2l8672:
 18087                           
 18088                           ;UI.c: 357: else if(enter){
 18089  002904  5063               	movf	_enter,w,c
 18090  002906  1064               	iorwf	_enter+1,w,c
 18091  002908  B4D8               	btfsc	status,2,c
 18092  00290A  D007               	goto	i2l8676
 18093                           
 18094                           ;UI.c: 358: dispLogs(4);
 18095  00290C  0E00               	movlw	0
 18096  00290E  6E13               	movwf	dispLogs@myLog+1,c
 18097  002910  0E04               	movlw	4
 18098  002912  6E12               	movwf	dispLogs@myLog,c
 18099  002914  EC80  F027         	call	_dispLogs	;wreg free
 18100                           
 18101                           ;UI.c: 359: }
 18102  002918  D03C               	goto	i2l257
 18103  00291A                     i2l8676:
 18104                           
 18105                           ;UI.c: 360: else if(back){
 18106  00291A  5059               	movf	_back,w,c
 18107  00291C  105A               	iorwf	_back+1,w,c
 18108  00291E  B4D8               	btfsc	status,2,c
 18109  002920  D038               	goto	i2l257
 18110                           
 18111                           ;UI.c: 361: change_state_to_menu_23();
 18112  002922  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 18113                           
 18114                           ;UI.c: 367: }
 18115                           
 18116                           ;UI.c: 366: break;
 18117                           
 18118                           ;UI.c: 365: default:
 18119                           
 18120                           ;UI.c: 362: }
 18121                           ;UI.c: 363: break;
 18122  002926  D035               	goto	i2l257
 18123  002928                     i2l8682:
 18124  002928  C0E6  F043         	movff	_cur_state,??_updateMenu
 18125  00292C  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 18126                           
 18127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18128                           ; Switch size 1, requested type "space"
 18129                           ; Number of cases is 3, Range of values is 0 to 4
 18130                           ; switch strategies available:
 18131                           ; Name         Instructions Cycles
 18132                           ; simple_byte           10     6 (average)
 18133                           ;	Chosen strategy is simple_byte
 18134  002930  5044               	movf	??_updateMenu+1,w,c
 18135  002932  0A00               	xorlw	0	; case 0
 18136  002934  B4D8               	btfsc	status,2,c
 18137  002936  D007               	goto	i2l9366
 18138  002938  0A03               	xorlw	3	; case 3
 18139  00293A  B4D8               	btfsc	status,2,c
 18140  00293C  D015               	goto	i2l9368
 18141  00293E  0A07               	xorlw	7	; case 4
 18142  002940  B4D8               	btfsc	status,2,c
 18143  002942  D020               	goto	i2l9370
 18144  002944  D026               	goto	i2l257
 18145  002946                     i2l9366:
 18146                           
 18147                           ; Switch size 1, requested type "space"
 18148                           ; Number of cases is 5, Range of values is 0 to 23
 18149                           ; switch strategies available:
 18150                           ; Name         Instructions Cycles
 18151                           ; simple_byte           16     9 (average)
 18152                           ;	Chosen strategy is simple_byte
 18153  002946  5043               	movf	??_updateMenu,w,c
 18154  002948  0A00               	xorlw	0	; case 0
 18155  00294A  B4D8               	btfsc	status,2,c
 18156  00294C  D6DC               	goto	i2l8534
 18157  00294E  0A0B               	xorlw	11	; case 11
 18158  002950  B4D8               	btfsc	status,2,c
 18159  002952  D6DC               	goto	i2l8536
 18160  002954  0A07               	xorlw	7	; case 12
 18161  002956  B4D8               	btfsc	status,2,c
 18162  002958  D6EE               	goto	i2l8548
 18163  00295A  0A1A               	xorlw	26	; case 22
 18164  00295C  B4D8               	btfsc	status,2,c
 18165  00295E  D6F9               	goto	i2l8560
 18166  002960  0A01               	xorlw	1	; case 23
 18167  002962  B4D8               	btfsc	status,2,c
 18168  002964  D70C               	goto	i2l8572
 18169  002966  D015               	goto	i2l257
 18170  002968                     i2l9368:
 18171                           
 18172                           ; Switch size 1, requested type "space"
 18173                           ; Number of cases is 4, Range of values is 243 to 255
 18174                           ; switch strategies available:
 18175                           ; Name         Instructions Cycles
 18176                           ; simple_byte           13     7 (average)
 18177                           ;	Chosen strategy is simple_byte
 18178  002968  5043               	movf	??_updateMenu,w,c
 18179  00296A  0AF3               	xorlw	243	; case 243
 18180  00296C  B4D8               	btfsc	status,2,c
 18181  00296E  D71C               	goto	i2l8584
 18182  002970  0A07               	xorlw	7	; case 244
 18183  002972  B4D8               	btfsc	status,2,c
 18184  002974  D739               	goto	i2l8600
 18185  002976  0A0A               	xorlw	10	; case 254
 18186  002978  B4D8               	btfsc	status,2,c
 18187  00297A  D756               	goto	i2l8616
 18188  00297C  0A01               	xorlw	1	; case 255
 18189  00297E  B4D8               	btfsc	status,2,c
 18190  002980  D773               	goto	i2l8632
 18191  002982  D007               	goto	i2l257
 18192  002984                     i2l9370:
 18193                           
 18194                           ; Switch size 1, requested type "space"
 18195                           ; Number of cases is 2, Range of values is 9 to 10
 18196                           ; switch strategies available:
 18197                           ; Name         Instructions Cycles
 18198                           ; simple_byte            7     4 (average)
 18199                           ;	Chosen strategy is simple_byte
 18200  002984  5043               	movf	??_updateMenu,w,c
 18201  002986  0A09               	xorlw	9	; case 9
 18202  002988  B4D8               	btfsc	status,2,c
 18203  00298A  D78E               	goto	i2l8648
 18204  00298C  0A03               	xorlw	3	; case 10
 18205  00298E  B4D8               	btfsc	status,2,c
 18206  002990  D7AB               	goto	i2l8664
 18207  002992                     i2l257:
 18208                           
 18209                           ;UI.c: 368: }
 18210                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18211  002992  8EF2               	bsf	intcon,7,c	;volatile
 18212  002994  0012               	return		;funcret
 18213  002996                     __end_of_updateMenu:
 18214                           	opt stack 0
 18215                           pclatu	equ	0xFFB
 18216                           pclath	equ	0xFFA
 18217                           tblptru	equ	0xFF8
 18218                           tblptrh	equ	0xFF7
 18219                           tblptrl	equ	0xFF6
 18220                           tablat	equ	0xFF5
 18221                           prodh	equ	0xFF4
 18222                           prodl	equ	0xFF3
 18223                           intcon	equ	0xFF2
 18224                           intcon2	equ	0xFF1
 18225                           intcon3	equ	0xFF0
 18226                           indf0	equ	0xFEF
 18227                           postinc0	equ	0xFEE
 18228                           fsr0h	equ	0xFEA
 18229                           fsr0l	equ	0xFE9
 18230                           wreg	equ	0xFE8
 18231                           postdec1	equ	0xFE5
 18232                           fsr1h	equ	0xFE2
 18233                           fsr1l	equ	0xFE1
 18234                           indf2	equ	0xFDF
 18235                           postinc2	equ	0xFDE
 18236                           postdec2	equ	0xFDD
 18237                           fsr2h	equ	0xFDA
 18238                           fsr2l	equ	0xFD9
 18239                           status	equ	0xFD8
 18240                           
 18241 ;; *************** function i2_change_state_to_menu_start *****************
 18242 ;; Defined at:
 18243 ;;		line 474 in file "UI.c"
 18244 ;; Parameters:    Size  Location     Type
 18245 ;;		None
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;		None
 18248 ;; Return value:  Size  Location     Type
 18249 ;;                  1    wreg      void 
 18250 ;; Registers used:
 18251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18252 ;; Tracked objects:
 18253 ;;		On entry : 0/0
 18254 ;;		On exit  : 0/0
 18255 ;;		Unchanged: 0/0
 18256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18261 ;;Total ram usage:        0 bytes
 18262 ;; Hardware stack levels used:    1
 18263 ;; Hardware stack levels required when called:    4
 18264 ;; This function calls:
 18265 ;;		i2_lcdInst
 18266 ;;		i2_printRTC
 18267 ;;		i2_printf
 18268 ;; This function is called by:
 18269 ;;		_updateMenu
 18270 ;; This function uses a non-reentrant model
 18271 ;;
 18272                           
 18273                           	psect	text61
 18274  004E8C                     __ptext61:
 18275                           	opt stack 0
 18276  004E8C                     i2_change_state_to_menu_start:
 18277                           	opt stack 18
 18278                           
 18279                           ;UI.c: 475: cur_state = 0;
 18280                           
 18281                           ;incstack = 0
 18282  004E8C  0E00               	movlw	0
 18283  004E8E  0100               	movlb	0	; () banked
 18284  004E90  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18285  004E92  0E00               	movlw	0
 18286  004E94  6FE6               	movwf	_cur_state& (0+255),b
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;UI.c: 477: lcdInst(0b10000000);;
 18290  004E96  0E80               	movlw	128
 18291  004E98  EC10  F028         	call	i2_lcdInst
 18292                           
 18293                           ;UI.c: 478: printRTC();
 18294  004E9C  ECEF  F015         	call	i2_printRTC	;wreg free
 18295                           
 18296                           ;UI.c: 479: lcdInst(0b11000000);;
 18297  004EA0  0EC0               	movlw	192
 18298  004EA2  EC10  F028         	call	i2_lcdInst
 18299                           
 18300                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18301  004EA6  0EF7               	movlw	low STR_30
 18302  004EA8  6E0D               	movwf	i2printf@f,c
 18303  004EAA  0EFD               	movlw	high STR_30
 18304  004EAC  6E0E               	movwf	i2printf@f+1,c
 18305  004EAE  ECD0  F00E         	call	i2_printf	;wreg free
 18306  004EB2  0012               	return		;funcret
 18307  004EB4                     __end_ofi2_change_state_to_menu_start:
 18308                           	opt stack 0
 18309                           pclatu	equ	0xFFB
 18310                           pclath	equ	0xFFA
 18311                           tblptru	equ	0xFF8
 18312                           tblptrh	equ	0xFF7
 18313                           tblptrl	equ	0xFF6
 18314                           tablat	equ	0xFF5
 18315                           prodh	equ	0xFF4
 18316                           prodl	equ	0xFF3
 18317                           intcon	equ	0xFF2
 18318                           intcon2	equ	0xFF1
 18319                           intcon3	equ	0xFF0
 18320                           indf0	equ	0xFEF
 18321                           postinc0	equ	0xFEE
 18322                           fsr0h	equ	0xFEA
 18323                           fsr0l	equ	0xFE9
 18324                           wreg	equ	0xFE8
 18325                           postdec1	equ	0xFE5
 18326                           fsr1h	equ	0xFE2
 18327                           fsr1l	equ	0xFE1
 18328                           indf2	equ	0xFDF
 18329                           postinc2	equ	0xFDE
 18330                           postdec2	equ	0xFDD
 18331                           fsr2h	equ	0xFDA
 18332                           fsr2l	equ	0xFD9
 18333                           status	equ	0xFD8
 18334                           
 18335 ;; *************** function i2_printRTC *****************
 18336 ;; Defined at:
 18337 ;;		line 63 in file "RTC.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;		None
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;  printRTC       14   44[COMRAM] int [7]
 18342 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18343 ;;  printRTC        2   64[COMRAM] int 
 18344 ;;  printRTC        2   58[COMRAM] int 
 18345 ;; Return value:  Size  Location     Type
 18346 ;;                  1    wreg      void 
 18347 ;; Registers used:
 18348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18349 ;; Tracked objects:
 18350 ;;		On entry : 0/0
 18351 ;;		On exit  : 0/0
 18352 ;;		Unchanged: 0/0
 18353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18356 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18357 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18358 ;;Total ram usage:       25 bytes
 18359 ;; Hardware stack levels used:    1
 18360 ;; Hardware stack levels required when called:    3
 18361 ;; This function calls:
 18362 ;;		i2_getRTC
 18363 ;;		i2_lcdInst
 18364 ;;		i2_printf
 18365 ;;		i2_strcpy
 18366 ;; This function is called by:
 18367 ;;		i2_change_state_to_menu_start
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           	psect	text62
 18372  002BDE                     __ptext62:
 18373                           	opt stack 0
 18374  002BDE                     i2_printRTC:
 18375                           	opt stack 18
 18376                           
 18377                           ;RTC.c: 64: getRTC();
 18378                           
 18379                           ;incstack = 0
 18380  002BDE  ECD2  F022         	call	i2_getRTC	;wreg free
 18381                           
 18382                           ;RTC.c: 65: char month[] = "MMM";
 18383  002BE2  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 18384  002BE6  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18385  002BEA  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18386  002BEE  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18387                           
 18388                           ;RTC.c: 66: int INT_time[7];
 18389                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18390  002BF2  0E00               	movlw	0
 18391  002BF4  6E42               	movwf	i2printRTC@i+1,c
 18392  002BF6  0E00               	movlw	0
 18393  002BF8  6E41               	movwf	i2printRTC@i,c
 18394  002BFA  BE42               	btfsc	i2printRTC@i+1,7,c
 18395  002BFC  D006               	goto	i2l6648
 18396  002BFE  5042               	movf	i2printRTC@i+1,w,c
 18397  002C00  E135               	bnz	i2l606
 18398  002C02  0E07               	movlw	7
 18399  002C04  5C41               	subwf	i2printRTC@i,w,c
 18400  002C06  B0D8               	btfsc	status,0,c
 18401  002C08  D031               	goto	i2l606
 18402  002C0A                     i2l6648:
 18403                           
 18404                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18405  002C0A  0E24               	movlw	low _time
 18406  002C0C  2441               	addwf	i2printRTC@i,w,c
 18407  002C0E  6ED9               	movwf	fsr2l,c
 18408  002C10  0E01               	movlw	high _time
 18409  002C12  2042               	addwfc	i2printRTC@i+1,w,c
 18410  002C14  6EDA               	movwf	fsr2h,c
 18411  002C16  50DF               	movf	indf2,w,c
 18412  002C18  6E2A               	movwf	??i2_printRTC& (0+255),c
 18413  002C1A  3A2A               	swapf	??i2_printRTC,f,c
 18414  002C1C  0E0F               	movlw	15
 18415  002C1E  162A               	andwf	??i2_printRTC,f,c
 18416  002C20  0E0F               	movlw	15
 18417  002C22  162A               	andwf	??i2_printRTC,f,c
 18418  002C24  502A               	movf	??i2_printRTC,w,c
 18419  002C26  0D0A               	mullw	10
 18420  002C28  0E24               	movlw	low _time
 18421  002C2A  2441               	addwf	i2printRTC@i,w,c
 18422  002C2C  6ED9               	movwf	fsr2l,c
 18423  002C2E  0E01               	movlw	high _time
 18424  002C30  2042               	addwfc	i2printRTC@i+1,w,c
 18425  002C32  6EDA               	movwf	fsr2h,c
 18426  002C34  50DF               	movf	indf2,w,c
 18427  002C36  0B0F               	andlw	15
 18428  002C38  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18429  002C3A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18430  002C3C  50F3               	movf	prodl,w,c
 18431  002C3E  262B               	addwf	??i2_printRTC+1,f,c
 18432  002C40  50F4               	movf	prodh,w,c
 18433  002C42  222C               	addwfc	??i2_printRTC+2,f,c
 18434  002C44  90D8               	bcf	status,0,c
 18435  002C46  3441               	rlcf	i2printRTC@i,w,c
 18436  002C48  6ED9               	movwf	fsr2l,c
 18437  002C4A  3442               	rlcf	i2printRTC@i+1,w,c
 18438  002C4C  6EDA               	movwf	fsr2h,c
 18439  002C4E  0E2D               	movlw	low i2printRTC@INT_time
 18440  002C50  26D9               	addwf	fsr2l,f,c
 18441  002C52  0E00               	movlw	high i2printRTC@INT_time
 18442  002C54  22DA               	addwfc	fsr2h,f,c
 18443  002C56  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18444  002C5A  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18445  002C5E  4A41               	infsnz	i2printRTC@i,f,c
 18446  002C60  2A42               	incf	i2printRTC@i+1,f,c
 18447  002C62  BE42               	btfsc	i2printRTC@i+1,7,c
 18448  002C64  D7D2               	goto	i2l6648
 18449  002C66  5042               	movf	i2printRTC@i+1,w,c
 18450  002C68  E101               	bnz	i2u526_40
 18451  002C6A  D7CB               	goto	L13
 18452  002C6C                     i2u526_40:
 18453  002C6C                     i2l606:
 18454                           
 18455                           ;RTC.c: 69: }
 18456                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18457  002C6C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18458  002C70  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18459                           
 18460                           ;RTC.c: 71: switch(RTC_month){
 18461  002C74  D084               	goto	i2l6680
 18462  002C76                     i2l6654:
 18463                           
 18464                           ;RTC.c: 73: strcpy(month, "JAN");
 18465  002C76  0E3D               	movlw	low i2printRTC@month
 18466  002C78  6E01               	movwf	i2strcpy@to,c
 18467  002C7A  0E00               	movlw	high i2printRTC@month
 18468  002C7C  6E02               	movwf	i2strcpy@to+1,c
 18469  002C7E  0EDB               	movlw	low STR_8
 18470  002C80  6E03               	movwf	i2strcpy@from,c
 18471  002C82  0EFF               	movlw	high STR_8
 18472  002C84  6E04               	movwf	i2strcpy@from+1,c
 18473  002C86  ECBB  F025         	call	i2_strcpy	;wreg free
 18474                           
 18475                           ;RTC.c: 74: break;
 18476  002C8A  D0A6               	goto	i2l6682
 18477  002C8C                     i2l6656:
 18478                           
 18479                           ;RTC.c: 76: strcpy(month, "FEB");
 18480  002C8C  0E3D               	movlw	low i2printRTC@month
 18481  002C8E  6E01               	movwf	i2strcpy@to,c
 18482  002C90  0E00               	movlw	high i2printRTC@month
 18483  002C92  6E02               	movwf	i2strcpy@to+1,c
 18484  002C94  0ECB               	movlw	low STR_9
 18485  002C96  6E03               	movwf	i2strcpy@from,c
 18486  002C98  0EFF               	movlw	high STR_9
 18487  002C9A  6E04               	movwf	i2strcpy@from+1,c
 18488  002C9C  ECBB  F025         	call	i2_strcpy	;wreg free
 18489                           
 18490                           ;RTC.c: 77: break;
 18491  002CA0  D09B               	goto	i2l6682
 18492  002CA2                     i2l6658:
 18493                           
 18494                           ;RTC.c: 79: strcpy(month, "MAR");
 18495  002CA2  0E3D               	movlw	low i2printRTC@month
 18496  002CA4  6E01               	movwf	i2strcpy@to,c
 18497  002CA6  0E00               	movlw	high i2printRTC@month
 18498  002CA8  6E02               	movwf	i2strcpy@to+1,c
 18499  002CAA  0EE7               	movlw	low STR_10
 18500  002CAC  6E03               	movwf	i2strcpy@from,c
 18501  002CAE  0EFF               	movlw	high STR_10
 18502  002CB0  6E04               	movwf	i2strcpy@from+1,c
 18503  002CB2  ECBB  F025         	call	i2_strcpy	;wreg free
 18504                           
 18505                           ;RTC.c: 80: break;
 18506  002CB6  D090               	goto	i2l6682
 18507  002CB8                     i2l6660:
 18508                           
 18509                           ;RTC.c: 82: strcpy(month, "APR");
 18510  002CB8  0E3D               	movlw	low i2printRTC@month
 18511  002CBA  6E01               	movwf	i2strcpy@to,c
 18512  002CBC  0E00               	movlw	high i2printRTC@month
 18513  002CBE  6E02               	movwf	i2strcpy@to+1,c
 18514  002CC0  0EEB               	movlw	low STR_11
 18515  002CC2  6E03               	movwf	i2strcpy@from,c
 18516  002CC4  0EFF               	movlw	high STR_11
 18517  002CC6  6E04               	movwf	i2strcpy@from+1,c
 18518  002CC8  ECBB  F025         	call	i2_strcpy	;wreg free
 18519                           
 18520                           ;RTC.c: 83: break;
 18521  002CCC  D085               	goto	i2l6682
 18522  002CCE                     i2l6662:
 18523                           
 18524                           ;RTC.c: 85: strcpy(month, "MAY");
 18525  002CCE  0E3D               	movlw	low i2printRTC@month
 18526  002CD0  6E01               	movwf	i2strcpy@to,c
 18527  002CD2  0E00               	movlw	high i2printRTC@month
 18528  002CD4  6E02               	movwf	i2strcpy@to+1,c
 18529  002CD6  0EFB               	movlw	low STR_12
 18530  002CD8  6E03               	movwf	i2strcpy@from,c
 18531  002CDA  0EFF               	movlw	high STR_12
 18532  002CDC  6E04               	movwf	i2strcpy@from+1,c
 18533  002CDE  ECBB  F025         	call	i2_strcpy	;wreg free
 18534                           
 18535                           ;RTC.c: 86: break;
 18536  002CE2  D07A               	goto	i2l6682
 18537  002CE4                     i2l6664:
 18538                           
 18539                           ;RTC.c: 88: strcpy(month, "JUN");
 18540  002CE4  0E3D               	movlw	low i2printRTC@month
 18541  002CE6  6E01               	movwf	i2strcpy@to,c
 18542  002CE8  0E00               	movlw	high i2printRTC@month
 18543  002CEA  6E02               	movwf	i2strcpy@to+1,c
 18544  002CEC  0EDF               	movlw	low STR_13
 18545  002CEE  6E03               	movwf	i2strcpy@from,c
 18546  002CF0  0EFF               	movlw	high STR_13
 18547  002CF2  6E04               	movwf	i2strcpy@from+1,c
 18548  002CF4  ECBB  F025         	call	i2_strcpy	;wreg free
 18549                           
 18550                           ;RTC.c: 89: break;
 18551  002CF8  D06F               	goto	i2l6682
 18552  002CFA                     i2l6666:
 18553                           
 18554                           ;RTC.c: 91: strcpy(month, "JUL");
 18555  002CFA  0E3D               	movlw	low i2printRTC@month
 18556  002CFC  6E01               	movwf	i2strcpy@to,c
 18557  002CFE  0E00               	movlw	high i2printRTC@month
 18558  002D00  6E02               	movwf	i2strcpy@to+1,c
 18559  002D02  0ED7               	movlw	low STR_14
 18560  002D04  6E03               	movwf	i2strcpy@from,c
 18561  002D06  0EFF               	movlw	high STR_14
 18562  002D08  6E04               	movwf	i2strcpy@from+1,c
 18563  002D0A  ECBB  F025         	call	i2_strcpy	;wreg free
 18564                           
 18565                           ;RTC.c: 92: break;
 18566  002D0E  D064               	goto	i2l6682
 18567  002D10                     i2l6668:
 18568                           
 18569                           ;RTC.c: 94: strcpy(month, "AUG");
 18570  002D10  0E3D               	movlw	low i2printRTC@month
 18571  002D12  6E01               	movwf	i2strcpy@to,c
 18572  002D14  0E00               	movlw	high i2printRTC@month
 18573  002D16  6E02               	movwf	i2strcpy@to+1,c
 18574  002D18  0ED3               	movlw	low STR_15
 18575  002D1A  6E03               	movwf	i2strcpy@from,c
 18576  002D1C  0EFF               	movlw	high STR_15
 18577  002D1E  6E04               	movwf	i2strcpy@from+1,c
 18578  002D20  ECBB  F025         	call	i2_strcpy	;wreg free
 18579                           
 18580                           ;RTC.c: 95: break;
 18581  002D24  D059               	goto	i2l6682
 18582  002D26                     i2l6670:
 18583                           
 18584                           ;RTC.c: 97: strcpy(month, "SEP");
 18585  002D26  0E3D               	movlw	low i2printRTC@month
 18586  002D28  6E01               	movwf	i2strcpy@to,c
 18587  002D2A  0E00               	movlw	high i2printRTC@month
 18588  002D2C  6E02               	movwf	i2strcpy@to+1,c
 18589  002D2E  0EE3               	movlw	low STR_16
 18590  002D30  6E03               	movwf	i2strcpy@from,c
 18591  002D32  0EFF               	movlw	high STR_16
 18592  002D34  6E04               	movwf	i2strcpy@from+1,c
 18593  002D36  ECBB  F025         	call	i2_strcpy	;wreg free
 18594                           
 18595                           ;RTC.c: 98: break;
 18596  002D3A  D04E               	goto	i2l6682
 18597  002D3C                     i2l6672:
 18598                           
 18599                           ;RTC.c: 100: strcpy(month, "OCT");
 18600  002D3C  0E3D               	movlw	low i2printRTC@month
 18601  002D3E  6E01               	movwf	i2strcpy@to,c
 18602  002D40  0E00               	movlw	high i2printRTC@month
 18603  002D42  6E02               	movwf	i2strcpy@to+1,c
 18604  002D44  0EF3               	movlw	low STR_17
 18605  002D46  6E03               	movwf	i2strcpy@from,c
 18606  002D48  0EFF               	movlw	high STR_17
 18607  002D4A  6E04               	movwf	i2strcpy@from+1,c
 18608  002D4C  ECBB  F025         	call	i2_strcpy	;wreg free
 18609                           
 18610                           ;RTC.c: 101: break;
 18611  002D50  D043               	goto	i2l6682
 18612  002D52                     i2l6674:
 18613                           
 18614                           ;RTC.c: 103: strcpy(month, "NOV");
 18615  002D52  0E3D               	movlw	low i2printRTC@month
 18616  002D54  6E01               	movwf	i2strcpy@to,c
 18617  002D56  0E00               	movlw	high i2printRTC@month
 18618  002D58  6E02               	movwf	i2strcpy@to+1,c
 18619  002D5A  0EF7               	movlw	low STR_18
 18620  002D5C  6E03               	movwf	i2strcpy@from,c
 18621  002D5E  0EFF               	movlw	high STR_18
 18622  002D60  6E04               	movwf	i2strcpy@from+1,c
 18623  002D62  ECBB  F025         	call	i2_strcpy	;wreg free
 18624                           
 18625                           ;RTC.c: 104: break;
 18626  002D66  D038               	goto	i2l6682
 18627  002D68                     i2l6676:
 18628                           
 18629                           ;RTC.c: 106: strcpy(month, "DEC");
 18630  002D68  0E3D               	movlw	low i2printRTC@month
 18631  002D6A  6E01               	movwf	i2strcpy@to,c
 18632  002D6C  0E00               	movlw	high i2printRTC@month
 18633  002D6E  6E02               	movwf	i2strcpy@to+1,c
 18634  002D70  0ECF               	movlw	low STR_19
 18635  002D72  6E03               	movwf	i2strcpy@from,c
 18636  002D74  0EFF               	movlw	high STR_19
 18637  002D76  6E04               	movwf	i2strcpy@from+1,c
 18638  002D78  ECBB  F025         	call	i2_strcpy	;wreg free
 18639                           
 18640                           ;RTC.c: 108: }
 18641                           
 18642                           ;RTC.c: 107: break;
 18643  002D7C  D02D               	goto	i2l6682
 18644  002D7E                     i2l6680:
 18645  002D7E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18646  002D82  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18647                           
 18648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18649                           ; Switch size 1, requested type "space"
 18650                           ; Number of cases is 1, Range of values is 0 to 0
 18651                           ; switch strategies available:
 18652                           ; Name         Instructions Cycles
 18653                           ; simple_byte            4     3 (average)
 18654                           ;	Chosen strategy is simple_byte
 18655  002D86  502B               	movf	??i2_printRTC+1,w,c
 18656  002D88  0A00               	xorlw	0	; case 0
 18657  002D8A  A4D8               	btfss	status,2,c
 18658  002D8C  D025               	goto	i2l6682
 18659                           
 18660                           ; Switch size 1, requested type "space"
 18661                           ; Number of cases is 12, Range of values is 1 to 12
 18662                           ; switch strategies available:
 18663                           ; Name         Instructions Cycles
 18664                           ; simple_byte           37    19 (average)
 18665                           ;	Chosen strategy is simple_byte
 18666  002D8E  502A               	movf	??i2_printRTC,w,c
 18667  002D90  0A01               	xorlw	1	; case 1
 18668  002D92  B4D8               	btfsc	status,2,c
 18669  002D94  D770               	goto	i2l6654
 18670  002D96  0A03               	xorlw	3	; case 2
 18671  002D98  B4D8               	btfsc	status,2,c
 18672  002D9A  D778               	goto	i2l6656
 18673  002D9C  0A01               	xorlw	1	; case 3
 18674  002D9E  B4D8               	btfsc	status,2,c
 18675  002DA0  D780               	goto	i2l6658
 18676  002DA2  0A07               	xorlw	7	; case 4
 18677  002DA4  B4D8               	btfsc	status,2,c
 18678  002DA6  D788               	goto	i2l6660
 18679  002DA8  0A01               	xorlw	1	; case 5
 18680  002DAA  B4D8               	btfsc	status,2,c
 18681  002DAC  D790               	goto	i2l6662
 18682  002DAE  0A03               	xorlw	3	; case 6
 18683  002DB0  B4D8               	btfsc	status,2,c
 18684  002DB2  D798               	goto	i2l6664
 18685  002DB4  0A01               	xorlw	1	; case 7
 18686  002DB6  B4D8               	btfsc	status,2,c
 18687  002DB8  D7A0               	goto	i2l6666
 18688  002DBA  0A0F               	xorlw	15	; case 8
 18689  002DBC  B4D8               	btfsc	status,2,c
 18690  002DBE  D7A8               	goto	i2l6668
 18691  002DC0  0A01               	xorlw	1	; case 9
 18692  002DC2  B4D8               	btfsc	status,2,c
 18693  002DC4  D7B0               	goto	i2l6670
 18694  002DC6  0A03               	xorlw	3	; case 10
 18695  002DC8  B4D8               	btfsc	status,2,c
 18696  002DCA  D7B8               	goto	i2l6672
 18697  002DCC  0A01               	xorlw	1	; case 11
 18698  002DCE  B4D8               	btfsc	status,2,c
 18699  002DD0  D7C0               	goto	i2l6674
 18700  002DD2  0A07               	xorlw	7	; case 12
 18701  002DD4  B4D8               	btfsc	status,2,c
 18702  002DD6  D7C8               	goto	i2l6676
 18703  002DD8                     i2l6682:
 18704                           
 18705                           ;RTC.c: 109: lcdInst(0b10000000);;
 18706  002DD8  0E80               	movlw	128
 18707  002DDA  EC10  F028         	call	i2_lcdInst
 18708                           
 18709                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18710  002DDE  0E0A               	movlw	low STR_21
 18711  002DE0  6E0D               	movwf	i2printf@f,c
 18712  002DE2  0EFB               	movlw	high STR_21
 18713  002DE4  6E0E               	movwf	i2printf@f+1,c
 18714  002DE6  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18715  002DEA  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18716  002DEE  0E3D               	movlw	low i2printRTC@month
 18717  002DF0  6E11               	movwf	?i2_printf+4,c
 18718  002DF2  0E00               	movlw	high i2printRTC@month
 18719  002DF4  6E12               	movwf	?i2_printf+5,c
 18720  002DF6  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18721  002DFA  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18722  002DFE  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18723  002E02  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18724  002E06  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18725  002E0A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18726  002E0E  ECD0  F00E         	call	i2_printf	;wreg free
 18727  002E12  0012               	return		;funcret
 18728  002E14                     __end_ofi2_printRTC:
 18729                           	opt stack 0
 18730                           pclatu	equ	0xFFB
 18731                           pclath	equ	0xFFA
 18732                           tblptru	equ	0xFF8
 18733                           tblptrh	equ	0xFF7
 18734                           tblptrl	equ	0xFF6
 18735                           tablat	equ	0xFF5
 18736                           prodh	equ	0xFF4
 18737                           prodl	equ	0xFF3
 18738                           intcon	equ	0xFF2
 18739                           intcon2	equ	0xFF1
 18740                           intcon3	equ	0xFF0
 18741                           indf0	equ	0xFEF
 18742                           postinc0	equ	0xFEE
 18743                           fsr0h	equ	0xFEA
 18744                           fsr0l	equ	0xFE9
 18745                           wreg	equ	0xFE8
 18746                           postdec1	equ	0xFE5
 18747                           fsr1h	equ	0xFE2
 18748                           fsr1l	equ	0xFE1
 18749                           indf2	equ	0xFDF
 18750                           postinc2	equ	0xFDE
 18751                           postdec2	equ	0xFDD
 18752                           fsr2h	equ	0xFDA
 18753                           fsr2l	equ	0xFD9
 18754                           status	equ	0xFD8
 18755                           
 18756 ;; *************** function i2_strcpy *****************
 18757 ;; Defined at:
 18758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18759 ;; Parameters:    Size  Location     Type
 18760 ;;  to              2    0[COMRAM] PTR unsigned char 
 18761 ;;		 -> printRTC@month(4), UI@month(4), 
 18762 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18763 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18764 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18765 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18766 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18767 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18768 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18769 ;;		 -> STR_8(4), 
 18770 ;; Auto vars:     Size  Location     Type
 18771 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18772 ;;		 -> printRTC@month(4), UI@month(4), 
 18773 ;; Return value:  Size  Location     Type
 18774 ;;                  2    0[COMRAM] PTR unsigned char 
 18775 ;; Registers used:
 18776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18786 ;;Total ram usage:        6 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; This function calls:
 18789 ;;		Nothing
 18790 ;; This function is called by:
 18791 ;;		i2_printRTC
 18792 ;; This function uses a non-reentrant model
 18793 ;;
 18794                           
 18795                           	psect	text63
 18796  004B76                     __ptext63:
 18797                           	opt stack 0
 18798  004B76                     i2_strcpy:
 18799                           	opt stack 20
 18800                           
 18801                           ;incstack = 0
 18802  004B76  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18803  004B7A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18804  004B7E  D004               	goto	i2l6306
 18805  004B80                     i2l6304:
 18806  004B80  4A05               	infsnz	i2strcpy@cp,f,c
 18807  004B82  2A06               	incf	i2strcpy@cp+1,f,c
 18808  004B84  4A03               	infsnz	i2strcpy@from,f,c
 18809  004B86  2A04               	incf	i2strcpy@from+1,f,c
 18810  004B88                     i2l6306:
 18811  004B88  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18812  004B8C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18813  004B90                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18814  004B90  6AF8               	clrf	tblptru,c
 18815  004B92                     	endif
 18816  004B92                     	if	0	;tblptru may be non-zero
 18817  004B92                     	endif
 18818  004B92  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18819  004B96  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18820  004B9A  0008               	tblrd		*
 18821  004B9C  CFF5 FFDF          	movff	tablat,indf2
 18822  004BA0  50DF               	movf	indf2,w,c
 18823  004BA2  B4D8               	btfsc	status,2,c
 18824  004BA4  0012               	return	
 18825  004BA6  D7EC               	goto	i2l6304
 18826  004BA8                     __end_ofi2_strcpy:
 18827                           	opt stack 0
 18828                           pclatu	equ	0xFFB
 18829                           pclath	equ	0xFFA
 18830                           tblptru	equ	0xFF8
 18831                           tblptrh	equ	0xFF7
 18832                           tblptrl	equ	0xFF6
 18833                           tablat	equ	0xFF5
 18834                           prodh	equ	0xFF4
 18835                           prodl	equ	0xFF3
 18836                           intcon	equ	0xFF2
 18837                           intcon2	equ	0xFF1
 18838                           intcon3	equ	0xFF0
 18839                           indf0	equ	0xFEF
 18840                           postinc0	equ	0xFEE
 18841                           fsr0h	equ	0xFEA
 18842                           fsr0l	equ	0xFE9
 18843                           wreg	equ	0xFE8
 18844                           postdec1	equ	0xFE5
 18845                           fsr1h	equ	0xFE2
 18846                           fsr1l	equ	0xFE1
 18847                           indf2	equ	0xFDF
 18848                           postinc2	equ	0xFDE
 18849                           postdec2	equ	0xFDD
 18850                           fsr2h	equ	0xFDA
 18851                           fsr2l	equ	0xFD9
 18852                           status	equ	0xFD8
 18853                           
 18854 ;; *************** function _inputHandler *****************
 18855 ;; Defined at:
 18856 ;;		line 372 in file "UI.c"
 18857 ;; Parameters:    Size  Location     Type
 18858 ;;		None
 18859 ;; Auto vars:     Size  Location     Type
 18860 ;;		None
 18861 ;; Return value:  Size  Location     Type
 18862 ;;                  2   41[COMRAM] int 
 18863 ;; Registers used:
 18864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18865 ;; Tracked objects:
 18866 ;;		On entry : 0/0
 18867 ;;		On exit  : 0/0
 18868 ;;		Unchanged: 0/0
 18869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;Total ram usage:        4 bytes
 18875 ;; Hardware stack levels used:    1
 18876 ;; Hardware stack levels required when called:    4
 18877 ;; This function calls:
 18878 ;;		_change_state_to_logs_11
 18879 ;;		_change_state_to_logs_12
 18880 ;;		_change_state_to_logs_22
 18881 ;;		_change_state_to_logs_23
 18882 ;;		_change_state_to_logs_33
 18883 ;;		_change_state_to_logs_34
 18884 ;;		_change_state_to_menu_11
 18885 ;;		_change_state_to_menu_23
 18886 ;;		i2_change_state_to_menu_12
 18887 ;;		i2_change_state_to_menu_22
 18888 ;; This function is called by:
 18889 ;;		_updateMenu
 18890 ;; This function uses a non-reentrant model
 18891 ;;
 18892                           
 18893                           	psect	text64
 18894  003242                     __ptext64:
 18895                           	opt stack 0
 18896  003242                     _inputHandler:
 18897                           	opt stack 18
 18898                           
 18899                           ;UI.c: 377: if(firstboot){
 18900                           
 18901                           ;incstack = 0
 18902  003242  506F               	movf	_firstboot,w,c
 18903  003244  1070               	iorwf	_firstboot+1,w,c
 18904  003246  B4D8               	btfsc	status,2,c
 18905  003248  D00B               	goto	i2l6750
 18906                           
 18907                           ;UI.c: 378: change_state_to_menu_11();
 18908  00324A  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 18909                           
 18910                           ;UI.c: 379: firstboot = 0;
 18911  00324E  0E00               	movlw	0
 18912  003250  6E70               	movwf	_firstboot+1,c
 18913  003252  0E00               	movlw	0
 18914  003254  6E6F               	movwf	_firstboot,c
 18915                           
 18916                           ;UI.c: 380: return 0;
 18917  003256  0E00               	movlw	0
 18918  003258  6E2B               	movwf	?_inputHandler+1,c
 18919  00325A  0E00               	movlw	0
 18920  00325C  6E2A               	movwf	?_inputHandler,c
 18921  00325E  0012               	return	
 18922  003260                     i2l6750:
 18923                           
 18924                           ;UI.c: 381: }
 18925                           ;UI.c: 382: if (logstate){
 18926  003260  0100               	movlb	0	; () banked
 18927  003262  51F6               	movf	_logstate& (0+255),w,b
 18928  003264  0100               	movlb	0	; () banked
 18929  003266  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18930  003268  B4D8               	btfsc	status,2,c
 18931  00326A  D0C7               	goto	i2l6868
 18932                           
 18933                           ; BSR set to: 0
 18934                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18935  00326C  0E43               	movlw	67
 18936  00326E  187D               	xorwf	_input,w,c	;volatile
 18937  003270  A4D8               	btfss	status,2,c
 18938  003272  D012               	goto	i2l6768
 18939                           
 18940                           ; BSR set to: 0
 18941  003274  B281               	btfsc	3969,1,c	;volatile
 18942  003276  D009               	goto	i2l6760
 18943  003278  D00F               	goto	i2l6768
 18944  00327A                     i2l6758:
 18945                           
 18946                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 18947  00327A  0E68               	movlw	104
 18948  00327C  6E2C               	movwf	??_inputHandler& (0+255),c
 18949  00327E  0EE4               	movlw	228
 18950  003280                     i2u977_47:
 18951  003280  2EE8               	decfsz	wreg,f,c
 18952  003282  D7FE               	bra	i2u977_47
 18953  003284  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 18954  003286  D7FC               	bra	i2u977_47
 18955  003288  D000               	nop2	
 18956  00328A                     i2l6760:
 18957  00328A  B281               	btfsc	3969,1,c	;volatile
 18958  00328C  D7F6               	goto	i2l6758
 18959  00328E                     i2l6762:
 18960                           
 18961                           ;UI.c: 387: }
 18962                           ;UI.c: 388: return 0;
 18963  00328E  0E00               	movlw	0
 18964  003290  6E2B               	movwf	?_inputHandler+1,c
 18965  003292  0E00               	movlw	0
 18966  003294  6E2A               	movwf	?_inputHandler,c
 18967  003296  0012               	return	
 18968  003298                     i2l6768:
 18969                           
 18970                           ;UI.c: 390: else if (input == 'D'){
 18971  003298  0E44               	movlw	68
 18972  00329A  187D               	xorwf	_input,w,c	;volatile
 18973  00329C  A4D8               	btfss	status,2,c
 18974  00329E  D7F7               	goto	i2l6762
 18975                           
 18976                           ;UI.c: 392: logstate = 0;
 18977  0032A0  0E00               	movlw	0
 18978  0032A2  0100               	movlb	0	; () banked
 18979  0032A4  6FF7               	movwf	(_logstate+1)& (0+255),b
 18980  0032A6  0E00               	movlw	0
 18981  0032A8  6FF6               	movwf	_logstate& (0+255),b
 18982                           
 18983                           ;UI.c: 393: switch(cur_state){
 18984  0032AA  D012               	goto	i2l6786
 18985  0032AC                     i2l6772:
 18986                           
 18987                           ;UI.c: 395: change_state_to_logs_11();
 18988  0032AC  EC94  F026         	call	_change_state_to_logs_11	;wreg free
 18989                           
 18990                           ;UI.c: 396: break;
 18991  0032B0  D7EE               	goto	i2l6762
 18992  0032B2                     i2l6774:
 18993                           
 18994                           ;UI.c: 398: change_state_to_logs_12();
 18995  0032B2  EC7C  F026         	call	_change_state_to_logs_12	;wreg free
 18996                           
 18997                           ;UI.c: 399: break;
 18998  0032B6  D7EB               	goto	i2l6762
 18999  0032B8                     i2l6776:
 19000                           
 19001                           ;UI.c: 401: change_state_to_logs_22();
 19002  0032B8  EC64  F026         	call	_change_state_to_logs_22	;wreg free
 19003                           
 19004                           ;UI.c: 402: break;
 19005  0032BC  D7E8               	goto	i2l6762
 19006  0032BE                     i2l6778:
 19007                           
 19008                           ;UI.c: 404: change_state_to_logs_23();
 19009  0032BE  ECDA  F026         	call	_change_state_to_logs_23	;wreg free
 19010                           
 19011                           ;UI.c: 405: break;
 19012  0032C2  D7E5               	goto	i2l6762
 19013  0032C4                     i2l6780:
 19014                           
 19015                           ;UI.c: 407: change_state_to_logs_33();
 19016  0032C4  EC4C  F026         	call	_change_state_to_logs_33	;wreg free
 19017                           
 19018                           ;UI.c: 408: break;
 19019  0032C8  D7E2               	goto	i2l6762
 19020  0032CA                     i2l6782:
 19021                           
 19022                           ;UI.c: 410: change_state_to_logs_34();
 19023  0032CA  EC34  F026         	call	_change_state_to_logs_34	;wreg free
 19024                           
 19025                           ;UI.c: 412: }
 19026                           
 19027                           ;UI.c: 411: break;
 19028  0032CE  D7DF               	goto	i2l6762
 19029  0032D0                     i2l6786:
 19030  0032D0  C0E6  F02C         	movff	_cur_state,??_inputHandler
 19031  0032D4  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 19032                           
 19033                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19034                           ; Switch size 1, requested type "space"
 19035                           ; Number of cases is 2, Range of values is 3 to 4
 19036                           ; switch strategies available:
 19037                           ; Name         Instructions Cycles
 19038                           ; simple_byte            7     4 (average)
 19039                           ;	Chosen strategy is simple_byte
 19040  0032D8  502D               	movf	??_inputHandler+1,w,c
 19041  0032DA  0A03               	xorlw	3	; case 3
 19042  0032DC  B4D8               	btfsc	status,2,c
 19043  0032DE  D004               	goto	i2l9374
 19044  0032E0  0A07               	xorlw	7	; case 4
 19045  0032E2  B4D8               	btfsc	status,2,c
 19046  0032E4  D00F               	goto	i2l9376
 19047  0032E6  D7D3               	goto	i2l6762
 19048  0032E8                     i2l9374:
 19049                           
 19050                           ; Switch size 1, requested type "space"
 19051                           ; Number of cases is 4, Range of values is 243 to 255
 19052                           ; switch strategies available:
 19053                           ; Name         Instructions Cycles
 19054                           ; simple_byte           13     7 (average)
 19055                           ;	Chosen strategy is simple_byte
 19056  0032E8  502C               	movf	??_inputHandler,w,c
 19057  0032EA  0AF3               	xorlw	243	; case 243
 19058  0032EC  B4D8               	btfsc	status,2,c
 19059  0032EE  D7DE               	goto	i2l6772
 19060  0032F0  0A07               	xorlw	7	; case 244
 19061  0032F2  B4D8               	btfsc	status,2,c
 19062  0032F4  D7DE               	goto	i2l6774
 19063  0032F6  0A0A               	xorlw	10	; case 254
 19064  0032F8  B4D8               	btfsc	status,2,c
 19065  0032FA  D7DE               	goto	i2l6776
 19066  0032FC  0A01               	xorlw	1	; case 255
 19067  0032FE  B4D8               	btfsc	status,2,c
 19068  003300  D7DE               	goto	i2l6778
 19069  003302  D7C5               	goto	i2l6762
 19070  003304                     i2l9376:
 19071                           
 19072                           ; Switch size 1, requested type "space"
 19073                           ; Number of cases is 2, Range of values is 9 to 10
 19074                           ; switch strategies available:
 19075                           ; Name         Instructions Cycles
 19076                           ; simple_byte            7     4 (average)
 19077                           ;	Chosen strategy is simple_byte
 19078  003304  502C               	movf	??_inputHandler,w,c
 19079  003306  0A09               	xorlw	9	; case 9
 19080  003308  B4D8               	btfsc	status,2,c
 19081  00330A  D7DC               	goto	i2l6780
 19082  00330C  0A03               	xorlw	3	; case 10
 19083  00330E  B4D8               	btfsc	status,2,c
 19084  003310  D7DC               	goto	i2l6782
 19085  003312  D7BD               	goto	i2l6762
 19086  003314                     i2l6798:
 19087                           
 19088                           ;UI.c: 422: if(cur_state == 11){
 19089  003314  0E0B               	movlw	11
 19090  003316  0100               	movlb	0	; () banked
 19091  003318  19E6               	xorwf	_cur_state& (0+255),w,b
 19092  00331A  0100               	movlb	0	; () banked
 19093  00331C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19094  00331E  A4D8               	btfss	status,2,c
 19095  003320  D005               	goto	i2l6806
 19096                           
 19097                           ; BSR set to: 0
 19098                           ;UI.c: 423: return 0;
 19099  003322  0E00               	movlw	0
 19100  003324  6E2B               	movwf	?_inputHandler+1,c
 19101  003326  0E00               	movlw	0
 19102  003328  6E2A               	movwf	?_inputHandler,c
 19103                           
 19104                           ; BSR set to: 0
 19105  00332A  0012               	return	
 19106  00332C                     i2l6806:
 19107                           
 19108                           ; BSR set to: 0
 19109                           ;UI.c: 425: else{
 19110                           ;UI.c: 426: change_state_to_menu_11();
 19111  00332C  EC1C  F026         	call	_change_state_to_menu_11	;wreg free
 19112                           
 19113                           ;UI.c: 427: }
 19114                           ;UI.c: 428: return 0;
 19115  003330  0E00               	movlw	0
 19116  003332  6E2B               	movwf	?_inputHandler+1,c
 19117  003334  0E00               	movlw	0
 19118  003336  6E2A               	movwf	?_inputHandler,c
 19119  003338  0012               	return	
 19120  00333A                     i2l6812:
 19121                           
 19122                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19123  00333A  0E16               	movlw	22
 19124  00333C  0100               	movlb	0	; () banked
 19125  00333E  19E6               	xorwf	_cur_state& (0+255),w,b
 19126  003340  0100               	movlb	0	; () banked
 19127  003342  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19128  003344  B4D8               	btfsc	status,2,c
 19129  003346  D007               	goto	i2l6816
 19130                           
 19131                           ; BSR set to: 0
 19132  003348  0E0C               	movlw	12
 19133  00334A  0100               	movlb	0	; () banked
 19134  00334C  19E6               	xorwf	_cur_state& (0+255),w,b
 19135  00334E  0100               	movlb	0	; () banked
 19136  003350  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19137  003352  A4D8               	btfss	status,2,c
 19138  003354  D005               	goto	i2l6822
 19139  003356                     i2l6816:
 19140                           
 19141                           ; BSR set to: 0
 19142                           ;UI.c: 431: return 0;
 19143  003356  0E00               	movlw	0
 19144  003358  6E2B               	movwf	?_inputHandler+1,c
 19145  00335A  0E00               	movlw	0
 19146  00335C  6E2A               	movwf	?_inputHandler,c
 19147                           
 19148                           ; BSR set to: 0
 19149  00335E  0012               	return	
 19150  003360                     i2l6822:
 19151                           
 19152                           ; BSR set to: 0
 19153                           ;UI.c: 433: else if(cur_state == 23){
 19154  003360  0E17               	movlw	23
 19155  003362  0100               	movlb	0	; () banked
 19156  003364  19E6               	xorwf	_cur_state& (0+255),w,b
 19157  003366  0100               	movlb	0	; () banked
 19158  003368  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19159  00336A  A4D8               	btfss	status,2,c
 19160  00336C  D003               	goto	i2l6826
 19161                           
 19162                           ; BSR set to: 0
 19163                           ;UI.c: 434: change_state_to_menu_22();
 19164  00336E  ECD4  F025         	call	i2_change_state_to_menu_22	;wreg free
 19165                           
 19166                           ;UI.c: 435: }
 19167  003372  D002               	goto	i2l6828
 19168  003374                     i2l6826:
 19169                           
 19170                           ;UI.c: 436: else{
 19171                           ;UI.c: 437: change_state_to_menu_12();
 19172  003374  ECEC  F025         	call	i2_change_state_to_menu_12	;wreg free
 19173  003378                     i2l6828:
 19174                           
 19175                           ;UI.c: 438: }
 19176                           ;UI.c: 439: return 0;
 19177  003378  0E00               	movlw	0
 19178  00337A  6E2B               	movwf	?_inputHandler+1,c
 19179  00337C  0E00               	movlw	0
 19180  00337E  6E2A               	movwf	?_inputHandler,c
 19181  003380  0012               	return	
 19182  003382                     i2l6832:
 19183                           
 19184                           ;UI.c: 441: if(cur_state == 23){
 19185  003382  0E17               	movlw	23
 19186  003384  0100               	movlb	0	; () banked
 19187  003386  19E6               	xorwf	_cur_state& (0+255),w,b
 19188  003388  0100               	movlb	0	; () banked
 19189  00338A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19190  00338C  A4D8               	btfss	status,2,c
 19191  00338E  D005               	goto	i2l6840
 19192                           
 19193                           ; BSR set to: 0
 19194                           ;UI.c: 442: return 0;
 19195  003390  0E00               	movlw	0
 19196  003392  6E2B               	movwf	?_inputHandler+1,c
 19197  003394  0E00               	movlw	0
 19198  003396  6E2A               	movwf	?_inputHandler,c
 19199                           
 19200                           ; BSR set to: 0
 19201  003398  0012               	return	
 19202  00339A                     i2l6840:
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;UI.c: 444: else{
 19206                           ;UI.c: 445: change_state_to_menu_23();
 19207  00339A  EC04  F026         	call	_change_state_to_menu_23	;wreg free
 19208                           
 19209                           ;UI.c: 446: }
 19210                           ;UI.c: 447: return 0;
 19211  00339E  0E00               	movlw	0
 19212  0033A0  6E2B               	movwf	?_inputHandler+1,c
 19213  0033A2  0E00               	movlw	0
 19214  0033A4  6E2A               	movwf	?_inputHandler,c
 19215  0033A6  0012               	return	
 19216  0033A8                     i2l6846:
 19217                           
 19218                           ;UI.c: 450: up = 1;
 19219  0033A8  0E00               	movlw	0
 19220  0033AA  6E78               	movwf	_up+1,c
 19221  0033AC  0E01               	movlw	1
 19222  0033AE  6E77               	movwf	_up,c
 19223                           
 19224                           ;UI.c: 451: return 1;
 19225  0033B0  0E00               	movlw	0
 19226  0033B2  6E2B               	movwf	?_inputHandler+1,c
 19227  0033B4  0E01               	movlw	1
 19228  0033B6  6E2A               	movwf	?_inputHandler,c
 19229  0033B8  0012               	return	
 19230  0033BA                     i2l6850:
 19231                           
 19232                           ;UI.c: 453: down = 1;
 19233  0033BA  0E00               	movlw	0
 19234  0033BC  6E62               	movwf	_down+1,c
 19235  0033BE  0E01               	movlw	1
 19236  0033C0  6E61               	movwf	_down,c
 19237                           
 19238                           ;UI.c: 454: return 1;
 19239  0033C2  0E00               	movlw	0
 19240  0033C4  6E2B               	movwf	?_inputHandler+1,c
 19241  0033C6  0E01               	movlw	1
 19242  0033C8  6E2A               	movwf	?_inputHandler,c
 19243  0033CA  0012               	return	
 19244  0033CC                     i2l6854:
 19245                           
 19246                           ;UI.c: 456: enter = 1;
 19247  0033CC  0E00               	movlw	0
 19248  0033CE  6E64               	movwf	_enter+1,c
 19249  0033D0  0E01               	movlw	1
 19250  0033D2  6E63               	movwf	_enter,c
 19251                           
 19252                           ;UI.c: 457: return 1;
 19253  0033D4  0E00               	movlw	0
 19254  0033D6  6E2B               	movwf	?_inputHandler+1,c
 19255  0033D8  0E01               	movlw	1
 19256  0033DA  6E2A               	movwf	?_inputHandler,c
 19257  0033DC  0012               	return	
 19258  0033DE                     i2l6858:
 19259                           
 19260                           ;UI.c: 459: back = 1;
 19261  0033DE  0E00               	movlw	0
 19262  0033E0  6E5A               	movwf	_back+1,c
 19263  0033E2  0E01               	movlw	1
 19264  0033E4  6E59               	movwf	_back,c
 19265                           
 19266                           ;UI.c: 460: return 1;
 19267  0033E6  0E00               	movlw	0
 19268  0033E8  6E2B               	movwf	?_inputHandler+1,c
 19269  0033EA  0E01               	movlw	1
 19270  0033EC  6E2A               	movwf	?_inputHandler,c
 19271  0033EE  0012               	return	
 19272  0033F0                     i2l6862:
 19273                           
 19274                           ;UI.c: 463: return 1;
 19275  0033F0  0E00               	movlw	0
 19276  0033F2  6E2B               	movwf	?_inputHandler+1,c
 19277  0033F4  0E01               	movlw	1
 19278  0033F6  6E2A               	movwf	?_inputHandler,c
 19279                           
 19280                           ;UI.c: 464: }
 19281  0033F8  0012               	return	
 19282  0033FA                     i2l6868:
 19283  0033FA  507D               	movf	_input,w,c	;volatile
 19284                           
 19285                           ; Switch size 1, requested type "space"
 19286                           ; Number of cases is 7, Range of values is 49 to 68
 19287                           ; switch strategies available:
 19288                           ; Name         Instructions Cycles
 19289                           ; simple_byte           22    12 (average)
 19290                           ;	Chosen strategy is simple_byte
 19291  0033FC  0A31               	xorlw	49	; case 49
 19292  0033FE  B4D8               	btfsc	status,2,c
 19293  003400  D789               	goto	i2l6798
 19294  003402  0A03               	xorlw	3	; case 50
 19295  003404  B4D8               	btfsc	status,2,c
 19296  003406  D799               	goto	i2l6812
 19297  003408  0A01               	xorlw	1	; case 51
 19298  00340A  B4D8               	btfsc	status,2,c
 19299  00340C  D7BA               	goto	i2l6832
 19300  00340E  0A72               	xorlw	114	; case 65
 19301  003410  B4D8               	btfsc	status,2,c
 19302  003412  D7CA               	goto	i2l6846
 19303  003414  0A03               	xorlw	3	; case 66
 19304  003416  B4D8               	btfsc	status,2,c
 19305  003418  D7D0               	goto	i2l6850
 19306  00341A  0A01               	xorlw	1	; case 67
 19307  00341C  B4D8               	btfsc	status,2,c
 19308  00341E  D7D6               	goto	i2l6854
 19309  003420  0A07               	xorlw	7	; case 68
 19310  003422  B4D8               	btfsc	status,2,c
 19311  003424  D7DC               	goto	i2l6858
 19312  003426  D7E4               	goto	i2l6862
 19313  003428                     __end_of_inputHandler:
 19314                           	opt stack 0
 19315                           pclatu	equ	0xFFB
 19316                           pclath	equ	0xFFA
 19317                           tblptru	equ	0xFF8
 19318                           tblptrh	equ	0xFF7
 19319                           tblptrl	equ	0xFF6
 19320                           tablat	equ	0xFF5
 19321                           prodh	equ	0xFF4
 19322                           prodl	equ	0xFF3
 19323                           intcon	equ	0xFF2
 19324                           intcon2	equ	0xFF1
 19325                           intcon3	equ	0xFF0
 19326                           indf0	equ	0xFEF
 19327                           postinc0	equ	0xFEE
 19328                           fsr0h	equ	0xFEA
 19329                           fsr0l	equ	0xFE9
 19330                           wreg	equ	0xFE8
 19331                           postdec1	equ	0xFE5
 19332                           fsr1h	equ	0xFE2
 19333                           fsr1l	equ	0xFE1
 19334                           indf2	equ	0xFDF
 19335                           postinc2	equ	0xFDE
 19336                           postdec2	equ	0xFDD
 19337                           fsr2h	equ	0xFDA
 19338                           fsr2l	equ	0xFD9
 19339                           status	equ	0xFD8
 19340                           
 19341 ;; *************** function i2_change_state_to_menu_22 *****************
 19342 ;; Defined at:
 19343 ;;		line 498 in file "UI.c"
 19344 ;; Parameters:    Size  Location     Type
 19345 ;;		None
 19346 ;; Auto vars:     Size  Location     Type
 19347 ;;		None
 19348 ;; Return value:  Size  Location     Type
 19349 ;;                  1    wreg      void 
 19350 ;; Registers used:
 19351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19352 ;; Tracked objects:
 19353 ;;		On entry : 0/0
 19354 ;;		On exit  : 0/0
 19355 ;;		Unchanged: 0/0
 19356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19361 ;;Total ram usage:        0 bytes
 19362 ;; Hardware stack levels used:    1
 19363 ;; Hardware stack levels required when called:    3
 19364 ;; This function calls:
 19365 ;;		i2_lcdInst
 19366 ;;		i2_printf
 19367 ;; This function is called by:
 19368 ;;		_updateMenu
 19369 ;;		_inputHandler
 19370 ;; This function uses a non-reentrant model
 19371 ;;
 19372                           
 19373                           	psect	text65
 19374  004BA8                     __ptext65:
 19375                           	opt stack 0
 19376  004BA8                     i2_change_state_to_menu_22:
 19377                           	opt stack 19
 19378                           
 19379                           ;UI.c: 499: cur_state = 22;
 19380                           
 19381                           ;incstack = 0
 19382  004BA8  0E00               	movlw	0
 19383  004BAA  0100               	movlb	0	; () banked
 19384  004BAC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19385  004BAE  0E16               	movlw	22
 19386  004BB0  6FE6               	movwf	_cur_state& (0+255),b
 19387                           
 19388                           ; BSR set to: 0
 19389                           ;UI.c: 501: lcdInst(0b10000000);;
 19390  004BB2  0E80               	movlw	128
 19391  004BB4  EC10  F028         	call	i2_lcdInst
 19392                           
 19393                           ;UI.c: 502: printf("2. SORT        <");
 19394  004BB8  0EC4               	movlw	low STR_34
 19395  004BBA  6E0D               	movwf	i2printf@f,c
 19396  004BBC  0EFD               	movlw	high STR_34
 19397  004BBE  6E0E               	movwf	i2printf@f+1,c
 19398  004BC0  ECD0  F00E         	call	i2_printf	;wreg free
 19399                           
 19400                           ;UI.c: 503: lcdInst(0b11000000);;
 19401  004BC4  0EC0               	movlw	192
 19402  004BC6  EC10  F028         	call	i2_lcdInst
 19403                           
 19404                           ;UI.c: 504: printf("3. LOGS         ");
 19405  004BCA  0E09               	movlw	low STR_36
 19406  004BCC  6E0D               	movwf	i2printf@f,c
 19407  004BCE  0EFD               	movlw	high STR_36
 19408  004BD0  6E0E               	movwf	i2printf@f+1,c
 19409  004BD2  ECD0  F00E         	call	i2_printf	;wreg free
 19410  004BD6  0012               	return		;funcret
 19411  004BD8                     __end_ofi2_change_state_to_menu_22:
 19412                           	opt stack 0
 19413                           pclatu	equ	0xFFB
 19414                           pclath	equ	0xFFA
 19415                           tblptru	equ	0xFF8
 19416                           tblptrh	equ	0xFF7
 19417                           tblptrl	equ	0xFF6
 19418                           tablat	equ	0xFF5
 19419                           prodh	equ	0xFF4
 19420                           prodl	equ	0xFF3
 19421                           intcon	equ	0xFF2
 19422                           intcon2	equ	0xFF1
 19423                           intcon3	equ	0xFF0
 19424                           indf0	equ	0xFEF
 19425                           postinc0	equ	0xFEE
 19426                           fsr0h	equ	0xFEA
 19427                           fsr0l	equ	0xFE9
 19428                           wreg	equ	0xFE8
 19429                           postdec1	equ	0xFE5
 19430                           fsr1h	equ	0xFE2
 19431                           fsr1l	equ	0xFE1
 19432                           indf2	equ	0xFDF
 19433                           postinc2	equ	0xFDE
 19434                           postdec2	equ	0xFDD
 19435                           fsr2h	equ	0xFDA
 19436                           fsr2l	equ	0xFD9
 19437                           status	equ	0xFD8
 19438                           
 19439 ;; *************** function i2_change_state_to_menu_12 *****************
 19440 ;; Defined at:
 19441 ;;		line 490 in file "UI.c"
 19442 ;; Parameters:    Size  Location     Type
 19443 ;;		None
 19444 ;; Auto vars:     Size  Location     Type
 19445 ;;		None
 19446 ;; Return value:  Size  Location     Type
 19447 ;;                  1    wreg      void 
 19448 ;; Registers used:
 19449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19450 ;; Tracked objects:
 19451 ;;		On entry : 0/0
 19452 ;;		On exit  : 0/0
 19453 ;;		Unchanged: 0/0
 19454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19459 ;;Total ram usage:        0 bytes
 19460 ;; Hardware stack levels used:    1
 19461 ;; Hardware stack levels required when called:    3
 19462 ;; This function calls:
 19463 ;;		i2_lcdInst
 19464 ;;		i2_printf
 19465 ;; This function is called by:
 19466 ;;		_updateMenu
 19467 ;;		_inputHandler
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           	psect	text66
 19472  004BD8                     __ptext66:
 19473                           	opt stack 0
 19474  004BD8                     i2_change_state_to_menu_12:
 19475                           	opt stack 19
 19476                           
 19477                           ;UI.c: 491: cur_state = 12;
 19478                           
 19479                           ;incstack = 0
 19480  004BD8  0E00               	movlw	0
 19481  004BDA  0100               	movlb	0	; () banked
 19482  004BDC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19483  004BDE  0E0C               	movlw	12
 19484  004BE0  6FE6               	movwf	_cur_state& (0+255),b
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;UI.c: 493: lcdInst(0b10000000);;
 19488  004BE2  0E80               	movlw	128
 19489  004BE4  EC10  F028         	call	i2_lcdInst
 19490                           
 19491                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19492  004BE8  0E2B               	movlw	low STR_33
 19493  004BEA  6E0D               	movwf	i2printf@f,c
 19494  004BEC  0EFD               	movlw	high STR_33
 19495  004BEE  6E0E               	movwf	i2printf@f+1,c
 19496  004BF0  ECD0  F00E         	call	i2_printf	;wreg free
 19497                           
 19498                           ;UI.c: 495: lcdInst(0b11000000);;
 19499  004BF4  0EC0               	movlw	192
 19500  004BF6  EC10  F028         	call	i2_lcdInst
 19501                           
 19502                           ;UI.c: 496: printf("2. SORT        <");
 19503  004BFA  0EC4               	movlw	low STR_34
 19504  004BFC  6E0D               	movwf	i2printf@f,c
 19505  004BFE  0EFD               	movlw	high STR_34
 19506  004C00  6E0E               	movwf	i2printf@f+1,c
 19507  004C02  ECD0  F00E         	call	i2_printf	;wreg free
 19508  004C06  0012               	return		;funcret
 19509  004C08                     __end_ofi2_change_state_to_menu_12:
 19510                           	opt stack 0
 19511                           pclatu	equ	0xFFB
 19512                           pclath	equ	0xFFA
 19513                           tblptru	equ	0xFF8
 19514                           tblptrh	equ	0xFF7
 19515                           tblptrl	equ	0xFF6
 19516                           tablat	equ	0xFF5
 19517                           prodh	equ	0xFF4
 19518                           prodl	equ	0xFF3
 19519                           intcon	equ	0xFF2
 19520                           intcon2	equ	0xFF1
 19521                           intcon3	equ	0xFF0
 19522                           indf0	equ	0xFEF
 19523                           postinc0	equ	0xFEE
 19524                           fsr0h	equ	0xFEA
 19525                           fsr0l	equ	0xFE9
 19526                           wreg	equ	0xFE8
 19527                           postdec1	equ	0xFE5
 19528                           fsr1h	equ	0xFE2
 19529                           fsr1l	equ	0xFE1
 19530                           indf2	equ	0xFDF
 19531                           postinc2	equ	0xFDE
 19532                           postdec2	equ	0xFDD
 19533                           fsr2h	equ	0xFDA
 19534                           fsr2l	equ	0xFD9
 19535                           status	equ	0xFD8
 19536                           
 19537 ;; *************** function _change_state_to_menu_23 *****************
 19538 ;; Defined at:
 19539 ;;		line 506 in file "UI.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;		None
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;		None
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;Total ram usage:        0 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    3
 19560 ;; This function calls:
 19561 ;;		i2_lcdInst
 19562 ;;		i2_printf
 19563 ;; This function is called by:
 19564 ;;		_updateMenu
 19565 ;;		_inputHandler
 19566 ;; This function uses a non-reentrant model
 19567 ;;
 19568                           
 19569                           	psect	text67
 19570  004C08                     __ptext67:
 19571                           	opt stack 0
 19572  004C08                     _change_state_to_menu_23:
 19573                           	opt stack 18
 19574                           
 19575                           ;UI.c: 507: cur_state = 23;
 19576                           
 19577                           ;incstack = 0
 19578  004C08  0E00               	movlw	0
 19579  004C0A  0100               	movlb	0	; () banked
 19580  004C0C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19581  004C0E  0E17               	movlw	23
 19582  004C10  6FE6               	movwf	_cur_state& (0+255),b
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;UI.c: 509: lcdInst(0b10000000);;
 19586  004C12  0E80               	movlw	128
 19587  004C14  EC10  F028         	call	i2_lcdInst
 19588                           
 19589                           ;UI.c: 510: printf("2. SORT         ");
 19590  004C18  0E1A               	movlw	low STR_32
 19591  004C1A  6E0D               	movwf	i2printf@f,c
 19592  004C1C  0EFD               	movlw	high STR_32
 19593  004C1E  6E0E               	movwf	i2printf@f+1,c
 19594  004C20  ECD0  F00E         	call	i2_printf	;wreg free
 19595                           
 19596                           ;UI.c: 511: lcdInst(0b11000000);;
 19597  004C24  0EC0               	movlw	192
 19598  004C26  EC10  F028         	call	i2_lcdInst
 19599                           
 19600                           ;UI.c: 512: printf("3. LOGS        <");
 19601  004C2A  0EB3               	movlw	low STR_38
 19602  004C2C  6E0D               	movwf	i2printf@f,c
 19603  004C2E  0EFD               	movlw	high STR_38
 19604  004C30  6E0E               	movwf	i2printf@f+1,c
 19605  004C32  ECD0  F00E         	call	i2_printf	;wreg free
 19606  004C36  0012               	return		;funcret
 19607  004C38                     __end_of_change_state_to_menu_23:
 19608                           	opt stack 0
 19609                           pclatu	equ	0xFFB
 19610                           pclath	equ	0xFFA
 19611                           tblptru	equ	0xFF8
 19612                           tblptrh	equ	0xFF7
 19613                           tblptrl	equ	0xFF6
 19614                           tablat	equ	0xFF5
 19615                           prodh	equ	0xFF4
 19616                           prodl	equ	0xFF3
 19617                           intcon	equ	0xFF2
 19618                           intcon2	equ	0xFF1
 19619                           intcon3	equ	0xFF0
 19620                           indf0	equ	0xFEF
 19621                           postinc0	equ	0xFEE
 19622                           fsr0h	equ	0xFEA
 19623                           fsr0l	equ	0xFE9
 19624                           wreg	equ	0xFE8
 19625                           postdec1	equ	0xFE5
 19626                           fsr1h	equ	0xFE2
 19627                           fsr1l	equ	0xFE1
 19628                           indf2	equ	0xFDF
 19629                           postinc2	equ	0xFDE
 19630                           postdec2	equ	0xFDD
 19631                           fsr2h	equ	0xFDA
 19632                           fsr2l	equ	0xFD9
 19633                           status	equ	0xFD8
 19634                           
 19635 ;; *************** function _change_state_to_menu_11 *****************
 19636 ;; Defined at:
 19637 ;;		line 482 in file "UI.c"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;		None
 19640 ;; Auto vars:     Size  Location     Type
 19641 ;;		None
 19642 ;; Return value:  Size  Location     Type
 19643 ;;                  1    wreg      void 
 19644 ;; Registers used:
 19645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19655 ;;Total ram usage:        0 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:    3
 19658 ;; This function calls:
 19659 ;;		i2_lcdInst
 19660 ;;		i2_printf
 19661 ;; This function is called by:
 19662 ;;		_updateMenu
 19663 ;;		_inputHandler
 19664 ;; This function uses a non-reentrant model
 19665 ;;
 19666                           
 19667                           	psect	text68
 19668  004C38                     __ptext68:
 19669                           	opt stack 0
 19670  004C38                     _change_state_to_menu_11:
 19671                           	opt stack 18
 19672                           
 19673                           ;UI.c: 483: cur_state = 11;
 19674                           
 19675                           ;incstack = 0
 19676  004C38  0E00               	movlw	0
 19677  004C3A  0100               	movlb	0	; () banked
 19678  004C3C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19679  004C3E  0E0B               	movlw	11
 19680  004C40  6FE6               	movwf	_cur_state& (0+255),b
 19681                           
 19682                           ; BSR set to: 0
 19683                           ;UI.c: 485: lcdInst(0b10000000);;
 19684  004C42  0E80               	movlw	128
 19685  004C44  EC10  F028         	call	i2_lcdInst
 19686                           
 19687                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19688  004C48  0ED5               	movlw	low STR_31
 19689  004C4A  6E0D               	movwf	i2printf@f,c
 19690  004C4C  0EFD               	movlw	high STR_31
 19691  004C4E  6E0E               	movwf	i2printf@f+1,c
 19692  004C50  ECD0  F00E         	call	i2_printf	;wreg free
 19693                           
 19694                           ;UI.c: 487: lcdInst(0b11000000);;
 19695  004C54  0EC0               	movlw	192
 19696  004C56  EC10  F028         	call	i2_lcdInst
 19697                           
 19698                           ;UI.c: 488: printf("2. SORT         ");
 19699  004C5A  0E1A               	movlw	low STR_32
 19700  004C5C  6E0D               	movwf	i2printf@f,c
 19701  004C5E  0EFD               	movlw	high STR_32
 19702  004C60  6E0E               	movwf	i2printf@f+1,c
 19703  004C62  ECD0  F00E         	call	i2_printf	;wreg free
 19704  004C66  0012               	return		;funcret
 19705  004C68                     __end_of_change_state_to_menu_11:
 19706                           	opt stack 0
 19707                           pclatu	equ	0xFFB
 19708                           pclath	equ	0xFFA
 19709                           tblptru	equ	0xFF8
 19710                           tblptrh	equ	0xFF7
 19711                           tblptrl	equ	0xFF6
 19712                           tablat	equ	0xFF5
 19713                           prodh	equ	0xFF4
 19714                           prodl	equ	0xFF3
 19715                           intcon	equ	0xFF2
 19716                           intcon2	equ	0xFF1
 19717                           intcon3	equ	0xFF0
 19718                           indf0	equ	0xFEF
 19719                           postinc0	equ	0xFEE
 19720                           fsr0h	equ	0xFEA
 19721                           fsr0l	equ	0xFE9
 19722                           wreg	equ	0xFE8
 19723                           postdec1	equ	0xFE5
 19724                           fsr1h	equ	0xFE2
 19725                           fsr1l	equ	0xFE1
 19726                           indf2	equ	0xFDF
 19727                           postinc2	equ	0xFDE
 19728                           postdec2	equ	0xFDD
 19729                           fsr2h	equ	0xFDA
 19730                           fsr2l	equ	0xFD9
 19731                           status	equ	0xFD8
 19732                           
 19733 ;; *************** function _change_state_to_logs_34 *****************
 19734 ;; Defined at:
 19735 ;;		line 549 in file "UI.c"
 19736 ;; Parameters:    Size  Location     Type
 19737 ;;		None
 19738 ;; Auto vars:     Size  Location     Type
 19739 ;;		None
 19740 ;; Return value:  Size  Location     Type
 19741 ;;                  1    wreg      void 
 19742 ;; Registers used:
 19743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19744 ;; Tracked objects:
 19745 ;;		On entry : 0/0
 19746 ;;		On exit  : 0/0
 19747 ;;		Unchanged: 0/0
 19748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19753 ;;Total ram usage:        0 bytes
 19754 ;; Hardware stack levels used:    1
 19755 ;; Hardware stack levels required when called:    3
 19756 ;; This function calls:
 19757 ;;		i2_lcdInst
 19758 ;;		i2_printf
 19759 ;; This function is called by:
 19760 ;;		_updateMenu
 19761 ;;		_inputHandler
 19762 ;; This function uses a non-reentrant model
 19763 ;;
 19764                           
 19765                           	psect	text69
 19766  004C68                     __ptext69:
 19767                           	opt stack 0
 19768  004C68                     _change_state_to_logs_34:
 19769                           	opt stack 18
 19770                           
 19771                           ;UI.c: 550: cur_state = 1034;
 19772                           
 19773                           ;incstack = 0
 19774  004C68  0E04               	movlw	4
 19775  004C6A  0100               	movlb	0	; () banked
 19776  004C6C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19777  004C6E  0E0A               	movlw	10
 19778  004C70  6FE6               	movwf	_cur_state& (0+255),b
 19779                           
 19780                           ; BSR set to: 0
 19781                           ;UI.c: 551: lcdInst(0b10000000);;
 19782  004C72  0E80               	movlw	128
 19783  004C74  EC10  F028         	call	i2_lcdInst
 19784                           
 19785                           ;UI.c: 552: printf("LOG 3           ");
 19786  004C78  0EE7               	movlw	low STR_44
 19787  004C7A  6E0D               	movwf	i2printf@f,c
 19788  004C7C  0EFC               	movlw	high STR_44
 19789  004C7E  6E0E               	movwf	i2printf@f+1,c
 19790  004C80  ECD0  F00E         	call	i2_printf	;wreg free
 19791                           
 19792                           ;UI.c: 553: lcdInst(0b11000000);;
 19793  004C84  0EC0               	movlw	192
 19794  004C86  EC10  F028         	call	i2_lcdInst
 19795                           
 19796                           ;UI.c: 554: printf("LOG 4          <");
 19797  004C8A  0EA2               	movlw	low STR_50
 19798  004C8C  6E0D               	movwf	i2printf@f,c
 19799  004C8E  0EFD               	movlw	high STR_50
 19800  004C90  6E0E               	movwf	i2printf@f+1,c
 19801  004C92  ECD0  F00E         	call	i2_printf	;wreg free
 19802  004C96  0012               	return		;funcret
 19803  004C98                     __end_of_change_state_to_logs_34:
 19804                           	opt stack 0
 19805                           pclatu	equ	0xFFB
 19806                           pclath	equ	0xFFA
 19807                           tblptru	equ	0xFF8
 19808                           tblptrh	equ	0xFF7
 19809                           tblptrl	equ	0xFF6
 19810                           tablat	equ	0xFF5
 19811                           prodh	equ	0xFF4
 19812                           prodl	equ	0xFF3
 19813                           intcon	equ	0xFF2
 19814                           intcon2	equ	0xFF1
 19815                           intcon3	equ	0xFF0
 19816                           indf0	equ	0xFEF
 19817                           postinc0	equ	0xFEE
 19818                           fsr0h	equ	0xFEA
 19819                           fsr0l	equ	0xFE9
 19820                           wreg	equ	0xFE8
 19821                           postdec1	equ	0xFE5
 19822                           fsr1h	equ	0xFE2
 19823                           fsr1l	equ	0xFE1
 19824                           indf2	equ	0xFDF
 19825                           postinc2	equ	0xFDE
 19826                           postdec2	equ	0xFDD
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _change_state_to_logs_33 *****************
 19832 ;; Defined at:
 19833 ;;		line 542 in file "UI.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;		None
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;		None
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  1    wreg      void 
 19840 ;; Registers used:
 19841 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19842 ;; Tracked objects:
 19843 ;;		On entry : 0/0
 19844 ;;		On exit  : 0/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;Total ram usage:        0 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    3
 19854 ;; This function calls:
 19855 ;;		i2_lcdInst
 19856 ;;		i2_printf
 19857 ;; This function is called by:
 19858 ;;		_updateMenu
 19859 ;;		_inputHandler
 19860 ;; This function uses a non-reentrant model
 19861 ;;
 19862                           
 19863                           	psect	text70
 19864  004C98                     __ptext70:
 19865                           	opt stack 0
 19866  004C98                     _change_state_to_logs_33:
 19867                           	opt stack 18
 19868                           
 19869                           ;UI.c: 543: cur_state = 1033;
 19870                           
 19871                           ;incstack = 0
 19872  004C98  0E04               	movlw	4
 19873  004C9A  0100               	movlb	0	; () banked
 19874  004C9C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19875  004C9E  0E09               	movlw	9
 19876  004CA0  6FE6               	movwf	_cur_state& (0+255),b
 19877                           
 19878                           ; BSR set to: 0
 19879                           ;UI.c: 544: lcdInst(0b10000000);;
 19880  004CA2  0E80               	movlw	128
 19881  004CA4  EC10  F028         	call	i2_lcdInst
 19882                           
 19883                           ;UI.c: 545: printf("LOG 3          <");
 19884  004CA8  0E91               	movlw	low STR_46
 19885  004CAA  6E0D               	movwf	i2printf@f,c
 19886  004CAC  0EFD               	movlw	high STR_46
 19887  004CAE  6E0E               	movwf	i2printf@f+1,c
 19888  004CB0  ECD0  F00E         	call	i2_printf	;wreg free
 19889                           
 19890                           ;UI.c: 546: lcdInst(0b11000000);;
 19891  004CB4  0EC0               	movlw	192
 19892  004CB6  EC10  F028         	call	i2_lcdInst
 19893                           
 19894                           ;UI.c: 547: printf("LOG 4           ");
 19895  004CBA  0EF8               	movlw	low STR_48
 19896  004CBC  6E0D               	movwf	i2printf@f,c
 19897  004CBE  0EFC               	movlw	high STR_48
 19898  004CC0  6E0E               	movwf	i2printf@f+1,c
 19899  004CC2  ECD0  F00E         	call	i2_printf	;wreg free
 19900  004CC6  0012               	return		;funcret
 19901  004CC8                     __end_of_change_state_to_logs_33:
 19902                           	opt stack 0
 19903                           pclatu	equ	0xFFB
 19904                           pclath	equ	0xFFA
 19905                           tblptru	equ	0xFF8
 19906                           tblptrh	equ	0xFF7
 19907                           tblptrl	equ	0xFF6
 19908                           tablat	equ	0xFF5
 19909                           prodh	equ	0xFF4
 19910                           prodl	equ	0xFF3
 19911                           intcon	equ	0xFF2
 19912                           intcon2	equ	0xFF1
 19913                           intcon3	equ	0xFF0
 19914                           indf0	equ	0xFEF
 19915                           postinc0	equ	0xFEE
 19916                           fsr0h	equ	0xFEA
 19917                           fsr0l	equ	0xFE9
 19918                           wreg	equ	0xFE8
 19919                           postdec1	equ	0xFE5
 19920                           fsr1h	equ	0xFE2
 19921                           fsr1l	equ	0xFE1
 19922                           indf2	equ	0xFDF
 19923                           postinc2	equ	0xFDE
 19924                           postdec2	equ	0xFDD
 19925                           fsr2h	equ	0xFDA
 19926                           fsr2l	equ	0xFD9
 19927                           status	equ	0xFD8
 19928                           
 19929 ;; *************** function _change_state_to_logs_23 *****************
 19930 ;; Defined at:
 19931 ;;		line 535 in file "UI.c"
 19932 ;; Parameters:    Size  Location     Type
 19933 ;;		None
 19934 ;; Auto vars:     Size  Location     Type
 19935 ;;		None
 19936 ;; Return value:  Size  Location     Type
 19937 ;;                  1    wreg      void 
 19938 ;; Registers used:
 19939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19940 ;; Tracked objects:
 19941 ;;		On entry : 0/0
 19942 ;;		On exit  : 0/0
 19943 ;;		Unchanged: 0/0
 19944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19949 ;;Total ram usage:        0 bytes
 19950 ;; Hardware stack levels used:    1
 19951 ;; Hardware stack levels required when called:    3
 19952 ;; This function calls:
 19953 ;;		i2_lcdInst
 19954 ;;		i2_printf
 19955 ;; This function is called by:
 19956 ;;		_updateMenu
 19957 ;;		_inputHandler
 19958 ;; This function uses a non-reentrant model
 19959 ;;
 19960                           
 19961                           	psect	text71
 19962  004DB4                     __ptext71:
 19963                           	opt stack 0
 19964  004DB4                     _change_state_to_logs_23:
 19965                           	opt stack 18
 19966                           
 19967                           ;UI.c: 536: cur_state = 1023;
 19968                           
 19969                           ;incstack = 0
 19970  004DB4  0E03               	movlw	3
 19971  004DB6  0100               	movlb	0	; () banked
 19972  004DB8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19973  004DBA  69E6               	setf	_cur_state& (0+255),b
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;UI.c: 537: lcdInst(0b10000000);;
 19977  004DBC  0E80               	movlw	128
 19978  004DBE  EC10  F028         	call	i2_lcdInst
 19979                           
 19980                           ;UI.c: 538: printf("LOG 2           ");
 19981  004DC2  0ED6               	movlw	low STR_40
 19982  004DC4  6E0D               	movwf	i2printf@f,c
 19983  004DC6  0EFC               	movlw	high STR_40
 19984  004DC8  6E0E               	movwf	i2printf@f+1,c
 19985  004DCA  ECD0  F00E         	call	i2_printf	;wreg free
 19986                           
 19987                           ;UI.c: 539: lcdInst(0b11000000);;
 19988  004DCE  0EC0               	movlw	192
 19989  004DD0  EC10  F028         	call	i2_lcdInst
 19990                           
 19991                           ;UI.c: 540: printf("LOG 3          <");
 19992  004DD4  0E91               	movlw	low STR_46
 19993  004DD6  6E0D               	movwf	i2printf@f,c
 19994  004DD8  0EFD               	movlw	high STR_46
 19995  004DDA  6E0E               	movwf	i2printf@f+1,c
 19996  004DDC  ECD0  F00E         	call	i2_printf	;wreg free
 19997  004DE0  0012               	return		;funcret
 19998  004DE2                     __end_of_change_state_to_logs_23:
 19999                           	opt stack 0
 20000                           pclatu	equ	0xFFB
 20001                           pclath	equ	0xFFA
 20002                           tblptru	equ	0xFF8
 20003                           tblptrh	equ	0xFF7
 20004                           tblptrl	equ	0xFF6
 20005                           tablat	equ	0xFF5
 20006                           prodh	equ	0xFF4
 20007                           prodl	equ	0xFF3
 20008                           intcon	equ	0xFF2
 20009                           intcon2	equ	0xFF1
 20010                           intcon3	equ	0xFF0
 20011                           indf0	equ	0xFEF
 20012                           postinc0	equ	0xFEE
 20013                           fsr0h	equ	0xFEA
 20014                           fsr0l	equ	0xFE9
 20015                           wreg	equ	0xFE8
 20016                           postdec1	equ	0xFE5
 20017                           fsr1h	equ	0xFE2
 20018                           fsr1l	equ	0xFE1
 20019                           indf2	equ	0xFDF
 20020                           postinc2	equ	0xFDE
 20021                           postdec2	equ	0xFDD
 20022                           fsr2h	equ	0xFDA
 20023                           fsr2l	equ	0xFD9
 20024                           status	equ	0xFD8
 20025                           
 20026 ;; *************** function _change_state_to_logs_22 *****************
 20027 ;; Defined at:
 20028 ;;		line 528 in file "UI.c"
 20029 ;; Parameters:    Size  Location     Type
 20030 ;;		None
 20031 ;; Auto vars:     Size  Location     Type
 20032 ;;		None
 20033 ;; Return value:  Size  Location     Type
 20034 ;;                  1    wreg      void 
 20035 ;; Registers used:
 20036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20037 ;; Tracked objects:
 20038 ;;		On entry : 0/0
 20039 ;;		On exit  : 0/0
 20040 ;;		Unchanged: 0/0
 20041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20046 ;;Total ram usage:        0 bytes
 20047 ;; Hardware stack levels used:    1
 20048 ;; Hardware stack levels required when called:    3
 20049 ;; This function calls:
 20050 ;;		i2_lcdInst
 20051 ;;		i2_printf
 20052 ;; This function is called by:
 20053 ;;		_updateMenu
 20054 ;;		_inputHandler
 20055 ;; This function uses a non-reentrant model
 20056 ;;
 20057                           
 20058                           	psect	text72
 20059  004CC8                     __ptext72:
 20060                           	opt stack 0
 20061  004CC8                     _change_state_to_logs_22:
 20062                           	opt stack 18
 20063                           
 20064                           ;UI.c: 529: cur_state = 1022;
 20065                           
 20066                           ;incstack = 0
 20067  004CC8  0E03               	movlw	3
 20068  004CCA  0100               	movlb	0	; () banked
 20069  004CCC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20070  004CCE  0EFE               	movlw	254
 20071  004CD0  6FE6               	movwf	_cur_state& (0+255),b
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;UI.c: 530: lcdInst(0b10000000);;
 20075  004CD2  0E80               	movlw	128
 20076  004CD4  EC10  F028         	call	i2_lcdInst
 20077                           
 20078                           ;UI.c: 531: printf("LOG 2          <");
 20079  004CD8  0E80               	movlw	low STR_42
 20080  004CDA  6E0D               	movwf	i2printf@f,c
 20081  004CDC  0EFD               	movlw	high STR_42
 20082  004CDE  6E0E               	movwf	i2printf@f+1,c
 20083  004CE0  ECD0  F00E         	call	i2_printf	;wreg free
 20084                           
 20085                           ;UI.c: 532: lcdInst(0b11000000);;
 20086  004CE4  0EC0               	movlw	192
 20087  004CE6  EC10  F028         	call	i2_lcdInst
 20088                           
 20089                           ;UI.c: 533: printf("LOG 3           ");
 20090  004CEA  0EE7               	movlw	low STR_44
 20091  004CEC  6E0D               	movwf	i2printf@f,c
 20092  004CEE  0EFC               	movlw	high STR_44
 20093  004CF0  6E0E               	movwf	i2printf@f+1,c
 20094  004CF2  ECD0  F00E         	call	i2_printf	;wreg free
 20095  004CF6  0012               	return		;funcret
 20096  004CF8                     __end_of_change_state_to_logs_22:
 20097                           	opt stack 0
 20098                           pclatu	equ	0xFFB
 20099                           pclath	equ	0xFFA
 20100                           tblptru	equ	0xFF8
 20101                           tblptrh	equ	0xFF7
 20102                           tblptrl	equ	0xFF6
 20103                           tablat	equ	0xFF5
 20104                           prodh	equ	0xFF4
 20105                           prodl	equ	0xFF3
 20106                           intcon	equ	0xFF2
 20107                           intcon2	equ	0xFF1
 20108                           intcon3	equ	0xFF0
 20109                           indf0	equ	0xFEF
 20110                           postinc0	equ	0xFEE
 20111                           fsr0h	equ	0xFEA
 20112                           fsr0l	equ	0xFE9
 20113                           wreg	equ	0xFE8
 20114                           postdec1	equ	0xFE5
 20115                           fsr1h	equ	0xFE2
 20116                           fsr1l	equ	0xFE1
 20117                           indf2	equ	0xFDF
 20118                           postinc2	equ	0xFDE
 20119                           postdec2	equ	0xFDD
 20120                           fsr2h	equ	0xFDA
 20121                           fsr2l	equ	0xFD9
 20122                           status	equ	0xFD8
 20123                           
 20124 ;; *************** function _change_state_to_logs_12 *****************
 20125 ;; Defined at:
 20126 ;;		line 521 in file "UI.c"
 20127 ;; Parameters:    Size  Location     Type
 20128 ;;		None
 20129 ;; Auto vars:     Size  Location     Type
 20130 ;;		None
 20131 ;; Return value:  Size  Location     Type
 20132 ;;                  1    wreg      void 
 20133 ;; Registers used:
 20134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20135 ;; Tracked objects:
 20136 ;;		On entry : 0/0
 20137 ;;		On exit  : 0/0
 20138 ;;		Unchanged: 0/0
 20139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;Total ram usage:        0 bytes
 20145 ;; Hardware stack levels used:    1
 20146 ;; Hardware stack levels required when called:    3
 20147 ;; This function calls:
 20148 ;;		i2_lcdInst
 20149 ;;		i2_printf
 20150 ;; This function is called by:
 20151 ;;		_updateMenu
 20152 ;;		_inputHandler
 20153 ;; This function uses a non-reentrant model
 20154 ;;
 20155                           
 20156                           	psect	text73
 20157  004CF8                     __ptext73:
 20158                           	opt stack 0
 20159  004CF8                     _change_state_to_logs_12:
 20160                           	opt stack 18
 20161                           
 20162                           ;UI.c: 522: cur_state = 1012;
 20163                           
 20164                           ;incstack = 0
 20165  004CF8  0E03               	movlw	3
 20166  004CFA  0100               	movlb	0	; () banked
 20167  004CFC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20168  004CFE  0EF4               	movlw	244
 20169  004D00  6FE6               	movwf	_cur_state& (0+255),b
 20170                           
 20171                           ; BSR set to: 0
 20172                           ;UI.c: 523: lcdInst(0b10000000);;
 20173  004D02  0E80               	movlw	128
 20174  004D04  EC10  F028         	call	i2_lcdInst
 20175                           
 20176                           ;UI.c: 524: printf("LOG 1           ");
 20177  004D08  0EC5               	movlw	low STR_41
 20178  004D0A  6E0D               	movwf	i2printf@f,c
 20179  004D0C  0EFC               	movlw	high STR_41
 20180  004D0E  6E0E               	movwf	i2printf@f+1,c
 20181  004D10  ECD0  F00E         	call	i2_printf	;wreg free
 20182                           
 20183                           ;UI.c: 525: lcdInst(0b11000000);;
 20184  004D14  0EC0               	movlw	192
 20185  004D16  EC10  F028         	call	i2_lcdInst
 20186                           
 20187                           ;UI.c: 526: printf("LOG 2          <");
 20188  004D1A  0E80               	movlw	low STR_42
 20189  004D1C  6E0D               	movwf	i2printf@f,c
 20190  004D1E  0EFD               	movlw	high STR_42
 20191  004D20  6E0E               	movwf	i2printf@f+1,c
 20192  004D22  ECD0  F00E         	call	i2_printf	;wreg free
 20193  004D26  0012               	return		;funcret
 20194  004D28                     __end_of_change_state_to_logs_12:
 20195                           	opt stack 0
 20196                           pclatu	equ	0xFFB
 20197                           pclath	equ	0xFFA
 20198                           tblptru	equ	0xFF8
 20199                           tblptrh	equ	0xFF7
 20200                           tblptrl	equ	0xFF6
 20201                           tablat	equ	0xFF5
 20202                           prodh	equ	0xFF4
 20203                           prodl	equ	0xFF3
 20204                           intcon	equ	0xFF2
 20205                           intcon2	equ	0xFF1
 20206                           intcon3	equ	0xFF0
 20207                           indf0	equ	0xFEF
 20208                           postinc0	equ	0xFEE
 20209                           fsr0h	equ	0xFEA
 20210                           fsr0l	equ	0xFE9
 20211                           wreg	equ	0xFE8
 20212                           postdec1	equ	0xFE5
 20213                           fsr1h	equ	0xFE2
 20214                           fsr1l	equ	0xFE1
 20215                           indf2	equ	0xFDF
 20216                           postinc2	equ	0xFDE
 20217                           postdec2	equ	0xFDD
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function _change_state_to_logs_11 *****************
 20223 ;; Defined at:
 20224 ;;		line 514 in file "UI.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;		None
 20227 ;; Auto vars:     Size  Location     Type
 20228 ;;		None
 20229 ;; Return value:  Size  Location     Type
 20230 ;;                  1    wreg      void 
 20231 ;; Registers used:
 20232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20233 ;; Tracked objects:
 20234 ;;		On entry : 0/0
 20235 ;;		On exit  : 0/0
 20236 ;;		Unchanged: 0/0
 20237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;Total ram usage:        0 bytes
 20243 ;; Hardware stack levels used:    1
 20244 ;; Hardware stack levels required when called:    3
 20245 ;; This function calls:
 20246 ;;		i2_lcdInst
 20247 ;;		i2_printf
 20248 ;; This function is called by:
 20249 ;;		_updateMenu
 20250 ;;		_inputHandler
 20251 ;; This function uses a non-reentrant model
 20252 ;;
 20253                           
 20254                           	psect	text74
 20255  004D28                     __ptext74:
 20256                           	opt stack 0
 20257  004D28                     _change_state_to_logs_11:
 20258                           	opt stack 18
 20259                           
 20260                           ;UI.c: 515: cur_state = 1011;
 20261                           
 20262                           ;incstack = 0
 20263  004D28  0E03               	movlw	3
 20264  004D2A  0100               	movlb	0	; () banked
 20265  004D2C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20266  004D2E  0EF3               	movlw	243
 20267  004D30  6FE6               	movwf	_cur_state& (0+255),b
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;UI.c: 516: lcdInst(0b10000000);;
 20271  004D32  0E80               	movlw	128
 20272  004D34  EC10  F028         	call	i2_lcdInst
 20273                           
 20274                           ;UI.c: 517: printf("LOG 1          <");
 20275  004D38  0E6F               	movlw	low STR_39
 20276  004D3A  6E0D               	movwf	i2printf@f,c
 20277  004D3C  0EFD               	movlw	high STR_39
 20278  004D3E  6E0E               	movwf	i2printf@f+1,c
 20279  004D40  ECD0  F00E         	call	i2_printf	;wreg free
 20280                           
 20281                           ;UI.c: 518: lcdInst(0b11000000);;
 20282  004D44  0EC0               	movlw	192
 20283  004D46  EC10  F028         	call	i2_lcdInst
 20284                           
 20285                           ;UI.c: 519: printf("LOG 2           ");
 20286  004D4A  0ED6               	movlw	low STR_40
 20287  004D4C  6E0D               	movwf	i2printf@f,c
 20288  004D4E  0EFC               	movlw	high STR_40
 20289  004D50  6E0E               	movwf	i2printf@f+1,c
 20290  004D52  ECD0  F00E         	call	i2_printf	;wreg free
 20291  004D56  0012               	return		;funcret
 20292  004D58                     __end_of_change_state_to_logs_11:
 20293                           	opt stack 0
 20294                           pclatu	equ	0xFFB
 20295                           pclath	equ	0xFFA
 20296                           tblptru	equ	0xFF8
 20297                           tblptrh	equ	0xFF7
 20298                           tblptrl	equ	0xFF6
 20299                           tablat	equ	0xFF5
 20300                           prodh	equ	0xFF4
 20301                           prodl	equ	0xFF3
 20302                           intcon	equ	0xFF2
 20303                           intcon2	equ	0xFF1
 20304                           intcon3	equ	0xFF0
 20305                           indf0	equ	0xFEF
 20306                           postinc0	equ	0xFEE
 20307                           fsr0h	equ	0xFEA
 20308                           fsr0l	equ	0xFE9
 20309                           wreg	equ	0xFE8
 20310                           postdec1	equ	0xFE5
 20311                           fsr1h	equ	0xFE2
 20312                           fsr1l	equ	0xFE1
 20313                           indf2	equ	0xFDF
 20314                           postinc2	equ	0xFDE
 20315                           postdec2	equ	0xFDD
 20316                           fsr2h	equ	0xFDA
 20317                           fsr2l	equ	0xFD9
 20318                           status	equ	0xFD8
 20319                           
 20320 ;; *************** function _dispLogs *****************
 20321 ;; Defined at:
 20322 ;;		line 467 in file "UI.c"
 20323 ;; Parameters:    Size  Location     Type
 20324 ;;  myLog           2   17[COMRAM] int 
 20325 ;; Auto vars:     Size  Location     Type
 20326 ;;		None
 20327 ;; Return value:  Size  Location     Type
 20328 ;;                  1    wreg      void 
 20329 ;; Registers used:
 20330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20331 ;; Tracked objects:
 20332 ;;		On entry : 0/0
 20333 ;;		On exit  : 0/0
 20334 ;;		Unchanged: 0/0
 20335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20340 ;;Total ram usage:        2 bytes
 20341 ;; Hardware stack levels used:    1
 20342 ;; Hardware stack levels required when called:    2
 20343 ;; This function calls:
 20344 ;;		_retrieveLog
 20345 ;; This function is called by:
 20346 ;;		_updateMenu
 20347 ;; This function uses a non-reentrant model
 20348 ;;
 20349                           
 20350                           	psect	text75
 20351  004F00                     __ptext75:
 20352                           	opt stack 0
 20353  004F00                     _dispLogs:
 20354                           	opt stack 20
 20355                           
 20356                           ;UI.c: 468: logstate = 1;
 20357                           
 20358                           ;incstack = 0
 20359  004F00  0E00               	movlw	0
 20360  004F02  0100               	movlb	0	; () banked
 20361  004F04  6FF7               	movwf	(_logstate+1)& (0+255),b
 20362  004F06  0E01               	movlw	1
 20363  004F08  6FF6               	movwf	_logstate& (0+255),b
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;UI.c: 469: log = myLog;
 20367  004F0A  C012  F0EC         	movff	dispLogs@myLog,_log
 20368  004F0E  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;UI.c: 470: retrieveLog(myLog - 1);
 20372  004F12  0EFF               	movlw	255
 20373  004F14  2412               	addwf	dispLogs@myLog,w,c
 20374  004F16  6E07               	movwf	retrieveLog@logNum,c
 20375  004F18  0EFF               	movlw	255
 20376  004F1A  2013               	addwfc	dispLogs@myLog+1,w,c
 20377  004F1C  6E08               	movwf	retrieveLog@logNum+1,c
 20378  004F1E  EC1B  F01D         	call	_retrieveLog	;wreg free
 20379  004F22  0012               	return		;funcret
 20380  004F24                     __end_of_dispLogs:
 20381                           	opt stack 0
 20382                           pclatu	equ	0xFFB
 20383                           pclath	equ	0xFFA
 20384                           tblptru	equ	0xFF8
 20385                           tblptrh	equ	0xFF7
 20386                           tblptrl	equ	0xFF6
 20387                           tablat	equ	0xFF5
 20388                           prodh	equ	0xFF4
 20389                           prodl	equ	0xFF3
 20390                           intcon	equ	0xFF2
 20391                           intcon2	equ	0xFF1
 20392                           intcon3	equ	0xFF0
 20393                           indf0	equ	0xFEF
 20394                           postinc0	equ	0xFEE
 20395                           fsr0h	equ	0xFEA
 20396                           fsr0l	equ	0xFE9
 20397                           wreg	equ	0xFE8
 20398                           postdec1	equ	0xFE5
 20399                           fsr1h	equ	0xFE2
 20400                           fsr1l	equ	0xFE1
 20401                           indf2	equ	0xFDF
 20402                           postinc2	equ	0xFDE
 20403                           postdec2	equ	0xFDD
 20404                           fsr2h	equ	0xFDA
 20405                           fsr2l	equ	0xFD9
 20406                           status	equ	0xFD8
 20407                           
 20408 ;; *************** function _retrieveLog *****************
 20409 ;; Defined at:
 20410 ;;		line 134 in file "EEPROM.c"
 20411 ;; Parameters:    Size  Location     Type
 20412 ;;  logNum          2    6[COMRAM] int 
 20413 ;; Auto vars:     Size  Location     Type
 20414 ;;  i               2   13[COMRAM] int 
 20415 ;;  addr            2   15[COMRAM] unsigned short 
 20416 ;;  byte3           1   12[COMRAM] unsigned char 
 20417 ;;  byte2           1   11[COMRAM] unsigned char 
 20418 ;;  byte1           1   10[COMRAM] unsigned char 
 20419 ;; Return value:  Size  Location     Type
 20420 ;;                  1    wreg      void 
 20421 ;; Registers used:
 20422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20423 ;; Tracked objects:
 20424 ;;		On entry : 0/0
 20425 ;;		On exit  : 0/0
 20426 ;;		Unchanged: 0/0
 20427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20429 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20431 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20432 ;;Total ram usage:       11 bytes
 20433 ;; Hardware stack levels used:    1
 20434 ;; Hardware stack levels required when called:    1
 20435 ;; This function calls:
 20436 ;;		i2_EEPROM_read
 20437 ;;		i2___wmul
 20438 ;; This function is called by:
 20439 ;;		_dispLogs
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           	psect	text76
 20444  003A36                     __ptext76:
 20445                           	opt stack 0
 20446  003A36                     _retrieveLog:
 20447                           	opt stack 20
 20448                           
 20449                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20450                           
 20451                           ;incstack = 0
 20452  003A36  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20453  003A3A  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20454  003A3E  0E00               	movlw	0
 20455  003A40  6E04               	movwf	i2___wmul@multiplicand+1,c
 20456  003A42  0E0B               	movlw	11
 20457  003A44  6E03               	movwf	i2___wmul@multiplicand,c
 20458  003A46  EC5A  F027         	call	i2___wmul	;wreg free
 20459  003A4A  0E01               	movlw	1
 20460  003A4C  2401               	addwf	?i2___wmul,w,c
 20461  003A4E  6E10               	movwf	retrieveLog@addr,c
 20462  003A50  0E00               	movlw	0
 20463  003A52  2002               	addwfc	?i2___wmul+1,w,c
 20464  003A54  6E11               	movwf	retrieveLog@addr+1,c
 20465                           
 20466                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20467  003A56  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20468  003A5A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20469  003A5E  ECDC  F027         	call	i2_EEPROM_read	;wreg free
 20470  003A62  6E0B               	movwf	retrieveLog@byte1,c
 20471                           
 20472                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20473  003A64  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20474  003A68  0E80               	movlw	128
 20475  003A6A  1609               	andwf	??_retrieveLog,f,c
 20476  003A6C  5009               	movf	??_retrieveLog,w,c
 20477  003A6E  0100               	movlb	0	; () banked
 20478  003A70  6FEE               	movwf	_log_completion& (0+255),b
 20479  003A72  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20480                           
 20481                           ; BSR set to: 0
 20482                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20483  003A74  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20484  003A78  0E0F               	movlw	15
 20485  003A7A  1609               	andwf	??_retrieveLog,f,c
 20486  003A7C  5009               	movf	??_retrieveLog,w,c
 20487  003A7E  6E75               	movwf	_log_count_total,c
 20488  003A80  6A76               	clrf	_log_count_total+1,c
 20489                           
 20490                           ; BSR set to: 0
 20491                           ;EEPROM.c: 146: addr++;
 20492  003A82  4A10               	infsnz	retrieveLog@addr,f,c
 20493  003A84  2A11               	incf	retrieveLog@addr+1,f,c
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20497  003A86  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20498  003A8A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20499  003A8E  ECDC  F027         	call	i2_EEPROM_read	;wreg free
 20500  003A92  6E0C               	movwf	retrieveLog@byte2,c
 20501                           
 20502                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20503  003A94  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20504  003A98  3A09               	swapf	??_retrieveLog,f,c
 20505  003A9A  0E0F               	movlw	15
 20506  003A9C  1609               	andwf	??_retrieveLog,f,c
 20507  003A9E  0E0F               	movlw	15
 20508  003AA0  1609               	andwf	??_retrieveLog,f,c
 20509  003AA2  5009               	movf	??_retrieveLog,w,c
 20510  003AA4  0100               	movlb	0	; () banked
 20511  003AA6  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20512  003AA8  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20516  003AAA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20517  003AAE  0E0F               	movlw	15
 20518  003AB0  1609               	andwf	??_retrieveLog,f,c
 20519  003AB2  5009               	movf	??_retrieveLog,w,c
 20520  003AB4  0100               	movlb	0	; () banked
 20521  003AB6  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20522  003AB8  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;EEPROM.c: 152: addr++;
 20526  003ABA  4A10               	infsnz	retrieveLog@addr,f,c
 20527  003ABC  2A11               	incf	retrieveLog@addr+1,f,c
 20528                           
 20529                           ; BSR set to: 0
 20530                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20531  003ABE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20532  003AC2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20533  003AC6  ECDC  F027         	call	i2_EEPROM_read	;wreg free
 20534  003ACA  6E0D               	movwf	retrieveLog@byte3,c
 20535                           
 20536                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20537  003ACC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20538  003AD0  3A09               	swapf	??_retrieveLog,f,c
 20539  003AD2  0E0F               	movlw	15
 20540  003AD4  1609               	andwf	??_retrieveLog,f,c
 20541  003AD6  0E0F               	movlw	15
 20542  003AD8  1609               	andwf	??_retrieveLog,f,c
 20543  003ADA  5009               	movf	??_retrieveLog,w,c
 20544  003ADC  6E73               	movwf	_log_count_can_w_lab,c
 20545  003ADE  6A74               	clrf	_log_count_can_w_lab+1,c
 20546                           
 20547                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20548  003AE0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20549  003AE4  0E0F               	movlw	15
 20550  003AE6  1609               	andwf	??_retrieveLog,f,c
 20551  003AE8  5009               	movf	??_retrieveLog,w,c
 20552  003AEA  6E71               	movwf	_log_count_can_no_lab,c
 20553  003AEC  6A72               	clrf	_log_count_can_no_lab+1,c
 20554                           
 20555                           ;EEPROM.c: 156: addr++;
 20556  003AEE  4A10               	infsnz	retrieveLog@addr,f,c
 20557  003AF0  2A11               	incf	retrieveLog@addr+1,f,c
 20558                           
 20559                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20560  003AF2  0E00               	movlw	0
 20561  003AF4  6E0F               	movwf	retrieveLog@i+1,c
 20562  003AF6  0E00               	movlw	0
 20563  003AF8  6E0E               	movwf	retrieveLog@i,c
 20564  003AFA                     i2l6476:
 20565  003AFA  BE0F               	btfsc	retrieveLog@i+1,7,c
 20566  003AFC  D006               	goto	i2l6480
 20567  003AFE  500F               	movf	retrieveLog@i+1,w,c
 20568  003B00  E11E               	bnz	i2l6488
 20569  003B02  0E07               	movlw	7
 20570  003B04  5C0E               	subwf	retrieveLog@i,w,c
 20571  003B06  B0D8               	btfsc	status,0,c
 20572  003B08  D01A               	goto	i2l6488
 20573  003B0A                     i2l6480:
 20574                           
 20575                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20576  003B0A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20577  003B0E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20578  003B12  ECDC  F027         	call	i2_EEPROM_read	;wreg free
 20579  003B16  6E09               	movwf	??_retrieveLog& (0+255),c
 20580  003B18  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20581  003B1A  90D8               	bcf	status,0,c
 20582  003B1C  340E               	rlcf	retrieveLog@i,w,c
 20583  003B1E  6ED9               	movwf	fsr2l,c
 20584  003B20  340F               	rlcf	retrieveLog@i+1,w,c
 20585  003B22  6EDA               	movwf	fsr2h,c
 20586  003B24  0E00               	movlw	low _log_startTime
 20587  003B26  26D9               	addwf	fsr2l,f,c
 20588  003B28  0E01               	movlw	high _log_startTime
 20589  003B2A  22DA               	addwfc	fsr2h,f,c
 20590  003B2C  C009  FFDE         	movff	??_retrieveLog,postinc2
 20591  003B30  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20592                           
 20593                           ;EEPROM.c: 161: addr++;
 20594  003B34  4A10               	infsnz	retrieveLog@addr,f,c
 20595  003B36  2A11               	incf	retrieveLog@addr+1,f,c
 20596  003B38  4A0E               	infsnz	retrieveLog@i,f,c
 20597  003B3A  2A0F               	incf	retrieveLog@i+1,f,c
 20598  003B3C  D7DE               	goto	i2l6476
 20599  003B3E                     i2l6488:
 20600                           
 20601                           ;EEPROM.c: 162: }
 20602                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20603  003B3E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20604  003B42  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20605  003B46  ECDC  F027         	call	i2_EEPROM_read	;wreg free
 20606  003B4A  6E09               	movwf	??_retrieveLog& (0+255),c
 20607  003B4C  5009               	movf	??_retrieveLog,w,c
 20608  003B4E  0100               	movlb	0	; () banked
 20609  003B50  6FF4               	movwf	_log_total_time& (0+255),b
 20610  003B52  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20611                           
 20612                           ; BSR set to: 0
 20613  003B54  0012               	return		;funcret
 20614  003B56                     __end_of_retrieveLog:
 20615                           	opt stack 0
 20616                           pclatu	equ	0xFFB
 20617                           pclath	equ	0xFFA
 20618                           tblptru	equ	0xFF8
 20619                           tblptrh	equ	0xFF7
 20620                           tblptrl	equ	0xFF6
 20621                           tablat	equ	0xFF5
 20622                           prodh	equ	0xFF4
 20623                           prodl	equ	0xFF3
 20624                           intcon	equ	0xFF2
 20625                           intcon2	equ	0xFF1
 20626                           intcon3	equ	0xFF0
 20627                           indf0	equ	0xFEF
 20628                           postinc0	equ	0xFEE
 20629                           fsr0h	equ	0xFEA
 20630                           fsr0l	equ	0xFE9
 20631                           wreg	equ	0xFE8
 20632                           postdec1	equ	0xFE5
 20633                           fsr1h	equ	0xFE2
 20634                           fsr1l	equ	0xFE1
 20635                           indf2	equ	0xFDF
 20636                           postinc2	equ	0xFDE
 20637                           postdec2	equ	0xFDD
 20638                           fsr2h	equ	0xFDA
 20639                           fsr2l	equ	0xFD9
 20640                           status	equ	0xFD8
 20641                           
 20642 ;; *************** function i2_EEPROM_read *****************
 20643 ;; Defined at:
 20644 ;;		line 68 in file "EEPROM.c"
 20645 ;; Parameters:    Size  Location     Type
 20646 ;;  address         2    0[COMRAM] unsigned short 
 20647 ;; Auto vars:     Size  Location     Type
 20648 ;;		None
 20649 ;; Return value:  Size  Location     Type
 20650 ;;                  1    wreg      unsigned char 
 20651 ;; Registers used:
 20652 ;;		wreg, status,2
 20653 ;; Tracked objects:
 20654 ;;		On entry : 0/0
 20655 ;;		On exit  : 0/0
 20656 ;;		Unchanged: 0/0
 20657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20662 ;;Total ram usage:        2 bytes
 20663 ;; Hardware stack levels used:    1
 20664 ;; This function calls:
 20665 ;;		Nothing
 20666 ;; This function is called by:
 20667 ;;		_retrieveLog
 20668 ;; This function uses a non-reentrant model
 20669 ;;
 20670                           
 20671                           	psect	text77
 20672  004FB8                     __ptext77:
 20673                           	opt stack 0
 20674  004FB8                     i2_EEPROM_read:
 20675                           	opt stack 20
 20676                           
 20677                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20678                           
 20679                           ; BSR set to: 0
 20680                           ;incstack = 0
 20681  004FB8  5002               	movf	i2EEPROM_read@address+1,w,c
 20682  004FBA  6EAA               	movwf	4010,c	;volatile
 20683                           
 20684                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20685  004FBC  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20686                           
 20687                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20688  004FC0  9EA6               	bcf	4006,7,c	;volatile
 20689                           
 20690                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20691  004FC2  9CA6               	bcf	4006,6,c	;volatile
 20692                           
 20693                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20694  004FC4  80A6               	bsf	4006,0,c	;volatile
 20695  004FC6                     i2l1001:
 20696  004FC6  B0A6               	btfsc	4006,0,c	;volatile
 20697  004FC8  D7FE               	goto	i2l1001
 20698                           
 20699                           ;EEPROM.c: 81: return EEDATA;
 20700  004FCA  50A8               	movf	4008,w,c	;volatile
 20701  004FCC  0012               	return	
 20702  004FCE                     __end_ofi2_EEPROM_read:
 20703                           	opt stack 0
 20704                           pclatu	equ	0xFFB
 20705                           pclath	equ	0xFFA
 20706                           tblptru	equ	0xFF8
 20707                           tblptrh	equ	0xFF7
 20708                           tblptrl	equ	0xFF6
 20709                           tablat	equ	0xFF5
 20710                           prodh	equ	0xFF4
 20711                           prodl	equ	0xFF3
 20712                           intcon	equ	0xFF2
 20713                           intcon2	equ	0xFF1
 20714                           intcon3	equ	0xFF0
 20715                           indf0	equ	0xFEF
 20716                           postinc0	equ	0xFEE
 20717                           fsr0h	equ	0xFEA
 20718                           fsr0l	equ	0xFE9
 20719                           wreg	equ	0xFE8
 20720                           postdec1	equ	0xFE5
 20721                           fsr1h	equ	0xFE2
 20722                           fsr1l	equ	0xFE1
 20723                           indf2	equ	0xFDF
 20724                           postinc2	equ	0xFDE
 20725                           postdec2	equ	0xFDD
 20726                           fsr2h	equ	0xFDA
 20727                           fsr2l	equ	0xFD9
 20728                           status	equ	0xFD8
 20729                           
 20730 ;; *************** function _printSortTimer *****************
 20731 ;; Defined at:
 20732 ;;		line 431 in file "sort.c"
 20733 ;; Parameters:    Size  Location     Type
 20734 ;;		None
 20735 ;; Auto vars:     Size  Location     Type
 20736 ;;  i               2   70[COMRAM] int 
 20737 ;;  curTime        14   44[COMRAM] int [7]
 20738 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20739 ;;  sec             2   64[COMRAM] int 
 20740 ;;  min             2   62[COMRAM] int 
 20741 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20742 ;;  start_sec       2   58[COMRAM] unsigned int 
 20743 ;; Return value:  Size  Location     Type
 20744 ;;                  1    wreg      void 
 20745 ;; Registers used:
 20746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20747 ;; Tracked objects:
 20748 ;;		On entry : 0/0
 20749 ;;		On exit  : 0/0
 20750 ;;		Unchanged: 0/0
 20751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20753 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20754 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;Total ram usage:       31 bytes
 20757 ;; Hardware stack levels used:    1
 20758 ;; Hardware stack levels required when called:    3
 20759 ;; This function calls:
 20760 ;;		i2___lwdiv
 20761 ;;		i2___lwmod
 20762 ;;		i2___wmul
 20763 ;;		i2_getRTC
 20764 ;;		i2_lcdInst
 20765 ;;		i2_printf
 20766 ;; This function is called by:
 20767 ;;		_handler
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           	psect	text78
 20772  00302C                     __ptext78:
 20773                           	opt stack 0
 20774  00302C                     _printSortTimer:
 20775                           	opt stack 20
 20776                           
 20777                           ;sort.c: 432: getRTC();
 20778                           
 20779                           ;incstack = 0
 20780  00302C  ECD2  F022         	call	i2_getRTC	;wreg free
 20781                           
 20782                           ;sort.c: 433: int curTime[7];
 20783                           ;sort.c: 434: for(int i = 0; i < 7; i++){
 20784  003030  0E00               	movlw	0
 20785  003032  6E48               	movwf	printSortTimer@i+1,c
 20786  003034  0E00               	movlw	0
 20787  003036  6E47               	movwf	printSortTimer@i,c
 20788  003038                     i2l8864:
 20789  003038  BE48               	btfsc	printSortTimer@i+1,7,c
 20790  00303A  D006               	goto	i2l8868
 20791  00303C  5048               	movf	printSortTimer@i+1,w,c
 20792  00303E  E131               	bnz	i2l8874
 20793  003040  0E07               	movlw	7
 20794  003042  5C47               	subwf	printSortTimer@i,w,c
 20795  003044  B0D8               	btfsc	status,0,c
 20796  003046  D02D               	goto	i2l8874
 20797  003048                     i2l8868:
 20798                           
 20799                           ;sort.c: 435: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20800  003048  0E24               	movlw	low _time
 20801  00304A  2447               	addwf	printSortTimer@i,w,c
 20802  00304C  6ED9               	movwf	fsr2l,c
 20803  00304E  0E01               	movlw	high _time
 20804  003050  2048               	addwfc	printSortTimer@i+1,w,c
 20805  003052  6EDA               	movwf	fsr2h,c
 20806  003054  50DF               	movf	indf2,w,c
 20807  003056  6E2A               	movwf	??_printSortTimer& (0+255),c
 20808  003058  3A2A               	swapf	??_printSortTimer,f,c
 20809  00305A  0E0F               	movlw	15
 20810  00305C  162A               	andwf	??_printSortTimer,f,c
 20811  00305E  0E0F               	movlw	15
 20812  003060  162A               	andwf	??_printSortTimer,f,c
 20813  003062  502A               	movf	??_printSortTimer,w,c
 20814  003064  0D0A               	mullw	10
 20815  003066  0E24               	movlw	low _time
 20816  003068  2447               	addwf	printSortTimer@i,w,c
 20817  00306A  6ED9               	movwf	fsr2l,c
 20818  00306C  0E01               	movlw	high _time
 20819  00306E  2048               	addwfc	printSortTimer@i+1,w,c
 20820  003070  6EDA               	movwf	fsr2h,c
 20821  003072  50DF               	movf	indf2,w,c
 20822  003074  0B0F               	andlw	15
 20823  003076  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20824  003078  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20825  00307A  50F3               	movf	prodl,w,c
 20826  00307C  262B               	addwf	??_printSortTimer+1,f,c
 20827  00307E  50F4               	movf	prodh,w,c
 20828  003080  222C               	addwfc	??_printSortTimer+2,f,c
 20829  003082  90D8               	bcf	status,0,c
 20830  003084  3447               	rlcf	printSortTimer@i,w,c
 20831  003086  6ED9               	movwf	fsr2l,c
 20832  003088  3448               	rlcf	printSortTimer@i+1,w,c
 20833  00308A  6EDA               	movwf	fsr2h,c
 20834  00308C  0E2D               	movlw	low printSortTimer@curTime
 20835  00308E  26D9               	addwf	fsr2l,f,c
 20836  003090  0E00               	movlw	high printSortTimer@curTime
 20837  003092  22DA               	addwfc	fsr2h,f,c
 20838  003094  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20839  003098  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20840  00309C  4A47               	infsnz	printSortTimer@i,f,c
 20841  00309E  2A48               	incf	printSortTimer@i+1,f,c
 20842  0030A0  D7CB               	goto	i2l8864
 20843  0030A2                     i2l8874:
 20844                           
 20845                           ;sort.c: 436: }
 20846                           ;sort.c: 437: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20847  0030A2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20848  0030A6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20849  0030AA  0E00               	movlw	0
 20850  0030AC  6E04               	movwf	i2___wmul@multiplicand+1,c
 20851  0030AE  0E3C               	movlw	60
 20852  0030B0  6E03               	movwf	i2___wmul@multiplicand,c
 20853  0030B2  EC5A  F027         	call	i2___wmul	;wreg free
 20854  0030B6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20855  0030BA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20856  0030BE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20857  0030C2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20858  0030C6  0E0E               	movlw	14
 20859  0030C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 20860  0030CA  0E10               	movlw	16
 20861  0030CC  6E03               	movwf	i2___wmul@multiplicand,c
 20862  0030CE  EC5A  F027         	call	i2___wmul	;wreg free
 20863  0030D2  5001               	movf	?i2___wmul,w,c
 20864  0030D4  262A               	addwf	??_printSortTimer,f,c
 20865  0030D6  5002               	movf	?i2___wmul+1,w,c
 20866  0030D8  222B               	addwfc	??_printSortTimer+1,f,c
 20867  0030DA  0101               	movlb	1	; () banked
 20868  0030DC  510E               	movf	_startTime& (0+255),w,b
 20869  0030DE  242A               	addwf	??_printSortTimer,w,c
 20870  0030E0  6E3B               	movwf	printSortTimer@start_sec,c
 20871  0030E2  0101               	movlb	1	; () banked
 20872  0030E4  510F               	movf	(_startTime+1)& (0+255),w,b
 20873  0030E6  202B               	addwfc	??_printSortTimer+1,w,c
 20874  0030E8  6E3C               	movwf	printSortTimer@start_sec+1,c
 20875                           
 20876                           ;sort.c: 438: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20877  0030EA  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20878  0030EE  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20879  0030F2  0E00               	movlw	0
 20880  0030F4  6E04               	movwf	i2___wmul@multiplicand+1,c
 20881  0030F6  0E3C               	movlw	60
 20882  0030F8  6E03               	movwf	i2___wmul@multiplicand,c
 20883  0030FA  EC5A  F027         	call	i2___wmul	;wreg free
 20884  0030FE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20885  003102  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20886  003106  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20887  00310A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20888  00310E  0E0E               	movlw	14
 20889  003110  6E04               	movwf	i2___wmul@multiplicand+1,c
 20890  003112  0E10               	movlw	16
 20891  003114  6E03               	movwf	i2___wmul@multiplicand,c
 20892  003116  EC5A  F027         	call	i2___wmul	;wreg free
 20893  00311A  5001               	movf	?i2___wmul,w,c
 20894  00311C  262A               	addwf	??_printSortTimer,f,c
 20895  00311E  5002               	movf	?i2___wmul+1,w,c
 20896  003120  222B               	addwfc	??_printSortTimer+1,f,c
 20897  003122  502D               	movf	printSortTimer@curTime,w,c
 20898  003124  242A               	addwf	??_printSortTimer,w,c
 20899  003126  6E3D               	movwf	printSortTimer@cur_sec,c
 20900  003128  502E               	movf	printSortTimer@curTime+1,w,c
 20901  00312A  202B               	addwfc	??_printSortTimer+1,w,c
 20902  00312C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20903                           
 20904                           ;sort.c: 439: unsigned int timeDiff = cur_sec - start_sec;
 20905  00312E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20906  003132  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20907  003136  1E2A               	comf	??_printSortTimer,f,c
 20908  003138  1E2B               	comf	??_printSortTimer+1,f,c
 20909  00313A  4A2A               	infsnz	??_printSortTimer,f,c
 20910  00313C  2A2B               	incf	??_printSortTimer+1,f,c
 20911  00313E  503D               	movf	printSortTimer@cur_sec,w,c
 20912  003140  242A               	addwf	??_printSortTimer,w,c
 20913  003142  6E45               	movwf	printSortTimer@timeDiff,c
 20914  003144  503E               	movf	printSortTimer@cur_sec+1,w,c
 20915  003146  202B               	addwfc	??_printSortTimer+1,w,c
 20916  003148  6E46               	movwf	printSortTimer@timeDiff+1,c
 20917                           
 20918                           ;sort.c: 441: total_time = timeDiff;
 20919  00314A  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20920  00314E  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20921                           
 20922                           ;sort.c: 443: if(f_most_recent_sort_time){
 20923  003152  506B               	movf	_f_most_recent_sort_time,w,c
 20924  003154  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20925  003156  B4D8               	btfsc	status,2,c
 20926  003158  D008               	goto	i2l8886
 20927                           
 20928                           ;sort.c: 444: most_recent_sort_time = total_time;
 20929  00315A  C0F8  F133         	movff	_total_time,_most_recent_sort_time
 20930  00315E  C0F9  F134         	movff	_total_time+1,_most_recent_sort_time+1
 20931                           
 20932                           ;sort.c: 445: f_most_recent_sort_time = 0;
 20933  003162  0E00               	movlw	0
 20934  003164  6E6C               	movwf	_f_most_recent_sort_time+1,c
 20935  003166  0E00               	movlw	0
 20936  003168  6E6B               	movwf	_f_most_recent_sort_time,c
 20937  00316A                     i2l8886:
 20938                           
 20939                           ;sort.c: 446: }
 20940                           ;sort.c: 449: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 20941  00316A  C133  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 20942  00316E  C134  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 20943  003172  1E2A               	comf	??_printSortTimer,f,c
 20944  003174  1E2B               	comf	??_printSortTimer+1,f,c
 20945  003176  4A2A               	infsnz	??_printSortTimer,f,c
 20946  003178  2A2B               	incf	??_printSortTimer+1,f,c
 20947  00317A  0100               	movlb	0	; () banked
 20948  00317C  51F8               	movf	_total_time& (0+255),w,b
 20949  00317E  262A               	addwf	??_printSortTimer,f,c
 20950  003180  0100               	movlb	0	; () banked
 20951  003182  51F9               	movf	(_total_time+1)& (0+255),w,b
 20952  003184  222B               	addwfc	??_printSortTimer+1,f,c
 20953  003186  0E2A               	movlw	42
 20954  003188  182A               	xorwf	??_printSortTimer,w,c
 20955  00318A  102B               	iorwf	??_printSortTimer+1,w,c
 20956  00318C  B4D8               	btfsc	status,2,c
 20957  00318E  D007               	goto	i2l8890
 20958                           
 20959                           ; BSR set to: 0
 20960  003190  0EB3               	movlw	179
 20961  003192  0100               	movlb	0	; () banked
 20962  003194  19F8               	xorwf	_total_time& (0+255),w,b
 20963  003196  0100               	movlb	0	; () banked
 20964  003198  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 20965  00319A  A4D8               	btfss	status,2,c
 20966  00319C  D003               	goto	i2l8892
 20967  00319E                     i2l8890:
 20968                           
 20969                           ; BSR set to: 0
 20970                           ;sort.c: 450: machine_state = DoneSorting_state;
 20971  00319E  0E02               	movlw	2
 20972  0031A0  0100               	movlb	0	; () banked
 20973  0031A2  6FFC               	movwf	_machine_state& (0+255),b
 20974  0031A4                     i2l8892:
 20975                           
 20976                           ; BSR set to: 0
 20977                           ;sort.c: 452: }
 20978                           ;sort.c: 454: int min = (timeDiff % 3600) / 60;
 20979  0031A4  0E0E               	movlw	14
 20980  0031A6  6E04               	movwf	i2___lwmod@divisor+1,c
 20981  0031A8  0E10               	movlw	16
 20982  0031AA  6E03               	movwf	i2___lwmod@divisor,c
 20983  0031AC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20984  0031B0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20985  0031B4  EC13  F025         	call	i2___lwmod	;wreg free
 20986  0031B8  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20987  0031BC  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20988  0031C0  0E00               	movlw	0
 20989  0031C2  6E09               	movwf	i2___lwdiv@divisor+1,c
 20990  0031C4  0E3C               	movlw	60
 20991  0031C6  6E08               	movwf	i2___lwdiv@divisor,c
 20992  0031C8  EC54  F024         	call	i2___lwdiv	;wreg free
 20993  0031CC  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 20994  0031D0  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20995                           
 20996                           ;sort.c: 455: int sec = (timeDiff % 3600) % 60;
 20997  0031D4  0E0E               	movlw	14
 20998  0031D6  6E04               	movwf	i2___lwmod@divisor+1,c
 20999  0031D8  0E10               	movlw	16
 21000  0031DA  6E03               	movwf	i2___lwmod@divisor,c
 21001  0031DC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21002  0031E0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21003  0031E4  EC13  F025         	call	i2___lwmod	;wreg free
 21004  0031E8  C001  F043         	movff	?i2___lwmod,_printSortTimer$2453
 21005  0031EC  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2453+1
 21006                           
 21007                           ;sort.c: 455: int sec = (timeDiff % 3600) % 60;
 21008  0031F0  C043  F001         	movff	_printSortTimer$2453,i2___lwmod@dividend
 21009  0031F4  C044  F002         	movff	_printSortTimer$2453+1,i2___lwmod@dividend+1
 21010  0031F8  0E00               	movlw	0
 21011  0031FA  6E04               	movwf	i2___lwmod@divisor+1,c
 21012  0031FC  0E3C               	movlw	60
 21013  0031FE  6E03               	movwf	i2___lwmod@divisor,c
 21014  003200  EC13  F025         	call	i2___lwmod	;wreg free
 21015  003204  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21016  003208  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21017                           
 21018                           ;sort.c: 457: lcdInst(0b10000000);;
 21019  00320C  0E80               	movlw	128
 21020  00320E  EC10  F028         	call	i2_lcdInst
 21021                           
 21022                           ;sort.c: 458: printf("SORTING...");
 21023  003212  0E7C               	movlw	low STR_64
 21024  003214  6E0D               	movwf	i2printf@f,c
 21025  003216  0EFF               	movlw	high STR_64
 21026  003218  6E0E               	movwf	i2printf@f+1,c
 21027  00321A  ECD0  F00E         	call	i2_printf	;wreg free
 21028                           
 21029                           ;sort.c: 459: lcdInst(0b11000000);;
 21030  00321E  0EC0               	movlw	192
 21031  003220  EC10  F028         	call	i2_lcdInst
 21032                           
 21033                           ;sort.c: 460: printf("TIME %d:%02d", min, sec);
 21034  003224  0E42               	movlw	low STR_65
 21035  003226  6E0D               	movwf	i2printf@f,c
 21036  003228  0EFF               	movlw	high STR_65
 21037  00322A  6E0E               	movwf	i2printf@f+1,c
 21038  00322C  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21039  003230  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21040  003234  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21041  003238  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21042  00323C  ECD0  F00E         	call	i2_printf	;wreg free
 21043  003240  0012               	return		;funcret
 21044  003242                     __end_of_printSortTimer:
 21045                           	opt stack 0
 21046                           pclatu	equ	0xFFB
 21047                           pclath	equ	0xFFA
 21048                           tblptru	equ	0xFF8
 21049                           tblptrh	equ	0xFF7
 21050                           tblptrl	equ	0xFF6
 21051                           tablat	equ	0xFF5
 21052                           prodh	equ	0xFF4
 21053                           prodl	equ	0xFF3
 21054                           intcon	equ	0xFF2
 21055                           intcon2	equ	0xFF1
 21056                           intcon3	equ	0xFF0
 21057                           indf0	equ	0xFEF
 21058                           postinc0	equ	0xFEE
 21059                           fsr0h	equ	0xFEA
 21060                           fsr0l	equ	0xFE9
 21061                           wreg	equ	0xFE8
 21062                           postdec1	equ	0xFE5
 21063                           fsr1h	equ	0xFE2
 21064                           fsr1l	equ	0xFE1
 21065                           indf2	equ	0xFDF
 21066                           postinc2	equ	0xFDE
 21067                           postdec2	equ	0xFDD
 21068                           fsr2h	equ	0xFDA
 21069                           fsr2l	equ	0xFD9
 21070                           status	equ	0xFD8
 21071                           
 21072 ;; *************** function i2_printf *****************
 21073 ;; Defined at:
 21074 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21075 ;; Parameters:    Size  Location     Type
 21076 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21077 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21078 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21079 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21080 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21081 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21082 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21083 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21084 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21085 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21086 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21087 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21088 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21089 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21090 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21091 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21092 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21093 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21094 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21095 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21096 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21097 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21098 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21099 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21100 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21101 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21102 ;; Auto vars:     Size  Location     Type
 21103 ;;  printf          4    0        struct .
 21104 ;;  printf          2   39[COMRAM] int 
 21105 ;;  printf          2   35[COMRAM] unsigned int 
 21106 ;;  printf          2   33[COMRAM] unsigned int 
 21107 ;;  printf          2   31[COMRAM] PTR void [1]
 21108 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21109 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21110 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21111 ;;  printf          1   38[COMRAM] char 
 21112 ;;  printf          1   37[COMRAM] unsigned char 
 21113 ;;  printf          1   28[COMRAM] char 
 21114 ;; Return value:  Size  Location     Type
 21115 ;;                  2   12[COMRAM] int 
 21116 ;; Registers used:
 21117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21118 ;; Tracked objects:
 21119 ;;		On entry : 0/0
 21120 ;;		On exit  : 0/0
 21121 ;;		Unchanged: 0/0
 21122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21123 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21124 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21125 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21126 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21127 ;;Total ram usage:       29 bytes
 21128 ;; Hardware stack levels used:    1
 21129 ;; Hardware stack levels required when called:    2
 21130 ;; This function calls:
 21131 ;;		i2___lwdiv
 21132 ;;		i2___lwmod
 21133 ;;		i2___wmul
 21134 ;;		i2_isdigit
 21135 ;;		i2_putch
 21136 ;; This function is called by:
 21137 ;;		_change_state_to_menu_11
 21138 ;;		_change_state_to_menu_23
 21139 ;;		_change_state_to_logs_11
 21140 ;;		_change_state_to_logs_12
 21141 ;;		_change_state_to_logs_22
 21142 ;;		_change_state_to_logs_23
 21143 ;;		_change_state_to_logs_33
 21144 ;;		_change_state_to_logs_34
 21145 ;;		_printSortTimer
 21146 ;;		i2_change_state_to_menu_start
 21147 ;;		i2_change_state_to_menu_12
 21148 ;;		i2_change_state_to_menu_22
 21149 ;;		i2_printRTC
 21150 ;; This function uses a non-reentrant model
 21151 ;;
 21152                           
 21153                           	psect	text79
 21154  001DA0                     __ptext79:
 21155                           	opt stack 0
 21156  001DA0                     i2_printf:
 21157                           	opt stack 19
 21158                           
 21159                           ;doprnt.c: 466: va_list ap;
 21160                           ;doprnt.c: 499: signed char c;
 21161                           ;doprnt.c: 501: int width;
 21162                           ;doprnt.c: 506: signed char prec;
 21163                           ;doprnt.c: 508: unsigned char flag;
 21164                           ;doprnt.c: 523: union {
 21165                           ;doprnt.c: 524: unsigned long vd;
 21166                           ;doprnt.c: 525: double integ;
 21167                           ;doprnt.c: 526: } tmpval;
 21168                           ;doprnt.c: 528: unsigned int val;
 21169                           ;doprnt.c: 529: unsigned len;
 21170                           ;doprnt.c: 530: const char * cp;
 21171                           ;doprnt.c: 533: *ap = __va_start();
 21172                           
 21173                           ;incstack = 0
 21174  001DA0  0E0F               	movlw	low (?i2_printf+2)
 21175  001DA2  6E20               	movwf	i2printf@ap,c
 21176  001DA4  0E00               	movlw	high (?i2_printf+2)
 21177  001DA6  6E21               	movwf	i2printf@ap+1,c
 21178                           
 21179                           ;doprnt.c: 536: while(c = *f++) {
 21180  001DA8  D1A4               	goto	i2l6300
 21181  001DAA                     i2l6170:
 21182                           
 21183                           ;doprnt.c: 538: if(c != '%')
 21184  001DAA  0E25               	movlw	37
 21185  001DAC  1827               	xorwf	i2printf@c,w,c
 21186  001DAE  B4D8               	btfsc	status,2,c
 21187  001DB0  D004               	goto	i2l6174
 21188                           
 21189                           ;doprnt.c: 540: {
 21190                           ;doprnt.c: 541: (putch(c) );
 21191  001DB2  5027               	movf	i2printf@c,w,c
 21192  001DB4  EC0A  F028         	call	i2_putch
 21193                           
 21194                           ;doprnt.c: 542: continue;
 21195  001DB8  D19C               	goto	i2l6300
 21196  001DBA                     i2l6174:
 21197                           
 21198                           ;doprnt.c: 543: }
 21199                           ;doprnt.c: 546: width = 0;
 21200  001DBA  0E00               	movlw	0
 21201  001DBC  6E29               	movwf	i2printf@width+1,c
 21202  001DBE  0E00               	movlw	0
 21203  001DC0  6E28               	movwf	i2printf@width,c
 21204                           
 21205                           ;doprnt.c: 548: flag = 0;
 21206  001DC2  0E00               	movlw	0
 21207  001DC4  6E26               	movwf	i2printf@flag,c
 21208                           
 21209                           ;doprnt.c: 551: switch(*f) {
 21210                           
 21211                           ;doprnt.c: 550: for(;;) {
 21212  001DC6  D003               	goto	i2l6180
 21213  001DC8                     i2l6176:
 21214                           
 21215                           ;doprnt.c: 580: flag |= 0x04;
 21216  001DC8  8426               	bsf	i2printf@flag,2,c
 21217                           
 21218                           ;doprnt.c: 581: f++;
 21219  001DCA  4A0D               	infsnz	i2printf@f,f,c
 21220  001DCC  2A0E               	incf	i2printf@f+1,f,c
 21221  001DCE                     i2l6180:
 21222  001DCE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21223  001DD2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21224  001DD6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21225  001DD6  6AF8               	clrf	tblptru,c
 21226  001DD8                     	endif
 21227  001DD8                     	if	0	;tblptru may be non-zero
 21228  001DD8                     	endif
 21229  001DD8  0008               	tblrd		*
 21230  001DDA  50F5               	movf	tablat,w,c
 21231                           
 21232                           ; Switch size 1, requested type "space"
 21233                           ; Number of cases is 1, Range of values is 48 to 48
 21234                           ; switch strategies available:
 21235                           ; Name         Instructions Cycles
 21236                           ; simple_byte            4     3 (average)
 21237                           ;	Chosen strategy is simple_byte
 21238  001DDC  0A30               	xorlw	48	; case 48
 21239  001DDE  B4D8               	btfsc	status,2,c
 21240  001DE0  D7F3               	goto	i2l6176
 21241                           
 21242                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21243                           
 21244                           ;doprnt.c: 586: }
 21245                           
 21246                           ;doprnt.c: 585: break;
 21247  001DE2  C00D  FFF6         	movff	i2printf@f,tblptrl
 21248  001DE6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21249  001DEA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21250  001DEA  6AF8               	clrf	tblptru,c
 21251  001DEC                     	endif
 21252  001DEC                     	if	0	;tblptru may be non-zero
 21253  001DEC                     	endif
 21254  001DEC  0008               	tblrd		*
 21255  001DEE  50F5               	movf	tablat,w,c
 21256  001DF0  ECB4  F027         	call	i2_isdigit
 21257  001DF4  A0D8               	btfss	status,0,c
 21258  001DF6  D0A6               	goto	i2l6228
 21259                           
 21260                           ;doprnt.c: 598: width = 0;
 21261  001DF8  0E00               	movlw	0
 21262  001DFA  6E29               	movwf	i2printf@width+1,c
 21263  001DFC  0E00               	movlw	0
 21264  001DFE  6E28               	movwf	i2printf@width,c
 21265  001E00                     i2l6186:
 21266                           
 21267                           ;doprnt.c: 600: width *= 10;
 21268  001E00  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21269  001E04  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21270  001E08  0E00               	movlw	0
 21271  001E0A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21272  001E0C  0E0A               	movlw	10
 21273  001E0E  6E03               	movwf	i2___wmul@multiplicand,c
 21274  001E10  EC5A  F027         	call	i2___wmul	;wreg free
 21275  001E14  C001  F028         	movff	?i2___wmul,i2printf@width
 21276  001E18  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21277                           
 21278                           ;doprnt.c: 601: width += *f++ - '0';
 21279  001E1C  0ED0               	movlw	208
 21280  001E1E  6E19               	movwf	??i2_printf& (0+255),c
 21281  001E20  0EFF               	movlw	255
 21282  001E22  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21283  001E24  C00D  FFF6         	movff	i2printf@f,tblptrl
 21284  001E28  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21285  001E2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21286  001E2C  6AF8               	clrf	tblptru,c
 21287  001E2E                     	endif
 21288  001E2E                     	if	0	;tblptru may be non-zero
 21289  001E2E                     	endif
 21290  001E2E  0008               	tblrd		*
 21291  001E30  50F5               	movf	tablat,w,c
 21292  001E32  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21293  001E34  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21294  001E36  5019               	movf	??i2_printf,w,c
 21295  001E38  261B               	addwf	??i2_printf+2,f,c
 21296  001E3A  501A               	movf	??i2_printf+1,w,c
 21297  001E3C  221C               	addwfc	??i2_printf+3,f,c
 21298  001E3E  501B               	movf	??i2_printf+2,w,c
 21299  001E40  2628               	addwf	i2printf@width,f,c
 21300  001E42  501C               	movf	??i2_printf+3,w,c
 21301  001E44  2229               	addwfc	i2printf@width+1,f,c
 21302  001E46  4A0D               	infsnz	i2printf@f,f,c
 21303  001E48  2A0E               	incf	i2printf@f+1,f,c
 21304                           
 21305                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21306  001E4A  C00D  FFF6         	movff	i2printf@f,tblptrl
 21307  001E4E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21308  001E52                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21309  001E52  6AF8               	clrf	tblptru,c
 21310  001E54                     	endif
 21311  001E54                     	if	0	;tblptru may be non-zero
 21312  001E54                     	endif
 21313  001E54  0008               	tblrd		*
 21314  001E56  50F5               	movf	tablat,w,c
 21315  001E58  ECB4  F027         	call	i2_isdigit
 21316  001E5C  A0D8               	btfss	status,0,c
 21317  001E5E  D072               	goto	i2l6228
 21318  001E60  D7CF               	goto	i2l6186
 21319  001E62                     i2l6194:
 21320                           
 21321                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21322  001E62  C020  FFD9         	movff	i2printf@ap,fsr2l
 21323  001E66  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21324  001E6A  CFDE F01E          	movff	postinc2,i2printf@cp
 21325  001E6E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21326  001E72  0E02               	movlw	2
 21327  001E74  2620               	addwf	i2printf@ap,f,c
 21328  001E76  0E00               	movlw	0
 21329  001E78  2221               	addwfc	i2printf@ap+1,f,c
 21330                           
 21331                           ;doprnt.c: 740: if(!cp)
 21332  001E7A  501E               	movf	i2printf@cp,w,c
 21333  001E7C  101F               	iorwf	i2printf@cp+1,w,c
 21334  001E7E  A4D8               	btfss	status,2,c
 21335  001E80  D004               	goto	i2l6202
 21336                           
 21337                           ;doprnt.c: 741: cp = "(null)";
 21338  001E82  0EB6               	movlw	low STR_126
 21339  001E84  6E1E               	movwf	i2printf@cp,c
 21340  001E86  0EFF               	movlw	high STR_126
 21341  001E88  6E1F               	movwf	i2printf@cp+1,c
 21342  001E8A                     i2l6202:
 21343                           
 21344                           ;doprnt.c: 745: len = 0;
 21345  001E8A  0E00               	movlw	0
 21346  001E8C  6E23               	movwf	i2printf@len+1,c
 21347  001E8E  0E00               	movlw	0
 21348  001E90  6E22               	movwf	i2printf@len,c
 21349                           
 21350                           ;doprnt.c: 746: while(cp[len])
 21351  001E92  D002               	goto	i2l6206
 21352  001E94                     i2l6204:
 21353                           
 21354                           ;doprnt.c: 747: len++;
 21355  001E94  4A22               	infsnz	i2printf@len,f,c
 21356  001E96  2A23               	incf	i2printf@len+1,f,c
 21357  001E98                     i2l6206:
 21358  001E98  5022               	movf	i2printf@len,w,c
 21359  001E9A  241E               	addwf	i2printf@cp,w,c
 21360  001E9C  6E19               	movwf	??i2_printf& (0+255),c
 21361  001E9E  5023               	movf	i2printf@len+1,w,c
 21362  001EA0  201F               	addwfc	i2printf@cp+1,w,c
 21363  001EA2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21364  001EA4  C019  FFF6         	movff	??i2_printf,tblptrl
 21365  001EA8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21366  001EAC  0E00               	movlw	low (__mediumconst shr (0+16))
 21367  001EAE  6EF8               	movwf	tblptru,c
 21368  001EB0  0E0F               	movlw	(high __ramtop+-1)
 21369  001EB2  64F7               	cpfsgt	tblptrh,c
 21370  001EB4  D003               	bra	i2u481_47
 21371  001EB6  0008               	tblrd		*
 21372  001EB8  50F5               	movf	tablat,w,c
 21373  001EBA  D005               	bra	i2u481_40
 21374  001EBC                     i2u481_47:
 21375  001EBC  CFF6 FFE9          	movff	tblptrl,fsr0l
 21376  001EC0  CFF7 FFEA          	movff	tblptrh,fsr0h
 21377  001EC4  50EF               	movf	indf0,w,c
 21378  001EC6                     i2u481_40:
 21379  001EC6  0900               	iorlw	0
 21380  001EC8  A4D8               	btfss	status,2,c
 21381  001ECA  D7E4               	goto	i2l6204
 21382                           
 21383                           ;doprnt.c: 757: if(width > len)
 21384  001ECC  5028               	movf	i2printf@width,w,c
 21385  001ECE  5C22               	subwf	i2printf@len,w,c
 21386  001ED0  5029               	movf	i2printf@width+1,w,c
 21387  001ED2  5823               	subwfb	i2printf@len+1,w,c
 21388  001ED4  B0D8               	btfsc	status,0,c
 21389  001ED6  D005               	goto	i2l6212
 21390                           
 21391                           ;doprnt.c: 758: width -= len;
 21392  001ED8  5022               	movf	i2printf@len,w,c
 21393  001EDA  5E28               	subwf	i2printf@width,f,c
 21394  001EDC  5023               	movf	i2printf@len+1,w,c
 21395  001EDE  5A29               	subwfb	i2printf@width+1,f,c
 21396  001EE0  D008               	goto	i2l6216
 21397  001EE2                     i2l6212:
 21398                           
 21399                           ;doprnt.c: 759: else
 21400                           ;doprnt.c: 760: width = 0;
 21401  001EE2  0E00               	movlw	0
 21402  001EE4  6E29               	movwf	i2printf@width+1,c
 21403  001EE6  0E00               	movlw	0
 21404  001EE8  6E28               	movwf	i2printf@width,c
 21405                           
 21406                           ;doprnt.c: 764: while(width--)
 21407  001EEA  D003               	goto	i2l6216
 21408  001EEC                     i2l6214:
 21409                           
 21410                           ;doprnt.c: 765: (putch(' ') );
 21411  001EEC  0E20               	movlw	32
 21412  001EEE  EC0A  F028         	call	i2_putch
 21413  001EF2                     i2l6216:
 21414  001EF2  0628               	decf	i2printf@width,f,c
 21415  001EF4  A0D8               	btfss	status,0,c
 21416  001EF6  0629               	decf	i2printf@width+1,f,c
 21417  001EF8  2828               	incf	i2printf@width,w,c
 21418  001EFA  E1F8               	bnz	i2l6214
 21419  001EFC  2829               	incf	i2printf@width+1,w,c
 21420  001EFE  B4D8               	btfsc	status,2,c
 21421  001F00  D016               	goto	i2l6222
 21422  001F02  D7F4               	goto	i2l6214
 21423  001F04                     i2l6218:
 21424                           
 21425                           ;doprnt.c: 768: (putch(*cp++) );
 21426  001F04  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21427  001F08  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21428  001F0C  0E00               	movlw	low (__mediumconst shr (0+16))
 21429  001F0E  6EF8               	movwf	tblptru,c
 21430  001F10  0E0F               	movlw	(high __ramtop+-1)
 21431  001F12  64F7               	cpfsgt	tblptrh,c
 21432  001F14  D003               	bra	i2u485_47
 21433  001F16  0008               	tblrd		*
 21434  001F18  50F5               	movf	tablat,w,c
 21435  001F1A  D005               	bra	i2u485_40
 21436  001F1C                     i2u485_47:
 21437  001F1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 21438  001F20  CFF7 FFEA          	movff	tblptrh,fsr0h
 21439  001F24  50EF               	movf	indf0,w,c
 21440  001F26                     i2u485_40:
 21441  001F26  EC0A  F028         	call	i2_putch
 21442  001F2A  4A1E               	infsnz	i2printf@cp,f,c
 21443  001F2C  2A1F               	incf	i2printf@cp+1,f,c
 21444  001F2E                     i2l6222:
 21445  001F2E  0622               	decf	i2printf@len,f,c
 21446  001F30  A0D8               	btfss	status,0,c
 21447  001F32  0623               	decf	i2printf@len+1,f,c
 21448  001F34  2822               	incf	i2printf@len,w,c
 21449  001F36  E1E6               	bnz	i2l6218
 21450  001F38  2823               	incf	i2printf@len+1,w,c
 21451  001F3A  B4D8               	btfsc	status,2,c
 21452  001F3C  D0DA               	goto	i2l6300
 21453  001F3E  D7E2               	goto	i2l6218
 21454  001F40                     i2l6224:
 21455                           
 21456                           ;doprnt.c: 818: flag |= 0x40;
 21457  001F40  8C26               	bsf	i2printf@flag,6,c
 21458                           
 21459                           ;doprnt.c: 822: }
 21460                           
 21461                           ;doprnt.c: 819: break;
 21462  001F42  D01B               	goto	i2l1366
 21463  001F44                     i2l6228:
 21464  001F44  C00D  FFF6         	movff	i2printf@f,tblptrl
 21465  001F48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21466  001F4C  4A0D               	infsnz	i2printf@f,f,c
 21467  001F4E  2A0E               	incf	i2printf@f+1,f,c
 21468  001F50                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21469  001F50  6AF8               	clrf	tblptru,c
 21470  001F52                     	endif
 21471  001F52                     	if	0	;tblptru may be non-zero
 21472  001F52                     	endif
 21473  001F52  0008               	tblrd		*
 21474  001F54  CFF5 F027          	movff	tablat,i2printf@c
 21475  001F58  5027               	movf	i2printf@c,w,c
 21476                           
 21477                           ; Switch size 1, requested type "space"
 21478                           ; Number of cases is 5, Range of values is 0 to 117
 21479                           ; switch strategies available:
 21480                           ; Name         Instructions Cycles
 21481                           ; simple_byte           16     9 (average)
 21482                           ;	Chosen strategy is simple_byte
 21483  001F5A  0A00               	xorlw	0	; case 0
 21484  001F5C  B4D8               	btfsc	status,2,c
 21485  001F5E  0012               	return	
 21486  001F60  0A64               	xorlw	100	; case 100
 21487  001F62  B4D8               	btfsc	status,2,c
 21488  001F64  D00A               	goto	i2l1366
 21489  001F66  0A0D               	xorlw	13	; case 105
 21490  001F68  B4D8               	btfsc	status,2,c
 21491  001F6A  D007               	goto	i2l1366
 21492  001F6C  0A1A               	xorlw	26	; case 115
 21493  001F6E  B4D8               	btfsc	status,2,c
 21494  001F70  D778               	goto	i2l6194
 21495  001F72  0A06               	xorlw	6	; case 117
 21496  001F74  B4D8               	btfsc	status,2,c
 21497  001F76  D7E4               	goto	i2l6224
 21498  001F78  D0BC               	goto	i2l6300
 21499  001F7A                     i2l1366:
 21500                           
 21501                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21502  001F7A  BC26               	btfsc	i2printf@flag,6,c
 21503  001F7C  D015               	goto	i2l6240
 21504                           
 21505                           ;doprnt.c: 1253: {
 21506                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21507  001F7E  C020  FFD9         	movff	i2printf@ap,fsr2l
 21508  001F82  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21509  001F86  CFDE F024          	movff	postinc2,i2printf@val
 21510  001F8A  CFDD F025          	movff	postdec2,i2printf@val+1
 21511  001F8E  0E02               	movlw	2
 21512  001F90  2620               	addwf	i2printf@ap,f,c
 21513  001F92  0E00               	movlw	0
 21514  001F94  2221               	addwfc	i2printf@ap+1,f,c
 21515                           
 21516                           ;doprnt.c: 1261: if((int)val < 0) {
 21517  001F96  AE25               	btfss	i2printf@val+1,7,c
 21518  001F98  D013               	goto	i2l6244
 21519                           
 21520                           ;doprnt.c: 1262: flag |= 0x03;
 21521  001F9A  0E03               	movlw	3
 21522  001F9C  1226               	iorwf	i2printf@flag,f,c
 21523                           
 21524                           ;doprnt.c: 1263: val = -val;
 21525  001F9E  6C24               	negf	i2printf@val,c
 21526  001FA0  1E25               	comf	i2printf@val+1,f,c
 21527  001FA2  B0D8               	btfsc	status,0,c
 21528  001FA4  2A25               	incf	i2printf@val+1,f,c
 21529                           
 21530                           ;doprnt.c: 1264: }
 21531                           ;doprnt.c: 1266: }
 21532  001FA6  D00C               	goto	i2l6244
 21533  001FA8                     i2l6240:
 21534                           
 21535                           ;doprnt.c: 1268: else
 21536                           ;doprnt.c: 1273: {
 21537                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21538  001FA8  C020  FFD9         	movff	i2printf@ap,fsr2l
 21539  001FAC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21540  001FB0  CFDE F024          	movff	postinc2,i2printf@val
 21541  001FB4  CFDD F025          	movff	postdec2,i2printf@val+1
 21542  001FB8  0E02               	movlw	2
 21543  001FBA  2620               	addwf	i2printf@ap,f,c
 21544  001FBC  0E00               	movlw	0
 21545  001FBE  2221               	addwfc	i2printf@ap+1,f,c
 21546  001FC0                     i2l6244:
 21547                           
 21548                           ;doprnt.c: 1287: }
 21549                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21550  001FC0  0E01               	movlw	1
 21551  001FC2  6E27               	movwf	i2printf@c,c
 21552  001FC4                     i2l6246:
 21553  001FC4  0E05               	movlw	5
 21554  001FC6  1827               	xorwf	i2printf@c,w,c
 21555  001FC8  B4D8               	btfsc	status,2,c
 21556  001FCA  D015               	goto	i2l6258
 21557                           
 21558                           ;doprnt.c: 1306: if(val < dpowers[c])
 21559  001FCC  5027               	movf	i2printf@c,w,c
 21560  001FCE  0D02               	mullw	2
 21561  001FD0  0E00               	movlw	low _dpowers
 21562  001FD2  24F3               	addwf	prodl,w,c
 21563  001FD4  6EF6               	movwf	tblptrl,c
 21564  001FD6  0EFB               	movlw	high _dpowers
 21565  001FD8  20F4               	addwfc	prodh,w,c
 21566  001FDA  6EF7               	movwf	tblptrh,c
 21567  001FDC                     	if	1	;There are 3 active tblptr bytes
 21568  001FDC  6AF8               	clrf	tblptru,c
 21569  001FDE  0E00               	movlw	low (__mediumconst shr (0+16))
 21570  001FE0  22F8               	addwfc	tblptru,f,c
 21571  001FE2                     	endif
 21572  001FE2  0009               	tblrd		*+
 21573  001FE4  50F5               	movf	tablat,w,c
 21574  001FE6  5C24               	subwf	i2printf@val,w,c
 21575  001FE8  0009               	tblrd		*+
 21576  001FEA  50F5               	movf	tablat,w,c
 21577  001FEC  5825               	subwfb	i2printf@val+1,w,c
 21578  001FEE  A0D8               	btfss	status,0,c
 21579  001FF0  D002               	goto	i2l6258
 21580                           
 21581                           ;doprnt.c: 1307: break;
 21582  001FF2  2A27               	incf	i2printf@c,f,c
 21583  001FF4  D7E7               	goto	i2l6246
 21584  001FF6                     i2l6258:
 21585                           
 21586                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21587  001FF6  5028               	movf	i2printf@width,w,c
 21588  001FF8  1029               	iorwf	i2printf@width+1,w,c
 21589  001FFA  B4D8               	btfsc	status,2,c
 21590  001FFC  D009               	goto	i2l6264
 21591  001FFE  C026  F019         	movff	i2printf@flag,??i2_printf
 21592  002002  0E03               	movlw	3
 21593  002004  1619               	andwf	??i2_printf,f,c
 21594  002006  B4D8               	btfsc	status,2,c
 21595  002008  D003               	goto	i2l6264
 21596                           
 21597                           ;doprnt.c: 1346: width--;
 21598  00200A  0628               	decf	i2printf@width,f,c
 21599  00200C  A0D8               	btfss	status,0,c
 21600  00200E  0629               	decf	i2printf@width+1,f,c
 21601  002010                     i2l6264:
 21602                           
 21603                           ;doprnt.c: 1381: if(width > c)
 21604  002010  0E80               	movlw	128
 21605  002012  BE27               	btfsc	i2printf@c,7,c
 21606  002014  0E7F               	movlw	127
 21607  002016  6E19               	movwf	??i2_printf& (0+255),c
 21608  002018  5028               	movf	i2printf@width,w,c
 21609  00201A  5C27               	subwf	i2printf@c,w,c
 21610  00201C  5029               	movf	i2printf@width+1,w,c
 21611  00201E  0A80               	xorlw	128
 21612  002020  5819               	subwfb	??i2_printf& (0+255),w,c
 21613  002022  B0D8               	btfsc	status,0,c
 21614  002024  D007               	goto	i2l6268
 21615                           
 21616                           ;doprnt.c: 1382: width -= c;
 21617  002026  5027               	movf	i2printf@c,w,c
 21618  002028  5E28               	subwf	i2printf@width,f,c
 21619  00202A  0E00               	movlw	0
 21620  00202C  BE27               	btfsc	i2printf@c,7,c
 21621  00202E  0EFF               	movlw	255
 21622  002030  5A29               	subwfb	i2printf@width+1,f,c
 21623  002032  D004               	goto	i2l6270
 21624  002034                     i2l6268:
 21625                           
 21626                           ;doprnt.c: 1383: else
 21627                           ;doprnt.c: 1384: width = 0;
 21628  002034  0E00               	movlw	0
 21629  002036  6E29               	movwf	i2printf@width+1,c
 21630  002038  0E00               	movlw	0
 21631  00203A  6E28               	movwf	i2printf@width,c
 21632  00203C                     i2l6270:
 21633                           
 21634                           ;doprnt.c: 1387: if(flag & 0x04) {
 21635  00203C  A426               	btfss	i2printf@flag,2,c
 21636  00203E  D014               	goto	i2l6282
 21637                           
 21638                           ;doprnt.c: 1392: if(flag & 0x03)
 21639  002040  C026  F019         	movff	i2printf@flag,??i2_printf
 21640  002044  0E03               	movlw	3
 21641  002046  1619               	andwf	??i2_printf,f,c
 21642  002048  B4D8               	btfsc	status,2,c
 21643  00204A  D003               	goto	i2l6276
 21644                           
 21645                           ;doprnt.c: 1393: (putch('-') );
 21646  00204C  0E2D               	movlw	45
 21647  00204E  EC0A  F028         	call	i2_putch
 21648  002052                     i2l6276:
 21649                           
 21650                           ;doprnt.c: 1415: if(width)
 21651  002052  5028               	movf	i2printf@width,w,c
 21652  002054  1029               	iorwf	i2printf@width+1,w,c
 21653  002056  B4D8               	btfsc	status,2,c
 21654  002058  D01E               	goto	i2l6292
 21655                           
 21656                           ;doprnt.c: 1417: (putch('0') );
 21657                           
 21658                           ;doprnt.c: 1416: do
 21659  00205A  0E30               	movlw	48
 21660  00205C  EC0A  F028         	call	i2_putch
 21661                           
 21662                           ;doprnt.c: 1418: while(--width);
 21663  002060  0628               	decf	i2printf@width,f,c
 21664  002062  A0D8               	btfss	status,0,c
 21665  002064  0629               	decf	i2printf@width+1,f,c
 21666  002066  D7F5               	goto	i2l6276
 21667  002068                     i2l6282:
 21668                           
 21669                           ;doprnt.c: 1422: {
 21670                           ;doprnt.c: 1424: if(width
 21671                           ;doprnt.c: 1428: )
 21672  002068  5028               	movf	i2printf@width,w,c
 21673  00206A  1029               	iorwf	i2printf@width+1,w,c
 21674  00206C  B4D8               	btfsc	status,2,c
 21675  00206E  D00A               	goto	i2l6288
 21676  002070                     i2l6284:
 21677                           
 21678                           ;doprnt.c: 1430: (putch(' ') );
 21679  002070  0E20               	movlw	32
 21680  002072  EC0A  F028         	call	i2_putch
 21681                           
 21682                           ;doprnt.c: 1431: while(--width);
 21683  002076  0628               	decf	i2printf@width,f,c
 21684  002078  A0D8               	btfss	status,0,c
 21685  00207A  0629               	decf	i2printf@width+1,f,c
 21686  00207C  5028               	movf	i2printf@width,w,c
 21687  00207E  1029               	iorwf	i2printf@width+1,w,c
 21688  002080  A4D8               	btfss	status,2,c
 21689  002082  D7F6               	goto	i2l6284
 21690  002084                     i2l6288:
 21691                           
 21692                           ;doprnt.c: 1438: if(flag & 0x03)
 21693  002084  C026  F019         	movff	i2printf@flag,??i2_printf
 21694  002088  0E03               	movlw	3
 21695  00208A  1619               	andwf	??i2_printf,f,c
 21696  00208C  B4D8               	btfsc	status,2,c
 21697  00208E  D003               	goto	i2l6292
 21698                           
 21699                           ;doprnt.c: 1439: (putch('-') );
 21700  002090  0E2D               	movlw	45
 21701  002092  EC0A  F028         	call	i2_putch
 21702  002096                     i2l6292:
 21703                           
 21704                           ;doprnt.c: 1469: }
 21705                           ;doprnt.c: 1472: prec = c;
 21706  002096  C027  F01D         	movff	i2printf@c,i2printf@prec
 21707                           
 21708                           ;doprnt.c: 1474: while(prec--) {
 21709  00209A  D027               	goto	i2l6298
 21710  00209C                     i2l6294:
 21711                           
 21712                           ;doprnt.c: 1478: {
 21713                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21714  00209C  501D               	movf	i2printf@prec,w,c
 21715  00209E  0D02               	mullw	2
 21716  0020A0  0E00               	movlw	low _dpowers
 21717  0020A2  24F3               	addwf	prodl,w,c
 21718  0020A4  6EF6               	movwf	tblptrl,c
 21719  0020A6  0EFB               	movlw	high _dpowers
 21720  0020A8  20F4               	addwfc	prodh,w,c
 21721  0020AA  6EF7               	movwf	tblptrh,c
 21722  0020AC                     	if	1	;There are 3 active tblptr bytes
 21723  0020AC  6AF8               	clrf	tblptru,c
 21724  0020AE  0E00               	movlw	low (__mediumconst shr (0+16))
 21725  0020B0  22F8               	addwfc	tblptru,f,c
 21726  0020B2                     	endif
 21727  0020B2  0009               	tblrd		*+
 21728  0020B4  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21729  0020B8  000A               	tblrd		*-
 21730  0020BA  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21731  0020BE  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21732  0020C2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21733  0020C6  EC54  F024         	call	i2___lwdiv	;wreg free
 21734  0020CA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21735  0020CE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21736  0020D2  0E00               	movlw	0
 21737  0020D4  6E04               	movwf	i2___lwmod@divisor+1,c
 21738  0020D6  0E0A               	movlw	10
 21739  0020D8  6E03               	movwf	i2___lwmod@divisor,c
 21740  0020DA  EC13  F025         	call	i2___lwmod	;wreg free
 21741  0020DE  5001               	movf	?i2___lwmod,w,c
 21742  0020E0  0F30               	addlw	48
 21743  0020E2  6E27               	movwf	i2printf@c,c
 21744                           
 21745                           ;doprnt.c: 1523: }
 21746                           ;doprnt.c: 1524: (putch(c) );
 21747  0020E4  5027               	movf	i2printf@c,w,c
 21748  0020E6  EC0A  F028         	call	i2_putch
 21749  0020EA                     i2l6298:
 21750  0020EA  061D               	decf	i2printf@prec,f,c
 21751  0020EC  281D               	incf	i2printf@prec,w,c
 21752  0020EE  A4D8               	btfss	status,2,c
 21753  0020F0  D7D5               	goto	i2l6294
 21754  0020F2                     i2l6300:
 21755  0020F2  C00D  FFF6         	movff	i2printf@f,tblptrl
 21756  0020F6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21757  0020FA  4A0D               	infsnz	i2printf@f,f,c
 21758  0020FC  2A0E               	incf	i2printf@f+1,f,c
 21759  0020FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21760  0020FE  6AF8               	clrf	tblptru,c
 21761  002100                     	endif
 21762  002100                     	if	0	;tblptru may be non-zero
 21763  002100                     	endif
 21764  002100  0008               	tblrd		*
 21765  002102  CFF5 F027          	movff	tablat,i2printf@c
 21766  002106  5027               	movf	i2printf@c,w,c
 21767  002108  B4D8               	btfsc	status,2,c
 21768  00210A  0012               	return	
 21769  00210C  D64E               	goto	i2l6170
 21770  00210E                     __end_ofi2_printf:
 21771                           	opt stack 0
 21772                           pclatu	equ	0xFFB
 21773                           pclath	equ	0xFFA
 21774                           tblptru	equ	0xFF8
 21775                           tblptrh	equ	0xFF7
 21776                           tblptrl	equ	0xFF6
 21777                           tablat	equ	0xFF5
 21778                           prodh	equ	0xFF4
 21779                           prodl	equ	0xFF3
 21780                           intcon	equ	0xFF2
 21781                           intcon2	equ	0xFF1
 21782                           intcon3	equ	0xFF0
 21783                           indf0	equ	0xFEF
 21784                           postinc0	equ	0xFEE
 21785                           fsr0h	equ	0xFEA
 21786                           fsr0l	equ	0xFE9
 21787                           wreg	equ	0xFE8
 21788                           postdec1	equ	0xFE5
 21789                           fsr1h	equ	0xFE2
 21790                           fsr1l	equ	0xFE1
 21791                           indf2	equ	0xFDF
 21792                           postinc2	equ	0xFDE
 21793                           postdec2	equ	0xFDD
 21794                           fsr2h	equ	0xFDA
 21795                           fsr2l	equ	0xFD9
 21796                           status	equ	0xFD8
 21797                           
 21798 ;; *************** function i2_putch *****************
 21799 ;; Defined at:
 21800 ;;		line 20 in file "lcd.c"
 21801 ;; Parameters:    Size  Location     Type
 21802 ;;  data            1    wreg     unsigned char 
 21803 ;; Auto vars:     Size  Location     Type
 21804 ;;  data            1    2[COMRAM] unsigned char 
 21805 ;; Return value:  Size  Location     Type
 21806 ;;                  1    wreg      void 
 21807 ;; Registers used:
 21808 ;;		wreg, status,2, status,0, cstack
 21809 ;; Tracked objects:
 21810 ;;		On entry : 0/0
 21811 ;;		On exit  : 0/0
 21812 ;;		Unchanged: 0/0
 21813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21818 ;;Total ram usage:        1 bytes
 21819 ;; Hardware stack levels used:    1
 21820 ;; Hardware stack levels required when called:    1
 21821 ;; This function calls:
 21822 ;;		i2_lcdNibble
 21823 ;; This function is called by:
 21824 ;;		i2_printf
 21825 ;; This function uses a non-reentrant model
 21826 ;;
 21827                           
 21828                           	psect	text80
 21829  005014                     __ptext80:
 21830                           	opt stack 0
 21831  005014                     i2_putch:
 21832                           	opt stack 19
 21833                           
 21834                           ;incstack = 0
 21835                           ;i2putch@data stored from wreg
 21836  005014  6E03               	movwf	i2putch@data,c
 21837                           
 21838                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21839  005016  848C               	bsf	3980,2,c	;volatile
 21840                           
 21841                           ;lcd.c: 22: lcdNibble(data);
 21842  005018  5003               	movf	i2putch@data,w,c
 21843  00501A  EC29  F024         	call	i2_lcdNibble
 21844  00501E  0012               	return		;funcret
 21845  005020                     __end_ofi2_putch:
 21846                           	opt stack 0
 21847                           pclatu	equ	0xFFB
 21848                           pclath	equ	0xFFA
 21849                           tblptru	equ	0xFF8
 21850                           tblptrh	equ	0xFF7
 21851                           tblptrl	equ	0xFF6
 21852                           tablat	equ	0xFF5
 21853                           prodh	equ	0xFF4
 21854                           prodl	equ	0xFF3
 21855                           intcon	equ	0xFF2
 21856                           intcon2	equ	0xFF1
 21857                           intcon3	equ	0xFF0
 21858                           indf0	equ	0xFEF
 21859                           postinc0	equ	0xFEE
 21860                           fsr0h	equ	0xFEA
 21861                           fsr0l	equ	0xFE9
 21862                           wreg	equ	0xFE8
 21863                           postdec1	equ	0xFE5
 21864                           fsr1h	equ	0xFE2
 21865                           fsr1l	equ	0xFE1
 21866                           indf2	equ	0xFDF
 21867                           postinc2	equ	0xFDE
 21868                           postdec2	equ	0xFDD
 21869                           fsr2h	equ	0xFDA
 21870                           fsr2l	equ	0xFD9
 21871                           status	equ	0xFD8
 21872                           
 21873 ;; *************** function i2_isdigit *****************
 21874 ;; Defined at:
 21875 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21876 ;; Parameters:    Size  Location     Type
 21877 ;;  c               1    wreg     unsigned char 
 21878 ;; Auto vars:     Size  Location     Type
 21879 ;;  c               1    2[COMRAM] unsigned char 
 21880 ;; Return value:  Size  Location     Type
 21881 ;;		None               void
 21882 ;; Registers used:
 21883 ;;		wreg, status,2, status,0
 21884 ;; Tracked objects:
 21885 ;;		On entry : 0/0
 21886 ;;		On exit  : 0/0
 21887 ;;		Unchanged: 0/0
 21888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21892 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21893 ;;Total ram usage:        3 bytes
 21894 ;; Hardware stack levels used:    1
 21895 ;; This function calls:
 21896 ;;		Nothing
 21897 ;; This function is called by:
 21898 ;;		i2_printf
 21899 ;; This function uses a non-reentrant model
 21900 ;;
 21901                           
 21902                           	psect	text81
 21903  004F68                     __ptext81:
 21904                           	opt stack 0
 21905  004F68                     i2_isdigit:
 21906                           	opt stack 20
 21907                           
 21908                           ;incstack = 0
 21909                           ;i2isdigit@c stored from wreg
 21910  004F68  6E03               	movwf	i2isdigit@c,c
 21911  004F6A  0E00               	movlw	0
 21912  004F6C  6E02               	movwf	i2_isdigit$1977,c
 21913  004F6E  0E3A               	movlw	58
 21914  004F70  6003               	cpfslt	i2isdigit@c,c
 21915  004F72  D005               	goto	i2l5874
 21916  004F74  0E2F               	movlw	47
 21917  004F76  6403               	cpfsgt	i2isdigit@c,c
 21918  004F78  D002               	goto	i2l5874
 21919  004F7A  0E01               	movlw	1
 21920  004F7C  6E02               	movwf	i2_isdigit$1977,c
 21921  004F7E                     i2l5874:
 21922  004F7E  C002  F001         	movff	i2_isdigit$1977,??i2_isdigit
 21923  004F82  3001               	rrcf	??i2_isdigit,w,c
 21924  004F84  0012               	return	
 21925  004F86                     __end_ofi2_isdigit:
 21926                           	opt stack 0
 21927                           pclatu	equ	0xFFB
 21928                           pclath	equ	0xFFA
 21929                           tblptru	equ	0xFF8
 21930                           tblptrh	equ	0xFF7
 21931                           tblptrl	equ	0xFF6
 21932                           tablat	equ	0xFF5
 21933                           prodh	equ	0xFF4
 21934                           prodl	equ	0xFF3
 21935                           intcon	equ	0xFF2
 21936                           intcon2	equ	0xFF1
 21937                           intcon3	equ	0xFF0
 21938                           indf0	equ	0xFEF
 21939                           postinc0	equ	0xFEE
 21940                           fsr0h	equ	0xFEA
 21941                           fsr0l	equ	0xFE9
 21942                           wreg	equ	0xFE8
 21943                           postdec1	equ	0xFE5
 21944                           fsr1h	equ	0xFE2
 21945                           fsr1l	equ	0xFE1
 21946                           indf2	equ	0xFDF
 21947                           postinc2	equ	0xFDE
 21948                           postdec2	equ	0xFDD
 21949                           fsr2h	equ	0xFDA
 21950                           fsr2l	equ	0xFD9
 21951                           status	equ	0xFD8
 21952                           
 21953 ;; *************** function i2___wmul *****************
 21954 ;; Defined at:
 21955 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 21956 ;; Parameters:    Size  Location     Type
 21957 ;;  multiplier      2    0[COMRAM] unsigned int 
 21958 ;;  multiplicand    2    2[COMRAM] unsigned int 
 21959 ;; Auto vars:     Size  Location     Type
 21960 ;;  __wmul          2    4[COMRAM] unsigned int 
 21961 ;; Return value:  Size  Location     Type
 21962 ;;                  2    0[COMRAM] unsigned int 
 21963 ;; Registers used:
 21964 ;;		wreg, status,2, status,0, prodl, prodh
 21965 ;; Tracked objects:
 21966 ;;		On entry : 0/0
 21967 ;;		On exit  : 0/0
 21968 ;;		Unchanged: 0/0
 21969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21970 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;Total ram usage:        6 bytes
 21975 ;; Hardware stack levels used:    1
 21976 ;; This function calls:
 21977 ;;		Nothing
 21978 ;; This function is called by:
 21979 ;;		_printSortTimer
 21980 ;;		_retrieveLog
 21981 ;;		i2_printf
 21982 ;; This function uses a non-reentrant model
 21983 ;;
 21984                           
 21985                           	psect	text82
 21986  004EB4                     __ptext82:
 21987                           	opt stack 0
 21988  004EB4                     i2___wmul:
 21989                           	opt stack 20
 21990                           
 21991                           ;incstack = 0
 21992  004EB4  5001               	movf	i2___wmul@multiplier,w,c
 21993  004EB6  0203               	mulwf	i2___wmul@multiplicand,c
 21994  004EB8  CFF3 F005          	movff	prodl,i2___wmul@product
 21995  004EBC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21996  004EC0  5001               	movf	i2___wmul@multiplier,w,c
 21997  004EC2  0204               	mulwf	i2___wmul@multiplicand+1,c
 21998  004EC4  50F3               	movf	prodl,w,c
 21999  004EC6  2606               	addwf	i2___wmul@product+1,f,c
 22000  004EC8  5002               	movf	i2___wmul@multiplier+1,w,c
 22001  004ECA  0203               	mulwf	i2___wmul@multiplicand,c
 22002  004ECC  50F3               	movf	prodl,w,c
 22003  004ECE  2606               	addwf	i2___wmul@product+1,f,c
 22004  004ED0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22005  004ED4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22006  004ED8  0012               	return	
 22007  004EDA                     __end_ofi2___wmul:
 22008                           	opt stack 0
 22009                           pclatu	equ	0xFFB
 22010                           pclath	equ	0xFFA
 22011                           tblptru	equ	0xFF8
 22012                           tblptrh	equ	0xFF7
 22013                           tblptrl	equ	0xFF6
 22014                           tablat	equ	0xFF5
 22015                           prodh	equ	0xFF4
 22016                           prodl	equ	0xFF3
 22017                           intcon	equ	0xFF2
 22018                           intcon2	equ	0xFF1
 22019                           intcon3	equ	0xFF0
 22020                           indf0	equ	0xFEF
 22021                           postinc0	equ	0xFEE
 22022                           fsr0h	equ	0xFEA
 22023                           fsr0l	equ	0xFE9
 22024                           wreg	equ	0xFE8
 22025                           postdec1	equ	0xFE5
 22026                           fsr1h	equ	0xFE2
 22027                           fsr1l	equ	0xFE1
 22028                           indf2	equ	0xFDF
 22029                           postinc2	equ	0xFDE
 22030                           postdec2	equ	0xFDD
 22031                           fsr2h	equ	0xFDA
 22032                           fsr2l	equ	0xFD9
 22033                           status	equ	0xFD8
 22034                           
 22035 ;; *************** function i2___lwmod *****************
 22036 ;; Defined at:
 22037 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22038 ;; Parameters:    Size  Location     Type
 22039 ;;  dividend        2    0[COMRAM] unsigned int 
 22040 ;;  divisor         2    2[COMRAM] unsigned int 
 22041 ;; Auto vars:     Size  Location     Type
 22042 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22043 ;; Return value:  Size  Location     Type
 22044 ;;                  2    0[COMRAM] unsigned int 
 22045 ;; Registers used:
 22046 ;;		wreg, status,2, status,0
 22047 ;; Tracked objects:
 22048 ;;		On entry : 0/0
 22049 ;;		On exit  : 0/0
 22050 ;;		Unchanged: 0/0
 22051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22055 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22056 ;;Total ram usage:        5 bytes
 22057 ;; Hardware stack levels used:    1
 22058 ;; This function calls:
 22059 ;;		Nothing
 22060 ;; This function is called by:
 22061 ;;		_printSortTimer
 22062 ;;		i2_printf
 22063 ;; This function uses a non-reentrant model
 22064 ;;
 22065                           
 22066                           	psect	text83
 22067  004A26                     __ptext83:
 22068                           	opt stack 0
 22069  004A26                     i2___lwmod:
 22070                           	opt stack 20
 22071                           
 22072                           ;incstack = 0
 22073  004A26  5003               	movf	i2___lwmod@divisor,w,c
 22074  004A28  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22075  004A2A  B4D8               	btfsc	status,2,c
 22076  004A2C  D018               	goto	i2l1823
 22077  004A2E  0E01               	movlw	1
 22078  004A30  6E05               	movwf	i2___lwmod@counter,c
 22079  004A32  D004               	goto	i2l5906
 22080  004A34                     i2l5904:
 22081  004A34  90D8               	bcf	status,0,c
 22082  004A36  3603               	rlcf	i2___lwmod@divisor,f,c
 22083  004A38  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22084  004A3A  2A05               	incf	i2___lwmod@counter,f,c
 22085  004A3C                     i2l5906:
 22086  004A3C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22087  004A3E  D7FA               	goto	i2l5904
 22088  004A40                     i2l5908:
 22089  004A40  5003               	movf	i2___lwmod@divisor,w,c
 22090  004A42  5C01               	subwf	i2___lwmod@dividend,w,c
 22091  004A44  5004               	movf	i2___lwmod@divisor+1,w,c
 22092  004A46  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22093  004A48  A0D8               	btfss	status,0,c
 22094  004A4A  D004               	goto	i2l5912
 22095  004A4C  5003               	movf	i2___lwmod@divisor,w,c
 22096  004A4E  5E01               	subwf	i2___lwmod@dividend,f,c
 22097  004A50  5004               	movf	i2___lwmod@divisor+1,w,c
 22098  004A52  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22099  004A54                     i2l5912:
 22100  004A54  90D8               	bcf	status,0,c
 22101  004A56  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22102  004A58  3203               	rrcf	i2___lwmod@divisor,f,c
 22103  004A5A  2E05               	decfsz	i2___lwmod@counter,f,c
 22104  004A5C  D7F1               	goto	i2l5908
 22105  004A5E                     i2l1823:
 22106  004A5E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22107  004A62  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22108  004A66  0012               	return		;funcret
 22109  004A68                     __end_ofi2___lwmod:
 22110                           	opt stack 0
 22111                           pclatu	equ	0xFFB
 22112                           pclath	equ	0xFFA
 22113                           tblptru	equ	0xFF8
 22114                           tblptrh	equ	0xFF7
 22115                           tblptrl	equ	0xFF6
 22116                           tablat	equ	0xFF5
 22117                           prodh	equ	0xFF4
 22118                           prodl	equ	0xFF3
 22119                           intcon	equ	0xFF2
 22120                           intcon2	equ	0xFF1
 22121                           intcon3	equ	0xFF0
 22122                           indf0	equ	0xFEF
 22123                           postinc0	equ	0xFEE
 22124                           fsr0h	equ	0xFEA
 22125                           fsr0l	equ	0xFE9
 22126                           wreg	equ	0xFE8
 22127                           postdec1	equ	0xFE5
 22128                           fsr1h	equ	0xFE2
 22129                           fsr1l	equ	0xFE1
 22130                           indf2	equ	0xFDF
 22131                           postinc2	equ	0xFDE
 22132                           postdec2	equ	0xFDD
 22133                           fsr2h	equ	0xFDA
 22134                           fsr2l	equ	0xFD9
 22135                           status	equ	0xFD8
 22136                           
 22137 ;; *************** function i2___lwdiv *****************
 22138 ;; Defined at:
 22139 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22140 ;; Parameters:    Size  Location     Type
 22141 ;;  dividend        2    5[COMRAM] unsigned int 
 22142 ;;  divisor         2    7[COMRAM] unsigned int 
 22143 ;; Auto vars:     Size  Location     Type
 22144 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22145 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22146 ;; Return value:  Size  Location     Type
 22147 ;;                  2    5[COMRAM] unsigned int 
 22148 ;; Registers used:
 22149 ;;		wreg, status,2, status,0
 22150 ;; Tracked objects:
 22151 ;;		On entry : 0/0
 22152 ;;		On exit  : 0/0
 22153 ;;		Unchanged: 0/0
 22154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22156 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22158 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22159 ;;Total ram usage:        7 bytes
 22160 ;; Hardware stack levels used:    1
 22161 ;; This function calls:
 22162 ;;		Nothing
 22163 ;; This function is called by:
 22164 ;;		_printSortTimer
 22165 ;;		i2_printf
 22166 ;; This function uses a non-reentrant model
 22167 ;;
 22168                           
 22169                           	psect	text84
 22170  0048A8                     __ptext84:
 22171                           	opt stack 0
 22172  0048A8                     i2___lwdiv:
 22173                           	opt stack 20
 22174                           
 22175                           ;incstack = 0
 22176  0048A8  0E00               	movlw	0
 22177  0048AA  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22178  0048AC  0E00               	movlw	0
 22179  0048AE  6E0A               	movwf	i2___lwdiv@quotient,c
 22180  0048B0  5008               	movf	i2___lwdiv@divisor,w,c
 22181  0048B2  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22182  0048B4  B4D8               	btfsc	status,2,c
 22183  0048B6  D01C               	goto	i2l1813
 22184  0048B8  0E01               	movlw	1
 22185  0048BA  6E0C               	movwf	i2___lwdiv@counter,c
 22186  0048BC  D004               	goto	i2l5886
 22187  0048BE                     i2l5884:
 22188  0048BE  90D8               	bcf	status,0,c
 22189  0048C0  3608               	rlcf	i2___lwdiv@divisor,f,c
 22190  0048C2  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22191  0048C4  2A0C               	incf	i2___lwdiv@counter,f,c
 22192  0048C6                     i2l5886:
 22193  0048C6  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22194  0048C8  D7FA               	goto	i2l5884
 22195  0048CA                     i2l5888:
 22196  0048CA  90D8               	bcf	status,0,c
 22197  0048CC  360A               	rlcf	i2___lwdiv@quotient,f,c
 22198  0048CE  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22199  0048D0  5008               	movf	i2___lwdiv@divisor,w,c
 22200  0048D2  5C06               	subwf	i2___lwdiv@dividend,w,c
 22201  0048D4  5009               	movf	i2___lwdiv@divisor+1,w,c
 22202  0048D6  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22203  0048D8  A0D8               	btfss	status,0,c
 22204  0048DA  D005               	goto	i2l5896
 22205  0048DC  5008               	movf	i2___lwdiv@divisor,w,c
 22206  0048DE  5E06               	subwf	i2___lwdiv@dividend,f,c
 22207  0048E0  5009               	movf	i2___lwdiv@divisor+1,w,c
 22208  0048E2  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22209  0048E4  800A               	bsf	i2___lwdiv@quotient,0,c
 22210  0048E6                     i2l5896:
 22211  0048E6  90D8               	bcf	status,0,c
 22212  0048E8  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22213  0048EA  3208               	rrcf	i2___lwdiv@divisor,f,c
 22214  0048EC  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22215  0048EE  D7ED               	goto	i2l5888
 22216  0048F0                     i2l1813:
 22217  0048F0  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22218  0048F4  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22219  0048F8  0012               	return		;funcret
 22220  0048FA                     __end_ofi2___lwdiv:
 22221                           	opt stack 0
 22222                           pclatu	equ	0xFFB
 22223                           pclath	equ	0xFFA
 22224                           tblptru	equ	0xFF8
 22225                           tblptrh	equ	0xFF7
 22226                           tblptrl	equ	0xFF6
 22227                           tablat	equ	0xFF5
 22228                           prodh	equ	0xFF4
 22229                           prodl	equ	0xFF3
 22230                           intcon	equ	0xFF2
 22231                           intcon2	equ	0xFF1
 22232                           intcon3	equ	0xFF0
 22233                           indf0	equ	0xFEF
 22234                           postinc0	equ	0xFEE
 22235                           fsr0h	equ	0xFEA
 22236                           fsr0l	equ	0xFE9
 22237                           wreg	equ	0xFE8
 22238                           postdec1	equ	0xFE5
 22239                           fsr1h	equ	0xFE2
 22240                           fsr1l	equ	0xFE1
 22241                           indf2	equ	0xFDF
 22242                           postinc2	equ	0xFDE
 22243                           postdec2	equ	0xFDD
 22244                           fsr2h	equ	0xFDA
 22245                           fsr2l	equ	0xFD9
 22246                           status	equ	0xFD8
 22247                           
 22248 ;; *************** function i2_lcdInst *****************
 22249 ;; Defined at:
 22250 ;;		line 15 in file "lcd.c"
 22251 ;; Parameters:    Size  Location     Type
 22252 ;;  data            1    wreg     unsigned char 
 22253 ;; Auto vars:     Size  Location     Type
 22254 ;;  data            1    2[COMRAM] unsigned char 
 22255 ;; Return value:  Size  Location     Type
 22256 ;;                  1    wreg      void 
 22257 ;; Registers used:
 22258 ;;		wreg, status,2, status,0, cstack
 22259 ;; Tracked objects:
 22260 ;;		On entry : 0/0
 22261 ;;		On exit  : 0/0
 22262 ;;		Unchanged: 0/0
 22263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22268 ;;Total ram usage:        1 bytes
 22269 ;; Hardware stack levels used:    1
 22270 ;; Hardware stack levels required when called:    1
 22271 ;; This function calls:
 22272 ;;		i2_lcdNibble
 22273 ;; This function is called by:
 22274 ;;		_change_state_to_menu_11
 22275 ;;		_change_state_to_menu_23
 22276 ;;		_change_state_to_logs_11
 22277 ;;		_change_state_to_logs_12
 22278 ;;		_change_state_to_logs_22
 22279 ;;		_change_state_to_logs_23
 22280 ;;		_change_state_to_logs_33
 22281 ;;		_change_state_to_logs_34
 22282 ;;		_printSortTimer
 22283 ;;		i2_change_state_to_menu_start
 22284 ;;		i2_change_state_to_menu_12
 22285 ;;		i2_change_state_to_menu_22
 22286 ;;		i2_printRTC
 22287 ;; This function uses a non-reentrant model
 22288 ;;
 22289                           
 22290                           	psect	text85
 22291  005020                     __ptext85:
 22292                           	opt stack 0
 22293  005020                     i2_lcdInst:
 22294                           	opt stack 19
 22295                           
 22296                           ;incstack = 0
 22297                           ;i2lcdInst@data stored from wreg
 22298  005020  6E03               	movwf	i2lcdInst@data,c
 22299                           
 22300                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22301  005022  948C               	bcf	3980,2,c	;volatile
 22302                           
 22303                           ;lcd.c: 17: lcdNibble(data);
 22304  005024  5003               	movf	i2lcdInst@data,w,c
 22305  005026  EC29  F024         	call	i2_lcdNibble
 22306  00502A  0012               	return		;funcret
 22307  00502C                     __end_ofi2_lcdInst:
 22308                           	opt stack 0
 22309                           pclatu	equ	0xFFB
 22310                           pclath	equ	0xFFA
 22311                           tblptru	equ	0xFF8
 22312                           tblptrh	equ	0xFF7
 22313                           tblptrl	equ	0xFF6
 22314                           tablat	equ	0xFF5
 22315                           prodh	equ	0xFF4
 22316                           prodl	equ	0xFF3
 22317                           intcon	equ	0xFF2
 22318                           intcon2	equ	0xFF1
 22319                           intcon3	equ	0xFF0
 22320                           indf0	equ	0xFEF
 22321                           postinc0	equ	0xFEE
 22322                           fsr0h	equ	0xFEA
 22323                           fsr0l	equ	0xFE9
 22324                           wreg	equ	0xFE8
 22325                           postdec1	equ	0xFE5
 22326                           fsr1h	equ	0xFE2
 22327                           fsr1l	equ	0xFE1
 22328                           indf2	equ	0xFDF
 22329                           postinc2	equ	0xFDE
 22330                           postdec2	equ	0xFDD
 22331                           fsr2h	equ	0xFDA
 22332                           fsr2l	equ	0xFD9
 22333                           status	equ	0xFD8
 22334                           
 22335 ;; *************** function i2_lcdNibble *****************
 22336 ;; Defined at:
 22337 ;;		line 25 in file "lcd.c"
 22338 ;; Parameters:    Size  Location     Type
 22339 ;;  data            1    wreg     unsigned char 
 22340 ;; Auto vars:     Size  Location     Type
 22341 ;;  data            1    1[COMRAM] unsigned char 
 22342 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22343 ;; Return value:  Size  Location     Type
 22344 ;;                  1    wreg      void 
 22345 ;; Registers used:
 22346 ;;		wreg, status,2, status,0
 22347 ;; Tracked objects:
 22348 ;;		On entry : 0/0
 22349 ;;		On exit  : 0/0
 22350 ;;		Unchanged: 0/0
 22351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22356 ;;Total ram usage:        2 bytes
 22357 ;; Hardware stack levels used:    1
 22358 ;; This function calls:
 22359 ;;		Nothing
 22360 ;; This function is called by:
 22361 ;;		i2_lcdInst
 22362 ;;		i2_putch
 22363 ;; This function uses a non-reentrant model
 22364 ;;
 22365                           
 22366                           	psect	text86
 22367  004852                     __ptext86:
 22368                           	opt stack 0
 22369  004852                     i2_lcdNibble:
 22370                           	opt stack 19
 22371                           
 22372                           ;incstack = 0
 22373                           ;i2lcdNibble@data stored from wreg
 22374  004852  6E02               	movwf	i2lcdNibble@data,c
 22375                           
 22376                           ;lcd.c: 27: char temp = data & 0xF0;
 22377  004854  5002               	movf	i2lcdNibble@data,w,c
 22378  004856  0BF0               	andlw	240
 22379  004858  6E01               	movwf	i2lcdNibble@temp,c
 22380                           
 22381                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22382  00485A  508C               	movf	3980,w,c	;volatile
 22383  00485C  0B0F               	andlw	15
 22384  00485E  6E8C               	movwf	3980,c	;volatile
 22385                           
 22386                           ;lcd.c: 29: LATD = temp | LATD;
 22387  004860  5001               	movf	i2lcdNibble@temp,w,c
 22388  004862  108C               	iorwf	3980,w,c	;volatile
 22389  004864  6E8C               	movwf	3980,c	;volatile
 22390                           
 22391                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22392  004866  868C               	bsf	3980,3,c	;volatile
 22393                           
 22394                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22395  004868  0E42               	movlw	66
 22396  00486A                     i2u978_47:
 22397  00486A  2EE8               	decfsz	wreg,f,c
 22398  00486C  D7FE               	bra	i2u978_47
 22399  00486E  D000               	nop2	
 22400                           
 22401                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22402  004870  968C               	bcf	3980,3,c	;volatile
 22403                           
 22404                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22405  004872  0E42               	movlw	66
 22406  004874                     i2u979_47:
 22407  004874  2EE8               	decfsz	wreg,f,c
 22408  004876  D7FE               	bra	i2u979_47
 22409  004878  D000               	nop2	
 22410                           
 22411                           ;lcd.c: 36: data = data << 4;
 22412  00487A  3802               	swapf	i2lcdNibble@data,w,c
 22413  00487C  0BF0               	andlw	240
 22414  00487E  6E02               	movwf	i2lcdNibble@data,c
 22415                           
 22416                           ;lcd.c: 38: temp = data & 0xF0;
 22417  004880  5002               	movf	i2lcdNibble@data,w,c
 22418  004882  0BF0               	andlw	240
 22419  004884  6E01               	movwf	i2lcdNibble@temp,c
 22420                           
 22421                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22422  004886  508C               	movf	3980,w,c	;volatile
 22423  004888  0B0F               	andlw	15
 22424  00488A  6E8C               	movwf	3980,c	;volatile
 22425                           
 22426                           ;lcd.c: 40: LATD = temp | LATD;
 22427  00488C  5001               	movf	i2lcdNibble@temp,w,c
 22428  00488E  108C               	iorwf	3980,w,c	;volatile
 22429  004890  6E8C               	movwf	3980,c	;volatile
 22430                           
 22431                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22432  004892  868C               	bsf	3980,3,c	;volatile
 22433                           
 22434                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22435  004894  0E42               	movlw	66
 22436  004896                     i2u980_47:
 22437  004896  2EE8               	decfsz	wreg,f,c
 22438  004898  D7FE               	bra	i2u980_47
 22439  00489A  D000               	nop2	
 22440                           
 22441                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22442  00489C  968C               	bcf	3980,3,c	;volatile
 22443                           
 22444                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22445  00489E  0E42               	movlw	66
 22446  0048A0                     i2u981_47:
 22447  0048A0  2EE8               	decfsz	wreg,f,c
 22448  0048A2  D7FE               	bra	i2u981_47
 22449  0048A4  D000               	nop2	
 22450  0048A6  0012               	return		;funcret
 22451  0048A8                     __end_ofi2_lcdNibble:
 22452                           	opt stack 0
 22453                           pclatu	equ	0xFFB
 22454                           pclath	equ	0xFFA
 22455                           tblptru	equ	0xFF8
 22456                           tblptrh	equ	0xFF7
 22457                           tblptrl	equ	0xFF6
 22458                           tablat	equ	0xFF5
 22459                           prodh	equ	0xFF4
 22460                           prodl	equ	0xFF3
 22461                           intcon	equ	0xFF2
 22462                           intcon2	equ	0xFF1
 22463                           intcon3	equ	0xFF0
 22464                           indf0	equ	0xFEF
 22465                           postinc0	equ	0xFEE
 22466                           fsr0h	equ	0xFEA
 22467                           fsr0l	equ	0xFE9
 22468                           wreg	equ	0xFE8
 22469                           postdec1	equ	0xFE5
 22470                           fsr1h	equ	0xFE2
 22471                           fsr1l	equ	0xFE1
 22472                           indf2	equ	0xFDF
 22473                           postinc2	equ	0xFDE
 22474                           postdec2	equ	0xFDD
 22475                           fsr2h	equ	0xFDA
 22476                           fsr2l	equ	0xFD9
 22477                           status	equ	0xFD8
 22478                           
 22479 ;; *************** function i2_getRTC *****************
 22480 ;; Defined at:
 22481 ;;		line 44 in file "RTC.c"
 22482 ;; Parameters:    Size  Location     Type
 22483 ;;		None
 22484 ;; Auto vars:     Size  Location     Type
 22485 ;;  getRTC          2    3[COMRAM] int 
 22486 ;; Return value:  Size  Location     Type
 22487 ;;                  1    wreg      void 
 22488 ;; Registers used:
 22489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22490 ;; Tracked objects:
 22491 ;;		On entry : 0/0
 22492 ;;		On exit  : 0/0
 22493 ;;		Unchanged: 0/0
 22494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22499 ;;Total ram usage:        2 bytes
 22500 ;; Hardware stack levels used:    1
 22501 ;; Hardware stack levels required when called:    2
 22502 ;; This function calls:
 22503 ;;		i2_I2C_Master_Read
 22504 ;;		i2_I2C_Master_Start
 22505 ;;		i2_I2C_Master_Stop
 22506 ;;		i2_I2C_Master_Write
 22507 ;; This function is called by:
 22508 ;;		_printSortTimer
 22509 ;;		i2_printRTC
 22510 ;; This function uses a non-reentrant model
 22511 ;;
 22512                           
 22513                           	psect	text87
 22514  0045A4                     __ptext87:
 22515                           	opt stack 0
 22516  0045A4                     i2_getRTC:
 22517                           	opt stack 18
 22518                           
 22519                           ;RTC.c: 48: I2C_Master_Start();
 22520                           
 22521                           ;incstack = 0
 22522  0045A4  EC30  F028         	call	i2_I2C_Master_Start	;wreg free
 22523                           
 22524                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22525  0045A8  0E00               	movlw	0
 22526  0045AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22527  0045AC  0ED0               	movlw	208
 22528  0045AE  6E02               	movwf	i2I2C_Master_Write@d,c
 22529  0045B0  EC1B  F028         	call	i2_I2C_Master_Write	;wreg free
 22530                           
 22531                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22532  0045B4  0E00               	movlw	0
 22533  0045B6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22534  0045B8  0E00               	movlw	0
 22535  0045BA  6E02               	movwf	i2I2C_Master_Write@d,c
 22536  0045BC  EC1B  F028         	call	i2_I2C_Master_Write	;wreg free
 22537                           
 22538                           ;RTC.c: 51: I2C_Master_Stop();
 22539  0045C0  EC2C  F028         	call	i2_I2C_Master_Stop	;wreg free
 22540                           
 22541                           ;RTC.c: 54: I2C_Master_Start();
 22542  0045C4  EC30  F028         	call	i2_I2C_Master_Start	;wreg free
 22543                           
 22544                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22545  0045C8  0E00               	movlw	0
 22546  0045CA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22547  0045CC  0ED1               	movlw	209
 22548  0045CE  6E02               	movwf	i2I2C_Master_Write@d,c
 22549  0045D0  EC1B  F028         	call	i2_I2C_Master_Write	;wreg free
 22550                           
 22551                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22552  0045D4  0E00               	movlw	0
 22553  0045D6  6E05               	movwf	i2getRTC@i+1,c
 22554  0045D8  0E00               	movlw	0
 22555  0045DA  6E04               	movwf	i2getRTC@i,c
 22556  0045DC                     i2l6142:
 22557  0045DC  BE05               	btfsc	i2getRTC@i+1,7,c
 22558  0045DE  D006               	goto	i2l6146
 22559  0045E0  5005               	movf	i2getRTC@i+1,w,c
 22560  0045E2  E111               	bnz	i2l6152
 22561  0045E4  0E06               	movlw	6
 22562  0045E6  5C04               	subwf	i2getRTC@i,w,c
 22563  0045E8  B0D8               	btfsc	status,0,c
 22564  0045EA  D00D               	goto	i2l6152
 22565  0045EC                     i2l6146:
 22566                           
 22567                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22568  0045EC  0E24               	movlw	low _time
 22569  0045EE  2404               	addwf	i2getRTC@i,w,c
 22570  0045F0  6ED9               	movwf	fsr2l,c
 22571  0045F2  0E01               	movlw	high _time
 22572  0045F4  2005               	addwfc	i2getRTC@i+1,w,c
 22573  0045F6  6EDA               	movwf	fsr2h,c
 22574  0045F8  0E01               	movlw	1
 22575  0045FA  EC6D  F027         	call	i2_I2C_Master_Read
 22576  0045FE  6EDF               	movwf	indf2,c
 22577  004600  4A04               	infsnz	i2getRTC@i,f,c
 22578  004602  2A05               	incf	i2getRTC@i+1,f,c
 22579  004604  D7EB               	goto	i2l6142
 22580  004606                     i2l6152:
 22581                           
 22582                           ;RTC.c: 58: }
 22583                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22584  004606  0E00               	movlw	0
 22585  004608  EC6D  F027         	call	i2_I2C_Master_Read
 22586  00460C  0101               	movlb	1	; () banked
 22587  00460E  6F2A               	movwf	(_time+6)& (0+255),b
 22588                           
 22589                           ;RTC.c: 60: I2C_Master_Stop();
 22590  004610  EC2C  F028         	call	i2_I2C_Master_Stop	;wreg free
 22591  004614  0012               	return		;funcret
 22592  004616                     __end_ofi2_getRTC:
 22593                           	opt stack 0
 22594                           pclatu	equ	0xFFB
 22595                           pclath	equ	0xFFA
 22596                           tblptru	equ	0xFF8
 22597                           tblptrh	equ	0xFF7
 22598                           tblptrl	equ	0xFF6
 22599                           tablat	equ	0xFF5
 22600                           prodh	equ	0xFF4
 22601                           prodl	equ	0xFF3
 22602                           intcon	equ	0xFF2
 22603                           intcon2	equ	0xFF1
 22604                           intcon3	equ	0xFF0
 22605                           indf0	equ	0xFEF
 22606                           postinc0	equ	0xFEE
 22607                           fsr0h	equ	0xFEA
 22608                           fsr0l	equ	0xFE9
 22609                           wreg	equ	0xFE8
 22610                           postdec1	equ	0xFE5
 22611                           fsr1h	equ	0xFE2
 22612                           fsr1l	equ	0xFE1
 22613                           indf2	equ	0xFDF
 22614                           postinc2	equ	0xFDE
 22615                           postdec2	equ	0xFDD
 22616                           fsr2h	equ	0xFDA
 22617                           fsr2l	equ	0xFD9
 22618                           status	equ	0xFD8
 22619                           
 22620 ;; *************** function i2_I2C_Master_Write *****************
 22621 ;; Defined at:
 22622 ;;		line 49 in file "I2C.c"
 22623 ;; Parameters:    Size  Location     Type
 22624 ;;  d               2    1[COMRAM] unsigned int 
 22625 ;; Auto vars:     Size  Location     Type
 22626 ;;		None
 22627 ;; Return value:  Size  Location     Type
 22628 ;;                  1    wreg      void 
 22629 ;; Registers used:
 22630 ;;		wreg, status,2, status,0, cstack
 22631 ;; Tracked objects:
 22632 ;;		On entry : 0/0
 22633 ;;		On exit  : 0/0
 22634 ;;		Unchanged: 0/0
 22635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22636 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;Total ram usage:        2 bytes
 22641 ;; Hardware stack levels used:    1
 22642 ;; Hardware stack levels required when called:    1
 22643 ;; This function calls:
 22644 ;;		i2_I2C_Master_Wait
 22645 ;; This function is called by:
 22646 ;;		i2_getRTC
 22647 ;; This function uses a non-reentrant model
 22648 ;;
 22649                           
 22650                           	psect	text88
 22651  005036                     __ptext88:
 22652                           	opt stack 0
 22653  005036                     i2_I2C_Master_Write:
 22654                           	opt stack 18
 22655                           
 22656                           ;I2C.c: 51: I2C_Master_Wait();
 22657                           
 22658                           ;incstack = 0
 22659  005036  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22660                           
 22661                           ;I2C.c: 52: SSPBUF = d;
 22662  00503A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22663  00503E  0012               	return		;funcret
 22664  005040                     __end_ofi2_I2C_Master_Write:
 22665                           	opt stack 0
 22666                           pclatu	equ	0xFFB
 22667                           pclath	equ	0xFFA
 22668                           tblptru	equ	0xFF8
 22669                           tblptrh	equ	0xFF7
 22670                           tblptrl	equ	0xFF6
 22671                           tablat	equ	0xFF5
 22672                           prodh	equ	0xFF4
 22673                           prodl	equ	0xFF3
 22674                           intcon	equ	0xFF2
 22675                           intcon2	equ	0xFF1
 22676                           intcon3	equ	0xFF0
 22677                           indf0	equ	0xFEF
 22678                           postinc0	equ	0xFEE
 22679                           fsr0h	equ	0xFEA
 22680                           fsr0l	equ	0xFE9
 22681                           wreg	equ	0xFE8
 22682                           postdec1	equ	0xFE5
 22683                           fsr1h	equ	0xFE2
 22684                           fsr1l	equ	0xFE1
 22685                           indf2	equ	0xFDF
 22686                           postinc2	equ	0xFDE
 22687                           postdec2	equ	0xFDD
 22688                           fsr2h	equ	0xFDA
 22689                           fsr2l	equ	0xFD9
 22690                           status	equ	0xFD8
 22691                           
 22692 ;; *************** function i2_I2C_Master_Stop *****************
 22693 ;; Defined at:
 22694 ;;		line 43 in file "I2C.c"
 22695 ;; Parameters:    Size  Location     Type
 22696 ;;		None
 22697 ;; Auto vars:     Size  Location     Type
 22698 ;;		None
 22699 ;; Return value:  Size  Location     Type
 22700 ;;                  1    wreg      void 
 22701 ;; Registers used:
 22702 ;;		wreg, status,2, status,0, cstack
 22703 ;; Tracked objects:
 22704 ;;		On entry : 0/0
 22705 ;;		On exit  : 0/0
 22706 ;;		Unchanged: 0/0
 22707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22712 ;;Total ram usage:        0 bytes
 22713 ;; Hardware stack levels used:    1
 22714 ;; Hardware stack levels required when called:    1
 22715 ;; This function calls:
 22716 ;;		i2_I2C_Master_Wait
 22717 ;; This function is called by:
 22718 ;;		i2_getRTC
 22719 ;; This function uses a non-reentrant model
 22720 ;;
 22721                           
 22722                           	psect	text89
 22723  005058                     __ptext89:
 22724                           	opt stack 0
 22725  005058                     i2_I2C_Master_Stop:
 22726                           	opt stack 18
 22727                           
 22728                           ;I2C.c: 45: I2C_Master_Wait();
 22729                           
 22730                           ;incstack = 0
 22731  005058  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22732                           
 22733                           ;I2C.c: 46: PEN = 1;
 22734  00505C  84C5               	bsf	4037,2,c	;volatile
 22735  00505E  0012               	return		;funcret
 22736  005060                     __end_ofi2_I2C_Master_Stop:
 22737                           	opt stack 0
 22738                           pclatu	equ	0xFFB
 22739                           pclath	equ	0xFFA
 22740                           tblptru	equ	0xFF8
 22741                           tblptrh	equ	0xFF7
 22742                           tblptrl	equ	0xFF6
 22743                           tablat	equ	0xFF5
 22744                           prodh	equ	0xFF4
 22745                           prodl	equ	0xFF3
 22746                           intcon	equ	0xFF2
 22747                           intcon2	equ	0xFF1
 22748                           intcon3	equ	0xFF0
 22749                           indf0	equ	0xFEF
 22750                           postinc0	equ	0xFEE
 22751                           fsr0h	equ	0xFEA
 22752                           fsr0l	equ	0xFE9
 22753                           wreg	equ	0xFE8
 22754                           postdec1	equ	0xFE5
 22755                           fsr1h	equ	0xFE2
 22756                           fsr1l	equ	0xFE1
 22757                           indf2	equ	0xFDF
 22758                           postinc2	equ	0xFDE
 22759                           postdec2	equ	0xFDD
 22760                           fsr2h	equ	0xFDA
 22761                           fsr2l	equ	0xFD9
 22762                           status	equ	0xFD8
 22763                           
 22764 ;; *************** function i2_I2C_Master_Start *****************
 22765 ;; Defined at:
 22766 ;;		line 31 in file "I2C.c"
 22767 ;; Parameters:    Size  Location     Type
 22768 ;;		None
 22769 ;; Auto vars:     Size  Location     Type
 22770 ;;		None
 22771 ;; Return value:  Size  Location     Type
 22772 ;;                  1    wreg      void 
 22773 ;; Registers used:
 22774 ;;		wreg, status,2, status,0, cstack
 22775 ;; Tracked objects:
 22776 ;;		On entry : 0/0
 22777 ;;		On exit  : 0/0
 22778 ;;		Unchanged: 0/0
 22779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22784 ;;Total ram usage:        0 bytes
 22785 ;; Hardware stack levels used:    1
 22786 ;; Hardware stack levels required when called:    1
 22787 ;; This function calls:
 22788 ;;		i2_I2C_Master_Wait
 22789 ;; This function is called by:
 22790 ;;		i2_getRTC
 22791 ;; This function uses a non-reentrant model
 22792 ;;
 22793                           
 22794                           	psect	text90
 22795  005060                     __ptext90:
 22796                           	opt stack 0
 22797  005060                     i2_I2C_Master_Start:
 22798                           	opt stack 18
 22799                           
 22800                           ;I2C.c: 33: I2C_Master_Wait();
 22801                           
 22802                           ;incstack = 0
 22803  005060  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22804                           
 22805                           ;I2C.c: 34: SEN = 1;
 22806  005064  80C5               	bsf	4037,0,c	;volatile
 22807  005066  0012               	return		;funcret
 22808  005068                     __end_ofi2_I2C_Master_Start:
 22809                           	opt stack 0
 22810                           pclatu	equ	0xFFB
 22811                           pclath	equ	0xFFA
 22812                           tblptru	equ	0xFF8
 22813                           tblptrh	equ	0xFF7
 22814                           tblptrl	equ	0xFF6
 22815                           tablat	equ	0xFF5
 22816                           prodh	equ	0xFF4
 22817                           prodl	equ	0xFF3
 22818                           intcon	equ	0xFF2
 22819                           intcon2	equ	0xFF1
 22820                           intcon3	equ	0xFF0
 22821                           indf0	equ	0xFEF
 22822                           postinc0	equ	0xFEE
 22823                           fsr0h	equ	0xFEA
 22824                           fsr0l	equ	0xFE9
 22825                           wreg	equ	0xFE8
 22826                           postdec1	equ	0xFE5
 22827                           fsr1h	equ	0xFE2
 22828                           fsr1l	equ	0xFE1
 22829                           indf2	equ	0xFDF
 22830                           postinc2	equ	0xFDE
 22831                           postdec2	equ	0xFDD
 22832                           fsr2h	equ	0xFDA
 22833                           fsr2l	equ	0xFD9
 22834                           status	equ	0xFD8
 22835                           
 22836 ;; *************** function i2_I2C_Master_Read *****************
 22837 ;; Defined at:
 22838 ;;		line 55 in file "I2C.c"
 22839 ;; Parameters:    Size  Location     Type
 22840 ;;  a               1    wreg     unsigned char 
 22841 ;; Auto vars:     Size  Location     Type
 22842 ;;  a               1    1[COMRAM] unsigned char 
 22843 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22844 ;; Return value:  Size  Location     Type
 22845 ;;                  1    wreg      unsigned char 
 22846 ;; Registers used:
 22847 ;;		wreg, status,2, status,0, cstack
 22848 ;; Tracked objects:
 22849 ;;		On entry : 0/0
 22850 ;;		On exit  : 0/0
 22851 ;;		Unchanged: 0/0
 22852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;Total ram usage:        2 bytes
 22858 ;; Hardware stack levels used:    1
 22859 ;; Hardware stack levels required when called:    1
 22860 ;; This function calls:
 22861 ;;		i2_I2C_Master_Wait
 22862 ;; This function is called by:
 22863 ;;		i2_getRTC
 22864 ;; This function uses a non-reentrant model
 22865 ;;
 22866                           
 22867                           	psect	text91
 22868  004EDA                     __ptext91:
 22869                           	opt stack 0
 22870  004EDA                     i2_I2C_Master_Read:
 22871                           	opt stack 18
 22872                           
 22873                           ;incstack = 0
 22874                           ;i2I2C_Master_Read@a stored from wreg
 22875  004EDA  6E02               	movwf	i2I2C_Master_Read@a,c
 22876                           
 22877                           ;I2C.c: 57: unsigned char temp;
 22878                           ;I2C.c: 58: I2C_Master_Wait();
 22879  004EDC  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22880                           
 22881                           ;I2C.c: 59: RCEN = 1;
 22882  004EE0  86C5               	bsf	4037,3,c	;volatile
 22883                           
 22884                           ;I2C.c: 60: I2C_Master_Wait();
 22885  004EE2  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22886                           
 22887                           ;I2C.c: 61: temp = SSPBUF;
 22888  004EE6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22889                           
 22890                           ;I2C.c: 62: I2C_Master_Wait();
 22891  004EEA  ECF1  F027         	call	i2_I2C_Master_Wait	;wreg free
 22892                           
 22893                           ;I2C.c: 63: ACKDT = (a)?0:1;
 22894  004EEE  5002               	movf	i2I2C_Master_Read@a,w,c
 22895  004EF0  A4D8               	btfss	status,2,c
 22896  004EF2  D002               	goto	i2u426_40
 22897  004EF4  8AC5               	bsf	4037,5,c	;volatile
 22898  004EF6  D001               	goto	i2l5850
 22899  004EF8                     i2u426_40:
 22900  004EF8  9AC5               	bcf	4037,5,c	;volatile
 22901  004EFA                     i2l5850:
 22902                           
 22903                           ;I2C.c: 64: ACKEN = 1;
 22904  004EFA  88C5               	bsf	4037,4,c	;volatile
 22905                           
 22906                           ;I2C.c: 65: return temp;
 22907  004EFC  5003               	movf	i2I2C_Master_Read@temp,w,c
 22908  004EFE  0012               	return	
 22909  004F00                     __end_ofi2_I2C_Master_Read:
 22910                           	opt stack 0
 22911                           pclatu	equ	0xFFB
 22912                           pclath	equ	0xFFA
 22913                           tblptru	equ	0xFF8
 22914                           tblptrh	equ	0xFF7
 22915                           tblptrl	equ	0xFF6
 22916                           tablat	equ	0xFF5
 22917                           prodh	equ	0xFF4
 22918                           prodl	equ	0xFF3
 22919                           intcon	equ	0xFF2
 22920                           intcon2	equ	0xFF1
 22921                           intcon3	equ	0xFF0
 22922                           indf0	equ	0xFEF
 22923                           postinc0	equ	0xFEE
 22924                           fsr0h	equ	0xFEA
 22925                           fsr0l	equ	0xFE9
 22926                           wreg	equ	0xFE8
 22927                           postdec1	equ	0xFE5
 22928                           fsr1h	equ	0xFE2
 22929                           fsr1l	equ	0xFE1
 22930                           indf2	equ	0xFDF
 22931                           postinc2	equ	0xFDE
 22932                           postdec2	equ	0xFDD
 22933                           fsr2h	equ	0xFDA
 22934                           fsr2l	equ	0xFD9
 22935                           status	equ	0xFD8
 22936                           
 22937 ;; *************** function i2_I2C_Master_Wait *****************
 22938 ;; Defined at:
 22939 ;;		line 26 in file "I2C.c"
 22940 ;; Parameters:    Size  Location     Type
 22941 ;;		None
 22942 ;; Auto vars:     Size  Location     Type
 22943 ;;		None
 22944 ;; Return value:  Size  Location     Type
 22945 ;;                  1    wreg      void 
 22946 ;; Registers used:
 22947 ;;		wreg, status,2, status,0
 22948 ;; Tracked objects:
 22949 ;;		On entry : 0/0
 22950 ;;		On exit  : 0/0
 22951 ;;		Unchanged: 0/0
 22952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22957 ;;Total ram usage:        1 bytes
 22958 ;; Hardware stack levels used:    1
 22959 ;; This function calls:
 22960 ;;		Nothing
 22961 ;; This function is called by:
 22962 ;;		i2_I2C_Master_Start
 22963 ;;		i2_I2C_Master_Stop
 22964 ;;		i2_I2C_Master_Write
 22965 ;;		i2_I2C_Master_Read
 22966 ;; This function uses a non-reentrant model
 22967 ;;
 22968                           
 22969                           	psect	text92
 22970  004FE2                     __ptext92:
 22971                           	opt stack 0
 22972  004FE2                     i2_I2C_Master_Wait:
 22973                           	opt stack 18
 22974  004FE2                     i2l66:
 22975  004FE2  B4C7               	btfsc	4039,2,c	;volatile
 22976  004FE4  D7FE               	goto	i2l66
 22977  004FE6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 22978  004FEA  0E1F               	movlw	31
 22979  004FEC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 22980  004FEE  B4D8               	btfsc	status,2,c
 22981  004FF0  0012               	return	
 22982  004FF2  D7F7               	goto	i2l66
 22983  004FF4                     __end_ofi2_I2C_Master_Wait:
 22984                           	opt stack 0
 22985                           pclatu	equ	0xFFB
 22986                           pclath	equ	0xFFA
 22987                           tblptru	equ	0xFF8
 22988                           tblptrh	equ	0xFF7
 22989                           tblptrl	equ	0xFF6
 22990                           tablat	equ	0xFF5
 22991                           prodh	equ	0xFF4
 22992                           prodl	equ	0xFF3
 22993                           intcon	equ	0xFF2
 22994                           intcon2	equ	0xFF1
 22995                           intcon3	equ	0xFF0
 22996                           indf0	equ	0xFEF
 22997                           postinc0	equ	0xFEE
 22998                           fsr0h	equ	0xFEA
 22999                           fsr0l	equ	0xFE9
 23000                           wreg	equ	0xFE8
 23001                           postdec1	equ	0xFE5
 23002                           fsr1h	equ	0xFE2
 23003                           fsr1l	equ	0xFE1
 23004                           indf2	equ	0xFDF
 23005                           postinc2	equ	0xFDE
 23006                           postdec2	equ	0xFDD
 23007                           fsr2h	equ	0xFDA
 23008                           fsr2l	equ	0xFD9
 23009                           status	equ	0xFD8
 23010                           pclatu	equ	0xFFB
 23011                           pclath	equ	0xFFA
 23012                           tblptru	equ	0xFF8
 23013                           tblptrh	equ	0xFF7
 23014                           tblptrl	equ	0xFF6
 23015                           tablat	equ	0xFF5
 23016                           prodh	equ	0xFF4
 23017                           prodl	equ	0xFF3
 23018                           intcon	equ	0xFF2
 23019                           intcon2	equ	0xFF1
 23020                           intcon3	equ	0xFF0
 23021                           indf0	equ	0xFEF
 23022                           postinc0	equ	0xFEE
 23023                           fsr0h	equ	0xFEA
 23024                           fsr0l	equ	0xFE9
 23025                           wreg	equ	0xFE8
 23026                           postdec1	equ	0xFE5
 23027                           fsr1h	equ	0xFE2
 23028                           fsr1l	equ	0xFE1
 23029                           indf2	equ	0xFDF
 23030                           postinc2	equ	0xFDE
 23031                           postdec2	equ	0xFDD
 23032                           fsr2h	equ	0xFDA
 23033                           fsr2l	equ	0xFD9
 23034                           status	equ	0xFD8
 23035                           
 23036                           	psect	rparam
 23037  0000                     pclatu	equ	0xFFB
 23038                           pclath	equ	0xFFA
 23039                           tblptru	equ	0xFF8
 23040                           tblptrh	equ	0xFF7
 23041                           tblptrl	equ	0xFF6
 23042                           tablat	equ	0xFF5
 23043                           prodh	equ	0xFF4
 23044                           prodl	equ	0xFF3
 23045                           intcon	equ	0xFF2
 23046                           intcon2	equ	0xFF1
 23047                           intcon3	equ	0xFF0
 23048                           indf0	equ	0xFEF
 23049                           postinc0	equ	0xFEE
 23050                           fsr0h	equ	0xFEA
 23051                           fsr0l	equ	0xFE9
 23052                           wreg	equ	0xFE8
 23053                           postdec1	equ	0xFE5
 23054                           fsr1h	equ	0xFE2
 23055                           fsr1l	equ	0xFE1
 23056                           indf2	equ	0xFDF
 23057                           postinc2	equ	0xFDE
 23058                           postdec2	equ	0xFDD
 23059                           fsr2h	equ	0xFDA
 23060                           fsr2l	equ	0xFD9
 23061                           status	equ	0xFD8
 23062                           
 23063                           	psect	temp
 23064  00007E                     btemp:
 23065                           	opt stack 0
 23066  00007E                     	ds	1
 23067  0000                     int$flags	set	btemp
 23068                           pclatu	equ	0xFFB
 23069                           pclath	equ	0xFFA
 23070                           tblptru	equ	0xFF8
 23071                           tblptrh	equ	0xFF7
 23072                           tblptrl	equ	0xFF6
 23073                           tablat	equ	0xFF5
 23074                           prodh	equ	0xFF4
 23075                           prodl	equ	0xFF3
 23076                           intcon	equ	0xFF2
 23077                           intcon2	equ	0xFF1
 23078                           intcon3	equ	0xFF0
 23079                           indf0	equ	0xFEF
 23080                           postinc0	equ	0xFEE
 23081                           fsr0h	equ	0xFEA
 23082                           fsr0l	equ	0xFE9
 23083                           wreg	equ	0xFE8
 23084                           postdec1	equ	0xFE5
 23085                           fsr1h	equ	0xFE2
 23086                           fsr1l	equ	0xFE1
 23087                           indf2	equ	0xFDF
 23088                           postinc2	equ	0xFDE
 23089                           postdec2	equ	0xFDD
 23090                           fsr2h	equ	0xFDA
 23091                           fsr2l	equ	0xFD9
 23092                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201753
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23225
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17707
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75643
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 12:28:40 2017

                                    _i 0131                     i2_I2C_Master_Start 5060  
                   i2_I2C_Master_Write 5036                                     l66 4FCE  
                                   _ID 3428                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 24C2                                    l491 3EBE  
                                  l740 123C                                    l750 12E8  
                                  l761 13F6                                    l753 1322  
                                  l852 44F8                                    l772 14C0  
                                  l774 14D2                                    l758 13BC  
                                  l791 3530                                    l775 14E6  
                                  l792 354A                                    l776 14FA  
                                  l777 150E                                    l778 1524  
                                  l795 35E2                                    l988 3C8C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3772                    _log_count_can_w_lab 0073  
      __end_of_change_state_to_menu_11 4C68        __end_of_change_state_to_menu_12 4AD8  
      __end_of_change_state_to_menu_22 4AA0        __end_of_change_state_to_menu_23 4C38  
         _f_can_coming_to_distribution 0069                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4D58        __end_of_change_state_to_logs_12 4D28  
      __end_of_change_state_to_logs_22 4CF8        __end_of_change_state_to_logs_23 4DE2  
      __end_of_change_state_to_logs_33 4CC8        __end_of_change_state_to_logs_34 4C98  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1001 4FB0                                   l1010 3A20  
                                 l1102 3BB4                                   l1105 3BD4  
                                 l1210 0782                                   l1301 4300  
                                 l1126 3DAC                                   l1215 0858  
                                 l1135 216C                                   l1240 43AE  
                                 l1232 435C                                   l1161 007C  
                                 l1129 3DB0                                   l1330 3710  
                                 l1234 4360                                   l1138 2170  
                                 l1331 372A                                   l1235 4364  
                                 l1171 018C                                   l1236 4368  
                                 l1228 4340                                   l1308 4310  
                                 l1172 01DA                                   l1164 0080  
                                 l1325 36C4                                   l1237 436C  
                                 l1173 0240                                   l1238 4370  
                                 l1270 2BDA                                   l1174 028E  
                                 l1255 47F0                                   l1168 0126  
                                 l1249 47E0                                   l1273 2B76  
                                 l1277 2BBA                                   l1366 182A  
                                 l1198 05E8                                   l1279 2BD4  
                                 l1813 44B2                                   l1823 46D6  
                                 l1760 404C                                   l6010 1882  
                                 l6004 1862                                   l6022 18BE  
                                 l6040 193C                                   l6032 1918  
                                 l6008 187C                                   l6104 44E4  
                                 l6120 3FE0                                   l6034 1922  
                                 l6106 450E                                   l6130 403A  
                                 l6122 3FE6                                   l7002 13D6  
                                 l6052 197E                                   l6028 18E0  
                                 l7004 13E0                                   l6062 19F0  
                                 l6046 1958                                   l6070 4AEE  
                                 l6118 3FD0                                   l7014 1410  
                                 l6048 1964                                   l6056 1992  
                                 l6064 19FC                                   l6080 428C  
                                 l7200 2F52                                   l6058 1998  
                                 l7202 2F80                                   l7130 34F0  
                                 l7114 34AA                                   l7018 1436  
                                 l7300 2278                                   l6076 4276  
                                 l6068 4AE2                                   l6340 2544  
                                 l6332 24CC                                   l6500 4082  
                                 l7036 149E                                   l8030 3692  
                                 l8110 3F84                                   l6086 42AC  
                                 l6350 25DA                                   l6342 2562  
                                 l6334 24EA                                   l6326 2440  
                                 l7126 34E0                                   l7118 34B8  
                                 l7070 157C                                   l7038 14A8  
                                 l5800 446E                                   l7400 00FA  
                                 l7312 22C8                                   l6352 25F8  
                                 l6344 2580                                   l6336 2508  
                                 l6360 2692                                   l8200 09BE  
                                 l7160 35A0                                   l5810 44A4  
                                 l5802 4474                                   l8026 3662  
                                 l7330 2356                                   l8114 3F98  
                                 l8106 3F76                                   l8130 4134  
                                 l6354 2616                                   l6346 259E  
                                 l6338 2526                                   l6506 40F8  
                                 l7074 1584                                   l7090 15DA  
                                 l5820 469E                                   l5740 4E22  
                                 l7404 0112                                   l6348 25BC  
                                 l8300 0BAA                                   l8212 09F2  
                                 l8204 09D0                                   l6700 4202  
                                 l7180 2E6C                                   l6604 4580  
                                 l7068 1546                                   l5822 46A4  
                                 l8054 36F0                                   l8046 36C6  
                                 l5742 4E34                                   l7510 0398  
                                 l7350 23CE                                   l7342 23BC  
                                 l7318 230A                                   l8150 41A0  
                                 l8142 417E                                   l8134 4148  
                                 l8126 4124                                   l6358 2634  
                                 l8310 0C40                                   l8302 0BC8  
                                 l8230 0A5C                                   l6542 3CF4  
                                 l6550 3D16                                   l7190 2EEA  
                                 l7174 2E1E                                   l7086 15C8  
                                 _ADIE 007CEE                                   l8056 36FA  
                                 l8048 36D6                                   l8072 376C  
                                 l7520 03C0                                   l8136 4154  
                                 l8320 0CD6                                   l8312 0C5E  
                                 l8304 0BE6                                   l8240 0A84  
                                 l8232 0A62                                   l8216 0A04  
                                 l8208 09DA                                   l7192 2F04  
                                 l7176 2E38                                   l7184 2E86  
                                 l7168 35E4                                   l6608 4598  
                                 l7088 15CE                                   l5826 46C8  
                                 l5818 4692                                   l8066 372C  
                                 l7610 059E                                   l7602 0564  
                                 l7514 03B0                                   l7506 038E  
                                 l7354 2404                                   l7338 2386  
                                 l7282 21C0                                   l8082 3F00  
                                 l8138 415A                                   l8146 418C  
                                 l8322 0CF4                                   l8314 0C7C  
                                 l8306 0C04                                   l6706 422E  
                                 l6554 3D2C                                   l6546 3CFE  
                                 l7194 2F1E                                   l7178 2E52  
                                 l7186 2EB4                                   l5940 1618  
                                 l8068 373C                                   l7700 0760  
                                 l7620 05C6                                   l7540 0434  
                                 l7532 0412                                   l7524 03D8  
                                 l7516 03B6                                   l5764 4DAC  
                                 l8340 0DDA                                   l8332 0DB8  
                                 l8316 0C9A                                   l8308 0C22  
                                 l8260 0AE4                                   l8236 0A6C  
                                 l7196 2F38                                   l6564 4E6A  
                                 l5782 4E5A                                   l5950 1656  
                                 l5934 15F2                                   l7614 05A8  
                                 l7550 045C                                   l7542 043A  
                                 l8094 3F34                                   l8502 1122  
                                 l8422 0FB2                                   l8414 0F90  
                                 l8350 0DF6                                   l8318 0CB8  
                                 l8326 0D12                                   l8246 0A92  
                                 l6558 3D36                                   l5944 1622  
                                 l7704 076A                                   l7624 05D0  
                                 l7536 041C                                   l7480 030A  
                                 l8096 3F40                                   l8088 3F16  
                                 l8512 113E                                   l8432 0FCE  
                                 l8336 0DC2                                   l8328 0D76  
                                 l8264 0AEE                                   l8520 1162  
                                 l6568 4E80                                   l6592 4556  
                                 l6496 406C                                   l6912 11FA  
                                 l5970 1716                                   l5938 1606  
                                 l7642 063A                                   l7618 05C0  
                                 l7562 04A0                                   l7546 0444  
                                 l7490 0332                                   l7394 00EA  
                                 l8098 3F46                                   l8418 0F9A  
                                 l8354 0E0E                                   l8346 0DEC  
                                 l8282 0B3A                                   l8274 0B18  
                                 l6922 1244                                   l5980 178E  
                                 l7820 4338                                   l7732 07F4  
                                 l7724 07D2                                   l7652 0662  
                                 l7572 04C8                                   l7484 0314  
                                 l7396 00F0                                   l8516 1156  
                                 l8508 1134                                   l8436 0FE6  
                                 l8428 0FC4                                   l8268 0B06  
                                 l6588 4540                                   l5798 4462  
                                 l5982 17A6                                   l5966 1704  
                                 l5958 16D2                                   l7910 4374  
                                 l7742 081C                                   l7734 07FA  
                                 l7646 0652                                   l7638 0630  
                                 l7566 04B8                                   l7558 0496  
                                 l7494 033C                                   l8462 106E  
                                 l8454 104C                                   l8382 0EF6  
                                 l8374 0ED4                                   l8278 0B22  
                                 l8198 09B8                                   l5976 177C  
                                 l5968 1710                                   l5992 17F0  
                                 l7832 29C8                                   l7760 0878  
                                 l7728 07DC                                   l7672 06D6  
                                 l7664 06B4                                   l7656 067A  
                                 l7648 0658                                   l7592 053C  
                                 l7584 051A                                   l7576 04E0  
                                 l7568 04BE                                   l7488 032C  
                                 l8472 108A                                   l8392 0F12  
                                 l6696 41EC                                   l5986 17D2  
                                 l5978 1788                                   l7850 2A80  
                                 l7770 08A0                                   l7738 0804  
                                 l7690 0738                                   l7682 06FE  
                                 l7674 06DC                                   l7594 0542  
                                 l7498 0354                                   l8458 1056  
                                 l8378 0EDE                                   l8298 0B8C  
                                 l8802 39DA                                   l6954 12D2  
                                 l6938 1280                                   l5988 17EA  
                                 l7852 2A86                                   l7764 0882  
                                 l7748 0842                                   l7668 06BE  
                                 l7588 0524                                   l8476 10A2  
                                 l8468 1080                                   l8396 0F2A  
                                 l8388 0F08                                   l6964 1302  
                                 l7870 2B3E                                   l7774 08AA  
                                 l7758 0872                                   l7694 0742  
                                 l7678 06E6                                   l7598 054C  
                                 l8814 3B56                                   l8494 1100  
                                 l6966 130C                                   l7768 089A  
                                 l8840 3BF2                                   l8832 3BDA  
                                 l6992 13A6                                   l6976 133C  
                                 l8920 3E84                                   l7882 2B60  
                                 l7778 08C2                                   l7698 075A  
                                 l8850 3C10                                   l8842 3BF8  
                                 l8834 3BE0                                   l8498 110A  
                                 l7892 2B90                                   l8844 3BFE  
                                 l8836 3BE6                                   l8924 3E92  
                                 l8846 3C04                                   l8838 3BEC  
                                 l8854 3C16                                   l8926 3E98  
                                 l8942 3EC0                                   l8918 3E6E  
                                 l7896 2BA4                                   l8848 3C0A  
                                 l8776 3942                                   l8936 3EB4  
                                 l8928 3E9E                                   l8778 3956  
                                 l8938 3EBA                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4160 4DAA  
                                 u6020 0126                                   u5070 24C2  
                                 u5055 4710                                   u4440 1750  
                                 u6040 01DA                                   u4360 498A  
                                 u4370 498C                                   _PEIE 007F96  
                                 u6060 028E                                   u4380 49D6  
                                 u5420 1206                                   u4381 49D2  
                                 u4390 49D8                                   u4447 1746  
                                 u4480 17C8                                   u5440 123C  
                                 u5700 3476                                   _RCEN 007E2B  
                                 u5438 120A                                   u4487 17BE  
                                 u6600 2A0C                                   u5810 35E2  
                                 u6620 2AC8                                   u5708 347A  
                                 u6630 2ACA                                   u9007 2364  
                                 u5920 23AA                                   u5808 35B0  
                                 u9017 3D5C                                   u8217 118A  
                                 i2l66 4FE2                                   u6811 36BA  
                                 u9107 01BA                                   u9027 3DA0  
                                 u8307 13C8                                   u8227 12A0  
                                 u6820 36BC                                   u9117 01EA  
                                 u9037 3DC2                                   u8317 13FA  
                                 u8237 12EC                                   u6750 3624  
                                 u6590 2A0A                                   u5950 23F2  
                                 u5790 35AC                                   u9207 044C  
                                 u9127 0250                                   u9047 002C  
                                 u8407 14EA                                   u8327 1404  
                                 u8247 12F4                                   u6920 375A  
                                 u6760 3680                                   u5928 23AE  
                                 u5880 2202                                   u9217 04A8  
                                 u9137 026E                                   u9057 0070  
                                 u8417 14F4                                   u8337 141E  
                                 u8257 1326                                   u5890 2204  
                                 u9307 06EE                                   u9227 04D0  
                                 u9147 029E                                   u9067 0092  
                                 u8507 343E                                   u8427 14FE  
                                 u8347 1454                                   u8267 1330  
                                 u6861 36E6                                   u9317 074A  
                                 u9237 052C                                   u9157 031C  
                                 u9077 0102                                   u8517 345C  
                                 u8437 1506                                   u8357 148C  
                                 u8277 134A                                   u6870 36E8  
                                 u6758 3628                                   u5958 23F6  
                                 u9407 42CA                                   u9327 0772  
                                 u9247 0554                                   u9167 0344  
                                 u9087 0136                                   u8607 3CAA  
                                 u8527 3500                                   u8447 1512  
                                 u8367 14C4                                   u8287 1374  
                                 u6928 375E                                   u6768 3684  
                                 u9417 431A                                   u9337 0794  
                                 u9257 05B0                                   u9177 03A0  
                                 u9097 019C                                   u8617 3D06  
                                 u8537 3534                                   u8457 151C  
                                 u8377 14CC                                   u8297 13C0  
                                 u9507 2BBE                                   u9427 432E  
                                 u9347 07E4                                   u9267 05D8  
                                 u9187 03C8                                   u8707 0AF6  
                                 u8627 3D3E                                   u8547 353E  
                                 u8467 1534                                   u8387 14D6  
                                 u9517 2BC8                                   u9437 29A4  
                                 u9357 080C                                   u9277 0642  
                                 u9197 0424                                   u8717 0B2A  
                                 u8637 49E8                                   u8557 3564  
                                 u8477 15AE                                   u8397 14E0  
                                 u9607 1BA8                                   u9527 4E2A  
                                 u9447 2A20                                   u9367 085C  
                                 u9287 066A                                   u8807 0FD6  
                                 u8727 0B54                                   u8647 4A1C  
                                 u8567 4E76                                   u8487 4B62  
                                 u9617 1BDA                                   u9537 47AA  
                                 u9457 2A74                                   u9377 0866  
                                 u9297 06C6                                   u8817 1000  
                                 u8737 0DCA                                   u8657 08E2  
                                 u8577 2EDA                                   u8497 455E  
                                 u7970 3A20                                   u9707 35FC  
                                 u9627 1C26                                   u9547 1A2A  
                                 u9467 2ADE                                   u9387 088A  
                                 u8907 2160                                   u8827 105E  
                                 u8747 0DFE                                   u8667 09E2  
                                 u8587 2F8E                                   u9717 3714  
                                 u9637 1C72                                   u9557 1A76  
                                 u9477 2B32                                   u9397 08B2  
                                 u8917 2182                                   u8837 1092  
                                 u8757 0E28                                   u8677 0A1E  
                                 u8597 2FC0                                   u9727 371E  
                                 u9647 1CA6                                   u9567 1AC2  
                                 u9487 2B7A                                   u8927 21B0  
                                 u8847 10BC                                   u8767 0EE6  
                                 u8687 0A74                                   u9737 4636  
                                 u9657 1CD8                                   u9577 1AF6  
                                 u9497 2B82                                   u8937 2218  
                                 u8857 1112                                   u8777 0F1A  
                                 u8697 0AA0                                   u9747 4640  
                                 u9667 1D24                                   u9587 1B28  
                                 u8947 226C                                   u8867 1146  
                                 u8787 0F44                                   u9757 466C  
                                 u9677 1D58                                   u9597 1B74  
                                 u8957 228C                                   u8877 3B64  
                                 u8797 0FA2                                   u9767 4676  
                                 u9687 1D8A                                   u8967 22BA  
                                 u8887 3BA8                                   u9697 483A  
                                 u8977 22FE                                   u8897 211C  
                                 u8987 231C                                   u8997 234A  
                                 _RSEN 007E29                            _stopSignals 4F86  
                                 _Test 3B56                                   _back 0059  
                                 _main 3E24                                   _down 0061  
                                 _keys FAEF                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 4F24  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0071  
                      __end_ofi2_putch 5020                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2BDE                            i2_lcdNibble 4852  
                      __end_of_Loading 15E4                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3D4E  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3FA2  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 41AA                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 405E  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 44BC                        __end_of___lwmod 46E0  
                                i2l257 2992                                  i2l606 2C6C  
                                i2l923 389A                                  i2l925 38BA  
                                i2l919 384E                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A1C                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5014                        __end_of_handler 38F6  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4E3A  
                      __end_of_initLCD 4A26                         __CFG_EBTRB$OFF 000000  
                                _debug 005F                             i2isdigit@c 0003  
                                _getIR 4532                        __end_of_loadRTC 4236  
                      __end_of_readMAG 49E0                        __end_of_dpowers FB0A  
                                _first 006D                                  _enter 0063  
                      __end_of_isdigit 4E64                                  _input 007D  
                                _putch 4FF4                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4EDA  
                     __end_ofi2_getRTC 4616                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 210E  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4BA8                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 48FA                           __end_of_Test 3C6A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3EE4  
                         __end_of_keys FB00                           __end_of_sort 4F46  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1712 00B3                            _BlockerTest 35EE  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4BD8  
            i2_change_state_to_menu_22 4BA8                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1001 4FC6                                 i2l1366 1F7A  
                               i2l1813 48F0                                 i2l1823 4A5E  
                               i2l6202 1E8A                                 i2l6212 1EE2  
                               i2l6204 1E94                                 i2l6300 20F2  
                               i2l6142 45DC                                 i2l6222 1F2E  
                               i2l6214 1EEC                                 i2l6206 1E98  
                               i2l6152 4606                                 i2l6240 1FA8  
                               i2l6224 1F40                                 i2l6216 1EF2  
                               i2l6304 4B80                                 i2l6146 45EC  
                               i2l6218 1F04                                 i2l6170 1DAA  
                               i2l6306 4B88                                 i2l6244 1FC0  
                               i2l6228 1F44                                 i2l6180 1DCE  
                               i2l6270 203C                                 i2l6246 1FC4  
                               i2l6174 1DBA                                 i2l6264 2010  
                               i2l6176 1DC8                                 i2l9000 386C  
                               i2l6282 2068                                 i2l6258 1FF6  
                               i2l6194 1E62                                 i2l6186 1E00  
                               i2l9002 386E                                 i2l6284 2070  
                               i2l6292 2096                                 i2l6276 2052  
                               i2l6268 2034                                 i2l6294 209C  
                               i2l5912 4A54                                 i2l5904 4A34  
                               i2l6288 2084                                 i2l6480 3B0A  
                               i2l9024 38B8                                 i2l5850 4EFA  
                               i2l5906 4A3C                                 i2l6298 20EA  
                               i2l5908 4A40                                 i2l6476 3AFA  
                               i2l6812 333A                                 i2l6660 2CB8  
                               i2l6822 3360                                 i2l6806 332C  
                               i2l6750 3260                                 i2l6670 2D26  
                               i2l6662 2CCE                                 i2l6654 2C76  
                               i2l6488 3B3E                                 i2l6840 339A  
                               i2l6832 3382                                 i2l6816 3356  
                               i2l6760 328A                                 i2l6672 2D3C  
                               i2l6664 2CE4                                 i2l6656 2C8C  
                               i2l6680 2D7E                                 i2l6648 2C0A  
                               i2l8600 27E8                                 i2l5874 4F7E  
                               i2l6850 33BA                                 i2l6826 3374  
                               i2l6762 328E                                 i2l6674 2D52  
                               i2l6666 2CFA                                 i2l6658 2CA2  
                               i2l6682 2DD8                                 i2l5884 48BE  
                               i2l6828 3378                                 i2l6780 32C4  
                               i2l6772 32AC                                 i2l6676 2D68  
                               i2l6668 2D10                                 i2l8620 2836  
                               i2l8612 281A                                 i2l8604 27F6  
                               i2l8540 271A                                 i2l5886 48C6  
                               i2l6862 33F0                                 i2l6854 33CC  
                               i2l6846 33A8                                 i2l6782 32CA  
                               i2l6774 32B2                                 i2l6758 327A  
                               i2l8534 2706                                 i2l5896 48E6  
                               i2l5888 48CA                                 i2l6776 32B8  
                               i2l6768 3298                                 i2l8640 2884  
                               i2l8632 2868                                 i2l8624 2844  
                               i2l8616 2828                                 i2l8608 2804  
                               i2l8560 2752                                 i2l8552 2744  
                               i2l8544 2728                                 i2l8536 270C  
                               i2l6858 33DE                                 i2l6778 32BE  
                               i2l6786 32D0                                 i2l9370 2984  
                               i2l6868 33FA                                 i2l8660 28DA  
                               i2l8652 28B6                                 i2l8644 289A  
                               i2l8636 2876                                 i2l8628 285A  
                               i2l8580 279A                                 i2l8572 277E  
                               i2l8564 2760                                 i2l8548 2736  
                               i2l6798 3314                                 i2l9374 32E8  
                               i2l9366 2946                                 i2l9376 3304  
                               i2l9368 2968                                 i2l8672 2904  
                               i2l8664 28E8                                 i2l8656 28C4  
                               i2l8648 28A8                                 i2l8592 27C4  
                               i2l8584 27A8                                 i2l8576 278C  
                               i2l8568 276E                                 i2l8682 2928  
                               i2l8676 291A                                 i2l8668 28F6  
                               i2l8596 27DA                                 i2l8588 27B6  
                               i2l8864 3038                                 i2l8890 319E  
                               i2l8874 30A2                                 i2l8892 31A4  
                               i2l8868 3048                                 i2l8956 37EC  
                               i2l8964 3806                                 i2l8886 316A  
                               i2l8958 37F0                                 i2l8978 3822  
              _f_most_recent_sort_time 006B                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4E8C                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 4F24  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 302C                                 ___wmul 4B0E  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4B44                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 4236  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4F68                                 _initUI 4D58  
                               _readIR 4948                                 _logRun 38F6  
                               getIR@i 0087                                 clear_0 4920  
                               clear_1 492C                                 clear_2 4938  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 479C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 15E4  
                            ??_handler 0049                __size_of_initGlobalVars 0080  
                         ?_retrieveLog 0007                                 _strcpy 4AD8  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4EB4  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4E8C  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 48FA                       __end_of_printRTC 26D6  
                         __mediumconst FAEE                      __end_ofi2___lwmod 4A68  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 3E24                      __end_ofi2_lcdInst 502C  
                           _PusherTest 2996                      __end_ofi2_isdigit 4F86  
                           __accesstop 0080                __end_of__initialization 493E  
                        ?_inputHandler 002A                  _most_recent_sort_time 0133  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 4FB8  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 506A                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 5040  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 45A4  
                          i2printRTC@i 0041                          _initSortTimer 405E  
          __end_of_updateServoPosition 4532                          __end_of_putch 5004  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 35EE                             __end_of_UI 1170  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 4E0E  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4DE2  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 005B                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 3C6A               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3228 0135  
                    __end_of_SpeedTest 4340                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 43C4  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2333 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00E2                                i2_putch 5014  
                            ?_initTime 0080                        _f_loadingNewCan 00EA  
                      i2printRTC@month 003D                  __size_of_Distribution 0218  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 467E  
                              _Loading 1170            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 3EE4                                ___awmod 4108  
                           _initServos 47F8                                ___lldiv 3FA2  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4444                                ___lwmod 467E  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 48FA                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0140                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 43C4  
                              _lcdInst 5004                                _handler 0008  
                              __ptext0 3E24                                __ptext1 4F86  
                              __ptext2 4F24                                __ptext3 1170  
                              __ptext4 405E                                __ptext5 43C4  
                              __ptext6 4B44                                __ptext7 4532  
                              __ptext8 4948                                __ptext9 3428  
                      __size_of_printf 0438                                _readADC 4E0E  
                      __size_of_strcpy 0036                                _initLCD 49E0  
                              _cur_can 00E4                                _loadRTC 41AA  
                              _readMAG 4994                                _dpowers FB00  
                   actuatorTest@i_1660 00AE                     actuatorTest@i_1661 00AF  
                   actuatorTest@i_1653 00AD                     actuatorTest@i_1670 00B5  
                   actuatorTest@i_1663 00B0                     actuatorTest@i_1680 00BB  
                   actuatorTest@i_1672 00B6                     actuatorTest@i_1664 00B1  
                   actuatorTest@i_1673 00B7                     actuatorTest@i_1690 00C1  
                   actuatorTest@i_1682 00BC                     actuatorTest@i_1666 00B2  
                   actuatorTest@i_1683 00BD                     actuatorTest@i_1675 00B8  
                   actuatorTest@i_1667 00B3                     actuatorTest@i_1692 00C2  
                   actuatorTest@i_1676 00B9                     actuatorTest@i_1693 00C3  
                   actuatorTest@i_1685 00BE                     actuatorTest@i_1669 00B4  
                   actuatorTest@i_1686 00BF                     actuatorTest@i_1679 00BA  
                   actuatorTest@i_1689 00C0                                _isdigit 4E3A  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2E14                         __pintcode_body 3772  
                 end_of_initialization 493E                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3772                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 4444  
                           _sensorTest 210E                    __size_of_PusherTest 0248  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3428  
                         ??_BothServos 00AB                  __end_of_machineConfig 479C  
                           _updateMenu 26D6                      i2_I2C_Master_Read 4EDA  
                            _IR_signal 00DE                      i2_I2C_Master_Wait 4FE2  
                    i2_I2C_Master_Stop 5058                      i2___lwdiv@divisor 0008  
                      _log_count_total 0075                              i2___lwdiv 48A8  
                            i2___lwmod 4A26                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2E14                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 5020                          Loading@i_1103 00B6  
                        Loading@i_1104 00B8                          Loading@i_1106 00BA  
                        Loading@i_1107 00BC                          Loading@i_1109 00BE  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4F68                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DA0                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 4FB8                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4B44  
                       __end_of_getMAG 4B76                         __end_of_getRTC 42BC  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4D86  
                       __end_of_readIR 4994                         __end_of_logRun 3A36  
                     i2___wmul@product 0005                         __end_of_printf 1A1C  
                         i2printf@flag 0026                         __end_of_strcpy 4B0E  
            __end_ofi2_I2C_Master_Read 4F00              __end_ofi2_I2C_Master_Wait 4FF4  
                         i2printf@prec 001D                    start_initialization 48FA  
            __end_ofi2_I2C_Master_Stop 5060                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1339 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 42BC  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 4340                            ?_sensorTest 0001  
                          __pdataBANK1 0135                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1120 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2453 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 0216                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1977 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1708 00AF                        _count_pop_w_tab 005D  
                          _EEPROM_read 4FA0                     __end_of_PortTestA5 47F8  
                     _I2C_Master_Start 5050                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 502C                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEE                              _lcdNibble 4616  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2BDE  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3D4E                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 01C6                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5068  
           __end_ofi2_I2C_Master_Write 5040                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 3242  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u426_40 4EF8                               _PIR2bits 000FA1  
                             i2u526_40 2C6C                               i2u481_40 1EC6  
                             i2u481_47 1EBC                               i2u485_40 1F26  
                             i2u485_47 1F1C                               i2u980_47 4896  
                             i2u981_47 48A0                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                               i2u977_47 3280  
                             i2u978_47 486A                               i2u979_47 4874  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4EB4                          lcdNibble@data 0081  
                             i2_getRTC 45A4                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DA0                               i2_strcpy 4B76  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 490E                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4FCE                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0474                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4108  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4C38             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4AA0             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4A68                _change_state_to_menu_23 4C08  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4D28  
              _change_state_to_logs_12 4CF8                _change_state_to_logs_22 4CC8  
              _change_state_to_logs_23 4DB4                _change_state_to_logs_33 4C98  
              _change_state_to_logs_34 4C68                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 38EE  
                           _EEPROMTest 5068                        _I2C_Master_Init 46E0  
                     __size_of_readADC 002C                        _I2C_Master_Read 4D86  
                     __size_of_initLCD 0046                           _f_ID_receive 0065  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4FCE                        _I2C_Master_Stop 5048  
                     __size_of_isdigit 002A                               _delay_ms 4E64  
                       _printSortTimer 302C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3B56  
                             __ptext10 4E64                               __ptext11 2E14  
                             __ptext20 4DE2                               __ptext12 4740  
                             __ptext21 4F46                               __ptext13 38F6  
                             __ptext30 4D86                               __ptext22 49E0  
                             __ptext14 3C6A                               __ptext31 4FCE  
                             __ptext23 08CA                               __ptext15 4FA0  
                             __ptext40 0012                               __ptext32 4A68  
                             __ptext24 240C                               __ptext16 4D58  
                             __ptext41 42BC                               __ptext33 4AA0  
                             __ptext25 4AD8                               __ptext17 41AA  
                             __ptext50 35EE                               __ptext42 2996  
                             __ptext34 4108                               __ptext26 4236  
                             __ptext18 46E0                               __ptext51 15E4  
                             __ptext43 4E0E                               __ptext35 3EE4  
                             __ptext27 502C                               __ptext19 3FA2  
                             __ptext60 26D6                               __ptext52 4FF4  
                             __ptext44 4340                               __ptext36 3B56  
                             __ptext28 5048                               __ptext61 4E8C  
                             __ptext53 4E3A                               __ptext45 479C  
                             __ptext37 210E                               __ptext29 5050  
                             __ptext70 4C98                               __ptext62 2BDE  
                             __ptext54 4B0E                               __ptext46 5068  
                             __ptext38 4994                               __ptext71 4DB4  
                             __ptext63 4B76                               __ptext55 467E  
                             __ptext47 1A1C                               __ptext39 3D4E  
                             __ptext80 5014                               __ptext72 4CC8  
                             __ptext64 3242                               __ptext56 4444  
                             __ptext48 47F8                               __ptext81 4F68  
                             __ptext73 4CF8                               __ptext65 4BA8  
                             __ptext57 5004                               __ptext49 44BC  
                             __ptext90 5060                               __ptext82 4EB4  
                             __ptext74 4D28                               __ptext66 4BD8  
                             __ptext58 4616                               __ptext91 4EDA  
                             __ptext83 4A26                               __ptext75 4F00  
                             __ptext67 4C08                               __ptext92 4FE2  
                             __ptext84 48A8                               __ptext76 3A36  
                             __ptext68 4C38                               __ptext85 5020  
                             __ptext77 4FB8                               __ptext69 4C68  
                             __ptext86 4852                               __ptext78 302C  
                             __ptext87 45A4                               __ptext79 1DA0  
                             __ptext88 5036                               __ptext89 5058  
                             _dispLogs 4F00                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1977 0002                     __end_of_initServos 4852  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 4F46                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 44BC  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 240C                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0067                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4C08  
    __end_ofi2_change_state_to_menu_22 4BD8                               loadRTC@i 0096  
               __end_of_printSortTimer 3242                              putch@data 0082  
             __end_of_I2C_Master_Start 5058                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5036                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E0  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 240C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4FA0  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2996                __end_of_I2C_Master_Init 4740  
              __end_of_I2C_Master_Read 4DB4                __end_of_I2C_Master_Wait 4FE2  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5050  
                          lcdInst@data 0082                          printRTC@F3219 0139  
                         retrieveLog@i 000E                            _retrieveLog 3A36  
                  __end_ofi2_lcdNibble 48A8                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012F  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4740                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
